
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x000293f4 vaddr 0x000293f4 paddr 0x000293f4 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0002940c memsz 0x0002940c flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x0002940c align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00030148 vaddr 0x20000148 paddr 0x00029478 align 2**16
         filesz 0x00000000 memsz 0x0000de40 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              000213d4  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  000293f4  000293f4  00030144  2**0  CONTENTS
  3 .ARM.exidx         00000018  000293f4  000293f4  000293f4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00030144  2**0  CONTENTS
  6 .data              0000006c  200000d8  0002940c  000300d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00030144  2**0  CONTENTS
  8 .bss               0000de40  20000148  00029478  00030148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000df88  2000df88  00030148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000302f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00030333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000303b2  2**0  CONTENTS, READONLY
 13 .debug_line        0004b47a  00000000  00000000  000303b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        0008b035  00000000  00000000  0007b830  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000ef3e  00000000  00000000  00106865  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005f78  00000000  00000000  001157a8  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         00061f25  00000000  00000000  0011b720  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00013534  00000000  00000000  0017d645  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      0001a5d8  00000000  00000000  00190b79  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000f714  00000000  00000000  001ab154  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000064  00000000  00000000  001ba868  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00019e4a  00000000  00000000  001ba8cc  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    0003bc6a  00000000  00000000  001d4716  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
000293f4 l    d  .ARM.extab	00000000 .ARM.extab
000293f4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000df88 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 9mu0l0cofx40kg7
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbad l       .debug_str	00000000 
0001fba1 l       .debug_str	00000000 
00034ac4 l       .debug_str	00000000 
0005a750 l       .debug_str	00000000 
0005aeb7 l       .debug_str	00000000 
0005a184 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
00034af1 l       .debug_str	00000000 
00034ae3 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0005d3a9 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
0005c232 l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00003f42 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00034ab0 l       .debug_str	00000000 
0005fe6a l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039b6a l       .debug_str	00000000 
0005d253 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005aec5 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 uihlqvdlbzm5wxk
00001076 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
0000103b l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000010df l       .debug_str	00000000 
0000114a l       .debug_str	00000000 
00001186 l       .debug_str	00000000 
000011d3 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
0000121d l       .debug_str	00000000 
00001288 l       .debug_str	00000000 
000012a3 l       .debug_str	00000000 
0000130f l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0005b4d3 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0000136b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
0005d680 l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
0001692d l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0002329c l       .debug_str	00000000 
0005fdc6 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e9c l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001fb15 l       .debug_str	00000000 
00000eee l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
00000f20 l       .debug_str	00000000 
00000f59 l       .debug_str	00000000 
00000f82 l       .debug_str	00000000 
00016808 l       .debug_str	00000000 
00000f99 l       .debug_str	00000000 
00000fd2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039b6a l       .debug_str	00000000 
0005d253 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005aec5 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbad l       .debug_str	00000000 
0001fba1 l       .debug_str	00000000 
0000151c l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
0005d680 l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
0006187e l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00060569 l       .debug_str	00000000 
000013e2 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0006153d l       .debug_str	00000000 
000013ef l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
000161d1 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000169d l       .debug_str	00000000 
000013ff l       .debug_str	00000000 
00001484 l       .debug_str	00000000 
0000149a l       .debug_str	00000000 
0005d3b2 l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
0003ff8e l       .debug_str	00000000 
000014e9 l       .debug_str	00000000 
00001517 l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
00001553 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
0000157b l       .debug_str	00000000 
000618fe l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
000015a8 l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
000015dc l       .debug_str	00000000 
0000160c l       .debug_str	00000000 
00001617 l       .debug_str	00000000 
00001644 l       .debug_str	00000000 
0000164d l       .debug_str	00000000 
00001683 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00001694 l       .debug_str	00000000 
0000151b l       .debug_str	00000000 
0005a2d1 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
000016bb l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbad l       .debug_str	00000000 
000016e7 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00039b6a l       .debug_str	00000000 
0005d253 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005aec5 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
000030eb l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
000036ac l       .debug_str	00000000 
000036ec l       .debug_str	00000000 
0000373a l       .debug_str	00000000 
0000377a l       .debug_str	00000000 
000037a1 l       .debug_str	00000000 
000037e1 l       .debug_str	00000000 
000037ef l       .debug_str	00000000 
0000385e l       .debug_str	00000000 
00003889 l       .debug_str	00000000 
000038f9 l       .debug_str	00000000 
0000390c l       .debug_str	00000000 
0000397c l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000039a8 l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001708f l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
000039b7 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0005b277 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042c88 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b6b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005fb45 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
0005a58a l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00060980 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
0004fc2d l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
00001d93 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00060633 l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da7 l       .debug_str	00000000 
00001db2 l       .debug_str	00000000 
00001dba l       .debug_str	00000000 
0000b338 l       .debug_str	00000000 
0000b863 l       .debug_str	00000000 
00001dc2 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001fc2 l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fdb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002008 l       .debug_str	00000000 
00001fe5 l       .debug_str	00000000 
00002013 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00002111 l       .debug_str	00000000 
0000211f l       .debug_str	00000000 
0000217e l       .debug_str	00000000 
000021e5 l       .debug_str	00000000 
000021fb l       .debug_str	00000000 
0000220b l       .debug_str	00000000 
0005ee69 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000221a l       .debug_str	00000000 
000254e0 l       .debug_str	00000000 
00002220 l       .debug_str	00000000 
00002226 l       .debug_str	00000000 
0000222c l       .debug_str	00000000 
00002238 l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
00002240 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
0000224e l       .debug_str	00000000 
00002294 l       .debug_str	00000000 
00002271 l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
0005e9f6 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002338 l       .debug_str	00000000 
00002361 l       .debug_str	00000000 
0000233e l       .debug_str	00000000 
00002373 l       .debug_str	00000000 
000023b5 l       .debug_str	00000000 
0005e8df l       .debug_str	00000000 
000023ff l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002434 l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002446 l       .debug_str	00000000 
00002488 l       .debug_str	00000000 
0005dda3 l       .debug_str	00000000 
000024d2 l       .debug_str	00000000 
000024d8 l       .debug_str	00000000 
000024de l       .debug_str	00000000 
000024e4 l       .debug_str	00000000 
0000250d l       .debug_str	00000000 
000024ea l       .debug_str	00000000 
0000251e l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
000025a8 l       .debug_str	00000000 
000025ad l       .debug_str	00000000 
0005ec2d l       .debug_str	00000000 
000025b2 l       .debug_str	00000000 
000025b8 l       .debug_str	00000000 
000025be l       .debug_str	00000000 
000025e7 l       .debug_str	00000000 
000025c4 l       .debug_str	00000000 
000025f8 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
0005de5b l       .debug_str	00000000 
00002682 l       .debug_str	00000000 
000026ae l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
000026bf l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
00002749 l       .debug_str	00000000 
0005ee01 l       .debug_str	00000000 
0000274e l       .debug_str	00000000 
00002757 l       .debug_str	00000000 
0000275e l       .debug_str	00000000 
00002789 l       .debug_str	00000000 
00002766 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027dd l       .debug_str	00000000 
0005eac9 l       .debug_str	00000000 
00002827 l       .debug_str	00000000 
0000282d l       .debug_str	00000000 
00002833 l       .debug_str	00000000 
00002839 l       .debug_str	00000000 
0000283f l       .debug_str	00000000 
00002847 l       .debug_str	00000000 
00002855 l       .debug_str	00000000 
00002864 l       .debug_str	00000000 
00002875 l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002896 l       .debug_str	00000000 
0000289d l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028c0 l       .debug_str	00000000 
000028f5 l       .debug_str	00000000 
00002937 l       .debug_str	00000000 
0005df5e l       .debug_str	00000000 
00002981 l       .debug_str	00000000 
000029ae l       .debug_str	00000000 
0000298b l       .debug_str	00000000 
000029c0 l       .debug_str	00000000 
00002a02 l       .debug_str	00000000 
00002a4c l       .debug_str	00000000 
00002a51 l       .debug_str	00000000 
00002a7e l       .debug_str	00000000 
00002a5b l       .debug_str	00000000 
00002a90 l       .debug_str	00000000 
00002ad2 l       .debug_str	00000000 
00002b1c l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002b30 l       .debug_str	00000000 
00002b40 l       .debug_str	00000000 
00002b49 l       .debug_str	00000000 
00002b54 l       .debug_str	00000000 
00002b63 l       .debug_str	00000000 
00002b78 l       .debug_str	00000000 
00002ba9 l       .debug_str	00000000 
00002c46 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002cf6 l       .debug_str	00000000 
00002cff l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d20 l       .debug_str	00000000 
00002d56 l       .debug_str	00000000 
00002dd9 l       .debug_str	00000000 
00002e64 l       .debug_str	00000000 
00002e80 l       .debug_str	00000000 
00002ecc l       .debug_str	00000000 
00002f20 l       .debug_str	00000000 
00002f3d l       .debug_str	00000000 
00002f51 l       .debug_str	00000000 
00002f9d l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00003007 l       .debug_str	00000000 
0000301b l       .debug_str	00000000 
00003062 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030dd l       .debug_str	00000000 
000030ba l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003108 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
000345af l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
00003e57 l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003135 l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314c l       .debug_str	00000000 
00003154 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003165 l       .debug_str	00000000 
0000316d l       .debug_str	00000000 
00003175 l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031a2 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
000031b6 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000031ca l       .debug_str	00000000 
000031d5 l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005decf l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00003298 l       .debug_str	00000000 
000032a8 l       .debug_str	00000000 
000032b7 l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
000032c6 l       .debug_str	00000000 
000032ce l       .debug_str	00000000 
0000330f l       .debug_str	00000000 
000032ec l       .debug_str	00000000 
0000331f l       .debug_str	00000000 
00003334 l       .debug_str	00000000 
0000333d l       .debug_str	00000000 
0000339a l       .debug_str	00000000 
000033ff l       .debug_str	00000000 
00003409 l       .debug_str	00000000 
00003419 l       .debug_str	00000000 
0000342e l       .debug_str	00000000 
00003436 l       .debug_str	00000000 
0000349a l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
0000350d l       .debug_str	00000000 
00003515 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003566 l       .debug_str	00000000 
0000357b l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035aa l       .debug_str	00000000 
000035bf l       .debug_str	00000000 
000035e9 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003660 l       .debug_str	00000000 
0000369f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
00003ba4 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005d680 l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
0002329c l       .debug_str	00000000 
00003b19 l       .debug_str	00000000 
00003b7c l       .debug_str	00000000 
00003c22 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00003cc8 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00003d4f l       .debug_str	00000000 
00003d5e l       .debug_str	00000000 
0005ad38 l       .debug_str	00000000 
00003d80 l       .debug_str	00000000 
0001692d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000039d8 l       .debug_str	00000000 
00003a62 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
00003a7a l       .debug_str	00000000 
00003b0f l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fbcb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
00004acd l       .debug_str	00000000 
00004afa l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00004b15 l       .debug_str	00000000 
00004b49 l       .debug_str	00000000 
00004b30 l       .debug_str	00000000 
00004b51 l       .debug_str	00000000 
00004b67 l       .debug_str	00000000 
00004bcf l       .debug_str	00000000 
00004c47 l       .debug_str	00000000 
00004c74 l       .debug_str	00000000 
00004c8c l       .debug_str	00000000 
00004cf6 l       .debug_str	00000000 
00004cfe l       .debug_str	00000000 
00004d04 l       .debug_str	00000000 
00004d0e l       .debug_str	00000000 
00004d88 l       .debug_str	00000000 
00004df4 l       .debug_str	00000000 
00004e6d l       .debug_str	00000000 
00004ee6 l       .debug_str	00000000 
00004f51 l       .debug_str	00000000 
00004fc0 l       .debug_str	00000000 
00004fc7 l       .debug_str	00000000 
00004fd2 l       .debug_str	00000000 
00004ffa l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
000050ec l       .debug_str	00000000 
00004feb l       .debug_str	00000000 
000050f8 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
0000516f l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
0004fc2d l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
000051d8 l       .debug_str	00000000 
00005256 l       .debug_str	00000000 
000052c6 l       .debug_str	00000000 
00005340 l       .debug_str	00000000 
0000535a l       .debug_str	00000000 
000053c6 l       .debug_str	00000000 
000053cf l       .debug_str	00000000 
000053db l       .debug_str	00000000 
00005451 l       .debug_str	00000000 
000054c7 l       .debug_str	00000000 
0000553d l       .debug_str	00000000 
000055a5 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00005614 l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
00005681 l       .debug_str	00000000 
000056f6 l       .debug_str	00000000 
0000570b l       .debug_str	00000000 
00005772 l       .debug_str	00000000 
0000577b l       .debug_str	00000000 
00005786 l       .debug_str	00000000 
0000578d l       .debug_str	00000000 
0005c23a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
000057c2 l       .debug_str	00000000 
0005bc73 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0005bb1a l       .debug_str	00000000 
00060fb1 l       .debug_str	00000000 
00005877 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
00005884 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
0006153d l       .debug_str	00000000 
000013ef l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
000161d1 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000169d l       .debug_str	00000000 
00001694 l       .debug_str	00000000 
000058a5 l       .debug_str	00000000 
000058aa l       .debug_str	00000000 
000058af l       .debug_str	00000000 
000058b4 l       .debug_str	00000000 
000058b9 l       .debug_str	00000000 
000058be l       .debug_str	00000000 
000058c9 l       .debug_str	00000000 
000058d4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042c88 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003d8a l       .debug_str	00000000 
00013d61 l       .debug_str	00000000 
00003dfe l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003e0a l       .debug_str	00000000 
00003e30 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
000345af l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
00003e57 l       .debug_str	00000000 
00003e3c l       .debug_str	00000000 
00003e63 l       .debug_str	00000000 
00003e6e l       .debug_str	00000000 
00003e79 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
00003f33 l       .debug_str	00000000 
00003e8a l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003f11 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00003f18 l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00003f47 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003fa4 l       .debug_str	00000000 
00004009 l       .debug_str	00000000 
00004011 l       .debug_str	00000000 
00004033 l       .debug_str	00000000 
0000401a l       .debug_str	00000000 
0000404b l       .debug_str	00000000 
00004071 l       .debug_str	00000000 
000040e9 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005decf l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
00004160 l       .debug_str	00000000 
000041c9 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
00004280 l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005fb45 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005a58a l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00060980 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00004306 l       .debug_str	00000000 
0000437f l       .debug_str	00000000 
00060faf l       .debug_str	00000000 
00004384 l       .debug_str	00000000 
000043a7 l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
000043cd l       .debug_str	00000000 
000043b4 l       .debug_str	00000000 
000043af l       .debug_str	00000000 
000043d8 l       .debug_str	00000000 
000043f1 l       .debug_str	00000000 
0000445c l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
000044cc l       .debug_str	00000000 
000044dc l       .debug_str	00000000 
00004554 l       .debug_str	00000000 
0005b7ca l       .debug_str	00000000 
0005b524 l       .debug_str	00000000 
0000455e l       .debug_str	00000000 
00004565 l       .debug_str	00000000 
00004588 l       .debug_str	00000000 
0000456f l       .debug_str	00000000 
0000456a l       .debug_str	00000000 
00004592 l       .debug_str	00000000 
000045aa l       .debug_str	00000000 
00004614 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00004689 l       .debug_str	00000000 
000046f0 l       .debug_str	00000000 
0000476b l       .debug_str	00000000 
0000477b l       .debug_str	00000000 
00004784 l       .debug_str	00000000 
00004792 l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047ac l       .debug_str	00000000 
000049ba l       .debug_str	00000000 
000047b8 l       .debug_str	00000000 
000047c7 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047e8 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
00004801 l       .debug_str	00000000 
00004834 l       .debug_str	00000000 
0000481b l       .debug_str	00000000 
00004840 l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00004872 l       .debug_str	00000000 
00004859 l       .debug_str	00000000 
0000487d l       .debug_str	00000000 
0000489f l       .debug_str	00000000 
00004886 l       .debug_str	00000000 
000048ac l       .debug_str	00000000 
000048c7 l       .debug_str	00000000 
00004934 l       .debug_str	00000000 
000049b1 l       .debug_str	00000000 
000049b9 l       .debug_str	00000000 
00004c65 l       .debug_str	00000000 
00004c4c l       .debug_str	00000000 
000049c3 l       .debug_str	00000000 
000049e0 l       .debug_str	00000000 
00004a4f l       .debug_str	00000000 
00004ac5 l       .debug_str	00000000 
00004ad6 l       .debug_str	00000000 
00004ae4 l       .debug_str	00000000 
00004aeb l       .debug_str	00000000 
00004af2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
000078c2 l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
000316a4 l       .debug_str	00000000 
000221dd l       .debug_str	00000000 
0000a3a8 l       .debug_str	00000000 
0000a3d8 l       .debug_str	00000000 
0000a636 l       .debug_str	00000000 
0000a666 l       .debug_str	00000000 
0000a691 l       .debug_str	00000000 
0000a69b l       .debug_str	00000000 
0000a6f4 l       .debug_str	00000000 
0000a948 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000058d9 l       .debug_str	00000000 
00005909 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000607cb l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00035fc3 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
00031630 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00022431 l       .debug_str	00000000 
00005b4c l       .debug_str	00000000 
00005b7c l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005aec5 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbad l       .debug_str	00000000 
0001fba1 l       .debug_str	00000000 
0005ad09 l       .debug_str	00000000 
0005b4d3 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
0006187e l       .debug_str	00000000 
0000ad71 l       .debug_str	00000000 
0000ad7a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000a969 l       .debug_str	00000000 
0000b283 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
0000a9a0 l       .debug_str	00000000 
0000a9f3 l       .debug_str	00000000 
0002329c l       .debug_str	00000000 
0000aa07 l       .debug_str	00000000 
0000aa4d l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
0000aa5b l       .debug_str	00000000 
0000aaa2 l       .debug_str	00000000 
0000aaab l       .debug_str	00000000 
0000aaf4 l       .debug_str	00000000 
000058be l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
00003d80 l       .debug_str	00000000 
0000ab00 l       .debug_str	00000000 
0000ab7c l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00003d4f l       .debug_str	00000000 
0000aba6 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0000ac51 l       .debug_str	00000000 
0000acd7 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00035e09 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00013d51 l       .debug_str	00000000 
0000acff l       .debug_str	00000000 
0000ad61 l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
00016808 l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000ad69 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039b6a l       .debug_str	00000000 
0005d253 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
0005d695 l       .debug_str	00000000 
0000af8d l       .debug_str	00000000 
0005a24b l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
00061cc3 l       .debug_str	00000000 
00061cc2 l       .debug_str	00000000 
0006153d l       .debug_str	00000000 
000013ef l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
000161d1 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000169d l       .debug_str	00000000 
00001694 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000254e0 l       .debug_str	00000000 
000254e5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000ad81 l       .debug_str	00000000 
0005a16e l       .debug_str	00000000 
0000ad85 l       .debug_str	00000000 
0000adb6 l       .debug_str	00000000 
0000adbc l       .debug_str	00000000 
0000adfd l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000ae12 l       .debug_str	00000000 
0000ae49 l       .debug_str	00000000 
0000ae54 l       .debug_str	00000000 
000607cb l       .debug_str	00000000 
0000ae86 l       .debug_str	00000000 
0005a2b2 l       .debug_str	00000000 
0000aeba l       .debug_str	00000000 
0005a2a1 l       .debug_str	00000000 
0000aeee l       .debug_str	00000000 
0005a259 l       .debug_str	00000000 
0000af25 l       .debug_str	00000000 
0005a2eb l       .debug_str	00000000 
0000af5d l       .debug_str	00000000 
0005a11c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
00003e57 l       .debug_str	00000000 
0000b2d4 l       .debug_str	00000000 
0000b2fb l       .debug_str	00000000 
0000b306 l       .debug_str	00000000 
0000b32d l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000b338 l       .debug_str	00000000 
0000b337 l       .debug_str	00000000 
0001fa60 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0005b25a l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000058be l       .debug_str	00000000 
0005e1aa l       .debug_str	00000000 
0005b4b4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000afbe l       .debug_str	00000000 
0000afe7 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
0000aff4 l       .debug_str	00000000 
0000b006 l       .debug_str	00000000 
0000b017 l       .debug_str	00000000 
0000b063 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000b06f l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b277 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042c88 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b6b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005fb45 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
0005a58a l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00060980 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
0004fc2d l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
00001d93 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00060633 l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da7 l       .debug_str	00000000 
00001db2 l       .debug_str	00000000 
00001dba l       .debug_str	00000000 
0000b073 l       .debug_str	00000000 
0000b863 l       .debug_str	00000000 
00001dc2 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001fc2 l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fdb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002008 l       .debug_str	00000000 
00001fe5 l       .debug_str	00000000 
00002013 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00002111 l       .debug_str	00000000 
0000211f l       .debug_str	00000000 
0000217e l       .debug_str	00000000 
000021e5 l       .debug_str	00000000 
000021fb l       .debug_str	00000000 
0000220b l       .debug_str	00000000 
0005ee69 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000221a l       .debug_str	00000000 
000254e0 l       .debug_str	00000000 
00002220 l       .debug_str	00000000 
00002226 l       .debug_str	00000000 
0000222c l       .debug_str	00000000 
00002238 l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
00002240 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
0000224e l       .debug_str	00000000 
00002294 l       .debug_str	00000000 
00002271 l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
0005e9f6 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002338 l       .debug_str	00000000 
00002361 l       .debug_str	00000000 
0000233e l       .debug_str	00000000 
00002373 l       .debug_str	00000000 
000023b5 l       .debug_str	00000000 
0005e8df l       .debug_str	00000000 
000023ff l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002434 l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002446 l       .debug_str	00000000 
00002488 l       .debug_str	00000000 
0005dda3 l       .debug_str	00000000 
000024d2 l       .debug_str	00000000 
000024d8 l       .debug_str	00000000 
000024de l       .debug_str	00000000 
000024e4 l       .debug_str	00000000 
0000250d l       .debug_str	00000000 
000024ea l       .debug_str	00000000 
0000251e l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
000025a8 l       .debug_str	00000000 
000025ad l       .debug_str	00000000 
0005ec2d l       .debug_str	00000000 
000025b2 l       .debug_str	00000000 
000025b8 l       .debug_str	00000000 
000025be l       .debug_str	00000000 
000025e7 l       .debug_str	00000000 
000025c4 l       .debug_str	00000000 
000025f8 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
0005de5b l       .debug_str	00000000 
00002682 l       .debug_str	00000000 
000026ae l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
000026bf l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
00002749 l       .debug_str	00000000 
0005ee01 l       .debug_str	00000000 
0000274e l       .debug_str	00000000 
00002757 l       .debug_str	00000000 
0000275e l       .debug_str	00000000 
00002789 l       .debug_str	00000000 
00002766 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027dd l       .debug_str	00000000 
0005eac9 l       .debug_str	00000000 
00002827 l       .debug_str	00000000 
0000282d l       .debug_str	00000000 
00002833 l       .debug_str	00000000 
00002839 l       .debug_str	00000000 
0000283f l       .debug_str	00000000 
00002847 l       .debug_str	00000000 
00002855 l       .debug_str	00000000 
00002864 l       .debug_str	00000000 
00002875 l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002896 l       .debug_str	00000000 
0000289d l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028c0 l       .debug_str	00000000 
000028f5 l       .debug_str	00000000 
00002937 l       .debug_str	00000000 
0005df5e l       .debug_str	00000000 
00002981 l       .debug_str	00000000 
000029ae l       .debug_str	00000000 
0000298b l       .debug_str	00000000 
000029c0 l       .debug_str	00000000 
00002a02 l       .debug_str	00000000 
00002a4c l       .debug_str	00000000 
00002a51 l       .debug_str	00000000 
00002a7e l       .debug_str	00000000 
00002a5b l       .debug_str	00000000 
00002a90 l       .debug_str	00000000 
00002ad2 l       .debug_str	00000000 
00002b1c l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002b30 l       .debug_str	00000000 
00002b40 l       .debug_str	00000000 
00002b49 l       .debug_str	00000000 
00002b54 l       .debug_str	00000000 
00002b63 l       .debug_str	00000000 
00002b78 l       .debug_str	00000000 
00002ba9 l       .debug_str	00000000 
00002c46 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002cf6 l       .debug_str	00000000 
00002cff l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d20 l       .debug_str	00000000 
00002d56 l       .debug_str	00000000 
00002dd9 l       .debug_str	00000000 
00002e64 l       .debug_str	00000000 
00002e80 l       .debug_str	00000000 
00002ecc l       .debug_str	00000000 
00002f20 l       .debug_str	00000000 
00002f3d l       .debug_str	00000000 
00002f51 l       .debug_str	00000000 
00002f9d l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00003007 l       .debug_str	00000000 
0000301b l       .debug_str	00000000 
00003062 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030dd l       .debug_str	00000000 
000030ba l       .debug_str	00000000 
000030eb l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003108 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
000345af l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003135 l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314c l       .debug_str	00000000 
00003154 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003165 l       .debug_str	00000000 
0000316d l       .debug_str	00000000 
00003175 l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031a2 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
000031b6 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000031ca l       .debug_str	00000000 
000031d5 l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005decf l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00003298 l       .debug_str	00000000 
000032a8 l       .debug_str	00000000 
000032b7 l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
000032c6 l       .debug_str	00000000 
000032ce l       .debug_str	00000000 
0000330f l       .debug_str	00000000 
000032ec l       .debug_str	00000000 
0000331f l       .debug_str	00000000 
00003334 l       .debug_str	00000000 
0000333d l       .debug_str	00000000 
0000339a l       .debug_str	00000000 
000033ff l       .debug_str	00000000 
00003409 l       .debug_str	00000000 
00003419 l       .debug_str	00000000 
0000342e l       .debug_str	00000000 
00003436 l       .debug_str	00000000 
0000349a l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
0000350d l       .debug_str	00000000 
00003515 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003566 l       .debug_str	00000000 
0000357b l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035aa l       .debug_str	00000000 
000035bf l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0005afd7 l       .debug_str	00000000 
0000b080 l       .debug_str	00000000 
0000b138 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
0000b19c l       .debug_str	00000000 
0000b1d2 l       .debug_str	00000000 
0000b1eb l       .debug_str	00000000 
0000b225 l       .debug_str	00000000 
0000b242 l       .debug_str	00000000 
0000b27d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000b29a l       .debug_str	00000000 
0000b2a4 l       .debug_str	00000000 
0000b2ca l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
0005fd03 l       .debug_str	00000000 
0000b3fe l       .debug_str	00000000 
0000b43a l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000b3b4 l       .debug_str	00000000 
0000b3f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
00003108 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0005b4d3 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012aef l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0000b84b l       .debug_str	00000000 
0000b854 l       .debug_str	00000000 
0001fa60 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0000b8f7 l       .debug_str	00000000 
0000b337 l       .debug_str	00000000 
0000b902 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
0000b479 l       .debug_str	00000000 
0000b4c1 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
0000b4e0 l       .debug_str	00000000 
0000b51b l       .debug_str	00000000 
0000b540 l       .debug_str	00000000 
0000b567 l       .debug_str	00000000 
0000b5c7 l       .debug_str	00000000 
0000b5d0 l       .debug_str	00000000 
0000b63b l       .debug_str	00000000 
0000b64b l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b277 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042c88 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b6b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005fb45 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
0005a58a l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00060980 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
0004fc2d l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
00001d93 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00060633 l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da7 l       .debug_str	00000000 
00001db2 l       .debug_str	00000000 
00001dba l       .debug_str	00000000 
0000b863 l       .debug_str	00000000 
00001dc2 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001fc2 l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fdb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002008 l       .debug_str	00000000 
00001fe5 l       .debug_str	00000000 
00002013 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00002111 l       .debug_str	00000000 
0000211f l       .debug_str	00000000 
0000217e l       .debug_str	00000000 
000021e5 l       .debug_str	00000000 
000021fb l       .debug_str	00000000 
0000220b l       .debug_str	00000000 
0005ee69 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000221a l       .debug_str	00000000 
000254e0 l       .debug_str	00000000 
00002220 l       .debug_str	00000000 
00002226 l       .debug_str	00000000 
0000222c l       .debug_str	00000000 
00002238 l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
00002240 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
0000224e l       .debug_str	00000000 
00002294 l       .debug_str	00000000 
00002271 l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
0005e9f6 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002338 l       .debug_str	00000000 
00002361 l       .debug_str	00000000 
0000233e l       .debug_str	00000000 
00002373 l       .debug_str	00000000 
000023b5 l       .debug_str	00000000 
0005e8df l       .debug_str	00000000 
000023ff l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002434 l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002446 l       .debug_str	00000000 
00002488 l       .debug_str	00000000 
0005dda3 l       .debug_str	00000000 
000024d2 l       .debug_str	00000000 
000024d8 l       .debug_str	00000000 
000024de l       .debug_str	00000000 
000024e4 l       .debug_str	00000000 
0000250d l       .debug_str	00000000 
000024ea l       .debug_str	00000000 
0000251e l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
000025a8 l       .debug_str	00000000 
000025ad l       .debug_str	00000000 
0005ec2d l       .debug_str	00000000 
000025b2 l       .debug_str	00000000 
000025b8 l       .debug_str	00000000 
000025be l       .debug_str	00000000 
000025e7 l       .debug_str	00000000 
000025c4 l       .debug_str	00000000 
000025f8 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
0005de5b l       .debug_str	00000000 
00002682 l       .debug_str	00000000 
000026ae l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
000026bf l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
00002749 l       .debug_str	00000000 
0005ee01 l       .debug_str	00000000 
0000274e l       .debug_str	00000000 
00002757 l       .debug_str	00000000 
0000275e l       .debug_str	00000000 
00002789 l       .debug_str	00000000 
00002766 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027dd l       .debug_str	00000000 
0005eac9 l       .debug_str	00000000 
00002827 l       .debug_str	00000000 
0000282d l       .debug_str	00000000 
00002833 l       .debug_str	00000000 
00002839 l       .debug_str	00000000 
0000283f l       .debug_str	00000000 
00002847 l       .debug_str	00000000 
00002855 l       .debug_str	00000000 
00002864 l       .debug_str	00000000 
00002875 l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002896 l       .debug_str	00000000 
0000289d l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028c0 l       .debug_str	00000000 
000028f5 l       .debug_str	00000000 
00002937 l       .debug_str	00000000 
0005df5e l       .debug_str	00000000 
00002981 l       .debug_str	00000000 
000029ae l       .debug_str	00000000 
0000298b l       .debug_str	00000000 
000029c0 l       .debug_str	00000000 
00002a02 l       .debug_str	00000000 
00002a4c l       .debug_str	00000000 
00002a51 l       .debug_str	00000000 
00002a7e l       .debug_str	00000000 
00002a5b l       .debug_str	00000000 
00002a90 l       .debug_str	00000000 
00002ad2 l       .debug_str	00000000 
00002b1c l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002b30 l       .debug_str	00000000 
00002b40 l       .debug_str	00000000 
00002b49 l       .debug_str	00000000 
00002b54 l       .debug_str	00000000 
00002b63 l       .debug_str	00000000 
00002b78 l       .debug_str	00000000 
00002ba9 l       .debug_str	00000000 
00002c46 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002cf6 l       .debug_str	00000000 
00002cff l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d20 l       .debug_str	00000000 
00002d56 l       .debug_str	00000000 
00002dd9 l       .debug_str	00000000 
00002e64 l       .debug_str	00000000 
00002e80 l       .debug_str	00000000 
00002ecc l       .debug_str	00000000 
00002f20 l       .debug_str	00000000 
00002f3d l       .debug_str	00000000 
00002f51 l       .debug_str	00000000 
00002f9d l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00003007 l       .debug_str	00000000 
0000301b l       .debug_str	00000000 
00003062 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030dd l       .debug_str	00000000 
000030ba l       .debug_str	00000000 
000030eb l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
000345af l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
00003e57 l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003135 l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314c l       .debug_str	00000000 
00003154 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003165 l       .debug_str	00000000 
0000316d l       .debug_str	00000000 
00003175 l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031a2 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
000031b6 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000031ca l       .debug_str	00000000 
000031d5 l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005decf l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00003298 l       .debug_str	00000000 
000032a8 l       .debug_str	00000000 
000032b7 l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
000032c6 l       .debug_str	00000000 
000032ce l       .debug_str	00000000 
0000330f l       .debug_str	00000000 
000032ec l       .debug_str	00000000 
0000331f l       .debug_str	00000000 
00003334 l       .debug_str	00000000 
0000333d l       .debug_str	00000000 
0000339a l       .debug_str	00000000 
000033ff l       .debug_str	00000000 
00003409 l       .debug_str	00000000 
00003419 l       .debug_str	00000000 
0000342e l       .debug_str	00000000 
00003436 l       .debug_str	00000000 
0000349a l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
0000350d l       .debug_str	00000000 
00003515 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003566 l       .debug_str	00000000 
0000357b l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035aa l       .debug_str	00000000 
000035bf l       .debug_str	00000000 
0000b338 l       .debug_str	00000000 
0000b6ca l       .debug_str	00000000 
0000b72d l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
0000b7ad l       .debug_str	00000000 
0000b810 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000016bb l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbad l       .debug_str	00000000 
0000bba7 l       .debug_str	00000000 
0000bbd8 l       .debug_str	00000000 
0000be6b l       .debug_str	00000000 
0000bbf2 l       .debug_str	00000000 
0000bc23 l       .debug_str	00000000 
0000bca1 l       .debug_str	00000000 
0000bc53 l       .debug_str	00000000 
0000bc84 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
0000bc94 l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
0000bca0 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0000bca6 l       .debug_str	00000000 
0000bcf8 l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
0000bd4b l       .debug_str	00000000 
0000bdb4 l       .debug_str	00000000 
0001fba1 l       .debug_str	00000000 
0000be07 l       .debug_str	00000000 
0000be6a l       .debug_str	00000000 
0000be96 l       .debug_str	00000000 
0000bf0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00060569 l       .debug_str	00000000 
000013e2 l       .debug_str	00000000 
00001725 l       .debug_str	00000000 
0000b90c l       .debug_str	00000000 
0000be8c l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000b91b l       .debug_str	00000000 
0000b963 l       .debug_str	00000000 
0000b96c l       .debug_str	00000000 
0000b9b4 l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
0000b9bc l       .debug_str	00000000 
0000b5c7 l       .debug_str	00000000 
0000ba04 l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0000ba55 l       .debug_str	00000000 
0000ba9d l       .debug_str	00000000 
0000baa6 l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
000192db l       .debug_str	00000000 
0000bae0 l       .debug_str	00000000 
0000bb11 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
000016bb l       .debug_str	00000000 
0000bb1b l       .debug_str	00000000 
0000bb4c l       .debug_str	00000000 
000192ef l       .debug_str	00000000 
0000bb6c l       .debug_str	00000000 
0000bb9d l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039b6a l       .debug_str	00000000 
0005d253 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005aec5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
0000c0b6 l       .debug_str	00000000 
0000bfb3 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
0000c00c l       .debug_str	00000000 
0000c018 l       .debug_str	00000000 
0000c05f l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
0000c06b l       .debug_str	00000000 
0000c0c6 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
0005d241 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005f057 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000bf62 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fbcb l       .debug_str	00000000 
00009548 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
0000c386 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
0001939f l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025d07 l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0003510f l       .debug_str	00000000 
0002faf4 l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c3e5 l       .debug_str	00000000 
00019480 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
000194bb l       .debug_str	00000000 
0000c42f l       .debug_str	00000000 
0000c49e l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000192e5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
00016afc l       .debug_str	00000000 
0000c124 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b277 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c135 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c13f l       .debug_str	00000000 
0000c14a l       .debug_str	00000000 
0000c154 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000232b4 l       .debug_str	00000000 
0000c15d l       .debug_str	00000000 
0000c1a3 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0005dc64 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
0002329a l       .debug_str	00000000 
0000c1be l       .debug_str	00000000 
0005b097 l       .debug_str	00000000 
000232dd l       .debug_str	00000000 
00060b3f l       .debug_str	00000000 
0000c1c2 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
0005ff7b l       .debug_str	00000000 
0000c1cf l       .debug_str	00000000 
0005f5d3 l       .debug_str	00000000 
0000e753 l       .debug_str	00000000 
0000c1d2 l       .debug_str	00000000 
0000c212 l       .debug_str	00000000 
0000c221 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
0000c269 l       .debug_str	00000000 
0000c2b0 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
0000c2be l       .debug_str	00000000 
0000c302 l       .debug_str	00000000 
0000c30d l       .debug_str	00000000 
0000c316 l       .debug_str	00000000 
0000c31e l       .debug_str	00000000 
0005ce7c l       .debug_str	00000000 
0000e7c1 l       .debug_str	00000000 
0005b4d3 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000c327 l       .debug_str	00000000 
0000c32d l       .debug_str	00000000 
0000c336 l       .debug_str	00000000 
0000c343 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
0004420b l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c346 l       .debug_str	00000000 
0000c35d l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
00010589 l       .debug_str	00000000 
0000c373 l       .debug_str	00000000 
0000c379 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c380 l       .debug_str	00000000 
00016a24 l       .debug_str	00000000 
0000e899 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00019354 l       .debug_str	00000000 
000603fc l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
200000e8 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000160 l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0000e3c1 l       .debug_str	00000000 
0000e325 l       .debug_str	00000000 
0000e36b l       .debug_str	00000000 
0000e40a l       .debug_str	00000000 
0000e450 l       .debug_str	00000000 
0000e7c1 l       .debug_str	00000000 
00012be9 l       .debug_str	00000000 
0000e48a l       .debug_str	00000000 
0000e4d1 l       .debug_str	00000000 
0000e51f l       .debug_str	00000000 
0000e56b l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c380 l       .debug_str	00000000 
0000c386 l       .debug_str	00000000 
00016a24 l       .debug_str	00000000 
0000e899 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00019354 l       .debug_str	00000000 
000603fc l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
0001939f l       .debug_str	00000000 
00025d07 l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0002faf4 l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000c3e5 l       .debug_str	00000000 
00019480 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
000194bb l       .debug_str	00000000 
0000c42f l       .debug_str	00000000 
0000e5ab l       .debug_str	00000000 
0000e657 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e729 l       .debug_str	00000000 
0000e742 l       .debug_str	00000000 
0005b4d3 l       .debug_str	00000000 
0001fae9 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0001d5d8 l       .debug_str	00000000 
0000e792 l       .debug_str	00000000 
000413c5 l       .debug_str	00000000 
0001a556 l       .debug_str	00000000 
0003df75 l       .debug_str	00000000 
0000e795 l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
00016fee l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
0002824d l       .debug_str	00000000 
0006187e l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
00022db6 l       .debug_str	00000000 
0000e79c l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00025d4c l       .debug_str	00000000 
0000e7a3 l       .debug_str	00000000 
0005dc65 l       .debug_str	00000000 
0000c1bf l       .debug_str	00000000 
00016afc l       .debug_str	00000000 
0005ce7c l       .debug_str	00000000 
0000e7af l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000e7c7 l       .debug_str	00000000 
0000e7d3 l       .debug_str	00000000 
0000e7df l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000e7ec l       .debug_str	00000000 
00061deb l       .debug_str	00000000 
0000e7f9 l       .debug_str	00000000 
0000e870 l       .debug_str	00000000 
0000e879 l       .debug_str	00000000 
0000e887 l       .debug_str	00000000 
00019402 l       .debug_str	00000000 
0000e89f l       .debug_str	00000000 
0000e8d4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4a5 l       .debug_str	00000000 
0000c4ae l       .debug_str	00000000 
0000c4b8 l       .debug_str	00000000 
0000c4c8 l       .debug_str	00000000 
0000e736 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000c4e9 l       .debug_str	00000000 
0000c4f1 l       .debug_str	00000000 
0000c4f7 l       .debug_str	00000000 
0000c4fd l       .debug_str	00000000 
0000c503 l       .debug_str	00000000 
0000c50a l       .debug_str	00000000 
0000c510 l       .debug_str	00000000 
0000c516 l       .debug_str	00000000 
0000c51d l       .debug_str	00000000 
0000c523 l       .debug_str	00000000 
0000c52b l       .debug_str	00000000 
0000c532 l       .debug_str	00000000 
0000c538 l       .debug_str	00000000 
0000c53e l       .debug_str	00000000 
0000c544 l       .debug_str	00000000 
0000c54a l       .debug_str	00000000 
0000c550 l       .debug_str	00000000 
0000c557 l       .debug_str	00000000 
0000c55e l       .debug_str	00000000 
0000c566 l       .debug_str	00000000 
0000c56e l       .debug_str	00000000 
0000c576 l       .debug_str	00000000 
0000c57d l       .debug_str	00000000 
0000c585 l       .debug_str	00000000 
0000c58c l       .debug_str	00000000 
0000c593 l       .debug_str	00000000 
0000c59a l       .debug_str	00000000 
0000c5a1 l       .debug_str	00000000 
0000c5a8 l       .debug_str	00000000 
0000c5af l       .debug_str	00000000 
0000c5b5 l       .debug_str	00000000 
0000c5bb l       .debug_str	00000000 
0000c5c1 l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
0000c5ce l       .debug_str	00000000 
0000c5d6 l       .debug_str	00000000 
0000e962 l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
0005f4d8 l       .debug_str	00000000 
0000c5e9 l       .debug_str	00000000 
0005dc64 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
0002329a l       .debug_str	00000000 
0000c1be l       .debug_str	00000000 
0005b097 l       .debug_str	00000000 
000232dd l       .debug_str	00000000 
00060b3f l       .debug_str	00000000 
0000c1c2 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
0005ff7b l       .debug_str	00000000 
0000c1cf l       .debug_str	00000000 
0005f5d3 l       .debug_str	00000000 
0000e753 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000c5f5 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0000c605 l       .debug_str	00000000 
0000c641 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
0000c660 l       .debug_str	00000000 
0000c6ae l       .debug_str	00000000 
0000c6ef l       .debug_str	00000000 
0000c75b l       .debug_str	00000000 
0000c79d l       .debug_str	00000000 
0000c809 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000607cb l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c875 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c8d8 l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000c959 l       .debug_str	00000000 
0000c9f3 l       .debug_str	00000000 
0000cab6 l       .debug_str	00000000 
0000cba3 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00035fc3 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0000d651 l       .debug_str	00000000 
0000d764 l       .debug_str	00000000 
0000d884 l       .debug_str	00000000 
0000d99b l       .debug_str	00000000 
0000dad4 l       .debug_str	00000000 
0000dc2a l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
0002c27e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00028109 l       .debug_str	00000000 
0003510f l       .debug_str	00000000 
0000dd7f l       .debug_str	00000000 
0000ddcd l       .debug_str	00000000 
0000df4d l       .debug_str	00000000 
0000df9b l       .debug_str	00000000 
0000dfdc l       .debug_str	00000000 
0000e02a l       .debug_str	00000000 
0000e06b l       .debug_str	00000000 
0000e0bb l       .debug_str	00000000 
0000e23d l       .debug_str	00000000 
0000e28e l       .debug_str	00000000 
0000e2d2 l       .debug_str	00000000 
0001f140 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0000c5e9 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e948 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000c4e9 l       .debug_str	00000000 
0000c4f1 l       .debug_str	00000000 
0000c4f7 l       .debug_str	00000000 
0000c4fd l       .debug_str	00000000 
0000c503 l       .debug_str	00000000 
0000c50a l       .debug_str	00000000 
0000c510 l       .debug_str	00000000 
0000c516 l       .debug_str	00000000 
0000c51d l       .debug_str	00000000 
0000c523 l       .debug_str	00000000 
0000c52b l       .debug_str	00000000 
0000c532 l       .debug_str	00000000 
0000c538 l       .debug_str	00000000 
0000c53e l       .debug_str	00000000 
0000c544 l       .debug_str	00000000 
0000c54a l       .debug_str	00000000 
0000c550 l       .debug_str	00000000 
0000c557 l       .debug_str	00000000 
0000c55e l       .debug_str	00000000 
0000c566 l       .debug_str	00000000 
0000c56e l       .debug_str	00000000 
0000c576 l       .debug_str	00000000 
0000c57d l       .debug_str	00000000 
0000c585 l       .debug_str	00000000 
0000c58c l       .debug_str	00000000 
0000c593 l       .debug_str	00000000 
0000c59a l       .debug_str	00000000 
0000c5a1 l       .debug_str	00000000 
0000c5a8 l       .debug_str	00000000 
0000c5af l       .debug_str	00000000 
0000c5b5 l       .debug_str	00000000 
0000c5bb l       .debug_str	00000000 
0000c5c1 l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
0000c5ce l       .debug_str	00000000 
0000c5d6 l       .debug_str	00000000 
0000e962 l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
0005f4d8 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0000e8e0 l       .debug_str	00000000 
0000e91c l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0000e9bd l       .debug_str	00000000 
0000e9b2 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
0000e9fb l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005f057 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000e96e l       .debug_str	00000000 
0000a7b6 l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0000f466 l       .debug_str	00000000 
0000fa8a l       .debug_str	00000000 
0000fbdd l       .debug_str	00000000 
0000fc0d l       .debug_str	00000000 
0000c32d l       .debug_str	00000000 
0000c336 l       .debug_str	00000000 
0000c343 l       .debug_str	00000000 
0004420b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c346 l       .debug_str	00000000 
0000c35d l       .debug_str	00000000 
00010589 l       .debug_str	00000000 
0001056c l       .debug_str	00000000 
0000fd34 l       .debug_str	00000000 
0000fd64 l       .debug_str	00000000 
00010610 l       .debug_str	00000000 
000105b2 l       .debug_str	00000000 
0000fda6 l       .debug_str	00000000 
0000fdd6 l       .debug_str	00000000 
0000fe25 l       .debug_str	00000000 
0000fe55 l       .debug_str	00000000 
0000fe67 l       .debug_str	00000000 
0000fe97 l       .debug_str	00000000 
0000fed0 l       .debug_str	00000000 
0000fed9 l       .debug_str	00000000 
0000ff06 l       .debug_str	00000000 
0000ff49 l       .debug_str	00000000 
0000ff5f l       .debug_str	00000000 
000100a3 l       .debug_str	00000000 
0001013f l       .debug_str	00000000 
00010209 l       .debug_str	00000000 
00010222 l       .debug_str	00000000 
00010301 l       .debug_str	00000000 
0001044a l       .debug_str	00000000 
00010567 l       .debug_str	00000000 
0001059f l       .debug_str	00000000 
000105e4 l       .debug_str	00000000 
000105ec l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000ea01 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
0000ea08 l       .debug_str	00000000 
0000ea0d l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0000ea32 l       .debug_str	00000000 
0000ea39 l       .debug_str	00000000 
0000ea3e l       .debug_str	00000000 
0000ea79 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
0000eab0 l       .debug_str	00000000 
0000eae0 l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
0000eaf3 l       .debug_str	00000000 
0000eaf9 l       .debug_str	00000000 
0000eb00 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000e795 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000607cb l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c875 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c8d8 l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000c959 l       .debug_str	00000000 
0000c9f3 l       .debug_str	00000000 
0000cab6 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00035fc3 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0000eb08 l       .debug_str	00000000 
0000ec1a l       .debug_str	00000000 
0000ed49 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
0002c146 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027fec l       .debug_str	00000000 
0000fefd l       .debug_str	00000000 
0000ee77 l       .debug_str	00000000 
0000eea7 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000ff19 l       .debug_str	00000000 
0000eede l       .debug_str	00000000 
0000ef0e l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
00016437 l       .debug_str	00000000 
0000ef5b l       .debug_str	00000000 
0000ef8b l       .debug_str	00000000 
0000cba3 l       .debug_str	00000000 
0000d651 l       .debug_str	00000000 
0000d764 l       .debug_str	00000000 
0000d884 l       .debug_str	00000000 
0000d99b l       .debug_str	00000000 
0000dad4 l       .debug_str	00000000 
0000dc2a l       .debug_str	00000000 
0002c27e l       .debug_str	00000000 
00028109 l       .debug_str	00000000 
0000efab l       .debug_str	00000000 
0000efdb l       .debug_str	00000000 
0000e8d9 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f129 l       .debug_str	00000000 
0000f134 l       .debug_str	00000000 
0000f13e l       .debug_str	00000000 
0000e899 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00019354 l       .debug_str	00000000 
0000f147 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
0001939f l       .debug_str	00000000 
00025d07 l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0003510f l       .debug_str	00000000 
0002faf4 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0002fa88 l       .debug_str	00000000 
0000f154 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
0002e56a l       .debug_str	00000000 
0000f160 l       .debug_str	00000000 
0000f190 l       .debug_str	00000000 
0000f236 l       .debug_str	00000000 
0000f23b l       .debug_str	00000000 
0000f241 l       .debug_str	00000000 
0000f24a l       .debug_str	00000000 
0005d8dd l       .debug_str	00000000 
0002e611 l       .debug_str	00000000 
0000f254 l       .debug_str	00000000 
0000f284 l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f11b l       .debug_str	00000000 
000254e5 l       .debug_str	00000000 
00025f1e l       .debug_str	00000000 
0000f35e l       .debug_str	00000000 
0000f38e l       .debug_str	00000000 
0000f3b1 l       .debug_str	00000000 
0000f3de l       .debug_str	00000000 
0000f3ff l       .debug_str	00000000 
0000f506 l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
0000f5e0 l       .debug_str	00000000 
0000f657 l       .debug_str	00000000 
0000f6db l       .debug_str	00000000 
0000f756 l       .debug_str	00000000 
0000f7f4 l       .debug_str	00000000 
0000f89f l       .debug_str	00000000 
00029658 l       .debug_str	00000000 
00028d8f l       .debug_str	00000000 
000290c6 l       .debug_str	00000000 
0002c04c l       .debug_str	00000000 
00027cb4 l       .debug_str	00000000 
0000f941 l       .debug_str	00000000 
0000f971 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
0002824d l       .debug_str	00000000 
0000fa5a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
0005ae3c l       .debug_str	00000000 
0001061b l       .debug_str	00000000 
0001064c l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000192e5 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00010655 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
00013a94 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000107b9 l       .debug_str	00000000 
000107c5 l       .debug_str	00000000 
00010886 l       .debug_str	00000000 
00025cec l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e948 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000106a7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000c4e9 l       .debug_str	00000000 
0000c4f1 l       .debug_str	00000000 
0000c4f7 l       .debug_str	00000000 
0000c4fd l       .debug_str	00000000 
0000c503 l       .debug_str	00000000 
0000c50a l       .debug_str	00000000 
0000c510 l       .debug_str	00000000 
0000c516 l       .debug_str	00000000 
0000c51d l       .debug_str	00000000 
0000c523 l       .debug_str	00000000 
0000c52b l       .debug_str	00000000 
0000c532 l       .debug_str	00000000 
0000c538 l       .debug_str	00000000 
0000c53e l       .debug_str	00000000 
0000c544 l       .debug_str	00000000 
0000c54a l       .debug_str	00000000 
0000c550 l       .debug_str	00000000 
0000c557 l       .debug_str	00000000 
0000c55e l       .debug_str	00000000 
0000c566 l       .debug_str	00000000 
0000c56e l       .debug_str	00000000 
0000c576 l       .debug_str	00000000 
0000c57d l       .debug_str	00000000 
0000c585 l       .debug_str	00000000 
0000c58c l       .debug_str	00000000 
0000c593 l       .debug_str	00000000 
0000c59a l       .debug_str	00000000 
0000c5a1 l       .debug_str	00000000 
0000c5a8 l       .debug_str	00000000 
0000c5af l       .debug_str	00000000 
0000c5b5 l       .debug_str	00000000 
0000c5bb l       .debug_str	00000000 
0000c5c1 l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
0000c5ce l       .debug_str	00000000 
0000c5d6 l       .debug_str	00000000 
0000e962 l       .debug_str	00000000 
000106cb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000106f1 l       .debug_str	00000000 
000107b2 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
00025cec l       .debug_str	00000000 
00010886 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e729 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000106a7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4a5 l       .debug_str	00000000 
0000c4ae l       .debug_str	00000000 
0000c4b8 l       .debug_str	00000000 
0000c4c8 l       .debug_str	00000000 
0000e736 l       .debug_str	00000000 
0001088d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000108b3 l       .debug_str	00000000 
000107b2 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000107b9 l       .debug_str	00000000 
0001095a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
00001366 l       .debug_str	00000000 
00010a51 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000106a7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000107b9 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
000106cb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00010886 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0005fdc6 l       .debug_str	00000000 
00010a01 l       .debug_str	00000000 
00010a3a l       .debug_str	00000000 
00025cec l       .debug_str	00000000 
0001088d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
00002330 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000106a7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
000106cb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00010886 l       .debug_str	00000000 
00010a8a l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 10fld6rw1cguoaz1
00001366 l       .debug_str	00000000 
00010bc3 l       .debug_str	00000000 
00010bff l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
00010c08 l       .debug_str	00000000 
0001ac4c l       .debug_str	00000000 
00010c33 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00034ab0 l       .debug_str	00000000 
00010c91 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
0001391a l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00010b69 l       .debug_str	00000000 
00010bb0 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001fb15 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000eee l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1ewcpkt7vg0rrbln
0001102b l       .debug_str	00000000 
0004420b l       .debug_str	00000000 
000113bc l       .debug_str	00000000 
00002403 l       .debug_str	00000000 
000113b8 l       .debug_str	00000000 
000113b3 l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c6f8 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0005fdc6 l       .debug_str	00000000 
00010d42 l       .debug_str	00000000 
00010dce l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
0005d680 l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
0001692d l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0002329c l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
00010deb l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00010e77 l       .debug_str	00000000 
00010eac l       .debug_str	00000000 
00010ec6 l       .debug_str	00000000 
00010efb l       .debug_str	00000000 
00011388 l       .debug_str	00000000 
0005aec5 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00010f15 l       .debug_str	00000000 
00011369 l       .debug_str	00000000 
0001132f l       .debug_str	00000000 
00010f4a l       .debug_str	00000000 
00011311 l       .debug_str	00000000 
00010f64 l       .debug_str	00000000 
00010f9a l       .debug_str	00000000 
000112d8 l       .debug_str	00000000 
000112bc l       .debug_str	00000000 
00010fb5 l       .debug_str	00000000 
00011285 l       .debug_str	00000000 
00011269 l       .debug_str	00000000 
00011232 l       .debug_str	00000000 
00011217 l       .debug_str	00000000 
000111e1 l       .debug_str	00000000 
000111c6 l       .debug_str	00000000 
00011190 l       .debug_str	00000000 
00011175 l       .debug_str	00000000 
0001113f l       .debug_str	00000000 
00011124 l       .debug_str	00000000 
000110ee l       .debug_str	00000000 
000110d3 l       .debug_str	00000000 
0001109d l       .debug_str	00000000 
00011009 l       .debug_str	00000000 
000116fc l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000113fa l       .debug_str	00000000 
000113f6 l       .debug_str	00000000 
0005b4b4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005a1b0 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00010c9a l       .debug_str	00000000 
00016437 l       .debug_str	00000000 
00010c9e l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
00034a7c l       .debug_str	00000000 
00010ca3 l       .debug_str	00000000 
00013017 l       .debug_str	00000000 
0001fb4c l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0002ffe4 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00010ca9 l       .debug_str	00000000 
00013151 l       .debug_str	00000000 
00010cac l       .debug_str	00000000 
0004d300 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0005bd12 l       .debug_str	00000000 
0006062b l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
000113f0 l       .debug_str	00000000 
000113ea l       .debug_str	00000000 
000113e4 l       .debug_str	00000000 
000113de l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005d696 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0006187e l       .debug_str	00000000 
000024e8 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000192e5 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000113db l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00025cec l       .debug_str	00000000 
00010caf l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
0005b277 l       .debug_str	00000000 
0005d3a9 l       .debug_str	00000000 
0005ad38 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00010cc3 l       .debug_str	00000000 
00010cce l       .debug_str	00000000 
00010cdb l       .debug_str	00000000 
00010ce9 l       .debug_str	00000000 
00010cf8 l       .debug_str	00000000 
000129b6 l       .debug_str	00000000 
00011397 l       .debug_str	00000000 
00010d0a l       .debug_str	00000000 
00010d30 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00010d3a l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
00016808 l       .debug_str	00000000 
000113d7 l       .debug_str	00000000 
00012a23 l       .debug_str	00000000 
000137a7 l       .debug_str	00000000 
00013819 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
000113ce l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
000113c4 l       .debug_str	00000000 
0001f2b0 l     O .text	0000001c str.0
0001f530 l     O .text	00000021 str.1
0001f810 l     O .text	00000039 str.2
0001f870 l     O .text	00000021 str.3
0001f8b0 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 1expeypgojy7j7ax
000031f0 l       .debug_str	00000000 
000113ff l       .debug_str	00000000 
0001143f l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001708f l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042c88 l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005fb45 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005a58a l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00060980 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0005decf l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00004384 l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1rlfak9oa38tk11p
0001152d l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
00016808 l       .debug_str	00000000 
0001156c l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000115df l       .debug_str	00000000 
0001161e l       .debug_str	00000000 
000116fc l       .debug_str	00000000 
0001165b l       .debug_str	00000000 
000116be l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000116e5 l       .debug_str	00000000 
0005ad38 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011486 l       .debug_str	00000000 
00036c83 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
0001148f l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005d680 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
0001692d l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0002329c l       .debug_str	00000000 
0005fdc6 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2qmowyvqdyca5tsh
000118e5 l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
0001174a l       .debug_str	00000000 
0001178f l       .debug_str	00000000 
0001179c l       .debug_str	00000000 
000117e1 l       .debug_str	00000000 
000117ee l       .debug_str	00000000 
00011833 l       .debug_str	00000000 
00011840 l       .debug_str	00000000 
00011885 l       .debug_str	00000000 
00011892 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
000118da l       .debug_str	00000000 
0000c0b6 l       .debug_str	00000000 
0001192d l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00011973 l       .debug_str	00000000 
000119b9 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
0005d241 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005f057 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00011706 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 31071ffymf9y6tnj
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005ad09 l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
0005d680 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
0001692d l       .debug_str	00000000 
0002329c l       .debug_str	00000000 
000119ff l       .debug_str	00000000 
00011a7b l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 33bdok1lz3m5vvyy
00016768 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00011aa8 l       .debug_str	00000000 
00011b04 l       .debug_str	00000000 
00011afa l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
0005ad38 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3jm8kpc30rum4biz
00011c0b l       .debug_str	00000000 
000113ce l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00013819 l       .debug_str	00000000 
000137a7 l       .debug_str	00000000 
00011b9c l       .debug_str	00000000 
00011bdd l       .debug_str	00000000 
00011c4c l       .debug_str	00000000 
00011caf l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
00011cff l       .debug_str	00000000 
00011d7f l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00011df3 l       .debug_str	00000000 
00011e73 l       .debug_str	00000000 
00000f82 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011486 l       .debug_str	00000000 
00036c83 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
0005d680 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
0001692d l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00016808 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0002329c l       .debug_str	00000000 
0005fdc6 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00011b0b l       .debug_str	00000000 
00011b4e l       .debug_str	00000000 
000113bc l       .debug_str	00000000 
0004420b l       .debug_str	00000000 
000113c4 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3tdzqkid9cxb86kn
000127b2 l       .debug_str	00000000 
00010ce9 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
00010cf8 l       .debug_str	00000000 
000129b6 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012063 l       .debug_str	00000000 
0001206c l       .debug_str	00000000 
00012075 l       .debug_str	00000000 
00012080 l       .debug_str	00000000 
0001208b l       .debug_str	00000000 
00012096 l       .debug_str	00000000 
000120a2 l       .debug_str	00000000 
000120ac l       .debug_str	00000000 
000120b9 l       .debug_str	00000000 
000120c7 l       .debug_str	00000000 
000120d6 l       .debug_str	00000000 
000120e3 l       .debug_str	00000000 
000302d7 l       .debug_str	00000000 
000120f3 l       .debug_str	00000000 
0001211e l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00012127 l       .debug_str	00000000 
00022d5c l       .debug_str	00000000 
00012153 l       .debug_str	00000000 
0003ff8e l       .debug_str	00000000 
00012182 l       .debug_str	00000000 
0005af56 l       .debug_str	00000000 
000121dc l       .debug_str	00000000 
0003df74 l       .debug_str	00000000 
00012235 l       .debug_str	00000000 
00012293 l       .debug_str	00000000 
0001229c l       .debug_str	00000000 
000122fa l       .debug_str	00000000 
00012303 l       .debug_str	00000000 
00012366 l       .debug_str	00000000 
00012373 l       .debug_str	00000000 
000123d2 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000123dc l       .debug_str	00000000 
00012437 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
0001243d l       .debug_str	00000000 
00012497 l       .debug_str	00000000 
0001249c l       .debug_str	00000000 
0005c219 l       .debug_str	00000000 
000124f7 l       .debug_str	00000000 
00012528 l       .debug_str	00000000 
00012536 l       .debug_str	00000000 
00012566 l       .debug_str	00000000 
00012573 l       .debug_str	00000000 
000125a8 l       .debug_str	00000000 
000125e5 l       .debug_str	00000000 
000125f0 l       .debug_str	00000000 
0001262b l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
000126a8 l       .debug_str	00000000 
000126b4 l       .debug_str	00000000 
000126e5 l       .debug_str	00000000 
000126f3 l       .debug_str	00000000 
00012723 l       .debug_str	00000000 
00012730 l       .debug_str	00000000 
00012760 l       .debug_str	00000000 
0001276d l       .debug_str	00000000 
000127a1 l       .debug_str	00000000 
000127ed l       .debug_str	00000000 
00012805 l       .debug_str	00000000 
00012840 l       .debug_str	00000000 
00012858 l       .debug_str	00000000 
0001289e l       .debug_str	00000000 
000128c1 l       .debug_str	00000000 
00012907 l       .debug_str	00000000 
0001292a l       .debug_str	00000000 
00012986 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f129 l       .debug_str	00000000 
0000f134 l       .debug_str	00000000 
0000f13e l       .debug_str	00000000 
0000e899 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00019354 l       .debug_str	00000000 
0000f147 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
0001939f l       .debug_str	00000000 
00025d07 l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0003510f l       .debug_str	00000000 
0002faf4 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0002fa1d l       .debug_str	00000000 
0005b4d3 l       .debug_str	00000000 
000606a0 l       .debug_str	00000000 
00012991 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00010ca9 l       .debug_str	00000000 
00013151 l       .debug_str	00000000 
00010cac l       .debug_str	00000000 
0004d300 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0005bd12 l       .debug_str	00000000 
0006062b l       .debug_str	00000000 
00025cec l       .debug_str	00000000 
00010caf l       .debug_str	00000000 
0005b277 l       .debug_str	00000000 
00011397 l       .debug_str	00000000 
0005c6f8 l       .debug_str	00000000 
0001299a l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000129a5 l       .debug_str	00000000 
0003df73 l       .debug_str	00000000 
0001391f l       .debug_str	00000000 
00046eae l       .debug_str	00000000 
0005c570 l       .debug_str	00000000 
00010cca l       .debug_str	00000000 
00010cd5 l       .debug_str	00000000 
00010ce2 l       .debug_str	00000000 
000129bf l       .debug_str	00000000 
000129cc l       .debug_str	00000000 
000129db l       .debug_str	00000000 
0001256d l       .debug_str	00000000 
000129eb l       .debug_str	00000000 
000129f9 l       .debug_str	00000000 
00012a06 l       .debug_str	00000000 
00012a15 l       .debug_str	00000000 
00012a25 l       .debug_str	00000000 
000302c6 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
00012a40 l       .debug_str	00000000 
00012a4e l       .debug_str	00000000 
0000232f l       .debug_str	00000000 
00002335 l       .debug_str	00000000 
00012a53 l       .debug_str	00000000 
00012a60 l       .debug_str	00000000 
00012a6c l       .debug_str	00000000 
00012a7a l       .debug_str	00000000 
00012a89 l       .debug_str	00000000 
00012a9b l       .debug_str	00000000 
00012ab1 l       .debug_str	00000000 
00012ab6 l       .debug_str	00000000 
00012ac3 l       .debug_str	00000000 
00012ad0 l       .debug_str	00000000 
00012add l       .debug_str	00000000 
00037aaa l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00012ae0 l       .debug_str	00000000 
00012ae3 l       .debug_str	00000000 
00060c6c l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012aeb l       .debug_str	00000000 
00012af6 l       .debug_str	00000000 
00012b02 l       .debug_str	00000000 
00012b0d l       .debug_str	00000000 
00012b18 l       .debug_str	00000000 
00012b23 l       .debug_str	00000000 
00012b2e l       .debug_str	00000000 
00012b39 l       .debug_str	00000000 
00012b44 l       .debug_str	00000000 
00012b4f l       .debug_str	00000000 
00012b5a l       .debug_str	00000000 
00012b65 l       .debug_str	00000000 
00012b70 l       .debug_str	00000000 
00012b7c l       .debug_str	00000000 
00012b88 l       .debug_str	00000000 
00012b94 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005d3a9 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00011eb1 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042c88 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005fb45 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005a58a l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00060980 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00011ebc l       .debug_str	00000000 
00011eea l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00011efb l       .debug_str	00000000 
00011f2f l       .debug_str	00000000 
00011f3d l       .debug_str	00000000 
00011f6e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0004310c l       .debug_str	00000000 
00011f86 l       .debug_str	00000000 
00011f9e l       .debug_str	00000000 
00011fd9 l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
00011ff5 l       .debug_str	00000000 
00011ff9 l       .debug_str	00000000 
0001200a l       .debug_str	00000000 
00012028 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00010cc3 l       .debug_str	00000000 
00010cce l       .debug_str	00000000 
00010cdb l       .debug_str	00000000 
20000164 l     O .bss	00000050 _ZN3app5chip810CHIP8_TASK17hff5b4dd283ecf9fcE
000100b0 l     F .text	000000a8 _ZN3app5chip812render_block17h6c8b81526965606bE
0001064a l     F .text	00000088 _ZN3app5chip812update_color17h39b5eb1e5de90ff7E
00010204 l     F .text	00000022 _ZN3app5chip813PixelIterator10get_window17h111d7a23399766c3E
00010158 l     F .text	000000ac _ZN3app5chip813PixelIterator3new17h975cb5db80e10243E
00010226 l     F .text	00000178 _ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE
200041b4 l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17hb69bb065c68bd165E
00010530 l     F .text	0000011a _ZN3app5chip813convert_color17h69ad441a1103d8f7E
0000fd06 l     F .text	000003aa _ZN3app5chip813render_region17hc692a4d55cab74f0E
200001b4 l     O .bss	00004000 _ZN3app5chip816CHIP8_TASK_STACK17hdcbcc41748325ebbE
00010700 l     F .text	00000138 _ZN3app5chip816get_bounding_box17h3d927a3a33434c59E
000265e0 l     O .text	00000004 _ZN3app5chip823PHYSICAL_TO_VIRTUAL_MAP17h5b1a7b084f35e873E
00026de4 l     O .text	00000004 _ZN3app5chip823VIRTUAL_TO_PHYSICAL_MAP17h0c964d4301637332E
00010838 l     F .text	0000031e _ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E
00010b56 l     F .text	00000432 _ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE
00010f88 l     F .text	000000a4 _ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE
0001102c l     F .text	00000098 _ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E
0000f75a l     F .text	00000010 _ZN3app5chip88Hardware3new17h53332fc09faf36beE
0000f6a6 l     F .text	000000b4 _ZN3app5chip89task_func17h20d1a4715d78a45aE
00020360 l     O .text	00000021 str.0
000203a0 l     O .text	0000001c str.1
00020480 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 3zmcssigt164od5g
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbad l       .debug_str	00000000 
0001fba1 l       .debug_str	00000000 
000606a1 l       .debug_str	00000000 
0005db5c l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005fb45 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
0005a58a l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00060980 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00004384 l       .debug_str	00000000 
0005ecac l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
0005d680 l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
0001692d l       .debug_str	00000000 
0006187e l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
00012f39 l       .debug_str	00000000 
00012f60 l       .debug_str	00000000 
00012f68 l       .debug_str	00000000 
00012f6f l       .debug_str	00000000 
00012f75 l       .debug_str	00000000 
00012f7c l       .debug_str	00000000 
0005d696 l       .debug_str	00000000 
00012f82 l       .debug_str	00000000 
00012f91 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00012f9f l       .debug_str	00000000 
00012fa4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005d3a9 l       .debug_str	00000000 
00012de0 l       .debug_str	00000000 
00012ba0 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0005b097 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000232dd l       .debug_str	00000000 
00012bac l       .debug_str	00000000 
00012be3 l       .debug_str	00000000 
0000e7c1 l       .debug_str	00000000 
00012bef l       .debug_str	00000000 
00012c26 l       .debug_str	00000000 
00012c31 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012c39 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00012c40 l       .debug_str	00000000 
00012c47 l       .debug_str	00000000 
00060a1e l       .debug_str	00000000 
00012c50 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005b25a l       .debug_str	00000000 
00012c5a l       .debug_str	00000000 
00012f51 l       .debug_str	00000000 
00012c64 l       .debug_str	00000000 
0001a72f l       .debug_str	00000000 
00012c9a l       .debug_str	00000000 
00012cc8 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042c88 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005decf l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00012cd4 l       .debug_str	00000000 
00012d0b l       .debug_str	00000000 
0005b277 l       .debug_str	00000000 
00060552 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
000607cb l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00012d14 l       .debug_str	00000000 
00012d28 l       .debug_str	00000000 
00012d5b l       .debug_str	00000000 
00012d66 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00012d9c l       .debug_str	00000000 
00012dda l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00012ded l       .debug_str	00000000 
00012e30 l       .debug_str	00000000 
00012e48 l       .debug_str	00000000 
00012e88 l       .debug_str	00000000 
00012e9d l       .debug_str	00000000 
00012ed7 l       .debug_str	00000000 
00012ee6 l       .debug_str	00000000 
00012f25 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0005b4d3 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000192db l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039b6a l       .debug_str	00000000 
0005d253 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005aec5 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
20004a64 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h59a4aa8a83a81f4aE
200049b8 l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h163add160b6b9aeeE
200049b8 l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h441481867ef0356fE
20004a4c l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17h8cf0280828a4287dE
200049b4 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17h4fe28d66de6f4ab2E
000114ba l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E
00011c0c l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E
00011380 l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E
00011334 l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E
20004a0a l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h040da56764e02a75E
20004a5c l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17hacfa42d26b44dc46E
00026f30 l     O .text	00000021 str.0
00026f70 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 4lznhndqn2vyhgat
0001fa60 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005a1b0 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00016437 l       .debug_str	00000000 
00010c9e l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
00013011 l       .debug_str	00000000 
00034a7c l       .debug_str	00000000 
00010ca3 l       .debug_str	00000000 
0001fb4c l       .debug_str	00000000 
00010c9a l       .debug_str	00000000 
00013017 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00012fa8 l       .debug_str	00000000 
00019a43 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0001fb46 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n402vs8u2uo93u9
0001306f l       .debug_str	00000000 
0000e792 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
000413c5 l       .debug_str	00000000 
0001a556 l       .debug_str	00000000 
0003df75 l       .debug_str	00000000 
0000e795 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
00016afc l       .debug_str	00000000 
0005d3a9 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012063 l       .debug_str	00000000 
0001206c l       .debug_str	00000000 
00012075 l       .debug_str	00000000 
00012080 l       .debug_str	00000000 
0001208b l       .debug_str	00000000 
00012096 l       .debug_str	00000000 
000120a2 l       .debug_str	00000000 
000120ac l       .debug_str	00000000 
000120b9 l       .debug_str	00000000 
000120c7 l       .debug_str	00000000 
000120d6 l       .debug_str	00000000 
000120e3 l       .debug_str	00000000 
000302d7 l       .debug_str	00000000 
000302c6 l       .debug_str	00000000 
0003510f l       .debug_str	00000000 
00013023 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4op4c7h4jps44h2j
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbad l       .debug_str	00000000 
000130a2 l       .debug_str	00000000 
000130df l       .debug_str	00000000 
000130f0 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00039b6a l       .debug_str	00000000 
0005d253 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005aec5 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 50njrjlotjql8eh3
00013194 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00013122 l       .debug_str	00000000 
00013127 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001312e l       .debug_str	00000000 
00013136 l       .debug_str	00000000 
0000c144 l       .debug_str	00000000 
0001313e l       .debug_str	00000000 
00013146 l       .debug_str	00000000 
0001314d l       .debug_str	00000000 
00016cf1 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00013154 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001fbe4 l       .debug_str	00000000 
000131a9 l       .debug_str	00000000 
00013159 l       .debug_str	00000000 
00034423 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53ibzm1eooc9qec2
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000131b5 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0001320e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
000131bd l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 9p7wjmcx8ujsz0s
0001324a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001321b l       .debug_str	00000000 
00013241 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 mka4gzufox8dws5
0000ea39 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00013289 l       .debug_str	00000000 
00013294 l       .debug_str	00000000 
000132cf l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00013309 l       .debug_str	00000000 
00013339 l       .debug_str	00000000 
0001334c l       .debug_str	00000000 
0000a666 l       .debug_str	00000000 
0001337c l       .debug_str	00000000 
0000a948 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005ee3b l       .debug_str	00000000 
00035e2f l       .debug_str	00000000 
00013252 l       .debug_str	00000000 
00013257 l       .debug_str	00000000 
0001325d l       .debug_str	00000000 
00016cf1 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000ea01 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
00013265 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nnlkt1k56qesyal
00013533 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f82 l       .debug_str	00000000 
0001349f l       .debug_str	00000000 
0001357c l       .debug_str	00000000 
000135c6 l       .debug_str	00000000 
00013619 l       .debug_str	00000000 
000136a8 l       .debug_str	00000000 
0001370b l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013783 l       .debug_str	00000000 
000137f5 l       .debug_str	00000000 
000138b3 l       .debug_str	00000000 
0005b4d3 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000113bc l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0004420b l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
0005d680 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
0001692d l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00016808 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0002329c l       .debug_str	00000000 
0005fdc6 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
000113c4 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
000113ce l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00013819 l       .debug_str	00000000 
000137a7 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00013385 l       .debug_str	00000000 
0001340f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 r34gpska6wbd31
00012b02 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000138b7 l       .debug_str	00000000 
0003433d l       .debug_str	00000000 
0000ea08 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
0001391a l       .debug_str	00000000 
0001390e l       .debug_str	00000000 
0001fa60 l       .debug_str	00000000 
00013921 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 rclpy9fcvorr8wf
00000c36 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
0001fa60 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005ee3b l       .debug_str	00000000 
00035e2f l       .debug_str	00000000 
00013252 l       .debug_str	00000000 
00013257 l       .debug_str	00000000 
0001325d l       .debug_str	00000000 
00016cf1 l       .debug_str	00000000 
0002ffe4 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0001392c l       .debug_str	00000000 
00013988 l       .debug_str	00000000 
000138b4 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
00015023 l       .debug_str	00000000 
0001401e l       .debug_str	00000000 
00014048 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
0001409e l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
000140eb l       .debug_str	00000000 
00014145 l       .debug_str	00000000 
00014153 l       .debug_str	00000000 
000141a6 l       .debug_str	00000000 
000141ae l       .debug_str	00000000 
00011afa l       .debug_str	00000000 
00014203 l       .debug_str	00000000 
00014241 l       .debug_str	00000000 
0001425c l       .debug_str	00000000 
000142bb l       .debug_str	00000000 
000138b4 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
00014320 l       .debug_str	00000000 
00014351 l       .debug_str	00000000 
0001435c l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
0001438e l       .debug_str	00000000 
000143bc l       .debug_str	00000000 
000143ce l       .debug_str	00000000 
000143f4 l       .debug_str	00000000 
00014400 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
00014447 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0000c0c6 l       .debug_str	00000000 
00014492 l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
00014498 l       .debug_str	00000000 
00014524 l       .debug_str	00000000 
0001453f l       .debug_str	00000000 
0001456f l       .debug_str	00000000 
000145a4 l       .debug_str	00000000 
000145d4 l       .debug_str	00000000 
000145ea l       .debug_str	00000000 
00014620 l       .debug_str	00000000 
0001463b l       .debug_str	00000000 
00014675 l       .debug_str	00000000 
00014694 l       .debug_str	00000000 
000146d0 l       .debug_str	00000000 
000146f6 l       .debug_str	00000000 
00014702 l       .debug_str	00000000 
00014729 l       .debug_str	00000000 
00014736 l       .debug_str	00000000 
00014943 l       .debug_str	00000000 
00014784 l       .debug_str	00000000 
000149b3 l       .debug_str	00000000 
000147d5 l       .debug_str	00000000 
00014827 l       .debug_str	00000000 
00014833 l       .debug_str	00000000 
0001487e l       .debug_str	00000000 
00014890 l       .debug_str	00000000 
000148d3 l       .debug_str	00000000 
000148de l       .debug_str	00000000 
0001493a l       .debug_str	00000000 
0001494b l       .debug_str	00000000 
000149aa l       .debug_str	00000000 
000149be l       .debug_str	00000000 
00014a14 l       .debug_str	00000000 
00014aa9 l       .debug_str	00000000 
00014ab5 l       .debug_str	00000000 
00014b4f l       .debug_str	00000000 
00014b60 l       .debug_str	00000000 
00014b85 l       .debug_str	00000000 
00014c2e l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
00014c3f l       .debug_str	00000000 
00014cc7 l       .debug_str	00000000 
00014c7e l       .debug_str	00000000 
00014cc2 l       .debug_str	00000000 
00014d0c l       .debug_str	00000000 
00014d4d l       .debug_str	00000000 
00014d72 l       .debug_str	00000000 
00014dc3 l       .debug_str	00000000 
00014e08 l       .debug_str	00000000 
00014e5b l       .debug_str	00000000 
00014ebc l       .debug_str	00000000 
00014f23 l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
00014f6a l       .debug_str	00000000 
00014fb5 l       .debug_str	00000000 
00014fc2 l       .debug_str	00000000 
0001509c l       .debug_str	00000000 
00015094 l       .debug_str	00000000 
000150a4 l       .debug_str	00000000 
00003d4f l       .debug_str	00000000 
000150c0 l       .debug_str	00000000 
00015135 l       .debug_str	00000000 
00015160 l       .debug_str	00000000 
000151d9 l       .debug_str	00000000 
000151e3 l       .debug_str	00000000 
00015209 l       .debug_str	00000000 
00015242 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0001525a l       .debug_str	00000000 
00015293 l       .debug_str	00000000 
000152cb l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
00015304 l       .debug_str	00000000 
0001533f l       .debug_str	00000000 
00015383 l       .debug_str	00000000 
000153c9 l       .debug_str	00000000 
00015405 l       .debug_str	00000000 
0001542d l       .debug_str	00000000 
00015469 l       .debug_str	00000000 
0001548d l       .debug_str	00000000 
000154ea l       .debug_str	00000000 
000154fe l       .debug_str	00000000 
0001554f l       .debug_str	00000000 
00016437 l       .debug_str	00000000 
0001555b l       .debug_str	00000000 
000155ac l       .debug_str	00000000 
000155c3 l       .debug_str	00000000 
00015614 l       .debug_str	00000000 
00015632 l       .debug_str	00000000 
00015683 l       .debug_str	00000000 
00015695 l       .debug_str	00000000 
000156ed l       .debug_str	00000000 
00015703 l       .debug_str	00000000 
00015766 l       .debug_str	00000000 
00015791 l       .debug_str	00000000 
000157f4 l       .debug_str	00000000 
00015869 l       .debug_str	00000000 
000158cd l       .debug_str	00000000 
000158d7 l       .debug_str	00000000 
00015942 l       .debug_str	00000000 
00015951 l       .debug_str	00000000 
000159bd l       .debug_str	00000000 
000159ef l       .debug_str	00000000 
00015a15 l       .debug_str	00000000 
00015a84 l       .debug_str	00000000 
00015aa4 l       .debug_str	00000000 
00015b14 l       .debug_str	00000000 
00015b35 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00015ba9 l       .debug_str	00000000 
00015c29 l       .debug_str	00000000 
00015c6f l       .debug_str	00000000 
00015c98 l       .debug_str	00000000 
00015c9f l       .debug_str	00000000 
00015cd7 l       .debug_str	00000000 
00015d16 l       .debug_str	00000000 
00015d1d l       .debug_str	00000000 
00015d96 l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00015e2d l       .debug_str	00000000 
00015eab l       .debug_str	00000000 
00015eb5 l       .debug_str	00000000 
00015f43 l       .debug_str	00000000 
00015fef l       .debug_str	00000000 
00016036 l       .debug_str	00000000 
00016043 l       .debug_str	00000000 
00016090 l       .debug_str	00000000 
000160a3 l       .debug_str	00000000 
000160f5 l       .debug_str	00000000 
00016165 l       .debug_str	00000000 
00013d61 l       .debug_str	00000000 
000161c5 l       .debug_str	00000000 
000161d6 l       .debug_str	00000000 
0001623b l       .debug_str	00000000 
0001626b l       .debug_str	00000000 
00016274 l       .debug_str	00000000 
000162b0 l       .debug_str	00000000 
000162c4 l       .debug_str	00000000 
000162ff l       .debug_str	00000000 
00016345 l       .debug_str	00000000 
00016363 l       .debug_str	00000000 
00016393 l       .debug_str	00000000 
0001639c l       .debug_str	00000000 
000163d6 l       .debug_str	00000000 
000163e8 l       .debug_str	00000000 
00016416 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0001641d l       .debug_str	00000000 
00016429 l       .debug_str	00000000 
00016433 l       .debug_str	00000000 
0001643d l       .debug_str	00000000 
00016460 l       .debug_str	00000000 
0003433d l       .debug_str	00000000 
000164b5 l       .debug_str	00000000 
00016515 l       .debug_str	00000000 
00016521 l       .debug_str	00000000 
00016571 l       .debug_str	00000000 
000165d4 l       .debug_str	00000000 
0001663b l       .debug_str	00000000 
000166aa l       .debug_str	00000000 
0005b4d3 l       .debug_str	00000000 
000138b3 l       .debug_str	00000000 
0001673a l       .debug_str	00000000 
0005c570 l       .debug_str	00000000 
00010cd5 l       .debug_str	00000000 
0000c144 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0001fa60 l       .debug_str	00000000 
0005ad38 l       .debug_str	00000000 
00011b04 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00016761 l       .debug_str	00000000 
0005b4b4 l       .debug_str	00000000 
0001676e l       .debug_str	00000000 
0005b25a l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00016779 l       .debug_str	00000000 
0006187e l       .debug_str	00000000 
000167cd l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
0005d241 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
000167d8 l       .debug_str	00000000 
00016803 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001680f l       .debug_str	00000000 
00016849 l       .debug_str	00000000 
00016882 l       .debug_str	00000000 
00016891 l       .debug_str	00000000 
000168d4 l       .debug_str	00000000 
0005c785 l       .debug_str	00000000 
00039110 l       .debug_str	00000000 
0005e1aa l       .debug_str	00000000 
00016916 l       .debug_str	00000000 
0001693a l       .debug_str	00000000 
00015eb0 l       .debug_str	00000000 
0005ad09 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0001695a l       .debug_str	00000000 
00046eae l       .debug_str	00000000 
00016995 l       .debug_str	00000000 
0001699c l       .debug_str	00000000 
00037aaa l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000169dd l       .debug_str	00000000 
00016a24 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0001ff11 l       .debug_str	00000000 
000169fe l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
00016fee l       .debug_str	00000000 
00016a20 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012aeb l       .debug_str	00000000 
00012af6 l       .debug_str	00000000 
00012b02 l       .debug_str	00000000 
00012aef l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0000b84b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000139ea l       .debug_str	00000000 
00013a42 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00013a8f l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00013a99 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00013aa5 l       .debug_str	00000000 
000167e9 l       .debug_str	00000000 
000167dd l       .debug_str	00000000 
00016808 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ee3b l       .debug_str	00000000 
00035e2f l       .debug_str	00000000 
00013252 l       .debug_str	00000000 
00013257 l       .debug_str	00000000 
0001325d l       .debug_str	00000000 
00016cf1 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000113bc l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013ab6 l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
00013abc l       .debug_str	00000000 
0002ffe4 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039b6a l       .debug_str	00000000 
0005d253 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005aec5 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbad l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0005f057 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013ac7 l       .debug_str	00000000 
00013af0 l       .debug_str	00000000 
00013aff l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
00011ff5 l       .debug_str	00000000 
0001688b l       .debug_str	00000000 
00013b19 l       .debug_str	00000000 
00013b42 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00013b77 l       .debug_str	00000000 
00013b8b l       .debug_str	00000000 
00013b9e l       .debug_str	00000000 
00013bea l       .debug_str	00000000 
00013bf8 l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00035e09 l       .debug_str	00000000 
00013c00 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011486 l       .debug_str	00000000 
00036c83 l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00013d51 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0002329c l       .debug_str	00000000 
0005fdc6 l       .debug_str	00000000 
000169b7 l       .debug_str	00000000 
0004420b l       .debug_str	00000000 
000113c4 l       .debug_str	00000000 
00013c0a l       .debug_str	00000000 
0005d680 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
0001692d l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
000151fb l       .debug_str	00000000 
0001696d l       .debug_str	00000000 
000113ce l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
000166ce l       .debug_str	00000000 
0001665f l       .debug_str	00000000 
00013c10 l       .debug_str	00000000 
00013c16 l       .debug_str	00000000 
00013c3f l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
000151e4 l       .debug_str	00000000 
00013c4b l       .debug_str	00000000 
000131b5 l       .debug_str	00000000 
00013c78 l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
00013c83 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00013cac l       .debug_str	00000000 
00013cb3 l       .debug_str	00000000 
00013cdd l       .debug_str	00000000 
00020c31 l       .debug_str	00000000 
00013ce1 l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
00013cea l       .debug_str	00000000 
00013d2c l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013d3f l       .debug_str	00000000 
0005fcd0 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0004b55d l       .debug_str	00000000 
00013d5a l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00013d69 l       .debug_str	00000000 
00013d73 l       .debug_str	00000000 
00016a0a l       .debug_str	00000000 
000161d1 l       .debug_str	00000000 
00013d78 l       .debug_str	00000000 
00013dfe l       .debug_str	00000000 
00013e08 l       .debug_str	00000000 
00013e9a l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
00013ee0 l       .debug_str	00000000 
00013f74 l       .debug_str	00000000 
00013fd6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
000173e6 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005f057 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039b6a l       .debug_str	00000000 
0005d253 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005aec5 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbad l       .debug_str	00000000 
0000ea01 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000e899 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00019354 l       .debug_str	00000000 
0000c380 l       .debug_str	00000000 
0000c3e5 l       .debug_str	00000000 
00016add l       .debug_str	00000000 
00016ae6 l       .debug_str	00000000 
00016aee l       .debug_str	00000000 
00016af7 l       .debug_str	00000000 
0003510f l       .debug_str	00000000 
00016b04 l       .debug_str	00000000 
00016b14 l       .debug_str	00000000 
00016b25 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
0001939f l       .debug_str	00000000 
0000f129 l       .debug_str	00000000 
00016b36 l       .debug_str	00000000 
0000e879 l       .debug_str	00000000 
0000e887 l       .debug_str	00000000 
00019402 l       .debug_str	00000000 
00016b3f l       .debug_str	00000000 
00016b45 l       .debug_str	00000000 
00016b50 l       .debug_str	00000000 
00016b5a l       .debug_str	00000000 
00016b64 l       .debug_str	00000000 
0000b963 l       .debug_str	00000000 
00016bac l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
00016bf4 l       .debug_str	00000000 
00016c3c l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00016c45 l       .debug_str	00000000 
00016c6e l       .debug_str	00000000 
00016c77 l       .debug_str	00000000 
00016cd4 l       .debug_str	00000000 
0005fdc6 l       .debug_str	00000000 
00016cfa l       .debug_str	00000000 
00016d22 l       .debug_str	00000000 
00016d54 l       .debug_str	00000000 
00014351 l       .debug_str	00000000 
00016d85 l       .debug_str	00000000 
00016de2 l       .debug_str	00000000 
00016e3f l       .debug_str	00000000 
00016e9c l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00016ece l       .debug_str	00000000 
00016f13 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
00016f1f l       .debug_str	00000000 
0005a2d0 l       .debug_str	00000000 
00016f5b l       .debug_str	00000000 
0000e9b2 l       .debug_str	00000000 
00016f9f l       .debug_str	00000000 
00016fe6 l       .debug_str	00000000 
00016ff4 l       .debug_str	00000000 
0001703b l       .debug_str	00000000 
00017049 l       .debug_str	00000000 
00017089 l       .debug_str	00000000 
00017091 l       .debug_str	00000000 
0000ea39 l       .debug_str	00000000 
0001709e l       .debug_str	00000000 
000170d9 l       .debug_str	00000000 
00017117 l       .debug_str	00000000 
00017147 l       .debug_str	00000000 
0001715b l       .debug_str	00000000 
0001718b l       .debug_str	00000000 
0001719f l       .debug_str	00000000 
000171cf l       .debug_str	00000000 
000171e3 l       .debug_str	00000000 
0003ff8e l       .debug_str	00000000 
0001722e l       .debug_str	00000000 
00017285 l       .debug_str	00000000 
00017294 l       .debug_str	00000000 
000172df l       .debug_str	00000000 
0000bfaf l       .debug_str	00000000 
00017356 l       .debug_str	00000000 
000173db l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
0001745d l       .debug_str	00000000 
000174e2 l       .debug_str	00000000 
000174ed l       .debug_str	00000000 
0005ad09 l       .debug_str	00000000 
00017576 l       .debug_str	00000000 
0002037f l       .debug_str	00000000 
000175ed l       .debug_str	00000000 
0005c6f7 l       .debug_str	00000000 
00017682 l       .debug_str	00000000 
00017719 l       .debug_str	00000000 
000177b4 l       .debug_str	00000000 
00017849 l       .debug_str	00000000 
000178e0 l       .debug_str	00000000 
0001797b l       .debug_str	00000000 
00017a43 l       .debug_str	00000000 
00017a4e l       .debug_str	00000000 
00017b1a l       .debug_str	00000000 
00017baa l       .debug_str	00000000 
00017bb6 l       .debug_str	00000000 
00017c5c l       .debug_str	00000000 
00017c68 l       .debug_str	00000000 
00017d0c l       .debug_str	00000000 
00017dae l       .debug_str	00000000 
00017e52 l       .debug_str	00000000 
00017ea6 l       .debug_str	00000000 
00017efb l       .debug_str	00000000 
00017f50 l       .debug_str	00000000 
00013d61 l       .debug_str	00000000 
00017fd3 l       .debug_str	00000000 
00018057 l       .debug_str	00000000 
000180db l       .debug_str	00000000 
0000282b l       .debug_str	00000000 
00018122 l       .debug_str	00000000 
00002831 l       .debug_str	00000000 
00018169 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
000181b0 l       .debug_str	00000000 
0001822e l       .debug_str	00000000 
000182ad l       .debug_str	00000000 
00018348 l       .debug_str	00000000 
000183dc l       .debug_str	00000000 
00018429 l       .debug_str	00000000 
00018435 l       .debug_str	00000000 
00018498 l       .debug_str	00000000 
000184e0 l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
000184e8 l       .debug_str	00000000 
0001857c l       .debug_str	00000000 
000185e2 l       .debug_str	00000000 
00018673 l       .debug_str	00000000 
00018712 l       .debug_str	00000000 
000187a3 l       .debug_str	00000000 
00018842 l       .debug_str	00000000 
000188e4 l       .debug_str	00000000 
00018975 l       .debug_str	00000000 
00018a23 l       .debug_str	00000000 
00018ad3 l       .debug_str	00000000 
00018b87 l       .debug_str	00000000 
00018c7a l       .debug_str	00000000 
00018c85 l       .debug_str	00000000 
00018d7c l       .debug_str	00000000 
00018e28 l       .debug_str	00000000 
00018e32 l       .debug_str	00000000 
00018ea4 l       .debug_str	00000000 
00018f19 l       .debug_str	00000000 
00018f8c l       .debug_str	00000000 
00018ffd l       .debug_str	00000000 
00019070 l       .debug_str	00000000 
000190e7 l       .debug_str	00000000 
0001915c l       .debug_str	00000000 
000191d1 l       .debug_str	00000000 
00019241 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
000192cd l       .debug_str	00000000 
0001fa60 l       .debug_str	00000000 
000192d3 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00016808 l       .debug_str	00000000 
00016779 l       .debug_str	00000000 
00016fee l       .debug_str	00000000 
000192d6 l       .debug_str	00000000 
000192e0 l       .debug_str	00000000 
000192ea l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
000192f4 l       .debug_str	00000000 
00019325 l       .debug_str	00000000 
00061deb l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0001935a l       .debug_str	00000000 
00019364 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0001936e l       .debug_str	00000000 
00019377 l       .debug_str	00000000 
000193a6 l       .debug_str	00000000 
000193b3 l       .debug_str	00000000 
00012add l       .debug_str	00000000 
000193b6 l       .debug_str	00000000 
000193b9 l       .debug_str	00000000 
000193bc l       .debug_str	00000000 
000193bf l       .debug_str	00000000 
000193c2 l       .debug_str	00000000 
00019410 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012aef l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
00012b02 l       .debug_str	00000000 
00012b0d l       .debug_str	00000000 
00019480 l       .debug_str	00000000 
0001945a l       .debug_str	00000000 
000194b3 l       .debug_str	00000000 
0001948e l       .debug_str	00000000 
000194e4 l       .debug_str	00000000 
000194c0 l       .debug_str	00000000 
00019515 l       .debug_str	00000000 
000194f0 l       .debug_str	00000000 
00019549 l       .debug_str	00000000 
00019522 l       .debug_str	00000000 
0001957e l       .debug_str	00000000 
00019558 l       .debug_str	00000000 
000195b2 l       .debug_str	00000000 
0001958c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00016a28 l       .debug_str	00000000 
00016a88 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000192db l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
000192e5 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000192ef l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ee3b l       .debug_str	00000000 
00035e2f l       .debug_str	00000000 
00013252 l       .debug_str	00000000 
00013257 l       .debug_str	00000000 
0001325d l       .debug_str	00000000 
00016cf1 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00038d20 l       .debug_str	00000000 
0002ffe4 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00012340 l     F .text	00000044 _ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE
00012434 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
000124a2 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE
000124da l     F .text	0000001a _ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
00015683 l       .debug_str	00000000 
00019a8d l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0000c0c6 l       .debug_str	00000000 
00019ad8 l       .debug_str	00000000 
00014620 l       .debug_str	00000000 
00019b0e l       .debug_str	00000000 
00014675 l       .debug_str	00000000 
00019b48 l       .debug_str	00000000 
00019b84 l       .debug_str	00000000 
000146f6 l       .debug_str	00000000 
00019baa l       .debug_str	00000000 
00014729 l       .debug_str	00000000 
00019bd1 l       .debug_str	00000000 
00014943 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00019c1f l       .debug_str	00000000 
000149b3 l       .debug_str	00000000 
00019c70 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00019cc2 l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
00019d17 l       .debug_str	00000000 
00014aa9 l       .debug_str	00000000 
00019dac l       .debug_str	00000000 
00019dfa l       .debug_str	00000000 
0002329c l       .debug_str	00000000 
00019e09 l       .debug_str	00000000 
00019e5a l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
00019e72 l       .debug_str	00000000 
00019ec7 l       .debug_str	00000000 
0001324a l       .debug_str	00000000 
00019ee3 l       .debug_str	00000000 
00019f29 l       .debug_str	00000000 
00019f31 l       .debug_str	00000000 
000148d3 l       .debug_str	00000000 
00019f7a l       .debug_str	00000000 
0005c6f7 l       .debug_str	00000000 
00019fe9 l       .debug_str	00000000 
0001554f l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0001a03a l       .debug_str	00000000 
0001a08b l       .debug_str	00000000 
000156ed l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00013c78 l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
00013c83 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005d680 l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
0001692d l       .debug_str	00000000 
0001a0e3 l       .debug_str	00000000 
0001a146 l       .debug_str	00000000 
0001a170 l       .debug_str	00000000 
0001a1d3 l       .debug_str	00000000 
0001a1dc l       .debug_str	00000000 
0001a249 l       .debug_str	00000000 
0001a25b l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
0001a2cc l       .debug_str	00000000 
00013d61 l       .debug_str	00000000 
0001a32c l       .debug_str	00000000 
0001a35f l       .debug_str	00000000 
0001a3c9 l       .debug_str	00000000 
0001a3fc l       .debug_str	00000000 
0001a401 l       .debug_str	00000000 
0001a465 l       .debug_str	00000000 
0005efb0 l       .debug_str	00000000 
0001a4c0 l       .debug_str	00000000 
0001a4fc l       .debug_str	00000000 
0001a50a l       .debug_str	00000000 
0001a539 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00016808 l       .debug_str	00000000 
0005ad38 l       .debug_str	00000000 
00011b04 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005b4b4 l       .debug_str	00000000 
0005b25a l       .debug_str	00000000 
00016761 l       .debug_str	00000000 
0001676e l       .debug_str	00000000 
0001fa60 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000167cd l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
0005d241 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001680f l       .debug_str	00000000 
00016849 l       .debug_str	00000000 
00016882 l       .debug_str	00000000 
00016891 l       .debug_str	00000000 
000168d4 l       .debug_str	00000000 
0005c785 l       .debug_str	00000000 
00039110 l       .debug_str	00000000 
0005e1aa l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
00016916 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
000363a2 l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
0001a541 l       .debug_str	00000000 
0001a559 l       .debug_str	00000000 
0006187e l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0001a576 l       .debug_str	00000000 
0001256d l       .debug_str	00000000 
0001a58f l       .debug_str	00000000 
0001a5ab l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000195c0 l       .debug_str	00000000 
00019615 l       .debug_str	00000000 
0001965f l       .debug_str	00000000 
00019666 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00012b0a l       .debug_str	00000000 
00012b15 l       .debug_str	00000000 
00012b20 l       .debug_str	00000000 
00012b2b l       .debug_str	00000000 
0001a553 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013abc l       .debug_str	00000000 
0005ee3b l       .debug_str	00000000 
0002ffe4 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0005f057 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001966e l       .debug_str	00000000 
00013af0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013aff l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
00011ff5 l       .debug_str	00000000 
0001688b l       .debug_str	00000000 
00019697 l       .debug_str	00000000 
00013b42 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00013b77 l       .debug_str	00000000 
00013b8b l       .debug_str	00000000 
000196c0 l       .debug_str	00000000 
00013bea l       .debug_str	00000000 
00013bf8 l       .debug_str	00000000 
00013c00 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
000131b5 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0001970c l       .debug_str	00000000 
0000afe7 l       .debug_str	00000000 
00019735 l       .debug_str	00000000 
0001973f l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00016fee l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
0005ad09 l       .debug_str	00000000 
00019743 l       .debug_str	00000000 
0005b22e l       .debug_str	00000000 
0001a5a5 l       .debug_str	00000000 
0001a56f l       .debug_str	00000000 
0001974d l       .debug_str	00000000 
00011afa l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
000197a2 l       .debug_str	00000000 
000197e0 l       .debug_str	00000000 
000197f8 l       .debug_str	00000000 
00014241 l       .debug_str	00000000 
00019836 l       .debug_str	00000000 
000138b4 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
0001989b l       .debug_str	00000000 
000198cb l       .debug_str	00000000 
000198f2 l       .debug_str	00000000 
000143f4 l       .debug_str	00000000 
00019918 l       .debug_str	00000000 
0001995d l       .debug_str	00000000 
00019969 l       .debug_str	00000000 
0001178f l       .debug_str	00000000 
000199af l       .debug_str	00000000 
000199f5 l       .debug_str	00000000 
00019a02 l       .debug_str	00000000 
00019a40 l       .debug_str	00000000 
00019a46 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
0001268a l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
000126f4 l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
0001271e l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
0001275c l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
0001282c l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
0001a62f l       .debug_str	00000000 
0001a62d l       .debug_str	00000000 
0001a680 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001a5b4 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000131b5 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001a5d3 l       .debug_str	00000000 
0001a624 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
0001c7f1 l       .debug_str	00000000 
0001313e l       .debug_str	00000000 
00013146 l       .debug_str	00000000 
0001314d l       .debug_str	00000000 
00010c9a l       .debug_str	00000000 
00013017 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0001a9a8 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
0001a9ac l       .debug_str	00000000 
00019f29 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00035e09 l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00013d51 l       .debug_str	00000000 
0001aa2a l       .debug_str	00000000 
0005d680 l       .debug_str	00000000 
00046eae l       .debug_str	00000000 
00060754 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0001aa41 l       .debug_str	00000000 
00013c3f l       .debug_str	00000000 
0001aa6a l       .debug_str	00000000 
0001aa9c l       .debug_str	00000000 
00013abc l       .debug_str	00000000 
00038d20 l       .debug_str	00000000 
0002ffe4 l       .debug_str	00000000 
0005f057 l       .debug_str	00000000 
0000ea01 l       .debug_str	00000000 
0001aaae l       .debug_str	00000000 
0001aad7 l       .debug_str	00000000 
00013aff l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
00011ff5 l       .debug_str	00000000 
0001688b l       .debug_str	00000000 
0001aafc l       .debug_str	00000000 
00013b42 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
0001ab25 l       .debug_str	00000000 
0001ab4f l       .debug_str	00000000 
0001ab78 l       .debug_str	00000000 
0001abc4 l       .debug_str	00000000 
00013bf8 l       .debug_str	00000000 
0001abe8 l       .debug_str	00000000 
00013c00 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b3b4 l       .debug_str	00000000 
0000b3f5 l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
0001abf6 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011486 l       .debug_str	00000000 
00036c83 l       .debug_str	00000000 
0005c01f l       .debug_str	00000000 
0004f072 l       .debug_str	00000000 
0005cd84 l       .debug_str	00000000 
0005e69d l       .debug_str	00000000 
0002329c l       .debug_str	00000000 
0001f951 l       .debug_str	00000000 
0004420b l       .debug_str	00000000 
0003992a l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
0001fc61 l       .debug_str	00000000 
0001fc09 l       .debug_str	00000000 
0001ac0b l       .debug_str	00000000 
0001ac15 l       .debug_str	00000000 
0001fae9 l       .debug_str	00000000 
0003510f l       .debug_str	00000000 
0001f8c1 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0001d5d8 l       .debug_str	00000000 
0005fdc6 l       .debug_str	00000000 
0001fc9a l       .debug_str	00000000 
0005d241 l       .debug_str	00000000 
0001fc79 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
0005ad09 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
0001f912 l       .debug_str	00000000 
00013c10 l       .debug_str	00000000 
0001ac1e l       .debug_str	00000000 
0001ac47 l       .debug_str	00000000 
0001ac55 l       .debug_str	00000000 
0001ac62 l       .debug_str	00000000 
0001ac75 l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
0001ac8e l       .debug_str	00000000 
000131b5 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0001aca3 l       .debug_str	00000000 
0001ad1f l       .debug_str	00000000 
0001acb6 l       .debug_str	00000000 
0001acf8 l       .debug_str	00000000 
0001ad0d l       .debug_str	00000000 
0005fcd0 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0004b55d l       .debug_str	00000000 
0001ad2a l       .debug_str	00000000 
0001ad34 l       .debug_str	00000000 
0001ad66 l       .debug_str	00000000 
0001ad7a l       .debug_str	00000000 
0001ad8f l       .debug_str	00000000 
0001eebc l       .debug_str	00000000 
0001f0c5 l       .debug_str	00000000 
0001ad96 l       .debug_str	00000000 
0001ada1 l       .debug_str	00000000 
0001ae25 l       .debug_str	00000000 
0001ae53 l       .debug_str	00000000 
0001aed9 l       .debug_str	00000000 
0004310c l       .debug_str	00000000 
0001af01 l       .debug_str	00000000 
0001af12 l       .debug_str	00000000 
0001af9c l       .debug_str	00000000 
0001afba l       .debug_str	00000000 
0001b048 l       .debug_str	00000000 
0001b06f l       .debug_str	00000000 
0001b0fe l       .debug_str	00000000 
0001b146 l       .debug_str	00000000 
0001b175 l       .debug_str	00000000 
0001b1bd l       .debug_str	00000000 
0001b1dc l       .debug_str	00000000 
0001b224 l       .debug_str	00000000 
0001b234 l       .debug_str	00000000 
0001b27c l       .debug_str	00000000 
0001b28d l       .debug_str	00000000 
0001b2d5 l       .debug_str	00000000 
0001b2dd l       .debug_str	00000000 
0001b325 l       .debug_str	00000000 
0001b32f l       .debug_str	00000000 
0001b377 l       .debug_str	00000000 
0001b391 l       .debug_str	00000000 
0001b3d9 l       .debug_str	00000000 
0001b3f2 l       .debug_str	00000000 
0001b43a l       .debug_str	00000000 
0001b44d l       .debug_str	00000000 
0001b495 l       .debug_str	00000000 
0001b49e l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
0001b4e6 l       .debug_str	00000000 
0001b530 l       .debug_str	00000000 
0001b57b l       .debug_str	00000000 
0001b5b9 l       .debug_str	00000000 
0001b5ea l       .debug_str	00000000 
000197e0 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0001b628 l       .debug_str	00000000 
0001b651 l       .debug_str	00000000 
0001b65c l       .debug_str	00000000 
0001b681 l       .debug_str	00000000 
0001b6e0 l       .debug_str	00000000 
0003433d l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
00016808 l       .debug_str	00000000 
0001b747 l       .debug_str	00000000 
0001b771 l       .debug_str	00000000 
0001b799 l       .debug_str	00000000 
0001b7d1 l       .debug_str	00000000 
0001b802 l       .debug_str	00000000 
0001b80c l       .debug_str	00000000 
0001b869 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
0001b89b l       .debug_str	00000000 
0001b8c1 l       .debug_str	00000000 
0001b8e3 l       .debug_str	00000000 
0001b909 l       .debug_str	00000000 
0001b92b l       .debug_str	00000000 
0001b954 l       .debug_str	00000000 
0001b979 l       .debug_str	00000000 
00011885 l       .debug_str	00000000 
0001b9c1 l       .debug_str	00000000 
0001b9ca l       .debug_str	00000000 
0001ba54 l       .debug_str	00000000 
00010d3a l       .debug_str	00000000 
0001ba71 l       .debug_str	00000000 
0001bafd l       .debug_str	00000000 
0001bb1a l       .debug_str	00000000 
0001bb3a l       .debug_str	00000000 
0000ea39 l       .debug_str	00000000 
0001bb41 l       .debug_str	00000000 
0001bb7c l       .debug_str	00000000 
0001bbae l       .debug_str	00000000 
0001bbbf l       .debug_str	00000000 
0001bbfa l       .debug_str	00000000 
0001bc40 l       .debug_str	00000000 
000171cf l       .debug_str	00000000 
0001bc70 l       .debug_str	00000000 
0001bca0 l       .debug_str	00000000 
0001bcbe l       .debug_str	00000000 
0001bcee l       .debug_str	00000000 
0001bd01 l       .debug_str	00000000 
0001bd31 l       .debug_str	00000000 
0001bd46 l       .debug_str	00000000 
0001bd76 l       .debug_str	00000000 
0001bd92 l       .debug_str	00000000 
0001bdc2 l       .debug_str	00000000 
0001bde0 l       .debug_str	00000000 
0001be10 l       .debug_str	00000000 
0001be2b l       .debug_str	00000000 
0001be5b l       .debug_str	00000000 
0001be7f l       .debug_str	00000000 
0001beaf l       .debug_str	00000000 
0001bee9 l       .debug_str	00000000 
0001bf19 l       .debug_str	00000000 
0001bf3e l       .debug_str	00000000 
0001bf6e l       .debug_str	00000000 
0001bf98 l       .debug_str	00000000 
0001bfce l       .debug_str	00000000 
0001bfff l       .debug_str	00000000 
0001c039 l       .debug_str	00000000 
0001c06e l       .debug_str	00000000 
0001c0aa l       .debug_str	00000000 
0001c0d0 l       .debug_str	00000000 
0001c0f2 l       .debug_str	00000000 
0001c119 l       .debug_str	00000000 
0001c13c l       .debug_str	00000000 
00014943 l       .debug_str	00000000 
0001c18a l       .debug_str	00000000 
000149b3 l       .debug_str	00000000 
0001c1db l       .debug_str	00000000 
0001c22c l       .debug_str	00000000 
0001c239 l       .debug_str	00000000 
0001c28b l       .debug_str	00000000 
0001c299 l       .debug_str	00000000 
0001487e l       .debug_str	00000000 
0001c2e4 l       .debug_str	00000000 
0001c32f l       .debug_str	00000000 
0001c343 l       .debug_str	00000000 
0001c386 l       .debug_str	00000000 
0001c393 l       .debug_str	00000000 
000148d3 l       .debug_str	00000000 
0001c3d6 l       .debug_str	00000000 
0001493a l       .debug_str	00000000 
0001c432 l       .debug_str	00000000 
000149aa l       .debug_str	00000000 
0001c491 l       .debug_str	00000000 
0001c4e3 l       .debug_str	00000000 
0001c535 l       .debug_str	00000000 
0001c53f l       .debug_str	00000000 
0001c594 l       .debug_str	00000000 
0001c5e9 l       .debug_str	00000000 
0001c63f l       .debug_str	00000000 
00014827 l       .debug_str	00000000 
0001c695 l       .debug_str	00000000 
0001c6d1 l       .debug_str	00000000 
00016fee l       .debug_str	00000000 
0001c70f l       .debug_str	00000000 
0001c74a l       .debug_str	00000000 
0001676e l       .debug_str	00000000 
0001c755 l       .debug_str	00000000 
0001c79c l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0001c7b2 l       .debug_str	00000000 
0001c843 l       .debug_str	00000000 
0001c859 l       .debug_str	00000000 
0001c89e l       .debug_str	00000000 
0001c8b8 l       .debug_str	00000000 
0001c91b l       .debug_str	00000000 
0001c93b l       .debug_str	00000000 
0001c97a l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0001c9db l       .debug_str	00000000 
0001ca1a l       .debug_str	00000000 
0001fae4 l       .debug_str	00000000 
0001ca41 l       .debug_str	00000000 
0001ca81 l       .debug_str	00000000 
0001cab4 l       .debug_str	00000000 
0001cacb l       .debug_str	00000000 
0001cb11 l       .debug_str	00000000 
0001cb2d l       .debug_str	00000000 
0001cb91 l       .debug_str	00000000 
0001cbb3 l       .debug_str	00000000 
0001cbf5 l       .debug_str	00000000 
0001cc16 l       .debug_str	00000000 
0001cc58 l       .debug_str	00000000 
0005d8dd l       .debug_str	00000000 
0001cc88 l       .debug_str	00000000 
0001cccc l       .debug_str	00000000 
0001cd21 l       .debug_str	00000000 
0001cd65 l       .debug_str	00000000 
0001cdbb l       .debug_str	00000000 
0001cdff l       .debug_str	00000000 
0001ce77 l       .debug_str	00000000 
0001cebb l       .debug_str	00000000 
0001cefb l       .debug_str	00000000 
0001cf16 l       .debug_str	00000000 
0001cf57 l       .debug_str	00000000 
0001cfad l       .debug_str	00000000 
0001cff1 l       .debug_str	00000000 
0001d01e l       .debug_str	00000000 
0001d063 l       .debug_str	00000000 
0001d0ab l       .debug_str	00000000 
0001d0bc l       .debug_str	00000000 
0001d104 l       .debug_str	00000000 
0001d115 l       .debug_str	00000000 
00034423 l       .debug_str	00000000 
0001d150 l       .debug_str	00000000 
0001d18c l       .debug_str	00000000 
0001d192 l       .debug_str	00000000 
0001d1c8 l       .debug_str	00000000 
0001d1db l       .debug_str	00000000 
0001d212 l       .debug_str	00000000 
0001d226 l       .debug_str	00000000 
0001d268 l       .debug_str	00000000 
0001d287 l       .debug_str	00000000 
0001d2cc l       .debug_str	00000000 
0001d2e7 l       .debug_str	00000000 
0001d34c l       .debug_str	00000000 
0001d3b3 l       .debug_str	00000000 
0001d3be l       .debug_str	00000000 
0001d404 l       .debug_str	00000000 
0001d44a l       .debug_str	00000000 
0001d454 l       .debug_str	00000000 
0001d49b l       .debug_str	00000000 
0001d4a6 l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
0001d4ed l       .debug_str	00000000 
0001d536 l       .debug_str	00000000 
0001d57f l       .debug_str	00000000 
0001d5b8 l       .debug_str	00000000 
0001d5d3 l       .debug_str	00000000 
0001d5e2 l       .debug_str	00000000 
0001d61b l       .debug_str	00000000 
0001d640 l       .debug_str	00000000 
0001d679 l       .debug_str	00000000 
0001d6b2 l       .debug_str	00000000 
0001d6d8 l       .debug_str	00000000 
0001d711 l       .debug_str	00000000 
0001d74f l       .debug_str	00000000 
0001d789 l       .debug_str	00000000 
0001d795 l       .debug_str	00000000 
0001d7d1 l       .debug_str	00000000 
0001d7e4 l       .debug_str	00000000 
0001d820 l       .debug_str	00000000 
0001d839 l       .debug_str	00000000 
0001d876 l       .debug_str	00000000 
0001d887 l       .debug_str	00000000 
0001554f l       .debug_str	00000000 
0001d8d8 l       .debug_str	00000000 
0001a624 l       .debug_str	00000000 
0001d929 l       .debug_str	00000000 
0001d984 l       .debug_str	00000000 
0001d9e7 l       .debug_str	00000000 
0001da03 l       .debug_str	00000000 
0001da63 l       .debug_str	00000000 
0001dac3 l       .debug_str	00000000 
0001db27 l       .debug_str	00000000 
0001db42 l       .debug_str	00000000 
0001dba6 l       .debug_str	00000000 
0001dbb1 l       .debug_str	00000000 
0001dc1b l       .debug_str	00000000 
0001dc2a l       .debug_str	00000000 
0001dc99 l       .debug_str	00000000 
0001dcb1 l       .debug_str	00000000 
0001dd21 l       .debug_str	00000000 
0001dd3a l       .debug_str	00000000 
0001dda5 l       .debug_str	00000000 
0001ddba l       .debug_str	00000000 
0001de2a l       .debug_str	00000000 
0001de3f l       .debug_str	00000000 
0001deaf l       .debug_str	00000000 
0001dec1 l       .debug_str	00000000 
000038f9 l       .debug_str	00000000 
0001df32 l       .debug_str	00000000 
0001dfa3 l       .debug_str	00000000 
0001dfb9 l       .debug_str	00000000 
0001dfcb l       .debug_str	00000000 
0001e037 l       .debug_str	00000000 
0001e049 l       .debug_str	00000000 
0001e0b5 l       .debug_str	00000000 
0001e0c4 l       .debug_str	00000000 
0001e12c l       .debug_str	00000000 
0001e136 l       .debug_str	00000000 
0001e1aa l       .debug_str	00000000 
00000eee l       .debug_str	00000000 
0001e1b5 l       .debug_str	00000000 
0001e22d l       .debug_str	00000000 
0001e246 l       .debug_str	00000000 
0001e2be l       .debug_str	00000000 
0001e354 l       .debug_str	00000000 
0001e370 l       .debug_str	00000000 
0001e406 l       .debug_str	00000000 
0001e49c l       .debug_str	00000000 
0001e532 l       .debug_str	00000000 
00014aa9 l       .debug_str	00000000 
0001e5a7 l       .debug_str	00000000 
0001e61b l       .debug_str	00000000 
0001e694 l       .debug_str	00000000 
0001e713 l       .debug_str	00000000 
0001e724 l       .debug_str	00000000 
0001e7a4 l       .debug_str	00000000 
0001e806 l       .debug_str	00000000 
0001fd52 l       .debug_str	00000000 
0001e857 l       .debug_str	00000000 
0001e879 l       .debug_str	00000000 
0001e8a6 l       .debug_str	00000000 
0001e8d5 l       .debug_str	00000000 
0001e8f7 l       .debug_str	00000000 
0001e91e l       .debug_str	00000000 
0001e947 l       .debug_str	00000000 
0001e979 l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0001e9c9 l       .debug_str	00000000 
0001ea0f l       .debug_str	00000000 
0001ea22 l       .debug_str	00000000 
0001ea76 l       .debug_str	00000000 
0001eae8 l       .debug_str	00000000 
0001eb5a l       .debug_str	00000000 
0001ebcc l       .debug_str	00000000 
0001ec1b l       .debug_str	00000000 
0001ec49 l       .debug_str	00000000 
0001ec54 l       .debug_str	00000000 
0001ecae l       .debug_str	00000000 
0001ed26 l       .debug_str	00000000 
0001ed9e l       .debug_str	00000000 
0001edf3 l       .debug_str	00000000 
0001ee28 l       .debug_str	00000000 
0000b824 l       .debug_str	00000000 
0001ee53 l       .debug_str	00000000 
0003ff8e l       .debug_str	00000000 
0001ee82 l       .debug_str	00000000 
0001eeb2 l       .debug_str	00000000 
0001eeca l       .debug_str	00000000 
0001eefb l       .debug_str	00000000 
0001ef2d l       .debug_str	00000000 
0001ef6c l       .debug_str	00000000 
0001ef7f l       .debug_str	00000000 
0001efb7 l       .debug_str	00000000 
0001efc3 l       .debug_str	00000000 
0001eff3 l       .debug_str	00000000 
0001f024 l       .debug_str	00000000 
0001f02a l       .debug_str	00000000 
0001f057 l       .debug_str	00000000 
0001f088 l       .debug_str	00000000 
0001f0bb l       .debug_str	00000000 
0001f0d5 l       .debug_str	00000000 
0001f109 l       .debug_str	00000000 
0001f13c l       .debug_str	00000000 
0005a268 l       .debug_str	00000000 
0001f189 l       .debug_str	00000000 
0001f1d2 l       .debug_str	00000000 
0005a24b l       .debug_str	00000000 
0001f21d l       .debug_str	00000000 
0001f245 l       .debug_str	00000000 
0001f28b l       .debug_str	00000000 
0001f291 l       .debug_str	00000000 
0001f2bf l       .debug_str	00000000 
0001f2db l       .debug_str	00000000 
0001f308 l       .debug_str	00000000 
0001f318 l       .debug_str	00000000 
0001f370 l       .debug_str	00000000 
0001f3c9 l       .debug_str	00000000 
0001f3ec l       .debug_str	00000000 
0001f41b l       .debug_str	00000000 
0001f42d l       .debug_str	00000000 
0001f460 l       .debug_str	00000000 
0001f476 l       .debug_str	00000000 
0001f4c3 l       .debug_str	00000000 
0001f516 l       .debug_str	00000000 
0001f549 l       .debug_str	00000000 
0001f559 l       .debug_str	00000000 
0001f5af l       .debug_str	00000000 
0001f609 l       .debug_str	00000000 
0001f657 l       .debug_str	00000000 
0001f6a9 l       .debug_str	00000000 
0001f6fe l       .debug_str	00000000 
0001f74e l       .debug_str	00000000 
0001f7a2 l       .debug_str	00000000 
0001f7f9 l       .debug_str	00000000 
0001f84f l       .debug_str	00000000 
0001f8a6 l       .debug_str	00000000 
0001f8f2 l       .debug_str	00000000 
0001f93a l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0001f96f l       .debug_str	00000000 
0001f99b l       .debug_str	00000000 
0001f9b7 l       .debug_str	00000000 
0001f9c4 l       .debug_str	00000000 
0001f9d2 l       .debug_str	00000000 
0001f9d7 l       .debug_str	00000000 
0001f9de l       .debug_str	00000000 
0001f9f5 l       .debug_str	00000000 
0001fa0b l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0001fa1b l       .debug_str	00000000 
0005b4b4 l       .debug_str	00000000 
0001fa3e l       .debug_str	00000000 
0005b25a l       .debug_str	00000000 
0001fa60 l       .debug_str	00000000 
000192d3 l       .debug_str	00000000 
0001fa5f l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0001fa66 l       .debug_str	00000000 
0001fab9 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0001fada l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
0001fadf l       .debug_str	00000000 
000192ea l       .debug_str	00000000 
0001faf3 l       .debug_str	00000000 
0001fb07 l       .debug_str	00000000 
0001fb10 l       .debug_str	00000000 
0001fb1b l       .debug_str	00000000 
0001fb2d l       .debug_str	00000000 
0001fb41 l       .debug_str	00000000 
0001fb52 l       .debug_str	00000000 
0001fb6c l       .debug_str	00000000 
0001fb9c l       .debug_str	00000000 
0001fbb7 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001680f l       .debug_str	00000000 
00016849 l       .debug_str	00000000 
00016882 l       .debug_str	00000000 
00016891 l       .debug_str	00000000 
000168d4 l       .debug_str	00000000 
0005c785 l       .debug_str	00000000 
00039110 l       .debug_str	00000000 
0005e1aa l       .debug_str	00000000 
0001fbd7 l       .debug_str	00000000 
0001fbf6 l       .debug_str	00000000 
000606da l       .debug_str	00000000 
0001fc19 l       .debug_str	00000000 
0005b4d3 l       .debug_str	00000000 
00013194 l       .debug_str	00000000 
0001fc1f l       .debug_str	00000000 
0000c144 l       .debug_str	00000000 
0001fc27 l       .debug_str	00000000 
0005c08c l       .debug_str	00000000 
0006187e l       .debug_str	00000000 
00016761 l       .debug_str	00000000 
0005cafb l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012aef l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0000b84b l       .debug_str	00000000 
0001fc2f l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
0000b8f7 l       .debug_str	00000000 
0000b902 l       .debug_str	00000000 
0005ad38 l       .debug_str	00000000 
0001fc4e l       .debug_str	00000000 
0001fc6d l       .debug_str	00000000 
0001fc7f l       .debug_str	00000000 
0001708f l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00061deb l       .debug_str	00000000 
0005c9a6 l       .debug_str	00000000 
00037aaa l       .debug_str	00000000 
00013011 l       .debug_str	00000000 
0001a999 l       .debug_str	00000000 
0001fcf1 l       .debug_str	00000000 
000606a1 l       .debug_str	00000000 
0001fd05 l       .debug_str	00000000 
0001fd1b l       .debug_str	00000000 
0001fd2b l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0001fd3d l       .debug_str	00000000 
0001fd37 l       .debug_str	00000000 
0001fd4c l       .debug_str	00000000 
0001fd63 l       .debug_str	00000000 
0001fd62 l       .debug_str	00000000 
00012aeb l       .debug_str	00000000 
00012af6 l       .debug_str	00000000 
00012b02 l       .debug_str	00000000 
00012b0d l       .debug_str	00000000 
00012b18 l       .debug_str	00000000 
00012b23 l       .debug_str	00000000 
00012b2e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001a75c l       .debug_str	00000000 
0001a7ae l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0005a1b0 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0001a7f5 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001a7fc l       .debug_str	00000000 
0001bb2b l       .debug_str	00000000 
0001fb57 l       .debug_str	00000000 
000192ef l       .debug_str	00000000 
0001a805 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0001f28c l       .debug_str	00000000 
0001a80c l       .debug_str	00000000 
0001a82f l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00013122 l       .debug_str	00000000 
00013127 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00013154 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001fbe4 l       .debug_str	00000000 
000131a9 l       .debug_str	00000000 
0001a835 l       .debug_str	00000000 
0001a857 l       .debug_str	00000000 
0001a86c l       .debug_str	00000000 
0001a89e l       .debug_str	00000000 
0001a8ae l       .debug_str	00000000 
0001a8db l       .debug_str	00000000 
0001a8ec l       .debug_str	00000000 
0001a91a l       .debug_str	00000000 
0001a92c l       .debug_str	00000000 
0001fafd l       .debug_str	00000000 
0001fd30 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0001a95b l       .debug_str	00000000 
0001fb15 l       .debug_str	00000000 
00001d84 l       .debug_str	00000000 
00016437 l       .debug_str	00000000 
00010c9e l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
00034a7c l       .debug_str	00000000 
00010ca3 l       .debug_str	00000000 
0001fb4c l       .debug_str	00000000 
0001a982 l       .debug_str	00000000 
0001fb38 l       .debug_str	00000000 
0001fb32 l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00039b6a l       .debug_str	00000000 
0005d253 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005aec5 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbad l       .debug_str	00000000 
0001fba1 l       .debug_str	00000000 
0001fb80 l       .debug_str	00000000 
0001fb71 l       .debug_str	00000000 
0001fbcb l       .debug_str	00000000 
0001fbbc l       .debug_str	00000000 
0001a989 l       .debug_str	00000000 
0001a992 l       .debug_str	00000000 
0005aeb7 l       .debug_str	00000000 
0005a184 l       .debug_str	00000000 
0001fb26 l       .debug_str	00000000 
0001fb20 l       .debug_str	00000000 
0001fb46 l       .debug_str	00000000 
0001fb0c l       .debug_str	00000000 
0005ee3b l       .debug_str	00000000 
00035e2f l       .debug_str	00000000 
00013252 l       .debug_str	00000000 
00013257 l       .debug_str	00000000 
0001325d l       .debug_str	00000000 
00016cf1 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
0003412f l       .debug_str	00000000 
0005f383 l       .debug_str	00000000 
0001a99e l       .debug_str	00000000 
0001312e l       .debug_str	00000000 
00013136 l       .debug_str	00000000 
00012edc l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
00012eb2 l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
00012dd8 l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
00012e74 l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
00012f06 l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
00012f16 l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
00012e96 l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
00012ea2 l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
000130ca l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
00012f30 l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
00012f58 l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
20004a68 l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000f0 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
00012dce l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
000273b4 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
00012f26 l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
00012dc4 l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
00012b58 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
00012b90 l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
00012ba6 l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
00012bb6 l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
00012c5c l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
000130f0 l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
0001319a l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
000130dc l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
00012d28 l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
000203ce l       .debug_str	00000000 
00013cac l       .debug_str	00000000 
0001936e l       .debug_str	00000000 
0001fe1a l       .debug_str	00000000 
0001fe4f l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0005fdc6 l       .debug_str	00000000 
0001fe5b l       .debug_str	00000000 
0001fe93 l       .debug_str	00000000 
0001fead l       .debug_str	00000000 
0001feb7 l       .debug_str	00000000 
0001febf l       .debug_str	00000000 
0001fec7 l       .debug_str	00000000 
0001ff03 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0001ff16 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001ff1e l       .debug_str	00000000 
0001ff56 l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
0001ff5e l       .debug_str	00000000 
0001ff96 l       .debug_str	00000000 
0001ff9e l       .debug_str	00000000 
0001ffd6 l       .debug_str	00000000 
0001fff0 l       .debug_str	00000000 
0001fff9 l       .debug_str	00000000 
00020031 l       .debug_str	00000000 
0002003a l       .debug_str	00000000 
00020072 l       .debug_str	00000000 
00013dfe l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
000200fa l       .debug_str	00000000 
00020142 l       .debug_str	00000000 
0002014d l       .debug_str	00000000 
000197e0 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0002018b l       .debug_str	00000000 
0001b651 l       .debug_str	00000000 
000201b4 l       .debug_str	00000000 
000201d9 l       .debug_str	00000000 
00016808 l       .debug_str	00000000 
0001b747 l       .debug_str	00000000 
00020238 l       .debug_str	00000000 
0001b799 l       .debug_str	00000000 
00020260 l       .debug_str	00000000 
00020291 l       .debug_str	00000000 
0002029d l       .debug_str	00000000 
000202fc l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
0002032e l       .debug_str	00000000 
00020376 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
00020383 l       .debug_str	00000000 
000203de l       .debug_str	00000000 
000203ec l       .debug_str	00000000 
00011885 l       .debug_str	00000000 
0001bbae l       .debug_str	00000000 
0000ea39 l       .debug_str	00000000 
00020434 l       .debug_str	00000000 
0001bbfa l       .debug_str	00000000 
0002046f l       .debug_str	00000000 
000204a6 l       .debug_str	00000000 
000204bf l       .debug_str	00000000 
000204cb l       .debug_str	00000000 
00014943 l       .debug_str	00000000 
0002051d l       .debug_str	00000000 
000149b3 l       .debug_str	00000000 
00020572 l       .debug_str	00000000 
000204ac l       .debug_str	00000000 
000205a5 l       .debug_str	00000000 
00019f29 l       .debug_str	00000000 
000205eb l       .debug_str	00000000 
000148d3 l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
0005d680 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00020634 l       .debug_str	00000000 
0002329c l       .debug_str	00000000 
00020645 l       .debug_str	00000000 
000206ba l       .debug_str	00000000 
000206e7 l       .debug_str	00000000 
0001a249 l       .debug_str	00000000 
00020773 l       .debug_str	00000000 
000207f6 l       .debug_str	00000000 
00020825 l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00020872 l       .debug_str	00000000 
000208a2 l       .debug_str	00000000 
000208f0 l       .debug_str	00000000 
00020920 l       .debug_str	00000000 
0002096e l       .debug_str	00000000 
0002099e l       .debug_str	00000000 
000209ec l       .debug_str	00000000 
00020a1d l       .debug_str	00000000 
00020a6c l       .debug_str	00000000 
00020a9d l       .debug_str	00000000 
00020aec l       .debug_str	00000000 
00020b1c l       .debug_str	00000000 
00020b24 l       .debug_str	00000000 
00020b54 l       .debug_str	00000000 
00020b5c l       .debug_str	00000000 
00020b9a l       .debug_str	00000000 
00020baf l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000ad69 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005b4b4 l       .debug_str	00000000 
0005b25a l       .debug_str	00000000 
0001fa60 l       .debug_str	00000000 
000192d3 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00020bdb l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
0005ad09 l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
0001692d l       .debug_str	00000000 
00020c31 l       .debug_str	00000000 
00013ce1 l       .debug_str	00000000 
00020c30 l       .debug_str	00000000 
00020c34 l       .debug_str	00000000 
00020c3e l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
0005d241 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
00020c44 l       .debug_str	00000000 
00020c48 l       .debug_str	00000000 
0001ff11 l       .debug_str	00000000 
00020c4d l       .debug_str	00000000 
00020c4c l       .debug_str	00000000 
00020c50 l       .debug_str	00000000 
00020c54 l       .debug_str	00000000 
00020c59 l       .debug_str	00000000 
00020c58 l       .debug_str	00000000 
00020c5c l       .debug_str	00000000 
00020c60 l       .debug_str	00000000 
0005ad38 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001fd7b l       .debug_str	00000000 
0001fdd0 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ee3b l       .debug_str	00000000 
00035e2f l       .debug_str	00000000 
00013252 l       .debug_str	00000000 
00013257 l       .debug_str	00000000 
0001325d l       .debug_str	00000000 
00016cf1 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013abc l       .debug_str	00000000 
00038d20 l       .debug_str	00000000 
0002ffe4 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005f057 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039b6a l       .debug_str	00000000 
0005d253 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005aec5 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbad l       .debug_str	00000000 
0000ea01 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013c00 l       .debug_str	00000000 
0001321a l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00020c64 l       .debug_str	00000000 
0005c6f7 l       .debug_str	00000000 
00020ce9 l       .debug_str	00000000 
00020d56 l       .debug_str	00000000 
00020dc8 l       .debug_str	00000000 
0005b4d3 l       .debug_str	00000000 
0005f057 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00020e26 l       .debug_str	00000000 
0004f0ae l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
0001fa60 l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000192ef l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005ee3b l       .debug_str	00000000 
0002ffe4 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00020e43 l       .debug_str	00000000 
0003433d l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
00020ea4 l       .debug_str	00000000 
000138b4 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
00031630 l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
00021508 l       .debug_str	00000000 
00021573 l       .debug_str	00000000 
000215b9 l       .debug_str	00000000 
0002162b l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00021870 l       .debug_str	00000000 
000218e2 l       .debug_str	00000000 
0002192c l       .debug_str	00000000 
00021976 l       .debug_str	00000000 
00021bc3 l       .debug_str	00000000 
00021bff l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
000039b7 l       .debug_str	00000000 
00021c44 l       .debug_str	00000000 
00021c81 l       .debug_str	00000000 
00021cc7 l       .debug_str	00000000 
00021d04 l       .debug_str	00000000 
00021f45 l       .debug_str	00000000 
00021f85 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000221c9 l       .debug_str	00000000 
0002241d l       .debug_str	00000000 
00022476 l       .debug_str	00000000 
000226c6 l       .debug_str	00000000 
0001fa60 l       .debug_str	00000000 
000113fa l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000607cb l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00035fc3 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
000316a4 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000221dd l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
00022431 l       .debug_str	00000000 
00020f07 l       .debug_str	00000000 
00020f6f l       .debug_str	00000000 
000211af l       .debug_str	00000000 
00021217 l       .debug_str	00000000 
0002125c l       .debug_str	00000000 
000212c7 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
0002276c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000131b5 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002271b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000192db l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0000bca1 l       .debug_str	00000000 
000192ef l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005f057 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002278e l       .debug_str	00000000 
000227ea l       .debug_str	00000000 
00022847 l       .debug_str	00000000 
000228a4 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
0001fb15 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001fa60 l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
00022a6e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005ee3b l       .debug_str	00000000 
0002ffe4 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00035e2f l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
00022901 l       .debug_str	00000000 
00022972 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002297e l       .debug_str	00000000 
000151d9 l       .debug_str	00000000 
000229ef l       .debug_str	00000000 
00022a60 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
00022df9 l       .debug_str	00000000 
00022e64 l       .debug_str	00000000 
00022f2c l       .debug_str	00000000 
00022e9a l       .debug_str	00000000 
00022ed1 l       .debug_str	00000000 
00022ee4 l       .debug_str	00000000 
00022f23 l       .debug_str	00000000 
00022f3e l       .debug_str	00000000 
00022f76 l       .debug_str	00000000 
00022f8a l       .debug_str	00000000 
00022fb6 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000192db l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000606a1 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039b6a l       .debug_str	00000000 
0005d253 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005aec5 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbad l       .debug_str	00000000 
0001fba1 l       .debug_str	00000000 
000192ef l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
0005b4d3 l       .debug_str	00000000 
000606a0 l       .debug_str	00000000 
00022fbf l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
0001708f l       .debug_str	00000000 
00022fc3 l       .debug_str	00000000 
0005fbce l       .debug_str	00000000 
00004ac5 l       .debug_str	00000000 
00004acd l       .debug_str	00000000 
00004ad6 l       .debug_str	00000000 
00004ae4 l       .debug_str	00000000 
00004aeb l       .debug_str	00000000 
0000476b l       .debug_str	00000000 
0000477b l       .debug_str	00000000 
00004784 l       .debug_str	00000000 
00004792 l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047ac l       .debug_str	00000000 
000049ba l       .debug_str	00000000 
000047b8 l       .debug_str	00000000 
000047c7 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047e8 l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
00004801 l       .debug_str	00000000 
00004834 l       .debug_str	00000000 
0000481b l       .debug_str	00000000 
00004840 l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00004872 l       .debug_str	00000000 
00004859 l       .debug_str	00000000 
000048ac l       .debug_str	00000000 
0000489f l       .debug_str	00000000 
00004886 l       .debug_str	00000000 
00004af2 l       .debug_str	00000000 
00004b51 l       .debug_str	00000000 
00004afa l       .debug_str	00000000 
00004b15 l       .debug_str	00000000 
00004b49 l       .debug_str	00000000 
00004b30 l       .debug_str	00000000 
0005ecac l       .debug_str	00000000 
0004d2f9 l       .debug_str	00000000 
00023b6a l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
0005c4be l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
00022fcb l       .debug_str	00000000 
0005fd02 l       .debug_str	00000000 
0005e042 l       .debug_str	00000000 
0005bf34 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005dc65 l       .debug_str	00000000 
0000c124 l       .debug_str	00000000 
0005b277 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c135 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c13f l       .debug_str	00000000 
0000c14a l       .debug_str	00000000 
0000c154 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000232b4 l       .debug_str	00000000 
00022a75 l       .debug_str	00000000 
00022aa6 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000607cb l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00035fc3 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
00031630 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00022431 l       .debug_str	00000000 
00022ab2 l       .debug_str	00000000 
00022ae2 l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
000316a4 l       .debug_str	00000000 
000221dd l       .debug_str	00000000 
00022aef l       .debug_str	00000000 
00022b20 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042c88 l       .debug_str	00000000 
00005772 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005fb45 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005a58a l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00060980 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000056f6 l       .debug_str	00000000 
0004fc2d l       .debug_str	00000000 
0000577b l       .debug_str	00000000 
00005786 l       .debug_str	00000000 
00022b28 l       .debug_str	00000000 
00022b53 l       .debug_str	00000000 
00022b64 l       .debug_str	00000000 
00022b99 l       .debug_str	00000000 
00004cf6 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
000049b1 l       .debug_str	00000000 
000049b9 l       .debug_str	00000000 
0000487d l       .debug_str	00000000 
000049c3 l       .debug_str	00000000 
00004c65 l       .debug_str	00000000 
00004c4c l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004c47 l       .debug_str	00000000 
00004c74 l       .debug_str	00000000 
00004cfe l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005decf l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00004d04 l       .debug_str	00000000 
00022ba8 l       .debug_str	00000000 
00022bdb l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00022beb l       .debug_str	00000000 
00022c1f l       .debug_str	00000000 
00022c28 l       .debug_str	00000000 
00022c54 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00022c63 l       .debug_str	00000000 
00022c96 l       .debug_str	00000000 
00022ca3 l       .debug_str	00000000 
00022caf l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00022ce0 l       .debug_str	00000000 
00022d15 l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00022d26 l       .debug_str	00000000 
00022d58 l       .debug_str	00000000 
00022d66 l       .debug_str	00000000 
00022da4 l       .debug_str	00000000 
00022dbe l       .debug_str	00000000 
00022e10 l       .debug_str	00000000 
00022e4c l       .debug_str	00000000 
20004a70 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20004a78 l     O .bss	00002004 _ZN6mynewt3spi12PENDING_DATA17hf749c482f1fd6e90E
20006f04 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
00013fce l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
20006a8c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
20006b04 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
20006aa4 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20006a84 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
000142e6 l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
000144d0 l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
00014aee l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
000147b8 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
20006a7c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
20006ab4 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
00014c16 l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
000275b0 l     O .text	0000001c str.0
00027610 l     O .text	00000021 str.1
00027670 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
00039b6a l       .debug_str	00000000 
0005d253 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005aec5 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbad l       .debug_str	00000000 
0001fba1 l       .debug_str	00000000 
000232c5 l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
000232cb l       .debug_str	00000000 
0000e7af l       .debug_str	00000000 
0005e042 l       .debug_str	00000000 
0005bf34 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
0002329a l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0005b097 l       .debug_str	00000000 
000232dd l       .debug_str	00000000 
0000e7c1 l       .debug_str	00000000 
00022fd6 l       .debug_str	00000000 
0003ff8e l       .debug_str	00000000 
00023001 l       .debug_str	00000000 
000606da l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
0002302d l       .debug_str	00000000 
000619d6 l       .debug_str	00000000 
0002309e l       .debug_str	00000000 
000230ca l       .debug_str	00000000 
000230f7 l       .debug_str	00000000 
00023163 l       .debug_str	00000000 
0002316b l       .debug_str	00000000 
000231d8 l       .debug_str	00000000 
000231e1 l       .debug_str	00000000 
0002320e l       .debug_str	00000000 
00022fb6 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00023288 l       .debug_str	00000000 
000232b8 l       .debug_str	00000000 
0005b277 l       .debug_str	00000000 
0000c135 l       .debug_str	00000000 
0000c13f l       .debug_str	00000000 
0000c14a l       .debug_str	00000000 
0000c154 l       .debug_str	00000000 
000232b4 l       .debug_str	00000000 
0002329e l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000192db l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00027870 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
00004afa l       .debug_str	00000000 
00004b15 l       .debug_str	00000000 
00004b49 l       .debug_str	00000000 
000232e2 l       .debug_str	00000000 
00023334 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013bf8 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042c88 l       .debug_str	00000000 
00004ac5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00004acd l       .debug_str	00000000 
00004ad6 l       .debug_str	00000000 
00004ae4 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00004aeb l       .debug_str	00000000 
0000476b l       .debug_str	00000000 
0000477b l       .debug_str	00000000 
00004784 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00004792 l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047ac l       .debug_str	00000000 
000049ba l       .debug_str	00000000 
000047b8 l       .debug_str	00000000 
000047c7 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047e8 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00004801 l       .debug_str	00000000 
00004834 l       .debug_str	00000000 
0000481b l       .debug_str	00000000 
00004840 l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00004872 l       .debug_str	00000000 
00004859 l       .debug_str	00000000 
0000487d l       .debug_str	00000000 
000048ac l       .debug_str	00000000 
0000489f l       .debug_str	00000000 
00004886 l       .debug_str	00000000 
00004af2 l       .debug_str	00000000 
00004b30 l       .debug_str	00000000 
00004b51 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
00024684 l       .debug_str	00000000 
000238a5 l       .debug_str	00000000 
000148d3 l       .debug_str	00000000 
000238e8 l       .debug_str	00000000 
0001493a l       .debug_str	00000000 
00023944 l       .debug_str	00000000 
000149aa l       .debug_str	00000000 
000239a3 l       .debug_str	00000000 
00014943 l       .debug_str	00000000 
000239f5 l       .debug_str	00000000 
00023a4a l       .debug_str	00000000 
00023aa0 l       .debug_str	00000000 
00023ace l       .debug_str	00000000 
00023ada l       .debug_str	00000000 
00023b0c l       .debug_str	00000000 
00023b33 l       .debug_str	00000000 
00023b65 l       .debug_str	00000000 
00023b75 l       .debug_str	00000000 
00023baa l       .debug_str	00000000 
00023bbd l       .debug_str	00000000 
00023bf3 l       .debug_str	00000000 
00023c07 l       .debug_str	00000000 
00023c51 l       .debug_str	00000000 
00023c62 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
00023c9e l       .debug_str	00000000 
0005a5b6 l       .debug_str	00000000 
0005fdc6 l       .debug_str	00000000 
00023cdc l       .debug_str	00000000 
00023d1a l       .debug_str	00000000 
00013d73 l       .debug_str	00000000 
00023d27 l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
00023d35 l       .debug_str	00000000 
00023d5d l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
00023d9c l       .debug_str	00000000 
00023dca l       .debug_str	00000000 
00023dd1 l       .debug_str	00000000 
00023e74 l       .debug_str	00000000 
00023e82 l       .debug_str	00000000 
00041497 l       .debug_str	00000000 
00023f1a l       .debug_str	00000000 
00023fb4 l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0002406c l       .debug_str	00000000 
0003433d l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00020634 l       .debug_str	00000000 
000240cf l       .debug_str	00000000 
00024141 l       .debug_str	00000000 
0002416b l       .debug_str	00000000 
000241a9 l       .debug_str	00000000 
000241bc l       .debug_str	00000000 
00024207 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00024210 l       .debug_str	00000000 
00024252 l       .debug_str	00000000 
00025513 l       .debug_str	00000000 
0002428c l       .debug_str	00000000 
000242d1 l       .debug_str	00000000 
000242ed l       .debug_str	00000000 
00024330 l       .debug_str	00000000 
00024346 l       .debug_str	00000000 
000243ab l       .debug_str	00000000 
00024410 l       .debug_str	00000000 
0002444b l       .debug_str	00000000 
00024458 l       .debug_str	00000000 
000204ac l       .debug_str	00000000 
0002448b l       .debug_str	00000000 
0000aa4d l       .debug_str	00000000 
000244d1 l       .debug_str	00000000 
00019f29 l       .debug_str	00000000 
00024517 l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
0002455e l       .debug_str	00000000 
000245a7 l       .debug_str	00000000 
000151d9 l       .debug_str	00000000 
0001fb15 l       .debug_str	00000000 
00016808 l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00024620 l       .debug_str	00000000 
00024665 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
000246bd l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
000246d5 l       .debug_str	00000000 
00024710 l       .debug_str	00000000 
00024734 l       .debug_str	00000000 
0002475a l       .debug_str	00000000 
00024795 l       .debug_str	00000000 
000247b8 l       .debug_str	00000000 
000247dd l       .debug_str	00000000 
0002481a l       .debug_str	00000000 
00024831 l       .debug_str	00000000 
0002486e l       .debug_str	00000000 
00024885 l       .debug_str	00000000 
00015614 l       .debug_str	00000000 
000248d6 l       .debug_str	00000000 
000173db l       .debug_str	00000000 
00024931 l       .debug_str	00000000 
00024994 l       .debug_str	00000000 
000249d6 l       .debug_str	00000000 
000158cd l       .debug_str	00000000 
00024a3a l       .debug_str	00000000 
0001a249 l       .debug_str	00000000 
00024aa7 l       .debug_str	00000000 
0000ad61 l       .debug_str	00000000 
00024b09 l       .debug_str	00000000 
00024b17 l       .debug_str	00000000 
00024b82 l       .debug_str	00000000 
00024b9c l       .debug_str	00000000 
00024bb2 l       .debug_str	00000000 
00024c1d l       .debug_str	00000000 
00024c2d l       .debug_str	00000000 
00024c99 l       .debug_str	00000000 
00024cab l       .debug_str	00000000 
00024d17 l       .debug_str	00000000 
00024d28 l       .debug_str	00000000 
00024d8f l       .debug_str	00000000 
00024dc7 l       .debug_str	00000000 
00024e31 l       .debug_str	00000000 
00024eb9 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00024f2d l       .debug_str	00000000 
00024faf l       .debug_str	00000000 
00024fc6 l       .debug_str	00000000 
00025004 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
000345af l       .debug_str	00000000 
00035e2f l       .debug_str	00000000 
00025017 l       .debug_str	00000000 
00025026 l       .debug_str	00000000 
00025064 l       .debug_str	00000000 
00025077 l       .debug_str	00000000 
000250a3 l       .debug_str	00000000 
000250ac l       .debug_str	00000000 
000250d8 l       .debug_str	00000000 
000250e1 l       .debug_str	00000000 
00025141 l       .debug_str	00000000 
00033ff0 l       .debug_str	00000000 
00025192 l       .debug_str	00000000 
000251e3 l       .debug_str	00000000 
00025240 l       .debug_str	00000000 
0002529e l       .debug_str	00000000 
00025583 l       .debug_str	00000000 
000252ef l       .debug_str	00000000 
00025318 l       .debug_str	00000000 
0002537b l       .debug_str	00000000 
0002538c l       .debug_str	00000000 
00025399 l       .debug_str	00000000 
000253ae l       .debug_str	00000000 
000253ff l       .debug_str	00000000 
00025428 l       .debug_str	00000000 
0002548b l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0001fa60 l       .debug_str	00000000 
00022a6e l       .debug_str	00000000 
0006187e l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
000254a8 l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
0003992a l       .debug_str	00000000 
0001ff11 l       .debug_str	00000000 
00016fee l       .debug_str	00000000 
0005b4d3 l       .debug_str	00000000 
0005a28a l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000606da l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
000254c9 l       .debug_str	00000000 
000024e8 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
000254cd l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0002353a l       .debug_str	00000000 
000254df l       .debug_str	00000000 
000254e4 l       .debug_str	00000000 
000254e9 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000167cd l       .debug_str	00000000 
0002550e l       .debug_str	00000000 
0002554a l       .debug_str	00000000 
0005d241 l       .debug_str	00000000 
0003e356 l       .debug_str	00000000 
00025560 l       .debug_str	00000000 
00025569 l       .debug_str	00000000 
0003795b l       .debug_str	00000000 
0005b326 l       .debug_str	00000000 
0004d56d l       .debug_str	00000000 
00025572 l       .debug_str	00000000 
00025576 l       .debug_str	00000000 
00037c21 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012aef l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
00012aeb l       .debug_str	00000000 
00012af6 l       .debug_str	00000000 
00012b02 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00025598 l       .debug_str	00000000 
00025593 l       .debug_str	00000000 
0005b0a7 l       .debug_str	00000000 
0002559c l       .debug_str	00000000 
000396f8 l       .debug_str	00000000 
000255a5 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0003c1b2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00023359 l       .debug_str	00000000 
000233b3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0003425a l       .debug_str	00000000 
00023402 l       .debug_str	00000000 
000254ba l       .debug_str	00000000 
000254ad l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005f057 l       .debug_str	00000000 
0002340a l       .debug_str	00000000 
00023417 l       .debug_str	00000000 
00023420 l       .debug_str	00000000 
0005a1a4 l       .debug_str	00000000 
00034626 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013ab6 l       .debug_str	00000000 
0005ee3b l       .debug_str	00000000 
0002ffe4 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013bf8 l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00035e09 l       .debug_str	00000000 
00013c00 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b3b4 l       .debug_str	00000000 
0000b3f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00013d51 l       .debug_str	00000000 
0002555a l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
0005ad09 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000131b5 l       .debug_str	00000000 
0005d2cf l       .debug_str	00000000 
00011486 l       .debug_str	00000000 
00036c83 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
0005b25a l       .debug_str	00000000 
0002329c l       .debug_str	00000000 
0002552e l       .debug_str	00000000 
00013c10 l       .debug_str	00000000 
0002342a l       .debug_str	00000000 
00023468 l       .debug_str	00000000 
0001aa2a l       .debug_str	00000000 
0005d680 l       .debug_str	00000000 
00046eae l       .debug_str	00000000 
00060754 l       .debug_str	00000000 
00023477 l       .debug_str	00000000 
00013c3f l       .debug_str	00000000 
000234a0 l       .debug_str	00000000 
0001aa9c l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001ac55 l       .debug_str	00000000 
0001fbcb l       .debug_str	00000000 
0000e7ec l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
000234d2 l       .debug_str	00000000 
000254f8 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
000234e0 l       .debug_str	00000000 
00013d2c l       .debug_str	00000000 
00013d3f l       .debug_str	00000000 
0005fcd0 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0004b55d l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005a33f l       .debug_str	00000000 
00023522 l       .debug_str	00000000 
00023526 l       .debug_str	00000000 
00023531 l       .debug_str	00000000 
00023540 l       .debug_str	00000000 
00023588 l       .debug_str	00000000 
000235a8 l       .debug_str	00000000 
0003a444 l       .debug_str	00000000 
000254e0 l       .debug_str	00000000 
000235f3 l       .debug_str	00000000 
000254e5 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
0002363e l       .debug_str	00000000 
00022a60 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
000236af l       .debug_str	00000000 
000143bc l       .debug_str	00000000 
000236dd l       .debug_str	00000000 
00011885 l       .debug_str	00000000 
00023725 l       .debug_str	00000000 
00023755 l       .debug_str	00000000 
00023780 l       .debug_str	00000000 
000204a6 l       .debug_str	00000000 
000204bf l       .debug_str	00000000 
000237b7 l       .debug_str	00000000 
000149b3 l       .debug_str	00000000 
00023808 l       .debug_str	00000000 
00014827 l       .debug_str	00000000 
0002385a l       .debug_str	00000000 
0001487e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0000ea08 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000255b1 l       .debug_str	00000000 
000255da l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
0002566b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000255e7 l       .debug_str	00000000 
00013c3f l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
0005f4d8 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00025610 l       .debug_str	00000000 
00025665 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
000259e0 l       .debug_str	00000000 
00025848 l       .debug_str	00000000 
00025884 l       .debug_str	00000000 
000258a0 l       .debug_str	00000000 
000258dc l       .debug_str	00000000 
00025912 l       .debug_str	00000000 
0002594e l       .debug_str	00000000 
00025959 l       .debug_str	00000000 
00025995 l       .debug_str	00000000 
000259a3 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
00025a17 l       .debug_str	00000000 
00025a54 l       .debug_str	00000000 
00025a63 l       .debug_str	00000000 
00025aa0 l       .debug_str	00000000 
00025ae3 l       .debug_str	00000000 
00025b20 l       .debug_str	00000000 
0000ea0d l       .debug_str	00000000 
00025b57 l       .debug_str	00000000 
00025b95 l       .debug_str	00000000 
00025bcc l       .debug_str	00000000 
00025c0b l       .debug_str	00000000 
00025c44 l       .debug_str	00000000 
00025ca8 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00025cdd l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00025cf8 l       .debug_str	00000000 
00025d3d l       .debug_str	00000000 
00025d5a l       .debug_str	00000000 
00013d61 l       .debug_str	00000000 
00019377 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
0001939f l       .debug_str	00000000 
0002566f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025d69 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00025cec l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f11b l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254e5 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00025f1e l       .debug_str	00000000 
000256a9 l       .debug_str	00000000 
00025d07 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
00025d4c l       .debug_str	00000000 
0000ea08 l       .debug_str	00000000 
000256c5 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000e870 l       .debug_str	00000000 
0000e879 l       .debug_str	00000000 
0000e887 l       .debug_str	00000000 
00019402 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0000e89f l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000f129 l       .debug_str	00000000 
0000f134 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0005fdc6 l       .debug_str	00000000 
000256d2 l       .debug_str	00000000 
0002570b l       .debug_str	00000000 
000257a6 l       .debug_str	00000000 
00025800 l       .debug_str	00000000 
0002583c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1i10ukgv8hgyc1v7
0005efe4 l       .debug_str	00000000 
00026838 l       .debug_str	00000000 
00026843 l       .debug_str	00000000 
0002684a l       .debug_str	00000000 
000268b5 l       .debug_str	00000000 
000269e6 l       .debug_str	00000000 
00026a53 l       .debug_str	00000000 
00026ac5 l       .debug_str	00000000 
00026bd3 l       .debug_str	00000000 
00026bde l       .debug_str	00000000 
00026c50 l       .debug_str	00000000 
00026d85 l       .debug_str	00000000 
00026df7 l       .debug_str	00000000 
00026ec7 l       .debug_str	00000000 
00026ee2 l       .debug_str	00000000 
00026f2c l       .debug_str	00000000 
00027069 l       .debug_str	00000000 
000270a4 l       .debug_str	00000000 
000271ac l       .debug_str	00000000 
000271e7 l       .debug_str	00000000 
00027316 l       .debug_str	00000000 
00027351 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000256a9 l       .debug_str	00000000 
0002741b l       .debug_str	00000000 
00027457 l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
00027522 l       .debug_str	00000000 
00027542 l       .debug_str	00000000 
0002757e l       .debug_str	00000000 
0002d406 l       .debug_str	00000000 
00027687 l       .debug_str	00000000 
000276c4 l       .debug_str	00000000 
000277ce l       .debug_str	00000000 
0002780b l       .debug_str	00000000 
0002793c l       .debug_str	00000000 
000279bd l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
0002824d l       .debug_str	00000000 
00027af2 l       .debug_str	00000000 
00027b70 l       .debug_str	00000000 
000126a8 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00027ca0 l       .debug_str	00000000 
00027d7f l       .debug_str	00000000 
00027e98 l       .debug_str	00000000 
00027fd8 l       .debug_str	00000000 
000280f5 l       .debug_str	00000000 
00028239 l       .debug_str	00000000 
0001fa60 l       .debug_str	00000000 
000113fa l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000607cb l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c875 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c8d8 l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000c959 l       .debug_str	00000000 
0000c9f3 l       .debug_str	00000000 
0000cab6 l       .debug_str	00000000 
0000cba3 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00035fc3 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0000d651 l       .debug_str	00000000 
0000d764 l       .debug_str	00000000 
0000d884 l       .debug_str	00000000 
0000d99b l       .debug_str	00000000 
0000dad4 l       .debug_str	00000000 
0000dc2a l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
0002c27e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00028109 l       .debug_str	00000000 
0000eb08 l       .debug_str	00000000 
0000ec1a l       .debug_str	00000000 
0000ed49 l       .debug_str	00000000 
0002c146 l       .debug_str	00000000 
00027fec l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f11b l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254e5 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00025f1e l       .debug_str	00000000 
0000f3b1 l       .debug_str	00000000 
0000f3de l       .debug_str	00000000 
0000f3ff l       .debug_str	00000000 
0000f466 l       .debug_str	00000000 
0000f506 l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
0000f5e0 l       .debug_str	00000000 
0000f657 l       .debug_str	00000000 
0000f6db l       .debug_str	00000000 
0000f756 l       .debug_str	00000000 
0000f7f4 l       .debug_str	00000000 
0000f89f l       .debug_str	00000000 
00029658 l       .debug_str	00000000 
00028d8f l       .debug_str	00000000 
000290c6 l       .debug_str	00000000 
0002c04c l       .debug_str	00000000 
00027cb4 l       .debug_str	00000000 
00025dab l       .debug_str	00000000 
00025e39 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025f09 l       .debug_str	00000000 
00025f24 l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
00010209 l       .debug_str	00000000 
00025f41 l       .debug_str	00000000 
00025f5a l       .debug_str	00000000 
0002ec3b l       .debug_str	00000000 
00025f80 l       .debug_str	00000000 
00025fe6 l       .debug_str	00000000 
000260f0 l       .debug_str	00000000 
00026156 l       .debug_str	00000000 
00026287 l       .debug_str	00000000 
000262ef l       .debug_str	00000000 
000263ba l       .debug_str	00000000 
00026422 l       .debug_str	00000000 
0002652b l       .debug_str	00000000 
00026593 l       .debug_str	00000000 
000266c3 l       .debug_str	00000000 
0002672e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00027930 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbad l       .debug_str	00000000 
00028382 l       .debug_str	00000000 
000283cd l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0001fb0c l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00039b6a l       .debug_str	00000000 
0005d253 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005aec5 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 24fd677mu7rr1lzm
00026f2c l       .debug_str	00000000 
0002a689 l       .debug_str	00000000 
0002a712 l       .debug_str	00000000 
0002a84c l       .debug_str	00000000 
0002a8d5 l       .debug_str	00000000 
0002a9e8 l       .debug_str	00000000 
0002aa74 l       .debug_str	00000000 
0002ab00 l       .debug_str	00000000 
0002ac16 l       .debug_str	00000000 
0002aca2 l       .debug_str	00000000 
0002ad90 l       .debug_str	00000000 
00027457 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
00027522 l       .debug_str	00000000 
0002ae0e l       .debug_str	00000000 
0002757e l       .debug_str	00000000 
0002d406 l       .debug_str	00000000 
0002ae8c l       .debug_str	00000000 
000276c4 l       .debug_str	00000000 
0002af0b l       .debug_str	00000000 
0002780b l       .debug_str	00000000 
0002af8a l       .debug_str	00000000 
00025fe6 l       .debug_str	00000000 
0002b009 l       .debug_str	00000000 
00026156 l       .debug_str	00000000 
0002b088 l       .debug_str	00000000 
0002b10a l       .debug_str	00000000 
00026843 l       .debug_str	00000000 
0002b217 l       .debug_str	00000000 
0002b299 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
0002b37e l       .debug_str	00000000 
0002b400 l       .debug_str	00000000 
0002b4cf l       .debug_str	00000000 
0002b4e6 l       .debug_str	00000000 
0002b568 l       .debug_str	00000000 
0002b69c l       .debug_str	00000000 
0002b71e l       .debug_str	00000000 
0002b803 l       .debug_str	00000000 
0002b885 l       .debug_str	00000000 
0002b992 l       .debug_str	00000000 
0002ba14 l       .debug_str	00000000 
0002bb48 l       .debug_str	00000000 
0002bbca l       .debug_str	00000000 
0002bc99 l       .debug_str	00000000 
0002bd1b l       .debug_str	00000000 
0002be4f l       .debug_str	00000000 
0002bed1 l       .debug_str	00000000 
0002bfde l       .debug_str	00000000 
0002c03a l       .debug_str	00000000 
0002c134 l       .debug_str	00000000 
0002c26c l       .debug_str	00000000 
000113fa l       .debug_str	00000000 
0002c3cb l       .debug_str	00000000 
0001fa60 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002c4db l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
000192e5 l       .debug_str	00000000 
0002c4e8 l       .debug_str	00000000 
0002eb70 l       .debug_str	00000000 
0006187e l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0002c4fa l       .debug_str	00000000 
00035e09 l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00013d51 l       .debug_str	00000000 
0002c4ff l       .debug_str	00000000 
0003ff8e l       .debug_str	00000000 
0002c633 l       .debug_str	00000000 
0002c78e l       .debug_str	00000000 
0002c89a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000607cb l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
000283ff l       .debug_str	00000000 
0002846c l       .debug_str	00000000 
00028502 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00035fc3 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
0000f5e0 l       .debug_str	00000000 
0000f657 l       .debug_str	00000000 
0000f6db l       .debug_str	00000000 
0000f756 l       .debug_str	00000000 
0000f7f4 l       .debug_str	00000000 
0000f89f l       .debug_str	00000000 
000285c1 l       .debug_str	00000000 
00028686 l       .debug_str	00000000 
00028758 l       .debug_str	00000000 
00028821 l       .debug_str	00000000 
0002890b l       .debug_str	00000000 
00028a12 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
0002c3dd l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
0000c875 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c8d8 l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000c959 l       .debug_str	00000000 
0000c9f3 l       .debug_str	00000000 
0000cab6 l       .debug_str	00000000 
0000cba3 l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0000d651 l       .debug_str	00000000 
0000d764 l       .debug_str	00000000 
0000d884 l       .debug_str	00000000 
0000d99b l       .debug_str	00000000 
0000dad4 l       .debug_str	00000000 
0000dc2a l       .debug_str	00000000 
0002c27e l       .debug_str	00000000 
0000eb08 l       .debug_str	00000000 
0000ec1a l       .debug_str	00000000 
0000ed49 l       .debug_str	00000000 
0002c146 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f11b l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254e5 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00025f1e l       .debug_str	00000000 
0000f3b1 l       .debug_str	00000000 
0000f3de l       .debug_str	00000000 
0000f3ff l       .debug_str	00000000 
0000f466 l       .debug_str	00000000 
0000f506 l       .debug_str	00000000 
00029658 l       .debug_str	00000000 
00028b18 l       .debug_str	00000000 
00028b9a l       .debug_str	00000000 
00028c88 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00028d8f l       .debug_str	00000000 
00028d70 l       .debug_str	00000000 
000290c6 l       .debug_str	00000000 
00028e80 l       .debug_str	00000000 
00028ed1 l       .debug_str	00000000 
00028fc0 l       .debug_str	00000000 
000290a8 l       .debug_str	00000000 
0002c04c l       .debug_str	00000000 
000291b6 l       .debug_str	00000000 
00029231 l       .debug_str	00000000 
0002931b l       .debug_str	00000000 
000293ff l       .debug_str	00000000 
0002950b l       .debug_str	00000000 
00029557 l       .debug_str	00000000 
00029642 l       .debug_str	00000000 
0002972c l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00029836 l       .debug_str	00000000 
00029937 l       .debug_str	00000000 
0002998d l       .debug_str	00000000 
00029a8b l       .debug_str	00000000 
00029ae1 l       .debug_str	00000000 
00029c2e l       .debug_str	00000000 
00029c84 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00029daa l       .debug_str	00000000 
00029e31 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025f09 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00026ec7 l       .debug_str	00000000 
00029f04 l       .debug_str	00000000 
00029f8b l       .debug_str	00000000 
00026838 l       .debug_str	00000000 
00026bd3 l       .debug_str	00000000 
0002a09c l       .debug_str	00000000 
0002a123 l       .debug_str	00000000 
0002a25b l       .debug_str	00000000 
0002a2e3 l       .debug_str	00000000 
0002a3b7 l       .debug_str	00000000 
0002a440 l       .debug_str	00000000 
0002a515 l       .debug_str	00000000 
0002a59e l       .debug_str	00000000 
000279b0 l     O .text	00000021 str.0
000279f0 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
0001cac6 l       .debug_str	00000000 
0002cc95 l       .debug_str	00000000 
0002cca2 l       .debug_str	00000000 
0002cce2 l       .debug_str	00000000 
0002cddf l       .debug_str	00000000 
0002ce1f l       .debug_str	00000000 
0002ce2e l       .debug_str	00000000 
0002ce6e l       .debug_str	00000000 
0002ce8d l       .debug_str	00000000 
0002cecd l       .debug_str	00000000 
0002cee9 l       .debug_str	00000000 
0002cf29 l       .debug_str	00000000 
0002cf37 l       .debug_str	00000000 
0002cf77 l       .debug_str	00000000 
0005fdc6 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c5f5 l       .debug_str	00000000 
0001d5d8 l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
0002cf85 l       .debug_str	00000000 
0002cfc6 l       .debug_str	00000000 
0000c336 l       .debug_str	00000000 
0002cffb l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0002d005 l       .debug_str	00000000 
0002d046 l       .debug_str	00000000 
0001fae9 l       .debug_str	00000000 
0002d093 l       .debug_str	00000000 
0002d0d4 l       .debug_str	00000000 
0002d109 l       .debug_str	00000000 
0002d114 l       .debug_str	00000000 
0002d155 l       .debug_str	00000000 
0002d1a2 l       .debug_str	00000000 
0002d1e3 l       .debug_str	00000000 
0002d218 l       .debug_str	00000000 
0002d287 l       .debug_str	00000000 
0002d388 l       .debug_str	00000000 
0001deaf l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0002d3f7 l       .debug_str	00000000 
0002d416 l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001708f l       .debug_str	00000000 
0005b112 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f11b l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254e5 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00025f1e l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
00016437 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
0002d406 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0006117d l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
000607cb l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
000283ff l       .debug_str	00000000 
0002846c l       .debug_str	00000000 
00028502 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00035fc3 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
0000f5e0 l       .debug_str	00000000 
0000f657 l       .debug_str	00000000 
0000f6db l       .debug_str	00000000 
0000f756 l       .debug_str	00000000 
0000f7f4 l       .debug_str	00000000 
0000f89f l       .debug_str	00000000 
000285c1 l       .debug_str	00000000 
00028686 l       .debug_str	00000000 
00028758 l       .debug_str	00000000 
00028821 l       .debug_str	00000000 
0002890b l       .debug_str	00000000 
00028a12 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
0002c3dd l       .debug_str	00000000 
00029836 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002c990 l       .debug_str	00000000 
0002ca70 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00027522 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
0000c32d l       .debug_str	00000000 
0002cb6e l       .debug_str	00000000 
0002cb75 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002cb7d l       .debug_str	00000000 
0002cb91 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0002cbc3 l       .debug_str	00000000 
0002cbd7 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002cc09 l       .debug_str	00000000 
0002cc48 l       .debug_str	00000000 
0002cc56 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2nk42jtdlqpdrpvo
0000f5e0 l       .debug_str	00000000 
0002d5a2 l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0002d695 l       .debug_str	00000000 
0002d70d l       .debug_str	00000000 
0002d827 l       .debug_str	00000000 
0002d89f l       .debug_str	00000000 
0000f657 l       .debug_str	00000000 
0000f6db l       .debug_str	00000000 
0000f756 l       .debug_str	00000000 
0000f7f4 l       .debug_str	00000000 
0000f89f l       .debug_str	00000000 
0002d96b l       .debug_str	00000000 
0002d9e3 l       .debug_str	00000000 
0002daaf l       .debug_str	00000000 
0002db27 l       .debug_str	00000000 
0002dbcc l       .debug_str	00000000 
0002dc44 l       .debug_str	00000000 
0002dcc2 l       .debug_str	00000000 
0002dd3a l       .debug_str	00000000 
0002dd91 l       .debug_str	00000000 
0002de09 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00035fc3 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
0002d434 l       .debug_str	00000000 
0002d4ac l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0002d52a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2tupw4qr6cy3al7x
00000c36 l       .debug_str	00000000 
00025d07 l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0003510f l       .debug_str	00000000 
0002faf4 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0002fa1d l       .debug_str	00000000 
0002deae l       .debug_str	00000000 
0002def7 l       .debug_str	00000000 
000113fa l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
00016afc l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f129 l       .debug_str	00000000 
0000f134 l       .debug_str	00000000 
0000f13e l       .debug_str	00000000 
0000e899 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00019354 l       .debug_str	00000000 
0000f147 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
0001939f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 32m5mr5zne5f73k7
0000c1cf l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0005dc64 l       .debug_str	00000000 
0000c1be l       .debug_str	00000000 
00060b3f l       .debug_str	00000000 
0000c1c2 l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
0005ff7b l       .debug_str	00000000 
0000e753 l       .debug_str	00000000 
0000e742 l       .debug_str	00000000 
0005c622 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0006187e l       .debug_str	00000000 
0005b4d3 l       .debug_str	00000000 
0000e8d4 l       .debug_str	00000000 
0002e546 l       .debug_str	00000000 
0002e5e2 l       .debug_str	00000000 
0000e870 l       .debug_str	00000000 
0000e879 l       .debug_str	00000000 
0000e887 l       .debug_str	00000000 
00019402 l       .debug_str	00000000 
0000e89f l       .debug_str	00000000 
000257a6 l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
0002e5ed l       .debug_str	00000000 
0002e6b7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
0000eaf3 l       .debug_str	00000000 
0000f236 l       .debug_str	00000000 
0000e8d9 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f129 l       .debug_str	00000000 
0000f134 l       .debug_str	00000000 
0000f13e l       .debug_str	00000000 
0000e899 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00019354 l       .debug_str	00000000 
0000f147 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
0001939f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025d07 l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0003510f l       .debug_str	00000000 
0002faf4 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0002fa88 l       .debug_str	00000000 
0000eaf9 l       .debug_str	00000000 
0000eb00 l       .debug_str	00000000 
0000e795 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000607cb l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c875 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c8d8 l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000c959 l       .debug_str	00000000 
0000c9f3 l       .debug_str	00000000 
0000cab6 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00035fc3 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0000eb08 l       .debug_str	00000000 
0000ec1a l       .debug_str	00000000 
0000ed49 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
0002c146 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027fec l       .debug_str	00000000 
0000f154 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
0002e56a l       .debug_str	00000000 
0000f23b l       .debug_str	00000000 
0000f241 l       .debug_str	00000000 
0000cba3 l       .debug_str	00000000 
0000d651 l       .debug_str	00000000 
0000d764 l       .debug_str	00000000 
0000d884 l       .debug_str	00000000 
0000d99b l       .debug_str	00000000 
0000dad4 l       .debug_str	00000000 
0000dc2a l       .debug_str	00000000 
0002c27e l       .debug_str	00000000 
00028109 l       .debug_str	00000000 
0000f24a l       .debug_str	00000000 
0005d8dd l       .debug_str	00000000 
0002e611 l       .debug_str	00000000 
0002329c l       .debug_str	00000000 
0002df6b l       .debug_str	00000000 
0002dfce l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
0002329a l       .debug_str	00000000 
0005b097 l       .debug_str	00000000 
000232dd l       .debug_str	00000000 
0005f5d3 l       .debug_str	00000000 
0002fa1d l       .debug_str	00000000 
0002e09e l       .debug_str	00000000 
0002e0e1 l       .debug_str	00000000 
0002e186 l       .debug_str	00000000 
0002e1c4 l       .debug_str	00000000 
0002e238 l       .debug_str	00000000 
0002e278 l       .debug_str	00000000 
0002e31a l       .debug_str	00000000 
0002e3a8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000fefd l       .debug_str	00000000 
0000ff19 l       .debug_str	00000000 
0002e419 l       .debug_str	00000000 
0002e4a9 l       .debug_str	00000000 
00010610 l       .debug_str	00000000 
000105b2 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00016afc l       .debug_str	00000000 
00027b40 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3ulq1z5tkxz9njop
00001366 l       .debug_str	00000000 
0002e789 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
000192ef l       .debug_str	00000000 
000192e5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00013c10 l       .debug_str	00000000 
0002ffe4 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002e6c0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002e724 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4f0czol4b3uljl4v
00000d05 l       .debug_str	00000000 
0002e907 l       .debug_str	00000000 
00025f09 l       .debug_str	00000000 
00026ec7 l       .debug_str	00000000 
0002e926 l       .debug_str	00000000 
0002e9a4 l       .debug_str	00000000 
0002ea34 l       .debug_str	00000000 
0002ea4b l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
0005d680 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00020634 l       .debug_str	00000000 
00003d80 l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
0001692d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002e7ee l       .debug_str	00000000 
0002e87a l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00026838 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00026bd3 l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f11b l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254e5 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00025f1e l       .debug_str	00000000 
0002e889 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n9jsiq8blzioqfk
0002ee9b l       .debug_str	00000000 
0002eddf l       .debug_str	00000000 
0002edfc l       .debug_str	00000000 
0002ee05 l       .debug_str	00000000 
0002ee4b l       .debug_str	00000000 
0002ee54 l       .debug_str	00000000 
0002f0d0 l       .debug_str	00000000 
0002eee4 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
00003d80 l       .debug_str	00000000 
0002eef0 l       .debug_str	00000000 
0002ef6c l       .debug_str	00000000 
0005d680 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00020634 l       .debug_str	00000000 
0002ef97 l       .debug_str	00000000 
0002f013 l       .debug_str	00000000 
0002f045 l       .debug_str	00000000 
0002f0cb l       .debug_str	00000000 
0002f0da l       .debug_str	00000000 
0002ea34 l       .debug_str	00000000 
0002f14b l       .debug_str	00000000 
0002f1bf l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002f1c9 l       .debug_str	00000000 
0002f1d6 l       .debug_str	00000000 
0002f24d l       .debug_str	00000000 
0002f267 l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
0005ad09 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002ead2 l       .debug_str	00000000 
0002eafb l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00026838 l       .debug_str	00000000 
0002c4db l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
000192e5 l       .debug_str	00000000 
0002c4e8 l       .debug_str	00000000 
0002eb70 l       .debug_str	00000000 
0002eb08 l       .debug_str	00000000 
0002eb4a l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0002eb5e l       .debug_str	00000000 
0005fcd0 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0004b55d l       .debug_str	00000000 
0000fed0 l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f11b l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254e5 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00025f1e l       .debug_str	00000000 
0002eb7a l       .debug_str	00000000 
0002eba3 l       .debug_str	00000000 
00025f09 l       .debug_str	00000000 
00025f24 l       .debug_str	00000000 
00010209 l       .debug_str	00000000 
00025f41 l       .debug_str	00000000 
00025f5a l       .debug_str	00000000 
0002ec3b l       .debug_str	00000000 
0002ebc0 l       .debug_str	00000000 
0002ec05 l       .debug_str	00000000 
0002ec29 l       .debug_str	00000000 
0002ec58 l       .debug_str	00000000 
000337e8 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00026843 l       .debug_str	00000000 
0002ec8b l       .debug_str	00000000 
00033846 l       .debug_str	00000000 
0002b4cf l       .debug_str	00000000 
0002ecbe l       .debug_str	00000000 
000338c8 l       .debug_str	00000000 
00026ec7 l       .debug_str	00000000 
0002ecf5 l       .debug_str	00000000 
0003394c l       .debug_str	00000000 
00026bd3 l       .debug_str	00000000 
0002ed2c l       .debug_str	00000000 
0002ed7a l       .debug_str	00000000 
0002329c l       .debug_str	00000000 
0002ed8a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z4uczzv8d994j8w
00001366 l       .debug_str	00000000 
0002f397 l       .debug_str	00000000 
0002f3e9 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
0005b25a l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0006187e l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013bf8 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002f288 l       .debug_str	00000000 
0002f2d6 l       .debug_str	00000000 
0000fed0 l       .debug_str	00000000 
0002f2df l       .debug_str	00000000 
0002f32f l       .debug_str	00000000 
0002f33a l       .debug_str	00000000 
0002f38b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
0002f96f l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000e870 l       .debug_str	00000000 
0000e879 l       .debug_str	00000000 
0000e887 l       .debug_str	00000000 
00019402 l       .debug_str	00000000 
0000e89f l       .debug_str	00000000 
000257a6 l       .debug_str	00000000 
0002f7eb l       .debug_str	00000000 
0002f8a8 l       .debug_str	00000000 
0002f8e3 l       .debug_str	00000000 
0002f93c l       .debug_str	00000000 
00025ca8 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0002f9f2 l       .debug_str	00000000 
0002fa56 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
0002fa59 l       .debug_str	00000000 
00012a48 l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
0002566f l       .debug_str	00000000 
00025d69 l       .debug_str	00000000 
0005a4b5 l       .debug_str	00000000 
00061dd5 l       .debug_str	00000000 
0002fac9 l       .debug_str	00000000 
0002facc l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00012b02 l       .debug_str	00000000 
000192f4 l       .debug_str	00000000 
00012b0d l       .debug_str	00000000 
00012b18 l       .debug_str	00000000 
0002fad9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f129 l       .debug_str	00000000 
0000f134 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
0000f13e l       .debug_str	00000000 
0000e899 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00019354 l       .debug_str	00000000 
0000f147 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
0001939f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025d07 l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0003510f l       .debug_str	00000000 
0002faf4 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0002fa1d l       .debug_str	00000000 
0002f3f6 l       .debug_str	00000000 
0002f493 l       .debug_str	00000000 
0002f4cc l       .debug_str	00000000 
0002f56b l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0002fa88 l       .debug_str	00000000 
0002f5a4 l       .debug_str	00000000 
0002f641 l       .debug_str	00000000 
0002f675 l       .debug_str	00000000 
0002f718 l       .debug_str	00000000 
0002f7b7 l       .debug_str	00000000 
00027c20 l     O .text	0000001c str.0
00027c50 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
0002fad9 l       .debug_str	00000000 
0002faf4 l       .debug_str	00000000 
0002fb98 l       .debug_str	00000000 
0002fc0d l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00012b02 l       .debug_str	00000000 
00025cf8 l       .debug_str	00000000 
00012b0d l       .debug_str	00000000 
00012b18 l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
0001939f l       .debug_str	00000000 
0003510f l       .debug_str	00000000 
0002fb29 l       .debug_str	00000000 
00025ca8 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025d07 l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 vnkfcw75uydipan
0002fd53 l       .debug_str	00000000 
00025f1e l       .debug_str	00000000 
00025f09 l       .debug_str	00000000 
00025f24 l       .debug_str	00000000 
0002fc44 l       .debug_str	00000000 
0002fc8f l       .debug_str	00000000 
0002fca2 l       .debug_str	00000000 
0002fced l       .debug_str	00000000 
0002fd10 l       .debug_str	00000000 
00010209 l       .debug_str	00000000 
0002fd6f l       .debug_str	00000000 
0002eee4 l       .debug_str	00000000 
0000fed0 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00026838 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002c4db l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f11b l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254e5 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
0000bca2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000106a7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0001088d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00010886 l       .debug_str	00000000 
0002fdb2 l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2m8s7rk6gjg5sdjo
0002ff75 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e742 l       .debug_str	00000000 
0000e792 l       .debug_str	00000000 
000413c5 l       .debug_str	00000000 
0001a556 l       .debug_str	00000000 
0003df75 l       .debug_str	00000000 
0000e795 l       .debug_str	00000000 
0005b4d3 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
0006187e l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0005dc64 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
0002329a l       .debug_str	00000000 
0000c1be l       .debug_str	00000000 
0005b097 l       .debug_str	00000000 
000232dd l       .debug_str	00000000 
00060b3f l       .debug_str	00000000 
0000c1c2 l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
0005ff7b l       .debug_str	00000000 
0000c1cf l       .debug_str	00000000 
0005f5d3 l       .debug_str	00000000 
0000e753 l       .debug_str	00000000 
0005d3a9 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012063 l       .debug_str	00000000 
0001206c l       .debug_str	00000000 
00012075 l       .debug_str	00000000 
00012080 l       .debug_str	00000000 
0001208b l       .debug_str	00000000 
00012096 l       .debug_str	00000000 
000120a2 l       .debug_str	00000000 
000120ac l       .debug_str	00000000 
000120b9 l       .debug_str	00000000 
000120c7 l       .debug_str	00000000 
000120d6 l       .debug_str	00000000 
000120e3 l       .debug_str	00000000 
000302d7 l       .debug_str	00000000 
000302c6 l       .debug_str	00000000 
0003510f l       .debug_str	00000000 
0002fe77 l       .debug_str	00000000 
0002fec5 l       .debug_str	00000000 
0002ff25 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2ug841oumney39pv
0005c9a6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000131b5 l       .debug_str	00000000 
0005f057 l       .debug_str	00000000 
0002ffd7 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002ffea l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00030076 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0003007f l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
0003008f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vf5zed9a93zfp29
0000171d l       .debug_str	00000000 
0001fa60 l       .debug_str	00000000 
000192d3 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005ee3b l       .debug_str	00000000 
00035e2f l       .debug_str	00000000 
00013252 l       .debug_str	00000000 
00013257 l       .debug_str	00000000 
0001325d l       .debug_str	00000000 
00016cf1 l       .debug_str	00000000 
00038d20 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
000300b6 l       .debug_str	00000000 
000300df l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
00013265 l       .debug_str	00000000 
0005fdc6 l       .debug_str	00000000 
000300e7 l       .debug_str	00000000 
0003010f l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ng3xpvqtoio1chp
000363a2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000131b5 l       .debug_str	00000000 
0005f057 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0003013e l       .debug_str	00000000 
0005c6f7 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3qt6984rqt15w0xm
0002683f l       .debug_str	00000000 
000302a1 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000126a8 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000302c1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00011486 l       .debug_str	00000000 
0005d3a9 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012063 l       .debug_str	00000000 
0001206c l       .debug_str	00000000 
00012075 l       .debug_str	00000000 
00012080 l       .debug_str	00000000 
0001208b l       .debug_str	00000000 
00012096 l       .debug_str	00000000 
000120a2 l       .debug_str	00000000 
000120ac l       .debug_str	00000000 
000120b9 l       .debug_str	00000000 
000120c7 l       .debug_str	00000000 
000120d6 l       .debug_str	00000000 
000120e3 l       .debug_str	00000000 
000302d7 l       .debug_str	00000000 
000302c6 l       .debug_str	00000000 
0002329c l       .debug_str	00000000 
000301ad l       .debug_str	00000000 
00030210 l       .debug_str	00000000 
0003023a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5cymlse6j4664rei
0005b25a l       .debug_str	00000000 
0003040e l       .debug_str	00000000 
0003042a l       .debug_str	00000000 
00030450 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e1aa l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000302e5 l       .debug_str	00000000 
00013c3f l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
0003030e l       .debug_str	00000000 
0003031f l       .debug_str	00000000 
0003032f l       .debug_str	00000000 
0003037b l       .debug_str	00000000 
00030386 l       .debug_str	00000000 
000303bc l       .debug_str	00000000 
000303d4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
0003095d l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
000039b7 l       .debug_str	00000000 
00030cb1 l       .debug_str	00000000 
00021c81 l       .debug_str	00000000 
00030d30 l       .debug_str	00000000 
00021d04 l       .debug_str	00000000 
00030daf l       .debug_str	00000000 
00030e31 l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
00031075 l       .debug_str	00000000 
000310f7 l       .debug_str	00000000 
00031140 l       .debug_str	00000000 
000311c2 l       .debug_str	00000000 
0003120b l       .debug_str	00000000 
00021f85 l       .debug_str	00000000 
0003128d l       .debug_str	00000000 
0003130f l       .debug_str	00000000 
00031553 l       .debug_str	00000000 
000315d5 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0003161e l       .debug_str	00000000 
00031692 l       .debug_str	00000000 
000113fa l       .debug_str	00000000 
0001fa60 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00035e09 l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00013d51 l       .debug_str	00000000 
0006187e l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0002c4fa l       .debug_str	00000000 
00031901 l       .debug_str	00000000 
00031b6c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000607cb l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00035fc3 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
00031630 l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
000316a4 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00030459 l       .debug_str	00000000 
000304e0 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
0003052d l       .debug_str	00000000 
000305b4 l       .debug_str	00000000 
000307fc l       .debug_str	00000000 
00030885 l       .debug_str	00000000 
000308d4 l       .debug_str	00000000 
00030ba7 l       .debug_str	00000000 
00021976 l       .debug_str	00000000 
00030c33 l       .debug_str	00000000 
00021bff l       .debug_str	00000000 
00027dc0 l     O .text	0000001c str.0
00027e00 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013bf8 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0006187e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00031bdc l       .debug_str	00000000 
0000b32d l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00013c10 l       .debug_str	00000000 
0002ffe4 l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00031c2c l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
00031ef1 l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00031f69 l       .debug_str	00000000 
00032194 l       .debug_str	00000000 
0003220c l       .debug_str	00000000 
0003239b l       .debug_str	00000000 
00032413 l       .debug_str	00000000 
0003257b l       .debug_str	00000000 
000325f3 l       .debug_str	00000000 
00032671 l       .debug_str	00000000 
000326e9 l       .debug_str	00000000 
000327dc l       .debug_str	00000000 
00032854 l       .debug_str	00000000 
00032a31 l       .debug_str	00000000 
00032aa9 l       .debug_str	00000000 
00032b75 l       .debug_str	00000000 
00032bed l       .debug_str	00000000 
00032c1d l       .debug_str	00000000 
00032c95 l       .debug_str	00000000 
00032d3a l       .debug_str	00000000 
00032db2 l       .debug_str	00000000 
00032ef3 l       .debug_str	00000000 
00032f6b l       .debug_str	00000000 
00033121 l       .debug_str	00000000 
00033199 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00035fc3 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00031c90 l       .debug_str	00000000 
00031d08 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00031d5f l       .debug_str	00000000 
00031dd7 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16gyyaet005v3lvf
00025665 l       .debug_str	00000000 
0003339d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000333fd l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00035fc3 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1gec8qpvo4ti2nbg
0001cac6 l       .debug_str	00000000 
0002f38b l       .debug_str	00000000 
00033561 l       .debug_str	00000000 
0002f3e9 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
0005b25a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013c00 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003345d l       .debug_str	00000000 
0002f2d6 l       .debug_str	00000000 
00026838 l       .debug_str	00000000 
000334af l       .debug_str	00000000 
00033502 l       .debug_str	00000000 
0003350c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 28buxl9xaffr9rke
0005ae3c l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005f057 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000335b7 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
000192e5 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2leljxexqh8ze7wz
000363a2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000131b5 l       .debug_str	00000000 
0005f057 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00033614 l       .debug_str	00000000 
0005c6f7 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cgt5uexdtuxl7pe
00033964 l       .debug_str	00000000 
0003386a l       .debug_str	00000000 
00033887 l       .debug_str	00000000 
000338c2 l       .debug_str	00000000 
000338f0 l       .debug_str	00000000 
0003390b l       .debug_str	00000000 
00033946 l       .debug_str	00000000 
0003396f l       .debug_str	00000000 
00033502 l       .debug_str	00000000 
00033995 l       .debug_str	00000000 
000339bb l       .debug_str	00000000 
000339d5 l       .debug_str	00000000 
0002f32f l       .debug_str	00000000 
000339fc l       .debug_str	00000000 
00033a23 l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
00010209 l       .debug_str	00000000 
0000fed0 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005e1aa l       .debug_str	00000000 
0005b4b4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00033685 l       .debug_str	00000000 
00033697 l       .debug_str	00000000 
000336a8 l       .debug_str	00000000 
000336f4 l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f11b l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254e5 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00025f1e l       .debug_str	00000000 
00033700 l       .debug_str	00000000 
00033722 l       .debug_str	00000000 
00033743 l       .debug_str	00000000 
0003378f l       .debug_str	00000000 
000337ab l       .debug_str	00000000 
000337e2 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00026838 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
000337fc l       .debug_str	00000000 
00033809 l       .debug_str	00000000 
00033840 l       .debug_str	00000000 
00025f09 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3wi7uqccuys0591w
0001680f l       .debug_str	00000000 
00016849 l       .debug_str	00000000 
00016882 l       .debug_str	00000000 
00016891 l       .debug_str	00000000 
000168d4 l       .debug_str	00000000 
0005c785 l       .debug_str	00000000 
00039110 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013aff l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
00011ff5 l       .debug_str	00000000 
0001688b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00033a3e l       .debug_str	00000000 
00013b42 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00033a67 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
00025665 l       .debug_str	00000000 
00033aa3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00033b03 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00035fc3 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
00033bcf l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00033b63 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
000363a2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
000131b5 l       .debug_str	00000000 
0005f057 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00033bd8 l       .debug_str	00000000 
0005c6f7 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 25lz0dio8kzdubcg
00016768 l       .debug_str	00000000 
0005b25a l       .debug_str	00000000 
00025f09 l       .debug_str	00000000 
00010209 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00013abc l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00033c49 l       .debug_str	00000000 
00033c87 l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f11b l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254e5 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00025f1e l       .debug_str	00000000 
00033ca0 l       .debug_str	00000000 
00033cde l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00026838 l       .debug_str	00000000 
0005b4b4 l       .debug_str	00000000 
0000fed0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
00033d07 l       .debug_str	00000000 
00033d1a l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
0005f057 l       .debug_str	00000000 
00033d4b l       .debug_str	00000000 
00033d53 l       .debug_str	00000000 
00033d5c l       .debug_str	00000000 
00033da5 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00033d63 l       .debug_str	00000000 
00033da2 l       .debug_str	00000000 
00033dab l       .debug_str	00000000 
00033ded l       .debug_str	00000000 
00033df7 l       .debug_str	00000000 
00033e3a l       .debug_str	00000000 
00033e44 l       .debug_str	00000000 
00033e87 l       .debug_str	00000000 
00033e91 l       .debug_str	00000000 
00033ed4 l       .debug_str	00000000 
00033edf l       .debug_str	00000000 
00033f24 l       .debug_str	00000000 
00033f2f l       .debug_str	00000000 
00033f74 l       .debug_str	00000000 
00033f7a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
000345af l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
00033f87 l       .debug_str	00000000 
00033f97 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000113bc l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00035e09 l       .debug_str	00000000 
00061973 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00013d51 l       .debug_str	00000000 
0002555a l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00033fdd l       .debug_str	00000000 
0002329c l       .debug_str	00000000 
0005fdc6 l       .debug_str	00000000 
000349b3 l       .debug_str	00000000 
000113c4 l       .debug_str	00000000 
0005f9d8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005b22e l       .debug_str	00000000 
00033fef l       .debug_str	00000000 
00033ff4 l       .debug_str	00000000 
0006134e l       .debug_str	00000000 
00033fff l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
00034009 l       .debug_str	00000000 
0003467d l       .debug_str	00000000 
00034013 l       .debug_str	00000000 
00016768 l       .debug_str	00000000 
000346bd l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000349f6 l       .debug_str	00000000 
000113ce l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00034021 l       .debug_str	00000000 
00034095 l       .debug_str	00000000 
000348d7 l       .debug_str	00000000 
000340a7 l       .debug_str	00000000 
000346c3 l       .debug_str	00000000 
0003469d l       .debug_str	00000000 
000151fb l       .debug_str	00000000 
0003491a l       .debug_str	00000000 
000340ac l       .debug_str	00000000 
00034120 l       .debug_str	00000000 
00034a2f l       .debug_str	00000000 
00034a76 l       .debug_str	00000000 
0003497c l       .debug_str	00000000 
00034138 l       .debug_str	00000000 
0004420b l       .debug_str	00000000 
0003992a l       .debug_str	00000000 
0005b1dd l       .debug_str	00000000 
00034a91 l       .debug_str	00000000 
0003494b l       .debug_str	00000000 
000341b0 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00022a6f l       .debug_str	00000000 
00034208 l       .debug_str	00000000 
0003420d l       .debug_str	00000000 
0003421f l       .debug_str	00000000 
0001cac6 l       .debug_str	00000000 
0003510f l       .debug_str	00000000 
00034228 l       .debug_str	00000000 
0001ac0b l       .debug_str	00000000 
00034250 l       .debug_str	00000000 
00034260 l       .debug_str	00000000 
0005d680 l       .debug_str	00000000 
000342b9 l       .debug_str	00000000 
000342c1 l       .debug_str	00000000 
00013ce1 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00012c40 l       .debug_str	00000000 
000342c9 l       .debug_str	00000000 
00016995 l       .debug_str	00000000 
000342d5 l       .debug_str	00000000 
000342df l       .debug_str	00000000 
000342ec l       .debug_str	00000000 
000342f9 l       .debug_str	00000000 
0003430e l       .debug_str	00000000 
00034322 l       .debug_str	00000000 
00034338 l       .debug_str	00000000 
00034340 l       .debug_str	00000000 
0003434d l       .debug_str	00000000 
0003435a l       .debug_str	00000000 
00034c63 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00034367 l       .debug_str	00000000 
00034394 l       .debug_str	00000000 
000343c3 l       .debug_str	00000000 
000343ea l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00034409 l       .debug_str	00000000 
0003441e l       .debug_str	00000000 
0001a62d l       .debug_str	00000000 
0004f0af l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00034428 l       .debug_str	00000000 
0003444d l       .debug_str	00000000 
00034433 l       .debug_str	00000000 
000344cc l       .debug_str	00000000 
0003445d l       .debug_str	00000000 
00034463 l       .debug_str	00000000 
00034472 l       .debug_str	00000000 
0003447d l       .debug_str	00000000 
000344b2 l       .debug_str	00000000 
000344d7 l       .debug_str	00000000 
000344e7 l       .debug_str	00000000 
0005ba46 l       .debug_str	00000000 
00034519 l       .debug_str	00000000 
0003451e l       .debug_str	00000000 
0005c8e9 l       .debug_str	00000000 
00035d83 l       .debug_str	00000000 
00035d7c l       .debug_str	00000000 
00013c10 l       .debug_str	00000000 
00035daa l       .debug_str	00000000 
00035dde l       .debug_str	00000000 
00034524 l       .debug_str	00000000 
00005940 l       .debug_str	00000000 
00034562 l       .debug_str	00000000 
00035d87 l       .debug_str	00000000 
00035dd4 l       .debug_str	00000000 
00034543 l       .debug_str	00000000 
00034530 l       .debug_str	00000000 
00034549 l       .debug_str	00000000 
00022a6e l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0000bca1 l       .debug_str	00000000 
00034571 l       .debug_str	00000000 
00034579 l       .debug_str	00000000 
0003fa42 l       .debug_str	00000000 
0003457f l       .debug_str	00000000 
0004d56d l       .debug_str	00000000 
000345a6 l       .debug_str	00000000 
0003458a l       .debug_str	00000000 
0000ea08 l       .debug_str	00000000 
000345ae l       .debug_str	00000000 
0003425a l       .debug_str	00000000 
00023402 l       .debug_str	00000000 
000254ba l       .debug_str	00000000 
000345b3 l       .debug_str	00000000 
000345d7 l       .debug_str	00000000 
000345dd l       .debug_str	00000000 
000345e5 l       .debug_str	00000000 
0004fbd8 l       .debug_str	00000000 
0003f63e l       .debug_str	00000000 
000345ea l       .debug_str	00000000 
00034612 l       .debug_str	00000000 
000345f4 l       .debug_str	00000000 
0002683f l       .debug_str	00000000 
000192e5 l       .debug_str	00000000 
00016808 l       .debug_str	00000000 
0001fb0c l       .debug_str	00000000 
0002340a l       .debug_str	00000000 
00023417 l       .debug_str	00000000 
00023420 l       .debug_str	00000000 
0005a1a4 l       .debug_str	00000000 
00034626 l       .debug_str	00000000 
0003461a l       .debug_str	00000000 
000131b5 l       .debug_str	00000000 
00034633 l       .debug_str	00000000 
0003463f l       .debug_str	00000000 
00034662 l       .debug_str	00000000 
0003464c l       .debug_str	00000000 
00034670 l       .debug_str	00000000 
00034690 l       .debug_str	00000000 
000346b0 l       .debug_str	00000000 
000346cb l       .debug_str	00000000 
000346e6 l       .debug_str	00000000 
000346ec l       .debug_str	00000000 
000346f0 l       .debug_str	00000000 
00034701 l       .debug_str	00000000 
000346f4 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00034716 l       .debug_str	00000000 
00034711 l       .debug_str	00000000 
00034729 l       .debug_str	00000000 
00034775 l       .debug_str	00000000 
0003474e l       .debug_str	00000000 
00034765 l       .debug_str	00000000 
0003478f l       .debug_str	00000000 
00034780 l       .debug_str	00000000 
000347d7 l       .debug_str	00000000 
000347b7 l       .debug_str	00000000 
00034830 l       .debug_str	00000000 
00034810 l       .debug_str	00000000 
0005a196 l       .debug_str	00000000 
00034887 l       .debug_str	00000000 
0003488c l       .debug_str	00000000 
00034892 l       .debug_str	00000000 
000348b5 l       .debug_str	00000000 
00034897 l       .debug_str	00000000 
000348c0 l       .debug_str	00000000 
0003490b l       .debug_str	00000000 
0003493c l       .debug_str	00000000 
0003496d l       .debug_str	00000000 
0003499c l       .debug_str	00000000 
000349e7 l       .debug_str	00000000 
00034a18 l       .debug_str	00000000 
0001aa2a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0003a054 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00039b6a l       .debug_str	00000000 
0005d253 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0006188d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005aec5 l       .debug_str	00000000 
0005adc6 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005b40e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001fa30 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbad l       .debug_str	00000000 
0001fba1 l       .debug_str	00000000 
0001f9de l       .debug_str	00000000 
00034a69 l       .debug_str	00000000 
00034a82 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00034ab0 l       .debug_str	00000000 
00034aaf l       .debug_str	00000000 
00034ac4 l       .debug_str	00000000 
00034ab5 l       .debug_str	00000000 
0005aeb7 l       .debug_str	00000000 
0005a184 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
00034af1 l       .debug_str	00000000 
00034ae3 l       .debug_str	00000000 
00034ae2 l       .debug_str	00000000 
0001fb15 l       .debug_str	00000000 
000192ef l       .debug_str	00000000 
00061cc3 l       .debug_str	00000000 
00034afa l       .debug_str	00000000 
00034afe l       .debug_str	00000000 
00034b01 l       .debug_str	00000000 
000607b3 l       .debug_str	00000000 
000192d3 l       .debug_str	00000000 
00034b04 l       .debug_str	00000000 
0001a5a5 l       .debug_str	00000000 
00034b08 l       .debug_str	00000000 
00034b07 l       .debug_str	00000000 
00034b0d l       .debug_str	00000000 
00034bdf l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
00034b2b l       .debug_str	00000000 
00034b19 l       .debug_str	00000000 
00034b50 l       .debug_str	00000000 
00034c18 l       .debug_str	00000000 
00034b6e l       .debug_str	00000000 
00034b5c l       .debug_str	00000000 
00034b93 l       .debug_str	00000000 
00034bac l       .debug_str	00000000 
00034b9a l       .debug_str	00000000 
00034bb8 l       .debug_str	00000000 
00034bd0 l       .debug_str	00000000 
00034c09 l       .debug_str	00000000 
0001a5ab l       .debug_str	00000000 
00034c42 l       .debug_str	00000000 
00034c4f l       .debug_str	00000000 
00034c4e l       .debug_str	00000000 
00034c57 l       .debug_str	00000000 
00034c84 l       .debug_str	00000000 
00034c6f l       .debug_str	00000000 
00034ca1 l       .debug_str	00000000 
00034cad l       .debug_str	00000000 
00034d57 l       .debug_str	00000000 
00034cb9 l       .debug_str	00000000 
00034cc0 l       .debug_str	00000000 
00034cc9 l       .debug_str	00000000 
00034cd7 l       .debug_str	00000000 
00034cde l       .debug_str	00000000 
00034ce6 l       .debug_str	00000000 
00034ced l       .debug_str	00000000 
00034d33 l       .debug_str	00000000 
00034d0e l       .debug_str	00000000 
00034cf9 l       .debug_str	00000000 
00034d1e l       .debug_str	00000000 
00034d42 l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
00034d63 l       .debug_str	00000000 
000254cd l       .debug_str	00000000 
0005e69d l       .debug_str	00000000 
0001f951 l       .debug_str	00000000 
0001f93a l       .debug_str	00000000 
00034d7d l       .debug_str	00000000 
00034da0 l       .debug_str	00000000 
00034d89 l       .debug_str	00000000 
00034dea l       .debug_str	00000000 
00034dde l       .debug_str	00000000 
00034255 l       .debug_str	00000000 
00034e07 l       .debug_str	00000000 
00034df0 l       .debug_str	00000000 
00034e50 l       .debug_str	00000000 
00034e78 l       .debug_str	00000000 
00034e61 l       .debug_str	00000000 
0005d241 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
0005b2cc l       .debug_str	00000000 
00034f27 l       .debug_str	00000000 
00034f09 l       .debug_str	00000000 
0003501d l       .debug_str	00000000 
00034ffd l       .debug_str	00000000 
00035090 l       .debug_str	00000000 
00035070 l       .debug_str	00000000 
0004b696 l       .debug_str	00000000 
000350e3 l       .debug_str	00000000 
000350f0 l       .debug_str	00000000 
000350fb l       .debug_str	00000000 
00035111 l       .debug_str	00000000 
0003511b l       .debug_str	00000000 
00035171 l       .debug_str	00000000 
00035183 l       .debug_str	00000000 
000351d5 l       .debug_str	00000000 
000351e9 l       .debug_str	00000000 
0003523d l       .debug_str	00000000 
00035244 l       .debug_str	00000000 
0003528a l       .debug_str	00000000 
00035299 l       .debug_str	00000000 
000352f3 l       .debug_str	00000000 
00035349 l       .debug_str	00000000 
000353a1 l       .debug_str	00000000 
000353eb l       .debug_str	00000000 
000353f1 l       .debug_str	00000000 
00035441 l       .debug_str	00000000 
0003548d l       .debug_str	00000000 
000354db l       .debug_str	00000000 
00025573 l       .debug_str	00000000 
0003551b l       .debug_str	00000000 
00035568 l       .debug_str	00000000 
000355b1 l       .debug_str	00000000 
000355fc l       .debug_str	00000000 
00035639 l       .debug_str	00000000 
00035649 l       .debug_str	00000000 
000356a4 l       .debug_str	00000000 
000356fb l       .debug_str	00000000 
00035754 l       .debug_str	00000000 
00042a2a l       .debug_str	00000000 
0003579f l       .debug_str	00000000 
000357f3 l       .debug_str	00000000 
00035843 l       .debug_str	00000000 
00035895 l       .debug_str	00000000 
0005ad38 l       .debug_str	00000000 
000358d9 l       .debug_str	00000000 
00035925 l       .debug_str	00000000 
0003596d l       .debug_str	00000000 
000359b7 l       .debug_str	00000000 
00042860 l       .debug_str	00000000 
000359f3 l       .debug_str	00000000 
00035a47 l       .debug_str	00000000 
00035a97 l       .debug_str	00000000 
00035ae9 l       .debug_str	00000000 
00035b2d l       .debug_str	00000000 
00035b39 l       .debug_str	00000000 
00035b90 l       .debug_str	00000000 
00035be3 l       .debug_str	00000000 
00035c38 l       .debug_str	00000000 
00035c7f l       .debug_str	00000000 
00035c8b l       .debug_str	00000000 
00035ca2 l       .debug_str	00000000 
00035c9b l       .debug_str	00000000 
00035cb4 l       .debug_str	00000000 
00035cc9 l       .debug_str	00000000 
00035d1a l       .debug_str	00000000 
00035d2a l       .debug_str	00000000 
00035d7b l       .debug_str	00000000 
00035d86 l       .debug_str	00000000 
00035da9 l       .debug_str	00000000 
00035ddd l       .debug_str	00000000 
00035df3 l       .debug_str	00000000 
00035e21 l       .debug_str	00000000 
00035e15 l       .debug_str	00000000 
00035e2f l       .debug_str	00000000 
00035e2e l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000192db l       .debug_str	00000000 
000254e0 l       .debug_str	00000000 
000254df l       .debug_str	00000000 
000254e5 l       .debug_str	00000000 
000254e4 l       .debug_str	00000000 
00035e32 l       .debug_str	00000000 
00035e72 l       .debug_str	00000000 
00035e7a l       .debug_str	00000000 
00035eba l       .debug_str	00000000 
00035ec4 l       .debug_str	00000000 
0005a2d0 l       .debug_str	00000000 
0005ee3b l       .debug_str	00000000 
00035f00 l       .debug_str	00000000 
0001b799 l       .debug_str	00000000 
00038d20 l       .debug_str	00000000 
00035f28 l       .debug_str	00000000 
0001b651 l       .debug_str	00000000 
00035f51 l       .debug_str	00000000 
00035f76 l       .debug_str	00000000 
00046eae l       .debug_str	00000000 
0005b326 l       .debug_str	00000000 
00035f7d l       .debug_str	00000000 
00035f86 l       .debug_str	00000000 
00035fbf l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
00035fc7 l       .debug_str	00000000 
00014aa9 l       .debug_str	00000000 
0003605c l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
000360a7 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
000360ee l       .debug_str	00000000 
00011afa l       .debug_str	00000000 
00036143 l       .debug_str	00000000 
00036180 l       .debug_str	00000000 
00013c00 l       .debug_str	00000000 
0003618b l       .debug_str	00000000 
000149b3 l       .debug_str	00000000 
000361e0 l       .debug_str	00000000 
00014943 l       .debug_str	00000000 
00036232 l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
00036279 l       .debug_str	00000000 
0000acd7 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011486 l       .debug_str	00000000 
00036c83 l       .debug_str	00000000 
000362ff l       .debug_str	00000000 
00036340 l       .debug_str	00000000 
00036363 l       .debug_str	00000000 
0003639e l       .debug_str	00000000 
000363a8 l       .debug_str	00000000 
00036432 l       .debug_str	00000000 
00036464 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00013bf8 l       .debug_str	00000000 
000364d8 l       .debug_str	00000000 
00036529 l       .debug_str	00000000 
00013d2c l       .debug_str	00000000 
0003656b l       .debug_str	00000000 
000365f2 l       .debug_str	00000000 
00036601 l       .debug_str	00000000 
0003668b l       .debug_str	00000000 
00036707 l       .debug_str	00000000 
00036737 l       .debug_str	00000000 
00036772 l       .debug_str	00000000 
0003677c l       .debug_str	00000000 
00003b0f l       .debug_str	00000000 
000367f3 l       .debug_str	00000000 
00036848 l       .debug_str	00000000 
00036851 l       .debug_str	00000000 
000368a2 l       .debug_str	00000000 
000058be l       .debug_str	00000000 
000368ae l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
000368bb l       .debug_str	00000000 
000368c4 l       .debug_str	00000000 
000368da l       .debug_str	00000000 
000368e7 l       .debug_str	00000000 
0003692c l       .debug_str	00000000 
00036940 l       .debug_str	00000000 
00036995 l       .debug_str	00000000 
0003699e l       .debug_str	00000000 
0004db4d l       .debug_str	00000000 
000369d6 l       .debug_str	00000000 
00036a13 l       .debug_str	00000000 
00036a1e l       .debug_str	00000000 
00036aa1 l       .debug_str	00000000 
00036aac l       .debug_str	00000000 
00036b32 l       .debug_str	00000000 
00036ba7 l       .debug_str	00000000 
00036bd3 l       .debug_str	00000000 
00036c5c l       .debug_str	00000000 
00036c6b l       .debug_str	00000000 
00036c78 l       .debug_str	00000000 
00036c8c l       .debug_str	00000000 
00036ce2 l       .debug_str	00000000 
00036d51 l       .debug_str	00000000 
00036dd1 l       .debug_str	00000000 
00036e3f l       .debug_str	00000000 
00036eca l       .debug_str	00000000 
00036f3f l       .debug_str	00000000 
00036f7f l       .debug_str	00000000 
00037002 l       .debug_str	00000000 
00037043 l       .debug_str	00000000 
0004b558 l       .debug_str	00000000 
0004f072 l       .debug_str	00000000 
000370a8 l       .debug_str	00000000 
00037157 l       .debug_str	00000000 
000371a2 l       .debug_str	00000000 
00014c2e l       .debug_str	00000000 
0003724b l       .debug_str	00000000 
000372c7 l       .debug_str	00000000 
00013ab6 l       .debug_str	00000000 
000372ec l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
00037339 l       .debug_str	00000000 
000141a6 l       .debug_str	00000000 
0003738c l       .debug_str	00000000 
000373c7 l       .debug_str	00000000 
000373d2 l       .debug_str	00000000 
0001a249 l       .debug_str	00000000 
0003745e l       .debug_str	00000000 
00013dfe l       .debug_str	00000000 
000374e1 l       .debug_str	00000000 
00037569 l       .debug_str	00000000 
000206ba l       .debug_str	00000000 
000375de l       .debug_str	00000000 
00037664 l       .debug_str	00000000 
00015135 l       .debug_str	00000000 
000376d9 l       .debug_str	00000000 
0000b810 l       .debug_str	00000000 
0003773c l       .debug_str	00000000 
0000ad61 l       .debug_str	00000000 
0003779e l       .debug_str	00000000 
0000aa4d l       .debug_str	00000000 
000377e4 l       .debug_str	00000000 
0003782c l       .debug_str	00000000 
00037836 l       .debug_str	00000000 
00037877 l       .debug_str	00000000 
00037891 l       .debug_str	00000000 
00025598 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00037897 l       .debug_str	00000000 
000378a0 l       .debug_str	00000000 
00037905 l       .debug_str	00000000 
00037914 l       .debug_str	00000000 
00037956 l       .debug_str	00000000 
00037960 l       .debug_str	00000000 
000379c5 l       .debug_str	00000000 
00037a07 l       .debug_str	00000000 
00037a51 l       .debug_str	00000000 
00037a60 l       .debug_str	00000000 
00037a96 l       .debug_str	00000000 
00037a9f l       .debug_str	00000000 
0001708f l       .debug_str	00000000 
00037aa9 l       .debug_str	00000000 
00037aac l       .debug_str	00000000 
00037ae4 l       .debug_str	00000000 
00037aee l       .debug_str	00000000 
00037b32 l       .debug_str	00000000 
00037b48 l       .debug_str	00000000 
00037b91 l       .debug_str	00000000 
00013d73 l       .debug_str	00000000 
00025583 l       .debug_str	00000000 
00037bd6 l       .debug_str	00000000 
00037c1f l       .debug_str	00000000 
00037c2d l       .debug_str	00000000 
00037c75 l       .debug_str	00000000 
00023c51 l       .debug_str	00000000 
00037cbf l       .debug_str	00000000 
00041497 l       .debug_str	00000000 
00037d57 l       .debug_str	00000000 
0005ad09 l       .debug_str	00000000 
00037df1 l       .debug_str	00000000 
00024141 l       .debug_str	00000000 
00037e63 l       .debug_str	00000000 
00023e74 l       .debug_str	00000000 
00037f06 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00037f38 l       .debug_str	00000000 
00037f7f l       .debug_str	00000000 
00037f8d l       .debug_str	00000000 
00037f97 l       .debug_str	00000000 
00037fe5 l       .debug_str	00000000 
00037ff5 l       .debug_str	00000000 
00038040 l       .debug_str	00000000 
0003804e l       .debug_str	00000000 
000380dc l       .debug_str	00000000 
000380eb l       .debug_str	00000000 
0000c0b6 l       .debug_str	00000000 
00038134 l       .debug_str	00000000 
0000c05f l       .debug_str	00000000 
00038179 l       .debug_str	00000000 
000381b3 l       .debug_str	00000000 
000381bc l       .debug_str	00000000 
00038208 l       .debug_str	00000000 
00038220 l       .debug_str	00000000 
00038282 l       .debug_str	00000000 
0000bfaf l       .debug_str	00000000 
000382b7 l       .debug_str	00000000 
000382df l       .debug_str	00000000 
00038317 l       .debug_str	00000000 
00038340 l       .debug_str	00000000 
0003834b l       .debug_str	00000000 
0001a9a8 l       .debug_str	00000000 
00038370 l       .debug_str	00000000 
000383ff l       .debug_str	00000000 
00038436 l       .debug_str	00000000 
000384bc l       .debug_str	00000000 
0003850a l       .debug_str	00000000 
00038513 l       .debug_str	00000000 
00038599 l       .debug_str	00000000 
000385ac l       .debug_str	00000000 
00038635 l       .debug_str	00000000 
00038691 l       .debug_str	00000000 
000386d3 l       .debug_str	00000000 
00038785 l       .debug_str	00000000 
000387c4 l       .debug_str	00000000 
00038869 l       .debug_str	00000000 
000388fd l       .debug_str	00000000 
00038923 l       .debug_str	00000000 
0003899f l       .debug_str	00000000 
000389da l       .debug_str	00000000 
000389e7 l       .debug_str	00000000 
00038a20 l       .debug_str	00000000 
00038a38 l       .debug_str	00000000 
00038a78 l       .debug_str	00000000 
0002ffe4 l       .debug_str	00000000 
00038a84 l       .debug_str	00000000 
00038ae1 l       .debug_str	00000000 
00038b3e l       .debug_str	00000000 
00038beb l       .debug_str	00000000 
00038c48 l       .debug_str	00000000 
00016515 l       .debug_str	00000000 
00038cb5 l       .debug_str	00000000 
00038d19 l       .debug_str	00000000 
00038d24 l       .debug_str	00000000 
00038d54 l       .debug_str	00000000 
00038d80 l       .debug_str	00000000 
00038dec l       .debug_str	00000000 
00038e1c l       .debug_str	00000000 
00038e58 l       .debug_str	00000000 
00038ea2 l       .debug_str	00000000 
00038eb2 l       .debug_str	00000000 
00038ee7 l       .debug_str	00000000 
00038f2c l       .debug_str	00000000 
00038f37 l       .debug_str	00000000 
00038f77 l       .debug_str	00000000 
00038f85 l       .debug_str	00000000 
00039011 l       .debug_str	00000000 
0003908d l       .debug_str	00000000 
000390ad l       .debug_str	00000000 
00039107 l       .debug_str	00000000 
00039114 l       .debug_str	00000000 
0003914d l       .debug_str	00000000 
00039155 l       .debug_str	00000000 
000391aa l       .debug_str	00000000 
000391fc l       .debug_str	00000000 
000380e1 l       .debug_str	00000000 
00039243 l       .debug_str	00000000 
000392b7 l       .debug_str	00000000 
000392fb l       .debug_str	00000000 
00039347 l       .debug_str	00000000 
00039386 l       .debug_str	00000000 
000393ac l       .debug_str	00000000 
000393be l       .debug_str	00000000 
000393c8 l       .debug_str	00000000 
0003940a l       .debug_str	00000000 
00003a62 l       .debug_str	00000000 
00039491 l       .debug_str	00000000 
00011a7b l       .debug_str	00000000 
0003950d l       .debug_str	00000000 
00039584 l       .debug_str	00000000 
000395d2 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00039662 l       .debug_str	00000000 
0003969e l       .debug_str	00000000 
000396ab l       .debug_str	00000000 
000396f1 l       .debug_str	00000000 
000396fe l       .debug_str	00000000 
0003a444 l       .debug_str	00000000 
00039730 l       .debug_str	00000000 
00039780 l       .debug_str	00000000 
00039797 l       .debug_str	00000000 
00039821 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0003989d l       .debug_str	00000000 
000398b1 l       .debug_str	00000000 
0003990e l       .debug_str	00000000 
0003991d l       .debug_str	00000000 
0003992e l       .debug_str	00000000 
00039988 l       .debug_str	00000000 
00039997 l       .debug_str	00000000 
00039a20 l       .debug_str	00000000 
00039a2e l       .debug_str	00000000 
00039a84 l       .debug_str	00000000 
00039ad8 l       .debug_str	00000000 
00039b51 l       .debug_str	00000000 
00039b69 l       .debug_str	00000000 
00039b73 l       .debug_str	00000000 
00039c0a l       .debug_str	00000000 
00039c24 l       .debug_str	00000000 
0001d5b8 l       .debug_str	00000000 
00039c5d l       .debug_str	00000000 
000138b4 l       .debug_str	00000000 
00039cc2 l       .debug_str	00000000 
00039d59 l       .debug_str	00000000 
00039d5d l       .debug_str	00000000 
0003a052 l       .debug_str	00000000 
00039d62 l       .debug_str	00000000 
0005fd03 l       .debug_str	00000000 
00013abc l       .debug_str	00000000 
00039d94 l       .debug_str	00000000 
000197e0 l       .debug_str	00000000 
00039dd2 l       .debug_str	00000000 
0000a9f3 l       .debug_str	00000000 
00039e25 l       .debug_str	00000000 
00039eb1 l       .debug_str	00000000 
00039f2d l       .debug_str	00000000 
00039f4c l       .debug_str	00000000 
00039f97 l       .debug_str	00000000 
00039fa4 l       .debug_str	00000000 
0003a018 l       .debug_str	00000000 
0003e356 l       .debug_str	00000000 
0004fa91 l       .debug_str	00000000 
0003a037 l       .debug_str	00000000 
0003a057 l       .debug_str	00000000 
0003a073 l       .debug_str	00000000 
0003a07d l       .debug_str	00000000 
0003a109 l       .debug_str	00000000 
0003a185 l       .debug_str	00000000 
0003a1b6 l       .debug_str	00000000 
0003a239 l       .debug_str	00000000 
0003a259 l       .debug_str	00000000 
0003a2df l       .debug_str	00000000 
0003a354 l       .debug_str	00000000 
0003007f l       .debug_str	00000000 
0005d2cf l       .debug_str	00000000 
0003a395 l       .debug_str	00000000 
00024207 l       .debug_str	00000000 
0003a3e0 l       .debug_str	00000000 
0003a43c l       .debug_str	00000000 
0003a448 l       .debug_str	00000000 
0003a491 l       .debug_str	00000000 
0003a4a1 l       .debug_str	00000000 
0003a4e6 l       .debug_str	00000000 
0003a52f l       .debug_str	00000000 
0003a574 l       .debug_str	00000000 
0003a5d0 l       .debug_str	00000000 
0003a61b l       .debug_str	00000000 
0003a662 l       .debug_str	00000000 
0003a6c0 l       .debug_str	00000000 
0003a70b l       .debug_str	00000000 
0003a752 l       .debug_str	00000000 
0003a7b0 l       .debug_str	00000000 
0003a7fb l       .debug_str	00000000 
0003a842 l       .debug_str	00000000 
0003a8a0 l       .debug_str	00000000 
0003a8e9 l       .debug_str	00000000 
0003a92e l       .debug_str	00000000 
0003a98a l       .debug_str	00000000 
0003a9d3 l       .debug_str	00000000 
0003aa18 l       .debug_str	00000000 
0003aa74 l       .debug_str	00000000 
0003aabe l       .debug_str	00000000 
0003ab04 l       .debug_str	00000000 
0003ab61 l       .debug_str	00000000 
0003abab l       .debug_str	00000000 
0003abf1 l       .debug_str	00000000 
0003ac4e l       .debug_str	00000000 
0003aca9 l       .debug_str	00000000 
0003acf1 l       .debug_str	00000000 
0003ad35 l       .debug_str	00000000 
0003ad7d l       .debug_str	00000000 
0003adc1 l       .debug_str	00000000 
0003ae1c l       .debug_str	00000000 
0003ae65 l       .debug_str	00000000 
0003aeaa l       .debug_str	00000000 
0003af06 l       .debug_str	00000000 
0003af4f l       .debug_str	00000000 
0003af94 l       .debug_str	00000000 
0003aff0 l       .debug_str	00000000 
0003b039 l       .debug_str	00000000 
0003b07e l       .debug_str	00000000 
0003b0da l       .debug_str	00000000 
0003b124 l       .debug_str	00000000 
0003b16a l       .debug_str	00000000 
0003b1c7 l       .debug_str	00000000 
0003b211 l       .debug_str	00000000 
0003b257 l       .debug_str	00000000 
0003b2b4 l       .debug_str	00000000 
0003b2fe l       .debug_str	00000000 
0003b344 l       .debug_str	00000000 
0003b3a1 l       .debug_str	00000000 
0003b3fc l       .debug_str	00000000 
0003b444 l       .debug_str	00000000 
0003b488 l       .debug_str	00000000 
0003b4d0 l       .debug_str	00000000 
0003b514 l       .debug_str	00000000 
0003b56f l       .debug_str	00000000 
0003b5ca l       .debug_str	00000000 
0003b612 l       .debug_str	00000000 
0003b656 l       .debug_str	00000000 
0003b69f l       .debug_str	00000000 
0003b6e4 l       .debug_str	00000000 
0003b740 l       .debug_str	00000000 
0003b79c l       .debug_str	00000000 
0003b7e5 l       .debug_str	00000000 
0003b82a l       .debug_str	00000000 
0003b886 l       .debug_str	00000000 
0003b8cf l       .debug_str	00000000 
0003b914 l       .debug_str	00000000 
0003b970 l       .debug_str	00000000 
0003b9b9 l       .debug_str	00000000 
0003b9fe l       .debug_str	00000000 
00023d27 l       .debug_str	00000000 
0003ba5a l       .debug_str	00000000 
0003ba99 l       .debug_str	00000000 
0003bace l       .debug_str	00000000 
0000594d l       .debug_str	00000000 
00013c0a l       .debug_str	00000000 
00013d5a l       .debug_str	00000000 
0003bad8 l       .debug_str	00000000 
00015d16 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
0003bb12 l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0003bba4 l       .debug_str	00000000 
00015242 l       .debug_str	00000000 
0003bbdd l       .debug_str	00000000 
00014729 l       .debug_str	00000000 
0003bc04 l       .debug_str	00000000 
00014675 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0003bc3e l       .debug_str	00000000 
000143f4 l       .debug_str	00000000 
0003bc64 l       .debug_str	00000000 
00014145 l       .debug_str	00000000 
0003bcbe l       .debug_str	00000000 
00014b4f l       .debug_str	00000000 
0003bd58 l       .debug_str	00000000 
00013d69 l       .debug_str	00000000 
0003bde1 l       .debug_str	00000000 
0003be88 l       .debug_str	00000000 
0003bec1 l       .debug_str	00000000 
0003bf36 l       .debug_str	00000000 
0003bf5f l       .debug_str	00000000 
0002cffb l       .debug_str	00000000 
0003bf94 l       .debug_str	00000000 
0003bfd0 l       .debug_str	00000000 
0003bfe1 l       .debug_str	00000000 
0003c01a l       .debug_str	00000000 
00013154 l       .debug_str	00000000 
0003c027 l       .debug_str	00000000 
0003c036 l       .debug_str	00000000 
0003790d l       .debug_str	00000000 
0003c07f l       .debug_str	00000000 
0003c0b2 l       .debug_str	00000000 
0003c0bf l       .debug_str	00000000 
00060fc2 l       .debug_str	00000000 
0003c10a l       .debug_str	00000000 
0003c162 l       .debug_str	00000000 
0003c177 l       .debug_str	00000000 
0003c1ad l       .debug_str	00000000 
0003c1b8 l       .debug_str	00000000 
0002d109 l       .debug_str	00000000 
0003c217 l       .debug_str	00000000 
0003c28a l       .debug_str	00000000 
0003c2f1 l       .debug_str	00000000 
0003c311 l       .debug_str	00000000 
0003c350 l       .debug_str	00000000 
0003c36f l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
0003c3e2 l       .debug_str	00000000 
0003c45f l       .debug_str	00000000 
0003c4c4 l       .debug_str	00000000 
0003c524 l       .debug_str	00000000 
0003c597 l       .debug_str	00000000 
0003c614 l       .debug_str	00000000 
00015eab l       .debug_str	00000000 
0003c68c l       .debug_str	00000000 
0003c701 l       .debug_str	00000000 
0003c77b l       .debug_str	00000000 
00012aeb l       .debug_str	00000000 
00012af6 l       .debug_str	00000000 
0003c7db l       .debug_str	00000000 
0005efb0 l       .debug_str	00000000 
0003c819 l       .debug_str	00000000 
0003c85b l       .debug_str	00000000 
0003c886 l       .debug_str	00000000 
0003c8c7 l       .debug_str	00000000 
0003c8d1 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
0005fe6a l       .debug_str	00000000 
0005a750 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
0003c92d l       .debug_str	00000000 
00010bff l       .debug_str	00000000 
0003c969 l       .debug_str	00000000 
00010bb0 l       .debug_str	00000000 
0003c9b0 l       .debug_str	00000000 
0003ca0e l       .debug_str	00000000 
0003433d l       .debug_str	00000000 
0003ca65 l       .debug_str	00000000 
0003cabf l       .debug_str	00000000 
0003cac9 l       .debug_str	00000000 
00013122 l       .debug_str	00000000 
00013127 l       .debug_str	00000000 
0003cb0c l       .debug_str	00000000 
0003cb42 l       .debug_str	00000000 
0003cb52 l       .debug_str	00000000 
0003cb61 l       .debug_str	00000000 
0003cb6c l       .debug_str	00000000 
00034423 l       .debug_str	00000000 
0003cba6 l       .debug_str	00000000 
0003cbef l       .debug_str	00000000 
00025d4c l       .debug_str	00000000 
0003cc36 l       .debug_str	00000000 
0003cc71 l       .debug_str	00000000 
0003cc96 l       .debug_str	00000000 
0003cd02 l       .debug_str	00000000 
0003cd15 l       .debug_str	00000000 
0003cd8c l       .debug_str	00000000 
0003cd97 l       .debug_str	00000000 
0003cdd4 l       .debug_str	00000000 
0003cddf l       .debug_str	00000000 
0003ce60 l       .debug_str	00000000 
0003cea6 l       .debug_str	00000000 
0003cecd l       .debug_str	00000000 
0003cefc l       .debug_str	00000000 
0003cf0d l       .debug_str	00000000 
00013cac l       .debug_str	00000000 
0003cf69 l       .debug_str	00000000 
0003cf9a l       .debug_str	00000000 
00011885 l       .debug_str	00000000 
0003cfe2 l       .debug_str	00000000 
0001ff03 l       .debug_str	00000000 
0003d020 l       .debug_str	00000000 
0003d064 l       .debug_str	00000000 
0003d0b7 l       .debug_str	00000000 
00039b52 l       .debug_str	00000000 
0003d12f l       .debug_str	00000000 
0003d17e l       .debug_str	00000000 
0003d214 l       .debug_str	00000000 
0003d258 l       .debug_str	00000000 
00040f96 l       .debug_str	00000000 
0003d2d0 l       .debug_str	00000000 
0003d31f l       .debug_str	00000000 
0003d3b5 l       .debug_str	00000000 
0003d3cf l       .debug_str	00000000 
0003d41e l       .debug_str	00000000 
0003d457 l       .debug_str	00000000 
0003d472 l       .debug_str	00000000 
000158cd l       .debug_str	00000000 
0003d4d6 l       .debug_str	00000000 
000151d9 l       .debug_str	00000000 
0003d54f l       .debug_str	00000000 
00022a60 l       .debug_str	00000000 
0003d5c0 l       .debug_str	00000000 
0003d656 l       .debug_str	00000000 
0003d6ee l       .debug_str	00000000 
0003d760 l       .debug_str	00000000 
0003d788 l       .debug_str	00000000 
0001ac55 l       .debug_str	00000000 
0003d840 l       .debug_str	00000000 
00024665 l       .debug_str	00000000 
0003d885 l       .debug_str	00000000 
0003d93b l       .debug_str	00000000 
0003d980 l       .debug_str	00000000 
00002b2a l       .debug_str	00000000 
0003d9c2 l       .debug_str	00000000 
0003da1d l       .debug_str	00000000 
0003da22 l       .debug_str	00000000 
0003da7b l       .debug_str	00000000 
0003daaf l       .debug_str	00000000 
0003dac3 l       .debug_str	00000000 
0003dafe l       .debug_str	00000000 
0003db40 l       .debug_str	00000000 
0003db56 l       .debug_str	00000000 
0003dbc2 l       .debug_str	00000000 
00012aef l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0003dc04 l       .debug_str	00000000 
0003dc44 l       .debug_str	00000000 
0003dc9e l       .debug_str	00000000 
0003dce0 l       .debug_str	00000000 
0003dd3b l       .debug_str	00000000 
0003dd7d l       .debug_str	00000000 
0003dd88 l       .debug_str	00000000 
0003ddc8 l       .debug_str	00000000 
0003ddce l       .debug_str	00000000 
0003de28 l       .debug_str	00000000 
0003de31 l       .debug_str	00000000 
0003de73 l       .debug_str	00000000 
0003decb l       .debug_str	00000000 
0003df0d l       .debug_str	00000000 
0003df66 l       .debug_str	00000000 
0003df70 l       .debug_str	00000000 
0003df78 l       .debug_str	00000000 
0003df81 l       .debug_str	00000000 
0003df74 l       .debug_str	00000000 
0003dfc3 l       .debug_str	00000000 
0003e018 l       .debug_str	00000000 
0003e055 l       .debug_str	00000000 
0003e097 l       .debug_str	00000000 
0003e0ee l       .debug_str	00000000 
0003e130 l       .debug_str	00000000 
0003e188 l       .debug_str	00000000 
0003e1c0 l       .debug_str	00000000 
0003e1cc l       .debug_str	00000000 
0003e209 l       .debug_str	00000000 
0003e26b l       .debug_str	00000000 
0003e2ac l       .debug_str	00000000 
0003e2b5 l       .debug_str	00000000 
0003e313 l       .debug_str	00000000 
0003e34c l       .debug_str	00000000 
0003e35b l       .debug_str	00000000 
0003e39a l       .debug_str	00000000 
0003e3af l       .debug_str	00000000 
0003e3f5 l       .debug_str	00000000 
0003e402 l       .debug_str	00000000 
0003e408 l       .debug_str	00000000 
0003e441 l       .debug_str	00000000 
0003e4cd l       .debug_str	00000000 
0003e509 l       .debug_str	00000000 
0005a33f l       .debug_str	00000000 
0003e51b l       .debug_str	00000000 
0003e553 l       .debug_str	00000000 
0003e55f l       .debug_str	00000000 
0003e59c l       .debug_str	00000000 
0003e5fe l       .debug_str	00000000 
0003e63f l       .debug_str	00000000 
0003e69d l       .debug_str	00000000 
0003e6d7 l       .debug_str	00000000 
0003e731 l       .debug_str	00000000 
0003e77a l       .debug_str	00000000 
0003e78a l       .debug_str	00000000 
0003e7c3 l       .debug_str	00000000 
0003e845 l       .debug_str	00000000 
0003e87f l       .debug_str	00000000 
0003e8d9 l       .debug_str	00000000 
0003e914 l       .debug_str	00000000 
0003e974 l       .debug_str	00000000 
0003e9af l       .debug_str	00000000 
0003ea0f l       .debug_str	00000000 
0003ea4d l       .debug_str	00000000 
0003eaab l       .debug_str	00000000 
0003eae9 l       .debug_str	00000000 
0003eb47 l       .debug_str	00000000 
0003eb92 l       .debug_str	00000000 
0003eb9b l       .debug_str	00000000 
0003ebea l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0003ebf6 l       .debug_str	00000000 
0003ec27 l       .debug_str	00000000 
0003ec52 l       .debug_str	00000000 
0003eca0 l       .debug_str	00000000 
00013cdd l       .debug_str	00000000 
0003eca7 l       .debug_str	00000000 
0003ed0c l       .debug_str	00000000 
0003ed3d l       .debug_str	00000000 
0003ed45 l       .debug_str	00000000 
00014351 l       .debug_str	00000000 
0003ed76 l       .debug_str	00000000 
0003edcf l       .debug_str	00000000 
0003ee5d l       .debug_str	00000000 
0003eea9 l       .debug_str	00000000 
0003eece l       .debug_str	00000000 
0003eeeb l       .debug_str	00000000 
0003ef15 l       .debug_str	00000000 
0001abe8 l       .debug_str	00000000 
0001aca3 l       .debug_str	00000000 
0001ad1f l       .debug_str	00000000 
0003ef37 l       .debug_str	00000000 
0003ef84 l       .debug_str	00000000 
0003efc9 l       .debug_str	00000000 
0003f008 l       .debug_str	00000000 
0003f054 l       .debug_str	00000000 
0003f0e3 l       .debug_str	00000000 
0003f130 l       .debug_str	00000000 
0003f1b6 l       .debug_str	00000000 
0005c241 l       .debug_str	00000000 
0003f1db l       .debug_str	00000000 
0003f205 l       .debug_str	00000000 
0003f20e l       .debug_str	00000000 
0003f244 l       .debug_str	00000000 
0003f24d l       .debug_str	00000000 
0003f2db l       .debug_str	00000000 
0003f321 l       .debug_str	00000000 
0003f340 l       .debug_str	00000000 
0003f357 l       .debug_str	00000000 
0003f37b l       .debug_str	00000000 
0003f397 l       .debug_str	00000000 
0003f3de l       .debug_str	00000000 
0003f423 l       .debug_str	00000000 
0003f462 l       .debug_str	00000000 
0003f4a8 l       .debug_str	00000000 
0003f537 l       .debug_str	00000000 
0003f57e l       .debug_str	00000000 
0003f604 l       .debug_str	00000000 
0003f639 l       .debug_str	00000000 
0003f643 l       .debug_str	00000000 
0005b25a l       .debug_str	00000000 
0003f6ae l       .debug_str	00000000 
0003f6e3 l       .debug_str	00000000 
0003f6ed l       .debug_str	00000000 
0003f720 l       .debug_str	00000000 
0003f728 l       .debug_str	00000000 
0003f75c l       .debug_str	00000000 
0003f76e l       .debug_str	00000000 
0003f7a8 l       .debug_str	00000000 
0003f7c6 l       .debug_str	00000000 
0003f7ec l       .debug_str	00000000 
0003f7f7 l       .debug_str	00000000 
0003f820 l       .debug_str	00000000 
0003f82e l       .debug_str	00000000 
0003f868 l       .debug_str	00000000 
0003f89e l       .debug_str	00000000 
0003f8c4 l       .debug_str	00000000 
0003f8e7 l       .debug_str	00000000 
0003f910 l       .debug_str	00000000 
0003f936 l       .debug_str	00000000 
0003f974 l       .debug_str	00000000 
0003f98e l       .debug_str	00000000 
0003f9cc l       .debug_str	00000000 
0003f9fe l       .debug_str	00000000 
0003fa0a l       .debug_str	00000000 
000619d6 l       .debug_str	00000000 
0003fa3e l       .debug_str	00000000 
0003fa4b l       .debug_str	00000000 
00023b0c l       .debug_str	00000000 
0003fa7d l       .debug_str	00000000 
0003fae7 l       .debug_str	00000000 
0003fb57 l       .debug_str	00000000 
0003fbbe l       .debug_str	00000000 
0003fbdb l       .debug_str	00000000 
0003fc1a l       .debug_str	00000000 
0003fc36 l       .debug_str	00000000 
00023ace l       .debug_str	00000000 
0003fc64 l       .debug_str	00000000 
00023baa l       .debug_str	00000000 
0003fc99 l       .debug_str	00000000 
0003fcd5 l       .debug_str	00000000 
0003fcfb l       .debug_str	00000000 
0003fd3a l       .debug_str	00000000 
0003fd4a l       .debug_str	00000000 
0003fdae l       .debug_str	00000000 
0003fde5 l       .debug_str	00000000 
0003fdfb l       .debug_str	00000000 
0003fe4a l       .debug_str	00000000 
0003fe56 l       .debug_str	00000000 
0003ff28 l       .debug_str	00000000 
0003fe9d l       .debug_str	00000000 
0003ff23 l       .debug_str	00000000 
0003ff47 l       .debug_str	00000000 
0003ff82 l       .debug_str	00000000 
0003ff92 l       .debug_str	00000000 
000618fe l       .debug_str	00000000 
0003ffd3 l       .debug_str	00000000 
0004000d l       .debug_str	00000000 
0004001c l       .debug_str	00000000 
00040055 l       .debug_str	00000000 
00040063 l       .debug_str	00000000 
0004009c l       .debug_str	00000000 
000400aa l       .debug_str	00000000 
000400fa l       .debug_str	00000000 
00040107 l       .debug_str	00000000 
0004017d l       .debug_str	00000000 
00040188 l       .debug_str	00000000 
0004019a l       .debug_str	00000000 
000401e6 l       .debug_str	00000000 
00040203 l       .debug_str	00000000 
00040297 l       .debug_str	00000000 
0004032d l       .debug_str	00000000 
0004039f l       .debug_str	00000000 
000403c5 l       .debug_str	00000000 
00040464 l       .debug_str	00000000 
000404d5 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0004051a l       .debug_str	00000000 
0004057d l       .debug_str	00000000 
000405a0 l       .debug_str	00000000 
000405f4 l       .debug_str	00000000 
0004060b l       .debug_str	00000000 
00025665 l       .debug_str	00000000 
00040658 l       .debug_str	00000000 
00040665 l       .debug_str	00000000 
000406a0 l       .debug_str	00000000 
000406c8 l       .debug_str	00000000 
0004072a l       .debug_str	00000000 
0003c1b2 l       .debug_str	00000000 
00040793 l       .debug_str	00000000 
00042fc1 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
0003030e l       .debug_str	00000000 
0003031f l       .debug_str	00000000 
000407e0 l       .debug_str	00000000 
0000b32d l       .debug_str	00000000 
0004082b l       .debug_str	00000000 
000408ae l       .debug_str	00000000 
000408de l       .debug_str	00000000 
00040966 l       .debug_str	00000000 
000409db l       .debug_str	00000000 
00040a2e l       .debug_str	00000000 
00040aba l       .debug_str	00000000 
00040af2 l       .debug_str	00000000 
00040b47 l       .debug_str	00000000 
00040b78 l       .debug_str	00000000 
00040bca l       .debug_str	00000000 
00040bf8 l       .debug_str	00000000 
00040c4c l       .debug_str	00000000 
00040c72 l       .debug_str	00000000 
0001fe4f l       .debug_str	00000000 
00040ca9 l       .debug_str	00000000 
00040cf4 l       .debug_str	00000000 
00040d10 l       .debug_str	00000000 
00040d66 l       .debug_str	00000000 
0001ff96 l       .debug_str	00000000 
00040ddf l       .debug_str	00000000 
00040e2f l       .debug_str	00000000 
00040ec6 l       .debug_str	00000000 
00040f1c l       .debug_str	00000000 
00040f95 l       .debug_str	00000000 
00040fad l       .debug_str	00000000 
00041044 l       .debug_str	00000000 
0004107d l       .debug_str	00000000 
000412ad l       .debug_str	00000000 
000410c6 l       .debug_str	00000000 
0003ff8e l       .debug_str	00000000 
00041103 l       .debug_str	00000000 
00041147 l       .debug_str	00000000 
00041192 l       .debug_str	00000000 
000411d2 l       .debug_str	00000000 
000411fc l       .debug_str	00000000 
00041245 l       .debug_str	00000000 
00041254 l       .debug_str	00000000 
000412a5 l       .debug_str	00000000 
000412bc l       .debug_str	00000000 
0004b55c l       .debug_str	00000000 
0005cafb l       .debug_str	00000000 
00041323 l       .debug_str	00000000 
00041384 l       .debug_str	00000000 
000413a3 l       .debug_str	00000000 
000413ac l       .debug_str	00000000 
000413b8 l       .debug_str	00000000 
00016fee l       .debug_str	00000000 
000413be l       .debug_str	00000000 
000413c8 l       .debug_str	00000000 
000413fa l       .debug_str	00000000 
0004140a l       .debug_str	00000000 
00041492 l       .debug_str	00000000 
0004149b l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
00041508 l       .debug_str	00000000 
00041547 l       .debug_str	00000000 
0001641d l       .debug_str	00000000 
00016429 l       .debug_str	00000000 
00016433 l       .debug_str	00000000 
00041556 l       .debug_str	00000000 
000415c6 l       .debug_str	00000000 
000415eb l       .debug_str	00000000 
0004165a l       .debug_str	00000000 
00041680 l       .debug_str	00000000 
000416ef l       .debug_str	00000000 
00041719 l       .debug_str	00000000 
00041750 l       .debug_str	00000000 
0004175b l       .debug_str	00000000 
00041797 l       .debug_str	00000000 
000417b6 l       .debug_str	00000000 
000417f0 l       .debug_str	00000000 
0004182b l       .debug_str	00000000 
00041867 l       .debug_str	00000000 
0000e7ec l       .debug_str	00000000 
00041881 l       .debug_str	00000000 
000418bd l       .debug_str	00000000 
000418ca l       .debug_str	00000000 
0005a5b6 l       .debug_str	00000000 
00041908 l       .debug_str	00000000 
0004194e l       .debug_str	00000000 
000419d6 l       .debug_str	00000000 
000419ef l       .debug_str	00000000 
00041a49 l       .debug_str	00000000 
00041a8f l       .debug_str	00000000 
00041aa7 l       .debug_str	00000000 
00041b27 l       .debug_str	00000000 
00041ffb l       .debug_str	00000000 
00041b37 l       .debug_str	00000000 
00041b76 l       .debug_str	00000000 
00041bb6 l       .debug_str	00000000 
00041c40 l       .debug_str	00000000 
00041c57 l       .debug_str	00000000 
00041ca8 l       .debug_str	00000000 
00041cb6 l       .debug_str	00000000 
00041cbb l       .debug_str	00000000 
00041d16 l       .debug_str	00000000 
000426d0 l       .debug_str	00000000 
00041d6d l       .debug_str	00000000 
00041da0 l       .debug_str	00000000 
00041de7 l       .debug_str	00000000 
00041e21 l       .debug_str	00000000 
00041e50 l       .debug_str	00000000 
00041ece l       .debug_str	00000000 
00041f52 l       .debug_str	00000000 
00041fdf l       .debug_str	00000000 
00041ff4 l       .debug_str	00000000 
00042004 l       .debug_str	00000000 
00042050 l       .debug_str	00000000 
00042095 l       .debug_str	00000000 
0004212c l       .debug_str	00000000 
00042148 l       .debug_str	00000000 
0004218f l       .debug_str	00000000 
000421bd l       .debug_str	00000000 
000421f6 l       .debug_str	00000000 
00042218 l       .debug_str	00000000 
00019f29 l       .debug_str	00000000 
00042296 l       .debug_str	00000000 
00042316 l       .debug_str	00000000 
00042355 l       .debug_str	00000000 
000423df l       .debug_str	00000000 
0004242b l       .debug_str	00000000 
00042449 l       .debug_str	00000000 
00042454 l       .debug_str	00000000 
000424b6 l       .debug_str	00000000 
0004250d l       .debug_str	00000000 
0004259a l       .debug_str	00000000 
000425e6 l       .debug_str	00000000 
0004267d l       .debug_str	00000000 
000426c7 l       .debug_str	00000000 
000426e3 l       .debug_str	00000000 
0004273d l       .debug_str	00000000 
00042746 l       .debug_str	00000000 
000427a5 l       .debug_str	00000000 
000427fc l       .debug_str	00000000 
00042855 l       .debug_str	00000000 
0004286a l       .debug_str	00000000 
000428b7 l       .debug_str	00000000 
00042902 l       .debug_str	00000000 
00042915 l       .debug_str	00000000 
0001ea0f l       .debug_str	00000000 
0001324a l       .debug_str	00000000 
00042960 l       .debug_str	00000000 
00042975 l       .debug_str	00000000 
00042981 l       .debug_str	00000000 
000429c6 l       .debug_str	00000000 
00042a1f l       .debug_str	00000000 
00042a34 l       .debug_str	00000000 
00042a81 l       .debug_str	00000000 
00042acc l       .debug_str	00000000 
00042adf l       .debug_str	00000000 
00042b2a l       .debug_str	00000000 
00042b3d l       .debug_str	00000000 
00042ba1 l       .debug_str	00000000 
00042bda l       .debug_str	00000000 
00042c06 l       .debug_str	00000000 
0006062b l       .debug_str	00000000 
0005b9f0 l       .debug_str	00000000 
00042c85 l       .debug_str	00000000 
00042c8b l       .debug_str	00000000 
00042c94 l       .debug_str	00000000 
00042ccc l       .debug_str	00000000 
00042ce9 l       .debug_str	00000000 
00042d25 l       .debug_str	00000000 
00042d42 l       .debug_str	00000000 
00042d9e l       .debug_str	00000000 
00042dd6 l       .debug_str	00000000 
00042e32 l       .debug_str	00000000 
00025cec l       .debug_str	00000000 
00042e6a l       .debug_str	00000000 
00042ea8 l       .debug_str	00000000 
00042ec4 l       .debug_str	00000000 
00042f1a l       .debug_str	00000000 
00042f81 l       .debug_str	00000000 
00042fb9 l       .debug_str	00000000 
00042fc5 l       .debug_str	00000000 
0004302c l       .debug_str	00000000 
0004306b l       .debug_str	00000000 
0004307c l       .debug_str	00000000 
000430b5 l       .debug_str	00000000 
0005105d l       .debug_str	00000000 
000430d0 l       .debug_str	00000000 
0004310c l       .debug_str	00000000 
00043105 l       .debug_str	00000000 
00043115 l       .debug_str	00000000 
00043127 l       .debug_str	00000000 
00043172 l       .debug_str	00000000 
0004318a l       .debug_str	00000000 
00043194 l       .debug_str	00000000 
000431ab l       .debug_str	00000000 
000431ba l       .debug_str	00000000 
000431fc l       .debug_str	00000000 
00043215 l       .debug_str	00000000 
00043289 l       .debug_str	00000000 
00043298 l       .debug_str	00000000 
000432d1 l       .debug_str	00000000 
000432e7 l       .debug_str	00000000 
00043327 l       .debug_str	00000000 
00043332 l       .debug_str	00000000 
000433b1 l       .debug_str	00000000 
0005b169 l       .debug_str	00000000 
000433d0 l       .debug_str	00000000 
000433e5 l       .debug_str	00000000 
000433ef l       .debug_str	00000000 
0001a556 l       .debug_str	00000000 
000433f4 l       .debug_str	00000000 
00043425 l       .debug_str	00000000 
00043438 l       .debug_str	00000000 
00043442 l       .debug_str	00000000 
0004345f l       .debug_str	00000000 
0004349a l       .debug_str	00000000 
000434cf l       .debug_str	00000000 
00043500 l       .debug_str	00000000 
00043514 l       .debug_str	00000000 
0004351f l       .debug_str	00000000 
0004353d l       .debug_str	00000000 
00043578 l       .debug_str	00000000 
000435ae l       .debug_str	00000000 
000435df l       .debug_str	00000000 
000435f3 l       .debug_str	00000000 
000435fe l       .debug_str	00000000 
0004361c l       .debug_str	00000000 
00043657 l       .debug_str	00000000 
0004368d l       .debug_str	00000000 
000436be l       .debug_str	00000000 
000436d2 l       .debug_str	00000000 
000436dd l       .debug_str	00000000 
000436fb l       .debug_str	00000000 
00043736 l       .debug_str	00000000 
0004376c l       .debug_str	00000000 
0004379d l       .debug_str	00000000 
00047fea l       .debug_str	00000000 
000437b2 l       .debug_str	00000000 
000437be l       .debug_str	00000000 
000437dd l       .debug_str	00000000 
00043818 l       .debug_str	00000000 
0004384f l       .debug_str	00000000 
00043880 l       .debug_str	00000000 
00043893 l       .debug_str	00000000 
0004389d l       .debug_str	00000000 
000438ba l       .debug_str	00000000 
000438f5 l       .debug_str	00000000 
0004392a l       .debug_str	00000000 
0004395b l       .debug_str	00000000 
0004396f l       .debug_str	00000000 
0004397a l       .debug_str	00000000 
00043998 l       .debug_str	00000000 
000439d3 l       .debug_str	00000000 
00043a09 l       .debug_str	00000000 
00043a3a l       .debug_str	00000000 
00043a4e l       .debug_str	00000000 
00043abd l       .debug_str	00000000 
00043af8 l       .debug_str	00000000 
00043b41 l       .debug_str	00000000 
00043b86 l       .debug_str	00000000 
00043be2 l       .debug_str	00000000 
00043c2b l       .debug_str	00000000 
00043c70 l       .debug_str	00000000 
00043ccc l       .debug_str	00000000 
00043d15 l       .debug_str	00000000 
00043d5a l       .debug_str	00000000 
00043db6 l       .debug_str	00000000 
00043dc1 l       .debug_str	00000000 
00043ddf l       .debug_str	00000000 
00043e1a l       .debug_str	00000000 
00043e50 l       .debug_str	00000000 
00043e81 l       .debug_str	00000000 
00043e95 l       .debug_str	00000000 
00043ea0 l       .debug_str	00000000 
00043ebe l       .debug_str	00000000 
00043ef9 l       .debug_str	00000000 
00043f2f l       .debug_str	00000000 
00043f9e l       .debug_str	00000000 
00043fd9 l       .debug_str	00000000 
0004400a l       .debug_str	00000000 
0004401f l       .debug_str	00000000 
00044024 l       .debug_str	00000000 
00044030 l       .debug_str	00000000 
0004404f l       .debug_str	00000000 
0004408a l       .debug_str	00000000 
000440c1 l       .debug_str	00000000 
00044130 l       .debug_str	00000000 
0004416c l       .debug_str	00000000 
0000aaf4 l       .debug_str	00000000 
000441b5 l       .debug_str	00000000 
000441c0 l       .debug_str	00000000 
00044207 l       .debug_str	00000000 
00044211 l       .debug_str	00000000 
00044293 l       .debug_str	00000000 
000442b0 l       .debug_str	00000000 
000173db l       .debug_str	00000000 
0004430b l       .debug_str	00000000 
00044365 l       .debug_str	00000000 
00044372 l       .debug_str	00000000 
000443e4 l       .debug_str	00000000 
00044448 l       .debug_str	00000000 
00044453 l       .debug_str	00000000 
000444cc l       .debug_str	00000000 
000444d8 l       .debug_str	00000000 
00044554 l       .debug_str	00000000 
0004455a l       .debug_str	00000000 
00044561 l       .debug_str	00000000 
0004459d l       .debug_str	00000000 
000148d3 l       .debug_str	00000000 
000445e6 l       .debug_str	00000000 
0004462a l       .debug_str	00000000 
00044675 l       .debug_str	00000000 
000446b4 l       .debug_str	00000000 
000446d9 l       .debug_str	00000000 
0004472f l       .debug_str	00000000 
0004479d l       .debug_str	00000000 
0004481d l       .debug_str	00000000 
0004488a l       .debug_str	00000000 
00044915 l       .debug_str	00000000 
00044989 l       .debug_str	00000000 
000449c9 l       .debug_str	00000000 
00044a4a l       .debug_str	00000000 
00044a8b l       .debug_str	00000000 
00044aef l       .debug_str	00000000 
00044b9e l       .debug_str	00000000 
00044be8 l       .debug_str	00000000 
00044c35 l       .debug_str	00000000 
00044c7b l       .debug_str	00000000 
00044c85 l       .debug_str	00000000 
00044cbe l       .debug_str	00000000 
00044ced l       .debug_str	00000000 
00044d4e l       .debug_str	00000000 
00044d7d l       .debug_str	00000000 
00044dba l       .debug_str	00000000 
00044e49 l       .debug_str	00000000 
00044e7e l       .debug_str	00000000 
00044f04 l       .debug_str	00000000 
00044f8a l       .debug_str	00000000 
00044fde l       .debug_str	00000000 
00045067 l       .debug_str	00000000 
00019dfa l       .debug_str	00000000 
000450b5 l       .debug_str	00000000 
00045143 l       .debug_str	00000000 
00045197 l       .debug_str	00000000 
000451d6 l       .debug_str	00000000 
00045221 l       .debug_str	00000000 
000452a3 l       .debug_str	00000000 
000452bf l       .debug_str	00000000 
00045318 l       .debug_str	00000000 
00045371 l       .debug_str	00000000 
000453ae l       .debug_str	00000000 
000453ef l       .debug_str	00000000 
00045450 l       .debug_str	00000000 
000454c1 l       .debug_str	00000000 
000454f1 l       .debug_str	00000000 
00045537 l       .debug_str	00000000 
000455a9 l       .debug_str	00000000 
0004563d l       .debug_str	00000000 
00045661 l       .debug_str	00000000 
000456dd l       .debug_str	00000000 
00045717 l       .debug_str	00000000 
00045759 l       .debug_str	00000000 
00045809 l       .debug_str	00000000 
00045848 l       .debug_str	00000000 
000458eb l       .debug_str	00000000 
00045947 l       .debug_str	00000000 
000459a4 l       .debug_str	00000000 
00045a4f l       .debug_str	00000000 
00045a88 l       .debug_str	00000000 
00045b04 l       .debug_str	00000000 
00045b3c l       .debug_str	00000000 
00045b48 l       .debug_str	00000000 
00045b85 l       .debug_str	00000000 
00045bdd l       .debug_str	00000000 
00045bfd l       .debug_str	00000000 
00045c56 l       .debug_str	00000000 
00045caf l       .debug_str	00000000 
00045d08 l       .debug_str	00000000 
00045d62 l       .debug_str	00000000 
00045d98 l       .debug_str	00000000 
00045da8 l       .debug_str	00000000 
00045db7 l       .debug_str	00000000 
00045dc0 l       .debug_str	00000000 
00045df7 l       .debug_str	00000000 
00045e33 l       .debug_str	00000000 
00045e43 l       .debug_str	00000000 
00045e9f l       .debug_str	00000000 
00045f01 l       .debug_str	00000000 
00039110 l       .debug_str	00000000 
00045f4b l       .debug_str	00000000 
00045f86 l       .debug_str	00000000 
00045fab l       .debug_str	00000000 
0004600a l       .debug_str	00000000 
00046054 l       .debug_str	00000000 
0004608f l       .debug_str	00000000 
000460b4 l       .debug_str	00000000 
00046113 l       .debug_str	00000000 
0004617c l       .debug_str	00000000 
00046185 l       .debug_str	00000000 
000461bc l       .debug_str	00000000 
00046218 l       .debug_str	00000000 
0004627a l       .debug_str	00000000 
000462d9 l       .debug_str	00000000 
00046338 l       .debug_str	00000000 
0004636e l       .debug_str	00000000 
0004637f l       .debug_str	00000000 
0004638f l       .debug_str	00000000 
00046399 l       .debug_str	00000000 
000463d1 l       .debug_str	00000000 
0004642e l       .debug_str	00000000 
00046491 l       .debug_str	00000000 
000464dc l       .debug_str	00000000 
00046517 l       .debug_str	00000000 
0004653d l       .debug_str	00000000 
0004659d l       .debug_str	00000000 
000465e8 l       .debug_str	00000000 
00046623 l       .debug_str	00000000 
00046649 l       .debug_str	00000000 
000466a9 l       .debug_str	00000000 
000466df l       .debug_str	00000000 
000466f0 l       .debug_str	00000000 
00046700 l       .debug_str	00000000 
0004670a l       .debug_str	00000000 
00046742 l       .debug_str	00000000 
0004679f l       .debug_str	00000000 
00046802 l       .debug_str	00000000 
00046862 l       .debug_str	00000000 
000468c2 l       .debug_str	00000000 
000468f8 l       .debug_str	00000000 
00046909 l       .debug_str	00000000 
00046919 l       .debug_str	00000000 
00046923 l       .debug_str	00000000 
0004695b l       .debug_str	00000000 
000469b8 l       .debug_str	00000000 
00046a1b l       .debug_str	00000000 
00046a66 l       .debug_str	00000000 
00046aa1 l       .debug_str	00000000 
00046ac7 l       .debug_str	00000000 
00046b27 l       .debug_str	00000000 
00046b72 l       .debug_str	00000000 
00046bad l       .debug_str	00000000 
00046bd3 l       .debug_str	00000000 
00046c33 l       .debug_str	00000000 
00046c69 l       .debug_str	00000000 
00046c7a l       .debug_str	00000000 
00046c8a l       .debug_str	00000000 
00046c94 l       .debug_str	00000000 
00046ccc l       .debug_str	00000000 
00046d29 l       .debug_str	00000000 
00046d8c l       .debug_str	00000000 
00046dec l       .debug_str	00000000 
00046e4c l       .debug_str	00000000 
00046e82 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
00046e95 l       .debug_str	00000000 
00046ea7 l       .debug_str	00000000 
00046eb3 l       .debug_str	00000000 
00046eee l       .debug_str	00000000 
00046f4d l       .debug_str	00000000 
00046fb2 l       .debug_str	00000000 
00047014 l       .debug_str	00000000 
0004704f l       .debug_str	00000000 
00047077 l       .debug_str	00000000 
000470d9 l       .debug_str	00000000 
0001d1c8 l       .debug_str	00000000 
0001fbe4 l       .debug_str	00000000 
000131a9 l       .debug_str	00000000 
0004710f l       .debug_str	00000000 
0004714a l       .debug_str	00000000 
0004718a l       .debug_str	00000000 
000471a7 l       .debug_str	00000000 
000471eb l       .debug_str	00000000 
0004720c l       .debug_str	00000000 
0004724c l       .debug_str	00000000 
00047269 l       .debug_str	00000000 
000472ad l       .debug_str	00000000 
000472ce l       .debug_str	00000000 
00047330 l       .debug_str	00000000 
00047397 l       .debug_str	00000000 
000473d2 l       .debug_str	00000000 
000473f5 l       .debug_str	00000000 
0004745b l       .debug_str	00000000 
00047496 l       .debug_str	00000000 
000474b8 l       .debug_str	00000000 
000474f3 l       .debug_str	00000000 
00047517 l       .debug_str	00000000 
00047552 l       .debug_str	00000000 
00047575 l       .debug_str	00000000 
000475b0 l       .debug_str	00000000 
000475d4 l       .debug_str	00000000 
0004760f l       .debug_str	00000000 
00047632 l       .debug_str	00000000 
0004766d l       .debug_str	00000000 
00047691 l       .debug_str	00000000 
000476dc l       .debug_str	00000000 
0004773e l       .debug_str	00000000 
00047779 l       .debug_str	00000000 
0004779c l       .debug_str	00000000 
000477e7 l       .debug_str	00000000 
00047822 l       .debug_str	00000000 
00047848 l       .debug_str	00000000 
00047883 l       .debug_str	00000000 
000478a9 l       .debug_str	00000000 
000478fa l       .debug_str	00000000 
00047948 l       .debug_str	00000000 
00047993 l       .debug_str	00000000 
000479c6 l       .debug_str	00000000 
00047a01 l       .debug_str	00000000 
00047a26 l       .debug_str	00000000 
00047ab2 l       .debug_str	00000000 
00047ae6 l       .debug_str	00000000 
00047b62 l       .debug_str	00000000 
00047ba7 l       .debug_str	00000000 
00047bf3 l       .debug_str	00000000 
00047c56 l       .debug_str	00000000 
00047c91 l       .debug_str	00000000 
00047cb5 l       .debug_str	00000000 
00047cf0 l       .debug_str	00000000 
00047d17 l       .debug_str	00000000 
00047d63 l       .debug_str	00000000 
00047d9e l       .debug_str	00000000 
00047dc5 l       .debug_str	00000000 
00047e10 l       .debug_str	00000000 
00047e5c l       .debug_str	00000000 
00047ea8 l       .debug_str	00000000 
00047ed9 l       .debug_str	00000000 
00047ee1 l       .debug_str	00000000 
00010886 l       .debug_str	00000000 
00047f2d l       .debug_str	00000000 
00047f62 l       .debug_str	00000000 
00047f90 l       .debug_str	00000000 
00047f99 l       .debug_str	00000000 
00047fe7 l       .debug_str	00000000 
00047fef l       .debug_str	00000000 
00048054 l       .debug_str	00000000 
000480a7 l       .debug_str	00000000 
00048107 l       .debug_str	00000000 
00048126 l       .debug_str	00000000 
00048189 l       .debug_str	00000000 
000481ab l       .debug_str	00000000 
000481f6 l       .debug_str	00000000 
0004825b l       .debug_str	00000000 
0004827d l       .debug_str	00000000 
000482e6 l       .debug_str	00000000 
00048323 l       .debug_str	00000000 
0004838c l       .debug_str	00000000 
0004841c l       .debug_str	00000000 
0000b9b4 l       .debug_str	00000000 
0004847c l       .debug_str	00000000 
000484df l       .debug_str	00000000 
00048548 l       .debug_str	00000000 
0004857b l       .debug_str	00000000 
000485c3 l       .debug_str	00000000 
0004863d l       .debug_str	00000000 
0004868e l       .debug_str	00000000 
000486e5 l       .debug_str	00000000 
0001b377 l       .debug_str	00000000 
0004872d l       .debug_str	00000000 
0004878b l       .debug_str	00000000 
000487a8 l       .debug_str	00000000 
00048814 l       .debug_str	00000000 
00048859 l       .debug_str	00000000 
000488a7 l       .debug_str	00000000 
000488ef l       .debug_str	00000000 
000488f9 l       .debug_str	00000000 
00048967 l       .debug_str	00000000 
000489a3 l       .debug_str	00000000 
000489c6 l       .debug_str	00000000 
00048a36 l       .debug_str	00000000 
00048a7e l       .debug_str	00000000 
00048a87 l       .debug_str	00000000 
00048ae4 l       .debug_str	00000000 
00048b47 l       .debug_str	00000000 
00048ba7 l       .debug_str	00000000 
00048c07 l       .debug_str	00000000 
00048c63 l       .debug_str	00000000 
00048cc2 l       .debug_str	00000000 
00048d22 l       .debug_str	00000000 
00048d3d l       .debug_str	00000000 
0001b2d5 l       .debug_str	00000000 
00048d91 l       .debug_str	00000000 
00048e0f l       .debug_str	00000000 
00048e39 l       .debug_str	00000000 
00048e9b l       .debug_str	00000000 
00048efc l       .debug_str	00000000 
00048f56 l       .debug_str	00000000 
00048fbb l       .debug_str	00000000 
0004900d l       .debug_str	00000000 
00049055 l       .debug_str	00000000 
00049070 l       .debug_str	00000000 
000490ea l       .debug_str	00000000 
00049137 l       .debug_str	00000000 
000491b1 l       .debug_str	00000000 
000491fe l       .debug_str	00000000 
00049252 l       .debug_str	00000000 
000492a4 l       .debug_str	00000000 
0004930c l       .debug_str	00000000 
0004936c l       .debug_str	00000000 
000493c6 l       .debug_str	00000000 
00049425 l       .debug_str	00000000 
0004947f l       .debug_str	00000000 
000494dc l       .debug_str	00000000 
00023468 l       .debug_str	00000000 
0004951a l       .debug_str	00000000 
0002444b l       .debug_str	00000000 
00049555 l       .debug_str	00000000 
000495c7 l       .debug_str	00000000 
0004969a l       .debug_str	00000000 
0001b495 l       .debug_str	00000000 
000496e2 l       .debug_str	00000000 
00049730 l       .debug_str	00000000 
0004973a l       .debug_str	00000000 
00049782 l       .debug_str	00000000 
0004978e l       .debug_str	00000000 
00049802 l       .debug_str	00000000 
0004980d l       .debug_str	00000000 
00049849 l       .debug_str	00000000 
00049870 l       .debug_str	00000000 
000498c1 l       .debug_str	00000000 
000498ce l       .debug_str	00000000 
000498dc l       .debug_str	00000000 
000498ef l       .debug_str	00000000 
000498fa l       .debug_str	00000000 
0004993c l       .debug_str	00000000 
00049951 l       .debug_str	00000000 
000499bb l       .debug_str	00000000 
00049a18 l       .debug_str	00000000 
00049a78 l       .debug_str	00000000 
00049ad8 l       .debug_str	00000000 
00049b4a l       .debug_str	00000000 
00049b97 l       .debug_str	00000000 
00049bf6 l       .debug_str	00000000 
00049c50 l       .debug_str	00000000 
00049cc3 l       .debug_str	00000000 
00049cd0 l       .debug_str	00000000 
00049d30 l       .debug_str	00000000 
00049d4f l       .debug_str	00000000 
00049db7 l       .debug_str	00000000 
00049dd2 l       .debug_str	00000000 
00049e2a l       .debug_str	00000000 
00049e74 l       .debug_str	00000000 
00049ed8 l       .debug_str	00000000 
00049ef7 l       .debug_str	00000000 
00049f59 l       .debug_str	00000000 
00049fbf l       .debug_str	00000000 
0004a03f l       .debug_str	00000000 
0004a08e l       .debug_str	00000000 
0004a104 l       .debug_str	00000000 
0004a17a l       .debug_str	00000000 
0004a24f l       .debug_str	00000000 
0004a2ac l       .debug_str	00000000 
0004a30a l       .debug_str	00000000 
0004a38a l       .debug_str	00000000 
0004a3f9 l       .debug_str	00000000 
0004a477 l       .debug_str	00000000 
0004a4ca l       .debug_str	00000000 
0004a52f l       .debug_str	00000000 
0004a58f l       .debug_str	00000000 
0004a5fd l       .debug_str	00000000 
0004a695 l       .debug_str	00000000 
0004a724 l       .debug_str	00000000 
0004a7b2 l       .debug_str	00000000 
0004a840 l       .debug_str	00000000 
0004a950 l       .debug_str	00000000 
0004a9c4 l       .debug_str	00000000 
0004aa06 l       .debug_str	00000000 
0004aa4f l       .debug_str	00000000 
0004aaa9 l       .debug_str	00000000 
0004ab22 l       .debug_str	00000000 
0004ab2f l       .debug_str	00000000 
0004ab34 l       .debug_str	00000000 
0004aba0 l       .debug_str	00000000 
0004abe7 l       .debug_str	00000000 
0004ac71 l       .debug_str	00000000 
0004ac90 l       .debug_str	00000000 
0004ad1a l       .debug_str	00000000 
0004ad3e l       .debug_str	00000000 
0004ad82 l       .debug_str	00000000 
0004ade6 l       .debug_str	00000000 
0004ae2a l       .debug_str	00000000 
0004ae9c l       .debug_str	00000000 
0004af5a l       .debug_str	00000000 
0004afbc l       .debug_str	00000000 
0004b054 l       .debug_str	00000000 
0004b103 l       .debug_str	00000000 
0004b199 l       .debug_str	00000000 
0004b22c l       .debug_str	00000000 
0004b270 l       .debug_str	00000000 
0004b2c3 l       .debug_str	00000000 
0004b347 l       .debug_str	00000000 
0004b3d5 l       .debug_str	00000000 
0004b429 l       .debug_str	00000000 
0004b43a l       .debug_str	00000000 
0004b4bf l       .debug_str	00000000 
0004b54b l       .debug_str	00000000 
0004b554 l       .debug_str	00000000 
0004b561 l       .debug_str	00000000 
0004b5b8 l       .debug_str	00000000 
0004b63d l       .debug_str	00000000 
0004b68f l       .debug_str	00000000 
0004b69e l       .debug_str	00000000 
0004b6e5 l       .debug_str	00000000 
0004b749 l       .debug_str	00000000 
0004b76a l       .debug_str	00000000 
0004b7ea l       .debug_str	00000000 
0004b855 l       .debug_str	00000000 
0004b8d3 l       .debug_str	00000000 
0004b922 l       .debug_str	00000000 
0004b981 l       .debug_str	00000000 
0004ba19 l       .debug_str	00000000 
0004babf l       .debug_str	00000000 
0004bb55 l       .debug_str	00000000 
0004bbdf l       .debug_str	00000000 
0004bc55 l       .debug_str	00000000 
0004bc9e l       .debug_str	00000000 
0004bcfa l       .debug_str	00000000 
0004bd75 l       .debug_str	00000000 
0004bde1 l       .debug_str	00000000 
0004be6b l       .debug_str	00000000 
0004beaf l       .debug_str	00000000 
0004bf10 l       .debug_str	00000000 
0004bf54 l       .debug_str	00000000 
0004bfd8 l       .debug_str	00000000 
0004c062 l       .debug_str	00000000 
0004c0b4 l       .debug_str	00000000 
0004c132 l       .debug_str	00000000 
0004c1b7 l       .debug_str	00000000 
0004c20e l       .debug_str	00000000 
0004c28f l       .debug_str	00000000 
0004c34d l       .debug_str	00000000 
0004c3ac l       .debug_str	00000000 
0004c40f l       .debug_str	00000000 
0004c434 l       .debug_str	00000000 
0004c498 l       .debug_str	00000000 
0004c4b9 l       .debug_str	00000000 
0004c539 l       .debug_str	00000000 
0004c5a4 l       .debug_str	00000000 
0004c622 l       .debug_str	00000000 
0004c671 l       .debug_str	00000000 
0004c6d0 l       .debug_str	00000000 
0004c768 l       .debug_str	00000000 
0004c80e l       .debug_str	00000000 
0004c8a4 l       .debug_str	00000000 
0004c92e l       .debug_str	00000000 
0004c9a4 l       .debug_str	00000000 
0004c9ed l       .debug_str	00000000 
0004ca49 l       .debug_str	00000000 
0004cac4 l       .debug_str	00000000 
0004cb30 l       .debug_str	00000000 
0004cbba l       .debug_str	00000000 
0004cbfe l       .debug_str	00000000 
0004cc5f l       .debug_str	00000000 
0004cca3 l       .debug_str	00000000 
0004cd27 l       .debug_str	00000000 
0004cdb1 l       .debug_str	00000000 
0004ce2f l       .debug_str	00000000 
0004ceb4 l       .debug_str	00000000 
0004cf0b l       .debug_str	00000000 
0004cf8c l       .debug_str	00000000 
0004d04a l       .debug_str	00000000 
0004d0a9 l       .debug_str	00000000 
0004d0dc l       .debug_str	00000000 
0004d10f l       .debug_str	00000000 
0004d142 l       .debug_str	00000000 
0004d175 l       .debug_str	00000000 
0004d1a8 l       .debug_str	00000000 
0004d1db l       .debug_str	00000000 
0004d20e l       .debug_str	00000000 
0004d262 l       .debug_str	00000000 
0004d290 l       .debug_str	00000000 
0004d2e4 l       .debug_str	00000000 
0005fcc1 l       .debug_str	00000000 
00012f95 l       .debug_str	00000000 
0004d2f7 l       .debug_str	00000000 
0004d2fb l       .debug_str	00000000 
0004d2ff l       .debug_str	00000000 
0004d303 l       .debug_str	00000000 
0004d30a l       .debug_str	00000000 
0004d30f l       .debug_str	00000000 
0004d33f l       .debug_str	00000000 
0004d391 l       .debug_str	00000000 
0004d3d2 l       .debug_str	00000000 
0004d3df l       .debug_str	00000000 
0004d41e l       .debug_str	00000000 
0004d429 l       .debug_str	00000000 
0004d465 l       .debug_str	00000000 
0004d473 l       .debug_str	00000000 
0004d4a7 l       .debug_str	00000000 
0004d4e2 l       .debug_str	00000000 
0004d520 l       .debug_str	00000000 
0004d52e l       .debug_str	00000000 
0004d567 l       .debug_str	00000000 
0004d571 l       .debug_str	00000000 
0004d5ad l       .debug_str	00000000 
0004d609 l       .debug_str	00000000 
0004d610 l       .debug_str	00000000 
0004d66e l       .debug_str	00000000 
0004d677 l       .debug_str	00000000 
0004d6de l       .debug_str	00000000 
0004d6ef l       .debug_str	00000000 
0004d74c l       .debug_str	00000000 
0004d7ab l       .debug_str	00000000 
0004d807 l       .debug_str	00000000 
0004d865 l       .debug_str	00000000 
0004d8cc l       .debug_str	00000000 
0004d929 l       .debug_str	00000000 
0004d988 l       .debug_str	00000000 
0004d9c1 l       .debug_str	00000000 
0004d9cb l       .debug_str	00000000 
0004da33 l       .debug_str	00000000 
0004da66 l       .debug_str	00000000 
0004da70 l       .debug_str	00000000 
0004daa6 l       .debug_str	00000000 
0004dab2 l       .debug_str	00000000 
0004dae9 l       .debug_str	00000000 
0004daf6 l       .debug_str	00000000 
0004db3a l       .debug_str	00000000 
0004db54 l       .debug_str	00000000 
0004dbc5 l       .debug_str	00000000 
0004dbd8 l       .debug_str	00000000 
0004dc49 l       .debug_str	00000000 
0004dc8c l       .debug_str	00000000 
0004dc96 l       .debug_str	00000000 
0004dce0 l       .debug_str	00000000 
0004dd27 l       .debug_str	00000000 
0004dd74 l       .debug_str	00000000 
0004ddbe l       .debug_str	00000000 
0004ddf0 l       .debug_str	00000000 
0004ddf9 l       .debug_str	00000000 
0004de2d l       .debug_str	00000000 
0004de66 l       .debug_str	00000000 
0004dea2 l       .debug_str	00000000 
0004deb4 l       .debug_str	00000000 
0004def5 l       .debug_str	00000000 
0004df54 l       .debug_str	00000000 
0004df85 l       .debug_str	00000000 
0004df9b l       .debug_str	00000000 
0004dfd0 l       .debug_str	00000000 
0004e02d l       .debug_str	00000000 
0004e091 l       .debug_str	00000000 
0004e0f0 l       .debug_str	00000000 
0004e150 l       .debug_str	00000000 
0004e1ae l       .debug_str	00000000 
00020142 l       .debug_str	00000000 
0004e213 l       .debug_str	00000000 
0004e259 l       .debug_str	00000000 
0004e299 l       .debug_str	00000000 
0004e321 l       .debug_str	00000000 
0005c6f7 l       .debug_str	00000000 
0004e3a8 l       .debug_str	00000000 
0004e3db l       .debug_str	00000000 
0004e44f l       .debug_str	00000000 
0004e4c8 l       .debug_str	00000000 
0004e53c l       .debug_str	00000000 
0004e59b l       .debug_str	00000000 
0004e5f8 l       .debug_str	00000000 
0004e652 l       .debug_str	00000000 
0004e6ae l       .debug_str	00000000 
0004e70b l       .debug_str	00000000 
0004e76a l       .debug_str	00000000 
0004e7d2 l       .debug_str	00000000 
0004e83c l       .debug_str	00000000 
0004e8a5 l       .debug_str	00000000 
0004e903 l       .debug_str	00000000 
0004e975 l       .debug_str	00000000 
0004e979 l       .debug_str	00000000 
0004e9ec l       .debug_str	00000000 
0004ea4a l       .debug_str	00000000 
0004eaa6 l       .debug_str	00000000 
0004eb17 l       .debug_str	00000000 
0004eb8d l       .debug_str	00000000 
0004ebc4 l       .debug_str	00000000 
0004ec20 l       .debug_str	00000000 
0004ec74 l       .debug_str	00000000 
0004ecd2 l       .debug_str	00000000 
0004ed3e l       .debug_str	00000000 
0004ed93 l       .debug_str	00000000 
0004edc6 l       .debug_str	00000000 
0004edd4 l       .debug_str	00000000 
0004ee0c l       .debug_str	00000000 
0004ee1f l       .debug_str	00000000 
0004ee54 l       .debug_str	00000000 
0004ee8a l       .debug_str	00000000 
0004eee5 l       .debug_str	00000000 
0004ef18 l       .debug_str	00000000 
0004ef1f l       .debug_str	00000000 
0004ef61 l       .debug_str	00000000 
0004ef92 l       .debug_str	00000000 
0004efc3 l       .debug_str	00000000 
0004eff6 l       .debug_str	00000000 
0004effd l       .debug_str	00000000 
0004f02a l       .debug_str	00000000 
0004f065 l       .debug_str	00000000 
0004f078 l       .debug_str	00000000 
0004f0a9 l       .debug_str	00000000 
0004f0b3 l       .debug_str	00000000 
0004f114 l       .debug_str	00000000 
0004f17c l       .debug_str	00000000 
0004f1b9 l       .debug_str	00000000 
0004f207 l       .debug_str	00000000 
0004f243 l       .debug_str	00000000 
0004f27f l       .debug_str	00000000 
0004f2b8 l       .debug_str	00000000 
0004f2f2 l       .debug_str	00000000 
0004f32b l       .debug_str	00000000 
0004f362 l       .debug_str	00000000 
0004f39b l       .debug_str	00000000 
0004f3d5 l       .debug_str	00000000 
0004f41b l       .debug_str	00000000 
0004f43e l       .debug_str	00000000 
0004f484 l       .debug_str	00000000 
0004f4a7 l       .debug_str	00000000 
0004f4f0 l       .debug_str	00000000 
0004f516 l       .debug_str	00000000 
0004f55f l       .debug_str	00000000 
0004f585 l       .debug_str	00000000 
0004f5cf l       .debug_str	00000000 
0004f5f6 l       .debug_str	00000000 
0004f640 l       .debug_str	00000000 
0004f667 l       .debug_str	00000000 
0004f6b4 l       .debug_str	00000000 
0004f6de l       .debug_str	00000000 
0004f72b l       .debug_str	00000000 
0004f755 l       .debug_str	00000000 
0004f788 l       .debug_str	00000000 
0004f7b4 l       .debug_str	00000000 
0004f80a l       .debug_str	00000000 
0004f835 l       .debug_str	00000000 
0004f88d l       .debug_str	00000000 
0004f8e3 l       .debug_str	00000000 
0004f91c l       .debug_str	00000000 
0004f927 l       .debug_str	00000000 
0001ec49 l       .debug_str	00000000 
0004f960 l       .debug_str	00000000 
0004f987 l       .debug_str	00000000 
0004f9c0 l       .debug_str	00000000 
0004fa07 l       .debug_str	00000000 
0004fa14 l       .debug_str	00000000 
0004fc2e l       .debug_str	00000000 
0004fa43 l       .debug_str	00000000 
0004fa83 l       .debug_str	00000000 
0004fa97 l       .debug_str	00000000 
0004fad9 l       .debug_str	00000000 
0004fb0a l       .debug_str	00000000 
0004fb3a l       .debug_str	00000000 
0004fb6b l       .debug_str	00000000 
0004fb9c l       .debug_str	00000000 
0004fbd3 l       .debug_str	00000000 
0004fbde l       .debug_str	00000000 
0004fc1e l       .debug_str	00000000 
0004fc32 l       .debug_str	00000000 
0004fc6e l       .debug_str	00000000 
0004fc7e l       .debug_str	00000000 
0004fcb3 l       .debug_str	00000000 
0004fcbd l       .debug_str	00000000 
0004fcf2 l       .debug_str	00000000 
0004fcfc l       .debug_str	00000000 
0004fd51 l       .debug_str	00000000 
0004fd99 l       .debug_str	00000000 
0004fddf l       .debug_str	00000000 
0004fe26 l       .debug_str	00000000 
0004fe6f l       .debug_str	00000000 
0004fec1 l       .debug_str	00000000 
0004ff13 l       .debug_str	00000000 
0004ffb1 l       .debug_str	00000000 
0004ffe3 l       .debug_str	00000000 
0005001c l       .debug_str	00000000 
00050031 l       .debug_str	00000000 
0005006c l       .debug_str	00000000 
00050083 l       .debug_str	00000000 
000500c1 l       .debug_str	00000000 
000500db l       .debug_str	00000000 
0005013d l       .debug_str	00000000 
00050162 l       .debug_str	00000000 
000501bd l       .debug_str	00000000 
000501cc l       .debug_str	00000000 
00050241 l       .debug_str	00000000 
0005025e l       .debug_str	00000000 
00050298 l       .debug_str	00000000 
000502d5 l       .debug_str	00000000 
000502e0 l       .debug_str	00000000 
00050318 l       .debug_str	00000000 
0005031f l       .debug_str	00000000 
0005039e l       .debug_str	00000000 
000503fe l       .debug_str	00000000 
0005045c l       .debug_str	00000000 
000504ba l       .debug_str	00000000 
000504f2 l       .debug_str	00000000 
00050527 l       .debug_str	00000000 
00050552 l       .debug_str	00000000 
0005055c l       .debug_str	00000000 
0005058c l       .debug_str	00000000 
0005059a l       .debug_str	00000000 
000505f3 l       .debug_str	00000000 
00050646 l       .debug_str	00000000 
000506c2 l       .debug_str	00000000 
00050726 l       .debug_str	00000000 
0005078a l       .debug_str	00000000 
000507c0 l       .debug_str	00000000 
000507d4 l       .debug_str	00000000 
00050815 l       .debug_str	00000000 
0005082d l       .debug_str	00000000 
000508e1 l       .debug_str	00000000 
00050914 l       .debug_str	00000000 
00050925 l       .debug_str	00000000 
0005096b l       .debug_str	00000000 
00050978 l       .debug_str	00000000 
000509b5 l       .debug_str	00000000 
000509f9 l       .debug_str	00000000 
00050a3a l       .debug_str	00000000 
00050a7c l       .debug_str	00000000 
00050a86 l       .debug_str	00000000 
00050aca l       .debug_str	00000000 
00050ad5 l       .debug_str	00000000 
00050b23 l       .debug_str	00000000 
00050b71 l       .debug_str	00000000 
00050bb7 l       .debug_str	00000000 
00050bff l       .debug_str	00000000 
00050c47 l       .debug_str	00000000 
00013d61 l       .debug_str	00000000 
00050cae l       .debug_str	00000000 
00050d07 l       .debug_str	00000000 
00050d71 l       .debug_str	00000000 
000174e2 l       .debug_str	00000000 
00050ddb l       .debug_str	00000000 
00050e56 l       .debug_str	00000000 
00050ecb l       .debug_str	00000000 
00050ed6 l       .debug_str	00000000 
00050f4b l       .debug_str	00000000 
00050f56 l       .debug_str	00000000 
00050fad l       .debug_str	00000000 
00051011 l       .debug_str	00000000 
0005101d l       .debug_str	00000000 
0005105a l       .debug_str	00000000 
00051067 l       .debug_str	00000000 
0005109b l       .debug_str	00000000 
000510d6 l       .debug_str	00000000 
00051132 l       .debug_str	00000000 
0005118d l       .debug_str	00000000 
000511e7 l       .debug_str	00000000 
00037c21 l       .debug_str	00000000 
0005122d l       .debug_str	00000000 
00051293 l       .debug_str	00000000 
000512ca l       .debug_str	00000000 
000512d2 l       .debug_str	00000000 
0005130a l       .debug_str	00000000 
00051313 l       .debug_str	00000000 
0005134b l       .debug_str	00000000 
00051354 l       .debug_str	00000000 
0005138b l       .debug_str	00000000 
00051393 l       .debug_str	00000000 
000513cb l       .debug_str	00000000 
000513d4 l       .debug_str	00000000 
0005140c l       .debug_str	00000000 
00051415 l       .debug_str	00000000 
0005144c l       .debug_str	00000000 
00051454 l       .debug_str	00000000 
000514ce l       .debug_str	00000000 
00051548 l       .debug_str	00000000 
000515c2 l       .debug_str	00000000 
0005163e l       .debug_str	00000000 
0001ac15 l       .debug_str	00000000 
0005169c l       .debug_str	00000000 
000516fb l       .debug_str	00000000 
0005175a l       .debug_str	00000000 
000517b9 l       .debug_str	00000000 
00051819 l       .debug_str	00000000 
00051877 l       .debug_str	00000000 
000518d6 l       .debug_str	00000000 
00051935 l       .debug_str	00000000 
00051994 l       .debug_str	00000000 
000519f4 l       .debug_str	00000000 
00051a49 l       .debug_str	00000000 
00051a9e l       .debug_str	00000000 
00051af8 l       .debug_str	00000000 
00051b52 l       .debug_str	00000000 
00051b8c l       .debug_str	00000000 
00051b95 l       .debug_str	00000000 
00051bcf l       .debug_str	00000000 
00051bd8 l       .debug_str	00000000 
00051c15 l       .debug_str	00000000 
0003910c l       .debug_str	00000000 
00051c4e l       .debug_str	00000000 
00051caf l       .debug_str	00000000 
00051d0d l       .debug_str	00000000 
00051d4e l       .debug_str	00000000 
00051d8c l       .debug_str	00000000 
00051dc5 l       .debug_str	00000000 
00051e04 l       .debug_str	00000000 
00051e42 l       .debug_str	00000000 
00051e80 l       .debug_str	00000000 
00051ec1 l       .debug_str	00000000 
00051f05 l       .debug_str	00000000 
00051f42 l       .debug_str	00000000 
00051fa8 l       .debug_str	00000000 
0005200f l       .debug_str	00000000 
00052072 l       .debug_str	00000000 
000520d4 l       .debug_str	00000000 
00052139 l       .debug_str	00000000 
000521a2 l       .debug_str	00000000 
00052208 l       .debug_str	00000000 
0005226e l       .debug_str	00000000 
000522c9 l       .debug_str	00000000 
00052330 l       .debug_str	00000000 
0005239b l       .debug_str	00000000 
000523f6 l       .debug_str	00000000 
00052451 l       .debug_str	00000000 
00023531 l       .debug_str	00000000 
00052498 l       .debug_str	00000000 
000524e0 l       .debug_str	00000000 
00052528 l       .debug_str	00000000 
00052570 l       .debug_str	00000000 
000525b9 l       .debug_str	00000000 
00052603 l       .debug_str	00000000 
0005264a l       .debug_str	00000000 
0005269d l       .debug_str	00000000 
000526b8 l       .debug_str	00000000 
00052700 l       .debug_str	00000000 
00052754 l       .debug_str	00000000 
0005279c l       .debug_str	00000000 
000527f0 l       .debug_str	00000000 
00052838 l       .debug_str	00000000 
0005288c l       .debug_str	00000000 
000528d5 l       .debug_str	00000000 
0005292a l       .debug_str	00000000 
00052974 l       .debug_str	00000000 
000529cc l       .debug_str	00000000 
00052a2e l       .debug_str	00000000 
00052a8d l       .debug_str	00000000 
00052aed l       .debug_str	00000000 
00052b4d l       .debug_str	00000000 
00052bad l       .debug_str	00000000 
00052c0e l       .debug_str	00000000 
00052c6d l       .debug_str	00000000 
00052ccd l       .debug_str	00000000 
00052d2d l       .debug_str	00000000 
00052d8d l       .debug_str	00000000 
00052dee l       .debug_str	00000000 
00052e4b l       .debug_str	00000000 
00052ea6 l       .debug_str	00000000 
00052efc l       .debug_str	00000000 
00052f5a l       .debug_str	00000000 
00052fae l       .debug_str	00000000 
0005300f l       .debug_str	00000000 
00053075 l       .debug_str	00000000 
000530dd l       .debug_str	00000000 
00053144 l       .debug_str	00000000 
000531a0 l       .debug_str	00000000 
00053201 l       .debug_str	00000000 
0005325b l       .debug_str	00000000 
000532b5 l       .debug_str	00000000 
00053313 l       .debug_str	00000000 
00053367 l       .debug_str	00000000 
000533e3 l       .debug_str	00000000 
0005344c l       .debug_str	00000000 
000534c8 l       .debug_str	00000000 
00053544 l       .debug_str	00000000 
000535ad l       .debug_str	00000000 
00053629 l       .debug_str	00000000 
00053696 l       .debug_str	00000000 
000536f0 l       .debug_str	00000000 
00053749 l       .debug_str	00000000 
000537a1 l       .debug_str	00000000 
00053800 l       .debug_str	00000000 
0005385f l       .debug_str	00000000 
000538be l       .debug_str	00000000 
0005391e l       .debug_str	00000000 
0005397e l       .debug_str	00000000 
000539de l       .debug_str	00000000 
00053a3e l       .debug_str	00000000 
00053aa0 l       .debug_str	00000000 
00053b02 l       .debug_str	00000000 
00053b63 l       .debug_str	00000000 
00053bc5 l       .debug_str	00000000 
00053c27 l       .debug_str	00000000 
00053c88 l       .debug_str	00000000 
00053cea l       .debug_str	00000000 
00053d4c l       .debug_str	00000000 
00039150 l       .debug_str	00000000 
00053d95 l       .debug_str	00000000 
00053de1 l       .debug_str	00000000 
00053de9 l       .debug_str	00000000 
00053e33 l       .debug_str	00000000 
00053e7e l       .debug_str	00000000 
00053e85 l       .debug_str	00000000 
00053ed0 l       .debug_str	00000000 
00053f1b l       .debug_str	00000000 
00053f67 l       .debug_str	00000000 
00053fb1 l       .debug_str	00000000 
00053ffe l       .debug_str	00000000 
00054049 l       .debug_str	00000000 
00054095 l       .debug_str	00000000 
000540e1 l       .debug_str	00000000 
0005412d l       .debug_str	00000000 
0005417a l       .debug_str	00000000 
000541c4 l       .debug_str	00000000 
00054211 l       .debug_str	00000000 
0005425c l       .debug_str	00000000 
000542a8 l       .debug_str	00000000 
000542f4 l       .debug_str	00000000 
00054340 l       .debug_str	00000000 
0005438d l       .debug_str	00000000 
000543d7 l       .debug_str	00000000 
00054424 l       .debug_str	00000000 
0005446f l       .debug_str	00000000 
000544bb l       .debug_str	00000000 
00054507 l       .debug_str	00000000 
00054553 l       .debug_str	00000000 
000545a0 l       .debug_str	00000000 
000545eb l       .debug_str	00000000 
00054639 l       .debug_str	00000000 
00054685 l       .debug_str	00000000 
000546d2 l       .debug_str	00000000 
0005471f l       .debug_str	00000000 
0005476c l       .debug_str	00000000 
000547ba l       .debug_str	00000000 
00054805 l       .debug_str	00000000 
00054850 l       .debug_str	00000000 
0005489c l       .debug_str	00000000 
000548e8 l       .debug_str	00000000 
00054935 l       .debug_str	00000000 
00054981 l       .debug_str	00000000 
000549ce l       .debug_str	00000000 
00054a1b l       .debug_str	00000000 
00054a7a l       .debug_str	00000000 
00054ad7 l       .debug_str	00000000 
00054b33 l       .debug_str	00000000 
00054b91 l       .debug_str	00000000 
00054bee l       .debug_str	00000000 
00054c4c l       .debug_str	00000000 
00054ca9 l       .debug_str	00000000 
00054d07 l       .debug_str	00000000 
00054d64 l       .debug_str	00000000 
00054dc3 l       .debug_str	00000000 
00054e21 l       .debug_str	00000000 
00054e82 l       .debug_str	00000000 
00054ee3 l       .debug_str	00000000 
00054f46 l       .debug_str	00000000 
00054f77 l       .debug_str	00000000 
00054f7f l       .debug_str	00000000 
00054fe2 l       .debug_str	00000000 
00055045 l       .debug_str	00000000 
000550a9 l       .debug_str	00000000 
0005510d l       .debug_str	00000000 
00055171 l       .debug_str	00000000 
000551d5 l       .debug_str	00000000 
00055238 l       .debug_str	00000000 
0005529b l       .debug_str	00000000 
000552ff l       .debug_str	00000000 
00055363 l       .debug_str	00000000 
000553c7 l       .debug_str	00000000 
0005542b l       .debug_str	00000000 
0005545c l       .debug_str	00000000 
00055464 l       .debug_str	00000000 
000554c8 l       .debug_str	00000000 
0005552c l       .debug_str	00000000 
00055590 l       .debug_str	00000000 
000555f4 l       .debug_str	00000000 
00055654 l       .debug_str	00000000 
000556b4 l       .debug_str	00000000 
000556e2 l       .debug_str	00000000 
000556eb l       .debug_str	00000000 
0005574c l       .debug_str	00000000 
000557ad l       .debug_str	00000000 
0005580e l       .debug_str	00000000 
0005586f l       .debug_str	00000000 
000558c6 l       .debug_str	00000000 
00055919 l       .debug_str	00000000 
00055961 l       .debug_str	00000000 
00055989 l       .debug_str	00000000 
000559d1 l       .debug_str	00000000 
000559e7 l       .debug_str	00000000 
00055a2f l       .debug_str	00000000 
00055a64 l       .debug_str	00000000 
00055aac l       .debug_str	00000000 
00055ae7 l       .debug_str	00000000 
00055b2f l       .debug_str	00000000 
00055b77 l       .debug_str	00000000 
00055b98 l       .debug_str	00000000 
00055be0 l       .debug_str	00000000 
00055beb l       .debug_str	00000000 
00055c33 l       .debug_str	00000000 
00055c70 l       .debug_str	00000000 
00055cb8 l       .debug_str	00000000 
00055d11 l       .debug_str	00000000 
00055d59 l       .debug_str	00000000 
00055d75 l       .debug_str	00000000 
00055dbd l       .debug_str	00000000 
00055e69 l       .debug_str	00000000 
00055eb1 l       .debug_str	00000000 
00055ecf l       .debug_str	00000000 
00055f17 l       .debug_str	00000000 
00055f21 l       .debug_str	00000000 
00055f69 l       .debug_str	00000000 
00055fa4 l       .debug_str	00000000 
00055fec l       .debug_str	00000000 
0005603b l       .debug_str	00000000 
00056083 l       .debug_str	00000000 
000560aa l       .debug_str	00000000 
000560f2 l       .debug_str	00000000 
0005611c l       .debug_str	00000000 
00056164 l       .debug_str	00000000 
000561df l       .debug_str	00000000 
00056227 l       .debug_str	00000000 
0005626f l       .debug_str	00000000 
00056285 l       .debug_str	00000000 
00016c3c l       .debug_str	00000000 
000562cd l       .debug_str	00000000 
00056315 l       .debug_str	00000000 
0005635d l       .debug_str	00000000 
0005638e l       .debug_str	00000000 
000563d6 l       .debug_str	00000000 
0005643a l       .debug_str	00000000 
00056482 l       .debug_str	00000000 
0000b963 l       .debug_str	00000000 
000564ca l       .debug_str	00000000 
00056512 l       .debug_str	00000000 
0005651f l       .debug_str	00000000 
00056567 l       .debug_str	00000000 
00056571 l       .debug_str	00000000 
000565b9 l       .debug_str	00000000 
000565c2 l       .debug_str	00000000 
0005660a l       .debug_str	00000000 
00056632 l       .debug_str	00000000 
0005667a l       .debug_str	00000000 
000566c2 l       .debug_str	00000000 
000566e4 l       .debug_str	00000000 
0005672c l       .debug_str	00000000 
0005675d l       .debug_str	00000000 
000567a5 l       .debug_str	00000000 
000567ed l       .debug_str	00000000 
00056825 l       .debug_str	00000000 
0005686d l       .debug_str	00000000 
000568a2 l       .debug_str	00000000 
000568ea l       .debug_str	00000000 
00056913 l       .debug_str	00000000 
0005695b l       .debug_str	00000000 
0005697f l       .debug_str	00000000 
000569c7 l       .debug_str	00000000 
000569ec l       .debug_str	00000000 
00056a34 l       .debug_str	00000000 
00056a51 l       .debug_str	00000000 
00056a99 l       .debug_str	00000000 
00056aa4 l       .debug_str	00000000 
00056aec l       .debug_str	00000000 
00056b14 l       .debug_str	00000000 
00056b5c l       .debug_str	00000000 
00056b6b l       .debug_str	00000000 
00056bb3 l       .debug_str	00000000 
00056bfb l       .debug_str	00000000 
00056c17 l       .debug_str	00000000 
00056c5f l       .debug_str	00000000 
00056cd6 l       .debug_str	00000000 
00056d1e l       .debug_str	00000000 
00056d95 l       .debug_str	00000000 
00056ddd l       .debug_str	00000000 
00056de6 l       .debug_str	00000000 
00056e2e l       .debug_str	00000000 
00056e54 l       .debug_str	00000000 
00056e9c l       .debug_str	00000000 
00056ecf l       .debug_str	00000000 
00056f17 l       .debug_str	00000000 
00056f34 l       .debug_str	00000000 
00056f7c l       .debug_str	00000000 
00056f85 l       .debug_str	00000000 
00056fcd l       .debug_str	00000000 
00057015 l       .debug_str	00000000 
00057039 l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
00057081 l       .debug_str	00000000 
000570c9 l       .debug_str	00000000 
00057111 l       .debug_str	00000000 
00057209 l       .debug_str	00000000 
0001b325 l       .debug_str	00000000 
00057251 l       .debug_str	00000000 
00057299 l       .debug_str	00000000 
000572e1 l       .debug_str	00000000 
0005730e l       .debug_str	00000000 
0000ba9d l       .debug_str	00000000 
00057356 l       .debug_str	00000000 
0005739e l       .debug_str	00000000 
000573fb l       .debug_str	00000000 
00057443 l       .debug_str	00000000 
0005744c l       .debug_str	00000000 
00057494 l       .debug_str	00000000 
000574b1 l       .debug_str	00000000 
000574f9 l       .debug_str	00000000 
0005752f l       .debug_str	00000000 
00057577 l       .debug_str	00000000 
000575ac l       .debug_str	00000000 
000575f4 l       .debug_str	00000000 
0005762d l       .debug_str	00000000 
00057675 l       .debug_str	00000000 
00057691 l       .debug_str	00000000 
000576d9 l       .debug_str	00000000 
000576e1 l       .debug_str	00000000 
00057729 l       .debug_str	00000000 
00057744 l       .debug_str	00000000 
0005778c l       .debug_str	00000000 
000577b4 l       .debug_str	00000000 
000577fe l       .debug_str	00000000 
00057848 l       .debug_str	00000000 
000578a7 l       .debug_str	00000000 
00057904 l       .debug_str	00000000 
0005795d l       .debug_str	00000000 
000579bc l       .debug_str	00000000 
00057a1b l       .debug_str	00000000 
00057a7c l       .debug_str	00000000 
00057adf l       .debug_str	00000000 
00057b47 l       .debug_str	00000000 
00057ba9 l       .debug_str	00000000 
00057c0f l       .debug_str	00000000 
00057c71 l       .debug_str	00000000 
00057cd6 l       .debug_str	00000000 
00057d39 l       .debug_str	00000000 
00057d95 l       .debug_str	00000000 
00057dec l       .debug_str	00000000 
00057e45 l       .debug_str	00000000 
00057e98 l       .debug_str	00000000 
00057ef4 l       .debug_str	00000000 
00057f5a l       .debug_str	00000000 
00057fb0 l       .debug_str	00000000 
0005800d l       .debug_str	00000000 
0005806f l       .debug_str	00000000 
000580c8 l       .debug_str	00000000 
00058123 l       .debug_str	00000000 
0005817e l       .debug_str	00000000 
000581d9 l       .debug_str	00000000 
00058236 l       .debug_str	00000000 
00058293 l       .debug_str	00000000 
000582d9 l       .debug_str	00000000 
00058323 l       .debug_str	00000000 
00058363 l       .debug_str	00000000 
000583a0 l       .debug_str	00000000 
000583e4 l       .debug_str	00000000 
00058420 l       .debug_str	00000000 
00058464 l       .debug_str	00000000 
000584ad l       .debug_str	00000000 
000584b6 l       .debug_str	00000000 
000584ff l       .debug_str	00000000 
00058508 l       .debug_str	00000000 
00058571 l       .debug_str	00000000 
000585ce l       .debug_str	00000000 
00058631 l       .debug_str	00000000 
00058687 l       .debug_str	00000000 
000586dd l       .debug_str	00000000 
00058736 l       .debug_str	00000000 
0005878e l       .debug_str	00000000 
000587f2 l       .debug_str	00000000 
00058878 l       .debug_str	00000000 
0005887e l       .debug_str	00000000 
00058904 l       .debug_str	00000000 
0005890a l       .debug_str	00000000 
0005898c l       .debug_str	00000000 
00058a0e l       .debug_str	00000000 
00058a91 l       .debug_str	00000000 
00058a98 l       .debug_str	00000000 
00058b1b l       .debug_str	00000000 
00058b22 l       .debug_str	00000000 
00058ba8 l       .debug_str	00000000 
00058c2e l       .debug_str	00000000 
00058cb1 l       .debug_str	00000000 
00058d34 l       .debug_str	00000000 
00058db6 l       .debug_str	00000000 
00058e3c l       .debug_str	00000000 
00058ec2 l       .debug_str	00000000 
00058f4c l       .debug_str	00000000 
00058fd4 l       .debug_str	00000000 
0005905c l       .debug_str	00000000 
000590c4 l       .debug_str	00000000 
0005912d l       .debug_str	00000000 
00059197 l       .debug_str	00000000 
00059202 l       .debug_str	00000000 
00059260 l       .debug_str	00000000 
000592be l       .debug_str	00000000 
0005931c l       .debug_str	00000000 
0005937b l       .debug_str	00000000 
000593d9 l       .debug_str	00000000 
00059438 l       .debug_str	00000000 
00059496 l       .debug_str	00000000 
000594f5 l       .debug_str	00000000 
00059554 l       .debug_str	00000000 
000595b3 l       .debug_str	00000000 
00059611 l       .debug_str	00000000 
00059670 l       .debug_str	00000000 
000596cf l       .debug_str	00000000 
0005972e l       .debug_str	00000000 
0005978d l       .debug_str	00000000 
000597ec l       .debug_str	00000000 
0005984b l       .debug_str	00000000 
000598aa l       .debug_str	00000000 
00059909 l       .debug_str	00000000 
00059968 l       .debug_str	00000000 
000599c7 l       .debug_str	00000000 
00059a26 l       .debug_str	00000000 
00059a85 l       .debug_str	00000000 
00059ae4 l       .debug_str	00000000 
00059b43 l       .debug_str	00000000 
00059ba2 l       .debug_str	00000000 
00059c01 l       .debug_str	00000000 
00059c60 l       .debug_str	00000000 
00059cbf l       .debug_str	00000000 
00059d1e l       .debug_str	00000000 
00059d7e l       .debug_str	00000000 
00059ddd l       .debug_str	00000000 
00059e3c l       .debug_str	00000000 
00059e9b l       .debug_str	00000000 
00059efb l       .debug_str	00000000 
00059f5a l       .debug_str	00000000 
00059fb9 l       .debug_str	00000000 
0005a018 l       .debug_str	00000000 
0005a078 l       .debug_str	00000000 
00018376 l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
0001a394 l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
0001a39e l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
00018a1a l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
00019a42 l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
00018914 l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
000189c4 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
00018f3c l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
00018326 l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
00018388 l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
0002895c l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
000289d7 l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
00028bc8 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
00027f30 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
000189ee l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
000189f4 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
000189e8 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
00018328 l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
0001a3ac l     F .text	00000024 __semihost
0001a3d0 l     F .text	00000010 debugger_connected
0001a3e0 l     F .text	0000002e semihost_write
0001a4b4 l     F .text	0000001c semihosting_console_write_ch
20006f04 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20006f08 l     O .bss	00000010 avail_queue
20006f18 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20006f24 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
0001a684 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
0001a6d8 l     F .text	00000050 hal_gpio_irq_handler
0001a728 l     F .text	0000002c hal_gpio_irq_setup
0001a754 l     F .text	0000001c hal_gpio_find_empty_slot
0001a770 l     F .text	00000038 hal_gpio_find_pin
20006f28 l     O .bss	00000040 hal_gpio_irqs
20006f68 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
0001a904 l     F .text	0000007a hal_i2c_delay_us
0001a980 l     F .text	00000024 hal_i2c_resolve
0001a9a4 l     F .text	0000001c hal_i2c_convert_status
0001a9c0 l     F .text	00000012 read_gpio_inbuffer
0001a9d2 l     F .text	000000a2 hal_i2c_clear_bus
00029030 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
0001ad70 l     F .text	0000006e nrf52_irqm_handler
0001adf8 l     F .text	00000014 hal_spi_stop_transfer
0001ae0c l     F .text	0000004c hal_spi_config_slave
0001ae58 l     F .text	000000b8 hal_spi_init_master
0001af10 l     F .text	000000e0 hal_spi_config_master
00029038 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
0001b2f4 l     F .text	0000000e nrf52_hal_wdt_default_handler
0001b304 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
0001b51c l     F .text	00000016 os_main
20007070 l     O .bss	00002000 g_os_main_stack
20006f70 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
0001b82c l     F .text	0000005c os_dev_add
0001b888 l     F .text	00000026 os_dev_initialize
0001b8ae l     F .text	00000020 os_dev_init
20009070 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20009078 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
0001bdd8 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0001beec l     F .text	00000010 os_msys_find_biggest_pool
0001befc l     F .text	0000002c os_msys_find_pool
0001bf74 l     F .text	00000044 os_msys_init_once
20009088 l     O .bss	00004900 os_msys_1_data
2000d988 l     O .bss	0000000c os_msys_1_mbuf_pool
2000d994 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0001c1d0 l     F .text	00000020 os_sanity_check_list_lock
0001c1f0 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0001c664 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0001c754 l     F .text	0000004c os_deltatime
0001c7a0 l     F .text	0000005c os_time_tick
2000d9b8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0001cabc l       .text	00000000 SVC_User
0001cada l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0001cb7c l       .text	00000000 test1
0001cb70 l       .text	00000000 loop1
0001cb82 l       .text	00000000 res1
0001cb9e l       .text	00000000 test2
0001cba6 l       .text	00000000 done
0001cb92 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0001cbb2 l       .text	00000000 test1
0001cbae l       .text	00000000 loop1
0001cbc0 l       .text	00000000 test2
0001cbbc l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001cc2a l     F .text	000000c0 ui2a
0001ccea l     F .text	00000020 i2a
0001cd0a l     F .text	00000030 a2d
0001cd3a l     F .text	00000036 a2i
0001cd70 l     F .text	0000002a putf
0001cd9c l     F .text	0000011c putchw
0001ceb8 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001d23c l     F .text	00000004 stdin_read
0001d240 l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001d2f0 l     F .text	00000028 nrf52k_flash_wait_ready
0001d318 l     F .text	00000054 nrf52k_flash_erase_sector
0001d36c l     F .text	00000004 nrf52k_flash_init
0001d370 l     F .text	00000020 nrf52k_flash_sector_info
0001d390 l     F .text	000000d0 nrf52k_flash_write
0001d460 l     F .text	0000000e nrf52k_flash_read
000291f0 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001d470 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001d67c l     F .text	0000000a nrf_read_timer_cntr
0001d688 l     F .text	000000b4 nrf_timer_set_ocmp
0001d73c l     F .text	0000000a nrf_timer_disable_ocmp
0001d746 l     F .text	0000000a nrf_rtc_disable_ocmp
0001d750 l     F .text	00000054 hal_timer_read_bsptimer
0001d7a4 l     F .text	00000076 hal_timer_chk_queue
0001d81a l     F .text	0000002c hal_timer_irq_handler
0002920c l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001d9e0 l     F .text	00000034 nrf52_periph_create_timers
0001da14 l     F .text	00000020 nrf52_periph_create_i2c
0001da34 l     F .text	00000020 nrf52_periph_create_spi
00029224 l     O .text	0000000c hal_i2c1_cfg
00029230 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001da68 l     F .text	00000028 sensor_mgr_remove
0001da90 l     F .text	00000060 sensor_mgr_insert
0001daf0 l     F .text	0000000a sensor_type_traits_empty
0001dafc l     F .text	0000000c sensor_mgr_evq_set
0001db36 l     F .text	0000005c sensor_read_data_func
0001db94 l     F .text	00000048 sensor_base_ts_update_event
0001dbdc l     F .text	00000050 sensor_up_timestamp
0001dc64 l     F .text	000000a0 sensor_mgr_init
0001ded0 l     F .text	0000007c sensor_mgr_wakeup_event
0001dd2e l     F .text	00000032 sensor_update_nextrun
0001dd60 l     F .text	0000001e sensor_calc_nextrun_delta
0001dd80 l     F .text	00000024 sensor_find_min_nextrun_sensor
0001de58 l     F .text	0000004a sensor_mgr_poll_bytype
0001dea2 l     F .text	0000002e sensor_poll_per_type_trait
2000d9ec l     O .bss	00000078 sensor_notify_evt_area
2000da64 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000da80 l     O .bss	00000008 oc_sem
2000da88 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000da8c l     O .bss	0000000c hw_id
2000da98 l     O .bss	00000004 hw_id_len
2000daa0 l     O .bss	00000008 sensor_node_address
2000daa8 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
00029248 l     O .text	0000000c COLLECTOR_NODE_HW_ID
00029254 l     O .text	0000003c SENSOR_NODE_HW_IDS
000292f0 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001e0f4 l     F .text	00000050 config_device
2000dae0 l     O .bss	00000014 adc_1_itf_temp_stub
2000daf8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001e1a0 l     F .text	00000004 temp_stub_close
0001e1a4 l     F .text	0000001c temp_stub_sensor_get_config
0001e1c0 l     F .text	00000026 temp_stub_open
0001e29c l     F .text	0000007c temp_stub_sensor_read
00029334 l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001e340 l     F .text	00000030 oc_buffer_tx
0001e370 l     F .text	0000002c oc_buffer_rx
2000dbb8 l     O .bss	00000018 oc_inq
2000dbd0 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000dbe8 l     O .bss	000000c8 oc_client_cb_area
2000dcb0 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000dccc l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000dcd0 l     O .bss	0000001c oc_rep_objects
2000dcec l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001e4c4 l     F .text	00000078 flash_map_read_mfg
2000dd1c l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001e618 l     F .text	00000094 mfg_seek_next_aux
0001e6ac l     F .text	00000070 mfg_read_mmr
0001e71c l     F .text	00000054 mfg_read_next_mmr
0001e770 l     F .text	0000003c mfg_open_flash_area
0001e7ac l     F .text	00000044 mfg_read_tlv_body
0001e878 l     F .text	0000004e mfg_read_mmr_refs
2000dd94 l     O .bss	00000001 mfg_initialized
2000dd98 l     O .bss	00000018 mfg_mmrs
2000ddb0 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001e8de l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
0001a688 l       .debug_str	00000000 
0001a6df l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
0001a72b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0001a733 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
0001852c g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
0001616c g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE
0000886c g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE
00008616 g     F .text	000000ba main
00015898 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE
0000a076 g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
0001bafc g     F .text	00000040 os_eventq_remove
0000a80c g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE
0001c948 g     F .text	00000018 os_arch_init
0001cb64 g     F .text	00000048 memcmp
00012c66 g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
000180d2 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE
00016e58 g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
00012140 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
0001547c g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E
00012fdc g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
00017db2 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
00017c3a g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
000151b4 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE
00015148 g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
0001855c g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
0000a7ee g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
000091a8 g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
00015348 g     F .text	0000005a _ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE
0001a1bc g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000ded0 g     O .bss	0000001c nrf52_hal_timer0
000156e4 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E
0000918e g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
0001555a g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE
0001dd24 g     F .text	0000000a sensor_unlock
0000aca2 g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
00015688 g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E
000098fe g     F .text	00000118 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E
00012194 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
0001566c g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE
000175bc g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E
00008ffa g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
0001c21c g     F .text	00000024 os_sanity_check_register
0001e1f4 g     F .text	0000007c temp_stub_init
0001c2bc g     F .text	00000054 os_sched_insert
2000ddb4 g     O .bss	00000001 g_silence_console
00015bb2 g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E
00016486 g     F .text	0000028a _ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E
00015c6a g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E
000132f8 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
00017a30 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001e97c g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
000182f8 g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
00015440 g     F .text	00000018 _ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E
00009a88 g     F .text	00000162 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE
00016c02 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE
00008d66 g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
00015ff2 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
00019e08 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE
0001830a g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E
000158fc g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE
00015d56 g     F .text	00000024 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE
00012384 g     F .text	00000086 _ZN4core3cmp6max_by17h3c9686db40e0f078E
00008ba4 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
000161cc g     F .text	0000004a _ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E
0001e400 g     F .text	00000020 oc_send_buffer
00011f16 g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E
0001c9f0 g     F .text	00000030 os_arch_start
000160dc g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE
0000a880 g     F .text	0000001a _ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E
0000ecb0 g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE
0001e018 g     F .text	0000001a is_standalone_node
00017914 g     F .text	00000008 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h48c974e346f24094E
0001b9e8 g     F .text	00000010 os_eventq_init
0001941a g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
000133b0 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
00018afe g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
0001217e g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
00008e5c g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
00017fb4 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001df4c g     F .text	00000028 init_sensor_coap
00017cc6 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE
0001e420 g     F .text	0000004c oc_send_multicast_message
00016c12 g     F .text	0000008c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE
00012986 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
0000edea g     F .text	000000a8 _ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E
000193d6 g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000def0 g     O .bss	00000034 sensor_mgr
0001a550 g     F .text	0000002c console_dump
0000afa4 g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E
0001c3e8 g     F .text	00000078 os_sched_wakeup
0000ed6e g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE
00013288 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
00019f9c g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
00008bdc g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001e8dc g     F .text	00000002 _fini
0001b820 g     F .text	0000000a os_cputime_get32
00012244 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
00014fea g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000ddb5 g     O .bss	00000001 g_console_input_ignore
0001c8d8 g     F .text	00000014 os_arch_ctx_sw
000132ce g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
0001796c g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E
00015a26 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE
0001cb26 g     F .text	0000000c SysTick_Handler
0000f2c8 g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE
0000f432 g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E
0001df8c g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
00012d88 g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
000121aa g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
00012060 g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h1051abda59747a6bE
000094e0 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
00013302 g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
0001cbfe g     F .text	0000001c strcmp
00016bde g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE
2000dde8 g     O .bss	00000050 g_idle_task
0000fb44 g     F .text	000000c4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E
0001b9d8 g     F .text	00000010 os_dev_reset
000181c4 g     F .text	00000010 _ZN4core3ptr5write17h147d4643d861e927E
0000958c g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
0001c538 g     F .text	00000010 os_sem_init
0000ee92 g     F .text	00000106 _ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E
0001a4d0 g     F .text	00000070 console_printhex
000151e0 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
0000ecf8 g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE
000293f4 g       .text	00000000 __exidx_start
0001dffc g     F .text	0000001c is_collector_node
00016436 g     F .text	00000050 _ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E
0001cbc6 g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
00019cec g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
0001a460 g     F .text	00000054 console_buffer
0001b9f8 g     F .text	0000000a os_eventq_inited
0001a698 g     F .text	0000000c sysinit_end
00017be8 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
00018044 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
000184d4 g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000df88 g       .bss	00000000 __HeapBase
00015c02 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE
0000f208 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E
00015b50 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E
0000948c g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
0000a852 g     F .text	00000012 _ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E
00017906 g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h8e5f04233c93701aE
0001511c g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
0000f560 g     F .text	00000146 .hidden _ZN3app5chip88on_start17h13652dc8e27bf6d4E
000154c4 g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001e57c g     F .text	00000026 flash_area_read
000132b8 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001e492 g     F .text	00000002 oc_register_ip4
000090b2 g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001e494 g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
00011dbe g     F .text	00000060 _ZN22piet_embedded_graphics7display18set_display_pixels17he48c5c43fd96ddebE
00017abe g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE
0001e8fc g     F .text	00000028 hal_flash_init
0001b9a0 g     F .text	00000036 os_dev_close
0002938c g     O .text	00000048 sysflash_map_dflt
0000f7b6 g     F .text	0000020c _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE
0001d2e4 g     F .text	0000000c hal_bsp_init
00008c88 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
00016f04 g     F .text	000005e0 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE
0000fc08 g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha9851d0b0cdc4725E
00012a82 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
0001039e g     F .text	00000192 _ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE
00009ca0 g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
00012948 g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001ecd8 g     F .text	00000004 __aeabi_memcpy4
00016d2e g     F .text	000000c6 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE
0001b13c g     F .text	0000002c hal_spi_set_txrx_cb
0001ecd0 g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000ddb8 g     O .bss	00000004 console_is_midline
0001ecd0 g     F .text	00000006 __aeabi_memclr4
0000f402 g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E
0000a842 g     F .text	00000010 _ZN4core3ptr13drop_in_place17h22ac77b3595708cdE
000080f8 g       .text	00000000 __isr_vector_end
0001ac34 g     F .text	0000013c hal_i2c_master_read
00011ee4 g     F .text	0000001a .hidden _ZN4core3ops8function6FnOnce9call_once17h59e116d6918016e9E
00015cea g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E
0001cf1c g     F .text	0000025c tfp_format
000181d4 g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E
00017f84 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001ddf0 g     F .text	00000068 sensor_read
00009174 g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
000156f4 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E
00016b36 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE
0001ecd8 g     F .text	00000004 __aeabi_memcpy
0001ecd8 g     F .text	00000004 __aeabi_memcpy8
2000df24 g     O .bss	00000020 st_up_osco
0001ca20 g     F .text	0000005c os_arch_os_start
0001ddd2 g     F .text	0000001e sensor_init
0000b0c8 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E
20000000 g       .bss	00000000 _ram_start
0001c848 g     F .text	00000026 os_time_delay
00015704 g     F .text	0000002c _ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE
00011da6 g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E
0001e490 g     F .text	00000002 oc_register_gatt
20004a6c g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001e978 g     F .text	00000004 hal_bsp_hw_id_len
0001b7e0 g     F .text	00000034 os_callout_wakeup_ticks
0001bb56 g     F .text	00000026 os_mqueue_get
0001aa74 g     F .text	00000098 hal_i2c_init
00012128 g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h0340384168a45934E
000192a8 g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
00019cec g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
000089ac g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0002727c g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
00012506 g     F .text	00000092 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E
000174e4 g     F .text	00000048 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E
00017f54 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
0001c4e8 g     F .text	00000022 os_sched
00008d78 g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
0001240a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h5567184bcc425327E
00012ac8 g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
0000a8d0 g     F .text	00000010 _ZN4core3ptr13drop_in_place17hf625580841d3425eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001db08 g     F .text	0000002e sensor_mgr_match_bytype
0001299c g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
0001560a g     F .text	00000032 _ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E
0000ae24 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
0001c024 g     F .text	00000014 os_mutex_init
00009066 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
0000a032 g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
0000f4fa g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc3726000bdb855aE
2000ddc0 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
00015d7a g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E
00008164  w    F .text	00000002 RTC1_IRQHandler
00012bae g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
00017ec4 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
00017846 g     F .text	00000022 _ZN4core3cmp3Ord3min17hc89b724701767be9E
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
0000931c g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
00009462 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
00008c80 g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
000134c8 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
0001bfc8 g     F .text	00000028 os_msys_get_pkthdr
0001e270 g     F .text	0000002c temp_stub_get_raw_temperature
0001c460 g     F .text	0000003c os_sched_os_timer_exp
0000f2ee g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE
0001b8d0 g     F .text	00000040 os_dev_create
0000a864 g     F .text	0000001c _ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E
0001814e g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
0001c20c g     F .text	00000010 os_sanity_check_init
000185be g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
00017814 g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE
0001b814 g     F .text	0000000c os_cputime_init
0000af4a g     F .text	00000030 _ZN4core3any6TypeId2of17h3f51c8cccab069bdE
0001bae4 g     F .text	00000018 os_eventq_run
00012f68 g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
0001bff0 g     F .text	00000034 os_msys_init
000175c4 g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
00017a5a g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
0001c8ce g     F .text	0000000a timer_handler
0001230e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
000182fc g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
000093f2 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
00008cba g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
0001563c g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E
000182f4 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
0001859c g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
00017584 g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
00019f9c g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
000157de g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
0001d178 g     F .text	00000008 vfprintf
000151a0 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
00012af4 g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
00008984 g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E
00012b52 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
0001bbf6 g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
00017f24 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
0000f21c g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6e7fb991422ea45dE
000197aa g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
000087d2 g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE
00016e7c g     F .text	00000088 _ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE
00018530 g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
0001c8fe g     F .text	0000000a os_arch_in_critical
00015c56 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E
0000ece8 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E
0001c2ac g     F .text	00000010 os_sanity_init
000175b0 g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE
00015808 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE
00019f9c g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
000156a6 g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE
0001b3c0 g     F .text	0000004c __assert_func
0000f2a6 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E
00017cb2 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
00015f48 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00015826 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE
0001be96 g     F .text	0000001e os_memblock_put_from_cb
0001ca80 g     F .text	00000014 os_set_env
00011efe g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h63142b18dacbc787E
2000deac g     O .bss	00000004 g_os_last_ctx_sw_time
00013314 g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
0001a630 g     F .text	00000048 console_printf
0001332a g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
0000ad74 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
000129c8 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
000131d4 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
00017e64 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
0001ca94 g     F .text	00000006 os_arch_init_task_stack
0001e868 g     F .text	00000010 mfg_open
00019f9c g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
0001e3c4 g     F .text	00000030 oc_ri_mem_init
000176d8 g     F .text	0000013c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E
0000f4d6 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h116a6636383259eeE
000097ee g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
0001d2d4 g     F .text	00000010 hal_bsp_flash_dev
0001e5a4 g     F .text	00000070 flash_map_init
2000dec0 g     O .bss	00000004 g_os_time
000155f2 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E
000106d2 g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17h09fa961dda8dcb87E
00016710 g     F .text	00000392 _ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E
0001cb32 g     F .text	0000001e os_default_irq_asm
0001b40c g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
0001b074 g     F .text	00000068 hal_spi_disable
00016d04 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E
00013370 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E
00009146 g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001e496 g     F .text	00000002 oc_register_lora
00019e08 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hc265973c39f711faE
0001bc78 g     F .text	000000a8 os_mbuf_append
0001e144 g     F .text	0000005c temp_stub_create
0001e924 g     F .text	00000054 hal_flash_read
0001a410 g     F .text	00000048 console_flush
000180a6 g     F .text	00000018 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE
00015654 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E
0001b660 g     F .text	0000001a os_start
00017936 g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E
0001d858 g     F .text	00000060 hal_timer_init
000121be g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
0001d250 g     F .text	00000010 rust_sysinit
00008164  w    F .text	00000002 I2S_IRQHandler
0001a540 g     F .text	00000010 console_printint
0001c50c g     F .text	0000002c os_sched_resort
000110c4 g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE
000291cc g     O .text	00000008 MemFile_methods
0001d224 g     F .text	00000018 fmemopen_w
000141c0 g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
0001aff0 g     F .text	00000038 hal_spi_config
0001eccc  w    F .text	00000002 .hidden __aeabi_ldiv0
0001bedc g     F .text	00000010 os_mempool_module_init
0001c4dc g     F .text	0000000c os_sched_next_task
00016ca8 g     F .text	0000001a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E
0000a89a g     F .text	00000010 _ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E
0000f0d6 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17hb4ffb829681b047bE
0001a82e g     F .text	00000034 hal_gpio_read
0001b6b4 g     F .text	0000001a os_callout_init
0001bfb8 g     F .text	00000010 os_msys_reset
0001d180 g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001e9d0 g     F .text	00000000 .hidden __aeabi_uldivmod
0001c870 g     F .text	00000038 os_gettimeofday
0001a5bc g     F .text	0000001e console_write
00011eb8 g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E
00018014 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
00019272 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
000098ea g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
0001b540 g     F .text	00000070 os_init_idle_task
0001c960 g     F .text	0000008c os_arch_os_init
00016222 g     F .text	000001b6 _ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE
0000942a g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
0001b5b0 g     F .text	000000b0 os_init
2000de98 g     O .bss	00000008 g_os_mempool_list
000098e0 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
0000a8aa g     F .text	0000001e _ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE
000129de g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
0001a5b8 g     F .text	00000004 semihosting_console_init
0001e802 g     F .text	0000001a mfg_seek_next_with_type
0001c0f0 g     F .text	000000e0 os_mutex_pend
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0001a80c g     F .text	00000022 hal_gpio_write
00008600 g     F .text	00000014 _start
00012ac0 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
00012b28 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001e8c8 g     F .text	00000014 __wrap_coap_receive
00017e94 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000ddbc g     O .bss	00000001 sysinit_active
0000afc0 g     F .text	00000108 _ZN8libchip814Chip8$LT$T$GT$3new17hca880a1e3fbd9a67E
000133ec g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
0001531e g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
0001d1f4 g     F .text	0000002e memfile_write
0001eccc  w    F .text	00000002 .hidden __aeabi_idiv0
00016e22 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE
0001b534 g     F .text	0000000c os_started
00016aa2 g     F .text	0000000a .hidden _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE
0000af7a g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE
0001e39c g     F .text	00000028 oc_buffer_init
0001514a g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
0000940e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000dea0 g     O .bss	0000000c g_os_sanity_check_mu
000091b8 g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
000179c4 g     F .text	00000042 _ZN4core3ptr4read17h9c6a8e2989f962ccE
0000f0e6 g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E
0001ecd0 g     F .text	00000006 __aeabi_memclr
0001ecdc g     F .text	0000009a __aeabi_memset4
0000f1f4 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E
00013554 g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
0001927a g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
000180be g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E
00013340 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E
0001c808 g     F .text	00000040 os_time_advance
0001b028 g     F .text	0000004c hal_spi_enable
0001e830 g     F .text	00000038 mfg_init
00014c6a g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
000089ee g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc4148eaa15af1e8eE
2000de38 g     O .bss	00000050 g_os_main_task
0001ecdc g     F .text	0000009a __aeabi_memset8
00019d4a g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
0000f9c2 g     F .text	000000d4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE
00008c74 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
0002940c g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20000148 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
000188bc g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
00008c02 g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
0001a2b0 g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
0001a6a4 g     F .text	00000034 NVIC_Relocate
00017868 g     F .text	0000009e _ZN4core3cmp6min_by17hbd80813895a56a69E
0001a68c g     F .text	0000000c sysinit_start
00016e0a g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E
00016e3a g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE
000291d8 g     O .text	00000018 nrf52k_flash_dev
0001d8b8 g     F .text	000000f8 hal_timer_config
000155da g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E
000153f4 g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
0001d1e0 g     F .text	00000014 vprintf
00009098 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
0001a458 g     F .text	00000008 disable_buffer
00017cda g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E
2000de88 g     O .bss	00000004 g_os_started
00018524 g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
0001559a g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E
20000144 g       .bssnz	00000000 __bssnz_end__
0001b93c g     F .text	00000020 os_dev_lookup
0001613c g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E
00009310 g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
0001b39c g     F .text	00000010 hal_watchdog_enable
2000dec4 g     O .bss	0000000c g_hal_os_tick
00017c4c g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E
0001c8f8 g     F .text	00000006 os_arch_restore_sr
0001b70c g     F .text	00000078 os_callout_reset
000098f4 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001e81c g     F .text	0000000a mfg_read_tlv_flash_area
0001338c g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
00016df4 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E
0001bb44 g     F .text	00000012 os_mqueue_init
00012598 g     F .text	00000052 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE
00017ef4 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
00015e02 g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0001e1e6 g     F .text	0000000e temp_stub_default_cfg
000133c0 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E
0000fc10 g     F .text	000000f6 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E
00008020 g       .imghdr	00000000 __text
0001b6d0 g     F .text	0000003c os_callout_stop
00008908 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E
00015da0 g     F .text	00000062 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E
000081c0 g     F .text	0000004c hal_system_clock_start
0001bc40 g     F .text	00000024 os_mbuf_free_chain
000091e4 g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
0001d260 g     F .text	00000030 mem_init_mbuf_pool
000133e4 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
00011f06 g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E
0001331e g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
00017c5e g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E
0001ab0c g     F .text	00000128 hal_i2c_master_write
0000b11e g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E
0001619c g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E
00008164  w    F .text	00000002 QDEC_IRQHandler
0000f534 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE
0000af90 g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00013536 g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
0001279c g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
00016ba0 g     F .text	0000001a _ZN4core5slice14from_raw_parts17h1425df913744b73aE
00012028 g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E
0001bb3c g     F .text	00000008 os_eventq_dflt_get
0001dd0c g     F .text	00000018 sensor_lock
00011e1e g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE
00012156 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
0001a5e4 g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
0001bc64 g     F .text	00000014 os_mbuf_len
0001bc2c g     F .text	00000014 os_mbuf_free
000163d8 g     F .text	0000005e _ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E
00015730 g     F .text	000000ae _ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E
000129b2 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
00012f74 g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
0000b170 g     F .text	00003b40 _ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE
0001a5da g     F .text	00000008 console_blocking_mode
00016216 g     F .text	0000000c _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E
0000a8e0 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
00009dcc g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
0001216a g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0001da54 g     F .text	00000010 nrf52_periph_create
00016af4 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E
0001c240 g     F .text	0000006c os_sanity_run
0000841c g     F .text	00000010 SystemCoreClockUpdate
0000f4ba g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E
000151e6 g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
00015458 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
00018168 g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE
0000ef98 g     F .text	0000007e _ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E
0001be50 g     F .text	00000014 os_mempool_init
000291d4 g     O .text	00000004 stdout
000120c0 g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h27d5684c70bb37e8E
0000aed4 g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
0001b910 g     F .text	0000002c os_dev_initialize_all
00008d98 g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
0000fb30 g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E
0001557a g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E
00017c88 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
0001b4a4 g     F .text	00000078 os_idle_task
00008e4c g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
00017dca g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
0000a824 g     F .text	0000001e _ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE
00018092 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E
00009bea g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
0000fa96 g     F .text	0000009a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE
00018f70 g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001e53c g     F .text	00000040 flash_area_open
00016cc2 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E
00016aea g     F .text	0000000a _ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E
000154a0 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE
00008164 g     F .text	00000002 Default_Handler
00018522 g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
0000f3e0 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E
00009336 g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
0001bf28 g     F .text	0000004c os_msys_register
00016cea g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE
000091ee g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000d9b0 g     O .bss	00000004 g_os_sanity_check_list
0000acd8 g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
00012afe g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
000126d8 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
0001b0dc g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001dc48 g     F .text	00000010 sensor_mgr_unlock
2000df80 g     O .bss	00000004 flash_map_entries
00019c8e g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
00017dd4 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
00015b62 g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE
0001e498 g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
0001609c g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
0000a90c g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
000151ca g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE
00015844 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E
00008164  w    F .text	00000002 GPIOTE_IRQHandler
00012c78 g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001e7f0 g     F .text	00000012 mfg_seek_next
00015e54 g     F .text	0000004a _ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E
0001610c g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E
00012f7e g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
0001586e g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE
2000011c g     O .data	00000008 g_os_sleep_list
00018ce0 g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
0001bbba g     F .text	0000000a os_mbuf_pool_init
2000de90 g     O .bss	00000008 g_callout_list
0001c34c g     F .text	0000000c os_sched_set_current_task
0001b784 g     F .text	0000005c os_callout_tick
0000f016 g     F .text	000000c0 _ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE
0000920a g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
00012be0 g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
0001807c g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E
0000f3be g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E
0001b324 g     F .text	00000078 hal_watchdog_init
2000deb4 g     O .bss	00000001 g_task_id
0001a072 g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
0000a8c8 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
0001b95c g     F .text	00000044 os_dev_open
2000deb0 g     O .bss	00000004 g_current_task
000182f0 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
00017d46 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
00008c68 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
0001ade0 g     F .text	00000018 nrf52_spi0_irq_handler
0001dd04 g     F .text	00000008 sensor_pkg_init
0001e318 g     F .text	00000028 temp_stub_config
0001bb7c g     F .text	0000003e os_mqueue_put
0001a2b0 g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
0001b168 g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
0001791c g     F .text	0000001a _ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3601a500030acd5E
0001c340 g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
000131f0 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001e614 g     F .text	00000002 modlog_init
00015aec g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E
00016aac g     F .text	0000003e _ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE
0001b214 g     F .text	000000e0 hal_spi_txrx_noblock
0001849c g     F .text	00000038 _ZN4core6option13expect_failed17had6579abaad447b4E
00019282 g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
00009184 g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
00008fd6 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
0001c310 g     F .text	00000030 os_sched_ctx_sw_hook
0001dda4 g     F .text	0000002e sensor_mgr_register
000120e4 g     F .text	00000044 .hidden _ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE
000184d4 g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
0000f76a g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hd3173c320d2551cfE
00018b20 g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
00008154  w    F .text	00000002 NMI_Handler
00015132 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
0000f284 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE
00009286 g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
00018140 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E
00008e54 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
0001297a g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
0001bbc4 g     F .text	00000032 os_mbuf_get
2000deb8 g     O .bss	00000008 g_os_task_list
00008a58 g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
000187ea g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
0001d1a4 g     F .text	0000003a vsnprintf
00014008 g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
0000f4e8 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1647783578bb3807E
0001c038 g     F .text	000000b8 os_mutex_release
00012f86 g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
0000f45c g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E
00012d3a g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001dc58 g     F .text	0000000c sensor_mgr_evq_get
0001752c g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
00012adc g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
00015c7e g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE
2000de8c g     O .bss	00000004 g_os_idle_ctr
0001a7a8 g     F .text	0000002c hal_gpio_init_in
00012a78 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
00009a16 g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
0001da64 g     F .text	00000002 sensor_dev_create
0000aee2 g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E
000125ea g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
00008a0c g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
0001a7d4 g     F .text	00000038 hal_gpio_init_out
0000f774 g     F .text	00000042 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E
00008e76 g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
0001270c g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
00018074 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E
00016c9e g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E
0000950a g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
0001c7fc g     F .text	0000000c os_time_get
00018524 g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
0000a780 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
0001beb4 g     F .text	00000026 os_memblock_put
00014098 g     F .text	00000128 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
0001c358 g     F .text	00000090 os_sched_sleep
00012ab6 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001dc2c g     F .text	0000001c sensor_mgr_lock
0001ea00 g     F .text	000002cc .hidden __udivmoddi4
00012176 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
0001d5dc g     F .text	000000a0 os_tick_init
000153a2 g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
0001851e g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
000090f8 g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
0001c49c g     F .text	00000040 os_sched_wakeup_ticks
00009446 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001d9b0 g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
0001a8dc g     F .text	00000028 hal_gpio_irq_enable
0001e3f4 g     F .text	0000000c oc_evq_set
0001df74 g     F .text	00000018 is_sensor_node
00019c8e g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
0001e46c g     F .text	00000024 oc_init
00019ec6 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
00019ec6 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
00009824 g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
0001945e g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
0000af10 g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E
00017e34 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E
2000df48 g     O .bss	00000018 sensor_base_ts
0001a1bc g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
00017b22 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E
0002940c g       .ARM.exidx	00000000 __etext
00019d4a g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
000175d2 g     F .text	00000106 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E
0001a678 g     F .text	0000000c console_get_ticks
0000ecd4 g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6a25aae91f88a8abE
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0000913c g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
0000f22e g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E
00011e58 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE
20000108 g     O .data	00000004 hal_twi_i2c1
0000ed94 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE
00015960 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E
0001c67c g     F .text	000000d8 os_task_init
00016e4e g     F .text	0000000a _ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E
00009070 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
000126be g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
00012aa6 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
00018182 g     F .text	00000042 _ZN4core3ptr4read17h27a035d1812d8297E
00017fe4 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
00011e90 g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE
0001c548 g     F .text	00000064 os_sem_release
0000f310 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E
0001ecdc g     F .text	0000009a __aeabi_memset
0000f366 g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE
0001bd20 g     F .text	000000b8 os_mbuf_dup
0001cae0 g     F .text	00000046 PendSV_Handler
000133d0 g     F .text	00000014 _ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E
0001ca9a g     F .text	00000046 SVC_Handler
000089f8 g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E
0001c8ec g     F .text	0000000c os_arch_save_sr
000155ba g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E
00008164  w    F .text	00000002 PWM2_IRQHandler
0000815c  w    F .text	00000002 UsageFault_Handler
0001d848 g     F .text	00000010 nrf52_timer0_irq_handler
0001c908 g     F .text	00000040 os_arch_task_stack_init
2000df88 g       .bss	00000000 __bss_end__
0001be64 g     F .text	00000032 os_memblock_get
0000f508 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E
2000df84 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
000127d6 g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
0001224a g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
0001b3ac g     F .text	00000014 hal_watchdog_tickle
0000a814 g     F .text	00000010 _ZN4core3ptr13drop_in_place17h0697ea54608a328fE
000160ac g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE
0001ba6a g     F .text	0000007a os_eventq_get
0001e9b0 g     F .text	00000020 sprintf
0001c8a8 g     F .text	00000026 os_time_ms_to_ticks
00008a1c g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
00018078 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E
0000ad3e g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000d9e8 g     O .bss	00000004 os_flags
0001e49c g     F .text	00000028 oc_rep_init
0001cbac g     F .text	0000001a memcpy
0001d290 g     F .text	00000044 sysinit_app
00016bd4 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE
00012d22 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E
00017e04 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
0001a0ec g     F .text	000000d0 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E
00014c7a g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
000132a2 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
0001a57c g     F .text	0000003c console_out_nolock
2000df60 g     O .bss	00000020 oc_transports
0001a864 g     F .text	00000078 hal_gpio_irq_init
000156c4 g     F .text	00000020 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE
0000f13a g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E
0001cc1a g     F .text	00000010 strlen
0001c5ac g     F .text	000000b8 os_sem_pend
000120ac g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he2e30225e051e80dE
0001232a g     F .text	00000016 _ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE
0001d544 g     F .text	00000098 os_tick_idle
000132e8 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00011ed2 g     F .text	00000012 _ZN4core3mem4swap17h21afb25e2d195463E
00000000 g       .svc_table	00000000 SVC_Table
0001345a g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
00016bba g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E
2000fe50 g       *ABS*	00000000 __HeapLimit
0001b67c g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
000094b6 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
00012678 g     F .text	00000012 _ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E
0000a7d4 g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
00015e9e g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
00014fe6 g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
00008158  w    F .text	00000002 MemoryManagement_Handler
00019ec6 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
00015264 g     F .text	000000ba _ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE
0001ba02 g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
00015c2c g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E
00009a4c g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
000124f4 g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
00015b3e g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE
0001e826 g     F .text	0000000a mfg_read_tlv_mmr_ref
00008c50 g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
0001e034 g     F .text	000000c0 sensor_network_init
00019ec6 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
00017a06 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
00008cfc g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
00013358 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0001ca9b 	.word	0x0001ca9b
	...
    8058:	0001cae1 	.word	0x0001cae1
    805c:	0001cb27 	.word	0x0001cb27
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000df88 	.word	0x2000df88
    ldr    r1, =__etext
    8138:	0002940c 	.word	0x0002940c
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000df88 	.word	0x2000df88
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f012 f899 	bl	1a6a4 <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f012 ffd4 	bl	1b5b0 <os_init>
    os_start();
    8608:	f013 f82a 	bl	1b660 <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f000 f9f8 	bl	8a0c <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f000 ffb5 	bl	958c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f64e 5176 	movw	r1, #60790	; 0xed76
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f64e 53ac 	movw	r3, #60844	; 0xedac
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f000 fae2 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f008 fd40 	bl	110c4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f64e 517e 	movw	r1, #60798	; 0xed7e
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f64e 53bc 	movw	r3, #60860	; 0xedbc
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f000 fad1 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f006 ff7d 	bl	f560 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f64e 51cc 	movw	r1, #60876	; 0xedcc
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f64e 53d8 	movw	r3, #60888	; 0xedd8
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f000 fac0 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f000 fb76 	bl	8d78 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f64e 5186 	movw	r1, #60806	; 0xed86
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f64e 53e8 	movw	r3, #60904	; 0xede8
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f006 fd20 	bl	f0e6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f000 fb5b 	bl	8d66 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f64e 518e 	movw	r1, #60814	; 0xed8e
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f64e 53f8 	movw	r3, #60920	; 0xedf8
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f000 fa9b 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f64e 6108 	movw	r1, #60936	; 0xee08
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f000 fd08 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00f ff17 	bl	1851e <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f64e 600e 	movw	r0, #60942	; 0xee0e
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f000 fcf7 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00f ff07 	bl	18524 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00f ff05 	bl	1852c <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f64e 6015 	movw	r0, #60949	; 0xee15
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f000 fce0 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f000 fd02 	bl	9146 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f64e 6018 	movw	r0, #60952	; 0xee18
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f000 fcd3 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f000 fd0d 	bl	9174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f64e 601e 	movw	r0, #60958	; 0xee1e
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f000 fcc7 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f000 fd0a 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f000 fd06 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00f fecf 	bl	18524 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f002 fbf3 	bl	af7a <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f64e 6120 	movw	r1, #60960	; 0xee20
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f000 f903 	bl	89ac <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f000 fca1 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f64e 601e 	movw	r0, #60958	; 0xee1e
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f000 fc99 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f000 fcdc 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE>:
    87d2:	b580      	push	{r7, lr}
    87d4:	b08a      	sub	sp, #40	; 0x28
    87d6:	9104      	str	r1, [sp, #16]
    87d8:	9205      	str	r2, [sp, #20]
    87da:	9308      	str	r3, [sp, #32]
    87dc:	2100      	movs	r1, #0
    87de:	f88d 101e 	strb.w	r1, [sp, #30]
    87e2:	f88d 101f 	strb.w	r1, [sp, #31]
    87e6:	2101      	movs	r1, #1
    87e8:	f88d 101f 	strb.w	r1, [sp, #31]
    87ec:	f88d 101e 	strb.w	r1, [sp, #30]
    87f0:	9904      	ldr	r1, [sp, #16]
    87f2:	2900      	cmp	r1, #0
    87f4:	9303      	str	r3, [sp, #12]
    87f6:	9002      	str	r0, [sp, #8]
    87f8:	d001      	beq.n	87fe <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x2c>
    87fa:	e7ff      	b.n	87fc <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x2a>
    87fc:	e004      	b.n	8808 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x36>
    87fe:	2000      	movs	r0, #0
    8800:	9902      	ldr	r1, [sp, #8]
    8802:	6008      	str	r0, [r1, #0]
    8804:	e01f      	b.n	8846 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x74>
    8806:	defe      	udf	#254	; 0xfe
    8808:	2000      	movs	r0, #0
    880a:	f88d 001f 	strb.w	r0, [sp, #31]
    880e:	9905      	ldr	r1, [sp, #20]
    8810:	9109      	str	r1, [sp, #36]	; 0x24
    8812:	f88d 001e 	strb.w	r0, [sp, #30]
    8816:	9106      	str	r1, [sp, #24]
    8818:	9906      	ldr	r1, [sp, #24]
    881a:	9803      	ldr	r0, [sp, #12]
    881c:	f002 fbc2 	bl	afa4 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E>
    8820:	9001      	str	r0, [sp, #4]
    8822:	9100      	str	r1, [sp, #0]
    8824:	e7ff      	b.n	8826 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x54>
    8826:	9801      	ldr	r0, [sp, #4]
    8828:	9902      	ldr	r1, [sp, #8]
    882a:	6048      	str	r0, [r1, #4]
    882c:	9a00      	ldr	r2, [sp, #0]
    882e:	608a      	str	r2, [r1, #8]
    8830:	2301      	movs	r3, #1
    8832:	600b      	str	r3, [r1, #0]
    8834:	e007      	b.n	8846 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x74>
    8836:	9804      	ldr	r0, [sp, #16]
    8838:	2801      	cmp	r0, #1
    883a:	d00c      	beq.n	8856 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x84>
    883c:	e015      	b.n	886a <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x98>
    883e:	2000      	movs	r0, #0
    8840:	f88d 001e 	strb.w	r0, [sp, #30]
    8844:	e7f7      	b.n	8836 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x64>
    8846:	f89d 001e 	ldrb.w	r0, [sp, #30]
    884a:	07c0      	lsls	r0, r0, #31
    884c:	2800      	cmp	r0, #0
    884e:	d1f6      	bne.n	883e <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x6c>
    8850:	e7f1      	b.n	8836 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x64>
    8852:	b00a      	add	sp, #40	; 0x28
    8854:	bd80      	pop	{r7, pc}
    8856:	f89d 001f 	ldrb.w	r0, [sp, #31]
    885a:	07c0      	lsls	r0, r0, #31
    885c:	2800      	cmp	r0, #0
    885e:	d0f8      	beq.n	8852 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x80>
    8860:	e7ff      	b.n	8862 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x90>
    8862:	2000      	movs	r0, #0
    8864:	f88d 001f 	strb.w	r0, [sp, #31]
    8868:	e7f3      	b.n	8852 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x80>
    886a:	e7f2      	b.n	8852 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x80>

0000886c <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE>:
    886c:	b580      	push	{r7, lr}
    886e:	b08c      	sub	sp, #48	; 0x30
    8870:	9103      	str	r1, [sp, #12]
    8872:	9204      	str	r2, [sp, #16]
    8874:	930a      	str	r3, [sp, #40]	; 0x28
    8876:	2100      	movs	r1, #0
    8878:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    887c:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    8880:	2101      	movs	r1, #1
    8882:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    8886:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    888a:	9903      	ldr	r1, [sp, #12]
    888c:	2900      	cmp	r1, #0
    888e:	9302      	str	r3, [sp, #8]
    8890:	9001      	str	r0, [sp, #4]
    8892:	d001      	beq.n	8898 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x2c>
    8894:	e7ff      	b.n	8896 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x2a>
    8896:	e004      	b.n	88a2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x36>
    8898:	2000      	movs	r0, #0
    889a:	9901      	ldr	r1, [sp, #4]
    889c:	6008      	str	r0, [r1, #0]
    889e:	e020      	b.n	88e2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x76>
    88a0:	defe      	udf	#254	; 0xfe
    88a2:	2000      	movs	r0, #0
    88a4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    88a8:	9904      	ldr	r1, [sp, #16]
    88aa:	910b      	str	r1, [sp, #44]	; 0x2c
    88ac:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    88b0:	9108      	str	r1, [sp, #32]
    88b2:	9a08      	ldr	r2, [sp, #32]
    88b4:	a805      	add	r0, sp, #20
    88b6:	9902      	ldr	r1, [sp, #8]
    88b8:	f002 fb6a 	bl	af90 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE>
    88bc:	e7ff      	b.n	88be <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x52>
    88be:	9805      	ldr	r0, [sp, #20]
    88c0:	9906      	ldr	r1, [sp, #24]
    88c2:	9a07      	ldr	r2, [sp, #28]
    88c4:	9b01      	ldr	r3, [sp, #4]
    88c6:	60da      	str	r2, [r3, #12]
    88c8:	6099      	str	r1, [r3, #8]
    88ca:	6058      	str	r0, [r3, #4]
    88cc:	2001      	movs	r0, #1
    88ce:	6018      	str	r0, [r3, #0]
    88d0:	e007      	b.n	88e2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x76>
    88d2:	9803      	ldr	r0, [sp, #12]
    88d4:	2801      	cmp	r0, #1
    88d6:	d00c      	beq.n	88f2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x86>
    88d8:	e015      	b.n	8906 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x9a>
    88da:	2000      	movs	r0, #0
    88dc:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    88e0:	e7f7      	b.n	88d2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x66>
    88e2:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    88e6:	07c0      	lsls	r0, r0, #31
    88e8:	2800      	cmp	r0, #0
    88ea:	d1f6      	bne.n	88da <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x6e>
    88ec:	e7f1      	b.n	88d2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x66>
    88ee:	b00c      	add	sp, #48	; 0x30
    88f0:	bd80      	pop	{r7, pc}
    88f2:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    88f6:	07c0      	lsls	r0, r0, #31
    88f8:	2800      	cmp	r0, #0
    88fa:	d0f8      	beq.n	88ee <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x82>
    88fc:	e7ff      	b.n	88fe <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x92>
    88fe:	2000      	movs	r0, #0
    8900:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    8904:	e7f3      	b.n	88ee <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x82>
    8906:	e7f2      	b.n	88ee <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x82>

00008908 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E>:
    8908:	b085      	sub	sp, #20
    890a:	9000      	str	r0, [sp, #0]
    890c:	2000      	movs	r0, #0
    890e:	f88d 000b 	strb.w	r0, [sp, #11]
    8912:	f88d 000a 	strb.w	r0, [sp, #10]
    8916:	2001      	movs	r0, #1
    8918:	f88d 000b 	strb.w	r0, [sp, #11]
    891c:	f88d 000a 	strb.w	r0, [sp, #10]
    8920:	9800      	ldr	r0, [sp, #0]
    8922:	2800      	cmp	r0, #0
    8924:	4601      	mov	r1, r0
    8926:	bf18      	it	ne
    8928:	2101      	movne	r1, #1
    892a:	2800      	cmp	r0, #0
    892c:	d001      	beq.n	8932 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x2a>
    892e:	e7ff      	b.n	8930 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x28>
    8930:	e005      	b.n	893e <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x36>
    8932:	2000      	movs	r0, #0
    8934:	f88d 000a 	strb.w	r0, [sp, #10]
    8938:	9001      	str	r0, [sp, #4]
    893a:	e007      	b.n	894c <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x44>
    893c:	defe      	udf	#254	; 0xfe
    893e:	2000      	movs	r0, #0
    8940:	f88d 000b 	strb.w	r0, [sp, #11]
    8944:	9800      	ldr	r0, [sp, #0]
    8946:	9004      	str	r0, [sp, #16]
    8948:	9001      	str	r0, [sp, #4]
    894a:	e7ff      	b.n	894c <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x44>
    894c:	f89d 000a 	ldrb.w	r0, [sp, #10]
    8950:	07c0      	lsls	r0, r0, #31
    8952:	2800      	cmp	r0, #0
    8954:	d104      	bne.n	8960 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x58>
    8956:	e7ff      	b.n	8958 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x50>
    8958:	9800      	ldr	r0, [sp, #0]
    895a:	2800      	cmp	r0, #0
    895c:	d107      	bne.n	896e <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x66>
    895e:	e010      	b.n	8982 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x7a>
    8960:	2000      	movs	r0, #0
    8962:	f88d 000a 	strb.w	r0, [sp, #10]
    8966:	e7f7      	b.n	8958 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x50>
    8968:	9801      	ldr	r0, [sp, #4]
    896a:	b005      	add	sp, #20
    896c:	4770      	bx	lr
    896e:	f89d 000b 	ldrb.w	r0, [sp, #11]
    8972:	07c0      	lsls	r0, r0, #31
    8974:	2800      	cmp	r0, #0
    8976:	d0f7      	beq.n	8968 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x60>
    8978:	e7ff      	b.n	897a <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x72>
    897a:	2000      	movs	r0, #0
    897c:	f88d 000b 	strb.w	r0, [sp, #11]
    8980:	e7f2      	b.n	8968 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x60>
    8982:	e7f1      	b.n	8968 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x60>

00008984 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E>:
    8984:	b084      	sub	sp, #16
    8986:	9002      	str	r0, [sp, #8]
    8988:	6801      	ldr	r1, [r0, #0]
    898a:	2900      	cmp	r1, #0
    898c:	9000      	str	r0, [sp, #0]
    898e:	d001      	beq.n	8994 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x10>
    8990:	e7ff      	b.n	8992 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0xe>
    8992:	e003      	b.n	899c <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x18>
    8994:	2000      	movs	r0, #0
    8996:	9001      	str	r0, [sp, #4]
    8998:	e005      	b.n	89a6 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x22>
    899a:	defe      	udf	#254	; 0xfe
    899c:	9800      	ldr	r0, [sp, #0]
    899e:	1d01      	adds	r1, r0, #4
    89a0:	9103      	str	r1, [sp, #12]
    89a2:	9101      	str	r1, [sp, #4]
    89a4:	e7ff      	b.n	89a6 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x22>
    89a6:	9801      	ldr	r0, [sp, #4]
    89a8:	b004      	add	sp, #16
    89aa:	4770      	bx	lr

000089ac <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E>:
    89ac:	b084      	sub	sp, #16
    89ae:	9002      	str	r0, [sp, #8]
    89b0:	9802      	ldr	r0, [sp, #8]
    89b2:	2800      	cmp	r0, #0
    89b4:	4602      	mov	r2, r0
    89b6:	bf18      	it	ne
    89b8:	2201      	movne	r2, #1
    89ba:	2800      	cmp	r0, #0
    89bc:	9101      	str	r1, [sp, #4]
    89be:	d001      	beq.n	89c4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x18>
    89c0:	e7ff      	b.n	89c2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x16>
    89c2:	e009      	b.n	89d8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x2c>
    89c4:	f64e 6030 	movw	r0, #60976	; 0xee30
    89c8:	f2c0 0001 	movt	r0, #1
    89cc:	212b      	movs	r1, #43	; 0x2b
    89ce:	9a01      	ldr	r2, [sp, #4]
    89d0:	f00f fdae 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    89d4:	defe      	udf	#254	; 0xfe
    89d6:	defe      	udf	#254	; 0xfe
    89d8:	9802      	ldr	r0, [sp, #8]
    89da:	9003      	str	r0, [sp, #12]
    89dc:	9902      	ldr	r1, [sp, #8]
    89de:	2900      	cmp	r1, #0
    89e0:	9000      	str	r0, [sp, #0]
    89e2:	d003      	beq.n	89ec <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x40>
    89e4:	e7ff      	b.n	89e6 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x3a>
    89e6:	9800      	ldr	r0, [sp, #0]
    89e8:	b004      	add	sp, #16
    89ea:	4770      	bx	lr
    89ec:	e7fb      	b.n	89e6 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x3a>

000089ee <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc4148eaa15af1e8eE>:
    89ee:	b081      	sub	sp, #4
    89f0:	2100      	movs	r1, #0
    89f2:	6001      	str	r1, [r0, #0]
    89f4:	b001      	add	sp, #4
    89f6:	4770      	bx	lr

000089f8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E>:
    89f8:	b580      	push	{r7, lr}
    89fa:	b082      	sub	sp, #8
    89fc:	9001      	str	r0, [sp, #4]
    89fe:	f7ff ff83 	bl	8908 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E>
    8a02:	9000      	str	r0, [sp, #0]
    8a04:	e7ff      	b.n	8a06 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E+0xe>
    8a06:	9800      	ldr	r0, [sp, #0]
    8a08:	b002      	add	sp, #8
    8a0a:	bd80      	pop	{r7, pc}

00008a0c <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    8a0c:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    8a0e:	f014 fc1f 	bl	1d250 <rust_sysinit>
    8a12:	e7ff      	b.n	8a14 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    8a14:	f000 fbb6 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8a18:	e7ff      	b.n	8a1a <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    8a1a:	bd80      	pop	{r7, pc}

00008a1c <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    8a1c:	b580      	push	{r7, lr}
    8a1e:	b086      	sub	sp, #24
    8a20:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    8a22:	7801      	ldrb	r1, [r0, #0]
    8a24:	07ca      	lsls	r2, r1, #31
    8a26:	2a00      	cmp	r2, #0
    8a28:	9000      	str	r0, [sp, #0]
    8a2a:	d006      	beq.n	8a3a <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    8a2c:	e7ff      	b.n	8a2e <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    8a2e:	9800      	ldr	r0, [sp, #0]
    8a30:	6841      	ldr	r1, [r0, #4]
    8a32:	9103      	str	r1, [sp, #12]
    8a34:	9101      	str	r1, [sp, #4]
        match self.rep {
    8a36:	e00c      	b.n	8a52 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    8a38:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    8a3a:	9800      	ldr	r0, [sp, #0]
    8a3c:	6841      	ldr	r1, [r0, #4]
    8a3e:	6882      	ldr	r2, [r0, #8]
    8a40:	9104      	str	r1, [sp, #16]
    8a42:	9205      	str	r2, [sp, #20]
    8a44:	4608      	mov	r0, r1
    8a46:	4611      	mov	r1, r2
    8a48:	f00a f835 	bl	12ab6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8a4c:	9001      	str	r0, [sp, #4]
    8a4e:	e7ff      	b.n	8a50 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    8a50:	e7ff      	b.n	8a52 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    8a52:	9801      	ldr	r0, [sp, #4]
    8a54:	b006      	add	sp, #24
    8a56:	bd80      	pop	{r7, pc}

00008a58 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    8a58:	b5b0      	push	{r4, r5, r7, lr}
    8a5a:	b0b2      	sub	sp, #200	; 0xc8
    8a5c:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    8a5e:	7801      	ldrb	r1, [r0, #0]
    8a60:	07ca      	lsls	r2, r1, #31
    8a62:	2a00      	cmp	r2, #0
    8a64:	900e      	str	r0, [sp, #56]	; 0x38
    8a66:	d005      	beq.n	8a74 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    8a68:	e7ff      	b.n	8a6a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    8a6a:	980e      	ldr	r0, [sp, #56]	; 0x38
    8a6c:	6841      	ldr	r1, [r0, #4]
    8a6e:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    8a70:	e096      	b.n	8ba0 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    8a72:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    8a74:	980e      	ldr	r0, [sp, #56]	; 0x38
    8a76:	6841      	ldr	r1, [r0, #4]
    8a78:	6882      	ldr	r2, [r0, #8]
    8a7a:	912b      	str	r1, [sp, #172]	; 0xac
    8a7c:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    8a7e:	4608      	mov	r0, r1
    8a80:	4611      	mov	r1, r2
    8a82:	f000 faba 	bl	8ffa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    8a86:	9011      	str	r0, [sp, #68]	; 0x44
    8a88:	e7ff      	b.n	8a8a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    8a8a:	f64e 6060 	movw	r0, #61024	; 0xee60
    8a8e:	f2c0 0001 	movt	r0, #1
    8a92:	6800      	ldr	r0, [r0, #0]
    8a94:	a911      	add	r1, sp, #68	; 0x44
    8a96:	910f      	str	r1, [sp, #60]	; 0x3c
    8a98:	9010      	str	r0, [sp, #64]	; 0x40
    8a9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8a9c:	902d      	str	r0, [sp, #180]	; 0xb4
    8a9e:	9910      	ldr	r1, [sp, #64]	; 0x40
    8aa0:	912e      	str	r1, [sp, #184]	; 0xb8
    8aa2:	900d      	str	r0, [sp, #52]	; 0x34
    8aa4:	910c      	str	r1, [sp, #48]	; 0x30
    8aa6:	f000 fc46 	bl	9336 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    8aaa:	900b      	str	r0, [sp, #44]	; 0x2c
    8aac:	e7ff      	b.n	8aae <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    8aae:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8ab0:	07c1      	lsls	r1, r0, #31
    8ab2:	2900      	cmp	r1, #0
    8ab4:	d001      	beq.n	8aba <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    8ab6:	e7ff      	b.n	8ab8 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    8ab8:	e072      	b.n	8ba0 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    8aba:	f64e 60b8 	movw	r0, #61112	; 0xeeb8
    8abe:	f2c0 0001 	movt	r0, #1
    8ac2:	6801      	ldr	r1, [r0, #0]
    8ac4:	980d      	ldr	r0, [sp, #52]	; 0x34
    8ac6:	9021      	str	r0, [sp, #132]	; 0x84
    8ac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8aca:	9222      	str	r2, [sp, #136]	; 0x88
    8acc:	f64e 63cc 	movw	r3, #61132	; 0xeecc
    8ad0:	f2c0 0301 	movt	r3, #1
    8ad4:	681b      	ldr	r3, [r3, #0]
    8ad6:	f64e 6cd0 	movw	ip, #61136	; 0xeed0
    8ada:	f2c0 0c01 	movt	ip, #1
    8ade:	f8dc c000 	ldr.w	ip, [ip]
    8ae2:	46ee      	mov	lr, sp
    8ae4:	2400      	movs	r4, #0
    8ae6:	f8ce 4000 	str.w	r4, [lr]
    8aea:	a823      	add	r0, sp, #140	; 0x8c
    8aec:	2201      	movs	r2, #1
    8aee:	910a      	str	r1, [sp, #40]	; 0x28
    8af0:	4619      	mov	r1, r3
    8af2:	4663      	mov	r3, ip
    8af4:	f000 f856 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8af8:	e7ff      	b.n	8afa <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    8afa:	a821      	add	r0, sp, #132	; 0x84
    8afc:	901e      	str	r0, [sp, #120]	; 0x78
    8afe:	a822      	add	r0, sp, #136	; 0x88
    8b00:	901f      	str	r0, [sp, #124]	; 0x7c
    8b02:	a823      	add	r0, sp, #140	; 0x8c
    8b04:	9020      	str	r0, [sp, #128]	; 0x80
    8b06:	981e      	ldr	r0, [sp, #120]	; 0x78
    8b08:	902f      	str	r0, [sp, #188]	; 0xbc
    8b0a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8b0c:	9130      	str	r1, [sp, #192]	; 0xc0
    8b0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    8b10:	9231      	str	r2, [sp, #196]	; 0xc4
    8b12:	f249 13ef 	movw	r3, #37359	; 0x91ef
    8b16:	f2c0 0300 	movt	r3, #0
    8b1a:	9109      	str	r1, [sp, #36]	; 0x24
    8b1c:	4619      	mov	r1, r3
    8b1e:	9208      	str	r2, [sp, #32]
    8b20:	f000 fcb4 	bl	948c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8b24:	9007      	str	r0, [sp, #28]
    8b26:	9106      	str	r1, [sp, #24]
    8b28:	e7ff      	b.n	8b2a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    8b2a:	f249 11ef 	movw	r1, #37359	; 0x91ef
    8b2e:	f2c0 0100 	movt	r1, #0
    8b32:	9809      	ldr	r0, [sp, #36]	; 0x24
    8b34:	f000 fcaa 	bl	948c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8b38:	9005      	str	r0, [sp, #20]
    8b3a:	9104      	str	r1, [sp, #16]
    8b3c:	e7ff      	b.n	8b3e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    8b3e:	f648 21ff 	movw	r1, #35583	; 0x8aff
    8b42:	f2c0 0101 	movt	r1, #1
    8b46:	9808      	ldr	r0, [sp, #32]
    8b48:	f000 fcca 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8b4c:	9003      	str	r0, [sp, #12]
    8b4e:	9102      	str	r1, [sp, #8]
    8b50:	e7ff      	b.n	8b52 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    8b52:	9807      	ldr	r0, [sp, #28]
    8b54:	9018      	str	r0, [sp, #96]	; 0x60
    8b56:	9906      	ldr	r1, [sp, #24]
    8b58:	9119      	str	r1, [sp, #100]	; 0x64
    8b5a:	9a05      	ldr	r2, [sp, #20]
    8b5c:	921a      	str	r2, [sp, #104]	; 0x68
    8b5e:	9b04      	ldr	r3, [sp, #16]
    8b60:	931b      	str	r3, [sp, #108]	; 0x6c
    8b62:	f8dd c00c 	ldr.w	ip, [sp, #12]
    8b66:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    8b6a:	f8dd e008 	ldr.w	lr, [sp, #8]
    8b6e:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    8b72:	466c      	mov	r4, sp
    8b74:	2503      	movs	r5, #3
    8b76:	6025      	str	r5, [r4, #0]
    8b78:	a812      	add	r0, sp, #72	; 0x48
    8b7a:	ab18      	add	r3, sp, #96	; 0x60
    8b7c:	990a      	ldr	r1, [sp, #40]	; 0x28
    8b7e:	462a      	mov	r2, r5
    8b80:	f000 f810 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8b84:	e7ff      	b.n	8b86 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    8b86:	f64e 60ec 	movw	r0, #61164	; 0xeeec
    8b8a:	f2c0 0001 	movt	r0, #1
    8b8e:	f00f fcc8 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8b92:	9001      	str	r0, [sp, #4]
    8b94:	e7ff      	b.n	8b96 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    8b96:	a812      	add	r0, sp, #72	; 0x48
    8b98:	9901      	ldr	r1, [sp, #4]
    8b9a:	f00f fcff 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8b9e:	defe      	udf	#254	; 0xfe
    }
    8ba0:	b032      	add	sp, #200	; 0xc8
    8ba2:	bdb0      	pop	{r4, r5, r7, pc}

00008ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    8ba4:	b580      	push	{r7, lr}
    8ba6:	b086      	sub	sp, #24
    8ba8:	f8dd c020 	ldr.w	ip, [sp, #32]
    8bac:	9102      	str	r1, [sp, #8]
    8bae:	9203      	str	r2, [sp, #12]
    8bb0:	9304      	str	r3, [sp, #16]
    8bb2:	f8cd c014 	str.w	ip, [sp, #20]
    8bb6:	f04f 0e00 	mov.w	lr, #0
    8bba:	f8cd e004 	str.w	lr, [sp, #4]
    8bbe:	f8cd e000 	str.w	lr, [sp]
    8bc2:	f8cd e000 	str.w	lr, [sp]
    8bc6:	6001      	str	r1, [r0, #0]
    8bc8:	6042      	str	r2, [r0, #4]
    8bca:	9900      	ldr	r1, [sp, #0]
    8bcc:	9a01      	ldr	r2, [sp, #4]
    8bce:	6081      	str	r1, [r0, #8]
    8bd0:	60c2      	str	r2, [r0, #12]
    8bd2:	6103      	str	r3, [r0, #16]
    8bd4:	f8c0 c014 	str.w	ip, [r0, #20]
    8bd8:	b006      	add	sp, #24
    8bda:	bd80      	pop	{r7, pc}

00008bdc <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    8bdc:	b082      	sub	sp, #8
    8bde:	9001      	str	r0, [sp, #4]
    8be0:	7800      	ldrb	r0, [r0, #0]
    8be2:	07c0      	lsls	r0, r0, #31
    8be4:	2800      	cmp	r0, #0
    8be6:	d004      	beq.n	8bf2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    8be8:	e7ff      	b.n	8bea <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    8bea:	2000      	movs	r0, #0
    8bec:	f88d 0003 	strb.w	r0, [sp, #3]
    8bf0:	e003      	b.n	8bfa <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8bf2:	2001      	movs	r0, #1
    8bf4:	f88d 0003 	strb.w	r0, [sp, #3]
    8bf8:	e7ff      	b.n	8bfa <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8bfa:	f89d 0003 	ldrb.w	r0, [sp, #3]
    8bfe:	b002      	add	sp, #8
    8c00:	4770      	bx	lr

00008c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    8c02:	b08a      	sub	sp, #40	; 0x28
    8c04:	9005      	str	r0, [sp, #20]
    8c06:	9107      	str	r1, [sp, #28]
    8c08:	9208      	str	r2, [sp, #32]
    8c0a:	9805      	ldr	r0, [sp, #20]
    8c0c:	f1b0 0c01 	subs.w	ip, r0, #1
    8c10:	bf18      	it	ne
    8c12:	f04f 0c01 	movne.w	ip, #1
    8c16:	2801      	cmp	r0, #1
    8c18:	9304      	str	r3, [sp, #16]
    8c1a:	9203      	str	r2, [sp, #12]
    8c1c:	9102      	str	r1, [sp, #8]
    8c1e:	d010      	beq.n	8c42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    8c20:	e7ff      	b.n	8c22 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    8c22:	9805      	ldr	r0, [sp, #20]
    8c24:	9006      	str	r0, [sp, #24]
    8c26:	4668      	mov	r0, sp
    8c28:	9904      	ldr	r1, [sp, #16]
    8c2a:	6001      	str	r1, [r0, #0]
    8c2c:	f64e 63fc 	movw	r3, #61180	; 0xeefc
    8c30:	f2c0 0301 	movt	r3, #1
    8c34:	aa06      	add	r2, sp, #24
    8c36:	9802      	ldr	r0, [sp, #8]
    8c38:	9903      	ldr	r1, [sp, #12]
    8c3a:	f00f fc4b 	bl	184d4 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    8c3e:	defe      	udf	#254	; 0xfe
    8c40:	defe      	udf	#254	; 0xfe
    8c42:	9805      	ldr	r0, [sp, #20]
    8c44:	2801      	cmp	r0, #1
    8c46:	d102      	bne.n	8c4e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    8c48:	e7ff      	b.n	8c4a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    8c4a:	b00a      	add	sp, #40	; 0x28
    8c4c:	4770      	bx	lr
    8c4e:	e7fc      	b.n	8c4a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

00008c50 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    8c50:	b580      	push	{r7, lr}
    8c52:	b082      	sub	sp, #8
    8c54:	9001      	str	r0, [sp, #4]
    8c56:	f7ff ffc1 	bl	8bdc <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    8c5a:	9000      	str	r0, [sp, #0]
    8c5c:	e7ff      	b.n	8c5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    8c5e:	2001      	movs	r0, #1
    8c60:	9900      	ldr	r1, [sp, #0]
    8c62:	4388      	bics	r0, r1
    8c64:	b002      	add	sp, #8
    8c66:	bd80      	pop	{r7, pc}

00008c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    8c68:	b082      	sub	sp, #8
    8c6a:	9001      	str	r0, [sp, #4]
    8c6c:	9000      	str	r0, [sp, #0]
    8c6e:	9800      	ldr	r0, [sp, #0]
    8c70:	b002      	add	sp, #8
    8c72:	4770      	bx	lr

00008c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    8c74:	b081      	sub	sp, #4
    8c76:	4601      	mov	r1, r0
    8c78:	f88d 0003 	strb.w	r0, [sp, #3]
    8c7c:	b001      	add	sp, #4
    8c7e:	4770      	bx	lr

00008c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    8c80:	b081      	sub	sp, #4
    8c82:	9000      	str	r0, [sp, #0]
    8c84:	b001      	add	sp, #4
    8c86:	4770      	bx	lr

00008c88 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    8c88:	b580      	push	{r7, lr}
    8c8a:	b08a      	sub	sp, #40	; 0x28
    8c8c:	9007      	str	r0, [sp, #28]
    8c8e:	9108      	str	r1, [sp, #32]
    8c90:	9209      	str	r2, [sp, #36]	; 0x24
    8c92:	2300      	movs	r3, #0
    8c94:	9305      	str	r3, [sp, #20]
    8c96:	9006      	str	r0, [sp, #24]
    8c98:	9805      	ldr	r0, [sp, #20]
    8c9a:	9b06      	ldr	r3, [sp, #24]
    8c9c:	9104      	str	r1, [sp, #16]
    8c9e:	4619      	mov	r1, r3
    8ca0:	9b04      	ldr	r3, [sp, #16]
    8ca2:	9203      	str	r2, [sp, #12]
    8ca4:	461a      	mov	r2, r3
    8ca6:	9b03      	ldr	r3, [sp, #12]
    8ca8:	f000 f828 	bl	8cfc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    8cac:	9002      	str	r0, [sp, #8]
    8cae:	9101      	str	r1, [sp, #4]
    8cb0:	e7ff      	b.n	8cb2 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    8cb2:	9802      	ldr	r0, [sp, #8]
    8cb4:	9901      	ldr	r1, [sp, #4]
    8cb6:	b00a      	add	sp, #40	; 0x28
    8cb8:	bd80      	pop	{r7, pc}

00008cba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    8cba:	b580      	push	{r7, lr}
    8cbc:	b08a      	sub	sp, #40	; 0x28
    8cbe:	9006      	str	r0, [sp, #24]
    8cc0:	9107      	str	r1, [sp, #28]
    8cc2:	9208      	str	r2, [sp, #32]
    8cc4:	9309      	str	r3, [sp, #36]	; 0x24
    8cc6:	9005      	str	r0, [sp, #20]
    8cc8:	4610      	mov	r0, r2
    8cca:	9104      	str	r1, [sp, #16]
    8ccc:	4619      	mov	r1, r3
    8cce:	f009 fed3 	bl	12a78 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8cd2:	9003      	str	r0, [sp, #12]
    8cd4:	e7ff      	b.n	8cd6 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    8cd6:	9803      	ldr	r0, [sp, #12]
    8cd8:	9905      	ldr	r1, [sp, #20]
    8cda:	f009 fe54 	bl	12986 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    8cde:	9002      	str	r0, [sp, #8]
    8ce0:	e7ff      	b.n	8ce2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    8ce2:	9804      	ldr	r0, [sp, #16]
    8ce4:	9905      	ldr	r1, [sp, #20]
    8ce6:	1a41      	subs	r1, r0, r1
    8ce8:	9802      	ldr	r0, [sp, #8]
    8cea:	f000 f8b7 	bl	8e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    8cee:	9001      	str	r0, [sp, #4]
    8cf0:	9100      	str	r1, [sp, #0]
    8cf2:	e7ff      	b.n	8cf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    8cf4:	9801      	ldr	r0, [sp, #4]
    8cf6:	9900      	ldr	r1, [sp, #0]
    8cf8:	b00a      	add	sp, #40	; 0x28
    8cfa:	bd80      	pop	{r7, pc}

00008cfc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    8cfc:	b580      	push	{r7, lr}
    8cfe:	b08c      	sub	sp, #48	; 0x30
    8d00:	9008      	str	r0, [sp, #32]
    8d02:	9109      	str	r1, [sp, #36]	; 0x24
    8d04:	920a      	str	r2, [sp, #40]	; 0x28
    8d06:	930b      	str	r3, [sp, #44]	; 0x2c
    8d08:	4288      	cmp	r0, r1
    8d0a:	9307      	str	r3, [sp, #28]
    8d0c:	9206      	str	r2, [sp, #24]
    8d0e:	9105      	str	r1, [sp, #20]
    8d10:	9004      	str	r0, [sp, #16]
    8d12:	d806      	bhi.n	8d22 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    8d14:	e7ff      	b.n	8d16 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    8d16:	9806      	ldr	r0, [sp, #24]
    8d18:	9907      	ldr	r1, [sp, #28]
    8d1a:	f009 fec4 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d1e:	9003      	str	r0, [sp, #12]
    8d20:	e004      	b.n	8d2c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    8d22:	9804      	ldr	r0, [sp, #16]
    8d24:	9905      	ldr	r1, [sp, #20]
    8d26:	f010 fb78 	bl	1941a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    8d2a:	defe      	udf	#254	; 0xfe
    8d2c:	9805      	ldr	r0, [sp, #20]
    8d2e:	9903      	ldr	r1, [sp, #12]
    8d30:	4288      	cmp	r0, r1
    8d32:	d809      	bhi.n	8d48 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    8d34:	e7ff      	b.n	8d36 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    8d36:	9804      	ldr	r0, [sp, #16]
    8d38:	9905      	ldr	r1, [sp, #20]
    8d3a:	9a06      	ldr	r2, [sp, #24]
    8d3c:	9b07      	ldr	r3, [sp, #28]
    8d3e:	f7ff ffbc 	bl	8cba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    8d42:	9002      	str	r0, [sp, #8]
    8d44:	9101      	str	r1, [sp, #4]
    8d46:	e00a      	b.n	8d5e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    8d48:	9806      	ldr	r0, [sp, #24]
    8d4a:	9907      	ldr	r1, [sp, #28]
    8d4c:	f009 feab 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d50:	9000      	str	r0, [sp, #0]
    8d52:	e7ff      	b.n	8d54 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    8d54:	9805      	ldr	r0, [sp, #20]
    8d56:	9900      	ldr	r1, [sp, #0]
    8d58:	f010 fb3d 	bl	193d6 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    8d5c:	defe      	udf	#254	; 0xfe
    8d5e:	9802      	ldr	r0, [sp, #8]
    8d60:	9901      	ldr	r1, [sp, #4]
    8d62:	b00c      	add	sp, #48	; 0x30
    8d64:	bd80      	pop	{r7, pc}

00008d66 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8d66:	b580      	push	{r7, lr}
    8d68:	b082      	sub	sp, #8
    8d6a:	9001      	str	r0, [sp, #4]
    8d6c:	f012 feba 	bl	1bae4 <os_eventq_run>
    8d70:	e7ff      	b.n	8d72 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    8d72:	2001      	movs	r0, #1
    8d74:	b002      	add	sp, #8
    8d76:	bd80      	pop	{r7, pc}

00008d78 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8d78:	b580      	push	{r7, lr}
    8d7a:	b084      	sub	sp, #16
    8d7c:	9002      	str	r0, [sp, #8]
    8d7e:	f012 fedd 	bl	1bb3c <os_eventq_dflt_get>
    8d82:	4601      	mov	r1, r0
    8d84:	9003      	str	r0, [sp, #12]
    8d86:	9101      	str	r1, [sp, #4]
    8d88:	e7ff      	b.n	8d8a <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    8d8a:	9801      	ldr	r0, [sp, #4]
    8d8c:	9902      	ldr	r1, [sp, #8]
    8d8e:	6048      	str	r0, [r1, #4]
    8d90:	2200      	movs	r2, #0
    8d92:	600a      	str	r2, [r1, #0]
    8d94:	b004      	add	sp, #16
    8d96:	bd80      	pop	{r7, pc}

00008d98 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8d98:	b570      	push	{r4, r5, r6, lr}
    8d9a:	b09c      	sub	sp, #112	; 0x70
    8d9c:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    8da0:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    8da4:	9c22      	ldr	r4, [sp, #136]	; 0x88
    8da6:	9d21      	ldr	r5, [sp, #132]	; 0x84
    8da8:	9e20      	ldr	r6, [sp, #128]	; 0x80
    8daa:	9013      	str	r0, [sp, #76]	; 0x4c
    8dac:	9114      	str	r1, [sp, #80]	; 0x50
    8dae:	9215      	str	r2, [sp, #84]	; 0x54
    8db0:	9316      	str	r3, [sp, #88]	; 0x58
    8db2:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    8db6:	9418      	str	r4, [sp, #96]	; 0x60
    8db8:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    8dbc:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    8dc0:	9011      	str	r0, [sp, #68]	; 0x44
    8dc2:	4608      	mov	r0, r1
    8dc4:	9310      	str	r3, [sp, #64]	; 0x40
    8dc6:	920f      	str	r2, [sp, #60]	; 0x3c
    8dc8:	910e      	str	r1, [sp, #56]	; 0x38
    8dca:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    8dce:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    8dd2:	940b      	str	r4, [sp, #44]	; 0x2c
    8dd4:	950a      	str	r5, [sp, #40]	; 0x28
    8dd6:	9609      	str	r6, [sp, #36]	; 0x24
    8dd8:	f7ff fe3e 	bl	8a58 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    8ddc:	e7ff      	b.n	8dde <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    8dde:	980e      	ldr	r0, [sp, #56]	; 0x38
    8de0:	f7ff fe1c 	bl	8a1c <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    8de4:	9008      	str	r0, [sp, #32]
    8de6:	e7ff      	b.n	8de8 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    8de8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8dea:	990c      	ldr	r1, [sp, #48]	; 0x30
    8dec:	f000 f93b 	bl	9066 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    8df0:	9007      	str	r0, [sp, #28]
    8df2:	e7ff      	b.n	8df4 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    8df4:	980d      	ldr	r0, [sp, #52]	; 0x34
    8df6:	b281      	uxth	r1, r0
    8df8:	466a      	mov	r2, sp
    8dfa:	60d1      	str	r1, [r2, #12]
    8dfc:	9907      	ldr	r1, [sp, #28]
    8dfe:	6091      	str	r1, [r2, #8]
    8e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e02:	6053      	str	r3, [r2, #4]
    8e04:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    8e08:	fa5f fe8c 	uxtb.w	lr, ip
    8e0c:	f8c2 e000 	str.w	lr, [r2]
    8e10:	9811      	ldr	r0, [sp, #68]	; 0x44
    8e12:	9908      	ldr	r1, [sp, #32]
    8e14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8e16:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8e18:	f013 fc30 	bl	1c67c <os_task_init>
    8e1c:	4601      	mov	r1, r0
    8e1e:	901b      	str	r0, [sp, #108]	; 0x6c
    8e20:	9106      	str	r1, [sp, #24]
    8e22:	e7ff      	b.n	8e24 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    8e24:	9806      	ldr	r0, [sp, #24]
    8e26:	2800      	cmp	r0, #0
    8e28:	d005      	beq.n	8e36 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    8e2a:	e7ff      	b.n	8e2c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    8e2c:	9806      	ldr	r0, [sp, #24]
    8e2e:	f00a fa68 	bl	13302 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    8e32:	9005      	str	r0, [sp, #20]
    8e34:	e004      	b.n	8e40 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    8e36:	2000      	movs	r0, #0
    8e38:	9012      	str	r0, [sp, #72]	; 0x48
    8e3a:	2001      	movs	r0, #1
    8e3c:	9012      	str	r0, [sp, #72]	; 0x48
    8e3e:	e002      	b.n	8e46 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8e40:	9805      	ldr	r0, [sp, #20]
    8e42:	9012      	str	r0, [sp, #72]	; 0x48
    8e44:	e7ff      	b.n	8e46 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8e46:	9812      	ldr	r0, [sp, #72]	; 0x48
    8e48:	b01c      	add	sp, #112	; 0x70
    8e4a:	bd70      	pop	{r4, r5, r6, pc}

00008e4c <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    8e4c:	b081      	sub	sp, #4
    8e4e:	9000      	str	r0, [sp, #0]
    8e50:	b001      	add	sp, #4
    8e52:	4770      	bx	lr

00008e54 <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    8e54:	b081      	sub	sp, #4
    8e56:	9000      	str	r0, [sp, #0]
    8e58:	b001      	add	sp, #4
    8e5a:	4770      	bx	lr

00008e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    8e5c:	b580      	push	{r7, lr}
    8e5e:	b084      	sub	sp, #16
    8e60:	9002      	str	r0, [sp, #8]
    8e62:	9103      	str	r1, [sp, #12]
    8e64:	f000 f993 	bl	918e <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    8e68:	9001      	str	r0, [sp, #4]
    8e6a:	9100      	str	r1, [sp, #0]
    8e6c:	e7ff      	b.n	8e6e <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    8e6e:	9801      	ldr	r0, [sp, #4]
    8e70:	9900      	ldr	r1, [sp, #0]
    8e72:	b004      	add	sp, #16
    8e74:	bd80      	pop	{r7, pc}

00008e76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    8e76:	b5b0      	push	{r4, r5, r7, lr}
    8e78:	b0b8      	sub	sp, #224	; 0xe0
    8e7a:	902f      	str	r0, [sp, #188]	; 0xbc
    8e7c:	9130      	str	r1, [sp, #192]	; 0xc0
    8e7e:	9231      	str	r2, [sp, #196]	; 0xc4
    8e80:	9332      	str	r3, [sp, #200]	; 0xc8
    8e82:	9013      	str	r0, [sp, #76]	; 0x4c
    8e84:	9112      	str	r1, [sp, #72]	; 0x48
    8e86:	9311      	str	r3, [sp, #68]	; 0x44
    8e88:	9210      	str	r2, [sp, #64]	; 0x40
    8e8a:	f009 fe0c 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8e8e:	9016      	str	r0, [sp, #88]	; 0x58
    8e90:	e7ff      	b.n	8e92 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    8e92:	9810      	ldr	r0, [sp, #64]	; 0x40
    8e94:	9911      	ldr	r1, [sp, #68]	; 0x44
    8e96:	f009 fe06 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8e9a:	9017      	str	r0, [sp, #92]	; 0x5c
    8e9c:	e7ff      	b.n	8e9e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    8e9e:	a816      	add	r0, sp, #88	; 0x58
    8ea0:	9014      	str	r0, [sp, #80]	; 0x50
    8ea2:	a817      	add	r0, sp, #92	; 0x5c
    8ea4:	9015      	str	r0, [sp, #84]	; 0x54
    8ea6:	9814      	ldr	r0, [sp, #80]	; 0x50
    8ea8:	9033      	str	r0, [sp, #204]	; 0xcc
    8eaa:	9915      	ldr	r1, [sp, #84]	; 0x54
    8eac:	9134      	str	r1, [sp, #208]	; 0xd0
    8eae:	6802      	ldr	r2, [r0, #0]
    8eb0:	680b      	ldr	r3, [r1, #0]
    8eb2:	429a      	cmp	r2, r3
    8eb4:	900f      	str	r0, [sp, #60]	; 0x3c
    8eb6:	910e      	str	r1, [sp, #56]	; 0x38
    8eb8:	d106      	bne.n	8ec8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    8eba:	e7ff      	b.n	8ebc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    8ebc:	9810      	ldr	r0, [sp, #64]	; 0x40
    8ebe:	9911      	ldr	r1, [sp, #68]	; 0x44
    8ec0:	f009 fdf9 	bl	12ab6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8ec4:	900d      	str	r0, [sp, #52]	; 0x34
    8ec6:	e072      	b.n	8fae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    8ec8:	f64e 7060 	movw	r0, #61280	; 0xef60
    8ecc:	f2c0 0001 	movt	r0, #1
    8ed0:	6801      	ldr	r1, [r0, #0]
    8ed2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8ed4:	9027      	str	r0, [sp, #156]	; 0x9c
    8ed6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8ed8:	9228      	str	r2, [sp, #160]	; 0xa0
    8eda:	f64e 73a0 	movw	r3, #61344	; 0xefa0
    8ede:	f2c0 0301 	movt	r3, #1
    8ee2:	681b      	ldr	r3, [r3, #0]
    8ee4:	f64e 7ca4 	movw	ip, #61348	; 0xefa4
    8ee8:	f2c0 0c01 	movt	ip, #1
    8eec:	f8dc c000 	ldr.w	ip, [ip]
    8ef0:	46ee      	mov	lr, sp
    8ef2:	2400      	movs	r4, #0
    8ef4:	f8ce 4000 	str.w	r4, [lr]
    8ef8:	a829      	add	r0, sp, #164	; 0xa4
    8efa:	2201      	movs	r2, #1
    8efc:	910c      	str	r1, [sp, #48]	; 0x30
    8efe:	4619      	mov	r1, r3
    8f00:	4663      	mov	r3, ip
    8f02:	f7ff fe4f 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8f06:	e7ff      	b.n	8f08 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    8f08:	a827      	add	r0, sp, #156	; 0x9c
    8f0a:	9024      	str	r0, [sp, #144]	; 0x90
    8f0c:	a828      	add	r0, sp, #160	; 0xa0
    8f0e:	9025      	str	r0, [sp, #148]	; 0x94
    8f10:	a829      	add	r0, sp, #164	; 0xa4
    8f12:	9026      	str	r0, [sp, #152]	; 0x98
    8f14:	9824      	ldr	r0, [sp, #144]	; 0x90
    8f16:	9035      	str	r0, [sp, #212]	; 0xd4
    8f18:	9925      	ldr	r1, [sp, #148]	; 0x94
    8f1a:	9136      	str	r1, [sp, #216]	; 0xd8
    8f1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8f1e:	9237      	str	r2, [sp, #220]	; 0xdc
    8f20:	f243 13d5 	movw	r3, #12757	; 0x31d5
    8f24:	f2c0 0301 	movt	r3, #1
    8f28:	910b      	str	r1, [sp, #44]	; 0x2c
    8f2a:	4619      	mov	r1, r3
    8f2c:	920a      	str	r2, [sp, #40]	; 0x28
    8f2e:	f00a f95f 	bl	131f0 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8f32:	9009      	str	r0, [sp, #36]	; 0x24
    8f34:	9108      	str	r1, [sp, #32]
    8f36:	e7ff      	b.n	8f38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    8f38:	f243 11d5 	movw	r1, #12757	; 0x31d5
    8f3c:	f2c0 0101 	movt	r1, #1
    8f40:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8f42:	f00a f955 	bl	131f0 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8f46:	9007      	str	r0, [sp, #28]
    8f48:	9106      	str	r1, [sp, #24]
    8f4a:	e7ff      	b.n	8f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    8f4c:	f648 21ff 	movw	r1, #35583	; 0x8aff
    8f50:	f2c0 0101 	movt	r1, #1
    8f54:	980a      	ldr	r0, [sp, #40]	; 0x28
    8f56:	f000 fac3 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8f5a:	9005      	str	r0, [sp, #20]
    8f5c:	9104      	str	r1, [sp, #16]
    8f5e:	e7ff      	b.n	8f60 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    8f60:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f62:	901e      	str	r0, [sp, #120]	; 0x78
    8f64:	9908      	ldr	r1, [sp, #32]
    8f66:	911f      	str	r1, [sp, #124]	; 0x7c
    8f68:	9a07      	ldr	r2, [sp, #28]
    8f6a:	9220      	str	r2, [sp, #128]	; 0x80
    8f6c:	9b06      	ldr	r3, [sp, #24]
    8f6e:	9321      	str	r3, [sp, #132]	; 0x84
    8f70:	f8dd c014 	ldr.w	ip, [sp, #20]
    8f74:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    8f78:	f8dd e010 	ldr.w	lr, [sp, #16]
    8f7c:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    8f80:	466c      	mov	r4, sp
    8f82:	2503      	movs	r5, #3
    8f84:	6025      	str	r5, [r4, #0]
    8f86:	a818      	add	r0, sp, #96	; 0x60
    8f88:	ab1e      	add	r3, sp, #120	; 0x78
    8f8a:	990c      	ldr	r1, [sp, #48]	; 0x30
    8f8c:	462a      	mov	r2, r5
    8f8e:	f7ff fe09 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8f92:	e7ff      	b.n	8f94 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    8f94:	f64e 70f4 	movw	r0, #61428	; 0xeff4
    8f98:	f2c0 0001 	movt	r0, #1
    8f9c:	f00f fac1 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8fa0:	9003      	str	r0, [sp, #12]
    8fa2:	e7ff      	b.n	8fa4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    8fa4:	a818      	add	r0, sp, #96	; 0x60
    8fa6:	9903      	ldr	r1, [sp, #12]
    8fa8:	f00f faf8 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8fac:	defe      	udf	#254	; 0xfe
    8fae:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8fb0:	9912      	ldr	r1, [sp, #72]	; 0x48
    8fb2:	f009 fd61 	bl	12a78 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8fb6:	9002      	str	r0, [sp, #8]
    8fb8:	e7ff      	b.n	8fba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    8fba:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8fbc:	9912      	ldr	r1, [sp, #72]	; 0x48
    8fbe:	f009 fd72 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8fc2:	9001      	str	r0, [sp, #4]
    8fc4:	e7ff      	b.n	8fc6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    8fc6:	980d      	ldr	r0, [sp, #52]	; 0x34
    8fc8:	9902      	ldr	r1, [sp, #8]
    8fca:	9a01      	ldr	r2, [sp, #4]
    8fcc:	f009 fb77 	bl	126be <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    8fd0:	e7ff      	b.n	8fd2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    8fd2:	b038      	add	sp, #224	; 0xe0
    8fd4:	bdb0      	pop	{r4, r5, r7, pc}

00008fd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    8fd6:	b580      	push	{r7, lr}
    8fd8:	b086      	sub	sp, #24
    8fda:	9003      	str	r0, [sp, #12]
    8fdc:	9104      	str	r1, [sp, #16]
    8fde:	9205      	str	r2, [sp, #20]
    8fe0:	9002      	str	r0, [sp, #8]
    8fe2:	4610      	mov	r0, r2
    8fe4:	9a02      	ldr	r2, [sp, #8]
    8fe6:	9101      	str	r1, [sp, #4]
    8fe8:	4611      	mov	r1, r2
    8fea:	9a01      	ldr	r2, [sp, #4]
    8fec:	f000 f861 	bl	90b2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    8ff0:	9000      	str	r0, [sp, #0]
    8ff2:	e7ff      	b.n	8ff4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    8ff4:	9800      	ldr	r0, [sp, #0]
    8ff6:	b006      	add	sp, #24
    8ff8:	bd80      	pop	{r7, pc}

00008ffa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    8ffa:	b580      	push	{r7, lr}
    8ffc:	b08e      	sub	sp, #56	; 0x38
    8ffe:	9009      	str	r0, [sp, #36]	; 0x24
    9000:	910a      	str	r1, [sp, #40]	; 0x28
    9002:	9005      	str	r0, [sp, #20]
    9004:	9104      	str	r1, [sp, #16]
    9006:	f009 fd4e 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    900a:	9003      	str	r0, [sp, #12]
    900c:	e7ff      	b.n	900e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    900e:	2101      	movs	r1, #1
    9010:	9803      	ldr	r0, [sp, #12]
    9012:	f000 fa7a 	bl	950a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    9016:	9002      	str	r0, [sp, #8]
    9018:	9101      	str	r1, [sp, #4]
    901a:	e7ff      	b.n	901c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    901c:	9802      	ldr	r0, [sp, #8]
    901e:	9901      	ldr	r1, [sp, #4]
    9020:	f000 f97c 	bl	931c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    9024:	9108      	str	r1, [sp, #32]
    9026:	9007      	str	r0, [sp, #28]
    9028:	e7ff      	b.n	902a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    902a:	9807      	ldr	r0, [sp, #28]
    902c:	2800      	cmp	r0, #0
    902e:	d001      	beq.n	9034 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    9030:	e7ff      	b.n	9032 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    9032:	e00c      	b.n	904e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    9034:	9808      	ldr	r0, [sp, #32]
    9036:	900c      	str	r0, [sp, #48]	; 0x30
    9038:	900d      	str	r0, [sp, #52]	; 0x34
    903a:	9905      	ldr	r1, [sp, #20]
    903c:	9000      	str	r0, [sp, #0]
    903e:	4608      	mov	r0, r1
    9040:	9904      	ldr	r1, [sp, #16]
    9042:	9a00      	ldr	r2, [sp, #0]
    9044:	f7ff ffc7 	bl	8fd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    9048:	9006      	str	r0, [sp, #24]
    904a:	e00b      	b.n	9064 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    904c:	defe      	udf	#254	; 0xfe
    904e:	f009 f8f9 	bl	12244 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    9052:	e002      	b.n	905a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    9054:	9806      	ldr	r0, [sp, #24]
    9056:	b00e      	add	sp, #56	; 0x38
    9058:	bd80      	pop	{r7, pc}
    905a:	f000 f959 	bl	9310 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    905e:	9006      	str	r0, [sp, #24]
    9060:	e7ff      	b.n	9062 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    9062:	e7f7      	b.n	9054 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    9064:	e7f6      	b.n	9054 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

00009066 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    9066:	b082      	sub	sp, #8
    9068:	9000      	str	r0, [sp, #0]
    906a:	9101      	str	r1, [sp, #4]
    906c:	b002      	add	sp, #8
    906e:	4770      	bx	lr

00009070 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    9070:	b580      	push	{r7, lr}
    9072:	b088      	sub	sp, #32
    9074:	9005      	str	r0, [sp, #20]
    9076:	9106      	str	r1, [sp, #24]
    9078:	9207      	str	r2, [sp, #28]
    907a:	9004      	str	r0, [sp, #16]
    907c:	4610      	mov	r0, r2
    907e:	9a04      	ldr	r2, [sp, #16]
    9080:	9103      	str	r1, [sp, #12]
    9082:	4611      	mov	r1, r2
    9084:	9a03      	ldr	r2, [sp, #12]
    9086:	f7ff fdff 	bl	8c88 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    908a:	9002      	str	r0, [sp, #8]
    908c:	9101      	str	r1, [sp, #4]
    908e:	e7ff      	b.n	9090 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    9090:	9802      	ldr	r0, [sp, #8]
    9092:	9901      	ldr	r1, [sp, #4]
    9094:	b008      	add	sp, #32
    9096:	bd80      	pop	{r7, pc}

00009098 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    9098:	b580      	push	{r7, lr}
    909a:	b084      	sub	sp, #16
    909c:	9002      	str	r0, [sp, #8]
    909e:	9103      	str	r1, [sp, #12]
    90a0:	f009 f88d 	bl	121be <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    90a4:	9001      	str	r0, [sp, #4]
    90a6:	9100      	str	r1, [sp, #0]
    90a8:	e7ff      	b.n	90aa <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    90aa:	9801      	ldr	r0, [sp, #4]
    90ac:	9900      	ldr	r1, [sp, #0]
    90ae:	b004      	add	sp, #16
    90b0:	bd80      	pop	{r7, pc}

000090b2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    90b2:	b580      	push	{r7, lr}
    90b4:	b08a      	sub	sp, #40	; 0x28
    90b6:	9007      	str	r0, [sp, #28]
    90b8:	9108      	str	r1, [sp, #32]
    90ba:	9209      	str	r2, [sp, #36]	; 0x24
    90bc:	9005      	str	r0, [sp, #20]
    90be:	4608      	mov	r0, r1
    90c0:	9104      	str	r1, [sp, #16]
    90c2:	4611      	mov	r1, r2
    90c4:	9203      	str	r2, [sp, #12]
    90c6:	f009 fcee 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    90ca:	9002      	str	r0, [sp, #8]
    90cc:	e7ff      	b.n	90ce <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    90ce:	9805      	ldr	r0, [sp, #20]
    90d0:	9902      	ldr	r1, [sp, #8]
    90d2:	4288      	cmp	r0, r1
    90d4:	d303      	bcc.n	90de <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    90d6:	e7ff      	b.n	90d8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    90d8:	2000      	movs	r0, #0
    90da:	9006      	str	r0, [sp, #24]
    90dc:	e009      	b.n	90f2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    90de:	9805      	ldr	r0, [sp, #20]
    90e0:	9904      	ldr	r1, [sp, #16]
    90e2:	9a03      	ldr	r2, [sp, #12]
    90e4:	f009 fd0b 	bl	12afe <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    90e8:	9001      	str	r0, [sp, #4]
    90ea:	e7ff      	b.n	90ec <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    90ec:	9801      	ldr	r0, [sp, #4]
    90ee:	9006      	str	r0, [sp, #24]
    90f0:	e7ff      	b.n	90f2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    90f2:	9806      	ldr	r0, [sp, #24]
    90f4:	b00a      	add	sp, #40	; 0x28
    90f6:	bd80      	pop	{r7, pc}

000090f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    90f8:	b580      	push	{r7, lr}
    90fa:	b08a      	sub	sp, #40	; 0x28
    90fc:	9004      	str	r0, [sp, #16]
    90fe:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    9100:	9003      	str	r0, [sp, #12]
    9102:	9102      	str	r1, [sp, #8]
    9104:	f000 f86e 	bl	91e4 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9108:	4601      	mov	r1, r0
    910a:	9006      	str	r0, [sp, #24]
    910c:	9101      	str	r1, [sp, #4]
    910e:	e7ff      	b.n	9110 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    9110:	9803      	ldr	r0, [sp, #12]
    9112:	9902      	ldr	r1, [sp, #8]
    9114:	f000 f850 	bl	91b8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9118:	9000      	str	r0, [sp, #0]
    911a:	e7ff      	b.n	911c <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    911c:	9800      	ldr	r0, [sp, #0]
    911e:	9007      	str	r0, [sp, #28]
    9120:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    9122:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    9124:	4608      	mov	r0, r1
    9126:	f000 f809 	bl	913c <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    912a:	9009      	str	r0, [sp, #36]	; 0x24
    912c:	e7ff      	b.n	912e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    912e:	9801      	ldr	r0, [sp, #4]
    9130:	9900      	ldr	r1, [sp, #0]
    9132:	f011 f995 	bl	1a460 <console_buffer>
    9136:	e7ff      	b.n	9138 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    9138:	b00a      	add	sp, #40	; 0x28
    913a:	bd80      	pop	{r7, pc}

0000913c <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    913c:	b081      	sub	sp, #4
    913e:	9000      	str	r0, [sp, #0]
    9140:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    9142:	b001      	add	sp, #4
    9144:	4770      	bx	lr

00009146 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    9146:	b580      	push	{r7, lr}
    9148:	b086      	sub	sp, #24
    914a:	9004      	str	r0, [sp, #16]
    914c:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    914e:	9003      	str	r0, [sp, #12]
    9150:	9102      	str	r1, [sp, #8]
    9152:	f000 f847 	bl	91e4 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9156:	9001      	str	r0, [sp, #4]
    9158:	e7ff      	b.n	915a <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    915a:	9803      	ldr	r0, [sp, #12]
    915c:	9902      	ldr	r1, [sp, #8]
    915e:	f000 f82b 	bl	91b8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9162:	9000      	str	r0, [sp, #0]
    9164:	e7ff      	b.n	9166 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    9166:	9801      	ldr	r0, [sp, #4]
    9168:	9900      	ldr	r1, [sp, #0]
    916a:	f011 f979 	bl	1a460 <console_buffer>
    916e:	e7ff      	b.n	9170 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    9170:	b006      	add	sp, #24
    9172:	bd80      	pop	{r7, pc}

00009174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    9174:	b580      	push	{r7, lr}
    9176:	b082      	sub	sp, #8
    9178:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    917a:	f011 f9e1 	bl	1a540 <console_printint>
    917e:	e7ff      	b.n	9180 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    9180:	b002      	add	sp, #8
    9182:	bd80      	pop	{r7, pc}

00009184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    9184:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    9186:	f011 f943 	bl	1a410 <console_flush>
    918a:	e7ff      	b.n	918c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    918c:	bd80      	pop	{r7, pc}

0000918e <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    918e:	b086      	sub	sp, #24
    9190:	9004      	str	r0, [sp, #16]
    9192:	9105      	str	r1, [sp, #20]
    9194:	9002      	str	r0, [sp, #8]
    9196:	9103      	str	r1, [sp, #12]
    9198:	9802      	ldr	r0, [sp, #8]
    919a:	9903      	ldr	r1, [sp, #12]
    919c:	9000      	str	r0, [sp, #0]
    919e:	9101      	str	r1, [sp, #4]
    91a0:	9800      	ldr	r0, [sp, #0]
    91a2:	9901      	ldr	r1, [sp, #4]
    91a4:	b006      	add	sp, #24
    91a6:	4770      	bx	lr

000091a8 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    91a8:	b082      	sub	sp, #8
    91aa:	460a      	mov	r2, r1
    91ac:	9000      	str	r0, [sp, #0]
    91ae:	f88d 1007 	strb.w	r1, [sp, #7]
    91b2:	7001      	strb	r1, [r0, #0]
    91b4:	b002      	add	sp, #8
    91b6:	4770      	bx	lr

000091b8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    91b8:	b580      	push	{r7, lr}
    91ba:	b08a      	sub	sp, #40	; 0x28
    91bc:	9004      	str	r0, [sp, #16]
    91be:	9105      	str	r1, [sp, #20]
    91c0:	9008      	str	r0, [sp, #32]
    91c2:	9109      	str	r1, [sp, #36]	; 0x24
    91c4:	9006      	str	r0, [sp, #24]
    91c6:	9107      	str	r1, [sp, #28]
    91c8:	9806      	ldr	r0, [sp, #24]
    91ca:	9907      	ldr	r1, [sp, #28]
    91cc:	9003      	str	r0, [sp, #12]
    91ce:	9102      	str	r1, [sp, #8]
    91d0:	e7ff      	b.n	91d2 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    91d2:	9803      	ldr	r0, [sp, #12]
    91d4:	9902      	ldr	r1, [sp, #8]
    91d6:	f009 fc66 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    91da:	9001      	str	r0, [sp, #4]
    91dc:	e7ff      	b.n	91de <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    91de:	9801      	ldr	r0, [sp, #4]
    91e0:	b00a      	add	sp, #40	; 0x28
    91e2:	bd80      	pop	{r7, pc}

000091e4 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    91e4:	b082      	sub	sp, #8
    91e6:	9000      	str	r0, [sp, #0]
    91e8:	9101      	str	r1, [sp, #4]
    91ea:	b002      	add	sp, #8
    91ec:	4770      	bx	lr

000091ee <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    91ee:	b580      	push	{r7, lr}
    91f0:	b084      	sub	sp, #16
    91f2:	9002      	str	r0, [sp, #8]
    91f4:	9103      	str	r1, [sp, #12]
    91f6:	6800      	ldr	r0, [r0, #0]
    91f8:	f000 f845 	bl	9286 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    91fc:	9001      	str	r0, [sp, #4]
    91fe:	e7ff      	b.n	9200 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    9200:	9801      	ldr	r0, [sp, #4]
    9202:	f000 0001 	and.w	r0, r0, #1
    9206:	b004      	add	sp, #16
    9208:	bd80      	pop	{r7, pc}

0000920a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    920a:	b087      	sub	sp, #28
    920c:	9000      	str	r0, [sp, #0]
    920e:	9101      	str	r1, [sp, #4]
    9210:	2000      	movs	r0, #0
    9212:	f88d 0013 	strb.w	r0, [sp, #19]
    9216:	f88d 0012 	strb.w	r0, [sp, #18]
    921a:	2001      	movs	r0, #1
    921c:	f88d 0013 	strb.w	r0, [sp, #19]
    9220:	f88d 0012 	strb.w	r0, [sp, #18]
    9224:	9800      	ldr	r0, [sp, #0]
    9226:	2800      	cmp	r0, #0
    9228:	d001      	beq.n	922e <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    922a:	e7ff      	b.n	922c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    922c:	e006      	b.n	923c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    922e:	2000      	movs	r0, #0
    9230:	f88d 0012 	strb.w	r0, [sp, #18]
    9234:	2001      	movs	r0, #1
    9236:	9002      	str	r0, [sp, #8]
    9238:	e008      	b.n	924c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    923a:	defe      	udf	#254	; 0xfe
    923c:	2000      	movs	r0, #0
    923e:	f88d 0013 	strb.w	r0, [sp, #19]
    9242:	9901      	ldr	r1, [sp, #4]
    9244:	9106      	str	r1, [sp, #24]
    9246:	9103      	str	r1, [sp, #12]
    9248:	9002      	str	r0, [sp, #8]
    924a:	e7ff      	b.n	924c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    924c:	f89d 0012 	ldrb.w	r0, [sp, #18]
    9250:	07c0      	lsls	r0, r0, #31
    9252:	2800      	cmp	r0, #0
    9254:	d104      	bne.n	9260 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    9256:	e7ff      	b.n	9258 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9258:	9800      	ldr	r0, [sp, #0]
    925a:	2801      	cmp	r0, #1
    925c:	d008      	beq.n	9270 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    925e:	e011      	b.n	9284 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    9260:	2000      	movs	r0, #0
    9262:	f88d 0012 	strb.w	r0, [sp, #18]
    9266:	e7f7      	b.n	9258 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9268:	9802      	ldr	r0, [sp, #8]
    926a:	9903      	ldr	r1, [sp, #12]
    926c:	b007      	add	sp, #28
    926e:	4770      	bx	lr
    9270:	f89d 0013 	ldrb.w	r0, [sp, #19]
    9274:	07c0      	lsls	r0, r0, #31
    9276:	2800      	cmp	r0, #0
    9278:	d0f6      	beq.n	9268 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    927a:	e7ff      	b.n	927c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    927c:	2000      	movs	r0, #0
    927e:	f88d 0013 	strb.w	r0, [sp, #19]
    9282:	e7f1      	b.n	9268 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    9284:	e7f0      	b.n	9268 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

00009286 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    9286:	b580      	push	{r7, lr}
    9288:	b08e      	sub	sp, #56	; 0x38
    928a:	900b      	str	r0, [sp, #44]	; 0x2c
    928c:	910c      	str	r1, [sp, #48]	; 0x30
    928e:	9003      	str	r0, [sp, #12]
    9290:	9803      	ldr	r0, [sp, #12]
    9292:	6800      	ldr	r0, [r0, #0]
    9294:	2800      	cmp	r0, #0
    9296:	4602      	mov	r2, r0
    9298:	bf18      	it	ne
    929a:	2201      	movne	r2, #1
    929c:	2800      	cmp	r0, #0
    929e:	9101      	str	r1, [sp, #4]
    92a0:	d00f      	beq.n	92c2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    92a2:	e7ff      	b.n	92a4 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    92a4:	9803      	ldr	r0, [sp, #12]
    92a6:	900d      	str	r0, [sp, #52]	; 0x34
    92a8:	f24f 0204 	movw	r2, #61444	; 0xf004
    92ac:	f2c0 0201 	movt	r2, #1
    92b0:	a907      	add	r1, sp, #28
    92b2:	2304      	movs	r3, #4
    92b4:	9000      	str	r0, [sp, #0]
    92b6:	4608      	mov	r0, r1
    92b8:	9901      	ldr	r1, [sp, #4]
    92ba:	f00f ffe2 	bl	19282 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    92be:	e011      	b.n	92e4 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    92c0:	defe      	udf	#254	; 0xfe
    92c2:	f24f 0208 	movw	r2, #61448	; 0xf008
    92c6:	f2c0 0201 	movt	r2, #1
    92ca:	a804      	add	r0, sp, #16
    92cc:	2304      	movs	r3, #4
    92ce:	9901      	ldr	r1, [sp, #4]
    92d0:	f00f ffd7 	bl	19282 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    92d4:	e7ff      	b.n	92d6 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    92d6:	a804      	add	r0, sp, #16
    92d8:	f00f faf0 	bl	188bc <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    92dc:	f88d 000b 	strb.w	r0, [sp, #11]
    92e0:	e7ff      	b.n	92e2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    92e2:	e011      	b.n	9308 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    92e4:	9800      	ldr	r0, [sp, #0]
    92e6:	900a      	str	r0, [sp, #40]	; 0x28
    92e8:	f24f 020c 	movw	r2, #61452	; 0xf00c
    92ec:	f2c0 0201 	movt	r2, #1
    92f0:	a807      	add	r0, sp, #28
    92f2:	a90a      	add	r1, sp, #40	; 0x28
    92f4:	f00f fa79 	bl	187ea <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    92f8:	e7ff      	b.n	92fa <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    92fa:	a807      	add	r0, sp, #28
    92fc:	f00f fade 	bl	188bc <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    9300:	f88d 000b 	strb.w	r0, [sp, #11]
    9304:	e7ff      	b.n	9306 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    9306:	e7ff      	b.n	9308 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    9308:	f89d 000b 	ldrb.w	r0, [sp, #11]
    930c:	b00e      	add	sp, #56	; 0x38
    930e:	bd80      	pop	{r7, pc}

00009310 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    9310:	b082      	sub	sp, #8
    9312:	2000      	movs	r0, #0
    9314:	9000      	str	r0, [sp, #0]
    9316:	9800      	ldr	r0, [sp, #0]
    9318:	b002      	add	sp, #8
    931a:	4770      	bx	lr

0000931c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    931c:	b580      	push	{r7, lr}
    931e:	b084      	sub	sp, #16
    9320:	9002      	str	r0, [sp, #8]
    9322:	9103      	str	r1, [sp, #12]
    9324:	f7ff ff71 	bl	920a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    9328:	9001      	str	r0, [sp, #4]
    932a:	9100      	str	r1, [sp, #0]
    932c:	e7ff      	b.n	932e <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    932e:	9801      	ldr	r0, [sp, #4]
    9330:	9900      	ldr	r1, [sp, #0]
    9332:	b004      	add	sp, #16
    9334:	bd80      	pop	{r7, pc}

00009336 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    9336:	b580      	push	{r7, lr}
    9338:	b094      	sub	sp, #80	; 0x50
    933a:	9008      	str	r0, [sp, #32]
    933c:	9109      	str	r1, [sp, #36]	; 0x24
    933e:	6802      	ldr	r2, [r0, #0]
    9340:	2a00      	cmp	r2, #0
    9342:	bf18      	it	ne
    9344:	2201      	movne	r2, #1
    9346:	f04f 0300 	mov.w	r3, #0
    934a:	930b      	str	r3, [sp, #44]	; 0x2c
    934c:	920a      	str	r2, [sp, #40]	; 0x28
    934e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9352:	9104      	str	r1, [sp, #16]
    9354:	9003      	str	r0, [sp, #12]
    9356:	9202      	str	r2, [sp, #8]
    9358:	e7ff      	b.n	935a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    935a:	9802      	ldr	r0, [sp, #8]
    935c:	9902      	ldr	r1, [sp, #8]
    935e:	910d      	str	r1, [sp, #52]	; 0x34
    9360:	9a04      	ldr	r2, [sp, #16]
    9362:	6813      	ldr	r3, [r2, #0]
    9364:	2b00      	cmp	r3, #0
    9366:	bf18      	it	ne
    9368:	2301      	movne	r3, #1
    936a:	f04f 0c00 	mov.w	ip, #0
    936e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    9372:	930e      	str	r3, [sp, #56]	; 0x38
    9374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9376:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    937a:	9001      	str	r0, [sp, #4]
    937c:	9300      	str	r3, [sp, #0]
    937e:	e7ff      	b.n	9380 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    9380:	9800      	ldr	r0, [sp, #0]
    9382:	9011      	str	r0, [sp, #68]	; 0x44
    9384:	9901      	ldr	r1, [sp, #4]
    9386:	4281      	cmp	r1, r0
    9388:	d104      	bne.n	9394 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    938a:	e7ff      	b.n	938c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    938c:	2001      	movs	r0, #1
    938e:	f88d 0017 	strb.w	r0, [sp, #23]
    9392:	e003      	b.n	939c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    9394:	2000      	movs	r0, #0
    9396:	f88d 0017 	strb.w	r0, [sp, #23]
    939a:	e7ff      	b.n	939c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    939c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    93a0:	07c0      	lsls	r0, r0, #31
    93a2:	2800      	cmp	r0, #0
    93a4:	d104      	bne.n	93b0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    93a6:	e7ff      	b.n	93a8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    93a8:	2000      	movs	r0, #0
    93aa:	f88d 0016 	strb.w	r0, [sp, #22]
    93ae:	e01c      	b.n	93ea <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    93b0:	9803      	ldr	r0, [sp, #12]
    93b2:	9006      	str	r0, [sp, #24]
    93b4:	9904      	ldr	r1, [sp, #16]
    93b6:	9107      	str	r1, [sp, #28]
    93b8:	9a06      	ldr	r2, [sp, #24]
    93ba:	6812      	ldr	r2, [r2, #0]
    93bc:	2a00      	cmp	r2, #0
    93be:	d104      	bne.n	93ca <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    93c0:	e7ff      	b.n	93c2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    93c2:	2001      	movs	r0, #1
    93c4:	f88d 0016 	strb.w	r0, [sp, #22]
    93c8:	e00e      	b.n	93e8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    93ca:	9807      	ldr	r0, [sp, #28]
    93cc:	6800      	ldr	r0, [r0, #0]
    93ce:	2800      	cmp	r0, #0
    93d0:	d0f7      	beq.n	93c2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    93d2:	e7ff      	b.n	93d4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    93d4:	9806      	ldr	r0, [sp, #24]
    93d6:	9012      	str	r0, [sp, #72]	; 0x48
    93d8:	9907      	ldr	r1, [sp, #28]
    93da:	9113      	str	r1, [sp, #76]	; 0x4c
    93dc:	f00a f8ab 	bl	13536 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    93e0:	f88d 0016 	strb.w	r0, [sp, #22]
    93e4:	e7ff      	b.n	93e6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    93e6:	e7ff      	b.n	93e8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    93e8:	e7ff      	b.n	93ea <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    93ea:	f89d 0016 	ldrb.w	r0, [sp, #22]
    93ee:	b014      	add	sp, #80	; 0x50
    93f0:	bd80      	pop	{r7, pc}

000093f2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    93f2:	b580      	push	{r7, lr}
    93f4:	b084      	sub	sp, #16
    93f6:	9002      	str	r0, [sp, #8]
    93f8:	9103      	str	r1, [sp, #12]
    93fa:	6800      	ldr	r0, [r0, #0]
    93fc:	f00a f82d 	bl	1345a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    9400:	9001      	str	r0, [sp, #4]
    9402:	e7ff      	b.n	9404 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    9404:	9801      	ldr	r0, [sp, #4]
    9406:	f000 0001 	and.w	r0, r0, #1
    940a:	b004      	add	sp, #16
    940c:	bd80      	pop	{r7, pc}

0000940e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    940e:	b580      	push	{r7, lr}
    9410:	b084      	sub	sp, #16
    9412:	9002      	str	r0, [sp, #8]
    9414:	9103      	str	r1, [sp, #12]
    9416:	6800      	ldr	r0, [r0, #0]
    9418:	f009 ffe8 	bl	133ec <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    941c:	9001      	str	r0, [sp, #4]
    941e:	e7ff      	b.n	9420 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    9420:	9801      	ldr	r0, [sp, #4]
    9422:	f000 0001 	and.w	r0, r0, #1
    9426:	b004      	add	sp, #16
    9428:	bd80      	pop	{r7, pc}

0000942a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    942a:	b580      	push	{r7, lr}
    942c:	b084      	sub	sp, #16
    942e:	9002      	str	r0, [sp, #8]
    9430:	9103      	str	r1, [sp, #12]
    9432:	6800      	ldr	r0, [r0, #0]
    9434:	f7ff ffeb 	bl	940e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    9438:	9001      	str	r0, [sp, #4]
    943a:	e7ff      	b.n	943c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    943c:	9801      	ldr	r0, [sp, #4]
    943e:	f000 0001 	and.w	r0, r0, #1
    9442:	b004      	add	sp, #16
    9444:	bd80      	pop	{r7, pc}

00009446 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    9446:	b580      	push	{r7, lr}
    9448:	b084      	sub	sp, #16
    944a:	9002      	str	r0, [sp, #8]
    944c:	9103      	str	r1, [sp, #12]
    944e:	6800      	ldr	r0, [r0, #0]
    9450:	f00a f83a 	bl	134c8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
    9454:	9001      	str	r0, [sp, #4]
    9456:	e7ff      	b.n	9458 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
    9458:	9801      	ldr	r0, [sp, #4]
    945a:	f000 0001 	and.w	r0, r0, #1
    945e:	b004      	add	sp, #16
    9460:	bd80      	pop	{r7, pc}

00009462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    9462:	b089      	sub	sp, #36	; 0x24
    9464:	9005      	str	r0, [sp, #20]
    9466:	9106      	str	r1, [sp, #24]
    9468:	9107      	str	r1, [sp, #28]
    946a:	9907      	ldr	r1, [sp, #28]
    946c:	9002      	str	r0, [sp, #8]
    946e:	9101      	str	r1, [sp, #4]
    9470:	e7ff      	b.n	9472 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    9472:	9802      	ldr	r0, [sp, #8]
    9474:	9008      	str	r0, [sp, #32]
    9476:	9908      	ldr	r1, [sp, #32]
    9478:	9100      	str	r1, [sp, #0]
    947a:	e7ff      	b.n	947c <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    947c:	9800      	ldr	r0, [sp, #0]
    947e:	9003      	str	r0, [sp, #12]
    9480:	9901      	ldr	r1, [sp, #4]
    9482:	9104      	str	r1, [sp, #16]
    9484:	9803      	ldr	r0, [sp, #12]
    9486:	9904      	ldr	r1, [sp, #16]
    9488:	b009      	add	sp, #36	; 0x24
    948a:	4770      	bx	lr

0000948c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    948c:	b089      	sub	sp, #36	; 0x24
    948e:	9005      	str	r0, [sp, #20]
    9490:	9106      	str	r1, [sp, #24]
    9492:	9107      	str	r1, [sp, #28]
    9494:	9907      	ldr	r1, [sp, #28]
    9496:	9002      	str	r0, [sp, #8]
    9498:	9101      	str	r1, [sp, #4]
    949a:	e7ff      	b.n	949c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    949c:	9802      	ldr	r0, [sp, #8]
    949e:	9008      	str	r0, [sp, #32]
    94a0:	9908      	ldr	r1, [sp, #32]
    94a2:	9100      	str	r1, [sp, #0]
    94a4:	e7ff      	b.n	94a6 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    94a6:	9800      	ldr	r0, [sp, #0]
    94a8:	9003      	str	r0, [sp, #12]
    94aa:	9901      	ldr	r1, [sp, #4]
    94ac:	9104      	str	r1, [sp, #16]
    94ae:	9803      	ldr	r0, [sp, #12]
    94b0:	9904      	ldr	r1, [sp, #16]
    94b2:	b009      	add	sp, #36	; 0x24
    94b4:	4770      	bx	lr

000094b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    94b6:	b089      	sub	sp, #36	; 0x24
    94b8:	9005      	str	r0, [sp, #20]
    94ba:	9106      	str	r1, [sp, #24]
    94bc:	9107      	str	r1, [sp, #28]
    94be:	9907      	ldr	r1, [sp, #28]
    94c0:	9002      	str	r0, [sp, #8]
    94c2:	9101      	str	r1, [sp, #4]
    94c4:	e7ff      	b.n	94c6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    94c6:	9802      	ldr	r0, [sp, #8]
    94c8:	9008      	str	r0, [sp, #32]
    94ca:	9908      	ldr	r1, [sp, #32]
    94cc:	9100      	str	r1, [sp, #0]
    94ce:	e7ff      	b.n	94d0 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
    94d0:	9800      	ldr	r0, [sp, #0]
    94d2:	9003      	str	r0, [sp, #12]
    94d4:	9901      	ldr	r1, [sp, #4]
    94d6:	9104      	str	r1, [sp, #16]
    94d8:	9803      	ldr	r0, [sp, #12]
    94da:	9904      	ldr	r1, [sp, #16]
    94dc:	b009      	add	sp, #36	; 0x24
    94de:	4770      	bx	lr

000094e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
    94e0:	b089      	sub	sp, #36	; 0x24
    94e2:	9005      	str	r0, [sp, #20]
    94e4:	9106      	str	r1, [sp, #24]
    94e6:	9107      	str	r1, [sp, #28]
    94e8:	9907      	ldr	r1, [sp, #28]
    94ea:	9002      	str	r0, [sp, #8]
    94ec:	9101      	str	r1, [sp, #4]
    94ee:	e7ff      	b.n	94f0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
    94f0:	9802      	ldr	r0, [sp, #8]
    94f2:	9008      	str	r0, [sp, #32]
    94f4:	9908      	ldr	r1, [sp, #32]
    94f6:	9100      	str	r1, [sp, #0]
    94f8:	e7ff      	b.n	94fa <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
    94fa:	9800      	ldr	r0, [sp, #0]
    94fc:	9003      	str	r0, [sp, #12]
    94fe:	9901      	ldr	r1, [sp, #4]
    9500:	9104      	str	r1, [sp, #16]
    9502:	9803      	ldr	r0, [sp, #12]
    9504:	9904      	ldr	r1, [sp, #16]
    9506:	b009      	add	sp, #36	; 0x24
    9508:	4770      	bx	lr

0000950a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
    950a:	b580      	push	{r7, lr}
    950c:	b088      	sub	sp, #32
    950e:	9004      	str	r0, [sp, #16]
    9510:	9105      	str	r1, [sp, #20]
    9512:	f000 f819 	bl	9548 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
    9516:	9001      	str	r0, [sp, #4]
    9518:	9100      	str	r1, [sp, #0]
    951a:	e7ff      	b.n	951c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
    951c:	9801      	ldr	r0, [sp, #4]
    951e:	9006      	str	r0, [sp, #24]
    9520:	9900      	ldr	r1, [sp, #0]
    9522:	f001 0201 	and.w	r2, r1, #1
    9526:	f88d 201f 	strb.w	r2, [sp, #31]
    952a:	2a00      	cmp	r2, #0
    952c:	d105      	bne.n	953a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
    952e:	e7ff      	b.n	9530 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
    9530:	9801      	ldr	r0, [sp, #4]
    9532:	9003      	str	r0, [sp, #12]
    9534:	2101      	movs	r1, #1
    9536:	9102      	str	r1, [sp, #8]
    9538:	e002      	b.n	9540 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    953a:	2000      	movs	r0, #0
    953c:	9002      	str	r0, [sp, #8]
    953e:	e7ff      	b.n	9540 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    9540:	9802      	ldr	r0, [sp, #8]
    9542:	9903      	ldr	r1, [sp, #12]
    9544:	b008      	add	sp, #32
    9546:	bd80      	pop	{r7, pc}

00009548 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
    9548:	b08a      	sub	sp, #40	; 0x28
    954a:	9004      	str	r0, [sp, #16]
    954c:	9105      	str	r1, [sp, #20]
    954e:	1a40      	subs	r0, r0, r1
    9550:	f04f 0100 	mov.w	r1, #0
    9554:	f141 0100 	adc.w	r1, r1, #0
    9558:	f1c1 0101 	rsb	r1, r1, #1
    955c:	9006      	str	r0, [sp, #24]
    955e:	f88d 101c 	strb.w	r1, [sp, #28]
    9562:	9806      	ldr	r0, [sp, #24]
    9564:	f89d 101c 	ldrb.w	r1, [sp, #28]
    9568:	9001      	str	r0, [sp, #4]
    956a:	9100      	str	r1, [sp, #0]
    956c:	e7ff      	b.n	956e <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
    956e:	9801      	ldr	r0, [sp, #4]
    9570:	9008      	str	r0, [sp, #32]
    9572:	9900      	ldr	r1, [sp, #0]
    9574:	f001 0201 	and.w	r2, r1, #1
    9578:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    957c:	9002      	str	r0, [sp, #8]
    957e:	f88d 200c 	strb.w	r2, [sp, #12]
    9582:	9802      	ldr	r0, [sp, #8]
    9584:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9588:	b00a      	add	sp, #40	; 0x28
    958a:	4770      	bx	lr

0000958c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
    baudrate:   8000,  //  In kHZ. Use SPI at 8MHz (the fastest clock available on the nRF52832) because otherwise refreshing will be super slow.
    word_size:  hal::HAL_SPI_WORD_SIZE_8BIT as u8,
};

/// Initialise the display controller
pub fn start_display() -> MynewtResult<()> {
    958c:	b5b0      	push	{r4, r5, r7, lr}
    958e:	b0b2      	sub	sp, #200	; 0xc8
    //  Create SPI port and GPIO pins
    let mut spi_port = mynewt::SPI::new();
    9590:	f00b fb6b 	bl	14c6a <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
    9594:	9115      	str	r1, [sp, #84]	; 0x54
    9596:	9014      	str	r0, [sp, #80]	; 0x50
    9598:	e7ff      	b.n	959a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
    959a:	f00b fd24 	bl	14fe6 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    959e:	9016      	str	r0, [sp, #88]	; 0x58
    95a0:	e7ff      	b.n	95a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
    95a2:	f00b fd20 	bl	14fe6 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    95a6:	9017      	str	r0, [sp, #92]	; 0x5c
    95a8:	e7ff      	b.n	95aa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>

    //  Init SPI port and GPIO pins
    spi_port.init(
    95aa:	f240 03e8 	movw	r3, #232	; 0xe8
    95ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b2:	a814      	add	r0, sp, #80	; 0x50
    95b4:	2100      	movs	r1, #0
    95b6:	2219      	movs	r2, #25
    95b8:	f00b fb5f 	bl	14c7a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
    95bc:	9012      	str	r0, [sp, #72]	; 0x48
    95be:	e7ff      	b.n	95c0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
    95c0:	9812      	ldr	r0, [sp, #72]	; 0x48
    95c2:	f7ff fb5d 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    95c6:	9018      	str	r0, [sp, #96]	; 0x60
    95c8:	e7ff      	b.n	95ca <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
        DISPLAY_SPI, //  Mynewt SPI port 0
        DISPLAY_CS,  //  LCD_CS (P0.25): Chip select
        unsafe { &mut SPI_SETTINGS }
    ) ? ;
    95ca:	9818      	ldr	r0, [sp, #96]	; 0x60
    95cc:	1e41      	subs	r1, r0, #1
    95ce:	bf18      	it	ne
    95d0:	2101      	movne	r1, #1
    95d2:	2801      	cmp	r0, #1
    95d4:	d001      	beq.n	95da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
    95d6:	e7ff      	b.n	95d8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
    95d8:	e006      	b.n	95e8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
    95da:	a816      	add	r0, sp, #88	; 0x58
    95dc:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    95de:	f00b fd04 	bl	14fea <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    95e2:	9011      	str	r0, [sp, #68]	; 0x44
    95e4:	e010      	b.n	9608 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
    95e6:	defe      	udf	#254	; 0xfe
    ) ? ;
    95e8:	9818      	ldr	r0, [sp, #96]	; 0x60
    95ea:	902d      	str	r0, [sp, #180]	; 0xb4
    95ec:	f009 fefa 	bl	133e4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    95f0:	9010      	str	r0, [sp, #64]	; 0x40
    95f2:	e002      	b.n	95fa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
    unsafe {
        DISPLAY.init(&mut delay) ? ;
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    }
    Ok(())
}
    95f4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    95f6:	b032      	add	sp, #200	; 0xc8
    95f8:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
    95fa:	9810      	ldr	r0, [sp, #64]	; 0x40
    95fc:	f7ff fb34 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9600:	9013      	str	r0, [sp, #76]	; 0x4c
    9602:	e7ff      	b.n	9604 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
    9604:	e7ff      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    9606:	e7f5      	b.n	95f4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9608:	9811      	ldr	r0, [sp, #68]	; 0x44
    960a:	f7ff fb39 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    960e:	9019      	str	r0, [sp, #100]	; 0x64
    9610:	e7ff      	b.n	9612 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
    9612:	9819      	ldr	r0, [sp, #100]	; 0x64
    9614:	1e41      	subs	r1, r0, #1
    9616:	bf18      	it	ne
    9618:	2101      	movne	r1, #1
    961a:	2801      	cmp	r0, #1
    961c:	d001      	beq.n	9622 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
    961e:	e7ff      	b.n	9620 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
    9620:	e006      	b.n	9630 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
    9622:	a817      	add	r0, sp, #92	; 0x5c
    9624:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9626:	f00b fce0 	bl	14fea <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    962a:	900f      	str	r0, [sp, #60]	; 0x3c
    962c:	e00c      	b.n	9648 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    962e:	defe      	udf	#254	; 0xfe
    9630:	9819      	ldr	r0, [sp, #100]	; 0x64
    9632:	902e      	str	r0, [sp, #184]	; 0xb8
    9634:	f009 fed6 	bl	133e4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9638:	900e      	str	r0, [sp, #56]	; 0x38
    963a:	e7ff      	b.n	963c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
    963c:	980e      	ldr	r0, [sp, #56]	; 0x38
    963e:	f7ff fb13 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9642:	9013      	str	r0, [sp, #76]	; 0x4c
    9644:	e7ff      	b.n	9646 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
    9646:	e7de      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9648:	980f      	ldr	r0, [sp, #60]	; 0x3c
    964a:	f7ff fb19 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    964e:	901a      	str	r0, [sp, #104]	; 0x68
    9650:	e7ff      	b.n	9652 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
    9652:	981a      	ldr	r0, [sp, #104]	; 0x68
    9654:	1e41      	subs	r1, r0, #1
    9656:	bf18      	it	ne
    9658:	2101      	movne	r1, #1
    965a:	2801      	cmp	r0, #1
    965c:	d001      	beq.n	9662 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
    965e:	e7ff      	b.n	9660 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
    9660:	e004      	b.n	966c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    9662:	f00b fcc0 	bl	14fe6 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    9666:	900d      	str	r0, [sp, #52]	; 0x34
    9668:	e00c      	b.n	9684 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    966a:	defe      	udf	#254	; 0xfe
    966c:	981a      	ldr	r0, [sp, #104]	; 0x68
    966e:	902f      	str	r0, [sp, #188]	; 0xbc
    9670:	f009 feb8 	bl	133e4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9674:	900c      	str	r0, [sp, #48]	; 0x30
    9676:	e7ff      	b.n	9678 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
    9678:	980c      	ldr	r0, [sp, #48]	; 0x30
    967a:	f7ff faf5 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    967e:	9013      	str	r0, [sp, #76]	; 0x4c
    9680:	e7ff      	b.n	9682 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
    9682:	e7c0      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    9684:	f240 1060 	movw	r0, #352	; 0x160
    9688:	f2c2 0000 	movt	r0, #8192	; 0x2000
    968c:	990d      	ldr	r1, [sp, #52]	; 0x34
    968e:	6001      	str	r1, [r0, #0]
    9690:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    9692:	f00b fcaa 	bl	14fea <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    9696:	900b      	str	r0, [sp, #44]	; 0x2c
    9698:	e7ff      	b.n	969a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
    969a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    969c:	f7ff faf0 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    96a0:	901b      	str	r0, [sp, #108]	; 0x6c
    96a2:	e7ff      	b.n	96a4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
    96a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
    96a6:	1e41      	subs	r1, r0, #1
    96a8:	bf18      	it	ne
    96aa:	2101      	movne	r1, #1
    96ac:	2801      	cmp	r0, #1
    96ae:	d001      	beq.n	96b4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
    96b0:	e7ff      	b.n	96b2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
    96b2:	e008      	b.n	96c6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
    96b4:	f240 1060 	movw	r0, #352	; 0x160
    96b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    96bc:	f00b fd2e 	bl	1511c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    96c0:	900a      	str	r0, [sp, #40]	; 0x28
    96c2:	e00d      	b.n	96e0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    96c4:	defe      	udf	#254	; 0xfe
    96c6:	981b      	ldr	r0, [sp, #108]	; 0x6c
    96c8:	9030      	str	r0, [sp, #192]	; 0xc0
    96ca:	f009 fe8b 	bl	133e4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    96ce:	9009      	str	r0, [sp, #36]	; 0x24
    96d0:	e7ff      	b.n	96d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
    96d2:	9809      	ldr	r0, [sp, #36]	; 0x24
    96d4:	f7ff fac8 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    96d8:	9013      	str	r0, [sp, #76]	; 0x4c
    96da:	e7ff      	b.n	96dc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
    96dc:	e7ff      	b.n	96de <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    96de:	e792      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
    96e0:	980a      	ldr	r0, [sp, #40]	; 0x28
    96e2:	f7ff facd 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    96e6:	901c      	str	r0, [sp, #112]	; 0x70
    96e8:	e7ff      	b.n	96ea <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
    96ea:	981c      	ldr	r0, [sp, #112]	; 0x70
    96ec:	1e41      	subs	r1, r0, #1
    96ee:	bf18      	it	ne
    96f0:	2101      	movne	r1, #1
    96f2:	2801      	cmp	r0, #1
    96f4:	d001      	beq.n	96fa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
    96f6:	e7ff      	b.n	96f8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
    96f8:	e011      	b.n	971e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
    96fa:	9914      	ldr	r1, [sp, #80]	; 0x50
    96fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
    96fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
    9700:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    9702:	46ec      	mov	ip, sp
    9704:	f04f 0e01 	mov.w	lr, #1
    9708:	f8cc e008 	str.w	lr, [ip, #8]
    970c:	f8cc e004 	str.w	lr, [ip, #4]
    9710:	f8cc 0000 	str.w	r0, [ip]
    9714:	a81d      	add	r0, sp, #116	; 0x74
    9716:	f000 fc8c 	bl	a032 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
    971a:	e00c      	b.n	9736 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
    971c:	defe      	udf	#254	; 0xfe
    971e:	981c      	ldr	r0, [sp, #112]	; 0x70
    9720:	9031      	str	r0, [sp, #196]	; 0xc4
    9722:	f009 fe5f 	bl	133e4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9726:	9008      	str	r0, [sp, #32]
    9728:	e7ff      	b.n	972a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
    972a:	9808      	ldr	r0, [sp, #32]
    972c:	f7ff fa9c 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9730:	9013      	str	r0, [sp, #76]	; 0x4c
    9732:	e7ff      	b.n	9734 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
    9734:	e7d3      	b.n	96de <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    9736:	f240 1048 	movw	r0, #328	; 0x148
    973a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    973e:	a91d      	add	r1, sp, #116	; 0x74
    9740:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9744:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
    9748:	f00b fcfe 	bl	15148 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
    974c:	e7ff      	b.n	974e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
    974e:	f240 1048 	movw	r0, #328	; 0x148
    9752:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9756:	a923      	add	r1, sp, #140	; 0x8c
    9758:	f000 fc8d 	bl	a076 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
    975c:	9007      	str	r0, [sp, #28]
    975e:	e7ff      	b.n	9760 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
    9760:	9807      	ldr	r0, [sp, #28]
    9762:	f000 0001 	and.w	r0, r0, #1
    9766:	f7ff fa85 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    976a:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
    976e:	e7ff      	b.n	9770 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
    9770:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
    9774:	07c1      	lsls	r1, r0, #31
    9776:	2900      	cmp	r1, #0
    9778:	d001      	beq.n	977e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
    977a:	e7ff      	b.n	977c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
    977c:	e00d      	b.n	979a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    977e:	f24f 0020 	movw	r0, #61472	; 0xf020
    9782:	f2c0 0001 	movt	r0, #1
    9786:	6801      	ldr	r1, [r0, #0]
    9788:	f240 1048 	movw	r0, #328	; 0x148
    978c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9790:	f000 fa86 	bl	9ca0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
    9794:	9006      	str	r0, [sp, #24]
    9796:	e00b      	b.n	97b0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
    9798:	defe      	udf	#254	; 0xfe
    979a:	f009 fdbb 	bl	13314 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    979e:	9005      	str	r0, [sp, #20]
    97a0:	e7ff      	b.n	97a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
    97a2:	9805      	ldr	r0, [sp, #20]
    97a4:	f7ff fa60 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    97a8:	9013      	str	r0, [sp, #76]	; 0x4c
    97aa:	e7ff      	b.n	97ac <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
    97ac:	e7ff      	b.n	97ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
    97ae:	e72a      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    97b0:	9806      	ldr	r0, [sp, #24]
    97b2:	f000 0001 	and.w	r0, r0, #1
    97b6:	f7ff fa5d 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    97ba:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
    97be:	e7ff      	b.n	97c0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
    97c0:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
    97c4:	07c1      	lsls	r1, r0, #31
    97c6:	2900      	cmp	r1, #0
    97c8:	d001      	beq.n	97ce <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
    97ca:	e7ff      	b.n	97cc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
    97cc:	e005      	b.n	97da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
    97ce:	2000      	movs	r0, #0
    Ok(())
    97d0:	9013      	str	r0, [sp, #76]	; 0x4c
    97d2:	2001      	movs	r0, #1
    97d4:	9013      	str	r0, [sp, #76]	; 0x4c
}
    97d6:	e70d      	b.n	95f4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    97d8:	defe      	udf	#254	; 0xfe
    97da:	f009 fd9b 	bl	13314 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    97de:	9004      	str	r0, [sp, #16]
    97e0:	e7ff      	b.n	97e2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
    97e2:	9804      	ldr	r0, [sp, #16]
    97e4:	f7ff fa40 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    97e8:	9013      	str	r0, [sp, #76]	; 0x4c
    97ea:	e7ff      	b.n	97ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
    97ec:	e7df      	b.n	97ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

000097ee <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
    97ee:	b580      	push	{r7, lr}
    97f0:	b08a      	sub	sp, #40	; 0x28
    97f2:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    97f4:	f001 faa3 	bl	ad3e <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
    97f8:	9307      	str	r3, [sp, #28]
    97fa:	9206      	str	r2, [sp, #24]
    97fc:	9105      	str	r1, [sp, #20]
    97fe:	9004      	str	r0, [sp, #16]
    9800:	e7ff      	b.n	9802 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
    9802:	a804      	add	r0, sp, #16
    9804:	f00b fd8b 	bl	1531e <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    9808:	9003      	str	r0, [sp, #12]
    980a:	e7ff      	b.n	980c <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
    980c:	9803      	ldr	r0, [sp, #12]
    980e:	f00b fe59 	bl	154c4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    9812:	9002      	str	r0, [sp, #8]
    9814:	9101      	str	r1, [sp, #4]
    9816:	e7ff      	b.n	9818 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
    9818:	9802      	ldr	r0, [sp, #8]
    981a:	f000 0001 	and.w	r0, r0, #1
    981e:	9901      	ldr	r1, [sp, #4]
    9820:	b00a      	add	sp, #40	; 0x28
    9822:	bd80      	pop	{r7, pc}

00009824 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
    9824:	b580      	push	{r7, lr}
    9826:	b090      	sub	sp, #64	; 0x40
    9828:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
    982a:	f100 010c 	add.w	r1, r0, #12
    982e:	9006      	str	r0, [sp, #24]
    9830:	4608      	mov	r0, r1
    9832:	f00b fc7e 	bl	15132 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    9836:	9005      	str	r0, [sp, #20]
    9838:	e7ff      	b.n	983a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
    983a:	9805      	ldr	r0, [sp, #20]
    983c:	f00c fbd9 	bl	15ff2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
    9840:	9004      	str	r0, [sp, #16]
    9842:	e7ff      	b.n	9844 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
    9844:	9804      	ldr	r0, [sp, #16]
    9846:	f000 0001 	and.w	r0, r0, #1
    984a:	f7ff fa13 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    984e:	f88d 001f 	strb.w	r0, [sp, #31]
    9852:	e7ff      	b.n	9854 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
    9854:	f89d 001f 	ldrb.w	r0, [sp, #31]
    9858:	07c1      	lsls	r1, r0, #31
    985a:	2900      	cmp	r1, #0
    985c:	d001      	beq.n	9862 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
    985e:	e7ff      	b.n	9860 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
    9860:	e006      	b.n	9870 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
    9862:	9806      	ldr	r0, [sp, #24]
    9864:	300c      	adds	r0, #12
    9866:	f00b fc59 	bl	1511c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    986a:	9003      	str	r0, [sp, #12]
    986c:	e00d      	b.n	988a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
    986e:	defe      	udf	#254	; 0xfe
    9870:	f009 f96f 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9874:	e003      	b.n	987e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
    9876:	f89d 001e 	ldrb.w	r0, [sp, #30]
    987a:	b010      	add	sp, #64	; 0x40
    987c:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
    987e:	f00c fc0d 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9882:	f88d 001e 	strb.w	r0, [sp, #30]
    9886:	e7ff      	b.n	9888 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
    9888:	e7f5      	b.n	9876 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
    988a:	9803      	ldr	r0, [sp, #12]
    988c:	f00c fb5c 	bl	15f48 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
    9890:	9002      	str	r0, [sp, #8]
    9892:	e7ff      	b.n	9894 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
    9894:	9802      	ldr	r0, [sp, #8]
    9896:	f000 0001 	and.w	r0, r0, #1
    989a:	f7ff f9eb 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    989e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    98a2:	e7ff      	b.n	98a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
    98a4:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    98a8:	07c1      	lsls	r1, r0, #31
    98aa:	2900      	cmp	r1, #0
    98ac:	d001      	beq.n	98b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
    98ae:	e7ff      	b.n	98b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
    98b0:	e006      	b.n	98c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
    98b2:	9806      	ldr	r0, [sp, #24]
    98b4:	300c      	adds	r0, #12
    98b6:	f00b fc3c 	bl	15132 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    98ba:	9001      	str	r0, [sp, #4]
    98bc:	e009      	b.n	98d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
    98be:	defe      	udf	#254	; 0xfe
    98c0:	f009 f947 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    98c4:	e7ff      	b.n	98c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
    98c6:	f00c fbe9 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    98ca:	f88d 001e 	strb.w	r0, [sp, #30]
    98ce:	e7ff      	b.n	98d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
    98d0:	e7d1      	b.n	9876 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
    98d2:	9801      	ldr	r0, [sp, #4]
    98d4:	f00c fae3 	bl	15e9e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
    98d8:	f88d 001e 	strb.w	r0, [sp, #30]
    98dc:	e7ff      	b.n	98de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
    98de:	e7ca      	b.n	9876 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

000098e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
    98e0:	b082      	sub	sp, #8
    98e2:	9001      	str	r0, [sp, #4]
    98e4:	e7ff      	b.n	98e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
    98e6:	b002      	add	sp, #8
    98e8:	4770      	bx	lr

000098ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
    98ea:	b082      	sub	sp, #8
    98ec:	9001      	str	r0, [sp, #4]
    98ee:	e7ff      	b.n	98f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
    98f0:	b002      	add	sp, #8
    98f2:	4770      	bx	lr

000098f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
    98f4:	b082      	sub	sp, #8
    98f6:	9001      	str	r0, [sp, #4]
    98f8:	e7ff      	b.n	98fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
    98fa:	b002      	add	sp, #8
    98fc:	4770      	bx	lr

000098fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    98fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    9900:	b0c7      	sub	sp, #284	; 0x11c
    9902:	f8dd c134 	ldr.w	ip, [sp, #308]	; 0x134
    9906:	f8dd e130 	ldr.w	lr, [sp, #304]	; 0x130
    990a:	461c      	mov	r4, r3
    990c:	4615      	mov	r5, r2
    990e:	460e      	mov	r6, r1
    9910:	9040      	str	r0, [sp, #256]	; 0x100
    9912:	f8ad 1104 	strh.w	r1, [sp, #260]	; 0x104
    9916:	f8ad 2106 	strh.w	r2, [sp, #262]	; 0x106
    991a:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
    991e:	f8ad e10a 	strh.w	lr, [sp, #266]	; 0x10a
    9922:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
    9924:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
    9928:	2701      	movs	r7, #1
    992a:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
    992e:	466f      	mov	r7, sp
    9930:	f8c7 e000 	str.w	lr, [r7]
    9934:	900a      	str	r0, [sp, #40]	; 0x28
    9936:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    993a:	9408      	str	r4, [sp, #32]
    993c:	9507      	str	r5, [sp, #28]
    993e:	9606      	str	r6, [sp, #24]
    9940:	f000 fa44 	bl	9dcc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
    9944:	9005      	str	r0, [sp, #20]
    9946:	e7ff      	b.n	9948 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x4a>
    9948:	9805      	ldr	r0, [sp, #20]
    994a:	f000 0001 	and.w	r0, r0, #1
    994e:	f7ff f991 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9952:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    9956:	e7ff      	b.n	9958 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x5a>
    9958:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    995c:	07c1      	lsls	r1, r0, #31
    995e:	2900      	cmp	r1, #0
    9960:	d001      	beq.n	9966 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x68>
    9962:	e7ff      	b.n	9964 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x66>
    9964:	e00f      	b.n	9986 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x88>
    9966:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
    9968:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    996c:	a80c      	add	r0, sp, #48	; 0x30
    996e:	22cc      	movs	r2, #204	; 0xcc
    9970:	9004      	str	r0, [sp, #16]
    9972:	9909      	ldr	r1, [sp, #36]	; 0x24
    9974:	f015 f9b0 	bl	1ecd8 <__aeabi_memcpy>
    9978:	980a      	ldr	r0, [sp, #40]	; 0x28
    997a:	9904      	ldr	r1, [sp, #16]
    997c:	f000 f884 	bl	9a88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>
    9980:	9003      	str	r0, [sp, #12]
    9982:	e00d      	b.n	99a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa2>
        self.set_address_window(sx, sy, ex, ey)?;
    9984:	defe      	udf	#254	; 0xfe
    9986:	f009 f8e4 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    998a:	e003      	b.n	9994 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x96>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
    998c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9990:	b047      	add	sp, #284	; 0x11c
    9992:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
    9994:	f00c fb82 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9998:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    999c:	e7ff      	b.n	999e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa0>
    999e:	e034      	b.n	9a0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        self.write_pixels(colors) ? ;
    99a0:	9803      	ldr	r0, [sp, #12]
    99a2:	f000 0001 	and.w	r0, r0, #1
    99a6:	f7ff f965 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    99aa:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    99ae:	e7ff      	b.n	99b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xb2>
    99b0:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    99b4:	07c1      	lsls	r1, r0, #31
    99b6:	2900      	cmp	r1, #0
    99b8:	d001      	beq.n	99be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xc0>
    99ba:	e7ff      	b.n	99bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xbe>
    99bc:	e004      	b.n	99c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xca>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    99be:	f00a fbff 	bl	141c0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    99c2:	9002      	str	r0, [sp, #8]
    99c4:	e009      	b.n	99da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xdc>
        self.write_pixels(colors) ? ;
    99c6:	defe      	udf	#254	; 0xfe
    99c8:	f009 f8c3 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    99cc:	e7ff      	b.n	99ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xd0>
    99ce:	f00c fb65 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    99d2:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    99d6:	e7ff      	b.n	99d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xda>
    99d8:	e017      	b.n	9a0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    99da:	f24f 0124 	movw	r1, #61476	; 0xf024
    99de:	f2c0 0101 	movt	r1, #1
    99e2:	f24f 0380 	movw	r3, #61568	; 0xf080
    99e6:	f2c0 0301 	movt	r3, #1
    99ea:	220e      	movs	r2, #14
    99ec:	9802      	ldr	r0, [sp, #8]
    99ee:	f7ff f908 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    99f2:	e7ff      	b.n	99f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xf6>
    99f4:	2000      	movs	r0, #0
        Ok(())
    99f6:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    99fa:	e7c7      	b.n	998c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
    99fc:	2000      	movs	r0, #0
    99fe:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    9a02:	9809      	ldr	r0, [sp, #36]	; 0x24
    9a04:	f000 ff1d 	bl	a842 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    9a08:	e7c0      	b.n	998c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
    9a0a:	f89d 00ff 	ldrb.w	r0, [sp, #255]	; 0xff
    9a0e:	07c0      	lsls	r0, r0, #31
    9a10:	2800      	cmp	r0, #0
    9a12:	d1f3      	bne.n	99fc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xfe>
    9a14:	e7ba      	b.n	998c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>

00009a16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
    9a16:	b580      	push	{r7, lr}
    9a18:	b084      	sub	sp, #16
    9a1a:	9001      	str	r0, [sp, #4]
    9a1c:	9102      	str	r1, [sp, #8]
    9a1e:	9203      	str	r2, [sp, #12]
        mynewt::spi::spi_noblock_write_data(
    9a20:	4608      	mov	r0, r1
    9a22:	4611      	mov	r1, r2
    9a24:	f00a fb38 	bl	14098 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9a28:	9000      	str	r0, [sp, #0]
    9a2a:	e7ff      	b.n	9a2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
    9a2c:	f24f 0190 	movw	r1, #61584	; 0xf090
    9a30:	f2c0 0101 	movt	r1, #1
    9a34:	f24f 03a0 	movw	r3, #61600	; 0xf0a0
    9a38:	f2c0 0301 	movt	r3, #1
    9a3c:	220d      	movs	r2, #13
    9a3e:	9800      	ldr	r0, [sp, #0]
    9a40:	f7ff f8df 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9a44:	e7ff      	b.n	9a46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
    9a46:	2000      	movs	r0, #0
    }
    9a48:	b004      	add	sp, #16
    9a4a:	bd80      	pop	{r7, pc}

00009a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
    9a4c:	b580      	push	{r7, lr}
    9a4e:	b088      	sub	sp, #32
    9a50:	460a      	mov	r2, r1
    9a52:	9006      	str	r0, [sp, #24]
    9a54:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
    9a58:	9004      	str	r0, [sp, #16]
    9a5a:	4608      	mov	r0, r1
    9a5c:	9203      	str	r2, [sp, #12]
    9a5e:	f000 feb9 	bl	a7d4 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
    9a62:	9002      	str	r0, [sp, #8]
    9a64:	e7ff      	b.n	9a66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
    9a66:	9802      	ldr	r0, [sp, #8]
    9a68:	f8ad 0016 	strh.w	r0, [sp, #22]
    9a6c:	e7ff      	b.n	9a6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
    9a6e:	f10d 0116 	add.w	r1, sp, #22
    9a72:	2202      	movs	r2, #2
        self.write_data(&bytes)
    9a74:	9804      	ldr	r0, [sp, #16]
    9a76:	f7ff ffce 	bl	9a16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
    9a7a:	9001      	str	r0, [sp, #4]
    9a7c:	e7ff      	b.n	9a7e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
    9a7e:	9801      	ldr	r0, [sp, #4]
    9a80:	f000 0001 	and.w	r0, r0, #1
    9a84:	b008      	add	sp, #32
    9a86:	bd80      	pop	{r7, pc}

00009a88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
    9a88:	b580      	push	{r7, lr}
    9a8a:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
    9a8e:	90a8      	str	r0, [sp, #672]	; 0x2a0
    9a90:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
    9a92:	f88d 229f 	strb.w	r2, [sp, #671]	; 0x29f
    9a96:	2301      	movs	r3, #1
    9a98:	f88d 329f 	strb.w	r3, [sp, #671]	; 0x29f
    9a9c:	232c      	movs	r3, #44	; 0x2c
    9a9e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    9aa2:	920a      	str	r2, [sp, #40]	; 0x28
    9aa4:	9209      	str	r2, [sp, #36]	; 0x24
    9aa6:	9209      	str	r2, [sp, #36]	; 0x24
    9aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9aac:	f89d c023 	ldrb.w	ip, [sp, #35]	; 0x23
    9ab0:	9007      	str	r0, [sp, #28]
    9ab2:	9106      	str	r1, [sp, #24]
    9ab4:	4661      	mov	r1, ip
    9ab6:	f000 f898 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9aba:	9005      	str	r0, [sp, #20]
    9abc:	e7ff      	b.n	9abe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x36>
    9abe:	9805      	ldr	r0, [sp, #20]
    9ac0:	f000 0001 	and.w	r0, r0, #1
    9ac4:	f7ff f8d6 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9ac8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    9acc:	e7ff      	b.n	9ace <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x46>
    9ace:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    9ad2:	07c1      	lsls	r1, r0, #31
    9ad4:	2900      	cmp	r1, #0
    9ad6:	d001      	beq.n	9adc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x54>
    9ad8:	e7ff      	b.n	9ada <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x52>
    9ada:	e00e      	b.n	9afa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x72>
    9adc:	2000      	movs	r0, #0
        for color in colors {
    9ade:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
    9ae2:	a83f      	add	r0, sp, #252	; 0xfc
    9ae4:	22cc      	movs	r2, #204	; 0xcc
    9ae6:	9004      	str	r0, [sp, #16]
    9ae8:	9906      	ldr	r1, [sp, #24]
    9aea:	f015 f8f5 	bl	1ecd8 <__aeabi_memcpy>
    9aee:	a80b      	add	r0, sp, #44	; 0x2c
    9af0:	9904      	ldr	r1, [sp, #16]
    9af2:	f00b fe07 	bl	15704 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>
    9af6:	e00e      	b.n	9b16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8e>
        self.write_command(Instruction::RAMWR, None)?;
    9af8:	defe      	udf	#254	; 0xfe
    9afa:	f009 f82a 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9afe:	e004      	b.n	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x82>
    }
    9b00:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
    9b04:	f50d 7d2e 	add.w	sp, sp, #696	; 0x2b8
    9b08:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
    9b0a:	f00c fac7 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9b0e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    9b12:	e7ff      	b.n	9b14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8c>
    9b14:	e063      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
    9b16:	a872      	add	r0, sp, #456	; 0x1c8
    9b18:	a90b      	add	r1, sp, #44	; 0x2c
    9b1a:	22d0      	movs	r2, #208	; 0xd0
        for color in colors {
    9b1c:	f015 f8dc 	bl	1ecd8 <__aeabi_memcpy>
    9b20:	e7ff      	b.n	9b22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
    9b22:	a872      	add	r0, sp, #456	; 0x1c8
    9b24:	f00b fe04 	bl	15730 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>
    9b28:	f8ad 129a 	strh.w	r1, [sp, #666]	; 0x29a
    9b2c:	f8ad 0298 	strh.w	r0, [sp, #664]	; 0x298
    9b30:	e7ff      	b.n	9b32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xaa>
    9b32:	f8bd 0298 	ldrh.w	r0, [sp, #664]	; 0x298
    9b36:	4601      	mov	r1, r0
    9b38:	2800      	cmp	r0, #0
    9b3a:	d001      	beq.n	9b40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb8>
    9b3c:	e7ff      	b.n	9b3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb6>
    9b3e:	e004      	b.n	9b4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xc2>
    9b40:	a872      	add	r0, sp, #456	; 0x1c8
        }
    9b42:	f000 fe9d 	bl	a880 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
    9b46:	e02e      	b.n	9ba6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11e>
        for color in colors {
    9b48:	defe      	udf	#254	; 0xfe
    9b4a:	f8bd 029a 	ldrh.w	r0, [sp, #666]	; 0x29a
    9b4e:	f8ad 02b2 	strh.w	r0, [sp, #690]	; 0x2b2
    9b52:	f8ad 02b4 	strh.w	r0, [sp, #692]	; 0x2b4
    9b56:	f8ad 02b6 	strh.w	r0, [sp, #694]	; 0x2b6
            self.write_word(color)?;
    9b5a:	9907      	ldr	r1, [sp, #28]
    9b5c:	9003      	str	r0, [sp, #12]
    9b5e:	4608      	mov	r0, r1
    9b60:	9903      	ldr	r1, [sp, #12]
    9b62:	f7ff ff73 	bl	9a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9b66:	9002      	str	r0, [sp, #8]
    9b68:	e7ff      	b.n	9b6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xe2>
    9b6a:	9802      	ldr	r0, [sp, #8]
    9b6c:	f000 0001 	and.w	r0, r0, #1
    9b70:	f7ff f880 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9b74:	f88d 029e 	strb.w	r0, [sp, #670]	; 0x29e
    9b78:	e7ff      	b.n	9b7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xf2>
    9b7a:	f89d 029e 	ldrb.w	r0, [sp, #670]	; 0x29e
    9b7e:	07c1      	lsls	r1, r0, #31
    9b80:	2900      	cmp	r1, #0
    9b82:	d001      	beq.n	9b88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x100>
    9b84:	e7ff      	b.n	9b86 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xfe>
    9b86:	e001      	b.n	9b8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x104>
        for color in colors {
    9b88:	e7cb      	b.n	9b22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
            self.write_word(color)?;
    9b8a:	defe      	udf	#254	; 0xfe
    9b8c:	f008 ffe1 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9b90:	e7ff      	b.n	9b92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x10a>
    9b92:	f00c fa83 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9b96:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    9b9a:	e7ff      	b.n	9b9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x114>
    9b9c:	a872      	add	r0, sp, #456	; 0x1c8
        }
    9b9e:	f000 fe6f 	bl	a880 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
    9ba2:	e7ff      	b.n	9ba4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11c>
    }
    9ba4:	e01b      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    9ba6:	f00a fb0b 	bl	141c0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    9baa:	9001      	str	r0, [sp, #4]
    9bac:	e7ff      	b.n	9bae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x126>
    9bae:	f24f 0124 	movw	r1, #61476	; 0xf024
    9bb2:	f2c0 0101 	movt	r1, #1
    9bb6:	f24f 03b0 	movw	r3, #61616	; 0xf0b0
    9bba:	f2c0 0301 	movt	r3, #1
    9bbe:	220e      	movs	r2, #14
    9bc0:	9801      	ldr	r0, [sp, #4]
    9bc2:	f7ff f81e 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9bc6:	e7ff      	b.n	9bc8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x140>
    9bc8:	2000      	movs	r0, #0
        Ok(())
    9bca:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    }
    9bce:	e797      	b.n	9b00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
    9bd0:	2000      	movs	r0, #0
    9bd2:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
    9bd6:	9806      	ldr	r0, [sp, #24]
    9bd8:	f000 fe33 	bl	a842 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    9bdc:	e790      	b.n	9b00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
    9bde:	f89d 029f 	ldrb.w	r0, [sp, #671]	; 0x29f
    9be2:	07c0      	lsls	r0, r0, #31
    9be4:	2800      	cmp	r0, #0
    9be6:	d1f3      	bne.n	9bd0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x148>
    9be8:	e78a      	b.n	9b00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>

00009bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
    9bea:	b580      	push	{r7, lr}
    9bec:	b08e      	sub	sp, #56	; 0x38
    9bee:	468c      	mov	ip, r1
    9bf0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
    9bf4:	920b      	str	r2, [sp, #44]	; 0x2c
    9bf6:	930c      	str	r3, [sp, #48]	; 0x30
    9bf8:	900d      	str	r0, [sp, #52]	; 0x34
    9bfa:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
    9bfe:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9c02:	f000 fdbd 	bl	a780 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
    9c06:	9008      	str	r0, [sp, #32]
    9c08:	9107      	str	r1, [sp, #28]
    9c0a:	e7ff      	b.n	9c0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
    9c0c:	9808      	ldr	r0, [sp, #32]
    9c0e:	f000 0001 	and.w	r0, r0, #1
    9c12:	f24f 02c0 	movw	r2, #61632	; 0xf0c0
    9c16:	f2c0 0201 	movt	r2, #1
    9c1a:	9907      	ldr	r1, [sp, #28]
    9c1c:	f00b fbc1 	bl	153a2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9c20:	9006      	str	r0, [sp, #24]
    9c22:	e7ff      	b.n	9c24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
    9c24:	9806      	ldr	r0, [sp, #24]
    9c26:	f00a f9ef 	bl	14008 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
    9c2a:	9005      	str	r0, [sp, #20]
    9c2c:	e7ff      	b.n	9c2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
    9c2e:	f24f 01d0 	movw	r1, #61648	; 0xf0d0
    9c32:	f2c0 0101 	movt	r1, #1
    9c36:	f24f 03dc 	movw	r3, #61660	; 0xf0dc
    9c3a:	f2c0 0301 	movt	r3, #1
    9c3e:	220c      	movs	r2, #12
    9c40:	9805      	ldr	r0, [sp, #20]
    9c42:	f7fe ffde 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9c46:	e7ff      	b.n	9c48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
    9c48:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
    9c4a:	f00b fc05 	bl	15458 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
    9c4e:	9004      	str	r0, [sp, #16]
    9c50:	e7ff      	b.n	9c52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
    9c52:	9804      	ldr	r0, [sp, #16]
    9c54:	07c1      	lsls	r1, r0, #31
    9c56:	2900      	cmp	r1, #0
    9c58:	d01f      	beq.n	9c9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9c5a:	e7ff      	b.n	9c5c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
    9c5c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9c5e:	990c      	ldr	r1, [sp, #48]	; 0x30
    9c60:	f24f 02ec 	movw	r2, #61676	; 0xf0ec
    9c64:	f2c0 0201 	movt	r2, #1
    9c68:	f00b fbc4 	bl	153f4 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
    9c6c:	9003      	str	r0, [sp, #12]
    9c6e:	9102      	str	r1, [sp, #8]
    9c70:	e7ff      	b.n	9c72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
    9c72:	9803      	ldr	r0, [sp, #12]
    9c74:	9902      	ldr	r1, [sp, #8]
    9c76:	f00a fa0f 	bl	14098 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9c7a:	9001      	str	r0, [sp, #4]
    9c7c:	e7ff      	b.n	9c7e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
    9c7e:	f24f 0190 	movw	r1, #61584	; 0xf090
    9c82:	f2c0 0101 	movt	r1, #1
    9c86:	f24f 03fc 	movw	r3, #61692	; 0xf0fc
    9c8a:	f2c0 0301 	movt	r3, #1
    9c8e:	220d      	movs	r2, #13
    9c90:	9801      	ldr	r0, [sp, #4]
    9c92:	f7fe ffb6 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9c96:	e7ff      	b.n	9c98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
    9c98:	e7ff      	b.n	9c9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9c9a:	2000      	movs	r0, #0
    }
    9c9c:	b00e      	add	sp, #56	; 0x38
    9c9e:	bd80      	pop	{r7, pc}

00009ca0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:
    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
    9ca0:	b580      	push	{r7, lr}
    9ca2:	b098      	sub	sp, #96	; 0x60
    9ca4:	9012      	str	r0, [sp, #72]	; 0x48
    9ca6:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
    9ca8:	7d02      	ldrb	r2, [r0, #20]
    9caa:	07d2      	lsls	r2, r2, #31
    9cac:	2a00      	cmp	r2, #0
    9cae:	910a      	str	r1, [sp, #40]	; 0x28
    9cb0:	9009      	str	r0, [sp, #36]	; 0x24
    9cb2:	d109      	bne.n	9cc8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
    9cb4:	e7ff      	b.n	9cb6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
    9cb6:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9cb8:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    9cbc:	980a      	ldr	r0, [sp, #40]	; 0x28
    9cbe:	f7ff fd96 	bl	97ee <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9cc2:	9008      	str	r0, [sp, #32]
    9cc4:	9107      	str	r1, [sp, #28]
    9cc6:	e044      	b.n	9d52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
    9cc8:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
    9cca:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    9cce:	980a      	ldr	r0, [sp, #40]	; 0x28
    9cd0:	f7ff fd8d 	bl	97ee <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9cd4:	9006      	str	r0, [sp, #24]
    9cd6:	9105      	str	r1, [sp, #20]
    9cd8:	e7ff      	b.n	9cda <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
    9cda:	9806      	ldr	r0, [sp, #24]
    9cdc:	f000 0001 	and.w	r0, r0, #1
    9ce0:	f24f 120c 	movw	r2, #61708	; 0xf10c
    9ce4:	f2c0 0201 	movt	r2, #1
    9ce8:	9905      	ldr	r1, [sp, #20]
    9cea:	f00b fb5a 	bl	153a2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9cee:	9004      	str	r0, [sp, #16]
    9cf0:	e7ff      	b.n	9cf2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
    9cf2:	9804      	ldr	r0, [sp, #16]
    9cf4:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9cf8:	f10d 0139 	add.w	r1, sp, #57	; 0x39
    9cfc:	910c      	str	r1, [sp, #48]	; 0x30
    9cfe:	2101      	movs	r1, #1
    9d00:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
    9d02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9d06:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    9d0a:	9809      	ldr	r0, [sp, #36]	; 0x24
    9d0c:	f7ff ff6d 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9d10:	9003      	str	r0, [sp, #12]
    9d12:	e7ff      	b.n	9d14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
    9d14:	9803      	ldr	r0, [sp, #12]
    9d16:	f000 0001 	and.w	r0, r0, #1
    9d1a:	f7fe ffab 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d1e:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    9d22:	e7ff      	b.n	9d24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
    9d24:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    9d28:	07c1      	lsls	r1, r0, #31
    9d2a:	2900      	cmp	r1, #0
    9d2c:	d001      	beq.n	9d32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
    9d2e:	e7ff      	b.n	9d30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
    9d30:	e001      	b.n	9d36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
    9d32:	e047      	b.n	9dc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9d34:	defe      	udf	#254	; 0xfe
            ))?;
    9d36:	f008 ff0c 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9d3a:	e003      	b.n	9d44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
    }
    9d3c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9d40:	b018      	add	sp, #96	; 0x60
    9d42:	bd80      	pop	{r7, pc}
            ))?;
    9d44:	f00c f9aa 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9d48:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9d4c:	e7ff      	b.n	9d4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
    9d4e:	e7ff      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9d50:	e7f4      	b.n	9d3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9d52:	9808      	ldr	r0, [sp, #32]
    9d54:	f000 0001 	and.w	r0, r0, #1
    9d58:	f24f 121c 	movw	r2, #61724	; 0xf11c
    9d5c:	f2c0 0201 	movt	r2, #1
    9d60:	9907      	ldr	r1, [sp, #28]
    9d62:	f00b fb1e 	bl	153a2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9d66:	9002      	str	r0, [sp, #8]
    9d68:	e7ff      	b.n	9d6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
    9d6a:	9802      	ldr	r0, [sp, #8]
    9d6c:	f040 0108 	orr.w	r1, r0, #8
    9d70:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    9d74:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    9d78:	910f      	str	r1, [sp, #60]	; 0x3c
    9d7a:	2101      	movs	r1, #1
    9d7c:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
    9d7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9d80:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9d82:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9d86:	9809      	ldr	r0, [sp, #36]	; 0x24
    9d88:	f7ff ff2f 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9d8c:	9001      	str	r0, [sp, #4]
    9d8e:	e7ff      	b.n	9d90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
    9d90:	9801      	ldr	r0, [sp, #4]
    9d92:	f000 0001 	and.w	r0, r0, #1
    9d96:	f7fe ff6d 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d9a:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9d9e:	e7ff      	b.n	9da0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
    9da0:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9da4:	07c1      	lsls	r1, r0, #31
    9da6:	2900      	cmp	r1, #0
    9da8:	d001      	beq.n	9dae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
    9daa:	e7ff      	b.n	9dac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
    9dac:	e001      	b.n	9db2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
    9dae:	e009      	b.n	9dc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9db0:	defe      	udf	#254	; 0xfe
            ))?;
    9db2:	f008 fece 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9db6:	e7ff      	b.n	9db8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
    9db8:	f00c f970 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9dbc:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9dc0:	e7ff      	b.n	9dc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
    9dc2:	e7c5      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9dc4:	2000      	movs	r0, #0
        Ok(())
    9dc6:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    9dca:	e7b7      	b.n	9d3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

00009dcc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
    9dcc:	b5b0      	push	{r4, r5, r7, lr}
    9dce:	b0a2      	sub	sp, #136	; 0x88
    9dd0:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
    9dd4:	469e      	mov	lr, r3
    9dd6:	4614      	mov	r4, r2
    9dd8:	460d      	mov	r5, r1
    9dda:	9015      	str	r0, [sp, #84]	; 0x54
    9ddc:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    9de0:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    9de4:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    9de8:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
    9dec:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
    9dee:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
    9df2:	2100      	movs	r1, #0
    9df4:	9110      	str	r1, [sp, #64]	; 0x40
    9df6:	910f      	str	r1, [sp, #60]	; 0x3c
    9df8:	910f      	str	r1, [sp, #60]	; 0x3c
    9dfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9dfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9dfe:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9e02:	900d      	str	r0, [sp, #52]	; 0x34
    9e04:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9e08:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9e0c:	940a      	str	r4, [sp, #40]	; 0x28
    9e0e:	9509      	str	r5, [sp, #36]	; 0x24
    9e10:	f7ff feeb 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9e14:	9008      	str	r0, [sp, #32]
    9e16:	e7ff      	b.n	9e18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
    9e18:	9808      	ldr	r0, [sp, #32]
    9e1a:	f000 0001 	and.w	r0, r0, #1
    9e1e:	f7fe ff29 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e22:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9e26:	e7ff      	b.n	9e28 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
    9e28:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9e2c:	07c1      	lsls	r1, r0, #31
    9e2e:	2900      	cmp	r1, #0
    9e30:	d001      	beq.n	9e36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
    9e32:	e7ff      	b.n	9e34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
    9e34:	e00d      	b.n	9e52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
    9e36:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e38:	8a01      	ldrh	r1, [r0, #16]
    9e3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9e3c:	fa11 f182 	uxtah	r1, r1, r2
    9e40:	b28b      	uxth	r3, r1
    9e42:	468c      	mov	ip, r1
    9e44:	428b      	cmp	r3, r1
    9e46:	f8cd c01c 	str.w	ip, [sp, #28]
    9e4a:	f040 80c2 	bne.w	9fd2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
    9e4e:	e00d      	b.n	9e6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
    9e50:	defe      	udf	#254	; 0xfe
    9e52:	f008 fe7e 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e56:	e003      	b.n	9e60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
    }
    9e58:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    9e5c:	b022      	add	sp, #136	; 0x88
    9e5e:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
    9e60:	f00c f91c 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e64:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9e68:	e7ff      	b.n	9e6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
    9e6a:	e7f5      	b.n	9e58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9e6c:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e6e:	9907      	ldr	r1, [sp, #28]
    9e70:	f7ff fdec 	bl	9a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9e74:	9006      	str	r0, [sp, #24]
    9e76:	e7ff      	b.n	9e78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
    9e78:	9806      	ldr	r0, [sp, #24]
    9e7a:	f000 0001 	and.w	r0, r0, #1
    9e7e:	f7fe fef9 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e82:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9e86:	e7ff      	b.n	9e88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
    9e88:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9e8c:	07c1      	lsls	r1, r0, #31
    9e8e:	2900      	cmp	r1, #0
    9e90:	d001      	beq.n	9e96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
    9e92:	e7ff      	b.n	9e94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
    9e94:	e00d      	b.n	9eb2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
    9e96:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e98:	8a01      	ldrh	r1, [r0, #16]
    9e9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9e9c:	fa11 f182 	uxtah	r1, r1, r2
    9ea0:	b28b      	uxth	r3, r1
    9ea2:	468c      	mov	ip, r1
    9ea4:	428b      	cmp	r3, r1
    9ea6:	f8cd c014 	str.w	ip, [sp, #20]
    9eaa:	f040 809e 	bne.w	9fea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
    9eae:	e009      	b.n	9ec4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
    9eb0:	defe      	udf	#254	; 0xfe
    9eb2:	f008 fe4e 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9eb6:	e7ff      	b.n	9eb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
    9eb8:	f00c f8f0 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ebc:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9ec0:	e7ff      	b.n	9ec2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
    9ec2:	e7c9      	b.n	9e58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
    9ec4:	980d      	ldr	r0, [sp, #52]	; 0x34
    9ec6:	9905      	ldr	r1, [sp, #20]
    9ec8:	f7ff fdc0 	bl	9a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9ecc:	9004      	str	r0, [sp, #16]
    9ece:	e7ff      	b.n	9ed0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
    9ed0:	9804      	ldr	r0, [sp, #16]
    9ed2:	f000 0001 	and.w	r0, r0, #1
    9ed6:	f7fe fecd 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9eda:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    9ede:	e7ff      	b.n	9ee0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
    9ee0:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    9ee4:	07c1      	lsls	r1, r0, #31
    9ee6:	2900      	cmp	r1, #0
    9ee8:	d001      	beq.n	9eee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
    9eea:	e7ff      	b.n	9eec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
    9eec:	e010      	b.n	9f10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
    9eee:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
    9ef0:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
    9ef4:	2000      	movs	r0, #0
    9ef6:	9013      	str	r0, [sp, #76]	; 0x4c
    9ef8:	9012      	str	r0, [sp, #72]	; 0x48
    9efa:	9012      	str	r0, [sp, #72]	; 0x48
    9efc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9efe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9f00:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
    9f04:	980d      	ldr	r0, [sp, #52]	; 0x34
    9f06:	f7ff fe70 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9f0a:	9003      	str	r0, [sp, #12]
    9f0c:	e009      	b.n	9f22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
    9f0e:	defe      	udf	#254	; 0xfe
    9f10:	f008 fe1f 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9f14:	e7ff      	b.n	9f16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
    9f16:	f00c f8c1 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9f1a:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9f1e:	e7ff      	b.n	9f20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
    9f20:	e79a      	b.n	9e58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
    9f22:	9803      	ldr	r0, [sp, #12]
    9f24:	f000 0001 	and.w	r0, r0, #1
    9f28:	f7fe fea4 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9f2c:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9f30:	e7ff      	b.n	9f32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
    9f32:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    9f36:	07c1      	lsls	r1, r0, #31
    9f38:	2900      	cmp	r1, #0
    9f3a:	d001      	beq.n	9f40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
    9f3c:	e7ff      	b.n	9f3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
    9f3e:	e00c      	b.n	9f5a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
    9f40:	980d      	ldr	r0, [sp, #52]	; 0x34
    9f42:	8a41      	ldrh	r1, [r0, #18]
    9f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9f46:	fa11 f182 	uxtah	r1, r1, r2
    9f4a:	b28b      	uxth	r3, r1
    9f4c:	468c      	mov	ip, r1
    9f4e:	428b      	cmp	r3, r1
    9f50:	f8cd c008 	str.w	ip, [sp, #8]
    9f54:	d155      	bne.n	a002 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
    9f56:	e009      	b.n	9f6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
    9f58:	defe      	udf	#254	; 0xfe
    9f5a:	f008 fdfa 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9f5e:	e7ff      	b.n	9f60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
    9f60:	f00c f89c 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9f64:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9f68:	e7ff      	b.n	9f6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
    9f6a:	e775      	b.n	9e58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
    9f6c:	980d      	ldr	r0, [sp, #52]	; 0x34
    9f6e:	9902      	ldr	r1, [sp, #8]
    9f70:	f7ff fd6c 	bl	9a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9f74:	9001      	str	r0, [sp, #4]
    9f76:	e7ff      	b.n	9f78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
    9f78:	9801      	ldr	r0, [sp, #4]
    9f7a:	f000 0001 	and.w	r0, r0, #1
    9f7e:	f7fe fe79 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9f82:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    9f86:	e7ff      	b.n	9f88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
    9f88:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    9f8c:	07c1      	lsls	r1, r0, #31
    9f8e:	2900      	cmp	r1, #0
    9f90:	d001      	beq.n	9f96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
    9f92:	e7ff      	b.n	9f94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
    9f94:	e00c      	b.n	9fb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
    9f96:	980d      	ldr	r0, [sp, #52]	; 0x34
    9f98:	8a41      	ldrh	r1, [r0, #18]
    9f9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9f9c:	fa11 f182 	uxtah	r1, r1, r2
    9fa0:	b28b      	uxth	r3, r1
    9fa2:	468c      	mov	ip, r1
    9fa4:	428b      	cmp	r3, r1
    9fa6:	f8cd c000 	str.w	ip, [sp]
    9faa:	d136      	bne.n	a01a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
    9fac:	e009      	b.n	9fc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
    9fae:	defe      	udf	#254	; 0xfe
    9fb0:	f008 fdcf 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9fb4:	e7ff      	b.n	9fb6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
    9fb6:	f00c f871 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9fba:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9fbe:	e7ff      	b.n	9fc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
    9fc0:	e74a      	b.n	9e58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
    9fc2:	980d      	ldr	r0, [sp, #52]	; 0x34
    9fc4:	9900      	ldr	r1, [sp, #0]
    9fc6:	f7ff fd41 	bl	9a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9fca:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9fce:	e7ff      	b.n	9fd0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
    9fd0:	e742      	b.n	9e58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9fd2:	f24f 1040 	movw	r0, #61760	; 0xf140
    9fd6:	f2c0 0001 	movt	r0, #1
    9fda:	f24f 122c 	movw	r2, #61740	; 0xf12c
    9fde:	f2c0 0201 	movt	r2, #1
    9fe2:	211c      	movs	r1, #28
    9fe4:	f00e faa4 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9fe8:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
    9fea:	f24f 1040 	movw	r0, #61760	; 0xf140
    9fee:	f2c0 0001 	movt	r0, #1
    9ff2:	f24f 125c 	movw	r2, #61788	; 0xf15c
    9ff6:	f2c0 0201 	movt	r2, #1
    9ffa:	211c      	movs	r1, #28
    9ffc:	f00e fa98 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    a000:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
    a002:	f24f 1040 	movw	r0, #61760	; 0xf140
    a006:	f2c0 0001 	movt	r0, #1
    a00a:	f24f 126c 	movw	r2, #61804	; 0xf16c
    a00e:	f2c0 0201 	movt	r2, #1
    a012:	211c      	movs	r1, #28
    a014:	f00e fa8c 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    a018:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
    a01a:	f24f 1040 	movw	r0, #61760	; 0xf140
    a01e:	f2c0 0001 	movt	r0, #1
    a022:	f24f 127c 	movw	r2, #61820	; 0xf17c
    a026:	f2c0 0201 	movt	r2, #1
    a02a:	211c      	movs	r1, #28
    a02c:	f00e fa80 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    a030:	defe      	udf	#254	; 0xfe

0000a032 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
    a032:	b5b0      	push	{r4, r5, r7, lr}
    a034:	b08a      	sub	sp, #40	; 0x28
    a036:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    a03a:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    a03e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    a040:	9106      	str	r1, [sp, #24]
    a042:	9207      	str	r2, [sp, #28]
    a044:	9308      	str	r3, [sp, #32]
    a046:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    a04a:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
    a04e:	9100      	str	r1, [sp, #0]
    a050:	9201      	str	r2, [sp, #4]
    a052:	9302      	str	r3, [sp, #8]
    a054:	9403      	str	r4, [sp, #12]
    a056:	f88d e014 	strb.w	lr, [sp, #20]
    a05a:	f88d c015 	strb.w	ip, [sp, #21]
    a05e:	2100      	movs	r1, #0
    a060:	f8ad 1010 	strh.w	r1, [sp, #16]
    a064:	f8ad 1012 	strh.w	r1, [sp, #18]
    a068:	4669      	mov	r1, sp
        display
    a06a:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    a06e:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
    a072:	b00a      	add	sp, #40	; 0x28
    a074:	bdb0      	pop	{r4, r5, r7, pc}

0000a076 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
    a076:	b580      	push	{r7, lr}
    a078:	b0f6      	sub	sp, #472	; 0x1d8
    a07a:	904e      	str	r0, [sp, #312]	; 0x138
    a07c:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
    a07e:	9117      	str	r1, [sp, #92]	; 0x5c
    a080:	9016      	str	r0, [sp, #88]	; 0x58
    a082:	f009 fa67 	bl	13554 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
    a086:	9015      	str	r0, [sp, #84]	; 0x54
    a088:	e7ff      	b.n	a08a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
    a08a:	f24f 118c 	movw	r1, #61836	; 0xf18c
    a08e:	f2c0 0101 	movt	r1, #1
    a092:	f24f 139c 	movw	r3, #61852	; 0xf19c
    a096:	f2c0 0301 	movt	r3, #1
    a09a:	220d      	movs	r2, #13
    a09c:	9815      	ldr	r0, [sp, #84]	; 0x54
    a09e:	f7fe fdb0 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a0a2:	e7ff      	b.n	a0a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
    a0a4:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0a6:	f7ff fbbd 	bl	9824 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
    a0aa:	9014      	str	r0, [sp, #80]	; 0x50
    a0ac:	e7ff      	b.n	a0ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
    a0ae:	9814      	ldr	r0, [sp, #80]	; 0x50
    a0b0:	f000 0001 	and.w	r0, r0, #1
    a0b4:	f7fe fdde 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a0b8:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    a0bc:	e7ff      	b.n	a0be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
    a0be:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
    a0c2:	07c1      	lsls	r1, r0, #31
    a0c4:	2900      	cmp	r1, #0
    a0c6:	d001      	beq.n	a0cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
    a0c8:	e7ff      	b.n	a0ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
    a0ca:	e010      	b.n	a0ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
    a0cc:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
    a0ce:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    a0d2:	2000      	movs	r0, #0
    a0d4:	901a      	str	r0, [sp, #104]	; 0x68
    a0d6:	9019      	str	r0, [sp, #100]	; 0x64
    a0d8:	9019      	str	r0, [sp, #100]	; 0x64
    a0da:	9a19      	ldr	r2, [sp, #100]	; 0x64
    a0dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a0de:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    a0e2:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0e4:	f7ff fd81 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0e8:	9013      	str	r0, [sp, #76]	; 0x4c
    a0ea:	e00d      	b.n	a108 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
    a0ec:	defe      	udf	#254	; 0xfe
    a0ee:	f008 fd30 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a0f2:	e003      	b.n	a0fc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
    a0f4:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    a0f8:	b076      	add	sp, #472	; 0x1d8
    a0fa:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
    a0fc:	f00b ffce 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a100:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a104:	e7ff      	b.n	a106 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
    a106:	e7f5      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
    a108:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a10a:	f000 0001 	and.w	r0, r0, #1
    a10e:	f7fe fdb1 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a112:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    a116:	e7ff      	b.n	a118 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
    a118:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    a11c:	07c1      	lsls	r1, r0, #31
    a11e:	2900      	cmp	r1, #0
    a120:	d001      	beq.n	a126 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
    a122:	e7ff      	b.n	a124 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
    a124:	e005      	b.n	a132 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
    a126:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a128:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a12a:	f00b f80e 	bl	1514a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a12e:	e009      	b.n	a144 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
    a130:	defe      	udf	#254	; 0xfe
    a132:	f008 fd0e 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a136:	e7ff      	b.n	a138 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
    a138:	f00b ffb0 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a13c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a140:	e7ff      	b.n	a142 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
    a142:	e7d7      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a144:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
    a146:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    a14a:	2000      	movs	r0, #0
    a14c:	901d      	str	r0, [sp, #116]	; 0x74
    a14e:	901c      	str	r0, [sp, #112]	; 0x70
    a150:	901c      	str	r0, [sp, #112]	; 0x70
    a152:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a154:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a156:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
    a15a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a15c:	f7ff fd45 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a160:	9012      	str	r0, [sp, #72]	; 0x48
    a162:	e7ff      	b.n	a164 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
    a164:	9812      	ldr	r0, [sp, #72]	; 0x48
    a166:	f000 0001 	and.w	r0, r0, #1
    a16a:	f7fe fd83 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a16e:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
    a172:	e7ff      	b.n	a174 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
    a174:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
    a178:	07c1      	lsls	r1, r0, #31
    a17a:	2900      	cmp	r1, #0
    a17c:	d001      	beq.n	a182 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
    a17e:	e7ff      	b.n	a180 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
    a180:	e005      	b.n	a18e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
    a182:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a184:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a186:	f00a ffe0 	bl	1514a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a18a:	e009      	b.n	a1a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
    a18c:	defe      	udf	#254	; 0xfe
    a18e:	f008 fce0 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a192:	e7ff      	b.n	a194 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
    a194:	f00b ff82 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a198:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a19c:	e7ff      	b.n	a19e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
    a19e:	e7a9      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a1a0:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    a1a2:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    a1a6:	f24f 10b0 	movw	r0, #61872	; 0xf1b0
    a1aa:	f2c0 0001 	movt	r0, #1
    a1ae:	6800      	ldr	r0, [r0, #0]
    a1b0:	901f      	str	r0, [sp, #124]	; 0x7c
    a1b2:	2003      	movs	r0, #3
    a1b4:	9020      	str	r0, [sp, #128]	; 0x80
    a1b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    a1b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a1ba:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
    a1be:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1c0:	f7ff fd13 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a1c4:	9011      	str	r0, [sp, #68]	; 0x44
    a1c6:	e7ff      	b.n	a1c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
    a1c8:	9811      	ldr	r0, [sp, #68]	; 0x44
    a1ca:	f000 0001 	and.w	r0, r0, #1
    a1ce:	f7fe fd51 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a1d2:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    a1d6:	e7ff      	b.n	a1d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
    a1d8:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    a1dc:	07c1      	lsls	r1, r0, #31
    a1de:	2900      	cmp	r1, #0
    a1e0:	d001      	beq.n	a1e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
    a1e2:	e7ff      	b.n	a1e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
    a1e4:	e014      	b.n	a210 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
    a1e6:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a1e8:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    a1ec:	f24f 10b0 	movw	r0, #61872	; 0xf1b0
    a1f0:	f2c0 0001 	movt	r0, #1
    a1f4:	6800      	ldr	r0, [r0, #0]
    a1f6:	9022      	str	r0, [sp, #136]	; 0x88
    a1f8:	2003      	movs	r0, #3
    a1fa:	9023      	str	r0, [sp, #140]	; 0x8c
    a1fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a1fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a200:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
    a204:	9816      	ldr	r0, [sp, #88]	; 0x58
    a206:	f7ff fcf0 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a20a:	9010      	str	r0, [sp, #64]	; 0x40
    a20c:	e009      	b.n	a222 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    a20e:	defe      	udf	#254	; 0xfe
    a210:	f008 fc9f 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a214:	e7ff      	b.n	a216 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
    a216:	f00b ff41 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a21a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a21e:	e7ff      	b.n	a220 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
    a220:	e768      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a222:	9810      	ldr	r0, [sp, #64]	; 0x40
    a224:	f000 0001 	and.w	r0, r0, #1
    a228:	f7fe fd24 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a22c:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
    a230:	e7ff      	b.n	a232 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
    a232:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
    a236:	07c1      	lsls	r1, r0, #31
    a238:	2900      	cmp	r1, #0
    a23a:	d001      	beq.n	a240 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
    a23c:	e7ff      	b.n	a23e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
    a23e:	e014      	b.n	a26a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
    a240:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
    a242:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a246:	f24f 10bc 	movw	r0, #61884	; 0xf1bc
    a24a:	f2c0 0001 	movt	r0, #1
    a24e:	6800      	ldr	r0, [r0, #0]
    a250:	9025      	str	r0, [sp, #148]	; 0x94
    a252:	2006      	movs	r0, #6
    a254:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
    a256:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a258:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a25a:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
    a25e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a260:	f7ff fcc3 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a264:	900f      	str	r0, [sp, #60]	; 0x3c
    a266:	e009      	b.n	a27c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a268:	defe      	udf	#254	; 0xfe
    a26a:	f008 fc72 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a26e:	e7ff      	b.n	a270 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
    a270:	f00b ff14 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a274:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a278:	e7ff      	b.n	a27a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
    a27a:	e73b      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
    a27c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a27e:	f000 0001 	and.w	r0, r0, #1
    a282:	f7fe fcf7 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a286:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
    a28a:	e7ff      	b.n	a28c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a28c:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
    a290:	07c1      	lsls	r1, r0, #31
    a292:	2900      	cmp	r1, #0
    a294:	d001      	beq.n	a29a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
    a296:	e7ff      	b.n	a298 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
    a298:	e014      	b.n	a2c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
    a29a:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a29c:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
    a2a0:	f24f 10c4 	movw	r0, #61892	; 0xf1c4
    a2a4:	f2c0 0001 	movt	r0, #1
    a2a8:	6800      	ldr	r0, [r0, #0]
    a2aa:	9028      	str	r0, [sp, #160]	; 0xa0
    a2ac:	2001      	movs	r0, #1
    a2ae:	9029      	str	r0, [sp, #164]	; 0xa4
    a2b0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    a2b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    a2b4:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
    a2b8:	9816      	ldr	r0, [sp, #88]	; 0x58
    a2ba:	f7ff fc96 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a2be:	900e      	str	r0, [sp, #56]	; 0x38
    a2c0:	e009      	b.n	a2d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
    a2c2:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a2c4:	f008 fc45 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a2c8:	e7ff      	b.n	a2ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
    a2ca:	f00b fee7 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a2ce:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a2d2:	e7ff      	b.n	a2d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
    a2d4:	e70e      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a2d6:	980e      	ldr	r0, [sp, #56]	; 0x38
    a2d8:	f000 0001 	and.w	r0, r0, #1
    a2dc:	f7fe fcca 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a2e0:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
    a2e4:	e7ff      	b.n	a2e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
    a2e6:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
    a2ea:	07c1      	lsls	r1, r0, #31
    a2ec:	2900      	cmp	r1, #0
    a2ee:	d001      	beq.n	a2f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
    a2f0:	e7ff      	b.n	a2f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
    a2f2:	e014      	b.n	a31e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
    a2f4:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a2f6:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
    a2fa:	f24f 10cc 	movw	r0, #61900	; 0xf1cc
    a2fe:	f2c0 0001 	movt	r0, #1
    a302:	6800      	ldr	r0, [r0, #0]
    a304:	902b      	str	r0, [sp, #172]	; 0xac
    a306:	2003      	movs	r0, #3
    a308:	902c      	str	r0, [sp, #176]	; 0xb0
    a30a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    a30c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    a30e:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
    a312:	9816      	ldr	r0, [sp, #88]	; 0x58
    a314:	f7ff fc69 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a318:	900d      	str	r0, [sp, #52]	; 0x34
    a31a:	e009      	b.n	a330 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a31c:	defe      	udf	#254	; 0xfe
    a31e:	f008 fc18 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a322:	e7ff      	b.n	a324 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
    a324:	f00b feba 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a328:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a32c:	e7ff      	b.n	a32e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
    a32e:	e6e1      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a330:	980d      	ldr	r0, [sp, #52]	; 0x34
    a332:	f000 0001 	and.w	r0, r0, #1
    a336:	f7fe fc9d 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a33a:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
    a33e:	e7ff      	b.n	a340 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
    a340:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
    a344:	07c1      	lsls	r1, r0, #31
    a346:	2900      	cmp	r1, #0
    a348:	d001      	beq.n	a34e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
    a34a:	e7ff      	b.n	a34c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
    a34c:	e014      	b.n	a378 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
    a34e:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a350:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
    a354:	f24f 10d4 	movw	r0, #61908	; 0xf1d4
    a358:	f2c0 0001 	movt	r0, #1
    a35c:	6800      	ldr	r0, [r0, #0]
    a35e:	902e      	str	r0, [sp, #184]	; 0xb8
    a360:	2001      	movs	r0, #1
    a362:	902f      	str	r0, [sp, #188]	; 0xbc
    a364:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    a366:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    a368:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
    a36c:	9816      	ldr	r0, [sp, #88]	; 0x58
    a36e:	f7ff fc3c 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a372:	900c      	str	r0, [sp, #48]	; 0x30
    a374:	e009      	b.n	a38a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a376:	defe      	udf	#254	; 0xfe
    a378:	f008 fbeb 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a37c:	e7ff      	b.n	a37e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
    a37e:	f00b fe8d 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a382:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a386:	e7ff      	b.n	a388 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
    a388:	e6b4      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a38a:	980c      	ldr	r0, [sp, #48]	; 0x30
    a38c:	f000 0001 	and.w	r0, r0, #1
    a390:	f7fe fc70 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a394:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
    a398:	e7ff      	b.n	a39a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
    a39a:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
    a39e:	07c1      	lsls	r1, r0, #31
    a3a0:	2900      	cmp	r1, #0
    a3a2:	d001      	beq.n	a3a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
    a3a4:	e7ff      	b.n	a3a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
    a3a6:	e014      	b.n	a3d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
    a3a8:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a3aa:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
    a3ae:	f24f 10dc 	movw	r0, #61916	; 0xf1dc
    a3b2:	f2c0 0001 	movt	r0, #1
    a3b6:	6800      	ldr	r0, [r0, #0]
    a3b8:	9031      	str	r0, [sp, #196]	; 0xc4
    a3ba:	2002      	movs	r0, #2
    a3bc:	9032      	str	r0, [sp, #200]	; 0xc8
    a3be:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    a3c0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    a3c2:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
    a3c6:	9816      	ldr	r0, [sp, #88]	; 0x58
    a3c8:	f7ff fc0f 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a3cc:	900b      	str	r0, [sp, #44]	; 0x2c
    a3ce:	e009      	b.n	a3e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a3d0:	defe      	udf	#254	; 0xfe
    a3d2:	f008 fbbe 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a3d6:	e7ff      	b.n	a3d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
    a3d8:	f00b fe60 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a3dc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a3e0:	e7ff      	b.n	a3e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
    a3e2:	e687      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a3e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a3e6:	f000 0001 	and.w	r0, r0, #1
    a3ea:	f7fe fc43 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a3ee:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
    a3f2:	e7ff      	b.n	a3f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
    a3f4:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
    a3f8:	07c1      	lsls	r1, r0, #31
    a3fa:	2900      	cmp	r1, #0
    a3fc:	d001      	beq.n	a402 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
    a3fe:	e7ff      	b.n	a400 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
    a400:	e014      	b.n	a42c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
    a402:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a404:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
    a408:	f24f 10e4 	movw	r0, #61924	; 0xf1e4
    a40c:	f2c0 0001 	movt	r0, #1
    a410:	6800      	ldr	r0, [r0, #0]
    a412:	9034      	str	r0, [sp, #208]	; 0xd0
    a414:	2002      	movs	r0, #2
    a416:	9035      	str	r0, [sp, #212]	; 0xd4
    a418:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    a41a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    a41c:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
    a420:	9816      	ldr	r0, [sp, #88]	; 0x58
    a422:	f7ff fbe2 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a426:	900a      	str	r0, [sp, #40]	; 0x28
    a428:	e009      	b.n	a43e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a42a:	defe      	udf	#254	; 0xfe
    a42c:	f008 fb91 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a430:	e7ff      	b.n	a432 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
    a432:	f00b fe33 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a436:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a43a:	e7ff      	b.n	a43c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
    a43c:	e65a      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a43e:	980a      	ldr	r0, [sp, #40]	; 0x28
    a440:	f000 0001 	and.w	r0, r0, #1
    a444:	f7fe fc16 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a448:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
    a44c:	e7ff      	b.n	a44e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
    a44e:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
    a452:	07c1      	lsls	r1, r0, #31
    a454:	2900      	cmp	r1, #0
    a456:	d001      	beq.n	a45c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
    a458:	e7ff      	b.n	a45a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
    a45a:	e014      	b.n	a486 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
    a45c:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a45e:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
    a462:	f24f 10ec 	movw	r0, #61932	; 0xf1ec
    a466:	f2c0 0001 	movt	r0, #1
    a46a:	6800      	ldr	r0, [r0, #0]
    a46c:	9037      	str	r0, [sp, #220]	; 0xdc
    a46e:	2002      	movs	r0, #2
    a470:	9038      	str	r0, [sp, #224]	; 0xe0
    a472:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    a474:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    a476:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
    a47a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a47c:	f7ff fbb5 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a480:	9009      	str	r0, [sp, #36]	; 0x24
    a482:	e009      	b.n	a498 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a484:	defe      	udf	#254	; 0xfe
    a486:	f008 fb64 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a48a:	e7ff      	b.n	a48c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
    a48c:	f00b fe06 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a490:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a494:	e7ff      	b.n	a496 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
    a496:	e62d      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a498:	9809      	ldr	r0, [sp, #36]	; 0x24
    a49a:	f000 0001 	and.w	r0, r0, #1
    a49e:	f7fe fbe9 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a4a2:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
    a4a6:	e7ff      	b.n	a4a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
    a4a8:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
    a4ac:	07c1      	lsls	r1, r0, #31
    a4ae:	2900      	cmp	r1, #0
    a4b0:	d001      	beq.n	a4b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
    a4b2:	e7ff      	b.n	a4b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
    a4b4:	e014      	b.n	a4e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
    a4b6:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a4b8:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
    a4bc:	f24f 10f4 	movw	r0, #61940	; 0xf1f4
    a4c0:	f2c0 0001 	movt	r0, #1
    a4c4:	6800      	ldr	r0, [r0, #0]
    a4c6:	903a      	str	r0, [sp, #232]	; 0xe8
    a4c8:	2001      	movs	r0, #1
    a4ca:	903b      	str	r0, [sp, #236]	; 0xec
    a4cc:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    a4ce:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    a4d0:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
    a4d4:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4d6:	f7ff fb88 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a4da:	9008      	str	r0, [sp, #32]
    a4dc:	e009      	b.n	a4f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a4de:	defe      	udf	#254	; 0xfe
    a4e0:	f008 fb37 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a4e4:	e7ff      	b.n	a4e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
    a4e6:	f00b fdd9 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a4ea:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a4ee:	e7ff      	b.n	a4f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
    a4f0:	e600      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a4f2:	9808      	ldr	r0, [sp, #32]
    a4f4:	f000 0001 	and.w	r0, r0, #1
    a4f8:	f7fe fbbc 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a4fc:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
    a500:	e7ff      	b.n	a502 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
    a502:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
    a506:	07c1      	lsls	r1, r0, #31
    a508:	2900      	cmp	r1, #0
    a50a:	d001      	beq.n	a510 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
    a50c:	e7ff      	b.n	a50e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
    a50e:	e006      	b.n	a51e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
    a510:	9816      	ldr	r0, [sp, #88]	; 0x58
    a512:	7d41      	ldrb	r1, [r0, #21]
    a514:	07c9      	lsls	r1, r1, #31
    a516:	2900      	cmp	r1, #0
    a518:	d11a      	bne.n	a550 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
    a51a:	e009      	b.n	a530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a51c:	defe      	udf	#254	; 0xfe
    a51e:	f008 fb18 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a522:	e7ff      	b.n	a524 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
    a524:	f00b fdba 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a528:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a52c:	e7ff      	b.n	a52e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
    a52e:	e5e1      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a530:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
    a532:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    a536:	2000      	movs	r0, #0
    a538:	9041      	str	r0, [sp, #260]	; 0x104
    a53a:	9040      	str	r0, [sp, #256]	; 0x100
    a53c:	9040      	str	r0, [sp, #256]	; 0x100
    a53e:	9a40      	ldr	r2, [sp, #256]	; 0x100
    a540:	9b41      	ldr	r3, [sp, #260]	; 0x104
    a542:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
    a546:	9816      	ldr	r0, [sp, #88]	; 0x58
    a548:	f7ff fb4f 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a54c:	9007      	str	r0, [sp, #28]
    a54e:	e02a      	b.n	a5a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
    a550:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
    a552:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
    a556:	2000      	movs	r0, #0
    a558:	903e      	str	r0, [sp, #248]	; 0xf8
    a55a:	903d      	str	r0, [sp, #244]	; 0xf4
    a55c:	903d      	str	r0, [sp, #244]	; 0xf4
    a55e:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    a560:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    a562:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
    a566:	9816      	ldr	r0, [sp, #88]	; 0x58
    a568:	f7ff fb3f 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a56c:	9006      	str	r0, [sp, #24]
    a56e:	e7ff      	b.n	a570 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
    a570:	9806      	ldr	r0, [sp, #24]
    a572:	f000 0001 	and.w	r0, r0, #1
    a576:	f7fe fb7d 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a57a:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
    a57e:	e7ff      	b.n	a580 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
    a580:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
    a584:	07c1      	lsls	r1, r0, #31
    a586:	2900      	cmp	r1, #0
    a588:	d001      	beq.n	a58e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
    a58a:	e7ff      	b.n	a58c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
    a58c:	e001      	b.n	a592 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
    a58e:	e024      	b.n	a5da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
    a590:	defe      	udf	#254	; 0xfe
    a592:	f008 fade 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a596:	e7ff      	b.n	a598 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
    a598:	f00b fd80 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a59c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a5a0:	e7ff      	b.n	a5a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
    a5a2:	e7ff      	b.n	a5a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
    a5a4:	e5a6      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
    a5a6:	9807      	ldr	r0, [sp, #28]
    a5a8:	f000 0001 	and.w	r0, r0, #1
    a5ac:	f7fe fb62 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a5b0:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
    a5b4:	e7ff      	b.n	a5b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
    a5b6:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
    a5ba:	07c1      	lsls	r1, r0, #31
    a5bc:	2900      	cmp	r1, #0
    a5be:	d001      	beq.n	a5c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
    a5c0:	e7ff      	b.n	a5c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
    a5c2:	e001      	b.n	a5c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
    a5c4:	e009      	b.n	a5da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
    a5c6:	defe      	udf	#254	; 0xfe
    a5c8:	f008 fac3 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a5cc:	e7ff      	b.n	a5ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
    a5ce:	f00b fd65 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a5d2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a5d6:	e7ff      	b.n	a5d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
    a5d8:	e7e4      	b.n	a5a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
    a5da:	9816      	ldr	r0, [sp, #88]	; 0x58
    a5dc:	7d01      	ldrb	r1, [r0, #20]
    a5de:	07c9      	lsls	r1, r1, #31
    a5e0:	2900      	cmp	r1, #0
    a5e2:	d114      	bne.n	a60e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
    a5e4:	e7ff      	b.n	a5e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
    a5e6:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a5e8:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
    a5ec:	f24f 2004 	movw	r0, #61956	; 0xf204
    a5f0:	f2c0 0001 	movt	r0, #1
    a5f4:	6800      	ldr	r0, [r0, #0]
    a5f6:	9046      	str	r0, [sp, #280]	; 0x118
    a5f8:	2001      	movs	r0, #1
    a5fa:	9047      	str	r0, [sp, #284]	; 0x11c
    a5fc:	9a46      	ldr	r2, [sp, #280]	; 0x118
    a5fe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    a600:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
    a604:	9816      	ldr	r0, [sp, #88]	; 0x58
    a606:	f7ff faf0 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a60a:	9005      	str	r0, [sp, #20]
    a60c:	e02e      	b.n	a66c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
    a60e:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a610:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
    a614:	f24f 10fc 	movw	r0, #61948	; 0xf1fc
    a618:	f2c0 0001 	movt	r0, #1
    a61c:	6800      	ldr	r0, [r0, #0]
    a61e:	9043      	str	r0, [sp, #268]	; 0x10c
    a620:	2001      	movs	r0, #1
    a622:	9044      	str	r0, [sp, #272]	; 0x110
    a624:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    a626:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a628:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
    a62c:	9816      	ldr	r0, [sp, #88]	; 0x58
    a62e:	f7ff fadc 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a632:	9004      	str	r0, [sp, #16]
    a634:	e7ff      	b.n	a636 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
    a636:	9804      	ldr	r0, [sp, #16]
    a638:	f000 0001 	and.w	r0, r0, #1
    a63c:	f7fe fb1a 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a640:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
    a644:	e7ff      	b.n	a646 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
    a646:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
    a64a:	07c1      	lsls	r1, r0, #31
    a64c:	2900      	cmp	r1, #0
    a64e:	d001      	beq.n	a654 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
    a650:	e7ff      	b.n	a652 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
    a652:	e001      	b.n	a658 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
    a654:	e024      	b.n	a6a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a656:	defe      	udf	#254	; 0xfe
    a658:	f008 fa7b 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a65c:	e7ff      	b.n	a65e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
    a65e:	f00b fd1d 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a662:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a666:	e7ff      	b.n	a668 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
    a668:	e7ff      	b.n	a66a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a66a:	e543      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a66c:	9805      	ldr	r0, [sp, #20]
    a66e:	f000 0001 	and.w	r0, r0, #1
    a672:	f7fe faff 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a676:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
    a67a:	e7ff      	b.n	a67c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
    a67c:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    a680:	07c1      	lsls	r1, r0, #31
    a682:	2900      	cmp	r1, #0
    a684:	d001      	beq.n	a68a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
    a686:	e7ff      	b.n	a688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
    a688:	e001      	b.n	a68e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
    a68a:	e009      	b.n	a6a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a68c:	defe      	udf	#254	; 0xfe
    a68e:	f008 fa60 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a692:	e7ff      	b.n	a694 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
    a694:	f00b fd02 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a698:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a69c:	e7ff      	b.n	a69e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
    a69e:	e7e4      	b.n	a66a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a6a0:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a6a2:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
    a6a6:	f24f 200c 	movw	r0, #61964	; 0xf20c
    a6aa:	f2c0 0001 	movt	r0, #1
    a6ae:	6800      	ldr	r0, [r0, #0]
    a6b0:	9049      	str	r0, [sp, #292]	; 0x124
    a6b2:	2001      	movs	r0, #1
    a6b4:	904a      	str	r0, [sp, #296]	; 0x128
    a6b6:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a6b8:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    a6ba:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
    a6be:	9816      	ldr	r0, [sp, #88]	; 0x58
    a6c0:	f7ff fa93 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a6c4:	9003      	str	r0, [sp, #12]
    a6c6:	e7ff      	b.n	a6c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
    a6c8:	9803      	ldr	r0, [sp, #12]
    a6ca:	f000 0001 	and.w	r0, r0, #1
    a6ce:	f7fe fad1 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a6d2:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
    a6d6:	e7ff      	b.n	a6d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
    a6d8:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
    a6dc:	07c1      	lsls	r1, r0, #31
    a6de:	2900      	cmp	r1, #0
    a6e0:	d001      	beq.n	a6e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
    a6e2:	e7ff      	b.n	a6e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
    a6e4:	e010      	b.n	a708 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
    a6e6:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
    a6e8:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
    a6ec:	2000      	movs	r0, #0
    a6ee:	904d      	str	r0, [sp, #308]	; 0x134
    a6f0:	904c      	str	r0, [sp, #304]	; 0x130
    a6f2:	904c      	str	r0, [sp, #304]	; 0x130
    a6f4:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    a6f6:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    a6f8:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
    a6fc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a6fe:	f7ff fa74 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a702:	9002      	str	r0, [sp, #8]
    a704:	e009      	b.n	a71a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a706:	defe      	udf	#254	; 0xfe
    a708:	f008 fa23 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a70c:	e7ff      	b.n	a70e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
    a70e:	f00b fcc5 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a712:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a716:	e7ff      	b.n	a718 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
    a718:	e4ec      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
    a71a:	9802      	ldr	r0, [sp, #8]
    a71c:	f000 0001 	and.w	r0, r0, #1
    a720:	f7fe faa8 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a724:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
    a728:	e7ff      	b.n	a72a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
    a72a:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
    a72e:	07c1      	lsls	r1, r0, #31
    a730:	2900      	cmp	r1, #0
    a732:	d001      	beq.n	a738 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
    a734:	e7ff      	b.n	a736 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
    a736:	e005      	b.n	a744 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
    a738:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a73a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a73c:	f00a fd05 	bl	1514a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a740:	e009      	b.n	a756 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
    a742:	defe      	udf	#254	; 0xfe
    a744:	f008 fa05 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a748:	e7ff      	b.n	a74a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
    a74a:	f00b fca7 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a74e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a752:	e7ff      	b.n	a754 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
    a754:	e4ce      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    a756:	f009 fd33 	bl	141c0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    a75a:	9001      	str	r0, [sp, #4]
    a75c:	e7ff      	b.n	a75e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
    a75e:	f24f 0124 	movw	r1, #61476	; 0xf024
    a762:	f2c0 0101 	movt	r1, #1
    a766:	f24f 2310 	movw	r3, #61968	; 0xf210
    a76a:	f2c0 0301 	movt	r3, #1
    a76e:	220e      	movs	r2, #14
    a770:	9801      	ldr	r0, [sp, #4]
    a772:	f7fe fa46 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a776:	e7ff      	b.n	a778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
    a778:	2000      	movs	r0, #0
        Ok(())
    a77a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
    a77e:	e4b9      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

0000a780 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
    a780:	b580      	push	{r7, lr}
    a782:	b08a      	sub	sp, #40	; 0x28
    a784:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    a786:	f000 fa8c 	bl	aca2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
    a78a:	9307      	str	r3, [sp, #28]
    a78c:	9206      	str	r2, [sp, #24]
    a78e:	9105      	str	r1, [sp, #20]
    a790:	9004      	str	r0, [sp, #16]
    a792:	e7ff      	b.n	a794 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
    a794:	a804      	add	r0, sp, #16
    a796:	f00a fdc2 	bl	1531e <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    a79a:	9003      	str	r0, [sp, #12]
    a79c:	e7ff      	b.n	a79e <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
    a79e:	9803      	ldr	r0, [sp, #12]
    a7a0:	f00a fe90 	bl	154c4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    a7a4:	9002      	str	r0, [sp, #8]
    a7a6:	9101      	str	r1, [sp, #4]
    a7a8:	e7ff      	b.n	a7aa <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
    a7aa:	9802      	ldr	r0, [sp, #8]
    a7ac:	f000 0001 	and.w	r0, r0, #1
    a7b0:	9901      	ldr	r1, [sp, #4]
    a7b2:	b00a      	add	sp, #40	; 0x28
    a7b4:	bd80      	pop	{r7, pc}

0000a7b6 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
    a7b6:	b082      	sub	sp, #8
    a7b8:	4601      	mov	r1, r0
    a7ba:	f8ad 0004 	strh.w	r0, [sp, #4]
    a7be:	ba00      	rev	r0, r0
    a7c0:	0c00      	lsrs	r0, r0, #16
    a7c2:	f8ad 0006 	strh.w	r0, [sp, #6]
    a7c6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a7ca:	9000      	str	r0, [sp, #0]
    a7cc:	e7ff      	b.n	a7ce <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
    a7ce:	9800      	ldr	r0, [sp, #0]
    a7d0:	b002      	add	sp, #8
    a7d2:	4770      	bx	lr

0000a7d4 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
    a7d4:	b580      	push	{r7, lr}
    a7d6:	b084      	sub	sp, #16
    a7d8:	4601      	mov	r1, r0
    a7da:	f8ad 000e 	strh.w	r0, [sp, #14]
    a7de:	9102      	str	r1, [sp, #8]
    a7e0:	f7ff ffe9 	bl	a7b6 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
    a7e4:	9001      	str	r0, [sp, #4]
    a7e6:	e7ff      	b.n	a7e8 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
    a7e8:	9801      	ldr	r0, [sp, #4]
    a7ea:	b004      	add	sp, #16
    a7ec:	bd80      	pop	{r7, pc}

0000a7ee <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
    a7ee:	b580      	push	{r7, lr}
    a7f0:	b084      	sub	sp, #16
    a7f2:	9002      	str	r0, [sp, #8]
    a7f4:	9802      	ldr	r0, [sp, #8]
    a7f6:	f00a fcf6 	bl	151e6 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
    a7fa:	9001      	str	r0, [sp, #4]
    a7fc:	9100      	str	r1, [sp, #0]
    a7fe:	e7ff      	b.n	a800 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
    a800:	9801      	ldr	r0, [sp, #4]
    a802:	f000 0001 	and.w	r0, r0, #1
    a806:	9900      	ldr	r1, [sp, #0]
    a808:	b004      	add	sp, #16
    a80a:	bd80      	pop	{r7, pc}

0000a80c <_ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE>:
    a80c:	b081      	sub	sp, #4
    a80e:	9000      	str	r0, [sp, #0]
    a810:	b001      	add	sp, #4
    a812:	4770      	bx	lr

0000a814 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>:
    a814:	b580      	push	{r7, lr}
    a816:	b082      	sub	sp, #8
    a818:	9001      	str	r0, [sp, #4]
    a81a:	f000 f83e 	bl	a89a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    a81e:	e7ff      	b.n	a820 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE+0xc>
    a820:	b002      	add	sp, #8
    a822:	bd80      	pop	{r7, pc}

0000a824 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>:
    a824:	b580      	push	{r7, lr}
    a826:	b082      	sub	sp, #8
    a828:	9001      	str	r0, [sp, #4]
    a82a:	6801      	ldr	r1, [r0, #0]
    a82c:	2900      	cmp	r1, #0
    a82e:	9000      	str	r0, [sp, #0]
    a830:	d102      	bne.n	a838 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x14>
    a832:	e7ff      	b.n	a834 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>
    a834:	b002      	add	sp, #8
    a836:	bd80      	pop	{r7, pc}
    a838:	9800      	ldr	r0, [sp, #0]
    a83a:	3004      	adds	r0, #4
    a83c:	f7ff ffea 	bl	a814 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>
    a840:	e7f8      	b.n	a834 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>

0000a842 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>:
    a842:	b580      	push	{r7, lr}
    a844:	b082      	sub	sp, #8
    a846:	9001      	str	r0, [sp, #4]
    a848:	f00a feb7 	bl	155ba <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>
    a84c:	e7ff      	b.n	a84e <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE+0xc>
    a84e:	b002      	add	sp, #8
    a850:	bd80      	pop	{r7, pc}

0000a852 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>:
    a852:	b580      	push	{r7, lr}
    a854:	b082      	sub	sp, #8
    a856:	9001      	str	r0, [sp, #4]
    a858:	3024      	adds	r0, #36	; 0x24
    a85a:	f000 f81e 	bl	a89a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    a85e:	e7ff      	b.n	a860 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E+0xe>
    a860:	b002      	add	sp, #8
    a862:	bd80      	pop	{r7, pc}

0000a864 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>:
    a864:	b580      	push	{r7, lr}
    a866:	b082      	sub	sp, #8
    a868:	9001      	str	r0, [sp, #4]
    a86a:	9000      	str	r0, [sp, #0]
    a86c:	f7ff fff1 	bl	a852 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>
    a870:	e001      	b.n	a876 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0x12>
    a872:	b002      	add	sp, #8
    a874:	bd80      	pop	{r7, pc}
    a876:	9800      	ldr	r0, [sp, #0]
    a878:	3094      	adds	r0, #148	; 0x94
    a87a:	f7ff ffe2 	bl	a842 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a87e:	e7f8      	b.n	a872 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0xe>

0000a880 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>:
    a880:	b580      	push	{r7, lr}
    a882:	b082      	sub	sp, #8
    a884:	9001      	str	r0, [sp, #4]
    a886:	9000      	str	r0, [sp, #0]
    a888:	f00a febf 	bl	1560a <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>
    a88c:	e001      	b.n	a892 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0x12>
    a88e:	b002      	add	sp, #8
    a890:	bd80      	pop	{r7, pc}
    a892:	9800      	ldr	r0, [sp, #0]
    a894:	f7ff ffd5 	bl	a842 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a898:	e7f9      	b.n	a88e <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0xe>

0000a89a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>:
    a89a:	b580      	push	{r7, lr}
    a89c:	b082      	sub	sp, #8
    a89e:	9001      	str	r0, [sp, #4]
    a8a0:	f00a fe7b 	bl	1559a <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>
    a8a4:	e7ff      	b.n	a8a6 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E+0xc>
    a8a6:	b002      	add	sp, #8
    a8a8:	bd80      	pop	{r7, pc}

0000a8aa <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>:
    a8aa:	b580      	push	{r7, lr}
    a8ac:	b082      	sub	sp, #8
    a8ae:	9001      	str	r0, [sp, #4]
    a8b0:	6801      	ldr	r1, [r0, #0]
    a8b2:	2900      	cmp	r1, #0
    a8b4:	9000      	str	r0, [sp, #0]
    a8b6:	d102      	bne.n	a8be <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x14>
    a8b8:	e7ff      	b.n	a8ba <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>
    a8ba:	b002      	add	sp, #8
    a8bc:	bd80      	pop	{r7, pc}
    a8be:	9800      	ldr	r0, [sp, #0]
    a8c0:	3004      	adds	r0, #4
    a8c2:	f000 f805 	bl	a8d0 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>
    a8c6:	e7f8      	b.n	a8ba <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>

0000a8c8 <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
    a8c8:	b081      	sub	sp, #4
    a8ca:	9000      	str	r0, [sp, #0]
    a8cc:	b001      	add	sp, #4
    a8ce:	4770      	bx	lr

0000a8d0 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>:
    a8d0:	b580      	push	{r7, lr}
    a8d2:	b082      	sub	sp, #8
    a8d4:	9001      	str	r0, [sp, #4]
    a8d6:	f7ff ffb4 	bl	a842 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a8da:	e7ff      	b.n	a8dc <_ZN4core3ptr13drop_in_place17hf625580841d3425eE+0xc>
    a8dc:	b002      	add	sp, #8
    a8de:	bd80      	pop	{r7, pc}

0000a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
    a8e0:	b089      	sub	sp, #36	; 0x24
    a8e2:	9005      	str	r0, [sp, #20]
    a8e4:	9106      	str	r1, [sp, #24]
    a8e6:	9107      	str	r1, [sp, #28]
    a8e8:	9907      	ldr	r1, [sp, #28]
    a8ea:	9002      	str	r0, [sp, #8]
    a8ec:	9101      	str	r1, [sp, #4]
    a8ee:	e7ff      	b.n	a8f0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
    a8f0:	9802      	ldr	r0, [sp, #8]
    a8f2:	9008      	str	r0, [sp, #32]
    a8f4:	9908      	ldr	r1, [sp, #32]
    a8f6:	9100      	str	r1, [sp, #0]
    a8f8:	e7ff      	b.n	a8fa <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
    a8fa:	9800      	ldr	r0, [sp, #0]
    a8fc:	9003      	str	r0, [sp, #12]
    a8fe:	9901      	ldr	r1, [sp, #4]
    a900:	9104      	str	r1, [sp, #16]
    a902:	9803      	ldr	r0, [sp, #12]
    a904:	9904      	ldr	r1, [sp, #16]
    a906:	b009      	add	sp, #36	; 0x24
    a908:	4770      	bx	lr
	...

0000a90c <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
    a90c:	b08a      	sub	sp, #40	; 0x28
    a90e:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
    a910:	7800      	ldrb	r0, [r0, #0]
    a912:	9001      	str	r0, [sp, #4]
    a914:	9901      	ldr	r1, [sp, #4]
    a916:	e8df f011 	tbh	[pc, r1, lsl #1]
    a91a:	0103      	.short	0x0103
    a91c:	01020107 	.word	0x01020107
    a920:	010c0102 	.word	0x010c0102
    a924:	01020102 	.word	0x01020102
    a928:	01020102 	.word	0x01020102
    a92c:	01020111 	.word	0x01020111
    a930:	01020102 	.word	0x01020102
    a934:	01020102 	.word	0x01020102
    a938:	01160102 	.word	0x01160102
    a93c:	0120011b 	.word	0x0120011b
    a940:	01020125 	.word	0x01020125
    a944:	01020102 	.word	0x01020102
    a948:	01020102 	.word	0x01020102
    a94c:	01020102 	.word	0x01020102
    a950:	01020102 	.word	0x01020102
    a954:	01020102 	.word	0x01020102
    a958:	012a0102 	.word	0x012a0102
    a95c:	0102012f 	.word	0x0102012f
    a960:	01020102 	.word	0x01020102
    a964:	01020102 	.word	0x01020102
    a968:	01340102 	.word	0x01340102
    a96c:	013e0139 	.word	0x013e0139
    a970:	01480143 	.word	0x01480143
    a974:	014d0102 	.word	0x014d0102
    a978:	01520102 	.word	0x01520102
    a97c:	01020102 	.word	0x01020102
    a980:	01020102 	.word	0x01020102
    a984:	015c0102 	.word	0x015c0102
    a988:	01020102 	.word	0x01020102
    a98c:	01570102 	.word	0x01570102
    a990:	01020102 	.word	0x01020102
    a994:	01020102 	.word	0x01020102
    a998:	01020102 	.word	0x01020102
    a99c:	01020102 	.word	0x01020102
    a9a0:	01020102 	.word	0x01020102
    a9a4:	01020102 	.word	0x01020102
    a9a8:	01020102 	.word	0x01020102
    a9ac:	01020102 	.word	0x01020102
    a9b0:	01020102 	.word	0x01020102
    a9b4:	01020102 	.word	0x01020102
    a9b8:	01020102 	.word	0x01020102
    a9bc:	01020102 	.word	0x01020102
    a9c0:	01020102 	.word	0x01020102
    a9c4:	01020102 	.word	0x01020102
    a9c8:	01020102 	.word	0x01020102
    a9cc:	01020102 	.word	0x01020102
    a9d0:	01020102 	.word	0x01020102
    a9d4:	01020102 	.word	0x01020102
    a9d8:	01020102 	.word	0x01020102
    a9dc:	01020102 	.word	0x01020102
    a9e0:	01020102 	.word	0x01020102
    a9e4:	01020102 	.word	0x01020102
    a9e8:	01020102 	.word	0x01020102
    a9ec:	01020102 	.word	0x01020102
    a9f0:	01020102 	.word	0x01020102
    a9f4:	01020102 	.word	0x01020102
    a9f8:	01020102 	.word	0x01020102
    a9fc:	01020102 	.word	0x01020102
    aa00:	01020102 	.word	0x01020102
    aa04:	01020102 	.word	0x01020102
    aa08:	01020102 	.word	0x01020102
    aa0c:	01020102 	.word	0x01020102
    aa10:	01020102 	.word	0x01020102
    aa14:	01020102 	.word	0x01020102
    aa18:	01020102 	.word	0x01020102
    aa1c:	01020102 	.word	0x01020102
    aa20:	01020102 	.word	0x01020102
    aa24:	01020102 	.word	0x01020102
    aa28:	01020102 	.word	0x01020102
    aa2c:	01020102 	.word	0x01020102
    aa30:	01020102 	.word	0x01020102
    aa34:	01020102 	.word	0x01020102
    aa38:	01020102 	.word	0x01020102
    aa3c:	01020102 	.word	0x01020102
    aa40:	01020102 	.word	0x01020102
    aa44:	01020102 	.word	0x01020102
    aa48:	01020102 	.word	0x01020102
    aa4c:	01020102 	.word	0x01020102
    aa50:	01020102 	.word	0x01020102
    aa54:	01020102 	.word	0x01020102
    aa58:	01020102 	.word	0x01020102
    aa5c:	01020102 	.word	0x01020102
    aa60:	01020102 	.word	0x01020102
    aa64:	01020102 	.word	0x01020102
    aa68:	01020102 	.word	0x01020102
    aa6c:	01020102 	.word	0x01020102
    aa70:	01020102 	.word	0x01020102
    aa74:	01020102 	.word	0x01020102
    aa78:	01020102 	.word	0x01020102
    aa7c:	01660161 	.word	0x01660161
    aa80:	0170016b 	.word	0x0170016b
    aa84:	01750102 	.word	0x01750102
    aa88:	01020102 	.word	0x01020102
    aa8c:	01020102 	.word	0x01020102
    aa90:	01020102 	.word	0x01020102
    aa94:	01020102 	.word	0x01020102
    aa98:	017a0102 	.word	0x017a0102
    aa9c:	0184017f 	.word	0x0184017f
    aaa0:	018e0189 	.word	0x018e0189
    aaa4:	01020193 	.word	0x01020193
    aaa8:	01020102 	.word	0x01020102
    aaac:	01020102 	.word	0x01020102
    aab0:	01020102 	.word	0x01020102
    aab4:	01020102 	.word	0x01020102
    aab8:	01020102 	.word	0x01020102
    aabc:	01020102 	.word	0x01020102
    aac0:	01020102 	.word	0x01020102
    aac4:	01020102 	.word	0x01020102
    aac8:	01020102 	.word	0x01020102
    aacc:	01980102 	.word	0x01980102
    aad0:	01a2019d 	.word	0x01a2019d
    aad4:	010201a7 	.word	0x010201a7
    aad8:	01b10102 	.word	0x01b10102
    aadc:	010200fd 	.word	0x010200fd
    aae0:	01020102 	.word	0x01020102
    aae4:	01020102 	.word	0x01020102
    aae8:	01020102 	.word	0x01020102
    aaec:	01020102 	.word	0x01020102
    aaf0:	01020102 	.word	0x01020102
    aaf4:	01020102 	.word	0x01020102
    aaf8:	01020102 	.word	0x01020102
    aafc:	01020102 	.word	0x01020102
    ab00:	01020102 	.word	0x01020102
    ab04:	01020102 	.word	0x01020102
    ab08:	01020102 	.word	0x01020102
    ab0c:	01020102 	.word	0x01020102
    ab10:	01ac0102 	.word	0x01ac0102
    ab14:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    ab16:	9007      	str	r0, [sp, #28]
    ab18:	20e1      	movs	r0, #225	; 0xe1
    ab1a:	9006      	str	r0, [sp, #24]
    ab1c:	e0b3      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab1e:	defe      	udf	#254	; 0xfe
    ab20:	2000      	movs	r0, #0
    ab22:	9007      	str	r0, [sp, #28]
    ab24:	9006      	str	r0, [sp, #24]
    ab26:	e0ae      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab28:	2000      	movs	r0, #0
    ab2a:	9007      	str	r0, [sp, #28]
    ab2c:	2001      	movs	r0, #1
    ab2e:	9006      	str	r0, [sp, #24]
    ab30:	e0a9      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab32:	2000      	movs	r0, #0
    ab34:	9007      	str	r0, [sp, #28]
    ab36:	2004      	movs	r0, #4
    ab38:	9006      	str	r0, [sp, #24]
    ab3a:	e0a4      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab3c:	2000      	movs	r0, #0
    ab3e:	9007      	str	r0, [sp, #28]
    ab40:	2009      	movs	r0, #9
    ab42:	9006      	str	r0, [sp, #24]
    ab44:	e09f      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab46:	2000      	movs	r0, #0
    ab48:	9007      	str	r0, [sp, #28]
    ab4a:	2010      	movs	r0, #16
    ab4c:	9006      	str	r0, [sp, #24]
    ab4e:	e09a      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab50:	2000      	movs	r0, #0
    ab52:	9007      	str	r0, [sp, #28]
    ab54:	2011      	movs	r0, #17
    ab56:	9006      	str	r0, [sp, #24]
    ab58:	e095      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab5a:	2000      	movs	r0, #0
    ab5c:	9007      	str	r0, [sp, #28]
    ab5e:	2012      	movs	r0, #18
    ab60:	9006      	str	r0, [sp, #24]
    ab62:	e090      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab64:	2000      	movs	r0, #0
    ab66:	9007      	str	r0, [sp, #28]
    ab68:	2013      	movs	r0, #19
    ab6a:	9006      	str	r0, [sp, #24]
    ab6c:	e08b      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab6e:	2000      	movs	r0, #0
    ab70:	9007      	str	r0, [sp, #28]
    ab72:	2020      	movs	r0, #32
    ab74:	9006      	str	r0, [sp, #24]
    ab76:	e086      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab78:	2000      	movs	r0, #0
    ab7a:	9007      	str	r0, [sp, #28]
    ab7c:	2021      	movs	r0, #33	; 0x21
    ab7e:	9006      	str	r0, [sp, #24]
    ab80:	e081      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab82:	2000      	movs	r0, #0
    ab84:	9007      	str	r0, [sp, #28]
    ab86:	2028      	movs	r0, #40	; 0x28
    ab88:	9006      	str	r0, [sp, #24]
    ab8a:	e07c      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab8c:	2000      	movs	r0, #0
    ab8e:	9007      	str	r0, [sp, #28]
    ab90:	2029      	movs	r0, #41	; 0x29
    ab92:	9006      	str	r0, [sp, #24]
    ab94:	e077      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab96:	2000      	movs	r0, #0
    ab98:	9007      	str	r0, [sp, #28]
    ab9a:	202a      	movs	r0, #42	; 0x2a
    ab9c:	9006      	str	r0, [sp, #24]
    ab9e:	e072      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aba0:	2000      	movs	r0, #0
    aba2:	9007      	str	r0, [sp, #28]
    aba4:	202b      	movs	r0, #43	; 0x2b
    aba6:	9006      	str	r0, [sp, #24]
    aba8:	e06d      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abaa:	2000      	movs	r0, #0
    abac:	9007      	str	r0, [sp, #28]
    abae:	202c      	movs	r0, #44	; 0x2c
    abb0:	9006      	str	r0, [sp, #24]
    abb2:	e068      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abb4:	2000      	movs	r0, #0
    abb6:	9007      	str	r0, [sp, #28]
    abb8:	202e      	movs	r0, #46	; 0x2e
    abba:	9006      	str	r0, [sp, #24]
    abbc:	e063      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abbe:	2000      	movs	r0, #0
    abc0:	9007      	str	r0, [sp, #28]
    abc2:	2030      	movs	r0, #48	; 0x30
    abc4:	9006      	str	r0, [sp, #24]
    abc6:	e05e      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abc8:	2000      	movs	r0, #0
    abca:	9007      	str	r0, [sp, #28]
    abcc:	203a      	movs	r0, #58	; 0x3a
    abce:	9006      	str	r0, [sp, #24]
    abd0:	e059      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abd2:	2000      	movs	r0, #0
    abd4:	9007      	str	r0, [sp, #28]
    abd6:	2036      	movs	r0, #54	; 0x36
    abd8:	9006      	str	r0, [sp, #24]
    abda:	e054      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abdc:	2000      	movs	r0, #0
    abde:	9007      	str	r0, [sp, #28]
    abe0:	20b1      	movs	r0, #177	; 0xb1
    abe2:	9006      	str	r0, [sp, #24]
    abe4:	e04f      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abe6:	2000      	movs	r0, #0
    abe8:	9007      	str	r0, [sp, #28]
    abea:	20b2      	movs	r0, #178	; 0xb2
    abec:	9006      	str	r0, [sp, #24]
    abee:	e04a      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abf0:	2000      	movs	r0, #0
    abf2:	9007      	str	r0, [sp, #28]
    abf4:	20b3      	movs	r0, #179	; 0xb3
    abf6:	9006      	str	r0, [sp, #24]
    abf8:	e045      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abfa:	2000      	movs	r0, #0
    abfc:	9007      	str	r0, [sp, #28]
    abfe:	20b4      	movs	r0, #180	; 0xb4
    ac00:	9006      	str	r0, [sp, #24]
    ac02:	e040      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac04:	2000      	movs	r0, #0
    ac06:	9007      	str	r0, [sp, #28]
    ac08:	20b6      	movs	r0, #182	; 0xb6
    ac0a:	9006      	str	r0, [sp, #24]
    ac0c:	e03b      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac0e:	2000      	movs	r0, #0
    ac10:	9007      	str	r0, [sp, #28]
    ac12:	20c0      	movs	r0, #192	; 0xc0
    ac14:	9006      	str	r0, [sp, #24]
    ac16:	e036      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac18:	2000      	movs	r0, #0
    ac1a:	9007      	str	r0, [sp, #28]
    ac1c:	20c1      	movs	r0, #193	; 0xc1
    ac1e:	9006      	str	r0, [sp, #24]
    ac20:	e031      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac22:	2000      	movs	r0, #0
    ac24:	9007      	str	r0, [sp, #28]
    ac26:	20c2      	movs	r0, #194	; 0xc2
    ac28:	9006      	str	r0, [sp, #24]
    ac2a:	e02c      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac2c:	2000      	movs	r0, #0
    ac2e:	9007      	str	r0, [sp, #28]
    ac30:	20c3      	movs	r0, #195	; 0xc3
    ac32:	9006      	str	r0, [sp, #24]
    ac34:	e027      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac36:	2000      	movs	r0, #0
    ac38:	9007      	str	r0, [sp, #28]
    ac3a:	20c4      	movs	r0, #196	; 0xc4
    ac3c:	9006      	str	r0, [sp, #24]
    ac3e:	e022      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac40:	2000      	movs	r0, #0
    ac42:	9007      	str	r0, [sp, #28]
    ac44:	20c5      	movs	r0, #197	; 0xc5
    ac46:	9006      	str	r0, [sp, #24]
    ac48:	e01d      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac4a:	2000      	movs	r0, #0
    ac4c:	9007      	str	r0, [sp, #28]
    ac4e:	20da      	movs	r0, #218	; 0xda
    ac50:	9006      	str	r0, [sp, #24]
    ac52:	e018      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac54:	2000      	movs	r0, #0
    ac56:	9007      	str	r0, [sp, #28]
    ac58:	20db      	movs	r0, #219	; 0xdb
    ac5a:	9006      	str	r0, [sp, #24]
    ac5c:	e013      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac5e:	2000      	movs	r0, #0
    ac60:	9007      	str	r0, [sp, #28]
    ac62:	20dc      	movs	r0, #220	; 0xdc
    ac64:	9006      	str	r0, [sp, #24]
    ac66:	e00e      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac68:	2000      	movs	r0, #0
    ac6a:	9007      	str	r0, [sp, #28]
    ac6c:	20dd      	movs	r0, #221	; 0xdd
    ac6e:	9006      	str	r0, [sp, #24]
    ac70:	e009      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac72:	2000      	movs	r0, #0
    ac74:	9007      	str	r0, [sp, #28]
    ac76:	20fc      	movs	r0, #252	; 0xfc
    ac78:	9006      	str	r0, [sp, #24]
    ac7a:	e004      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac7c:	2000      	movs	r0, #0
    ac7e:	9007      	str	r0, [sp, #28]
    ac80:	20e0      	movs	r0, #224	; 0xe0
    ac82:	9006      	str	r0, [sp, #24]
    ac84:	e7ff      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac86:	9806      	ldr	r0, [sp, #24]
    ac88:	9907      	ldr	r1, [sp, #28]
    ac8a:	9105      	str	r1, [sp, #20]
    ac8c:	9004      	str	r0, [sp, #16]
    ac8e:	2000      	movs	r0, #0
    ac90:	9003      	str	r0, [sp, #12]
    ac92:	2001      	movs	r0, #1
    ac94:	9002      	str	r0, [sp, #8]
    ac96:	9802      	ldr	r0, [sp, #8]
    ac98:	9903      	ldr	r1, [sp, #12]
    ac9a:	9a04      	ldr	r2, [sp, #16]
    ac9c:	9b05      	ldr	r3, [sp, #20]
    ac9e:	b00a      	add	sp, #40	; 0x28
    aca0:	4770      	bx	lr

0000aca2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
    aca2:	b580      	push	{r7, lr}
    aca4:	b08a      	sub	sp, #40	; 0x28
    aca6:	9009      	str	r0, [sp, #36]	; 0x24
    aca8:	f7ff fe30 	bl	a90c <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
    acac:	9108      	str	r1, [sp, #32]
    acae:	9007      	str	r0, [sp, #28]
    acb0:	9306      	str	r3, [sp, #24]
    acb2:	9205      	str	r2, [sp, #20]
    acb4:	e7ff      	b.n	acb6 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
    acb6:	9807      	ldr	r0, [sp, #28]
    acb8:	9908      	ldr	r1, [sp, #32]
    acba:	9a05      	ldr	r2, [sp, #20]
    acbc:	9b06      	ldr	r3, [sp, #24]
    acbe:	f000 f859 	bl	ad74 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
    acc2:	9104      	str	r1, [sp, #16]
    acc4:	9003      	str	r0, [sp, #12]
    acc6:	9302      	str	r3, [sp, #8]
    acc8:	9201      	str	r2, [sp, #4]
    acca:	e7ff      	b.n	accc <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
    accc:	9803      	ldr	r0, [sp, #12]
    acce:	9904      	ldr	r1, [sp, #16]
    acd0:	9a01      	ldr	r2, [sp, #4]
    acd2:	9b02      	ldr	r3, [sp, #8]
    acd4:	b00a      	add	sp, #40	; 0x28
    acd6:	bd80      	pop	{r7, pc}

0000acd8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
    acd8:	b08a      	sub	sp, #40	; 0x28
    acda:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
    acdc:	7800      	ldrb	r0, [r0, #0]
    acde:	4601      	mov	r1, r0
    ace0:	2800      	cmp	r0, #0
    ace2:	9101      	str	r1, [sp, #4]
    ace4:	d00f      	beq.n	ad06 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
    ace6:	e7ff      	b.n	ace8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
    ace8:	9801      	ldr	r0, [sp, #4]
    acea:	2860      	cmp	r0, #96	; 0x60
    acec:	d00f      	beq.n	ad0e <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
    acee:	e7ff      	b.n	acf0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
    acf0:	9801      	ldr	r0, [sp, #4]
    acf2:	28a0      	cmp	r0, #160	; 0xa0
    acf4:	d001      	beq.n	acfa <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
    acf6:	e7ff      	b.n	acf8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
    acf8:	e00e      	b.n	ad18 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
    acfa:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    acfc:	9007      	str	r0, [sp, #28]
    acfe:	20a0      	movs	r0, #160	; 0xa0
    ad00:	9006      	str	r0, [sp, #24]
    ad02:	e00e      	b.n	ad22 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ad04:	defe      	udf	#254	; 0xfe
    ad06:	2000      	movs	r0, #0
    ad08:	9007      	str	r0, [sp, #28]
    ad0a:	9006      	str	r0, [sp, #24]
    ad0c:	e009      	b.n	ad22 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ad0e:	2000      	movs	r0, #0
    ad10:	9007      	str	r0, [sp, #28]
    ad12:	2060      	movs	r0, #96	; 0x60
    ad14:	9006      	str	r0, [sp, #24]
    ad16:	e004      	b.n	ad22 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ad18:	2000      	movs	r0, #0
    ad1a:	9007      	str	r0, [sp, #28]
    ad1c:	20c0      	movs	r0, #192	; 0xc0
    ad1e:	9006      	str	r0, [sp, #24]
    ad20:	e7ff      	b.n	ad22 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ad22:	9806      	ldr	r0, [sp, #24]
    ad24:	9907      	ldr	r1, [sp, #28]
    ad26:	9105      	str	r1, [sp, #20]
    ad28:	9004      	str	r0, [sp, #16]
    ad2a:	2000      	movs	r0, #0
    ad2c:	9003      	str	r0, [sp, #12]
    ad2e:	2001      	movs	r0, #1
    ad30:	9002      	str	r0, [sp, #8]
    ad32:	9802      	ldr	r0, [sp, #8]
    ad34:	9903      	ldr	r1, [sp, #12]
    ad36:	9a04      	ldr	r2, [sp, #16]
    ad38:	9b05      	ldr	r3, [sp, #20]
    ad3a:	b00a      	add	sp, #40	; 0x28
    ad3c:	4770      	bx	lr

0000ad3e <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
    ad3e:	b580      	push	{r7, lr}
    ad40:	b08a      	sub	sp, #40	; 0x28
    ad42:	9009      	str	r0, [sp, #36]	; 0x24
    ad44:	f7ff ffc8 	bl	acd8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
    ad48:	9108      	str	r1, [sp, #32]
    ad4a:	9007      	str	r0, [sp, #28]
    ad4c:	9306      	str	r3, [sp, #24]
    ad4e:	9205      	str	r2, [sp, #20]
    ad50:	e7ff      	b.n	ad52 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
    ad52:	9807      	ldr	r0, [sp, #28]
    ad54:	9908      	ldr	r1, [sp, #32]
    ad56:	9a05      	ldr	r2, [sp, #20]
    ad58:	9b06      	ldr	r3, [sp, #24]
    ad5a:	f000 f863 	bl	ae24 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
    ad5e:	9104      	str	r1, [sp, #16]
    ad60:	9003      	str	r0, [sp, #12]
    ad62:	9302      	str	r3, [sp, #8]
    ad64:	9201      	str	r2, [sp, #4]
    ad66:	e7ff      	b.n	ad68 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
    ad68:	9803      	ldr	r0, [sp, #12]
    ad6a:	9904      	ldr	r1, [sp, #16]
    ad6c:	9a01      	ldr	r2, [sp, #4]
    ad6e:	9b02      	ldr	r3, [sp, #8]
    ad70:	b00a      	add	sp, #40	; 0x28
    ad72:	bd80      	pop	{r7, pc}

0000ad74 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
    ad74:	b5b0      	push	{r4, r5, r7, lr}
    ad76:	b090      	sub	sp, #64	; 0x40
    ad78:	469c      	mov	ip, r3
    ad7a:	4696      	mov	lr, r2
    ad7c:	460c      	mov	r4, r1
    ad7e:	4605      	mov	r5, r0
    ad80:	9103      	str	r1, [sp, #12]
    ad82:	9002      	str	r0, [sp, #8]
    ad84:	9305      	str	r3, [sp, #20]
    ad86:	9204      	str	r2, [sp, #16]
    ad88:	2000      	movs	r0, #0
    ad8a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad8e:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad92:	2001      	movs	r0, #1
    ad94:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad98:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad9c:	9802      	ldr	r0, [sp, #8]
    ad9e:	2800      	cmp	r0, #0
    ada0:	d001      	beq.n	ada6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
    ada2:	e7ff      	b.n	ada4 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
    ada4:	e004      	b.n	adb0 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
    ada6:	2000      	movs	r0, #0
    ada8:	9007      	str	r0, [sp, #28]
    adaa:	9006      	str	r0, [sp, #24]
    adac:	e023      	b.n	adf6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    adae:	defe      	udf	#254	; 0xfe
    adb0:	2000      	movs	r0, #0
    adb2:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    adb6:	9904      	ldr	r1, [sp, #16]
    adb8:	9a05      	ldr	r2, [sp, #20]
    adba:	920f      	str	r2, [sp, #60]	; 0x3c
    adbc:	910e      	str	r1, [sp, #56]	; 0x38
    adbe:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    adc2:	920b      	str	r2, [sp, #44]	; 0x2c
    adc4:	910a      	str	r1, [sp, #40]	; 0x28
    adc6:	980a      	ldr	r0, [sp, #40]	; 0x28
    adc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    adca:	f000 f883 	bl	aed4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
    adce:	9101      	str	r1, [sp, #4]
    add0:	9000      	str	r0, [sp, #0]
    add2:	e7ff      	b.n	add4 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
    add4:	9800      	ldr	r0, [sp, #0]
    add6:	9008      	str	r0, [sp, #32]
    add8:	9901      	ldr	r1, [sp, #4]
    adda:	9109      	str	r1, [sp, #36]	; 0x24
    addc:	2200      	movs	r2, #0
    adde:	9207      	str	r2, [sp, #28]
    ade0:	2201      	movs	r2, #1
    ade2:	9206      	str	r2, [sp, #24]
    ade4:	e007      	b.n	adf6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    ade6:	9802      	ldr	r0, [sp, #8]
    ade8:	2801      	cmp	r0, #1
    adea:	d010      	beq.n	ae0e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
    adec:	e019      	b.n	ae22 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
    adee:	2000      	movs	r0, #0
    adf0:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    adf4:	e7f7      	b.n	ade6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    adf6:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    adfa:	07c0      	lsls	r0, r0, #31
    adfc:	2800      	cmp	r0, #0
    adfe:	d1f6      	bne.n	adee <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
    ae00:	e7f1      	b.n	ade6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    ae02:	9806      	ldr	r0, [sp, #24]
    ae04:	9907      	ldr	r1, [sp, #28]
    ae06:	9a08      	ldr	r2, [sp, #32]
    ae08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae0a:	b010      	add	sp, #64	; 0x40
    ae0c:	bdb0      	pop	{r4, r5, r7, pc}
    ae0e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    ae12:	07c0      	lsls	r0, r0, #31
    ae14:	2800      	cmp	r0, #0
    ae16:	d0f4      	beq.n	ae02 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    ae18:	e7ff      	b.n	ae1a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
    ae1a:	2000      	movs	r0, #0
    ae1c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ae20:	e7ef      	b.n	ae02 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    ae22:	e7ee      	b.n	ae02 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

0000ae24 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
    ae24:	b5b0      	push	{r4, r5, r7, lr}
    ae26:	b090      	sub	sp, #64	; 0x40
    ae28:	469c      	mov	ip, r3
    ae2a:	4696      	mov	lr, r2
    ae2c:	460c      	mov	r4, r1
    ae2e:	4605      	mov	r5, r0
    ae30:	9103      	str	r1, [sp, #12]
    ae32:	9002      	str	r0, [sp, #8]
    ae34:	9305      	str	r3, [sp, #20]
    ae36:	9204      	str	r2, [sp, #16]
    ae38:	2000      	movs	r0, #0
    ae3a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ae3e:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ae42:	2001      	movs	r0, #1
    ae44:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ae48:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ae4c:	9802      	ldr	r0, [sp, #8]
    ae4e:	2800      	cmp	r0, #0
    ae50:	d001      	beq.n	ae56 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
    ae52:	e7ff      	b.n	ae54 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
    ae54:	e004      	b.n	ae60 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
    ae56:	2000      	movs	r0, #0
    ae58:	9007      	str	r0, [sp, #28]
    ae5a:	9006      	str	r0, [sp, #24]
    ae5c:	e023      	b.n	aea6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ae5e:	defe      	udf	#254	; 0xfe
    ae60:	2000      	movs	r0, #0
    ae62:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ae66:	9904      	ldr	r1, [sp, #16]
    ae68:	9a05      	ldr	r2, [sp, #20]
    ae6a:	920f      	str	r2, [sp, #60]	; 0x3c
    ae6c:	910e      	str	r1, [sp, #56]	; 0x38
    ae6e:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ae72:	920b      	str	r2, [sp, #44]	; 0x2c
    ae74:	910a      	str	r1, [sp, #40]	; 0x28
    ae76:	980a      	ldr	r0, [sp, #40]	; 0x28
    ae78:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ae7a:	f00c fba3 	bl	175c4 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
    ae7e:	9101      	str	r1, [sp, #4]
    ae80:	9000      	str	r0, [sp, #0]
    ae82:	e7ff      	b.n	ae84 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
    ae84:	9800      	ldr	r0, [sp, #0]
    ae86:	9008      	str	r0, [sp, #32]
    ae88:	9901      	ldr	r1, [sp, #4]
    ae8a:	9109      	str	r1, [sp, #36]	; 0x24
    ae8c:	2200      	movs	r2, #0
    ae8e:	9207      	str	r2, [sp, #28]
    ae90:	2201      	movs	r2, #1
    ae92:	9206      	str	r2, [sp, #24]
    ae94:	e007      	b.n	aea6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ae96:	9802      	ldr	r0, [sp, #8]
    ae98:	2801      	cmp	r0, #1
    ae9a:	d010      	beq.n	aebe <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
    ae9c:	e019      	b.n	aed2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
    ae9e:	2000      	movs	r0, #0
    aea0:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aea4:	e7f7      	b.n	ae96 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    aea6:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    aeaa:	07c0      	lsls	r0, r0, #31
    aeac:	2800      	cmp	r0, #0
    aeae:	d1f6      	bne.n	ae9e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
    aeb0:	e7f1      	b.n	ae96 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    aeb2:	9806      	ldr	r0, [sp, #24]
    aeb4:	9907      	ldr	r1, [sp, #28]
    aeb6:	9a08      	ldr	r2, [sp, #32]
    aeb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aeba:	b010      	add	sp, #64	; 0x40
    aebc:	bdb0      	pop	{r4, r5, r7, pc}
    aebe:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    aec2:	07c0      	lsls	r0, r0, #31
    aec4:	2800      	cmp	r0, #0
    aec6:	d0f4      	beq.n	aeb2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    aec8:	e7ff      	b.n	aeca <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
    aeca:	2000      	movs	r0, #0
    aecc:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aed0:	e7ef      	b.n	aeb2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    aed2:	e7ee      	b.n	aeb2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

0000aed4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
    aed4:	b084      	sub	sp, #16
    aed6:	460a      	mov	r2, r1
    aed8:	4603      	mov	r3, r0
    aeda:	9103      	str	r1, [sp, #12]
    aedc:	9002      	str	r0, [sp, #8]
    aede:	b004      	add	sp, #16
    aee0:	4770      	bx	lr

0000aee2 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E>:
    aee2:	b580      	push	{r7, lr}
    aee4:	b086      	sub	sp, #24
    aee6:	9004      	str	r0, [sp, #16]
    aee8:	9105      	str	r1, [sp, #20]
    aeea:	9002      	str	r0, [sp, #8]
    aeec:	f000 f810 	bl	af10 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E>
    aef0:	9001      	str	r0, [sp, #4]
    aef2:	e7ff      	b.n	aef4 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x12>
    aef4:	9801      	ldr	r0, [sp, #4]
    aef6:	07c1      	lsls	r1, r0, #31
    aef8:	2900      	cmp	r1, #0
    aefa:	d103      	bne.n	af04 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x22>
    aefc:	e7ff      	b.n	aefe <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x1c>
    aefe:	2000      	movs	r0, #0
    af00:	9003      	str	r0, [sp, #12]
    af02:	e002      	b.n	af0a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x28>
    af04:	9802      	ldr	r0, [sp, #8]
    af06:	9003      	str	r0, [sp, #12]
    af08:	e7ff      	b.n	af0a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x28>
    af0a:	9803      	ldr	r0, [sp, #12]
    af0c:	b006      	add	sp, #24
    af0e:	bd80      	pop	{r7, pc}

0000af10 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E>:
    af10:	b580      	push	{r7, lr}
    af12:	b08a      	sub	sp, #40	; 0x28
    af14:	9008      	str	r0, [sp, #32]
    af16:	9109      	str	r1, [sp, #36]	; 0x24
    af18:	9103      	str	r1, [sp, #12]
    af1a:	9002      	str	r0, [sp, #8]
    af1c:	f000 f815 	bl	af4a <_ZN4core3any6TypeId2of17h3f51c8cccab069bdE>
    af20:	9105      	str	r1, [sp, #20]
    af22:	9004      	str	r0, [sp, #16]
    af24:	e7ff      	b.n	af26 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E+0x16>
    af26:	9803      	ldr	r0, [sp, #12]
    af28:	68c1      	ldr	r1, [r0, #12]
    af2a:	9802      	ldr	r0, [sp, #8]
    af2c:	4788      	blx	r1
    af2e:	9107      	str	r1, [sp, #28]
    af30:	9006      	str	r0, [sp, #24]
    af32:	e7ff      	b.n	af34 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E+0x24>
    af34:	a804      	add	r0, sp, #16
    af36:	a906      	add	r1, sp, #24
    af38:	f007 f8c2 	bl	120c0 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h27d5684c70bb37e8E>
    af3c:	9001      	str	r0, [sp, #4]
    af3e:	e7ff      	b.n	af40 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E+0x30>
    af40:	9801      	ldr	r0, [sp, #4]
    af42:	f000 0001 	and.w	r0, r0, #1
    af46:	b00a      	add	sp, #40	; 0x28
    af48:	bd80      	pop	{r7, pc}

0000af4a <_ZN4core3any6TypeId2of17h3f51c8cccab069bdE>:
    af4a:	b086      	sub	sp, #24
    af4c:	f249 40d9 	movw	r0, #38105	; 0x94d9
    af50:	f2c1 1010 	movt	r0, #4368	; 0x1110
    af54:	9005      	str	r0, [sp, #20]
    af56:	f249 7064 	movw	r0, #38756	; 0x9764
    af5a:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    af5e:	9004      	str	r0, [sp, #16]
    af60:	9804      	ldr	r0, [sp, #16]
    af62:	9905      	ldr	r1, [sp, #20]
    af64:	9001      	str	r0, [sp, #4]
    af66:	9100      	str	r1, [sp, #0]
    af68:	e7ff      	b.n	af6a <_ZN4core3any6TypeId2of17h3f51c8cccab069bdE+0x20>
    af6a:	9801      	ldr	r0, [sp, #4]
    af6c:	9002      	str	r0, [sp, #8]
    af6e:	9900      	ldr	r1, [sp, #0]
    af70:	9103      	str	r1, [sp, #12]
    af72:	9802      	ldr	r0, [sp, #8]
    af74:	9903      	ldr	r1, [sp, #12]
    af76:	b006      	add	sp, #24
    af78:	4770      	bx	lr

0000af7a <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE>:
    af7a:	b580      	push	{r7, lr}
    af7c:	b084      	sub	sp, #16
    af7e:	9002      	str	r0, [sp, #8]
    af80:	9103      	str	r1, [sp, #12]
    af82:	f7ff ffae 	bl	aee2 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E>
    af86:	9001      	str	r0, [sp, #4]
    af88:	e7ff      	b.n	af8a <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE+0x10>
    af8a:	9801      	ldr	r0, [sp, #4]
    af8c:	b004      	add	sp, #16
    af8e:	bd80      	pop	{r7, pc}

0000af90 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE>:
    af90:	b580      	push	{r7, lr}
    af92:	b082      	sub	sp, #8
    af94:	9200      	str	r2, [sp, #0]
    af96:	9101      	str	r1, [sp, #4]
    af98:	9a00      	ldr	r2, [sp, #0]
    af9a:	f003 fe89 	bl	ecb0 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE>
    af9e:	e7ff      	b.n	afa0 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE+0x10>
    afa0:	b002      	add	sp, #8
    afa2:	bd80      	pop	{r7, pc}

0000afa4 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E>:
    afa4:	b580      	push	{r7, lr}
    afa6:	b084      	sub	sp, #16
    afa8:	9102      	str	r1, [sp, #8]
    afaa:	9003      	str	r0, [sp, #12]
    afac:	9902      	ldr	r1, [sp, #8]
    afae:	f003 fe91 	bl	ecd4 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6a25aae91f88a8abE>
    afb2:	9001      	str	r0, [sp, #4]
    afb4:	9100      	str	r1, [sp, #0]
    afb6:	e7ff      	b.n	afb8 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E+0x14>
    afb8:	9801      	ldr	r0, [sp, #4]
    afba:	9900      	ldr	r1, [sp, #0]
    afbc:	b004      	add	sp, #16
    afbe:	bd80      	pop	{r7, pc}

0000afc0 <_ZN8libchip814Chip8$LT$T$GT$3new17hca880a1e3fbd9a67E>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    afc0:	b5b0      	push	{r4, r5, r7, lr}
    afc2:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    afc6:	b082      	sub	sp, #8
    afc8:	f10d 0e0c 	add.w	lr, sp, #12
    afcc:	f50e 5282 	add.w	r2, lr, #4160	; 0x1040
    afd0:	2300      	movs	r3, #0
        Self {
            v: [0; REGS],
    afd2:	930b      	str	r3, [sp, #44]	; 0x2c
    afd4:	930a      	str	r3, [sp, #40]	; 0x28
    afd6:	9309      	str	r3, [sp, #36]	; 0x24
    afd8:	9308      	str	r3, [sp, #32]
    afda:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
    afde:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    afe2:	9007      	str	r0, [sp, #28]
    afe4:	4660      	mov	r0, ip
    afe6:	9106      	str	r1, [sp, #24]
    afe8:	4671      	mov	r1, lr
    afea:	9205      	str	r2, [sp, #20]
    afec:	9304      	str	r3, [sp, #16]
    afee:	f8cd c00c 	str.w	ip, [sp, #12]
    aff2:	f8cd e008 	str.w	lr, [sp, #8]
    aff6:	f013 fe6b 	bl	1ecd0 <__aeabi_memclr>
            stack: [0; STACKS],
    affa:	9804      	ldr	r0, [sp, #16]
    affc:	9905      	ldr	r1, [sp, #20]
    affe:	6008      	str	r0, [r1, #0]
    b000:	f841 0c04 	str.w	r0, [r1, #-4]
    b004:	f841 0c08 	str.w	r0, [r1, #-8]
    b008:	f841 0c0c 	str.w	r0, [r1, #-12]
    b00c:	f841 0c10 	str.w	r0, [r1, #-16]
    b010:	f841 0c14 	str.w	r0, [r1, #-20]
    b014:	f841 0c18 	str.w	r0, [r1, #-24]
    b018:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    b01c:	6088      	str	r0, [r1, #8]
    b01e:	6048      	str	r0, [r1, #4]
            running: false,
            hw,
    b020:	9a06      	ldr	r2, [sp, #24]
    b022:	8893      	ldrh	r3, [r2, #4]
    b024:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    b028:	f8ae 3064 	strh.w	r3, [lr, #100]	; 0x64
    b02c:	6813      	ldr	r3, [r2, #0]
    b02e:	614b      	str	r3, [r1, #20]
        Self {
    b030:	9b08      	ldr	r3, [sp, #32]
    b032:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    b036:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    b03a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    b03c:	9d07      	ldr	r5, [sp, #28]
    b03e:	642c      	str	r4, [r5, #64]	; 0x40
    b040:	f8c5 e03c 	str.w	lr, [r5, #60]	; 0x3c
    b044:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
    b048:	636b      	str	r3, [r5, #52]	; 0x34
    b04a:	8228      	strh	r0, [r5, #16]
    b04c:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    b050:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    b054:	8268      	strh	r0, [r5, #18]
    b056:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
    b05a:	f105 0047 	add.w	r0, r5, #71	; 0x47
    b05e:	9903      	ldr	r1, [sp, #12]
    b060:	9a02      	ldr	r2, [sp, #8]
    b062:	f013 fe39 	bl	1ecd8 <__aeabi_memcpy>
    b066:	9907      	ldr	r1, [sp, #28]
    b068:	f101 0214 	add.w	r2, r1, #20
    b06c:	f10d 0e10 	add.w	lr, sp, #16
    b070:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    b074:	2320      	movs	r3, #32
    b076:	9001      	str	r0, [sp, #4]
    b078:	4610      	mov	r0, r2
    b07a:	461a      	mov	r2, r3
    b07c:	f013 fe2c 	bl	1ecd8 <__aeabi_memcpy>
    b080:	9905      	ldr	r1, [sp, #20]
    b082:	684a      	ldr	r2, [r1, #4]
    b084:	688b      	ldr	r3, [r1, #8]
    b086:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    b08a:	f8d1 e010 	ldr.w	lr, [r1, #16]
    b08e:	9c07      	ldr	r4, [sp, #28]
    b090:	6063      	str	r3, [r4, #4]
    b092:	6022      	str	r2, [r4, #0]
    b094:	f8c4 e00c 	str.w	lr, [r4, #12]
    b098:	f8c4 c008 	str.w	ip, [r4, #8]
    b09c:	f241 0247 	movw	r2, #4167	; 0x1047
    b0a0:	9b04      	ldr	r3, [sp, #16]
    b0a2:	54a3      	strb	r3, [r4, r2]
    b0a4:	f241 0248 	movw	r2, #4168	; 0x1048
    b0a8:	eb04 0c02 	add.w	ip, r4, r2
    b0ac:	f8d1 e014 	ldr.w	lr, [r1, #20]
    b0b0:	f844 e002 	str.w	lr, [r4, r2]
    b0b4:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
    b0b8:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    b0bc:	f8ac 2004 	strh.w	r2, [ip, #4]
        }
    }
    b0c0:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    b0c4:	b002      	add	sp, #8
    b0c6:	bdb0      	pop	{r4, r5, r7, pc}

0000b0c8 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    b0c8:	b580      	push	{r7, lr}
    b0ca:	b086      	sub	sp, #24
    b0cc:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    b0ce:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    b0d2:	2201      	movs	r2, #1
    b0d4:	9003      	str	r0, [sp, #12]
    b0d6:	4608      	mov	r0, r1
    b0d8:	4611      	mov	r1, r2
    b0da:	f004 f908 	bl	f2ee <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE>
    b0de:	9002      	str	r0, [sp, #8]
    b0e0:	e7ff      	b.n	b0e2 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E+0x1a>
    b0e2:	9802      	ldr	r0, [sp, #8]
    b0e4:	9903      	ldr	r1, [sp, #12]
    b0e6:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    b0ea:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    b0ee:	4613      	mov	r3, r2
    b0f0:	2a0f      	cmp	r2, #15
    b0f2:	9301      	str	r3, [sp, #4]
    b0f4:	d80a      	bhi.n	b10c <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E+0x44>
    b0f6:	e7ff      	b.n	b0f8 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E+0x30>
    b0f8:	9803      	ldr	r0, [sp, #12]
    b0fa:	9901      	ldr	r1, [sp, #4]
    b0fc:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    b100:	8a92      	ldrh	r2, [r2, #20]
    b102:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    b106:	4610      	mov	r0, r2
    b108:	b006      	add	sp, #24
    b10a:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    b10c:	f24f 2078 	movw	r0, #62072	; 0xf278
    b110:	f2c0 0001 	movt	r0, #1
    b114:	2210      	movs	r2, #16
    b116:	9901      	ldr	r1, [sp, #4]
    b118:	f00d fa20 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b11c:	defe      	udf	#254	; 0xfe

0000b11e <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E>:
    pub fn run(mut self, rom: &[u8]) {
    b11e:	b580      	push	{r7, lr}
    b120:	b086      	sub	sp, #24
    b122:	9104      	str	r1, [sp, #16]
    b124:	9205      	str	r2, [sp, #20]
        self.setup();
    b126:	9003      	str	r0, [sp, #12]
    b128:	9202      	str	r2, [sp, #8]
    b12a:	9101      	str	r1, [sp, #4]
    b12c:	f003 ff34 	bl	ef98 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E>
    b130:	e7ff      	b.n	b132 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x14>
        self.load(rom);
    b132:	9803      	ldr	r0, [sp, #12]
    b134:	9901      	ldr	r1, [sp, #4]
    b136:	9a02      	ldr	r2, [sp, #8]
    b138:	f003 fdde 	bl	ecf8 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE>
    b13c:	e7ff      	b.n	b13e <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x20>
        while self.running {
    b13e:	e7ff      	b.n	b140 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x22>
    b140:	f241 0047 	movw	r0, #4167	; 0x1047
    b144:	9903      	ldr	r1, [sp, #12]
    b146:	5c08      	ldrb	r0, [r1, r0]
    b148:	07c0      	lsls	r0, r0, #31
    b14a:	2800      	cmp	r0, #0
    b14c:	d101      	bne.n	b152 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x34>
    b14e:	e7ff      	b.n	b150 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x32>
    }
    b150:	e00c      	b.n	b16c <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x4e>
            self.sched();
    b152:	9803      	ldr	r0, [sp, #12]
    b154:	f003 fe9d 	bl	ee92 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E>
    b158:	e7ff      	b.n	b15a <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x3c>
            self.eval();
    b15a:	9803      	ldr	r0, [sp, #12]
    b15c:	f000 f808 	bl	b170 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE>
    b160:	e7ff      	b.n	b162 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x44>
            self.next();
    b162:	9803      	ldr	r0, [sp, #12]
    b164:	f003 fe03 	bl	ed6e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    b168:	e7ff      	b.n	b16a <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x4c>
        while self.running {
    b16a:	e7e9      	b.n	b140 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x22>
    }
    b16c:	b006      	add	sp, #24
    b16e:	bd80      	pop	{r7, pc}

0000b170 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    b170:	b570      	push	{r4, r5, r6, lr}
    b172:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    b176:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    b17a:	8a41      	ldrh	r1, [r0, #18]
    b17c:	460a      	mov	r2, r1
    b17e:	2300      	movs	r3, #0
    b180:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    b184:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    b188:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    b18c:	f043 82c0 	bne.w	e710 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35a0>
    b190:	e7ff      	b.n	b192 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22>
    b192:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b196:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    b19a:	1842      	adds	r2, r0, r1
    b19c:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    b1a0:	4613      	mov	r3, r2
    b1a2:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    b1a6:	8a42      	ldrh	r2, [r0, #18]
    b1a8:	3201      	adds	r2, #1
    b1aa:	fa1f fc82 	uxth.w	ip, r2
    b1ae:	4696      	mov	lr, r2
    b1b0:	4594      	cmp	ip, r2
    b1b2:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    b1b6:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    b1ba:	f043 82b4 	bne.w	e726 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35b6>
    b1be:	e7ff      	b.n	b1c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x50>
    b1c0:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    b1c4:	b281      	uxth	r1, r0
    b1c6:	460a      	mov	r2, r1
    b1c8:	2300      	movs	r3, #0
    b1ca:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    b1ce:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    b1d2:	f043 82b4 	bne.w	e73e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35ce>
    b1d6:	e7ff      	b.n	b1d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x68>
    b1d8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b1dc:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    b1e0:	1842      	adds	r2, r0, r1
    b1e2:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    b1e6:	4613      	mov	r3, r2
    b1e8:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    b1ec:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    b1f0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    b1f4:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    b1f8:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    b1fc:	e7ff      	b.n	b1fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8e>
    b1fe:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    b202:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    b206:	ea40 0201 	orr.w	r2, r0, r1
    b20a:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    b20e:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    b212:	f36f 321f 	bfc	r2, #12, #20
    b216:	4613      	mov	r3, r2
    b218:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    b21c:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    b220:	f002 020f 	and.w	r2, r2, #15
    b224:	4694      	mov	ip, r2
    b226:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    b22a:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    b22e:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    b232:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    b236:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    b23a:	e7ff      	b.n	b23c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcc>
    b23c:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    b240:	f000 010f 	and.w	r1, r0, #15
    b244:	460a      	mov	r2, r1
    b246:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    b24a:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    b24e:	0909      	lsrs	r1, r1, #4
    b250:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    b254:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    b258:	e7ff      	b.n	b25a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xea>
    b25a:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    b25e:	f000 010f 	and.w	r1, r0, #15
    b262:	460a      	mov	r2, r1
    b264:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    b268:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    b26c:	b2cb      	uxtb	r3, r1
    b26e:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    b272:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    b276:	0b09      	lsrs	r1, r1, #12
    b278:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    b27c:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    b280:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    b284:	e7ff      	b.n	b286 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x116>
    b286:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    b28a:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    b28e:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    b292:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    b296:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    b29a:	e7ff      	b.n	b29c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12c>
    b29c:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    b2a0:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    b2a4:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    b2a8:	0912      	lsrs	r2, r2, #4
    b2aa:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    b2ae:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    b2b2:	e7ff      	b.n	b2b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x144>
    b2b4:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    b2b8:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    b2bc:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    b2c0:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    b2c4:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    b2c8:	e7ff      	b.n	b2ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15a>
    b2ca:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    b2ce:	f000 010f 	and.w	r1, r0, #15
        match (
    b2d2:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    b2d6:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    b2da:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    b2de:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    b2e2:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    b2e6:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    b2ea:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    b2ee:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    b2f2:	468e      	mov	lr, r1
    b2f4:	290f      	cmp	r1, #15
    b2f6:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    b2fa:	d84f      	bhi.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b2fc:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    b300:	e8df f011 	tbh	[pc, r1, lsl #1]
    b304:	03060010 	.word	0x03060010
    b308:	04320399 	.word	0x04320399
    b30c:	002c04d2 	.word	0x002c04d2
    b310:	06b4061f 	.word	0x06b4061f
    b314:	00750032 	.word	0x00750032
    b318:	0ee40e59 	.word	0x0ee40e59
    b31c:	10260f85 	.word	0x10260f85
    b320:	0095007b 	.word	0x0095007b
    b324:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    b328:	2800      	cmp	r0, #0
    b32a:	f040 8261 	bne.w	b7f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x680>
    b32e:	e7ff      	b.n	b330 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c0>
    b330:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    b334:	280e      	cmp	r0, #14
    b336:	f040 825b 	bne.w	b7f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x680>
    b33a:	e7ff      	b.n	b33c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cc>
    b33c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b340:	4601      	mov	r1, r0
    b342:	2800      	cmp	r0, #0
    b344:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    b348:	f000 80c0 	beq.w	b4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35c>
    b34c:	e7ff      	b.n	b34e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1de>
    b34e:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    b352:	b281      	uxth	r1, r0
    b354:	290e      	cmp	r1, #14
    b356:	f000 81b6 	beq.w	b6c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x556>
    b35a:	e249      	b.n	b7f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x680>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    b35c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b360:	2800      	cmp	r0, #0
    b362:	f000 8541 	beq.w	bde8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc78>
    b366:	e019      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    b368:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b36c:	4601      	mov	r1, r0
    b36e:	280e      	cmp	r0, #14
    b370:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    b374:	d812      	bhi.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b376:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    b37a:	e8df f011 	tbh	[pc, r1, lsl #1]
    b37e:	071e      	.short	0x071e
    b380:	086707c0 	.word	0x086707c0
    b384:	09b5090e 	.word	0x09b5090e
    b388:	0b3b0a77 	.word	0x0b3b0a77
    b38c:	000f0bf0 	.word	0x000f0bf0
    b390:	000f000f 	.word	0x000f000f
    b394:	000f000f 	.word	0x000f000f
    b398:	0cb4000f 	.word	0x0cb4000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    b39c:	f64f 6088 	movw	r0, #65160	; 0xfe88
    b3a0:	f2c0 0001 	movt	r0, #1
    b3a4:	6801      	ldr	r1, [r0, #0]
    b3a6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b3aa:	f100 0212 	add.w	r2, r0, #18
    b3ae:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    b3b2:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    b3b6:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    b3ba:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    b3be:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    b3c2:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    b3c6:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    b3ca:	f649 5c4b 	movw	ip, #40267	; 0x9d4b
    b3ce:	f2c0 0c01 	movt	ip, #1
    b3d2:	4610      	mov	r0, r2
    b3d4:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    b3d8:	4661      	mov	r1, ip
    b3da:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    b3de:	f7ff fa7f 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b3e2:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    b3e6:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    b3ea:	f003 b94f 	b.w	e68c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x351c>
            (9, _, _, 0) => {
    b3ee:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b3f2:	2800      	cmp	r0, #0
    b3f4:	f001 8532 	beq.w	ce5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cec>
    b3f8:	e7d0      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xe, _, 9, 0xe) => {
    b3fa:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    b3fe:	4601      	mov	r1, r0
    b400:	2809      	cmp	r0, #9
    b402:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    b406:	d006      	beq.n	b416 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a6>
    b408:	e7ff      	b.n	b40a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29a>
    b40a:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    b40e:	b281      	uxth	r1, r0
    b410:	290a      	cmp	r1, #10
    b412:	d006      	beq.n	b422 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b2>
    b414:	e7c2      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b416:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b41a:	280e      	cmp	r0, #14
    b41c:	f002 815b 	beq.w	d6d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2566>
    b420:	e7bc      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xe, _, 0xa, 0x1) => {
    b422:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b426:	2801      	cmp	r0, #1
    b428:	f002 81fe 	beq.w	d828 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b8>
    b42c:	e7b6      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 0, 7) => {
    b42e:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    b432:	4601      	mov	r1, r0
    b434:	2806      	cmp	r0, #6
    b436:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    b43a:	d8af      	bhi.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b43c:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    b440:	e8df f001 	tbb	[pc, r1]
    b444:	322c1505 	.word	0x322c1505
    b448:	003e3804 	.word	0x003e3804
    b44c:	e7a6      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b44e:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b452:	4601      	mov	r1, r0
    b454:	2807      	cmp	r0, #7
    b456:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    b45a:	f002 828e 	beq.w	d97a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x280a>
    b45e:	e7ff      	b.n	b460 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f0>
    b460:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    b464:	b281      	uxth	r1, r0
    b466:	290a      	cmp	r1, #10
    b468:	f002 8320 	beq.w	daac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x293c>
    b46c:	e796      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 1, 5) => {
    b46e:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b472:	4601      	mov	r1, r0
    b474:	2805      	cmp	r0, #5
    b476:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    b47a:	f002 83b1 	beq.w	dbe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a70>
    b47e:	e7ff      	b.n	b480 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x310>
    b480:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    b484:	b281      	uxth	r1, r0
    b486:	2908      	cmp	r1, #8
    b488:	f002 843f 	beq.w	dd0a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b9a>
    b48c:	e7ff      	b.n	b48e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31e>
    b48e:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    b492:	b281      	uxth	r1, r0
    b494:	290e      	cmp	r1, #14
    b496:	f002 84cd 	beq.w	de34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2cc4>
    b49a:	e77f      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 2, 9) => {
    b49c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b4a0:	2809      	cmp	r0, #9
    b4a2:	f002 856b 	beq.w	df7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e0c>
    b4a6:	e779      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 3, 3) => {
    b4a8:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b4ac:	2803      	cmp	r0, #3
    b4ae:	f002 8616 	beq.w	e0de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f6e>
    b4b2:	e773      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 5, 5) => {
    b4b4:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b4b8:	2805      	cmp	r0, #5
    b4ba:	f002 871f 	beq.w	e2fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x318c>
    b4be:	e76d      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 6, 5) => {
    b4c0:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b4c4:	2805      	cmp	r0, #5
    b4c6:	f002 87fc 	beq.w	e4c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3352>
    b4ca:	e767      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b4cc:	2005      	movs	r0, #5
    b4ce:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    b4d2:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    b4d6:	f2c0 0001 	movt	r0, #1
    b4da:	6801      	ldr	r1, [r0, #0]
    b4dc:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    b4e0:	f006 fc61 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b4e4:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    b4e8:	e01f      	b.n	b52a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ba>
    b4ea:	2001      	movs	r0, #1
    b4ec:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    b4f0:	e015      	b.n	b51e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ae>
    b4f2:	2000      	movs	r0, #0
    b4f4:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    b4f8:	e011      	b.n	b51e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ae>
    b4fa:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    b4fc:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    b500:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    b504:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b508:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b50c:	f006 fcc0 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b510:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    b514:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    b518:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    b51c:	e00b      	b.n	b536 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3c6>
    b51e:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    b522:	07c0      	lsls	r0, r0, #31
    b524:	2800      	cmp	r0, #0
    b526:	d115      	bne.n	b554 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3e4>
    b528:	e05e      	b.n	b5e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x478>
    b52a:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    b52e:	07c1      	lsls	r1, r0, #31
    b530:	2900      	cmp	r1, #0
    b532:	d1e2      	bne.n	b4fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38a>
    b534:	e7dd      	b.n	b4f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x382>
    b536:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    b53a:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    b53e:	f006 fc32 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b542:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    b546:	e7ff      	b.n	b548 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3d8>
    b548:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    b54c:	07c1      	lsls	r1, r0, #31
    b54e:	2900      	cmp	r1, #0
    b550:	d1cb      	bne.n	b4ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37a>
    b552:	e7ce      	b.n	b4f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x382>
                trace!("[{:04x}] CLS", self.pc);
    b554:	f240 1028 	movw	r0, #296	; 0x128
    b558:	f2c0 0002 	movt	r0, #2
    b55c:	6801      	ldr	r1, [r0, #0]
    b55e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b562:	f100 0212 	add.w	r2, r0, #18
    b566:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    b56a:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    b56e:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    b572:	f649 534b 	movw	r3, #40267	; 0x9d4b
    b576:	f2c0 0301 	movt	r3, #1
    b57a:	4610      	mov	r0, r2
    b57c:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    b580:	4619      	mov	r1, r3
    b582:	f7ff f9ad 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b586:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    b58a:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    b58e:	e7ff      	b.n	b590 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x420>
    b590:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    b594:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    b598:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    b59c:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    b5a0:	f24f 3228 	movw	r2, #62248	; 0xf328
    b5a4:	f2c0 0201 	movt	r2, #1
    b5a8:	6812      	ldr	r2, [r2, #0]
    b5aa:	466b      	mov	r3, sp
    b5ac:	f04f 0c01 	mov.w	ip, #1
    b5b0:	f8c3 c008 	str.w	ip, [r3, #8]
    b5b4:	605a      	str	r2, [r3, #4]
    b5b6:	f8c3 c000 	str.w	ip, [r3]
    b5ba:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    b5be:	2202      	movs	r2, #2
    b5c0:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    b5c4:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    b5c8:	f006 fc29 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b5cc:	e7ff      	b.n	b5ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x45e>
    b5ce:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    b5d2:	f240 1048 	movw	r0, #328	; 0x148
    b5d6:	f2c0 0002 	movt	r0, #2
    b5da:	6802      	ldr	r2, [r0, #0]
    b5dc:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    b5e0:	f007 fcfc 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b5e4:	e7ff      	b.n	b5e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x476>
    b5e6:	e7ff      	b.n	b5e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x478>
    b5e8:	f241 0048 	movw	r0, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    b5ec:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    b5f0:	4408      	add	r0, r1
    b5f2:	f004 fa9d 	bl	fb30 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E>
    b5f6:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    b5f8:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    b5fa:	e7ff      	b.n	b5fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x48c>
    b5fc:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    b5fe:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    b602:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    b604:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    b608:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    b60a:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    b60e:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    b612:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    b616:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    b61a:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    b61e:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    b622:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    b626:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    b62a:	f003 fde3 	bl	f1f4 <_ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E>
    b62e:	e7ff      	b.n	b630 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4c0>
    b630:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    b634:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    b638:	f003 ff3f 	bl	f4ba <_ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E>
    b63c:	e7ff      	b.n	b63e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4ce>
    b63e:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    b642:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    b646:	f006 fd31 	bl	120ac <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he2e30225e051e80dE>
    b64a:	e7ff      	b.n	b64c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4dc>
    b64c:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    b650:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    b654:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    b658:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    b65c:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    b660:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    b664:	e7ff      	b.n	b666 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4f6>
    b666:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    b66a:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    b66e:	f006 fc4a 	bl	11f06 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E>
    b672:	e7ff      	b.n	b674 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x504>
    b674:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    b678:	2800      	cmp	r0, #0
    b67a:	d001      	beq.n	b680 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x510>
    b67c:	e7ff      	b.n	b67e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x50e>
    b67e:	e002      	b.n	b686 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x516>
        match (
    b680:	f003 b843 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    b684:	defe      	udf	#254	; 0xfe
    b686:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    b68a:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    b68e:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    b692:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    b696:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    b69a:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    b69e:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    b6a2:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    b6a6:	f241 0248 	movw	r2, #4168	; 0x1048
                    self.hw.vram_set(x, y, false);
    b6aa:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    b6ae:	441a      	add	r2, r3
    b6b0:	2300      	movs	r3, #0
    b6b2:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    b6b4:	4610      	mov	r0, r2
    b6b6:	9afd      	ldr	r2, [sp, #1012]	; 0x3f4
    b6b8:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    b6ba:	4611      	mov	r1, r2
    b6bc:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    b6be:	f004 f87a 	bl	f7b6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE>
    b6c2:	e7ff      	b.n	b6c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x554>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    b6c4:	e7cf      	b.n	b666 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4f6>
    b6c6:	2005      	movs	r0, #5
    b6c8:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    b6cc:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    b6d0:	f2c0 0001 	movt	r0, #1
    b6d4:	6801      	ldr	r1, [r0, #0]
    b6d6:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    b6da:	f006 fb64 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b6de:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    b6e0:	e01f      	b.n	b722 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5b2>
    b6e2:	2001      	movs	r0, #1
    b6e4:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    b6e8:	e015      	b.n	b716 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5a6>
    b6ea:	2000      	movs	r0, #0
    b6ec:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    b6f0:	e011      	b.n	b716 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5a6>
    b6f2:	2000      	movs	r0, #0
    b6f4:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    b6f8:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    b6fc:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b700:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b704:	f006 fbc4 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b708:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    b70c:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    b710:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    b714:	e00a      	b.n	b72c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5bc>
    b716:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    b71a:	07c0      	lsls	r0, r0, #31
    b71c:	2800      	cmp	r0, #0
    b71e:	d112      	bne.n	b746 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5d6>
    b720:	e055      	b.n	b7ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x65e>
    b722:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    b724:	07c1      	lsls	r1, r0, #31
    b726:	2900      	cmp	r1, #0
    b728:	d1e3      	bne.n	b6f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x582>
    b72a:	e7de      	b.n	b6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x57a>
    b72c:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    b730:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    b734:	f006 fb37 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b738:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    b73a:	e7ff      	b.n	b73c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5cc>
    b73c:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    b73e:	07c1      	lsls	r1, r0, #31
    b740:	2900      	cmp	r1, #0
    b742:	d1ce      	bne.n	b6e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x572>
    b744:	e7d1      	b.n	b6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x57a>
                trace!("[{:04x}] RET", self.pc);
    b746:	f240 00ec 	movw	r0, #236	; 0xec
    b74a:	f2c0 0002 	movt	r0, #2
    b74e:	6801      	ldr	r1, [r0, #0]
    b750:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b754:	f100 0212 	add.w	r2, r0, #18
    b758:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    b75c:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    b760:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    b764:	f649 534b 	movw	r3, #40267	; 0x9d4b
    b768:	f2c0 0301 	movt	r3, #1
    b76c:	4610      	mov	r0, r2
    b76e:	91f9      	str	r1, [sp, #996]	; 0x3e4
    b770:	4619      	mov	r1, r3
    b772:	f7ff f8b5 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b776:	90f8      	str	r0, [sp, #992]	; 0x3e0
    b778:	91f7      	str	r1, [sp, #988]	; 0x3dc
    b77a:	e7ff      	b.n	b77c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x60c>
    b77c:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    b77e:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    b782:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    b784:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    b788:	f24f 3228 	movw	r2, #62248	; 0xf328
    b78c:	f2c0 0201 	movt	r2, #1
    b790:	6812      	ldr	r2, [r2, #0]
    b792:	466b      	mov	r3, sp
    b794:	f04f 0c01 	mov.w	ip, #1
    b798:	f8c3 c008 	str.w	ip, [r3, #8]
    b79c:	605a      	str	r2, [r3, #4]
    b79e:	f8c3 c000 	str.w	ip, [r3]
    b7a2:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    b7a6:	2202      	movs	r2, #2
    b7a8:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    b7ac:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    b7ae:	f006 fb36 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b7b2:	e7ff      	b.n	b7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x644>
    b7b4:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    b7b8:	f240 100c 	movw	r0, #268	; 0x10c
    b7bc:	f2c0 0002 	movt	r0, #2
    b7c0:	6802      	ldr	r2, [r0, #0]
    b7c2:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    b7c6:	f007 fc09 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b7ca:	e7ff      	b.n	b7cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x65c>
    b7cc:	e7ff      	b.n	b7ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x65e>
                let addr = self.pop();
    b7ce:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b7d2:	f7ff fc79 	bl	b0c8 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E>
    b7d6:	4601      	mov	r1, r0
    b7d8:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    b7dc:	91f6      	str	r1, [sp, #984]	; 0x3d8
    b7de:	e7ff      	b.n	b7e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x670>
                self.jump(addr);
    b7e0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b7e4:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    b7e6:	f003 fa7f 	bl	ece8 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    b7ea:	e7ff      	b.n	b7ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x67c>
        match (
    b7ec:	f002 bf8d 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    b7f0:	2005      	movs	r0, #5
    b7f2:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    b7f6:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    b7fa:	f2c0 0001 	movt	r0, #1
    b7fe:	6801      	ldr	r1, [r0, #0]
    b800:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    b804:	f006 facf 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b808:	90f5      	str	r0, [sp, #980]	; 0x3d4
    b80a:	e01f      	b.n	b84c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6dc>
    b80c:	2001      	movs	r0, #1
    b80e:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    b812:	e015      	b.n	b840 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6d0>
    b814:	2000      	movs	r0, #0
    b816:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    b81a:	e011      	b.n	b840 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6d0>
    b81c:	2000      	movs	r0, #0
    b81e:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    b822:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    b826:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b82a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b82e:	f006 fb2f 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b832:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    b836:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    b83a:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    b83e:	e00a      	b.n	b856 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6e6>
    b840:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    b844:	07c0      	lsls	r0, r0, #31
    b846:	2800      	cmp	r0, #0
    b848:	d112      	bne.n	b870 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x700>
    b84a:	e055      	b.n	b8f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x788>
    b84c:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    b84e:	07c1      	lsls	r1, r0, #31
    b850:	2900      	cmp	r1, #0
    b852:	d1e3      	bne.n	b81c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6ac>
    b854:	e7de      	b.n	b814 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6a4>
    b856:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    b85a:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    b85e:	f006 faa2 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b862:	90f4      	str	r0, [sp, #976]	; 0x3d0
    b864:	e7ff      	b.n	b866 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6f6>
    b866:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    b868:	07c1      	lsls	r1, r0, #31
    b86a:	2900      	cmp	r1, #0
    b86c:	d1ce      	bne.n	b80c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x69c>
    b86e:	e7d1      	b.n	b814 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6a4>
                trace!("[{:04x}] SYS nnn", self.pc);
    b870:	f240 0090 	movw	r0, #144	; 0x90
    b874:	f2c0 0002 	movt	r0, #2
    b878:	6801      	ldr	r1, [r0, #0]
    b87a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b87e:	f100 0212 	add.w	r2, r0, #18
    b882:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    b886:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    b88a:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    b88e:	f649 534b 	movw	r3, #40267	; 0x9d4b
    b892:	f2c0 0301 	movt	r3, #1
    b896:	4610      	mov	r0, r2
    b898:	91f3      	str	r1, [sp, #972]	; 0x3cc
    b89a:	4619      	mov	r1, r3
    b89c:	f7ff f820 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b8a0:	90f2      	str	r0, [sp, #968]	; 0x3c8
    b8a2:	91f1      	str	r1, [sp, #964]	; 0x3c4
    b8a4:	e7ff      	b.n	b8a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x736>
    b8a6:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    b8a8:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    b8ac:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    b8ae:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    b8b2:	f24f 3228 	movw	r2, #62248	; 0xf328
    b8b6:	f2c0 0201 	movt	r2, #1
    b8ba:	6812      	ldr	r2, [r2, #0]
    b8bc:	466b      	mov	r3, sp
    b8be:	f04f 0c01 	mov.w	ip, #1
    b8c2:	f8c3 c008 	str.w	ip, [r3, #8]
    b8c6:	605a      	str	r2, [r3, #4]
    b8c8:	f8c3 c000 	str.w	ip, [r3]
    b8cc:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    b8d0:	2202      	movs	r2, #2
    b8d2:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    b8d6:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    b8d8:	f006 faa1 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b8dc:	e7ff      	b.n	b8de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x76e>
    b8de:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    b8e2:	f240 00b0 	movw	r0, #176	; 0xb0
    b8e6:	f2c0 0002 	movt	r0, #2
    b8ea:	6802      	ldr	r2, [r0, #0]
    b8ec:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    b8f0:	f007 fb74 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b8f4:	e7ff      	b.n	b8f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x786>
    b8f6:	e7ff      	b.n	b8f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x788>
    b8f8:	f240 00b4 	movw	r0, #180	; 0xb4
    b8fc:	f2c0 0002 	movt	r0, #2
    b900:	f240 02c4 	movw	r2, #196	; 0xc4
    b904:	f2c0 0202 	movt	r2, #2
    b908:	210f      	movs	r1, #15
    b90a:	f00c fe11 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b90e:	defe      	udf	#254	; 0xfe
    b910:	2005      	movs	r0, #5
    b912:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    b916:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    b91a:	f2c0 0001 	movt	r0, #1
    b91e:	6801      	ldr	r1, [r0, #0]
    b920:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    b924:	f006 fa3f 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b928:	90f0      	str	r0, [sp, #960]	; 0x3c0
    b92a:	e01f      	b.n	b96c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7fc>
    b92c:	2001      	movs	r0, #1
    b92e:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    b932:	e015      	b.n	b960 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7f0>
    b934:	2000      	movs	r0, #0
    b936:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    b93a:	e011      	b.n	b960 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7f0>
    b93c:	2000      	movs	r0, #0
    b93e:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    b942:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    b946:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b94a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b94e:	f006 fa9f 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b952:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    b956:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    b95a:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    b95e:	e00a      	b.n	b976 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x806>
    b960:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    b964:	07c0      	lsls	r0, r0, #31
    b966:	2800      	cmp	r0, #0
    b968:	d112      	bne.n	b990 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x820>
    b96a:	e055      	b.n	ba18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8a8>
    b96c:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    b96e:	07c1      	lsls	r1, r0, #31
    b970:	2900      	cmp	r1, #0
    b972:	d1e3      	bne.n	b93c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7cc>
    b974:	e7de      	b.n	b934 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7c4>
    b976:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    b97a:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    b97e:	f006 fa12 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b982:	90ef      	str	r0, [sp, #956]	; 0x3bc
    b984:	e7ff      	b.n	b986 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x816>
    b986:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    b988:	07c1      	lsls	r1, r0, #31
    b98a:	2900      	cmp	r1, #0
    b98c:	d1ce      	bne.n	b92c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7bc>
    b98e:	e7d1      	b.n	b934 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7c4>
                trace!("[{:04x}] JP nnn", self.pc);
    b990:	f240 0050 	movw	r0, #80	; 0x50
    b994:	f2c0 0002 	movt	r0, #2
    b998:	6801      	ldr	r1, [r0, #0]
    b99a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b99e:	f100 0212 	add.w	r2, r0, #18
    b9a2:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    b9a6:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    b9aa:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    b9ae:	f649 534b 	movw	r3, #40267	; 0x9d4b
    b9b2:	f2c0 0301 	movt	r3, #1
    b9b6:	4610      	mov	r0, r2
    b9b8:	91ee      	str	r1, [sp, #952]	; 0x3b8
    b9ba:	4619      	mov	r1, r3
    b9bc:	f7fe ff90 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b9c0:	90ed      	str	r0, [sp, #948]	; 0x3b4
    b9c2:	91ec      	str	r1, [sp, #944]	; 0x3b0
    b9c4:	e7ff      	b.n	b9c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x856>
    b9c6:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    b9c8:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    b9cc:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    b9ce:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    b9d2:	f24f 3228 	movw	r2, #62248	; 0xf328
    b9d6:	f2c0 0201 	movt	r2, #1
    b9da:	6812      	ldr	r2, [r2, #0]
    b9dc:	466b      	mov	r3, sp
    b9de:	f04f 0c01 	mov.w	ip, #1
    b9e2:	f8c3 c008 	str.w	ip, [r3, #8]
    b9e6:	605a      	str	r2, [r3, #4]
    b9e8:	f8c3 c000 	str.w	ip, [r3]
    b9ec:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    b9f0:	2202      	movs	r2, #2
    b9f2:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    b9f6:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    b9f8:	f006 fa11 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b9fc:	e7ff      	b.n	b9fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x88e>
    b9fe:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    ba02:	f240 0070 	movw	r0, #112	; 0x70
    ba06:	f2c0 0002 	movt	r0, #2
    ba0a:	6802      	ldr	r2, [r0, #0]
    ba0c:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    ba10:	f007 fae4 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ba14:	e7ff      	b.n	ba16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8a6>
    ba16:	e7ff      	b.n	ba18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8a8>
    ba18:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    ba1a:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    ba1e:	f003 fcdf 	bl	f3e0 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>
    ba22:	90eb      	str	r0, [sp, #940]	; 0x3ac
    ba24:	e7ff      	b.n	ba26 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8b6>
    ba26:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba2a:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    ba2c:	f003 f95c 	bl	ece8 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    ba30:	e7ff      	b.n	ba32 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8c2>
        match (
    ba32:	f002 be6a 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    ba36:	2005      	movs	r0, #5
    ba38:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    ba3c:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    ba40:	f2c0 0001 	movt	r0, #1
    ba44:	6801      	ldr	r1, [r0, #0]
    ba46:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    ba4a:	f006 f9ac 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    ba4e:	90ea      	str	r0, [sp, #936]	; 0x3a8
    ba50:	e01f      	b.n	ba92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x922>
    ba52:	2001      	movs	r0, #1
    ba54:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    ba58:	e015      	b.n	ba86 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x916>
    ba5a:	2000      	movs	r0, #0
    ba5c:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    ba60:	e011      	b.n	ba86 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x916>
    ba62:	2000      	movs	r0, #0
    ba64:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    ba68:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    ba6c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ba70:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba74:	f006 fa0c 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    ba78:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    ba7c:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    ba80:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    ba84:	e00a      	b.n	ba9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x92c>
    ba86:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    ba8a:	07c0      	lsls	r0, r0, #31
    ba8c:	2800      	cmp	r0, #0
    ba8e:	d112      	bne.n	bab6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x946>
    ba90:	e055      	b.n	bb3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9ce>
    ba92:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    ba94:	07c1      	lsls	r1, r0, #31
    ba96:	2900      	cmp	r1, #0
    ba98:	d1e3      	bne.n	ba62 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8f2>
    ba9a:	e7de      	b.n	ba5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8ea>
    ba9c:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    baa0:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    baa4:	f006 f97f 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    baa8:	90e9      	str	r0, [sp, #932]	; 0x3a4
    baaa:	e7ff      	b.n	baac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x93c>
    baac:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    baae:	07c1      	lsls	r1, r0, #31
    bab0:	2900      	cmp	r1, #0
    bab2:	d1ce      	bne.n	ba52 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8e2>
    bab4:	e7d1      	b.n	ba5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8ea>
                trace!("[{:04x}] CALL nnn", self.pc);
    bab6:	f240 001c 	movw	r0, #28
    baba:	f2c0 0002 	movt	r0, #2
    babe:	6801      	ldr	r1, [r0, #0]
    bac0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bac4:	f100 0212 	add.w	r2, r0, #18
    bac8:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    bacc:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    bad0:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    bad4:	f649 534b 	movw	r3, #40267	; 0x9d4b
    bad8:	f2c0 0301 	movt	r3, #1
    badc:	4610      	mov	r0, r2
    bade:	91e8      	str	r1, [sp, #928]	; 0x3a0
    bae0:	4619      	mov	r1, r3
    bae2:	f7fe fefd 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bae6:	90e7      	str	r0, [sp, #924]	; 0x39c
    bae8:	91e6      	str	r1, [sp, #920]	; 0x398
    baea:	e7ff      	b.n	baec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x97c>
    baec:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    baee:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    baf2:	99e6      	ldr	r1, [sp, #920]	; 0x398
    baf4:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    baf8:	f24f 3228 	movw	r2, #62248	; 0xf328
    bafc:	f2c0 0201 	movt	r2, #1
    bb00:	6812      	ldr	r2, [r2, #0]
    bb02:	466b      	mov	r3, sp
    bb04:	f04f 0c01 	mov.w	ip, #1
    bb08:	f8c3 c008 	str.w	ip, [r3, #8]
    bb0c:	605a      	str	r2, [r3, #4]
    bb0e:	f8c3 c000 	str.w	ip, [r3]
    bb12:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    bb16:	2202      	movs	r2, #2
    bb18:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    bb1c:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    bb1e:	f006 f97e 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    bb22:	e7ff      	b.n	bb24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9b4>
    bb24:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    bb28:	f240 003c 	movw	r0, #60	; 0x3c
    bb2c:	f2c0 0002 	movt	r0, #2
    bb30:	6802      	ldr	r2, [r0, #0]
    bb32:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    bb36:	f007 fa51 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bb3a:	e7ff      	b.n	bb3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9cc>
    bb3c:	e7ff      	b.n	bb3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9ce>
                self.push(self.pc);
    bb3e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bb42:	8a41      	ldrh	r1, [r0, #18]
    bb44:	f003 f926 	bl	ed94 <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE>
    bb48:	e7ff      	b.n	bb4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9da>
    bb4a:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    bb4c:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    bb50:	f003 fc46 	bl	f3e0 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>
    bb54:	90e5      	str	r0, [sp, #916]	; 0x394
    bb56:	e7ff      	b.n	bb58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9e8>
    bb58:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bb5c:	99e5      	ldr	r1, [sp, #916]	; 0x394
    bb5e:	f003 f8c3 	bl	ece8 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    bb62:	e7ff      	b.n	bb64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9f4>
        match (
    bb64:	f002 bdd1 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    bb68:	2005      	movs	r0, #5
    bb6a:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    bb6e:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    bb72:	f2c0 0001 	movt	r0, #1
    bb76:	6801      	ldr	r1, [r0, #0]
    bb78:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    bb7c:	f006 f913 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bb80:	90e4      	str	r0, [sp, #912]	; 0x390
    bb82:	e01f      	b.n	bbc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa54>
    bb84:	2001      	movs	r0, #1
    bb86:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    bb8a:	e015      	b.n	bbb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa48>
    bb8c:	2000      	movs	r0, #0
    bb8e:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    bb92:	e011      	b.n	bbb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa48>
    bb94:	2000      	movs	r0, #0
    bb96:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    bb9a:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    bb9e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bba2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bba6:	f006 f973 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bbaa:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    bbae:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    bbb2:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    bbb6:	e00a      	b.n	bbce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa5e>
    bbb8:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    bbbc:	07c0      	lsls	r0, r0, #31
    bbbe:	2800      	cmp	r0, #0
    bbc0:	d112      	bne.n	bbe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa78>
    bbc2:	e055      	b.n	bc70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb00>
    bbc4:	98e4      	ldr	r0, [sp, #912]	; 0x390
    bbc6:	07c1      	lsls	r1, r0, #31
    bbc8:	2900      	cmp	r1, #0
    bbca:	d1e3      	bne.n	bb94 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa24>
    bbcc:	e7de      	b.n	bb8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa1c>
    bbce:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    bbd2:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    bbd6:	f006 f8e6 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bbda:	90e3      	str	r0, [sp, #908]	; 0x38c
    bbdc:	e7ff      	b.n	bbde <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa6e>
    bbde:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    bbe0:	07c1      	lsls	r1, r0, #31
    bbe2:	2900      	cmp	r1, #0
    bbe4:	d1ce      	bne.n	bb84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa14>
    bbe6:	e7d1      	b.n	bb8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa1c>
                trace!("[{:04x}] SE Vx kk", self.pc);
    bbe8:	f64f 70cc 	movw	r0, #65484	; 0xffcc
    bbec:	f2c0 0001 	movt	r0, #1
    bbf0:	6801      	ldr	r1, [r0, #0]
    bbf2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bbf6:	f100 0212 	add.w	r2, r0, #18
    bbfa:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    bbfe:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    bc02:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    bc06:	f649 534b 	movw	r3, #40267	; 0x9d4b
    bc0a:	f2c0 0301 	movt	r3, #1
    bc0e:	4610      	mov	r0, r2
    bc10:	91e2      	str	r1, [sp, #904]	; 0x388
    bc12:	4619      	mov	r1, r3
    bc14:	f7fe fe64 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bc18:	90e1      	str	r0, [sp, #900]	; 0x384
    bc1a:	91e0      	str	r1, [sp, #896]	; 0x380
    bc1c:	e7ff      	b.n	bc1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xaae>
    bc1e:	98e1      	ldr	r0, [sp, #900]	; 0x384
    bc20:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    bc24:	99e0      	ldr	r1, [sp, #896]	; 0x380
    bc26:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    bc2a:	f24f 3228 	movw	r2, #62248	; 0xf328
    bc2e:	f2c0 0201 	movt	r2, #1
    bc32:	6812      	ldr	r2, [r2, #0]
    bc34:	466b      	mov	r3, sp
    bc36:	f04f 0c01 	mov.w	ip, #1
    bc3a:	f8c3 c008 	str.w	ip, [r3, #8]
    bc3e:	605a      	str	r2, [r3, #4]
    bc40:	f8c3 c000 	str.w	ip, [r3]
    bc44:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    bc48:	2202      	movs	r2, #2
    bc4a:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    bc4e:	99e2      	ldr	r1, [sp, #904]	; 0x388
    bc50:	f006 f8e5 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    bc54:	e7ff      	b.n	bc56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xae6>
    bc56:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    bc5a:	f64f 70ec 	movw	r0, #65516	; 0xffec
    bc5e:	f2c0 0001 	movt	r0, #1
    bc62:	6802      	ldr	r2, [r0, #0]
    bc64:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    bc68:	f007 f9b8 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bc6c:	e7ff      	b.n	bc6e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xafe>
    bc6e:	e7ff      	b.n	bc70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb00>
                if self.v[x] == kk {
    bc70:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bc74:	280f      	cmp	r0, #15
    bc76:	f203 8011 	bhi.w	ec9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3b2c>
    bc7a:	e7ff      	b.n	bc7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb0c>
    bc7c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bc80:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bc84:	1842      	adds	r2, r0, r1
    bc86:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bc8a:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    bc8e:	fa5f fc83 	uxtb.w	ip, r3
    bc92:	4562      	cmp	r2, ip
    bc94:	d106      	bne.n	bca4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb34>
    bc96:	e7ff      	b.n	bc98 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb28>
                    self.next();
    bc98:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bc9c:	f003 f867 	bl	ed6e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    bca0:	e7ff      	b.n	bca2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb32>
                if self.v[x] == kk {
    bca2:	e7ff      	b.n	bca4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb34>
        match (
    bca4:	f002 bd31 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    bca8:	2005      	movs	r0, #5
    bcaa:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    bcae:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    bcb2:	f2c0 0001 	movt	r0, #1
    bcb6:	6801      	ldr	r1, [r0, #0]
    bcb8:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    bcbc:	f006 f873 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bcc0:	90df      	str	r0, [sp, #892]	; 0x37c
    bcc2:	e01f      	b.n	bd04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb94>
    bcc4:	2001      	movs	r0, #1
    bcc6:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    bcca:	e015      	b.n	bcf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb88>
    bccc:	2000      	movs	r0, #0
    bcce:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    bcd2:	e011      	b.n	bcf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb88>
    bcd4:	2000      	movs	r0, #0
    bcd6:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    bcda:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    bcde:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bce2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bce6:	f006 f8d3 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bcea:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    bcee:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    bcf2:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    bcf6:	e00a      	b.n	bd0e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb9e>
    bcf8:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    bcfc:	07c0      	lsls	r0, r0, #31
    bcfe:	2800      	cmp	r0, #0
    bd00:	d112      	bne.n	bd28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xbb8>
    bd02:	e055      	b.n	bdb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc40>
    bd04:	98df      	ldr	r0, [sp, #892]	; 0x37c
    bd06:	07c1      	lsls	r1, r0, #31
    bd08:	2900      	cmp	r1, #0
    bd0a:	d1e3      	bne.n	bcd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb64>
    bd0c:	e7de      	b.n	bccc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb5c>
    bd0e:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    bd12:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    bd16:	f006 f846 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bd1a:	90de      	str	r0, [sp, #888]	; 0x378
    bd1c:	e7ff      	b.n	bd1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xbae>
    bd1e:	98de      	ldr	r0, [sp, #888]	; 0x378
    bd20:	07c1      	lsls	r1, r0, #31
    bd22:	2900      	cmp	r1, #0
    bd24:	d1ce      	bne.n	bcc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb54>
    bd26:	e7d1      	b.n	bccc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb5c>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    bd28:	f64f 707c 	movw	r0, #65404	; 0xff7c
    bd2c:	f2c0 0001 	movt	r0, #1
    bd30:	6801      	ldr	r1, [r0, #0]
    bd32:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bd36:	f100 0212 	add.w	r2, r0, #18
    bd3a:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    bd3e:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    bd42:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    bd46:	f649 534b 	movw	r3, #40267	; 0x9d4b
    bd4a:	f2c0 0301 	movt	r3, #1
    bd4e:	4610      	mov	r0, r2
    bd50:	91dd      	str	r1, [sp, #884]	; 0x374
    bd52:	4619      	mov	r1, r3
    bd54:	f7fe fdc4 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bd58:	90dc      	str	r0, [sp, #880]	; 0x370
    bd5a:	91db      	str	r1, [sp, #876]	; 0x36c
    bd5c:	e7ff      	b.n	bd5e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xbee>
    bd5e:	98dc      	ldr	r0, [sp, #880]	; 0x370
    bd60:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    bd64:	99db      	ldr	r1, [sp, #876]	; 0x36c
    bd66:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    bd6a:	f24f 3228 	movw	r2, #62248	; 0xf328
    bd6e:	f2c0 0201 	movt	r2, #1
    bd72:	6812      	ldr	r2, [r2, #0]
    bd74:	466b      	mov	r3, sp
    bd76:	f04f 0c01 	mov.w	ip, #1
    bd7a:	f8c3 c008 	str.w	ip, [r3, #8]
    bd7e:	605a      	str	r2, [r3, #4]
    bd80:	f8c3 c000 	str.w	ip, [r3]
    bd84:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    bd88:	2202      	movs	r2, #2
    bd8a:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    bd8e:	99dd      	ldr	r1, [sp, #884]	; 0x374
    bd90:	f006 f845 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    bd94:	e7ff      	b.n	bd96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc26>
    bd96:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    bd9a:	f64f 709c 	movw	r0, #65436	; 0xff9c
    bd9e:	f2c0 0001 	movt	r0, #1
    bda2:	6802      	ldr	r2, [r0, #0]
    bda4:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    bda8:	f007 f918 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bdac:	e7ff      	b.n	bdae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc3e>
    bdae:	e7ff      	b.n	bdb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc40>
                if self.v[x] != kk {
    bdb0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bdb4:	280f      	cmp	r0, #15
    bdb6:	f202 8767 	bhi.w	ec88 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3b18>
    bdba:	e7ff      	b.n	bdbc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc4c>
    bdbc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bdc0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bdc4:	1842      	adds	r2, r0, r1
    bdc6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bdca:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    bdce:	fa5f fc83 	uxtb.w	ip, r3
    bdd2:	4562      	cmp	r2, ip
    bdd4:	d006      	beq.n	bde4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc74>
    bdd6:	e7ff      	b.n	bdd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc68>
                    self.next();
    bdd8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bddc:	f002 ffc7 	bl	ed6e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    bde0:	e7ff      	b.n	bde2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc72>
                if self.v[x] != kk {
    bde2:	e7ff      	b.n	bde4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc74>
        match (
    bde4:	f002 bc91 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    bde8:	2005      	movs	r0, #5
    bdea:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    bdee:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    bdf2:	f2c0 0001 	movt	r0, #1
    bdf6:	6801      	ldr	r1, [r0, #0]
    bdf8:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    bdfc:	f005 ffd3 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    be00:	90da      	str	r0, [sp, #872]	; 0x368
    be02:	e01f      	b.n	be44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcd4>
    be04:	2001      	movs	r0, #1
    be06:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    be0a:	e015      	b.n	be38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcc8>
    be0c:	2000      	movs	r0, #0
    be0e:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    be12:	e011      	b.n	be38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcc8>
    be14:	2000      	movs	r0, #0
    be16:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    be1a:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    be1e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    be22:	f2c2 0000 	movt	r0, #8192	; 0x2000
    be26:	f006 f833 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    be2a:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    be2e:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    be32:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    be36:	e00a      	b.n	be4e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcde>
    be38:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    be3c:	07c0      	lsls	r0, r0, #31
    be3e:	2800      	cmp	r0, #0
    be40:	d112      	bne.n	be68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcf8>
    be42:	e055      	b.n	bef0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd80>
    be44:	98da      	ldr	r0, [sp, #872]	; 0x368
    be46:	07c1      	lsls	r1, r0, #31
    be48:	2900      	cmp	r1, #0
    be4a:	d1e3      	bne.n	be14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xca4>
    be4c:	e7de      	b.n	be0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc9c>
    be4e:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    be52:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    be56:	f005 ffa6 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    be5a:	90d9      	str	r0, [sp, #868]	; 0x364
    be5c:	e7ff      	b.n	be5e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcee>
    be5e:	98d9      	ldr	r0, [sp, #868]	; 0x364
    be60:	07c1      	lsls	r1, r0, #31
    be62:	2900      	cmp	r1, #0
    be64:	d1ce      	bne.n	be04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc94>
    be66:	e7d1      	b.n	be0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc9c>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    be68:	f64f 701c 	movw	r0, #65308	; 0xff1c
    be6c:	f2c0 0001 	movt	r0, #1
    be70:	6801      	ldr	r1, [r0, #0]
    be72:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    be76:	f100 0212 	add.w	r2, r0, #18
    be7a:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    be7e:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    be82:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    be86:	f649 534b 	movw	r3, #40267	; 0x9d4b
    be8a:	f2c0 0301 	movt	r3, #1
    be8e:	4610      	mov	r0, r2
    be90:	91d8      	str	r1, [sp, #864]	; 0x360
    be92:	4619      	mov	r1, r3
    be94:	f7fe fd24 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    be98:	90d7      	str	r0, [sp, #860]	; 0x35c
    be9a:	91d6      	str	r1, [sp, #856]	; 0x358
    be9c:	e7ff      	b.n	be9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd2e>
    be9e:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    bea0:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    bea4:	99d6      	ldr	r1, [sp, #856]	; 0x358
    bea6:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    beaa:	f24f 3228 	movw	r2, #62248	; 0xf328
    beae:	f2c0 0201 	movt	r2, #1
    beb2:	6812      	ldr	r2, [r2, #0]
    beb4:	466b      	mov	r3, sp
    beb6:	f04f 0c01 	mov.w	ip, #1
    beba:	f8c3 c008 	str.w	ip, [r3, #8]
    bebe:	605a      	str	r2, [r3, #4]
    bec0:	f8c3 c000 	str.w	ip, [r3]
    bec4:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    bec8:	2202      	movs	r2, #2
    beca:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    bece:	99d8      	ldr	r1, [sp, #864]	; 0x360
    bed0:	f005 ffa5 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    bed4:	e7ff      	b.n	bed6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd66>
    bed6:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    beda:	f64f 703c 	movw	r0, #65340	; 0xff3c
    bede:	f2c0 0001 	movt	r0, #1
    bee2:	6802      	ldr	r2, [r0, #0]
    bee4:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    bee8:	f007 f878 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    beec:	e7ff      	b.n	beee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd7e>
    beee:	e7ff      	b.n	bef0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd80>
                if self.v[x] == self.v[y] {
    bef0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bef4:	280f      	cmp	r0, #15
    bef6:	f202 86b3 	bhi.w	ec60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3af0>
    befa:	e7ff      	b.n	befc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd8c>
    befc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf00:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bf04:	1842      	adds	r2, r0, r1
    bf06:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bf0a:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    bf0e:	2b0f      	cmp	r3, #15
    bf10:	92d5      	str	r2, [sp, #852]	; 0x354
    bf12:	f202 86af 	bhi.w	ec74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3b04>
    bf16:	e7ff      	b.n	bf18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xda8>
    bf18:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf1c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    bf20:	1842      	adds	r2, r0, r1
    bf22:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bf26:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    bf28:	fa5f fc83 	uxtb.w	ip, r3
    bf2c:	4594      	cmp	ip, r2
    bf2e:	d106      	bne.n	bf3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdce>
    bf30:	e7ff      	b.n	bf32 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdc2>
                    self.next();
    bf32:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf36:	f002 ff1a 	bl	ed6e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    bf3a:	e7ff      	b.n	bf3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdcc>
                if self.v[x] == self.v[y] {
    bf3c:	e7ff      	b.n	bf3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdce>
        match (
    bf3e:	f002 bbe4 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    bf42:	2005      	movs	r0, #5
    bf44:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    bf48:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    bf4c:	f2c0 0001 	movt	r0, #1
    bf50:	6801      	ldr	r1, [r0, #0]
    bf52:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    bf56:	f005 ff26 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bf5a:	90d4      	str	r0, [sp, #848]	; 0x350
    bf5c:	e01f      	b.n	bf9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe2e>
    bf5e:	2001      	movs	r0, #1
    bf60:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    bf64:	e015      	b.n	bf92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe22>
    bf66:	2000      	movs	r0, #0
    bf68:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    bf6c:	e011      	b.n	bf92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe22>
    bf6e:	2000      	movs	r0, #0
    bf70:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    bf74:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    bf78:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bf7c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bf80:	f005 ff86 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bf84:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    bf88:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    bf8c:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    bf90:	e00a      	b.n	bfa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe38>
    bf92:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    bf96:	07c0      	lsls	r0, r0, #31
    bf98:	2800      	cmp	r0, #0
    bf9a:	d112      	bne.n	bfc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe52>
    bf9c:	e055      	b.n	c04a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xeda>
    bf9e:	98d4      	ldr	r0, [sp, #848]	; 0x350
    bfa0:	07c1      	lsls	r1, r0, #31
    bfa2:	2900      	cmp	r1, #0
    bfa4:	d1e3      	bne.n	bf6e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdfe>
    bfa6:	e7de      	b.n	bf66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdf6>
    bfa8:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    bfac:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    bfb0:	f005 fef9 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bfb4:	90d3      	str	r0, [sp, #844]	; 0x34c
    bfb6:	e7ff      	b.n	bfb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe48>
    bfb8:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    bfba:	07c1      	lsls	r1, r0, #31
    bfbc:	2900      	cmp	r1, #0
    bfbe:	d1ce      	bne.n	bf5e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdee>
    bfc0:	e7d1      	b.n	bf66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdf6>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    bfc2:	f64f 6034 	movw	r0, #65076	; 0xfe34
    bfc6:	f2c0 0001 	movt	r0, #1
    bfca:	6801      	ldr	r1, [r0, #0]
    bfcc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bfd0:	f100 0212 	add.w	r2, r0, #18
    bfd4:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    bfd8:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    bfdc:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    bfe0:	f649 534b 	movw	r3, #40267	; 0x9d4b
    bfe4:	f2c0 0301 	movt	r3, #1
    bfe8:	4610      	mov	r0, r2
    bfea:	91d2      	str	r1, [sp, #840]	; 0x348
    bfec:	4619      	mov	r1, r3
    bfee:	f7fe fc77 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bff2:	90d1      	str	r0, [sp, #836]	; 0x344
    bff4:	91d0      	str	r1, [sp, #832]	; 0x340
    bff6:	e7ff      	b.n	bff8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe88>
    bff8:	98d1      	ldr	r0, [sp, #836]	; 0x344
    bffa:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    bffe:	99d0      	ldr	r1, [sp, #832]	; 0x340
    c000:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    c004:	f24f 3228 	movw	r2, #62248	; 0xf328
    c008:	f2c0 0201 	movt	r2, #1
    c00c:	6812      	ldr	r2, [r2, #0]
    c00e:	466b      	mov	r3, sp
    c010:	f04f 0c01 	mov.w	ip, #1
    c014:	f8c3 c008 	str.w	ip, [r3, #8]
    c018:	605a      	str	r2, [r3, #4]
    c01a:	f8c3 c000 	str.w	ip, [r3]
    c01e:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    c022:	2202      	movs	r2, #2
    c024:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    c028:	99d2      	ldr	r1, [sp, #840]	; 0x348
    c02a:	f005 fef8 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c02e:	e7ff      	b.n	c030 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xec0>
    c030:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    c034:	f64f 6054 	movw	r0, #65108	; 0xfe54
    c038:	f2c0 0001 	movt	r0, #1
    c03c:	6802      	ldr	r2, [r0, #0]
    c03e:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    c042:	f006 ffcb 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c046:	e7ff      	b.n	c048 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xed8>
    c048:	e7ff      	b.n	c04a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xeda>
                self.v[x] = kk;
    c04a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c04e:	280f      	cmp	r0, #15
    c050:	f202 85fc 	bhi.w	ec4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3adc>
    c054:	e7ff      	b.n	c056 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xee6>
    c056:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c05a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c05e:	1842      	adds	r2, r0, r1
    c060:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    c064:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c068:	f002 bb4f 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c06c:	2005      	movs	r0, #5
    c06e:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    c072:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    c076:	f2c0 0001 	movt	r0, #1
    c07a:	6801      	ldr	r1, [r0, #0]
    c07c:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    c080:	f005 fe91 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c084:	90cf      	str	r0, [sp, #828]	; 0x33c
    c086:	e01f      	b.n	c0c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf58>
    c088:	2001      	movs	r0, #1
    c08a:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    c08e:	e015      	b.n	c0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf4c>
    c090:	2000      	movs	r0, #0
    c092:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    c096:	e011      	b.n	c0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf4c>
    c098:	2000      	movs	r0, #0
    c09a:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    c09e:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    c0a2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c0a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c0aa:	f005 fef1 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c0ae:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    c0b2:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    c0b6:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    c0ba:	e00a      	b.n	c0d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf62>
    c0bc:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    c0c0:	07c0      	lsls	r0, r0, #31
    c0c2:	2800      	cmp	r0, #0
    c0c4:	d112      	bne.n	c0ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf7c>
    c0c6:	e055      	b.n	c174 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1004>
    c0c8:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    c0ca:	07c1      	lsls	r1, r0, #31
    c0cc:	2900      	cmp	r1, #0
    c0ce:	d1e3      	bne.n	c098 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf28>
    c0d0:	e7de      	b.n	c090 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf20>
    c0d2:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    c0d6:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    c0da:	f005 fe64 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c0de:	90ce      	str	r0, [sp, #824]	; 0x338
    c0e0:	e7ff      	b.n	c0e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf72>
    c0e2:	98ce      	ldr	r0, [sp, #824]	; 0x338
    c0e4:	07c1      	lsls	r1, r0, #31
    c0e6:	2900      	cmp	r1, #0
    c0e8:	d1ce      	bne.n	c088 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf18>
    c0ea:	e7d1      	b.n	c090 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf20>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    c0ec:	f64f 50d4 	movw	r0, #64980	; 0xfdd4
    c0f0:	f2c0 0001 	movt	r0, #1
    c0f4:	6801      	ldr	r1, [r0, #0]
    c0f6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c0fa:	f100 0212 	add.w	r2, r0, #18
    c0fe:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    c102:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    c106:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    c10a:	f649 534b 	movw	r3, #40267	; 0x9d4b
    c10e:	f2c0 0301 	movt	r3, #1
    c112:	4610      	mov	r0, r2
    c114:	91cd      	str	r1, [sp, #820]	; 0x334
    c116:	4619      	mov	r1, r3
    c118:	f7fe fbe2 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c11c:	90cc      	str	r0, [sp, #816]	; 0x330
    c11e:	91cb      	str	r1, [sp, #812]	; 0x32c
    c120:	e7ff      	b.n	c122 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xfb2>
    c122:	98cc      	ldr	r0, [sp, #816]	; 0x330
    c124:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    c128:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    c12a:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    c12e:	f24f 3228 	movw	r2, #62248	; 0xf328
    c132:	f2c0 0201 	movt	r2, #1
    c136:	6812      	ldr	r2, [r2, #0]
    c138:	466b      	mov	r3, sp
    c13a:	f04f 0c01 	mov.w	ip, #1
    c13e:	f8c3 c008 	str.w	ip, [r3, #8]
    c142:	605a      	str	r2, [r3, #4]
    c144:	f8c3 c000 	str.w	ip, [r3]
    c148:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    c14c:	2202      	movs	r2, #2
    c14e:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    c152:	99cd      	ldr	r1, [sp, #820]	; 0x334
    c154:	f005 fe63 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c158:	e7ff      	b.n	c15a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xfea>
    c15a:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    c15e:	f64f 50f4 	movw	r0, #65012	; 0xfdf4
    c162:	f2c0 0001 	movt	r0, #1
    c166:	6802      	ldr	r2, [r0, #0]
    c168:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    c16c:	f006 ff36 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c170:	e7ff      	b.n	c172 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1002>
    c172:	e7ff      	b.n	c174 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1004>
                self.v[x] = self.v[x].wrapping_add(kk);
    c174:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c178:	280f      	cmp	r0, #15
    c17a:	f202 8553 	bhi.w	ec24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ab4>
    c17e:	e7ff      	b.n	c180 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1010>
    c180:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c184:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c188:	1842      	adds	r2, r0, r1
    c18a:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    c18e:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    c192:	f003 f877 	bl	f284 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE>
    c196:	90ca      	str	r0, [sp, #808]	; 0x328
    c198:	e7ff      	b.n	c19a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x102a>
    c19a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c19e:	280f      	cmp	r0, #15
    c1a0:	f202 854a 	bhi.w	ec38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ac8>
    c1a4:	e7ff      	b.n	c1a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1036>
    c1a6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c1aa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c1ae:	1842      	adds	r2, r0, r1
    c1b0:	9bca      	ldr	r3, [sp, #808]	; 0x328
    c1b2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c1b6:	f002 baa8 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c1ba:	2005      	movs	r0, #5
    c1bc:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    c1c0:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    c1c4:	f2c0 0001 	movt	r0, #1
    c1c8:	6801      	ldr	r1, [r0, #0]
    c1ca:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    c1ce:	f005 fdea 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c1d2:	90c9      	str	r0, [sp, #804]	; 0x324
    c1d4:	e01f      	b.n	c216 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10a6>
    c1d6:	2001      	movs	r0, #1
    c1d8:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    c1dc:	e015      	b.n	c20a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x109a>
    c1de:	2000      	movs	r0, #0
    c1e0:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    c1e4:	e011      	b.n	c20a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x109a>
    c1e6:	2000      	movs	r0, #0
    c1e8:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    c1ec:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    c1f0:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c1f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c1f8:	f005 fe4a 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c1fc:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    c200:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    c204:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    c208:	e00a      	b.n	c220 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10b0>
    c20a:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    c20e:	07c0      	lsls	r0, r0, #31
    c210:	2800      	cmp	r0, #0
    c212:	d112      	bne.n	c23a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10ca>
    c214:	e055      	b.n	c2c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1152>
    c216:	98c9      	ldr	r0, [sp, #804]	; 0x324
    c218:	07c1      	lsls	r1, r0, #31
    c21a:	2900      	cmp	r1, #0
    c21c:	d1e3      	bne.n	c1e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1076>
    c21e:	e7de      	b.n	c1de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x106e>
    c220:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    c224:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    c228:	f005 fdbd 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c22c:	90c8      	str	r0, [sp, #800]	; 0x320
    c22e:	e7ff      	b.n	c230 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10c0>
    c230:	98c8      	ldr	r0, [sp, #800]	; 0x320
    c232:	07c1      	lsls	r1, r0, #31
    c234:	2900      	cmp	r1, #0
    c236:	d1ce      	bne.n	c1d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1066>
    c238:	e7d1      	b.n	c1de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x106e>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    c23a:	f64f 5074 	movw	r0, #64884	; 0xfd74
    c23e:	f2c0 0001 	movt	r0, #1
    c242:	6801      	ldr	r1, [r0, #0]
    c244:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c248:	f100 0212 	add.w	r2, r0, #18
    c24c:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    c250:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    c254:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    c258:	f649 534b 	movw	r3, #40267	; 0x9d4b
    c25c:	f2c0 0301 	movt	r3, #1
    c260:	4610      	mov	r0, r2
    c262:	91c7      	str	r1, [sp, #796]	; 0x31c
    c264:	4619      	mov	r1, r3
    c266:	f7fe fb3b 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c26a:	90c6      	str	r0, [sp, #792]	; 0x318
    c26c:	91c5      	str	r1, [sp, #788]	; 0x314
    c26e:	e7ff      	b.n	c270 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1100>
    c270:	98c6      	ldr	r0, [sp, #792]	; 0x318
    c272:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    c276:	99c5      	ldr	r1, [sp, #788]	; 0x314
    c278:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    c27c:	f24f 3228 	movw	r2, #62248	; 0xf328
    c280:	f2c0 0201 	movt	r2, #1
    c284:	6812      	ldr	r2, [r2, #0]
    c286:	466b      	mov	r3, sp
    c288:	f04f 0c01 	mov.w	ip, #1
    c28c:	f8c3 c008 	str.w	ip, [r3, #8]
    c290:	605a      	str	r2, [r3, #4]
    c292:	f8c3 c000 	str.w	ip, [r3]
    c296:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    c29a:	2202      	movs	r2, #2
    c29c:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    c2a0:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    c2a2:	f005 fdbc 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c2a6:	e7ff      	b.n	c2a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1138>
    c2a8:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    c2ac:	f64f 5094 	movw	r0, #64916	; 0xfd94
    c2b0:	f2c0 0001 	movt	r0, #1
    c2b4:	6802      	ldr	r2, [r0, #0]
    c2b6:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    c2ba:	f006 fe8f 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c2be:	e7ff      	b.n	c2c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1150>
    c2c0:	e7ff      	b.n	c2c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1152>
                self.v[x] = self.v[y];
    c2c2:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c2c6:	280f      	cmp	r0, #15
    c2c8:	f202 8498 	bhi.w	ebfc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a8c>
    c2cc:	e7ff      	b.n	c2ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x115e>
    c2ce:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c2d2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c2d6:	1842      	adds	r2, r0, r1
    c2d8:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c2dc:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c2e0:	2b0f      	cmp	r3, #15
    c2e2:	92c4      	str	r2, [sp, #784]	; 0x310
    c2e4:	f202 8494 	bhi.w	ec10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3aa0>
    c2e8:	e7ff      	b.n	c2ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x117a>
    c2ea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c2ee:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c2f2:	1842      	adds	r2, r0, r1
    c2f4:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    c2f6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c2fa:	f002 ba06 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c2fe:	2005      	movs	r0, #5
    c300:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    c304:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    c308:	f2c0 0001 	movt	r0, #1
    c30c:	6801      	ldr	r1, [r0, #0]
    c30e:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    c312:	f005 fd48 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c316:	90c3      	str	r0, [sp, #780]	; 0x30c
    c318:	e01f      	b.n	c35a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11ea>
    c31a:	2001      	movs	r0, #1
    c31c:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    c320:	e015      	b.n	c34e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11de>
    c322:	2000      	movs	r0, #0
    c324:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    c328:	e011      	b.n	c34e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11de>
    c32a:	2000      	movs	r0, #0
    c32c:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    c330:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    c334:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c338:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c33c:	f005 fda8 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c340:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    c344:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    c348:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    c34c:	e00a      	b.n	c364 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11f4>
    c34e:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    c352:	07c0      	lsls	r0, r0, #31
    c354:	2800      	cmp	r0, #0
    c356:	d112      	bne.n	c37e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x120e>
    c358:	e055      	b.n	c406 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1296>
    c35a:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    c35c:	07c1      	lsls	r1, r0, #31
    c35e:	2900      	cmp	r1, #0
    c360:	d1e3      	bne.n	c32a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11ba>
    c362:	e7de      	b.n	c322 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11b2>
    c364:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    c368:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    c36c:	f005 fd1b 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c370:	90c2      	str	r0, [sp, #776]	; 0x308
    c372:	e7ff      	b.n	c374 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1204>
    c374:	98c2      	ldr	r0, [sp, #776]	; 0x308
    c376:	07c1      	lsls	r1, r0, #31
    c378:	2900      	cmp	r1, #0
    c37a:	d1ce      	bne.n	c31a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11aa>
    c37c:	e7d1      	b.n	c322 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11b2>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    c37e:	f64f 5014 	movw	r0, #64788	; 0xfd14
    c382:	f2c0 0001 	movt	r0, #1
    c386:	6801      	ldr	r1, [r0, #0]
    c388:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c38c:	f100 0212 	add.w	r2, r0, #18
    c390:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    c394:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    c398:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    c39c:	f649 534b 	movw	r3, #40267	; 0x9d4b
    c3a0:	f2c0 0301 	movt	r3, #1
    c3a4:	4610      	mov	r0, r2
    c3a6:	91c1      	str	r1, [sp, #772]	; 0x304
    c3a8:	4619      	mov	r1, r3
    c3aa:	f7fe fa99 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c3ae:	90c0      	str	r0, [sp, #768]	; 0x300
    c3b0:	91bf      	str	r1, [sp, #764]	; 0x2fc
    c3b2:	e7ff      	b.n	c3b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1244>
    c3b4:	98c0      	ldr	r0, [sp, #768]	; 0x300
    c3b6:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    c3ba:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    c3bc:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    c3c0:	f24f 3228 	movw	r2, #62248	; 0xf328
    c3c4:	f2c0 0201 	movt	r2, #1
    c3c8:	6812      	ldr	r2, [r2, #0]
    c3ca:	466b      	mov	r3, sp
    c3cc:	f04f 0c01 	mov.w	ip, #1
    c3d0:	f8c3 c008 	str.w	ip, [r3, #8]
    c3d4:	605a      	str	r2, [r3, #4]
    c3d6:	f8c3 c000 	str.w	ip, [r3]
    c3da:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    c3de:	2202      	movs	r2, #2
    c3e0:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    c3e4:	99c1      	ldr	r1, [sp, #772]	; 0x304
    c3e6:	f005 fd1a 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c3ea:	e7ff      	b.n	c3ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x127c>
    c3ec:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    c3f0:	f64f 5034 	movw	r0, #64820	; 0xfd34
    c3f4:	f2c0 0001 	movt	r0, #1
    c3f8:	6802      	ldr	r2, [r0, #0]
    c3fa:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    c3fe:	f006 fded 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c402:	e7ff      	b.n	c404 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1294>
    c404:	e7ff      	b.n	c406 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1296>
                self.v[x] |= self.v[y];
    c406:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c40a:	280f      	cmp	r0, #15
    c40c:	f202 83e2 	bhi.w	ebd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a64>
    c410:	e7ff      	b.n	c412 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12a2>
    c412:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c416:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c41a:	1842      	adds	r2, r0, r1
    c41c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c420:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c424:	2b0f      	cmp	r3, #15
    c426:	92be      	str	r2, [sp, #760]	; 0x2f8
    c428:	f202 83de 	bhi.w	ebe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a78>
    c42c:	e7ff      	b.n	c42e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12be>
    c42e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c432:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c436:	1842      	adds	r2, r0, r1
    c438:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    c43c:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    c440:	ea43 030c 	orr.w	r3, r3, ip
    c444:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c448:	f002 b95f 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c44c:	2005      	movs	r0, #5
    c44e:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    c452:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    c456:	f2c0 0001 	movt	r0, #1
    c45a:	6801      	ldr	r1, [r0, #0]
    c45c:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    c460:	f005 fca1 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c464:	90bd      	str	r0, [sp, #756]	; 0x2f4
    c466:	e01f      	b.n	c4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1338>
    c468:	2001      	movs	r0, #1
    c46a:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    c46e:	e015      	b.n	c49c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x132c>
    c470:	2000      	movs	r0, #0
    c472:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    c476:	e011      	b.n	c49c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x132c>
    c478:	2000      	movs	r0, #0
    c47a:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    c47e:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    c482:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c486:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c48a:	f005 fd01 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c48e:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    c492:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    c496:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    c49a:	e00a      	b.n	c4b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1342>
    c49c:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    c4a0:	07c0      	lsls	r0, r0, #31
    c4a2:	2800      	cmp	r0, #0
    c4a4:	d112      	bne.n	c4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x135c>
    c4a6:	e055      	b.n	c554 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13e4>
    c4a8:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    c4aa:	07c1      	lsls	r1, r0, #31
    c4ac:	2900      	cmp	r1, #0
    c4ae:	d1e3      	bne.n	c478 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1308>
    c4b0:	e7de      	b.n	c470 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1300>
    c4b2:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    c4b6:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    c4ba:	f005 fc74 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c4be:	90bc      	str	r0, [sp, #752]	; 0x2f0
    c4c0:	e7ff      	b.n	c4c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1352>
    c4c2:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    c4c4:	07c1      	lsls	r1, r0, #31
    c4c6:	2900      	cmp	r1, #0
    c4c8:	d1ce      	bne.n	c468 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12f8>
    c4ca:	e7d1      	b.n	c470 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1300>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    c4cc:	f64f 40b4 	movw	r0, #64692	; 0xfcb4
    c4d0:	f2c0 0001 	movt	r0, #1
    c4d4:	6801      	ldr	r1, [r0, #0]
    c4d6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c4da:	f100 0212 	add.w	r2, r0, #18
    c4de:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    c4e2:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    c4e6:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    c4ea:	f649 534b 	movw	r3, #40267	; 0x9d4b
    c4ee:	f2c0 0301 	movt	r3, #1
    c4f2:	4610      	mov	r0, r2
    c4f4:	91bb      	str	r1, [sp, #748]	; 0x2ec
    c4f6:	4619      	mov	r1, r3
    c4f8:	f7fe f9f2 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c4fc:	90ba      	str	r0, [sp, #744]	; 0x2e8
    c4fe:	91b9      	str	r1, [sp, #740]	; 0x2e4
    c500:	e7ff      	b.n	c502 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1392>
    c502:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    c504:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    c508:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    c50a:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    c50e:	f24f 3228 	movw	r2, #62248	; 0xf328
    c512:	f2c0 0201 	movt	r2, #1
    c516:	6812      	ldr	r2, [r2, #0]
    c518:	466b      	mov	r3, sp
    c51a:	f04f 0c01 	mov.w	ip, #1
    c51e:	f8c3 c008 	str.w	ip, [r3, #8]
    c522:	605a      	str	r2, [r3, #4]
    c524:	f8c3 c000 	str.w	ip, [r3]
    c528:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    c52c:	2202      	movs	r2, #2
    c52e:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    c532:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    c534:	f005 fc73 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c538:	e7ff      	b.n	c53a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13ca>
    c53a:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    c53e:	f64f 40d4 	movw	r0, #64724	; 0xfcd4
    c542:	f2c0 0001 	movt	r0, #1
    c546:	6802      	ldr	r2, [r0, #0]
    c548:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    c54c:	f006 fd46 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c550:	e7ff      	b.n	c552 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13e2>
    c552:	e7ff      	b.n	c554 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13e4>
                self.v[x] &= self.v[y];
    c554:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c558:	280f      	cmp	r0, #15
    c55a:	f202 8327 	bhi.w	ebac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a3c>
    c55e:	e7ff      	b.n	c560 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13f0>
    c560:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c564:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c568:	1842      	adds	r2, r0, r1
    c56a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c56e:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c572:	2b0f      	cmp	r3, #15
    c574:	92b8      	str	r2, [sp, #736]	; 0x2e0
    c576:	f202 8323 	bhi.w	ebc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a50>
    c57a:	e7ff      	b.n	c57c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x140c>
    c57c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c580:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c584:	1842      	adds	r2, r0, r1
    c586:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    c58a:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    c58e:	ea03 030c 	and.w	r3, r3, ip
    c592:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c596:	f002 b8b8 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c59a:	2005      	movs	r0, #5
    c59c:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    c5a0:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    c5a4:	f2c0 0001 	movt	r0, #1
    c5a8:	6801      	ldr	r1, [r0, #0]
    c5aa:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    c5ae:	f005 fbfa 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c5b2:	90b7      	str	r0, [sp, #732]	; 0x2dc
    c5b4:	e01f      	b.n	c5f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1486>
    c5b6:	2001      	movs	r0, #1
    c5b8:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    c5bc:	e015      	b.n	c5ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x147a>
    c5be:	2000      	movs	r0, #0
    c5c0:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    c5c4:	e011      	b.n	c5ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x147a>
    c5c6:	2000      	movs	r0, #0
    c5c8:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    c5cc:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    c5d0:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c5d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c5d8:	f005 fc5a 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c5dc:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    c5e0:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    c5e4:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    c5e8:	e00a      	b.n	c600 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1490>
    c5ea:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    c5ee:	07c0      	lsls	r0, r0, #31
    c5f0:	2800      	cmp	r0, #0
    c5f2:	d112      	bne.n	c61a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x14aa>
    c5f4:	e055      	b.n	c6a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1532>
    c5f6:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    c5f8:	07c1      	lsls	r1, r0, #31
    c5fa:	2900      	cmp	r1, #0
    c5fc:	d1e3      	bne.n	c5c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1456>
    c5fe:	e7de      	b.n	c5be <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x144e>
    c600:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    c604:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    c608:	f005 fbcd 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c60c:	90b6      	str	r0, [sp, #728]	; 0x2d8
    c60e:	e7ff      	b.n	c610 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x14a0>
    c610:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    c612:	07c1      	lsls	r1, r0, #31
    c614:	2900      	cmp	r1, #0
    c616:	d1ce      	bne.n	c5b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1446>
    c618:	e7d1      	b.n	c5be <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x144e>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    c61a:	f64f 4054 	movw	r0, #64596	; 0xfc54
    c61e:	f2c0 0001 	movt	r0, #1
    c622:	6801      	ldr	r1, [r0, #0]
    c624:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c628:	f100 0212 	add.w	r2, r0, #18
    c62c:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    c630:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    c634:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    c638:	f649 534b 	movw	r3, #40267	; 0x9d4b
    c63c:	f2c0 0301 	movt	r3, #1
    c640:	4610      	mov	r0, r2
    c642:	91b5      	str	r1, [sp, #724]	; 0x2d4
    c644:	4619      	mov	r1, r3
    c646:	f7fe f94b 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c64a:	90b4      	str	r0, [sp, #720]	; 0x2d0
    c64c:	91b3      	str	r1, [sp, #716]	; 0x2cc
    c64e:	e7ff      	b.n	c650 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x14e0>
    c650:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    c652:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    c656:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    c658:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    c65c:	f24f 3228 	movw	r2, #62248	; 0xf328
    c660:	f2c0 0201 	movt	r2, #1
    c664:	6812      	ldr	r2, [r2, #0]
    c666:	466b      	mov	r3, sp
    c668:	f04f 0c01 	mov.w	ip, #1
    c66c:	f8c3 c008 	str.w	ip, [r3, #8]
    c670:	605a      	str	r2, [r3, #4]
    c672:	f8c3 c000 	str.w	ip, [r3]
    c676:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    c67a:	2202      	movs	r2, #2
    c67c:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    c680:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    c682:	f005 fbcc 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c686:	e7ff      	b.n	c688 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1518>
    c688:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    c68c:	f64f 4074 	movw	r0, #64628	; 0xfc74
    c690:	f2c0 0001 	movt	r0, #1
    c694:	6802      	ldr	r2, [r0, #0]
    c696:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    c69a:	f006 fc9f 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c69e:	e7ff      	b.n	c6a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1530>
    c6a0:	e7ff      	b.n	c6a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1532>
                self.v[x] ^= self.v[y];
    c6a2:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c6a6:	280f      	cmp	r0, #15
    c6a8:	f202 826c 	bhi.w	eb84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a14>
    c6ac:	e7ff      	b.n	c6ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x153e>
    c6ae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c6b2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c6b6:	1842      	adds	r2, r0, r1
    c6b8:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c6bc:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c6c0:	2b0f      	cmp	r3, #15
    c6c2:	92b2      	str	r2, [sp, #712]	; 0x2c8
    c6c4:	f202 8268 	bhi.w	eb98 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a28>
    c6c8:	e7ff      	b.n	c6ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x155a>
    c6ca:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c6ce:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c6d2:	1842      	adds	r2, r0, r1
    c6d4:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    c6d8:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    c6dc:	ea83 030c 	eor.w	r3, r3, ip
    c6e0:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c6e4:	f002 b811 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c6e8:	2005      	movs	r0, #5
    c6ea:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    c6ee:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    c6f2:	f2c0 0001 	movt	r0, #1
    c6f6:	6801      	ldr	r1, [r0, #0]
    c6f8:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    c6fc:	f005 fb53 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c700:	90b1      	str	r0, [sp, #708]	; 0x2c4
    c702:	e01f      	b.n	c744 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15d4>
    c704:	2001      	movs	r0, #1
    c706:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    c70a:	e015      	b.n	c738 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15c8>
    c70c:	2000      	movs	r0, #0
    c70e:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    c712:	e011      	b.n	c738 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15c8>
    c714:	2000      	movs	r0, #0
    c716:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    c71a:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    c71e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c722:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c726:	f005 fbb3 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c72a:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    c72e:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    c732:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    c736:	e00a      	b.n	c74e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15de>
    c738:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    c73c:	07c0      	lsls	r0, r0, #31
    c73e:	2800      	cmp	r0, #0
    c740:	d112      	bne.n	c768 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15f8>
    c742:	e055      	b.n	c7f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1680>
    c744:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    c746:	07c1      	lsls	r1, r0, #31
    c748:	2900      	cmp	r1, #0
    c74a:	d1e3      	bne.n	c714 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15a4>
    c74c:	e7de      	b.n	c70c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x159c>
    c74e:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    c752:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    c756:	f005 fb26 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c75a:	90b0      	str	r0, [sp, #704]	; 0x2c0
    c75c:	e7ff      	b.n	c75e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15ee>
    c75e:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    c760:	07c1      	lsls	r1, r0, #31
    c762:	2900      	cmp	r1, #0
    c764:	d1ce      	bne.n	c704 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1594>
    c766:	e7d1      	b.n	c70c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x159c>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    c768:	f64f 30e4 	movw	r0, #64484	; 0xfbe4
    c76c:	f2c0 0001 	movt	r0, #1
    c770:	6801      	ldr	r1, [r0, #0]
    c772:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c776:	f100 0212 	add.w	r2, r0, #18
    c77a:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    c77e:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    c782:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    c786:	f649 534b 	movw	r3, #40267	; 0x9d4b
    c78a:	f2c0 0301 	movt	r3, #1
    c78e:	4610      	mov	r0, r2
    c790:	91af      	str	r1, [sp, #700]	; 0x2bc
    c792:	4619      	mov	r1, r3
    c794:	f7fe f8a4 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c798:	90ae      	str	r0, [sp, #696]	; 0x2b8
    c79a:	91ad      	str	r1, [sp, #692]	; 0x2b4
    c79c:	e7ff      	b.n	c79e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x162e>
    c79e:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    c7a0:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    c7a4:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    c7a6:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    c7aa:	f24f 3228 	movw	r2, #62248	; 0xf328
    c7ae:	f2c0 0201 	movt	r2, #1
    c7b2:	6812      	ldr	r2, [r2, #0]
    c7b4:	466b      	mov	r3, sp
    c7b6:	f04f 0c01 	mov.w	ip, #1
    c7ba:	f8c3 c008 	str.w	ip, [r3, #8]
    c7be:	605a      	str	r2, [r3, #4]
    c7c0:	f8c3 c000 	str.w	ip, [r3]
    c7c4:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    c7c8:	2202      	movs	r2, #2
    c7ca:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    c7ce:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    c7d0:	f005 fb25 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c7d4:	e7ff      	b.n	c7d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1666>
    c7d6:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    c7da:	f64f 4004 	movw	r0, #64516	; 0xfc04
    c7de:	f2c0 0001 	movt	r0, #1
    c7e2:	6802      	ldr	r2, [r0, #0]
    c7e4:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    c7e8:	f006 fbf8 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c7ec:	e7ff      	b.n	c7ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x167e>
    c7ee:	e7ff      	b.n	c7f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1680>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    c7f0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c7f4:	280f      	cmp	r0, #15
    c7f6:	f202 81a7 	bhi.w	eb48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39d8>
    c7fa:	e7ff      	b.n	c7fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x168c>
    c7fc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c800:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c804:	1842      	adds	r2, r0, r1
    c806:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c80a:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    c80e:	2b0f      	cmp	r3, #15
    c810:	92ac      	str	r2, [sp, #688]	; 0x2b0
    c812:	f202 81a3 	bhi.w	eb5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39ec>
    c816:	e7ff      	b.n	c818 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x16a8>
    c818:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c81c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c820:	1842      	adds	r2, r0, r1
    c822:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c826:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    c828:	f002 fd72 	bl	f310 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E>
    c82c:	90ab      	str	r0, [sp, #684]	; 0x2ac
    c82e:	91aa      	str	r1, [sp, #680]	; 0x2a8
    c830:	e7ff      	b.n	c832 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x16c2>
    c832:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    c834:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    c838:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    c83a:	f001 0201 	and.w	r2, r1, #1
    c83e:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    c842:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c846:	2a0f      	cmp	r2, #15
    c848:	f202 8192 	bhi.w	eb70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a00>
    c84c:	e7ff      	b.n	c84e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x16de>
    c84e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c852:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c856:	1842      	adds	r2, r0, r1
    c858:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    c85a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    c85e:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    c860:	f002 0c01 	and.w	ip, r2, #1
    c864:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    c868:	f001 bf4f 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c86c:	2005      	movs	r0, #5
    c86e:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    c872:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    c876:	f2c0 0001 	movt	r0, #1
    c87a:	6801      	ldr	r1, [r0, #0]
    c87c:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    c880:	f005 fa91 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c884:	90a9      	str	r0, [sp, #676]	; 0x2a4
    c886:	e01f      	b.n	c8c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1758>
    c888:	2001      	movs	r0, #1
    c88a:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    c88e:	e015      	b.n	c8bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x174c>
    c890:	2000      	movs	r0, #0
    c892:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    c896:	e011      	b.n	c8bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x174c>
    c898:	2000      	movs	r0, #0
    c89a:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    c89e:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    c8a2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c8a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c8aa:	f005 faf1 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c8ae:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    c8b2:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    c8b6:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    c8ba:	e00a      	b.n	c8d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1762>
    c8bc:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    c8c0:	07c0      	lsls	r0, r0, #31
    c8c2:	2800      	cmp	r0, #0
    c8c4:	d112      	bne.n	c8ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x177c>
    c8c6:	e055      	b.n	c974 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1804>
    c8c8:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    c8ca:	07c1      	lsls	r1, r0, #31
    c8cc:	2900      	cmp	r1, #0
    c8ce:	d1e3      	bne.n	c898 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1728>
    c8d0:	e7de      	b.n	c890 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1720>
    c8d2:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    c8d6:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    c8da:	f005 fa64 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c8de:	90a8      	str	r0, [sp, #672]	; 0x2a0
    c8e0:	e7ff      	b.n	c8e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1772>
    c8e2:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    c8e4:	07c1      	lsls	r1, r0, #31
    c8e6:	2900      	cmp	r1, #0
    c8e8:	d1ce      	bne.n	c888 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1718>
    c8ea:	e7d1      	b.n	c890 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1720>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    c8ec:	f64f 3074 	movw	r0, #64372	; 0xfb74
    c8f0:	f2c0 0001 	movt	r0, #1
    c8f4:	6801      	ldr	r1, [r0, #0]
    c8f6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c8fa:	f100 0212 	add.w	r2, r0, #18
    c8fe:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    c902:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    c906:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    c90a:	f649 534b 	movw	r3, #40267	; 0x9d4b
    c90e:	f2c0 0301 	movt	r3, #1
    c912:	4610      	mov	r0, r2
    c914:	91a7      	str	r1, [sp, #668]	; 0x29c
    c916:	4619      	mov	r1, r3
    c918:	f7fd ffe2 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c91c:	90a6      	str	r0, [sp, #664]	; 0x298
    c91e:	91a5      	str	r1, [sp, #660]	; 0x294
    c920:	e7ff      	b.n	c922 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x17b2>
    c922:	98a6      	ldr	r0, [sp, #664]	; 0x298
    c924:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    c928:	99a5      	ldr	r1, [sp, #660]	; 0x294
    c92a:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    c92e:	f24f 3228 	movw	r2, #62248	; 0xf328
    c932:	f2c0 0201 	movt	r2, #1
    c936:	6812      	ldr	r2, [r2, #0]
    c938:	466b      	mov	r3, sp
    c93a:	f04f 0c01 	mov.w	ip, #1
    c93e:	f8c3 c008 	str.w	ip, [r3, #8]
    c942:	605a      	str	r2, [r3, #4]
    c944:	f8c3 c000 	str.w	ip, [r3]
    c948:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    c94c:	2202      	movs	r2, #2
    c94e:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    c952:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    c954:	f005 fa63 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c958:	e7ff      	b.n	c95a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x17ea>
    c95a:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    c95e:	f64f 3094 	movw	r0, #64404	; 0xfb94
    c962:	f2c0 0001 	movt	r0, #1
    c966:	6802      	ldr	r2, [r0, #0]
    c968:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    c96c:	f006 fb36 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c970:	e7ff      	b.n	c972 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1802>
    c972:	e7ff      	b.n	c974 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1804>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    c974:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c978:	280f      	cmp	r0, #15
    c97a:	f202 80c7 	bhi.w	eb0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x399c>
    c97e:	e7ff      	b.n	c980 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1810>
    c980:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c984:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c988:	1842      	adds	r2, r0, r1
    c98a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c98e:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    c992:	2b0f      	cmp	r3, #15
    c994:	92a4      	str	r2, [sp, #656]	; 0x290
    c996:	f202 80c3 	bhi.w	eb20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39b0>
    c99a:	e7ff      	b.n	c99c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x182c>
    c99c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c9a0:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c9a4:	1842      	adds	r2, r0, r1
    c9a6:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c9aa:	98a4      	ldr	r0, [sp, #656]	; 0x290
    c9ac:	f002 fcdb 	bl	f366 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE>
    c9b0:	90a3      	str	r0, [sp, #652]	; 0x28c
    c9b2:	91a2      	str	r1, [sp, #648]	; 0x288
    c9b4:	e7ff      	b.n	c9b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1846>
    c9b6:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    c9b8:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    c9bc:	99a2      	ldr	r1, [sp, #648]	; 0x288
    c9be:	f001 0201 	and.w	r2, r1, #1
    c9c2:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    c9c6:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c9ca:	2a0f      	cmp	r2, #15
    c9cc:	f202 80b2 	bhi.w	eb34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39c4>
    c9d0:	e7ff      	b.n	c9d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1862>
    c9d2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c9d6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c9da:	1842      	adds	r2, r0, r1
    c9dc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    c9de:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    c9e2:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    c9e4:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    c9e8:	ea22 020c 	bic.w	r2, r2, ip
    c9ec:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    c9f0:	f001 be8b 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c9f4:	2005      	movs	r0, #5
    c9f6:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    c9fa:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    c9fe:	f2c0 0001 	movt	r0, #1
    ca02:	6801      	ldr	r1, [r0, #0]
    ca04:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    ca08:	f005 f9cd 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    ca0c:	90a1      	str	r0, [sp, #644]	; 0x284
    ca0e:	e01f      	b.n	ca50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18e0>
    ca10:	2001      	movs	r0, #1
    ca12:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    ca16:	e015      	b.n	ca44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18d4>
    ca18:	2000      	movs	r0, #0
    ca1a:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    ca1e:	e011      	b.n	ca44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18d4>
    ca20:	2000      	movs	r0, #0
    ca22:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    ca26:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    ca2a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ca2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ca32:	f005 fa2d 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    ca36:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    ca3a:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    ca3e:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    ca42:	e00a      	b.n	ca5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18ea>
    ca44:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    ca48:	07c0      	lsls	r0, r0, #31
    ca4a:	2800      	cmp	r0, #0
    ca4c:	d112      	bne.n	ca74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1904>
    ca4e:	e055      	b.n	cafc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x198c>
    ca50:	98a1      	ldr	r0, [sp, #644]	; 0x284
    ca52:	07c1      	lsls	r1, r0, #31
    ca54:	2900      	cmp	r1, #0
    ca56:	d1e3      	bne.n	ca20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18b0>
    ca58:	e7de      	b.n	ca18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18a8>
    ca5a:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    ca5e:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    ca62:	f005 f9a0 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    ca66:	90a0      	str	r0, [sp, #640]	; 0x280
    ca68:	e7ff      	b.n	ca6a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18fa>
    ca6a:	98a0      	ldr	r0, [sp, #640]	; 0x280
    ca6c:	07c1      	lsls	r1, r0, #31
    ca6e:	2900      	cmp	r1, #0
    ca70:	d1ce      	bne.n	ca10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18a0>
    ca72:	e7d1      	b.n	ca18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18a8>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    ca74:	f64f 3004 	movw	r0, #64260	; 0xfb04
    ca78:	f2c0 0001 	movt	r0, #1
    ca7c:	6801      	ldr	r1, [r0, #0]
    ca7e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ca82:	f100 0212 	add.w	r2, r0, #18
    ca86:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    ca8a:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    ca8e:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    ca92:	f649 534b 	movw	r3, #40267	; 0x9d4b
    ca96:	f2c0 0301 	movt	r3, #1
    ca9a:	4610      	mov	r0, r2
    ca9c:	919f      	str	r1, [sp, #636]	; 0x27c
    ca9e:	4619      	mov	r1, r3
    caa0:	f7fd ff1e 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    caa4:	909e      	str	r0, [sp, #632]	; 0x278
    caa6:	919d      	str	r1, [sp, #628]	; 0x274
    caa8:	e7ff      	b.n	caaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x193a>
    caaa:	989e      	ldr	r0, [sp, #632]	; 0x278
    caac:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    cab0:	999d      	ldr	r1, [sp, #628]	; 0x274
    cab2:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    cab6:	f24f 3228 	movw	r2, #62248	; 0xf328
    caba:	f2c0 0201 	movt	r2, #1
    cabe:	6812      	ldr	r2, [r2, #0]
    cac0:	466b      	mov	r3, sp
    cac2:	f04f 0c01 	mov.w	ip, #1
    cac6:	f8c3 c008 	str.w	ip, [r3, #8]
    caca:	605a      	str	r2, [r3, #4]
    cacc:	f8c3 c000 	str.w	ip, [r3]
    cad0:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    cad4:	2202      	movs	r2, #2
    cad6:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    cada:	999f      	ldr	r1, [sp, #636]	; 0x27c
    cadc:	f005 f99f 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    cae0:	e7ff      	b.n	cae2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1972>
    cae2:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    cae6:	f64f 3024 	movw	r0, #64292	; 0xfb24
    caea:	f2c0 0001 	movt	r0, #1
    caee:	6802      	ldr	r2, [r0, #0]
    caf0:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    caf4:	f006 fa72 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    caf8:	e7ff      	b.n	cafa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x198a>
    cafa:	e7ff      	b.n	cafc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x198c>
                self.v[0xf] = self.v[x] & 1;
    cafc:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cb00:	280f      	cmp	r0, #15
    cb02:	f201 87e5 	bhi.w	ead0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3960>
    cb06:	e7ff      	b.n	cb08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1998>
    cb08:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cb0c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cb10:	1842      	adds	r2, r0, r1
    cb12:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cb16:	f002 0201 	and.w	r2, r2, #1
    cb1a:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    cb1e:	290f      	cmp	r1, #15
    cb20:	f201 87e0 	bhi.w	eae4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3974>
    cb24:	e7ff      	b.n	cb26 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x19b6>
    cb26:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cb2a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cb2e:	1842      	adds	r2, r0, r1
    cb30:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    cb34:	2101      	movs	r1, #1
    cb36:	f002 fbc7 	bl	f2c8 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE>
    cb3a:	909c      	str	r0, [sp, #624]	; 0x270
    cb3c:	e7ff      	b.n	cb3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x19ce>
    cb3e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cb42:	280f      	cmp	r0, #15
    cb44:	f201 87d8 	bhi.w	eaf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3988>
    cb48:	e7ff      	b.n	cb4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x19da>
    cb4a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cb4e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cb52:	1842      	adds	r2, r0, r1
    cb54:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    cb56:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    cb5a:	f001 bdd6 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cb5e:	2005      	movs	r0, #5
    cb60:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    cb64:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    cb68:	f2c0 0001 	movt	r0, #1
    cb6c:	6801      	ldr	r1, [r0, #0]
    cb6e:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    cb72:	f005 f918 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cb76:	909b      	str	r0, [sp, #620]	; 0x26c
    cb78:	e01f      	b.n	cbba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a4a>
    cb7a:	2001      	movs	r0, #1
    cb7c:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    cb80:	e015      	b.n	cbae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a3e>
    cb82:	2000      	movs	r0, #0
    cb84:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    cb88:	e011      	b.n	cbae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a3e>
    cb8a:	2000      	movs	r0, #0
    cb8c:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    cb90:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    cb94:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cb98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cb9c:	f005 f978 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    cba0:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    cba4:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    cba8:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    cbac:	e00a      	b.n	cbc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a54>
    cbae:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    cbb2:	07c0      	lsls	r0, r0, #31
    cbb4:	2800      	cmp	r0, #0
    cbb6:	d112      	bne.n	cbde <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a6e>
    cbb8:	e055      	b.n	cc66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1af6>
    cbba:	989b      	ldr	r0, [sp, #620]	; 0x26c
    cbbc:	07c1      	lsls	r1, r0, #31
    cbbe:	2900      	cmp	r1, #0
    cbc0:	d1e3      	bne.n	cb8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a1a>
    cbc2:	e7de      	b.n	cb82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a12>
    cbc4:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    cbc8:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    cbcc:	f005 f8eb 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cbd0:	909a      	str	r0, [sp, #616]	; 0x268
    cbd2:	e7ff      	b.n	cbd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a64>
    cbd4:	989a      	ldr	r0, [sp, #616]	; 0x268
    cbd6:	07c1      	lsls	r1, r0, #31
    cbd8:	2900      	cmp	r1, #0
    cbda:	d1ce      	bne.n	cb7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a0a>
    cbdc:	e7d1      	b.n	cb82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a12>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    cbde:	f64f 2094 	movw	r0, #64148	; 0xfa94
    cbe2:	f2c0 0001 	movt	r0, #1
    cbe6:	6801      	ldr	r1, [r0, #0]
    cbe8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cbec:	f100 0212 	add.w	r2, r0, #18
    cbf0:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    cbf4:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    cbf8:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    cbfc:	f649 534b 	movw	r3, #40267	; 0x9d4b
    cc00:	f2c0 0301 	movt	r3, #1
    cc04:	4610      	mov	r0, r2
    cc06:	9199      	str	r1, [sp, #612]	; 0x264
    cc08:	4619      	mov	r1, r3
    cc0a:	f7fd fe69 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cc0e:	9098      	str	r0, [sp, #608]	; 0x260
    cc10:	9197      	str	r1, [sp, #604]	; 0x25c
    cc12:	e7ff      	b.n	cc14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1aa4>
    cc14:	9898      	ldr	r0, [sp, #608]	; 0x260
    cc16:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    cc1a:	9997      	ldr	r1, [sp, #604]	; 0x25c
    cc1c:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    cc20:	f24f 3228 	movw	r2, #62248	; 0xf328
    cc24:	f2c0 0201 	movt	r2, #1
    cc28:	6812      	ldr	r2, [r2, #0]
    cc2a:	466b      	mov	r3, sp
    cc2c:	f04f 0c01 	mov.w	ip, #1
    cc30:	f8c3 c008 	str.w	ip, [r3, #8]
    cc34:	605a      	str	r2, [r3, #4]
    cc36:	f8c3 c000 	str.w	ip, [r3]
    cc3a:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    cc3e:	2202      	movs	r2, #2
    cc40:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    cc44:	9999      	ldr	r1, [sp, #612]	; 0x264
    cc46:	f005 f8ea 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    cc4a:	e7ff      	b.n	cc4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1adc>
    cc4c:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    cc50:	f64f 20b4 	movw	r0, #64180	; 0xfab4
    cc54:	f2c0 0001 	movt	r0, #1
    cc58:	6802      	ldr	r2, [r0, #0]
    cc5a:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    cc5e:	f006 f9bd 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cc62:	e7ff      	b.n	cc64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1af4>
    cc64:	e7ff      	b.n	cc66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1af6>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    cc66:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    cc6a:	280f      	cmp	r0, #15
    cc6c:	f201 8712 	bhi.w	ea94 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3924>
    cc70:	e7ff      	b.n	cc72 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b02>
    cc72:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc76:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    cc7a:	1842      	adds	r2, r0, r1
    cc7c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cc80:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    cc84:	2b0f      	cmp	r3, #15
    cc86:	9296      	str	r2, [sp, #600]	; 0x258
    cc88:	f201 870e 	bhi.w	eaa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3938>
    cc8c:	e7ff      	b.n	cc8e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b1e>
    cc8e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc92:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cc96:	1842      	adds	r2, r0, r1
    cc98:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    cc9c:	9896      	ldr	r0, [sp, #600]	; 0x258
    cc9e:	f002 fb62 	bl	f366 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE>
    cca2:	9095      	str	r0, [sp, #596]	; 0x254
    cca4:	9194      	str	r1, [sp, #592]	; 0x250
    cca6:	e7ff      	b.n	cca8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b38>
    cca8:	9895      	ldr	r0, [sp, #596]	; 0x254
    ccaa:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    ccae:	9994      	ldr	r1, [sp, #592]	; 0x250
    ccb0:	f001 0201 	and.w	r2, r1, #1
    ccb4:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    ccb8:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ccbc:	2a0f      	cmp	r2, #15
    ccbe:	f201 86fd 	bhi.w	eabc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x394c>
    ccc2:	e7ff      	b.n	ccc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b54>
    ccc4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ccc8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cccc:	1842      	adds	r2, r0, r1
    ccce:	9b95      	ldr	r3, [sp, #596]	; 0x254
    ccd0:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    ccd4:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    ccd6:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    ccda:	ea22 020c 	bic.w	r2, r2, ip
    ccde:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    cce2:	f001 bd12 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cce6:	2005      	movs	r0, #5
    cce8:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    ccec:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    ccf0:	f2c0 0001 	movt	r0, #1
    ccf4:	6801      	ldr	r1, [r0, #0]
    ccf6:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    ccfa:	f005 f854 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    ccfe:	9093      	str	r0, [sp, #588]	; 0x24c
    cd00:	e01f      	b.n	cd42 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bd2>
    cd02:	2001      	movs	r0, #1
    cd04:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    cd08:	e015      	b.n	cd36 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bc6>
    cd0a:	2000      	movs	r0, #0
    cd0c:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    cd10:	e011      	b.n	cd36 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bc6>
    cd12:	2000      	movs	r0, #0
    cd14:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    cd18:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    cd1c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cd20:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cd24:	f005 f8b4 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    cd28:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    cd2c:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    cd30:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    cd34:	e00a      	b.n	cd4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bdc>
    cd36:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    cd3a:	07c0      	lsls	r0, r0, #31
    cd3c:	2800      	cmp	r0, #0
    cd3e:	d112      	bne.n	cd66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bf6>
    cd40:	e055      	b.n	cdee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c7e>
    cd42:	9893      	ldr	r0, [sp, #588]	; 0x24c
    cd44:	07c1      	lsls	r1, r0, #31
    cd46:	2900      	cmp	r1, #0
    cd48:	d1e3      	bne.n	cd12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ba2>
    cd4a:	e7de      	b.n	cd0a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b9a>
    cd4c:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    cd50:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    cd54:	f005 f827 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cd58:	9092      	str	r0, [sp, #584]	; 0x248
    cd5a:	e7ff      	b.n	cd5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bec>
    cd5c:	9892      	ldr	r0, [sp, #584]	; 0x248
    cd5e:	07c1      	lsls	r1, r0, #31
    cd60:	2900      	cmp	r1, #0
    cd62:	d1ce      	bne.n	cd02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b92>
    cd64:	e7d1      	b.n	cd0a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b9a>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    cd66:	f64f 2020 	movw	r0, #64032	; 0xfa20
    cd6a:	f2c0 0001 	movt	r0, #1
    cd6e:	6801      	ldr	r1, [r0, #0]
    cd70:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cd74:	f100 0212 	add.w	r2, r0, #18
    cd78:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    cd7c:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    cd80:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    cd84:	f649 534b 	movw	r3, #40267	; 0x9d4b
    cd88:	f2c0 0301 	movt	r3, #1
    cd8c:	4610      	mov	r0, r2
    cd8e:	9191      	str	r1, [sp, #580]	; 0x244
    cd90:	4619      	mov	r1, r3
    cd92:	f7fd fda5 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cd96:	9090      	str	r0, [sp, #576]	; 0x240
    cd98:	918f      	str	r1, [sp, #572]	; 0x23c
    cd9a:	e7ff      	b.n	cd9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c2c>
    cd9c:	9890      	ldr	r0, [sp, #576]	; 0x240
    cd9e:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    cda2:	998f      	ldr	r1, [sp, #572]	; 0x23c
    cda4:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    cda8:	f24f 3228 	movw	r2, #62248	; 0xf328
    cdac:	f2c0 0201 	movt	r2, #1
    cdb0:	6812      	ldr	r2, [r2, #0]
    cdb2:	466b      	mov	r3, sp
    cdb4:	f04f 0c01 	mov.w	ip, #1
    cdb8:	f8c3 c008 	str.w	ip, [r3, #8]
    cdbc:	605a      	str	r2, [r3, #4]
    cdbe:	f8c3 c000 	str.w	ip, [r3]
    cdc2:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    cdc6:	2202      	movs	r2, #2
    cdc8:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    cdcc:	9991      	ldr	r1, [sp, #580]	; 0x244
    cdce:	f005 f826 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    cdd2:	e7ff      	b.n	cdd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c64>
    cdd4:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    cdd8:	f64f 2040 	movw	r0, #64064	; 0xfa40
    cddc:	f2c0 0001 	movt	r0, #1
    cde0:	6802      	ldr	r2, [r0, #0]
    cde2:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    cde6:	f006 f8f9 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cdea:	e7ff      	b.n	cdec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c7c>
    cdec:	e7ff      	b.n	cdee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c7e>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    cdee:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cdf2:	280f      	cmp	r0, #15
    cdf4:	f201 8630 	bhi.w	ea58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38e8>
    cdf8:	e7ff      	b.n	cdfa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c8a>
    cdfa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cdfe:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ce02:	1842      	adds	r2, r0, r1
    ce04:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ce08:	09d2      	lsrs	r2, r2, #7
    ce0a:	928e      	str	r2, [sp, #568]	; 0x238
    ce0c:	e7ff      	b.n	ce0e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c9e>
    ce0e:	988e      	ldr	r0, [sp, #568]	; 0x238
    ce10:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ce14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    ce18:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ce1c:	2a0f      	cmp	r2, #15
    ce1e:	f201 8625 	bhi.w	ea6c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38fc>
    ce22:	e7ff      	b.n	ce24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cb4>
    ce24:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ce28:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ce2c:	1842      	adds	r2, r0, r1
    ce2e:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    ce32:	2101      	movs	r1, #1
    ce34:	f002 fa37 	bl	f2a6 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E>
    ce38:	908d      	str	r0, [sp, #564]	; 0x234
    ce3a:	e7ff      	b.n	ce3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ccc>
    ce3c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ce40:	280f      	cmp	r0, #15
    ce42:	f201 861d 	bhi.w	ea80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3910>
    ce46:	e7ff      	b.n	ce48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cd8>
    ce48:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ce4c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ce50:	1842      	adds	r2, r0, r1
    ce52:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    ce54:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ce58:	f001 bc57 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    ce5c:	2005      	movs	r0, #5
    ce5e:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    ce62:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    ce66:	f2c0 0001 	movt	r0, #1
    ce6a:	6801      	ldr	r1, [r0, #0]
    ce6c:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    ce70:	f004 ff99 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    ce74:	908c      	str	r0, [sp, #560]	; 0x230
    ce76:	e01f      	b.n	ceb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d48>
    ce78:	2001      	movs	r0, #1
    ce7a:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    ce7e:	e015      	b.n	ceac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d3c>
    ce80:	2000      	movs	r0, #0
    ce82:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    ce86:	e011      	b.n	ceac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d3c>
    ce88:	2000      	movs	r0, #0
    ce8a:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    ce8e:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    ce92:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ce96:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ce9a:	f004 fff9 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    ce9e:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    cea2:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    cea6:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    ceaa:	e00a      	b.n	cec2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d52>
    ceac:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    ceb0:	07c0      	lsls	r0, r0, #31
    ceb2:	2800      	cmp	r0, #0
    ceb4:	d112      	bne.n	cedc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d6c>
    ceb6:	e055      	b.n	cf64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1df4>
    ceb8:	988c      	ldr	r0, [sp, #560]	; 0x230
    ceba:	07c1      	lsls	r1, r0, #31
    cebc:	2900      	cmp	r1, #0
    cebe:	d1e3      	bne.n	ce88 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d18>
    cec0:	e7de      	b.n	ce80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d10>
    cec2:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    cec6:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    ceca:	f004 ff6c 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cece:	908b      	str	r0, [sp, #556]	; 0x22c
    ced0:	e7ff      	b.n	ced2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d62>
    ced2:	988b      	ldr	r0, [sp, #556]	; 0x22c
    ced4:	07c1      	lsls	r1, r0, #31
    ced6:	2900      	cmp	r1, #0
    ced8:	d1ce      	bne.n	ce78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d08>
    ceda:	e7d1      	b.n	ce80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d10>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    cedc:	f64f 10c0 	movw	r0, #63936	; 0xf9c0
    cee0:	f2c0 0001 	movt	r0, #1
    cee4:	6801      	ldr	r1, [r0, #0]
    cee6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ceea:	f100 0212 	add.w	r2, r0, #18
    ceee:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    cef2:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    cef6:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    cefa:	f649 534b 	movw	r3, #40267	; 0x9d4b
    cefe:	f2c0 0301 	movt	r3, #1
    cf02:	4610      	mov	r0, r2
    cf04:	918a      	str	r1, [sp, #552]	; 0x228
    cf06:	4619      	mov	r1, r3
    cf08:	f7fd fcea 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cf0c:	9089      	str	r0, [sp, #548]	; 0x224
    cf0e:	9188      	str	r1, [sp, #544]	; 0x220
    cf10:	e7ff      	b.n	cf12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1da2>
    cf12:	9889      	ldr	r0, [sp, #548]	; 0x224
    cf14:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    cf18:	9988      	ldr	r1, [sp, #544]	; 0x220
    cf1a:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    cf1e:	f24f 3228 	movw	r2, #62248	; 0xf328
    cf22:	f2c0 0201 	movt	r2, #1
    cf26:	6812      	ldr	r2, [r2, #0]
    cf28:	466b      	mov	r3, sp
    cf2a:	f04f 0c01 	mov.w	ip, #1
    cf2e:	f8c3 c008 	str.w	ip, [r3, #8]
    cf32:	605a      	str	r2, [r3, #4]
    cf34:	f8c3 c000 	str.w	ip, [r3]
    cf38:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    cf3c:	2202      	movs	r2, #2
    cf3e:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    cf42:	998a      	ldr	r1, [sp, #552]	; 0x228
    cf44:	f004 ff6b 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    cf48:	e7ff      	b.n	cf4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1dda>
    cf4a:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    cf4e:	f64f 10e0 	movw	r0, #63968	; 0xf9e0
    cf52:	f2c0 0001 	movt	r0, #1
    cf56:	6802      	ldr	r2, [r0, #0]
    cf58:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    cf5c:	f006 f83e 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cf60:	e7ff      	b.n	cf62 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1df2>
    cf62:	e7ff      	b.n	cf64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1df4>
                if self.v[x] != self.v[y] {
    cf64:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cf68:	280f      	cmp	r0, #15
    cf6a:	f201 8561 	bhi.w	ea30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38c0>
    cf6e:	e7ff      	b.n	cf70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e00>
    cf70:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cf74:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cf78:	1842      	adds	r2, r0, r1
    cf7a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cf7e:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    cf82:	2b0f      	cmp	r3, #15
    cf84:	9287      	str	r2, [sp, #540]	; 0x21c
    cf86:	f201 855d 	bhi.w	ea44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38d4>
    cf8a:	e7ff      	b.n	cf8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e1c>
    cf8c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cf90:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    cf94:	1842      	adds	r2, r0, r1
    cf96:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cf9a:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    cf9c:	fa5f fc83 	uxtb.w	ip, r3
    cfa0:	4594      	cmp	ip, r2
    cfa2:	d006      	beq.n	cfb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e42>
    cfa4:	e7ff      	b.n	cfa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e36>
                    self.next();
    cfa6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cfaa:	f001 fee0 	bl	ed6e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    cfae:	e7ff      	b.n	cfb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e40>
                if self.v[x] != self.v[y] {
    cfb0:	e7ff      	b.n	cfb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e42>
        match (
    cfb2:	f001 bbaa 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cfb6:	2005      	movs	r0, #5
    cfb8:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    cfbc:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    cfc0:	f2c0 0001 	movt	r0, #1
    cfc4:	6801      	ldr	r1, [r0, #0]
    cfc6:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    cfca:	f004 feec 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cfce:	9086      	str	r0, [sp, #536]	; 0x218
    cfd0:	e01f      	b.n	d012 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ea2>
    cfd2:	2001      	movs	r0, #1
    cfd4:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    cfd8:	e015      	b.n	d006 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e96>
    cfda:	2000      	movs	r0, #0
    cfdc:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    cfe0:	e011      	b.n	d006 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e96>
    cfe2:	2000      	movs	r0, #0
    cfe4:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    cfe8:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    cfec:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cff0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cff4:	f004 ff4c 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    cff8:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    cffc:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    d000:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    d004:	e00a      	b.n	d01c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1eac>
    d006:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    d00a:	07c0      	lsls	r0, r0, #31
    d00c:	2800      	cmp	r0, #0
    d00e:	d112      	bne.n	d036 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ec6>
    d010:	e055      	b.n	d0be <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f4e>
    d012:	9886      	ldr	r0, [sp, #536]	; 0x218
    d014:	07c1      	lsls	r1, r0, #31
    d016:	2900      	cmp	r1, #0
    d018:	d1e3      	bne.n	cfe2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e72>
    d01a:	e7de      	b.n	cfda <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e6a>
    d01c:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    d020:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    d024:	f004 febf 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d028:	9085      	str	r0, [sp, #532]	; 0x214
    d02a:	e7ff      	b.n	d02c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ebc>
    d02c:	9885      	ldr	r0, [sp, #532]	; 0x214
    d02e:	07c1      	lsls	r1, r0, #31
    d030:	2900      	cmp	r1, #0
    d032:	d1ce      	bne.n	cfd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e62>
    d034:	e7d1      	b.n	cfda <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e6a>
                trace!("[{:04x}] LD I, nnn", self.pc);
    d036:	f64f 1080 	movw	r0, #63872	; 0xf980
    d03a:	f2c0 0001 	movt	r0, #1
    d03e:	6801      	ldr	r1, [r0, #0]
    d040:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d044:	f100 0212 	add.w	r2, r0, #18
    d048:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    d04c:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    d050:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    d054:	f649 534b 	movw	r3, #40267	; 0x9d4b
    d058:	f2c0 0301 	movt	r3, #1
    d05c:	4610      	mov	r0, r2
    d05e:	9184      	str	r1, [sp, #528]	; 0x210
    d060:	4619      	mov	r1, r3
    d062:	f7fd fc3d 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d066:	9083      	str	r0, [sp, #524]	; 0x20c
    d068:	9182      	str	r1, [sp, #520]	; 0x208
    d06a:	e7ff      	b.n	d06c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1efc>
    d06c:	9883      	ldr	r0, [sp, #524]	; 0x20c
    d06e:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    d072:	9982      	ldr	r1, [sp, #520]	; 0x208
    d074:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    d078:	f24f 3228 	movw	r2, #62248	; 0xf328
    d07c:	f2c0 0201 	movt	r2, #1
    d080:	6812      	ldr	r2, [r2, #0]
    d082:	466b      	mov	r3, sp
    d084:	f04f 0c01 	mov.w	ip, #1
    d088:	f8c3 c008 	str.w	ip, [r3, #8]
    d08c:	605a      	str	r2, [r3, #4]
    d08e:	f8c3 c000 	str.w	ip, [r3]
    d092:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    d096:	2202      	movs	r2, #2
    d098:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    d09c:	9984      	ldr	r1, [sp, #528]	; 0x210
    d09e:	f004 febe 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d0a2:	e7ff      	b.n	d0a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f34>
    d0a4:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    d0a8:	f64f 10a0 	movw	r0, #63904	; 0xf9a0
    d0ac:	f2c0 0001 	movt	r0, #1
    d0b0:	6802      	ldr	r2, [r0, #0]
    d0b2:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    d0b6:	f005 ff91 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d0ba:	e7ff      	b.n	d0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f4c>
    d0bc:	e7ff      	b.n	d0be <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f4e>
                self.i = nnn;
    d0be:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    d0c2:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d0c6:	8208      	strh	r0, [r1, #16]
        match (
    d0c8:	f001 bb1f 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d0cc:	2005      	movs	r0, #5
    d0ce:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    d0d2:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    d0d6:	f2c0 0001 	movt	r0, #1
    d0da:	6801      	ldr	r1, [r0, #0]
    d0dc:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    d0e0:	f004 fe61 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d0e4:	9081      	str	r0, [sp, #516]	; 0x204
    d0e6:	e01f      	b.n	d128 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fb8>
    d0e8:	2001      	movs	r0, #1
    d0ea:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    d0ee:	e015      	b.n	d11c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fac>
    d0f0:	2000      	movs	r0, #0
    d0f2:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    d0f6:	e011      	b.n	d11c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fac>
    d0f8:	2000      	movs	r0, #0
    d0fa:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    d0fe:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    d102:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d106:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d10a:	f004 fec1 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d10e:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    d112:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    d116:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    d11a:	e00a      	b.n	d132 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fc2>
    d11c:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    d120:	07c0      	lsls	r0, r0, #31
    d122:	2800      	cmp	r0, #0
    d124:	d112      	bne.n	d14c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fdc>
    d126:	e055      	b.n	d1d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2064>
    d128:	9881      	ldr	r0, [sp, #516]	; 0x204
    d12a:	07c1      	lsls	r1, r0, #31
    d12c:	2900      	cmp	r1, #0
    d12e:	d1e3      	bne.n	d0f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f88>
    d130:	e7de      	b.n	d0f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f80>
    d132:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    d136:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    d13a:	f004 fe34 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d13e:	9080      	str	r0, [sp, #512]	; 0x200
    d140:	e7ff      	b.n	d142 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fd2>
    d142:	9880      	ldr	r0, [sp, #512]	; 0x200
    d144:	07c1      	lsls	r1, r0, #31
    d146:	2900      	cmp	r1, #0
    d148:	d1ce      	bne.n	d0e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f78>
    d14a:	e7d1      	b.n	d0f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f80>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    d14c:	f64f 1040 	movw	r0, #63808	; 0xf940
    d150:	f2c0 0001 	movt	r0, #1
    d154:	6801      	ldr	r1, [r0, #0]
    d156:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d15a:	f100 0212 	add.w	r2, r0, #18
    d15e:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    d162:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    d166:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    d16a:	f649 534b 	movw	r3, #40267	; 0x9d4b
    d16e:	f2c0 0301 	movt	r3, #1
    d172:	4610      	mov	r0, r2
    d174:	917f      	str	r1, [sp, #508]	; 0x1fc
    d176:	4619      	mov	r1, r3
    d178:	f7fd fbb2 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d17c:	907e      	str	r0, [sp, #504]	; 0x1f8
    d17e:	917d      	str	r1, [sp, #500]	; 0x1f4
    d180:	e7ff      	b.n	d182 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2012>
    d182:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    d184:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    d188:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    d18a:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    d18e:	f24f 3228 	movw	r2, #62248	; 0xf328
    d192:	f2c0 0201 	movt	r2, #1
    d196:	6812      	ldr	r2, [r2, #0]
    d198:	466b      	mov	r3, sp
    d19a:	f04f 0c01 	mov.w	ip, #1
    d19e:	f8c3 c008 	str.w	ip, [r3, #8]
    d1a2:	605a      	str	r2, [r3, #4]
    d1a4:	f8c3 c000 	str.w	ip, [r3]
    d1a8:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    d1ac:	2202      	movs	r2, #2
    d1ae:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    d1b2:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    d1b4:	f004 fe33 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d1b8:	e7ff      	b.n	d1ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x204a>
    d1ba:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    d1be:	f64f 1060 	movw	r0, #63840	; 0xf960
    d1c2:	f2c0 0001 	movt	r0, #1
    d1c6:	6802      	ldr	r2, [r0, #0]
    d1c8:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    d1cc:	f005 ff06 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d1d0:	e7ff      	b.n	d1d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2062>
    d1d2:	e7ff      	b.n	d1d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2064>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    d1d4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d1d8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    d1dc:	f004 fe6c 	bl	11eb8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>
    d1e0:	907c      	str	r0, [sp, #496]	; 0x1f0
    d1e2:	e7ff      	b.n	d1e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2074>
    d1e4:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    d1e8:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    d1ea:	f002 f8e8 	bl	f3be <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>
    d1ee:	907b      	str	r0, [sp, #492]	; 0x1ec
    d1f0:	e7ff      	b.n	d1f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2082>
    d1f2:	2102      	movs	r1, #2
    d1f4:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    d1f6:	f002 f8f3 	bl	f3e0 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>
    d1fa:	907a      	str	r0, [sp, #488]	; 0x1e8
    d1fc:	e7ff      	b.n	d1fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x208e>
    d1fe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d202:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    d204:	f001 fd70 	bl	ece8 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    d208:	e7ff      	b.n	d20a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x209a>
        match (
    d20a:	f001 ba7e 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d20e:	2005      	movs	r0, #5
    d210:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    d214:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    d218:	f2c0 0001 	movt	r0, #1
    d21c:	6801      	ldr	r1, [r0, #0]
    d21e:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    d222:	f004 fdc0 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d226:	9079      	str	r0, [sp, #484]	; 0x1e4
    d228:	e01f      	b.n	d26a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20fa>
    d22a:	2001      	movs	r0, #1
    d22c:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    d230:	e015      	b.n	d25e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ee>
    d232:	2000      	movs	r0, #0
    d234:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    d238:	e011      	b.n	d25e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ee>
    d23a:	2000      	movs	r0, #0
    d23c:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    d240:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    d244:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d248:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d24c:	f004 fe20 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d250:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    d254:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    d258:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    d25c:	e00a      	b.n	d274 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2104>
    d25e:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    d262:	07c0      	lsls	r0, r0, #31
    d264:	2800      	cmp	r0, #0
    d266:	d112      	bne.n	d28e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x211e>
    d268:	e055      	b.n	d316 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21a6>
    d26a:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    d26c:	07c1      	lsls	r1, r0, #31
    d26e:	2900      	cmp	r1, #0
    d270:	d1e3      	bne.n	d23a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ca>
    d272:	e7de      	b.n	d232 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20c2>
    d274:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    d278:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    d27c:	f004 fd93 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d280:	9078      	str	r0, [sp, #480]	; 0x1e0
    d282:	e7ff      	b.n	d284 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2114>
    d284:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    d286:	07c1      	lsls	r1, r0, #31
    d288:	2900      	cmp	r1, #0
    d28a:	d1ce      	bne.n	d22a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ba>
    d28c:	e7d1      	b.n	d232 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20c2>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    d28e:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    d292:	f2c0 0001 	movt	r0, #1
    d296:	6801      	ldr	r1, [r0, #0]
    d298:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d29c:	f100 0212 	add.w	r2, r0, #18
    d2a0:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    d2a4:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    d2a8:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    d2ac:	f649 534b 	movw	r3, #40267	; 0x9d4b
    d2b0:	f2c0 0301 	movt	r3, #1
    d2b4:	4610      	mov	r0, r2
    d2b6:	9177      	str	r1, [sp, #476]	; 0x1dc
    d2b8:	4619      	mov	r1, r3
    d2ba:	f7fd fb11 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d2be:	9076      	str	r0, [sp, #472]	; 0x1d8
    d2c0:	9175      	str	r1, [sp, #468]	; 0x1d4
    d2c2:	e7ff      	b.n	d2c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2154>
    d2c4:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    d2c6:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    d2ca:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    d2cc:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    d2d0:	f24f 3228 	movw	r2, #62248	; 0xf328
    d2d4:	f2c0 0201 	movt	r2, #1
    d2d8:	6812      	ldr	r2, [r2, #0]
    d2da:	466b      	mov	r3, sp
    d2dc:	f04f 0c01 	mov.w	ip, #1
    d2e0:	f8c3 c008 	str.w	ip, [r3, #8]
    d2e4:	605a      	str	r2, [r3, #4]
    d2e6:	f8c3 c000 	str.w	ip, [r3]
    d2ea:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    d2ee:	2202      	movs	r2, #2
    d2f0:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    d2f4:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    d2f6:	f004 fd92 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d2fa:	e7ff      	b.n	d2fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x218c>
    d2fc:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    d300:	f64f 1010 	movw	r0, #63760	; 0xf910
    d304:	f2c0 0001 	movt	r0, #1
    d308:	6802      	ldr	r2, [r0, #0]
    d30a:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    d30e:	f005 fe65 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d312:	e7ff      	b.n	d314 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21a4>
    d314:	e7ff      	b.n	d316 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21a6>
    d316:	f241 0048 	movw	r0, #4168	; 0x1048
                self.v[x] = self.hw.rand() & kk;
    d31a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d31e:	4408      	add	r0, r1
    d320:	f002 fa23 	bl	f76a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hd3173c320d2551cfE>
    d324:	9074      	str	r0, [sp, #464]	; 0x1d0
    d326:	e7ff      	b.n	d328 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21b8>
    d328:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d32c:	280f      	cmp	r0, #15
    d32e:	f201 8375 	bhi.w	ea1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38ac>
    d332:	e7ff      	b.n	d334 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21c4>
    d334:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d338:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d33c:	1842      	adds	r2, r0, r1
    d33e:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    d340:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    d344:	ea03 0e0c 	and.w	lr, r3, ip
    d348:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    d34c:	f001 b9dd 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d350:	2005      	movs	r0, #5
    d352:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    d356:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    d35a:	f2c0 0001 	movt	r0, #1
    d35e:	6801      	ldr	r1, [r0, #0]
    d360:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    d364:	f004 fd1f 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d368:	9073      	str	r0, [sp, #460]	; 0x1cc
    d36a:	e01f      	b.n	d3ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x223c>
    d36c:	2001      	movs	r0, #1
    d36e:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    d372:	e015      	b.n	d3a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2230>
    d374:	2000      	movs	r0, #0
    d376:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    d37a:	e011      	b.n	d3a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2230>
    d37c:	2000      	movs	r0, #0
    d37e:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    d382:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    d386:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d38a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d38e:	f004 fd7f 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d392:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    d396:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    d39a:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    d39e:	e00a      	b.n	d3b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2246>
    d3a0:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    d3a4:	07c0      	lsls	r0, r0, #31
    d3a6:	2800      	cmp	r0, #0
    d3a8:	d112      	bne.n	d3d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2260>
    d3aa:	e055      	b.n	d458 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22e8>
    d3ac:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    d3ae:	07c1      	lsls	r1, r0, #31
    d3b0:	2900      	cmp	r1, #0
    d3b2:	d1e3      	bne.n	d37c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x220c>
    d3b4:	e7de      	b.n	d374 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2204>
    d3b6:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    d3ba:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    d3be:	f004 fcf2 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d3c2:	9072      	str	r0, [sp, #456]	; 0x1c8
    d3c4:	e7ff      	b.n	d3c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2256>
    d3c6:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    d3c8:	07c1      	lsls	r1, r0, #31
    d3ca:	2900      	cmp	r1, #0
    d3cc:	d1ce      	bne.n	d36c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21fc>
    d3ce:	e7d1      	b.n	d374 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2204>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    d3d0:	f24f 7094 	movw	r0, #63380	; 0xf794
    d3d4:	f2c0 0001 	movt	r0, #1
    d3d8:	6801      	ldr	r1, [r0, #0]
    d3da:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d3de:	f100 0212 	add.w	r2, r0, #18
    d3e2:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    d3e6:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    d3ea:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    d3ee:	f649 534b 	movw	r3, #40267	; 0x9d4b
    d3f2:	f2c0 0301 	movt	r3, #1
    d3f6:	4610      	mov	r0, r2
    d3f8:	9171      	str	r1, [sp, #452]	; 0x1c4
    d3fa:	4619      	mov	r1, r3
    d3fc:	f7fd fa70 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d400:	9070      	str	r0, [sp, #448]	; 0x1c0
    d402:	916f      	str	r1, [sp, #444]	; 0x1bc
    d404:	e7ff      	b.n	d406 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2296>
    d406:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    d408:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    d40c:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    d40e:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    d412:	f24f 3228 	movw	r2, #62248	; 0xf328
    d416:	f2c0 0201 	movt	r2, #1
    d41a:	6812      	ldr	r2, [r2, #0]
    d41c:	466b      	mov	r3, sp
    d41e:	f04f 0c01 	mov.w	ip, #1
    d422:	f8c3 c008 	str.w	ip, [r3, #8]
    d426:	605a      	str	r2, [r3, #4]
    d428:	f8c3 c000 	str.w	ip, [r3]
    d42c:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    d430:	2202      	movs	r2, #2
    d432:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    d436:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    d438:	f004 fcf1 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d43c:	e7ff      	b.n	d43e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22ce>
    d43e:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    d442:	f24f 70b4 	movw	r0, #63412	; 0xf7b4
    d446:	f2c0 0001 	movt	r0, #1
    d44a:	6802      	ldr	r2, [r0, #0]
    d44c:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    d450:	f005 fdc4 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d454:	e7ff      	b.n	d456 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22e6>
    d456:	e7ff      	b.n	d458 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22e8>
                let basex = self.v[x] as usize;
    d458:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d45c:	280f      	cmp	r0, #15
    d45e:	f201 826b 	bhi.w	e938 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37c8>
    d462:	e7ff      	b.n	d464 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22f4>
    d464:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d468:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d46c:	1842      	adds	r2, r0, r1
    d46e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d472:	4613      	mov	r3, r2
    d474:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    d478:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    d47c:	2a0f      	cmp	r2, #15
    d47e:	936e      	str	r3, [sp, #440]	; 0x1b8
    d480:	f201 8264 	bhi.w	e94c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37dc>
    d484:	e7ff      	b.n	d486 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2316>
    d486:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d48a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d48e:	1842      	adds	r2, r0, r1
    d490:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d494:	4613      	mov	r3, r2
    d496:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
    d49a:	f241 0248 	movw	r2, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    d49e:	4410      	add	r0, r2
    d4a0:	936d      	str	r3, [sp, #436]	; 0x1b4
    d4a2:	f002 fb45 	bl	fb30 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E>
    d4a6:	906c      	str	r0, [sp, #432]	; 0x1b0
    d4a8:	916b      	str	r1, [sp, #428]	; 0x1ac
    d4aa:	e7ff      	b.n	d4ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x233c>
    d4ac:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    d4ae:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    d4b2:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    d4b4:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    d4b8:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    d4ba:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    d4be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    d4c2:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    d4c6:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    d4ca:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    d4ce:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    d4d2:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    d4d6:	f005 fb0d 	bl	12af4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    d4da:	906a      	str	r0, [sp, #424]	; 0x1a8
    d4dc:	9169      	str	r1, [sp, #420]	; 0x1a4
    d4de:	e7ff      	b.n	d4e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2370>
    d4e0:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    d4e2:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    d4e6:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    d4e8:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    d4ec:	e7ff      	b.n	d4ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x237e>
    d4ee:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    d4f2:	f005 fa74 	bl	129de <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    d4f6:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    d4fa:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    d4fe:	e7ff      	b.n	d500 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2390>
    d500:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    d504:	2800      	cmp	r0, #0
    d506:	d001      	beq.n	d50c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x239c>
    d508:	e7ff      	b.n	d50a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x239a>
    d50a:	e002      	b.n	d512 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x23a2>
        match (
    d50c:	f001 b8fd 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for y in 0..n {
    d510:	defe      	udf	#254	; 0xfe
    d512:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    d516:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    d51a:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    d51e:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    d522:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d526:	8a0a      	ldrh	r2, [r1, #16]
    d528:	1813      	adds	r3, r2, r0
    d52a:	469c      	mov	ip, r3
    d52c:	4293      	cmp	r3, r2
    d52e:	9068      	str	r0, [sp, #416]	; 0x1a0
    d530:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    d534:	f0c1 8214 	bcc.w	e960 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37f0>
    d538:	e7ff      	b.n	d53a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x23ca>
    d53a:	2000      	movs	r0, #0
    d53c:	9967      	ldr	r1, [sp, #412]	; 0x19c
    d53e:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    d542:	f041 8219 	bne.w	e978 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3808>
    d546:	e7ff      	b.n	d548 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x23d8>
    d548:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d54c:	9967      	ldr	r1, [sp, #412]	; 0x19c
    d54e:	1842      	adds	r2, r0, r1
    d550:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d554:	4613      	mov	r3, r2
    d556:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    d55a:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    d55c:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    d560:	eb02 0e0c 	add.w	lr, r2, ip
    d564:	4674      	mov	r4, lr
    d566:	4596      	cmp	lr, r2
    d568:	9366      	str	r3, [sp, #408]	; 0x198
    d56a:	9465      	str	r4, [sp, #404]	; 0x194
    d56c:	f0c1 820e 	bcc.w	e98c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x381c>
    d570:	e7ff      	b.n	d572 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2402>
    d572:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    d574:	2800      	cmp	r0, #0
    d576:	f001 8215 	beq.w	e9a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3834>
    d57a:	e7ff      	b.n	d57c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x240c>
    d57c:	9865      	ldr	r0, [sp, #404]	; 0x194
    d57e:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    d580:	fbb0 f2f1 	udiv	r2, r0, r1
    d584:	fb02 0211 	mls	r2, r2, r1, r0
    d588:	4613      	mov	r3, r2
    d58a:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    d58e:	2200      	movs	r2, #0
                    for x in 0..8 {
    d590:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    d594:	2208      	movs	r2, #8
    d596:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    d59a:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    d59e:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    d5a2:	9364      	str	r3, [sp, #400]	; 0x190
    d5a4:	f005 faa6 	bl	12af4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    d5a8:	9063      	str	r0, [sp, #396]	; 0x18c
    d5aa:	9162      	str	r1, [sp, #392]	; 0x188
    d5ac:	e7ff      	b.n	d5ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x243e>
    d5ae:	9863      	ldr	r0, [sp, #396]	; 0x18c
    d5b0:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    d5b4:	9962      	ldr	r1, [sp, #392]	; 0x188
    d5b6:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    d5ba:	e7ff      	b.n	d5bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x244c>
    d5bc:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    d5c0:	f005 fa0d 	bl	129de <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    d5c4:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    d5c8:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    d5cc:	e7ff      	b.n	d5ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x245e>
    d5ce:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    d5d2:	2800      	cmp	r0, #0
    d5d4:	d001      	beq.n	d5da <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x246a>
    d5d6:	e7ff      	b.n	d5d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2468>
    d5d8:	e001      	b.n	d5de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x246e>
                for y in 0..n {
    d5da:	e788      	b.n	d4ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x237e>
                    for x in 0..8 {
    d5dc:	defe      	udf	#254	; 0xfe
    d5de:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    d5e2:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    d5e6:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    d5ea:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    d5ee:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    d5f0:	1842      	adds	r2, r0, r1
    d5f2:	4613      	mov	r3, r2
    d5f4:	4282      	cmp	r2, r0
    d5f6:	9061      	str	r0, [sp, #388]	; 0x184
    d5f8:	9360      	str	r3, [sp, #384]	; 0x180
    d5fa:	f0c1 81df 	bcc.w	e9bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x384c>
    d5fe:	e7ff      	b.n	d600 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2490>
    d600:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    d602:	2800      	cmp	r0, #0
    d604:	f001 81e6 	beq.w	e9d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3864>
    d608:	e7ff      	b.n	d60a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x249a>
    d60a:	9860      	ldr	r0, [sp, #384]	; 0x180
    d60c:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    d60e:	fbb0 f2f1 	udiv	r2, r0, r1
    d612:	fb02 0211 	mls	r2, r2, r1, r0
    d616:	4613      	mov	r3, r2
    d618:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    d61c:	9a61      	ldr	r2, [sp, #388]	; 0x184
    d61e:	f1c2 0c07 	rsb	ip, r2, #7
    d622:	f04f 0e07 	mov.w	lr, #7
    d626:	4596      	cmp	lr, r2
    d628:	935f      	str	r3, [sp, #380]	; 0x17c
    d62a:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    d62e:	f0c1 81dd 	bcc.w	e9ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x387c>
    d632:	e7ff      	b.n	d634 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x24c4>
    d634:	985e      	ldr	r0, [sp, #376]	; 0x178
    d636:	f000 0107 	and.w	r1, r0, #7
    d63a:	2201      	movs	r2, #1
    d63c:	fa02 f101 	lsl.w	r1, r2, r1
    d640:	08c2      	lsrs	r2, r0, #3
    d642:	2a00      	cmp	r2, #0
    d644:	915d      	str	r1, [sp, #372]	; 0x174
    d646:	f041 81dd 	bne.w	ea04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3894>
    d64a:	e7ff      	b.n	d64c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x24dc>
    d64c:	9866      	ldr	r0, [sp, #408]	; 0x198
    d64e:	995d      	ldr	r1, [sp, #372]	; 0x174
    d650:	ea00 0201 	and.w	r2, r0, r1
    d654:	b2d2      	uxtb	r2, r2
    d656:	2a00      	cmp	r2, #0
    d658:	bf18      	it	ne
    d65a:	2201      	movne	r2, #1
    d65c:	4613      	mov	r3, r2
    d65e:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
    d662:	f241 0248 	movw	r2, #4168	; 0x1048
                        let dst = self.hw.vram_get(vramx, vramy);
    d666:	f8dd c490 	ldr.w	ip, [sp, #1168]	; 0x490
    d66a:	eb0c 0002 	add.w	r0, ip, r2
    d66e:	995f      	ldr	r1, [sp, #380]	; 0x17c
    d670:	9a64      	ldr	r2, [sp, #400]	; 0x190
    d672:	935c      	str	r3, [sp, #368]	; 0x170
    d674:	f002 f9a5 	bl	f9c2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE>
    d678:	4601      	mov	r1, r0
    d67a:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    d67e:	915b      	str	r1, [sp, #364]	; 0x16c
    d680:	e7ff      	b.n	d682 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2512>
                        self.v[0xf] |= (src && dst) as u8;
    d682:	985c      	ldr	r0, [sp, #368]	; 0x170
    d684:	07c1      	lsls	r1, r0, #31
    d686:	2900      	cmp	r1, #0
    d688:	d108      	bne.n	d69c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x252c>
    d68a:	e003      	b.n	d694 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2524>
    d68c:	2001      	movs	r0, #1
    d68e:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    d692:	e008      	b.n	d6a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2536>
    d694:	2000      	movs	r0, #0
    d696:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    d69a:	e004      	b.n	d6a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2536>
    d69c:	985b      	ldr	r0, [sp, #364]	; 0x16c
    d69e:	07c1      	lsls	r1, r0, #31
    d6a0:	2900      	cmp	r1, #0
    d6a2:	d1f3      	bne.n	d68c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x251c>
    d6a4:	e7f6      	b.n	d694 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2524>
    d6a6:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    d6aa:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d6ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    d6b2:	4310      	orrs	r0, r2
    d6b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    d6b8:	f241 0048 	movw	r0, #4168	; 0x1048
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    d6bc:	4408      	add	r0, r1
    d6be:	9a5c      	ldr	r2, [sp, #368]	; 0x170
    d6c0:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    d6c2:	ea82 0c03 	eor.w	ip, r2, r3
    d6c6:	f00c 0301 	and.w	r3, ip, #1
    d6ca:	995f      	ldr	r1, [sp, #380]	; 0x17c
    d6cc:	9a64      	ldr	r2, [sp, #400]	; 0x190
    d6ce:	f002 f872 	bl	f7b6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE>
    d6d2:	e7ff      	b.n	d6d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2564>
                    for x in 0..8 {
    d6d4:	e772      	b.n	d5bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x244c>
    d6d6:	2005      	movs	r0, #5
    d6d8:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    d6dc:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    d6e0:	f2c0 0001 	movt	r0, #1
    d6e4:	6801      	ldr	r1, [r0, #0]
    d6e6:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    d6ea:	f004 fb5c 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d6ee:	905a      	str	r0, [sp, #360]	; 0x168
    d6f0:	e01f      	b.n	d732 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25c2>
    d6f2:	2001      	movs	r0, #1
    d6f4:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    d6f8:	e015      	b.n	d726 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25b6>
    d6fa:	2000      	movs	r0, #0
    d6fc:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    d700:	e011      	b.n	d726 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25b6>
    d702:	2000      	movs	r0, #0
    d704:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    d708:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    d70c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d710:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d714:	f004 fbbc 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d718:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    d71c:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    d720:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    d724:	e00a      	b.n	d73c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25cc>
    d726:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    d72a:	07c0      	lsls	r0, r0, #31
    d72c:	2800      	cmp	r0, #0
    d72e:	d112      	bne.n	d756 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25e6>
    d730:	e055      	b.n	d7de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x266e>
    d732:	985a      	ldr	r0, [sp, #360]	; 0x168
    d734:	07c1      	lsls	r1, r0, #31
    d736:	2900      	cmp	r1, #0
    d738:	d1e3      	bne.n	d702 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2592>
    d73a:	e7de      	b.n	d6fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x258a>
    d73c:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    d740:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    d744:	f004 fb2f 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d748:	9059      	str	r0, [sp, #356]	; 0x164
    d74a:	e7ff      	b.n	d74c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25dc>
    d74c:	9859      	ldr	r0, [sp, #356]	; 0x164
    d74e:	07c1      	lsls	r1, r0, #31
    d750:	2900      	cmp	r1, #0
    d752:	d1ce      	bne.n	d6f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2582>
    d754:	e7d1      	b.n	d6fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x258a>
                trace!("[{:04x}] SKP Vx", self.pc);
    d756:	f24f 7040 	movw	r0, #63296	; 0xf740
    d75a:	f2c0 0001 	movt	r0, #1
    d75e:	6801      	ldr	r1, [r0, #0]
    d760:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d764:	f100 0212 	add.w	r2, r0, #18
    d768:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    d76c:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    d770:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    d774:	f649 534b 	movw	r3, #40267	; 0x9d4b
    d778:	f2c0 0301 	movt	r3, #1
    d77c:	4610      	mov	r0, r2
    d77e:	9158      	str	r1, [sp, #352]	; 0x160
    d780:	4619      	mov	r1, r3
    d782:	f7fd f8ad 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d786:	9057      	str	r0, [sp, #348]	; 0x15c
    d788:	9156      	str	r1, [sp, #344]	; 0x158
    d78a:	e7ff      	b.n	d78c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x261c>
    d78c:	9857      	ldr	r0, [sp, #348]	; 0x15c
    d78e:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    d792:	9956      	ldr	r1, [sp, #344]	; 0x158
    d794:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    d798:	f24f 3228 	movw	r2, #62248	; 0xf328
    d79c:	f2c0 0201 	movt	r2, #1
    d7a0:	6812      	ldr	r2, [r2, #0]
    d7a2:	466b      	mov	r3, sp
    d7a4:	f04f 0c01 	mov.w	ip, #1
    d7a8:	f8c3 c008 	str.w	ip, [r3, #8]
    d7ac:	605a      	str	r2, [r3, #4]
    d7ae:	f8c3 c000 	str.w	ip, [r3]
    d7b2:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    d7b6:	2202      	movs	r2, #2
    d7b8:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    d7bc:	9958      	ldr	r1, [sp, #352]	; 0x160
    d7be:	f004 fb2e 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d7c2:	e7ff      	b.n	d7c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2654>
    d7c4:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    d7c8:	f24f 7060 	movw	r0, #63328	; 0xf760
    d7cc:	f2c0 0001 	movt	r0, #1
    d7d0:	6802      	ldr	r2, [r0, #0]
    d7d2:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    d7d6:	f005 fc01 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d7da:	e7ff      	b.n	d7dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x266c>
    d7dc:	e7ff      	b.n	d7de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x266e>
    d7de:	f241 0048 	movw	r0, #4168	; 0x1048
                if self.hw.key(self.v[x]) {
    d7e2:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d7e6:	4408      	add	r0, r1
    d7e8:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    d7ec:	2a0f      	cmp	r2, #15
    d7ee:	9055      	str	r0, [sp, #340]	; 0x154
    d7f0:	f201 8098 	bhi.w	e924 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37b4>
    d7f4:	e7ff      	b.n	d7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2686>
    d7f6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d7fa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d7fe:	1842      	adds	r2, r0, r1
    d800:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    d804:	9855      	ldr	r0, [sp, #340]	; 0x154
    d806:	f001 ffb5 	bl	f774 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>
    d80a:	9054      	str	r0, [sp, #336]	; 0x150
    d80c:	e7ff      	b.n	d80e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x269e>
    d80e:	9854      	ldr	r0, [sp, #336]	; 0x150
    d810:	07c1      	lsls	r1, r0, #31
    d812:	2900      	cmp	r1, #0
    d814:	d006      	beq.n	d824 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b4>
    d816:	e7ff      	b.n	d818 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26a8>
                    self.next();
    d818:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d81c:	f001 faa7 	bl	ed6e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    d820:	e7ff      	b.n	d822 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b2>
                if self.hw.key(self.v[x]) {
    d822:	e7ff      	b.n	d824 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b4>
        match (
    d824:	f000 bf71 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d828:	2005      	movs	r0, #5
    d82a:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    d82e:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    d832:	f2c0 0001 	movt	r0, #1
    d836:	6801      	ldr	r1, [r0, #0]
    d838:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    d83c:	f004 fab3 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d840:	9053      	str	r0, [sp, #332]	; 0x14c
    d842:	e01f      	b.n	d884 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2714>
    d844:	2001      	movs	r0, #1
    d846:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    d84a:	e015      	b.n	d878 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2708>
    d84c:	2000      	movs	r0, #0
    d84e:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    d852:	e011      	b.n	d878 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2708>
    d854:	2000      	movs	r0, #0
    d856:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    d85a:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    d85e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d862:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d866:	f004 fb13 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d86a:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    d86e:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    d872:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    d876:	e00a      	b.n	d88e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x271e>
    d878:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    d87c:	07c0      	lsls	r0, r0, #31
    d87e:	2800      	cmp	r0, #0
    d880:	d112      	bne.n	d8a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2738>
    d882:	e055      	b.n	d930 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27c0>
    d884:	9853      	ldr	r0, [sp, #332]	; 0x14c
    d886:	07c1      	lsls	r1, r0, #31
    d888:	2900      	cmp	r1, #0
    d88a:	d1e3      	bne.n	d854 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26e4>
    d88c:	e7de      	b.n	d84c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26dc>
    d88e:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    d892:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    d896:	f004 fa86 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d89a:	9052      	str	r0, [sp, #328]	; 0x148
    d89c:	e7ff      	b.n	d89e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x272e>
    d89e:	9852      	ldr	r0, [sp, #328]	; 0x148
    d8a0:	07c1      	lsls	r1, r0, #31
    d8a2:	2900      	cmp	r1, #0
    d8a4:	d1ce      	bne.n	d844 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26d4>
    d8a6:	e7d1      	b.n	d84c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26dc>
                trace!("[{:04x}] SKNP Vx", self.pc);
    d8a8:	f24f 60fc 	movw	r0, #63228	; 0xf6fc
    d8ac:	f2c0 0001 	movt	r0, #1
    d8b0:	6801      	ldr	r1, [r0, #0]
    d8b2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d8b6:	f100 0212 	add.w	r2, r0, #18
    d8ba:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    d8be:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    d8c2:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    d8c6:	f649 534b 	movw	r3, #40267	; 0x9d4b
    d8ca:	f2c0 0301 	movt	r3, #1
    d8ce:	4610      	mov	r0, r2
    d8d0:	9151      	str	r1, [sp, #324]	; 0x144
    d8d2:	4619      	mov	r1, r3
    d8d4:	f7fd f804 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d8d8:	9050      	str	r0, [sp, #320]	; 0x140
    d8da:	914f      	str	r1, [sp, #316]	; 0x13c
    d8dc:	e7ff      	b.n	d8de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x276e>
    d8de:	9850      	ldr	r0, [sp, #320]	; 0x140
    d8e0:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    d8e4:	994f      	ldr	r1, [sp, #316]	; 0x13c
    d8e6:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    d8ea:	f24f 3228 	movw	r2, #62248	; 0xf328
    d8ee:	f2c0 0201 	movt	r2, #1
    d8f2:	6812      	ldr	r2, [r2, #0]
    d8f4:	466b      	mov	r3, sp
    d8f6:	f04f 0c01 	mov.w	ip, #1
    d8fa:	f8c3 c008 	str.w	ip, [r3, #8]
    d8fe:	605a      	str	r2, [r3, #4]
    d900:	f8c3 c000 	str.w	ip, [r3]
    d904:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    d908:	2202      	movs	r2, #2
    d90a:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    d90e:	9951      	ldr	r1, [sp, #324]	; 0x144
    d910:	f004 fa85 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d914:	e7ff      	b.n	d916 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27a6>
    d916:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    d91a:	f24f 701c 	movw	r0, #63260	; 0xf71c
    d91e:	f2c0 0001 	movt	r0, #1
    d922:	6802      	ldr	r2, [r0, #0]
    d924:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    d928:	f005 fb58 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d92c:	e7ff      	b.n	d92e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27be>
    d92e:	e7ff      	b.n	d930 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27c0>
    d930:	f241 0048 	movw	r0, #4168	; 0x1048
                if !self.hw.key(self.v[x]) {
    d934:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d938:	4408      	add	r0, r1
    d93a:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    d93e:	2a0f      	cmp	r2, #15
    d940:	904e      	str	r0, [sp, #312]	; 0x138
    d942:	f200 87e5 	bhi.w	e910 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37a0>
    d946:	e7ff      	b.n	d948 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27d8>
    d948:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d94c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d950:	1842      	adds	r2, r0, r1
    d952:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    d956:	984e      	ldr	r0, [sp, #312]	; 0x138
    d958:	f001 ff0c 	bl	f774 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>
    d95c:	904d      	str	r0, [sp, #308]	; 0x134
    d95e:	e7ff      	b.n	d960 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27f0>
    d960:	984d      	ldr	r0, [sp, #308]	; 0x134
    d962:	07c1      	lsls	r1, r0, #31
    d964:	2900      	cmp	r1, #0
    d966:	d106      	bne.n	d976 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2806>
    d968:	e7ff      	b.n	d96a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27fa>
                    self.next();
    d96a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d96e:	f001 f9fe 	bl	ed6e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    d972:	e7ff      	b.n	d974 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2804>
                if !self.hw.key(self.v[x]) {
    d974:	e7ff      	b.n	d976 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2806>
        match (
    d976:	f000 bec8 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d97a:	2005      	movs	r0, #5
    d97c:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    d980:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    d984:	f2c0 0001 	movt	r0, #1
    d988:	6801      	ldr	r1, [r0, #0]
    d98a:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    d98e:	f004 fa0a 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d992:	904c      	str	r0, [sp, #304]	; 0x130
    d994:	e01f      	b.n	d9d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2866>
    d996:	2001      	movs	r0, #1
    d998:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    d99c:	e015      	b.n	d9ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x285a>
    d99e:	2000      	movs	r0, #0
    d9a0:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    d9a4:	e011      	b.n	d9ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x285a>
    d9a6:	2000      	movs	r0, #0
    d9a8:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    d9ac:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    d9b0:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d9b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d9b8:	f004 fa6a 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d9bc:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    d9c0:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    d9c4:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    d9c8:	e00a      	b.n	d9e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2870>
    d9ca:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    d9ce:	07c0      	lsls	r0, r0, #31
    d9d0:	2800      	cmp	r0, #0
    d9d2:	d112      	bne.n	d9fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x288a>
    d9d4:	e055      	b.n	da82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2912>
    d9d6:	984c      	ldr	r0, [sp, #304]	; 0x130
    d9d8:	07c1      	lsls	r1, r0, #31
    d9da:	2900      	cmp	r1, #0
    d9dc:	d1e3      	bne.n	d9a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2836>
    d9de:	e7de      	b.n	d99e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x282e>
    d9e0:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    d9e4:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    d9e8:	f004 f9dd 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d9ec:	904b      	str	r0, [sp, #300]	; 0x12c
    d9ee:	e7ff      	b.n	d9f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2880>
    d9f0:	984b      	ldr	r0, [sp, #300]	; 0x12c
    d9f2:	07c1      	lsls	r1, r0, #31
    d9f4:	2900      	cmp	r1, #0
    d9f6:	d1ce      	bne.n	d996 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2826>
    d9f8:	e7d1      	b.n	d99e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x282e>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    d9fa:	f24f 60ac 	movw	r0, #63148	; 0xf6ac
    d9fe:	f2c0 0001 	movt	r0, #1
    da02:	6801      	ldr	r1, [r0, #0]
    da04:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da08:	f100 0212 	add.w	r2, r0, #18
    da0c:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    da10:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    da14:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    da18:	f649 534b 	movw	r3, #40267	; 0x9d4b
    da1c:	f2c0 0301 	movt	r3, #1
    da20:	4610      	mov	r0, r2
    da22:	914a      	str	r1, [sp, #296]	; 0x128
    da24:	4619      	mov	r1, r3
    da26:	f7fc ff5b 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    da2a:	9049      	str	r0, [sp, #292]	; 0x124
    da2c:	9148      	str	r1, [sp, #288]	; 0x120
    da2e:	e7ff      	b.n	da30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x28c0>
    da30:	9849      	ldr	r0, [sp, #292]	; 0x124
    da32:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    da36:	9948      	ldr	r1, [sp, #288]	; 0x120
    da38:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    da3c:	f24f 3228 	movw	r2, #62248	; 0xf328
    da40:	f2c0 0201 	movt	r2, #1
    da44:	6812      	ldr	r2, [r2, #0]
    da46:	466b      	mov	r3, sp
    da48:	f04f 0c01 	mov.w	ip, #1
    da4c:	f8c3 c008 	str.w	ip, [r3, #8]
    da50:	605a      	str	r2, [r3, #4]
    da52:	f8c3 c000 	str.w	ip, [r3]
    da56:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    da5a:	2202      	movs	r2, #2
    da5c:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    da60:	994a      	ldr	r1, [sp, #296]	; 0x128
    da62:	f004 f9dc 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    da66:	e7ff      	b.n	da68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x28f8>
    da68:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    da6c:	f24f 60cc 	movw	r0, #63180	; 0xf6cc
    da70:	f2c0 0001 	movt	r0, #1
    da74:	6802      	ldr	r2, [r0, #0]
    da76:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    da7a:	f005 faaf 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    da7e:	e7ff      	b.n	da80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2910>
    da80:	e7ff      	b.n	da82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2912>
                self.v[x] = self.dt;
    da82:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da86:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    da8a:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    da8e:	2a0f      	cmp	r2, #15
    da90:	9147      	str	r1, [sp, #284]	; 0x11c
    da92:	f200 8733 	bhi.w	e8fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x378c>
    da96:	e7ff      	b.n	da98 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2928>
    da98:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da9c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    daa0:	1842      	adds	r2, r0, r1
    daa2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    daa4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    daa8:	f000 be2f 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    daac:	2005      	movs	r0, #5
    daae:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    dab2:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    dab6:	f2c0 0001 	movt	r0, #1
    daba:	6801      	ldr	r1, [r0, #0]
    dabc:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    dac0:	f004 f971 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dac4:	9046      	str	r0, [sp, #280]	; 0x118
    dac6:	e01f      	b.n	db08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2998>
    dac8:	2001      	movs	r0, #1
    daca:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    dace:	e015      	b.n	dafc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x298c>
    dad0:	2000      	movs	r0, #0
    dad2:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    dad6:	e011      	b.n	dafc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x298c>
    dad8:	2000      	movs	r0, #0
    dada:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    dade:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    dae2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dae6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    daea:	f004 f9d1 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    daee:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    daf2:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    daf6:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    dafa:	e00a      	b.n	db12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29a2>
    dafc:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    db00:	07c0      	lsls	r0, r0, #31
    db02:	2800      	cmp	r0, #0
    db04:	d112      	bne.n	db2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29bc>
    db06:	e055      	b.n	dbb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a44>
    db08:	9846      	ldr	r0, [sp, #280]	; 0x118
    db0a:	07c1      	lsls	r1, r0, #31
    db0c:	2900      	cmp	r1, #0
    db0e:	d1e3      	bne.n	dad8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2968>
    db10:	e7de      	b.n	dad0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2960>
    db12:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    db16:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    db1a:	f004 f944 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    db1e:	9045      	str	r0, [sp, #276]	; 0x114
    db20:	e7ff      	b.n	db22 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29b2>
    db22:	9845      	ldr	r0, [sp, #276]	; 0x114
    db24:	07c1      	lsls	r1, r0, #31
    db26:	2900      	cmp	r1, #0
    db28:	d1ce      	bne.n	dac8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2958>
    db2a:	e7d1      	b.n	dad0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2960>
                trace!("[{:04x}] LD Vx, K", self.pc);
    db2c:	f24f 605c 	movw	r0, #63068	; 0xf65c
    db30:	f2c0 0001 	movt	r0, #1
    db34:	6801      	ldr	r1, [r0, #0]
    db36:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    db3a:	f100 0212 	add.w	r2, r0, #18
    db3e:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    db42:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    db46:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    db4a:	f649 534b 	movw	r3, #40267	; 0x9d4b
    db4e:	f2c0 0301 	movt	r3, #1
    db52:	4610      	mov	r0, r2
    db54:	9144      	str	r1, [sp, #272]	; 0x110
    db56:	4619      	mov	r1, r3
    db58:	f7fc fec2 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    db5c:	9043      	str	r0, [sp, #268]	; 0x10c
    db5e:	9142      	str	r1, [sp, #264]	; 0x108
    db60:	e7ff      	b.n	db62 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29f2>
    db62:	9843      	ldr	r0, [sp, #268]	; 0x10c
    db64:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    db68:	9942      	ldr	r1, [sp, #264]	; 0x108
    db6a:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    db6e:	f24f 3228 	movw	r2, #62248	; 0xf328
    db72:	f2c0 0201 	movt	r2, #1
    db76:	6812      	ldr	r2, [r2, #0]
    db78:	466b      	mov	r3, sp
    db7a:	f04f 0c01 	mov.w	ip, #1
    db7e:	f8c3 c008 	str.w	ip, [r3, #8]
    db82:	605a      	str	r2, [r3, #4]
    db84:	f8c3 c000 	str.w	ip, [r3]
    db88:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    db8c:	2202      	movs	r2, #2
    db8e:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    db92:	9944      	ldr	r1, [sp, #272]	; 0x110
    db94:	f004 f943 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    db98:	e7ff      	b.n	db9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a2a>
    db9a:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    db9e:	f24f 607c 	movw	r0, #63100	; 0xf67c
    dba2:	f2c0 0001 	movt	r0, #1
    dba6:	6802      	ldr	r2, [r0, #0]
    dba8:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    dbac:	f005 fa16 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dbb0:	e7ff      	b.n	dbb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a42>
    dbb2:	e7ff      	b.n	dbb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a44>
                self.v[x] = self.waitkey();
    dbb4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dbb8:	f001 fa2d 	bl	f016 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE>
    dbbc:	9041      	str	r0, [sp, #260]	; 0x104
    dbbe:	e7ff      	b.n	dbc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a50>
    dbc0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dbc4:	280f      	cmp	r0, #15
    dbc6:	f200 868f 	bhi.w	e8e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3778>
    dbca:	e7ff      	b.n	dbcc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a5c>
    dbcc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dbd0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dbd4:	1842      	adds	r2, r0, r1
    dbd6:	9b41      	ldr	r3, [sp, #260]	; 0x104
    dbd8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    dbdc:	f000 bd95 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    dbe0:	2005      	movs	r0, #5
    dbe2:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    dbe6:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    dbea:	f2c0 0001 	movt	r0, #1
    dbee:	6801      	ldr	r1, [r0, #0]
    dbf0:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    dbf4:	f004 f8d7 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dbf8:	9040      	str	r0, [sp, #256]	; 0x100
    dbfa:	e01f      	b.n	dc3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2acc>
    dbfc:	2001      	movs	r0, #1
    dbfe:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    dc02:	e015      	b.n	dc30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ac0>
    dc04:	2000      	movs	r0, #0
    dc06:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    dc0a:	e011      	b.n	dc30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ac0>
    dc0c:	2000      	movs	r0, #0
    dc0e:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    dc12:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    dc16:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dc1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dc1e:	f004 f937 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    dc22:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    dc26:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    dc2a:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    dc2e:	e00a      	b.n	dc46 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ad6>
    dc30:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    dc34:	07c0      	lsls	r0, r0, #31
    dc36:	2800      	cmp	r0, #0
    dc38:	d112      	bne.n	dc60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2af0>
    dc3a:	e055      	b.n	dce8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b78>
    dc3c:	9840      	ldr	r0, [sp, #256]	; 0x100
    dc3e:	07c1      	lsls	r1, r0, #31
    dc40:	2900      	cmp	r1, #0
    dc42:	d1e3      	bne.n	dc0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a9c>
    dc44:	e7de      	b.n	dc04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a94>
    dc46:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    dc4a:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    dc4e:	f004 f8aa 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dc52:	903f      	str	r0, [sp, #252]	; 0xfc
    dc54:	e7ff      	b.n	dc56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ae6>
    dc56:	983f      	ldr	r0, [sp, #252]	; 0xfc
    dc58:	07c1      	lsls	r1, r0, #31
    dc5a:	2900      	cmp	r1, #0
    dc5c:	d1ce      	bne.n	dbfc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a8c>
    dc5e:	e7d1      	b.n	dc04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a94>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    dc60:	f24f 600c 	movw	r0, #62988	; 0xf60c
    dc64:	f2c0 0001 	movt	r0, #1
    dc68:	6801      	ldr	r1, [r0, #0]
    dc6a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc6e:	f100 0212 	add.w	r2, r0, #18
    dc72:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    dc76:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    dc7a:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    dc7e:	f649 534b 	movw	r3, #40267	; 0x9d4b
    dc82:	f2c0 0301 	movt	r3, #1
    dc86:	4610      	mov	r0, r2
    dc88:	913e      	str	r1, [sp, #248]	; 0xf8
    dc8a:	4619      	mov	r1, r3
    dc8c:	f7fc fe28 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dc90:	903d      	str	r0, [sp, #244]	; 0xf4
    dc92:	913c      	str	r1, [sp, #240]	; 0xf0
    dc94:	e7ff      	b.n	dc96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b26>
    dc96:	983d      	ldr	r0, [sp, #244]	; 0xf4
    dc98:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    dc9c:	993c      	ldr	r1, [sp, #240]	; 0xf0
    dc9e:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    dca2:	f24f 3228 	movw	r2, #62248	; 0xf328
    dca6:	f2c0 0201 	movt	r2, #1
    dcaa:	6812      	ldr	r2, [r2, #0]
    dcac:	466b      	mov	r3, sp
    dcae:	f04f 0c01 	mov.w	ip, #1
    dcb2:	f8c3 c008 	str.w	ip, [r3, #8]
    dcb6:	605a      	str	r2, [r3, #4]
    dcb8:	f8c3 c000 	str.w	ip, [r3]
    dcbc:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    dcc0:	2202      	movs	r2, #2
    dcc2:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    dcc6:	993e      	ldr	r1, [sp, #248]	; 0xf8
    dcc8:	f004 f8a9 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    dccc:	e7ff      	b.n	dcce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b5e>
    dcce:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    dcd2:	f24f 602c 	movw	r0, #63020	; 0xf62c
    dcd6:	f2c0 0001 	movt	r0, #1
    dcda:	6802      	ldr	r2, [r0, #0]
    dcdc:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    dce0:	f005 f97c 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dce4:	e7ff      	b.n	dce6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b76>
    dce6:	e7ff      	b.n	dce8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b78>
                self.dt = self.v[x];
    dce8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dcec:	280f      	cmp	r0, #15
    dcee:	f200 85f1 	bhi.w	e8d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3764>
    dcf2:	e7ff      	b.n	dcf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b84>
    dcf4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dcf8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dcfc:	1842      	adds	r2, r0, r1
    dcfe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    dd02:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    dd06:	f000 bd00 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    dd0a:	2005      	movs	r0, #5
    dd0c:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    dd10:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    dd14:	f2c0 0001 	movt	r0, #1
    dd18:	6801      	ldr	r1, [r0, #0]
    dd1a:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    dd1e:	f004 f842 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dd22:	903b      	str	r0, [sp, #236]	; 0xec
    dd24:	e01f      	b.n	dd66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bf6>
    dd26:	2001      	movs	r0, #1
    dd28:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    dd2c:	e015      	b.n	dd5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bea>
    dd2e:	2000      	movs	r0, #0
    dd30:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    dd34:	e011      	b.n	dd5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bea>
    dd36:	2000      	movs	r0, #0
    dd38:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    dd3c:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    dd40:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dd44:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dd48:	f004 f8a2 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    dd4c:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    dd50:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    dd54:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    dd58:	e00a      	b.n	dd70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c00>
    dd5a:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    dd5e:	07c0      	lsls	r0, r0, #31
    dd60:	2800      	cmp	r0, #0
    dd62:	d112      	bne.n	dd8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c1a>
    dd64:	e055      	b.n	de12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ca2>
    dd66:	983b      	ldr	r0, [sp, #236]	; 0xec
    dd68:	07c1      	lsls	r1, r0, #31
    dd6a:	2900      	cmp	r1, #0
    dd6c:	d1e3      	bne.n	dd36 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bc6>
    dd6e:	e7de      	b.n	dd2e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bbe>
    dd70:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    dd74:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    dd78:	f004 f815 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dd7c:	903a      	str	r0, [sp, #232]	; 0xe8
    dd7e:	e7ff      	b.n	dd80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c10>
    dd80:	983a      	ldr	r0, [sp, #232]	; 0xe8
    dd82:	07c1      	lsls	r1, r0, #31
    dd84:	2900      	cmp	r1, #0
    dd86:	d1ce      	bne.n	dd26 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bb6>
    dd88:	e7d1      	b.n	dd2e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bbe>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    dd8a:	f24f 50bc 	movw	r0, #62908	; 0xf5bc
    dd8e:	f2c0 0001 	movt	r0, #1
    dd92:	6801      	ldr	r1, [r0, #0]
    dd94:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dd98:	f100 0212 	add.w	r2, r0, #18
    dd9c:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    dda0:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    dda4:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    dda8:	f649 534b 	movw	r3, #40267	; 0x9d4b
    ddac:	f2c0 0301 	movt	r3, #1
    ddb0:	4610      	mov	r0, r2
    ddb2:	9139      	str	r1, [sp, #228]	; 0xe4
    ddb4:	4619      	mov	r1, r3
    ddb6:	f7fc fd93 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ddba:	9038      	str	r0, [sp, #224]	; 0xe0
    ddbc:	9137      	str	r1, [sp, #220]	; 0xdc
    ddbe:	e7ff      	b.n	ddc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c50>
    ddc0:	9838      	ldr	r0, [sp, #224]	; 0xe0
    ddc2:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    ddc6:	9937      	ldr	r1, [sp, #220]	; 0xdc
    ddc8:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    ddcc:	f24f 3228 	movw	r2, #62248	; 0xf328
    ddd0:	f2c0 0201 	movt	r2, #1
    ddd4:	6812      	ldr	r2, [r2, #0]
    ddd6:	466b      	mov	r3, sp
    ddd8:	f04f 0c01 	mov.w	ip, #1
    dddc:	f8c3 c008 	str.w	ip, [r3, #8]
    dde0:	605a      	str	r2, [r3, #4]
    dde2:	f8c3 c000 	str.w	ip, [r3]
    dde6:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    ddea:	2202      	movs	r2, #2
    ddec:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    ddf0:	9939      	ldr	r1, [sp, #228]	; 0xe4
    ddf2:	f004 f814 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    ddf6:	e7ff      	b.n	ddf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c88>
    ddf8:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    ddfc:	f24f 50dc 	movw	r0, #62940	; 0xf5dc
    de00:	f2c0 0001 	movt	r0, #1
    de04:	6802      	ldr	r2, [r0, #0]
    de06:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    de0a:	f005 f8e7 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    de0e:	e7ff      	b.n	de10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ca0>
    de10:	e7ff      	b.n	de12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ca2>
                self.st = self.v[x];
    de12:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    de16:	280f      	cmp	r0, #15
    de18:	f200 8552 	bhi.w	e8c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3750>
    de1c:	e7ff      	b.n	de1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2cae>
    de1e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    de22:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    de26:	1842      	adds	r2, r0, r1
    de28:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    de2c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    de30:	f000 bc6b 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    de34:	2005      	movs	r0, #5
    de36:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    de3a:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    de3e:	f2c0 0001 	movt	r0, #1
    de42:	6801      	ldr	r1, [r0, #0]
    de44:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    de48:	f003 ffad 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    de4c:	9036      	str	r0, [sp, #216]	; 0xd8
    de4e:	e01f      	b.n	de90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d20>
    de50:	2001      	movs	r0, #1
    de52:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    de56:	e015      	b.n	de84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d14>
    de58:	2000      	movs	r0, #0
    de5a:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    de5e:	e011      	b.n	de84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d14>
    de60:	2000      	movs	r0, #0
    de62:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    de66:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    de6a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    de6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    de72:	f004 f80d 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    de76:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    de7a:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    de7e:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    de82:	e00a      	b.n	de9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d2a>
    de84:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    de88:	07c0      	lsls	r0, r0, #31
    de8a:	2800      	cmp	r0, #0
    de8c:	d112      	bne.n	deb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d44>
    de8e:	e055      	b.n	df3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2dcc>
    de90:	9836      	ldr	r0, [sp, #216]	; 0xd8
    de92:	07c1      	lsls	r1, r0, #31
    de94:	2900      	cmp	r1, #0
    de96:	d1e3      	bne.n	de60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2cf0>
    de98:	e7de      	b.n	de58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ce8>
    de9a:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    de9e:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    dea2:	f003 ff80 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dea6:	9035      	str	r0, [sp, #212]	; 0xd4
    dea8:	e7ff      	b.n	deaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d3a>
    deaa:	9835      	ldr	r0, [sp, #212]	; 0xd4
    deac:	07c1      	lsls	r1, r0, #31
    deae:	2900      	cmp	r1, #0
    deb0:	d1ce      	bne.n	de50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ce0>
    deb2:	e7d1      	b.n	de58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ce8>
                trace!("[{:04x}] ADD I, Vx", self.pc);
    deb4:	f24f 506c 	movw	r0, #62828	; 0xf56c
    deb8:	f2c0 0001 	movt	r0, #1
    debc:	6801      	ldr	r1, [r0, #0]
    debe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dec2:	f100 0212 	add.w	r2, r0, #18
    dec6:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
    deca:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
    dece:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
    ded2:	f649 534b 	movw	r3, #40267	; 0x9d4b
    ded6:	f2c0 0301 	movt	r3, #1
    deda:	4610      	mov	r0, r2
    dedc:	9134      	str	r1, [sp, #208]	; 0xd0
    dede:	4619      	mov	r1, r3
    dee0:	f7fc fcfe 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dee4:	9033      	str	r0, [sp, #204]	; 0xcc
    dee6:	9132      	str	r1, [sp, #200]	; 0xc8
    dee8:	e7ff      	b.n	deea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d7a>
    deea:	9833      	ldr	r0, [sp, #204]	; 0xcc
    deec:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
    def0:	9932      	ldr	r1, [sp, #200]	; 0xc8
    def2:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
    def6:	f24f 3228 	movw	r2, #62248	; 0xf328
    defa:	f2c0 0201 	movt	r2, #1
    defe:	6812      	ldr	r2, [r2, #0]
    df00:	466b      	mov	r3, sp
    df02:	f04f 0c01 	mov.w	ip, #1
    df06:	f8c3 c008 	str.w	ip, [r3, #8]
    df0a:	605a      	str	r2, [r3, #4]
    df0c:	f8c3 c000 	str.w	ip, [r3]
    df10:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    df14:	2202      	movs	r2, #2
    df16:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
    df1a:	9934      	ldr	r1, [sp, #208]	; 0xd0
    df1c:	f003 ff7f 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    df20:	e7ff      	b.n	df22 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2db2>
    df22:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
    df26:	f24f 508c 	movw	r0, #62860	; 0xf58c
    df2a:	f2c0 0001 	movt	r0, #1
    df2e:	6802      	ldr	r2, [r0, #0]
    df30:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    df34:	f005 f852 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    df38:	e7ff      	b.n	df3a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2dca>
    df3a:	e7ff      	b.n	df3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2dcc>
                self.i = self.i.wrapping_add(self.v[x].into());
    df3c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df40:	8a01      	ldrh	r1, [r0, #16]
    df42:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    df46:	2a0f      	cmp	r2, #15
    df48:	9131      	str	r1, [sp, #196]	; 0xc4
    df4a:	f200 84af 	bhi.w	e8ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x373c>
    df4e:	e7ff      	b.n	df50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2de0>
    df50:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df54:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    df58:	1842      	adds	r2, r0, r1
    df5a:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    df5e:	f003 ffab 	bl	11eb8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>
    df62:	9030      	str	r0, [sp, #192]	; 0xc0
    df64:	e7ff      	b.n	df66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2df6>
    df66:	9831      	ldr	r0, [sp, #196]	; 0xc4
    df68:	9930      	ldr	r1, [sp, #192]	; 0xc0
    df6a:	f001 fa28 	bl	f3be <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>
    df6e:	902f      	str	r0, [sp, #188]	; 0xbc
    df70:	e7ff      	b.n	df72 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e02>
    df72:	982f      	ldr	r0, [sp, #188]	; 0xbc
    df74:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    df78:	8208      	strh	r0, [r1, #16]
        match (
    df7a:	e3c6      	b.n	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    df7c:	2005      	movs	r0, #5
    df7e:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
    df82:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    df86:	f2c0 0001 	movt	r0, #1
    df8a:	6801      	ldr	r1, [r0, #0]
    df8c:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    df90:	f003 ff09 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    df94:	902e      	str	r0, [sp, #184]	; 0xb8
    df96:	e01f      	b.n	dfd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e68>
    df98:	2001      	movs	r0, #1
    df9a:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    df9e:	e015      	b.n	dfcc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e5c>
    dfa0:	2000      	movs	r0, #0
    dfa2:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    dfa6:	e011      	b.n	dfcc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e5c>
    dfa8:	2000      	movs	r0, #0
    dfaa:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
    dfae:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
    dfb2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dfb6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dfba:	f003 ff69 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    dfbe:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
    dfc2:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
    dfc6:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
    dfca:	e00a      	b.n	dfe2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e72>
    dfcc:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
    dfd0:	07c0      	lsls	r0, r0, #31
    dfd2:	2800      	cmp	r0, #0
    dfd4:	d112      	bne.n	dffc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e8c>
    dfd6:	e055      	b.n	e084 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f14>
    dfd8:	982e      	ldr	r0, [sp, #184]	; 0xb8
    dfda:	07c1      	lsls	r1, r0, #31
    dfdc:	2900      	cmp	r1, #0
    dfde:	d1e3      	bne.n	dfa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e38>
    dfe0:	e7de      	b.n	dfa0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e30>
    dfe2:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    dfe6:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
    dfea:	f003 fedc 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dfee:	902d      	str	r0, [sp, #180]	; 0xb4
    dff0:	e7ff      	b.n	dff2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e82>
    dff2:	982d      	ldr	r0, [sp, #180]	; 0xb4
    dff4:	07c1      	lsls	r1, r0, #31
    dff6:	2900      	cmp	r1, #0
    dff8:	d1ce      	bne.n	df98 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e28>
    dffa:	e7d1      	b.n	dfa0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e30>
                trace!("[{:04x}] LD F, Vx", self.pc);
    dffc:	f24f 40e8 	movw	r0, #62696	; 0xf4e8
    e000:	f2c0 0001 	movt	r0, #1
    e004:	6801      	ldr	r1, [r0, #0]
    e006:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e00a:	f100 0212 	add.w	r2, r0, #18
    e00e:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
    e012:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
    e016:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
    e01a:	f649 534b 	movw	r3, #40267	; 0x9d4b
    e01e:	f2c0 0301 	movt	r3, #1
    e022:	4610      	mov	r0, r2
    e024:	912c      	str	r1, [sp, #176]	; 0xb0
    e026:	4619      	mov	r1, r3
    e028:	f7fc fc5a 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e02c:	902b      	str	r0, [sp, #172]	; 0xac
    e02e:	912a      	str	r1, [sp, #168]	; 0xa8
    e030:	e7ff      	b.n	e032 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ec2>
    e032:	982b      	ldr	r0, [sp, #172]	; 0xac
    e034:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
    e038:	992a      	ldr	r1, [sp, #168]	; 0xa8
    e03a:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
    e03e:	f24f 3228 	movw	r2, #62248	; 0xf328
    e042:	f2c0 0201 	movt	r2, #1
    e046:	6812      	ldr	r2, [r2, #0]
    e048:	466b      	mov	r3, sp
    e04a:	f04f 0c01 	mov.w	ip, #1
    e04e:	f8c3 c008 	str.w	ip, [r3, #8]
    e052:	605a      	str	r2, [r3, #4]
    e054:	f8c3 c000 	str.w	ip, [r3]
    e058:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    e05c:	2202      	movs	r2, #2
    e05e:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
    e062:	992c      	ldr	r1, [sp, #176]	; 0xb0
    e064:	f003 fedb 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e068:	e7ff      	b.n	e06a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2efa>
    e06a:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
    e06e:	f24f 5008 	movw	r0, #62728	; 0xf508
    e072:	f2c0 0001 	movt	r0, #1
    e076:	6802      	ldr	r2, [r0, #0]
    e078:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    e07c:	f004 ffae 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e080:	e7ff      	b.n	e082 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f12>
    e082:	e7ff      	b.n	e084 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f14>
                self.i = (self.v[x] * 5).into();
    e084:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e088:	280f      	cmp	r0, #15
    e08a:	f200 83f9 	bhi.w	e880 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3710>
    e08e:	e7ff      	b.n	e090 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f20>
    e090:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e094:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e098:	1842      	adds	r2, r0, r1
    e09a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e09e:	2305      	movs	r3, #5
    e0a0:	fba2 2303 	umull	r2, r3, r2, r3
    e0a4:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    e0a8:	f04f 0e00 	mov.w	lr, #0
    e0ac:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    e0b0:	bf18      	it	ne
    e0b2:	f04f 0c01 	movne.w	ip, #1
    e0b6:	2b00      	cmp	r3, #0
    e0b8:	bf18      	it	ne
    e0ba:	2301      	movne	r3, #1
    e0bc:	ea43 030c 	orr.w	r3, r3, ip
    e0c0:	2b00      	cmp	r3, #0
    e0c2:	9229      	str	r2, [sp, #164]	; 0xa4
    e0c4:	f040 83e6 	bne.w	e894 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3724>
    e0c8:	e7ff      	b.n	e0ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f5a>
    e0ca:	9829      	ldr	r0, [sp, #164]	; 0xa4
    e0cc:	f003 fef4 	bl	11eb8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>
    e0d0:	9028      	str	r0, [sp, #160]	; 0xa0
    e0d2:	e7ff      	b.n	e0d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f64>
    e0d4:	9828      	ldr	r0, [sp, #160]	; 0xa0
    e0d6:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    e0da:	8208      	strh	r0, [r1, #16]
        match (
    e0dc:	e315      	b.n	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    e0de:	2005      	movs	r0, #5
    e0e0:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
    e0e4:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    e0e8:	f2c0 0001 	movt	r0, #1
    e0ec:	6801      	ldr	r1, [r0, #0]
    e0ee:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    e0f2:	f003 fe58 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e0f6:	9027      	str	r0, [sp, #156]	; 0x9c
    e0f8:	e01f      	b.n	e13a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fca>
    e0fa:	2001      	movs	r0, #1
    e0fc:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    e100:	e015      	b.n	e12e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fbe>
    e102:	2000      	movs	r0, #0
    e104:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    e108:	e011      	b.n	e12e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fbe>
    e10a:	2000      	movs	r0, #0
    e10c:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
    e110:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
    e114:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e118:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e11c:	f003 feb8 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    e120:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
    e124:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
    e128:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
    e12c:	e00a      	b.n	e144 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fd4>
    e12e:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
    e132:	07c0      	lsls	r0, r0, #31
    e134:	2800      	cmp	r0, #0
    e136:	d112      	bne.n	e15e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fee>
    e138:	e055      	b.n	e1e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3076>
    e13a:	9827      	ldr	r0, [sp, #156]	; 0x9c
    e13c:	07c1      	lsls	r1, r0, #31
    e13e:	2900      	cmp	r1, #0
    e140:	d1e3      	bne.n	e10a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f9a>
    e142:	e7de      	b.n	e102 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f92>
    e144:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    e148:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
    e14c:	f003 fe2b 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e150:	9026      	str	r0, [sp, #152]	; 0x98
    e152:	e7ff      	b.n	e154 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fe4>
    e154:	9826      	ldr	r0, [sp, #152]	; 0x98
    e156:	07c1      	lsls	r1, r0, #31
    e158:	2900      	cmp	r1, #0
    e15a:	d1ce      	bne.n	e0fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f8a>
    e15c:	e7d1      	b.n	e102 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f92>
                trace!("[{:04x}] LD B, Vx", self.pc);
    e15e:	f24f 4048 	movw	r0, #62536	; 0xf448
    e162:	f2c0 0001 	movt	r0, #1
    e166:	6801      	ldr	r1, [r0, #0]
    e168:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e16c:	f100 0212 	add.w	r2, r0, #18
    e170:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
    e174:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
    e178:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
    e17c:	f649 534b 	movw	r3, #40267	; 0x9d4b
    e180:	f2c0 0301 	movt	r3, #1
    e184:	4610      	mov	r0, r2
    e186:	9125      	str	r1, [sp, #148]	; 0x94
    e188:	4619      	mov	r1, r3
    e18a:	f7fc fba9 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e18e:	9024      	str	r0, [sp, #144]	; 0x90
    e190:	9123      	str	r1, [sp, #140]	; 0x8c
    e192:	e7ff      	b.n	e194 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3024>
    e194:	9824      	ldr	r0, [sp, #144]	; 0x90
    e196:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
    e19a:	9923      	ldr	r1, [sp, #140]	; 0x8c
    e19c:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
    e1a0:	f24f 3228 	movw	r2, #62248	; 0xf328
    e1a4:	f2c0 0201 	movt	r2, #1
    e1a8:	6812      	ldr	r2, [r2, #0]
    e1aa:	466b      	mov	r3, sp
    e1ac:	f04f 0c01 	mov.w	ip, #1
    e1b0:	f8c3 c008 	str.w	ip, [r3, #8]
    e1b4:	605a      	str	r2, [r3, #4]
    e1b6:	f8c3 c000 	str.w	ip, [r3]
    e1ba:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    e1be:	2202      	movs	r2, #2
    e1c0:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
    e1c4:	9925      	ldr	r1, [sp, #148]	; 0x94
    e1c6:	f003 fe2a 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e1ca:	e7ff      	b.n	e1cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x305c>
    e1cc:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
    e1d0:	f24f 4068 	movw	r0, #62568	; 0xf468
    e1d4:	f2c0 0001 	movt	r0, #1
    e1d8:	6802      	ldr	r2, [r0, #0]
    e1da:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    e1de:	f004 fefd 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e1e2:	e7ff      	b.n	e1e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3074>
    e1e4:	e7ff      	b.n	e1e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3076>
                let bcd = self.v[x];
    e1e6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e1ea:	280f      	cmp	r0, #15
    e1ec:	f200 8308 	bhi.w	e800 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3690>
    e1f0:	e7ff      	b.n	e1f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3082>
    e1f2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e1f6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e1fa:	1842      	adds	r2, r0, r1
    e1fc:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e200:	4613      	mov	r3, r2
    e202:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
    e206:	f248 5c1f 	movw	ip, #34079	; 0x851f
    e20a:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
    e20e:	fba2 2c0c 	umull	r2, ip, r2, ip
    e212:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    e216:	f8b0 e010 	ldrh.w	lr, [r0, #16]
    e21a:	4674      	mov	r4, lr
    e21c:	2500      	movs	r5, #0
    e21e:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
    e222:	9322      	str	r3, [sp, #136]	; 0x88
    e224:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    e228:	9420      	str	r4, [sp, #128]	; 0x80
    e22a:	f040 82f3 	bne.w	e814 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36a4>
    e22e:	e7ff      	b.n	e230 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x30c0>
    e230:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e234:	9920      	ldr	r1, [sp, #128]	; 0x80
    e236:	1842      	adds	r2, r0, r1
    e238:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e23a:	fa5f fc83 	uxtb.w	ip, r3
    e23e:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    e242:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    e246:	fbac 450e 	umull	r4, r5, ip, lr
    e24a:	08ed      	lsrs	r5, r5, #3
    e24c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    e250:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
    e254:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    e258:	9a22      	ldr	r2, [sp, #136]	; 0x88
    e25a:	fa5f fc82 	uxtb.w	ip, r2
    e25e:	fbac ce0e 	umull	ip, lr, ip, lr
    e262:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    e266:	8a05      	ldrh	r5, [r0, #16]
    e268:	3501      	adds	r5, #1
    e26a:	2600      	movs	r6, #0
    e26c:	2e00      	cmp	r6, #0
    e26e:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
    e272:	951e      	str	r5, [sp, #120]	; 0x78
    e274:	f040 82d8 	bne.w	e828 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36b8>
    e278:	e7ff      	b.n	e27a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x310a>
    e27a:	2000      	movs	r0, #0
    e27c:	991e      	ldr	r1, [sp, #120]	; 0x78
    e27e:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    e282:	f040 82dd 	bne.w	e840 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36d0>
    e286:	e7ff      	b.n	e288 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3118>
    e288:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e28c:	991e      	ldr	r1, [sp, #120]	; 0x78
    e28e:	1842      	adds	r2, r0, r1
    e290:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e292:	fa5f fc83 	uxtb.w	ip, r3
    e296:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    e29a:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    e29e:	fbac e40e 	umull	lr, r4, ip, lr
    e2a2:	08e4      	lsrs	r4, r4, #3
    e2a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    e2a8:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    e2ac:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
    e2b0:	8a02      	ldrh	r2, [r0, #16]
    e2b2:	3202      	adds	r2, #2
    e2b4:	f04f 0c00 	mov.w	ip, #0
    e2b8:	f1bc 0f00 	cmp.w	ip, #0
    e2bc:	921d      	str	r2, [sp, #116]	; 0x74
    e2be:	f040 82c9 	bne.w	e854 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36e4>
    e2c2:	e7ff      	b.n	e2c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3154>
    e2c4:	2000      	movs	r0, #0
    e2c6:	991d      	ldr	r1, [sp, #116]	; 0x74
    e2c8:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    e2cc:	f040 82ce 	bne.w	e86c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36fc>
    e2d0:	e7ff      	b.n	e2d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3162>
    e2d2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e2d6:	991d      	ldr	r1, [sp, #116]	; 0x74
    e2d8:	1842      	adds	r2, r0, r1
    e2da:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e2dc:	fa5f fc83 	uxtb.w	ip, r3
    e2e0:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    e2e4:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    e2e8:	fbac e40e 	umull	lr, r4, ip, lr
    e2ec:	08e4      	lsrs	r4, r4, #3
    e2ee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    e2f2:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    e2f6:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
    e2fa:	e206      	b.n	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    e2fc:	2005      	movs	r0, #5
    e2fe:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
    e302:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    e306:	f2c0 0001 	movt	r0, #1
    e30a:	6801      	ldr	r1, [r0, #0]
    e30c:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    e310:	f003 fd49 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e314:	901c      	str	r0, [sp, #112]	; 0x70
    e316:	e01f      	b.n	e358 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31e8>
    e318:	2001      	movs	r0, #1
    e31a:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    e31e:	e015      	b.n	e34c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31dc>
    e320:	2000      	movs	r0, #0
    e322:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    e326:	e011      	b.n	e34c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31dc>
    e328:	2000      	movs	r0, #0
    e32a:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
    e32e:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
    e332:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e336:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e33a:	f003 fda9 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    e33e:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
    e342:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
    e346:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
    e34a:	e00a      	b.n	e362 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31f2>
    e34c:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
    e350:	07c0      	lsls	r0, r0, #31
    e352:	2800      	cmp	r0, #0
    e354:	d112      	bne.n	e37c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x320c>
    e356:	e055      	b.n	e404 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3294>
    e358:	981c      	ldr	r0, [sp, #112]	; 0x70
    e35a:	07c1      	lsls	r1, r0, #31
    e35c:	2900      	cmp	r1, #0
    e35e:	d1e3      	bne.n	e328 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31b8>
    e360:	e7de      	b.n	e320 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31b0>
    e362:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    e366:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
    e36a:	f003 fd1c 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e36e:	901b      	str	r0, [sp, #108]	; 0x6c
    e370:	e7ff      	b.n	e372 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3202>
    e372:	981b      	ldr	r0, [sp, #108]	; 0x6c
    e374:	07c1      	lsls	r1, r0, #31
    e376:	2900      	cmp	r1, #0
    e378:	d1ce      	bne.n	e318 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31a8>
    e37a:	e7d1      	b.n	e320 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31b0>
                trace!("[{:04x}] LD [I], Vx", self.pc);
    e37c:	f24f 30c8 	movw	r0, #62408	; 0xf3c8
    e380:	f2c0 0001 	movt	r0, #1
    e384:	6801      	ldr	r1, [r0, #0]
    e386:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e38a:	f100 0212 	add.w	r2, r0, #18
    e38e:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
    e392:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
    e396:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
    e39a:	f649 534b 	movw	r3, #40267	; 0x9d4b
    e39e:	f2c0 0301 	movt	r3, #1
    e3a2:	4610      	mov	r0, r2
    e3a4:	911a      	str	r1, [sp, #104]	; 0x68
    e3a6:	4619      	mov	r1, r3
    e3a8:	f7fc fa9a 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e3ac:	9019      	str	r0, [sp, #100]	; 0x64
    e3ae:	9118      	str	r1, [sp, #96]	; 0x60
    e3b0:	e7ff      	b.n	e3b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3242>
    e3b2:	9819      	ldr	r0, [sp, #100]	; 0x64
    e3b4:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
    e3b8:	9918      	ldr	r1, [sp, #96]	; 0x60
    e3ba:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
    e3be:	f24f 3228 	movw	r2, #62248	; 0xf328
    e3c2:	f2c0 0201 	movt	r2, #1
    e3c6:	6812      	ldr	r2, [r2, #0]
    e3c8:	466b      	mov	r3, sp
    e3ca:	f04f 0c01 	mov.w	ip, #1
    e3ce:	f8c3 c008 	str.w	ip, [r3, #8]
    e3d2:	605a      	str	r2, [r3, #4]
    e3d4:	f8c3 c000 	str.w	ip, [r3]
    e3d8:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    e3dc:	2202      	movs	r2, #2
    e3de:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
    e3e2:	991a      	ldr	r1, [sp, #104]	; 0x68
    e3e4:	f003 fd1b 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e3e8:	e7ff      	b.n	e3ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x327a>
    e3ea:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
    e3ee:	f24f 30e8 	movw	r0, #62440	; 0xf3e8
    e3f2:	f2c0 0001 	movt	r0, #1
    e3f6:	6802      	ldr	r2, [r0, #0]
    e3f8:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    e3fc:	f004 fdee 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e400:	e7ff      	b.n	e402 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3292>
    e402:	e7ff      	b.n	e404 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3294>
                let x = x as usize;
    e404:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e408:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
    e40c:	1c41      	adds	r1, r0, #1
    e40e:	460a      	mov	r2, r1
    e410:	4281      	cmp	r1, r0
    e412:	9217      	str	r2, [sp, #92]	; 0x5c
    e414:	f0c0 81c9 	bcc.w	e7aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x363a>
    e418:	e7ff      	b.n	e41a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32aa>
    e41a:	2000      	movs	r0, #0
    e41c:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
    e420:	9817      	ldr	r0, [sp, #92]	; 0x5c
    e422:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
    e426:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
    e42a:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
    e42e:	f004 fb61 	bl	12af4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    e432:	9016      	str	r0, [sp, #88]	; 0x58
    e434:	9115      	str	r1, [sp, #84]	; 0x54
    e436:	e7ff      	b.n	e438 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32c8>
    e438:	9816      	ldr	r0, [sp, #88]	; 0x58
    e43a:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
    e43e:	9915      	ldr	r1, [sp, #84]	; 0x54
    e440:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
    e444:	e7ff      	b.n	e446 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32d6>
    e446:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
    e44a:	f004 fac8 	bl	129de <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    e44e:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
    e452:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
    e456:	e7ff      	b.n	e458 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32e8>
    e458:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
    e45c:	2800      	cmp	r0, #0
    e45e:	d001      	beq.n	e464 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32f4>
    e460:	e7ff      	b.n	e462 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32f2>
    e462:	e001      	b.n	e468 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32f8>
        match (
    e464:	e151      	b.n	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for i in 0..(x + 1) {
    e466:	defe      	udf	#254	; 0xfe
    e468:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
    e46c:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
    e470:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
    e474:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
    e478:	280f      	cmp	r0, #15
    e47a:	9014      	str	r0, [sp, #80]	; 0x50
    e47c:	f200 81a1 	bhi.w	e7c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3652>
    e480:	e7ff      	b.n	e482 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3312>
    e482:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e486:	9914      	ldr	r1, [sp, #80]	; 0x50
    e488:	1842      	adds	r2, r0, r1
    e48a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e48e:	8a03      	ldrh	r3, [r0, #16]
    e490:	eb03 0c01 	add.w	ip, r3, r1
    e494:	46e6      	mov	lr, ip
    e496:	459c      	cmp	ip, r3
    e498:	9213      	str	r2, [sp, #76]	; 0x4c
    e49a:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    e49e:	f0c0 8199 	bcc.w	e7d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3664>
    e4a2:	e7ff      	b.n	e4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3334>
    e4a4:	2000      	movs	r0, #0
    e4a6:	9912      	ldr	r1, [sp, #72]	; 0x48
    e4a8:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    e4ac:	f040 819e 	bne.w	e7ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x367c>
    e4b0:	e7ff      	b.n	e4b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3342>
    e4b2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e4b6:	9912      	ldr	r1, [sp, #72]	; 0x48
    e4b8:	1842      	adds	r2, r0, r1
    e4ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e4bc:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
    e4c0:	e7c1      	b.n	e446 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32d6>
    e4c2:	2005      	movs	r0, #5
    e4c4:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
    e4c8:	f24f 20e0 	movw	r0, #62176	; 0xf2e0
    e4cc:	f2c0 0001 	movt	r0, #1
    e4d0:	6801      	ldr	r1, [r0, #0]
    e4d2:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    e4d6:	f003 fc66 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e4da:	9011      	str	r0, [sp, #68]	; 0x44
    e4dc:	e01f      	b.n	e51e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33ae>
    e4de:	2001      	movs	r0, #1
    e4e0:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    e4e4:	e015      	b.n	e512 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33a2>
    e4e6:	2000      	movs	r0, #0
    e4e8:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    e4ec:	e011      	b.n	e512 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33a2>
    e4ee:	2000      	movs	r0, #0
    e4f0:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
    e4f4:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
    e4f8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e4fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e500:	f003 fcc6 	bl	11e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    e504:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
    e508:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
    e50c:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
    e510:	e00a      	b.n	e528 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33b8>
    e512:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
    e516:	07c0      	lsls	r0, r0, #31
    e518:	2800      	cmp	r0, #0
    e51a:	d112      	bne.n	e542 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33d2>
    e51c:	e055      	b.n	e5ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x345a>
    e51e:	9811      	ldr	r0, [sp, #68]	; 0x44
    e520:	07c1      	lsls	r1, r0, #31
    e522:	2900      	cmp	r1, #0
    e524:	d1e3      	bne.n	e4ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x337e>
    e526:	e7de      	b.n	e4e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3376>
    e528:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    e52c:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
    e530:	f003 fc39 	bl	11da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e534:	9010      	str	r0, [sp, #64]	; 0x40
    e536:	e7ff      	b.n	e538 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33c8>
    e538:	9810      	ldr	r0, [sp, #64]	; 0x40
    e53a:	07c1      	lsls	r1, r0, #31
    e53c:	2900      	cmp	r1, #0
    e53e:	d1ce      	bne.n	e4de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x336e>
    e540:	e7d1      	b.n	e4e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3376>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
    e542:	f24f 3004 	movw	r0, #62212	; 0xf304
    e546:	f2c0 0001 	movt	r0, #1
    e54a:	6801      	ldr	r1, [r0, #0]
    e54c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e550:	f100 0212 	add.w	r2, r0, #18
    e554:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
    e558:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
    e55c:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
    e560:	f649 534b 	movw	r3, #40267	; 0x9d4b
    e564:	f2c0 0301 	movt	r3, #1
    e568:	4610      	mov	r0, r2
    e56a:	910f      	str	r1, [sp, #60]	; 0x3c
    e56c:	4619      	mov	r1, r3
    e56e:	f7fc f9b7 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e572:	900e      	str	r0, [sp, #56]	; 0x38
    e574:	910d      	str	r1, [sp, #52]	; 0x34
    e576:	e7ff      	b.n	e578 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3408>
    e578:	980e      	ldr	r0, [sp, #56]	; 0x38
    e57a:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
    e57e:	990d      	ldr	r1, [sp, #52]	; 0x34
    e580:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
    e584:	f24f 3228 	movw	r2, #62248	; 0xf328
    e588:	f2c0 0201 	movt	r2, #1
    e58c:	6812      	ldr	r2, [r2, #0]
    e58e:	466b      	mov	r3, sp
    e590:	f04f 0c01 	mov.w	ip, #1
    e594:	f8c3 c008 	str.w	ip, [r3, #8]
    e598:	605a      	str	r2, [r3, #4]
    e59a:	f8c3 c000 	str.w	ip, [r3]
    e59e:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    e5a2:	2202      	movs	r2, #2
    e5a4:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
    e5a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e5aa:	f003 fc38 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e5ae:	e7ff      	b.n	e5b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3440>
    e5b0:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
    e5b4:	f24f 3068 	movw	r0, #62312	; 0xf368
    e5b8:	f2c0 0001 	movt	r0, #1
    e5bc:	6802      	ldr	r2, [r0, #0]
    e5be:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    e5c2:	f004 fd0b 	bl	12fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e5c6:	e7ff      	b.n	e5c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3458>
    e5c8:	e7ff      	b.n	e5ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x345a>
                let x = x as usize;
    e5ca:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e5ce:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
    e5d2:	1c41      	adds	r1, r0, #1
    e5d4:	460a      	mov	r2, r1
    e5d6:	4281      	cmp	r1, r0
    e5d8:	920c      	str	r2, [sp, #48]	; 0x30
    e5da:	f0c0 80bb 	bcc.w	e754 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35e4>
    e5de:	e7ff      	b.n	e5e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3470>
    e5e0:	2000      	movs	r0, #0
    e5e2:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
    e5e6:	980c      	ldr	r0, [sp, #48]	; 0x30
    e5e8:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
    e5ec:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
    e5f0:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
    e5f4:	f004 fa7e 	bl	12af4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    e5f8:	900b      	str	r0, [sp, #44]	; 0x2c
    e5fa:	910a      	str	r1, [sp, #40]	; 0x28
    e5fc:	e7ff      	b.n	e5fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x348e>
    e5fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e600:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
    e604:	990a      	ldr	r1, [sp, #40]	; 0x28
    e606:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
    e60a:	e7ff      	b.n	e60c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x349c>
    e60c:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
    e610:	f004 f9e5 	bl	129de <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    e614:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
    e618:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
    e61c:	e7ff      	b.n	e61e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34ae>
    e61e:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
    e622:	2800      	cmp	r0, #0
    e624:	d001      	beq.n	e62a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34ba>
    e626:	e7ff      	b.n	e628 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34b8>
    e628:	e001      	b.n	e62e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34be>
        match (
    e62a:	e06e      	b.n	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for i in 0..(x + 1) {
    e62c:	defe      	udf	#254	; 0xfe
    e62e:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
    e632:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
    e636:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
    e63a:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
    e63e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    e642:	8a0a      	ldrh	r2, [r1, #16]
    e644:	1813      	adds	r3, r2, r0
    e646:	469c      	mov	ip, r3
    e648:	4293      	cmp	r3, r2
    e64a:	9009      	str	r0, [sp, #36]	; 0x24
    e64c:	f8cd c020 	str.w	ip, [sp, #32]
    e650:	f0c0 808c 	bcc.w	e76c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35fc>
    e654:	e7ff      	b.n	e656 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34e6>
    e656:	2000      	movs	r0, #0
    e658:	9908      	ldr	r1, [sp, #32]
    e65a:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    e65e:	f040 8091 	bne.w	e784 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3614>
    e662:	e7ff      	b.n	e664 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34f4>
    e664:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e668:	9908      	ldr	r1, [sp, #32]
    e66a:	1842      	adds	r2, r0, r1
    e66c:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    e670:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e672:	2b0f      	cmp	r3, #15
    e674:	9207      	str	r2, [sp, #28]
    e676:	f200 808f 	bhi.w	e798 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3628>
    e67a:	e7ff      	b.n	e67c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x350c>
    e67c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e680:	9909      	ldr	r1, [sp, #36]	; 0x24
    e682:	1842      	adds	r2, r0, r1
    e684:	9b07      	ldr	r3, [sp, #28]
    e686:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
    e68a:	e7bf      	b.n	e60c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x349c>
    e68c:	f649 514b 	movw	r1, #40267	; 0x9d4b
    e690:	f2c0 0101 	movt	r1, #1
    e694:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
    e698:	f7fc f922 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e69c:	9006      	str	r0, [sp, #24]
    e69e:	9105      	str	r1, [sp, #20]
    e6a0:	e7ff      	b.n	e6a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3532>
    e6a2:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
    e6a6:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
    e6aa:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
    e6ae:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
    e6b2:	9a06      	ldr	r2, [sp, #24]
    e6b4:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
    e6b8:	9b05      	ldr	r3, [sp, #20]
    e6ba:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
    e6be:	f64f 6ccc 	movw	ip, #65228	; 0xfecc
    e6c2:	f2c0 0c01 	movt	ip, #1
    e6c6:	f8dc c000 	ldr.w	ip, [ip]
    e6ca:	46ee      	mov	lr, sp
    e6cc:	2402      	movs	r4, #2
    e6ce:	f8ce 4008 	str.w	r4, [lr, #8]
    e6d2:	f8ce c004 	str.w	ip, [lr, #4]
    e6d6:	f8ce 4000 	str.w	r4, [lr]
    e6da:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    e6de:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
    e6e2:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
    e6e6:	4622      	mov	r2, r4
    e6e8:	f003 fb99 	bl	11e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e6ec:	e7ff      	b.n	e6ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x357e>
    e6ee:	f64f 60f0 	movw	r0, #65264	; 0xfef0
    e6f2:	f2c0 0001 	movt	r0, #1
    e6f6:	f009 ff14 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    e6fa:	9004      	str	r0, [sp, #16]
    e6fc:	e7ff      	b.n	e6fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x358e>
    e6fe:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    e702:	9904      	ldr	r1, [sp, #16]
    e704:	f009 ff4a 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    e708:	defe      	udf	#254	; 0xfe
        }
    }
    e70a:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
    e70e:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
    e710:	f24f 2088 	movw	r0, #62088	; 0xf288
    e714:	f2c0 0001 	movt	r0, #1
    e718:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e71c:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    e720:	f009 ff1c 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e724:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
    e726:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
    e72a:	f2c0 0001 	movt	r0, #1
    e72e:	f24f 2298 	movw	r2, #62104	; 0xf298
    e732:	f2c0 0201 	movt	r2, #1
    e736:	211c      	movs	r1, #28
    e738:	f009 fefa 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e73c:	defe      	udf	#254	; 0xfe
    e73e:	f24f 20cc 	movw	r0, #62156	; 0xf2cc
    e742:	f2c0 0001 	movt	r0, #1
    e746:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e74a:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    e74e:	f009 ff05 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e752:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    e754:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
    e758:	f2c0 0001 	movt	r0, #1
    e75c:	f24f 326c 	movw	r2, #62316	; 0xf36c
    e760:	f2c0 0201 	movt	r2, #1
    e764:	211c      	movs	r1, #28
    e766:	f009 fee3 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e76a:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
    e76c:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
    e770:	f2c0 0001 	movt	r0, #1
    e774:	f24f 327c 	movw	r2, #62332	; 0xf37c
    e778:	f2c0 0201 	movt	r2, #1
    e77c:	211c      	movs	r1, #28
    e77e:	f009 fed7 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e782:	defe      	udf	#254	; 0xfe
    e784:	f24f 308c 	movw	r0, #62348	; 0xf38c
    e788:	f2c0 0001 	movt	r0, #1
    e78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e790:	9908      	ldr	r1, [sp, #32]
    e792:	f009 fee3 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e796:	defe      	udf	#254	; 0xfe
    e798:	f24f 309c 	movw	r0, #62364	; 0xf39c
    e79c:	f2c0 0001 	movt	r0, #1
    e7a0:	2210      	movs	r2, #16
    e7a2:	9909      	ldr	r1, [sp, #36]	; 0x24
    e7a4:	f009 feda 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7a8:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    e7aa:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
    e7ae:	f2c0 0001 	movt	r0, #1
    e7b2:	f24f 32ec 	movw	r2, #62444	; 0xf3ec
    e7b6:	f2c0 0201 	movt	r2, #1
    e7ba:	211c      	movs	r1, #28
    e7bc:	f009 feb8 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e7c0:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
    e7c2:	f24f 30fc 	movw	r0, #62460	; 0xf3fc
    e7c6:	f2c0 0001 	movt	r0, #1
    e7ca:	2210      	movs	r2, #16
    e7cc:	9914      	ldr	r1, [sp, #80]	; 0x50
    e7ce:	f009 fec5 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7d2:	defe      	udf	#254	; 0xfe
    e7d4:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
    e7d8:	f2c0 0001 	movt	r0, #1
    e7dc:	f24f 420c 	movw	r2, #62476	; 0xf40c
    e7e0:	f2c0 0201 	movt	r2, #1
    e7e4:	211c      	movs	r1, #28
    e7e6:	f009 fea3 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e7ea:	defe      	udf	#254	; 0xfe
    e7ec:	f24f 401c 	movw	r0, #62492	; 0xf41c
    e7f0:	f2c0 0001 	movt	r0, #1
    e7f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e7f8:	9912      	ldr	r1, [sp, #72]	; 0x48
    e7fa:	f009 feaf 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7fe:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
    e800:	f24f 406c 	movw	r0, #62572	; 0xf46c
    e804:	f2c0 0001 	movt	r0, #1
    e808:	2210      	movs	r2, #16
    e80a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e80e:	f009 fea5 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e812:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
    e814:	f24f 407c 	movw	r0, #62588	; 0xf47c
    e818:	f2c0 0001 	movt	r0, #1
    e81c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e820:	9920      	ldr	r1, [sp, #128]	; 0x80
    e822:	f009 fe9b 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e826:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    e828:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
    e82c:	f2c0 0001 	movt	r0, #1
    e830:	f24f 428c 	movw	r2, #62604	; 0xf48c
    e834:	f2c0 0201 	movt	r2, #1
    e838:	211c      	movs	r1, #28
    e83a:	f009 fe79 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e83e:	defe      	udf	#254	; 0xfe
    e840:	f24f 409c 	movw	r0, #62620	; 0xf49c
    e844:	f2c0 0001 	movt	r0, #1
    e848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e84c:	991e      	ldr	r1, [sp, #120]	; 0x78
    e84e:	f009 fe85 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e852:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
    e854:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
    e858:	f2c0 0001 	movt	r0, #1
    e85c:	f24f 42ac 	movw	r2, #62636	; 0xf4ac
    e860:	f2c0 0201 	movt	r2, #1
    e864:	211c      	movs	r1, #28
    e866:	f009 fe63 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e86a:	defe      	udf	#254	; 0xfe
    e86c:	f24f 40bc 	movw	r0, #62652	; 0xf4bc
    e870:	f2c0 0001 	movt	r0, #1
    e874:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e878:	991d      	ldr	r1, [sp, #116]	; 0x74
    e87a:	f009 fe6f 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e87e:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
    e880:	f24f 500c 	movw	r0, #62732	; 0xf50c
    e884:	f2c0 0001 	movt	r0, #1
    e888:	2210      	movs	r2, #16
    e88a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e88e:	f009 fe65 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e892:	defe      	udf	#254	; 0xfe
    e894:	f24f 5030 	movw	r0, #62768	; 0xf530
    e898:	f2c0 0001 	movt	r0, #1
    e89c:	f24f 521c 	movw	r2, #62748	; 0xf51c
    e8a0:	f2c0 0201 	movt	r2, #1
    e8a4:	2121      	movs	r1, #33	; 0x21
    e8a6:	f009 fe43 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e8aa:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
    e8ac:	f24f 5090 	movw	r0, #62864	; 0xf590
    e8b0:	f2c0 0001 	movt	r0, #1
    e8b4:	2210      	movs	r2, #16
    e8b6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8ba:	f009 fe4f 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8be:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
    e8c0:	f24f 50e0 	movw	r0, #62944	; 0xf5e0
    e8c4:	f2c0 0001 	movt	r0, #1
    e8c8:	2210      	movs	r2, #16
    e8ca:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8ce:	f009 fe45 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8d2:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
    e8d4:	f24f 6030 	movw	r0, #63024	; 0xf630
    e8d8:	f2c0 0001 	movt	r0, #1
    e8dc:	2210      	movs	r2, #16
    e8de:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8e2:	f009 fe3b 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8e6:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
    e8e8:	f24f 6080 	movw	r0, #63104	; 0xf680
    e8ec:	f2c0 0001 	movt	r0, #1
    e8f0:	2210      	movs	r2, #16
    e8f2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8f6:	f009 fe31 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8fa:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
    e8fc:	f24f 60d0 	movw	r0, #63184	; 0xf6d0
    e900:	f2c0 0001 	movt	r0, #1
    e904:	2210      	movs	r2, #16
    e906:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e90a:	f009 fe27 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e90e:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
    e910:	f24f 7020 	movw	r0, #63264	; 0xf720
    e914:	f2c0 0001 	movt	r0, #1
    e918:	2210      	movs	r2, #16
    e91a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e91e:	f009 fe1d 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e922:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
    e924:	f24f 7064 	movw	r0, #63332	; 0xf764
    e928:	f2c0 0001 	movt	r0, #1
    e92c:	2210      	movs	r2, #16
    e92e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e932:	f009 fe13 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e936:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
    e938:	f24f 70b8 	movw	r0, #63416	; 0xf7b8
    e93c:	f2c0 0001 	movt	r0, #1
    e940:	2210      	movs	r2, #16
    e942:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e946:	f009 fe09 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e94a:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
    e94c:	f24f 70c8 	movw	r0, #63432	; 0xf7c8
    e950:	f2c0 0001 	movt	r0, #1
    e954:	2210      	movs	r2, #16
    e956:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e95a:	f009 fdff 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e95e:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
    e960:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
    e964:	f2c0 0001 	movt	r0, #1
    e968:	f24f 72d8 	movw	r2, #63448	; 0xf7d8
    e96c:	f2c0 0201 	movt	r2, #1
    e970:	211c      	movs	r1, #28
    e972:	f009 fddd 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e976:	defe      	udf	#254	; 0xfe
    e978:	f24f 70e8 	movw	r0, #63464	; 0xf7e8
    e97c:	f2c0 0001 	movt	r0, #1
    e980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e984:	9967      	ldr	r1, [sp, #412]	; 0x19c
    e986:	f009 fde9 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e98a:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
    e98c:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
    e990:	f2c0 0001 	movt	r0, #1
    e994:	f24f 72f8 	movw	r2, #63480	; 0xf7f8
    e998:	f2c0 0201 	movt	r2, #1
    e99c:	211c      	movs	r1, #28
    e99e:	f009 fdc7 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e9a2:	defe      	udf	#254	; 0xfe
    e9a4:	f64f 0010 	movw	r0, #63504	; 0xf810
    e9a8:	f2c0 0001 	movt	r0, #1
    e9ac:	f24f 72f8 	movw	r2, #63480	; 0xf7f8
    e9b0:	f2c0 0201 	movt	r2, #1
    e9b4:	2139      	movs	r1, #57	; 0x39
    e9b6:	f009 fdbb 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e9ba:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
    e9bc:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
    e9c0:	f2c0 0001 	movt	r0, #1
    e9c4:	f64f 024c 	movw	r2, #63564	; 0xf84c
    e9c8:	f2c0 0201 	movt	r2, #1
    e9cc:	211c      	movs	r1, #28
    e9ce:	f009 fdaf 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e9d2:	defe      	udf	#254	; 0xfe
    e9d4:	f64f 0010 	movw	r0, #63504	; 0xf810
    e9d8:	f2c0 0001 	movt	r0, #1
    e9dc:	f64f 024c 	movw	r2, #63564	; 0xf84c
    e9e0:	f2c0 0201 	movt	r2, #1
    e9e4:	2139      	movs	r1, #57	; 0x39
    e9e6:	f009 fda3 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e9ea:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
    e9ec:	f64f 0070 	movw	r0, #63600	; 0xf870
    e9f0:	f2c0 0001 	movt	r0, #1
    e9f4:	f64f 025c 	movw	r2, #63580	; 0xf85c
    e9f8:	f2c0 0201 	movt	r2, #1
    e9fc:	2121      	movs	r1, #33	; 0x21
    e9fe:	f009 fd97 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ea02:	defe      	udf	#254	; 0xfe
    ea04:	f64f 00b0 	movw	r0, #63664	; 0xf8b0
    ea08:	f2c0 0001 	movt	r0, #1
    ea0c:	f64f 0294 	movw	r2, #63636	; 0xf894
    ea10:	f2c0 0201 	movt	r2, #1
    ea14:	2123      	movs	r1, #35	; 0x23
    ea16:	f009 fd8b 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ea1a:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
    ea1c:	f64f 1014 	movw	r0, #63764	; 0xf914
    ea20:	f2c0 0001 	movt	r0, #1
    ea24:	2210      	movs	r2, #16
    ea26:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ea2a:	f009 fd97 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ea2e:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
    ea30:	f64f 10e4 	movw	r0, #63972	; 0xf9e4
    ea34:	f2c0 0001 	movt	r0, #1
    ea38:	2210      	movs	r2, #16
    ea3a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ea3e:	f009 fd8d 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ea42:	defe      	udf	#254	; 0xfe
    ea44:	f64f 10f4 	movw	r0, #63988	; 0xf9f4
    ea48:	f2c0 0001 	movt	r0, #1
    ea4c:	2210      	movs	r2, #16
    ea4e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ea52:	f009 fd83 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ea56:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    ea58:	f64f 2044 	movw	r0, #64068	; 0xfa44
    ea5c:	f2c0 0001 	movt	r0, #1
    ea60:	2210      	movs	r2, #16
    ea62:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ea66:	f009 fd79 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ea6a:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
    ea6c:	f64f 2054 	movw	r0, #64084	; 0xfa54
    ea70:	f2c0 0001 	movt	r0, #1
    ea74:	2210      	movs	r2, #16
    ea76:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ea7a:	f009 fd6f 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ea7e:	defe      	udf	#254	; 0xfe
    ea80:	f64f 2064 	movw	r0, #64100	; 0xfa64
    ea84:	f2c0 0001 	movt	r0, #1
    ea88:	2210      	movs	r2, #16
    ea8a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ea8e:	f009 fd65 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ea92:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    ea94:	f64f 20b8 	movw	r0, #64184	; 0xfab8
    ea98:	f2c0 0001 	movt	r0, #1
    ea9c:	2210      	movs	r2, #16
    ea9e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    eaa2:	f009 fd5b 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eaa6:	defe      	udf	#254	; 0xfe
    eaa8:	f64f 20c8 	movw	r0, #64200	; 0xfac8
    eaac:	f2c0 0001 	movt	r0, #1
    eab0:	2210      	movs	r2, #16
    eab2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eab6:	f009 fd51 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eaba:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    eabc:	f64f 20d8 	movw	r0, #64216	; 0xfad8
    eac0:	f2c0 0001 	movt	r0, #1
    eac4:	2210      	movs	r2, #16
    eac6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eaca:	f009 fd47 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eace:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
    ead0:	f64f 3028 	movw	r0, #64296	; 0xfb28
    ead4:	f2c0 0001 	movt	r0, #1
    ead8:	2210      	movs	r2, #16
    eada:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eade:	f009 fd3d 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eae2:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
    eae4:	f64f 3038 	movw	r0, #64312	; 0xfb38
    eae8:	f2c0 0001 	movt	r0, #1
    eaec:	2210      	movs	r2, #16
    eaee:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eaf2:	f009 fd33 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eaf6:	defe      	udf	#254	; 0xfe
    eaf8:	f64f 3048 	movw	r0, #64328	; 0xfb48
    eafc:	f2c0 0001 	movt	r0, #1
    eb00:	2210      	movs	r2, #16
    eb02:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eb06:	f009 fd29 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eb0a:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    eb0c:	f64f 3098 	movw	r0, #64408	; 0xfb98
    eb10:	f2c0 0001 	movt	r0, #1
    eb14:	2210      	movs	r2, #16
    eb16:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eb1a:	f009 fd1f 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eb1e:	defe      	udf	#254	; 0xfe
    eb20:	f64f 30a8 	movw	r0, #64424	; 0xfba8
    eb24:	f2c0 0001 	movt	r0, #1
    eb28:	2210      	movs	r2, #16
    eb2a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    eb2e:	f009 fd15 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eb32:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    eb34:	f64f 30b8 	movw	r0, #64440	; 0xfbb8
    eb38:	f2c0 0001 	movt	r0, #1
    eb3c:	2210      	movs	r2, #16
    eb3e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eb42:	f009 fd0b 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eb46:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    eb48:	f64f 4008 	movw	r0, #64520	; 0xfc08
    eb4c:	f2c0 0001 	movt	r0, #1
    eb50:	2210      	movs	r2, #16
    eb52:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eb56:	f009 fd01 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eb5a:	defe      	udf	#254	; 0xfe
    eb5c:	f64f 4018 	movw	r0, #64536	; 0xfc18
    eb60:	f2c0 0001 	movt	r0, #1
    eb64:	2210      	movs	r2, #16
    eb66:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    eb6a:	f009 fcf7 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eb6e:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    eb70:	f64f 4028 	movw	r0, #64552	; 0xfc28
    eb74:	f2c0 0001 	movt	r0, #1
    eb78:	2210      	movs	r2, #16
    eb7a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eb7e:	f009 fced 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eb82:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
    eb84:	f64f 4078 	movw	r0, #64632	; 0xfc78
    eb88:	f2c0 0001 	movt	r0, #1
    eb8c:	2210      	movs	r2, #16
    eb8e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    eb92:	f009 fce3 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eb96:	defe      	udf	#254	; 0xfe
    eb98:	f64f 4088 	movw	r0, #64648	; 0xfc88
    eb9c:	f2c0 0001 	movt	r0, #1
    eba0:	2210      	movs	r2, #16
    eba2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eba6:	f009 fcd9 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ebaa:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
    ebac:	f64f 40d8 	movw	r0, #64728	; 0xfcd8
    ebb0:	f2c0 0001 	movt	r0, #1
    ebb4:	2210      	movs	r2, #16
    ebb6:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ebba:	f009 fccf 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ebbe:	defe      	udf	#254	; 0xfe
    ebc0:	f64f 40e8 	movw	r0, #64744	; 0xfce8
    ebc4:	f2c0 0001 	movt	r0, #1
    ebc8:	2210      	movs	r2, #16
    ebca:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ebce:	f009 fcc5 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ebd2:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
    ebd4:	f64f 5038 	movw	r0, #64824	; 0xfd38
    ebd8:	f2c0 0001 	movt	r0, #1
    ebdc:	2210      	movs	r2, #16
    ebde:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ebe2:	f009 fcbb 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ebe6:	defe      	udf	#254	; 0xfe
    ebe8:	f64f 5048 	movw	r0, #64840	; 0xfd48
    ebec:	f2c0 0001 	movt	r0, #1
    ebf0:	2210      	movs	r2, #16
    ebf2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ebf6:	f009 fcb1 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ebfa:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
    ebfc:	f64f 5098 	movw	r0, #64920	; 0xfd98
    ec00:	f2c0 0001 	movt	r0, #1
    ec04:	2210      	movs	r2, #16
    ec06:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ec0a:	f009 fca7 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ec0e:	defe      	udf	#254	; 0xfe
    ec10:	f64f 50a8 	movw	r0, #64936	; 0xfda8
    ec14:	f2c0 0001 	movt	r0, #1
    ec18:	2210      	movs	r2, #16
    ec1a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec1e:	f009 fc9d 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ec22:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
    ec24:	f64f 50f8 	movw	r0, #65016	; 0xfdf8
    ec28:	f2c0 0001 	movt	r0, #1
    ec2c:	2210      	movs	r2, #16
    ec2e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec32:	f009 fc93 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ec36:	defe      	udf	#254	; 0xfe
    ec38:	f64f 6008 	movw	r0, #65032	; 0xfe08
    ec3c:	f2c0 0001 	movt	r0, #1
    ec40:	2210      	movs	r2, #16
    ec42:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec46:	f009 fc89 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ec4a:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
    ec4c:	f64f 6058 	movw	r0, #65112	; 0xfe58
    ec50:	f2c0 0001 	movt	r0, #1
    ec54:	2210      	movs	r2, #16
    ec56:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec5a:	f009 fc7f 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ec5e:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
    ec60:	f64f 7040 	movw	r0, #65344	; 0xff40
    ec64:	f2c0 0001 	movt	r0, #1
    ec68:	2210      	movs	r2, #16
    ec6a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec6e:	f009 fc75 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ec72:	defe      	udf	#254	; 0xfe
    ec74:	f64f 7050 	movw	r0, #65360	; 0xff50
    ec78:	f2c0 0001 	movt	r0, #1
    ec7c:	2210      	movs	r2, #16
    ec7e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ec82:	f009 fc6b 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ec86:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
    ec88:	f64f 70a0 	movw	r0, #65440	; 0xffa0
    ec8c:	f2c0 0001 	movt	r0, #1
    ec90:	2210      	movs	r2, #16
    ec92:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec96:	f009 fc61 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ec9a:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
    ec9c:	f64f 70f0 	movw	r0, #65520	; 0xfff0
    eca0:	f2c0 0001 	movt	r0, #1
    eca4:	2210      	movs	r2, #16
    eca6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ecaa:	f009 fc57 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ecae:	defe      	udf	#254	; 0xfe

0000ecb0 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    ecb0:	b580      	push	{r7, lr}
    ecb2:	b086      	sub	sp, #24
    ecb4:	9104      	str	r1, [sp, #16]
    ecb6:	9205      	str	r2, [sp, #20]
    ecb8:	6809      	ldr	r1, [r1, #0]
    ecba:	6809      	ldr	r1, [r1, #0]
    ecbc:	2300      	movs	r3, #0
    ecbe:	9301      	str	r3, [sp, #4]
    ecc0:	9102      	str	r1, [sp, #8]
    ecc2:	9203      	str	r2, [sp, #12]
    ecc4:	9901      	ldr	r1, [sp, #4]
    ecc6:	9a02      	ldr	r2, [sp, #8]
    ecc8:	9b03      	ldr	r3, [sp, #12]
    ecca:	f000 fa9d 	bl	f208 <_ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E>
    ecce:	e7ff      	b.n	ecd0 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE+0x20>
    ecd0:	b006      	add	sp, #24
    ecd2:	bd80      	pop	{r7, pc}

0000ecd4 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6a25aae91f88a8abE>:
    ecd4:	b084      	sub	sp, #16
    ecd6:	9002      	str	r0, [sp, #8]
    ecd8:	9103      	str	r1, [sp, #12]
    ecda:	6800      	ldr	r0, [r0, #0]
    ecdc:	9000      	str	r0, [sp, #0]
    ecde:	9101      	str	r1, [sp, #4]
    ece0:	9800      	ldr	r0, [sp, #0]
    ece2:	9901      	ldr	r1, [sp, #4]
    ece4:	b004      	add	sp, #16
    ece6:	4770      	bx	lr

0000ece8 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>:
    fn jump(&mut self, pc: u16) {
    ece8:	b082      	sub	sp, #8
    ecea:	460a      	mov	r2, r1
    ecec:	9000      	str	r0, [sp, #0]
    ecee:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
    ecf2:	8241      	strh	r1, [r0, #18]
    }
    ecf4:	b002      	add	sp, #8
    ecf6:	4770      	bx	lr

0000ecf8 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE>:
    fn load(&mut self, rom: &[u8]) {
    ecf8:	b580      	push	{r7, lr}
    ecfa:	b08a      	sub	sp, #40	; 0x28
    ecfc:	9105      	str	r1, [sp, #20]
    ecfe:	9206      	str	r2, [sp, #24]
    ed00:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    ed02:	3047      	adds	r0, #71	; 0x47
    ed04:	9905      	ldr	r1, [sp, #20]
    ed06:	9a06      	ldr	r2, [sp, #24]
    ed08:	9004      	str	r0, [sp, #16]
    ed0a:	4608      	mov	r0, r1
    ed0c:	4611      	mov	r1, r2
    ed0e:	f003 feca 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    ed12:	9003      	str	r0, [sp, #12]
    ed14:	e7ff      	b.n	ed16 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x1e>
    ed16:	9803      	ldr	r0, [sp, #12]
    ed18:	f500 7100 	add.w	r1, r0, #512	; 0x200
    ed1c:	460a      	mov	r2, r1
    ed1e:	4281      	cmp	r1, r0
    ed20:	9202      	str	r2, [sp, #8]
    ed22:	d318      	bcc.n	ed56 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x5e>
    ed24:	e7ff      	b.n	ed26 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x2e>
    ed26:	f44f 7000 	mov.w	r0, #512	; 0x200
    ed2a:	9007      	str	r0, [sp, #28]
    ed2c:	9802      	ldr	r0, [sp, #8]
    ed2e:	9008      	str	r0, [sp, #32]
    ed30:	9a07      	ldr	r2, [sp, #28]
    ed32:	9b08      	ldr	r3, [sp, #32]
    ed34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    ed38:	9804      	ldr	r0, [sp, #16]
    ed3a:	f000 fb7a 	bl	f432 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E>
    ed3e:	9001      	str	r0, [sp, #4]
    ed40:	9100      	str	r1, [sp, #0]
    ed42:	e7ff      	b.n	ed44 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x4c>
    ed44:	9a05      	ldr	r2, [sp, #20]
    ed46:	9b06      	ldr	r3, [sp, #24]
    ed48:	9801      	ldr	r0, [sp, #4]
    ed4a:	9900      	ldr	r1, [sp, #0]
    ed4c:	f7fa f893 	bl	8e76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    ed50:	e7ff      	b.n	ed52 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x5a>
    }
    ed52:	b00a      	add	sp, #40	; 0x28
    ed54:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    ed56:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
    ed5a:	f2c0 0001 	movt	r0, #1
    ed5e:	f240 124c 	movw	r2, #332	; 0x14c
    ed62:	f2c0 0202 	movt	r2, #2
    ed66:	211c      	movs	r1, #28
    ed68:	f009 fbe2 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ed6c:	defe      	udf	#254	; 0xfe

0000ed6e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>:
    fn next(&mut self) {
    ed6e:	b580      	push	{r7, lr}
    ed70:	b084      	sub	sp, #16
    ed72:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
    ed74:	8a41      	ldrh	r1, [r0, #18]
    ed76:	2202      	movs	r2, #2
    ed78:	9002      	str	r0, [sp, #8]
    ed7a:	4608      	mov	r0, r1
    ed7c:	4611      	mov	r1, r2
    ed7e:	f000 fb1e 	bl	f3be <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>
    ed82:	9001      	str	r0, [sp, #4]
    ed84:	e7ff      	b.n	ed86 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE+0x18>
    ed86:	9802      	ldr	r0, [sp, #8]
    ed88:	9901      	ldr	r1, [sp, #4]
    ed8a:	f7ff ffad 	bl	ece8 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    ed8e:	e7ff      	b.n	ed90 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE+0x22>
    }
    ed90:	b004      	add	sp, #16
    ed92:	bd80      	pop	{r7, pc}

0000ed94 <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE>:
    fn push(&mut self, item: u16) {
    ed94:	b580      	push	{r7, lr}
    ed96:	b086      	sub	sp, #24
    ed98:	460a      	mov	r2, r1
    ed9a:	9004      	str	r0, [sp, #16]
    ed9c:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
    eda0:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    eda4:	460b      	mov	r3, r1
    eda6:	290f      	cmp	r1, #15
    eda8:	9003      	str	r0, [sp, #12]
    edaa:	9202      	str	r2, [sp, #8]
    edac:	9301      	str	r3, [sp, #4]
    edae:	d813      	bhi.n	edd8 <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE+0x44>
    edb0:	e7ff      	b.n	edb2 <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE+0x1e>
    edb2:	9803      	ldr	r0, [sp, #12]
    edb4:	9901      	ldr	r1, [sp, #4]
    edb6:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    edba:	9b02      	ldr	r3, [sp, #8]
    edbc:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
    edbe:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    edc2:	2101      	movs	r1, #1
    edc4:	f000 fa5e 	bl	f284 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE>
    edc8:	9000      	str	r0, [sp, #0]
    edca:	e7ff      	b.n	edcc <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE+0x38>
    edcc:	9800      	ldr	r0, [sp, #0]
    edce:	9903      	ldr	r1, [sp, #12]
    edd0:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
    edd4:	b006      	add	sp, #24
    edd6:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
    edd8:	f240 105c 	movw	r0, #348	; 0x15c
    eddc:	f2c0 0002 	movt	r0, #2
    ede0:	2210      	movs	r2, #16
    ede2:	9901      	ldr	r1, [sp, #4]
    ede4:	f009 fbba 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ede8:	defe      	udf	#254	; 0xfe

0000edea <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E>:
    fn tick(&mut self) {
    edea:	b580      	push	{r7, lr}
    edec:	b084      	sub	sp, #16
    edee:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
    edf0:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    edf4:	2900      	cmp	r1, #0
    edf6:	9002      	str	r0, [sp, #8]
    edf8:	d00f      	beq.n	ee1a <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x30>
    edfa:	e7ff      	b.n	edfc <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x12>
            self.dt -= 1;
    edfc:	9802      	ldr	r0, [sp, #8]
    edfe:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    ee02:	3901      	subs	r1, #1
    ee04:	b2ca      	uxtb	r2, r1
    ee06:	460b      	mov	r3, r1
    ee08:	428a      	cmp	r2, r1
    ee0a:	9301      	str	r3, [sp, #4]
    ee0c:	d129      	bne.n	ee62 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x78>
    ee0e:	e7ff      	b.n	ee10 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x26>
    ee10:	9801      	ldr	r0, [sp, #4]
    ee12:	9902      	ldr	r1, [sp, #8]
    ee14:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
    ee18:	e7ff      	b.n	ee1a <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x30>
        if self.st > 0 {
    ee1a:	9802      	ldr	r0, [sp, #8]
    ee1c:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    ee20:	2900      	cmp	r1, #0
    ee22:	d01c      	beq.n	ee5e <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x74>
    ee24:	e7ff      	b.n	ee26 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x3c>
            self.st -= 1;
    ee26:	9802      	ldr	r0, [sp, #8]
    ee28:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    ee2c:	3901      	subs	r1, #1
    ee2e:	b2ca      	uxtb	r2, r1
    ee30:	460b      	mov	r3, r1
    ee32:	428a      	cmp	r2, r1
    ee34:	9300      	str	r3, [sp, #0]
    ee36:	d120      	bne.n	ee7a <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x90>
    ee38:	e7ff      	b.n	ee3a <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x50>
    ee3a:	9800      	ldr	r0, [sp, #0]
    ee3c:	9902      	ldr	r1, [sp, #8]
    ee3e:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
    ee42:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
    ee46:	2a00      	cmp	r2, #0
    ee48:	d108      	bne.n	ee5c <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x72>
    ee4a:	e7ff      	b.n	ee4c <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x62>
    ee4c:	f241 0048 	movw	r0, #4168	; 0x1048
                self.hw.beep();
    ee50:	9902      	ldr	r1, [sp, #8]
    ee52:	4408      	add	r0, r1
    ee54:	f000 fed8 	bl	fc08 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha9851d0b0cdc4725E>
    ee58:	e7ff      	b.n	ee5a <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x70>
            if self.st == 0 {
    ee5a:	e7ff      	b.n	ee5c <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x72>
        if self.st > 0 {
    ee5c:	e7ff      	b.n	ee5e <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x74>
    }
    ee5e:	b004      	add	sp, #16
    ee60:	bd80      	pop	{r7, pc}
            self.dt -= 1;
    ee62:	f64f 0070 	movw	r0, #63600	; 0xf870
    ee66:	f2c0 0001 	movt	r0, #1
    ee6a:	f240 126c 	movw	r2, #364	; 0x16c
    ee6e:	f2c0 0202 	movt	r2, #2
    ee72:	2121      	movs	r1, #33	; 0x21
    ee74:	f009 fb5c 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ee78:	defe      	udf	#254	; 0xfe
            self.st -= 1;
    ee7a:	f64f 0070 	movw	r0, #63600	; 0xf870
    ee7e:	f2c0 0001 	movt	r0, #1
    ee82:	f240 127c 	movw	r2, #380	; 0x17c
    ee86:	f2c0 0202 	movt	r2, #2
    ee8a:	2121      	movs	r1, #33	; 0x21
    ee8c:	f009 fb50 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ee90:	defe      	udf	#254	; 0xfe

0000ee92 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E>:
    fn sched(&mut self) {
    ee92:	b510      	push	{r4, lr}
    ee94:	b098      	sub	sp, #96	; 0x60
    ee96:	9015      	str	r0, [sp, #84]	; 0x54
    ee98:	f241 0148 	movw	r1, #4168	; 0x1048
        if self.hw.sched() {
    ee9c:	4401      	add	r1, r0
    ee9e:	900b      	str	r0, [sp, #44]	; 0x2c
    eea0:	4608      	mov	r0, r1
    eea2:	f000 feb5 	bl	fc10 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E>
    eea6:	900a      	str	r0, [sp, #40]	; 0x28
    eea8:	e7ff      	b.n	eeaa <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x18>
    eeaa:	980a      	ldr	r0, [sp, #40]	; 0x28
    eeac:	07c1      	lsls	r1, r0, #31
    eeae:	2900      	cmp	r1, #0
    eeb0:	d005      	beq.n	eebe <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x2c>
    eeb2:	e7ff      	b.n	eeb4 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x22>
            self.shutdown();
    eeb4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eeb6:	f000 f90e 	bl	f0d6 <_ZN8libchip814Chip8$LT$T$GT$8shutdown17hb4ffb829681b047bE>
    eeba:	e7ff      	b.n	eebc <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x2a>
        if self.hw.sched() {
    eebc:	e7ff      	b.n	eebe <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x2c>
        if let Some(t) = self.time {
    eebe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eec0:	6801      	ldr	r1, [r0, #0]
    eec2:	2901      	cmp	r1, #1
    eec4:	d009      	beq.n	eeda <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x48>
    eec6:	e7ff      	b.n	eec8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x36>
    eec8:	f241 0048 	movw	r0, #4168	; 0x1048
            self.time = Some(self.hw.clock());
    eecc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    eece:	4408      	add	r0, r1
    eed0:	f000 fe38 	bl	fb44 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>
    eed4:	9109      	str	r1, [sp, #36]	; 0x24
    eed6:	9008      	str	r0, [sp, #32]
    eed8:	e046      	b.n	ef68 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xd6>
        if let Some(t) = self.time {
    eeda:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eedc:	6881      	ldr	r1, [r0, #8]
    eede:	68c2      	ldr	r2, [r0, #12]
    eee0:	9217      	str	r2, [sp, #92]	; 0x5c
    eee2:	9116      	str	r1, [sp, #88]	; 0x58
    eee4:	f241 0348 	movw	r3, #4168	; 0x1048
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    eee8:	4418      	add	r0, r3
    eeea:	9107      	str	r1, [sp, #28]
    eeec:	9206      	str	r2, [sp, #24]
    eeee:	f000 fe29 	bl	fb44 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>
    eef2:	9105      	str	r1, [sp, #20]
    eef4:	9004      	str	r0, [sp, #16]
    eef6:	e7ff      	b.n	eef8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x66>
    eef8:	9804      	ldr	r0, [sp, #16]
    eefa:	9905      	ldr	r1, [sp, #20]
    eefc:	9a07      	ldr	r2, [sp, #28]
    eefe:	9b06      	ldr	r3, [sp, #24]
    ef00:	f000 fa7f 	bl	f402 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E>
    ef04:	9103      	str	r1, [sp, #12]
    ef06:	9002      	str	r0, [sp, #8]
    ef08:	e7ff      	b.n	ef0a <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x78>
    ef0a:	f245 002b 	movw	r0, #20523	; 0x502b
    ef0e:	f2c0 00fe 	movt	r0, #254	; 0xfe
    ef12:	9902      	ldr	r1, [sp, #8]
    ef14:	1a08      	subs	r0, r1, r0
    ef16:	9a03      	ldr	r2, [sp, #12]
    ef18:	f172 0300 	sbcs.w	r3, r2, #0
    ef1c:	d323      	bcc.n	ef66 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xd4>
    ef1e:	e7ff      	b.n	ef20 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x8e>
                self.tick();
    ef20:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ef22:	f7ff ff62 	bl	edea <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E>
    ef26:	e7ff      	b.n	ef28 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x96>
    ef28:	f241 0048 	movw	r0, #4168	; 0x1048
                self.time = Some(self.hw.clock());
    ef2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ef2e:	4408      	add	r0, r1
    ef30:	f000 fe08 	bl	fb44 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>
    ef34:	9101      	str	r1, [sp, #4]
    ef36:	9000      	str	r0, [sp, #0]
    ef38:	e7ff      	b.n	ef3a <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xa8>
    ef3a:	9800      	ldr	r0, [sp, #0]
    ef3c:	900e      	str	r0, [sp, #56]	; 0x38
    ef3e:	9901      	ldr	r1, [sp, #4]
    ef40:	910f      	str	r1, [sp, #60]	; 0x3c
    ef42:	2200      	movs	r2, #0
    ef44:	920d      	str	r2, [sp, #52]	; 0x34
    ef46:	2201      	movs	r2, #1
    ef48:	920c      	str	r2, [sp, #48]	; 0x30
    ef4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ef4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ef4e:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    ef52:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    ef56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ef58:	6063      	str	r3, [r4, #4]
    ef5a:	6022      	str	r2, [r4, #0]
    ef5c:	f8c4 e00c 	str.w	lr, [r4, #12]
    ef60:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    ef64:	e7ff      	b.n	ef66 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xd4>
        if let Some(t) = self.time {
    ef66:	e015      	b.n	ef94 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x102>
            self.time = Some(self.hw.clock());
    ef68:	9808      	ldr	r0, [sp, #32]
    ef6a:	9012      	str	r0, [sp, #72]	; 0x48
    ef6c:	9909      	ldr	r1, [sp, #36]	; 0x24
    ef6e:	9113      	str	r1, [sp, #76]	; 0x4c
    ef70:	2200      	movs	r2, #0
    ef72:	9211      	str	r2, [sp, #68]	; 0x44
    ef74:	2201      	movs	r2, #1
    ef76:	9210      	str	r2, [sp, #64]	; 0x40
    ef78:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ef7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ef7c:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    ef80:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
    ef84:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ef86:	6063      	str	r3, [r4, #4]
    ef88:	6022      	str	r2, [r4, #0]
    ef8a:	f8c4 e00c 	str.w	lr, [r4, #12]
    ef8e:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
    ef92:	e7ff      	b.n	ef94 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x102>
    }
    ef94:	b018      	add	sp, #96	; 0x60
    ef96:	bd10      	pop	{r4, pc}

0000ef98 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E>:
    fn setup(&mut self) {
    ef98:	b580      	push	{r7, lr}
    ef9a:	b088      	sub	sp, #32
    ef9c:	9007      	str	r0, [sp, #28]
    ef9e:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
    efa2:	8241      	strh	r1, [r0, #18]
    efa4:	f241 0148 	movw	r1, #4168	; 0x1048
        self.hw.vram_setsize(DISPS);
    efa8:	4401      	add	r1, r0
    efaa:	f24f 3244 	movw	r2, #62276	; 0xf344
    efae:	f2c0 0201 	movt	r2, #1
    efb2:	6813      	ldr	r3, [r2, #0]
    efb4:	6852      	ldr	r2, [r2, #4]
    efb6:	9005      	str	r0, [sp, #20]
    efb8:	4608      	mov	r0, r1
    efba:	4619      	mov	r1, r3
    efbc:	f000 fd6b 	bl	fa96 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE>
    efc0:	e7ff      	b.n	efc2 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x2a>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
    efc2:	9805      	ldr	r0, [sp, #20]
    efc4:	f100 0147 	add.w	r1, r0, #71	; 0x47
    efc8:	f247 207c 	movw	r0, #29308	; 0x727c
    efcc:	f2c0 0002 	movt	r0, #2
    efd0:	2250      	movs	r2, #80	; 0x50
    efd2:	9104      	str	r1, [sp, #16]
    efd4:	4611      	mov	r1, r2
    efd6:	f003 fd66 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    efda:	9003      	str	r0, [sp, #12]
    efdc:	e7ff      	b.n	efde <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x46>
    efde:	9803      	ldr	r0, [sp, #12]
    efe0:	9006      	str	r0, [sp, #24]
    efe2:	9a06      	ldr	r2, [sp, #24]
    efe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    efe8:	9804      	ldr	r0, [sp, #16]
    efea:	f7fa f841 	bl	9070 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
    efee:	9002      	str	r0, [sp, #8]
    eff0:	9101      	str	r1, [sp, #4]
    eff2:	e7ff      	b.n	eff4 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x5c>
    eff4:	f247 227c 	movw	r2, #29308	; 0x727c
    eff8:	f2c0 0202 	movt	r2, #2
    effc:	2350      	movs	r3, #80	; 0x50
    effe:	9802      	ldr	r0, [sp, #8]
    f000:	9901      	ldr	r1, [sp, #4]
    f002:	f7f9 ff38 	bl	8e76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    f006:	e7ff      	b.n	f008 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x70>
    f008:	f241 0047 	movw	r0, #4167	; 0x1047
    f00c:	2101      	movs	r1, #1
        self.running = true;
    f00e:	9a05      	ldr	r2, [sp, #20]
    f010:	5411      	strb	r1, [r2, r0]
    }
    f012:	b008      	add	sp, #32
    f014:	bd80      	pop	{r7, pc}

0000f016 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE>:
    fn waitkey(&mut self) -> u8 {
    f016:	b580      	push	{r7, lr}
    f018:	b08c      	sub	sp, #48	; 0x30
    f01a:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
    f01c:	9005      	str	r0, [sp, #20]
    f01e:	e7ff      	b.n	f020 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xa>
    f020:	f241 0047 	movw	r0, #4167	; 0x1047
    f024:	9905      	ldr	r1, [sp, #20]
    f026:	5c08      	ldrb	r0, [r1, r0]
    f028:	07c0      	lsls	r0, r0, #31
    f02a:	2800      	cmp	r0, #0
    f02c:	d104      	bne.n	f038 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x22>
    f02e:	e7ff      	b.n	f030 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x1a>
    f030:	2020      	movs	r0, #32
        return b' ';
    f032:	f88d 001b 	strb.w	r0, [sp, #27]
    f036:	e04a      	b.n	f0ce <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xb8>
            self.sched();
    f038:	9805      	ldr	r0, [sp, #20]
    f03a:	f7ff ff2a 	bl	ee92 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E>
    f03e:	e7ff      	b.n	f040 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x2a>
    f040:	2000      	movs	r0, #0
            for i in 0..0xf {
    f042:	f88d 001c 	strb.w	r0, [sp, #28]
    f046:	200f      	movs	r0, #15
    f048:	f88d 001d 	strb.w	r0, [sp, #29]
    f04c:	f89d 001c 	ldrb.w	r0, [sp, #28]
    f050:	f89d 101d 	ldrb.w	r1, [sp, #29]
    f054:	f000 f8e2 	bl	f21c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6e7fb991422ea45dE>
    f058:	9004      	str	r0, [sp, #16]
    f05a:	9103      	str	r1, [sp, #12]
    f05c:	e7ff      	b.n	f05e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x48>
    f05e:	9804      	ldr	r0, [sp, #16]
    f060:	f88d 0020 	strb.w	r0, [sp, #32]
    f064:	9903      	ldr	r1, [sp, #12]
    f066:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    f06a:	e7ff      	b.n	f06c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x56>
    f06c:	a808      	add	r0, sp, #32
    f06e:	f000 f864 	bl	f13a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E>
    f072:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
    f076:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    f07a:	e7ff      	b.n	f07c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x66>
    f07c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    f080:	07c1      	lsls	r1, r0, #31
    f082:	2900      	cmp	r1, #0
    f084:	d001      	beq.n	f08a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x74>
    f086:	e7ff      	b.n	f088 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x72>
    f088:	e001      	b.n	f08e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x78>
        while self.running {
    f08a:	e7c9      	b.n	f020 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xa>
            for i in 0..0xf {
    f08c:	defe      	udf	#254	; 0xfe
    f08e:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    f092:	4601      	mov	r1, r0
    f094:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    f098:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    f09c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    f0a0:	f241 0248 	movw	r2, #4168	; 0x1048
                if self.hw.key(i) {
    f0a4:	9b05      	ldr	r3, [sp, #20]
    f0a6:	441a      	add	r2, r3
    f0a8:	9002      	str	r0, [sp, #8]
    f0aa:	4610      	mov	r0, r2
    f0ac:	9a02      	ldr	r2, [sp, #8]
    f0ae:	9101      	str	r1, [sp, #4]
    f0b0:	4611      	mov	r1, r2
    f0b2:	f000 fb5f 	bl	f774 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>
    f0b6:	9000      	str	r0, [sp, #0]
    f0b8:	e7ff      	b.n	f0ba <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xa4>
    f0ba:	9800      	ldr	r0, [sp, #0]
    f0bc:	07c1      	lsls	r1, r0, #31
    f0be:	2900      	cmp	r1, #0
    f0c0:	d101      	bne.n	f0c6 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xb0>
    f0c2:	e7ff      	b.n	f0c4 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xae>
            for i in 0..0xf {
    f0c4:	e7d2      	b.n	f06c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x56>
                    return i;
    f0c6:	9801      	ldr	r0, [sp, #4]
    f0c8:	f88d 001b 	strb.w	r0, [sp, #27]
    f0cc:	e7ff      	b.n	f0ce <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xb8>
    }
    f0ce:	f89d 001b 	ldrb.w	r0, [sp, #27]
    f0d2:	b00c      	add	sp, #48	; 0x30
    f0d4:	bd80      	pop	{r7, pc}

0000f0d6 <_ZN8libchip814Chip8$LT$T$GT$8shutdown17hb4ffb829681b047bE>:
    fn shutdown(&mut self) {
    f0d6:	b081      	sub	sp, #4
    f0d8:	9000      	str	r0, [sp, #0]
    f0da:	f241 0147 	movw	r1, #4167	; 0x1047
    f0de:	2200      	movs	r2, #0
        self.running = false;
    f0e0:	5442      	strb	r2, [r0, r1]
    }
    f0e2:	b001      	add	sp, #4
    f0e4:	4770      	bx	lr

0000f0e6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E>:
    f0e6:	b08a      	sub	sp, #40	; 0x28
    f0e8:	9107      	str	r1, [sp, #28]
    f0ea:	9208      	str	r2, [sp, #32]
    f0ec:	f8d0 c000 	ldr.w	ip, [r0]
    f0f0:	f1bc 0f00 	cmp.w	ip, #0
    f0f4:	9305      	str	r3, [sp, #20]
    f0f6:	9204      	str	r2, [sp, #16]
    f0f8:	9103      	str	r1, [sp, #12]
    f0fa:	9002      	str	r0, [sp, #8]
    f0fc:	d011      	beq.n	f122 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x3c>
    f0fe:	e7ff      	b.n	f100 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x1a>
    f100:	9802      	ldr	r0, [sp, #8]
    f102:	6841      	ldr	r1, [r0, #4]
    f104:	9106      	str	r1, [sp, #24]
    f106:	4669      	mov	r1, sp
    f108:	9a05      	ldr	r2, [sp, #20]
    f10a:	600a      	str	r2, [r1, #0]
    f10c:	f240 138c 	movw	r3, #396	; 0x18c
    f110:	f2c0 0302 	movt	r3, #2
    f114:	aa06      	add	r2, sp, #24
    f116:	9803      	ldr	r0, [sp, #12]
    f118:	9904      	ldr	r1, [sp, #16]
    f11a:	f009 f9db 	bl	184d4 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    f11e:	defe      	udf	#254	; 0xfe
    f120:	defe      	udf	#254	; 0xfe
    f122:	9802      	ldr	r0, [sp, #8]
    f124:	6841      	ldr	r1, [r0, #4]
    f126:	9109      	str	r1, [sp, #36]	; 0x24
    f128:	6802      	ldr	r2, [r0, #0]
    f12a:	2a00      	cmp	r2, #0
    f12c:	9101      	str	r1, [sp, #4]
    f12e:	d103      	bne.n	f138 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x52>
    f130:	e7ff      	b.n	f132 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x4c>
    f132:	9801      	ldr	r0, [sp, #4]
    f134:	b00a      	add	sp, #40	; 0x28
    f136:	4770      	bx	lr
    f138:	e7fb      	b.n	f132 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x4c>

0000f13a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E>:
    f13a:	b580      	push	{r7, lr}
    f13c:	b086      	sub	sp, #24
    f13e:	9005      	str	r0, [sp, #20]
    f140:	2100      	movs	r1, #0
    f142:	f88d 1013 	strb.w	r1, [sp, #19]
    f146:	1c41      	adds	r1, r0, #1
    f148:	9002      	str	r0, [sp, #8]
    f14a:	f002 ffed 	bl	12128 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h0340384168a45934E>
    f14e:	9001      	str	r0, [sp, #4]
    f150:	e7ff      	b.n	f152 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x18>
    f152:	9801      	ldr	r0, [sp, #4]
    f154:	07c1      	lsls	r1, r0, #31
    f156:	2900      	cmp	r1, #0
    f158:	d104      	bne.n	f164 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x2a>
    f15a:	e7ff      	b.n	f15c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x22>
    f15c:	2000      	movs	r0, #0
    f15e:	f88d 000c 	strb.w	r0, [sp, #12]
    f162:	e02c      	b.n	f1be <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x84>
    f164:	2001      	movs	r0, #1
    f166:	f88d 0013 	strb.w	r0, [sp, #19]
    f16a:	9902      	ldr	r1, [sp, #8]
    f16c:	9000      	str	r0, [sp, #0]
    f16e:	4608      	mov	r0, r1
    f170:	9900      	ldr	r1, [sp, #0]
    f172:	f000 f973 	bl	f45c <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E>
    f176:	f88d 1011 	strb.w	r1, [sp, #17]
    f17a:	f88d 0010 	strb.w	r0, [sp, #16]
    f17e:	e7ff      	b.n	f180 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x46>
    f180:	f89d 0010 	ldrb.w	r0, [sp, #16]
    f184:	07c0      	lsls	r0, r0, #31
    f186:	2800      	cmp	r0, #0
    f188:	d104      	bne.n	f194 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x5a>
    f18a:	e7ff      	b.n	f18c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x52>
    f18c:	2000      	movs	r0, #0
    f18e:	f88d 000c 	strb.w	r0, [sp, #12]
    f192:	e029      	b.n	f1e8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xae>
    f194:	2000      	movs	r0, #0
    f196:	f88d 0013 	strb.w	r0, [sp, #19]
    f19a:	f89d 0011 	ldrb.w	r0, [sp, #17]
    f19e:	f88d 0012 	strb.w	r0, [sp, #18]
    f1a2:	f10d 0012 	add.w	r0, sp, #18
    f1a6:	9902      	ldr	r1, [sp, #8]
    f1a8:	f002 fe93 	bl	11ed2 <_ZN4core3mem4swap17h21afb25e2d195463E>
    f1ac:	e7ff      	b.n	f1ae <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x74>
    f1ae:	f89d 0012 	ldrb.w	r0, [sp, #18]
    f1b2:	f88d 000d 	strb.w	r0, [sp, #13]
    f1b6:	2001      	movs	r0, #1
    f1b8:	f88d 000c 	strb.w	r0, [sp, #12]
    f1bc:	e014      	b.n	f1e8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xae>
    f1be:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f1c2:	f89d 100d 	ldrb.w	r1, [sp, #13]
    f1c6:	b006      	add	sp, #24
    f1c8:	bd80      	pop	{r7, pc}
    f1ca:	2000      	movs	r0, #0
    f1cc:	f88d 0013 	strb.w	r0, [sp, #19]
    f1d0:	e7f5      	b.n	f1be <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x84>
    f1d2:	f89d 0013 	ldrb.w	r0, [sp, #19]
    f1d6:	07c0      	lsls	r0, r0, #31
    f1d8:	2800      	cmp	r0, #0
    f1da:	d0f6      	beq.n	f1ca <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x90>
    f1dc:	e7ff      	b.n	f1de <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xa4>
    f1de:	2000      	movs	r0, #0
    f1e0:	f88d 0013 	strb.w	r0, [sp, #19]
    f1e4:	e7f1      	b.n	f1ca <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x90>
    f1e6:	e7f0      	b.n	f1ca <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x90>
    f1e8:	f89d 0010 	ldrb.w	r0, [sp, #16]
    f1ec:	07c0      	lsls	r0, r0, #31
    f1ee:	2800      	cmp	r0, #0
    f1f0:	d1ef      	bne.n	f1d2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x98>
    f1f2:	e7f8      	b.n	f1e6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xac>

0000f1f4 <_ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E>:
    f1f4:	b580      	push	{r7, lr}
    f1f6:	b084      	sub	sp, #16
    f1f8:	9101      	str	r1, [sp, #4]
    f1fa:	9202      	str	r2, [sp, #8]
    f1fc:	9303      	str	r3, [sp, #12]
    f1fe:	f000 f96a 	bl	f4d6 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h116a6636383259eeE>
    f202:	e7ff      	b.n	f204 <_ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E+0x10>
    f204:	b004      	add	sp, #16
    f206:	bd80      	pop	{r7, pc}

0000f208 <_ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E>:
    f208:	b580      	push	{r7, lr}
    f20a:	b084      	sub	sp, #16
    f20c:	9101      	str	r1, [sp, #4]
    f20e:	9202      	str	r2, [sp, #8]
    f210:	9303      	str	r3, [sp, #12]
    f212:	f000 f969 	bl	f4e8 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1647783578bb3807E>
    f216:	e7ff      	b.n	f218 <_ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E+0x10>
    f218:	b004      	add	sp, #16
    f21a:	bd80      	pop	{r7, pc}

0000f21c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6e7fb991422ea45dE>:
    f21c:	b081      	sub	sp, #4
    f21e:	460a      	mov	r2, r1
    f220:	4603      	mov	r3, r0
    f222:	f88d 0000 	strb.w	r0, [sp]
    f226:	f88d 1001 	strb.w	r1, [sp, #1]
    f22a:	b001      	add	sp, #4
    f22c:	4770      	bx	lr

0000f22e <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E>:
    f22e:	b580      	push	{r7, lr}
    f230:	b086      	sub	sp, #24
    f232:	460a      	mov	r2, r1
    f234:	4603      	mov	r3, r0
    f236:	f88d 0014 	strb.w	r0, [sp, #20]
    f23a:	f88d 1015 	strb.w	r1, [sp, #21]
    f23e:	9203      	str	r2, [sp, #12]
    f240:	9302      	str	r3, [sp, #8]
    f242:	f000 f865 	bl	f310 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E>
    f246:	9001      	str	r0, [sp, #4]
    f248:	9100      	str	r1, [sp, #0]
    f24a:	e7ff      	b.n	f24c <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x1e>
    f24c:	9801      	ldr	r0, [sp, #4]
    f24e:	f88d 0016 	strb.w	r0, [sp, #22]
    f252:	9900      	ldr	r1, [sp, #0]
    f254:	f001 0201 	and.w	r2, r1, #1
    f258:	f88d 2017 	strb.w	r2, [sp, #23]
    f25c:	2a00      	cmp	r2, #0
    f25e:	d107      	bne.n	f270 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x42>
    f260:	e7ff      	b.n	f262 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x34>
    f262:	9801      	ldr	r0, [sp, #4]
    f264:	f88d 0011 	strb.w	r0, [sp, #17]
    f268:	2101      	movs	r1, #1
    f26a:	f88d 1010 	strb.w	r1, [sp, #16]
    f26e:	e003      	b.n	f278 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x4a>
    f270:	2000      	movs	r0, #0
    f272:	f88d 0010 	strb.w	r0, [sp, #16]
    f276:	e7ff      	b.n	f278 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x4a>
    f278:	f89d 0010 	ldrb.w	r0, [sp, #16]
    f27c:	f89d 1011 	ldrb.w	r1, [sp, #17]
    f280:	b006      	add	sp, #24
    f282:	bd80      	pop	{r7, pc}

0000f284 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE>:
    f284:	b082      	sub	sp, #8
    f286:	460a      	mov	r2, r1
    f288:	4603      	mov	r3, r0
    f28a:	f88d 0005 	strb.w	r0, [sp, #5]
    f28e:	f88d 1006 	strb.w	r1, [sp, #6]
    f292:	4408      	add	r0, r1
    f294:	f88d 0007 	strb.w	r0, [sp, #7]
    f298:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f29c:	9000      	str	r0, [sp, #0]
    f29e:	e7ff      	b.n	f2a0 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE+0x1c>
    f2a0:	9800      	ldr	r0, [sp, #0]
    f2a2:	b002      	add	sp, #8
    f2a4:	4770      	bx	lr

0000f2a6 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E>:
    f2a6:	b084      	sub	sp, #16
    f2a8:	4602      	mov	r2, r0
    f2aa:	f88d 0007 	strb.w	r0, [sp, #7]
    f2ae:	9102      	str	r1, [sp, #8]
    f2b0:	f001 0107 	and.w	r1, r1, #7
    f2b4:	4088      	lsls	r0, r1
    f2b6:	f88d 000f 	strb.w	r0, [sp, #15]
    f2ba:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f2be:	9000      	str	r0, [sp, #0]
    f2c0:	e7ff      	b.n	f2c2 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E+0x1c>
    f2c2:	9800      	ldr	r0, [sp, #0]
    f2c4:	b004      	add	sp, #16
    f2c6:	4770      	bx	lr

0000f2c8 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE>:
    f2c8:	b084      	sub	sp, #16
    f2ca:	b2c2      	uxtb	r2, r0
    f2cc:	4603      	mov	r3, r0
    f2ce:	f88d 0007 	strb.w	r0, [sp, #7]
    f2d2:	9102      	str	r1, [sp, #8]
    f2d4:	f001 0007 	and.w	r0, r1, #7
    f2d8:	fa22 f000 	lsr.w	r0, r2, r0
    f2dc:	f88d 000f 	strb.w	r0, [sp, #15]
    f2e0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f2e4:	9000      	str	r0, [sp, #0]
    f2e6:	e7ff      	b.n	f2e8 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE+0x20>
    f2e8:	9800      	ldr	r0, [sp, #0]
    f2ea:	b004      	add	sp, #16
    f2ec:	4770      	bx	lr

0000f2ee <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE>:
    f2ee:	b082      	sub	sp, #8
    f2f0:	460a      	mov	r2, r1
    f2f2:	4603      	mov	r3, r0
    f2f4:	f88d 0005 	strb.w	r0, [sp, #5]
    f2f8:	f88d 1006 	strb.w	r1, [sp, #6]
    f2fc:	1a40      	subs	r0, r0, r1
    f2fe:	f88d 0007 	strb.w	r0, [sp, #7]
    f302:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f306:	9000      	str	r0, [sp, #0]
    f308:	e7ff      	b.n	f30a <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE+0x1c>
    f30a:	9800      	ldr	r0, [sp, #0]
    f30c:	b002      	add	sp, #8
    f30e:	4770      	bx	lr

0000f310 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E>:
    f310:	b084      	sub	sp, #16
    f312:	b2c2      	uxtb	r2, r0
    f314:	460b      	mov	r3, r1
    f316:	4684      	mov	ip, r0
    f318:	f88d 000a 	strb.w	r0, [sp, #10]
    f31c:	f88d 100b 	strb.w	r1, [sp, #11]
    f320:	fa52 f081 	uxtab	r0, r2, r1
    f324:	b2c1      	uxtb	r1, r0
    f326:	1a09      	subs	r1, r1, r0
    f328:	bf18      	it	ne
    f32a:	2101      	movne	r1, #1
    f32c:	f88d 000c 	strb.w	r0, [sp, #12]
    f330:	f88d 100d 	strb.w	r1, [sp, #13]
    f334:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f338:	f89d 100d 	ldrb.w	r1, [sp, #13]
    f33c:	9001      	str	r0, [sp, #4]
    f33e:	9100      	str	r1, [sp, #0]
    f340:	e7ff      	b.n	f342 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E+0x32>
    f342:	9801      	ldr	r0, [sp, #4]
    f344:	f88d 000e 	strb.w	r0, [sp, #14]
    f348:	9900      	ldr	r1, [sp, #0]
    f34a:	f001 0201 	and.w	r2, r1, #1
    f34e:	f88d 200f 	strb.w	r2, [sp, #15]
    f352:	f88d 0008 	strb.w	r0, [sp, #8]
    f356:	f88d 2009 	strb.w	r2, [sp, #9]
    f35a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f35e:	f89d 1009 	ldrb.w	r1, [sp, #9]
    f362:	b004      	add	sp, #16
    f364:	4770      	bx	lr

0000f366 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE>:
    f366:	b580      	push	{r7, lr}
    f368:	b084      	sub	sp, #16
    f36a:	b2ca      	uxtb	r2, r1
    f36c:	b2c3      	uxtb	r3, r0
    f36e:	468c      	mov	ip, r1
    f370:	4686      	mov	lr, r0
    f372:	f88d 000a 	strb.w	r0, [sp, #10]
    f376:	f88d 100b 	strb.w	r1, [sp, #11]
    f37a:	1a98      	subs	r0, r3, r2
    f37c:	b2c1      	uxtb	r1, r0
    f37e:	1a09      	subs	r1, r1, r0
    f380:	bf18      	it	ne
    f382:	2101      	movne	r1, #1
    f384:	f88d 000c 	strb.w	r0, [sp, #12]
    f388:	f88d 100d 	strb.w	r1, [sp, #13]
    f38c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f390:	f89d 100d 	ldrb.w	r1, [sp, #13]
    f394:	9001      	str	r0, [sp, #4]
    f396:	9100      	str	r1, [sp, #0]
    f398:	e7ff      	b.n	f39a <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE+0x34>
    f39a:	9801      	ldr	r0, [sp, #4]
    f39c:	f88d 000e 	strb.w	r0, [sp, #14]
    f3a0:	9900      	ldr	r1, [sp, #0]
    f3a2:	f001 0201 	and.w	r2, r1, #1
    f3a6:	f88d 200f 	strb.w	r2, [sp, #15]
    f3aa:	f88d 0008 	strb.w	r0, [sp, #8]
    f3ae:	f88d 2009 	strb.w	r2, [sp, #9]
    f3b2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f3b6:	f89d 1009 	ldrb.w	r1, [sp, #9]
    f3ba:	b004      	add	sp, #16
    f3bc:	bd80      	pop	{r7, pc}

0000f3be <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>:
    f3be:	b083      	sub	sp, #12
    f3c0:	460a      	mov	r2, r1
    f3c2:	4603      	mov	r3, r0
    f3c4:	f8ad 0006 	strh.w	r0, [sp, #6]
    f3c8:	f8ad 1008 	strh.w	r1, [sp, #8]
    f3cc:	4408      	add	r0, r1
    f3ce:	f8ad 000a 	strh.w	r0, [sp, #10]
    f3d2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    f3d6:	9000      	str	r0, [sp, #0]
    f3d8:	e7ff      	b.n	f3da <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E+0x1c>
    f3da:	9800      	ldr	r0, [sp, #0]
    f3dc:	b003      	add	sp, #12
    f3de:	4770      	bx	lr

0000f3e0 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>:
    f3e0:	b083      	sub	sp, #12
    f3e2:	460a      	mov	r2, r1
    f3e4:	4603      	mov	r3, r0
    f3e6:	f8ad 0006 	strh.w	r0, [sp, #6]
    f3ea:	f8ad 1008 	strh.w	r1, [sp, #8]
    f3ee:	1a40      	subs	r0, r0, r1
    f3f0:	f8ad 000a 	strh.w	r0, [sp, #10]
    f3f4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    f3f8:	9000      	str	r0, [sp, #0]
    f3fa:	e7ff      	b.n	f3fc <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E+0x1c>
    f3fc:	9800      	ldr	r0, [sp, #0]
    f3fe:	b003      	add	sp, #12
    f400:	4770      	bx	lr

0000f402 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E>:
    f402:	b5b0      	push	{r4, r5, r7, lr}
    f404:	b088      	sub	sp, #32
    f406:	469c      	mov	ip, r3
    f408:	4696      	mov	lr, r2
    f40a:	460c      	mov	r4, r1
    f40c:	4605      	mov	r5, r0
    f40e:	9103      	str	r1, [sp, #12]
    f410:	9002      	str	r0, [sp, #8]
    f412:	9305      	str	r3, [sp, #20]
    f414:	9204      	str	r2, [sp, #16]
    f416:	1a80      	subs	r0, r0, r2
    f418:	eb61 0103 	sbc.w	r1, r1, r3
    f41c:	9107      	str	r1, [sp, #28]
    f41e:	9006      	str	r0, [sp, #24]
    f420:	9806      	ldr	r0, [sp, #24]
    f422:	9907      	ldr	r1, [sp, #28]
    f424:	9001      	str	r0, [sp, #4]
    f426:	9100      	str	r1, [sp, #0]
    f428:	e7ff      	b.n	f42a <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E+0x28>
    f42a:	9801      	ldr	r0, [sp, #4]
    f42c:	9900      	ldr	r1, [sp, #0]
    f42e:	b008      	add	sp, #32
    f430:	bdb0      	pop	{r4, r5, r7, pc}

0000f432 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E>:
    f432:	b580      	push	{r7, lr}
    f434:	b088      	sub	sp, #32
    f436:	9004      	str	r0, [sp, #16]
    f438:	9105      	str	r1, [sp, #20]
    f43a:	9206      	str	r2, [sp, #24]
    f43c:	9307      	str	r3, [sp, #28]
    f43e:	9003      	str	r0, [sp, #12]
    f440:	4610      	mov	r0, r2
    f442:	9102      	str	r1, [sp, #8]
    f444:	4619      	mov	r1, r3
    f446:	9a03      	ldr	r2, [sp, #12]
    f448:	9b02      	ldr	r3, [sp, #8]
    f44a:	f7f9 fc57 	bl	8cfc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    f44e:	9001      	str	r0, [sp, #4]
    f450:	9100      	str	r1, [sp, #0]
    f452:	e7ff      	b.n	f454 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E+0x22>
    f454:	9801      	ldr	r0, [sp, #4]
    f456:	9900      	ldr	r1, [sp, #0]
    f458:	b008      	add	sp, #32
    f45a:	bd80      	pop	{r7, pc}

0000f45c <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E>:
    f45c:	b580      	push	{r7, lr}
    f45e:	b088      	sub	sp, #32
    f460:	9005      	str	r0, [sp, #20]
    f462:	9106      	str	r1, [sp, #24]
    f464:	9002      	str	r0, [sp, #8]
    f466:	4608      	mov	r0, r1
    f468:	f008 f9d4 	bl	17814 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE>
    f46c:	f88d 1011 	strb.w	r1, [sp, #17]
    f470:	f88d 0010 	strb.w	r0, [sp, #16]
    f474:	e7ff      	b.n	f476 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x1a>
    f476:	f89d 0010 	ldrb.w	r0, [sp, #16]
    f47a:	07c1      	lsls	r1, r0, #31
    f47c:	2900      	cmp	r1, #0
    f47e:	d005      	beq.n	f48c <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x30>
    f480:	e7ff      	b.n	f482 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x26>
    f482:	2000      	movs	r0, #0
    f484:	f88d 000c 	strb.w	r0, [sp, #12]
    f488:	e011      	b.n	f4ae <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x52>
    f48a:	defe      	udf	#254	; 0xfe
    f48c:	f89d 0011 	ldrb.w	r0, [sp, #17]
    f490:	f88d 001f 	strb.w	r0, [sp, #31]
    f494:	9902      	ldr	r1, [sp, #8]
    f496:	780a      	ldrb	r2, [r1, #0]
    f498:	9001      	str	r0, [sp, #4]
    f49a:	4610      	mov	r0, r2
    f49c:	9901      	ldr	r1, [sp, #4]
    f49e:	f7ff fec6 	bl	f22e <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E>
    f4a2:	f88d 100d 	strb.w	r1, [sp, #13]
    f4a6:	f88d 000c 	strb.w	r0, [sp, #12]
    f4aa:	e7ff      	b.n	f4ac <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x50>
    f4ac:	e7ff      	b.n	f4ae <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x52>
    f4ae:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f4b2:	f89d 100d 	ldrb.w	r1, [sp, #13]
    f4b6:	b008      	add	sp, #32
    f4b8:	bd80      	pop	{r7, pc}

0000f4ba <_ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E>:
    f4ba:	b580      	push	{r7, lr}
    f4bc:	b084      	sub	sp, #16
    f4be:	680a      	ldr	r2, [r1, #0]
    f4c0:	684b      	ldr	r3, [r1, #4]
    f4c2:	6889      	ldr	r1, [r1, #8]
    f4c4:	9103      	str	r1, [sp, #12]
    f4c6:	9302      	str	r3, [sp, #8]
    f4c8:	9201      	str	r2, [sp, #4]
    f4ca:	a901      	add	r1, sp, #4
    f4cc:	f002 fdac 	bl	12028 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E>
    f4d0:	e7ff      	b.n	f4d2 <_ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E+0x18>
    f4d2:	b004      	add	sp, #16
    f4d4:	bd80      	pop	{r7, pc}

0000f4d6 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h116a6636383259eeE>:
    f4d6:	b083      	sub	sp, #12
    f4d8:	9100      	str	r1, [sp, #0]
    f4da:	9201      	str	r2, [sp, #4]
    f4dc:	9302      	str	r3, [sp, #8]
    f4de:	6001      	str	r1, [r0, #0]
    f4e0:	6042      	str	r2, [r0, #4]
    f4e2:	6083      	str	r3, [r0, #8]
    f4e4:	b003      	add	sp, #12
    f4e6:	4770      	bx	lr

0000f4e8 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1647783578bb3807E>:
    f4e8:	b083      	sub	sp, #12
    f4ea:	9100      	str	r1, [sp, #0]
    f4ec:	9201      	str	r2, [sp, #4]
    f4ee:	9302      	str	r3, [sp, #8]
    f4f0:	6001      	str	r1, [r0, #0]
    f4f2:	6042      	str	r2, [r0, #4]
    f4f4:	6083      	str	r3, [r0, #8]
    f4f6:	b003      	add	sp, #12
    f4f8:	4770      	bx	lr

0000f4fa <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc3726000bdb855aE>:
    f4fa:	680a      	ldr	r2, [r1, #0]
    f4fc:	684b      	ldr	r3, [r1, #4]
    f4fe:	6889      	ldr	r1, [r1, #8]
    f500:	6081      	str	r1, [r0, #8]
    f502:	6043      	str	r3, [r0, #4]
    f504:	6002      	str	r2, [r0, #0]
    f506:	4770      	bx	lr

0000f508 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E>:
    f508:	b580      	push	{r7, lr}
    f50a:	b086      	sub	sp, #24
    f50c:	9105      	str	r1, [sp, #20]
    f50e:	9004      	str	r0, [sp, #16]
    f510:	4608      	mov	r0, r1
    f512:	9103      	str	r1, [sp, #12]
    f514:	f003 fa63 	bl	129de <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f518:	9002      	str	r0, [sp, #8]
    f51a:	9101      	str	r1, [sp, #4]
    f51c:	e7ff      	b.n	f51e <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E+0x16>
    f51e:	9803      	ldr	r0, [sp, #12]
    f520:	f100 0308 	add.w	r3, r0, #8
    f524:	9804      	ldr	r0, [sp, #16]
    f526:	9902      	ldr	r1, [sp, #8]
    f528:	9a01      	ldr	r2, [sp, #4]
    f52a:	f7f9 f99f 	bl	886c <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE>
    f52e:	e7ff      	b.n	f530 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E+0x28>
    f530:	b006      	add	sp, #24
    f532:	bd80      	pop	{r7, pc}

0000f534 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE>:
    f534:	b580      	push	{r7, lr}
    f536:	b086      	sub	sp, #24
    f538:	9105      	str	r1, [sp, #20]
    f53a:	9004      	str	r0, [sp, #16]
    f53c:	4608      	mov	r0, r1
    f53e:	9103      	str	r1, [sp, #12]
    f540:	f003 fa4d 	bl	129de <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f544:	9002      	str	r0, [sp, #8]
    f546:	9101      	str	r1, [sp, #4]
    f548:	e7ff      	b.n	f54a <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE+0x16>
    f54a:	9803      	ldr	r0, [sp, #12]
    f54c:	f100 0308 	add.w	r3, r0, #8
    f550:	9804      	ldr	r0, [sp, #16]
    f552:	9902      	ldr	r1, [sp, #8]
    f554:	9a01      	ldr	r2, [sp, #4]
    f556:	f7f9 f93c 	bl	87d2 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE>
    f55a:	e7ff      	b.n	f55c <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE+0x28>
    f55c:	b006      	add	sp, #24
    f55e:	bd80      	pop	{r7, pc}

0000f560 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E>:
/// CHIP8 Virtual Pixel size, in Physical Pixels
const PIXEL_WIDTH: usize = 3;
const PIXEL_HEIGHT: usize = 5;

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    f560:	b510      	push	{r4, lr}
    f562:	b0ac      	sub	sp, #176	; 0xb0
    console::print("Rust CHIP8\n"); console::flush();
    f564:	f240 109c 	movw	r0, #412	; 0x19c
    f568:	f2c0 0002 	movt	r0, #2
    f56c:	210b      	movs	r1, #11
    f56e:	f7f9 fdc3 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f572:	e7ff      	b.n	f574 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x14>
    f574:	f7f9 fe06 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f578:	e7ff      	b.n	f57a <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x1a>
    f57a:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    f57c:	900f      	str	r0, [sp, #60]	; 0x3c
    f57e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    f580:	f002 ffb8 	bl	124f4 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    f584:	900e      	str	r0, [sp, #56]	; 0x38
    f586:	910d      	str	r1, [sp, #52]	; 0x34
    f588:	e7ff      	b.n	f58a <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x2a>
    f58a:	20ef      	movs	r0, #239	; 0xef
    f58c:	900c      	str	r0, [sp, #48]	; 0x30
    f58e:	990c      	ldr	r1, [sp, #48]	; 0x30
    f590:	f002 ffb0 	bl	124f4 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    f594:	900b      	str	r0, [sp, #44]	; 0x2c
    f596:	910a      	str	r1, [sp, #40]	; 0x28
    f598:	e7ff      	b.n	f59a <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x3a>
    let background = Rectangle::<Rgb565>
    f59a:	4668      	mov	r0, sp
    f59c:	990a      	ldr	r1, [sp, #40]	; 0x28
    f59e:	6001      	str	r1, [r0, #0]
    f5a0:	a818      	add	r0, sp, #96	; 0x60
    f5a2:	990e      	ldr	r1, [sp, #56]	; 0x38
    f5a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f5a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f5a8:	f007 ffc0 	bl	1752c <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    f5ac:	e7ff      	b.n	f5ae <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x4e>
    f5ae:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    f5b0:	f88d 0080 	strb.w	r0, [sp, #128]	; 0x80
    f5b4:	f88d 0081 	strb.w	r0, [sp, #129]	; 0x81
    f5b8:	f88d 0082 	strb.w	r0, [sp, #130]	; 0x82
    f5bc:	f89d 0082 	ldrb.w	r0, [sp, #130]	; 0x82
    f5c0:	f8bd 1080 	ldrh.w	r1, [sp, #128]	; 0x80
    f5c4:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    f5c8:	f003 f80f 	bl	125ea <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    f5cc:	9009      	str	r0, [sp, #36]	; 0x24
    f5ce:	e7ff      	b.n	f5d0 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x70>
    f5d0:	9809      	ldr	r0, [sp, #36]	; 0x24
    f5d2:	f8ad 007e 	strh.w	r0, [sp, #126]	; 0x7e
    f5d6:	2101      	movs	r1, #1
    f5d8:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
    let background = Rectangle::<Rgb565>
    f5dc:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    f5e0:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
    f5e4:	a811      	add	r0, sp, #68	; 0x44
    f5e6:	a918      	add	r1, sp, #96	; 0x60
    f5e8:	f007 fc36 	bl	16e58 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    f5ec:	e7ff      	b.n	f5ee <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x8e>
    f5ee:	a811      	add	r0, sp, #68	; 0x44
    f5f0:	a921      	add	r1, sp, #132	; 0x84

    //  Render background to display
    druid::draw_to_display(background);
    f5f2:	460a      	mov	r2, r1
    f5f4:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    f5f8:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    f5fc:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    f600:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    f604:	4608      	mov	r0, r1
    f606:	f006 fde1 	bl	161cc <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>
    f60a:	e7ff      	b.n	f60c <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0xac>
    f60c:	2000      	movs	r0, #0
    f60e:	223f      	movs	r2, #63	; 0x3f
    f610:	231f      	movs	r3, #31
    render_region(0, 0, SCREEN_WIDTH as u8 - 1, SCREEN_HEIGHT as u8 - 1);
    f612:	9008      	str	r0, [sp, #32]
    f614:	9908      	ldr	r1, [sp, #32]
    f616:	f000 fb76 	bl	fd06 <_ZN3app5chip813render_region17hc692a4d55cab74f0E>
    f61a:	e7ff      	b.n	f61c <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0xbc>

    //  Start the emulator in a background task
    os::task_init(                  //  Create a new task and start it...
        unsafe { &mut CHIP8_TASK }, //  Task object will be saved here
        &init_strn!( "chip8" ),     //  Name of task
    f61c:	f240 10bc 	movw	r0, #444	; 0x1bc
    f620:	f2c0 0002 	movt	r0, #2
    f624:	6801      	ldr	r1, [r0, #0]
        Some( task_func ),    //  Function to execute when task starts
    f626:	f24f 60a7 	movw	r0, #63143	; 0xf6a7
    f62a:	f2c0 0000 	movt	r0, #0
    f62e:	9029      	str	r0, [sp, #164]	; 0xa4
    os::task_init(                  //  Create a new task and start it...
    f630:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    f632:	4668      	mov	r0, sp
    f634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    f638:	6103      	str	r3, [r0, #16]
    f63a:	60c3      	str	r3, [r0, #12]
    f63c:	f240 13b4 	movw	r3, #436	; 0x1b4
    f640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f644:	6083      	str	r3, [r0, #8]
    f646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f64a:	6043      	str	r3, [r0, #4]
    f64c:	2314      	movs	r3, #20
    f64e:	6003      	str	r3, [r0, #0]
    f650:	f240 1064 	movw	r0, #356	; 0x164
    f654:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f658:	2300      	movs	r3, #0
    f65a:	f7f9 fb9d 	bl	8d98 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
    f65e:	9007      	str	r0, [sp, #28]
    f660:	e7ff      	b.n	f662 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x102>
    f662:	9807      	ldr	r0, [sp, #28]
    f664:	f7f9 fb0c 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    f668:	9028      	str	r0, [sp, #160]	; 0xa0
    f66a:	e7ff      	b.n	f66c <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x10c>
        NULL,  //  Argument to be passed to above function
        20,    //  Task priority: highest is 0, lowest is 255 (main task is 127), SPI is 10
        os::OS_WAIT_FOREVER as u32,       //  Don't do sanity / watchdog checking
        unsafe { &mut CHIP8_TASK_STACK }, //  Stack space for the task
        CHIP8_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                                 //  `?` means check for error
    f66c:	9828      	ldr	r0, [sp, #160]	; 0xa0
    f66e:	1e41      	subs	r1, r0, #1
    f670:	bf18      	it	ne
    f672:	2101      	movne	r1, #1
    f674:	2801      	cmp	r0, #1
    f676:	d001      	beq.n	f67c <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x11c>
    f678:	e7ff      	b.n	f67a <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x11a>
    f67a:	e005      	b.n	f688 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x128>
    f67c:	2000      	movs	r0, #0

    //  Return success to the caller
    Ok(())
    f67e:	9010      	str	r0, [sp, #64]	; 0x40
    f680:	2001      	movs	r0, #1
    f682:	9010      	str	r0, [sp, #64]	; 0x40
}
    f684:	e006      	b.n	f694 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x134>
    os::task_init(                  //  Create a new task and start it...
    f686:	defe      	udf	#254	; 0xfe
    ) ? ;                                 //  `?` means check for error
    f688:	9828      	ldr	r0, [sp, #160]	; 0xa0
    f68a:	902b      	str	r0, [sp, #172]	; 0xac
    f68c:	f003 feaa 	bl	133e4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    f690:	9006      	str	r0, [sp, #24]
    f692:	e002      	b.n	f69a <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x13a>
}
    f694:	9810      	ldr	r0, [sp, #64]	; 0x40
    f696:	b02c      	add	sp, #176	; 0xb0
    f698:	bd10      	pop	{r4, pc}
    ) ? ;                                 //  `?` means check for error
    f69a:	9806      	ldr	r0, [sp, #24]
    f69c:	f7f9 fae4 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    f6a0:	9010      	str	r0, [sp, #64]	; 0x40
    f6a2:	e7ff      	b.n	f6a4 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x144>
    f6a4:	e7f6      	b.n	f694 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x134>

0000f6a6 <_ZN3app5chip89task_func17h20d1a4715d78a45aE>:

/// Size of the stack (in 4-byte units). Previously `OS_STACK_ALIGN(256)`  
const CHIP8_TASK_STACK_SIZE: usize = 4096;  //  Must be 4096 and above because CHIP8 Emulator requires substantial stack space

///  Run the emulator
extern "C" fn task_func(_arg: Ptr) {    
    f6a6:	b580      	push	{r7, lr}
    f6a8:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
    f6ac:	b082      	sub	sp, #8
    f6ae:	f50d 5103 	add.w	r1, sp, #8384	; 0x20c0
    f6b2:	6008      	str	r0, [r1, #0]
    f6b4:	a804      	add	r0, sp, #16
    //  Create the hardware API for rendering the emulator
    let hardware = Hardware::new();
    f6b6:	9103      	str	r1, [sp, #12]
    f6b8:	f000 f84f 	bl	f75a <_ZN3app5chip88Hardware3new17h53332fc09faf36beE>
    f6bc:	e7ff      	b.n	f6be <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x18>

    //  Create the emulator
    let chip8 = libchip8::Chip8::new(hardware);
    f6be:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    f6c2:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    f6c6:	f8ae 006c 	strh.w	r0, [lr, #108]	; 0x6c
    f6ca:	9804      	ldr	r0, [sp, #16]
    f6cc:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    f6d0:	f8ce 0068 	str.w	r0, [lr, #104]	; 0x68
    f6d4:	a806      	add	r0, sp, #24
    f6d6:	f10d 0e08 	add.w	lr, sp, #8
    f6da:	f50e 5183 	add.w	r1, lr, #4192	; 0x1060
    f6de:	f7fb fc6f 	bl	afc0 <_ZN8libchip814Chip8$LT$T$GT$3new17hca880a1e3fbd9a67E>
    f6e2:	e7ff      	b.n	f6e4 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x3e>
    console::print("CHIP8 started\n"); console::flush();
    f6e4:	f240 10c0 	movw	r0, #448	; 0x1c0
    f6e8:	f2c0 0002 	movt	r0, #2
    f6ec:	210e      	movs	r1, #14
    f6ee:	f7f9 fd03 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f6f2:	e7ff      	b.n	f6f4 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x4e>
    f6f4:	f7f9 fd46 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f6f8:	e7ff      	b.n	f6fa <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x54>

    //  Load the emulator ROM
    //  let rom = include_bytes!("../roms/invaders.ch8");
    //  let rom = include_bytes!("../roms/blinky.ch8");
    let rom = include_bytes!("../roms/pong.ch8");
    f6fa:	f240 10ce 	movw	r0, #462	; 0x1ce
    f6fe:	f2c0 0002 	movt	r0, #2
    f702:	9903      	ldr	r1, [sp, #12]
    f704:	6048      	str	r0, [r1, #4]
    f706:	f10d 0e10 	add.w	lr, sp, #16
    f70a:	f50e 5283 	add.w	r2, lr, #4192	; 0x1060
    f70e:	a906      	add	r1, sp, #24
    f710:	f241 0350 	movw	r3, #4176	; 0x1050

    //  Run the emulator ROM. This will block until emulator terminates
    chip8.run(rom);
    f714:	9002      	str	r0, [sp, #8]
    f716:	4610      	mov	r0, r2
    f718:	9201      	str	r2, [sp, #4]
    f71a:	461a      	mov	r2, r3
    f71c:	f00f fadc 	bl	1ecd8 <__aeabi_memcpy>
    f720:	22f6      	movs	r2, #246	; 0xf6
    f722:	9801      	ldr	r0, [sp, #4]
    f724:	9902      	ldr	r1, [sp, #8]
    f726:	f7fb fcfa 	bl	b11e <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E>
    f72a:	e7ff      	b.n	f72c <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x86>

    //  Should not come here
    console::print("CHIP8 done\n"); console::flush();
    f72c:	f240 20c4 	movw	r0, #708	; 0x2c4
    f730:	f2c0 0002 	movt	r0, #2
    f734:	210b      	movs	r1, #11
    f736:	f7f9 fcdf 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f73a:	e7ff      	b.n	f73c <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x96>
    f73c:	f7f9 fd22 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f740:	e7ff      	b.n	f742 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x9c>
    assert!(false, "CHIP8 should not end");
    f742:	f240 20cf 	movw	r0, #719	; 0x2cf
    f746:	f2c0 0002 	movt	r0, #2
    f74a:	f240 22f8 	movw	r2, #760	; 0x2f8
    f74e:	f2c0 0202 	movt	r2, #2
    f752:	2114      	movs	r1, #20
    f754:	f008 feec 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f758:	defe      	udf	#254	; 0xfe

0000f75a <_ZN3app5chip88Hardware3new17h53332fc09faf36beE>:
    is_checking_input: bool,
}

impl Hardware {
    /// Return a new Hardware API for rendering CHIP8 Emulator
    pub fn new() -> Hardware {
    f75a:	2100      	movs	r1, #0
        Hardware {
    f75c:	7001      	strb	r1, [r0, #0]
    f75e:	7041      	strb	r1, [r0, #1]
    f760:	7081      	strb	r1, [r0, #2]
    f762:	70c1      	strb	r1, [r0, #3]
    f764:	7101      	strb	r1, [r0, #4]
    f766:	7141      	strb	r1, [r0, #5]
            update_right: 0,
            update_bottom: 0,
            is_interactive: false,
            is_checking_input: false,
        }
    }
    f768:	4770      	bx	lr

0000f76a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hd3173c320d2551cfE>:
}

impl libchip8::Hardware for Hardware {
    /// Return a random value.
    fn rand(&mut self) -> u8 {
    f76a:	b081      	sub	sp, #4
    f76c:	9000      	str	r0, [sp, #0]
    f76e:	207b      	movs	r0, #123	; 0x7b
        123  //  TODO
    }
    f770:	b001      	add	sp, #4
    f772:	4770      	bx	lr

0000f774 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>:

    /// Check if the key is pressed.
    fn key(&mut self, _key: u8) -> bool {
    f774:	b580      	push	{r7, lr}
    f776:	b084      	sub	sp, #16
    f778:	460a      	mov	r2, r1
    f77a:	9002      	str	r0, [sp, #8]
    f77c:	f88d 100f 	strb.w	r1, [sp, #15]
        if !self.is_interactive {
    f780:	7901      	ldrb	r1, [r0, #4]
    f782:	07c9      	lsls	r1, r1, #31
    f784:	2900      	cmp	r1, #0
    f786:	9001      	str	r0, [sp, #4]
    f788:	d10f      	bne.n	f7aa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x36>
    f78a:	e7ff      	b.n	f78c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x18>
    f78c:	2001      	movs	r0, #1
            self.is_interactive = true;
    f78e:	9901      	ldr	r1, [sp, #4]
    f790:	7108      	strb	r0, [r1, #4]
            console::print("key\n"); console::flush(); ////
    f792:	f240 3008 	movw	r0, #776	; 0x308
    f796:	f2c0 0002 	movt	r0, #2
    f79a:	2104      	movs	r1, #4
    f79c:	f7f9 fcac 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f7a0:	e7ff      	b.n	f7a2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x2e>
    f7a2:	f7f9 fcef 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f7a6:	e7ff      	b.n	f7a8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x34>
        if !self.is_interactive {
    f7a8:	e7ff      	b.n	f7aa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x36>
    f7aa:	2001      	movs	r0, #1
        }
        self.is_checking_input = true;
    f7ac:	9901      	ldr	r1, [sp, #4]
    f7ae:	7148      	strb	r0, [r1, #5]
    f7b0:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    f7b2:	b004      	add	sp, #16
    f7b4:	bd80      	pop	{r7, pc}

0000f7b6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE>:

    /// Set the state of a pixel in the screen. true for white, and false for black.
    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    f7b6:	b08c      	sub	sp, #48	; 0x30
    f7b8:	469c      	mov	ip, r3
    f7ba:	9007      	str	r0, [sp, #28]
    f7bc:	9108      	str	r1, [sp, #32]
    f7be:	9209      	str	r2, [sp, #36]	; 0x24
    f7c0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        //  console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    f7c4:	293f      	cmp	r1, #63	; 0x3f
    f7c6:	9205      	str	r2, [sp, #20]
    f7c8:	9104      	str	r1, [sp, #16]
    f7ca:	9003      	str	r0, [sp, #12]
    f7cc:	f8cd c008 	str.w	ip, [sp, #8]
    f7d0:	d804      	bhi.n	f7dc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x26>
    f7d2:	e7ff      	b.n	f7d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1e>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f7d4:	9805      	ldr	r0, [sp, #20]
    f7d6:	281f      	cmp	r0, #31
    f7d8:	d814      	bhi.n	f804 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x4e>
    f7da:	e00b      	b.n	f7f4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x3e>
        assert!(x < SCREEN_WIDTH, "x overflow");
    f7dc:	f240 300c 	movw	r0, #780	; 0x30c
    f7e0:	f2c0 0002 	movt	r0, #2
    f7e4:	f240 3218 	movw	r2, #792	; 0x318
    f7e8:	f2c0 0202 	movt	r2, #2
    f7ec:	210a      	movs	r1, #10
    f7ee:	f008 fe9f 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f7f2:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f7f4:	9805      	ldr	r0, [sp, #20]
    f7f6:	0181      	lsls	r1, r0, #6
    f7f8:	0e82      	lsrs	r2, r0, #26
    f7fa:	2a00      	cmp	r2, #0
    f7fc:	9101      	str	r1, [sp, #4]
    f7fe:	f040 80be 	bne.w	f97e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1c8>
    f802:	e00b      	b.n	f81c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x66>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f804:	f240 3028 	movw	r0, #808	; 0x328
    f808:	f2c0 0002 	movt	r0, #2
    f80c:	f240 3234 	movw	r2, #820	; 0x334
    f810:	f2c0 0202 	movt	r2, #2
    f814:	210a      	movs	r1, #10
    f816:	f008 fe8b 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f81a:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f81c:	9804      	ldr	r0, [sp, #16]
    f81e:	9901      	ldr	r1, [sp, #4]
    f820:	1842      	adds	r2, r0, r1
    f822:	4613      	mov	r3, r2
    f824:	4282      	cmp	r2, r0
    f826:	9300      	str	r3, [sp, #0]
    f828:	f0c0 80b5 	bcc.w	f996 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1e0>
    f82c:	e7ff      	b.n	f82e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x78>
    f82e:	9800      	ldr	r0, [sp, #0]
    f830:	900b      	str	r0, [sp, #44]	; 0x2c
        unsafe { SCREEN_BUFFER[i] = 
            if d {
    f832:	9902      	ldr	r1, [sp, #8]
    f834:	07ca      	lsls	r2, r1, #31
    f836:	2a00      	cmp	r2, #0
    f838:	d106      	bne.n	f848 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x92>
    f83a:	e7ff      	b.n	f83c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x86>
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
                else { 200 }                    //  Darker colour for initial screen
            } 
            else { 
                if self.is_interactive { 127 }  //  Fade to black
    f83c:	9803      	ldr	r0, [sp, #12]
    f83e:	7901      	ldrb	r1, [r0, #4]
    f840:	07c9      	lsls	r1, r1, #31
    f842:	2900      	cmp	r1, #0
    f844:	d113      	bne.n	f86e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xb8>
    f846:	e00e      	b.n	f866 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xb0>
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
    f848:	9803      	ldr	r0, [sp, #12]
    f84a:	7901      	ldrb	r1, [r0, #4]
    f84c:	07c9      	lsls	r1, r1, #31
    f84e:	2900      	cmp	r1, #0
    f850:	d104      	bne.n	f85c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xa6>
    f852:	e7ff      	b.n	f854 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x9e>
    f854:	20c8      	movs	r0, #200	; 0xc8
                else { 200 }                    //  Darker colour for initial screen
    f856:	f88d 0018 	strb.w	r0, [sp, #24]
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
    f85a:	e003      	b.n	f864 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xae>
    f85c:	20ff      	movs	r0, #255	; 0xff
    f85e:	f88d 0018 	strb.w	r0, [sp, #24]
    f862:	e7ff      	b.n	f864 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xae>
            if d {
    f864:	e008      	b.n	f878 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc2>
    f866:	2000      	movs	r0, #0
                else { 0 }                      //  Black for initial screen                 
    f868:	f88d 0018 	strb.w	r0, [sp, #24]
                if self.is_interactive { 127 }  //  Fade to black
    f86c:	e003      	b.n	f876 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc0>
    f86e:	207f      	movs	r0, #127	; 0x7f
    f870:	f88d 0018 	strb.w	r0, [sp, #24]
    f874:	e7ff      	b.n	f876 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc0>
            if d {
    f876:	e7ff      	b.n	f878 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc2>
    f878:	2000      	movs	r0, #0
        unsafe { SCREEN_BUFFER[i] = 
    f87a:	9900      	ldr	r1, [sp, #0]
    f87c:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    f880:	f040 8095 	bne.w	f9ae <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1f8>
    f884:	e7ff      	b.n	f886 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xd0>
    f886:	f244 10b4 	movw	r0, #16820	; 0x41b4
    f88a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f88e:	f89d 1018 	ldrb.w	r1, [sp, #24]
    f892:	9a00      	ldr	r2, [sp, #0]
    f894:	5481      	strb	r1, [r0, r2]
            }  
        };

        //  Remember the boundaries of the screen region to be updated
        if self.update_left == 0 && self.update_right == 0 &&
    f896:	9803      	ldr	r0, [sp, #12]
    f898:	7801      	ldrb	r1, [r0, #0]
    f89a:	2900      	cmp	r1, #0
    f89c:	d02e      	beq.n	f8fc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x146>
    f89e:	e029      	b.n	f8f4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x13e>
    f8a0:	2001      	movs	r0, #1
    f8a2:	f88d 0019 	strb.w	r0, [sp, #25]
    f8a6:	e008      	b.n	f8ba <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x104>
    f8a8:	2000      	movs	r0, #0
    f8aa:	f88d 0019 	strb.w	r0, [sp, #25]
    f8ae:	e004      	b.n	f8ba <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x104>
            self.update_top == 0 && self.update_bottom == 0 {
    f8b0:	9803      	ldr	r0, [sp, #12]
    f8b2:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    f8b4:	2900      	cmp	r1, #0
    f8b6:	d0f3      	beq.n	f8a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xea>
    f8b8:	e7f6      	b.n	f8a8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xf2>
    f8ba:	f89d 0019 	ldrb.w	r0, [sp, #25]
    f8be:	07c0      	lsls	r0, r0, #31
    f8c0:	2800      	cmp	r0, #0
    f8c2:	d126      	bne.n	f912 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x15c>
    f8c4:	e02d      	b.n	f922 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x16c>
    f8c6:	2001      	movs	r0, #1
    f8c8:	f88d 001a 	strb.w	r0, [sp, #26]
    f8cc:	e008      	b.n	f8e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x12a>
    f8ce:	2000      	movs	r0, #0
    f8d0:	f88d 001a 	strb.w	r0, [sp, #26]
    f8d4:	e004      	b.n	f8e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x12a>
            self.update_top == 0 && self.update_bottom == 0 {
    f8d6:	9803      	ldr	r0, [sp, #12]
    f8d8:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    f8da:	2900      	cmp	r1, #0
    f8dc:	d0f3      	beq.n	f8c6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x110>
    f8de:	e7f6      	b.n	f8ce <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x118>
    f8e0:	f89d 001a 	ldrb.w	r0, [sp, #26]
    f8e4:	07c0      	lsls	r0, r0, #31
    f8e6:	2800      	cmp	r0, #0
    f8e8:	d1e2      	bne.n	f8b0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xfa>
    f8ea:	e7dd      	b.n	f8a8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xf2>
    f8ec:	2001      	movs	r0, #1
    f8ee:	f88d 001b 	strb.w	r0, [sp, #27]
    f8f2:	e008      	b.n	f906 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x150>
    f8f4:	2000      	movs	r0, #0
    f8f6:	f88d 001b 	strb.w	r0, [sp, #27]
    f8fa:	e004      	b.n	f906 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x150>
    f8fc:	9803      	ldr	r0, [sp, #12]
    f8fe:	7881      	ldrb	r1, [r0, #2]
    f900:	2900      	cmp	r1, #0
    f902:	d0f3      	beq.n	f8ec <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x136>
    f904:	e7f6      	b.n	f8f4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x13e>
    f906:	f89d 001b 	ldrb.w	r0, [sp, #27]
    f90a:	07c0      	lsls	r0, r0, #31
    f90c:	2800      	cmp	r0, #0
    f90e:	d1e2      	bne.n	f8d6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x120>
    f910:	e7dd      	b.n	f8ce <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x118>
            self.update_left = x as u8;
    f912:	9804      	ldr	r0, [sp, #16]
    f914:	9903      	ldr	r1, [sp, #12]
    f916:	7008      	strb	r0, [r1, #0]
            self.update_right = x as u8;
    f918:	7088      	strb	r0, [r1, #2]
            self.update_top = y as u8;
    f91a:	9a05      	ldr	r2, [sp, #20]
    f91c:	704a      	strb	r2, [r1, #1]
            self.update_bottom = y as u8;
    f91e:	70ca      	strb	r2, [r1, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    f920:	e7ff      	b.n	f922 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x16c>
        }
        if (x as u8) < self.update_left { self.update_left = x as u8; }
    f922:	9804      	ldr	r0, [sp, #16]
    f924:	b2c1      	uxtb	r1, r0
    f926:	9a03      	ldr	r2, [sp, #12]
    f928:	7813      	ldrb	r3, [r2, #0]
    f92a:	4299      	cmp	r1, r3
    f92c:	d204      	bcs.n	f938 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x182>
    f92e:	e7ff      	b.n	f930 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x17a>
    f930:	9804      	ldr	r0, [sp, #16]
    f932:	9903      	ldr	r1, [sp, #12]
    f934:	7008      	strb	r0, [r1, #0]
    f936:	e7ff      	b.n	f938 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x182>
        if (x as u8) > self.update_right { self.update_right = x as u8; }
    f938:	9804      	ldr	r0, [sp, #16]
    f93a:	b2c1      	uxtb	r1, r0
    f93c:	9a03      	ldr	r2, [sp, #12]
    f93e:	7893      	ldrb	r3, [r2, #2]
    f940:	4299      	cmp	r1, r3
    f942:	d904      	bls.n	f94e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x198>
    f944:	e7ff      	b.n	f946 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x190>
    f946:	9804      	ldr	r0, [sp, #16]
    f948:	9903      	ldr	r1, [sp, #12]
    f94a:	7088      	strb	r0, [r1, #2]
    f94c:	e7ff      	b.n	f94e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x198>
        if (y as u8) < self.update_top { self.update_top = y as u8; }
    f94e:	9805      	ldr	r0, [sp, #20]
    f950:	b2c1      	uxtb	r1, r0
    f952:	9a03      	ldr	r2, [sp, #12]
    f954:	7853      	ldrb	r3, [r2, #1]
    f956:	4299      	cmp	r1, r3
    f958:	d204      	bcs.n	f964 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1ae>
    f95a:	e7ff      	b.n	f95c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1a6>
    f95c:	9805      	ldr	r0, [sp, #20]
    f95e:	9903      	ldr	r1, [sp, #12]
    f960:	7048      	strb	r0, [r1, #1]
    f962:	e7ff      	b.n	f964 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1ae>
        if (y as u8) > self.update_bottom { self.update_bottom = y as u8; }
    f964:	9805      	ldr	r0, [sp, #20]
    f966:	b2c1      	uxtb	r1, r0
    f968:	9a03      	ldr	r2, [sp, #12]
    f96a:	78d3      	ldrb	r3, [r2, #3]
    f96c:	4299      	cmp	r1, r3
    f96e:	d904      	bls.n	f97a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1c4>
    f970:	e7ff      	b.n	f972 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1bc>
    f972:	9805      	ldr	r0, [sp, #20]
    f974:	9903      	ldr	r1, [sp, #12]
    f976:	70c8      	strb	r0, [r1, #3]
    f978:	e7ff      	b.n	f97a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1c4>
    }
    f97a:	b00c      	add	sp, #48	; 0x30
    f97c:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    f97e:	f240 3060 	movw	r0, #864	; 0x360
    f982:	f2c0 0002 	movt	r0, #2
    f986:	f240 3244 	movw	r2, #836	; 0x344
    f98a:	f2c0 0202 	movt	r2, #2
    f98e:	2121      	movs	r1, #33	; 0x21
    f990:	f008 fdce 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f994:	defe      	udf	#254	; 0xfe
    f996:	f240 30a0 	movw	r0, #928	; 0x3a0
    f99a:	f2c0 0002 	movt	r0, #2
    f99e:	f240 3284 	movw	r2, #900	; 0x384
    f9a2:	f2c0 0202 	movt	r2, #2
    f9a6:	211c      	movs	r1, #28
    f9a8:	f008 fdc2 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f9ac:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = 
    f9ae:	f240 30bc 	movw	r0, #956	; 0x3bc
    f9b2:	f2c0 0002 	movt	r0, #2
    f9b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f9ba:	9900      	ldr	r1, [sp, #0]
    f9bc:	f008 fdce 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    f9c0:	defe      	udf	#254	; 0xfe

0000f9c2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE>:

    /// Get the current state of a pixel in the screen.
    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    f9c2:	b088      	sub	sp, #32
    f9c4:	9004      	str	r0, [sp, #16]
    f9c6:	9105      	str	r1, [sp, #20]
    f9c8:	9206      	str	r2, [sp, #24]
        //  console::print("get "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    f9ca:	293f      	cmp	r1, #63	; 0x3f
    f9cc:	9203      	str	r2, [sp, #12]
    f9ce:	9102      	str	r1, [sp, #8]
    f9d0:	d804      	bhi.n	f9dc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x1a>
    f9d2:	e7ff      	b.n	f9d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x12>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f9d4:	9803      	ldr	r0, [sp, #12]
    f9d6:	281f      	cmp	r0, #31
    f9d8:	d813      	bhi.n	fa02 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x40>
    f9da:	e00b      	b.n	f9f4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x32>
        assert!(x < SCREEN_WIDTH, "x overflow");
    f9dc:	f240 300c 	movw	r0, #780	; 0x30c
    f9e0:	f2c0 0002 	movt	r0, #2
    f9e4:	f240 32cc 	movw	r2, #972	; 0x3cc
    f9e8:	f2c0 0202 	movt	r2, #2
    f9ec:	210a      	movs	r1, #10
    f9ee:	f008 fd9f 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f9f2:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f9f4:	9803      	ldr	r0, [sp, #12]
    f9f6:	0181      	lsls	r1, r0, #6
    f9f8:	0e82      	lsrs	r2, r0, #26
    f9fa:	2a00      	cmp	r2, #0
    f9fc:	9101      	str	r1, [sp, #4]
    f9fe:	d128      	bne.n	fa52 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x90>
    fa00:	e00b      	b.n	fa1a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x58>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    fa02:	f240 3028 	movw	r0, #808	; 0x328
    fa06:	f2c0 0002 	movt	r0, #2
    fa0a:	f240 32dc 	movw	r2, #988	; 0x3dc
    fa0e:	f2c0 0202 	movt	r2, #2
    fa12:	210a      	movs	r1, #10
    fa14:	f008 fd8c 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fa18:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    fa1a:	9802      	ldr	r0, [sp, #8]
    fa1c:	9901      	ldr	r1, [sp, #4]
    fa1e:	1842      	adds	r2, r0, r1
    fa20:	4613      	mov	r3, r2
    fa22:	4282      	cmp	r2, r0
    fa24:	9300      	str	r3, [sp, #0]
    fa26:	d320      	bcc.n	fa6a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0xa8>
    fa28:	e7ff      	b.n	fa2a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x68>
    fa2a:	9800      	ldr	r0, [sp, #0]
    fa2c:	9007      	str	r0, [sp, #28]
    fa2e:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] >= 128 }
    fa30:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    fa34:	d125      	bne.n	fa82 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0xc0>
    fa36:	e7ff      	b.n	fa38 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x76>
    fa38:	f244 10b4 	movw	r0, #16820	; 0x41b4
    fa3c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fa40:	9900      	ldr	r1, [sp, #0]
    fa42:	5640      	ldrsb	r0, [r0, r1]
    fa44:	2200      	movs	r2, #0
    fa46:	2800      	cmp	r0, #0
    fa48:	bf48      	it	mi
    fa4a:	2201      	movmi	r2, #1
    }
    fa4c:	4610      	mov	r0, r2
    fa4e:	b008      	add	sp, #32
    fa50:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    fa52:	f240 3060 	movw	r0, #864	; 0x360
    fa56:	f2c0 0002 	movt	r0, #2
    fa5a:	f240 32ec 	movw	r2, #1004	; 0x3ec
    fa5e:	f2c0 0202 	movt	r2, #2
    fa62:	2121      	movs	r1, #33	; 0x21
    fa64:	f008 fd64 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fa68:	defe      	udf	#254	; 0xfe
    fa6a:	f240 30a0 	movw	r0, #928	; 0x3a0
    fa6e:	f2c0 0002 	movt	r0, #2
    fa72:	f240 32fc 	movw	r2, #1020	; 0x3fc
    fa76:	f2c0 0202 	movt	r2, #2
    fa7a:	211c      	movs	r1, #28
    fa7c:	f008 fd58 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fa80:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] >= 128 }
    fa82:	f240 400c 	movw	r0, #1036	; 0x40c
    fa86:	f2c0 0002 	movt	r0, #2
    fa8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    fa8e:	9900      	ldr	r1, [sp, #0]
    fa90:	f008 fd64 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    fa94:	defe      	udf	#254	; 0xfe

0000fa96 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE>:

    /// Set the size of the screen.
    fn vram_setsize(&mut self, size: (usize, usize)) {
    fa96:	b580      	push	{r7, lr}
    fa98:	b086      	sub	sp, #24
    fa9a:	9003      	str	r0, [sp, #12]
    fa9c:	9104      	str	r1, [sp, #16]
    fa9e:	9205      	str	r2, [sp, #20]
        //  Do nothing. We assume SCREEN_WIDTH and SCREEN_HEIGHT.
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    faa0:	2940      	cmp	r1, #64	; 0x40
    faa2:	9201      	str	r2, [sp, #4]
    faa4:	9100      	str	r1, [sp, #0]
    faa6:	d008      	beq.n	faba <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x24>
    faa8:	e003      	b.n	fab2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x1c>
    faaa:	2001      	movs	r0, #1
    faac:	f88d 000b 	strb.w	r0, [sp, #11]
    fab0:	e007      	b.n	fac2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x2c>
    fab2:	2000      	movs	r0, #0
    fab4:	f88d 000b 	strb.w	r0, [sp, #11]
    fab8:	e003      	b.n	fac2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x2c>
    faba:	9801      	ldr	r0, [sp, #4]
    fabc:	2820      	cmp	r0, #32
    fabe:	d0f4      	beq.n	faaa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x14>
    fac0:	e7f7      	b.n	fab2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x1c>
    fac2:	f89d 000b 	ldrb.w	r0, [sp, #11]
    fac6:	07c0      	lsls	r0, r0, #31
    fac8:	2800      	cmp	r0, #0
    faca:	d008      	beq.n	fade <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x48>
    facc:	e7ff      	b.n	face <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x38>
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    face:	f240 4024 	movw	r0, #1060	; 0x424
    fad2:	f2c0 0002 	movt	r0, #2
    fad6:	2108      	movs	r1, #8
    fad8:	f7f9 fb0e 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    fadc:	e00b      	b.n	faf6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x60>
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    fade:	f240 401c 	movw	r0, #1052	; 0x41c
    fae2:	f2c0 0002 	movt	r0, #2
    fae6:	f240 4244 	movw	r2, #1092	; 0x444
    faea:	f2c0 0202 	movt	r2, #2
    faee:	2108      	movs	r1, #8
    faf0:	f008 fd1e 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    faf4:	defe      	udf	#254	; 0xfe
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    faf6:	9800      	ldr	r0, [sp, #0]
    faf8:	f7f9 fb3c 	bl	9174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    fafc:	e7ff      	b.n	fafe <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x68>
    fafe:	f240 4054 	movw	r0, #1108	; 0x454
    fb02:	f2c0 0002 	movt	r0, #2
    fb06:	2102      	movs	r1, #2
    fb08:	f7f9 faf6 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    fb0c:	e7ff      	b.n	fb0e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x78>
    fb0e:	9801      	ldr	r0, [sp, #4]
    fb10:	f7f9 fb30 	bl	9174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    fb14:	e7ff      	b.n	fb16 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x80>
    fb16:	f240 4056 	movw	r0, #1110	; 0x456
    fb1a:	f2c0 0002 	movt	r0, #2
    fb1e:	2101      	movs	r1, #1
    fb20:	f7f9 faea 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    fb24:	e7ff      	b.n	fb26 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x90>
    fb26:	f7f9 fb2d 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    fb2a:	e7ff      	b.n	fb2c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x96>
    }
    fb2c:	b006      	add	sp, #24
    fb2e:	bd80      	pop	{r7, pc}

0000fb30 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E>:

    /// Get the size of the screen.
    fn vram_size(&mut self) -> (usize, usize) {
    fb30:	b083      	sub	sp, #12
    fb32:	9002      	str	r0, [sp, #8]
    fb34:	2040      	movs	r0, #64	; 0x40
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    fb36:	9000      	str	r0, [sp, #0]
    fb38:	2020      	movs	r0, #32
    fb3a:	9001      	str	r0, [sp, #4]
    }
    fb3c:	9800      	ldr	r0, [sp, #0]
    fb3e:	9901      	ldr	r1, [sp, #4]
    fb40:	b003      	add	sp, #12
    fb42:	4770      	bx	lr

0000fb44 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>:

    /// Return the current clock value in nanoseconds.
    fn clock(&mut self) -> u64 {
    fb44:	b5b0      	push	{r4, r5, r7, lr}
    fb46:	b086      	sub	sp, #24
    fb48:	9005      	str	r0, [sp, #20]
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    fb4a:	f00c fe57 	bl	1c7fc <os_time_get>
    fb4e:	9004      	str	r0, [sp, #16]
    fb50:	e7ff      	b.n	fb52 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0xe>
    fb52:	2000      	movs	r0, #0
    fb54:	9904      	ldr	r1, [sp, #16]
    fb56:	fba0 2301 	umull	r2, r3, r0, r1
    fb5a:	2b00      	cmp	r3, #0
    fb5c:	bf18      	it	ne
    fb5e:	2301      	movne	r3, #1
    fb60:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    fb64:	fba0 e40c 	umull	lr, r4, r0, ip
    fb68:	2c00      	cmp	r4, #0
    fb6a:	bf18      	it	ne
    fb6c:	2401      	movne	r4, #1
    fb6e:	ea43 0304 	orr.w	r3, r3, r4
    fb72:	4472      	add	r2, lr
    fb74:	fba1 ce0c 	umull	ip, lr, r1, ip
    fb78:	eb12 020e 	adds.w	r2, r2, lr
    fb7c:	f140 0000 	adc.w	r0, r0, #0
    fb80:	ea40 0003 	orr.w	r0, r0, r3
    fb84:	2800      	cmp	r0, #0
    fb86:	f8cd c00c 	str.w	ip, [sp, #12]
    fb8a:	9202      	str	r2, [sp, #8]
    fb8c:	d124      	bne.n	fbd8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0x94>
    fb8e:	e7ff      	b.n	fb90 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0x4c>
    fb90:	2000      	movs	r0, #0
    fb92:	9903      	ldr	r1, [sp, #12]
    fb94:	fba0 2301 	umull	r2, r3, r0, r1
    fb98:	2b00      	cmp	r3, #0
    fb9a:	bf18      	it	ne
    fb9c:	2301      	movne	r3, #1
    fb9e:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
    fba2:	f8dd e008 	ldr.w	lr, [sp, #8]
    fba6:	fbae 450c 	umull	r4, r5, lr, ip
    fbaa:	2d00      	cmp	r5, #0
    fbac:	bf18      	it	ne
    fbae:	2501      	movne	r5, #1
    fbb0:	ea43 0305 	orr.w	r3, r3, r5
    fbb4:	4422      	add	r2, r4
    fbb6:	fba1 c40c 	umull	ip, r4, r1, ip
    fbba:	1912      	adds	r2, r2, r4
    fbbc:	f140 0000 	adc.w	r0, r0, #0
    fbc0:	ea40 0003 	orr.w	r0, r0, r3
    fbc4:	2800      	cmp	r0, #0
    fbc6:	f8cd c004 	str.w	ip, [sp, #4]
    fbca:	9200      	str	r2, [sp, #0]
    fbcc:	d110      	bne.n	fbf0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0xac>
    fbce:	e7ff      	b.n	fbd0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0x8c>
    }
    fbd0:	9801      	ldr	r0, [sp, #4]
    fbd2:	9900      	ldr	r1, [sp, #0]
    fbd4:	b006      	add	sp, #24
    fbd6:	bdb0      	pop	{r4, r5, r7, pc}
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    fbd8:	f240 3060 	movw	r0, #864	; 0x360
    fbdc:	f2c0 0002 	movt	r0, #2
    fbe0:	f240 4258 	movw	r2, #1112	; 0x458
    fbe4:	f2c0 0202 	movt	r2, #2
    fbe8:	2121      	movs	r1, #33	; 0x21
    fbea:	f008 fca1 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fbee:	defe      	udf	#254	; 0xfe
    fbf0:	f240 3060 	movw	r0, #864	; 0x360
    fbf4:	f2c0 0002 	movt	r0, #2
    fbf8:	f240 4258 	movw	r2, #1112	; 0x458
    fbfc:	f2c0 0202 	movt	r2, #2
    fc00:	2121      	movs	r1, #33	; 0x21
    fc02:	f008 fc95 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc06:	defe      	udf	#254	; 0xfe

0000fc08 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha9851d0b0cdc4725E>:

    /// Play beep sound.
    fn beep(&mut self) {
    fc08:	b081      	sub	sp, #4
    fc0a:	9000      	str	r0, [sp, #0]
        //  TODO: Vibrate? Flash?
    }
    fc0c:	b001      	add	sp, #4
    fc0e:	4770      	bx	lr

0000fc10 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E>:

    /// Called in every step; return true for shutdown.
    fn sched(&mut self) -> bool {
    fc10:	b580      	push	{r7, lr}
    fc12:	b084      	sub	sp, #16
    fc14:	9003      	str	r0, [sp, #12]
        //  console::print("sched\n"); console::flush(); ////

        //  If no screen update, return
        if self.update_left == 0 && self.update_right == 0 &&
    fc16:	7801      	ldrb	r1, [r0, #0]
    fc18:	2900      	cmp	r1, #0
    fc1a:	9001      	str	r0, [sp, #4]
    fc1c:	d02e      	beq.n	fc7c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x6c>
    fc1e:	e029      	b.n	fc74 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x64>
    fc20:	2001      	movs	r0, #1
    fc22:	f88d 0009 	strb.w	r0, [sp, #9]
    fc26:	e008      	b.n	fc3a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x2a>
    fc28:	2000      	movs	r0, #0
    fc2a:	f88d 0009 	strb.w	r0, [sp, #9]
    fc2e:	e004      	b.n	fc3a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x2a>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    fc30:	9801      	ldr	r0, [sp, #4]
    fc32:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    fc34:	2900      	cmp	r1, #0
    fc36:	d0f3      	beq.n	fc20 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x10>
    fc38:	e7f6      	b.n	fc28 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x18>
    fc3a:	f89d 0009 	ldrb.w	r0, [sp, #9]
    fc3e:	07c0      	lsls	r0, r0, #31
    fc40:	2800      	cmp	r0, #0
    fc42:	d12c      	bne.n	fc9e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x8e>
    fc44:	e025      	b.n	fc92 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x82>
    fc46:	2001      	movs	r0, #1
    fc48:	f88d 000a 	strb.w	r0, [sp, #10]
    fc4c:	e008      	b.n	fc60 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x50>
    fc4e:	2000      	movs	r0, #0
    fc50:	f88d 000a 	strb.w	r0, [sp, #10]
    fc54:	e004      	b.n	fc60 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x50>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    fc56:	9801      	ldr	r0, [sp, #4]
    fc58:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    fc5a:	2900      	cmp	r1, #0
    fc5c:	d0f3      	beq.n	fc46 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x36>
    fc5e:	e7f6      	b.n	fc4e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x3e>
    fc60:	f89d 000a 	ldrb.w	r0, [sp, #10]
    fc64:	07c0      	lsls	r0, r0, #31
    fc66:	2800      	cmp	r0, #0
    fc68:	d1e2      	bne.n	fc30 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x20>
    fc6a:	e7dd      	b.n	fc28 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x18>
    fc6c:	2001      	movs	r0, #1
    fc6e:	f88d 000b 	strb.w	r0, [sp, #11]
    fc72:	e008      	b.n	fc86 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x76>
    fc74:	2000      	movs	r0, #0
    fc76:	f88d 000b 	strb.w	r0, [sp, #11]
    fc7a:	e004      	b.n	fc86 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x76>
    fc7c:	9801      	ldr	r0, [sp, #4]
    fc7e:	7881      	ldrb	r1, [r0, #2]
    fc80:	2900      	cmp	r1, #0
    fc82:	d0f3      	beq.n	fc6c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x5c>
    fc84:	e7f6      	b.n	fc74 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x64>
    fc86:	f89d 000b 	ldrb.w	r0, [sp, #11]
    fc8a:	07c0      	lsls	r0, r0, #31
    fc8c:	2800      	cmp	r0, #0
    fc8e:	d1e2      	bne.n	fc56 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x46>
    fc90:	e7dd      	b.n	fc4e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x3e>

        //  If emulator is preparing the initial screen, refresh the screen later
        if !self.is_interactive { return false; }
    fc92:	9801      	ldr	r0, [sp, #4]
    fc94:	7901      	ldrb	r1, [r0, #4]
    fc96:	07c9      	lsls	r1, r1, #31
    fc98:	2900      	cmp	r1, #0
    fc9a:	d00e      	beq.n	fcba <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xaa>
    fc9c:	e007      	b.n	fcae <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x9e>
    fc9e:	2000      	movs	r0, #0
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    fca0:	f88d 0008 	strb.w	r0, [sp, #8]
    fca4:	e7ff      	b.n	fca6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>
        self.update_right = 0;
        self.update_bottom = 0;

        //  Return false to indicate no shutdown
        false
    }
    fca6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fcaa:	b004      	add	sp, #16
    fcac:	bd80      	pop	{r7, pc}
        if !self.is_checking_input { return false; }
    fcae:	9801      	ldr	r0, [sp, #4]
    fcb0:	7941      	ldrb	r1, [r0, #5]
    fcb2:	07c9      	lsls	r1, r1, #31
    fcb4:	2900      	cmp	r1, #0
    fcb6:	d00a      	beq.n	fcce <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xbe>
    fcb8:	e003      	b.n	fcc2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xb2>
    fcba:	2000      	movs	r0, #0
        if !self.is_interactive { return false; }
    fcbc:	f88d 0008 	strb.w	r0, [sp, #8]
    fcc0:	e7f1      	b.n	fca6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>
    fcc2:	2000      	movs	r0, #0
        self.is_checking_input = false;
    fcc4:	9901      	ldr	r1, [sp, #4]
    fcc6:	7148      	strb	r0, [r1, #5]
        unsafe { hal_watchdog_tickle() };
    fcc8:	f00b fb70 	bl	1b3ac <hal_watchdog_tickle>
    fccc:	e003      	b.n	fcd6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xc6>
    fcce:	2000      	movs	r0, #0
        if !self.is_checking_input { return false; }
    fcd0:	f88d 0008 	strb.w	r0, [sp, #8]
    fcd4:	e7e7      	b.n	fca6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>
    fcd6:	2001      	movs	r0, #1
        unsafe { os::os_time_delay(1) };
    fcd8:	f00c fdb6 	bl	1c848 <os_time_delay>
    fcdc:	e7ff      	b.n	fcde <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xce>
        render_region(
    fcde:	9801      	ldr	r0, [sp, #4]
    fce0:	7800      	ldrb	r0, [r0, #0]
    fce2:	9901      	ldr	r1, [sp, #4]
    fce4:	7849      	ldrb	r1, [r1, #1]
    fce6:	9a01      	ldr	r2, [sp, #4]
    fce8:	7892      	ldrb	r2, [r2, #2]
    fcea:	9b01      	ldr	r3, [sp, #4]
    fcec:	78db      	ldrb	r3, [r3, #3]
    fcee:	f000 f80a 	bl	fd06 <_ZN3app5chip813render_region17hc692a4d55cab74f0E>
    fcf2:	e7ff      	b.n	fcf4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xe4>
    fcf4:	2000      	movs	r0, #0
        self.update_left = 0;
    fcf6:	9901      	ldr	r1, [sp, #4]
    fcf8:	7008      	strb	r0, [r1, #0]
        self.update_top = 0;
    fcfa:	7048      	strb	r0, [r1, #1]
        self.update_right = 0;
    fcfc:	7088      	strb	r0, [r1, #2]
        self.update_bottom = 0;
    fcfe:	70c8      	strb	r0, [r1, #3]
        false
    fd00:	f88d 0008 	strb.w	r0, [sp, #8]
    }
    fd04:	e7cf      	b.n	fca6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>

0000fd06 <_ZN3app5chip813render_region17hc692a4d55cab74f0E>:
}

/// Render the Virtual Screen region
fn render_region(left: u8, top: u8, right: u8, bottom: u8) {
    fd06:	b5b0      	push	{r4, r5, r7, lr}
    fd08:	b0a2      	sub	sp, #136	; 0x88
    fd0a:	469c      	mov	ip, r3
    fd0c:	4696      	mov	lr, r2
    fd0e:	460c      	mov	r4, r1
    fd10:	4605      	mov	r5, r0
    fd12:	f88d 0068 	strb.w	r0, [sp, #104]	; 0x68
    fd16:	f88d 1069 	strb.w	r1, [sp, #105]	; 0x69
    fd1a:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
    fd1e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
    //  Get the physical bounding box width and height
    let physical_box    = get_bounding_box(left, top, right, bottom);  //  Returns (left,top,right,bottom)
    fd22:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
    fd26:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
    fd2a:	9414      	str	r4, [sp, #80]	; 0x50
    fd2c:	9513      	str	r5, [sp, #76]	; 0x4c
    fd2e:	f000 fce7 	bl	10700 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E>
    fd32:	901b      	str	r0, [sp, #108]	; 0x6c
    fd34:	981b      	ldr	r0, [sp, #108]	; 0x6c
    fd36:	9017      	str	r0, [sp, #92]	; 0x5c
    fd38:	e7ff      	b.n	fd3a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x34>
    let physical_width  = (physical_box.2 - physical_box.0 + 1) as usize;
    fd3a:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
    fd3e:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
    fd42:	1a08      	subs	r0, r1, r0
    fd44:	b2c1      	uxtb	r1, r0
    fd46:	4602      	mov	r2, r0
    fd48:	4281      	cmp	r1, r0
    fd4a:	9212      	str	r2, [sp, #72]	; 0x48
    fd4c:	f040 80fc 	bne.w	ff48 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x242>
    fd50:	e7ff      	b.n	fd52 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x4c>
    fd52:	2001      	movs	r0, #1
    fd54:	9912      	ldr	r1, [sp, #72]	; 0x48
    fd56:	fa50 f081 	uxtab	r0, r0, r1
    fd5a:	b2c2      	uxtb	r2, r0
    fd5c:	4603      	mov	r3, r0
    fd5e:	4282      	cmp	r2, r0
    fd60:	9311      	str	r3, [sp, #68]	; 0x44
    fd62:	f040 80fd 	bne.w	ff60 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x25a>
    fd66:	e7ff      	b.n	fd68 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x62>
    fd68:	9811      	ldr	r0, [sp, #68]	; 0x44
    fd6a:	b2c1      	uxtb	r1, r0
    fd6c:	460a      	mov	r2, r1
    fd6e:	911c      	str	r1, [sp, #112]	; 0x70
    let physical_height = (physical_box.3 - physical_box.1 + 1) as usize;
    fd70:	f89d 105d 	ldrb.w	r1, [sp, #93]	; 0x5d
    fd74:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
    fd78:	1a59      	subs	r1, r3, r1
    fd7a:	b2cb      	uxtb	r3, r1
    fd7c:	468c      	mov	ip, r1
    fd7e:	428b      	cmp	r3, r1
    fd80:	9210      	str	r2, [sp, #64]	; 0x40
    fd82:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    fd86:	f040 80f7 	bne.w	ff78 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x272>
    fd8a:	e7ff      	b.n	fd8c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x86>
    fd8c:	2001      	movs	r0, #1
    fd8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    fd90:	fa50 f081 	uxtab	r0, r0, r1
    fd94:	b2c2      	uxtb	r2, r0
    fd96:	4603      	mov	r3, r0
    fd98:	4282      	cmp	r2, r0
    fd9a:	930e      	str	r3, [sp, #56]	; 0x38
    fd9c:	f040 80f8 	bne.w	ff90 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x28a>
    fda0:	e7ff      	b.n	fda2 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x9c>
    fda2:	980e      	ldr	r0, [sp, #56]	; 0x38
    fda4:	b2c1      	uxtb	r1, r0
    fda6:	911d      	str	r1, [sp, #116]	; 0x74
    //  If the update region is small, render with a single block
    if physical_width + physical_height <= (BLOCK_WIDTH * PIXEL_WIDTH) + (BLOCK_HEIGHT * PIXEL_HEIGHT) {  //  Will not overflow SPI buffer
    fda8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fdaa:	4411      	add	r1, r2
    fdac:	460b      	mov	r3, r1
    fdae:	4291      	cmp	r1, r2
    fdb0:	930d      	str	r3, [sp, #52]	; 0x34
    fdb2:	f0c0 80f9 	bcc.w	ffa8 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2a2>
    fdb6:	e7ff      	b.n	fdb8 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xb2>
    fdb8:	980d      	ldr	r0, [sp, #52]	; 0x34
    fdba:	2829      	cmp	r0, #41	; 0x29
    fdbc:	d307      	bcc.n	fdce <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xc8>
    fdbe:	e7ff      	b.n	fdc0 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xba>
        render_block(left, top, right, bottom);
    } else {
        //  If the update region is too big for a single block, break the region into blocks and render
        let mut x = left;
    fdc0:	9813      	ldr	r0, [sp, #76]	; 0x4c
    fdc2:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
        let mut y = top;
    fdc6:	9914      	ldr	r1, [sp, #80]	; 0x50
    fdc8:	f88d 1063 	strb.w	r1, [sp, #99]	; 0x63
        loop {
    fdcc:	e007      	b.n	fdde <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xd8>
        render_block(left, top, right, bottom);
    fdce:	9813      	ldr	r0, [sp, #76]	; 0x4c
    fdd0:	9914      	ldr	r1, [sp, #80]	; 0x50
    fdd2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    fdd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    fdd6:	f000 f96b 	bl	100b0 <_ZN3app5chip812render_block17h6c8b81526965606bE>
    fdda:	e7ff      	b.n	fddc <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xd6>
    if physical_width + physical_height <= (BLOCK_WIDTH * PIXEL_WIDTH) + (BLOCK_HEIGHT * PIXEL_HEIGHT) {  //  Will not overflow SPI buffer
    fddc:	e0b2      	b.n	ff44 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x23e>
            let block_right  = (x + BLOCK_WIDTH as u8 - 1).min(right);
    fdde:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    fde2:	3005      	adds	r0, #5
    fde4:	b2c1      	uxtb	r1, r0
    fde6:	4602      	mov	r2, r0
    fde8:	4281      	cmp	r1, r0
    fdea:	920c      	str	r2, [sp, #48]	; 0x30
    fdec:	f040 80e8 	bne.w	ffc0 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2ba>
    fdf0:	e7ff      	b.n	fdf2 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xec>
    fdf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fdf6:	990c      	ldr	r1, [sp, #48]	; 0x30
    fdf8:	fa50 f081 	uxtab	r0, r0, r1
    fdfc:	b2c2      	uxtb	r2, r0
    fdfe:	4603      	mov	r3, r0
    fe00:	4282      	cmp	r2, r0
    fe02:	930b      	str	r3, [sp, #44]	; 0x2c
    fe04:	f040 80e8 	bne.w	ffd8 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2d2>
    fe08:	e7ff      	b.n	fe0a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x104>
    fe0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    fe0c:	9915      	ldr	r1, [sp, #84]	; 0x54
    fe0e:	f007 fd1a 	bl	17846 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
    fe12:	4601      	mov	r1, r0
    fe14:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    fe18:	910a      	str	r1, [sp, #40]	; 0x28
    fe1a:	e7ff      	b.n	fe1c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x116>
            let block_bottom = (y + BLOCK_HEIGHT as u8 - 1).min(bottom);
    fe1c:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
    fe20:	3005      	adds	r0, #5
    fe22:	b2c1      	uxtb	r1, r0
    fe24:	4602      	mov	r2, r0
    fe26:	4281      	cmp	r1, r0
    fe28:	9209      	str	r2, [sp, #36]	; 0x24
    fe2a:	f040 80e1 	bne.w	fff0 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2ea>
    fe2e:	e7ff      	b.n	fe30 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x12a>
    fe30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fe34:	9909      	ldr	r1, [sp, #36]	; 0x24
    fe36:	fa50 f081 	uxtab	r0, r0, r1
    fe3a:	b2c2      	uxtb	r2, r0
    fe3c:	4603      	mov	r3, r0
    fe3e:	4282      	cmp	r2, r0
    fe40:	9308      	str	r3, [sp, #32]
    fe42:	f040 80e1 	bne.w	10008 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x302>
    fe46:	e7ff      	b.n	fe48 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x142>
    fe48:	9808      	ldr	r0, [sp, #32]
    fe4a:	9916      	ldr	r1, [sp, #88]	; 0x58
    fe4c:	f007 fcfb 	bl	17846 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
    fe50:	4601      	mov	r1, r0
    fe52:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    fe56:	9107      	str	r1, [sp, #28]
    fe58:	e7ff      	b.n	fe5a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x154>

            let physical_box    = get_bounding_box(left, top, right, bottom);  //  Returns (left,top,right,bottom)
    fe5a:	9813      	ldr	r0, [sp, #76]	; 0x4c
    fe5c:	9914      	ldr	r1, [sp, #80]	; 0x50
    fe5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    fe60:	9b16      	ldr	r3, [sp, #88]	; 0x58
    fe62:	f000 fc4d 	bl	10700 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E>
    fe66:	901f      	str	r0, [sp, #124]	; 0x7c
    fe68:	981f      	ldr	r0, [sp, #124]	; 0x7c
    fe6a:	9019      	str	r0, [sp, #100]	; 0x64
    fe6c:	e7ff      	b.n	fe6e <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x168>
            let physical_width  = (physical_box.2 - physical_box.0 + 1) as usize;
    fe6e:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
    fe72:	f89d 1066 	ldrb.w	r1, [sp, #102]	; 0x66
    fe76:	1a08      	subs	r0, r1, r0
    fe78:	b2c1      	uxtb	r1, r0
    fe7a:	4602      	mov	r2, r0
    fe7c:	4281      	cmp	r1, r0
    fe7e:	9206      	str	r2, [sp, #24]
    fe80:	f040 80ce 	bne.w	10020 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x31a>
    fe84:	e7ff      	b.n	fe86 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x180>
    fe86:	2001      	movs	r0, #1
    fe88:	9906      	ldr	r1, [sp, #24]
    fe8a:	fa50 f081 	uxtab	r0, r0, r1
    fe8e:	b2c2      	uxtb	r2, r0
    fe90:	4603      	mov	r3, r0
    fe92:	4282      	cmp	r2, r0
    fe94:	9305      	str	r3, [sp, #20]
    fe96:	f040 80cf 	bne.w	10038 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x332>
    fe9a:	e7ff      	b.n	fe9c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x196>
    fe9c:	9805      	ldr	r0, [sp, #20]
    fe9e:	b2c1      	uxtb	r1, r0
    fea0:	9120      	str	r1, [sp, #128]	; 0x80
            let physical_height = (physical_box.3 - physical_box.1 + 1) as usize;
    fea2:	f89d 1065 	ldrb.w	r1, [sp, #101]	; 0x65
    fea6:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
    feaa:	1a51      	subs	r1, r2, r1
    feac:	b2ca      	uxtb	r2, r1
    feae:	460b      	mov	r3, r1
    feb0:	428a      	cmp	r2, r1
    feb2:	9304      	str	r3, [sp, #16]
    feb4:	f040 80cc 	bne.w	10050 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x34a>
    feb8:	e7ff      	b.n	feba <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1b4>
    feba:	2001      	movs	r0, #1
    febc:	9904      	ldr	r1, [sp, #16]
    febe:	fa50 f081 	uxtab	r0, r0, r1
    fec2:	b2c2      	uxtb	r2, r0
    fec4:	4603      	mov	r3, r0
    fec6:	4282      	cmp	r2, r0
    fec8:	9303      	str	r3, [sp, #12]
    feca:	f040 80cd 	bne.w	10068 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x362>
    fece:	e7ff      	b.n	fed0 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1ca>
    fed0:	9803      	ldr	r0, [sp, #12]
    fed2:	b2c1      	uxtb	r1, r0
    fed4:	9121      	str	r1, [sp, #132]	; 0x84
            //  assert!(physical_width + physical_height <= (BLOCK_WIDTH * PIXEL_WIDTH) + (BLOCK_HEIGHT * PIXEL_HEIGHT), "region overflow");
            render_block(x, y,
    fed6:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    feda:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    fede:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fee0:	9b07      	ldr	r3, [sp, #28]
    fee2:	f000 f8e5 	bl	100b0 <_ZN3app5chip812render_block17h6c8b81526965606bE>
    fee6:	e7ff      	b.n	fee8 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1e2>
                block_right,
                block_bottom
            );  //  Will not overflow SPI buffer
            x += BLOCK_WIDTH as u8;
    fee8:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    feec:	3005      	adds	r0, #5
    feee:	b2c1      	uxtb	r1, r0
    fef0:	4602      	mov	r2, r0
    fef2:	4281      	cmp	r1, r0
    fef4:	9202      	str	r2, [sp, #8]
    fef6:	f040 80c3 	bne.w	10080 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x37a>
    fefa:	e7ff      	b.n	fefc <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f6>
    fefc:	9802      	ldr	r0, [sp, #8]
    fefe:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
            if x > right {
    ff02:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
    ff06:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ff08:	b2d3      	uxtb	r3, r2
    ff0a:	4299      	cmp	r1, r3
    ff0c:	d919      	bls.n	ff42 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x23c>
    ff0e:	e7ff      	b.n	ff10 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x20a>
                x = left;
    ff10:	9813      	ldr	r0, [sp, #76]	; 0x4c
    ff12:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
                y += BLOCK_HEIGHT as u8;
    ff16:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    ff1a:	3105      	adds	r1, #5
    ff1c:	b2ca      	uxtb	r2, r1
    ff1e:	460b      	mov	r3, r1
    ff20:	428a      	cmp	r2, r1
    ff22:	9301      	str	r3, [sp, #4]
    ff24:	f040 80b8 	bne.w	10098 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x392>
    ff28:	e7ff      	b.n	ff2a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x224>
    ff2a:	9801      	ldr	r0, [sp, #4]
    ff2c:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
                if y > bottom { break; }
    ff30:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    ff34:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ff36:	b2d3      	uxtb	r3, r2
    ff38:	4299      	cmp	r1, r3
    ff3a:	d801      	bhi.n	ff40 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x23a>
    ff3c:	e7ff      	b.n	ff3e <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x238>
            if x > right {
    ff3e:	e000      	b.n	ff42 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x23c>
    if physical_width + physical_height <= (BLOCK_WIDTH * PIXEL_WIDTH) + (BLOCK_HEIGHT * PIXEL_HEIGHT) {  //  Will not overflow SPI buffer
    ff40:	e000      	b.n	ff44 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x23e>
        loop {
    ff42:	e74c      	b.n	fdde <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xd8>
            }
        }
    }
}
    ff44:	b022      	add	sp, #136	; 0x88
    ff46:	bdb0      	pop	{r4, r5, r7, pc}
    let physical_width  = (physical_box.2 - physical_box.0 + 1) as usize;
    ff48:	f240 4080 	movw	r0, #1152	; 0x480
    ff4c:	f2c0 0002 	movt	r0, #2
    ff50:	f240 4268 	movw	r2, #1128	; 0x468
    ff54:	f2c0 0202 	movt	r2, #2
    ff58:	2121      	movs	r1, #33	; 0x21
    ff5a:	f008 fae9 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ff5e:	defe      	udf	#254	; 0xfe
    ff60:	f240 30a0 	movw	r0, #928	; 0x3a0
    ff64:	f2c0 0002 	movt	r0, #2
    ff68:	f240 42a4 	movw	r2, #1188	; 0x4a4
    ff6c:	f2c0 0202 	movt	r2, #2
    ff70:	211c      	movs	r1, #28
    ff72:	f008 fadd 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ff76:	defe      	udf	#254	; 0xfe
    let physical_height = (physical_box.3 - physical_box.1 + 1) as usize;
    ff78:	f240 4080 	movw	r0, #1152	; 0x480
    ff7c:	f2c0 0002 	movt	r0, #2
    ff80:	f240 42b4 	movw	r2, #1204	; 0x4b4
    ff84:	f2c0 0202 	movt	r2, #2
    ff88:	2121      	movs	r1, #33	; 0x21
    ff8a:	f008 fad1 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ff8e:	defe      	udf	#254	; 0xfe
    ff90:	f240 30a0 	movw	r0, #928	; 0x3a0
    ff94:	f2c0 0002 	movt	r0, #2
    ff98:	f240 42c4 	movw	r2, #1220	; 0x4c4
    ff9c:	f2c0 0202 	movt	r2, #2
    ffa0:	211c      	movs	r1, #28
    ffa2:	f008 fac5 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ffa6:	defe      	udf	#254	; 0xfe
    if physical_width + physical_height <= (BLOCK_WIDTH * PIXEL_WIDTH) + (BLOCK_HEIGHT * PIXEL_HEIGHT) {  //  Will not overflow SPI buffer
    ffa8:	f240 30a0 	movw	r0, #928	; 0x3a0
    ffac:	f2c0 0002 	movt	r0, #2
    ffb0:	f240 42d4 	movw	r2, #1236	; 0x4d4
    ffb4:	f2c0 0202 	movt	r2, #2
    ffb8:	211c      	movs	r1, #28
    ffba:	f008 fab9 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ffbe:	defe      	udf	#254	; 0xfe
            let block_right  = (x + BLOCK_WIDTH as u8 - 1).min(right);
    ffc0:	f240 30a0 	movw	r0, #928	; 0x3a0
    ffc4:	f2c0 0002 	movt	r0, #2
    ffc8:	f240 42e4 	movw	r2, #1252	; 0x4e4
    ffcc:	f2c0 0202 	movt	r2, #2
    ffd0:	211c      	movs	r1, #28
    ffd2:	f008 faad 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ffd6:	defe      	udf	#254	; 0xfe
    ffd8:	f240 4080 	movw	r0, #1152	; 0x480
    ffdc:	f2c0 0002 	movt	r0, #2
    ffe0:	f240 42f4 	movw	r2, #1268	; 0x4f4
    ffe4:	f2c0 0202 	movt	r2, #2
    ffe8:	2121      	movs	r1, #33	; 0x21
    ffea:	f008 faa1 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ffee:	defe      	udf	#254	; 0xfe
            let block_bottom = (y + BLOCK_HEIGHT as u8 - 1).min(bottom);
    fff0:	f240 30a0 	movw	r0, #928	; 0x3a0
    fff4:	f2c0 0002 	movt	r0, #2
    fff8:	f240 5204 	movw	r2, #1284	; 0x504
    fffc:	f2c0 0202 	movt	r2, #2
   10000:	211c      	movs	r1, #28
   10002:	f008 fa95 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10006:	defe      	udf	#254	; 0xfe
   10008:	f240 4080 	movw	r0, #1152	; 0x480
   1000c:	f2c0 0002 	movt	r0, #2
   10010:	f240 5214 	movw	r2, #1300	; 0x514
   10014:	f2c0 0202 	movt	r2, #2
   10018:	2121      	movs	r1, #33	; 0x21
   1001a:	f008 fa89 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1001e:	defe      	udf	#254	; 0xfe
            let physical_width  = (physical_box.2 - physical_box.0 + 1) as usize;
   10020:	f240 4080 	movw	r0, #1152	; 0x480
   10024:	f2c0 0002 	movt	r0, #2
   10028:	f240 5224 	movw	r2, #1316	; 0x524
   1002c:	f2c0 0202 	movt	r2, #2
   10030:	2121      	movs	r1, #33	; 0x21
   10032:	f008 fa7d 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10036:	defe      	udf	#254	; 0xfe
   10038:	f240 30a0 	movw	r0, #928	; 0x3a0
   1003c:	f2c0 0002 	movt	r0, #2
   10040:	f240 5234 	movw	r2, #1332	; 0x534
   10044:	f2c0 0202 	movt	r2, #2
   10048:	211c      	movs	r1, #28
   1004a:	f008 fa71 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1004e:	defe      	udf	#254	; 0xfe
            let physical_height = (physical_box.3 - physical_box.1 + 1) as usize;
   10050:	f240 4080 	movw	r0, #1152	; 0x480
   10054:	f2c0 0002 	movt	r0, #2
   10058:	f240 5244 	movw	r2, #1348	; 0x544
   1005c:	f2c0 0202 	movt	r2, #2
   10060:	2121      	movs	r1, #33	; 0x21
   10062:	f008 fa65 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10066:	defe      	udf	#254	; 0xfe
   10068:	f240 30a0 	movw	r0, #928	; 0x3a0
   1006c:	f2c0 0002 	movt	r0, #2
   10070:	f240 5254 	movw	r2, #1364	; 0x554
   10074:	f2c0 0202 	movt	r2, #2
   10078:	211c      	movs	r1, #28
   1007a:	f008 fa59 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1007e:	defe      	udf	#254	; 0xfe
            x += BLOCK_WIDTH as u8;
   10080:	f240 30a0 	movw	r0, #928	; 0x3a0
   10084:	f2c0 0002 	movt	r0, #2
   10088:	f240 5264 	movw	r2, #1380	; 0x564
   1008c:	f2c0 0202 	movt	r2, #2
   10090:	211c      	movs	r1, #28
   10092:	f008 fa4d 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10096:	defe      	udf	#254	; 0xfe
                y += BLOCK_HEIGHT as u8;
   10098:	f240 30a0 	movw	r0, #928	; 0x3a0
   1009c:	f2c0 0002 	movt	r0, #2
   100a0:	f240 5274 	movw	r2, #1396	; 0x574
   100a4:	f2c0 0202 	movt	r2, #2
   100a8:	211c      	movs	r1, #28
   100aa:	f008 fa41 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   100ae:	defe      	udf	#254	; 0xfe

000100b0 <_ZN3app5chip812render_block17h6c8b81526965606bE>:

/// Render the Virtual Block
fn render_block(left: u8, top: u8, right: u8, bottom: u8) {
   100b0:	b570      	push	{r4, r5, r6, lr}
   100b2:	b092      	sub	sp, #72	; 0x48
   100b4:	469c      	mov	ip, r3
   100b6:	4696      	mov	lr, r2
   100b8:	460c      	mov	r4, r1
   100ba:	4605      	mov	r5, r0
   100bc:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
   100c0:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
   100c4:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
   100c8:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    //  console::print("render "); console::printint(left as i32); console::print(", "); console::printint(top as i32); console::print(", "); console::printint(right as i32 - left as i32); console::print(", "); console::printint(bottom as i32 - top as i32); console::print("\n"); console::flush(); ////
    //  Create a new block for the region to be updated
    let mut block = PixelIterator::new(
   100cc:	466e      	mov	r6, sp
   100ce:	6033      	str	r3, [r6, #0]
   100d0:	ab0a      	add	r3, sp, #40	; 0x28
   100d2:	9009      	str	r0, [sp, #36]	; 0x24
   100d4:	4618      	mov	r0, r3
   100d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   100d8:	9108      	str	r1, [sp, #32]
   100da:	4619      	mov	r1, r3
   100dc:	9e08      	ldr	r6, [sp, #32]
   100de:	9207      	str	r2, [sp, #28]
   100e0:	4632      	mov	r2, r6
   100e2:	9b07      	ldr	r3, [sp, #28]
   100e4:	f8cd c018 	str.w	ip, [sp, #24]
   100e8:	f8cd e014 	str.w	lr, [sp, #20]
   100ec:	9404      	str	r4, [sp, #16]
   100ee:	9503      	str	r5, [sp, #12]
   100f0:	f000 f832 	bl	10158 <_ZN3app5chip813PixelIterator3new17h975cb5db80e10243E>
   100f4:	e7ff      	b.n	100f6 <_ZN3app5chip812render_block17h6c8b81526965606bE+0x46>
   100f6:	a80a      	add	r0, sp, #40	; 0x28
        left, top, 
        right, bottom,
    );
    //  Render the block
    let (left_physical, top_physical, right_physical, bottom_physical) = block.get_window();
   100f8:	f000 f884 	bl	10204 <_ZN3app5chip813PixelIterator10get_window17h111d7a23399766c3E>
   100fc:	9010      	str	r0, [sp, #64]	; 0x40
   100fe:	9810      	ldr	r0, [sp, #64]	; 0x40
   10100:	900e      	str	r0, [sp, #56]	; 0x38
   10102:	e7ff      	b.n	10104 <_ZN3app5chip812render_block17h6c8b81526965606bE+0x54>
   10104:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
   10108:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
   1010c:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
   10110:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   10114:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   10118:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
   1011c:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   10120:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    druid::set_display_pixels(left_physical as u16, top_physical as u16, right_physical as u16, bottom_physical as u16,
   10124:	46ec      	mov	ip, sp
   10126:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1012a:	f8cc e000 	str.w	lr, [ip]
   1012e:	f001 fe46 	bl	11dbe <_ZN22piet_embedded_graphics7display18set_display_pixels17he48c5c43fd96ddebE>
   10132:	9002      	str	r0, [sp, #8]
   10134:	e7ff      	b.n	10136 <_ZN3app5chip812render_block17h6c8b81526965606bE+0x86>
   10136:	9802      	ldr	r0, [sp, #8]
   10138:	f000 0001 	and.w	r0, r0, #1
   1013c:	f240 5184 	movw	r1, #1412	; 0x584
   10140:	f2c0 0102 	movt	r1, #2
   10144:	f240 5398 	movw	r3, #1432	; 0x598
   10148:	f2c0 0302 	movt	r3, #2
   1014c:	2211      	movs	r2, #17
   1014e:	f005 fe58 	bl	15e02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   10152:	e7ff      	b.n	10154 <_ZN3app5chip812render_block17h6c8b81526965606bE+0xa4>
        &mut block
    ).expect("set pixels failed");    
}
   10154:	b012      	add	sp, #72	; 0x48
   10156:	bd70      	pop	{r4, r5, r6, pc}

00010158 <_ZN3app5chip813PixelIterator3new17h975cb5db80e10243E>:
    physical_bottom:    u8,
}

impl PixelIterator {
    /// Return a new PixelInterator for the block dimensions
    pub fn new(
   10158:	b570      	push	{r4, r5, r6, lr}
   1015a:	b08a      	sub	sp, #40	; 0x28
   1015c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   10160:	469e      	mov	lr, r3
   10162:	4614      	mov	r4, r2
   10164:	460d      	mov	r5, r1
   10166:	f88d 101c 	strb.w	r1, [sp, #28]
   1016a:	f88d 201d 	strb.w	r2, [sp, #29]
   1016e:	f88d 301e 	strb.w	r3, [sp, #30]
   10172:	f88d c01f 	strb.w	ip, [sp, #31]
        block_right:     u8,
        //  End row number for block
        block_bottom:    u8,        
    ) -> PixelIterator {
        let (physical_left, physical_top, physical_right, physical_bottom) = 
            get_bounding_box(block_left, block_top, block_right, block_bottom);
   10176:	9005      	str	r0, [sp, #20]
   10178:	4608      	mov	r0, r1
   1017a:	4611      	mov	r1, r2
   1017c:	461a      	mov	r2, r3
   1017e:	4663      	mov	r3, ip
   10180:	f8cd c010 	str.w	ip, [sp, #16]
   10184:	f8cd e00c 	str.w	lr, [sp, #12]
   10188:	9402      	str	r4, [sp, #8]
   1018a:	9501      	str	r5, [sp, #4]
   1018c:	f000 fab8 	bl	10700 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E>
   10190:	9008      	str	r0, [sp, #32]
   10192:	9808      	ldr	r0, [sp, #32]
   10194:	9006      	str	r0, [sp, #24]
   10196:	e7ff      	b.n	10198 <_ZN3app5chip813PixelIterator3new17h975cb5db80e10243E+0x40>
        let (physical_left, physical_top, physical_right, physical_bottom) = 
   10198:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1019c:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   101a0:	f89d 1019 	ldrb.w	r1, [sp, #25]
   101a4:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   101a8:	f89d 201a 	ldrb.w	r2, [sp, #26]
   101ac:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
   101b0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   101b4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        PixelIterator {
   101b8:	f8dd c004 	ldr.w	ip, [sp, #4]
   101bc:	f8dd e014 	ldr.w	lr, [sp, #20]
   101c0:	f88e c000 	strb.w	ip, [lr]
   101c4:	9c02      	ldr	r4, [sp, #8]
   101c6:	f88e 4001 	strb.w	r4, [lr, #1]
   101ca:	2500      	movs	r5, #0
   101cc:	f88e 5002 	strb.w	r5, [lr, #2]
   101d0:	f88e 5003 	strb.w	r5, [lr, #3]
   101d4:	f88e 0004 	strb.w	r0, [lr, #4]
   101d8:	f88e 1005 	strb.w	r1, [lr, #5]
   101dc:	f88e c006 	strb.w	ip, [lr, #6]
   101e0:	9d03      	ldr	r5, [sp, #12]
   101e2:	f88e 5007 	strb.w	r5, [lr, #7]
   101e6:	f88e 4008 	strb.w	r4, [lr, #8]
   101ea:	9e04      	ldr	r6, [sp, #16]
   101ec:	f88e 6009 	strb.w	r6, [lr, #9]
   101f0:	f88e 000a 	strb.w	r0, [lr, #10]
   101f4:	f88e 200b 	strb.w	r2, [lr, #11]
   101f8:	f88e 100c 	strb.w	r1, [lr, #12]
   101fc:	f88e 300d 	strb.w	r3, [lr, #13]
            x_physical: physical_left,
            y_physical: physical_top,
            block_left, block_right, block_top, block_bottom,
            physical_left, physical_top, physical_right, physical_bottom
        }
    }
   10200:	b00a      	add	sp, #40	; 0x28
   10202:	bd70      	pop	{r4, r5, r6, pc}

00010204 <_ZN3app5chip813PixelIterator10get_window17h111d7a23399766c3E>:
        x >= self.block_left && x <= self.block_right &&
            y >= self.block_top && y <= self.block_bottom
    }

    /// Return window of Physical Pixels (left, top, right, bottom) for this Virtual Block
    pub fn get_window(&self) -> (u8, u8, u8, u8) {
   10204:	b082      	sub	sp, #8
   10206:	9001      	str	r0, [sp, #4]
        ( self.physical_left, self.physical_top, self.physical_right, self.physical_bottom )
   10208:	7a81      	ldrb	r1, [r0, #10]
   1020a:	7ac2      	ldrb	r2, [r0, #11]
   1020c:	7b03      	ldrb	r3, [r0, #12]
   1020e:	7b40      	ldrb	r0, [r0, #13]
   10210:	f88d 1000 	strb.w	r1, [sp]
   10214:	f88d 3001 	strb.w	r3, [sp, #1]
   10218:	f88d 2002 	strb.w	r2, [sp, #2]
   1021c:	f88d 0003 	strb.w	r0, [sp, #3]
    }
   10220:	9800      	ldr	r0, [sp, #0]
   10222:	b002      	add	sp, #8
   10224:	4770      	bx	lr

00010226 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE>:

    /// Return the 16-bit colour of the Virtual Pixel
    fn get_color(&mut self) -> u16 {
   10226:	b580      	push	{r7, lr}
   10228:	b08a      	sub	sp, #40	; 0x28
   1022a:	9007      	str	r0, [sp, #28]
        assert!(self.x < SCREEN_WIDTH as u8 && self.y < SCREEN_HEIGHT as u8, "color overflow");
   1022c:	7801      	ldrb	r1, [r0, #0]
   1022e:	2940      	cmp	r1, #64	; 0x40
   10230:	9005      	str	r0, [sp, #20]
   10232:	d308      	bcc.n	10246 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x20>
   10234:	e003      	b.n	1023e <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x18>
   10236:	2001      	movs	r0, #1
   10238:	f88d 001a 	strb.w	r0, [sp, #26]
   1023c:	e008      	b.n	10250 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x2a>
   1023e:	2000      	movs	r0, #0
   10240:	f88d 001a 	strb.w	r0, [sp, #26]
   10244:	e004      	b.n	10250 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x2a>
   10246:	9805      	ldr	r0, [sp, #20]
   10248:	7841      	ldrb	r1, [r0, #1]
   1024a:	2920      	cmp	r1, #32
   1024c:	d3f3      	bcc.n	10236 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x10>
   1024e:	e7f6      	b.n	1023e <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x18>
   10250:	f89d 001a 	ldrb.w	r0, [sp, #26]
   10254:	07c0      	lsls	r0, r0, #31
   10256:	2800      	cmp	r0, #0
   10258:	d00a      	beq.n	10270 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x4a>
   1025a:	e7ff      	b.n	1025c <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x36>
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
   1025c:	9805      	ldr	r0, [sp, #20]
   1025e:	7801      	ldrb	r1, [r0, #0]
   10260:	7842      	ldrb	r2, [r0, #1]
   10262:	0192      	lsls	r2, r2, #6
   10264:	2300      	movs	r3, #0
   10266:	2b00      	cmp	r3, #0
   10268:	9104      	str	r1, [sp, #16]
   1026a:	9203      	str	r2, [sp, #12]
   1026c:	d161      	bne.n	10332 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x10c>
   1026e:	e00b      	b.n	10288 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x62>
        assert!(self.x < SCREEN_WIDTH as u8 && self.y < SCREEN_HEIGHT as u8, "color overflow");
   10270:	f240 50a8 	movw	r0, #1448	; 0x5a8
   10274:	f2c0 0002 	movt	r0, #2
   10278:	f240 52b8 	movw	r2, #1464	; 0x5b8
   1027c:	f2c0 0202 	movt	r2, #2
   10280:	210e      	movs	r1, #14
   10282:	f008 f955 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10286:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
   10288:	9804      	ldr	r0, [sp, #16]
   1028a:	9903      	ldr	r1, [sp, #12]
   1028c:	1842      	adds	r2, r0, r1
   1028e:	4613      	mov	r3, r2
   10290:	4282      	cmp	r2, r0
   10292:	9302      	str	r3, [sp, #8]
   10294:	d359      	bcc.n	1034a <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x124>
   10296:	e7ff      	b.n	10298 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x72>
   10298:	9802      	ldr	r0, [sp, #8]
   1029a:	9008      	str	r0, [sp, #32]
   1029c:	2100      	movs	r1, #0
        let color = unsafe { convert_color(SCREEN_BUFFER[i]) };
   1029e:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
   102a2:	d15e      	bne.n	10362 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x13c>
   102a4:	e7ff      	b.n	102a6 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x80>
   102a6:	f244 10b4 	movw	r0, #16820	; 0x41b4
   102aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
   102ae:	9902      	ldr	r1, [sp, #8]
   102b0:	5c40      	ldrb	r0, [r0, r1]
   102b2:	f000 f93d 	bl	10530 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E>
   102b6:	4601      	mov	r1, r0
   102b8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   102bc:	9101      	str	r1, [sp, #4]
   102be:	e7ff      	b.n	102c0 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x9a>
        if self.x_offset == 0 && self.y_offset == 0 {  //  Update colours only once per Virtual Pixel
   102c0:	9805      	ldr	r0, [sp, #20]
   102c2:	7881      	ldrb	r1, [r0, #2]
   102c4:	2900      	cmp	r1, #0
   102c6:	d008      	beq.n	102da <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xb4>
   102c8:	e003      	b.n	102d2 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xac>
   102ca:	2001      	movs	r0, #1
   102cc:	f88d 001b 	strb.w	r0, [sp, #27]
   102d0:	e008      	b.n	102e4 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xbe>
   102d2:	2000      	movs	r0, #0
   102d4:	f88d 001b 	strb.w	r0, [sp, #27]
   102d8:	e004      	b.n	102e4 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xbe>
   102da:	9805      	ldr	r0, [sp, #20]
   102dc:	78c1      	ldrb	r1, [r0, #3]
   102de:	2900      	cmp	r1, #0
   102e0:	d0f3      	beq.n	102ca <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xa4>
   102e2:	e7f6      	b.n	102d2 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xac>
   102e4:	f89d 001b 	ldrb.w	r0, [sp, #27]
   102e8:	07c0      	lsls	r0, r0, #31
   102ea:	2800      	cmp	r0, #0
   102ec:	d01e      	beq.n	1032c <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x106>
   102ee:	e7ff      	b.n	102f0 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xca>
   102f0:	2000      	movs	r0, #0
            unsafe { SCREEN_BUFFER[i] = update_color(SCREEN_BUFFER[i]); }  //  Fade to black
   102f2:	9902      	ldr	r1, [sp, #8]
   102f4:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
   102f8:	d13d      	bne.n	10376 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x150>
   102fa:	e7ff      	b.n	102fc <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xd6>
   102fc:	f244 10b4 	movw	r0, #16820	; 0x41b4
   10300:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10304:	9902      	ldr	r1, [sp, #8]
   10306:	5c40      	ldrb	r0, [r0, r1]
   10308:	f000 f99f 	bl	1064a <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E>
   1030c:	9000      	str	r0, [sp, #0]
   1030e:	e7ff      	b.n	10310 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xea>
   10310:	2000      	movs	r0, #0
   10312:	9902      	ldr	r1, [sp, #8]
   10314:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
   10318:	d137      	bne.n	1038a <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x164>
   1031a:	e7ff      	b.n	1031c <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xf6>
   1031c:	f244 10b4 	movw	r0, #16820	; 0x41b4
   10320:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10324:	9900      	ldr	r1, [sp, #0]
   10326:	9a02      	ldr	r2, [sp, #8]
   10328:	5481      	strb	r1, [r0, r2]
        if self.x_offset == 0 && self.y_offset == 0 {  //  Update colours only once per Virtual Pixel
   1032a:	e7ff      	b.n	1032c <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x106>
        }
        color
    }    
   1032c:	9801      	ldr	r0, [sp, #4]
   1032e:	b00a      	add	sp, #40	; 0x28
   10330:	bd80      	pop	{r7, pc}
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
   10332:	f240 3060 	movw	r0, #864	; 0x360
   10336:	f2c0 0002 	movt	r0, #2
   1033a:	f240 52c8 	movw	r2, #1480	; 0x5c8
   1033e:	f2c0 0202 	movt	r2, #2
   10342:	2121      	movs	r1, #33	; 0x21
   10344:	f008 f8f4 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10348:	defe      	udf	#254	; 0xfe
   1034a:	f240 30a0 	movw	r0, #928	; 0x3a0
   1034e:	f2c0 0002 	movt	r0, #2
   10352:	f240 52d8 	movw	r2, #1496	; 0x5d8
   10356:	f2c0 0202 	movt	r2, #2
   1035a:	211c      	movs	r1, #28
   1035c:	f008 f8e8 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10360:	defe      	udf	#254	; 0xfe
        let color = unsafe { convert_color(SCREEN_BUFFER[i]) };
   10362:	f240 50e8 	movw	r0, #1512	; 0x5e8
   10366:	f2c0 0002 	movt	r0, #2
   1036a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1036e:	9902      	ldr	r1, [sp, #8]
   10370:	f008 f8f4 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10374:	defe      	udf	#254	; 0xfe
            unsafe { SCREEN_BUFFER[i] = update_color(SCREEN_BUFFER[i]); }  //  Fade to black
   10376:	f240 50f8 	movw	r0, #1528	; 0x5f8
   1037a:	f2c0 0002 	movt	r0, #2
   1037e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10382:	9902      	ldr	r1, [sp, #8]
   10384:	f008 f8ea 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10388:	defe      	udf	#254	; 0xfe
   1038a:	f240 6008 	movw	r0, #1544	; 0x608
   1038e:	f2c0 0002 	movt	r0, #2
   10392:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10396:	9902      	ldr	r1, [sp, #8]
   10398:	f008 f8e0 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1039c:	defe      	udf	#254	; 0xfe

0001039e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE>:
        return Some(color);
    }

    /// Return the next Physical Pixel colour
    #[cfg(feature = "chip8_curve")]  //  If we are rendering CHIP8 Emulator as curved surface...
    fn next(&mut self) -> Option<Self::Item> {
   1039e:	b580      	push	{r7, lr}
   103a0:	b08c      	sub	sp, #48	; 0x30
   103a2:	900a      	str	r0, [sp, #40]	; 0x28
        if self.y_physical > self.physical_bottom { return None; }  //  No more Physical Pixels
   103a4:	7941      	ldrb	r1, [r0, #5]
   103a6:	7b42      	ldrb	r2, [r0, #13]
   103a8:	4291      	cmp	r1, r2
   103aa:	9007      	str	r0, [sp, #28]
   103ac:	d805      	bhi.n	103ba <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x1c>
   103ae:	e7ff      	b.n	103b0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x12>
        assert!(self.x_physical < PHYSICAL_WIDTH as u8, "x overflow");
   103b0:	9807      	ldr	r0, [sp, #28]
   103b2:	7901      	ldrb	r1, [r0, #4]
   103b4:	29ef      	cmp	r1, #239	; 0xef
   103b6:	d80f      	bhi.n	103d8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x3a>
   103b8:	e009      	b.n	103ce <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x30>
   103ba:	2000      	movs	r0, #0
        if self.y_physical > self.physical_bottom { return None; }  //  No more Physical Pixels
   103bc:	f8ad 0020 	strh.w	r0, [sp, #32]
   103c0:	e7ff      	b.n	103c2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x24>
            self.y_physical += 1;
        }
        
        //  Return the Physical Pixel color
        return Some(color);
    }    
   103c2:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   103c6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   103ca:	b00c      	add	sp, #48	; 0x30
   103cc:	bd80      	pop	{r7, pc}
        assert!(self.y_physical < PHYSICAL_HEIGHT as u8, "y overflow");
   103ce:	9807      	ldr	r0, [sp, #28]
   103d0:	7941      	ldrb	r1, [r0, #5]
   103d2:	29c7      	cmp	r1, #199	; 0xc7
   103d4:	d81b      	bhi.n	1040e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x70>
   103d6:	e00b      	b.n	103f0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x52>
        assert!(self.x_physical < PHYSICAL_WIDTH as u8, "x overflow");
   103d8:	f240 300c 	movw	r0, #780	; 0x30c
   103dc:	f2c0 0002 	movt	r0, #2
   103e0:	f240 6218 	movw	r2, #1560	; 0x618
   103e4:	f2c0 0202 	movt	r2, #2
   103e8:	210a      	movs	r1, #10
   103ea:	f008 f8a1 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   103ee:	defe      	udf	#254	; 0xfe
        let virtual_pixel = map_physical_to_virtual(self.x_physical, self.y_physical);
   103f0:	9807      	ldr	r0, [sp, #28]
   103f2:	7900      	ldrb	r0, [r0, #4]
   103f4:	9907      	ldr	r1, [sp, #28]
   103f6:	7949      	ldrb	r1, [r1, #5]
   103f8:	f000 fa1e 	bl	10838 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E>
   103fc:	4602      	mov	r2, r0
   103fe:	460b      	mov	r3, r1
   10400:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
   10404:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
   10408:	9206      	str	r2, [sp, #24]
   1040a:	9305      	str	r3, [sp, #20]
   1040c:	e00b      	b.n	10426 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x88>
        assert!(self.y_physical < PHYSICAL_HEIGHT as u8, "y overflow");
   1040e:	f240 3028 	movw	r0, #808	; 0x328
   10412:	f2c0 0002 	movt	r0, #2
   10416:	f240 6228 	movw	r2, #1576	; 0x628
   1041a:	f2c0 0202 	movt	r2, #2
   1041e:	210a      	movs	r1, #10
   10420:	f008 f886 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10424:	defe      	udf	#254	; 0xfe
        if self.x == virtual_pixel.0 && self.y == virtual_pixel.1 {
   10426:	9807      	ldr	r0, [sp, #28]
   10428:	7801      	ldrb	r1, [r0, #0]
   1042a:	9a06      	ldr	r2, [sp, #24]
   1042c:	b2d3      	uxtb	r3, r2
   1042e:	4299      	cmp	r1, r3
   10430:	d008      	beq.n	10444 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xa6>
   10432:	e003      	b.n	1043c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x9e>
   10434:	2001      	movs	r0, #1
   10436:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   1043a:	e00a      	b.n	10452 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xb4>
   1043c:	2000      	movs	r0, #0
   1043e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   10442:	e006      	b.n	10452 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xb4>
   10444:	9807      	ldr	r0, [sp, #28]
   10446:	7841      	ldrb	r1, [r0, #1]
   10448:	9a05      	ldr	r2, [sp, #20]
   1044a:	b2d3      	uxtb	r3, r2
   1044c:	4299      	cmp	r1, r3
   1044e:	d0f1      	beq.n	10434 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x96>
   10450:	e7f4      	b.n	1043c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x9e>
   10452:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   10456:	07c0      	lsls	r0, r0, #31
   10458:	2800      	cmp	r0, #0
   1045a:	d109      	bne.n	10470 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xd2>
   1045c:	e7ff      	b.n	1045e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xc0>
            self.x = virtual_pixel.0;
   1045e:	9806      	ldr	r0, [sp, #24]
   10460:	9907      	ldr	r1, [sp, #28]
   10462:	7008      	strb	r0, [r1, #0]
            self.y = virtual_pixel.1;
   10464:	9a05      	ldr	r2, [sp, #20]
   10466:	704a      	strb	r2, [r1, #1]
   10468:	2300      	movs	r3, #0
            self.x_offset = 0;
   1046a:	708b      	strb	r3, [r1, #2]
            self.y_offset = 0;
   1046c:	70cb      	strb	r3, [r1, #3]
        if self.x == virtual_pixel.0 && self.y == virtual_pixel.1 {
   1046e:	e00c      	b.n	1048a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xec>
            self.x_offset += 1;
   10470:	9807      	ldr	r0, [sp, #28]
   10472:	7881      	ldrb	r1, [r0, #2]
   10474:	3101      	adds	r1, #1
   10476:	b2ca      	uxtb	r2, r1
   10478:	460b      	mov	r3, r1
   1047a:	428a      	cmp	r2, r1
   1047c:	9304      	str	r3, [sp, #16]
   1047e:	d133      	bne.n	104e8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x14a>
   10480:	e7ff      	b.n	10482 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xe4>
   10482:	9804      	ldr	r0, [sp, #16]
   10484:	9907      	ldr	r1, [sp, #28]
   10486:	7088      	strb	r0, [r1, #2]
        if self.x == virtual_pixel.0 && self.y == virtual_pixel.1 {
   10488:	e7ff      	b.n	1048a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xec>
        let color = self.get_color();
   1048a:	9807      	ldr	r0, [sp, #28]
   1048c:	f7ff fecb 	bl	10226 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE>
   10490:	4601      	mov	r1, r0
   10492:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
   10496:	9103      	str	r1, [sp, #12]
   10498:	e7ff      	b.n	1049a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xfc>
        self.x_physical += 1;
   1049a:	9807      	ldr	r0, [sp, #28]
   1049c:	7901      	ldrb	r1, [r0, #4]
   1049e:	3101      	adds	r1, #1
   104a0:	b2ca      	uxtb	r2, r1
   104a2:	460b      	mov	r3, r1
   104a4:	428a      	cmp	r2, r1
   104a6:	9302      	str	r3, [sp, #8]
   104a8:	d12a      	bne.n	10500 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x162>
   104aa:	e7ff      	b.n	104ac <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x10e>
   104ac:	9802      	ldr	r0, [sp, #8]
   104ae:	9907      	ldr	r1, [sp, #28]
   104b0:	7108      	strb	r0, [r1, #4]
        if self.x_physical > self.physical_right {
   104b2:	790a      	ldrb	r2, [r1, #4]
   104b4:	7acb      	ldrb	r3, [r1, #11]
   104b6:	429a      	cmp	r2, r3
   104b8:	d90f      	bls.n	104da <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x13c>
   104ba:	e7ff      	b.n	104bc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x11e>
            self.x_physical = self.physical_left;
   104bc:	9807      	ldr	r0, [sp, #28]
   104be:	7a81      	ldrb	r1, [r0, #10]
   104c0:	7101      	strb	r1, [r0, #4]
            self.y_physical += 1;
   104c2:	7941      	ldrb	r1, [r0, #5]
   104c4:	3101      	adds	r1, #1
   104c6:	b2ca      	uxtb	r2, r1
   104c8:	460b      	mov	r3, r1
   104ca:	428a      	cmp	r2, r1
   104cc:	9301      	str	r3, [sp, #4]
   104ce:	d123      	bne.n	10518 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x17a>
   104d0:	e7ff      	b.n	104d2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x134>
   104d2:	9801      	ldr	r0, [sp, #4]
   104d4:	9907      	ldr	r1, [sp, #28]
   104d6:	7148      	strb	r0, [r1, #5]
        if self.x_physical > self.physical_right {
   104d8:	e7ff      	b.n	104da <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x13c>
        return Some(color);
   104da:	9803      	ldr	r0, [sp, #12]
   104dc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
   104e0:	2101      	movs	r1, #1
   104e2:	f8ad 1020 	strh.w	r1, [sp, #32]
   104e6:	e76c      	b.n	103c2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x24>
            self.x_offset += 1;
   104e8:	f240 30a0 	movw	r0, #928	; 0x3a0
   104ec:	f2c0 0002 	movt	r0, #2
   104f0:	f240 6238 	movw	r2, #1592	; 0x638
   104f4:	f2c0 0202 	movt	r2, #2
   104f8:	211c      	movs	r1, #28
   104fa:	f008 f819 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   104fe:	defe      	udf	#254	; 0xfe
        self.x_physical += 1;
   10500:	f240 30a0 	movw	r0, #928	; 0x3a0
   10504:	f2c0 0002 	movt	r0, #2
   10508:	f240 6248 	movw	r2, #1608	; 0x648
   1050c:	f2c0 0202 	movt	r2, #2
   10510:	211c      	movs	r1, #28
   10512:	f008 f80d 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10516:	defe      	udf	#254	; 0xfe
            self.y_physical += 1;
   10518:	f240 30a0 	movw	r0, #928	; 0x3a0
   1051c:	f2c0 0002 	movt	r0, #2
   10520:	f240 6258 	movw	r2, #1624	; 0x658
   10524:	f2c0 0202 	movt	r2, #2
   10528:	211c      	movs	r1, #28
   1052a:	f008 f801 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1052e:	defe      	udf	#254	; 0xfe

00010530 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E>:
}

/// Convert the Virtual Colour (8-bit greyscale) to 16-bit Colour
fn convert_color(grey: u8) -> u16 {
   10530:	b580      	push	{r7, lr}
   10532:	b08a      	sub	sp, #40	; 0x28
   10534:	b2c1      	uxtb	r1, r0
   10536:	4602      	mov	r2, r0
   10538:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    match grey {
        250..=255 => Rgb565::from(( grey, grey, grey )).0,  //  White
   1053c:	29fa      	cmp	r1, #250	; 0xfa
   1053e:	9205      	str	r2, [sp, #20]
   10540:	d304      	bcc.n	1054c <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x1c>
   10542:	e7ff      	b.n	10544 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x14>
   10544:	2001      	movs	r0, #1
   10546:	2800      	cmp	r0, #0
   10548:	d11d      	bne.n	10586 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x56>
   1054a:	e7ff      	b.n	1054c <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x1c>
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
   1054c:	9805      	ldr	r0, [sp, #20]
   1054e:	b241      	sxtb	r1, r0
   10550:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   10554:	dc05      	bgt.n	10562 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x32>
   10556:	e7ff      	b.n	10558 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x28>
   10558:	9805      	ldr	r0, [sp, #20]
   1055a:	b2c1      	uxtb	r1, r0
   1055c:	29fa      	cmp	r1, #250	; 0xfa
   1055e:	d327      	bcc.n	105b0 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x80>
   10560:	e7ff      	b.n	10562 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x32>
   10562:	2000      	movs	r0, #0
        0..128   => Rgb565::from(( 0, 0, grey )).0,  //  Dark Blue
   10564:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   10568:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   1056c:	9805      	ldr	r0, [sp, #20]
   1056e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
   10572:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
   10576:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1057a:	ea42 4001 	orr.w	r0, r2, r1, lsl #16
   1057e:	f002 f834 	bl	125ea <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
   10582:	9004      	str	r0, [sp, #16]
   10584:	e041      	b.n	1060a <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xda>
        250..=255 => Rgb565::from(( grey, grey, grey )).0,  //  White
   10586:	9805      	ldr	r0, [sp, #20]
   10588:	f88d 001c 	strb.w	r0, [sp, #28]
   1058c:	f88d 001d 	strb.w	r0, [sp, #29]
   10590:	f88d 001e 	strb.w	r0, [sp, #30]
   10594:	f89d 101e 	ldrb.w	r1, [sp, #30]
   10598:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   1059c:	ea42 4001 	orr.w	r0, r2, r1, lsl #16
   105a0:	f002 f823 	bl	125ea <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
   105a4:	9003      	str	r0, [sp, #12]
   105a6:	e7ff      	b.n	105a8 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x78>
   105a8:	9803      	ldr	r0, [sp, #12]
   105aa:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
   105ae:	e030      	b.n	10612 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xe2>
   105b0:	f06f 0063 	mvn.w	r0, #99	; 0x63
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
   105b4:	9905      	ldr	r1, [sp, #20]
   105b6:	fa50 f081 	uxtab	r0, r0, r1
   105ba:	b2c2      	uxtb	r2, r0
   105bc:	4603      	mov	r3, r0
   105be:	4282      	cmp	r2, r0
   105c0:	9302      	str	r3, [sp, #8]
   105c2:	d12a      	bne.n	1061a <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xea>
   105c4:	e7ff      	b.n	105c6 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x96>
   105c6:	f06f 0063 	mvn.w	r0, #99	; 0x63
   105ca:	9905      	ldr	r1, [sp, #20]
   105cc:	fa50 f081 	uxtab	r0, r0, r1
   105d0:	b2c2      	uxtb	r2, r0
   105d2:	4603      	mov	r3, r0
   105d4:	4282      	cmp	r2, r0
   105d6:	9301      	str	r3, [sp, #4]
   105d8:	d12b      	bne.n	10632 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x102>
   105da:	e7ff      	b.n	105dc <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xac>
   105dc:	9802      	ldr	r0, [sp, #8]
   105de:	f88d 0020 	strb.w	r0, [sp, #32]
   105e2:	9905      	ldr	r1, [sp, #20]
   105e4:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   105e8:	9a01      	ldr	r2, [sp, #4]
   105ea:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   105ee:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   105f2:	f8bd c020 	ldrh.w	ip, [sp, #32]
   105f6:	ea4c 4003 	orr.w	r0, ip, r3, lsl #16
   105fa:	f001 fff6 	bl	125ea <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
   105fe:	9000      	str	r0, [sp, #0]
   10600:	e7ff      	b.n	10602 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xd2>
   10602:	9800      	ldr	r0, [sp, #0]
   10604:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
   10608:	e003      	b.n	10612 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xe2>
        0..128   => Rgb565::from(( 0, 0, grey )).0,  //  Dark Blue
   1060a:	9804      	ldr	r0, [sp, #16]
   1060c:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
   10610:	e7ff      	b.n	10612 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xe2>
    }
}
   10612:	f8bd 001a 	ldrh.w	r0, [sp, #26]
   10616:	b00a      	add	sp, #40	; 0x28
   10618:	bd80      	pop	{r7, pc}
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
   1061a:	f240 4080 	movw	r0, #1152	; 0x480
   1061e:	f2c0 0002 	movt	r0, #2
   10622:	f240 6268 	movw	r2, #1640	; 0x668
   10626:	f2c0 0202 	movt	r2, #2
   1062a:	2121      	movs	r1, #33	; 0x21
   1062c:	f007 ff80 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10630:	defe      	udf	#254	; 0xfe
   10632:	f240 4080 	movw	r0, #1152	; 0x480
   10636:	f2c0 0002 	movt	r0, #2
   1063a:	f240 6278 	movw	r2, #1656	; 0x678
   1063e:	f2c0 0202 	movt	r2, #2
   10642:	2121      	movs	r1, #33	; 0x21
   10644:	f007 ff74 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10648:	defe      	udf	#254	; 0xfe

0001064a <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E>:

/// Fade the Virtual Colour (8-bit greyscale) to black
fn update_color(grey: u8) -> u8 {
   1064a:	b084      	sub	sp, #16
   1064c:	b2c1      	uxtb	r1, r0
   1064e:	4602      	mov	r2, r0
   10650:	f88d 000f 	strb.w	r0, [sp, #15]
    match grey {
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
   10654:	29c8      	cmp	r1, #200	; 0xc8
   10656:	9202      	str	r2, [sp, #8]
   10658:	d304      	bcc.n	10664 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x1a>
   1065a:	e7ff      	b.n	1065c <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x12>
   1065c:	2001      	movs	r0, #1
   1065e:	2800      	cmp	r0, #0
   10660:	d110      	bne.n	10684 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x3a>
   10662:	e7ff      	b.n	10664 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x1a>
        128..200 => grey,        //  Normal white stays the same
   10664:	9802      	ldr	r0, [sp, #8]
   10666:	b241      	sxtb	r1, r0
   10668:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1066c:	dc05      	bgt.n	1067a <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x30>
   1066e:	e7ff      	b.n	10670 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x26>
   10670:	9802      	ldr	r0, [sp, #8]
   10672:	b2c1      	uxtb	r1, r0
   10674:	29c8      	cmp	r1, #200	; 0xc8
   10676:	d314      	bcc.n	106a2 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x58>
   10678:	e7ff      	b.n	1067a <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x30>
        0..128   => grey >> 1,   //  Dark fade to black
   1067a:	9802      	ldr	r0, [sp, #8]
   1067c:	b2c1      	uxtb	r1, r0
   1067e:	0849      	lsrs	r1, r1, #1
   10680:	9101      	str	r1, [sp, #4]
   10682:	e012      	b.n	106aa <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x60>
   10684:	f06f 0001 	mvn.w	r0, #1
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
   10688:	9902      	ldr	r1, [sp, #8]
   1068a:	fa50 f081 	uxtab	r0, r0, r1
   1068e:	b2c2      	uxtb	r2, r0
   10690:	4603      	mov	r3, r0
   10692:	4282      	cmp	r2, r0
   10694:	9300      	str	r3, [sp, #0]
   10696:	d110      	bne.n	106ba <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x70>
   10698:	e7ff      	b.n	1069a <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x50>
   1069a:	9800      	ldr	r0, [sp, #0]
   1069c:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
   106a0:	e007      	b.n	106b2 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x68>
        128..200 => grey,        //  Normal white stays the same
   106a2:	9802      	ldr	r0, [sp, #8]
   106a4:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
   106a8:	e003      	b.n	106b2 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x68>
        0..128   => grey >> 1,   //  Dark fade to black
   106aa:	9801      	ldr	r0, [sp, #4]
   106ac:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
   106b0:	e7ff      	b.n	106b2 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x68>
    }
}
   106b2:	f89d 000e 	ldrb.w	r0, [sp, #14]
   106b6:	b004      	add	sp, #16
   106b8:	4770      	bx	lr
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
   106ba:	f240 4080 	movw	r0, #1152	; 0x480
   106be:	f2c0 0002 	movt	r0, #2
   106c2:	f240 6288 	movw	r2, #1672	; 0x688
   106c6:	f2c0 0202 	movt	r2, #2
   106ca:	2121      	movs	r1, #33	; 0x21
   106cc:	f007 ff30 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   106d0:	defe      	udf	#254	; 0xfe

000106d2 <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E>:

/// TODO: Handle touch events to emulate buttons
pub fn handle_touch(_x: u16, _y: u16) { 
   106d2:	b580      	push	{r7, lr}
   106d4:	b084      	sub	sp, #16
   106d6:	460a      	mov	r2, r1
   106d8:	4603      	mov	r3, r0
   106da:	f8ad 000c 	strh.w	r0, [sp, #12]
   106de:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
   106e2:	f240 6098 	movw	r0, #1688	; 0x698
   106e6:	f2c0 0002 	movt	r0, #2
   106ea:	2118      	movs	r1, #24
   106ec:	9202      	str	r2, [sp, #8]
   106ee:	9301      	str	r3, [sp, #4]
   106f0:	f7f8 fd02 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
   106f4:	e7ff      	b.n	106f6 <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E+0x24>
   106f6:	f7f8 fd45 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
   106fa:	e7ff      	b.n	106fc <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E+0x2a>
}
   106fc:	b004      	add	sp, #16
   106fe:	bd80      	pop	{r7, pc}

00010700 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E>:
    ( left, top, right, bottom )
}

/// Return Bounding Box of Physical Pixels (left, top, right, bottom) that correspond to the Virtual Pixels
#[cfg(feature = "chip8_curve")]  //  If we are rendering CHIP8 Emulator as curved surface...
fn get_bounding_box(virtual_left: u8, virtual_top: u8, virtual_right: u8, virtual_bottom: u8) -> (u8, u8, u8, u8) {
   10700:	b5b0      	push	{r4, r5, r7, lr}
   10702:	b090      	sub	sp, #64	; 0x40
   10704:	469c      	mov	ip, r3
   10706:	4696      	mov	lr, r2
   10708:	460c      	mov	r4, r1
   1070a:	4605      	mov	r5, r0
   1070c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   10710:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
   10714:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   10718:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    //  One Virtual Pixel may map to multiple Physical Pixels, so we lookup the Physical Bounding Box.
    //  TODO: Handle wide and tall Bounding Boxes
    let physical_left_top = map_virtual_to_physical(virtual_left, virtual_top);  //  Returns (left,top,right,bottom)
   1071c:	f8cd c01c 	str.w	ip, [sp, #28]
   10720:	f8cd e018 	str.w	lr, [sp, #24]
   10724:	9405      	str	r4, [sp, #20]
   10726:	9504      	str	r5, [sp, #16]
   10728:	f000 fa15 	bl	10b56 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE>
   1072c:	900d      	str	r0, [sp, #52]	; 0x34
   1072e:	980d      	ldr	r0, [sp, #52]	; 0x34
   10730:	9009      	str	r0, [sp, #36]	; 0x24
   10732:	e7ff      	b.n	10734 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x34>
    let physical_right_bottom = map_virtual_to_physical(virtual_right, virtual_bottom);
   10734:	9806      	ldr	r0, [sp, #24]
   10736:	9907      	ldr	r1, [sp, #28]
   10738:	f000 fa0d 	bl	10b56 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE>
   1073c:	900e      	str	r0, [sp, #56]	; 0x38
   1073e:	980e      	ldr	r0, [sp, #56]	; 0x38
   10740:	900a      	str	r0, [sp, #40]	; 0x28
   10742:	e7ff      	b.n	10744 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x44>

    let left: u8 = physical_left_top.0;
   10744:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   10748:	4601      	mov	r1, r0
   1074a:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
    let top: u8 = physical_left_top.1;
   1074e:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
   10752:	4602      	mov	r2, r0
   10754:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    let right: u8 = physical_right_bottom.2.min(PHYSICAL_WIDTH as u8 - 1);
   10758:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   1075c:	23ef      	movs	r3, #239	; 0xef
   1075e:	9103      	str	r1, [sp, #12]
   10760:	4619      	mov	r1, r3
   10762:	9202      	str	r2, [sp, #8]
   10764:	f007 f86f 	bl	17846 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10768:	4601      	mov	r1, r0
   1076a:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
   1076e:	9101      	str	r1, [sp, #4]
   10770:	e7ff      	b.n	10772 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x72>
    let bottom: u8 = physical_right_bottom.3.min(PHYSICAL_HEIGHT as u8 - 1);
   10772:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   10776:	21c7      	movs	r1, #199	; 0xc7
   10778:	f007 f865 	bl	17846 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   1077c:	4601      	mov	r1, r0
   1077e:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   10782:	9100      	str	r1, [sp, #0]
   10784:	e7ff      	b.n	10786 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x86>
    assert!(left < PHYSICAL_WIDTH as u8 && top < PHYSICAL_HEIGHT as u8 && right < PHYSICAL_WIDTH as u8 && bottom < PHYSICAL_HEIGHT as u8, "overflow");
   10786:	9803      	ldr	r0, [sp, #12]
   10788:	b2c1      	uxtb	r1, r0
   1078a:	29f0      	cmp	r1, #240	; 0xf0
   1078c:	d32e      	bcc.n	107ec <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xec>
   1078e:	e029      	b.n	107e4 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xe4>
   10790:	2001      	movs	r0, #1
   10792:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   10796:	e008      	b.n	107aa <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xaa>
   10798:	2000      	movs	r0, #0
   1079a:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   1079e:	e004      	b.n	107aa <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xaa>
   107a0:	9800      	ldr	r0, [sp, #0]
   107a2:	b2c1      	uxtb	r1, r0
   107a4:	29c8      	cmp	r1, #200	; 0xc8
   107a6:	d3f3      	bcc.n	10790 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x90>
   107a8:	e7f6      	b.n	10798 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x98>
   107aa:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   107ae:	07c0      	lsls	r0, r0, #31
   107b0:	2800      	cmp	r0, #0
   107b2:	d035      	beq.n	10820 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x120>
   107b4:	e025      	b.n	10802 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x102>
   107b6:	2001      	movs	r0, #1
   107b8:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   107bc:	e008      	b.n	107d0 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xd0>
   107be:	2000      	movs	r0, #0
   107c0:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   107c4:	e004      	b.n	107d0 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xd0>
   107c6:	9801      	ldr	r0, [sp, #4]
   107c8:	b2c1      	uxtb	r1, r0
   107ca:	29f0      	cmp	r1, #240	; 0xf0
   107cc:	d3f3      	bcc.n	107b6 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xb6>
   107ce:	e7f6      	b.n	107be <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xbe>
   107d0:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   107d4:	07c0      	lsls	r0, r0, #31
   107d6:	2800      	cmp	r0, #0
   107d8:	d1e2      	bne.n	107a0 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xa0>
   107da:	e7dd      	b.n	10798 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x98>
   107dc:	2001      	movs	r0, #1
   107de:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   107e2:	e008      	b.n	107f6 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xf6>
   107e4:	2000      	movs	r0, #0
   107e6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   107ea:	e004      	b.n	107f6 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xf6>
   107ec:	9802      	ldr	r0, [sp, #8]
   107ee:	b2c1      	uxtb	r1, r0
   107f0:	29c8      	cmp	r1, #200	; 0xc8
   107f2:	d3f3      	bcc.n	107dc <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xdc>
   107f4:	e7f6      	b.n	107e4 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xe4>
   107f6:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   107fa:	07c0      	lsls	r0, r0, #31
   107fc:	2800      	cmp	r0, #0
   107fe:	d1e2      	bne.n	107c6 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xc6>
   10800:	e7dd      	b.n	107be <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xbe>
    ( left, top, right, bottom )
   10802:	9803      	ldr	r0, [sp, #12]
   10804:	f88d 0020 	strb.w	r0, [sp, #32]
   10808:	9902      	ldr	r1, [sp, #8]
   1080a:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   1080e:	9a01      	ldr	r2, [sp, #4]
   10810:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   10814:	9b00      	ldr	r3, [sp, #0]
   10816:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
}
   1081a:	9808      	ldr	r0, [sp, #32]
   1081c:	b010      	add	sp, #64	; 0x40
   1081e:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(left < PHYSICAL_WIDTH as u8 && top < PHYSICAL_HEIGHT as u8 && right < PHYSICAL_WIDTH as u8 && bottom < PHYSICAL_HEIGHT as u8, "overflow");
   10820:	f240 402c 	movw	r0, #1068	; 0x42c
   10824:	f2c0 0002 	movt	r0, #2
   10828:	f240 62b0 	movw	r2, #1712	; 0x6b0
   1082c:	f2c0 0202 	movt	r2, #2
   10830:	2108      	movs	r1, #8
   10832:	f007 fe7d 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10836:	defe      	udf	#254	; 0xfe

00010838 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E>:
const VIRTUAL_TO_PHYSICAL_MAP_WIDTH: usize = SCREEN_WIDTH / 2;
const VIRTUAL_TO_PHYSICAL_MAP_HEIGHT: usize = SCREEN_HEIGHT / 2;

/// For Physical (x,y) Coordinates, return the corresponding Virtual (x,y) Coordinates.
/// Used by the CHIP-8 Emulator to decide which Virtual Pixel to fetch the colour value when rendering a Physical Pixel.
fn map_physical_to_virtual(x: u8, y: u8) -> (u8, u8) {
   10838:	b580      	push	{r7, lr}
   1083a:	b094      	sub	sp, #80	; 0x50
   1083c:	b2c2      	uxtb	r2, r0
   1083e:	460b      	mov	r3, r1
   10840:	4684      	mov	ip, r0
   10842:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
   10846:	f88d 104b 	strb.w	r1, [sp, #75]	; 0x4b
    //  Check which quadrant (x,y) belongs to and flip accordingly
    let flip =  //  (flip for X, flip for Y)
        if x < PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   1084a:	2a78      	cmp	r2, #120	; 0x78
   1084c:	930d      	str	r3, [sp, #52]	; 0x34
   1084e:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   10852:	d308      	bcc.n	10866 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x2e>
   10854:	e003      	b.n	1085e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x26>
   10856:	2001      	movs	r0, #1
   10858:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   1085c:	e008      	b.n	10870 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x38>
   1085e:	2000      	movs	r0, #0
   10860:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   10864:	e004      	b.n	10870 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x38>
   10866:	980d      	ldr	r0, [sp, #52]	; 0x34
   10868:	b2c1      	uxtb	r1, r0
   1086a:	2964      	cmp	r1, #100	; 0x64
   1086c:	d3f3      	bcc.n	10856 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1e>
   1086e:	e7f6      	b.n	1085e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x26>
   10870:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   10874:	07c0      	lsls	r0, r0, #31
   10876:	2800      	cmp	r0, #0
   10878:	d105      	bne.n	10886 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x4e>
   1087a:	e7ff      	b.n	1087c <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x44>
            (true, true)  //  Top left quadrant: Flip horizontally and vertically
        } else if x >= PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   1087c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1087e:	b2c1      	uxtb	r1, r0
   10880:	2977      	cmp	r1, #119	; 0x77
   10882:	d80e      	bhi.n	108a2 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x6a>
   10884:	e009      	b.n	1089a <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x62>
   10886:	2001      	movs	r0, #1
            (true, true)  //  Top left quadrant: Flip horizontally and vertically
   10888:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
   1088c:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
        if x < PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   10890:	e040      	b.n	10914 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xdc>
   10892:	2001      	movs	r0, #1
        } else if x >= PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   10894:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
   10898:	e008      	b.n	108ac <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x74>
   1089a:	2000      	movs	r0, #0
   1089c:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
   108a0:	e004      	b.n	108ac <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x74>
   108a2:	980d      	ldr	r0, [sp, #52]	; 0x34
   108a4:	b2c1      	uxtb	r1, r0
   108a6:	2964      	cmp	r1, #100	; 0x64
   108a8:	d3f3      	bcc.n	10892 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x5a>
   108aa:	e7f6      	b.n	1089a <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x62>
   108ac:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   108b0:	07c0      	lsls	r0, r0, #31
   108b2:	2800      	cmp	r0, #0
   108b4:	d105      	bne.n	108c2 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x8a>
   108b6:	e7ff      	b.n	108b8 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x80>
            (false, true)   //  Top right quadrant: Flip vertically
        } else if x < PHYSICAL_WIDTH as u8 / 2 && y >= PHYSICAL_HEIGHT as u8 / 2 {
   108b8:	980c      	ldr	r0, [sp, #48]	; 0x30
   108ba:	b2c1      	uxtb	r1, r0
   108bc:	2978      	cmp	r1, #120	; 0x78
   108be:	d30f      	bcc.n	108e0 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xa8>
   108c0:	e00a      	b.n	108d8 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xa0>
   108c2:	2000      	movs	r0, #0
            (false, true)   //  Top right quadrant: Flip vertically
   108c4:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
   108c8:	2001      	movs	r0, #1
   108ca:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
        } else if x >= PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   108ce:	e020      	b.n	10912 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xda>
   108d0:	2001      	movs	r0, #1
        } else if x < PHYSICAL_WIDTH as u8 / 2 && y >= PHYSICAL_HEIGHT as u8 / 2 {
   108d2:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
   108d6:	e008      	b.n	108ea <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xb2>
   108d8:	2000      	movs	r0, #0
   108da:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
   108de:	e004      	b.n	108ea <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xb2>
   108e0:	980d      	ldr	r0, [sp, #52]	; 0x34
   108e2:	b2c1      	uxtb	r1, r0
   108e4:	2963      	cmp	r1, #99	; 0x63
   108e6:	d8f3      	bhi.n	108d0 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x98>
   108e8:	e7f6      	b.n	108d8 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xa0>
   108ea:	f89d 0041 	ldrb.w	r0, [sp, #65]	; 0x41
   108ee:	07c0      	lsls	r0, r0, #31
   108f0:	2800      	cmp	r0, #0
   108f2:	d106      	bne.n	10902 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xca>
   108f4:	e7ff      	b.n	108f6 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xbe>
   108f6:	2000      	movs	r0, #0
            (true, false)   //  Bottom left quadrant: Flip horizontally
        } else {
            (false, false)    //  Bottom right quadrant: Don't flip
   108f8:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
   108fc:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
        } else if x < PHYSICAL_WIDTH as u8 / 2 && y >= PHYSICAL_HEIGHT as u8 / 2 {
   10900:	e006      	b.n	10910 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xd8>
   10902:	2001      	movs	r0, #1
            (true, false)   //  Bottom left quadrant: Flip horizontally
   10904:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
   10908:	2000      	movs	r0, #0
   1090a:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
        } else if x < PHYSICAL_WIDTH as u8 / 2 && y >= PHYSICAL_HEIGHT as u8 / 2 {
   1090e:	e7ff      	b.n	10910 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xd8>
        } else if x >= PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   10910:	e7ff      	b.n	10912 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xda>
        if x < PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   10912:	e7ff      	b.n	10914 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xdc>
        };
    let x_normalised = 
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - x } 
   10914:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   10918:	07c0      	lsls	r0, r0, #31
   1091a:	2800      	cmp	r0, #0
   1091c:	d10c      	bne.n	10938 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x100>
   1091e:	e7ff      	b.n	10920 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xe8>
   10920:	f06f 0077 	mvn.w	r0, #119	; 0x77
        else      { x - PHYSICAL_WIDTH as u8 / 2 };
   10924:	990c      	ldr	r1, [sp, #48]	; 0x30
   10926:	fa50 f081 	uxtab	r0, r0, r1
   1092a:	b2c2      	uxtb	r2, r0
   1092c:	4603      	mov	r3, r0
   1092e:	4282      	cmp	r2, r0
   10930:	930b      	str	r3, [sp, #44]	; 0x2c
   10932:	f040 80bc 	bne.w	10aae <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x276>
   10936:	e00e      	b.n	10956 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x11e>
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - x } 
   10938:	980c      	ldr	r0, [sp, #48]	; 0x30
   1093a:	b2c1      	uxtb	r1, r0
   1093c:	f1c1 0178 	rsb	r1, r1, #120	; 0x78
   10940:	b2ca      	uxtb	r2, r1
   10942:	460b      	mov	r3, r1
   10944:	428a      	cmp	r2, r1
   10946:	930a      	str	r3, [sp, #40]	; 0x28
   10948:	f040 80a5 	bne.w	10a96 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x25e>
   1094c:	e7ff      	b.n	1094e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x116>
   1094e:	980a      	ldr	r0, [sp, #40]	; 0x28
   10950:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
   10954:	e003      	b.n	1095e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x126>
        else      { x - PHYSICAL_WIDTH as u8 / 2 };
   10956:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10958:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - x } 
   1095c:	e7ff      	b.n	1095e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x126>
    let y_normalised = 
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - y }
   1095e:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
   10962:	07c0      	lsls	r0, r0, #31
   10964:	2800      	cmp	r0, #0
   10966:	d10c      	bne.n	10982 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x14a>
   10968:	e7ff      	b.n	1096a <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x132>
   1096a:	f06f 0063 	mvn.w	r0, #99	; 0x63
        else      { y - PHYSICAL_HEIGHT as u8 / 2 };
   1096e:	990d      	ldr	r1, [sp, #52]	; 0x34
   10970:	fa50 f081 	uxtab	r0, r0, r1
   10974:	b2c2      	uxtb	r2, r0
   10976:	4603      	mov	r3, r0
   10978:	4282      	cmp	r2, r0
   1097a:	9309      	str	r3, [sp, #36]	; 0x24
   1097c:	f040 80af 	bne.w	10ade <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x2a6>
   10980:	e00e      	b.n	109a0 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x168>
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - y }
   10982:	980d      	ldr	r0, [sp, #52]	; 0x34
   10984:	b2c1      	uxtb	r1, r0
   10986:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
   1098a:	b2ca      	uxtb	r2, r1
   1098c:	460b      	mov	r3, r1
   1098e:	428a      	cmp	r2, r1
   10990:	9308      	str	r3, [sp, #32]
   10992:	f040 8098 	bne.w	10ac6 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x28e>
   10996:	e7ff      	b.n	10998 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x160>
   10998:	9808      	ldr	r0, [sp, #32]
   1099a:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   1099e:	e003      	b.n	109a8 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x170>
        else      { y - PHYSICAL_HEIGHT as u8 / 2 };
   109a0:	9809      	ldr	r0, [sp, #36]	; 0x24
   109a2:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - y }
   109a6:	e7ff      	b.n	109a8 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x170>
    let p = map_physical_to_virtual_normalised(x_normalised, y_normalised);  //  Returns (x,y)
   109a8:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
   109ac:	f89d 0042 	ldrb.w	r0, [sp, #66]	; 0x42
   109b0:	f000 faea 	bl	10f88 <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE>
   109b4:	4602      	mov	r2, r0
   109b6:	460b      	mov	r3, r1
   109b8:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
   109bc:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
   109c0:	9207      	str	r2, [sp, #28]
   109c2:	9306      	str	r3, [sp, #24]
   109c4:	e7ff      	b.n	109c6 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x18e>
    let p2 = (
        if flip.0 { SCREEN_WIDTH as u8 / 2 - p.0 } 
   109c6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   109ca:	07c0      	lsls	r0, r0, #31
   109cc:	2800      	cmp	r0, #0
   109ce:	d10b      	bne.n	109e8 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1b0>
   109d0:	e7ff      	b.n	109d2 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x19a>
   109d2:	2020      	movs	r0, #32
        else      { p.0 + SCREEN_WIDTH as u8 / 2 }
   109d4:	9907      	ldr	r1, [sp, #28]
   109d6:	fa50 f081 	uxtab	r0, r0, r1
   109da:	b2c2      	uxtb	r2, r0
   109dc:	4603      	mov	r3, r0
   109de:	4282      	cmp	r2, r0
   109e0:	9305      	str	r3, [sp, #20]
   109e2:	f040 8094 	bne.w	10b0e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x2d6>
   109e6:	e00d      	b.n	10a04 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1cc>
        if flip.0 { SCREEN_WIDTH as u8 / 2 - p.0 } 
   109e8:	9807      	ldr	r0, [sp, #28]
   109ea:	b2c1      	uxtb	r1, r0
   109ec:	f1c1 0120 	rsb	r1, r1, #32
   109f0:	b2ca      	uxtb	r2, r1
   109f2:	460b      	mov	r3, r1
   109f4:	428a      	cmp	r2, r1
   109f6:	9304      	str	r3, [sp, #16]
   109f8:	d17d      	bne.n	10af6 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x2be>
   109fa:	e7ff      	b.n	109fc <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1c4>
   109fc:	9804      	ldr	r0, [sp, #16]
   109fe:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
   10a02:	e003      	b.n	10a0c <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1d4>
        else      { p.0 + SCREEN_WIDTH as u8 / 2 }
   10a04:	9805      	ldr	r0, [sp, #20]
   10a06:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
        if flip.0 { SCREEN_WIDTH as u8 / 2 - p.0 } 
   10a0a:	e7ff      	b.n	10a0c <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1d4>
        ,
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - p.1 } 
   10a0c:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
   10a10:	07c0      	lsls	r0, r0, #31
   10a12:	2800      	cmp	r0, #0
   10a14:	d10b      	bne.n	10a2e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1f6>
   10a16:	e7ff      	b.n	10a18 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1e0>
   10a18:	2010      	movs	r0, #16
        else      { p.1 + SCREEN_HEIGHT as u8 / 2 }
   10a1a:	9906      	ldr	r1, [sp, #24]
   10a1c:	fa50 f081 	uxtab	r0, r0, r1
   10a20:	b2c2      	uxtb	r2, r0
   10a22:	4603      	mov	r3, r0
   10a24:	4282      	cmp	r2, r0
   10a26:	9303      	str	r3, [sp, #12]
   10a28:	f040 8089 	bne.w	10b3e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x306>
   10a2c:	e00d      	b.n	10a4a <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x212>
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - p.1 } 
   10a2e:	9806      	ldr	r0, [sp, #24]
   10a30:	b2c1      	uxtb	r1, r0
   10a32:	f1c1 0110 	rsb	r1, r1, #16
   10a36:	b2ca      	uxtb	r2, r1
   10a38:	460b      	mov	r3, r1
   10a3a:	428a      	cmp	r2, r1
   10a3c:	9302      	str	r3, [sp, #8]
   10a3e:	d172      	bne.n	10b26 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x2ee>
   10a40:	e7ff      	b.n	10a42 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x20a>
   10a42:	9802      	ldr	r0, [sp, #8]
   10a44:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
   10a48:	e003      	b.n	10a52 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x21a>
        else      { p.1 + SCREEN_HEIGHT as u8 / 2 }
   10a4a:	9803      	ldr	r0, [sp, #12]
   10a4c:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - p.1 } 
   10a50:	e7ff      	b.n	10a52 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x21a>
    let p2 = (
   10a52:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   10a56:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
   10a5a:	f89d 0049 	ldrb.w	r0, [sp, #73]	; 0x49
   10a5e:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    );
    //  Crop to screen size
    (
        p2.0.min(SCREEN_WIDTH as u8 - 1),
   10a62:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   10a66:	213f      	movs	r1, #63	; 0x3f
   10a68:	f006 feed 	bl	17846 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10a6c:	9001      	str	r0, [sp, #4]
   10a6e:	e7ff      	b.n	10a70 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x238>
        p2.1.min(SCREEN_HEIGHT as u8 - 1),
   10a70:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
   10a74:	211f      	movs	r1, #31
   10a76:	f006 fee6 	bl	17846 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10a7a:	9000      	str	r0, [sp, #0]
   10a7c:	e7ff      	b.n	10a7e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x246>
    (
   10a7e:	9801      	ldr	r0, [sp, #4]
   10a80:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
   10a84:	9900      	ldr	r1, [sp, #0]
   10a86:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
    )
}
   10a8a:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
   10a8e:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
   10a92:	b014      	add	sp, #80	; 0x50
   10a94:	bd80      	pop	{r7, pc}
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - x } 
   10a96:	f240 4080 	movw	r0, #1152	; 0x480
   10a9a:	f2c0 0002 	movt	r0, #2
   10a9e:	f240 62c0 	movw	r2, #1728	; 0x6c0
   10aa2:	f2c0 0202 	movt	r2, #2
   10aa6:	2121      	movs	r1, #33	; 0x21
   10aa8:	f007 fd42 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10aac:	defe      	udf	#254	; 0xfe
        else      { x - PHYSICAL_WIDTH as u8 / 2 };
   10aae:	f240 4080 	movw	r0, #1152	; 0x480
   10ab2:	f2c0 0002 	movt	r0, #2
   10ab6:	f240 62d0 	movw	r2, #1744	; 0x6d0
   10aba:	f2c0 0202 	movt	r2, #2
   10abe:	2121      	movs	r1, #33	; 0x21
   10ac0:	f007 fd36 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ac4:	defe      	udf	#254	; 0xfe
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - y }
   10ac6:	f240 4080 	movw	r0, #1152	; 0x480
   10aca:	f2c0 0002 	movt	r0, #2
   10ace:	f240 62e0 	movw	r2, #1760	; 0x6e0
   10ad2:	f2c0 0202 	movt	r2, #2
   10ad6:	2121      	movs	r1, #33	; 0x21
   10ad8:	f007 fd2a 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10adc:	defe      	udf	#254	; 0xfe
        else      { y - PHYSICAL_HEIGHT as u8 / 2 };
   10ade:	f240 4080 	movw	r0, #1152	; 0x480
   10ae2:	f2c0 0002 	movt	r0, #2
   10ae6:	f240 62f0 	movw	r2, #1776	; 0x6f0
   10aea:	f2c0 0202 	movt	r2, #2
   10aee:	2121      	movs	r1, #33	; 0x21
   10af0:	f007 fd1e 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10af4:	defe      	udf	#254	; 0xfe
        if flip.0 { SCREEN_WIDTH as u8 / 2 - p.0 } 
   10af6:	f240 4080 	movw	r0, #1152	; 0x480
   10afa:	f2c0 0002 	movt	r0, #2
   10afe:	f240 7200 	movw	r2, #1792	; 0x700
   10b02:	f2c0 0202 	movt	r2, #2
   10b06:	2121      	movs	r1, #33	; 0x21
   10b08:	f007 fd12 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b0c:	defe      	udf	#254	; 0xfe
        else      { p.0 + SCREEN_WIDTH as u8 / 2 }
   10b0e:	f240 30a0 	movw	r0, #928	; 0x3a0
   10b12:	f2c0 0002 	movt	r0, #2
   10b16:	f240 7210 	movw	r2, #1808	; 0x710
   10b1a:	f2c0 0202 	movt	r2, #2
   10b1e:	211c      	movs	r1, #28
   10b20:	f007 fd06 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b24:	defe      	udf	#254	; 0xfe
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - p.1 } 
   10b26:	f240 4080 	movw	r0, #1152	; 0x480
   10b2a:	f2c0 0002 	movt	r0, #2
   10b2e:	f240 7220 	movw	r2, #1824	; 0x720
   10b32:	f2c0 0202 	movt	r2, #2
   10b36:	2121      	movs	r1, #33	; 0x21
   10b38:	f007 fcfa 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b3c:	defe      	udf	#254	; 0xfe
        else      { p.1 + SCREEN_HEIGHT as u8 / 2 }
   10b3e:	f240 30a0 	movw	r0, #928	; 0x3a0
   10b42:	f2c0 0002 	movt	r0, #2
   10b46:	f240 7230 	movw	r2, #1840	; 0x730
   10b4a:	f2c0 0202 	movt	r2, #2
   10b4e:	211c      	movs	r1, #28
   10b50:	f007 fcee 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b54:	defe      	udf	#254	; 0xfe

00010b56 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE>:

/// For each Virtual (x,y) Coordinate, return the Bounding Box (left, top, right, bottom) that encloses the corresponding Physical (x,y) Coordinates.
/// Used by the CHIP-8 Emulator to decide which Physical Pixels to redraw when a Virtual Pixel is updated.
fn map_virtual_to_physical(x: u8, y: u8) -> (u8, u8, u8, u8) {
   10b56:	b580      	push	{r7, lr}
   10b58:	b09a      	sub	sp, #104	; 0x68
   10b5a:	b2c2      	uxtb	r2, r0
   10b5c:	460b      	mov	r3, r1
   10b5e:	4684      	mov	ip, r0
   10b60:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
   10b64:	f88d 1063 	strb.w	r1, [sp, #99]	; 0x63
    //  Check which quadrant (x,y) belongs to and flip accordingly
    let flip =  //  (flip for X, flip for Y)
        if x < SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   10b68:	2a20      	cmp	r2, #32
   10b6a:	9311      	str	r3, [sp, #68]	; 0x44
   10b6c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   10b70:	d308      	bcc.n	10b84 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x2e>
   10b72:	e003      	b.n	10b7c <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x26>
   10b74:	2001      	movs	r0, #1
   10b76:	f88d 004f 	strb.w	r0, [sp, #79]	; 0x4f
   10b7a:	e008      	b.n	10b8e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x38>
   10b7c:	2000      	movs	r0, #0
   10b7e:	f88d 004f 	strb.w	r0, [sp, #79]	; 0x4f
   10b82:	e004      	b.n	10b8e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x38>
   10b84:	9811      	ldr	r0, [sp, #68]	; 0x44
   10b86:	b2c1      	uxtb	r1, r0
   10b88:	2910      	cmp	r1, #16
   10b8a:	d3f3      	bcc.n	10b74 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1e>
   10b8c:	e7f6      	b.n	10b7c <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x26>
   10b8e:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
   10b92:	07c0      	lsls	r0, r0, #31
   10b94:	2800      	cmp	r0, #0
   10b96:	d105      	bne.n	10ba4 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x4e>
   10b98:	e7ff      	b.n	10b9a <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x44>
            (true, true)  //  Top left quadrant: Flip horizontally and vertically
        } else if x >= SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   10b9a:	9810      	ldr	r0, [sp, #64]	; 0x40
   10b9c:	b2c1      	uxtb	r1, r0
   10b9e:	291f      	cmp	r1, #31
   10ba0:	d80e      	bhi.n	10bc0 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x6a>
   10ba2:	e009      	b.n	10bb8 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x62>
   10ba4:	2001      	movs	r0, #1
            (true, true)  //  Top left quadrant: Flip horizontally and vertically
   10ba6:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
   10baa:	f88d 004d 	strb.w	r0, [sp, #77]	; 0x4d
        if x < SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   10bae:	e040      	b.n	10c32 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xdc>
   10bb0:	2001      	movs	r0, #1
        } else if x >= SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   10bb2:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
   10bb6:	e008      	b.n	10bca <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x74>
   10bb8:	2000      	movs	r0, #0
   10bba:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
   10bbe:	e004      	b.n	10bca <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x74>
   10bc0:	9811      	ldr	r0, [sp, #68]	; 0x44
   10bc2:	b2c1      	uxtb	r1, r0
   10bc4:	2910      	cmp	r1, #16
   10bc6:	d3f3      	bcc.n	10bb0 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x5a>
   10bc8:	e7f6      	b.n	10bb8 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x62>
   10bca:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
   10bce:	07c0      	lsls	r0, r0, #31
   10bd0:	2800      	cmp	r0, #0
   10bd2:	d105      	bne.n	10be0 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x8a>
   10bd4:	e7ff      	b.n	10bd6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x80>
            (false, true)   //  Top right quadrant: Flip vertically
        } else if x < SCREEN_WIDTH as u8 / 2 && y >= SCREEN_HEIGHT as u8 / 2 {
   10bd6:	9810      	ldr	r0, [sp, #64]	; 0x40
   10bd8:	b2c1      	uxtb	r1, r0
   10bda:	2920      	cmp	r1, #32
   10bdc:	d30f      	bcc.n	10bfe <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xa8>
   10bde:	e00a      	b.n	10bf6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xa0>
   10be0:	2000      	movs	r0, #0
            (false, true)   //  Top right quadrant: Flip vertically
   10be2:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
   10be6:	2001      	movs	r0, #1
   10be8:	f88d 004d 	strb.w	r0, [sp, #77]	; 0x4d
        } else if x >= SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   10bec:	e020      	b.n	10c30 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xda>
   10bee:	2001      	movs	r0, #1
        } else if x < SCREEN_WIDTH as u8 / 2 && y >= SCREEN_HEIGHT as u8 / 2 {
   10bf0:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
   10bf4:	e008      	b.n	10c08 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xb2>
   10bf6:	2000      	movs	r0, #0
   10bf8:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
   10bfc:	e004      	b.n	10c08 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xb2>
   10bfe:	9811      	ldr	r0, [sp, #68]	; 0x44
   10c00:	b2c1      	uxtb	r1, r0
   10c02:	290f      	cmp	r1, #15
   10c04:	d8f3      	bhi.n	10bee <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x98>
   10c06:	e7f6      	b.n	10bf6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xa0>
   10c08:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
   10c0c:	07c0      	lsls	r0, r0, #31
   10c0e:	2800      	cmp	r0, #0
   10c10:	d106      	bne.n	10c20 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xca>
   10c12:	e7ff      	b.n	10c14 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xbe>
   10c14:	2000      	movs	r0, #0
            (true, false)   //  Bottom left quadrant: Flip horizontally
        } else {
            (false, false)    //  Bottom right quadrant: Don't flip
   10c16:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
   10c1a:	f88d 004d 	strb.w	r0, [sp, #77]	; 0x4d
        } else if x < SCREEN_WIDTH as u8 / 2 && y >= SCREEN_HEIGHT as u8 / 2 {
   10c1e:	e006      	b.n	10c2e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xd8>
   10c20:	2001      	movs	r0, #1
            (true, false)   //  Bottom left quadrant: Flip horizontally
   10c22:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
   10c26:	2000      	movs	r0, #0
   10c28:	f88d 004d 	strb.w	r0, [sp, #77]	; 0x4d
        } else if x < SCREEN_WIDTH as u8 / 2 && y >= SCREEN_HEIGHT as u8 / 2 {
   10c2c:	e7ff      	b.n	10c2e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xd8>
        } else if x >= SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   10c2e:	e7ff      	b.n	10c30 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xda>
        if x < SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   10c30:	e7ff      	b.n	10c32 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xdc>
        };
    let x_normalised = 
        if flip.0 { SCREEN_WIDTH as u8 / 2 - x } 
   10c32:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
   10c36:	07c0      	lsls	r0, r0, #31
   10c38:	2800      	cmp	r0, #0
   10c3a:	d10c      	bne.n	10c56 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x100>
   10c3c:	e7ff      	b.n	10c3e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xe8>
   10c3e:	f06f 001f 	mvn.w	r0, #31
        else      { x - SCREEN_WIDTH as u8 / 2 };
   10c42:	9910      	ldr	r1, [sp, #64]	; 0x40
   10c44:	fa50 f081 	uxtab	r0, r0, r1
   10c48:	b2c2      	uxtb	r2, r0
   10c4a:	4603      	mov	r3, r0
   10c4c:	4282      	cmp	r2, r0
   10c4e:	930f      	str	r3, [sp, #60]	; 0x3c
   10c50:	f040 8116 	bne.w	10e80 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x32a>
   10c54:	e00e      	b.n	10c74 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x11e>
        if flip.0 { SCREEN_WIDTH as u8 / 2 - x } 
   10c56:	9810      	ldr	r0, [sp, #64]	; 0x40
   10c58:	b2c1      	uxtb	r1, r0
   10c5a:	f1c1 0120 	rsb	r1, r1, #32
   10c5e:	b2ca      	uxtb	r2, r1
   10c60:	460b      	mov	r3, r1
   10c62:	428a      	cmp	r2, r1
   10c64:	930e      	str	r3, [sp, #56]	; 0x38
   10c66:	f040 80ff 	bne.w	10e68 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x312>
   10c6a:	e7ff      	b.n	10c6c <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x116>
   10c6c:	980e      	ldr	r0, [sp, #56]	; 0x38
   10c6e:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
   10c72:	e003      	b.n	10c7c <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x126>
        else      { x - SCREEN_WIDTH as u8 / 2 };
   10c74:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10c76:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
        if flip.0 { SCREEN_WIDTH as u8 / 2 - x } 
   10c7a:	e7ff      	b.n	10c7c <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x126>
    let y_normalised = 
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - y }
   10c7c:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
   10c80:	07c0      	lsls	r0, r0, #31
   10c82:	2800      	cmp	r0, #0
   10c84:	d10c      	bne.n	10ca0 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x14a>
   10c86:	e7ff      	b.n	10c88 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x132>
   10c88:	f06f 000f 	mvn.w	r0, #15
        else      { y - SCREEN_HEIGHT as u8 / 2 };
   10c8c:	9911      	ldr	r1, [sp, #68]	; 0x44
   10c8e:	fa50 f081 	uxtab	r0, r0, r1
   10c92:	b2c2      	uxtb	r2, r0
   10c94:	4603      	mov	r3, r0
   10c96:	4282      	cmp	r2, r0
   10c98:	930d      	str	r3, [sp, #52]	; 0x34
   10c9a:	f040 8109 	bne.w	10eb0 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x35a>
   10c9e:	e00e      	b.n	10cbe <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x168>
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - y }
   10ca0:	9811      	ldr	r0, [sp, #68]	; 0x44
   10ca2:	b2c1      	uxtb	r1, r0
   10ca4:	f1c1 0110 	rsb	r1, r1, #16
   10ca8:	b2ca      	uxtb	r2, r1
   10caa:	460b      	mov	r3, r1
   10cac:	428a      	cmp	r2, r1
   10cae:	930c      	str	r3, [sp, #48]	; 0x30
   10cb0:	f040 80f2 	bne.w	10e98 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x342>
   10cb4:	e7ff      	b.n	10cb6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x160>
   10cb6:	980c      	ldr	r0, [sp, #48]	; 0x30
   10cb8:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
   10cbc:	e003      	b.n	10cc6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x170>
        else      { y - SCREEN_HEIGHT as u8 / 2 };
   10cbe:	980d      	ldr	r0, [sp, #52]	; 0x34
   10cc0:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - y }
   10cc4:	e7ff      	b.n	10cc6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x170>
    let b = map_virtual_to_physical_normalised(x_normalised, y_normalised);  //  Returns (left,top,right,bottom)
   10cc6:	f89d 1053 	ldrb.w	r1, [sp, #83]	; 0x53
   10cca:	f89d 0052 	ldrb.w	r0, [sp, #82]	; 0x52
   10cce:	f000 f9ad 	bl	1102c <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E>
   10cd2:	9019      	str	r0, [sp, #100]	; 0x64
   10cd4:	9819      	ldr	r0, [sp, #100]	; 0x64
   10cd6:	9015      	str	r0, [sp, #84]	; 0x54
   10cd8:	e7ff      	b.n	10cda <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x184>
    let b2 = (
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.0 } 
   10cda:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
   10cde:	07c0      	lsls	r0, r0, #31
   10ce0:	2800      	cmp	r0, #0
   10ce2:	d10a      	bne.n	10cfa <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1a4>
   10ce4:	e7ff      	b.n	10ce6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x190>
        else      { b.0 + PHYSICAL_WIDTH as u8 / 2 }
   10ce6:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   10cea:	3078      	adds	r0, #120	; 0x78
   10cec:	b2c1      	uxtb	r1, r0
   10cee:	4602      	mov	r2, r0
   10cf0:	4281      	cmp	r1, r0
   10cf2:	920b      	str	r2, [sp, #44]	; 0x2c
   10cf4:	f040 80f4 	bne.w	10ee0 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x38a>
   10cf8:	e00e      	b.n	10d18 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1c2>
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.0 } 
   10cfa:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
   10cfe:	f1c0 0078 	rsb	r0, r0, #120	; 0x78
   10d02:	b2c1      	uxtb	r1, r0
   10d04:	4602      	mov	r2, r0
   10d06:	4281      	cmp	r1, r0
   10d08:	920a      	str	r2, [sp, #40]	; 0x28
   10d0a:	f040 80dd 	bne.w	10ec8 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x372>
   10d0e:	e7ff      	b.n	10d10 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1ba>
   10d10:	980a      	ldr	r0, [sp, #40]	; 0x28
   10d12:	f88d 005e 	strb.w	r0, [sp, #94]	; 0x5e
   10d16:	e003      	b.n	10d20 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1ca>
        else      { b.0 + PHYSICAL_WIDTH as u8 / 2 }
   10d18:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10d1a:	f88d 005e 	strb.w	r0, [sp, #94]	; 0x5e
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.0 } 
   10d1e:	e7ff      	b.n	10d20 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1ca>
        ,
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - b.1 } 
   10d20:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
   10d24:	07c0      	lsls	r0, r0, #31
   10d26:	2800      	cmp	r0, #0
   10d28:	d10a      	bne.n	10d40 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1ea>
   10d2a:	e7ff      	b.n	10d2c <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1d6>
        else      { b.1 + PHYSICAL_HEIGHT as u8 / 2 }
   10d2c:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
   10d30:	3064      	adds	r0, #100	; 0x64
   10d32:	b2c1      	uxtb	r1, r0
   10d34:	4602      	mov	r2, r0
   10d36:	4281      	cmp	r1, r0
   10d38:	9209      	str	r2, [sp, #36]	; 0x24
   10d3a:	f040 80e9 	bne.w	10f10 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x3ba>
   10d3e:	e00e      	b.n	10d5e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x208>
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - b.1 } 
   10d40:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
   10d44:	f1c0 0064 	rsb	r0, r0, #100	; 0x64
   10d48:	b2c1      	uxtb	r1, r0
   10d4a:	4602      	mov	r2, r0
   10d4c:	4281      	cmp	r1, r0
   10d4e:	9208      	str	r2, [sp, #32]
   10d50:	f040 80d2 	bne.w	10ef8 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x3a2>
   10d54:	e7ff      	b.n	10d56 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x200>
   10d56:	9808      	ldr	r0, [sp, #32]
   10d58:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   10d5c:	e003      	b.n	10d66 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x210>
        else      { b.1 + PHYSICAL_HEIGHT as u8 / 2 }
   10d5e:	9809      	ldr	r0, [sp, #36]	; 0x24
   10d60:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - b.1 } 
   10d64:	e7ff      	b.n	10d66 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x210>
        ,
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.2 } 
   10d66:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
   10d6a:	07c0      	lsls	r0, r0, #31
   10d6c:	2800      	cmp	r0, #0
   10d6e:	d10a      	bne.n	10d86 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x230>
   10d70:	e7ff      	b.n	10d72 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x21c>
        else      { b.2 + PHYSICAL_WIDTH as u8 / 2 }
   10d72:	f89d 0056 	ldrb.w	r0, [sp, #86]	; 0x56
   10d76:	3078      	adds	r0, #120	; 0x78
   10d78:	b2c1      	uxtb	r1, r0
   10d7a:	4602      	mov	r2, r0
   10d7c:	4281      	cmp	r1, r0
   10d7e:	9207      	str	r2, [sp, #28]
   10d80:	f040 80de 	bne.w	10f40 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x3ea>
   10d84:	e00e      	b.n	10da4 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x24e>
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.2 } 
   10d86:	f89d 0056 	ldrb.w	r0, [sp, #86]	; 0x56
   10d8a:	f1c0 0078 	rsb	r0, r0, #120	; 0x78
   10d8e:	b2c1      	uxtb	r1, r0
   10d90:	4602      	mov	r2, r0
   10d92:	4281      	cmp	r1, r0
   10d94:	9206      	str	r2, [sp, #24]
   10d96:	f040 80c7 	bne.w	10f28 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x3d2>
   10d9a:	e7ff      	b.n	10d9c <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x246>
   10d9c:	9806      	ldr	r0, [sp, #24]
   10d9e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   10da2:	e003      	b.n	10dac <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x256>
        else      { b.2 + PHYSICAL_WIDTH as u8 / 2 }
   10da4:	9807      	ldr	r0, [sp, #28]
   10da6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.2 } 
   10daa:	e7ff      	b.n	10dac <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x256>
        ,
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - b.3 } 
   10dac:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
   10db0:	07c0      	lsls	r0, r0, #31
   10db2:	2800      	cmp	r0, #0
   10db4:	d10a      	bne.n	10dcc <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x276>
   10db6:	e7ff      	b.n	10db8 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x262>
        else      { b.3 + PHYSICAL_HEIGHT as u8 / 2 }
   10db8:	f89d 0057 	ldrb.w	r0, [sp, #87]	; 0x57
   10dbc:	3064      	adds	r0, #100	; 0x64
   10dbe:	b2c1      	uxtb	r1, r0
   10dc0:	4602      	mov	r2, r0
   10dc2:	4281      	cmp	r1, r0
   10dc4:	9205      	str	r2, [sp, #20]
   10dc6:	f040 80d3 	bne.w	10f70 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x41a>
   10dca:	e00e      	b.n	10dea <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x294>
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - b.3 } 
   10dcc:	f89d 0057 	ldrb.w	r0, [sp, #87]	; 0x57
   10dd0:	f1c0 0064 	rsb	r0, r0, #100	; 0x64
   10dd4:	b2c1      	uxtb	r1, r0
   10dd6:	4602      	mov	r2, r0
   10dd8:	4281      	cmp	r1, r0
   10dda:	9204      	str	r2, [sp, #16]
   10ddc:	f040 80bc 	bne.w	10f58 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x402>
   10de0:	e7ff      	b.n	10de2 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x28c>
   10de2:	9804      	ldr	r0, [sp, #16]
   10de4:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
   10de8:	e003      	b.n	10df2 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x29c>
        else      { b.3 + PHYSICAL_HEIGHT as u8 / 2 }
   10dea:	9805      	ldr	r0, [sp, #20]
   10dec:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - b.3 } 
   10df0:	e7ff      	b.n	10df2 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x29c>
    let b2 = (
   10df2:	f89d 005e 	ldrb.w	r0, [sp, #94]	; 0x5e
   10df6:	f88d 0058 	strb.w	r0, [sp, #88]	; 0x58
   10dfa:	f89d 005f 	ldrb.w	r0, [sp, #95]	; 0x5f
   10dfe:	f88d 0059 	strb.w	r0, [sp, #89]	; 0x59
   10e02:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10e06:	f88d 005a 	strb.w	r0, [sp, #90]	; 0x5a
   10e0a:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
   10e0e:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
    );
    //  Crop to screen size
    (
        b2.0.min(PHYSICAL_WIDTH as u8 - 1),
   10e12:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
   10e16:	21ef      	movs	r1, #239	; 0xef
   10e18:	f006 fd15 	bl	17846 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10e1c:	9003      	str	r0, [sp, #12]
   10e1e:	e7ff      	b.n	10e20 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x2ca>
        b2.1.min(PHYSICAL_HEIGHT as u8 - 1),
   10e20:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
   10e24:	21c7      	movs	r1, #199	; 0xc7
   10e26:	f006 fd0e 	bl	17846 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10e2a:	9002      	str	r0, [sp, #8]
   10e2c:	e7ff      	b.n	10e2e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x2d8>
        b2.2.min(PHYSICAL_WIDTH as u8 - 1),
   10e2e:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
   10e32:	21ef      	movs	r1, #239	; 0xef
   10e34:	f006 fd07 	bl	17846 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10e38:	9001      	str	r0, [sp, #4]
   10e3a:	e7ff      	b.n	10e3c <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x2e6>
        b2.3.min(PHYSICAL_HEIGHT as u8 - 1),
   10e3c:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
   10e40:	21c7      	movs	r1, #199	; 0xc7
   10e42:	f006 fd00 	bl	17846 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10e46:	9000      	str	r0, [sp, #0]
   10e48:	e7ff      	b.n	10e4a <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x2f4>
    (
   10e4a:	9803      	ldr	r0, [sp, #12]
   10e4c:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
   10e50:	9902      	ldr	r1, [sp, #8]
   10e52:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
   10e56:	9a01      	ldr	r2, [sp, #4]
   10e58:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
   10e5c:	9b00      	ldr	r3, [sp, #0]
   10e5e:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
    )    
}
   10e62:	9812      	ldr	r0, [sp, #72]	; 0x48
   10e64:	b01a      	add	sp, #104	; 0x68
   10e66:	bd80      	pop	{r7, pc}
        if flip.0 { SCREEN_WIDTH as u8 / 2 - x } 
   10e68:	f240 4080 	movw	r0, #1152	; 0x480
   10e6c:	f2c0 0002 	movt	r0, #2
   10e70:	f240 7240 	movw	r2, #1856	; 0x740
   10e74:	f2c0 0202 	movt	r2, #2
   10e78:	2121      	movs	r1, #33	; 0x21
   10e7a:	f007 fb59 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10e7e:	defe      	udf	#254	; 0xfe
        else      { x - SCREEN_WIDTH as u8 / 2 };
   10e80:	f240 4080 	movw	r0, #1152	; 0x480
   10e84:	f2c0 0002 	movt	r0, #2
   10e88:	f240 7250 	movw	r2, #1872	; 0x750
   10e8c:	f2c0 0202 	movt	r2, #2
   10e90:	2121      	movs	r1, #33	; 0x21
   10e92:	f007 fb4d 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10e96:	defe      	udf	#254	; 0xfe
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - y }
   10e98:	f240 4080 	movw	r0, #1152	; 0x480
   10e9c:	f2c0 0002 	movt	r0, #2
   10ea0:	f240 7260 	movw	r2, #1888	; 0x760
   10ea4:	f2c0 0202 	movt	r2, #2
   10ea8:	2121      	movs	r1, #33	; 0x21
   10eaa:	f007 fb41 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10eae:	defe      	udf	#254	; 0xfe
        else      { y - SCREEN_HEIGHT as u8 / 2 };
   10eb0:	f240 4080 	movw	r0, #1152	; 0x480
   10eb4:	f2c0 0002 	movt	r0, #2
   10eb8:	f240 7270 	movw	r2, #1904	; 0x770
   10ebc:	f2c0 0202 	movt	r2, #2
   10ec0:	2121      	movs	r1, #33	; 0x21
   10ec2:	f007 fb35 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ec6:	defe      	udf	#254	; 0xfe
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.0 } 
   10ec8:	f240 4080 	movw	r0, #1152	; 0x480
   10ecc:	f2c0 0002 	movt	r0, #2
   10ed0:	f240 7280 	movw	r2, #1920	; 0x780
   10ed4:	f2c0 0202 	movt	r2, #2
   10ed8:	2121      	movs	r1, #33	; 0x21
   10eda:	f007 fb29 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ede:	defe      	udf	#254	; 0xfe
        else      { b.0 + PHYSICAL_WIDTH as u8 / 2 }
   10ee0:	f240 30a0 	movw	r0, #928	; 0x3a0
   10ee4:	f2c0 0002 	movt	r0, #2
   10ee8:	f240 7290 	movw	r2, #1936	; 0x790
   10eec:	f2c0 0202 	movt	r2, #2
   10ef0:	211c      	movs	r1, #28
   10ef2:	f007 fb1d 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ef6:	defe      	udf	#254	; 0xfe
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - b.1 } 
   10ef8:	f240 4080 	movw	r0, #1152	; 0x480
   10efc:	f2c0 0002 	movt	r0, #2
   10f00:	f240 72a0 	movw	r2, #1952	; 0x7a0
   10f04:	f2c0 0202 	movt	r2, #2
   10f08:	2121      	movs	r1, #33	; 0x21
   10f0a:	f007 fb11 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f0e:	defe      	udf	#254	; 0xfe
        else      { b.1 + PHYSICAL_HEIGHT as u8 / 2 }
   10f10:	f240 30a0 	movw	r0, #928	; 0x3a0
   10f14:	f2c0 0002 	movt	r0, #2
   10f18:	f240 72b0 	movw	r2, #1968	; 0x7b0
   10f1c:	f2c0 0202 	movt	r2, #2
   10f20:	211c      	movs	r1, #28
   10f22:	f007 fb05 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f26:	defe      	udf	#254	; 0xfe
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.2 } 
   10f28:	f240 4080 	movw	r0, #1152	; 0x480
   10f2c:	f2c0 0002 	movt	r0, #2
   10f30:	f240 72c0 	movw	r2, #1984	; 0x7c0
   10f34:	f2c0 0202 	movt	r2, #2
   10f38:	2121      	movs	r1, #33	; 0x21
   10f3a:	f007 faf9 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f3e:	defe      	udf	#254	; 0xfe
        else      { b.2 + PHYSICAL_WIDTH as u8 / 2 }
   10f40:	f240 30a0 	movw	r0, #928	; 0x3a0
   10f44:	f2c0 0002 	movt	r0, #2
   10f48:	f240 72d0 	movw	r2, #2000	; 0x7d0
   10f4c:	f2c0 0202 	movt	r2, #2
   10f50:	211c      	movs	r1, #28
   10f52:	f007 faed 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f56:	defe      	udf	#254	; 0xfe
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - b.3 } 
   10f58:	f240 4080 	movw	r0, #1152	; 0x480
   10f5c:	f2c0 0002 	movt	r0, #2
   10f60:	f240 72e0 	movw	r2, #2016	; 0x7e0
   10f64:	f2c0 0202 	movt	r2, #2
   10f68:	2121      	movs	r1, #33	; 0x21
   10f6a:	f007 fae1 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f6e:	defe      	udf	#254	; 0xfe
        else      { b.3 + PHYSICAL_HEIGHT as u8 / 2 }
   10f70:	f240 30a0 	movw	r0, #928	; 0x3a0
   10f74:	f2c0 0002 	movt	r0, #2
   10f78:	f240 72f0 	movw	r2, #2032	; 0x7f0
   10f7c:	f2c0 0202 	movt	r2, #2
   10f80:	211c      	movs	r1, #28
   10f82:	f007 fad5 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f86:	defe      	udf	#254	; 0xfe

00010f88 <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE>:

/// Same as map_physical_to_virtual, except that (x,y) belongs to the X >= 0, Y >= 0 quadrant
fn map_physical_to_virtual_normalised(x: u8, y: u8) -> (u8, u8) {
   10f88:	b580      	push	{r7, lr}
   10f8a:	b088      	sub	sp, #32
   10f8c:	460a      	mov	r2, r1
   10f8e:	4603      	mov	r3, r0
   10f90:	f88d 0018 	strb.w	r0, [sp, #24]
   10f94:	f88d 1019 	strb.w	r1, [sp, #25]
   10f98:	2177      	movs	r1, #119	; 0x77
    let x_index = x.min(PHYSICAL_TO_VIRTUAL_MAP_WIDTH as u8 - 1);
   10f9a:	9205      	str	r2, [sp, #20]
   10f9c:	9304      	str	r3, [sp, #16]
   10f9e:	f006 fc52 	bl	17846 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10fa2:	4601      	mov	r1, r0
   10fa4:	f88d 001a 	strb.w	r0, [sp, #26]
   10fa8:	9103      	str	r1, [sp, #12]
   10faa:	e7ff      	b.n	10fac <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x24>
   10fac:	2163      	movs	r1, #99	; 0x63
    let y_index = y.min(PHYSICAL_TO_VIRTUAL_MAP_HEIGHT as u8 - 1);
   10fae:	9805      	ldr	r0, [sp, #20]
   10fb0:	f006 fc49 	bl	17846 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10fb4:	4601      	mov	r1, r0
   10fb6:	f88d 001b 	strb.w	r0, [sp, #27]
   10fba:	9102      	str	r1, [sp, #8]
   10fbc:	e7ff      	b.n	10fbe <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x36>
    let virtual_pixel = PHYSICAL_TO_VIRTUAL_MAP[y_index as usize][x_index as usize];  //  Returns (x,y)
   10fbe:	9802      	ldr	r0, [sp, #8]
   10fc0:	b2c1      	uxtb	r1, r0
   10fc2:	460a      	mov	r2, r1
   10fc4:	2963      	cmp	r1, #99	; 0x63
   10fc6:	9201      	str	r2, [sp, #4]
   10fc8:	d81e      	bhi.n	11008 <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x80>
   10fca:	e7ff      	b.n	10fcc <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x44>
   10fcc:	9803      	ldr	r0, [sp, #12]
   10fce:	b2c1      	uxtb	r1, r0
   10fd0:	460a      	mov	r2, r1
   10fd2:	2977      	cmp	r1, #119	; 0x77
   10fd4:	9200      	str	r2, [sp, #0]
   10fd6:	d820      	bhi.n	1101a <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x92>
   10fd8:	e7ff      	b.n	10fda <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x52>
   10fda:	f246 50e0 	movw	r0, #26080	; 0x65e0
   10fde:	f2c0 0002 	movt	r0, #2
   10fe2:	6800      	ldr	r0, [r0, #0]
   10fe4:	9901      	ldr	r1, [sp, #4]
   10fe6:	ebc1 1201 	rsb	r2, r1, r1, lsl #4
   10fea:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   10fee:	9a00      	ldr	r2, [sp, #0]
   10ff0:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   10ff4:	f810 0012 	ldrb.w	r0, [r0, r2, lsl #1]
   10ff8:	785b      	ldrb	r3, [r3, #1]
   10ffa:	f88d 001c 	strb.w	r0, [sp, #28]
   10ffe:	f88d 301d 	strb.w	r3, [sp, #29]
    virtual_pixel
}
   11002:	4619      	mov	r1, r3
   11004:	b008      	add	sp, #32
   11006:	bd80      	pop	{r7, pc}
    let virtual_pixel = PHYSICAL_TO_VIRTUAL_MAP[y_index as usize][x_index as usize];  //  Returns (x,y)
   11008:	f640 0000 	movw	r0, #2048	; 0x800
   1100c:	f2c0 0002 	movt	r0, #2
   11010:	2264      	movs	r2, #100	; 0x64
   11012:	9901      	ldr	r1, [sp, #4]
   11014:	f007 faa2 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11018:	defe      	udf	#254	; 0xfe
   1101a:	f640 0000 	movw	r0, #2048	; 0x800
   1101e:	f2c0 0002 	movt	r0, #2
   11022:	2278      	movs	r2, #120	; 0x78
   11024:	9900      	ldr	r1, [sp, #0]
   11026:	f007 fa99 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1102a:	defe      	udf	#254	; 0xfe

0001102c <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E>:

/// Same as map_virtual_to_physical, except that (x,y) belongs to the X >= 0, Y >= 0 quadrant
fn map_virtual_to_physical_normalised(x: u8, y: u8) -> (u8, u8, u8, u8) {
   1102c:	b580      	push	{r7, lr}
   1102e:	b08a      	sub	sp, #40	; 0x28
   11030:	460a      	mov	r2, r1
   11032:	4603      	mov	r3, r0
   11034:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   11038:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   1103c:	211f      	movs	r1, #31
    let x_index = x.min(VIRTUAL_TO_PHYSICAL_MAP_WIDTH as u8 - 1);
   1103e:	9206      	str	r2, [sp, #24]
   11040:	9305      	str	r3, [sp, #20]
   11042:	f006 fc00 	bl	17846 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   11046:	4601      	mov	r1, r0
   11048:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
   1104c:	9104      	str	r1, [sp, #16]
   1104e:	e7ff      	b.n	11050 <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x24>
   11050:	210f      	movs	r1, #15
    let y_index = y.min(VIRTUAL_TO_PHYSICAL_MAP_HEIGHT as u8 - 1);
   11052:	9806      	ldr	r0, [sp, #24]
   11054:	f006 fbf7 	bl	17846 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   11058:	4601      	mov	r1, r0
   1105a:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   1105e:	9103      	str	r1, [sp, #12]
   11060:	e7ff      	b.n	11062 <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x36>
    let physical_box = VIRTUAL_TO_PHYSICAL_MAP[y_index as usize][x_index as usize];  //  Returns (left,top,right,bottom)
   11062:	9803      	ldr	r0, [sp, #12]
   11064:	b2c1      	uxtb	r1, r0
   11066:	460a      	mov	r2, r1
   11068:	290f      	cmp	r1, #15
   1106a:	9202      	str	r2, [sp, #8]
   1106c:	d818      	bhi.n	110a0 <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x74>
   1106e:	e7ff      	b.n	11070 <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x44>
   11070:	9804      	ldr	r0, [sp, #16]
   11072:	b2c1      	uxtb	r1, r0
   11074:	460a      	mov	r2, r1
   11076:	291f      	cmp	r1, #31
   11078:	9201      	str	r2, [sp, #4]
   1107a:	d81a      	bhi.n	110b2 <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x86>
   1107c:	e7ff      	b.n	1107e <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x52>
   1107e:	f646 50e4 	movw	r0, #28132	; 0x6de4
   11082:	f2c0 0002 	movt	r0, #2
   11086:	6800      	ldr	r0, [r0, #0]
   11088:	9902      	ldr	r1, [sp, #8]
   1108a:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
   1108e:	9a01      	ldr	r2, [sp, #4]
   11090:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   11094:	9008      	str	r0, [sp, #32]
    physical_box
   11096:	9808      	ldr	r0, [sp, #32]
   11098:	9007      	str	r0, [sp, #28]
}
   1109a:	9807      	ldr	r0, [sp, #28]
   1109c:	b00a      	add	sp, #40	; 0x28
   1109e:	bd80      	pop	{r7, pc}
    let physical_box = VIRTUAL_TO_PHYSICAL_MAP[y_index as usize][x_index as usize];  //  Returns (left,top,right,bottom)
   110a0:	f640 0010 	movw	r0, #2064	; 0x810
   110a4:	f2c0 0002 	movt	r0, #2
   110a8:	2210      	movs	r2, #16
   110aa:	9902      	ldr	r1, [sp, #8]
   110ac:	f007 fa56 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   110b0:	defe      	udf	#254	; 0xfe
   110b2:	f640 0010 	movw	r0, #2064	; 0x810
   110b6:	f2c0 0002 	movt	r0, #2
   110ba:	2220      	movs	r2, #32
   110bc:	9901      	ldr	r1, [sp, #4]
   110be:	f007 fa4d 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   110c2:	defe      	udf	#254	; 0xfe

000110c4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
   110c4:	b5b0      	push	{r4, r5, r7, lr}
   110c6:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
   110c8:	f646 50e8 	movw	r0, #28136	; 0x6de8
   110cc:	f2c0 0002 	movt	r0, #2
   110d0:	2112      	movs	r1, #18
   110d2:	f7f8 f811 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
   110d6:	e7ff      	b.n	110d8 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
   110d8:	f644 10b4 	movw	r0, #18868	; 0x49b4
   110dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   110e0:	210a      	movs	r1, #10
   110e2:	f003 ff82 	bl	14fea <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   110e6:	9012      	str	r0, [sp, #72]	; 0x48
   110e8:	e7ff      	b.n	110ea <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x26>
   110ea:	9812      	ldr	r0, [sp, #72]	; 0x48
   110ec:	f7f7 fdc8 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   110f0:	9014      	str	r0, [sp, #80]	; 0x50
   110f2:	e7ff      	b.n	110f4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x30>
   110f4:	9814      	ldr	r0, [sp, #80]	; 0x50
   110f6:	1e41      	subs	r1, r0, #1
   110f8:	bf18      	it	ne
   110fa:	2101      	movne	r1, #1
   110fc:	2801      	cmp	r0, #1
   110fe:	d001      	beq.n	11104 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x40>
   11100:	e7ff      	b.n	11102 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x3e>
   11102:	e008      	b.n	11116 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
   11104:	f644 10b4 	movw	r0, #18868	; 0x49b4
   11108:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1110c:	f004 f806 	bl	1511c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
   11110:	9011      	str	r0, [sp, #68]	; 0x44
   11112:	e00f      	b.n	11134 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
   11114:	defe      	udf	#254	; 0xfe
   11116:	9814      	ldr	r0, [sp, #80]	; 0x50
   11118:	9036      	str	r0, [sp, #216]	; 0xd8
   1111a:	f002 f963 	bl	133e4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   1111e:	9010      	str	r0, [sp, #64]	; 0x40
   11120:	e002      	b.n	11128 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
   11122:	9813      	ldr	r0, [sp, #76]	; 0x4c
   11124:	b03e      	add	sp, #248	; 0xf8
   11126:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
   11128:	9810      	ldr	r0, [sp, #64]	; 0x40
   1112a:	f7f7 fd9d 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   1112e:	9013      	str	r0, [sp, #76]	; 0x4c
   11130:	e7ff      	b.n	11132 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x6e>
   11132:	e7f6      	b.n	11122 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x5e>
        TOUCH_RESET.set_low() ? ;
   11134:	9811      	ldr	r0, [sp, #68]	; 0x44
   11136:	f7f7 fda3 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   1113a:	9015      	str	r0, [sp, #84]	; 0x54
   1113c:	e7ff      	b.n	1113e <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x7a>
   1113e:	9815      	ldr	r0, [sp, #84]	; 0x54
   11140:	1e41      	subs	r1, r0, #1
   11142:	bf18      	it	ne
   11144:	2101      	movne	r1, #1
   11146:	2801      	cmp	r0, #1
   11148:	d001      	beq.n	1114e <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x8a>
   1114a:	e7ff      	b.n	1114c <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x88>
   1114c:	e008      	b.n	11160 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x9c>
        TOUCH_DELAY.delay_ms(20);
   1114e:	f644 10b8 	movw	r0, #18872	; 0x49b8
   11152:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11156:	2114      	movs	r1, #20
   11158:	f003 fff7 	bl	1514a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   1115c:	e00d      	b.n	1117a <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb6>
        TOUCH_RESET.set_low() ? ;
   1115e:	defe      	udf	#254	; 0xfe
   11160:	9815      	ldr	r0, [sp, #84]	; 0x54
   11162:	9037      	str	r0, [sp, #220]	; 0xdc
   11164:	f002 f93e 	bl	133e4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   11168:	900f      	str	r0, [sp, #60]	; 0x3c
   1116a:	e7ff      	b.n	1116c <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xa8>
   1116c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1116e:	f7f7 fd7b 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   11172:	9013      	str	r0, [sp, #76]	; 0x4c
   11174:	e7ff      	b.n	11176 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb2>
   11176:	e7ff      	b.n	11178 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb4>
   11178:	e7d3      	b.n	11122 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x5e>
        TOUCH_RESET.set_high() ? ;
   1117a:	f644 10b4 	movw	r0, #18868	; 0x49b4
   1117e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11182:	f003 ffd6 	bl	15132 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
   11186:	900e      	str	r0, [sp, #56]	; 0x38
   11188:	e7ff      	b.n	1118a <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xc6>
   1118a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1118c:	f7f7 fd78 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   11190:	9016      	str	r0, [sp, #88]	; 0x58
   11192:	e7ff      	b.n	11194 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xd0>
   11194:	9816      	ldr	r0, [sp, #88]	; 0x58
   11196:	1e41      	subs	r1, r0, #1
   11198:	bf18      	it	ne
   1119a:	2101      	movne	r1, #1
   1119c:	2801      	cmp	r0, #1
   1119e:	d001      	beq.n	111a4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xe0>
   111a0:	e7ff      	b.n	111a2 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xde>
   111a2:	e008      	b.n	111b6 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
   111a4:	f644 10b8 	movw	r0, #18872	; 0x49b8
   111a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   111ac:	21c8      	movs	r1, #200	; 0xc8
   111ae:	f003 ffcc 	bl	1514a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   111b2:	e00c      	b.n	111ce <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x10a>
        TOUCH_RESET.set_high() ? ;
   111b4:	defe      	udf	#254	; 0xfe
   111b6:	9816      	ldr	r0, [sp, #88]	; 0x58
   111b8:	9038      	str	r0, [sp, #224]	; 0xe0
   111ba:	f002 f913 	bl	133e4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   111be:	900d      	str	r0, [sp, #52]	; 0x34
   111c0:	e7ff      	b.n	111c2 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xfe>
   111c2:	980d      	ldr	r0, [sp, #52]	; 0x34
   111c4:	f7f7 fd50 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   111c8:	9013      	str	r0, [sp, #76]	; 0x4c
   111ca:	e7ff      	b.n	111cc <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x108>
   111cc:	e7d4      	b.n	11178 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
   111ce:	f644 10b8 	movw	r0, #18872	; 0x49b8
   111d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   111d6:	21c8      	movs	r1, #200	; 0xc8
   111d8:	f003 ffb7 	bl	1514a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   111dc:	e7ff      	b.n	111de <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
   111de:	f241 3081 	movw	r0, #4993	; 0x1381
   111e2:	f2c0 0001 	movt	r0, #1
   111e6:	9017      	str	r0, [sp, #92]	; 0x5c
   111e8:	9817      	ldr	r0, [sp, #92]	; 0x5c
   111ea:	f644 214c 	movw	r1, #19020	; 0x4a4c
   111ee:	f2c2 0100 	movt	r1, #8192	; 0x2000
   111f2:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
   111f4:	f241 3035 	movw	r0, #4917	; 0x1335
   111f8:	f2c0 0001 	movt	r0, #1
   111fc:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
   111fe:	e7ff      	b.n	11200 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
   11200:	9919      	ldr	r1, [sp, #100]	; 0x64
   11202:	4668      	mov	r0, sp
   11204:	2201      	movs	r2, #1
   11206:	6002      	str	r2, [r0, #0]
   11208:	201c      	movs	r0, #28
   1120a:	2200      	movs	r2, #0
   1120c:	2302      	movs	r3, #2
   1120e:	f009 fb29 	bl	1a864 <hal_gpio_irq_init>
   11212:	9018      	str	r0, [sp, #96]	; 0x60
   11214:	e7ff      	b.n	11216 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
   11216:	f646 6000 	movw	r0, #28160	; 0x6e00
   1121a:	f2c0 0002 	movt	r0, #2
   1121e:	6800      	ldr	r0, [r0, #0]
   11220:	a918      	add	r1, sp, #96	; 0x60
   11222:	911a      	str	r1, [sp, #104]	; 0x68
   11224:	901b      	str	r0, [sp, #108]	; 0x6c
   11226:	981a      	ldr	r0, [sp, #104]	; 0x68
   11228:	9039      	str	r0, [sp, #228]	; 0xe4
   1122a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1122c:	913a      	str	r1, [sp, #232]	; 0xe8
   1122e:	6802      	ldr	r2, [r0, #0]
   11230:	680b      	ldr	r3, [r1, #0]
   11232:	429a      	cmp	r2, r3
   11234:	900c      	str	r0, [sp, #48]	; 0x30
   11236:	910b      	str	r1, [sp, #44]	; 0x2c
   11238:	d104      	bne.n	11244 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x180>
   1123a:	e7ff      	b.n	1123c <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x178>
   1123c:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
   1123e:	f009 fb4d 	bl	1a8dc <hal_gpio_irq_enable>
   11242:	e072      	b.n	1132a <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
   11244:	f646 6058 	movw	r0, #28248	; 0x6e58
   11248:	f2c0 0002 	movt	r0, #2
   1124c:	6801      	ldr	r1, [r0, #0]
   1124e:	980c      	ldr	r0, [sp, #48]	; 0x30
   11250:	902b      	str	r0, [sp, #172]	; 0xac
   11252:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11254:	922c      	str	r2, [sp, #176]	; 0xb0
   11256:	f646 6374 	movw	r3, #28276	; 0x6e74
   1125a:	f2c0 0302 	movt	r3, #2
   1125e:	681b      	ldr	r3, [r3, #0]
   11260:	f646 6c78 	movw	ip, #28280	; 0x6e78
   11264:	f2c0 0c02 	movt	ip, #2
   11268:	f8dc c000 	ldr.w	ip, [ip]
   1126c:	46ee      	mov	lr, sp
   1126e:	2400      	movs	r4, #0
   11270:	f8ce 4000 	str.w	r4, [lr]
   11274:	a82d      	add	r0, sp, #180	; 0xb4
   11276:	2201      	movs	r2, #1
   11278:	910a      	str	r1, [sp, #40]	; 0x28
   1127a:	4619      	mov	r1, r3
   1127c:	4663      	mov	r3, ip
   1127e:	f000 fdeb 	bl	11e58 <_ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE>
   11282:	e7ff      	b.n	11284 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x1c0>
   11284:	a82b      	add	r0, sp, #172	; 0xac
   11286:	9028      	str	r0, [sp, #160]	; 0xa0
   11288:	a82c      	add	r0, sp, #176	; 0xb0
   1128a:	9029      	str	r0, [sp, #164]	; 0xa4
   1128c:	a82d      	add	r0, sp, #180	; 0xb4
   1128e:	902a      	str	r0, [sp, #168]	; 0xa8
   11290:	9828      	ldr	r0, [sp, #160]	; 0xa0
   11292:	903b      	str	r0, [sp, #236]	; 0xec
   11294:	9929      	ldr	r1, [sp, #164]	; 0xa4
   11296:	913c      	str	r1, [sp, #240]	; 0xf0
   11298:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   1129a:	923d      	str	r2, [sp, #244]	; 0xf4
   1129c:	f242 330f 	movw	r3, #8975	; 0x230f
   112a0:	f2c0 0301 	movt	r3, #1
   112a4:	9109      	str	r1, [sp, #36]	; 0x24
   112a6:	4619      	mov	r1, r3
   112a8:	9208      	str	r2, [sp, #32]
   112aa:	f7f8 f8da 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   112ae:	9007      	str	r0, [sp, #28]
   112b0:	9106      	str	r1, [sp, #24]
   112b2:	e7ff      	b.n	112b4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x1f0>
   112b4:	f242 310f 	movw	r1, #8975	; 0x230f
   112b8:	f2c0 0101 	movt	r1, #1
   112bc:	9809      	ldr	r0, [sp, #36]	; 0x24
   112be:	f7f8 f8d0 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   112c2:	9005      	str	r0, [sp, #20]
   112c4:	9104      	str	r1, [sp, #16]
   112c6:	e7ff      	b.n	112c8 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x204>
   112c8:	f648 21ff 	movw	r1, #35583	; 0x8aff
   112cc:	f2c0 0101 	movt	r1, #1
   112d0:	9808      	ldr	r0, [sp, #32]
   112d2:	f7f8 f905 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   112d6:	9003      	str	r0, [sp, #12]
   112d8:	9102      	str	r1, [sp, #8]
   112da:	e7ff      	b.n	112dc <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x218>
   112dc:	9807      	ldr	r0, [sp, #28]
   112de:	9022      	str	r0, [sp, #136]	; 0x88
   112e0:	9906      	ldr	r1, [sp, #24]
   112e2:	9123      	str	r1, [sp, #140]	; 0x8c
   112e4:	9a05      	ldr	r2, [sp, #20]
   112e6:	9224      	str	r2, [sp, #144]	; 0x90
   112e8:	9b04      	ldr	r3, [sp, #16]
   112ea:	9325      	str	r3, [sp, #148]	; 0x94
   112ec:	f8dd c00c 	ldr.w	ip, [sp, #12]
   112f0:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
   112f4:	f8dd e008 	ldr.w	lr, [sp, #8]
   112f8:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
   112fc:	466c      	mov	r4, sp
   112fe:	2503      	movs	r5, #3
   11300:	6025      	str	r5, [r4, #0]
   11302:	a81c      	add	r0, sp, #112	; 0x70
   11304:	ab22      	add	r3, sp, #136	; 0x88
   11306:	990a      	ldr	r1, [sp, #40]	; 0x28
   11308:	462a      	mov	r2, r5
   1130a:	f000 fda5 	bl	11e58 <_ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE>
   1130e:	e7ff      	b.n	11310 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x24c>
   11310:	f646 6098 	movw	r0, #28312	; 0x6e98
   11314:	f2c0 0002 	movt	r0, #2
   11318:	f007 f903 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1131c:	9001      	str	r0, [sp, #4]
   1131e:	e7ff      	b.n	11320 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x25c>
   11320:	a81c      	add	r0, sp, #112	; 0x70
   11322:	9901      	ldr	r1, [sp, #4]
   11324:	f007 f93a 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   11328:	defe      	udf	#254	; 0xfe
   1132a:	2000      	movs	r0, #0
    Ok(())
   1132c:	9013      	str	r0, [sp, #76]	; 0x4c
   1132e:	2001      	movs	r0, #1
   11330:	9013      	str	r0, [sp, #76]	; 0x4c
}
   11332:	e6f6      	b.n	11122 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x5e>

00011334 <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
   11334:	b580      	push	{r7, lr}
   11336:	b086      	sub	sp, #24
   11338:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
   1133a:	f644 214c 	movw	r1, #19020	; 0x4a4c
   1133e:	f2c2 0100 	movt	r1, #8192	; 0x2000
   11342:	6088      	str	r0, [r1, #8]
   11344:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
   11346:	f7f7 fd17 	bl	8d78 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
   1134a:	e7ff      	b.n	1134c <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E+0x18>
   1134c:	f64e 5186 	movw	r1, #60806	; 0xed86
   11350:	f2c0 0101 	movt	r1, #1
   11354:	f646 63b0 	movw	r3, #28336	; 0x6eb0
   11358:	f2c0 0302 	movt	r3, #2
   1135c:	a802      	add	r0, sp, #8
   1135e:	2208      	movs	r2, #8
   11360:	f7fd fec1 	bl	f0e6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E>
   11364:	4601      	mov	r1, r0
   11366:	9005      	str	r0, [sp, #20]
   11368:	9101      	str	r1, [sp, #4]
   1136a:	e7ff      	b.n	1136c <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
   1136c:	f644 214c 	movw	r1, #19020	; 0x4a4c
   11370:	f2c2 0100 	movt	r1, #8192	; 0x2000
   11374:	9801      	ldr	r0, [sp, #4]
   11376:	f00a fb44 	bl	1ba02 <os_eventq_put>
   1137a:	e7ff      	b.n	1137c <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E+0x48>
    //console::print("touch\n"); ////
}
   1137c:	b006      	add	sp, #24
   1137e:	bd80      	pop	{r7, pc}

00011380 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
   11380:	b580      	push	{r7, lr}
   11382:	b094      	sub	sp, #80	; 0x50
   11384:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
   11386:	f644 10b8 	movw	r0, #18872	; 0x49b8
   1138a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1138e:	f000 f894 	bl	114ba <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E>
   11392:	9006      	str	r0, [sp, #24]
   11394:	e7ff      	b.n	11396 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x16>
   11396:	f646 61c0 	movw	r1, #28352	; 0x6ec0
   1139a:	f2c0 0102 	movt	r1, #2
   1139e:	f646 63d0 	movw	r3, #28368	; 0x6ed0
   113a2:	f2c0 0302 	movt	r3, #2
   113a6:	220e      	movs	r2, #14
   113a8:	9806      	ldr	r0, [sp, #24]
   113aa:	f7f7 fc2a 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   113ae:	e7ff      	b.n	113b0 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
   113b0:	f644 10b8 	movw	r0, #18872	; 0x49b8
   113b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   113b8:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
   113bc:	2100      	movs	r1, #0
   113be:	9107      	str	r1, [sp, #28]
   113c0:	9008      	str	r0, [sp, #32]
   113c2:	9807      	ldr	r0, [sp, #28]
   113c4:	9908      	ldr	r1, [sp, #32]
   113c6:	f001 fb95 	bl	12af4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   113ca:	9005      	str	r0, [sp, #20]
   113cc:	9104      	str	r1, [sp, #16]
   113ce:	e7ff      	b.n	113d0 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x50>
   113d0:	9805      	ldr	r0, [sp, #20]
   113d2:	9009      	str	r0, [sp, #36]	; 0x24
   113d4:	9904      	ldr	r1, [sp, #16]
   113d6:	910a      	str	r1, [sp, #40]	; 0x28
   113d8:	e7ff      	b.n	113da <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x5a>
   113da:	a809      	add	r0, sp, #36	; 0x24
   113dc:	f001 faff 	bl	129de <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   113e0:	910c      	str	r1, [sp, #48]	; 0x30
   113e2:	900b      	str	r0, [sp, #44]	; 0x2c
   113e4:	e7ff      	b.n	113e6 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x66>
   113e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   113e8:	2800      	cmp	r0, #0
   113ea:	d001      	beq.n	113f0 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x70>
   113ec:	e7ff      	b.n	113ee <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x6e>
   113ee:	e002      	b.n	113f6 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
   113f0:	b014      	add	sp, #80	; 0x50
   113f2:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
   113f4:	defe      	udf	#254	; 0xfe
   113f6:	980c      	ldr	r0, [sp, #48]	; 0x30
   113f8:	900f      	str	r0, [sp, #60]	; 0x3c
   113fa:	9010      	str	r0, [sp, #64]	; 0x40
   113fc:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
   113fe:	2809      	cmp	r0, #9
   11400:	9003      	str	r0, [sp, #12]
   11402:	d851      	bhi.n	114a8 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x128>
   11404:	e7ff      	b.n	11406 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x86>
   11406:	f644 10b8 	movw	r0, #18872	; 0x49b8
   1140a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1140e:	9903      	ldr	r1, [sp, #12]
   11410:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   11414:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
   11418:	4603      	mov	r3, r0
   1141a:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
   1141e:	f8b2 c002 	ldrh.w	ip, [r2, #2]
   11422:	46e6      	mov	lr, ip
   11424:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
   11428:	7912      	ldrb	r2, [r2, #4]
   1142a:	4694      	mov	ip, r2
   1142c:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
   11430:	2800      	cmp	r0, #0
   11432:	9302      	str	r3, [sp, #8]
   11434:	f8cd e004 	str.w	lr, [sp, #4]
   11438:	f8cd c000 	str.w	ip, [sp]
   1143c:	d008      	beq.n	11450 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xd0>
   1143e:	e003      	b.n	11448 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xc8>
   11440:	2001      	movs	r0, #1
   11442:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
   11446:	e008      	b.n	1145a <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xda>
   11448:	2000      	movs	r0, #0
   1144a:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
   1144e:	e004      	b.n	1145a <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xda>
   11450:	9801      	ldr	r0, [sp, #4]
   11452:	0401      	lsls	r1, r0, #16
   11454:	2900      	cmp	r1, #0
   11456:	d0f3      	beq.n	11440 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xc0>
   11458:	e7f6      	b.n	11448 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xc8>
   1145a:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
   1145e:	07c0      	lsls	r0, r0, #31
   11460:	2800      	cmp	r0, #0
   11462:	d105      	bne.n	11470 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf0>
   11464:	e7ff      	b.n	11466 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xe6>
            if action != 0 && action != 2 { continue; }
   11466:	9800      	ldr	r0, [sp, #0]
   11468:	0601      	lsls	r1, r0, #24
   1146a:	2900      	cmp	r1, #0
   1146c:	d10a      	bne.n	11484 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x104>
   1146e:	e005      	b.n	1147c <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xfc>
            if x == 0 && y == 0 { continue; }
   11470:	e7ff      	b.n	11472 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf2>
   11472:	e7b2      	b.n	113da <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x5a>
   11474:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
   11476:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   1147a:	e008      	b.n	1148e <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x10e>
   1147c:	2000      	movs	r0, #0
   1147e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   11482:	e004      	b.n	1148e <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x10e>
   11484:	9800      	ldr	r0, [sp, #0]
   11486:	b2c1      	uxtb	r1, r0
   11488:	2902      	cmp	r1, #2
   1148a:	d1f3      	bne.n	11474 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf4>
   1148c:	e7f6      	b.n	1147c <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xfc>
   1148e:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   11492:	07c0      	lsls	r0, r0, #31
   11494:	2800      	cmp	r0, #0
   11496:	d105      	bne.n	114a4 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x124>
   11498:	e7ff      	b.n	1149a <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x11a>
            super::handle_touch(x, y);
   1149a:	9802      	ldr	r0, [sp, #8]
   1149c:	9901      	ldr	r1, [sp, #4]
   1149e:	f7ff f918 	bl	106d2 <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E>
   114a2:	e000      	b.n	114a6 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x126>
            if action != 0 && action != 2 { continue; }
   114a4:	e7e5      	b.n	11472 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
   114a6:	e798      	b.n	113da <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
   114a8:	f646 60e0 	movw	r0, #28384	; 0x6ee0
   114ac:	f2c0 0002 	movt	r0, #2
   114b0:	220a      	movs	r2, #10
   114b2:	9903      	ldr	r1, [sp, #12]
   114b4:	f007 f852 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   114b8:	defe      	udf	#254	; 0xfe

000114ba <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
   114ba:	b580      	push	{r7, lr}
   114bc:	b0de      	sub	sp, #376	; 0x178
   114be:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
   114c0:	4669      	mov	r1, sp
   114c2:	223f      	movs	r2, #63	; 0x3f
   114c4:	600a      	str	r2, [r1, #0]
   114c6:	f644 230a 	movw	r3, #18954	; 0x4a0a
   114ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114ce:	2115      	movs	r1, #21
   114d0:	f04f 0c00 	mov.w	ip, #0
   114d4:	9026      	str	r0, [sp, #152]	; 0x98
   114d6:	4608      	mov	r0, r1
   114d8:	4661      	mov	r1, ip
   114da:	f000 fb97 	bl	11c0c <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E>
   114de:	9025      	str	r0, [sp, #148]	; 0x94
   114e0:	e7ff      	b.n	114e2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x28>
   114e2:	f646 61f0 	movw	r1, #28400	; 0x6ef0
   114e6:	f2c0 0102 	movt	r1, #2
   114ea:	f646 7304 	movw	r3, #28420	; 0x6f04
   114ee:	f2c0 0302 	movt	r3, #2
   114f2:	2213      	movs	r2, #19
   114f4:	9825      	ldr	r0, [sp, #148]	; 0x94
   114f6:	f7f7 fb84 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   114fa:	e7ff      	b.n	114fc <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x42>
   114fc:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
   11500:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
   11502:	9024      	str	r0, [sp, #144]	; 0x90
   11504:	9123      	str	r1, [sp, #140]	; 0x8c
   11506:	f00d fbe3 	bl	1ecd0 <__aeabi_memclr>
   1150a:	a827      	add	r0, sp, #156	; 0x9c
   1150c:	9924      	ldr	r1, [sp, #144]	; 0x90
   1150e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   11510:	f00d fbe2 	bl	1ecd8 <__aeabi_memcpy>
   11514:	e7ff      	b.n	11516 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5c>
   11516:	a927      	add	r1, sp, #156	; 0x9c
   11518:	2252      	movs	r2, #82	; 0x52
   1151a:	9826      	ldr	r0, [sp, #152]	; 0x98
   1151c:	f00d fbdc 	bl	1ecd8 <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
   11520:	f644 210a 	movw	r1, #18954	; 0x4a0a
   11524:	f2c2 0100 	movt	r1, #8192	; 0x2000
   11528:	7889      	ldrb	r1, [r1, #2]
   1152a:	f001 010f 	and.w	r1, r1, #15
   1152e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11530:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
   11534:	2100      	movs	r1, #0
    data.count     = 0;
   11536:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
   1153a:	9150      	str	r1, [sp, #320]	; 0x140
   1153c:	2105      	movs	r1, #5
   1153e:	9151      	str	r1, [sp, #324]	; 0x144
   11540:	9950      	ldr	r1, [sp, #320]	; 0x140
   11542:	9b51      	ldr	r3, [sp, #324]	; 0x144
   11544:	9022      	str	r0, [sp, #136]	; 0x88
   11546:	4608      	mov	r0, r1
   11548:	4619      	mov	r1, r3
   1154a:	f001 fad3 	bl	12af4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   1154e:	9021      	str	r0, [sp, #132]	; 0x84
   11550:	9120      	str	r1, [sp, #128]	; 0x80
   11552:	e7ff      	b.n	11554 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x9a>
   11554:	9821      	ldr	r0, [sp, #132]	; 0x84
   11556:	9052      	str	r0, [sp, #328]	; 0x148
   11558:	9920      	ldr	r1, [sp, #128]	; 0x80
   1155a:	9153      	str	r1, [sp, #332]	; 0x14c
   1155c:	e7ff      	b.n	1155e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xa4>
   1155e:	a852      	add	r0, sp, #328	; 0x148
   11560:	f001 fa3d 	bl	129de <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   11564:	9155      	str	r1, [sp, #340]	; 0x154
   11566:	9054      	str	r0, [sp, #336]	; 0x150
   11568:	e7ff      	b.n	1156a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xb0>
   1156a:	9854      	ldr	r0, [sp, #336]	; 0x150
   1156c:	2800      	cmp	r0, #0
   1156e:	d001      	beq.n	11574 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xba>
   11570:	e7ff      	b.n	11572 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xb8>
   11572:	e001      	b.n	11578 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xbe>
   11574:	e00d      	b.n	11592 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xd8>
   11576:	defe      	udf	#254	; 0xfe
   11578:	9855      	ldr	r0, [sp, #340]	; 0x154
   1157a:	9058      	str	r0, [sp, #352]	; 0x160
   1157c:	9059      	str	r0, [sp, #356]	; 0x164
   1157e:	905a      	str	r0, [sp, #360]	; 0x168
   11580:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
   11582:	fba1 1200 	umull	r1, r2, r1, r0
   11586:	2a00      	cmp	r2, #0
   11588:	901f      	str	r0, [sp, #124]	; 0x7c
   1158a:	911e      	str	r1, [sp, #120]	; 0x78
   1158c:	f040 81c1 	bne.w	11912 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x458>
   11590:	e002      	b.n	11598 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xde>
   11592:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
   11594:	b05e      	add	sp, #376	; 0x178
   11596:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
   11598:	981e      	ldr	r0, [sp, #120]	; 0x78
   1159a:	1d41      	adds	r1, r0, #5
   1159c:	460a      	mov	r2, r1
   1159e:	4281      	cmp	r1, r0
   115a0:	921d      	str	r2, [sp, #116]	; 0x74
   115a2:	f0c0 81c2 	bcc.w	1192a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x470>
   115a6:	e7ff      	b.n	115a8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xee>
   115a8:	981d      	ldr	r0, [sp, #116]	; 0x74
   115aa:	283e      	cmp	r0, #62	; 0x3e
   115ac:	f200 81c9 	bhi.w	11942 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x488>
   115b0:	e7ff      	b.n	115b2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xf8>
   115b2:	f644 200a 	movw	r0, #18954	; 0x4a0a
   115b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   115ba:	991d      	ldr	r1, [sp, #116]	; 0x74
   115bc:	5c40      	ldrb	r0, [r0, r1]
   115be:	0900      	lsrs	r0, r0, #4
   115c0:	901c      	str	r0, [sp, #112]	; 0x70
   115c2:	e7ff      	b.n	115c4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x10a>
   115c4:	981c      	ldr	r0, [sp, #112]	; 0x70
   115c6:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
   115ca:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
   115cc:	290e      	cmp	r1, #14
   115ce:	d80b      	bhi.n	115e8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x12e>
   115d0:	e7ff      	b.n	115d2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x118>
        data.count += 1;
   115d2:	9826      	ldr	r0, [sp, #152]	; 0x98
   115d4:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
   115d8:	3101      	adds	r1, #1
   115da:	b2ca      	uxtb	r2, r1
   115dc:	460b      	mov	r3, r1
   115de:	428a      	cmp	r2, r1
   115e0:	931b      	str	r3, [sp, #108]	; 0x6c
   115e2:	f040 81b7 	bne.w	11954 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x49a>
   115e6:	e001      	b.n	115ec <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x132>
        if pointid >= HYN_MAX_ID { break; }
   115e8:	e7ff      	b.n	115ea <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x130>
   115ea:	e7d2      	b.n	11592 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xd8>
        data.count += 1;
   115ec:	981b      	ldr	r0, [sp, #108]	; 0x6c
   115ee:	9926      	ldr	r1, [sp, #152]	; 0x98
   115f0:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
   115f4:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   115f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   115f8:	fba2 2c03 	umull	r2, ip, r2, r3
   115fc:	f1bc 0f00 	cmp.w	ip, #0
   11600:	921a      	str	r2, [sp, #104]	; 0x68
   11602:	f040 81b3 	bne.w	1196c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4b2>
   11606:	e7ff      	b.n	11608 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x14e>
   11608:	981a      	ldr	r0, [sp, #104]	; 0x68
   1160a:	1cc1      	adds	r1, r0, #3
   1160c:	460a      	mov	r2, r1
   1160e:	4281      	cmp	r1, r0
   11610:	9219      	str	r2, [sp, #100]	; 0x64
   11612:	f0c0 81b7 	bcc.w	11984 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4ca>
   11616:	e7ff      	b.n	11618 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x15e>
   11618:	9819      	ldr	r0, [sp, #100]	; 0x64
   1161a:	283e      	cmp	r0, #62	; 0x3e
   1161c:	f200 81be 	bhi.w	1199c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4e2>
   11620:	e7ff      	b.n	11622 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x168>
   11622:	f644 200a 	movw	r0, #18954	; 0x4a0a
   11626:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1162a:	9919      	ldr	r1, [sp, #100]	; 0x64
   1162c:	5c40      	ldrb	r0, [r0, r1]
   1162e:	f000 000f 	and.w	r0, r0, #15
   11632:	4602      	mov	r2, r0
   11634:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
   11638:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
   1163a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1163c:	fba0 0c03 	umull	r0, ip, r0, r3
   11640:	f1bc 0f00 	cmp.w	ip, #0
   11644:	9218      	str	r2, [sp, #96]	; 0x60
   11646:	9017      	str	r0, [sp, #92]	; 0x5c
   11648:	f040 81b1 	bne.w	119ae <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4f4>
   1164c:	e7ff      	b.n	1164e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x194>
   1164e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   11650:	1d01      	adds	r1, r0, #4
   11652:	460a      	mov	r2, r1
   11654:	4281      	cmp	r1, r0
   11656:	9216      	str	r2, [sp, #88]	; 0x58
   11658:	f0c0 81b5 	bcc.w	119c6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x50c>
   1165c:	e7ff      	b.n	1165e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1a4>
   1165e:	9816      	ldr	r0, [sp, #88]	; 0x58
   11660:	283e      	cmp	r0, #62	; 0x3e
   11662:	f200 81bc 	bhi.w	119de <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x524>
   11666:	e7ff      	b.n	11668 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1ae>
   11668:	f644 200a 	movw	r0, #18954	; 0x4a0a
   1166c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11670:	9916      	ldr	r1, [sp, #88]	; 0x58
   11672:	5c40      	ldrb	r0, [r0, r1]
   11674:	4602      	mov	r2, r0
   11676:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
   1167a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1167c:	0203      	lsls	r3, r0, #8
   1167e:	9215      	str	r2, [sp, #84]	; 0x54
   11680:	9314      	str	r3, [sp, #80]	; 0x50
   11682:	e7ff      	b.n	11684 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1ca>
   11684:	981f      	ldr	r0, [sp, #124]	; 0x7c
   11686:	2809      	cmp	r0, #9
   11688:	f200 81b2 	bhi.w	119f0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x536>
   1168c:	e7ff      	b.n	1168e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1d4>
   1168e:	9814      	ldr	r0, [sp, #80]	; 0x50
   11690:	9915      	ldr	r1, [sp, #84]	; 0x54
   11692:	ea40 0201 	orr.w	r2, r0, r1
   11696:	9b26      	ldr	r3, [sp, #152]	; 0x98
   11698:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
   1169c:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
   116a0:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   116a2:	fba2 2e0c 	umull	r2, lr, r2, ip
   116a6:	f1be 0f00 	cmp.w	lr, #0
   116aa:	9213      	str	r2, [sp, #76]	; 0x4c
   116ac:	f040 81a9 	bne.w	11a02 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x548>
   116b0:	e7ff      	b.n	116b2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1f8>
   116b2:	9813      	ldr	r0, [sp, #76]	; 0x4c
   116b4:	1d41      	adds	r1, r0, #5
   116b6:	460a      	mov	r2, r1
   116b8:	4281      	cmp	r1, r0
   116ba:	9212      	str	r2, [sp, #72]	; 0x48
   116bc:	f0c0 81ad 	bcc.w	11a1a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x560>
   116c0:	e7ff      	b.n	116c2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x208>
   116c2:	9812      	ldr	r0, [sp, #72]	; 0x48
   116c4:	283e      	cmp	r0, #62	; 0x3e
   116c6:	f200 81b4 	bhi.w	11a32 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x578>
   116ca:	e7ff      	b.n	116cc <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x212>
   116cc:	f644 200a 	movw	r0, #18954	; 0x4a0a
   116d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   116d4:	9912      	ldr	r1, [sp, #72]	; 0x48
   116d6:	5c40      	ldrb	r0, [r0, r1]
   116d8:	f000 000f 	and.w	r0, r0, #15
   116dc:	4602      	mov	r2, r0
   116de:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
   116e2:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
   116e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   116e6:	fba0 0c03 	umull	r0, ip, r0, r3
   116ea:	f1bc 0f00 	cmp.w	ip, #0
   116ee:	9211      	str	r2, [sp, #68]	; 0x44
   116f0:	9010      	str	r0, [sp, #64]	; 0x40
   116f2:	f040 81a7 	bne.w	11a44 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x58a>
   116f6:	e7ff      	b.n	116f8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x23e>
   116f8:	9810      	ldr	r0, [sp, #64]	; 0x40
   116fa:	1d81      	adds	r1, r0, #6
   116fc:	460a      	mov	r2, r1
   116fe:	4281      	cmp	r1, r0
   11700:	920f      	str	r2, [sp, #60]	; 0x3c
   11702:	f0c0 81ab 	bcc.w	11a5c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5a2>
   11706:	e7ff      	b.n	11708 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x24e>
   11708:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1170a:	283e      	cmp	r0, #62	; 0x3e
   1170c:	f200 81b2 	bhi.w	11a74 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5ba>
   11710:	e7ff      	b.n	11712 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x258>
   11712:	f644 200a 	movw	r0, #18954	; 0x4a0a
   11716:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1171a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1171c:	5c40      	ldrb	r0, [r0, r1]
   1171e:	4602      	mov	r2, r0
   11720:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
   11724:	9811      	ldr	r0, [sp, #68]	; 0x44
   11726:	0203      	lsls	r3, r0, #8
   11728:	920e      	str	r2, [sp, #56]	; 0x38
   1172a:	930d      	str	r3, [sp, #52]	; 0x34
   1172c:	e7ff      	b.n	1172e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x274>
   1172e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   11730:	2809      	cmp	r0, #9
   11732:	f200 81a8 	bhi.w	11a86 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5cc>
   11736:	e7ff      	b.n	11738 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x27e>
   11738:	9826      	ldr	r0, [sp, #152]	; 0x98
   1173a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1173c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   11740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11742:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   11746:	ea43 0e0c 	orr.w	lr, r3, ip
   1174a:	f8a2 e002 	strh.w	lr, [r2, #2]
   1174e:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
   11750:	fba2 2e01 	umull	r2, lr, r2, r1
   11754:	f1be 0f00 	cmp.w	lr, #0
   11758:	920c      	str	r2, [sp, #48]	; 0x30
   1175a:	f040 819d 	bne.w	11a98 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5de>
   1175e:	e7ff      	b.n	11760 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2a6>
   11760:	980c      	ldr	r0, [sp, #48]	; 0x30
   11762:	1cc1      	adds	r1, r0, #3
   11764:	460a      	mov	r2, r1
   11766:	4281      	cmp	r1, r0
   11768:	920b      	str	r2, [sp, #44]	; 0x2c
   1176a:	f0c0 81a1 	bcc.w	11ab0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5f6>
   1176e:	e7ff      	b.n	11770 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2b6>
   11770:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11772:	283e      	cmp	r0, #62	; 0x3e
   11774:	f200 81a8 	bhi.w	11ac8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x60e>
   11778:	e7ff      	b.n	1177a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2c0>
   1177a:	f644 200a 	movw	r0, #18954	; 0x4a0a
   1177e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11782:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11784:	5c40      	ldrb	r0, [r0, r1]
   11786:	0980      	lsrs	r0, r0, #6
   11788:	900a      	str	r0, [sp, #40]	; 0x28
   1178a:	e7ff      	b.n	1178c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2d2>
        data.touches[i].action =
   1178c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1178e:	2809      	cmp	r0, #9
   11790:	f200 81a3 	bhi.w	11ada <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x620>
   11794:	e7ff      	b.n	11796 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2dc>
   11796:	9826      	ldr	r0, [sp, #152]	; 0x98
   11798:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1179a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   1179e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   117a0:	7113      	strb	r3, [r2, #4]
   117a2:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
   117a4:	fba2 2c01 	umull	r2, ip, r2, r1
   117a8:	f1bc 0f00 	cmp.w	ip, #0
   117ac:	9209      	str	r2, [sp, #36]	; 0x24
   117ae:	f040 819d 	bne.w	11aec <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x632>
   117b2:	e7ff      	b.n	117b4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2fa>
   117b4:	9809      	ldr	r0, [sp, #36]	; 0x24
   117b6:	1d41      	adds	r1, r0, #5
   117b8:	460a      	mov	r2, r1
   117ba:	4281      	cmp	r1, r0
   117bc:	9208      	str	r2, [sp, #32]
   117be:	f0c0 81a1 	bcc.w	11b04 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x64a>
   117c2:	e7ff      	b.n	117c4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x30a>
   117c4:	9808      	ldr	r0, [sp, #32]
   117c6:	283e      	cmp	r0, #62	; 0x3e
   117c8:	f200 81a8 	bhi.w	11b1c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x662>
   117cc:	e7ff      	b.n	117ce <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x314>
   117ce:	f644 200a 	movw	r0, #18954	; 0x4a0a
   117d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   117d6:	9908      	ldr	r1, [sp, #32]
   117d8:	5c40      	ldrb	r0, [r0, r1]
   117da:	0900      	lsrs	r0, r0, #4
   117dc:	9007      	str	r0, [sp, #28]
   117de:	e7ff      	b.n	117e0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x326>
        data.touches[i].finger =
   117e0:	981f      	ldr	r0, [sp, #124]	; 0x7c
   117e2:	2809      	cmp	r0, #9
   117e4:	f200 81a3 	bhi.w	11b2e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x674>
   117e8:	e7ff      	b.n	117ea <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x330>
   117ea:	9826      	ldr	r0, [sp, #152]	; 0x98
   117ec:	991f      	ldr	r1, [sp, #124]	; 0x7c
   117ee:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   117f2:	9b07      	ldr	r3, [sp, #28]
   117f4:	7153      	strb	r3, [r2, #5]
   117f6:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
   117f8:	fba2 2c01 	umull	r2, ip, r2, r1
   117fc:	f1bc 0f00 	cmp.w	ip, #0
   11800:	9206      	str	r2, [sp, #24]
   11802:	f040 819d 	bne.w	11b40 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x686>
   11806:	e7ff      	b.n	11808 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x34e>
   11808:	9806      	ldr	r0, [sp, #24]
   1180a:	1dc1      	adds	r1, r0, #7
   1180c:	460a      	mov	r2, r1
   1180e:	4281      	cmp	r1, r0
   11810:	9205      	str	r2, [sp, #20]
   11812:	f0c0 81a1 	bcc.w	11b58 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x69e>
   11816:	e7ff      	b.n	11818 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x35e>
   11818:	9805      	ldr	r0, [sp, #20]
   1181a:	283e      	cmp	r0, #62	; 0x3e
   1181c:	f200 81a8 	bhi.w	11b70 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6b6>
   11820:	e7ff      	b.n	11822 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x368>
   11822:	f644 200a 	movw	r0, #18954	; 0x4a0a
   11826:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1182a:	9905      	ldr	r1, [sp, #20]
   1182c:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
   1182e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   11830:	2a09      	cmp	r2, #9
   11832:	9004      	str	r0, [sp, #16]
   11834:	f200 81a5 	bhi.w	11b82 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6c8>
   11838:	e7ff      	b.n	1183a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x380>
   1183a:	9826      	ldr	r0, [sp, #152]	; 0x98
   1183c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1183e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   11842:	9b04      	ldr	r3, [sp, #16]
   11844:	7193      	strb	r3, [r2, #6]
   11846:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
   11848:	fba2 2c01 	umull	r2, ip, r2, r1
   1184c:	f1bc 0f00 	cmp.w	ip, #0
   11850:	9203      	str	r2, [sp, #12]
   11852:	f040 819f 	bne.w	11b94 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6da>
   11856:	e7ff      	b.n	11858 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x39e>
   11858:	9803      	ldr	r0, [sp, #12]
   1185a:	f100 0108 	add.w	r1, r0, #8
   1185e:	460a      	mov	r2, r1
   11860:	4281      	cmp	r1, r0
   11862:	9202      	str	r2, [sp, #8]
   11864:	f0c0 81a2 	bcc.w	11bac <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6f2>
   11868:	e7ff      	b.n	1186a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3b0>
   1186a:	9802      	ldr	r0, [sp, #8]
   1186c:	283e      	cmp	r0, #62	; 0x3e
   1186e:	f200 81a9 	bhi.w	11bc4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x70a>
   11872:	e7ff      	b.n	11874 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3ba>
   11874:	f644 200a 	movw	r0, #18954	; 0x4a0a
   11878:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1187c:	9902      	ldr	r1, [sp, #8]
   1187e:	5c40      	ldrb	r0, [r0, r1]
   11880:	0900      	lsrs	r0, r0, #4
   11882:	9001      	str	r0, [sp, #4]
   11884:	e7ff      	b.n	11886 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3cc>
        data.touches[i].area =
   11886:	981f      	ldr	r0, [sp, #124]	; 0x7c
   11888:	2809      	cmp	r0, #9
   1188a:	f200 81a4 	bhi.w	11bd6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x71c>
   1188e:	e7ff      	b.n	11890 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3d6>
   11890:	9826      	ldr	r0, [sp, #152]	; 0x98
   11892:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11894:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   11898:	9b01      	ldr	r3, [sp, #4]
   1189a:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
   1189c:	290a      	cmp	r1, #10
   1189e:	d326      	bcc.n	118ee <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x434>
   118a0:	e1a2      	b.n	11be8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x72e>
   118a2:	2001      	movs	r0, #1
   118a4:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
   118a8:	e009      	b.n	118be <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x404>
   118aa:	2000      	movs	r0, #0
   118ac:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
   118b0:	e005      	b.n	118be <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x404>
            && (data.point_num == 0) {
   118b2:	9826      	ldr	r0, [sp, #152]	; 0x98
   118b4:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
   118b8:	2900      	cmp	r1, #0
   118ba:	d0f2      	beq.n	118a2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3e8>
   118bc:	e7f5      	b.n	118aa <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3f0>
   118be:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
   118c2:	07c0      	lsls	r0, r0, #31
   118c4:	2800      	cmp	r0, #0
   118c6:	d123      	bne.n	11910 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x456>
   118c8:	e021      	b.n	1190e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x454>
   118ca:	2001      	movs	r0, #1
   118cc:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
   118d0:	e007      	b.n	118e2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x428>
   118d2:	2000      	movs	r0, #0
   118d4:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
   118d8:	e003      	b.n	118e2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x428>
   118da:	981f      	ldr	r0, [sp, #124]	; 0x7c
   118dc:	280a      	cmp	r0, #10
   118de:	d30e      	bcc.n	118fe <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x444>
   118e0:	e18b      	b.n	11bfa <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x740>
   118e2:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
   118e6:	07c0      	lsls	r0, r0, #31
   118e8:	2800      	cmp	r0, #0
   118ea:	d1e2      	bne.n	118b2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3f8>
   118ec:	e7dd      	b.n	118aa <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3f0>
   118ee:	9826      	ldr	r0, [sp, #152]	; 0x98
   118f0:	991f      	ldr	r1, [sp, #124]	; 0x7c
   118f2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   118f6:	7912      	ldrb	r2, [r2, #4]
   118f8:	2a00      	cmp	r2, #0
   118fa:	d0e6      	beq.n	118ca <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x410>
   118fc:	e7ed      	b.n	118da <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x420>
   118fe:	9826      	ldr	r0, [sp, #152]	; 0x98
   11900:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11902:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   11906:	7912      	ldrb	r2, [r2, #4]
   11908:	2a02      	cmp	r2, #2
   1190a:	d0de      	beq.n	118ca <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x410>
   1190c:	e7e1      	b.n	118d2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
   1190e:	e626      	b.n	1155e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xa4>
            break;
   11910:	e66b      	b.n	115ea <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
   11912:	f646 7030 	movw	r0, #28464	; 0x6f30
   11916:	f2c0 0002 	movt	r0, #2
   1191a:	f646 7214 	movw	r2, #28436	; 0x6f14
   1191e:	f2c0 0202 	movt	r2, #2
   11922:	2121      	movs	r1, #33	; 0x21
   11924:	f006 fe04 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11928:	defe      	udf	#254	; 0xfe
   1192a:	f646 7070 	movw	r0, #28528	; 0x6f70
   1192e:	f2c0 0002 	movt	r0, #2
   11932:	f646 7254 	movw	r2, #28500	; 0x6f54
   11936:	f2c0 0202 	movt	r2, #2
   1193a:	211c      	movs	r1, #28
   1193c:	f006 fdf8 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11940:	defe      	udf	#254	; 0xfe
   11942:	f646 708c 	movw	r0, #28556	; 0x6f8c
   11946:	f2c0 0002 	movt	r0, #2
   1194a:	223f      	movs	r2, #63	; 0x3f
   1194c:	991d      	ldr	r1, [sp, #116]	; 0x74
   1194e:	f006 fe05 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11952:	defe      	udf	#254	; 0xfe
        data.count += 1;
   11954:	f646 7070 	movw	r0, #28528	; 0x6f70
   11958:	f2c0 0002 	movt	r0, #2
   1195c:	f646 729c 	movw	r2, #28572	; 0x6f9c
   11960:	f2c0 0202 	movt	r2, #2
   11964:	211c      	movs	r1, #28
   11966:	f006 fde3 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1196a:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   1196c:	f646 7030 	movw	r0, #28464	; 0x6f30
   11970:	f2c0 0002 	movt	r0, #2
   11974:	f646 72ac 	movw	r2, #28588	; 0x6fac
   11978:	f2c0 0202 	movt	r2, #2
   1197c:	2121      	movs	r1, #33	; 0x21
   1197e:	f006 fdd7 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11982:	defe      	udf	#254	; 0xfe
   11984:	f646 7070 	movw	r0, #28528	; 0x6f70
   11988:	f2c0 0002 	movt	r0, #2
   1198c:	f646 72bc 	movw	r2, #28604	; 0x6fbc
   11990:	f2c0 0202 	movt	r2, #2
   11994:	211c      	movs	r1, #28
   11996:	f006 fdcb 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1199a:	defe      	udf	#254	; 0xfe
   1199c:	f646 70cc 	movw	r0, #28620	; 0x6fcc
   119a0:	f2c0 0002 	movt	r0, #2
   119a4:	223f      	movs	r2, #63	; 0x3f
   119a6:	9919      	ldr	r1, [sp, #100]	; 0x64
   119a8:	f006 fdd8 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   119ac:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
   119ae:	f646 7030 	movw	r0, #28464	; 0x6f30
   119b2:	f2c0 0002 	movt	r0, #2
   119b6:	f646 72dc 	movw	r2, #28636	; 0x6fdc
   119ba:	f2c0 0202 	movt	r2, #2
   119be:	2121      	movs	r1, #33	; 0x21
   119c0:	f006 fdb6 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   119c4:	defe      	udf	#254	; 0xfe
   119c6:	f646 7070 	movw	r0, #28528	; 0x6f70
   119ca:	f2c0 0002 	movt	r0, #2
   119ce:	f646 72ec 	movw	r2, #28652	; 0x6fec
   119d2:	f2c0 0202 	movt	r2, #2
   119d6:	211c      	movs	r1, #28
   119d8:	f006 fdaa 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   119dc:	defe      	udf	#254	; 0xfe
   119de:	f646 70fc 	movw	r0, #28668	; 0x6ffc
   119e2:	f2c0 0002 	movt	r0, #2
   119e6:	223f      	movs	r2, #63	; 0x3f
   119e8:	9916      	ldr	r1, [sp, #88]	; 0x58
   119ea:	f006 fdb7 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   119ee:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
   119f0:	f247 000c 	movw	r0, #28684	; 0x700c
   119f4:	f2c0 0002 	movt	r0, #2
   119f8:	220a      	movs	r2, #10
   119fa:	991f      	ldr	r1, [sp, #124]	; 0x7c
   119fc:	f006 fdae 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11a00:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   11a02:	f646 7030 	movw	r0, #28464	; 0x6f30
   11a06:	f2c0 0002 	movt	r0, #2
   11a0a:	f247 021c 	movw	r2, #28700	; 0x701c
   11a0e:	f2c0 0202 	movt	r2, #2
   11a12:	2121      	movs	r1, #33	; 0x21
   11a14:	f006 fd8c 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11a18:	defe      	udf	#254	; 0xfe
   11a1a:	f646 7070 	movw	r0, #28528	; 0x6f70
   11a1e:	f2c0 0002 	movt	r0, #2
   11a22:	f247 022c 	movw	r2, #28716	; 0x702c
   11a26:	f2c0 0202 	movt	r2, #2
   11a2a:	211c      	movs	r1, #28
   11a2c:	f006 fd80 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11a30:	defe      	udf	#254	; 0xfe
   11a32:	f247 003c 	movw	r0, #28732	; 0x703c
   11a36:	f2c0 0002 	movt	r0, #2
   11a3a:	223f      	movs	r2, #63	; 0x3f
   11a3c:	9912      	ldr	r1, [sp, #72]	; 0x48
   11a3e:	f006 fd8d 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11a42:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
   11a44:	f646 7030 	movw	r0, #28464	; 0x6f30
   11a48:	f2c0 0002 	movt	r0, #2
   11a4c:	f247 024c 	movw	r2, #28748	; 0x704c
   11a50:	f2c0 0202 	movt	r2, #2
   11a54:	2121      	movs	r1, #33	; 0x21
   11a56:	f006 fd6b 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11a5a:	defe      	udf	#254	; 0xfe
   11a5c:	f646 7070 	movw	r0, #28528	; 0x6f70
   11a60:	f2c0 0002 	movt	r0, #2
   11a64:	f247 025c 	movw	r2, #28764	; 0x705c
   11a68:	f2c0 0202 	movt	r2, #2
   11a6c:	211c      	movs	r1, #28
   11a6e:	f006 fd5f 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11a72:	defe      	udf	#254	; 0xfe
   11a74:	f247 006c 	movw	r0, #28780	; 0x706c
   11a78:	f2c0 0002 	movt	r0, #2
   11a7c:	223f      	movs	r2, #63	; 0x3f
   11a7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11a80:	f006 fd6c 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11a84:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
   11a86:	f247 007c 	movw	r0, #28796	; 0x707c
   11a8a:	f2c0 0002 	movt	r0, #2
   11a8e:	220a      	movs	r2, #10
   11a90:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11a92:	f006 fd63 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11a96:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
   11a98:	f646 7030 	movw	r0, #28464	; 0x6f30
   11a9c:	f2c0 0002 	movt	r0, #2
   11aa0:	f247 028c 	movw	r2, #28812	; 0x708c
   11aa4:	f2c0 0202 	movt	r2, #2
   11aa8:	2121      	movs	r1, #33	; 0x21
   11aaa:	f006 fd41 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11aae:	defe      	udf	#254	; 0xfe
   11ab0:	f646 7070 	movw	r0, #28528	; 0x6f70
   11ab4:	f2c0 0002 	movt	r0, #2
   11ab8:	f247 029c 	movw	r2, #28828	; 0x709c
   11abc:	f2c0 0202 	movt	r2, #2
   11ac0:	211c      	movs	r1, #28
   11ac2:	f006 fd35 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11ac6:	defe      	udf	#254	; 0xfe
   11ac8:	f247 00ac 	movw	r0, #28844	; 0x70ac
   11acc:	f2c0 0002 	movt	r0, #2
   11ad0:	223f      	movs	r2, #63	; 0x3f
   11ad2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11ad4:	f006 fd42 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11ad8:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
   11ada:	f247 00bc 	movw	r0, #28860	; 0x70bc
   11ade:	f2c0 0002 	movt	r0, #2
   11ae2:	220a      	movs	r2, #10
   11ae4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11ae6:	f006 fd39 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11aea:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
   11aec:	f646 7030 	movw	r0, #28464	; 0x6f30
   11af0:	f2c0 0002 	movt	r0, #2
   11af4:	f247 02cc 	movw	r2, #28876	; 0x70cc
   11af8:	f2c0 0202 	movt	r2, #2
   11afc:	2121      	movs	r1, #33	; 0x21
   11afe:	f006 fd17 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11b02:	defe      	udf	#254	; 0xfe
   11b04:	f646 7070 	movw	r0, #28528	; 0x6f70
   11b08:	f2c0 0002 	movt	r0, #2
   11b0c:	f247 02dc 	movw	r2, #28892	; 0x70dc
   11b10:	f2c0 0202 	movt	r2, #2
   11b14:	211c      	movs	r1, #28
   11b16:	f006 fd0b 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11b1a:	defe      	udf	#254	; 0xfe
   11b1c:	f247 00ec 	movw	r0, #28908	; 0x70ec
   11b20:	f2c0 0002 	movt	r0, #2
   11b24:	223f      	movs	r2, #63	; 0x3f
   11b26:	9908      	ldr	r1, [sp, #32]
   11b28:	f006 fd18 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11b2c:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
   11b2e:	f247 00fc 	movw	r0, #28924	; 0x70fc
   11b32:	f2c0 0002 	movt	r0, #2
   11b36:	220a      	movs	r2, #10
   11b38:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11b3a:	f006 fd0f 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11b3e:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
   11b40:	f646 7030 	movw	r0, #28464	; 0x6f30
   11b44:	f2c0 0002 	movt	r0, #2
   11b48:	f247 120c 	movw	r2, #28940	; 0x710c
   11b4c:	f2c0 0202 	movt	r2, #2
   11b50:	2121      	movs	r1, #33	; 0x21
   11b52:	f006 fced 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11b56:	defe      	udf	#254	; 0xfe
   11b58:	f646 7070 	movw	r0, #28528	; 0x6f70
   11b5c:	f2c0 0002 	movt	r0, #2
   11b60:	f247 121c 	movw	r2, #28956	; 0x711c
   11b64:	f2c0 0202 	movt	r2, #2
   11b68:	211c      	movs	r1, #28
   11b6a:	f006 fce1 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11b6e:	defe      	udf	#254	; 0xfe
   11b70:	f247 102c 	movw	r0, #28972	; 0x712c
   11b74:	f2c0 0002 	movt	r0, #2
   11b78:	223f      	movs	r2, #63	; 0x3f
   11b7a:	9905      	ldr	r1, [sp, #20]
   11b7c:	f006 fcee 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11b80:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
   11b82:	f247 103c 	movw	r0, #28988	; 0x713c
   11b86:	f2c0 0002 	movt	r0, #2
   11b8a:	220a      	movs	r2, #10
   11b8c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11b8e:	f006 fce5 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11b92:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
   11b94:	f646 7030 	movw	r0, #28464	; 0x6f30
   11b98:	f2c0 0002 	movt	r0, #2
   11b9c:	f247 124c 	movw	r2, #29004	; 0x714c
   11ba0:	f2c0 0202 	movt	r2, #2
   11ba4:	2121      	movs	r1, #33	; 0x21
   11ba6:	f006 fcc3 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11baa:	defe      	udf	#254	; 0xfe
   11bac:	f646 7070 	movw	r0, #28528	; 0x6f70
   11bb0:	f2c0 0002 	movt	r0, #2
   11bb4:	f247 125c 	movw	r2, #29020	; 0x715c
   11bb8:	f2c0 0202 	movt	r2, #2
   11bbc:	211c      	movs	r1, #28
   11bbe:	f006 fcb7 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11bc2:	defe      	udf	#254	; 0xfe
   11bc4:	f247 106c 	movw	r0, #29036	; 0x716c
   11bc8:	f2c0 0002 	movt	r0, #2
   11bcc:	223f      	movs	r2, #63	; 0x3f
   11bce:	9902      	ldr	r1, [sp, #8]
   11bd0:	f006 fcc4 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11bd4:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
   11bd6:	f247 107c 	movw	r0, #29052	; 0x717c
   11bda:	f2c0 0002 	movt	r0, #2
   11bde:	220a      	movs	r2, #10
   11be0:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11be2:	f006 fcbb 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11be6:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
   11be8:	f247 108c 	movw	r0, #29068	; 0x718c
   11bec:	f2c0 0002 	movt	r0, #2
   11bf0:	220a      	movs	r2, #10
   11bf2:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11bf4:	f006 fcb2 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11bf8:	defe      	udf	#254	; 0xfe
   11bfa:	f247 109c 	movw	r0, #29084	; 0x719c
   11bfe:	f2c0 0002 	movt	r0, #2
   11c02:	220a      	movs	r2, #10
   11c04:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11c06:	f006 fca9 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11c0a:	defe      	udf	#254	; 0xfe

00011c0c <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
   11c0c:	b5b0      	push	{r4, r5, r7, lr}
   11c0e:	b094      	sub	sp, #80	; 0x50
   11c10:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
   11c14:	4696      	mov	lr, r2
   11c16:	460c      	mov	r4, r1
   11c18:	4605      	mov	r5, r0
   11c1a:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
   11c1e:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
   11c22:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
   11c26:	9310      	str	r3, [sp, #64]	; 0x40
   11c28:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
   11c2c:	4618      	mov	r0, r3
   11c2e:	4661      	mov	r1, ip
   11c30:	930d      	str	r3, [sp, #52]	; 0x34
   11c32:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   11c36:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   11c3a:	940a      	str	r4, [sp, #40]	; 0x28
   11c3c:	9509      	str	r5, [sp, #36]	; 0x24
   11c3e:	f000 ff32 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   11c42:	9008      	str	r0, [sp, #32]
   11c44:	e7ff      	b.n	11c46 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x3a>
   11c46:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11c48:	b2c1      	uxtb	r1, r0
   11c4a:	9a08      	ldr	r2, [sp, #32]
   11c4c:	428a      	cmp	r2, r1
   11c4e:	d30d      	bcc.n	11c6c <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x60>
   11c50:	e7ff      	b.n	11c52 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   11c52:	980a      	ldr	r0, [sp, #40]	; 0x28
   11c54:	b2c1      	uxtb	r1, r0
   11c56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11c58:	fa51 f182 	uxtab	r1, r1, r2
   11c5c:	b2cb      	uxtb	r3, r1
   11c5e:	468c      	mov	ip, r1
   11c60:	428b      	cmp	r3, r1
   11c62:	f8cd c01c 	str.w	ip, [sp, #28]
   11c66:	f040 8092 	bne.w	11d8e <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x182>
   11c6a:	e00b      	b.n	11c84 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
   11c6c:	f247 10ac 	movw	r0, #29100	; 0x71ac
   11c70:	f2c0 0002 	movt	r0, #2
   11c74:	f247 12b4 	movw	r2, #29108	; 0x71b4
   11c78:	f2c0 0202 	movt	r2, #2
   11c7c:	2107      	movs	r1, #7
   11c7e:	f006 fc57 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11c82:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   11c84:	9807      	ldr	r0, [sp, #28]
   11c86:	b241      	sxtb	r1, r0
   11c88:	2900      	cmp	r1, #0
   11c8a:	d411      	bmi.n	11cb0 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0xa4>
   11c8c:	e7ff      	b.n	11c8e <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
   11c8e:	f644 2064 	movw	r0, #19044	; 0x4a64
   11c92:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11c96:	990a      	ldr	r1, [sp, #40]	; 0x28
   11c98:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
   11c9a:	f644 225c 	movw	r2, #19036	; 0x4a5c
   11c9e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11ca4:	7013      	strb	r3, [r2, #0]
   11ca6:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
   11ca8:	f000 fefd 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   11cac:	9006      	str	r0, [sp, #24]
   11cae:	e00b      	b.n	11cc8 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   11cb0:	f646 60a8 	movw	r0, #28328	; 0x6ea8
   11cb4:	f2c0 0002 	movt	r0, #2
   11cb8:	f247 12d4 	movw	r2, #29140	; 0x71d4
   11cbc:	f2c0 0202 	movt	r2, #2
   11cc0:	2108      	movs	r1, #8
   11cc2:	f006 fc35 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11cc6:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
   11cc8:	f644 205c 	movw	r0, #19036	; 0x4a5c
   11ccc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11cd0:	9906      	ldr	r1, [sp, #24]
   11cd2:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
   11cd4:	f644 2064 	movw	r0, #19044	; 0x4a64
   11cd8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11cdc:	2101      	movs	r1, #1
   11cde:	f000 fecb 	bl	12a78 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11ce2:	9005      	str	r0, [sp, #20]
   11ce4:	e7ff      	b.n	11ce6 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0xda>
   11ce6:	f644 205c 	movw	r0, #19036	; 0x4a5c
   11cea:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11cee:	9905      	ldr	r1, [sp, #20]
   11cf0:	6041      	str	r1, [r0, #4]
   11cf2:	2201      	movs	r2, #1
   11cf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11cf8:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
   11cfc:	9004      	str	r0, [sp, #16]
   11cfe:	4610      	mov	r0, r2
   11d00:	9904      	ldr	r1, [sp, #16]
   11d02:	461a      	mov	r2, r3
   11d04:	4663      	mov	r3, ip
   11d06:	f008 ff01 	bl	1ab0c <hal_i2c_master_write>
   11d0a:	9012      	str	r0, [sp, #72]	; 0x48
   11d0c:	e7ff      	b.n	11d0e <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
   11d0e:	f644 2064 	movw	r0, #19044	; 0x4a64
   11d12:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11d16:	2100      	movs	r1, #0
   11d18:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
   11d1a:	f644 205c 	movw	r0, #19036	; 0x4a5c
   11d1e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11d22:	9909      	ldr	r1, [sp, #36]	; 0x24
   11d24:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
   11d26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11d28:	b2d3      	uxtb	r3, r2
   11d2a:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
   11d2c:	980d      	ldr	r0, [sp, #52]	; 0x34
   11d2e:	990c      	ldr	r1, [sp, #48]	; 0x30
   11d30:	f000 fea2 	bl	12a78 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11d34:	9003      	str	r0, [sp, #12]
   11d36:	e7ff      	b.n	11d38 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x12c>
   11d38:	f644 205c 	movw	r0, #19036	; 0x4a5c
   11d3c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11d40:	9903      	ldr	r1, [sp, #12]
   11d42:	6041      	str	r1, [r0, #4]
   11d44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11d48:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
   11d4a:	9002      	str	r0, [sp, #8]
   11d4c:	4618      	mov	r0, r3
   11d4e:	9902      	ldr	r1, [sp, #8]
   11d50:	f008 ff70 	bl	1ac34 <hal_i2c_master_read>
   11d54:	4601      	mov	r1, r0
   11d56:	9013      	str	r0, [sp, #76]	; 0x4c
   11d58:	9101      	str	r1, [sp, #4]
   11d5a:	e7ff      	b.n	11d5c <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
   11d5c:	9801      	ldr	r0, [sp, #4]
   11d5e:	2804      	cmp	r0, #4
   11d60:	d005      	beq.n	11d6e <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x162>
   11d62:	e7ff      	b.n	11d64 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x158>
   11d64:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
   11d66:	900e      	str	r0, [sp, #56]	; 0x38
   11d68:	2001      	movs	r0, #1
   11d6a:	900e      	str	r0, [sp, #56]	; 0x38
}
   11d6c:	e00c      	b.n	11d88 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x17c>
        console::print("i2c fail\n"); ////
   11d6e:	f247 10e4 	movw	r0, #29156	; 0x71e4
   11d72:	f2c0 0002 	movt	r0, #2
   11d76:	2109      	movs	r1, #9
   11d78:	f7f7 f9be 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
   11d7c:	e7ff      	b.n	11d7e <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x172>
   11d7e:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
   11d80:	900e      	str	r0, [sp, #56]	; 0x38
   11d82:	2001      	movs	r0, #1
   11d84:	900e      	str	r0, [sp, #56]	; 0x38
   11d86:	e7ff      	b.n	11d88 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x17c>
}
   11d88:	980e      	ldr	r0, [sp, #56]	; 0x38
   11d8a:	b014      	add	sp, #80	; 0x50
   11d8c:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   11d8e:	f646 7070 	movw	r0, #28528	; 0x6f70
   11d92:	f2c0 0002 	movt	r0, #2
   11d96:	f247 12c4 	movw	r2, #29124	; 0x71c4
   11d9a:	f2c0 0202 	movt	r2, #2
   11d9e:	211c      	movs	r1, #28
   11da0:	f006 fbc6 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11da4:	defe      	udf	#254	; 0xfe

00011da6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>:
    fn le(&self, other: &LevelFilter) -> bool {
   11da6:	b082      	sub	sp, #8
   11da8:	9000      	str	r0, [sp, #0]
   11daa:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   11dac:	6800      	ldr	r0, [r0, #0]
   11dae:	6809      	ldr	r1, [r1, #0]
   11db0:	2200      	movs	r2, #0
   11db2:	4288      	cmp	r0, r1
   11db4:	bf98      	it	ls
   11db6:	2201      	movls	r2, #1
    }
   11db8:	4610      	mov	r0, r2
   11dba:	b002      	add	sp, #8
   11dbc:	4770      	bx	lr

00011dbe <_ZN22piet_embedded_graphics7display18set_display_pixels17he48c5c43fd96ddebE>:
        item
    ).expect("draw blocks fail");
}

/// Draw the pixel colours to the display at the window from (sx,sy) to (ex,ey)
pub fn set_display_pixels<P: IntoIterator<Item = u16>>(sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
   11dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
   11dc0:	b08d      	sub	sp, #52	; 0x34
   11dc2:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   11dc6:	469e      	mov	lr, r3
   11dc8:	4614      	mov	r4, r2
   11dca:	460d      	mov	r5, r1
   11dcc:	4606      	mov	r6, r0
   11dce:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   11dd2:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
   11dd6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   11dda:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    unsafe { DISPLAY.set_pixels(sx, sy, ex, ey, colors) }
   11dde:	466f      	mov	r7, sp
   11de0:	f8c7 c004 	str.w	ip, [r7, #4]
   11de4:	603b      	str	r3, [r7, #0]
   11de6:	f240 1348 	movw	r3, #328	; 0x148
   11dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dee:	900a      	str	r0, [sp, #40]	; 0x28
   11df0:	4618      	mov	r0, r3
   11df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11df4:	9109      	str	r1, [sp, #36]	; 0x24
   11df6:	4619      	mov	r1, r3
   11df8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   11dfc:	9208      	str	r2, [sp, #32]
   11dfe:	4662      	mov	r2, ip
   11e00:	9b08      	ldr	r3, [sp, #32]
   11e02:	f8cd e01c 	str.w	lr, [sp, #28]
   11e06:	9406      	str	r4, [sp, #24]
   11e08:	9505      	str	r5, [sp, #20]
   11e0a:	9604      	str	r6, [sp, #16]
   11e0c:	f005 fbe1 	bl	175d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E>
   11e10:	9003      	str	r0, [sp, #12]
   11e12:	e7ff      	b.n	11e14 <_ZN22piet_embedded_graphics7display18set_display_pixels17he48c5c43fd96ddebE+0x56>
}
   11e14:	9803      	ldr	r0, [sp, #12]
   11e16:	f000 0001 	and.w	r0, r0, #1
   11e1a:	b00d      	add	sp, #52	; 0x34
   11e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011e1e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>:
   11e1e:	b510      	push	{r4, lr}
   11e20:	b088      	sub	sp, #32
   11e22:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   11e26:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
   11e2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   11e2c:	9102      	str	r1, [sp, #8]
   11e2e:	9203      	str	r2, [sp, #12]
   11e30:	9304      	str	r3, [sp, #16]
   11e32:	9405      	str	r4, [sp, #20]
   11e34:	f8cd e018 	str.w	lr, [sp, #24]
   11e38:	f8cd c01c 	str.w	ip, [sp, #28]
   11e3c:	f8cd e000 	str.w	lr, [sp]
   11e40:	f8cd c004 	str.w	ip, [sp, #4]
   11e44:	6001      	str	r1, [r0, #0]
   11e46:	6042      	str	r2, [r0, #4]
   11e48:	9900      	ldr	r1, [sp, #0]
   11e4a:	9a01      	ldr	r2, [sp, #4]
   11e4c:	6081      	str	r1, [r0, #8]
   11e4e:	60c2      	str	r2, [r0, #12]
   11e50:	6103      	str	r3, [r0, #16]
   11e52:	6144      	str	r4, [r0, #20]
   11e54:	b008      	add	sp, #32
   11e56:	bd10      	pop	{r4, pc}

00011e58 <_ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE>:
   11e58:	b580      	push	{r7, lr}
   11e5a:	b086      	sub	sp, #24
   11e5c:	f8dd c020 	ldr.w	ip, [sp, #32]
   11e60:	9102      	str	r1, [sp, #8]
   11e62:	9203      	str	r2, [sp, #12]
   11e64:	9304      	str	r3, [sp, #16]
   11e66:	f8cd c014 	str.w	ip, [sp, #20]
   11e6a:	f04f 0e00 	mov.w	lr, #0
   11e6e:	f8cd e004 	str.w	lr, [sp, #4]
   11e72:	f8cd e000 	str.w	lr, [sp]
   11e76:	f8cd e000 	str.w	lr, [sp]
   11e7a:	6001      	str	r1, [r0, #0]
   11e7c:	6042      	str	r2, [r0, #4]
   11e7e:	9900      	ldr	r1, [sp, #0]
   11e80:	9a01      	ldr	r2, [sp, #4]
   11e82:	6081      	str	r1, [r0, #8]
   11e84:	60c2      	str	r2, [r0, #12]
   11e86:	6103      	str	r3, [r0, #16]
   11e88:	f8c0 c014 	str.w	ip, [r0, #20]
   11e8c:	b006      	add	sp, #24
   11e8e:	bd80      	pop	{r7, pc}

00011e90 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>:
   11e90:	b580      	push	{r7, lr}
   11e92:	b086      	sub	sp, #24
   11e94:	460a      	mov	r2, r1
   11e96:	9004      	str	r0, [sp, #16]
   11e98:	f88d 1017 	strb.w	r1, [sp, #23]
   11e9c:	9203      	str	r2, [sp, #12]
   11e9e:	f000 fe86 	bl	12bae <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   11ea2:	9002      	str	r0, [sp, #8]
   11ea4:	e7ff      	b.n	11ea6 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE+0x16>
   11ea6:	9802      	ldr	r0, [sp, #8]
   11ea8:	9903      	ldr	r1, [sp, #12]
   11eaa:	f000 fe99 	bl	12be0 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   11eae:	9001      	str	r0, [sp, #4]
   11eb0:	e7ff      	b.n	11eb2 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE+0x22>
   11eb2:	9801      	ldr	r0, [sp, #4]
   11eb4:	b006      	add	sp, #24
   11eb6:	bd80      	pop	{r7, pc}

00011eb8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>:
   11eb8:	b580      	push	{r7, lr}
   11eba:	b084      	sub	sp, #16
   11ebc:	4601      	mov	r1, r0
   11ebe:	f88d 000f 	strb.w	r0, [sp, #15]
   11ec2:	9102      	str	r1, [sp, #8]
   11ec4:	f005 fd1f 	bl	17906 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h8e5f04233c93701aE>
   11ec8:	9001      	str	r0, [sp, #4]
   11eca:	e7ff      	b.n	11ecc <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E+0x14>
   11ecc:	9801      	ldr	r0, [sp, #4]
   11ece:	b004      	add	sp, #16
   11ed0:	bd80      	pop	{r7, pc}

00011ed2 <_ZN4core3mem4swap17h21afb25e2d195463E>:
   11ed2:	b580      	push	{r7, lr}
   11ed4:	b082      	sub	sp, #8
   11ed6:	9000      	str	r0, [sp, #0]
   11ed8:	9101      	str	r1, [sp, #4]
   11eda:	f005 fd47 	bl	1796c <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E>
   11ede:	e7ff      	b.n	11ee0 <_ZN4core3mem4swap17h21afb25e2d195463E+0xe>
   11ee0:	b002      	add	sp, #8
   11ee2:	bd80      	pop	{r7, pc}

00011ee4 <_ZN4core3ops8function6FnOnce9call_once17h59e116d6918016e9E>:
   11ee4:	b580      	push	{r7, lr}
   11ee6:	b084      	sub	sp, #16
   11ee8:	9001      	str	r0, [sp, #4]
   11eea:	9102      	str	r1, [sp, #8]
   11eec:	9801      	ldr	r0, [sp, #4]
   11eee:	9902      	ldr	r1, [sp, #8]
   11ef0:	f000 f8f8 	bl	120e4 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE>
   11ef4:	9000      	str	r0, [sp, #0]
   11ef6:	e7ff      	b.n	11ef8 <_ZN4core3ops8function6FnOnce9call_once17h59e116d6918016e9E+0x14>
   11ef8:	9800      	ldr	r0, [sp, #0]
   11efa:	b004      	add	sp, #16
   11efc:	bd80      	pop	{r7, pc}

00011efe <_ZN4core3ptr13drop_in_place17h63142b18dacbc787E>:
   11efe:	b081      	sub	sp, #4
   11f00:	9000      	str	r0, [sp, #0]
   11f02:	b001      	add	sp, #4
   11f04:	4770      	bx	lr

00011f06 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E>:
   11f06:	b580      	push	{r7, lr}
   11f08:	b082      	sub	sp, #8
   11f0a:	9101      	str	r1, [sp, #4]
   11f0c:	f000 f803 	bl	11f16 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E>
   11f10:	e7ff      	b.n	11f12 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E+0xc>
   11f12:	b002      	add	sp, #8
   11f14:	bd80      	pop	{r7, pc}

00011f16 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E>:
   11f16:	b580      	push	{r7, lr}
   11f18:	b0a0      	sub	sp, #128	; 0x80
   11f1a:	911c      	str	r1, [sp, #112]	; 0x70
   11f1c:	9103      	str	r1, [sp, #12]
   11f1e:	9002      	str	r0, [sp, #8]
   11f20:	e7ff      	b.n	11f22 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc>
   11f22:	9803      	ldr	r0, [sp, #12]
   11f24:	68c1      	ldr	r1, [r0, #12]
   11f26:	2901      	cmp	r1, #1
   11f28:	d11e      	bne.n	11f68 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x52>
   11f2a:	e7ff      	b.n	11f2c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x16>
   11f2c:	9803      	ldr	r0, [sp, #12]
   11f2e:	f100 0110 	add.w	r1, r0, #16
   11f32:	911e      	str	r1, [sp, #120]	; 0x78
   11f34:	a804      	add	r0, sp, #16
   11f36:	f7fd fafd 	bl	f534 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE>
   11f3a:	e7ff      	b.n	11f3c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x26>
   11f3c:	9804      	ldr	r0, [sp, #16]
   11f3e:	2801      	cmp	r0, #1
   11f40:	d001      	beq.n	11f46 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x30>
   11f42:	e7ff      	b.n	11f44 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x2e>
   11f44:	e00f      	b.n	11f66 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x50>
   11f46:	9804      	ldr	r0, [sp, #16]
   11f48:	9905      	ldr	r1, [sp, #20]
   11f4a:	9a06      	ldr	r2, [sp, #24]
   11f4c:	9209      	str	r2, [sp, #36]	; 0x24
   11f4e:	9108      	str	r1, [sp, #32]
   11f50:	9007      	str	r0, [sp, #28]
   11f52:	9807      	ldr	r0, [sp, #28]
   11f54:	9908      	ldr	r1, [sp, #32]
   11f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11f58:	9b02      	ldr	r3, [sp, #8]
   11f5a:	609a      	str	r2, [r3, #8]
   11f5c:	6059      	str	r1, [r3, #4]
   11f5e:	6018      	str	r0, [r3, #0]
   11f60:	e7ff      	b.n	11f62 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x4c>
   11f62:	b020      	add	sp, #128	; 0x80
   11f64:	bd80      	pop	{r7, pc}
   11f66:	e7ff      	b.n	11f68 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x52>
   11f68:	a80a      	add	r0, sp, #40	; 0x28
   11f6a:	9903      	ldr	r1, [sp, #12]
   11f6c:	f7fd facc 	bl	f508 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E>
   11f70:	e7ff      	b.n	11f72 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x5c>
   11f72:	980a      	ldr	r0, [sp, #40]	; 0x28
   11f74:	2800      	cmp	r0, #0
   11f76:	d012      	beq.n	11f9e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x88>
   11f78:	e7ff      	b.n	11f7a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x64>
   11f7a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11f7c:	990c      	ldr	r1, [sp, #48]	; 0x30
   11f7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11f80:	9211      	str	r2, [sp, #68]	; 0x44
   11f82:	9110      	str	r1, [sp, #64]	; 0x40
   11f84:	900f      	str	r0, [sp, #60]	; 0x3c
   11f86:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11f88:	9910      	ldr	r1, [sp, #64]	; 0x40
   11f8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11f8c:	921b      	str	r2, [sp, #108]	; 0x6c
   11f8e:	911a      	str	r1, [sp, #104]	; 0x68
   11f90:	9019      	str	r0, [sp, #100]	; 0x64
   11f92:	a816      	add	r0, sp, #88	; 0x58
   11f94:	a919      	add	r1, sp, #100	; 0x64
   11f96:	f7fd fab0 	bl	f4fa <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc3726000bdb855aE>
   11f9a:	e028      	b.n	11fee <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd8>
   11f9c:	defe      	udf	#254	; 0xfe
   11f9e:	9803      	ldr	r0, [sp, #12]
   11fa0:	301c      	adds	r0, #28
   11fa2:	f7f6 fcef 	bl	8984 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E>
   11fa6:	9001      	str	r0, [sp, #4]
   11fa8:	e7ff      	b.n	11faa <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x94>
   11faa:	9801      	ldr	r0, [sp, #4]
   11fac:	f7f6 fd24 	bl	89f8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E>
   11fb0:	900e      	str	r0, [sp, #56]	; 0x38
   11fb2:	e7ff      	b.n	11fb4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x9e>
   11fb4:	980e      	ldr	r0, [sp, #56]	; 0x38
   11fb6:	fab0 f180 	clz	r1, r0
   11fba:	0949      	lsrs	r1, r1, #5
   11fbc:	2800      	cmp	r0, #0
   11fbe:	d101      	bne.n	11fc4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xae>
   11fc0:	e7ff      	b.n	11fc2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xac>
   11fc2:	e009      	b.n	11fd8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc2>
   11fc4:	980e      	ldr	r0, [sp, #56]	; 0x38
   11fc6:	901f      	str	r0, [sp, #124]	; 0x7c
   11fc8:	9902      	ldr	r1, [sp, #8]
   11fca:	9000      	str	r0, [sp, #0]
   11fcc:	4608      	mov	r0, r1
   11fce:	9900      	ldr	r1, [sp, #0]
   11fd0:	f7fd fab0 	bl	f534 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE>
   11fd4:	e00a      	b.n	11fec <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd6>
   11fd6:	defe      	udf	#254	; 0xfe
   11fd8:	f003 f902 	bl	151e0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
   11fdc:	e7ff      	b.n	11fde <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc8>
   11fde:	9802      	ldr	r0, [sp, #8]
   11fe0:	f7f6 fd05 	bl	89ee <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc4148eaa15af1e8eE>
   11fe4:	e7ff      	b.n	11fe6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd0>
   11fe6:	e7ff      	b.n	11fe8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd2>
   11fe8:	e7ff      	b.n	11fea <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd4>
   11fea:	e7ba      	b.n	11f62 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x4c>
   11fec:	e7fc      	b.n	11fe8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd2>
   11fee:	9816      	ldr	r0, [sp, #88]	; 0x58
   11ff0:	9917      	ldr	r1, [sp, #92]	; 0x5c
   11ff2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   11ff4:	9215      	str	r2, [sp, #84]	; 0x54
   11ff6:	9114      	str	r1, [sp, #80]	; 0x50
   11ff8:	9013      	str	r0, [sp, #76]	; 0x4c
   11ffa:	2001      	movs	r0, #1
   11ffc:	9012      	str	r0, [sp, #72]	; 0x48
   11ffe:	e7ff      	b.n	12000 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xea>
   12000:	9812      	ldr	r0, [sp, #72]	; 0x48
   12002:	9913      	ldr	r1, [sp, #76]	; 0x4c
   12004:	9a14      	ldr	r2, [sp, #80]	; 0x50
   12006:	9b15      	ldr	r3, [sp, #84]	; 0x54
   12008:	f8dd c00c 	ldr.w	ip, [sp, #12]
   1200c:	f8cc 3018 	str.w	r3, [ip, #24]
   12010:	f8cc 2014 	str.w	r2, [ip, #20]
   12014:	f8cc 1010 	str.w	r1, [ip, #16]
   12018:	f8cc 000c 	str.w	r0, [ip, #12]
   1201c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1201e:	2801      	cmp	r0, #1
   12020:	d101      	bne.n	12026 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x110>
   12022:	e7ff      	b.n	12024 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x10e>
   12024:	e77d      	b.n	11f22 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc>
   12026:	e7fd      	b.n	12024 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x10e>

00012028 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E>:
   12028:	b5b0      	push	{r4, r5, r7, lr}
   1202a:	b090      	sub	sp, #64	; 0x40
   1202c:	680a      	ldr	r2, [r1, #0]
   1202e:	684b      	ldr	r3, [r1, #4]
   12030:	6889      	ldr	r1, [r1, #8]
   12032:	910f      	str	r1, [sp, #60]	; 0x3c
   12034:	930e      	str	r3, [sp, #56]	; 0x38
   12036:	920d      	str	r2, [sp, #52]	; 0x34
   12038:	a902      	add	r1, sp, #8
   1203a:	aa0d      	add	r2, sp, #52	; 0x34
   1203c:	9001      	str	r0, [sp, #4]
   1203e:	4608      	mov	r0, r1
   12040:	4611      	mov	r1, r2
   12042:	f000 f80d 	bl	12060 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h1051abda59747a6bE>
   12046:	e7ff      	b.n	12048 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E+0x20>
   12048:	a802      	add	r0, sp, #8
   1204a:	9901      	ldr	r1, [sp, #4]
   1204c:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
   12050:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
   12054:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
   12058:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
   1205c:	b010      	add	sp, #64	; 0x40
   1205e:	bdb0      	pop	{r4, r5, r7, pc}

00012060 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h1051abda59747a6bE>:
   12060:	b08b      	sub	sp, #44	; 0x2c
   12062:	680a      	ldr	r2, [r1, #0]
   12064:	684b      	ldr	r3, [r1, #4]
   12066:	6889      	ldr	r1, [r1, #8]
   12068:	9102      	str	r1, [sp, #8]
   1206a:	9301      	str	r3, [sp, #4]
   1206c:	9200      	str	r2, [sp, #0]
   1206e:	2100      	movs	r1, #0
   12070:	9103      	str	r1, [sp, #12]
   12072:	9107      	str	r1, [sp, #28]
   12074:	9900      	ldr	r1, [sp, #0]
   12076:	9a01      	ldr	r2, [sp, #4]
   12078:	9b02      	ldr	r3, [sp, #8]
   1207a:	6083      	str	r3, [r0, #8]
   1207c:	6042      	str	r2, [r0, #4]
   1207e:	6001      	str	r1, [r0, #0]
   12080:	9903      	ldr	r1, [sp, #12]
   12082:	9a04      	ldr	r2, [sp, #16]
   12084:	9b05      	ldr	r3, [sp, #20]
   12086:	f8dd c018 	ldr.w	ip, [sp, #24]
   1208a:	f8c0 c018 	str.w	ip, [r0, #24]
   1208e:	6143      	str	r3, [r0, #20]
   12090:	6102      	str	r2, [r0, #16]
   12092:	60c1      	str	r1, [r0, #12]
   12094:	9907      	ldr	r1, [sp, #28]
   12096:	9a08      	ldr	r2, [sp, #32]
   12098:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1209a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   1209e:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   120a2:	6243      	str	r3, [r0, #36]	; 0x24
   120a4:	6202      	str	r2, [r0, #32]
   120a6:	61c1      	str	r1, [r0, #28]
   120a8:	b00b      	add	sp, #44	; 0x2c
   120aa:	4770      	bx	lr

000120ac <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he2e30225e051e80dE>:
   120ac:	b5b0      	push	{r4, r5, r7, lr}
   120ae:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
   120b2:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
   120b6:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   120ba:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   120be:	bdb0      	pop	{r4, r5, r7, pc}

000120c0 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h27d5684c70bb37e8E>:
   120c0:	b084      	sub	sp, #16
   120c2:	9000      	str	r0, [sp, #0]
   120c4:	9101      	str	r1, [sp, #4]
   120c6:	9102      	str	r1, [sp, #8]
   120c8:	9003      	str	r0, [sp, #12]
   120ca:	6802      	ldr	r2, [r0, #0]
   120cc:	6840      	ldr	r0, [r0, #4]
   120ce:	680b      	ldr	r3, [r1, #0]
   120d0:	6849      	ldr	r1, [r1, #4]
   120d2:	4048      	eors	r0, r1
   120d4:	ea82 0103 	eor.w	r1, r2, r3
   120d8:	4308      	orrs	r0, r1
   120da:	fab0 f080 	clz	r0, r0
   120de:	0940      	lsrs	r0, r0, #5
   120e0:	b004      	add	sp, #16
   120e2:	4770      	bx	lr

000120e4 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE>:
   120e4:	b085      	sub	sp, #20
   120e6:	9003      	str	r0, [sp, #12]
   120e8:	9104      	str	r1, [sp, #16]
   120ea:	7802      	ldrb	r2, [r0, #0]
   120ec:	780b      	ldrb	r3, [r1, #0]
   120ee:	429a      	cmp	r2, r3
   120f0:	9101      	str	r1, [sp, #4]
   120f2:	9000      	str	r0, [sp, #0]
   120f4:	d307      	bcc.n	12106 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x22>
   120f6:	e7ff      	b.n	120f8 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x14>
   120f8:	9800      	ldr	r0, [sp, #0]
   120fa:	7801      	ldrb	r1, [r0, #0]
   120fc:	9a01      	ldr	r2, [sp, #4]
   120fe:	7813      	ldrb	r3, [r2, #0]
   12100:	4299      	cmp	r1, r3
   12102:	d008      	beq.n	12116 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x32>
   12104:	e003      	b.n	1210e <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x2a>
   12106:	20ff      	movs	r0, #255	; 0xff
   12108:	f88d 000b 	strb.w	r0, [sp, #11]
   1210c:	e008      	b.n	12120 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x3c>
   1210e:	2001      	movs	r0, #1
   12110:	f88d 000b 	strb.w	r0, [sp, #11]
   12114:	e003      	b.n	1211e <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x3a>
   12116:	2000      	movs	r0, #0
   12118:	f88d 000b 	strb.w	r0, [sp, #11]
   1211c:	e7ff      	b.n	1211e <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x3a>
   1211e:	e7ff      	b.n	12120 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x3c>
   12120:	f89d 000b 	ldrb.w	r0, [sp, #11]
   12124:	b005      	add	sp, #20
   12126:	4770      	bx	lr

00012128 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h0340384168a45934E>:
   12128:	b082      	sub	sp, #8
   1212a:	9000      	str	r0, [sp, #0]
   1212c:	9101      	str	r1, [sp, #4]
   1212e:	7800      	ldrb	r0, [r0, #0]
   12130:	7809      	ldrb	r1, [r1, #0]
   12132:	2200      	movs	r2, #0
   12134:	4288      	cmp	r0, r1
   12136:	bf38      	it	cc
   12138:	2201      	movcc	r2, #1
   1213a:	4610      	mov	r0, r2
   1213c:	b002      	add	sp, #8
   1213e:	4770      	bx	lr

00012140 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   12140:	b084      	sub	sp, #16
   12142:	9001      	str	r0, [sp, #4]
   12144:	9102      	str	r1, [sp, #8]
   12146:	4408      	add	r0, r1
   12148:	9003      	str	r0, [sp, #12]
   1214a:	9803      	ldr	r0, [sp, #12]
   1214c:	9000      	str	r0, [sp, #0]
   1214e:	e7ff      	b.n	12150 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   12150:	9800      	ldr	r0, [sp, #0]
   12152:	b004      	add	sp, #16
   12154:	4770      	bx	lr

00012156 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   12156:	b082      	sub	sp, #8
   12158:	9001      	str	r0, [sp, #4]
   1215a:	9000      	str	r0, [sp, #0]
   1215c:	e7ff      	b.n	1215e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   1215e:	9800      	ldr	r0, [sp, #0]
   12160:	fab0 f180 	clz	r1, r0
   12164:	0948      	lsrs	r0, r1, #5
   12166:	b002      	add	sp, #8
   12168:	4770      	bx	lr

0001216a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   1216a:	b082      	sub	sp, #8
   1216c:	9001      	str	r0, [sp, #4]
   1216e:	9000      	str	r0, [sp, #0]
   12170:	9800      	ldr	r0, [sp, #0]
   12172:	b002      	add	sp, #8
   12174:	4770      	bx	lr

00012176 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   12176:	b081      	sub	sp, #4
   12178:	9000      	str	r0, [sp, #0]
   1217a:	b001      	add	sp, #4
   1217c:	4770      	bx	lr

0001217e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   1217e:	b580      	push	{r7, lr}
   12180:	b084      	sub	sp, #16
   12182:	9002      	str	r0, [sp, #8]
   12184:	9103      	str	r1, [sp, #12]
   12186:	f000 f805 	bl	12194 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   1218a:	9001      	str	r0, [sp, #4]
   1218c:	e7ff      	b.n	1218e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   1218e:	9801      	ldr	r0, [sp, #4]
   12190:	b004      	add	sp, #16
   12192:	bd80      	pop	{r7, pc}

00012194 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   12194:	b084      	sub	sp, #16
   12196:	9001      	str	r0, [sp, #4]
   12198:	9102      	str	r1, [sp, #8]
   1219a:	4408      	add	r0, r1
   1219c:	9003      	str	r0, [sp, #12]
   1219e:	9803      	ldr	r0, [sp, #12]
   121a0:	9000      	str	r0, [sp, #0]
   121a2:	e7ff      	b.n	121a4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   121a4:	9800      	ldr	r0, [sp, #0]
   121a6:	b004      	add	sp, #16
   121a8:	4770      	bx	lr

000121aa <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   121aa:	b082      	sub	sp, #8
   121ac:	9001      	str	r0, [sp, #4]
   121ae:	9000      	str	r0, [sp, #0]
   121b0:	e7ff      	b.n	121b2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   121b2:	9800      	ldr	r0, [sp, #0]
   121b4:	fab0 f180 	clz	r1, r0
   121b8:	0948      	lsrs	r0, r1, #5
   121ba:	b002      	add	sp, #8
   121bc:	4770      	bx	lr

000121be <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   121be:	b580      	push	{r7, lr}
   121c0:	b090      	sub	sp, #64	; 0x40
   121c2:	900c      	str	r0, [sp, #48]	; 0x30
   121c4:	910d      	str	r1, [sp, #52]	; 0x34
   121c6:	9007      	str	r0, [sp, #28]
   121c8:	9106      	str	r1, [sp, #24]
   121ca:	f001 f895 	bl	132f8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   121ce:	4601      	mov	r1, r0
   121d0:	900e      	str	r0, [sp, #56]	; 0x38
   121d2:	9105      	str	r1, [sp, #20]
   121d4:	e7ff      	b.n	121d6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   121d6:	9805      	ldr	r0, [sp, #20]
   121d8:	f7ff ffe7 	bl	121aa <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   121dc:	e7ff      	b.n	121de <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   121de:	e7ff      	b.n	121e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   121e0:	2001      	movs	r0, #1
   121e2:	900f      	str	r0, [sp, #60]	; 0x3c
   121e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   121e6:	9004      	str	r0, [sp, #16]
   121e8:	e7ff      	b.n	121ea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   121ea:	9804      	ldr	r0, [sp, #16]
   121ec:	2800      	cmp	r0, #0
   121ee:	d006      	beq.n	121fe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   121f0:	e7ff      	b.n	121f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   121f2:	9807      	ldr	r0, [sp, #28]
   121f4:	9906      	ldr	r1, [sp, #24]
   121f6:	f001 f877 	bl	132e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   121fa:	9003      	str	r0, [sp, #12]
   121fc:	e00e      	b.n	1221c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   121fe:	9807      	ldr	r0, [sp, #28]
   12200:	9906      	ldr	r1, [sp, #24]
   12202:	f001 f871 	bl	132e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   12206:	9002      	str	r0, [sp, #8]
   12208:	e7ff      	b.n	1220a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   1220a:	9805      	ldr	r0, [sp, #20]
   1220c:	9902      	ldr	r1, [sp, #8]
   1220e:	f7ff ffb6 	bl	1217e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   12212:	9001      	str	r0, [sp, #4]
   12214:	e7ff      	b.n	12216 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   12216:	9801      	ldr	r0, [sp, #4]
   12218:	900a      	str	r0, [sp, #40]	; 0x28
   1221a:	e006      	b.n	1222a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   1221c:	9805      	ldr	r0, [sp, #20]
   1221e:	9903      	ldr	r1, [sp, #12]
   12220:	f001 f83f 	bl	132a2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   12224:	900a      	str	r0, [sp, #40]	; 0x28
   12226:	e7ff      	b.n	12228 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   12228:	e7ff      	b.n	1222a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   1222a:	9805      	ldr	r0, [sp, #20]
   1222c:	f7ff ff9d 	bl	1216a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   12230:	9000      	str	r0, [sp, #0]
   12232:	e7ff      	b.n	12234 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   12234:	980a      	ldr	r0, [sp, #40]	; 0x28
   12236:	9900      	ldr	r1, [sp, #0]
   12238:	9108      	str	r1, [sp, #32]
   1223a:	9009      	str	r0, [sp, #36]	; 0x24
   1223c:	9808      	ldr	r0, [sp, #32]
   1223e:	9909      	ldr	r1, [sp, #36]	; 0x24
   12240:	b010      	add	sp, #64	; 0x40
   12242:	bd80      	pop	{r7, pc}

00012244 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   12244:	b081      	sub	sp, #4
   12246:	b001      	add	sp, #4
   12248:	4770      	bx	lr

0001224a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   1224a:	b580      	push	{r7, lr}
   1224c:	b08e      	sub	sp, #56	; 0x38
   1224e:	9007      	str	r0, [sp, #28]
   12250:	6801      	ldr	r1, [r0, #0]
   12252:	9005      	str	r0, [sp, #20]
   12254:	4608      	mov	r0, r1
   12256:	f7ff ff8e 	bl	12176 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1225a:	9004      	str	r0, [sp, #16]
   1225c:	e7ff      	b.n	1225e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   1225e:	9804      	ldr	r0, [sp, #16]
   12260:	f7ff ff79 	bl	12156 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   12264:	e7ff      	b.n	12266 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   12266:	e7ff      	b.n	12268 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   12268:	2001      	movs	r0, #1
   1226a:	9008      	str	r0, [sp, #32]
   1226c:	9808      	ldr	r0, [sp, #32]
   1226e:	9003      	str	r0, [sp, #12]
   12270:	e7ff      	b.n	12272 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   12272:	9803      	ldr	r0, [sp, #12]
   12274:	2800      	cmp	r0, #0
   12276:	d007      	beq.n	12288 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   12278:	e7ff      	b.n	1227a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   1227a:	9805      	ldr	r0, [sp, #20]
   1227c:	6840      	ldr	r0, [r0, #4]
   1227e:	f7ff ff94 	bl	121aa <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   12282:	e7ff      	b.n	12284 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   12284:	e7ff      	b.n	12286 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   12286:	e7ff      	b.n	12288 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   12288:	9805      	ldr	r0, [sp, #20]
   1228a:	6800      	ldr	r0, [r0, #0]
   1228c:	f7ff ff73 	bl	12176 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   12290:	9002      	str	r0, [sp, #8]
   12292:	e7ff      	b.n	12294 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   12294:	9805      	ldr	r0, [sp, #20]
   12296:	6841      	ldr	r1, [r0, #4]
   12298:	9a02      	ldr	r2, [sp, #8]
   1229a:	428a      	cmp	r2, r1
   1229c:	d02e      	beq.n	122fc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   1229e:	e7ff      	b.n	122a0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   122a0:	9805      	ldr	r0, [sp, #20]
   122a2:	900a      	str	r0, [sp, #40]	; 0x28
   122a4:	2101      	movs	r1, #1
   122a6:	910b      	str	r1, [sp, #44]	; 0x2c
   122a8:	910d      	str	r1, [sp, #52]	; 0x34
   122aa:	990d      	ldr	r1, [sp, #52]	; 0x34
   122ac:	2900      	cmp	r1, #0
   122ae:	d015      	beq.n	122dc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   122b0:	e7ff      	b.n	122b2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   122b2:	9805      	ldr	r0, [sp, #20]
   122b4:	6800      	ldr	r0, [r0, #0]
   122b6:	f7ff ff5e 	bl	12176 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   122ba:	900c      	str	r0, [sp, #48]	; 0x30
   122bc:	9905      	ldr	r1, [sp, #20]
   122be:	680a      	ldr	r2, [r1, #0]
   122c0:	9001      	str	r0, [sp, #4]
   122c2:	4610      	mov	r0, r2
   122c4:	f7ff ff57 	bl	12176 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   122c8:	2101      	movs	r1, #1
   122ca:	f7ff ff39 	bl	12140 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   122ce:	f7ff ff4c 	bl	1216a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   122d2:	9905      	ldr	r1, [sp, #20]
   122d4:	6008      	str	r0, [r1, #0]
   122d6:	9801      	ldr	r0, [sp, #4]
   122d8:	9009      	str	r0, [sp, #36]	; 0x24
   122da:	e00c      	b.n	122f6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   122dc:	9805      	ldr	r0, [sp, #20]
   122de:	6840      	ldr	r0, [r0, #4]
   122e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   122e4:	f7ff ff56 	bl	12194 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   122e8:	9905      	ldr	r1, [sp, #20]
   122ea:	6048      	str	r0, [r1, #4]
   122ec:	6808      	ldr	r0, [r1, #0]
   122ee:	f7ff ff42 	bl	12176 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   122f2:	9009      	str	r0, [sp, #36]	; 0x24
   122f4:	e7ff      	b.n	122f6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   122f6:	9809      	ldr	r0, [sp, #36]	; 0x24
   122f8:	9000      	str	r0, [sp, #0]
   122fa:	e002      	b.n	12302 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   122fc:	2000      	movs	r0, #0
   122fe:	9006      	str	r0, [sp, #24]
   12300:	e002      	b.n	12308 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   12302:	9800      	ldr	r0, [sp, #0]
   12304:	9006      	str	r0, [sp, #24]
   12306:	e7ff      	b.n	12308 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   12308:	9806      	ldr	r0, [sp, #24]
   1230a:	b00e      	add	sp, #56	; 0x38
   1230c:	bd80      	pop	{r7, pc}

0001230e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
   1230e:	b580      	push	{r7, lr}
   12310:	b084      	sub	sp, #16
   12312:	9002      	str	r0, [sp, #8]
   12314:	9103      	str	r1, [sp, #12]
   12316:	6800      	ldr	r0, [r0, #0]
   12318:	f000 f88c 	bl	12434 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
   1231c:	9001      	str	r0, [sp, #4]
   1231e:	e7ff      	b.n	12320 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
   12320:	9801      	ldr	r0, [sp, #4]
   12322:	f000 0001 	and.w	r0, r0, #1
   12326:	b004      	add	sp, #16
   12328:	bd80      	pop	{r7, pc}

0001232a <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>:
   1232a:	b580      	push	{r7, lr}
   1232c:	b084      	sub	sp, #16
   1232e:	9002      	str	r0, [sp, #8]
   12330:	9103      	str	r1, [sp, #12]
   12332:	f000 f827 	bl	12384 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>
   12336:	9001      	str	r0, [sp, #4]
   12338:	e7ff      	b.n	1233a <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE+0x10>
   1233a:	9801      	ldr	r0, [sp, #4]
   1233c:	b004      	add	sp, #16
   1233e:	bd80      	pop	{r7, pc}

00012340 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>:
   12340:	b085      	sub	sp, #20
   12342:	9003      	str	r0, [sp, #12]
   12344:	9104      	str	r1, [sp, #16]
   12346:	6802      	ldr	r2, [r0, #0]
   12348:	680b      	ldr	r3, [r1, #0]
   1234a:	429a      	cmp	r2, r3
   1234c:	9101      	str	r1, [sp, #4]
   1234e:	9000      	str	r0, [sp, #0]
   12350:	db07      	blt.n	12362 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x22>
   12352:	e7ff      	b.n	12354 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x14>
   12354:	9800      	ldr	r0, [sp, #0]
   12356:	6801      	ldr	r1, [r0, #0]
   12358:	9a01      	ldr	r2, [sp, #4]
   1235a:	6813      	ldr	r3, [r2, #0]
   1235c:	4299      	cmp	r1, r3
   1235e:	d008      	beq.n	12372 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x32>
   12360:	e003      	b.n	1236a <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x2a>
   12362:	20ff      	movs	r0, #255	; 0xff
   12364:	f88d 000b 	strb.w	r0, [sp, #11]
   12368:	e008      	b.n	1237c <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
   1236a:	2001      	movs	r0, #1
   1236c:	f88d 000b 	strb.w	r0, [sp, #11]
   12370:	e003      	b.n	1237a <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
   12372:	2000      	movs	r0, #0
   12374:	f88d 000b 	strb.w	r0, [sp, #11]
   12378:	e7ff      	b.n	1237a <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
   1237a:	e7ff      	b.n	1237c <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
   1237c:	f89d 000b 	ldrb.w	r0, [sp, #11]
   12380:	b005      	add	sp, #20
   12382:	4770      	bx	lr

00012384 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>:
   12384:	b580      	push	{r7, lr}
   12386:	b088      	sub	sp, #32
   12388:	9000      	str	r0, [sp, #0]
   1238a:	9101      	str	r1, [sp, #4]
   1238c:	2000      	movs	r0, #0
   1238e:	f88d 001b 	strb.w	r0, [sp, #27]
   12392:	f88d 001a 	strb.w	r0, [sp, #26]
   12396:	2001      	movs	r0, #1
   12398:	f88d 001b 	strb.w	r0, [sp, #27]
   1239c:	f88d 001a 	strb.w	r0, [sp, #26]
   123a0:	4668      	mov	r0, sp
   123a2:	9004      	str	r0, [sp, #16]
   123a4:	a801      	add	r0, sp, #4
   123a6:	9005      	str	r0, [sp, #20]
   123a8:	9804      	ldr	r0, [sp, #16]
   123aa:	9905      	ldr	r1, [sp, #20]
   123ac:	f000 f895 	bl	124da <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>
   123b0:	f88d 000f 	strb.w	r0, [sp, #15]
   123b4:	e7ff      	b.n	123b6 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x32>
   123b6:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   123ba:	1c41      	adds	r1, r0, #1
   123bc:	2902      	cmp	r1, #2
   123be:	d307      	bcc.n	123d0 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x4c>
   123c0:	e7ff      	b.n	123c2 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x3e>
   123c2:	2000      	movs	r0, #0
   123c4:	f88d 001b 	strb.w	r0, [sp, #27]
   123c8:	9800      	ldr	r0, [sp, #0]
   123ca:	9002      	str	r0, [sp, #8]
   123cc:	e006      	b.n	123dc <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
   123ce:	defe      	udf	#254	; 0xfe
   123d0:	2000      	movs	r0, #0
   123d2:	f88d 001a 	strb.w	r0, [sp, #26]
   123d6:	9801      	ldr	r0, [sp, #4]
   123d8:	9002      	str	r0, [sp, #8]
   123da:	e7ff      	b.n	123dc <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
   123dc:	f89d 001a 	ldrb.w	r0, [sp, #26]
   123e0:	07c0      	lsls	r0, r0, #31
   123e2:	2800      	cmp	r0, #0
   123e4:	d109      	bne.n	123fa <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x76>
   123e6:	e7ff      	b.n	123e8 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
   123e8:	f89d 001b 	ldrb.w	r0, [sp, #27]
   123ec:	07c0      	lsls	r0, r0, #31
   123ee:	2800      	cmp	r0, #0
   123f0:	d107      	bne.n	12402 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x7e>
   123f2:	e7ff      	b.n	123f4 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>
   123f4:	9802      	ldr	r0, [sp, #8]
   123f6:	b008      	add	sp, #32
   123f8:	bd80      	pop	{r7, pc}
   123fa:	2000      	movs	r0, #0
   123fc:	f88d 001a 	strb.w	r0, [sp, #26]
   12400:	e7f2      	b.n	123e8 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
   12402:	2000      	movs	r0, #0
   12404:	f88d 001b 	strb.w	r0, [sp, #27]
   12408:	e7f4      	b.n	123f4 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>

0001240a <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>:
   1240a:	b089      	sub	sp, #36	; 0x24
   1240c:	9005      	str	r0, [sp, #20]
   1240e:	9106      	str	r1, [sp, #24]
   12410:	9107      	str	r1, [sp, #28]
   12412:	9907      	ldr	r1, [sp, #28]
   12414:	9002      	str	r0, [sp, #8]
   12416:	9101      	str	r1, [sp, #4]
   12418:	e7ff      	b.n	1241a <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x10>
   1241a:	9802      	ldr	r0, [sp, #8]
   1241c:	9008      	str	r0, [sp, #32]
   1241e:	9908      	ldr	r1, [sp, #32]
   12420:	9100      	str	r1, [sp, #0]
   12422:	e7ff      	b.n	12424 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x1a>
   12424:	9800      	ldr	r0, [sp, #0]
   12426:	9003      	str	r0, [sp, #12]
   12428:	9901      	ldr	r1, [sp, #4]
   1242a:	9104      	str	r1, [sp, #16]
   1242c:	9803      	ldr	r0, [sp, #12]
   1242e:	9904      	ldr	r1, [sp, #16]
   12430:	b009      	add	sp, #36	; 0x24
   12432:	4770      	bx	lr

00012434 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
   12434:	b580      	push	{r7, lr}
   12436:	b088      	sub	sp, #32
   12438:	9006      	str	r0, [sp, #24]
   1243a:	9107      	str	r1, [sp, #28]
   1243c:	9004      	str	r0, [sp, #16]
   1243e:	4608      	mov	r0, r1
   12440:	9103      	str	r1, [sp, #12]
   12442:	f006 ff16 	bl	19272 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12446:	9002      	str	r0, [sp, #8]
   12448:	e7ff      	b.n	1244a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
   1244a:	9802      	ldr	r0, [sp, #8]
   1244c:	07c1      	lsls	r1, r0, #31
   1244e:	2900      	cmp	r1, #0
   12450:	d105      	bne.n	1245e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
   12452:	e7ff      	b.n	12454 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
   12454:	9803      	ldr	r0, [sp, #12]
   12456:	f006 ff10 	bl	1927a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1245a:	9001      	str	r0, [sp, #4]
   1245c:	e007      	b.n	1246e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
   1245e:	9804      	ldr	r0, [sp, #16]
   12460:	9903      	ldr	r1, [sp, #12]
   12462:	f007 fd30 	bl	19ec6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12466:	f88d 0017 	strb.w	r0, [sp, #23]
   1246a:	e7ff      	b.n	1246c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
   1246c:	e015      	b.n	1249a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   1246e:	9801      	ldr	r0, [sp, #4]
   12470:	07c1      	lsls	r1, r0, #31
   12472:	2900      	cmp	r1, #0
   12474:	d107      	bne.n	12486 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
   12476:	e7ff      	b.n	12478 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
   12478:	9804      	ldr	r0, [sp, #16]
   1247a:	9903      	ldr	r1, [sp, #12]
   1247c:	f007 fe9e 	bl	1a1bc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   12480:	f88d 0017 	strb.w	r0, [sp, #23]
   12484:	e007      	b.n	12496 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
   12486:	9804      	ldr	r0, [sp, #16]
   12488:	9903      	ldr	r1, [sp, #12]
   1248a:	f007 fd87 	bl	19f9c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   1248e:	f88d 0017 	strb.w	r0, [sp, #23]
   12492:	e7ff      	b.n	12494 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
   12494:	e000      	b.n	12498 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   12496:	e7ff      	b.n	12498 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   12498:	e7ff      	b.n	1249a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   1249a:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1249e:	b008      	add	sp, #32
   124a0:	bd80      	pop	{r7, pc}

000124a2 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>:
   124a2:	b580      	push	{r7, lr}
   124a4:	b086      	sub	sp, #24
   124a6:	f8dd c020 	ldr.w	ip, [sp, #32]
   124aa:	9102      	str	r1, [sp, #8]
   124ac:	9203      	str	r2, [sp, #12]
   124ae:	9304      	str	r3, [sp, #16]
   124b0:	f8cd c014 	str.w	ip, [sp, #20]
   124b4:	f04f 0e00 	mov.w	lr, #0
   124b8:	f8cd e004 	str.w	lr, [sp, #4]
   124bc:	f8cd e000 	str.w	lr, [sp]
   124c0:	f8cd e000 	str.w	lr, [sp]
   124c4:	6001      	str	r1, [r0, #0]
   124c6:	6042      	str	r2, [r0, #4]
   124c8:	9900      	ldr	r1, [sp, #0]
   124ca:	9a01      	ldr	r2, [sp, #4]
   124cc:	6081      	str	r1, [r0, #8]
   124ce:	60c2      	str	r2, [r0, #12]
   124d0:	6103      	str	r3, [r0, #16]
   124d2:	f8c0 c014 	str.w	ip, [r0, #20]
   124d6:	b006      	add	sp, #24
   124d8:	bd80      	pop	{r7, pc}

000124da <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>:
   124da:	b580      	push	{r7, lr}
   124dc:	b084      	sub	sp, #16
   124de:	9001      	str	r0, [sp, #4]
   124e0:	9102      	str	r1, [sp, #8]
   124e2:	9801      	ldr	r0, [sp, #4]
   124e4:	9902      	ldr	r1, [sp, #8]
   124e6:	f7ff ff2b 	bl	12340 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>
   124ea:	9000      	str	r0, [sp, #0]
   124ec:	e7ff      	b.n	124ee <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E+0x14>
   124ee:	9800      	ldr	r0, [sp, #0]
   124f0:	b004      	add	sp, #16
   124f2:	bd80      	pop	{r7, pc}

000124f4 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
   124f4:	b084      	sub	sp, #16
   124f6:	9002      	str	r0, [sp, #8]
   124f8:	9103      	str	r1, [sp, #12]
            Coord(x, y)
   124fa:	9000      	str	r0, [sp, #0]
   124fc:	9101      	str	r1, [sp, #4]
        }
   124fe:	9800      	ldr	r0, [sp, #0]
   12500:	9901      	ldr	r1, [sp, #4]
   12502:	b004      	add	sp, #16
   12504:	4770      	bx	lr

00012506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>:
    }

    impl Index<usize> for Coord {
        type Output = CoordPart;

        fn index(&self, idx: usize) -> &CoordPart {
   12506:	b580      	push	{r7, lr}
   12508:	b096      	sub	sp, #88	; 0x58
   1250a:	9109      	str	r1, [sp, #36]	; 0x24
   1250c:	9014      	str	r0, [sp, #80]	; 0x50
            match idx {
                0 => &self.0,
   1250e:	9909      	ldr	r1, [sp, #36]	; 0x24
   12510:	2900      	cmp	r1, #0
   12512:	9008      	str	r0, [sp, #32]
   12514:	9107      	str	r1, [sp, #28]
   12516:	d018      	beq.n	1254a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x44>
   12518:	e7ff      	b.n	1251a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x14>
   1251a:	9807      	ldr	r0, [sp, #28]
   1251c:	2801      	cmp	r0, #1
   1251e:	d017      	beq.n	12550 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x4a>
   12520:	e7ff      	b.n	12522 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x1c>
                1 => &self.1,
                _ => panic!("Unreachable index {}", idx),
   12522:	f247 2068 	movw	r0, #29288	; 0x7268
   12526:	f2c0 0002 	movt	r0, #2
   1252a:	6801      	ldr	r1, [r0, #0]
   1252c:	a809      	add	r0, sp, #36	; 0x24
   1252e:	9013      	str	r0, [sp, #76]	; 0x4c
   12530:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12532:	9015      	str	r0, [sp, #84]	; 0x54
   12534:	f24a 22b1 	movw	r2, #41649	; 0xa2b1
   12538:	f2c0 0201 	movt	r2, #1
   1253c:	9106      	str	r1, [sp, #24]
   1253e:	4611      	mov	r1, r2
   12540:	f7ff ff63 	bl	1240a <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>
   12544:	9005      	str	r0, [sp, #20]
   12546:	9104      	str	r1, [sp, #16]
   12548:	e006      	b.n	12558 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x52>
                0 => &self.0,
   1254a:	9808      	ldr	r0, [sp, #32]
   1254c:	900a      	str	r0, [sp, #40]	; 0x28
            match idx {
   1254e:	e020      	b.n	12592 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                1 => &self.1,
   12550:	9808      	ldr	r0, [sp, #32]
   12552:	1d01      	adds	r1, r0, #4
   12554:	910a      	str	r1, [sp, #40]	; 0x28
            match idx {
   12556:	e01c      	b.n	12592 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                _ => panic!("Unreachable index {}", idx),
   12558:	9805      	ldr	r0, [sp, #20]
   1255a:	9011      	str	r0, [sp, #68]	; 0x44
   1255c:	9904      	ldr	r1, [sp, #16]
   1255e:	9112      	str	r1, [sp, #72]	; 0x48
   12560:	466a      	mov	r2, sp
   12562:	2301      	movs	r3, #1
   12564:	6013      	str	r3, [r2, #0]
   12566:	a80b      	add	r0, sp, #44	; 0x2c
   12568:	aa11      	add	r2, sp, #68	; 0x44
   1256a:	9906      	ldr	r1, [sp, #24]
   1256c:	9203      	str	r2, [sp, #12]
   1256e:	461a      	mov	r2, r3
   12570:	9b03      	ldr	r3, [sp, #12]
   12572:	f7ff ff96 	bl	124a2 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>
   12576:	e7ff      	b.n	12578 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x72>
   12578:	f247 206c 	movw	r0, #29292	; 0x726c
   1257c:	f2c0 0002 	movt	r0, #2
   12580:	f005 ffcf 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12584:	9002      	str	r0, [sp, #8]
   12586:	e7ff      	b.n	12588 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x82>
   12588:	a80b      	add	r0, sp, #44	; 0x2c
   1258a:	9902      	ldr	r1, [sp, #8]
   1258c:	f006 f806 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12590:	defe      	udf	#254	; 0xfe
            match idx {
   12592:	980a      	ldr	r0, [sp, #40]	; 0x28
            }
        }
   12594:	b016      	add	sp, #88	; 0x58
   12596:	bd80      	pop	{r7, pc}

00012598 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>:
    /// #
    /// let coord = Coord::new(-5, 10);
    ///
    /// assert_eq!(coord.to_unsigned(), UnsignedCoord::new(0, 10));
    /// ```
    fn to_unsigned(self) -> UnsignedCoord {
   12598:	b580      	push	{r7, lr}
   1259a:	b088      	sub	sp, #32
   1259c:	9006      	str	r0, [sp, #24]
   1259e:	9107      	str	r1, [sp, #28]
   125a0:	a806      	add	r0, sp, #24
   125a2:	2100      	movs	r1, #0
        UnsignedCoord::new(self[0].max(0) as u32, self[1].max(0) as u32)
   125a4:	f7ff ffaf 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   125a8:	9005      	str	r0, [sp, #20]
   125aa:	e7ff      	b.n	125ac <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x14>
   125ac:	9805      	ldr	r0, [sp, #20]
   125ae:	6800      	ldr	r0, [r0, #0]
   125b0:	2100      	movs	r1, #0
   125b2:	f7ff feba 	bl	1232a <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
   125b6:	9004      	str	r0, [sp, #16]
   125b8:	e7ff      	b.n	125ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x22>
   125ba:	a806      	add	r0, sp, #24
   125bc:	2101      	movs	r1, #1
   125be:	f7ff ffa2 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   125c2:	9003      	str	r0, [sp, #12]
   125c4:	e7ff      	b.n	125c6 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x2e>
   125c6:	9803      	ldr	r0, [sp, #12]
   125c8:	6800      	ldr	r0, [r0, #0]
   125ca:	2100      	movs	r1, #0
   125cc:	f7ff fead 	bl	1232a <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
   125d0:	9002      	str	r0, [sp, #8]
   125d2:	e7ff      	b.n	125d4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x3c>
   125d4:	9804      	ldr	r0, [sp, #16]
   125d6:	9902      	ldr	r1, [sp, #8]
   125d8:	f000 f84e 	bl	12678 <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>
   125dc:	9001      	str	r0, [sp, #4]
   125de:	9100      	str	r1, [sp, #0]
   125e0:	e7ff      	b.n	125e2 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x4a>
    }
   125e2:	9801      	ldr	r0, [sp, #4]
   125e4:	9900      	ldr	r1, [sp, #0]
   125e6:	b008      	add	sp, #32
   125e8:	bd80      	pop	{r7, pc}

000125ea <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
   125ea:	b08b      	sub	sp, #44	; 0x2c
   125ec:	4601      	mov	r1, r0
   125ee:	f8ad 0020 	strh.w	r0, [sp, #32]
   125f2:	0c00      	lsrs	r0, r0, #16
   125f4:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   125f8:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   125fc:	f88d 001e 	strb.w	r0, [sp, #30]
   12600:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   12604:	f8ad 001c 	strh.w	r0, [sp, #28]
   12608:	f89d 001c 	ldrb.w	r0, [sp, #28]
   1260c:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   12610:	f89d 201d 	ldrb.w	r2, [sp, #29]
   12614:	4613      	mov	r3, r2
   12616:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   1261a:	f89d 201e 	ldrb.w	r2, [sp, #30]
   1261e:	4694      	mov	ip, r2
   12620:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
   12624:	0200      	lsls	r0, r0, #8
   12626:	9306      	str	r3, [sp, #24]
   12628:	f8cd c014 	str.w	ip, [sp, #20]
   1262c:	9004      	str	r0, [sp, #16]
   1262e:	e7ff      	b.n	12630 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
   12630:	9804      	ldr	r0, [sp, #16]
   12632:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
   12636:	9a06      	ldr	r2, [sp, #24]
   12638:	b2d3      	uxtb	r3, r2
   1263a:	00db      	lsls	r3, r3, #3
   1263c:	9103      	str	r1, [sp, #12]
   1263e:	9302      	str	r3, [sp, #8]
   12640:	e7ff      	b.n	12642 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
   12642:	9802      	ldr	r0, [sp, #8]
   12644:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
   12648:	9a03      	ldr	r2, [sp, #12]
   1264a:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
   1264c:	9b05      	ldr	r3, [sp, #20]
   1264e:	fa5f fc83 	uxtb.w	ip, r3
   12652:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   12656:	9101      	str	r1, [sp, #4]
   12658:	f8cd c000 	str.w	ip, [sp]
   1265c:	e7ff      	b.n	1265e <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
   1265e:	9800      	ldr	r0, [sp, #0]
   12660:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
   12664:	9a01      	ldr	r2, [sp, #4]
   12666:	4311      	orrs	r1, r2
   12668:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
   1266c:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
   12670:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   12674:	b00b      	add	sp, #44	; 0x2c
   12676:	4770      	bx	lr

00012678 <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct UnsignedCoord(pub UnsignedCoordPart, pub UnsignedCoordPart);

    impl UnsignedCoord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: UnsignedCoordPart, y: UnsignedCoordPart) -> Self {
   12678:	b084      	sub	sp, #16
   1267a:	9002      	str	r0, [sp, #8]
   1267c:	9103      	str	r1, [sp, #12]
            UnsignedCoord(x, y)
   1267e:	9000      	str	r0, [sp, #0]
   12680:	9101      	str	r1, [sp, #4]
        }
   12682:	9800      	ldr	r0, [sp, #0]
   12684:	9901      	ldr	r1, [sp, #4]
   12686:	b004      	add	sp, #16
   12688:	4770      	bx	lr

0001268a <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
   1268a:	b580      	push	{r7, lr}
   1268c:	b088      	sub	sp, #32
   1268e:	9005      	str	r0, [sp, #20]
   12690:	9106      	str	r1, [sp, #24]
   12692:	9003      	str	r0, [sp, #12]
   12694:	4608      	mov	r0, r1
   12696:	f000 fa21 	bl	12adc <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
   1269a:	9004      	str	r0, [sp, #16]
   1269c:	e7ff      	b.n	1269e <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
   1269e:	9804      	ldr	r0, [sp, #16]
   126a0:	9007      	str	r0, [sp, #28]
   126a2:	9903      	ldr	r1, [sp, #12]
   126a4:	680a      	ldr	r2, [r1, #0]
   126a6:	9002      	str	r0, [sp, #8]
   126a8:	4610      	mov	r0, r2
   126aa:	9902      	ldr	r1, [sp, #8]
   126ac:	f000 f837 	bl	1271e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
   126b0:	9001      	str	r0, [sp, #4]
   126b2:	9100      	str	r1, [sp, #0]
   126b4:	e7ff      	b.n	126b6 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
   126b6:	9801      	ldr	r0, [sp, #4]
   126b8:	9900      	ldr	r1, [sp, #0]
   126ba:	b008      	add	sp, #32
   126bc:	bd80      	pop	{r7, pc}

000126be <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
   126be:	b580      	push	{r7, lr}
   126c0:	b084      	sub	sp, #16
   126c2:	9001      	str	r0, [sp, #4]
   126c4:	9102      	str	r1, [sp, #8]
   126c6:	9203      	str	r2, [sp, #12]
   126c8:	9000      	str	r0, [sp, #0]
   126ca:	4608      	mov	r0, r1
   126cc:	9900      	ldr	r1, [sp, #0]
   126ce:	f00c fb03 	bl	1ecd8 <__aeabi_memcpy>
   126d2:	e7ff      	b.n	126d4 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
   126d4:	b004      	add	sp, #16
   126d6:	bd80      	pop	{r7, pc}

000126d8 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
   126d8:	b580      	push	{r7, lr}
   126da:	b084      	sub	sp, #16
   126dc:	9001      	str	r0, [sp, #4]
   126de:	9102      	str	r1, [sp, #8]
   126e0:	9203      	str	r2, [sp, #12]
   126e2:	0092      	lsls	r2, r2, #2
   126e4:	9000      	str	r0, [sp, #0]
   126e6:	4608      	mov	r0, r1
   126e8:	9900      	ldr	r1, [sp, #0]
   126ea:	f00c faf5 	bl	1ecd8 <__aeabi_memcpy>
   126ee:	e7ff      	b.n	126f0 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
   126f0:	b004      	add	sp, #16
   126f2:	bd80      	pop	{r7, pc}

000126f4 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
   126f4:	b082      	sub	sp, #8
   126f6:	9000      	str	r0, [sp, #0]
   126f8:	9101      	str	r1, [sp, #4]
   126fa:	6800      	ldr	r0, [r0, #0]
   126fc:	6809      	ldr	r1, [r1, #0]
   126fe:	2200      	movs	r2, #0
   12700:	4288      	cmp	r0, r1
   12702:	bf38      	it	cc
   12704:	2201      	movcc	r2, #1
   12706:	4610      	mov	r0, r2
   12708:	b002      	add	sp, #8
   1270a:	4770      	bx	lr

0001270c <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
   1270c:	b580      	push	{r7, lr}
   1270e:	b082      	sub	sp, #8
   12710:	9000      	str	r0, [sp, #0]
   12712:	9101      	str	r1, [sp, #4]
   12714:	f000 f85f 	bl	127d6 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
   12718:	e7ff      	b.n	1271a <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
   1271a:	b002      	add	sp, #8
   1271c:	bd80      	pop	{r7, pc}

0001271e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
   1271e:	b580      	push	{r7, lr}
   12720:	b088      	sub	sp, #32
   12722:	9004      	str	r0, [sp, #16]
   12724:	9105      	str	r1, [sp, #20]
   12726:	f000 f819 	bl	1275c <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
   1272a:	9001      	str	r0, [sp, #4]
   1272c:	9100      	str	r1, [sp, #0]
   1272e:	e7ff      	b.n	12730 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
   12730:	9801      	ldr	r0, [sp, #4]
   12732:	9006      	str	r0, [sp, #24]
   12734:	9900      	ldr	r1, [sp, #0]
   12736:	f001 0201 	and.w	r2, r1, #1
   1273a:	f88d 201f 	strb.w	r2, [sp, #31]
   1273e:	2a00      	cmp	r2, #0
   12740:	d105      	bne.n	1274e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
   12742:	e7ff      	b.n	12744 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
   12744:	9801      	ldr	r0, [sp, #4]
   12746:	9003      	str	r0, [sp, #12]
   12748:	2101      	movs	r1, #1
   1274a:	9102      	str	r1, [sp, #8]
   1274c:	e002      	b.n	12754 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   1274e:	2000      	movs	r0, #0
   12750:	9002      	str	r0, [sp, #8]
   12752:	e7ff      	b.n	12754 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   12754:	9802      	ldr	r0, [sp, #8]
   12756:	9903      	ldr	r1, [sp, #12]
   12758:	b008      	add	sp, #32
   1275a:	bd80      	pop	{r7, pc}

0001275c <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
   1275c:	b08a      	sub	sp, #40	; 0x28
   1275e:	9004      	str	r0, [sp, #16]
   12760:	9105      	str	r1, [sp, #20]
   12762:	1840      	adds	r0, r0, r1
   12764:	f04f 0100 	mov.w	r1, #0
   12768:	f141 0100 	adc.w	r1, r1, #0
   1276c:	9006      	str	r0, [sp, #24]
   1276e:	f88d 101c 	strb.w	r1, [sp, #28]
   12772:	9806      	ldr	r0, [sp, #24]
   12774:	f89d 101c 	ldrb.w	r1, [sp, #28]
   12778:	9001      	str	r0, [sp, #4]
   1277a:	9100      	str	r1, [sp, #0]
   1277c:	e7ff      	b.n	1277e <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
   1277e:	9801      	ldr	r0, [sp, #4]
   12780:	9008      	str	r0, [sp, #32]
   12782:	9900      	ldr	r1, [sp, #0]
   12784:	f001 0201 	and.w	r2, r1, #1
   12788:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1278c:	9002      	str	r0, [sp, #8]
   1278e:	f88d 200c 	strb.w	r2, [sp, #12]
   12792:	9802      	ldr	r0, [sp, #8]
   12794:	f89d 100c 	ldrb.w	r1, [sp, #12]
   12798:	b00a      	add	sp, #40	; 0x28
   1279a:	4770      	bx	lr

0001279c <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
   1279c:	b580      	push	{r7, lr}
   1279e:	b08c      	sub	sp, #48	; 0x30
   127a0:	9005      	str	r0, [sp, #20]
   127a2:	9106      	str	r1, [sp, #24]
   127a4:	9207      	str	r2, [sp, #28]
   127a6:	4603      	mov	r3, r0
   127a8:	9008      	str	r0, [sp, #32]
   127aa:	4608      	mov	r0, r1
   127ac:	9109      	str	r1, [sp, #36]	; 0x24
   127ae:	2104      	movs	r1, #4
   127b0:	910b      	str	r1, [sp, #44]	; 0x2c
   127b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   127b4:	9204      	str	r2, [sp, #16]
   127b6:	9303      	str	r3, [sp, #12]
   127b8:	9002      	str	r0, [sp, #8]
   127ba:	9101      	str	r1, [sp, #4]
   127bc:	e7ff      	b.n	127be <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
   127be:	9801      	ldr	r0, [sp, #4]
   127c0:	9904      	ldr	r1, [sp, #16]
   127c2:	fb00 f201 	mul.w	r2, r0, r1
   127c6:	920a      	str	r2, [sp, #40]	; 0x28
   127c8:	9803      	ldr	r0, [sp, #12]
   127ca:	9902      	ldr	r1, [sp, #8]
   127cc:	f000 f82e 	bl	1282c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
   127d0:	e7ff      	b.n	127d2 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
   127d2:	b00c      	add	sp, #48	; 0x30
   127d4:	bd80      	pop	{r7, pc}

000127d6 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
   127d6:	b580      	push	{r7, lr}
   127d8:	b088      	sub	sp, #32
   127da:	9004      	str	r0, [sp, #16]
   127dc:	9105      	str	r1, [sp, #20]
   127de:	2204      	movs	r2, #4
   127e0:	9207      	str	r2, [sp, #28]
   127e2:	9a07      	ldr	r2, [sp, #28]
   127e4:	9103      	str	r1, [sp, #12]
   127e6:	9002      	str	r0, [sp, #8]
   127e8:	9201      	str	r2, [sp, #4]
   127ea:	e7ff      	b.n	127ec <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
   127ec:	9801      	ldr	r0, [sp, #4]
   127ee:	2820      	cmp	r0, #32
   127f0:	d306      	bcc.n	12800 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
   127f2:	e7ff      	b.n	127f4 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
   127f4:	2201      	movs	r2, #1
   127f6:	9802      	ldr	r0, [sp, #8]
   127f8:	9903      	ldr	r1, [sp, #12]
   127fa:	f7ff ffcf 	bl	1279c <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
   127fe:	e012      	b.n	12826 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
   12800:	9802      	ldr	r0, [sp, #8]
   12802:	f000 f8a1 	bl	12948 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
   12806:	4601      	mov	r1, r0
   12808:	9006      	str	r0, [sp, #24]
   1280a:	9100      	str	r1, [sp, #0]
   1280c:	e7ff      	b.n	1280e <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
   1280e:	2201      	movs	r2, #1
   12810:	9803      	ldr	r0, [sp, #12]
   12812:	9902      	ldr	r1, [sp, #8]
   12814:	f7ff ff60 	bl	126d8 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   12818:	e7ff      	b.n	1281a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
   1281a:	9803      	ldr	r0, [sp, #12]
   1281c:	9900      	ldr	r1, [sp, #0]
   1281e:	f000 f8ac 	bl	1297a <_ZN4core3ptr5write17h4a80332de2cee3d3E>
   12822:	e7ff      	b.n	12824 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
   12824:	e000      	b.n	12828 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   12826:	e7ff      	b.n	12828 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   12828:	b008      	add	sp, #32
   1282a:	bd80      	pop	{r7, pc}

0001282c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
   1282c:	b5d0      	push	{r4, r6, r7, lr}
   1282e:	af02      	add	r7, sp, #8
   12830:	b0b4      	sub	sp, #208	; 0xd0
   12832:	466c      	mov	r4, sp
   12834:	f36f 0404 	bfc	r4, #0, #5
   12838:	46a5      	mov	sp, r4
   1283a:	9024      	str	r0, [sp, #144]	; 0x90
   1283c:	9125      	str	r1, [sp, #148]	; 0x94
   1283e:	9226      	str	r2, [sp, #152]	; 0x98
   12840:	2320      	movs	r3, #32
   12842:	932f      	str	r3, [sp, #188]	; 0xbc
   12844:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   12846:	9327      	str	r3, [sp, #156]	; 0x9c
   12848:	920e      	str	r2, [sp, #56]	; 0x38
   1284a:	910d      	str	r1, [sp, #52]	; 0x34
   1284c:	900c      	str	r0, [sp, #48]	; 0x30
   1284e:	930b      	str	r3, [sp, #44]	; 0x2c
   12850:	e7ff      	b.n	12852 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
   12852:	2000      	movs	r0, #0
   12854:	900f      	str	r0, [sp, #60]	; 0x3c
   12856:	e7ff      	b.n	12858 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   12858:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1285a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1285c:	4408      	add	r0, r1
   1285e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12860:	4290      	cmp	r0, r2
   12862:	d905      	bls.n	12870 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
   12864:	e7ff      	b.n	12866 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
   12866:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12868:	990e      	ldr	r1, [sp, #56]	; 0x38
   1286a:	4288      	cmp	r0, r1
   1286c:	d334      	bcc.n	128d8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
   1286e:	e067      	b.n	12940 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   12870:	e7ff      	b.n	12872 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
   12872:	a810      	add	r0, sp, #64	; 0x40
   12874:	9030      	str	r0, [sp, #192]	; 0xc0
   12876:	9031      	str	r0, [sp, #196]	; 0xc4
   12878:	e7ff      	b.n	1287a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
   1287a:	a810      	add	r0, sp, #64	; 0x40
   1287c:	4601      	mov	r1, r0
   1287e:	9028      	str	r0, [sp, #160]	; 0xa0
   12880:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12882:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12884:	900a      	str	r0, [sp, #40]	; 0x28
   12886:	4610      	mov	r0, r2
   12888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1288a:	9109      	str	r1, [sp, #36]	; 0x24
   1288c:	4619      	mov	r1, r3
   1288e:	f000 f87a 	bl	12986 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   12892:	4601      	mov	r1, r0
   12894:	9029      	str	r0, [sp, #164]	; 0xa4
   12896:	9108      	str	r1, [sp, #32]
   12898:	e7ff      	b.n	1289a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
   1289a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1289c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1289e:	f000 f872 	bl	12986 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   128a2:	4601      	mov	r1, r0
   128a4:	902a      	str	r0, [sp, #168]	; 0xa8
   128a6:	9107      	str	r1, [sp, #28]
   128a8:	e7ff      	b.n	128aa <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
   128aa:	9808      	ldr	r0, [sp, #32]
   128ac:	9909      	ldr	r1, [sp, #36]	; 0x24
   128ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   128b0:	f7ff ff05 	bl	126be <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   128b4:	e7ff      	b.n	128b6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
   128b6:	9807      	ldr	r0, [sp, #28]
   128b8:	9908      	ldr	r1, [sp, #32]
   128ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   128bc:	f7ff feff 	bl	126be <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   128c0:	e7ff      	b.n	128c2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
   128c2:	9809      	ldr	r0, [sp, #36]	; 0x24
   128c4:	9907      	ldr	r1, [sp, #28]
   128c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   128c8:	f7ff fef9 	bl	126be <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   128cc:	e7ff      	b.n	128ce <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
   128ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
   128d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   128d2:	4408      	add	r0, r1
   128d4:	900f      	str	r0, [sp, #60]	; 0x3c
   128d6:	e7bf      	b.n	12858 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   128d8:	e7ff      	b.n	128da <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
   128da:	980f      	ldr	r0, [sp, #60]	; 0x3c
   128dc:	990e      	ldr	r1, [sp, #56]	; 0x38
   128de:	1a08      	subs	r0, r1, r0
   128e0:	4602      	mov	r2, r0
   128e2:	902b      	str	r0, [sp, #172]	; 0xac
   128e4:	a81c      	add	r0, sp, #112	; 0x70
   128e6:	9032      	str	r0, [sp, #200]	; 0xc8
   128e8:	9033      	str	r0, [sp, #204]	; 0xcc
   128ea:	9206      	str	r2, [sp, #24]
   128ec:	9005      	str	r0, [sp, #20]
   128ee:	e7ff      	b.n	128f0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
   128f0:	9805      	ldr	r0, [sp, #20]
   128f2:	9905      	ldr	r1, [sp, #20]
   128f4:	912c      	str	r1, [sp, #176]	; 0xb0
   128f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   128f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   128fa:	9004      	str	r0, [sp, #16]
   128fc:	4610      	mov	r0, r2
   128fe:	f000 f842 	bl	12986 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   12902:	4601      	mov	r1, r0
   12904:	902d      	str	r0, [sp, #180]	; 0xb4
   12906:	9103      	str	r1, [sp, #12]
   12908:	e7ff      	b.n	1290a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
   1290a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1290c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1290e:	f000 f83a 	bl	12986 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   12912:	4601      	mov	r1, r0
   12914:	902e      	str	r0, [sp, #184]	; 0xb8
   12916:	9102      	str	r1, [sp, #8]
   12918:	e7ff      	b.n	1291a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
   1291a:	9803      	ldr	r0, [sp, #12]
   1291c:	9904      	ldr	r1, [sp, #16]
   1291e:	9a06      	ldr	r2, [sp, #24]
   12920:	f7ff fecd 	bl	126be <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   12924:	e7ff      	b.n	12926 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
   12926:	9802      	ldr	r0, [sp, #8]
   12928:	9903      	ldr	r1, [sp, #12]
   1292a:	9a06      	ldr	r2, [sp, #24]
   1292c:	f7ff fec7 	bl	126be <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   12930:	e7ff      	b.n	12932 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
   12932:	9804      	ldr	r0, [sp, #16]
   12934:	9902      	ldr	r1, [sp, #8]
   12936:	9a06      	ldr	r2, [sp, #24]
   12938:	f7ff fec1 	bl	126be <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1293c:	e7ff      	b.n	1293e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
   1293e:	e7ff      	b.n	12940 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   12940:	f1a7 0408 	sub.w	r4, r7, #8
   12944:	46a5      	mov	sp, r4
   12946:	bdd0      	pop	{r4, r6, r7, pc}

00012948 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
   12948:	b580      	push	{r7, lr}
   1294a:	b08a      	sub	sp, #40	; 0x28
   1294c:	9004      	str	r0, [sp, #16]
   1294e:	9905      	ldr	r1, [sp, #20]
   12950:	9103      	str	r1, [sp, #12]
   12952:	9002      	str	r0, [sp, #8]
   12954:	e7ff      	b.n	12956 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
   12956:	a803      	add	r0, sp, #12
   12958:	9008      	str	r0, [sp, #32]
   1295a:	9009      	str	r0, [sp, #36]	; 0x24
   1295c:	e7ff      	b.n	1295e <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
   1295e:	a903      	add	r1, sp, #12
   12960:	2201      	movs	r2, #1
   12962:	9802      	ldr	r0, [sp, #8]
   12964:	f7ff feb8 	bl	126d8 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   12968:	e7ff      	b.n	1296a <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
   1296a:	9803      	ldr	r0, [sp, #12]
   1296c:	9006      	str	r0, [sp, #24]
   1296e:	9007      	str	r0, [sp, #28]
   12970:	9001      	str	r0, [sp, #4]
   12972:	e7ff      	b.n	12974 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
   12974:	9801      	ldr	r0, [sp, #4]
   12976:	b00a      	add	sp, #40	; 0x28
   12978:	bd80      	pop	{r7, pc}

0001297a <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
   1297a:	b082      	sub	sp, #8
   1297c:	9000      	str	r0, [sp, #0]
   1297e:	9101      	str	r1, [sp, #4]
   12980:	6001      	str	r1, [r0, #0]
   12982:	b002      	add	sp, #8
   12984:	4770      	bx	lr

00012986 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
   12986:	b580      	push	{r7, lr}
   12988:	b084      	sub	sp, #16
   1298a:	9002      	str	r0, [sp, #8]
   1298c:	9103      	str	r1, [sp, #12]
   1298e:	f000 f805 	bl	1299c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
   12992:	9001      	str	r0, [sp, #4]
   12994:	e7ff      	b.n	12996 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
   12996:	9801      	ldr	r0, [sp, #4]
   12998:	b004      	add	sp, #16
   1299a:	bd80      	pop	{r7, pc}

0001299c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
   1299c:	b084      	sub	sp, #16
   1299e:	9001      	str	r0, [sp, #4]
   129a0:	9102      	str	r1, [sp, #8]
   129a2:	4408      	add	r0, r1
   129a4:	9003      	str	r0, [sp, #12]
   129a6:	9803      	ldr	r0, [sp, #12]
   129a8:	9000      	str	r0, [sp, #0]
   129aa:	e7ff      	b.n	129ac <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
   129ac:	9800      	ldr	r0, [sp, #0]
   129ae:	b004      	add	sp, #16
   129b0:	4770      	bx	lr

000129b2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
   129b2:	b580      	push	{r7, lr}
   129b4:	b084      	sub	sp, #16
   129b6:	9002      	str	r0, [sp, #8]
   129b8:	9103      	str	r1, [sp, #12]
   129ba:	f000 f805 	bl	129c8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
   129be:	9001      	str	r0, [sp, #4]
   129c0:	e7ff      	b.n	129c2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
   129c2:	9801      	ldr	r0, [sp, #4]
   129c4:	b004      	add	sp, #16
   129c6:	bd80      	pop	{r7, pc}

000129c8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
   129c8:	b084      	sub	sp, #16
   129ca:	9001      	str	r0, [sp, #4]
   129cc:	9102      	str	r1, [sp, #8]
   129ce:	4408      	add	r0, r1
   129d0:	9003      	str	r0, [sp, #12]
   129d2:	9803      	ldr	r0, [sp, #12]
   129d4:	9000      	str	r0, [sp, #0]
   129d6:	e7ff      	b.n	129d8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
   129d8:	9800      	ldr	r0, [sp, #0]
   129da:	b004      	add	sp, #16
   129dc:	4770      	bx	lr

000129de <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
   129de:	b580      	push	{r7, lr}
   129e0:	b08a      	sub	sp, #40	; 0x28
   129e2:	9009      	str	r0, [sp, #36]	; 0x24
   129e4:	2100      	movs	r1, #0
   129e6:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   129ea:	1d01      	adds	r1, r0, #4
   129ec:	9002      	str	r0, [sp, #8]
   129ee:	f7ff fe81 	bl	126f4 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
   129f2:	9001      	str	r0, [sp, #4]
   129f4:	e7ff      	b.n	129f6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
   129f6:	9801      	ldr	r0, [sp, #4]
   129f8:	07c1      	lsls	r1, r0, #31
   129fa:	2900      	cmp	r1, #0
   129fc:	d103      	bne.n	12a06 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
   129fe:	e7ff      	b.n	12a00 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
   12a00:	2000      	movs	r0, #0
   12a02:	9003      	str	r0, [sp, #12]
   12a04:	e021      	b.n	12a4a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   12a06:	2001      	movs	r0, #1
   12a08:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12a0c:	9902      	ldr	r1, [sp, #8]
   12a0e:	9000      	str	r0, [sp, #0]
   12a10:	4608      	mov	r0, r1
   12a12:	9900      	ldr	r1, [sp, #0]
   12a14:	f7ff fe39 	bl	1268a <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
   12a18:	9106      	str	r1, [sp, #24]
   12a1a:	9005      	str	r0, [sp, #20]
   12a1c:	e7ff      	b.n	12a1e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
   12a1e:	9805      	ldr	r0, [sp, #20]
   12a20:	2801      	cmp	r0, #1
   12a22:	d003      	beq.n	12a2c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
   12a24:	e7ff      	b.n	12a26 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
   12a26:	2000      	movs	r0, #0
   12a28:	9003      	str	r0, [sp, #12]
   12a2a:	e021      	b.n	12a70 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   12a2c:	2000      	movs	r0, #0
   12a2e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12a32:	9806      	ldr	r0, [sp, #24]
   12a34:	9007      	str	r0, [sp, #28]
   12a36:	a807      	add	r0, sp, #28
   12a38:	9902      	ldr	r1, [sp, #8]
   12a3a:	f7ff fe67 	bl	1270c <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
   12a3e:	e7ff      	b.n	12a40 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
   12a40:	9807      	ldr	r0, [sp, #28]
   12a42:	9004      	str	r0, [sp, #16]
   12a44:	2001      	movs	r0, #1
   12a46:	9003      	str	r0, [sp, #12]
   12a48:	e012      	b.n	12a70 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   12a4a:	9803      	ldr	r0, [sp, #12]
   12a4c:	9904      	ldr	r1, [sp, #16]
   12a4e:	b00a      	add	sp, #40	; 0x28
   12a50:	bd80      	pop	{r7, pc}
   12a52:	2000      	movs	r0, #0
   12a54:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12a58:	e7f7      	b.n	12a4a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   12a5a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   12a5e:	07c0      	lsls	r0, r0, #31
   12a60:	2800      	cmp	r0, #0
   12a62:	d0f6      	beq.n	12a52 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   12a64:	e7ff      	b.n	12a66 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
   12a66:	2000      	movs	r0, #0
   12a68:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12a6c:	e7f1      	b.n	12a52 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   12a6e:	e7f0      	b.n	12a52 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   12a70:	9805      	ldr	r0, [sp, #20]
   12a72:	2801      	cmp	r0, #1
   12a74:	d0f1      	beq.n	12a5a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
   12a76:	e7fa      	b.n	12a6e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

00012a78 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
   12a78:	b082      	sub	sp, #8
   12a7a:	9000      	str	r0, [sp, #0]
   12a7c:	9101      	str	r1, [sp, #4]
   12a7e:	b002      	add	sp, #8
   12a80:	4770      	bx	lr

00012a82 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
   12a82:	b580      	push	{r7, lr}
   12a84:	b086      	sub	sp, #24
   12a86:	9003      	str	r0, [sp, #12]
   12a88:	9104      	str	r1, [sp, #16]
   12a8a:	9205      	str	r2, [sp, #20]
   12a8c:	9002      	str	r0, [sp, #8]
   12a8e:	4610      	mov	r0, r2
   12a90:	9a02      	ldr	r2, [sp, #8]
   12a92:	9101      	str	r1, [sp, #4]
   12a94:	4611      	mov	r1, r2
   12a96:	9a01      	ldr	r2, [sp, #4]
   12a98:	f000 f846 	bl	12b28 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
   12a9c:	9000      	str	r0, [sp, #0]
   12a9e:	e7ff      	b.n	12aa0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
   12aa0:	9800      	ldr	r0, [sp, #0]
   12aa2:	b006      	add	sp, #24
   12aa4:	bd80      	pop	{r7, pc}

00012aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
   12aa6:	b084      	sub	sp, #16
   12aa8:	9002      	str	r0, [sp, #8]
   12aaa:	9103      	str	r1, [sp, #12]
   12aac:	9000      	str	r0, [sp, #0]
   12aae:	9101      	str	r1, [sp, #4]
   12ab0:	9801      	ldr	r0, [sp, #4]
   12ab2:	b004      	add	sp, #16
   12ab4:	4770      	bx	lr

00012ab6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
   12ab6:	b082      	sub	sp, #8
   12ab8:	9000      	str	r0, [sp, #0]
   12aba:	9101      	str	r1, [sp, #4]
   12abc:	b002      	add	sp, #8
   12abe:	4770      	bx	lr

00012ac0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
   12ac0:	b081      	sub	sp, #4
   12ac2:	9000      	str	r0, [sp, #0]
   12ac4:	b001      	add	sp, #4
   12ac6:	4770      	bx	lr

00012ac8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
   12ac8:	b580      	push	{r7, lr}
   12aca:	b082      	sub	sp, #8
   12acc:	9001      	str	r0, [sp, #4]
   12ace:	f7ff fff7 	bl	12ac0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
   12ad2:	9000      	str	r0, [sp, #0]
   12ad4:	e7ff      	b.n	12ad6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
   12ad6:	9800      	ldr	r0, [sp, #0]
   12ad8:	b002      	add	sp, #8
   12ada:	bd80      	pop	{r7, pc}

00012adc <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
   12adc:	b580      	push	{r7, lr}
   12ade:	b084      	sub	sp, #16
   12ae0:	9003      	str	r0, [sp, #12]
   12ae2:	f7ff fff1 	bl	12ac8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
   12ae6:	9001      	str	r0, [sp, #4]
   12ae8:	e7ff      	b.n	12aea <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
   12aea:	9801      	ldr	r0, [sp, #4]
   12aec:	9002      	str	r0, [sp, #8]
   12aee:	9802      	ldr	r0, [sp, #8]
   12af0:	b004      	add	sp, #16
   12af2:	bd80      	pop	{r7, pc}

00012af4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
   12af4:	b082      	sub	sp, #8
   12af6:	9000      	str	r0, [sp, #0]
   12af8:	9101      	str	r1, [sp, #4]
   12afa:	b002      	add	sp, #8
   12afc:	4770      	bx	lr

00012afe <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
   12afe:	b580      	push	{r7, lr}
   12b00:	b086      	sub	sp, #24
   12b02:	9003      	str	r0, [sp, #12]
   12b04:	9104      	str	r1, [sp, #16]
   12b06:	9205      	str	r2, [sp, #20]
   12b08:	9002      	str	r0, [sp, #8]
   12b0a:	4608      	mov	r0, r1
   12b0c:	4611      	mov	r1, r2
   12b0e:	f7ff ffd2 	bl	12ab6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   12b12:	9001      	str	r0, [sp, #4]
   12b14:	e7ff      	b.n	12b16 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
   12b16:	9801      	ldr	r0, [sp, #4]
   12b18:	9902      	ldr	r1, [sp, #8]
   12b1a:	f7ff ff4a 	bl	129b2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
   12b1e:	9000      	str	r0, [sp, #0]
   12b20:	e7ff      	b.n	12b22 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
   12b22:	9800      	ldr	r0, [sp, #0]
   12b24:	b006      	add	sp, #24
   12b26:	bd80      	pop	{r7, pc}

00012b28 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
   12b28:	b580      	push	{r7, lr}
   12b2a:	b086      	sub	sp, #24
   12b2c:	9003      	str	r0, [sp, #12]
   12b2e:	9104      	str	r1, [sp, #16]
   12b30:	9205      	str	r2, [sp, #20]
   12b32:	9002      	str	r0, [sp, #8]
   12b34:	4608      	mov	r0, r1
   12b36:	4611      	mov	r1, r2
   12b38:	f7ff ff9e 	bl	12a78 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   12b3c:	9001      	str	r0, [sp, #4]
   12b3e:	e7ff      	b.n	12b40 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
   12b40:	9801      	ldr	r0, [sp, #4]
   12b42:	9902      	ldr	r1, [sp, #8]
   12b44:	f7ff ff1f 	bl	12986 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   12b48:	9000      	str	r0, [sp, #0]
   12b4a:	e7ff      	b.n	12b4c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
   12b4c:	9800      	ldr	r0, [sp, #0]
   12b4e:	b006      	add	sp, #24
   12b50:	bd80      	pop	{r7, pc}

00012b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   12b52:	b081      	sub	sp, #4
   12b54:	b001      	add	sp, #4
   12b56:	4770      	bx	lr

00012b58 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
   12b58:	b580      	push	{r7, lr}
   12b5a:	b086      	sub	sp, #24
   12b5c:	f8dd c020 	ldr.w	ip, [sp, #32]
   12b60:	9102      	str	r1, [sp, #8]
   12b62:	9203      	str	r2, [sp, #12]
   12b64:	9304      	str	r3, [sp, #16]
   12b66:	f8cd c014 	str.w	ip, [sp, #20]
   12b6a:	f04f 0e00 	mov.w	lr, #0
   12b6e:	f8cd e004 	str.w	lr, [sp, #4]
   12b72:	f8cd e000 	str.w	lr, [sp]
   12b76:	f8cd e000 	str.w	lr, [sp]
   12b7a:	6001      	str	r1, [r0, #0]
   12b7c:	6042      	str	r2, [r0, #4]
   12b7e:	9900      	ldr	r1, [sp, #0]
   12b80:	9a01      	ldr	r2, [sp, #4]
   12b82:	6081      	str	r1, [r0, #8]
   12b84:	60c2      	str	r2, [r0, #12]
   12b86:	6103      	str	r3, [r0, #16]
   12b88:	f8c0 c014 	str.w	ip, [r0, #20]
   12b8c:	b006      	add	sp, #24
   12b8e:	bd80      	pop	{r7, pc}

00012b90 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
   12b90:	b580      	push	{r7, lr}
   12b92:	b084      	sub	sp, #16
   12b94:	9101      	str	r1, [sp, #4]
   12b96:	9202      	str	r2, [sp, #8]
   12b98:	9901      	ldr	r1, [sp, #4]
   12b9a:	9a02      	ldr	r2, [sp, #8]
   12b9c:	f000 fa95 	bl	130ca <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
   12ba0:	e7ff      	b.n	12ba2 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
   12ba2:	b004      	add	sp, #16
   12ba4:	bd80      	pop	{r7, pc}

00012ba6 <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
   12ba6:	b081      	sub	sp, #4
   12ba8:	9000      	str	r0, [sp, #0]
   12baa:	b001      	add	sp, #4
   12bac:	4770      	bx	lr

00012bae <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
   12bae:	b081      	sub	sp, #4
   12bb0:	9000      	str	r0, [sp, #0]
   12bb2:	b001      	add	sp, #4
   12bb4:	4770      	bx	lr

00012bb6 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
   12bb6:	b580      	push	{r7, lr}
   12bb8:	b086      	sub	sp, #24
   12bba:	460a      	mov	r2, r1
   12bbc:	9004      	str	r0, [sp, #16]
   12bbe:	f88d 1017 	strb.w	r1, [sp, #23]
   12bc2:	9203      	str	r2, [sp, #12]
   12bc4:	f7ff fff3 	bl	12bae <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   12bc8:	9002      	str	r0, [sp, #8]
   12bca:	e7ff      	b.n	12bcc <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
   12bcc:	9802      	ldr	r0, [sp, #8]
   12bce:	9903      	ldr	r1, [sp, #12]
   12bd0:	f000 f806 	bl	12be0 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   12bd4:	9001      	str	r0, [sp, #4]
   12bd6:	e7ff      	b.n	12bd8 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
   12bd8:	9801      	ldr	r0, [sp, #4]
   12bda:	b006      	add	sp, #24
   12bdc:	bd80      	pop	{r7, pc}
	...

00012be0 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
   12be0:	b086      	sub	sp, #24
   12be2:	460a      	mov	r2, r1
   12be4:	f88d 100f 	strb.w	r1, [sp, #15]
   12be8:	9005      	str	r0, [sp, #20]
   12bea:	f89d 100f 	ldrb.w	r1, [sp, #15]
   12bee:	9002      	str	r0, [sp, #8]
   12bf0:	9101      	str	r1, [sp, #4]
   12bf2:	9901      	ldr	r1, [sp, #4]
   12bf4:	e8df f001 	tbb	[pc, r1]
   12bf8:	03102317 	.word	0x03102317
   12bfc:	001c      	.short	0x001c
   12bfe:	f247 20cc 	movw	r0, #29388	; 0x72cc
   12c02:	f2c0 0002 	movt	r0, #2
   12c06:	f247 3248 	movw	r2, #29512	; 0x7348
   12c0a:	f2c0 0202 	movt	r2, #2
   12c0e:	2131      	movs	r1, #49	; 0x31
   12c10:	f005 fc8e 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12c14:	defe      	udf	#254	; 0xfe
   12c16:	defe      	udf	#254	; 0xfe
   12c18:	9802      	ldr	r0, [sp, #8]
   12c1a:	6801      	ldr	r1, [r0, #0]
   12c1c:	f3bf 8f5f 	dmb	sy
   12c20:	9104      	str	r1, [sp, #16]
   12c22:	e7ff      	b.n	12c24 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
   12c24:	e017      	b.n	12c56 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   12c26:	9802      	ldr	r0, [sp, #8]
   12c28:	6801      	ldr	r1, [r0, #0]
   12c2a:	9104      	str	r1, [sp, #16]
   12c2c:	e7ff      	b.n	12c2e <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
   12c2e:	e012      	b.n	12c56 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   12c30:	9802      	ldr	r0, [sp, #8]
   12c32:	6801      	ldr	r1, [r0, #0]
   12c34:	f3bf 8f5f 	dmb	sy
   12c38:	9104      	str	r1, [sp, #16]
   12c3a:	e7ff      	b.n	12c3c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
   12c3c:	e00b      	b.n	12c56 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   12c3e:	f247 3058 	movw	r0, #29528	; 0x7358
   12c42:	f2c0 0002 	movt	r0, #2
   12c46:	f247 3248 	movw	r2, #29512	; 0x7348
   12c4a:	f2c0 0202 	movt	r2, #2
   12c4e:	2128      	movs	r1, #40	; 0x28
   12c50:	f005 fc6e 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12c54:	defe      	udf	#254	; 0xfe
   12c56:	9804      	ldr	r0, [sp, #16]
   12c58:	b006      	add	sp, #24
   12c5a:	4770      	bx	lr

00012c5c <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
   12c5c:	b081      	sub	sp, #4
   12c5e:	9000      	str	r0, [sp, #0]
   12c60:	6800      	ldr	r0, [r0, #0]
   12c62:	b001      	add	sp, #4
   12c64:	4770      	bx	lr

00012c66 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
   12c66:	b082      	sub	sp, #8
   12c68:	9001      	str	r0, [sp, #4]
   12c6a:	6801      	ldr	r1, [r0, #0]
   12c6c:	6840      	ldr	r0, [r0, #4]
   12c6e:	9000      	str	r0, [sp, #0]
   12c70:	4608      	mov	r0, r1
   12c72:	9900      	ldr	r1, [sp, #0]
   12c74:	b002      	add	sp, #8
   12c76:	4770      	bx	lr

00012c78 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
   12c78:	b580      	push	{r7, lr}
   12c7a:	b08c      	sub	sp, #48	; 0x30
   12c7c:	9101      	str	r1, [sp, #4]
   12c7e:	9202      	str	r2, [sp, #8]
   12c80:	2100      	movs	r1, #0
   12c82:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   12c86:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   12c8a:	2101      	movs	r1, #1
   12c8c:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   12c90:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   12c94:	9901      	ldr	r1, [sp, #4]
   12c96:	2900      	cmp	r1, #0
   12c98:	460a      	mov	r2, r1
   12c9a:	bf18      	it	ne
   12c9c:	2201      	movne	r2, #1
   12c9e:	2900      	cmp	r1, #0
   12ca0:	9000      	str	r0, [sp, #0]
   12ca2:	d001      	beq.n	12ca8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
   12ca4:	e7ff      	b.n	12ca6 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
   12ca6:	e008      	b.n	12cba <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
   12ca8:	2000      	movs	r0, #0
   12caa:	9900      	ldr	r1, [sp, #0]
   12cac:	6088      	str	r0, [r1, #8]
   12cae:	6048      	str	r0, [r1, #4]
   12cb0:	6008      	str	r0, [r1, #0]
   12cb2:	2002      	movs	r0, #2
   12cb4:	6008      	str	r0, [r1, #0]
   12cb6:	e021      	b.n	12cfc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   12cb8:	defe      	udf	#254	; 0xfe
   12cba:	2000      	movs	r0, #0
   12cbc:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12cc0:	9901      	ldr	r1, [sp, #4]
   12cc2:	9a02      	ldr	r2, [sp, #8]
   12cc4:	910a      	str	r1, [sp, #40]	; 0x28
   12cc6:	920b      	str	r2, [sp, #44]	; 0x2c
   12cc8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   12ccc:	9106      	str	r1, [sp, #24]
   12cce:	9207      	str	r2, [sp, #28]
   12cd0:	9906      	ldr	r1, [sp, #24]
   12cd2:	9a07      	ldr	r2, [sp, #28]
   12cd4:	a803      	add	r0, sp, #12
   12cd6:	f7ff ff5b 	bl	12b90 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
   12cda:	e7ff      	b.n	12cdc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
   12cdc:	9803      	ldr	r0, [sp, #12]
   12cde:	9904      	ldr	r1, [sp, #16]
   12ce0:	9a05      	ldr	r2, [sp, #20]
   12ce2:	9b00      	ldr	r3, [sp, #0]
   12ce4:	609a      	str	r2, [r3, #8]
   12ce6:	6059      	str	r1, [r3, #4]
   12ce8:	6018      	str	r0, [r3, #0]
   12cea:	e007      	b.n	12cfc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   12cec:	9801      	ldr	r0, [sp, #4]
   12cee:	2800      	cmp	r0, #0
   12cf0:	d10c      	bne.n	12d0c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
   12cf2:	e015      	b.n	12d20 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
   12cf4:	2000      	movs	r0, #0
   12cf6:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   12cfa:	e7f7      	b.n	12cec <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   12cfc:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   12d00:	07c0      	lsls	r0, r0, #31
   12d02:	2800      	cmp	r0, #0
   12d04:	d1f6      	bne.n	12cf4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
   12d06:	e7f1      	b.n	12cec <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   12d08:	b00c      	add	sp, #48	; 0x30
   12d0a:	bd80      	pop	{r7, pc}
   12d0c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   12d10:	07c0      	lsls	r0, r0, #31
   12d12:	2800      	cmp	r0, #0
   12d14:	d0f8      	beq.n	12d08 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   12d16:	e7ff      	b.n	12d18 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
   12d18:	2000      	movs	r0, #0
   12d1a:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12d1e:	e7f3      	b.n	12d08 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   12d20:	e7f2      	b.n	12d08 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

00012d22 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>:
   12d22:	b081      	sub	sp, #4
   12d24:	b001      	add	sp, #4
   12d26:	4770      	bx	lr

00012d28 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
   12d28:	b5b0      	push	{r4, r5, r7, lr}
   12d2a:	b081      	sub	sp, #4
   12d2c:	9100      	str	r1, [sp, #0]
   12d2e:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   12d32:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   12d36:	b001      	add	sp, #4
   12d38:	bdb0      	pop	{r4, r5, r7, pc}

00012d3a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
   12d3a:	b580      	push	{r7, lr}
   12d3c:	b088      	sub	sp, #32
   12d3e:	9106      	str	r1, [sp, #24]
   12d40:	680a      	ldr	r2, [r1, #0]
   12d42:	1e93      	subs	r3, r2, #2
   12d44:	bf18      	it	ne
   12d46:	2301      	movne	r3, #1
   12d48:	2a02      	cmp	r2, #2
   12d4a:	9102      	str	r1, [sp, #8]
   12d4c:	9001      	str	r0, [sp, #4]
   12d4e:	d001      	beq.n	12d54 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
   12d50:	e7ff      	b.n	12d52 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
   12d52:	e008      	b.n	12d66 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
   12d54:	2000      	movs	r0, #0
   12d56:	9901      	ldr	r1, [sp, #4]
   12d58:	6088      	str	r0, [r1, #8]
   12d5a:	6048      	str	r0, [r1, #4]
   12d5c:	6008      	str	r0, [r1, #0]
   12d5e:	2002      	movs	r0, #2
   12d60:	6008      	str	r0, [r1, #0]
   12d62:	e00f      	b.n	12d84 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   12d64:	defe      	udf	#254	; 0xfe
   12d66:	9802      	ldr	r0, [sp, #8]
   12d68:	9007      	str	r0, [sp, #28]
   12d6a:	a803      	add	r0, sp, #12
   12d6c:	9902      	ldr	r1, [sp, #8]
   12d6e:	f000 f9b5 	bl	130dc <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
   12d72:	e7ff      	b.n	12d74 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
   12d74:	9803      	ldr	r0, [sp, #12]
   12d76:	9904      	ldr	r1, [sp, #16]
   12d78:	9a05      	ldr	r2, [sp, #20]
   12d7a:	9b01      	ldr	r3, [sp, #4]
   12d7c:	609a      	str	r2, [r3, #8]
   12d7e:	6059      	str	r1, [r3, #4]
   12d80:	6018      	str	r0, [r3, #0]
   12d82:	e7ff      	b.n	12d84 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   12d84:	b008      	add	sp, #32
   12d86:	bd80      	pop	{r7, pc}

00012d88 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
   12d88:	b580      	push	{r7, lr}
   12d8a:	b086      	sub	sp, #24
   12d8c:	9004      	str	r0, [sp, #16]
   12d8e:	6801      	ldr	r1, [r0, #0]
   12d90:	2900      	cmp	r1, #0
   12d92:	9001      	str	r0, [sp, #4]
   12d94:	d001      	beq.n	12d9a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
   12d96:	e7ff      	b.n	12d98 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
   12d98:	e003      	b.n	12da2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
   12d9a:	2000      	movs	r0, #0
   12d9c:	9002      	str	r0, [sp, #8]
   12d9e:	e00d      	b.n	12dbc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   12da0:	defe      	udf	#254	; 0xfe
   12da2:	9801      	ldr	r0, [sp, #4]
   12da4:	1d01      	adds	r1, r0, #4
   12da6:	9105      	str	r1, [sp, #20]
   12da8:	4608      	mov	r0, r1
   12daa:	f7ff ff57 	bl	12c5c <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
   12dae:	9000      	str	r0, [sp, #0]
   12db0:	e7ff      	b.n	12db2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
   12db2:	9800      	ldr	r0, [sp, #0]
   12db4:	9003      	str	r0, [sp, #12]
   12db6:	2101      	movs	r1, #1
   12db8:	9102      	str	r1, [sp, #8]
   12dba:	e7ff      	b.n	12dbc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   12dbc:	9802      	ldr	r0, [sp, #8]
   12dbe:	9903      	ldr	r1, [sp, #12]
   12dc0:	b006      	add	sp, #24
   12dc2:	bd80      	pop	{r7, pc}

00012dc4 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
   12dc4:	b081      	sub	sp, #4
   12dc6:	9000      	str	r0, [sp, #0]
        *self
   12dc8:	6800      	ldr	r0, [r0, #0]
    }
   12dca:	b001      	add	sp, #4
   12dcc:	4770      	bx	lr

00012dce <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
   12dce:	b580      	push	{r7, lr}
        RecordBuilder::new()
   12dd0:	f000 f802 	bl	12dd8 <_ZN3log13RecordBuilder3new17haca8312579858419E>
   12dd4:	e7ff      	b.n	12dd6 <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
   12dd6:	bd80      	pop	{r7, pc}

00012dd8 <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
   12dd8:	b570      	push	{r4, r5, r6, lr}
   12dda:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
   12ddc:	f247 3198 	movw	r1, #29592	; 0x7398
   12de0:	f2c0 0102 	movt	r1, #2
   12de4:	6809      	ldr	r1, [r1, #0]
   12de6:	466a      	mov	r2, sp
   12de8:	2300      	movs	r3, #0
   12dea:	6013      	str	r3, [r2, #0]
   12dec:	aa16      	add	r2, sp, #88	; 0x58
   12dee:	9004      	str	r0, [sp, #16]
   12df0:	4610      	mov	r0, r2
   12df2:	9103      	str	r1, [sp, #12]
   12df4:	461a      	mov	r2, r3
   12df6:	9b03      	ldr	r3, [sp, #12]
   12df8:	f7ff feae 	bl	12b58 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
   12dfc:	e7ff      	b.n	12dfe <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
   12dfe:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
   12e00:	f000 f891 	bl	12f26 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
   12e04:	e7ff      	b.n	12e06 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
   12e06:	a81c      	add	r0, sp, #112	; 0x70
   12e08:	a91f      	add	r1, sp, #124	; 0x7c
   12e0a:	f000 f8a5 	bl	12f58 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
   12e0e:	e7ff      	b.n	12e10 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
   12e10:	2000      	movs	r0, #0
                module_path: None,
   12e12:	9024      	str	r0, [sp, #144]	; 0x90
   12e14:	9023      	str	r0, [sp, #140]	; 0x8c
   12e16:	9022      	str	r0, [sp, #136]	; 0x88
   12e18:	2102      	movs	r1, #2
   12e1a:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
   12e1c:	9027      	str	r0, [sp, #156]	; 0x9c
   12e1e:	9026      	str	r0, [sp, #152]	; 0x98
   12e20:	9025      	str	r0, [sp, #148]	; 0x94
   12e22:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
   12e24:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
   12e26:	981c      	ldr	r0, [sp, #112]	; 0x70
   12e28:	991d      	ldr	r1, [sp, #116]	; 0x74
   12e2a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   12e2c:	9207      	str	r2, [sp, #28]
   12e2e:	9106      	str	r1, [sp, #24]
   12e30:	9005      	str	r0, [sp, #20]
   12e32:	a805      	add	r0, sp, #20
   12e34:	f100 010c 	add.w	r1, r0, #12
   12e38:	aa16      	add	r2, sp, #88	; 0x58
   12e3a:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   12e3e:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   12e42:	9922      	ldr	r1, [sp, #136]	; 0x88
   12e44:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   12e46:	9b24      	ldr	r3, [sp, #144]	; 0x90
   12e48:	9310      	str	r3, [sp, #64]	; 0x40
   12e4a:	920f      	str	r2, [sp, #60]	; 0x3c
   12e4c:	910e      	str	r1, [sp, #56]	; 0x38
   12e4e:	9925      	ldr	r1, [sp, #148]	; 0x94
   12e50:	9a26      	ldr	r2, [sp, #152]	; 0x98
   12e52:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   12e54:	9313      	str	r3, [sp, #76]	; 0x4c
   12e56:	9212      	str	r2, [sp, #72]	; 0x48
   12e58:	9111      	str	r1, [sp, #68]	; 0x44
   12e5a:	9928      	ldr	r1, [sp, #160]	; 0xa0
   12e5c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   12e5e:	9114      	str	r1, [sp, #80]	; 0x50
   12e60:	9215      	str	r2, [sp, #84]	; 0x54
   12e62:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
   12e64:	9904      	ldr	r1, [sp, #16]
   12e66:	9002      	str	r0, [sp, #8]
   12e68:	4608      	mov	r0, r1
   12e6a:	9902      	ldr	r1, [sp, #8]
   12e6c:	f00b ff34 	bl	1ecd8 <__aeabi_memcpy>
    }
   12e70:	b02a      	add	sp, #168	; 0xa8
   12e72:	bd70      	pop	{r4, r5, r6, pc}

00012e74 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
   12e74:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e76:	b087      	sub	sp, #28
   12e78:	9006      	str	r0, [sp, #24]
   12e7a:	466a      	mov	r2, sp
        self.record.args = args;
   12e7c:	4613      	mov	r3, r2
   12e7e:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
   12e82:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
   12e86:	f100 010c 	add.w	r1, r0, #12
   12e8a:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   12e8e:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
   12e92:	b007      	add	sp, #28
   12e94:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012e96 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
   12e96:	b082      	sub	sp, #8
   12e98:	9000      	str	r0, [sp, #0]
   12e9a:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
   12e9c:	6001      	str	r1, [r0, #0]
    }
   12e9e:	b002      	add	sp, #8
   12ea0:	4770      	bx	lr

00012ea2 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
   12ea2:	b083      	sub	sp, #12
   12ea4:	9000      	str	r0, [sp, #0]
   12ea6:	9101      	str	r1, [sp, #4]
   12ea8:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
   12eaa:	6041      	str	r1, [r0, #4]
   12eac:	6082      	str	r2, [r0, #8]
    }
   12eae:	b003      	add	sp, #12
   12eb0:	4770      	bx	lr

00012eb2 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
   12eb2:	b580      	push	{r7, lr}
   12eb4:	b088      	sub	sp, #32
   12eb6:	9005      	str	r0, [sp, #20]
   12eb8:	9106      	str	r1, [sp, #24]
   12eba:	9207      	str	r2, [sp, #28]
   12ebc:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
   12ebe:	9001      	str	r0, [sp, #4]
   12ec0:	4618      	mov	r0, r3
   12ec2:	f7ff fed9 	bl	12c78 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   12ec6:	e7ff      	b.n	12ec8 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
   12ec8:	9802      	ldr	r0, [sp, #8]
   12eca:	9903      	ldr	r1, [sp, #12]
   12ecc:	9a04      	ldr	r2, [sp, #16]
   12ece:	9b01      	ldr	r3, [sp, #4]
   12ed0:	62da      	str	r2, [r3, #44]	; 0x2c
   12ed2:	6299      	str	r1, [r3, #40]	; 0x28
   12ed4:	6258      	str	r0, [r3, #36]	; 0x24
    }
   12ed6:	4618      	mov	r0, r3
   12ed8:	b008      	add	sp, #32
   12eda:	bd80      	pop	{r7, pc}

00012edc <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
   12edc:	b580      	push	{r7, lr}
   12ede:	b088      	sub	sp, #32
   12ee0:	9005      	str	r0, [sp, #20]
   12ee2:	9106      	str	r1, [sp, #24]
   12ee4:	9207      	str	r2, [sp, #28]
   12ee6:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
   12ee8:	9001      	str	r0, [sp, #4]
   12eea:	4618      	mov	r0, r3
   12eec:	f7ff fec4 	bl	12c78 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   12ef0:	e7ff      	b.n	12ef2 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
   12ef2:	9802      	ldr	r0, [sp, #8]
   12ef4:	9903      	ldr	r1, [sp, #12]
   12ef6:	9a04      	ldr	r2, [sp, #16]
   12ef8:	9b01      	ldr	r3, [sp, #4]
   12efa:	639a      	str	r2, [r3, #56]	; 0x38
   12efc:	6359      	str	r1, [r3, #52]	; 0x34
   12efe:	6318      	str	r0, [r3, #48]	; 0x30
    }
   12f00:	4618      	mov	r0, r3
   12f02:	b008      	add	sp, #32
   12f04:	bd80      	pop	{r7, pc}

00012f06 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
   12f06:	b083      	sub	sp, #12
   12f08:	9000      	str	r0, [sp, #0]
   12f0a:	9101      	str	r1, [sp, #4]
   12f0c:	9202      	str	r2, [sp, #8]
        self.record.line = line;
   12f0e:	63c1      	str	r1, [r0, #60]	; 0x3c
   12f10:	6402      	str	r2, [r0, #64]	; 0x40
    }
   12f12:	b003      	add	sp, #12
   12f14:	4770      	bx	lr

00012f16 <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
   12f16:	b580      	push	{r7, lr}
   12f18:	b082      	sub	sp, #8
   12f1a:	9101      	str	r1, [sp, #4]
        self.record.clone()
   12f1c:	f000 f8e8 	bl	130f0 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
   12f20:	e7ff      	b.n	12f22 <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
   12f22:	b002      	add	sp, #8
   12f24:	bd80      	pop	{r7, pc}

00012f26 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
   12f26:	b580      	push	{r7, lr}
        MetadataBuilder::new()
   12f28:	f000 f802 	bl	12f30 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
   12f2c:	e7ff      	b.n	12f2e <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
   12f2e:	bd80      	pop	{r7, pc}

00012f30 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
   12f30:	b084      	sub	sp, #16
   12f32:	2103      	movs	r1, #3
                level: Level::Info,
   12f34:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
   12f36:	9903      	ldr	r1, [sp, #12]
   12f38:	9100      	str	r1, [sp, #0]
   12f3a:	f247 3180 	movw	r1, #29568	; 0x7380
   12f3e:	f2c0 0102 	movt	r1, #2
   12f42:	9101      	str	r1, [sp, #4]
   12f44:	2100      	movs	r1, #0
   12f46:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
   12f48:	9900      	ldr	r1, [sp, #0]
   12f4a:	9a01      	ldr	r2, [sp, #4]
   12f4c:	9b02      	ldr	r3, [sp, #8]
   12f4e:	6083      	str	r3, [r0, #8]
   12f50:	6042      	str	r2, [r0, #4]
   12f52:	6001      	str	r1, [r0, #0]
    }
   12f54:	b004      	add	sp, #16
   12f56:	4770      	bx	lr

00012f58 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
   12f58:	b580      	push	{r7, lr}
   12f5a:	b082      	sub	sp, #8
   12f5c:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
   12f5e:	f000 f91c 	bl	1319a <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   12f62:	e7ff      	b.n	12f64 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
   12f64:	b002      	add	sp, #8
   12f66:	bd80      	pop	{r7, pc}

00012f68 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
   12f68:	b082      	sub	sp, #8
   12f6a:	9000      	str	r0, [sp, #0]
   12f6c:	9101      	str	r1, [sp, #4]
   12f6e:	2000      	movs	r0, #0
    }
   12f70:	b002      	add	sp, #8
   12f72:	4770      	bx	lr

00012f74 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
   12f74:	b082      	sub	sp, #8
   12f76:	9000      	str	r0, [sp, #0]
   12f78:	9101      	str	r1, [sp, #4]
   12f7a:	b002      	add	sp, #8
   12f7c:	4770      	bx	lr

00012f7e <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
   12f7e:	b081      	sub	sp, #4
   12f80:	9000      	str	r0, [sp, #0]
   12f82:	b001      	add	sp, #4
   12f84:	4770      	bx	lr

00012f86 <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
   12f86:	b580      	push	{r7, lr}
   12f88:	b084      	sub	sp, #16
   12f8a:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   12f8c:	f88d 000f 	strb.w	r0, [sp, #15]
   12f90:	f89d 100f 	ldrb.w	r1, [sp, #15]
   12f94:	f644 2068 	movw	r0, #19048	; 0x4a68
   12f98:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12f9c:	f7ff fe0b 	bl	12bb6 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
   12fa0:	9000      	str	r0, [sp, #0]
   12fa2:	e7ff      	b.n	12fa4 <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
   12fa4:	9800      	ldr	r0, [sp, #0]
   12fa6:	2802      	cmp	r0, #2
   12fa8:	d109      	bne.n	12fbe <_ZN3log6logger17hf609e7cc1c031552E+0x38>
   12faa:	e7ff      	b.n	12fac <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
   12fac:	f240 00f0 	movw	r0, #240	; 0xf0
   12fb0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12fb4:	6801      	ldr	r1, [r0, #0]
   12fb6:	6840      	ldr	r0, [r0, #4]
   12fb8:	9101      	str	r1, [sp, #4]
   12fba:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   12fbc:	e00a      	b.n	12fd4 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
   12fbe:	f247 30b4 	movw	r0, #29620	; 0x73b4
   12fc2:	f2c0 0002 	movt	r0, #2
   12fc6:	9001      	str	r0, [sp, #4]
   12fc8:	f247 309c 	movw	r0, #29596	; 0x739c
   12fcc:	f2c0 0002 	movt	r0, #2
   12fd0:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   12fd2:	e7ff      	b.n	12fd4 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
   12fd4:	9801      	ldr	r0, [sp, #4]
   12fd6:	9902      	ldr	r1, [sp, #8]
        }
    }
}
   12fd8:	b004      	add	sp, #16
   12fda:	bd80      	pop	{r7, pc}

00012fdc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
   12fdc:	b570      	push	{r4, r5, r6, lr}
   12fde:	b0ca      	sub	sp, #296	; 0x128
   12fe0:	9141      	str	r1, [sp, #260]	; 0x104
   12fe2:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
   12fe4:	6813      	ldr	r3, [r2, #0]
   12fe6:	f8d2 c004 	ldr.w	ip, [r2, #4]
   12fea:	9343      	str	r3, [sp, #268]	; 0x10c
   12fec:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
   12ff0:	f8d2 e008 	ldr.w	lr, [r2, #8]
   12ff4:	68d4      	ldr	r4, [r2, #12]
   12ff6:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
   12ffa:	9446      	str	r4, [sp, #280]	; 0x118
   12ffc:	6915      	ldr	r5, [r2, #16]
   12ffe:	6956      	ldr	r6, [r2, #20]
   13000:	9547      	str	r5, [sp, #284]	; 0x11c
   13002:	9648      	str	r6, [sp, #288]	; 0x120
   13004:	6992      	ldr	r2, [r2, #24]
   13006:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
   13008:	9112      	str	r1, [sp, #72]	; 0x48
   1300a:	9011      	str	r0, [sp, #68]	; 0x44
   1300c:	9310      	str	r3, [sp, #64]	; 0x40
   1300e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   13012:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   13016:	940d      	str	r4, [sp, #52]	; 0x34
   13018:	950c      	str	r5, [sp, #48]	; 0x30
   1301a:	960b      	str	r6, [sp, #44]	; 0x2c
   1301c:	920a      	str	r2, [sp, #40]	; 0x28
   1301e:	f7ff ffb2 	bl	12f86 <_ZN3log6logger17hf609e7cc1c031552E>
   13022:	9009      	str	r0, [sp, #36]	; 0x24
   13024:	9108      	str	r1, [sp, #32]
   13026:	e7ff      	b.n	13028 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
   13028:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
   1302a:	f7ff fed0 	bl	12dce <_ZN3log6Record7builder17hde62ab0132265febE>
   1302e:	e7ff      	b.n	13030 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
   13030:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
   13032:	4601      	mov	r1, r0
   13034:	9a11      	ldr	r2, [sp, #68]	; 0x44
   13036:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   1303a:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   1303e:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
   13040:	9007      	str	r0, [sp, #28]
   13042:	4608      	mov	r0, r1
   13044:	9907      	ldr	r1, [sp, #28]
   13046:	f7ff ff15 	bl	12e74 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
   1304a:	9006      	str	r0, [sp, #24]
   1304c:	e7ff      	b.n	1304e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
   1304e:	9806      	ldr	r0, [sp, #24]
   13050:	9912      	ldr	r1, [sp, #72]	; 0x48
   13052:	f7ff ff20 	bl	12e96 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
   13056:	9005      	str	r0, [sp, #20]
   13058:	e7ff      	b.n	1305a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
   1305a:	9805      	ldr	r0, [sp, #20]
   1305c:	9910      	ldr	r1, [sp, #64]	; 0x40
   1305e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13060:	f7ff ff1f 	bl	12ea2 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
   13064:	9004      	str	r0, [sp, #16]
   13066:	e7ff      	b.n	13068 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
   13068:	980e      	ldr	r0, [sp, #56]	; 0x38
   1306a:	903b      	str	r0, [sp, #236]	; 0xec
   1306c:	990d      	ldr	r1, [sp, #52]	; 0x34
   1306e:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
   13070:	993b      	ldr	r1, [sp, #236]	; 0xec
   13072:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   13074:	9804      	ldr	r0, [sp, #16]
   13076:	f7ff ff1c 	bl	12eb2 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
   1307a:	9003      	str	r0, [sp, #12]
   1307c:	e7ff      	b.n	1307e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
   1307e:	980c      	ldr	r0, [sp, #48]	; 0x30
   13080:	903d      	str	r0, [sp, #244]	; 0xf4
   13082:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13084:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
   13086:	993d      	ldr	r1, [sp, #244]	; 0xf4
   13088:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
   1308a:	9803      	ldr	r0, [sp, #12]
   1308c:	f7ff ff26 	bl	12edc <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
   13090:	9002      	str	r0, [sp, #8]
   13092:	e7ff      	b.n	13094 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
   13094:	980a      	ldr	r0, [sp, #40]	; 0x28
   13096:	9040      	str	r0, [sp, #256]	; 0x100
   13098:	2101      	movs	r1, #1
   1309a:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
   1309c:	993f      	ldr	r1, [sp, #252]	; 0xfc
   1309e:	9a40      	ldr	r2, [sp, #256]	; 0x100
   130a0:	9802      	ldr	r0, [sp, #8]
   130a2:	f7ff ff30 	bl	12f06 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
   130a6:	9001      	str	r0, [sp, #4]
   130a8:	e7ff      	b.n	130aa <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
   130aa:	a813      	add	r0, sp, #76	; 0x4c
   130ac:	9901      	ldr	r1, [sp, #4]
   130ae:	f7ff ff32 	bl	12f16 <_ZN3log13RecordBuilder5build17h83529556a009112eE>
   130b2:	e7ff      	b.n	130b4 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
   130b4:	9808      	ldr	r0, [sp, #32]
   130b6:	6901      	ldr	r1, [r0, #16]
   130b8:	aa13      	add	r2, sp, #76	; 0x4c
   130ba:	9809      	ldr	r0, [sp, #36]	; 0x24
   130bc:	9100      	str	r1, [sp, #0]
   130be:	4611      	mov	r1, r2
   130c0:	9a00      	ldr	r2, [sp, #0]
   130c2:	4790      	blx	r2
   130c4:	e7ff      	b.n	130c6 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
   130c6:	b04a      	add	sp, #296	; 0x128
   130c8:	bd70      	pop	{r4, r5, r6, pc}

000130ca <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
   130ca:	b082      	sub	sp, #8
   130cc:	9100      	str	r1, [sp, #0]
   130ce:	9201      	str	r2, [sp, #4]
   130d0:	6041      	str	r1, [r0, #4]
   130d2:	6082      	str	r2, [r0, #8]
   130d4:	2100      	movs	r1, #0
   130d6:	6001      	str	r1, [r0, #0]
   130d8:	b002      	add	sp, #8
   130da:	4770      	bx	lr

000130dc <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   130dc:	b081      	sub	sp, #4
   130de:	9100      	str	r1, [sp, #0]
   130e0:	680a      	ldr	r2, [r1, #0]
   130e2:	684b      	ldr	r3, [r1, #4]
   130e4:	6889      	ldr	r1, [r1, #8]
   130e6:	6081      	str	r1, [r0, #8]
   130e8:	6043      	str	r3, [r0, #4]
   130ea:	6002      	str	r2, [r0, #0]
   130ec:	b001      	add	sp, #4
   130ee:	4770      	bx	lr

000130f0 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
   130f0:	b570      	push	{r4, r5, r6, lr}
   130f2:	b09c      	sub	sp, #112	; 0x70
   130f4:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
   130f6:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
   130f8:	f101 020c 	add.w	r2, r1, #12
   130fc:	4613      	mov	r3, r2
   130fe:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
   13100:	f101 0224 	add.w	r2, r1, #36	; 0x24
   13104:	4694      	mov	ip, r2
   13106:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
   13108:	f101 0230 	add.w	r2, r1, #48	; 0x30
   1310c:	4696      	mov	lr, r2
   1310e:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
   13110:	f101 023c 	add.w	r2, r1, #60	; 0x3c
   13114:	4614      	mov	r4, r2
   13116:	921b      	str	r2, [sp, #108]	; 0x6c
   13118:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
   1311a:	9006      	str	r0, [sp, #24]
   1311c:	4610      	mov	r0, r2
   1311e:	9305      	str	r3, [sp, #20]
   13120:	f8cd c010 	str.w	ip, [sp, #16]
   13124:	f8cd e00c 	str.w	lr, [sp, #12]
   13128:	9402      	str	r4, [sp, #8]
   1312a:	f000 f836 	bl	1319a <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   1312e:	e7ff      	b.n	13130 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
   13130:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
   13132:	9905      	ldr	r1, [sp, #20]
   13134:	f7ff fdf8 	bl	12d28 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
   13138:	e7ff      	b.n	1313a <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
   1313a:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
   1313c:	9904      	ldr	r1, [sp, #16]
   1313e:	f7ff fdfc 	bl	12d3a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   13142:	e7ff      	b.n	13144 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
   13144:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
   13146:	9903      	ldr	r1, [sp, #12]
   13148:	f7ff fdf7 	bl	12d3a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   1314c:	e7ff      	b.n	1314e <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
   1314e:	9802      	ldr	r0, [sp, #8]
   13150:	f7ff fe1a 	bl	12d88 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
   13154:	9001      	str	r0, [sp, #4]
   13156:	9100      	str	r1, [sp, #0]
   13158:	e7ff      	b.n	1315a <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
   1315a:	9807      	ldr	r0, [sp, #28]
   1315c:	9908      	ldr	r1, [sp, #32]
   1315e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13160:	9b06      	ldr	r3, [sp, #24]
   13162:	609a      	str	r2, [r3, #8]
   13164:	6059      	str	r1, [r3, #4]
   13166:	6018      	str	r0, [r3, #0]
   13168:	f103 000c 	add.w	r0, r3, #12
   1316c:	a90a      	add	r1, sp, #40	; 0x28
   1316e:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
   13172:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
   13176:	9810      	ldr	r0, [sp, #64]	; 0x40
   13178:	9911      	ldr	r1, [sp, #68]	; 0x44
   1317a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1317c:	62da      	str	r2, [r3, #44]	; 0x2c
   1317e:	6299      	str	r1, [r3, #40]	; 0x28
   13180:	6258      	str	r0, [r3, #36]	; 0x24
   13182:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13184:	9914      	ldr	r1, [sp, #80]	; 0x50
   13186:	9a15      	ldr	r2, [sp, #84]	; 0x54
   13188:	639a      	str	r2, [r3, #56]	; 0x38
   1318a:	6359      	str	r1, [r3, #52]	; 0x34
   1318c:	6318      	str	r0, [r3, #48]	; 0x30
   1318e:	9801      	ldr	r0, [sp, #4]
   13190:	63d8      	str	r0, [r3, #60]	; 0x3c
   13192:	9900      	ldr	r1, [sp, #0]
   13194:	6419      	str	r1, [r3, #64]	; 0x40
   13196:	b01c      	add	sp, #112	; 0x70
   13198:	bd70      	pop	{r4, r5, r6, pc}

0001319a <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   1319a:	b580      	push	{r7, lr}
   1319c:	b088      	sub	sp, #32
   1319e:	9105      	str	r1, [sp, #20]
    level: Level,
   131a0:	9106      	str	r1, [sp, #24]
    target: &'a str,
   131a2:	1d0a      	adds	r2, r1, #4
   131a4:	4613      	mov	r3, r2
   131a6:	9207      	str	r2, [sp, #28]
    level: Level,
   131a8:	9004      	str	r0, [sp, #16]
   131aa:	4608      	mov	r0, r1
   131ac:	9303      	str	r3, [sp, #12]
   131ae:	f7ff fe09 	bl	12dc4 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
   131b2:	9002      	str	r0, [sp, #8]
   131b4:	e7ff      	b.n	131b6 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
   131b6:	9803      	ldr	r0, [sp, #12]
   131b8:	f7ff fd55 	bl	12c66 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
   131bc:	9001      	str	r0, [sp, #4]
   131be:	9100      	str	r1, [sp, #0]
   131c0:	e7ff      	b.n	131c2 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   131c2:	9802      	ldr	r0, [sp, #8]
   131c4:	9904      	ldr	r1, [sp, #16]
   131c6:	6008      	str	r0, [r1, #0]
   131c8:	9a01      	ldr	r2, [sp, #4]
   131ca:	604a      	str	r2, [r1, #4]
   131cc:	9b00      	ldr	r3, [sp, #0]
   131ce:	608b      	str	r3, [r1, #8]
   131d0:	b008      	add	sp, #32
   131d2:	bd80      	pop	{r7, pc}

000131d4 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   131d4:	b580      	push	{r7, lr}
   131d6:	b084      	sub	sp, #16
   131d8:	9002      	str	r0, [sp, #8]
   131da:	9103      	str	r1, [sp, #12]
   131dc:	6800      	ldr	r0, [r0, #0]
   131de:	f000 f81c 	bl	1321a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   131e2:	9001      	str	r0, [sp, #4]
   131e4:	e7ff      	b.n	131e6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   131e6:	9801      	ldr	r0, [sp, #4]
   131e8:	f000 0001 	and.w	r0, r0, #1
   131ec:	b004      	add	sp, #16
   131ee:	bd80      	pop	{r7, pc}

000131f0 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   131f0:	b089      	sub	sp, #36	; 0x24
   131f2:	9005      	str	r0, [sp, #20]
   131f4:	9106      	str	r1, [sp, #24]
   131f6:	9107      	str	r1, [sp, #28]
   131f8:	9907      	ldr	r1, [sp, #28]
   131fa:	9002      	str	r0, [sp, #8]
   131fc:	9101      	str	r1, [sp, #4]
   131fe:	e7ff      	b.n	13200 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   13200:	9802      	ldr	r0, [sp, #8]
   13202:	9008      	str	r0, [sp, #32]
   13204:	9908      	ldr	r1, [sp, #32]
   13206:	9100      	str	r1, [sp, #0]
   13208:	e7ff      	b.n	1320a <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   1320a:	9800      	ldr	r0, [sp, #0]
   1320c:	9003      	str	r0, [sp, #12]
   1320e:	9901      	ldr	r1, [sp, #4]
   13210:	9104      	str	r1, [sp, #16]
   13212:	9803      	ldr	r0, [sp, #12]
   13214:	9904      	ldr	r1, [sp, #16]
   13216:	b009      	add	sp, #36	; 0x24
   13218:	4770      	bx	lr

0001321a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   1321a:	b580      	push	{r7, lr}
   1321c:	b088      	sub	sp, #32
   1321e:	9006      	str	r0, [sp, #24]
   13220:	9107      	str	r1, [sp, #28]
   13222:	9004      	str	r0, [sp, #16]
   13224:	4608      	mov	r0, r1
   13226:	9103      	str	r1, [sp, #12]
   13228:	f006 f823 	bl	19272 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1322c:	9002      	str	r0, [sp, #8]
   1322e:	e7ff      	b.n	13230 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   13230:	9802      	ldr	r0, [sp, #8]
   13232:	07c1      	lsls	r1, r0, #31
   13234:	2900      	cmp	r1, #0
   13236:	d105      	bne.n	13244 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   13238:	e7ff      	b.n	1323a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   1323a:	9803      	ldr	r0, [sp, #12]
   1323c:	f006 f81d 	bl	1927a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   13240:	9001      	str	r0, [sp, #4]
   13242:	e007      	b.n	13254 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   13244:	9804      	ldr	r0, [sp, #16]
   13246:	9903      	ldr	r1, [sp, #12]
   13248:	f006 fe3d 	bl	19ec6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   1324c:	f88d 0017 	strb.w	r0, [sp, #23]
   13250:	e7ff      	b.n	13252 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   13252:	e015      	b.n	13280 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   13254:	9801      	ldr	r0, [sp, #4]
   13256:	07c1      	lsls	r1, r0, #31
   13258:	2900      	cmp	r1, #0
   1325a:	d107      	bne.n	1326c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   1325c:	e7ff      	b.n	1325e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   1325e:	9804      	ldr	r0, [sp, #16]
   13260:	9903      	ldr	r1, [sp, #12]
   13262:	f007 f825 	bl	1a2b0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   13266:	f88d 0017 	strb.w	r0, [sp, #23]
   1326a:	e007      	b.n	1327c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   1326c:	9804      	ldr	r0, [sp, #16]
   1326e:	9903      	ldr	r1, [sp, #12]
   13270:	f006 fe94 	bl	19f9c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   13274:	f88d 0017 	strb.w	r0, [sp, #23]
   13278:	e7ff      	b.n	1327a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   1327a:	e000      	b.n	1327e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   1327c:	e7ff      	b.n	1327e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   1327e:	e7ff      	b.n	13280 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   13280:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13284:	b008      	add	sp, #32
   13286:	bd80      	pop	{r7, pc}

00013288 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   13288:	b086      	sub	sp, #24
   1328a:	9004      	str	r0, [sp, #16]
   1328c:	9105      	str	r1, [sp, #20]
   1328e:	9002      	str	r0, [sp, #8]
   13290:	9103      	str	r1, [sp, #12]
   13292:	9802      	ldr	r0, [sp, #8]
   13294:	9903      	ldr	r1, [sp, #12]
   13296:	9000      	str	r0, [sp, #0]
   13298:	9101      	str	r1, [sp, #4]
   1329a:	9800      	ldr	r0, [sp, #0]
   1329c:	9901      	ldr	r1, [sp, #4]
   1329e:	b006      	add	sp, #24
   132a0:	4770      	bx	lr

000132a2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   132a2:	b580      	push	{r7, lr}
   132a4:	b084      	sub	sp, #16
   132a6:	9002      	str	r0, [sp, #8]
   132a8:	9103      	str	r1, [sp, #12]
   132aa:	f000 f805 	bl	132b8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   132ae:	9001      	str	r0, [sp, #4]
   132b0:	e7ff      	b.n	132b2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   132b2:	9801      	ldr	r0, [sp, #4]
   132b4:	b004      	add	sp, #16
   132b6:	bd80      	pop	{r7, pc}

000132b8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   132b8:	b084      	sub	sp, #16
   132ba:	9001      	str	r0, [sp, #4]
   132bc:	9102      	str	r1, [sp, #8]
   132be:	4408      	add	r0, r1
   132c0:	9003      	str	r0, [sp, #12]
   132c2:	9803      	ldr	r0, [sp, #12]
   132c4:	9000      	str	r0, [sp, #0]
   132c6:	e7ff      	b.n	132c8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   132c8:	9800      	ldr	r0, [sp, #0]
   132ca:	b004      	add	sp, #16
   132cc:	4770      	bx	lr

000132ce <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   132ce:	b580      	push	{r7, lr}
   132d0:	b084      	sub	sp, #16
   132d2:	9002      	str	r0, [sp, #8]
   132d4:	9103      	str	r1, [sp, #12]
   132d6:	f7ff ffd7 	bl	13288 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   132da:	9001      	str	r0, [sp, #4]
   132dc:	9100      	str	r1, [sp, #0]
   132de:	e7ff      	b.n	132e0 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   132e0:	9801      	ldr	r0, [sp, #4]
   132e2:	9900      	ldr	r1, [sp, #0]
   132e4:	b004      	add	sp, #16
   132e6:	bd80      	pop	{r7, pc}

000132e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   132e8:	b084      	sub	sp, #16
   132ea:	9002      	str	r0, [sp, #8]
   132ec:	9103      	str	r1, [sp, #12]
   132ee:	9000      	str	r0, [sp, #0]
   132f0:	9101      	str	r1, [sp, #4]
   132f2:	9801      	ldr	r0, [sp, #4]
   132f4:	b004      	add	sp, #16
   132f6:	4770      	bx	lr

000132f8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   132f8:	b082      	sub	sp, #8
   132fa:	9000      	str	r0, [sp, #0]
   132fc:	9101      	str	r1, [sp, #4]
   132fe:	b002      	add	sp, #8
   13300:	4770      	bx	lr

00013302 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
   13302:	b083      	sub	sp, #12
   13304:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
   13306:	9002      	str	r0, [sp, #8]
   13308:	9802      	ldr	r0, [sp, #8]
   1330a:	9000      	str	r0, [sp, #0]
   1330c:	e7ff      	b.n	1330e <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
   1330e:	9800      	ldr	r0, [sp, #0]
   13310:	b003      	add	sp, #12
   13312:	4770      	bx	lr

00013314 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
   13314:	b081      	sub	sp, #4
   13316:	f06f 000c 	mvn.w	r0, #12
        }
   1331a:	b001      	add	sp, #4
   1331c:	4770      	bx	lr

0001331e <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
   1331e:	b082      	sub	sp, #8
   13320:	9000      	str	r0, [sp, #0]
   13322:	9101      	str	r1, [sp, #4]
   13324:	2000      	movs	r0, #0
        }
   13326:	b002      	add	sp, #8
   13328:	4770      	bx	lr

0001332a <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   1332a:	b082      	sub	sp, #8
   1332c:	9000      	str	r0, [sp, #0]
   1332e:	9101      	str	r1, [sp, #4]
   13330:	7800      	ldrb	r0, [r0, #0]
   13332:	7809      	ldrb	r1, [r1, #0]
   13334:	1a40      	subs	r0, r0, r1
   13336:	fab0 f080 	clz	r0, r0
   1333a:	0940      	lsrs	r0, r0, #5
   1333c:	b002      	add	sp, #8
   1333e:	4770      	bx	lr

00013340 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
   13340:	b580      	push	{r7, lr}
   13342:	b084      	sub	sp, #16
   13344:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   13346:	f004 fc8a 	bl	17c5e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>
   1334a:	9002      	str	r0, [sp, #8]
   1334c:	9101      	str	r1, [sp, #4]
   1334e:	e7ff      	b.n	13350 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E+0x10>
    }
   13350:	9802      	ldr	r0, [sp, #8]
   13352:	9901      	ldr	r1, [sp, #4]
   13354:	b004      	add	sp, #16
   13356:	bd80      	pop	{r7, pc}

00013358 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   13358:	b580      	push	{r7, lr}
   1335a:	b084      	sub	sp, #16
   1335c:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   1335e:	f004 fc93 	bl	17c88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   13362:	9002      	str	r0, [sp, #8]
   13364:	9101      	str	r1, [sp, #4]
   13366:	e7ff      	b.n	13368 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   13368:	9802      	ldr	r0, [sp, #8]
   1336a:	9901      	ldr	r1, [sp, #4]
   1336c:	b004      	add	sp, #16
   1336e:	bd80      	pop	{r7, pc}

00013370 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   13370:	b580      	push	{r7, lr}
   13372:	b084      	sub	sp, #16
   13374:	9001      	str	r0, [sp, #4]
   13376:	9102      	str	r1, [sp, #8]
   13378:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   1337a:	f004 fbd2 	bl	17b22 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>
   1337e:	9000      	str	r0, [sp, #0]
   13380:	e7ff      	b.n	13382 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E+0x12>
    }
   13382:	9800      	ldr	r0, [sp, #0]
   13384:	f000 0001 	and.w	r0, r0, #1
   13388:	b004      	add	sp, #16
   1338a:	bd80      	pop	{r7, pc}

0001338c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   1338c:	b580      	push	{r7, lr}
   1338e:	b086      	sub	sp, #24
   13390:	460a      	mov	r2, r1
   13392:	9004      	str	r0, [sp, #16]
   13394:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   13398:	9203      	str	r2, [sp, #12]
   1339a:	f004 fc25 	bl	17be8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   1339e:	9002      	str	r0, [sp, #8]
   133a0:	9101      	str	r1, [sp, #4]
   133a2:	e7ff      	b.n	133a4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   133a4:	9802      	ldr	r0, [sp, #8]
   133a6:	f000 0001 	and.w	r0, r0, #1
   133aa:	9901      	ldr	r1, [sp, #4]
   133ac:	b006      	add	sp, #24
   133ae:	bd80      	pop	{r7, pc}

000133b0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   133b0:	b580      	push	{r7, lr}
   133b2:	b082      	sub	sp, #8
   133b4:	9001      	str	r0, [sp, #4]
        self.0.clear()
   133b6:	f004 fc40 	bl	17c3a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   133ba:	e7ff      	b.n	133bc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   133bc:	b002      	add	sp, #8
   133be:	bd80      	pop	{r7, pc}

000133c0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>:
    pub fn clear(&mut self) {
   133c0:	b580      	push	{r7, lr}
   133c2:	b082      	sub	sp, #8
   133c4:	9001      	str	r0, [sp, #4]
        self.0.clear()
   133c6:	f004 fc41 	bl	17c4c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>
   133ca:	e7ff      	b.n	133cc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E+0xc>
    }
   133cc:	b002      	add	sp, #8
   133ce:	bd80      	pop	{r7, pc}

000133d0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>:
    pub fn capacity(&self) -> usize {
   133d0:	b580      	push	{r7, lr}
   133d2:	b082      	sub	sp, #8
   133d4:	9001      	str	r0, [sp, #4]
        self.0.capacity()
   133d6:	f004 fc76 	bl	17cc6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   133da:	9000      	str	r0, [sp, #0]
   133dc:	e7ff      	b.n	133de <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E+0xe>
    }
   133de:	9800      	ldr	r0, [sp, #0]
   133e0:	b002      	add	sp, #8
   133e2:	bd80      	pop	{r7, pc}

000133e4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
   133e4:	b081      	sub	sp, #4
   133e6:	9000      	str	r0, [sp, #0]
   133e8:	b001      	add	sp, #4
   133ea:	4770      	bx	lr

000133ec <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   133ec:	b580      	push	{r7, lr}
   133ee:	b088      	sub	sp, #32
   133f0:	9006      	str	r0, [sp, #24]
   133f2:	9107      	str	r1, [sp, #28]
   133f4:	9004      	str	r0, [sp, #16]
   133f6:	4608      	mov	r0, r1
   133f8:	9103      	str	r1, [sp, #12]
   133fa:	f005 ff3a 	bl	19272 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   133fe:	9002      	str	r0, [sp, #8]
   13400:	e7ff      	b.n	13402 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   13402:	9802      	ldr	r0, [sp, #8]
   13404:	07c1      	lsls	r1, r0, #31
   13406:	2900      	cmp	r1, #0
   13408:	d105      	bne.n	13416 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   1340a:	e7ff      	b.n	1340c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   1340c:	9803      	ldr	r0, [sp, #12]
   1340e:	f005 ff34 	bl	1927a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   13412:	9001      	str	r0, [sp, #4]
   13414:	e007      	b.n	13426 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   13416:	9804      	ldr	r0, [sp, #16]
   13418:	9903      	ldr	r1, [sp, #12]
   1341a:	f006 fc38 	bl	19c8e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   1341e:	f88d 0017 	strb.w	r0, [sp, #23]
   13422:	e7ff      	b.n	13424 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   13424:	e015      	b.n	13452 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   13426:	9801      	ldr	r0, [sp, #4]
   13428:	07c1      	lsls	r1, r0, #31
   1342a:	2900      	cmp	r1, #0
   1342c:	d107      	bne.n	1343e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   1342e:	e7ff      	b.n	13430 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   13430:	9804      	ldr	r0, [sp, #16]
   13432:	9903      	ldr	r1, [sp, #12]
   13434:	f006 fe1d 	bl	1a072 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   13438:	f88d 0017 	strb.w	r0, [sp, #23]
   1343c:	e007      	b.n	1344e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   1343e:	9804      	ldr	r0, [sp, #16]
   13440:	9903      	ldr	r1, [sp, #12]
   13442:	f006 fc53 	bl	19cec <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   13446:	f88d 0017 	strb.w	r0, [sp, #23]
   1344a:	e7ff      	b.n	1344c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   1344c:	e000      	b.n	13450 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   1344e:	e7ff      	b.n	13450 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   13450:	e7ff      	b.n	13452 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   13452:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13456:	b008      	add	sp, #32
   13458:	bd80      	pop	{r7, pc}

0001345a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   1345a:	b580      	push	{r7, lr}
   1345c:	b088      	sub	sp, #32
   1345e:	9006      	str	r0, [sp, #24]
   13460:	9107      	str	r1, [sp, #28]
   13462:	9004      	str	r0, [sp, #16]
   13464:	4608      	mov	r0, r1
   13466:	9103      	str	r1, [sp, #12]
   13468:	f005 ff03 	bl	19272 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1346c:	9002      	str	r0, [sp, #8]
   1346e:	e7ff      	b.n	13470 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   13470:	9802      	ldr	r0, [sp, #8]
   13472:	07c1      	lsls	r1, r0, #31
   13474:	2900      	cmp	r1, #0
   13476:	d105      	bne.n	13484 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   13478:	e7ff      	b.n	1347a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   1347a:	9803      	ldr	r0, [sp, #12]
   1347c:	f005 fefd 	bl	1927a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   13480:	9001      	str	r0, [sp, #4]
   13482:	e007      	b.n	13494 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   13484:	9804      	ldr	r0, [sp, #16]
   13486:	9903      	ldr	r1, [sp, #12]
   13488:	f006 fd1d 	bl	19ec6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   1348c:	f88d 0017 	strb.w	r0, [sp, #23]
   13490:	e7ff      	b.n	13492 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   13492:	e015      	b.n	134c0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   13494:	9801      	ldr	r0, [sp, #4]
   13496:	07c1      	lsls	r1, r0, #31
   13498:	2900      	cmp	r1, #0
   1349a:	d107      	bne.n	134ac <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   1349c:	e7ff      	b.n	1349e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   1349e:	9804      	ldr	r0, [sp, #16]
   134a0:	9903      	ldr	r1, [sp, #12]
   134a2:	f006 fe8b 	bl	1a1bc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   134a6:	f88d 0017 	strb.w	r0, [sp, #23]
   134aa:	e007      	b.n	134bc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   134ac:	9804      	ldr	r0, [sp, #16]
   134ae:	9903      	ldr	r1, [sp, #12]
   134b0:	f006 fd74 	bl	19f9c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   134b4:	f88d 0017 	strb.w	r0, [sp, #23]
   134b8:	e7ff      	b.n	134ba <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   134ba:	e000      	b.n	134be <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   134bc:	e7ff      	b.n	134be <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   134be:	e7ff      	b.n	134c0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   134c0:	f89d 0017 	ldrb.w	r0, [sp, #23]
   134c4:	b008      	add	sp, #32
   134c6:	bd80      	pop	{r7, pc}

000134c8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   134c8:	b580      	push	{r7, lr}
   134ca:	b088      	sub	sp, #32
   134cc:	9006      	str	r0, [sp, #24]
   134ce:	9107      	str	r1, [sp, #28]
   134d0:	9004      	str	r0, [sp, #16]
   134d2:	4608      	mov	r0, r1
   134d4:	9103      	str	r1, [sp, #12]
   134d6:	f005 fecc 	bl	19272 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   134da:	9002      	str	r0, [sp, #8]
   134dc:	e7ff      	b.n	134de <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   134de:	9802      	ldr	r0, [sp, #8]
   134e0:	07c1      	lsls	r1, r0, #31
   134e2:	2900      	cmp	r1, #0
   134e4:	d105      	bne.n	134f2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   134e6:	e7ff      	b.n	134e8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   134e8:	9803      	ldr	r0, [sp, #12]
   134ea:	f005 fec6 	bl	1927a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   134ee:	9001      	str	r0, [sp, #4]
   134f0:	e007      	b.n	13502 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   134f2:	9804      	ldr	r0, [sp, #16]
   134f4:	9903      	ldr	r1, [sp, #12]
   134f6:	f006 fce6 	bl	19ec6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   134fa:	f88d 0017 	strb.w	r0, [sp, #23]
   134fe:	e7ff      	b.n	13500 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   13500:	e015      	b.n	1352e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   13502:	9801      	ldr	r0, [sp, #4]
   13504:	07c1      	lsls	r1, r0, #31
   13506:	2900      	cmp	r1, #0
   13508:	d107      	bne.n	1351a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   1350a:	e7ff      	b.n	1350c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   1350c:	9804      	ldr	r0, [sp, #16]
   1350e:	9903      	ldr	r1, [sp, #12]
   13510:	f006 fece 	bl	1a2b0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   13514:	f88d 0017 	strb.w	r0, [sp, #23]
   13518:	e007      	b.n	1352a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   1351a:	9804      	ldr	r0, [sp, #16]
   1351c:	9903      	ldr	r1, [sp, #12]
   1351e:	f006 fd3d 	bl	19f9c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   13522:	f88d 0017 	strb.w	r0, [sp, #23]
   13526:	e7ff      	b.n	13528 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   13528:	e000      	b.n	1352c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   1352a:	e7ff      	b.n	1352c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   1352c:	e7ff      	b.n	1352e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   1352e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13532:	b008      	add	sp, #32
   13534:	bd80      	pop	{r7, pc}

00013536 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   13536:	b580      	push	{r7, lr}
   13538:	b084      	sub	sp, #16
   1353a:	9002      	str	r0, [sp, #8]
   1353c:	9103      	str	r1, [sp, #12]
   1353e:	6800      	ldr	r0, [r0, #0]
   13540:	6809      	ldr	r1, [r1, #0]
   13542:	f7ff fef2 	bl	1332a <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   13546:	9001      	str	r0, [sp, #4]
   13548:	e7ff      	b.n	1354a <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   1354a:	9801      	ldr	r0, [sp, #4]
   1354c:	f000 0001 	and.w	r0, r0, #1
   13550:	b004      	add	sp, #16
   13552:	bd80      	pop	{r7, pc}

00013554 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   13554:	b5b0      	push	{r4, r5, r7, lr}
   13556:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   1355a:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   1355c:	f007 fd8a 	bl	1b074 <hal_spi_disable>
   13560:	e7ff      	b.n	13562 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   13562:	f240 01f8 	movw	r1, #248	; 0xf8
   13566:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1356a:	2000      	movs	r0, #0
   1356c:	f007 fd40 	bl	1aff0 <hal_spi_config>
   13570:	906a      	str	r0, [sp, #424]	; 0x1a8
   13572:	e7ff      	b.n	13574 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   13574:	f247 30b8 	movw	r0, #29624	; 0x73b8
   13578:	f2c0 0002 	movt	r0, #2
   1357c:	6800      	ldr	r0, [r0, #0]
   1357e:	a96a      	add	r1, sp, #424	; 0x1a8
   13580:	916b      	str	r1, [sp, #428]	; 0x1ac
   13582:	906c      	str	r0, [sp, #432]	; 0x1b0
   13584:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   13586:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   1358a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   1358c:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   13590:	6802      	ldr	r2, [r0, #0]
   13592:	680b      	ldr	r3, [r1, #0]
   13594:	429a      	cmp	r2, r3
   13596:	9068      	str	r0, [sp, #416]	; 0x1a0
   13598:	9167      	str	r1, [sp, #412]	; 0x19c
   1359a:	d10c      	bne.n	135b6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   1359c:	e7ff      	b.n	1359e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   1359e:	f646 7004 	movw	r0, #28420	; 0x6f04
   135a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   135a6:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   135aa:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   135ae:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   135b2:	9066      	str	r0, [sp, #408]	; 0x198
   135b4:	e075      	b.n	136a2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   135b6:	f247 4010 	movw	r0, #29712	; 0x7410
   135ba:	f2c0 0002 	movt	r0, #2
   135be:	6801      	ldr	r1, [r0, #0]
   135c0:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   135c2:	907c      	str	r0, [sp, #496]	; 0x1f0
   135c4:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   135c6:	927d      	str	r2, [sp, #500]	; 0x1f4
   135c8:	f247 432c 	movw	r3, #29740	; 0x742c
   135cc:	f2c0 0302 	movt	r3, #2
   135d0:	681b      	ldr	r3, [r3, #0]
   135d2:	f247 4c30 	movw	ip, #29744	; 0x7430
   135d6:	f2c0 0c02 	movt	ip, #2
   135da:	f8dc c000 	ldr.w	ip, [ip]
   135de:	46ee      	mov	lr, sp
   135e0:	2400      	movs	r4, #0
   135e2:	f8ce 4000 	str.w	r4, [lr]
   135e6:	a87e      	add	r0, sp, #504	; 0x1f8
   135e8:	2201      	movs	r2, #1
   135ea:	9165      	str	r1, [sp, #404]	; 0x194
   135ec:	4619      	mov	r1, r3
   135ee:	4663      	mov	r3, ip
   135f0:	f7f5 fad8 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   135f4:	e7ff      	b.n	135f6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   135f6:	a87c      	add	r0, sp, #496	; 0x1f0
   135f8:	9079      	str	r0, [sp, #484]	; 0x1e4
   135fa:	a87d      	add	r0, sp, #500	; 0x1f4
   135fc:	907a      	str	r0, [sp, #488]	; 0x1e8
   135fe:	a87e      	add	r0, sp, #504	; 0x1f8
   13600:	907b      	str	r0, [sp, #492]	; 0x1ec
   13602:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   13604:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   13608:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   1360a:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   1360e:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   13610:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   13614:	f249 33f3 	movw	r3, #37875	; 0x93f3
   13618:	f2c0 0300 	movt	r3, #0
   1361c:	9164      	str	r1, [sp, #400]	; 0x190
   1361e:	4619      	mov	r1, r3
   13620:	9263      	str	r2, [sp, #396]	; 0x18c
   13622:	f7f5 ff1e 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13626:	9062      	str	r0, [sp, #392]	; 0x188
   13628:	9161      	str	r1, [sp, #388]	; 0x184
   1362a:	e7ff      	b.n	1362c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   1362c:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13630:	f2c0 0100 	movt	r1, #0
   13634:	9864      	ldr	r0, [sp, #400]	; 0x190
   13636:	f7f5 ff14 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1363a:	9060      	str	r0, [sp, #384]	; 0x180
   1363c:	915f      	str	r1, [sp, #380]	; 0x17c
   1363e:	e7ff      	b.n	13640 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   13640:	f648 21ff 	movw	r1, #35583	; 0x8aff
   13644:	f2c0 0101 	movt	r1, #1
   13648:	9863      	ldr	r0, [sp, #396]	; 0x18c
   1364a:	f7f5 ff49 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1364e:	905e      	str	r0, [sp, #376]	; 0x178
   13650:	915d      	str	r1, [sp, #372]	; 0x174
   13652:	e7ff      	b.n	13654 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   13654:	9862      	ldr	r0, [sp, #392]	; 0x188
   13656:	9073      	str	r0, [sp, #460]	; 0x1cc
   13658:	9961      	ldr	r1, [sp, #388]	; 0x184
   1365a:	9174      	str	r1, [sp, #464]	; 0x1d0
   1365c:	9a60      	ldr	r2, [sp, #384]	; 0x180
   1365e:	9275      	str	r2, [sp, #468]	; 0x1d4
   13660:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   13662:	9376      	str	r3, [sp, #472]	; 0x1d8
   13664:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   13668:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   1366c:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   13670:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   13674:	466c      	mov	r4, sp
   13676:	2503      	movs	r5, #3
   13678:	6025      	str	r5, [r4, #0]
   1367a:	a86d      	add	r0, sp, #436	; 0x1b4
   1367c:	ab73      	add	r3, sp, #460	; 0x1cc
   1367e:	9965      	ldr	r1, [sp, #404]	; 0x194
   13680:	462a      	mov	r2, r5
   13682:	f7f5 fa8f 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13686:	e7ff      	b.n	13688 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   13688:	f247 404c 	movw	r0, #29772	; 0x744c
   1368c:	f2c0 0002 	movt	r0, #2
   13690:	f004 ff47 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13694:	905c      	str	r0, [sp, #368]	; 0x170
   13696:	e7ff      	b.n	13698 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   13698:	a86d      	add	r0, sp, #436	; 0x1b4
   1369a:	995c      	ldr	r1, [sp, #368]	; 0x170
   1369c:	f004 ff7e 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   136a0:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   136a2:	f644 20ef 	movw	r0, #19183	; 0x4aef
   136a6:	f2c0 0001 	movt	r0, #1
   136aa:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   136ac:	9985      	ldr	r1, [sp, #532]	; 0x214
   136ae:	2000      	movs	r0, #0
   136b0:	9a66      	ldr	r2, [sp, #408]	; 0x198
   136b2:	f007 fd43 	bl	1b13c <hal_spi_set_txrx_cb>
   136b6:	9084      	str	r0, [sp, #528]	; 0x210
   136b8:	e7ff      	b.n	136ba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   136ba:	f247 30b8 	movw	r0, #29624	; 0x73b8
   136be:	f2c0 0002 	movt	r0, #2
   136c2:	6800      	ldr	r0, [r0, #0]
   136c4:	a984      	add	r1, sp, #528	; 0x210
   136c6:	9186      	str	r1, [sp, #536]	; 0x218
   136c8:	9087      	str	r0, [sp, #540]	; 0x21c
   136ca:	9886      	ldr	r0, [sp, #536]	; 0x218
   136cc:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   136d0:	9987      	ldr	r1, [sp, #540]	; 0x21c
   136d2:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   136d6:	6802      	ldr	r2, [r0, #0]
   136d8:	680b      	ldr	r3, [r1, #0]
   136da:	429a      	cmp	r2, r3
   136dc:	905b      	str	r0, [sp, #364]	; 0x16c
   136de:	915a      	str	r1, [sp, #360]	; 0x168
   136e0:	d105      	bne.n	136ee <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   136e2:	e7ff      	b.n	136e4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   136e4:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   136e6:	f007 fc9f 	bl	1b028 <hal_spi_enable>
   136ea:	909f      	str	r0, [sp, #636]	; 0x27c
   136ec:	e075      	b.n	137da <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   136ee:	f247 4010 	movw	r0, #29712	; 0x7410
   136f2:	f2c0 0002 	movt	r0, #2
   136f6:	6801      	ldr	r1, [r0, #0]
   136f8:	985b      	ldr	r0, [sp, #364]	; 0x16c
   136fa:	9097      	str	r0, [sp, #604]	; 0x25c
   136fc:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   136fe:	9298      	str	r2, [sp, #608]	; 0x260
   13700:	f247 4370 	movw	r3, #29808	; 0x7470
   13704:	f2c0 0302 	movt	r3, #2
   13708:	681b      	ldr	r3, [r3, #0]
   1370a:	f247 4c30 	movw	ip, #29744	; 0x7430
   1370e:	f2c0 0c02 	movt	ip, #2
   13712:	f8dc c000 	ldr.w	ip, [ip]
   13716:	46ee      	mov	lr, sp
   13718:	2400      	movs	r4, #0
   1371a:	f8ce 4000 	str.w	r4, [lr]
   1371e:	a899      	add	r0, sp, #612	; 0x264
   13720:	2201      	movs	r2, #1
   13722:	9159      	str	r1, [sp, #356]	; 0x164
   13724:	4619      	mov	r1, r3
   13726:	4663      	mov	r3, ip
   13728:	f7f5 fa3c 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1372c:	e7ff      	b.n	1372e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   1372e:	a897      	add	r0, sp, #604	; 0x25c
   13730:	9094      	str	r0, [sp, #592]	; 0x250
   13732:	a898      	add	r0, sp, #608	; 0x260
   13734:	9095      	str	r0, [sp, #596]	; 0x254
   13736:	a899      	add	r0, sp, #612	; 0x264
   13738:	9096      	str	r0, [sp, #600]	; 0x258
   1373a:	9894      	ldr	r0, [sp, #592]	; 0x250
   1373c:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   13740:	9995      	ldr	r1, [sp, #596]	; 0x254
   13742:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   13746:	9a96      	ldr	r2, [sp, #600]	; 0x258
   13748:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   1374c:	f249 33f3 	movw	r3, #37875	; 0x93f3
   13750:	f2c0 0300 	movt	r3, #0
   13754:	9158      	str	r1, [sp, #352]	; 0x160
   13756:	4619      	mov	r1, r3
   13758:	9257      	str	r2, [sp, #348]	; 0x15c
   1375a:	f7f5 fe82 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1375e:	9056      	str	r0, [sp, #344]	; 0x158
   13760:	9155      	str	r1, [sp, #340]	; 0x154
   13762:	e7ff      	b.n	13764 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   13764:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13768:	f2c0 0100 	movt	r1, #0
   1376c:	9858      	ldr	r0, [sp, #352]	; 0x160
   1376e:	f7f5 fe78 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13772:	9054      	str	r0, [sp, #336]	; 0x150
   13774:	9153      	str	r1, [sp, #332]	; 0x14c
   13776:	e7ff      	b.n	13778 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   13778:	f648 21ff 	movw	r1, #35583	; 0x8aff
   1377c:	f2c0 0101 	movt	r1, #1
   13780:	9857      	ldr	r0, [sp, #348]	; 0x15c
   13782:	f7f5 fead 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13786:	9052      	str	r0, [sp, #328]	; 0x148
   13788:	9151      	str	r1, [sp, #324]	; 0x144
   1378a:	e7ff      	b.n	1378c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   1378c:	9856      	ldr	r0, [sp, #344]	; 0x158
   1378e:	908e      	str	r0, [sp, #568]	; 0x238
   13790:	9955      	ldr	r1, [sp, #340]	; 0x154
   13792:	918f      	str	r1, [sp, #572]	; 0x23c
   13794:	9a54      	ldr	r2, [sp, #336]	; 0x150
   13796:	9290      	str	r2, [sp, #576]	; 0x240
   13798:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   1379a:	9391      	str	r3, [sp, #580]	; 0x244
   1379c:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   137a0:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   137a4:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   137a8:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   137ac:	466c      	mov	r4, sp
   137ae:	2503      	movs	r5, #3
   137b0:	6025      	str	r5, [r4, #0]
   137b2:	a888      	add	r0, sp, #544	; 0x220
   137b4:	ab8e      	add	r3, sp, #568	; 0x238
   137b6:	9959      	ldr	r1, [sp, #356]	; 0x164
   137b8:	462a      	mov	r2, r5
   137ba:	f7f5 f9f3 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   137be:	e7ff      	b.n	137c0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   137c0:	f247 4074 	movw	r0, #29812	; 0x7474
   137c4:	f2c0 0002 	movt	r0, #2
   137c8:	f004 feab 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   137cc:	9050      	str	r0, [sp, #320]	; 0x140
   137ce:	e7ff      	b.n	137d0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   137d0:	a888      	add	r0, sp, #544	; 0x220
   137d2:	9950      	ldr	r1, [sp, #320]	; 0x140
   137d4:	f004 fee2 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   137d8:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   137da:	f247 30b8 	movw	r0, #29624	; 0x73b8
   137de:	f2c0 0002 	movt	r0, #2
   137e2:	6800      	ldr	r0, [r0, #0]
   137e4:	a99f      	add	r1, sp, #636	; 0x27c
   137e6:	91a0      	str	r1, [sp, #640]	; 0x280
   137e8:	90a1      	str	r0, [sp, #644]	; 0x284
   137ea:	98a0      	ldr	r0, [sp, #640]	; 0x280
   137ec:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   137f0:	99a1      	ldr	r1, [sp, #644]	; 0x284
   137f2:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   137f6:	6802      	ldr	r2, [r0, #0]
   137f8:	680b      	ldr	r3, [r1, #0]
   137fa:	429a      	cmp	r2, r3
   137fc:	904f      	str	r0, [sp, #316]	; 0x13c
   137fe:	914e      	str	r1, [sp, #312]	; 0x138
   13800:	d106      	bne.n	13810 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   13802:	e7ff      	b.n	13804 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   13804:	2019      	movs	r0, #25
   13806:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13808:	f006 ffe4 	bl	1a7d4 <hal_gpio_init_out>
   1380c:	90b9      	str	r0, [sp, #740]	; 0x2e4
   1380e:	e075      	b.n	138fc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   13810:	f247 4010 	movw	r0, #29712	; 0x7410
   13814:	f2c0 0002 	movt	r0, #2
   13818:	6801      	ldr	r1, [r0, #0]
   1381a:	984f      	ldr	r0, [sp, #316]	; 0x13c
   1381c:	90b1      	str	r0, [sp, #708]	; 0x2c4
   1381e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   13820:	92b2      	str	r2, [sp, #712]	; 0x2c8
   13822:	f247 439c 	movw	r3, #29852	; 0x749c
   13826:	f2c0 0302 	movt	r3, #2
   1382a:	681b      	ldr	r3, [r3, #0]
   1382c:	f247 4c30 	movw	ip, #29744	; 0x7430
   13830:	f2c0 0c02 	movt	ip, #2
   13834:	f8dc c000 	ldr.w	ip, [ip]
   13838:	46ee      	mov	lr, sp
   1383a:	2400      	movs	r4, #0
   1383c:	f8ce 4000 	str.w	r4, [lr]
   13840:	a8b3      	add	r0, sp, #716	; 0x2cc
   13842:	2201      	movs	r2, #1
   13844:	914d      	str	r1, [sp, #308]	; 0x134
   13846:	4619      	mov	r1, r3
   13848:	4663      	mov	r3, ip
   1384a:	f7f5 f9ab 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1384e:	e7ff      	b.n	13850 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   13850:	a8b1      	add	r0, sp, #708	; 0x2c4
   13852:	90ae      	str	r0, [sp, #696]	; 0x2b8
   13854:	a8b2      	add	r0, sp, #712	; 0x2c8
   13856:	90af      	str	r0, [sp, #700]	; 0x2bc
   13858:	a8b3      	add	r0, sp, #716	; 0x2cc
   1385a:	90b0      	str	r0, [sp, #704]	; 0x2c0
   1385c:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   1385e:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   13862:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   13864:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   13868:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   1386a:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   1386e:	f249 33f3 	movw	r3, #37875	; 0x93f3
   13872:	f2c0 0300 	movt	r3, #0
   13876:	914c      	str	r1, [sp, #304]	; 0x130
   13878:	4619      	mov	r1, r3
   1387a:	924b      	str	r2, [sp, #300]	; 0x12c
   1387c:	f7f5 fdf1 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13880:	904a      	str	r0, [sp, #296]	; 0x128
   13882:	9149      	str	r1, [sp, #292]	; 0x124
   13884:	e7ff      	b.n	13886 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   13886:	f249 31f3 	movw	r1, #37875	; 0x93f3
   1388a:	f2c0 0100 	movt	r1, #0
   1388e:	984c      	ldr	r0, [sp, #304]	; 0x130
   13890:	f7f5 fde7 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13894:	9048      	str	r0, [sp, #288]	; 0x120
   13896:	9147      	str	r1, [sp, #284]	; 0x11c
   13898:	e7ff      	b.n	1389a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   1389a:	f648 21ff 	movw	r1, #35583	; 0x8aff
   1389e:	f2c0 0101 	movt	r1, #1
   138a2:	984b      	ldr	r0, [sp, #300]	; 0x12c
   138a4:	f7f5 fe1c 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   138a8:	9046      	str	r0, [sp, #280]	; 0x118
   138aa:	9145      	str	r1, [sp, #276]	; 0x114
   138ac:	e7ff      	b.n	138ae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   138ae:	984a      	ldr	r0, [sp, #296]	; 0x128
   138b0:	90a8      	str	r0, [sp, #672]	; 0x2a0
   138b2:	9949      	ldr	r1, [sp, #292]	; 0x124
   138b4:	91a9      	str	r1, [sp, #676]	; 0x2a4
   138b6:	9a48      	ldr	r2, [sp, #288]	; 0x120
   138b8:	92aa      	str	r2, [sp, #680]	; 0x2a8
   138ba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   138bc:	93ab      	str	r3, [sp, #684]	; 0x2ac
   138be:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   138c2:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   138c6:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   138ca:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   138ce:	466c      	mov	r4, sp
   138d0:	2503      	movs	r5, #3
   138d2:	6025      	str	r5, [r4, #0]
   138d4:	a8a2      	add	r0, sp, #648	; 0x288
   138d6:	aba8      	add	r3, sp, #672	; 0x2a0
   138d8:	994d      	ldr	r1, [sp, #308]	; 0x134
   138da:	462a      	mov	r2, r5
   138dc:	f7f5 f962 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   138e0:	e7ff      	b.n	138e2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   138e2:	f247 40a0 	movw	r0, #29856	; 0x74a0
   138e6:	f2c0 0002 	movt	r0, #2
   138ea:	f004 fe1a 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   138ee:	9044      	str	r0, [sp, #272]	; 0x110
   138f0:	e7ff      	b.n	138f2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   138f2:	a8a2      	add	r0, sp, #648	; 0x288
   138f4:	9944      	ldr	r1, [sp, #272]	; 0x110
   138f6:	f004 fe51 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   138fa:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   138fc:	f247 30b8 	movw	r0, #29624	; 0x73b8
   13900:	f2c0 0002 	movt	r0, #2
   13904:	6800      	ldr	r0, [r0, #0]
   13906:	a9b9      	add	r1, sp, #740	; 0x2e4
   13908:	91ba      	str	r1, [sp, #744]	; 0x2e8
   1390a:	90bb      	str	r0, [sp, #748]	; 0x2ec
   1390c:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   1390e:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   13912:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   13914:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   13918:	6802      	ldr	r2, [r0, #0]
   1391a:	680b      	ldr	r3, [r1, #0]
   1391c:	429a      	cmp	r2, r3
   1391e:	9043      	str	r0, [sp, #268]	; 0x10c
   13920:	9142      	str	r1, [sp, #264]	; 0x108
   13922:	d106      	bne.n	13932 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   13924:	e7ff      	b.n	13926 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   13926:	2012      	movs	r0, #18
   13928:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1392a:	f006 ff53 	bl	1a7d4 <hal_gpio_init_out>
   1392e:	90d3      	str	r0, [sp, #844]	; 0x34c
   13930:	e075      	b.n	13a1e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13932:	f247 4010 	movw	r0, #29712	; 0x7410
   13936:	f2c0 0002 	movt	r0, #2
   1393a:	6801      	ldr	r1, [r0, #0]
   1393c:	9843      	ldr	r0, [sp, #268]	; 0x10c
   1393e:	90cb      	str	r0, [sp, #812]	; 0x32c
   13940:	9a42      	ldr	r2, [sp, #264]	; 0x108
   13942:	92cc      	str	r2, [sp, #816]	; 0x330
   13944:	f247 43c4 	movw	r3, #29892	; 0x74c4
   13948:	f2c0 0302 	movt	r3, #2
   1394c:	681b      	ldr	r3, [r3, #0]
   1394e:	f247 4c30 	movw	ip, #29744	; 0x7430
   13952:	f2c0 0c02 	movt	ip, #2
   13956:	f8dc c000 	ldr.w	ip, [ip]
   1395a:	46ee      	mov	lr, sp
   1395c:	2400      	movs	r4, #0
   1395e:	f8ce 4000 	str.w	r4, [lr]
   13962:	a8cd      	add	r0, sp, #820	; 0x334
   13964:	2201      	movs	r2, #1
   13966:	9141      	str	r1, [sp, #260]	; 0x104
   13968:	4619      	mov	r1, r3
   1396a:	4663      	mov	r3, ip
   1396c:	f7f5 f91a 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13970:	e7ff      	b.n	13972 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   13972:	a8cb      	add	r0, sp, #812	; 0x32c
   13974:	90c8      	str	r0, [sp, #800]	; 0x320
   13976:	a8cc      	add	r0, sp, #816	; 0x330
   13978:	90c9      	str	r0, [sp, #804]	; 0x324
   1397a:	a8cd      	add	r0, sp, #820	; 0x334
   1397c:	90ca      	str	r0, [sp, #808]	; 0x328
   1397e:	98c8      	ldr	r0, [sp, #800]	; 0x320
   13980:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   13984:	99c9      	ldr	r1, [sp, #804]	; 0x324
   13986:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   1398a:	9aca      	ldr	r2, [sp, #808]	; 0x328
   1398c:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   13990:	f249 33f3 	movw	r3, #37875	; 0x93f3
   13994:	f2c0 0300 	movt	r3, #0
   13998:	9140      	str	r1, [sp, #256]	; 0x100
   1399a:	4619      	mov	r1, r3
   1399c:	923f      	str	r2, [sp, #252]	; 0xfc
   1399e:	f7f5 fd60 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   139a2:	903e      	str	r0, [sp, #248]	; 0xf8
   139a4:	913d      	str	r1, [sp, #244]	; 0xf4
   139a6:	e7ff      	b.n	139a8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   139a8:	f249 31f3 	movw	r1, #37875	; 0x93f3
   139ac:	f2c0 0100 	movt	r1, #0
   139b0:	9840      	ldr	r0, [sp, #256]	; 0x100
   139b2:	f7f5 fd56 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   139b6:	903c      	str	r0, [sp, #240]	; 0xf0
   139b8:	913b      	str	r1, [sp, #236]	; 0xec
   139ba:	e7ff      	b.n	139bc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   139bc:	f648 21ff 	movw	r1, #35583	; 0x8aff
   139c0:	f2c0 0101 	movt	r1, #1
   139c4:	983f      	ldr	r0, [sp, #252]	; 0xfc
   139c6:	f7f5 fd8b 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   139ca:	903a      	str	r0, [sp, #232]	; 0xe8
   139cc:	9139      	str	r1, [sp, #228]	; 0xe4
   139ce:	e7ff      	b.n	139d0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   139d0:	983e      	ldr	r0, [sp, #248]	; 0xf8
   139d2:	90c2      	str	r0, [sp, #776]	; 0x308
   139d4:	993d      	ldr	r1, [sp, #244]	; 0xf4
   139d6:	91c3      	str	r1, [sp, #780]	; 0x30c
   139d8:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   139da:	92c4      	str	r2, [sp, #784]	; 0x310
   139dc:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   139de:	93c5      	str	r3, [sp, #788]	; 0x314
   139e0:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   139e4:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   139e8:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   139ec:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   139f0:	466c      	mov	r4, sp
   139f2:	2503      	movs	r5, #3
   139f4:	6025      	str	r5, [r4, #0]
   139f6:	a8bc      	add	r0, sp, #752	; 0x2f0
   139f8:	abc2      	add	r3, sp, #776	; 0x308
   139fa:	9941      	ldr	r1, [sp, #260]	; 0x104
   139fc:	462a      	mov	r2, r5
   139fe:	f7f5 f8d1 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13a02:	e7ff      	b.n	13a04 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   13a04:	f247 40c8 	movw	r0, #29896	; 0x74c8
   13a08:	f2c0 0002 	movt	r0, #2
   13a0c:	f004 fd89 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13a10:	9038      	str	r0, [sp, #224]	; 0xe0
   13a12:	e7ff      	b.n	13a14 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   13a14:	a8bc      	add	r0, sp, #752	; 0x2f0
   13a16:	9938      	ldr	r1, [sp, #224]	; 0xe0
   13a18:	f004 fdc0 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13a1c:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13a1e:	f247 30b8 	movw	r0, #29624	; 0x73b8
   13a22:	f2c0 0002 	movt	r0, #2
   13a26:	6800      	ldr	r0, [r0, #0]
   13a28:	a9d3      	add	r1, sp, #844	; 0x34c
   13a2a:	91d4      	str	r1, [sp, #848]	; 0x350
   13a2c:	90d5      	str	r0, [sp, #852]	; 0x354
   13a2e:	98d4      	ldr	r0, [sp, #848]	; 0x350
   13a30:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   13a34:	99d5      	ldr	r1, [sp, #852]	; 0x354
   13a36:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   13a3a:	6802      	ldr	r2, [r0, #0]
   13a3c:	680b      	ldr	r3, [r1, #0]
   13a3e:	429a      	cmp	r2, r3
   13a40:	9037      	str	r0, [sp, #220]	; 0xdc
   13a42:	9136      	str	r1, [sp, #216]	; 0xd8
   13a44:	d107      	bne.n	13a56 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   13a46:	e7ff      	b.n	13a48 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   13a48:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   13a4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13a50:	f007 ffca 	bl	1b9e8 <os_eventq_init>
   13a54:	e075      	b.n	13b42 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13a56:	f247 4010 	movw	r0, #29712	; 0x7410
   13a5a:	f2c0 0002 	movt	r0, #2
   13a5e:	6801      	ldr	r1, [r0, #0]
   13a60:	9837      	ldr	r0, [sp, #220]	; 0xdc
   13a62:	90e5      	str	r0, [sp, #916]	; 0x394
   13a64:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   13a66:	92e6      	str	r2, [sp, #920]	; 0x398
   13a68:	f247 43c4 	movw	r3, #29892	; 0x74c4
   13a6c:	f2c0 0302 	movt	r3, #2
   13a70:	681b      	ldr	r3, [r3, #0]
   13a72:	f247 4c30 	movw	ip, #29744	; 0x7430
   13a76:	f2c0 0c02 	movt	ip, #2
   13a7a:	f8dc c000 	ldr.w	ip, [ip]
   13a7e:	46ee      	mov	lr, sp
   13a80:	2400      	movs	r4, #0
   13a82:	f8ce 4000 	str.w	r4, [lr]
   13a86:	a8e7      	add	r0, sp, #924	; 0x39c
   13a88:	2201      	movs	r2, #1
   13a8a:	9135      	str	r1, [sp, #212]	; 0xd4
   13a8c:	4619      	mov	r1, r3
   13a8e:	4663      	mov	r3, ip
   13a90:	f7f5 f888 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13a94:	e7ff      	b.n	13a96 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   13a96:	a8e5      	add	r0, sp, #916	; 0x394
   13a98:	90e2      	str	r0, [sp, #904]	; 0x388
   13a9a:	a8e6      	add	r0, sp, #920	; 0x398
   13a9c:	90e3      	str	r0, [sp, #908]	; 0x38c
   13a9e:	a8e7      	add	r0, sp, #924	; 0x39c
   13aa0:	90e4      	str	r0, [sp, #912]	; 0x390
   13aa2:	98e2      	ldr	r0, [sp, #904]	; 0x388
   13aa4:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   13aa8:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   13aaa:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   13aae:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   13ab0:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   13ab4:	f249 33f3 	movw	r3, #37875	; 0x93f3
   13ab8:	f2c0 0300 	movt	r3, #0
   13abc:	9134      	str	r1, [sp, #208]	; 0xd0
   13abe:	4619      	mov	r1, r3
   13ac0:	9233      	str	r2, [sp, #204]	; 0xcc
   13ac2:	f7f5 fcce 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13ac6:	9032      	str	r0, [sp, #200]	; 0xc8
   13ac8:	9131      	str	r1, [sp, #196]	; 0xc4
   13aca:	e7ff      	b.n	13acc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   13acc:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13ad0:	f2c0 0100 	movt	r1, #0
   13ad4:	9834      	ldr	r0, [sp, #208]	; 0xd0
   13ad6:	f7f5 fcc4 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13ada:	9030      	str	r0, [sp, #192]	; 0xc0
   13adc:	912f      	str	r1, [sp, #188]	; 0xbc
   13ade:	e7ff      	b.n	13ae0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   13ae0:	f648 21ff 	movw	r1, #35583	; 0x8aff
   13ae4:	f2c0 0101 	movt	r1, #1
   13ae8:	9833      	ldr	r0, [sp, #204]	; 0xcc
   13aea:	f7f5 fcf9 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13aee:	902e      	str	r0, [sp, #184]	; 0xb8
   13af0:	912d      	str	r1, [sp, #180]	; 0xb4
   13af2:	e7ff      	b.n	13af4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   13af4:	9832      	ldr	r0, [sp, #200]	; 0xc8
   13af6:	90dc      	str	r0, [sp, #880]	; 0x370
   13af8:	9931      	ldr	r1, [sp, #196]	; 0xc4
   13afa:	91dd      	str	r1, [sp, #884]	; 0x374
   13afc:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   13afe:	92de      	str	r2, [sp, #888]	; 0x378
   13b00:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   13b02:	93df      	str	r3, [sp, #892]	; 0x37c
   13b04:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   13b08:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   13b0c:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   13b10:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   13b14:	466c      	mov	r4, sp
   13b16:	2503      	movs	r5, #3
   13b18:	6025      	str	r5, [r4, #0]
   13b1a:	a8d6      	add	r0, sp, #856	; 0x358
   13b1c:	abdc      	add	r3, sp, #880	; 0x370
   13b1e:	9935      	ldr	r1, [sp, #212]	; 0xd4
   13b20:	462a      	mov	r2, r5
   13b22:	f7f5 f83f 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b26:	e7ff      	b.n	13b28 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   13b28:	f247 40d8 	movw	r0, #29912	; 0x74d8
   13b2c:	f2c0 0002 	movt	r0, #2
   13b30:	f004 fcf7 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13b34:	902c      	str	r0, [sp, #176]	; 0xb0
   13b36:	e7ff      	b.n	13b38 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   13b38:	a8d6      	add	r0, sp, #856	; 0x358
   13b3a:	992c      	ldr	r1, [sp, #176]	; 0xb0
   13b3c:	f004 fd2e 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13b40:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   13b42:	f244 40d1 	movw	r0, #17617	; 0x44d1
   13b46:	f2c0 0001 	movt	r0, #1
   13b4a:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   13b4c:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   13b4e:	f646 208c 	movw	r0, #27276	; 0x6a8c
   13b52:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13b56:	2200      	movs	r2, #0
   13b58:	f007 fff4 	bl	1bb44 <os_mqueue_init>
   13b5c:	90ed      	str	r0, [sp, #948]	; 0x3b4
   13b5e:	e7ff      	b.n	13b60 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   13b60:	f247 30b8 	movw	r0, #29624	; 0x73b8
   13b64:	f2c0 0002 	movt	r0, #2
   13b68:	6800      	ldr	r0, [r0, #0]
   13b6a:	a9ed      	add	r1, sp, #948	; 0x3b4
   13b6c:	91ef      	str	r1, [sp, #956]	; 0x3bc
   13b6e:	90f0      	str	r0, [sp, #960]	; 0x3c0
   13b70:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   13b72:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   13b76:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   13b78:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   13b7c:	6802      	ldr	r2, [r0, #0]
   13b7e:	680b      	ldr	r3, [r1, #0]
   13b80:	429a      	cmp	r2, r3
   13b82:	902b      	str	r0, [sp, #172]	; 0xac
   13b84:	912a      	str	r1, [sp, #168]	; 0xa8
   13b86:	d10a      	bne.n	13b9e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   13b88:	e7ff      	b.n	13b8a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   13b8a:	f646 207c 	movw	r0, #27260	; 0x6a7c
   13b8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13b92:	2100      	movs	r1, #0
   13b94:	f008 fcd0 	bl	1c538 <os_sem_init>
   13b98:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   13b9c:	e07b      	b.n	13c96 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   13b9e:	f247 4010 	movw	r0, #29712	; 0x7410
   13ba2:	f2c0 0002 	movt	r0, #2
   13ba6:	6801      	ldr	r1, [r0, #0]
   13ba8:	982b      	ldr	r0, [sp, #172]	; 0xac
   13baa:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   13bae:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   13bb0:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   13bb4:	f247 43fc 	movw	r3, #29948	; 0x74fc
   13bb8:	f2c0 0302 	movt	r3, #2
   13bbc:	681b      	ldr	r3, [r3, #0]
   13bbe:	f247 4c30 	movw	ip, #29744	; 0x7430
   13bc2:	f2c0 0c02 	movt	ip, #2
   13bc6:	f8dc c000 	ldr.w	ip, [ip]
   13bca:	46ee      	mov	lr, sp
   13bcc:	2400      	movs	r4, #0
   13bce:	f8ce 4000 	str.w	r4, [lr]
   13bd2:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   13bd6:	2201      	movs	r2, #1
   13bd8:	9129      	str	r1, [sp, #164]	; 0xa4
   13bda:	4619      	mov	r1, r3
   13bdc:	4663      	mov	r3, ip
   13bde:	f7f4 ffe1 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13be2:	e7ff      	b.n	13be4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   13be4:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   13be8:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   13bea:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   13bee:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   13bf0:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   13bf4:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   13bf6:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   13bf8:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   13bfc:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   13bfe:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   13c02:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   13c04:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   13c08:	f249 33f3 	movw	r3, #37875	; 0x93f3
   13c0c:	f2c0 0300 	movt	r3, #0
   13c10:	9128      	str	r1, [sp, #160]	; 0xa0
   13c12:	4619      	mov	r1, r3
   13c14:	9227      	str	r2, [sp, #156]	; 0x9c
   13c16:	f7f5 fc24 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13c1a:	9026      	str	r0, [sp, #152]	; 0x98
   13c1c:	9125      	str	r1, [sp, #148]	; 0x94
   13c1e:	e7ff      	b.n	13c20 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   13c20:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13c24:	f2c0 0100 	movt	r1, #0
   13c28:	9828      	ldr	r0, [sp, #160]	; 0xa0
   13c2a:	f7f5 fc1a 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13c2e:	9024      	str	r0, [sp, #144]	; 0x90
   13c30:	9123      	str	r1, [sp, #140]	; 0x8c
   13c32:	e7ff      	b.n	13c34 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   13c34:	f648 21ff 	movw	r1, #35583	; 0x8aff
   13c38:	f2c0 0101 	movt	r1, #1
   13c3c:	9827      	ldr	r0, [sp, #156]	; 0x9c
   13c3e:	f7f5 fc4f 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13c42:	9022      	str	r0, [sp, #136]	; 0x88
   13c44:	9121      	str	r1, [sp, #132]	; 0x84
   13c46:	e7ff      	b.n	13c48 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   13c48:	9826      	ldr	r0, [sp, #152]	; 0x98
   13c4a:	90f7      	str	r0, [sp, #988]	; 0x3dc
   13c4c:	9925      	ldr	r1, [sp, #148]	; 0x94
   13c4e:	91f8      	str	r1, [sp, #992]	; 0x3e0
   13c50:	9a24      	ldr	r2, [sp, #144]	; 0x90
   13c52:	92f9      	str	r2, [sp, #996]	; 0x3e4
   13c54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13c56:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   13c58:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   13c5c:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   13c60:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   13c64:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   13c68:	466c      	mov	r4, sp
   13c6a:	2503      	movs	r5, #3
   13c6c:	6025      	str	r5, [r4, #0]
   13c6e:	a8f1      	add	r0, sp, #964	; 0x3c4
   13c70:	abf7      	add	r3, sp, #988	; 0x3dc
   13c72:	9929      	ldr	r1, [sp, #164]	; 0xa4
   13c74:	462a      	mov	r2, r5
   13c76:	f7f4 ff95 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13c7a:	e7ff      	b.n	13c7c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   13c7c:	f247 5000 	movw	r0, #29952	; 0x7500
   13c80:	f2c0 0002 	movt	r0, #2
   13c84:	f004 fc4d 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13c88:	9020      	str	r0, [sp, #128]	; 0x80
   13c8a:	e7ff      	b.n	13c8c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   13c8c:	a8f1      	add	r0, sp, #964	; 0x3c4
   13c8e:	9920      	ldr	r1, [sp, #128]	; 0x80
   13c90:	f004 fc84 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13c94:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13c96:	f247 30b8 	movw	r0, #29624	; 0x73b8
   13c9a:	f2c0 0002 	movt	r0, #2
   13c9e:	6800      	ldr	r0, [r0, #0]
   13ca0:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   13ca4:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   13ca8:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   13cac:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   13cb0:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   13cb4:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   13cb8:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   13cbc:	6802      	ldr	r2, [r0, #0]
   13cbe:	680b      	ldr	r3, [r1, #0]
   13cc0:	429a      	cmp	r2, r3
   13cc2:	901f      	str	r0, [sp, #124]	; 0x7c
   13cc4:	911e      	str	r1, [sp, #120]	; 0x78
   13cc6:	d10a      	bne.n	13cde <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   13cc8:	e7ff      	b.n	13cca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   13cca:	f646 2084 	movw	r0, #27268	; 0x6a84
   13cce:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13cd2:	2102      	movs	r1, #2
   13cd4:	f008 fc30 	bl	1c538 <os_sem_init>
   13cd8:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   13cdc:	e088      	b.n	13df0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13cde:	f247 4010 	movw	r0, #29712	; 0x7410
   13ce2:	f2c0 0002 	movt	r0, #2
   13ce6:	6801      	ldr	r1, [r0, #0]
   13ce8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13cea:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   13cee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13cf0:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   13cf4:	f247 5328 	movw	r3, #29992	; 0x7528
   13cf8:	f2c0 0302 	movt	r3, #2
   13cfc:	681b      	ldr	r3, [r3, #0]
   13cfe:	f247 4c30 	movw	ip, #29744	; 0x7430
   13d02:	f2c0 0c02 	movt	ip, #2
   13d06:	f8dc c000 	ldr.w	ip, [ip]
   13d0a:	46ee      	mov	lr, sp
   13d0c:	2400      	movs	r4, #0
   13d0e:	f8ce 4000 	str.w	r4, [lr]
   13d12:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   13d16:	2201      	movs	r2, #1
   13d18:	911d      	str	r1, [sp, #116]	; 0x74
   13d1a:	4619      	mov	r1, r3
   13d1c:	4663      	mov	r3, ip
   13d1e:	f7f4 ff41 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13d22:	e7ff      	b.n	13d24 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   13d24:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   13d28:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   13d2c:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   13d30:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   13d34:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   13d38:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   13d3c:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   13d40:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   13d44:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   13d48:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   13d4c:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   13d50:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   13d54:	f249 4347 	movw	r3, #37959	; 0x9447
   13d58:	f2c0 0300 	movt	r3, #0
   13d5c:	911c      	str	r1, [sp, #112]	; 0x70
   13d5e:	4619      	mov	r1, r3
   13d60:	921b      	str	r2, [sp, #108]	; 0x6c
   13d62:	f7f5 fba8 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13d66:	901a      	str	r0, [sp, #104]	; 0x68
   13d68:	9119      	str	r1, [sp, #100]	; 0x64
   13d6a:	e7ff      	b.n	13d6c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   13d6c:	f249 4147 	movw	r1, #37959	; 0x9447
   13d70:	f2c0 0100 	movt	r1, #0
   13d74:	981c      	ldr	r0, [sp, #112]	; 0x70
   13d76:	f7f5 fb9e 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13d7a:	9018      	str	r0, [sp, #96]	; 0x60
   13d7c:	9117      	str	r1, [sp, #92]	; 0x5c
   13d7e:	e7ff      	b.n	13d80 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   13d80:	f648 21ff 	movw	r1, #35583	; 0x8aff
   13d84:	f2c0 0101 	movt	r1, #1
   13d88:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13d8a:	f7f5 fba9 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13d8e:	9016      	str	r0, [sp, #88]	; 0x58
   13d90:	9115      	str	r1, [sp, #84]	; 0x54
   13d92:	e7ff      	b.n	13d94 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   13d94:	981a      	ldr	r0, [sp, #104]	; 0x68
   13d96:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   13d9a:	9919      	ldr	r1, [sp, #100]	; 0x64
   13d9c:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   13da0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13da2:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   13da6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13da8:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   13dac:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   13db0:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   13db4:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   13db8:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   13dbc:	466c      	mov	r4, sp
   13dbe:	2503      	movs	r5, #3
   13dc0:	6025      	str	r5, [r4, #0]
   13dc2:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13dc6:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   13dca:	991d      	ldr	r1, [sp, #116]	; 0x74
   13dcc:	462a      	mov	r2, r5
   13dce:	f7f4 fee9 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13dd2:	e7ff      	b.n	13dd4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   13dd4:	f247 502c 	movw	r0, #29996	; 0x752c
   13dd8:	f2c0 0002 	movt	r0, #2
   13ddc:	f004 fba1 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13de0:	9014      	str	r0, [sp, #80]	; 0x50
   13de2:	e7ff      	b.n	13de4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   13de4:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13de8:	9914      	ldr	r1, [sp, #80]	; 0x50
   13dea:	f004 fbd7 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13dee:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13df0:	f247 30b8 	movw	r0, #29624	; 0x73b8
   13df4:	f2c0 0002 	movt	r0, #2
   13df8:	6800      	ldr	r0, [r0, #0]
   13dfa:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   13dfe:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   13e02:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   13e06:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   13e0a:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   13e0e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   13e12:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   13e16:	6802      	ldr	r2, [r0, #0]
   13e18:	680b      	ldr	r3, [r1, #0]
   13e1a:	429a      	cmp	r2, r3
   13e1c:	9013      	str	r0, [sp, #76]	; 0x4c
   13e1e:	9112      	str	r1, [sp, #72]	; 0x48
   13e20:	d125      	bne.n	13e6e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   13e22:	e7ff      	b.n	13e24 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   13e24:	f247 5058 	movw	r0, #30040	; 0x7558
   13e28:	f2c0 0002 	movt	r0, #2
   13e2c:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   13e2e:	f643 70cf 	movw	r0, #16335	; 0x3fcf
   13e32:	f2c0 0001 	movt	r0, #1
   13e36:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   13e3a:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   13e3e:	4668      	mov	r0, sp
   13e40:	f44f 7380 	mov.w	r3, #256	; 0x100
   13e44:	6103      	str	r3, [r0, #16]
   13e46:	60c3      	str	r3, [r0, #12]
   13e48:	f646 3304 	movw	r3, #27396	; 0x6b04
   13e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e50:	6083      	str	r3, [r0, #8]
   13e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13e56:	6043      	str	r3, [r0, #4]
   13e58:	230a      	movs	r3, #10
   13e5a:	6003      	str	r3, [r0, #0]
   13e5c:	f646 20b4 	movw	r0, #27316	; 0x6ab4
   13e60:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13e64:	2300      	movs	r3, #0
   13e66:	f7f4 ff97 	bl	8d98 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   13e6a:	9011      	str	r0, [sp, #68]	; 0x44
   13e6c:	e088      	b.n	13f80 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13e6e:	f247 4010 	movw	r0, #29712	; 0x7410
   13e72:	f2c0 0002 	movt	r0, #2
   13e76:	6801      	ldr	r1, [r0, #0]
   13e78:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13e7a:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   13e7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13e80:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   13e84:	f247 5328 	movw	r3, #29992	; 0x7528
   13e88:	f2c0 0302 	movt	r3, #2
   13e8c:	681b      	ldr	r3, [r3, #0]
   13e8e:	f247 4c30 	movw	ip, #29744	; 0x7430
   13e92:	f2c0 0c02 	movt	ip, #2
   13e96:	f8dc c000 	ldr.w	ip, [ip]
   13e9a:	46ee      	mov	lr, sp
   13e9c:	2400      	movs	r4, #0
   13e9e:	f8ce 4000 	str.w	r4, [lr]
   13ea2:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13ea6:	2201      	movs	r2, #1
   13ea8:	9110      	str	r1, [sp, #64]	; 0x40
   13eaa:	4619      	mov	r1, r3
   13eac:	4663      	mov	r3, ip
   13eae:	f7f4 fe79 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13eb2:	e7ff      	b.n	13eb4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   13eb4:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   13eb8:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   13ebc:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   13ec0:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   13ec4:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13ec8:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   13ecc:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   13ed0:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   13ed4:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   13ed8:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   13edc:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   13ee0:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   13ee4:	f249 4347 	movw	r3, #37959	; 0x9447
   13ee8:	f2c0 0300 	movt	r3, #0
   13eec:	910f      	str	r1, [sp, #60]	; 0x3c
   13eee:	4619      	mov	r1, r3
   13ef0:	920e      	str	r2, [sp, #56]	; 0x38
   13ef2:	f7f5 fae0 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13ef6:	900d      	str	r0, [sp, #52]	; 0x34
   13ef8:	910c      	str	r1, [sp, #48]	; 0x30
   13efa:	e7ff      	b.n	13efc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   13efc:	f249 4147 	movw	r1, #37959	; 0x9447
   13f00:	f2c0 0100 	movt	r1, #0
   13f04:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13f06:	f7f5 fad6 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13f0a:	900b      	str	r0, [sp, #44]	; 0x2c
   13f0c:	910a      	str	r1, [sp, #40]	; 0x28
   13f0e:	e7ff      	b.n	13f10 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   13f10:	f648 21ff 	movw	r1, #35583	; 0x8aff
   13f14:	f2c0 0101 	movt	r1, #1
   13f18:	980e      	ldr	r0, [sp, #56]	; 0x38
   13f1a:	f7f5 fae1 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13f1e:	9009      	str	r0, [sp, #36]	; 0x24
   13f20:	9108      	str	r1, [sp, #32]
   13f22:	e7ff      	b.n	13f24 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   13f24:	980d      	ldr	r0, [sp, #52]	; 0x34
   13f26:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   13f2a:	990c      	ldr	r1, [sp, #48]	; 0x30
   13f2c:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   13f30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13f32:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   13f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f38:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   13f3c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   13f40:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   13f44:	f8dd e020 	ldr.w	lr, [sp, #32]
   13f48:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   13f4c:	466c      	mov	r4, sp
   13f4e:	2503      	movs	r5, #3
   13f50:	6025      	str	r5, [r4, #0]
   13f52:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13f56:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   13f5a:	9910      	ldr	r1, [sp, #64]	; 0x40
   13f5c:	462a      	mov	r2, r5
   13f5e:	f7f4 fe21 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13f62:	e7ff      	b.n	13f64 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   13f64:	f247 503c 	movw	r0, #30012	; 0x753c
   13f68:	f2c0 0002 	movt	r0, #2
   13f6c:	f004 fad9 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13f70:	9007      	str	r0, [sp, #28]
   13f72:	e7ff      	b.n	13f74 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   13f74:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13f78:	9907      	ldr	r1, [sp, #28]
   13f7a:	f004 fb0f 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13f7e:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   13f80:	9811      	ldr	r0, [sp, #68]	; 0x44
   13f82:	f7f4 fe7d 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   13f86:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   13f8a:	e7ff      	b.n	13f8c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   13f8c:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   13f90:	1e41      	subs	r1, r0, #1
   13f92:	bf18      	it	ne
   13f94:	2101      	movne	r1, #1
   13f96:	2801      	cmp	r0, #1
   13f98:	d001      	beq.n	13f9e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   13f9a:	e7ff      	b.n	13f9c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   13f9c:	e005      	b.n	13faa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   13f9e:	2000      	movs	r0, #0
    Ok(())
   13fa0:	9069      	str	r0, [sp, #420]	; 0x1a4
   13fa2:	2001      	movs	r0, #1
   13fa4:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   13fa6:	e008      	b.n	13fba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   13fa8:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   13faa:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   13fae:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   13fb2:	f7ff fa17 	bl	133e4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13fb6:	9006      	str	r0, [sp, #24]
   13fb8:	e003      	b.n	13fc2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   13fba:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   13fbc:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   13fc0:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   13fc2:	9806      	ldr	r0, [sp, #24]
   13fc4:	f7f4 fe50 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13fc8:	9069      	str	r0, [sp, #420]	; 0x1a4
   13fca:	e7ff      	b.n	13fcc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   13fcc:	e7f5      	b.n	13fba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

00013fce <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   13fce:	b580      	push	{r7, lr}
   13fd0:	b082      	sub	sp, #8
   13fd2:	9001      	str	r0, [sp, #4]
    loop {
   13fd4:	e7ff      	b.n	13fd6 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   13fd6:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   13fda:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13fde:	f7f4 fec2 	bl	8d66 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   13fe2:	9000      	str	r0, [sp, #0]
   13fe4:	e7ff      	b.n	13fe6 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   13fe6:	f247 515c 	movw	r1, #30044	; 0x755c
   13fea:	f2c0 0102 	movt	r1, #2
   13fee:	f247 5368 	movw	r3, #30056	; 0x7568
   13ff2:	f2c0 0302 	movt	r3, #2
   13ff6:	220b      	movs	r2, #11
   13ff8:	9800      	ldr	r0, [sp, #0]
   13ffa:	f7f4 fe02 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13ffe:	e7ff      	b.n	14000 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   14000:	f007 f9d4 	bl	1b3ac <hal_watchdog_tickle>
   14004:	e7ff      	b.n	14006 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   14006:	e7e6      	b.n	13fd6 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

00014008 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   14008:	b580      	push	{r7, lr}
   1400a:	b08c      	sub	sp, #48	; 0x30
   1400c:	4601      	mov	r1, r0
   1400e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   14012:	9104      	str	r1, [sp, #16]
   14014:	f000 f8d4 	bl	141c0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   14018:	9003      	str	r0, [sp, #12]
   1401a:	e7ff      	b.n	1401c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   1401c:	9803      	ldr	r0, [sp, #12]
   1401e:	f7f4 fe2f 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   14022:	9006      	str	r0, [sp, #24]
   14024:	e7ff      	b.n	14026 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   14026:	9806      	ldr	r0, [sp, #24]
   14028:	1e41      	subs	r1, r0, #1
   1402a:	bf18      	it	ne
   1402c:	2101      	movne	r1, #1
   1402e:	2801      	cmp	r0, #1
   14030:	d001      	beq.n	14036 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   14032:	e7ff      	b.n	14034 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   14034:	e00c      	b.n	14050 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   14036:	f644 2070 	movw	r0, #19056	; 0x4a70
   1403a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1403e:	9904      	ldr	r1, [sp, #16]
   14040:	f7ff f9a4 	bl	1338c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   14044:	f88d 101d 	strb.w	r1, [sp, #29]
   14048:	f88d 001c 	strb.w	r0, [sp, #28]
   1404c:	e00f      	b.n	1406e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   1404e:	defe      	udf	#254	; 0xfe
   14050:	9806      	ldr	r0, [sp, #24]
   14052:	900b      	str	r0, [sp, #44]	; 0x2c
   14054:	f7ff f9c6 	bl	133e4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   14058:	9002      	str	r0, [sp, #8]
   1405a:	e002      	b.n	14062 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   1405c:	9805      	ldr	r0, [sp, #20]
   1405e:	b00c      	add	sp, #48	; 0x30
   14060:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   14062:	9802      	ldr	r0, [sp, #8]
   14064:	f7f4 fe00 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   14068:	9005      	str	r0, [sp, #20]
   1406a:	e7ff      	b.n	1406c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   1406c:	e7f6      	b.n	1405c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   1406e:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   14070:	f7f4 fdee 	bl	8c50 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   14074:	9001      	str	r0, [sp, #4]
   14076:	e7ff      	b.n	14078 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   14078:	9801      	ldr	r0, [sp, #4]
   1407a:	07c1      	lsls	r1, r0, #31
   1407c:	2900      	cmp	r1, #0
   1407e:	d105      	bne.n	1408c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   14080:	e7ff      	b.n	14082 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   14082:	2000      	movs	r0, #0
    Ok(())
   14084:	9005      	str	r0, [sp, #20]
   14086:	2001      	movs	r0, #1
   14088:	9005      	str	r0, [sp, #20]
}
   1408a:	e7e7      	b.n	1405c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   1408c:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   14090:	9008      	str	r0, [sp, #32]
   14092:	9808      	ldr	r0, [sp, #32]
   14094:	9005      	str	r0, [sp, #20]
   14096:	e7e1      	b.n	1405c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

00014098 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   14098:	b580      	push	{r7, lr}
   1409a:	b094      	sub	sp, #80	; 0x50
   1409c:	9010      	str	r0, [sp, #64]	; 0x40
   1409e:	9111      	str	r1, [sp, #68]	; 0x44
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   140a0:	f644 2270 	movw	r2, #19056	; 0x4a70
   140a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   140a8:	900d      	str	r0, [sp, #52]	; 0x34
   140aa:	4610      	mov	r0, r2
   140ac:	910c      	str	r1, [sp, #48]	; 0x30
   140ae:	f7ff f953 	bl	13358 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   140b2:	900b      	str	r0, [sp, #44]	; 0x2c
   140b4:	910a      	str	r1, [sp, #40]	; 0x28
   140b6:	e7ff      	b.n	140b8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   140b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   140ba:	990a      	ldr	r1, [sp, #40]	; 0x28
   140bc:	f7fe fcf3 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   140c0:	9009      	str	r0, [sp, #36]	; 0x24
   140c2:	e7ff      	b.n	140c4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   140c4:	9809      	ldr	r0, [sp, #36]	; 0x24
   140c6:	2800      	cmp	r0, #0
   140c8:	d009      	beq.n	140de <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x46>
   140ca:	e7ff      	b.n	140cc <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  if unsafe { PENDING_DATA.len() + data.len() > PENDING_DATA.capacity() } { cortex_m::asm::bkpt(); } ////
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   140cc:	f644 2078 	movw	r0, #19064	; 0x4a78
   140d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   140d4:	f7ff f934 	bl	13340 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   140d8:	9008      	str	r0, [sp, #32]
   140da:	9107      	str	r1, [sp, #28]
   140dc:	e00b      	b.n	140f6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x5e>
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   140de:	f247 5078 	movw	r0, #30072	; 0x7578
   140e2:	f2c0 0002 	movt	r0, #2
   140e6:	f247 5284 	movw	r2, #30084	; 0x7584
   140ea:	f2c0 0202 	movt	r2, #2
   140ee:	210b      	movs	r1, #11
   140f0:	f004 fa1e 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   140f4:	defe      	udf	#254	; 0xfe
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   140f6:	9808      	ldr	r0, [sp, #32]
   140f8:	9907      	ldr	r1, [sp, #28]
   140fa:	f7fe fcd4 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   140fe:	9006      	str	r0, [sp, #24]
   14100:	e7ff      	b.n	14102 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x6a>
   14102:	980d      	ldr	r0, [sp, #52]	; 0x34
   14104:	990c      	ldr	r1, [sp, #48]	; 0x30
   14106:	f7fe fcce 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1410a:	9005      	str	r0, [sp, #20]
   1410c:	e7ff      	b.n	1410e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x76>
   1410e:	9806      	ldr	r0, [sp, #24]
   14110:	9905      	ldr	r1, [sp, #20]
   14112:	1842      	adds	r2, r0, r1
   14114:	4613      	mov	r3, r2
   14116:	4282      	cmp	r2, r0
   14118:	9304      	str	r3, [sp, #16]
   1411a:	d345      	bcc.n	141a8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x110>
   1411c:	e7ff      	b.n	1411e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x86>
   1411e:	f644 2078 	movw	r0, #19064	; 0x4a78
   14122:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14126:	f7ff f953 	bl	133d0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>
   1412a:	9003      	str	r0, [sp, #12]
   1412c:	e7ff      	b.n	1412e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x96>
   1412e:	9804      	ldr	r0, [sp, #16]
   14130:	9903      	ldr	r1, [sp, #12]
   14132:	4288      	cmp	r0, r1
   14134:	d80a      	bhi.n	1414c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xb4>
   14136:	e7ff      	b.n	14138 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa0>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   14138:	f644 2078 	movw	r0, #19064	; 0x4a78
   1413c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14140:	990d      	ldr	r1, [sp, #52]	; 0x34
   14142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14144:	f7ff f914 	bl	13370 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>
   14148:	9002      	str	r0, [sp, #8]
   1414a:	e00b      	b.n	14164 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xcc>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   1414c:	f247 50cc 	movw	r0, #30156	; 0x75cc
   14150:	f2c0 0002 	movt	r0, #2
   14154:	f247 52d8 	movw	r2, #30168	; 0x75d8
   14158:	f2c0 0202 	movt	r2, #2
   1415c:	210c      	movs	r1, #12
   1415e:	f004 f9e7 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14162:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   14164:	9802      	ldr	r0, [sp, #8]
   14166:	f000 0001 	and.w	r0, r0, #1
   1416a:	f7f4 fd83 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1416e:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   14172:	e7ff      	b.n	14174 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xdc>
   14174:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   14178:	07c1      	lsls	r1, r0, #31
   1417a:	2900      	cmp	r1, #0
   1417c:	d001      	beq.n	14182 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xea>
   1417e:	e7ff      	b.n	14180 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xe8>
   14180:	e005      	b.n	1418e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xf6>
   14182:	2000      	movs	r0, #0
    Ok(())
   14184:	900e      	str	r0, [sp, #56]	; 0x38
   14186:	2001      	movs	r0, #1
   14188:	900e      	str	r0, [sp, #56]	; 0x38
}
   1418a:	e004      	b.n	14196 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   1418c:	defe      	udf	#254	; 0xfe
   1418e:	f7ff f8c1 	bl	13314 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   14192:	9001      	str	r0, [sp, #4]
   14194:	e002      	b.n	1419c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x104>
}
   14196:	980e      	ldr	r0, [sp, #56]	; 0x38
   14198:	b014      	add	sp, #80	; 0x50
   1419a:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   1419c:	9801      	ldr	r0, [sp, #4]
   1419e:	f7f4 fd63 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   141a2:	900e      	str	r0, [sp, #56]	; 0x38
   141a4:	e7ff      	b.n	141a6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x10e>
   141a6:	e7f6      	b.n	14196 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   141a8:	f247 50b0 	movw	r0, #30128	; 0x75b0
   141ac:	f2c0 0002 	movt	r0, #2
   141b0:	f247 5294 	movw	r2, #30100	; 0x7594
   141b4:	f2c0 0202 	movt	r2, #2
   141b8:	211c      	movs	r1, #28
   141ba:	f004 f9b9 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   141be:	defe      	udf	#254	; 0xfe

000141c0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   141c0:	b580      	push	{r7, lr}
   141c2:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   141c4:	f644 2070 	movw	r0, #19056	; 0x4a70
   141c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   141cc:	f7ff f8c4 	bl	13358 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   141d0:	900b      	str	r0, [sp, #44]	; 0x2c
   141d2:	910a      	str	r1, [sp, #40]	; 0x28
   141d4:	e016      	b.n	14204 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   141d6:	2001      	movs	r0, #1
   141d8:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   141dc:	e00c      	b.n	141f8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   141de:	2000      	movs	r0, #0
   141e0:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   141e4:	e008      	b.n	141f8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   141e6:	f644 2078 	movw	r0, #19064	; 0x4a78
   141ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
   141ee:	f7ff f8a7 	bl	13340 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   141f2:	9009      	str	r0, [sp, #36]	; 0x24
   141f4:	9108      	str	r1, [sp, #32]
   141f6:	e00f      	b.n	14218 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   141f8:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   141fc:	07c0      	lsls	r0, r0, #31
   141fe:	2800      	cmp	r0, #0
   14200:	d11d      	bne.n	1423e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   14202:	e013      	b.n	1422c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   14204:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14206:	990a      	ldr	r1, [sp, #40]	; 0x28
   14208:	f7fe fc4d 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1420c:	9007      	str	r0, [sp, #28]
   1420e:	e7ff      	b.n	14210 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   14210:	9807      	ldr	r0, [sp, #28]
   14212:	2800      	cmp	r0, #0
   14214:	d0e7      	beq.n	141e6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   14216:	e7e2      	b.n	141de <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   14218:	9809      	ldr	r0, [sp, #36]	; 0x24
   1421a:	9908      	ldr	r1, [sp, #32]
   1421c:	f7fe fc43 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   14220:	9006      	str	r0, [sp, #24]
   14222:	e7ff      	b.n	14224 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   14224:	9806      	ldr	r0, [sp, #24]
   14226:	2800      	cmp	r0, #0
   14228:	d0d5      	beq.n	141d6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   1422a:	e7d8      	b.n	141de <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   1422c:	f644 2070 	movw	r0, #19056	; 0x4a70
   14230:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14234:	f7ff f890 	bl	13358 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   14238:	9005      	str	r0, [sp, #20]
   1423a:	9104      	str	r1, [sp, #16]
   1423c:	e007      	b.n	1424e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   1423e:	2000      	movs	r0, #0
        return Ok(());
   14240:	900c      	str	r0, [sp, #48]	; 0x30
   14242:	2001      	movs	r0, #1
   14244:	900c      	str	r0, [sp, #48]	; 0x30
   14246:	e7ff      	b.n	14248 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   14248:	980c      	ldr	r0, [sp, #48]	; 0x30
   1424a:	b010      	add	sp, #64	; 0x40
   1424c:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   1424e:	9804      	ldr	r0, [sp, #16]
   14250:	2800      	cmp	r0, #0
   14252:	d03f      	beq.n	142d4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   14254:	e7ff      	b.n	14256 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   14256:	9805      	ldr	r0, [sp, #20]
   14258:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   1425a:	f644 2078 	movw	r0, #19064	; 0x4a78
   1425e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14262:	9103      	str	r1, [sp, #12]
   14264:	f7ff f86c 	bl	13340 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   14268:	9002      	str	r0, [sp, #8]
   1426a:	9101      	str	r1, [sp, #4]
   1426c:	e7ff      	b.n	1426e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   1426e:	9803      	ldr	r0, [sp, #12]
   14270:	9902      	ldr	r1, [sp, #8]
   14272:	9a01      	ldr	r2, [sp, #4]
   14274:	f000 f837 	bl	142e6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   14278:	900e      	str	r0, [sp, #56]	; 0x38
   1427a:	e7ff      	b.n	1427c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   1427c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1427e:	2801      	cmp	r0, #1
   14280:	d107      	bne.n	14292 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   14282:	e7ff      	b.n	14284 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   14284:	f644 2070 	movw	r0, #19056	; 0x4a70
   14288:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1428c:	f7ff f890 	bl	133b0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   14290:	e014      	b.n	142bc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   14292:	980e      	ldr	r0, [sp, #56]	; 0x38
   14294:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   14296:	f644 2170 	movw	r1, #19056	; 0x4a70
   1429a:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1429e:	9000      	str	r0, [sp, #0]
   142a0:	4608      	mov	r0, r1
   142a2:	f7ff f885 	bl	133b0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   142a6:	e7ff      	b.n	142a8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   142a8:	f644 2078 	movw	r0, #19064	; 0x4a78
   142ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
   142b0:	f7ff f886 	bl	133c0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   142b4:	e7ff      	b.n	142b6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   142b6:	9800      	ldr	r0, [sp, #0]
   142b8:	900c      	str	r0, [sp, #48]	; 0x30
   142ba:	e7c5      	b.n	14248 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   142bc:	f644 2078 	movw	r0, #19064	; 0x4a78
   142c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   142c4:	f7ff f87c 	bl	133c0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   142c8:	e7ff      	b.n	142ca <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   142ca:	2000      	movs	r0, #0
    Ok(())
   142cc:	900c      	str	r0, [sp, #48]	; 0x30
   142ce:	2001      	movs	r0, #1
   142d0:	900c      	str	r0, [sp, #48]	; 0x30
}
   142d2:	e7b9      	b.n	14248 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   142d4:	f247 50e8 	movw	r0, #30184	; 0x75e8
   142d8:	f2c0 0002 	movt	r0, #2
   142dc:	2100      	movs	r1, #0
   142de:	9a04      	ldr	r2, [sp, #16]
   142e0:	f004 f93c 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   142e4:	defe      	udf	#254	; 0xfe

000142e6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   142e6:	b580      	push	{r7, lr}
   142e8:	b0a0      	sub	sp, #128	; 0x80
   142ea:	4603      	mov	r3, r0
   142ec:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   142f0:	9116      	str	r1, [sp, #88]	; 0x58
   142f2:	9217      	str	r2, [sp, #92]	; 0x5c
   142f4:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   142f8:	9018      	str	r0, [sp, #96]	; 0x60
   142fa:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   142fe:	fba0 0c0c 	umull	r0, ip, r0, ip
   14302:	f1bc 0f00 	cmp.w	ip, #0
   14306:	920f      	str	r2, [sp, #60]	; 0x3c
   14308:	910e      	str	r1, [sp, #56]	; 0x38
   1430a:	900d      	str	r0, [sp, #52]	; 0x34
   1430c:	f040 80c8 	bne.w	144a0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   14310:	e7ff      	b.n	14312 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   14312:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14316:	f2c1 0062 	movt	r0, #4194	; 0x1062
   1431a:	990d      	ldr	r1, [sp, #52]	; 0x34
   1431c:	fba1 0200 	umull	r0, r2, r1, r0
   14320:	0991      	lsrs	r1, r2, #6
   14322:	f646 2284 	movw	r2, #27268	; 0x6a84
   14326:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1432a:	900c      	str	r0, [sp, #48]	; 0x30
   1432c:	4610      	mov	r0, r2
   1432e:	f008 f93d 	bl	1c5ac <os_sem_pend>
   14332:	e7ff      	b.n	14334 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   14334:	980e      	ldr	r0, [sp, #56]	; 0x38
   14336:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14338:	f7fe fbb5 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1433c:	900b      	str	r0, [sp, #44]	; 0x2c
   1433e:	e7ff      	b.n	14340 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   14340:	2001      	movs	r0, #1
   14342:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14344:	fa10 f081 	uxtah	r0, r0, r1
   14348:	b282      	uxth	r2, r0
   1434a:	4603      	mov	r3, r0
   1434c:	4282      	cmp	r2, r0
   1434e:	930a      	str	r3, [sp, #40]	; 0x28
   14350:	f040 80b2 	bne.w	144b8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   14354:	e7ff      	b.n	14356 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   14356:	980a      	ldr	r0, [sp, #40]	; 0x28
   14358:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   1435c:	b280      	uxth	r0, r0
   1435e:	2100      	movs	r1, #0
   14360:	f007 fe32 	bl	1bfc8 <os_msys_get_pkthdr>
   14364:	4601      	mov	r1, r0
   14366:	901a      	str	r0, [sp, #104]	; 0x68
   14368:	9109      	str	r1, [sp, #36]	; 0x24
   1436a:	e7ff      	b.n	1436c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   1436c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1436e:	f000 ff17 	bl	151a0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   14372:	9008      	str	r0, [sp, #32]
   14374:	e7ff      	b.n	14376 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   14376:	9808      	ldr	r0, [sp, #32]
   14378:	07c1      	lsls	r1, r0, #31
   1437a:	2900      	cmp	r1, #0
   1437c:	d106      	bne.n	1438c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   1437e:	e7ff      	b.n	14380 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   14380:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   14384:	901b      	str	r0, [sp, #108]	; 0x6c
   14386:	991b      	ldr	r1, [sp, #108]	; 0x6c
   14388:	9107      	str	r1, [sp, #28]
   1438a:	e010      	b.n	143ae <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   1438c:	f646 2084 	movw	r0, #27268	; 0x6a84
   14390:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14394:	f008 f8d8 	bl	1c548 <os_sem_release>
   14398:	e7ff      	b.n	1439a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   1439a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1439e:	9012      	str	r0, [sp, #72]	; 0x48
   143a0:	9812      	ldr	r0, [sp, #72]	; 0x48
   143a2:	9011      	str	r0, [sp, #68]	; 0x44
   143a4:	e002      	b.n	143ac <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   143a6:	9811      	ldr	r0, [sp, #68]	; 0x44
   143a8:	b020      	add	sp, #128	; 0x80
   143aa:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   143ac:	e7fb      	b.n	143a6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   143ae:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   143b0:	9809      	ldr	r0, [sp, #36]	; 0x24
   143b2:	9907      	ldr	r1, [sp, #28]
   143b4:	f007 fc60 	bl	1bc78 <os_mbuf_append>
   143b8:	4601      	mov	r1, r0
   143ba:	901c      	str	r0, [sp, #112]	; 0x70
   143bc:	9106      	str	r1, [sp, #24]
   143be:	e7ff      	b.n	143c0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   143c0:	9806      	ldr	r0, [sp, #24]
   143c2:	2800      	cmp	r0, #0
   143c4:	d106      	bne.n	143d4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   143c6:	e7ff      	b.n	143c8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   143c8:	980e      	ldr	r0, [sp, #56]	; 0x38
   143ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
   143cc:	f7fe fb73 	bl	12ab6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   143d0:	9005      	str	r0, [sp, #20]
   143d2:	e011      	b.n	143f8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   143d4:	9809      	ldr	r0, [sp, #36]	; 0x24
   143d6:	f007 fc33 	bl	1bc40 <os_mbuf_free_chain>
   143da:	e7ff      	b.n	143dc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   143dc:	f646 2084 	movw	r0, #27268	; 0x6a84
   143e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   143e4:	f008 f8b0 	bl	1c548 <os_sem_release>
   143e8:	e7ff      	b.n	143ea <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   143ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   143ee:	9013      	str	r0, [sp, #76]	; 0x4c
   143f0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   143f2:	9011      	str	r0, [sp, #68]	; 0x44
   143f4:	e7ff      	b.n	143f6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   143f6:	e7d9      	b.n	143ac <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   143f8:	9805      	ldr	r0, [sp, #20]
   143fa:	901d      	str	r0, [sp, #116]	; 0x74
   143fc:	991d      	ldr	r1, [sp, #116]	; 0x74
   143fe:	9104      	str	r1, [sp, #16]
   14400:	e7ff      	b.n	14402 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   14402:	980e      	ldr	r0, [sp, #56]	; 0x38
   14404:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14406:	f7fe fb4e 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1440a:	9003      	str	r0, [sp, #12]
   1440c:	e7ff      	b.n	1440e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   1440e:	9803      	ldr	r0, [sp, #12]
   14410:	b282      	uxth	r2, r0
   14412:	9809      	ldr	r0, [sp, #36]	; 0x24
   14414:	9904      	ldr	r1, [sp, #16]
   14416:	f007 fc2f 	bl	1bc78 <os_mbuf_append>
   1441a:	4601      	mov	r1, r0
   1441c:	901e      	str	r0, [sp, #120]	; 0x78
   1441e:	9102      	str	r1, [sp, #8]
   14420:	e7ff      	b.n	14422 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   14422:	9802      	ldr	r0, [sp, #8]
   14424:	2800      	cmp	r0, #0
   14426:	d10f      	bne.n	14448 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   14428:	e7ff      	b.n	1442a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   1442a:	f646 208c 	movw	r0, #27276	; 0x6a8c
   1442e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14432:	f646 21a4 	movw	r1, #27300	; 0x6aa4
   14436:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1443a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1443c:	f007 fb9e 	bl	1bb7c <os_mqueue_put>
   14440:	4601      	mov	r1, r0
   14442:	901f      	str	r0, [sp, #124]	; 0x7c
   14444:	9101      	str	r1, [sp, #4]
   14446:	e011      	b.n	1446c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   14448:	9809      	ldr	r0, [sp, #36]	; 0x24
   1444a:	f007 fbf9 	bl	1bc40 <os_mbuf_free_chain>
   1444e:	e7ff      	b.n	14450 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   14450:	f646 2084 	movw	r0, #27268	; 0x6a84
   14454:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14458:	f008 f876 	bl	1c548 <os_sem_release>
   1445c:	e7ff      	b.n	1445e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   1445e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   14462:	9014      	str	r0, [sp, #80]	; 0x50
   14464:	9814      	ldr	r0, [sp, #80]	; 0x50
   14466:	9011      	str	r0, [sp, #68]	; 0x44
   14468:	e7ff      	b.n	1446a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   1446a:	e7c4      	b.n	143f6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   1446c:	9801      	ldr	r0, [sp, #4]
   1446e:	2800      	cmp	r0, #0
   14470:	d105      	bne.n	1447e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   14472:	e7ff      	b.n	14474 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   14474:	2000      	movs	r0, #0
    Ok(())
   14476:	9011      	str	r0, [sp, #68]	; 0x44
   14478:	2001      	movs	r0, #1
   1447a:	9011      	str	r0, [sp, #68]	; 0x44
}
   1447c:	e793      	b.n	143a6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   1447e:	9809      	ldr	r0, [sp, #36]	; 0x24
   14480:	f007 fbde 	bl	1bc40 <os_mbuf_free_chain>
   14484:	e7ff      	b.n	14486 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   14486:	f646 2084 	movw	r0, #27268	; 0x6a84
   1448a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1448e:	f008 f85b 	bl	1c548 <os_sem_release>
   14492:	e7ff      	b.n	14494 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   14494:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   14498:	9015      	str	r0, [sp, #84]	; 0x54
   1449a:	9815      	ldr	r0, [sp, #84]	; 0x54
   1449c:	9011      	str	r0, [sp, #68]	; 0x44
   1449e:	e7e4      	b.n	1446a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   144a0:	f247 6010 	movw	r0, #30224	; 0x7610
   144a4:	f2c0 0002 	movt	r0, #2
   144a8:	f247 52f8 	movw	r2, #30200	; 0x75f8
   144ac:	f2c0 0202 	movt	r2, #2
   144b0:	2121      	movs	r1, #33	; 0x21
   144b2:	f004 f83d 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   144b6:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   144b8:	f247 50b0 	movw	r0, #30128	; 0x75b0
   144bc:	f2c0 0002 	movt	r0, #2
   144c0:	f247 6234 	movw	r2, #30260	; 0x7634
   144c4:	f2c0 0202 	movt	r2, #2
   144c8:	211c      	movs	r1, #28
   144ca:	f004 f831 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   144ce:	defe      	udf	#254	; 0xfe

000144d0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   144d0:	b5b0      	push	{r4, r5, r7, lr}
   144d2:	b0c4      	sub	sp, #272	; 0x110
   144d4:	9038      	str	r0, [sp, #224]	; 0xe0
   144d6:	e7ff      	b.n	144d8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   144d8:	f646 208c 	movw	r0, #27276	; 0x6a8c
   144dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   144e0:	f007 fb39 	bl	1bb56 <os_mqueue_get>
   144e4:	4601      	mov	r1, r0
   144e6:	9039      	str	r0, [sp, #228]	; 0xe4
   144e8:	911b      	str	r1, [sp, #108]	; 0x6c
   144ea:	e7ff      	b.n	144ec <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   144ec:	981b      	ldr	r0, [sp, #108]	; 0x6c
   144ee:	f000 fe57 	bl	151a0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   144f2:	901a      	str	r0, [sp, #104]	; 0x68
   144f4:	e7ff      	b.n	144f6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   144f6:	981a      	ldr	r0, [sp, #104]	; 0x68
   144f8:	07c1      	lsls	r1, r0, #31
   144fa:	2900      	cmp	r1, #0
   144fc:	d106      	bne.n	1450c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   144fe:	e7ff      	b.n	14500 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   14500:	981b      	ldr	r0, [sp, #108]	; 0x6c
   14502:	901c      	str	r0, [sp, #112]	; 0x70
   14504:	2101      	movs	r1, #1
        let mut first_byte = true;
   14506:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   1450a:	e001      	b.n	14510 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   1450c:	b044      	add	sp, #272	; 0x110
   1450e:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   14510:	981c      	ldr	r0, [sp, #112]	; 0x70
   14512:	f000 fe45 	bl	151a0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   14516:	9019      	str	r0, [sp, #100]	; 0x64
   14518:	e7ff      	b.n	1451a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   1451a:	9819      	ldr	r0, [sp, #100]	; 0x64
   1451c:	07c1      	lsls	r1, r0, #31
   1451e:	2900      	cmp	r1, #0
   14520:	d004      	beq.n	1452c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   14522:	e7ff      	b.n	14524 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   14524:	981b      	ldr	r0, [sp, #108]	; 0x6c
   14526:	f007 fb8b 	bl	1bc40 <os_mbuf_free_chain>
   1452a:	e0aa      	b.n	14682 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   1452c:	981c      	ldr	r0, [sp, #112]	; 0x70
   1452e:	6800      	ldr	r0, [r0, #0]
   14530:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   14532:	991c      	ldr	r1, [sp, #112]	; 0x70
   14534:	88c9      	ldrh	r1, [r1, #6]
   14536:	460a      	mov	r2, r1
   14538:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   1453c:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   14540:	07c9      	lsls	r1, r1, #31
   14542:	2900      	cmp	r1, #0
   14544:	9018      	str	r0, [sp, #96]	; 0x60
   14546:	9217      	str	r2, [sp, #92]	; 0x5c
   14548:	d105      	bne.n	14556 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   1454a:	e7ff      	b.n	1454c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   1454c:	9818      	ldr	r0, [sp, #96]	; 0x60
   1454e:	903e      	str	r0, [sp, #248]	; 0xf8
   14550:	983e      	ldr	r0, [sp, #248]	; 0xf8
   14552:	9016      	str	r0, [sp, #88]	; 0x58
   14554:	e07b      	b.n	1464e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   14556:	2000      	movs	r0, #0
                first_byte = false;
   14558:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   1455c:	9818      	ldr	r0, [sp, #96]	; 0x60
   1455e:	903c      	str	r0, [sp, #240]	; 0xf0
   14560:	983c      	ldr	r0, [sp, #240]	; 0xf0
   14562:	9015      	str	r0, [sp, #84]	; 0x54
   14564:	e7ff      	b.n	14566 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   14566:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   14568:	9915      	ldr	r1, [sp, #84]	; 0x54
   1456a:	9014      	str	r0, [sp, #80]	; 0x50
   1456c:	4608      	mov	r0, r1
   1456e:	9914      	ldr	r1, [sp, #80]	; 0x50
   14570:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14572:	f000 f921 	bl	147b8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   14576:	9013      	str	r0, [sp, #76]	; 0x4c
   14578:	e7ff      	b.n	1457a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   1457a:	f247 6144 	movw	r1, #30276	; 0x7644
   1457e:	f2c0 0102 	movt	r1, #2
   14582:	f247 6350 	movw	r3, #30288	; 0x7650
   14586:	f2c0 0302 	movt	r3, #2
   1458a:	220c      	movs	r2, #12
   1458c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1458e:	f7f4 fb38 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   14592:	e7ff      	b.n	14594 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   14594:	9818      	ldr	r0, [sp, #96]	; 0x60
   14596:	7801      	ldrb	r1, [r0, #0]
   14598:	2901      	cmp	r1, #1
   1459a:	d013      	beq.n	145c4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   1459c:	e01a      	b.n	145d4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   1459e:	2001      	movs	r0, #1
   145a0:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   145a4:	e008      	b.n	145b8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   145a6:	2000      	movs	r0, #0
   145a8:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   145ac:	e004      	b.n	145b8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   145ae:	9818      	ldr	r0, [sp, #96]	; 0x60
   145b0:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   145b2:	2929      	cmp	r1, #41	; 0x29
   145b4:	d0f3      	beq.n	1459e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   145b6:	e7f6      	b.n	145a6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   145b8:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   145bc:	07c0      	lsls	r0, r0, #31
   145be:	2800      	cmp	r0, #0
   145c0:	d113      	bne.n	145ea <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   145c2:	e017      	b.n	145f4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   145c4:	2001      	movs	r0, #1
   145c6:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   145ca:	e008      	b.n	145de <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   145cc:	2000      	movs	r0, #0
   145ce:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   145d2:	e004      	b.n	145de <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   145d4:	9818      	ldr	r0, [sp, #96]	; 0x60
   145d6:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   145d8:	2911      	cmp	r1, #17
   145da:	d0f3      	beq.n	145c4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   145dc:	e7f6      	b.n	145cc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   145de:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   145e2:	07c0      	lsls	r0, r0, #31
   145e4:	2800      	cmp	r0, #0
   145e6:	d1da      	bne.n	1459e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   145e8:	e7e1      	b.n	145ae <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   145ea:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   145ec:	f000 fb13 	bl	14c16 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   145f0:	e7ff      	b.n	145f2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   145f2:	e7ff      	b.n	145f4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   145f4:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   145f6:	9818      	ldr	r0, [sp, #96]	; 0x60
   145f8:	f7fe f9c5 	bl	12986 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   145fc:	9012      	str	r0, [sp, #72]	; 0x48
   145fe:	e7ff      	b.n	14600 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   14600:	9812      	ldr	r0, [sp, #72]	; 0x48
   14602:	903d      	str	r0, [sp, #244]	; 0xf4
   14604:	983d      	ldr	r0, [sp, #244]	; 0xf4
   14606:	9011      	str	r0, [sp, #68]	; 0x44
   14608:	e7ff      	b.n	1460a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   1460a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   1460e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   14610:	fa10 f081 	uxtah	r0, r0, r1
   14614:	b282      	uxth	r2, r0
   14616:	4603      	mov	r3, r0
   14618:	4282      	cmp	r2, r0
   1461a:	9310      	str	r3, [sp, #64]	; 0x40
   1461c:	f040 80c0 	bne.w	147a0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   14620:	e7ff      	b.n	14622 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   14622:	9810      	ldr	r0, [sp, #64]	; 0x40
   14624:	b281      	uxth	r1, r0
   14626:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   14628:	9811      	ldr	r0, [sp, #68]	; 0x44
   1462a:	f000 f8c5 	bl	147b8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   1462e:	900f      	str	r0, [sp, #60]	; 0x3c
   14630:	e7ff      	b.n	14632 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   14632:	f247 6144 	movw	r1, #30276	; 0x7644
   14636:	f2c0 0102 	movt	r1, #2
   1463a:	f247 6394 	movw	r3, #30356	; 0x7694
   1463e:	f2c0 0302 	movt	r3, #2
   14642:	220c      	movs	r2, #12
   14644:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14646:	f7f4 fadc 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1464a:	e7ff      	b.n	1464c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   1464c:	e015      	b.n	1467a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   1464e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   14650:	b281      	uxth	r1, r0
   14652:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   14654:	9816      	ldr	r0, [sp, #88]	; 0x58
   14656:	f000 f8af 	bl	147b8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   1465a:	900e      	str	r0, [sp, #56]	; 0x38
   1465c:	e7ff      	b.n	1465e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   1465e:	f247 6144 	movw	r1, #30276	; 0x7644
   14662:	f2c0 0102 	movt	r1, #2
   14666:	f247 63a4 	movw	r3, #30372	; 0x76a4
   1466a:	f2c0 0302 	movt	r3, #2
   1466e:	220c      	movs	r2, #12
   14670:	980e      	ldr	r0, [sp, #56]	; 0x38
   14672:	f7f4 fac6 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   14676:	e7ff      	b.n	14678 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   14678:	e7ff      	b.n	1467a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   1467a:	981c      	ldr	r0, [sp, #112]	; 0x70
   1467c:	68c0      	ldr	r0, [r0, #12]
   1467e:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   14680:	e746      	b.n	14510 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   14682:	f646 2084 	movw	r0, #27268	; 0x6a84
   14686:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1468a:	f007 ff5d 	bl	1c548 <os_sem_release>
   1468e:	901e      	str	r0, [sp, #120]	; 0x78
   14690:	e7ff      	b.n	14692 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   14692:	f247 30b8 	movw	r0, #29624	; 0x73b8
   14696:	f2c0 0002 	movt	r0, #2
   1469a:	6800      	ldr	r0, [r0, #0]
   1469c:	a91e      	add	r1, sp, #120	; 0x78
   1469e:	911f      	str	r1, [sp, #124]	; 0x7c
   146a0:	9020      	str	r0, [sp, #128]	; 0x80
   146a2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   146a4:	903f      	str	r0, [sp, #252]	; 0xfc
   146a6:	9920      	ldr	r1, [sp, #128]	; 0x80
   146a8:	9140      	str	r1, [sp, #256]	; 0x100
   146aa:	6802      	ldr	r2, [r0, #0]
   146ac:	680b      	ldr	r3, [r1, #0]
   146ae:	429a      	cmp	r2, r3
   146b0:	900d      	str	r0, [sp, #52]	; 0x34
   146b2:	910c      	str	r1, [sp, #48]	; 0x30
   146b4:	d101      	bne.n	146ba <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   146b6:	e7ff      	b.n	146b8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   146b8:	e70e      	b.n	144d8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   146ba:	f247 4010 	movw	r0, #29712	; 0x7410
   146be:	f2c0 0002 	movt	r0, #2
   146c2:	6801      	ldr	r1, [r0, #0]
   146c4:	980d      	ldr	r0, [sp, #52]	; 0x34
   146c6:	9030      	str	r0, [sp, #192]	; 0xc0
   146c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   146ca:	9231      	str	r2, [sp, #196]	; 0xc4
   146cc:	f247 5328 	movw	r3, #29992	; 0x7528
   146d0:	f2c0 0302 	movt	r3, #2
   146d4:	681b      	ldr	r3, [r3, #0]
   146d6:	f247 4c30 	movw	ip, #29744	; 0x7430
   146da:	f2c0 0c02 	movt	ip, #2
   146de:	f8dc c000 	ldr.w	ip, [ip]
   146e2:	46ee      	mov	lr, sp
   146e4:	2400      	movs	r4, #0
   146e6:	f8ce 4000 	str.w	r4, [lr]
   146ea:	a832      	add	r0, sp, #200	; 0xc8
   146ec:	2201      	movs	r2, #1
   146ee:	910b      	str	r1, [sp, #44]	; 0x2c
   146f0:	4619      	mov	r1, r3
   146f2:	4663      	mov	r3, ip
   146f4:	f7f4 fa56 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   146f8:	e7ff      	b.n	146fa <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   146fa:	a830      	add	r0, sp, #192	; 0xc0
   146fc:	902d      	str	r0, [sp, #180]	; 0xb4
   146fe:	a831      	add	r0, sp, #196	; 0xc4
   14700:	902e      	str	r0, [sp, #184]	; 0xb8
   14702:	a832      	add	r0, sp, #200	; 0xc8
   14704:	902f      	str	r0, [sp, #188]	; 0xbc
   14706:	982d      	ldr	r0, [sp, #180]	; 0xb4
   14708:	9041      	str	r0, [sp, #260]	; 0x104
   1470a:	992e      	ldr	r1, [sp, #184]	; 0xb8
   1470c:	9142      	str	r1, [sp, #264]	; 0x108
   1470e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   14710:	9243      	str	r2, [sp, #268]	; 0x10c
   14712:	f249 4347 	movw	r3, #37959	; 0x9447
   14716:	f2c0 0300 	movt	r3, #0
   1471a:	910a      	str	r1, [sp, #40]	; 0x28
   1471c:	4619      	mov	r1, r3
   1471e:	9209      	str	r2, [sp, #36]	; 0x24
   14720:	f7f4 fec9 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14724:	9008      	str	r0, [sp, #32]
   14726:	9107      	str	r1, [sp, #28]
   14728:	e7ff      	b.n	1472a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   1472a:	f249 4147 	movw	r1, #37959	; 0x9447
   1472e:	f2c0 0100 	movt	r1, #0
   14732:	980a      	ldr	r0, [sp, #40]	; 0x28
   14734:	f7f4 febf 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14738:	9006      	str	r0, [sp, #24]
   1473a:	9105      	str	r1, [sp, #20]
   1473c:	e7ff      	b.n	1473e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   1473e:	f648 21ff 	movw	r1, #35583	; 0x8aff
   14742:	f2c0 0101 	movt	r1, #1
   14746:	9809      	ldr	r0, [sp, #36]	; 0x24
   14748:	f7f4 feca 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1474c:	9004      	str	r0, [sp, #16]
   1474e:	9103      	str	r1, [sp, #12]
   14750:	e7ff      	b.n	14752 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   14752:	9808      	ldr	r0, [sp, #32]
   14754:	9027      	str	r0, [sp, #156]	; 0x9c
   14756:	9907      	ldr	r1, [sp, #28]
   14758:	9128      	str	r1, [sp, #160]	; 0xa0
   1475a:	9a06      	ldr	r2, [sp, #24]
   1475c:	9229      	str	r2, [sp, #164]	; 0xa4
   1475e:	9b05      	ldr	r3, [sp, #20]
   14760:	932a      	str	r3, [sp, #168]	; 0xa8
   14762:	f8dd c010 	ldr.w	ip, [sp, #16]
   14766:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   1476a:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1476e:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   14772:	466c      	mov	r4, sp
   14774:	2503      	movs	r5, #3
   14776:	6025      	str	r5, [r4, #0]
   14778:	a821      	add	r0, sp, #132	; 0x84
   1477a:	ab27      	add	r3, sp, #156	; 0x9c
   1477c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1477e:	462a      	mov	r2, r5
   14780:	f7f4 fa10 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14784:	e7ff      	b.n	14786 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   14786:	f247 60b4 	movw	r0, #30388	; 0x76b4
   1478a:	f2c0 0002 	movt	r0, #2
   1478e:	f003 fec8 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14792:	9002      	str	r0, [sp, #8]
   14794:	e7ff      	b.n	14796 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   14796:	a821      	add	r0, sp, #132	; 0x84
   14798:	9902      	ldr	r1, [sp, #8]
   1479a:	f003 feff 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1479e:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   147a0:	f247 6070 	movw	r0, #30320	; 0x7670
   147a4:	f2c0 0002 	movt	r0, #2
   147a8:	f247 6260 	movw	r2, #30304	; 0x7660
   147ac:	f2c0 0202 	movt	r2, #2
   147b0:	2121      	movs	r1, #33	; 0x21
   147b2:	f003 febd 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   147b6:	defe      	udf	#254	; 0xfe

000147b8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   147b8:	b5b0      	push	{r4, r5, r7, lr}
   147ba:	b0e8      	sub	sp, #416	; 0x1a0
   147bc:	4613      	mov	r3, r2
   147be:	9058      	str	r0, [sp, #352]	; 0x160
   147c0:	9159      	str	r1, [sp, #356]	; 0x164
   147c2:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   147c6:	2900      	cmp	r1, #0
   147c8:	9121      	str	r1, [sp, #132]	; 0x84
   147ca:	9020      	str	r0, [sp, #128]	; 0x80
   147cc:	931f      	str	r3, [sp, #124]	; 0x7c
   147ce:	d004      	beq.n	147da <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   147d0:	e7ff      	b.n	147d2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   147d2:	9821      	ldr	r0, [sp, #132]	; 0x84
   147d4:	2801      	cmp	r0, #1
   147d6:	db0d      	blt.n	147f4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   147d8:	e007      	b.n	147ea <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   147da:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   147dc:	9022      	str	r0, [sp, #136]	; 0x88
   147de:	2001      	movs	r0, #1
   147e0:	9022      	str	r0, [sp, #136]	; 0x88
   147e2:	e7ff      	b.n	147e4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   147e4:	9822      	ldr	r0, [sp, #136]	; 0x88
   147e6:	b068      	add	sp, #416	; 0x1a0
   147e8:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   147ea:	981f      	ldr	r0, [sp, #124]	; 0x7c
   147ec:	07c1      	lsls	r1, r0, #31
   147ee:	2900      	cmp	r1, #0
   147f0:	d10f      	bne.n	14812 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   147f2:	e00b      	b.n	1480c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   147f4:	f247 60c4 	movw	r0, #30404	; 0x76c4
   147f8:	f2c0 0002 	movt	r0, #2
   147fc:	f247 62d0 	movw	r2, #30416	; 0x76d0
   14800:	f2c0 0202 	movt	r2, #2
   14804:	210b      	movs	r1, #11
   14806:	f003 fe93 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1480a:	defe      	udf	#254	; 0xfe
   1480c:	2001      	movs	r0, #1
        else { 1 }
   1480e:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   14810:	e002      	b.n	14818 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   14812:	2000      	movs	r0, #0
   14814:	9023      	str	r0, [sp, #140]	; 0x8c
   14816:	e7ff      	b.n	14818 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   14818:	9923      	ldr	r1, [sp, #140]	; 0x8c
   1481a:	2012      	movs	r0, #18
   1481c:	f005 fff6 	bl	1a80c <hal_gpio_write>
   14820:	e7ff      	b.n	14822 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   14822:	2019      	movs	r0, #25
   14824:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   14826:	f005 fff1 	bl	1a80c <hal_gpio_write>
   1482a:	e7ff      	b.n	1482c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   1482c:	9821      	ldr	r0, [sp, #132]	; 0x84
   1482e:	2801      	cmp	r0, #1
   14830:	d005      	beq.n	1483e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   14832:	e7ff      	b.n	14834 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   14834:	9820      	ldr	r0, [sp, #128]	; 0x80
   14836:	9061      	str	r0, [sp, #388]	; 0x184
   14838:	9961      	ldr	r1, [sp, #388]	; 0x184
   1483a:	911e      	str	r1, [sp, #120]	; 0x78
   1483c:	e094      	b.n	14968 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   1483e:	9820      	ldr	r0, [sp, #128]	; 0x80
   14840:	905b      	str	r0, [sp, #364]	; 0x16c
   14842:	995b      	ldr	r1, [sp, #364]	; 0x16c
   14844:	911d      	str	r1, [sp, #116]	; 0x74
   14846:	e7ff      	b.n	14848 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   14848:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   1484a:	901c      	str	r0, [sp, #112]	; 0x70
   1484c:	991d      	ldr	r1, [sp, #116]	; 0x74
   1484e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   14850:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14852:	f006 fc89 	bl	1b168 <hal_spi_txrx>
   14856:	9024      	str	r0, [sp, #144]	; 0x90
   14858:	e7ff      	b.n	1485a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   1485a:	f247 30b8 	movw	r0, #29624	; 0x73b8
   1485e:	f2c0 0002 	movt	r0, #2
   14862:	6800      	ldr	r0, [r0, #0]
   14864:	a924      	add	r1, sp, #144	; 0x90
   14866:	9125      	str	r1, [sp, #148]	; 0x94
   14868:	9026      	str	r0, [sp, #152]	; 0x98
   1486a:	9825      	ldr	r0, [sp, #148]	; 0x94
   1486c:	905c      	str	r0, [sp, #368]	; 0x170
   1486e:	9926      	ldr	r1, [sp, #152]	; 0x98
   14870:	915d      	str	r1, [sp, #372]	; 0x174
   14872:	6802      	ldr	r2, [r0, #0]
   14874:	680b      	ldr	r3, [r1, #0]
   14876:	429a      	cmp	r2, r3
   14878:	901b      	str	r0, [sp, #108]	; 0x6c
   1487a:	911a      	str	r1, [sp, #104]	; 0x68
   1487c:	d101      	bne.n	14882 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   1487e:	e7ff      	b.n	14880 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   14880:	e11f      	b.n	14ac2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14882:	f247 4010 	movw	r0, #29712	; 0x7410
   14886:	f2c0 0002 	movt	r0, #2
   1488a:	6801      	ldr	r1, [r0, #0]
   1488c:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1488e:	9036      	str	r0, [sp, #216]	; 0xd8
   14890:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   14892:	9237      	str	r2, [sp, #220]	; 0xdc
   14894:	f247 63e8 	movw	r3, #30440	; 0x76e8
   14898:	f2c0 0302 	movt	r3, #2
   1489c:	681b      	ldr	r3, [r3, #0]
   1489e:	f247 4c30 	movw	ip, #29744	; 0x7430
   148a2:	f2c0 0c02 	movt	ip, #2
   148a6:	f8dc c000 	ldr.w	ip, [ip]
   148aa:	46ee      	mov	lr, sp
   148ac:	2400      	movs	r4, #0
   148ae:	f8ce 4000 	str.w	r4, [lr]
   148b2:	a838      	add	r0, sp, #224	; 0xe0
   148b4:	2201      	movs	r2, #1
   148b6:	9119      	str	r1, [sp, #100]	; 0x64
   148b8:	4619      	mov	r1, r3
   148ba:	4663      	mov	r3, ip
   148bc:	f7f4 f972 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   148c0:	e7ff      	b.n	148c2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   148c2:	a836      	add	r0, sp, #216	; 0xd8
   148c4:	9033      	str	r0, [sp, #204]	; 0xcc
   148c6:	a837      	add	r0, sp, #220	; 0xdc
   148c8:	9034      	str	r0, [sp, #208]	; 0xd0
   148ca:	a838      	add	r0, sp, #224	; 0xe0
   148cc:	9035      	str	r0, [sp, #212]	; 0xd4
   148ce:	9833      	ldr	r0, [sp, #204]	; 0xcc
   148d0:	905e      	str	r0, [sp, #376]	; 0x178
   148d2:	9934      	ldr	r1, [sp, #208]	; 0xd0
   148d4:	915f      	str	r1, [sp, #380]	; 0x17c
   148d6:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   148d8:	9260      	str	r2, [sp, #384]	; 0x180
   148da:	f249 33f3 	movw	r3, #37875	; 0x93f3
   148de:	f2c0 0300 	movt	r3, #0
   148e2:	9118      	str	r1, [sp, #96]	; 0x60
   148e4:	4619      	mov	r1, r3
   148e6:	9217      	str	r2, [sp, #92]	; 0x5c
   148e8:	f7f4 fdbb 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   148ec:	9016      	str	r0, [sp, #88]	; 0x58
   148ee:	9115      	str	r1, [sp, #84]	; 0x54
   148f0:	e7ff      	b.n	148f2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   148f2:	f249 31f3 	movw	r1, #37875	; 0x93f3
   148f6:	f2c0 0100 	movt	r1, #0
   148fa:	9818      	ldr	r0, [sp, #96]	; 0x60
   148fc:	f7f4 fdb1 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14900:	9014      	str	r0, [sp, #80]	; 0x50
   14902:	9113      	str	r1, [sp, #76]	; 0x4c
   14904:	e7ff      	b.n	14906 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   14906:	f648 21ff 	movw	r1, #35583	; 0x8aff
   1490a:	f2c0 0101 	movt	r1, #1
   1490e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   14910:	f7f4 fde6 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14914:	9012      	str	r0, [sp, #72]	; 0x48
   14916:	9111      	str	r1, [sp, #68]	; 0x44
   14918:	e7ff      	b.n	1491a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   1491a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1491c:	902d      	str	r0, [sp, #180]	; 0xb4
   1491e:	9915      	ldr	r1, [sp, #84]	; 0x54
   14920:	912e      	str	r1, [sp, #184]	; 0xb8
   14922:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14924:	922f      	str	r2, [sp, #188]	; 0xbc
   14926:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14928:	9330      	str	r3, [sp, #192]	; 0xc0
   1492a:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   1492e:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   14932:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   14936:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   1493a:	466c      	mov	r4, sp
   1493c:	2503      	movs	r5, #3
   1493e:	6025      	str	r5, [r4, #0]
   14940:	a827      	add	r0, sp, #156	; 0x9c
   14942:	ab2d      	add	r3, sp, #180	; 0xb4
   14944:	9919      	ldr	r1, [sp, #100]	; 0x64
   14946:	462a      	mov	r2, r5
   14948:	f7f4 f92c 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1494c:	e7ff      	b.n	1494e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   1494e:	f247 60ec 	movw	r0, #30444	; 0x76ec
   14952:	f2c0 0002 	movt	r0, #2
   14956:	f003 fde4 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1495a:	9010      	str	r0, [sp, #64]	; 0x40
   1495c:	e7ff      	b.n	1495e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   1495e:	a827      	add	r0, sp, #156	; 0x9c
   14960:	9910      	ldr	r1, [sp, #64]	; 0x40
   14962:	f003 fe1b 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14966:	defe      	udf	#254	; 0xfe
   14968:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   1496a:	900f      	str	r0, [sp, #60]	; 0x3c
   1496c:	991e      	ldr	r1, [sp, #120]	; 0x78
   1496e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14970:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14972:	f006 fc4f 	bl	1b214 <hal_spi_txrx_noblock>
   14976:	903e      	str	r0, [sp, #248]	; 0xf8
   14978:	e7ff      	b.n	1497a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   1497a:	f247 30b8 	movw	r0, #29624	; 0x73b8
   1497e:	f2c0 0002 	movt	r0, #2
   14982:	6800      	ldr	r0, [r0, #0]
   14984:	a93e      	add	r1, sp, #248	; 0xf8
   14986:	913f      	str	r1, [sp, #252]	; 0xfc
   14988:	9040      	str	r0, [sp, #256]	; 0x100
   1498a:	983f      	ldr	r0, [sp, #252]	; 0xfc
   1498c:	9062      	str	r0, [sp, #392]	; 0x188
   1498e:	9940      	ldr	r1, [sp, #256]	; 0x100
   14990:	9163      	str	r1, [sp, #396]	; 0x18c
   14992:	6802      	ldr	r2, [r0, #0]
   14994:	680b      	ldr	r3, [r1, #0]
   14996:	429a      	cmp	r2, r3
   14998:	900e      	str	r0, [sp, #56]	; 0x38
   1499a:	910d      	str	r1, [sp, #52]	; 0x34
   1499c:	d10c      	bne.n	149b8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   1499e:	e7ff      	b.n	149a0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   149a0:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   149a4:	9067      	str	r0, [sp, #412]	; 0x19c
   149a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   149aa:	fba0 0101 	umull	r0, r1, r0, r1
   149ae:	2900      	cmp	r1, #0
   149b0:	900c      	str	r0, [sp, #48]	; 0x30
   149b2:	f040 8090 	bne.w	14ad6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   149b6:	e072      	b.n	14a9e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   149b8:	f247 4010 	movw	r0, #29712	; 0x7410
   149bc:	f2c0 0002 	movt	r0, #2
   149c0:	6801      	ldr	r1, [r0, #0]
   149c2:	980e      	ldr	r0, [sp, #56]	; 0x38
   149c4:	9050      	str	r0, [sp, #320]	; 0x140
   149c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   149c8:	9251      	str	r2, [sp, #324]	; 0x144
   149ca:	f247 63e8 	movw	r3, #30440	; 0x76e8
   149ce:	f2c0 0302 	movt	r3, #2
   149d2:	681b      	ldr	r3, [r3, #0]
   149d4:	f247 4c30 	movw	ip, #29744	; 0x7430
   149d8:	f2c0 0c02 	movt	ip, #2
   149dc:	f8dc c000 	ldr.w	ip, [ip]
   149e0:	46ee      	mov	lr, sp
   149e2:	2400      	movs	r4, #0
   149e4:	f8ce 4000 	str.w	r4, [lr]
   149e8:	a852      	add	r0, sp, #328	; 0x148
   149ea:	2201      	movs	r2, #1
   149ec:	910b      	str	r1, [sp, #44]	; 0x2c
   149ee:	4619      	mov	r1, r3
   149f0:	4663      	mov	r3, ip
   149f2:	f7f4 f8d7 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   149f6:	e7ff      	b.n	149f8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   149f8:	a850      	add	r0, sp, #320	; 0x140
   149fa:	904d      	str	r0, [sp, #308]	; 0x134
   149fc:	a851      	add	r0, sp, #324	; 0x144
   149fe:	904e      	str	r0, [sp, #312]	; 0x138
   14a00:	a852      	add	r0, sp, #328	; 0x148
   14a02:	904f      	str	r0, [sp, #316]	; 0x13c
   14a04:	984d      	ldr	r0, [sp, #308]	; 0x134
   14a06:	9064      	str	r0, [sp, #400]	; 0x190
   14a08:	994e      	ldr	r1, [sp, #312]	; 0x138
   14a0a:	9165      	str	r1, [sp, #404]	; 0x194
   14a0c:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   14a0e:	9266      	str	r2, [sp, #408]	; 0x198
   14a10:	f249 33f3 	movw	r3, #37875	; 0x93f3
   14a14:	f2c0 0300 	movt	r3, #0
   14a18:	910a      	str	r1, [sp, #40]	; 0x28
   14a1a:	4619      	mov	r1, r3
   14a1c:	9209      	str	r2, [sp, #36]	; 0x24
   14a1e:	f7f4 fd20 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14a22:	9008      	str	r0, [sp, #32]
   14a24:	9107      	str	r1, [sp, #28]
   14a26:	e7ff      	b.n	14a28 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   14a28:	f249 31f3 	movw	r1, #37875	; 0x93f3
   14a2c:	f2c0 0100 	movt	r1, #0
   14a30:	980a      	ldr	r0, [sp, #40]	; 0x28
   14a32:	f7f4 fd16 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14a36:	9006      	str	r0, [sp, #24]
   14a38:	9105      	str	r1, [sp, #20]
   14a3a:	e7ff      	b.n	14a3c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   14a3c:	f648 21ff 	movw	r1, #35583	; 0x8aff
   14a40:	f2c0 0101 	movt	r1, #1
   14a44:	9809      	ldr	r0, [sp, #36]	; 0x24
   14a46:	f7f4 fd4b 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14a4a:	9004      	str	r0, [sp, #16]
   14a4c:	9103      	str	r1, [sp, #12]
   14a4e:	e7ff      	b.n	14a50 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   14a50:	9808      	ldr	r0, [sp, #32]
   14a52:	9047      	str	r0, [sp, #284]	; 0x11c
   14a54:	9907      	ldr	r1, [sp, #28]
   14a56:	9148      	str	r1, [sp, #288]	; 0x120
   14a58:	9a06      	ldr	r2, [sp, #24]
   14a5a:	9249      	str	r2, [sp, #292]	; 0x124
   14a5c:	9b05      	ldr	r3, [sp, #20]
   14a5e:	934a      	str	r3, [sp, #296]	; 0x128
   14a60:	f8dd c010 	ldr.w	ip, [sp, #16]
   14a64:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   14a68:	f8dd e00c 	ldr.w	lr, [sp, #12]
   14a6c:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   14a70:	466c      	mov	r4, sp
   14a72:	2503      	movs	r5, #3
   14a74:	6025      	str	r5, [r4, #0]
   14a76:	a841      	add	r0, sp, #260	; 0x104
   14a78:	ab47      	add	r3, sp, #284	; 0x11c
   14a7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14a7c:	462a      	mov	r2, r5
   14a7e:	f7f4 f891 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14a82:	e7ff      	b.n	14a84 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   14a84:	f247 60fc 	movw	r0, #30460	; 0x76fc
   14a88:	f2c0 0002 	movt	r0, #2
   14a8c:	f003 fd49 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14a90:	9002      	str	r0, [sp, #8]
   14a92:	e7ff      	b.n	14a94 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   14a94:	a841      	add	r0, sp, #260	; 0x104
   14a96:	9902      	ldr	r1, [sp, #8]
   14a98:	f003 fd80 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14a9c:	defe      	udf	#254	; 0xfe
   14a9e:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14aa2:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   14aa6:	990c      	ldr	r1, [sp, #48]	; 0x30
   14aa8:	fba1 0200 	umull	r0, r2, r1, r0
   14aac:	0991      	lsrs	r1, r2, #6
   14aae:	f646 227c 	movw	r2, #27260	; 0x6a7c
   14ab2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ab6:	9001      	str	r0, [sp, #4]
   14ab8:	4610      	mov	r0, r2
   14aba:	f007 fd77 	bl	1c5ac <os_sem_pend>
   14abe:	e7ff      	b.n	14ac0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   14ac0:	e7ff      	b.n	14ac2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   14ac2:	2019      	movs	r0, #25
   14ac4:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   14ac6:	f005 fea1 	bl	1a80c <hal_gpio_write>
   14aca:	e7ff      	b.n	14acc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   14acc:	2000      	movs	r0, #0
    Ok(())
   14ace:	9022      	str	r0, [sp, #136]	; 0x88
   14ad0:	2001      	movs	r0, #1
   14ad2:	9022      	str	r0, [sp, #136]	; 0x88
}
   14ad4:	e686      	b.n	147e4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   14ad6:	f247 6010 	movw	r0, #30224	; 0x7610
   14ada:	f2c0 0002 	movt	r0, #2
   14ade:	f247 720c 	movw	r2, #30476	; 0x770c
   14ae2:	f2c0 0202 	movt	r2, #2
   14ae6:	2121      	movs	r1, #33	; 0x21
   14ae8:	f003 fd22 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14aec:	defe      	udf	#254	; 0xfe

00014aee <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   14aee:	b5b0      	push	{r4, r5, r7, lr}
   14af0:	b0ae      	sub	sp, #184	; 0xb8
   14af2:	9027      	str	r0, [sp, #156]	; 0x9c
   14af4:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   14af6:	f646 207c 	movw	r0, #27260	; 0x6a7c
   14afa:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14afe:	f007 fd23 	bl	1c548 <os_sem_release>
   14b02:	900d      	str	r0, [sp, #52]	; 0x34
   14b04:	e7ff      	b.n	14b06 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   14b06:	f247 30b8 	movw	r0, #29624	; 0x73b8
   14b0a:	f2c0 0002 	movt	r0, #2
   14b0e:	6800      	ldr	r0, [r0, #0]
   14b10:	a90d      	add	r1, sp, #52	; 0x34
   14b12:	910e      	str	r1, [sp, #56]	; 0x38
   14b14:	900f      	str	r0, [sp, #60]	; 0x3c
   14b16:	980e      	ldr	r0, [sp, #56]	; 0x38
   14b18:	9029      	str	r0, [sp, #164]	; 0xa4
   14b1a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14b1c:	912a      	str	r1, [sp, #168]	; 0xa8
   14b1e:	6802      	ldr	r2, [r0, #0]
   14b20:	680b      	ldr	r3, [r1, #0]
   14b22:	429a      	cmp	r2, r3
   14b24:	900c      	str	r0, [sp, #48]	; 0x30
   14b26:	910b      	str	r1, [sp, #44]	; 0x2c
   14b28:	d102      	bne.n	14b30 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   14b2a:	e7ff      	b.n	14b2c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   14b2c:	b02e      	add	sp, #184	; 0xb8
   14b2e:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   14b30:	f247 4010 	movw	r0, #29712	; 0x7410
   14b34:	f2c0 0002 	movt	r0, #2
   14b38:	6801      	ldr	r1, [r0, #0]
   14b3a:	980c      	ldr	r0, [sp, #48]	; 0x30
   14b3c:	901f      	str	r0, [sp, #124]	; 0x7c
   14b3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14b40:	9220      	str	r2, [sp, #128]	; 0x80
   14b42:	f247 5328 	movw	r3, #29992	; 0x7528
   14b46:	f2c0 0302 	movt	r3, #2
   14b4a:	681b      	ldr	r3, [r3, #0]
   14b4c:	f247 4c30 	movw	ip, #29744	; 0x7430
   14b50:	f2c0 0c02 	movt	ip, #2
   14b54:	f8dc c000 	ldr.w	ip, [ip]
   14b58:	46ee      	mov	lr, sp
   14b5a:	2400      	movs	r4, #0
   14b5c:	f8ce 4000 	str.w	r4, [lr]
   14b60:	a821      	add	r0, sp, #132	; 0x84
   14b62:	2201      	movs	r2, #1
   14b64:	910a      	str	r1, [sp, #40]	; 0x28
   14b66:	4619      	mov	r1, r3
   14b68:	4663      	mov	r3, ip
   14b6a:	f7f4 f81b 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14b6e:	e7ff      	b.n	14b70 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   14b70:	a81f      	add	r0, sp, #124	; 0x7c
   14b72:	901c      	str	r0, [sp, #112]	; 0x70
   14b74:	a820      	add	r0, sp, #128	; 0x80
   14b76:	901d      	str	r0, [sp, #116]	; 0x74
   14b78:	a821      	add	r0, sp, #132	; 0x84
   14b7a:	901e      	str	r0, [sp, #120]	; 0x78
   14b7c:	981c      	ldr	r0, [sp, #112]	; 0x70
   14b7e:	902b      	str	r0, [sp, #172]	; 0xac
   14b80:	991d      	ldr	r1, [sp, #116]	; 0x74
   14b82:	912c      	str	r1, [sp, #176]	; 0xb0
   14b84:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14b86:	922d      	str	r2, [sp, #180]	; 0xb4
   14b88:	f249 4347 	movw	r3, #37959	; 0x9447
   14b8c:	f2c0 0300 	movt	r3, #0
   14b90:	9109      	str	r1, [sp, #36]	; 0x24
   14b92:	4619      	mov	r1, r3
   14b94:	9208      	str	r2, [sp, #32]
   14b96:	f7f4 fc8e 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14b9a:	9007      	str	r0, [sp, #28]
   14b9c:	9106      	str	r1, [sp, #24]
   14b9e:	e7ff      	b.n	14ba0 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   14ba0:	f249 4147 	movw	r1, #37959	; 0x9447
   14ba4:	f2c0 0100 	movt	r1, #0
   14ba8:	9809      	ldr	r0, [sp, #36]	; 0x24
   14baa:	f7f4 fc84 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14bae:	9005      	str	r0, [sp, #20]
   14bb0:	9104      	str	r1, [sp, #16]
   14bb2:	e7ff      	b.n	14bb4 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   14bb4:	f648 21ff 	movw	r1, #35583	; 0x8aff
   14bb8:	f2c0 0101 	movt	r1, #1
   14bbc:	9808      	ldr	r0, [sp, #32]
   14bbe:	f7f4 fc8f 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14bc2:	9003      	str	r0, [sp, #12]
   14bc4:	9102      	str	r1, [sp, #8]
   14bc6:	e7ff      	b.n	14bc8 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   14bc8:	9807      	ldr	r0, [sp, #28]
   14bca:	9016      	str	r0, [sp, #88]	; 0x58
   14bcc:	9906      	ldr	r1, [sp, #24]
   14bce:	9117      	str	r1, [sp, #92]	; 0x5c
   14bd0:	9a05      	ldr	r2, [sp, #20]
   14bd2:	9218      	str	r2, [sp, #96]	; 0x60
   14bd4:	9b04      	ldr	r3, [sp, #16]
   14bd6:	9319      	str	r3, [sp, #100]	; 0x64
   14bd8:	f8dd c00c 	ldr.w	ip, [sp, #12]
   14bdc:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   14be0:	f8dd e008 	ldr.w	lr, [sp, #8]
   14be4:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   14be8:	466c      	mov	r4, sp
   14bea:	2503      	movs	r5, #3
   14bec:	6025      	str	r5, [r4, #0]
   14bee:	a810      	add	r0, sp, #64	; 0x40
   14bf0:	ab16      	add	r3, sp, #88	; 0x58
   14bf2:	990a      	ldr	r1, [sp, #40]	; 0x28
   14bf4:	462a      	mov	r2, r5
   14bf6:	f7f3 ffd5 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14bfa:	e7ff      	b.n	14bfc <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   14bfc:	f247 701c 	movw	r0, #30492	; 0x771c
   14c00:	f2c0 0002 	movt	r0, #2
   14c04:	f003 fc8d 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14c08:	9001      	str	r0, [sp, #4]
   14c0a:	e7ff      	b.n	14c0c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   14c0c:	a810      	add	r0, sp, #64	; 0x40
   14c0e:	9901      	ldr	r1, [sp, #4]
   14c10:	f003 fcc4 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14c14:	defe      	udf	#254	; 0xfe

00014c16 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   14c16:	b580      	push	{r7, lr}
   14c18:	b084      	sub	sp, #16
   14c1a:	4601      	mov	r1, r0
   14c1c:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14c20:	b2c0      	uxtb	r0, r0
   14c22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14c26:	fba0 0202 	umull	r0, r2, r0, r2
   14c2a:	2a00      	cmp	r2, #0
   14c2c:	9001      	str	r0, [sp, #4]
   14c2e:	d110      	bne.n	14c52 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   14c30:	e7ff      	b.n	14c32 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   14c32:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14c36:	f2c1 0062 	movt	r0, #4194	; 0x1062
   14c3a:	9901      	ldr	r1, [sp, #4]
   14c3c:	fba1 0200 	umull	r0, r2, r1, r0
   14c40:	0992      	lsrs	r2, r2, #6
   14c42:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   14c44:	9000      	str	r0, [sp, #0]
   14c46:	4610      	mov	r0, r2
   14c48:	f007 fdfe 	bl	1c848 <os_time_delay>
   14c4c:	e7ff      	b.n	14c4e <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   14c4e:	b004      	add	sp, #16
   14c50:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14c52:	f247 6010 	movw	r0, #30224	; 0x7610
   14c56:	f2c0 0002 	movt	r0, #2
   14c5a:	f247 722c 	movw	r2, #30508	; 0x772c
   14c5e:	f2c0 0202 	movt	r2, #2
   14c62:	2121      	movs	r1, #33	; 0x21
   14c64:	f003 fc64 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14c68:	defe      	udf	#254	; 0xfe

00014c6a <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
   14c6a:	b082      	sub	sp, #8
   14c6c:	2000      	movs	r0, #0
        SPI {
   14c6e:	9000      	str	r0, [sp, #0]
   14c70:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
   14c72:	9800      	ldr	r0, [sp, #0]
   14c74:	9901      	ldr	r1, [sp, #4]
   14c76:	b002      	add	sp, #8
   14c78:	4770      	bx	lr

00014c7a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
   14c7a:	b5b0      	push	{r4, r5, r7, lr}
   14c7c:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
   14c80:	9077      	str	r0, [sp, #476]	; 0x1dc
   14c82:	9178      	str	r1, [sp, #480]	; 0x1e0
   14c84:	9279      	str	r2, [sp, #484]	; 0x1e4
   14c86:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
   14c88:	9028      	str	r0, [sp, #160]	; 0xa0
   14c8a:	4608      	mov	r0, r1
   14c8c:	9127      	str	r1, [sp, #156]	; 0x9c
   14c8e:	4619      	mov	r1, r3
   14c90:	9226      	str	r2, [sp, #152]	; 0x98
   14c92:	f006 f9ad 	bl	1aff0 <hal_spi_config>
   14c96:	9029      	str	r0, [sp, #164]	; 0xa4
   14c98:	e7ff      	b.n	14c9a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
   14c9a:	f247 703c 	movw	r0, #30524	; 0x773c
   14c9e:	f2c0 0002 	movt	r0, #2
   14ca2:	6800      	ldr	r0, [r0, #0]
   14ca4:	a929      	add	r1, sp, #164	; 0xa4
   14ca6:	912a      	str	r1, [sp, #168]	; 0xa8
   14ca8:	902b      	str	r0, [sp, #172]	; 0xac
   14caa:	982a      	ldr	r0, [sp, #168]	; 0xa8
   14cac:	907b      	str	r0, [sp, #492]	; 0x1ec
   14cae:	992b      	ldr	r1, [sp, #172]	; 0xac
   14cb0:	917c      	str	r1, [sp, #496]	; 0x1f0
   14cb2:	6802      	ldr	r2, [r0, #0]
   14cb4:	680b      	ldr	r3, [r1, #0]
   14cb6:	429a      	cmp	r2, r3
   14cb8:	9025      	str	r0, [sp, #148]	; 0x94
   14cba:	9124      	str	r1, [sp, #144]	; 0x90
   14cbc:	d105      	bne.n	14cca <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
   14cbe:	e7ff      	b.n	14cc0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
   14cc0:	9827      	ldr	r0, [sp, #156]	; 0x9c
   14cc2:	f006 f9b1 	bl	1b028 <hal_spi_enable>
   14cc6:	9043      	str	r0, [sp, #268]	; 0x10c
   14cc8:	e072      	b.n	14db0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
   14cca:	f247 7094 	movw	r0, #30612	; 0x7794
   14cce:	f2c0 0002 	movt	r0, #2
   14cd2:	6801      	ldr	r1, [r0, #0]
   14cd4:	9825      	ldr	r0, [sp, #148]	; 0x94
   14cd6:	903b      	str	r0, [sp, #236]	; 0xec
   14cd8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14cda:	923c      	str	r2, [sp, #240]	; 0xf0
   14cdc:	f247 73b0 	movw	r3, #30640	; 0x77b0
   14ce0:	f2c0 0302 	movt	r3, #2
   14ce4:	681b      	ldr	r3, [r3, #0]
   14ce6:	f247 7cb4 	movw	ip, #30644	; 0x77b4
   14cea:	f2c0 0c02 	movt	ip, #2
   14cee:	f8dc c000 	ldr.w	ip, [ip]
   14cf2:	46ee      	mov	lr, sp
   14cf4:	2400      	movs	r4, #0
   14cf6:	f8ce 4000 	str.w	r4, [lr]
   14cfa:	a83d      	add	r0, sp, #244	; 0xf4
   14cfc:	2201      	movs	r2, #1
   14cfe:	9123      	str	r1, [sp, #140]	; 0x8c
   14d00:	4619      	mov	r1, r3
   14d02:	4663      	mov	r3, ip
   14d04:	f7f3 ff4e 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14d08:	e7ff      	b.n	14d0a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
   14d0a:	a83b      	add	r0, sp, #236	; 0xec
   14d0c:	9038      	str	r0, [sp, #224]	; 0xe0
   14d0e:	a83c      	add	r0, sp, #240	; 0xf0
   14d10:	9039      	str	r0, [sp, #228]	; 0xe4
   14d12:	a83d      	add	r0, sp, #244	; 0xf4
   14d14:	903a      	str	r0, [sp, #232]	; 0xe8
   14d16:	9838      	ldr	r0, [sp, #224]	; 0xe0
   14d18:	907d      	str	r0, [sp, #500]	; 0x1f4
   14d1a:	9939      	ldr	r1, [sp, #228]	; 0xe4
   14d1c:	917e      	str	r1, [sp, #504]	; 0x1f8
   14d1e:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   14d20:	927f      	str	r2, [sp, #508]	; 0x1fc
   14d22:	f249 33f3 	movw	r3, #37875	; 0x93f3
   14d26:	f2c0 0300 	movt	r3, #0
   14d2a:	9122      	str	r1, [sp, #136]	; 0x88
   14d2c:	4619      	mov	r1, r3
   14d2e:	9221      	str	r2, [sp, #132]	; 0x84
   14d30:	f7f4 fb97 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14d34:	9020      	str	r0, [sp, #128]	; 0x80
   14d36:	911f      	str	r1, [sp, #124]	; 0x7c
   14d38:	e7ff      	b.n	14d3a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
   14d3a:	f249 31f3 	movw	r1, #37875	; 0x93f3
   14d3e:	f2c0 0100 	movt	r1, #0
   14d42:	9822      	ldr	r0, [sp, #136]	; 0x88
   14d44:	f7f4 fb8d 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14d48:	901e      	str	r0, [sp, #120]	; 0x78
   14d4a:	911d      	str	r1, [sp, #116]	; 0x74
   14d4c:	e7ff      	b.n	14d4e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
   14d4e:	f648 21ff 	movw	r1, #35583	; 0x8aff
   14d52:	f2c0 0101 	movt	r1, #1
   14d56:	9821      	ldr	r0, [sp, #132]	; 0x84
   14d58:	f7f4 fbc2 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14d5c:	901c      	str	r0, [sp, #112]	; 0x70
   14d5e:	911b      	str	r1, [sp, #108]	; 0x6c
   14d60:	e7ff      	b.n	14d62 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
   14d62:	9820      	ldr	r0, [sp, #128]	; 0x80
   14d64:	9032      	str	r0, [sp, #200]	; 0xc8
   14d66:	991f      	ldr	r1, [sp, #124]	; 0x7c
   14d68:	9133      	str	r1, [sp, #204]	; 0xcc
   14d6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14d6c:	9234      	str	r2, [sp, #208]	; 0xd0
   14d6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14d70:	9335      	str	r3, [sp, #212]	; 0xd4
   14d72:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
   14d76:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
   14d7a:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
   14d7e:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
   14d82:	466c      	mov	r4, sp
   14d84:	2503      	movs	r5, #3
   14d86:	6025      	str	r5, [r4, #0]
   14d88:	a82c      	add	r0, sp, #176	; 0xb0
   14d8a:	ab32      	add	r3, sp, #200	; 0xc8
   14d8c:	9923      	ldr	r1, [sp, #140]	; 0x8c
   14d8e:	462a      	mov	r2, r5
   14d90:	f7f3 ff08 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14d94:	e7ff      	b.n	14d96 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
   14d96:	f247 70d0 	movw	r0, #30672	; 0x77d0
   14d9a:	f2c0 0002 	movt	r0, #2
   14d9e:	f003 fbc0 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14da2:	901a      	str	r0, [sp, #104]	; 0x68
   14da4:	e7ff      	b.n	14da6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
   14da6:	a82c      	add	r0, sp, #176	; 0xb0
   14da8:	991a      	ldr	r1, [sp, #104]	; 0x68
   14daa:	f003 fbf7 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14dae:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
   14db0:	f247 703c 	movw	r0, #30524	; 0x773c
   14db4:	f2c0 0002 	movt	r0, #2
   14db8:	6800      	ldr	r0, [r0, #0]
   14dba:	a943      	add	r1, sp, #268	; 0x10c
   14dbc:	9144      	str	r1, [sp, #272]	; 0x110
   14dbe:	9045      	str	r0, [sp, #276]	; 0x114
   14dc0:	9844      	ldr	r0, [sp, #272]	; 0x110
   14dc2:	9080      	str	r0, [sp, #512]	; 0x200
   14dc4:	9945      	ldr	r1, [sp, #276]	; 0x114
   14dc6:	9181      	str	r1, [sp, #516]	; 0x204
   14dc8:	6802      	ldr	r2, [r0, #0]
   14dca:	680b      	ldr	r3, [r1, #0]
   14dcc:	429a      	cmp	r2, r3
   14dce:	9019      	str	r0, [sp, #100]	; 0x64
   14dd0:	9118      	str	r1, [sp, #96]	; 0x60
   14dd2:	d106      	bne.n	14de2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
   14dd4:	e7ff      	b.n	14dd6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
   14dd6:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
   14dd8:	9826      	ldr	r0, [sp, #152]	; 0x98
   14dda:	f005 fcfb 	bl	1a7d4 <hal_gpio_init_out>
   14dde:	905d      	str	r0, [sp, #372]	; 0x174
   14de0:	e072      	b.n	14ec8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
   14de2:	f247 7094 	movw	r0, #30612	; 0x7794
   14de6:	f2c0 0002 	movt	r0, #2
   14dea:	6801      	ldr	r1, [r0, #0]
   14dec:	9819      	ldr	r0, [sp, #100]	; 0x64
   14dee:	9055      	str	r0, [sp, #340]	; 0x154
   14df0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   14df2:	9256      	str	r2, [sp, #344]	; 0x158
   14df4:	f247 73f8 	movw	r3, #30712	; 0x77f8
   14df8:	f2c0 0302 	movt	r3, #2
   14dfc:	681b      	ldr	r3, [r3, #0]
   14dfe:	f247 7cb4 	movw	ip, #30644	; 0x77b4
   14e02:	f2c0 0c02 	movt	ip, #2
   14e06:	f8dc c000 	ldr.w	ip, [ip]
   14e0a:	46ee      	mov	lr, sp
   14e0c:	2400      	movs	r4, #0
   14e0e:	f8ce 4000 	str.w	r4, [lr]
   14e12:	a857      	add	r0, sp, #348	; 0x15c
   14e14:	2201      	movs	r2, #1
   14e16:	9117      	str	r1, [sp, #92]	; 0x5c
   14e18:	4619      	mov	r1, r3
   14e1a:	4663      	mov	r3, ip
   14e1c:	f7f3 fec2 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14e20:	e7ff      	b.n	14e22 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
   14e22:	a855      	add	r0, sp, #340	; 0x154
   14e24:	9052      	str	r0, [sp, #328]	; 0x148
   14e26:	a856      	add	r0, sp, #344	; 0x158
   14e28:	9053      	str	r0, [sp, #332]	; 0x14c
   14e2a:	a857      	add	r0, sp, #348	; 0x15c
   14e2c:	9054      	str	r0, [sp, #336]	; 0x150
   14e2e:	9852      	ldr	r0, [sp, #328]	; 0x148
   14e30:	9082      	str	r0, [sp, #520]	; 0x208
   14e32:	9953      	ldr	r1, [sp, #332]	; 0x14c
   14e34:	9183      	str	r1, [sp, #524]	; 0x20c
   14e36:	9a54      	ldr	r2, [sp, #336]	; 0x150
   14e38:	9284      	str	r2, [sp, #528]	; 0x210
   14e3a:	f249 33f3 	movw	r3, #37875	; 0x93f3
   14e3e:	f2c0 0300 	movt	r3, #0
   14e42:	9116      	str	r1, [sp, #88]	; 0x58
   14e44:	4619      	mov	r1, r3
   14e46:	9215      	str	r2, [sp, #84]	; 0x54
   14e48:	f7f4 fb0b 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14e4c:	9014      	str	r0, [sp, #80]	; 0x50
   14e4e:	9113      	str	r1, [sp, #76]	; 0x4c
   14e50:	e7ff      	b.n	14e52 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
   14e52:	f249 31f3 	movw	r1, #37875	; 0x93f3
   14e56:	f2c0 0100 	movt	r1, #0
   14e5a:	9816      	ldr	r0, [sp, #88]	; 0x58
   14e5c:	f7f4 fb01 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14e60:	9012      	str	r0, [sp, #72]	; 0x48
   14e62:	9111      	str	r1, [sp, #68]	; 0x44
   14e64:	e7ff      	b.n	14e66 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
   14e66:	f648 21ff 	movw	r1, #35583	; 0x8aff
   14e6a:	f2c0 0101 	movt	r1, #1
   14e6e:	9815      	ldr	r0, [sp, #84]	; 0x54
   14e70:	f7f4 fb36 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14e74:	9010      	str	r0, [sp, #64]	; 0x40
   14e76:	910f      	str	r1, [sp, #60]	; 0x3c
   14e78:	e7ff      	b.n	14e7a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
   14e7a:	9814      	ldr	r0, [sp, #80]	; 0x50
   14e7c:	904c      	str	r0, [sp, #304]	; 0x130
   14e7e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   14e80:	914d      	str	r1, [sp, #308]	; 0x134
   14e82:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14e84:	924e      	str	r2, [sp, #312]	; 0x138
   14e86:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14e88:	934f      	str	r3, [sp, #316]	; 0x13c
   14e8a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   14e8e:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
   14e92:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   14e96:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
   14e9a:	466c      	mov	r4, sp
   14e9c:	2503      	movs	r5, #3
   14e9e:	6025      	str	r5, [r4, #0]
   14ea0:	a846      	add	r0, sp, #280	; 0x118
   14ea2:	ab4c      	add	r3, sp, #304	; 0x130
   14ea4:	9917      	ldr	r1, [sp, #92]	; 0x5c
   14ea6:	462a      	mov	r2, r5
   14ea8:	f7f3 fe7c 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14eac:	e7ff      	b.n	14eae <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
   14eae:	f247 70fc 	movw	r0, #30716	; 0x77fc
   14eb2:	f2c0 0002 	movt	r0, #2
   14eb6:	f003 fb34 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14eba:	900e      	str	r0, [sp, #56]	; 0x38
   14ebc:	e7ff      	b.n	14ebe <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
   14ebe:	a846      	add	r0, sp, #280	; 0x118
   14ec0:	990e      	ldr	r1, [sp, #56]	; 0x38
   14ec2:	f003 fb6b 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14ec6:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
   14ec8:	f247 703c 	movw	r0, #30524	; 0x773c
   14ecc:	f2c0 0002 	movt	r0, #2
   14ed0:	6800      	ldr	r0, [r0, #0]
   14ed2:	a95d      	add	r1, sp, #372	; 0x174
   14ed4:	915e      	str	r1, [sp, #376]	; 0x178
   14ed6:	905f      	str	r0, [sp, #380]	; 0x17c
   14ed8:	985e      	ldr	r0, [sp, #376]	; 0x178
   14eda:	9085      	str	r0, [sp, #532]	; 0x214
   14edc:	995f      	ldr	r1, [sp, #380]	; 0x17c
   14ede:	9186      	str	r1, [sp, #536]	; 0x218
   14ee0:	6802      	ldr	r2, [r0, #0]
   14ee2:	680b      	ldr	r3, [r1, #0]
   14ee4:	429a      	cmp	r2, r3
   14ee6:	900d      	str	r0, [sp, #52]	; 0x34
   14ee8:	910c      	str	r1, [sp, #48]	; 0x30
   14eea:	d109      	bne.n	14f00 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
   14eec:	e7ff      	b.n	14eee <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
   14eee:	9827      	ldr	r0, [sp, #156]	; 0x9c
   14ef0:	9928      	ldr	r1, [sp, #160]	; 0xa0
   14ef2:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
   14ef4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14ef6:	604a      	str	r2, [r1, #4]
   14ef8:	2001      	movs	r0, #1
        Ok(())
    }
   14efa:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
   14efe:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
   14f00:	f247 7094 	movw	r0, #30612	; 0x7794
   14f04:	f2c0 0002 	movt	r0, #2
   14f08:	6801      	ldr	r1, [r0, #0]
   14f0a:	980d      	ldr	r0, [sp, #52]	; 0x34
   14f0c:	906f      	str	r0, [sp, #444]	; 0x1bc
   14f0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14f10:	9270      	str	r2, [sp, #448]	; 0x1c0
   14f12:	f647 0324 	movw	r3, #30756	; 0x7824
   14f16:	f2c0 0302 	movt	r3, #2
   14f1a:	681b      	ldr	r3, [r3, #0]
   14f1c:	f247 7cb4 	movw	ip, #30644	; 0x77b4
   14f20:	f2c0 0c02 	movt	ip, #2
   14f24:	f8dc c000 	ldr.w	ip, [ip]
   14f28:	46ee      	mov	lr, sp
   14f2a:	2400      	movs	r4, #0
   14f2c:	f8ce 4000 	str.w	r4, [lr]
   14f30:	a871      	add	r0, sp, #452	; 0x1c4
   14f32:	2201      	movs	r2, #1
   14f34:	910b      	str	r1, [sp, #44]	; 0x2c
   14f36:	4619      	mov	r1, r3
   14f38:	4663      	mov	r3, ip
   14f3a:	f7f3 fe33 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14f3e:	e7ff      	b.n	14f40 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
   14f40:	a86f      	add	r0, sp, #444	; 0x1bc
   14f42:	906c      	str	r0, [sp, #432]	; 0x1b0
   14f44:	a870      	add	r0, sp, #448	; 0x1c0
   14f46:	906d      	str	r0, [sp, #436]	; 0x1b4
   14f48:	a871      	add	r0, sp, #452	; 0x1c4
   14f4a:	906e      	str	r0, [sp, #440]	; 0x1b8
   14f4c:	986c      	ldr	r0, [sp, #432]	; 0x1b0
   14f4e:	9087      	str	r0, [sp, #540]	; 0x21c
   14f50:	996d      	ldr	r1, [sp, #436]	; 0x1b4
   14f52:	9188      	str	r1, [sp, #544]	; 0x220
   14f54:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
   14f56:	9289      	str	r2, [sp, #548]	; 0x224
   14f58:	f249 33f3 	movw	r3, #37875	; 0x93f3
   14f5c:	f2c0 0300 	movt	r3, #0
   14f60:	910a      	str	r1, [sp, #40]	; 0x28
   14f62:	4619      	mov	r1, r3
   14f64:	9209      	str	r2, [sp, #36]	; 0x24
   14f66:	f7f4 fa7c 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14f6a:	9008      	str	r0, [sp, #32]
   14f6c:	9107      	str	r1, [sp, #28]
   14f6e:	e7ff      	b.n	14f70 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
   14f70:	f249 31f3 	movw	r1, #37875	; 0x93f3
   14f74:	f2c0 0100 	movt	r1, #0
   14f78:	980a      	ldr	r0, [sp, #40]	; 0x28
   14f7a:	f7f4 fa72 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14f7e:	9006      	str	r0, [sp, #24]
   14f80:	9105      	str	r1, [sp, #20]
   14f82:	e7ff      	b.n	14f84 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
   14f84:	f648 21ff 	movw	r1, #35583	; 0x8aff
   14f88:	f2c0 0101 	movt	r1, #1
   14f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
   14f8e:	f7f4 faa7 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14f92:	9004      	str	r0, [sp, #16]
   14f94:	9103      	str	r1, [sp, #12]
   14f96:	e7ff      	b.n	14f98 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
   14f98:	9808      	ldr	r0, [sp, #32]
   14f9a:	9066      	str	r0, [sp, #408]	; 0x198
   14f9c:	9907      	ldr	r1, [sp, #28]
   14f9e:	9167      	str	r1, [sp, #412]	; 0x19c
   14fa0:	9a06      	ldr	r2, [sp, #24]
   14fa2:	9268      	str	r2, [sp, #416]	; 0x1a0
   14fa4:	9b05      	ldr	r3, [sp, #20]
   14fa6:	9369      	str	r3, [sp, #420]	; 0x1a4
   14fa8:	f8dd c010 	ldr.w	ip, [sp, #16]
   14fac:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
   14fb0:	f8dd e00c 	ldr.w	lr, [sp, #12]
   14fb4:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
   14fb8:	466c      	mov	r4, sp
   14fba:	2503      	movs	r5, #3
   14fbc:	6025      	str	r5, [r4, #0]
   14fbe:	a860      	add	r0, sp, #384	; 0x180
   14fc0:	ab66      	add	r3, sp, #408	; 0x198
   14fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14fc4:	462a      	mov	r2, r5
   14fc6:	f7f3 fded 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14fca:	e7ff      	b.n	14fcc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
   14fcc:	f647 0028 	movw	r0, #30760	; 0x7828
   14fd0:	f2c0 0002 	movt	r0, #2
   14fd4:	f003 faa5 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14fd8:	9002      	str	r0, [sp, #8]
   14fda:	e7ff      	b.n	14fdc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
   14fdc:	a860      	add	r0, sp, #384	; 0x180
   14fde:	9902      	ldr	r1, [sp, #8]
   14fe0:	f003 fadc 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14fe4:	defe      	udf	#254	; 0xfe

00014fe6 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
   14fe6:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
   14fe8:	4770      	bx	lr

00014fea <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
   14fea:	b5b0      	push	{r4, r5, r7, lr}
   14fec:	b0b0      	sub	sp, #192	; 0xc0
   14fee:	9029      	str	r0, [sp, #164]	; 0xa4
   14ff0:	912a      	str	r1, [sp, #168]	; 0xa8
   14ff2:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
   14ff4:	900e      	str	r0, [sp, #56]	; 0x38
   14ff6:	4608      	mov	r0, r1
   14ff8:	910d      	str	r1, [sp, #52]	; 0x34
   14ffa:	4611      	mov	r1, r2
   14ffc:	f005 fbea 	bl	1a7d4 <hal_gpio_init_out>
   15000:	900f      	str	r0, [sp, #60]	; 0x3c
   15002:	e7ff      	b.n	15004 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
   15004:	f247 703c 	movw	r0, #30524	; 0x773c
   15008:	f2c0 0002 	movt	r0, #2
   1500c:	6800      	ldr	r0, [r0, #0]
   1500e:	a90f      	add	r1, sp, #60	; 0x3c
   15010:	9110      	str	r1, [sp, #64]	; 0x40
   15012:	9011      	str	r0, [sp, #68]	; 0x44
   15014:	9810      	ldr	r0, [sp, #64]	; 0x40
   15016:	902b      	str	r0, [sp, #172]	; 0xac
   15018:	9911      	ldr	r1, [sp, #68]	; 0x44
   1501a:	912c      	str	r1, [sp, #176]	; 0xb0
   1501c:	6802      	ldr	r2, [r0, #0]
   1501e:	680b      	ldr	r3, [r1, #0]
   15020:	429a      	cmp	r2, r3
   15022:	900c      	str	r0, [sp, #48]	; 0x30
   15024:	910b      	str	r1, [sp, #44]	; 0x2c
   15026:	d106      	bne.n	15036 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
   15028:	e7ff      	b.n	1502a <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
   1502a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1502c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1502e:	6008      	str	r0, [r1, #0]
   15030:	2001      	movs	r0, #1
        Ok(())
    }
   15032:	b030      	add	sp, #192	; 0xc0
   15034:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
   15036:	f247 7094 	movw	r0, #30612	; 0x7794
   1503a:	f2c0 0002 	movt	r0, #2
   1503e:	6801      	ldr	r1, [r0, #0]
   15040:	980c      	ldr	r0, [sp, #48]	; 0x30
   15042:	9021      	str	r0, [sp, #132]	; 0x84
   15044:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15046:	9222      	str	r2, [sp, #136]	; 0x88
   15048:	f647 034c 	movw	r3, #30796	; 0x784c
   1504c:	f2c0 0302 	movt	r3, #2
   15050:	681b      	ldr	r3, [r3, #0]
   15052:	f247 7cb4 	movw	ip, #30644	; 0x77b4
   15056:	f2c0 0c02 	movt	ip, #2
   1505a:	f8dc c000 	ldr.w	ip, [ip]
   1505e:	46ee      	mov	lr, sp
   15060:	2400      	movs	r4, #0
   15062:	f8ce 4000 	str.w	r4, [lr]
   15066:	a823      	add	r0, sp, #140	; 0x8c
   15068:	2201      	movs	r2, #1
   1506a:	910a      	str	r1, [sp, #40]	; 0x28
   1506c:	4619      	mov	r1, r3
   1506e:	4663      	mov	r3, ip
   15070:	f7f3 fd98 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   15074:	e7ff      	b.n	15076 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
   15076:	a821      	add	r0, sp, #132	; 0x84
   15078:	901e      	str	r0, [sp, #120]	; 0x78
   1507a:	a822      	add	r0, sp, #136	; 0x88
   1507c:	901f      	str	r0, [sp, #124]	; 0x7c
   1507e:	a823      	add	r0, sp, #140	; 0x8c
   15080:	9020      	str	r0, [sp, #128]	; 0x80
   15082:	981e      	ldr	r0, [sp, #120]	; 0x78
   15084:	902d      	str	r0, [sp, #180]	; 0xb4
   15086:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15088:	912e      	str	r1, [sp, #184]	; 0xb8
   1508a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1508c:	922f      	str	r2, [sp, #188]	; 0xbc
   1508e:	f249 33f3 	movw	r3, #37875	; 0x93f3
   15092:	f2c0 0300 	movt	r3, #0
   15096:	9109      	str	r1, [sp, #36]	; 0x24
   15098:	4619      	mov	r1, r3
   1509a:	9208      	str	r2, [sp, #32]
   1509c:	f7f4 f9e1 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   150a0:	9007      	str	r0, [sp, #28]
   150a2:	9106      	str	r1, [sp, #24]
   150a4:	e7ff      	b.n	150a6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
   150a6:	f249 31f3 	movw	r1, #37875	; 0x93f3
   150aa:	f2c0 0100 	movt	r1, #0
   150ae:	9809      	ldr	r0, [sp, #36]	; 0x24
   150b0:	f7f4 f9d7 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   150b4:	9005      	str	r0, [sp, #20]
   150b6:	9104      	str	r1, [sp, #16]
   150b8:	e7ff      	b.n	150ba <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
   150ba:	f648 21ff 	movw	r1, #35583	; 0x8aff
   150be:	f2c0 0101 	movt	r1, #1
   150c2:	9808      	ldr	r0, [sp, #32]
   150c4:	f7f4 fa0c 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   150c8:	9003      	str	r0, [sp, #12]
   150ca:	9102      	str	r1, [sp, #8]
   150cc:	e7ff      	b.n	150ce <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
   150ce:	9807      	ldr	r0, [sp, #28]
   150d0:	9018      	str	r0, [sp, #96]	; 0x60
   150d2:	9906      	ldr	r1, [sp, #24]
   150d4:	9119      	str	r1, [sp, #100]	; 0x64
   150d6:	9a05      	ldr	r2, [sp, #20]
   150d8:	921a      	str	r2, [sp, #104]	; 0x68
   150da:	9b04      	ldr	r3, [sp, #16]
   150dc:	931b      	str	r3, [sp, #108]	; 0x6c
   150de:	f8dd c00c 	ldr.w	ip, [sp, #12]
   150e2:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
   150e6:	f8dd e008 	ldr.w	lr, [sp, #8]
   150ea:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
   150ee:	466c      	mov	r4, sp
   150f0:	2503      	movs	r5, #3
   150f2:	6025      	str	r5, [r4, #0]
   150f4:	a812      	add	r0, sp, #72	; 0x48
   150f6:	ab18      	add	r3, sp, #96	; 0x60
   150f8:	990a      	ldr	r1, [sp, #40]	; 0x28
   150fa:	462a      	mov	r2, r5
   150fc:	f7f3 fd52 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   15100:	e7ff      	b.n	15102 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
   15102:	f647 0050 	movw	r0, #30800	; 0x7850
   15106:	f2c0 0002 	movt	r0, #2
   1510a:	f003 fa0a 	bl	18522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1510e:	9001      	str	r0, [sp, #4]
   15110:	e7ff      	b.n	15112 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
   15112:	a812      	add	r0, sp, #72	; 0x48
   15114:	9901      	ldr	r1, [sp, #4]
   15116:	f003 fa41 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1511a:	defe      	udf	#254	; 0xfe

0001511c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
   1511c:	b580      	push	{r7, lr}
   1511e:	b082      	sub	sp, #8
   15120:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
   15122:	6800      	ldr	r0, [r0, #0]
   15124:	2100      	movs	r1, #0
   15126:	f005 fb71 	bl	1a80c <hal_gpio_write>
   1512a:	e7ff      	b.n	1512c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
   1512c:	2001      	movs	r0, #1
        Ok(())
    }
   1512e:	b002      	add	sp, #8
   15130:	bd80      	pop	{r7, pc}

00015132 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
   15132:	b580      	push	{r7, lr}
   15134:	b082      	sub	sp, #8
   15136:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
   15138:	6800      	ldr	r0, [r0, #0]
   1513a:	2101      	movs	r1, #1
   1513c:	f005 fb66 	bl	1a80c <hal_gpio_write>
   15140:	e7ff      	b.n	15142 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
   15142:	2001      	movs	r0, #1
        Ok(())
    }
   15144:	b002      	add	sp, #8
   15146:	bd80      	pop	{r7, pc}

00015148 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
   15148:	4770      	bx	lr

0001514a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
   1514a:	b580      	push	{r7, lr}
   1514c:	b086      	sub	sp, #24
   1514e:	460a      	mov	r2, r1
   15150:	9003      	str	r0, [sp, #12]
   15152:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   15156:	b2c8      	uxtb	r0, r1
   15158:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1515c:	fba0 0101 	umull	r0, r1, r0, r1
   15160:	2900      	cmp	r1, #0
   15162:	9002      	str	r0, [sp, #8]
   15164:	d110      	bne.n	15188 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
   15166:	e7ff      	b.n	15168 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
   15168:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   1516c:	f2c1 0062 	movt	r0, #4194	; 0x1062
   15170:	9902      	ldr	r1, [sp, #8]
   15172:	fba1 0200 	umull	r0, r2, r1, r0
   15176:	0992      	lsrs	r2, r2, #6
   15178:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
   1517a:	9001      	str	r0, [sp, #4]
   1517c:	4610      	mov	r0, r2
   1517e:	f007 fb63 	bl	1c848 <os_time_delay>
   15182:	e7ff      	b.n	15184 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
   15184:	b006      	add	sp, #24
   15186:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   15188:	f647 0070 	movw	r0, #30832	; 0x7870
   1518c:	f2c0 0002 	movt	r0, #2
   15190:	f647 0260 	movw	r2, #30816	; 0x7860
   15194:	f2c0 0202 	movt	r2, #2
   15198:	2121      	movs	r1, #33	; 0x21
   1519a:	f003 f9c9 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1519e:	defe      	udf	#254	; 0xfe

000151a0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   151a0:	b082      	sub	sp, #8
   151a2:	9001      	str	r0, [sp, #4]
   151a4:	9000      	str	r0, [sp, #0]
   151a6:	e7ff      	b.n	151a8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   151a8:	9800      	ldr	r0, [sp, #0]
   151aa:	fab0 f180 	clz	r1, r0
   151ae:	0948      	lsrs	r0, r1, #5
   151b0:	b002      	add	sp, #8
   151b2:	4770      	bx	lr

000151b4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>:
   151b4:	b580      	push	{r7, lr}
   151b6:	b084      	sub	sp, #16
   151b8:	9002      	str	r0, [sp, #8]
   151ba:	9103      	str	r1, [sp, #12]
   151bc:	f000 f805 	bl	151ca <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   151c0:	9001      	str	r0, [sp, #4]
   151c2:	e7ff      	b.n	151c4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE+0x10>
   151c4:	9801      	ldr	r0, [sp, #4]
   151c6:	b004      	add	sp, #16
   151c8:	bd80      	pop	{r7, pc}

000151ca <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>:
   151ca:	b084      	sub	sp, #16
   151cc:	9001      	str	r0, [sp, #4]
   151ce:	9102      	str	r1, [sp, #8]
   151d0:	4408      	add	r0, r1
   151d2:	9003      	str	r0, [sp, #12]
   151d4:	9803      	ldr	r0, [sp, #12]
   151d6:	9000      	str	r0, [sp, #0]
   151d8:	e7ff      	b.n	151da <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE+0x10>
   151da:	9800      	ldr	r0, [sp, #0]
   151dc:	b004      	add	sp, #16
   151de:	4770      	bx	lr

000151e0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   151e0:	b081      	sub	sp, #4
   151e2:	b001      	add	sp, #4
   151e4:	4770      	bx	lr

000151e6 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   151e6:	b08a      	sub	sp, #40	; 0x28
   151e8:	9005      	str	r0, [sp, #20]
   151ea:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   151ec:	9107      	str	r1, [sp, #28]
   151ee:	21ff      	movs	r1, #255	; 0xff
   151f0:	9106      	str	r1, [sp, #24]
   151f2:	2108      	movs	r1, #8
   151f4:	9108      	str	r1, [sp, #32]
   151f6:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   151f8:	9003      	str	r0, [sp, #12]
   151fa:	9102      	str	r1, [sp, #8]
   151fc:	e016      	b.n	1522c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   151fe:	2001      	movs	r0, #1
   15200:	f88d 0013 	strb.w	r0, [sp, #19]
   15204:	e00c      	b.n	15220 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   15206:	2000      	movs	r0, #0
   15208:	f88d 0013 	strb.w	r0, [sp, #19]
   1520c:	e008      	b.n	15220 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   1520e:	9803      	ldr	r0, [sp, #12]
   15210:	6801      	ldr	r1, [r0, #0]
   15212:	6842      	ldr	r2, [r0, #4]
   15214:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   15218:	f172 0200 	sbcs.w	r2, r2, #0
   1521c:	d3ef      	bcc.n	151fe <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   1521e:	e7f2      	b.n	15206 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   15220:	f89d 0013 	ldrb.w	r0, [sp, #19]
   15224:	07c0      	lsls	r0, r0, #31
   15226:	2800      	cmp	r0, #0
   15228:	d10e      	bne.n	15248 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   1522a:	e009      	b.n	15240 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   1522c:	2001      	movs	r0, #1
   1522e:	9009      	str	r0, [sp, #36]	; 0x24
   15230:	9809      	ldr	r0, [sp, #36]	; 0x24
   15232:	9001      	str	r0, [sp, #4]
   15234:	e7ff      	b.n	15236 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   15236:	9802      	ldr	r0, [sp, #8]
   15238:	9901      	ldr	r1, [sp, #4]
   1523a:	4288      	cmp	r0, r1
   1523c:	d9df      	bls.n	151fe <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   1523e:	e7e6      	b.n	1520e <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   15240:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   15242:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   15246:	e007      	b.n	15258 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   15248:	9803      	ldr	r0, [sp, #12]
   1524a:	7801      	ldrb	r1, [r0, #0]
   1524c:	f88d 1011 	strb.w	r1, [sp, #17]
   15250:	2101      	movs	r1, #1
   15252:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   15256:	e7ff      	b.n	15258 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   15258:	f89d 0010 	ldrb.w	r0, [sp, #16]
   1525c:	f89d 1011 	ldrb.w	r1, [sp, #17]
   15260:	b00a      	add	sp, #40	; 0x28
   15262:	4770      	bx	lr

00015264 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>:
   15264:	b580      	push	{r7, lr}
   15266:	b090      	sub	sp, #64	; 0x40
   15268:	2200      	movs	r2, #0
   1526a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   1526e:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   15272:	2201      	movs	r2, #1
   15274:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   15278:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   1527c:	680a      	ldr	r2, [r1, #0]
   1527e:	2a00      	cmp	r2, #0
   15280:	9101      	str	r1, [sp, #4]
   15282:	9000      	str	r0, [sp, #0]
   15284:	d001      	beq.n	1528a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x26>
   15286:	e7ff      	b.n	15288 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x24>
   15288:	e004      	b.n	15294 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x30>
   1528a:	2000      	movs	r0, #0
   1528c:	9900      	ldr	r1, [sp, #0]
   1528e:	6008      	str	r0, [r1, #0]
   15290:	e032      	b.n	152f8 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   15292:	defe      	udf	#254	; 0xfe
   15294:	2000      	movs	r0, #0
   15296:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   1529a:	9901      	ldr	r1, [sp, #4]
   1529c:	684a      	ldr	r2, [r1, #4]
   1529e:	688b      	ldr	r3, [r1, #8]
   152a0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   152a4:	f8cd c010 	str.w	ip, [sp, #16]
   152a8:	9303      	str	r3, [sp, #12]
   152aa:	9202      	str	r2, [sp, #8]
   152ac:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   152b0:	9802      	ldr	r0, [sp, #8]
   152b2:	9a03      	ldr	r2, [sp, #12]
   152b4:	9b04      	ldr	r3, [sp, #16]
   152b6:	930d      	str	r3, [sp, #52]	; 0x34
   152b8:	920c      	str	r2, [sp, #48]	; 0x30
   152ba:	900b      	str	r0, [sp, #44]	; 0x2c
   152bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   152be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   152c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   152c2:	930a      	str	r3, [sp, #40]	; 0x28
   152c4:	9209      	str	r2, [sp, #36]	; 0x24
   152c6:	9008      	str	r0, [sp, #32]
   152c8:	a805      	add	r0, sp, #20
   152ca:	a908      	add	r1, sp, #32
   152cc:	f002 f90a 	bl	174e4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>
   152d0:	e7ff      	b.n	152d2 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x6e>
   152d2:	9805      	ldr	r0, [sp, #20]
   152d4:	9906      	ldr	r1, [sp, #24]
   152d6:	9a07      	ldr	r2, [sp, #28]
   152d8:	9b00      	ldr	r3, [sp, #0]
   152da:	60da      	str	r2, [r3, #12]
   152dc:	6099      	str	r1, [r3, #8]
   152de:	6058      	str	r0, [r3, #4]
   152e0:	2001      	movs	r0, #1
   152e2:	6018      	str	r0, [r3, #0]
   152e4:	e008      	b.n	152f8 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   152e6:	9801      	ldr	r0, [sp, #4]
   152e8:	6801      	ldr	r1, [r0, #0]
   152ea:	2901      	cmp	r1, #1
   152ec:	d00c      	beq.n	15308 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa4>
   152ee:	e015      	b.n	1531c <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb8>
   152f0:	2000      	movs	r0, #0
   152f2:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   152f6:	e7f6      	b.n	152e6 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   152f8:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   152fc:	07c0      	lsls	r0, r0, #31
   152fe:	2800      	cmp	r0, #0
   15300:	d1f6      	bne.n	152f0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x8c>
   15302:	e7f0      	b.n	152e6 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   15304:	b010      	add	sp, #64	; 0x40
   15306:	bd80      	pop	{r7, pc}
   15308:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   1530c:	07c0      	lsls	r0, r0, #31
   1530e:	2800      	cmp	r0, #0
   15310:	d0f8      	beq.n	15304 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   15312:	e7ff      	b.n	15314 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb0>
   15314:	2000      	movs	r0, #0
   15316:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   1531a:	e7f3      	b.n	15304 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   1531c:	e7f2      	b.n	15304 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>

0001531e <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   1531e:	b084      	sub	sp, #16
   15320:	9002      	str	r0, [sp, #8]
   15322:	6801      	ldr	r1, [r0, #0]
   15324:	2900      	cmp	r1, #0
   15326:	9000      	str	r0, [sp, #0]
   15328:	d001      	beq.n	1532e <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   1532a:	e7ff      	b.n	1532c <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   1532c:	e003      	b.n	15336 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   1532e:	2000      	movs	r0, #0
   15330:	9001      	str	r0, [sp, #4]
   15332:	e006      	b.n	15342 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   15334:	defe      	udf	#254	; 0xfe
   15336:	9800      	ldr	r0, [sp, #0]
   15338:	f100 0108 	add.w	r1, r0, #8
   1533c:	9103      	str	r1, [sp, #12]
   1533e:	9101      	str	r1, [sp, #4]
   15340:	e7ff      	b.n	15342 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   15342:	9801      	ldr	r0, [sp, #4]
   15344:	b004      	add	sp, #16
   15346:	4770      	bx	lr

00015348 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>:
   15348:	b510      	push	{r4, lr}
   1534a:	b088      	sub	sp, #32
   1534c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   15350:	468e      	mov	lr, r1
   15352:	4604      	mov	r4, r0
   15354:	f8ad 0010 	strh.w	r0, [sp, #16]
   15358:	f8ad 1012 	strh.w	r1, [sp, #18]
   1535c:	9205      	str	r2, [sp, #20]
   1535e:	9306      	str	r3, [sp, #24]
   15360:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   15364:	4601      	mov	r1, r0
   15366:	2800      	cmp	r0, #0
   15368:	9303      	str	r3, [sp, #12]
   1536a:	9202      	str	r2, [sp, #8]
   1536c:	f8cd c004 	str.w	ip, [sp, #4]
   15370:	d001      	beq.n	15376 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2e>
   15372:	e7ff      	b.n	15374 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2c>
   15374:	e006      	b.n	15384 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x3c>
   15376:	9802      	ldr	r0, [sp, #8]
   15378:	9903      	ldr	r1, [sp, #12]
   1537a:	9a01      	ldr	r2, [sp, #4]
   1537c:	f003 f88e 	bl	1849c <_ZN4core6option13expect_failed17had6579abaad447b4E>
   15380:	defe      	udf	#254	; 0xfe
   15382:	defe      	udf	#254	; 0xfe
   15384:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   15388:	4601      	mov	r1, r0
   1538a:	f8ad 001e 	strh.w	r0, [sp, #30]
   1538e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   15392:	2801      	cmp	r0, #1
   15394:	9100      	str	r1, [sp, #0]
   15396:	d103      	bne.n	153a0 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x58>
   15398:	e7ff      	b.n	1539a <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>
   1539a:	9800      	ldr	r0, [sp, #0]
   1539c:	b008      	add	sp, #32
   1539e:	bd10      	pop	{r4, pc}
   153a0:	e7fb      	b.n	1539a <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>

000153a2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   153a2:	b084      	sub	sp, #16
   153a4:	460b      	mov	r3, r1
   153a6:	4684      	mov	ip, r0
   153a8:	f88d 000c 	strb.w	r0, [sp, #12]
   153ac:	f88d 100d 	strb.w	r1, [sp, #13]
   153b0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   153b4:	07c1      	lsls	r1, r0, #31
   153b6:	2900      	cmp	r1, #0
   153b8:	9202      	str	r2, [sp, #8]
   153ba:	d001      	beq.n	153c0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   153bc:	e7ff      	b.n	153be <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   153be:	e009      	b.n	153d4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   153c0:	f647 0091 	movw	r0, #30865	; 0x7891
   153c4:	f2c0 0002 	movt	r0, #2
   153c8:	212b      	movs	r1, #43	; 0x2b
   153ca:	9a02      	ldr	r2, [sp, #8]
   153cc:	f003 f8b0 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   153d0:	defe      	udf	#254	; 0xfe
   153d2:	defe      	udf	#254	; 0xfe
   153d4:	f89d 000d 	ldrb.w	r0, [sp, #13]
   153d8:	4601      	mov	r1, r0
   153da:	f88d 000f 	strb.w	r0, [sp, #15]
   153de:	f89d 000c 	ldrb.w	r0, [sp, #12]
   153e2:	07c0      	lsls	r0, r0, #31
   153e4:	2800      	cmp	r0, #0
   153e6:	9101      	str	r1, [sp, #4]
   153e8:	d003      	beq.n	153f2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   153ea:	e7ff      	b.n	153ec <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   153ec:	9801      	ldr	r0, [sp, #4]
   153ee:	b004      	add	sp, #16
   153f0:	4770      	bx	lr
   153f2:	e7fb      	b.n	153ec <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

000153f4 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   153f4:	b088      	sub	sp, #32
   153f6:	9004      	str	r0, [sp, #16]
   153f8:	9105      	str	r1, [sp, #20]
   153fa:	9804      	ldr	r0, [sp, #16]
   153fc:	2800      	cmp	r0, #0
   153fe:	4601      	mov	r1, r0
   15400:	bf18      	it	ne
   15402:	2101      	movne	r1, #1
   15404:	2800      	cmp	r0, #0
   15406:	9203      	str	r2, [sp, #12]
   15408:	d001      	beq.n	1540e <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   1540a:	e7ff      	b.n	1540c <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   1540c:	e009      	b.n	15422 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   1540e:	f647 0091 	movw	r0, #30865	; 0x7891
   15412:	f2c0 0002 	movt	r0, #2
   15416:	212b      	movs	r1, #43	; 0x2b
   15418:	9a03      	ldr	r2, [sp, #12]
   1541a:	f003 f889 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1541e:	defe      	udf	#254	; 0xfe
   15420:	defe      	udf	#254	; 0xfe
   15422:	9804      	ldr	r0, [sp, #16]
   15424:	9905      	ldr	r1, [sp, #20]
   15426:	9006      	str	r0, [sp, #24]
   15428:	9107      	str	r1, [sp, #28]
   1542a:	9a04      	ldr	r2, [sp, #16]
   1542c:	2a00      	cmp	r2, #0
   1542e:	9002      	str	r0, [sp, #8]
   15430:	9101      	str	r1, [sp, #4]
   15432:	d004      	beq.n	1543e <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   15434:	e7ff      	b.n	15436 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   15436:	9802      	ldr	r0, [sp, #8]
   15438:	9901      	ldr	r1, [sp, #4]
   1543a:	b008      	add	sp, #32
   1543c:	4770      	bx	lr
   1543e:	e7fa      	b.n	15436 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

00015440 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>:
   15440:	b580      	push	{r7, lr}
   15442:	b082      	sub	sp, #8
   15444:	9001      	str	r0, [sp, #4]
   15446:	f000 f82b 	bl	154a0 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   1544a:	9000      	str	r0, [sp, #0]
   1544c:	e7ff      	b.n	1544e <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E+0xe>
   1544e:	2001      	movs	r0, #1
   15450:	9900      	ldr	r1, [sp, #0]
   15452:	4388      	bics	r0, r1
   15454:	b002      	add	sp, #8
   15456:	bd80      	pop	{r7, pc}

00015458 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   15458:	b082      	sub	sp, #8
   1545a:	9001      	str	r0, [sp, #4]
   1545c:	6800      	ldr	r0, [r0, #0]
   1545e:	2800      	cmp	r0, #0
   15460:	d104      	bne.n	1546c <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   15462:	e7ff      	b.n	15464 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   15464:	2000      	movs	r0, #0
   15466:	f88d 0003 	strb.w	r0, [sp, #3]
   1546a:	e003      	b.n	15474 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   1546c:	2001      	movs	r0, #1
   1546e:	f88d 0003 	strb.w	r0, [sp, #3]
   15472:	e7ff      	b.n	15474 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   15474:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15478:	b002      	add	sp, #8
   1547a:	4770      	bx	lr

0001547c <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>:
   1547c:	b082      	sub	sp, #8
   1547e:	9001      	str	r0, [sp, #4]
   15480:	6800      	ldr	r0, [r0, #0]
   15482:	2801      	cmp	r0, #1
   15484:	d004      	beq.n	15490 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x14>
   15486:	e7ff      	b.n	15488 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0xc>
   15488:	2000      	movs	r0, #0
   1548a:	f88d 0003 	strb.w	r0, [sp, #3]
   1548e:	e003      	b.n	15498 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   15490:	2001      	movs	r0, #1
   15492:	f88d 0003 	strb.w	r0, [sp, #3]
   15496:	e7ff      	b.n	15498 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   15498:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1549c:	b002      	add	sp, #8
   1549e:	4770      	bx	lr

000154a0 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>:
   154a0:	b082      	sub	sp, #8
   154a2:	9001      	str	r0, [sp, #4]
   154a4:	8800      	ldrh	r0, [r0, #0]
   154a6:	2801      	cmp	r0, #1
   154a8:	d004      	beq.n	154b4 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x14>
   154aa:	e7ff      	b.n	154ac <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0xc>
   154ac:	2000      	movs	r0, #0
   154ae:	f88d 0003 	strb.w	r0, [sp, #3]
   154b2:	e003      	b.n	154bc <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   154b4:	2001      	movs	r0, #1
   154b6:	f88d 0003 	strb.w	r0, [sp, #3]
   154ba:	e7ff      	b.n	154bc <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   154bc:	f89d 0003 	ldrb.w	r0, [sp, #3]
   154c0:	b002      	add	sp, #8
   154c2:	4770      	bx	lr

000154c4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   154c4:	b580      	push	{r7, lr}
   154c6:	b086      	sub	sp, #24
   154c8:	9000      	str	r0, [sp, #0]
   154ca:	2000      	movs	r0, #0
   154cc:	f88d 000f 	strb.w	r0, [sp, #15]
   154d0:	f88d 000e 	strb.w	r0, [sp, #14]
   154d4:	2001      	movs	r0, #1
   154d6:	f88d 000f 	strb.w	r0, [sp, #15]
   154da:	f88d 000e 	strb.w	r0, [sp, #14]
   154de:	9800      	ldr	r0, [sp, #0]
   154e0:	2800      	cmp	r0, #0
   154e2:	4601      	mov	r1, r0
   154e4:	bf18      	it	ne
   154e6:	2101      	movne	r1, #1
   154e8:	2800      	cmp	r0, #0
   154ea:	d001      	beq.n	154f0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   154ec:	e7ff      	b.n	154ee <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   154ee:	e004      	b.n	154fa <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   154f0:	2000      	movs	r0, #0
   154f2:	f88d 0004 	strb.w	r0, [sp, #4]
   154f6:	e019      	b.n	1552c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   154f8:	defe      	udf	#254	; 0xfe
   154fa:	2000      	movs	r0, #0
   154fc:	f88d 000f 	strb.w	r0, [sp, #15]
   15500:	9900      	ldr	r1, [sp, #0]
   15502:	9105      	str	r1, [sp, #20]
   15504:	f88d 000e 	strb.w	r0, [sp, #14]
   15508:	9102      	str	r1, [sp, #8]
   1550a:	9802      	ldr	r0, [sp, #8]
   1550c:	f7f5 f96f 	bl	a7ee <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   15510:	f88d 1005 	strb.w	r1, [sp, #5]
   15514:	f88d 0004 	strb.w	r0, [sp, #4]
   15518:	e7ff      	b.n	1551a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   1551a:	e007      	b.n	1552c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   1551c:	9800      	ldr	r0, [sp, #0]
   1551e:	2800      	cmp	r0, #0
   15520:	d110      	bne.n	15544 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   15522:	e019      	b.n	15558 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   15524:	2000      	movs	r0, #0
   15526:	f88d 000e 	strb.w	r0, [sp, #14]
   1552a:	e7f7      	b.n	1551c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   1552c:	f89d 000e 	ldrb.w	r0, [sp, #14]
   15530:	07c0      	lsls	r0, r0, #31
   15532:	2800      	cmp	r0, #0
   15534:	d1f6      	bne.n	15524 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   15536:	e7f1      	b.n	1551c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   15538:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1553c:	f89d 1005 	ldrb.w	r1, [sp, #5]
   15540:	b006      	add	sp, #24
   15542:	bd80      	pop	{r7, pc}
   15544:	f89d 000f 	ldrb.w	r0, [sp, #15]
   15548:	07c0      	lsls	r0, r0, #31
   1554a:	2800      	cmp	r0, #0
   1554c:	d0f4      	beq.n	15538 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   1554e:	e7ff      	b.n	15550 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   15550:	2000      	movs	r0, #0
   15552:	f88d 000f 	strb.w	r0, [sp, #15]
   15556:	e7ef      	b.n	15538 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   15558:	e7ee      	b.n	15538 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

0001555a <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>:
    fn clone(&self) -> Self {
   1555a:	b580      	push	{r7, lr}
   1555c:	b09c      	sub	sp, #112	; 0x70
   1555e:	911b      	str	r1, [sp, #108]	; 0x6c
   15560:	aa01      	add	r2, sp, #4
        Vec(self.0.clone())
   15562:	9000      	str	r0, [sp, #0]
   15564:	4610      	mov	r0, r2
   15566:	f000 fafc 	bl	15b62 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>
   1556a:	e7ff      	b.n	1556c <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE+0x12>
   1556c:	a901      	add	r1, sp, #4
   1556e:	2268      	movs	r2, #104	; 0x68
   15570:	9800      	ldr	r0, [sp, #0]
   15572:	f009 fbb1 	bl	1ecd8 <__aeabi_memcpy>
    }
   15576:	b01c      	add	sp, #112	; 0x70
   15578:	bd80      	pop	{r7, pc}

0001557a <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>:
    fn clone(&self) -> Self {
   1557a:	b580      	push	{r7, lr}
   1557c:	b0b6      	sub	sp, #216	; 0xd8
   1557e:	9135      	str	r1, [sp, #212]	; 0xd4
   15580:	aa02      	add	r2, sp, #8
        Vec(self.0.clone())
   15582:	9001      	str	r0, [sp, #4]
   15584:	4610      	mov	r0, r2
   15586:	f000 fb14 	bl	15bb2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>
   1558a:	e7ff      	b.n	1558c <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E+0x12>
   1558c:	a902      	add	r1, sp, #8
   1558e:	22cc      	movs	r2, #204	; 0xcc
   15590:	9801      	ldr	r0, [sp, #4]
   15592:	f009 fba1 	bl	1ecd8 <__aeabi_memcpy>
    }
   15596:	b036      	add	sp, #216	; 0xd8
   15598:	bd80      	pop	{r7, pc}

0001559a <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>:
    fn drop(&mut self) {
   1559a:	b580      	push	{r7, lr}
   1559c:	b084      	sub	sp, #16
   1559e:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   155a0:	f000 f84c 	bl	1563c <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>
   155a4:	9002      	str	r0, [sp, #8]
   155a6:	9101      	str	r1, [sp, #4]
   155a8:	e7ff      	b.n	155aa <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x10>
   155aa:	9802      	ldr	r0, [sp, #8]
   155ac:	9901      	ldr	r1, [sp, #4]
   155ae:	f001 fb7b 	bl	16ca8 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   155b2:	e7ff      	b.n	155b4 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1a>
   155b4:	e7ff      	b.n	155b6 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1c>
    }
   155b6:	b004      	add	sp, #16
   155b8:	bd80      	pop	{r7, pc}

000155ba <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>:
    fn drop(&mut self) {
   155ba:	b580      	push	{r7, lr}
   155bc:	b084      	sub	sp, #16
   155be:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   155c0:	f000 f848 	bl	15654 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   155c4:	9002      	str	r0, [sp, #8]
   155c6:	9101      	str	r1, [sp, #4]
   155c8:	e7ff      	b.n	155ca <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x10>
   155ca:	9802      	ldr	r0, [sp, #8]
   155cc:	9901      	ldr	r1, [sp, #4]
   155ce:	f001 fb6b 	bl	16ca8 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   155d2:	e7ff      	b.n	155d4 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1a>
   155d4:	e7ff      	b.n	155d6 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1c>
    }
   155d6:	b004      	add	sp, #16
   155d8:	bd80      	pop	{r7, pc}

000155da <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>:
    fn deref(&self) -> &[T] {
   155da:	b580      	push	{r7, lr}
   155dc:	b084      	sub	sp, #16
   155de:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   155e0:	f000 fb0f 	bl	15c02 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   155e4:	9002      	str	r0, [sp, #8]
   155e6:	9101      	str	r1, [sp, #4]
   155e8:	e7ff      	b.n	155ea <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E+0x10>
    }
   155ea:	9802      	ldr	r0, [sp, #8]
   155ec:	9901      	ldr	r1, [sp, #4]
   155ee:	b004      	add	sp, #16
   155f0:	bd80      	pop	{r7, pc}

000155f2 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>:
    fn deref(&self) -> &[T] {
   155f2:	b580      	push	{r7, lr}
   155f4:	b084      	sub	sp, #16
   155f6:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   155f8:	f000 fb18 	bl	15c2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   155fc:	9002      	str	r0, [sp, #8]
   155fe:	9101      	str	r1, [sp, #4]
   15600:	e7ff      	b.n	15602 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E+0x10>
    }
   15602:	9802      	ldr	r0, [sp, #8]
   15604:	9901      	ldr	r1, [sp, #4]
   15606:	b004      	add	sp, #16
   15608:	bd80      	pop	{r7, pc}

0001560a <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>:
    fn drop(&mut self) {
   1560a:	b580      	push	{r7, lr}
   1560c:	b086      	sub	sp, #24
   1560e:	9005      	str	r0, [sp, #20]
            ptr::drop_in_place(&mut self.vec[self.next..]);
   15610:	9003      	str	r0, [sp, #12]
   15612:	f000 f81f 	bl	15654 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   15616:	9002      	str	r0, [sp, #8]
   15618:	9101      	str	r1, [sp, #4]
   1561a:	e7ff      	b.n	1561c <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x12>
   1561c:	9803      	ldr	r0, [sp, #12]
   1561e:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   15622:	9104      	str	r1, [sp, #16]
   15624:	9a04      	ldr	r2, [sp, #16]
   15626:	9802      	ldr	r0, [sp, #8]
   15628:	9901      	ldr	r1, [sp, #4]
   1562a:	f001 fb4a 	bl	16cc2 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>
   1562e:	e7ff      	b.n	15630 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x26>
   15630:	e7ff      	b.n	15632 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x28>
   15632:	2000      	movs	r0, #0
            self.vec.0.len = 0;
   15634:	9903      	ldr	r1, [sp, #12]
   15636:	6008      	str	r0, [r1, #0]
    }
   15638:	b006      	add	sp, #24
   1563a:	bd80      	pop	{r7, pc}

0001563c <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>:

impl<T, N> ops::DerefMut for Vec<T, N>
where
    N: ArrayLength<T>,
{
    fn deref_mut(&mut self) -> &mut [T] {
   1563c:	b580      	push	{r7, lr}
   1563e:	b084      	sub	sp, #16
   15640:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   15642:	f000 f8ff 	bl	15844 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   15646:	9002      	str	r0, [sp, #8]
   15648:	9101      	str	r1, [sp, #4]
   1564a:	e7ff      	b.n	1564c <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E+0x10>
    }
   1564c:	9802      	ldr	r0, [sp, #8]
   1564e:	9901      	ldr	r1, [sp, #4]
   15650:	b004      	add	sp, #16
   15652:	bd80      	pop	{r7, pc}

00015654 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>:
    fn deref_mut(&mut self) -> &mut [T] {
   15654:	b580      	push	{r7, lr}
   15656:	b084      	sub	sp, #16
   15658:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   1565a:	f000 f908 	bl	1586e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   1565e:	9002      	str	r0, [sp, #8]
   15660:	9101      	str	r1, [sp, #4]
   15662:	e7ff      	b.n	15664 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E+0x10>
    }
   15664:	9802      	ldr	r0, [sp, #8]
   15666:	9901      	ldr	r1, [sp, #4]
   15668:	b004      	add	sp, #16
   1566a:	bd80      	pop	{r7, pc}

0001566c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   1566c:	b580      	push	{r7, lr}
   1566e:	b084      	sub	sp, #16
   15670:	9001      	str	r0, [sp, #4]
   15672:	9102      	str	r1, [sp, #8]
   15674:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   15676:	f000 f973 	bl	15960 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   1567a:	9000      	str	r0, [sp, #0]
   1567c:	e7ff      	b.n	1567e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE+0x12>
    }
   1567e:	9800      	ldr	r0, [sp, #0]
   15680:	f000 0001 	and.w	r0, r0, #1
   15684:	b004      	add	sp, #16
   15686:	bd80      	pop	{r7, pc}

00015688 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>:
    pub fn new() -> Self {
   15688:	b580      	push	{r7, lr}
   1568a:	b09c      	sub	sp, #112	; 0x70
   1568c:	a902      	add	r1, sp, #8
        Vec(crate::i::Vec::new())
   1568e:	9001      	str	r0, [sp, #4]
   15690:	4608      	mov	r0, r1
   15692:	f000 f8c8 	bl	15826 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   15696:	e7ff      	b.n	15698 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E+0x10>
   15698:	a902      	add	r1, sp, #8
   1569a:	2268      	movs	r2, #104	; 0x68
   1569c:	9801      	ldr	r0, [sp, #4]
   1569e:	f009 fb1b 	bl	1ecd8 <__aeabi_memcpy>
    }
   156a2:	b01c      	add	sp, #112	; 0x70
   156a4:	bd80      	pop	{r7, pc}

000156a6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>:
    pub fn new() -> Self {
   156a6:	b580      	push	{r7, lr}
   156a8:	b0b4      	sub	sp, #208	; 0xd0
   156aa:	a901      	add	r1, sp, #4
        Vec(crate::i::Vec::new())
   156ac:	9000      	str	r0, [sp, #0]
   156ae:	4608      	mov	r0, r1
   156b0:	f000 f8aa 	bl	15808 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   156b4:	e7ff      	b.n	156b6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE+0x10>
   156b6:	a901      	add	r1, sp, #4
   156b8:	22cc      	movs	r2, #204	; 0xcc
   156ba:	9800      	ldr	r0, [sp, #0]
   156bc:	f009 fb0c 	bl	1ecd8 <__aeabi_memcpy>
    }
   156c0:	b034      	add	sp, #208	; 0xd0
   156c2:	bd80      	pop	{r7, pc}

000156c4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   156c4:	b580      	push	{r7, lr}
   156c6:	b086      	sub	sp, #24
   156c8:	460a      	mov	r2, r1
   156ca:	9004      	str	r0, [sp, #16]
   156cc:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.0.push(item)
   156d0:	9203      	str	r2, [sp, #12]
   156d2:	f000 fa0b 	bl	15aec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>
   156d6:	9002      	str	r0, [sp, #8]
   156d8:	9101      	str	r1, [sp, #4]
   156da:	e7ff      	b.n	156dc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE+0x18>
    }
   156dc:	9802      	ldr	r0, [sp, #8]
   156de:	9901      	ldr	r1, [sp, #4]
   156e0:	b006      	add	sp, #24
   156e2:	bd80      	pop	{r7, pc}

000156e4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>:
    pub fn clear(&mut self) {
   156e4:	b580      	push	{r7, lr}
   156e6:	b082      	sub	sp, #8
   156e8:	9001      	str	r0, [sp, #4]
        self.0.clear()
   156ea:	f000 fa28 	bl	15b3e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>
   156ee:	e7ff      	b.n	156f0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E+0xc>
    }
   156f0:	b002      	add	sp, #8
   156f2:	bd80      	pop	{r7, pc}

000156f4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>:
    pub fn clear(&mut self) {
   156f4:	b580      	push	{r7, lr}
   156f6:	b082      	sub	sp, #8
   156f8:	9001      	str	r0, [sp, #4]
        self.0.clear()
   156fa:	f000 fa29 	bl	15b50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>
   156fe:	e7ff      	b.n	15700 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E+0xc>
    }
   15700:	b002      	add	sp, #8
   15702:	bd80      	pop	{r7, pc}

00015704 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>:
    fn into_iter(self) -> Self::IntoIter {
   15704:	b580      	push	{r7, lr}
   15706:	b0b6      	sub	sp, #216	; 0xd8
   15708:	aa03      	add	r2, sp, #12
   1570a:	23cc      	movs	r3, #204	; 0xcc
        IntoIter { vec: self, next: 0 }
   1570c:	9002      	str	r0, [sp, #8]
   1570e:	4610      	mov	r0, r2
   15710:	9201      	str	r2, [sp, #4]
   15712:	461a      	mov	r2, r3
   15714:	9300      	str	r3, [sp, #0]
   15716:	f009 fadf 	bl	1ecd8 <__aeabi_memcpy>
   1571a:	9802      	ldr	r0, [sp, #8]
   1571c:	9901      	ldr	r1, [sp, #4]
   1571e:	9a00      	ldr	r2, [sp, #0]
   15720:	f009 fada 	bl	1ecd8 <__aeabi_memcpy>
   15724:	2000      	movs	r0, #0
   15726:	9902      	ldr	r1, [sp, #8]
   15728:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    }
   1572c:	b036      	add	sp, #216	; 0xd8
   1572e:	bd80      	pop	{r7, pc}

00015730 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>:
    fn next(&mut self) -> Option<Self::Item> {
   15730:	b580      	push	{r7, lr}
   15732:	b08e      	sub	sp, #56	; 0x38
   15734:	900a      	str	r0, [sp, #40]	; 0x28
        if self.next < self.vec.len() {
   15736:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   1573a:	9008      	str	r0, [sp, #32]
   1573c:	9107      	str	r1, [sp, #28]
   1573e:	f7ff ff58 	bl	155f2 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>
   15742:	9006      	str	r0, [sp, #24]
   15744:	9105      	str	r1, [sp, #20]
   15746:	e7ff      	b.n	15748 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x18>
   15748:	9806      	ldr	r0, [sp, #24]
   1574a:	9905      	ldr	r1, [sp, #20]
   1574c:	f001 fa59 	bl	16c02 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15750:	9004      	str	r0, [sp, #16]
   15752:	e7ff      	b.n	15754 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x24>
   15754:	9807      	ldr	r0, [sp, #28]
   15756:	9904      	ldr	r1, [sp, #16]
   15758:	4288      	cmp	r0, r1
   1575a:	d304      	bcc.n	15766 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x36>
   1575c:	e7ff      	b.n	1575e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x2e>
   1575e:	2000      	movs	r0, #0
            None
   15760:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   15764:	e029      	b.n	157ba <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
                (self.vec.0.buffer.as_ptr() as *const T)
   15766:	9808      	ldr	r0, [sp, #32]
   15768:	1d01      	adds	r1, r0, #4
   1576a:	910c      	str	r1, [sp, #48]	; 0x30
   1576c:	910d      	str	r1, [sp, #52]	; 0x34
   1576e:	9103      	str	r1, [sp, #12]
   15770:	e7ff      	b.n	15772 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x42>
                    .add(self.next)
   15772:	9808      	ldr	r0, [sp, #32]
   15774:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
                (self.vec.0.buffer.as_ptr() as *const T)
   15778:	9803      	ldr	r0, [sp, #12]
   1577a:	f002 fc7f 	bl	1807c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   1577e:	9002      	str	r0, [sp, #8]
   15780:	e7ff      	b.n	15782 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x52>
   15782:	9802      	ldr	r0, [sp, #8]
   15784:	f002 fc85 	bl	18092 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>
   15788:	4601      	mov	r1, r0
   1578a:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
   1578e:	9101      	str	r1, [sp, #4]
   15790:	e7ff      	b.n	15792 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x62>
            self.next += 1;
   15792:	9808      	ldr	r0, [sp, #32]
   15794:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   15798:	1c4a      	adds	r2, r1, #1
   1579a:	4613      	mov	r3, r2
   1579c:	428a      	cmp	r2, r1
   1579e:	9300      	str	r3, [sp, #0]
   157a0:	d311      	bcc.n	157c6 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x96>
   157a2:	e7ff      	b.n	157a4 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x74>
   157a4:	9800      	ldr	r0, [sp, #0]
   157a6:	9908      	ldr	r1, [sp, #32]
   157a8:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
            Some(item)
   157ac:	9a01      	ldr	r2, [sp, #4]
   157ae:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
   157b2:	2301      	movs	r3, #1
   157b4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   157b8:	e7ff      	b.n	157ba <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
    }
   157ba:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   157be:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   157c2:	b00e      	add	sp, #56	; 0x38
   157c4:	bd80      	pop	{r7, pc}
            self.next += 1;
   157c6:	f647 1030 	movw	r0, #31024	; 0x7930
   157ca:	f2c0 0002 	movt	r0, #2
   157ce:	f647 1214 	movw	r2, #30996	; 0x7914
   157d2:	f2c0 0202 	movt	r2, #2
   157d6:	211c      	movs	r1, #28
   157d8:	f002 feaa 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   157dc:	defe      	udf	#254	; 0xfe

000157de <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   157de:	b580      	push	{r7, lr}
   157e0:	b084      	sub	sp, #16
   157e2:	9002      	str	r0, [sp, #8]
   157e4:	9103      	str	r1, [sp, #12]
   157e6:	f647 104c 	movw	r0, #31052	; 0x794c
   157ea:	f2c0 0002 	movt	r0, #2
   157ee:	2202      	movs	r2, #2
   157f0:	9001      	str	r0, [sp, #4]
   157f2:	4608      	mov	r0, r1
   157f4:	9901      	ldr	r1, [sp, #4]
   157f6:	f003 fbbb 	bl	18f70 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   157fa:	9000      	str	r0, [sp, #0]
   157fc:	e7ff      	b.n	157fe <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   157fe:	9800      	ldr	r0, [sp, #0]
   15800:	f000 0001 	and.w	r0, r0, #1
   15804:	b004      	add	sp, #16
   15806:	bd80      	pop	{r7, pc}

00015808 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>:
    pub const fn new() -> Self {
   15808:	b580      	push	{r7, lr}
   1580a:	b0b4      	sub	sp, #208	; 0xd0
            buffer: MaybeUninit::uninit(),
   1580c:	9001      	str	r0, [sp, #4]
   1580e:	e7ff      	b.n	15810 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE+0x8>
        Self {
   15810:	9801      	ldr	r0, [sp, #4]
   15812:	3004      	adds	r0, #4
   15814:	a902      	add	r1, sp, #8
   15816:	22c8      	movs	r2, #200	; 0xc8
   15818:	f009 fa5e 	bl	1ecd8 <__aeabi_memcpy>
   1581c:	2100      	movs	r1, #0
   1581e:	9a01      	ldr	r2, [sp, #4]
   15820:	6011      	str	r1, [r2, #0]
    }
   15822:	b034      	add	sp, #208	; 0xd0
   15824:	bd80      	pop	{r7, pc}

00015826 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>:
    pub const fn new() -> Self {
   15826:	b580      	push	{r7, lr}
   15828:	b09a      	sub	sp, #104	; 0x68
            buffer: MaybeUninit::uninit(),
   1582a:	9000      	str	r0, [sp, #0]
   1582c:	e7ff      	b.n	1582e <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE+0x8>
        Self {
   1582e:	9800      	ldr	r0, [sp, #0]
   15830:	3004      	adds	r0, #4
   15832:	a901      	add	r1, sp, #4
   15834:	2264      	movs	r2, #100	; 0x64
   15836:	f009 fa4f 	bl	1ecd8 <__aeabi_memcpy>
   1583a:	2100      	movs	r1, #0
   1583c:	9a00      	ldr	r2, [sp, #0]
   1583e:	6011      	str	r1, [r2, #0]
    }
   15840:	b01a      	add	sp, #104	; 0x68
   15842:	bd80      	pop	{r7, pc}

00015844 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   15844:	b580      	push	{r7, lr}
   15846:	b088      	sub	sp, #32
   15848:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   1584a:	1d01      	adds	r1, r0, #4
   1584c:	9106      	str	r1, [sp, #24]
   1584e:	9107      	str	r1, [sp, #28]
   15850:	9004      	str	r0, [sp, #16]
   15852:	9103      	str	r1, [sp, #12]
   15854:	e7ff      	b.n	15856 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x12>
   15856:	9804      	ldr	r0, [sp, #16]
   15858:	6801      	ldr	r1, [r0, #0]
   1585a:	9803      	ldr	r0, [sp, #12]
   1585c:	f001 f9ad 	bl	16bba <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   15860:	9002      	str	r0, [sp, #8]
   15862:	9101      	str	r1, [sp, #4]
   15864:	e7ff      	b.n	15866 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x22>
    }
   15866:	9802      	ldr	r0, [sp, #8]
   15868:	9901      	ldr	r1, [sp, #4]
   1586a:	b008      	add	sp, #32
   1586c:	bd80      	pop	{r7, pc}

0001586e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   1586e:	b580      	push	{r7, lr}
   15870:	b088      	sub	sp, #32
   15872:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   15874:	1d01      	adds	r1, r0, #4
   15876:	9106      	str	r1, [sp, #24]
   15878:	9107      	str	r1, [sp, #28]
   1587a:	9004      	str	r0, [sp, #16]
   1587c:	9103      	str	r1, [sp, #12]
   1587e:	e7ff      	b.n	15880 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x12>
   15880:	9804      	ldr	r0, [sp, #16]
   15882:	6801      	ldr	r1, [r0, #0]
   15884:	9803      	ldr	r0, [sp, #12]
   15886:	f001 f998 	bl	16bba <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   1588a:	9002      	str	r0, [sp, #8]
   1588c:	9101      	str	r1, [sp, #4]
   1588e:	e7ff      	b.n	15890 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x22>
    }
   15890:	9802      	ldr	r0, [sp, #8]
   15892:	9901      	ldr	r1, [sp, #4]
   15894:	b008      	add	sp, #32
   15896:	bd80      	pop	{r7, pc}

00015898 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   15898:	b580      	push	{r7, lr}
   1589a:	b08a      	sub	sp, #40	; 0x28
   1589c:	460a      	mov	r2, r1
   1589e:	9006      	str	r0, [sp, #24]
   158a0:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   158a4:	1d01      	adds	r1, r0, #4
   158a6:	9108      	str	r1, [sp, #32]
   158a8:	9109      	str	r1, [sp, #36]	; 0x24
   158aa:	9005      	str	r0, [sp, #20]
   158ac:	9204      	str	r2, [sp, #16]
   158ae:	9103      	str	r1, [sp, #12]
   158b0:	e7ff      	b.n	158b2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x1a>
            .add(self.len)
   158b2:	9805      	ldr	r0, [sp, #20]
   158b4:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   158b6:	9803      	ldr	r0, [sp, #12]
   158b8:	f001 fa9c 	bl	16df4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   158bc:	9002      	str	r0, [sp, #8]
   158be:	e7ff      	b.n	158c0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x28>
   158c0:	9802      	ldr	r0, [sp, #8]
   158c2:	9904      	ldr	r1, [sp, #16]
   158c4:	f001 faa1 	bl	16e0a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   158c8:	e7ff      	b.n	158ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x32>
        self.len += 1;
   158ca:	9805      	ldr	r0, [sp, #20]
   158cc:	6801      	ldr	r1, [r0, #0]
   158ce:	1c4a      	adds	r2, r1, #1
   158d0:	4613      	mov	r3, r2
   158d2:	428a      	cmp	r2, r1
   158d4:	9301      	str	r3, [sp, #4]
   158d6:	d305      	bcc.n	158e4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x4c>
   158d8:	e7ff      	b.n	158da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x42>
   158da:	9801      	ldr	r0, [sp, #4]
   158dc:	9905      	ldr	r1, [sp, #20]
   158de:	6008      	str	r0, [r1, #0]
    }
   158e0:	b00a      	add	sp, #40	; 0x28
   158e2:	bd80      	pop	{r7, pc}
        self.len += 1;
   158e4:	f647 10f0 	movw	r0, #31216	; 0x79f0
   158e8:	f2c0 0002 	movt	r0, #2
   158ec:	f647 12d4 	movw	r2, #31188	; 0x79d4
   158f0:	f2c0 0202 	movt	r2, #2
   158f4:	211c      	movs	r1, #28
   158f6:	f002 fe1b 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   158fa:	defe      	udf	#254	; 0xfe

000158fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   158fc:	b580      	push	{r7, lr}
   158fe:	b08a      	sub	sp, #40	; 0x28
   15900:	460a      	mov	r2, r1
   15902:	9006      	str	r0, [sp, #24]
   15904:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   15908:	1d01      	adds	r1, r0, #4
   1590a:	9108      	str	r1, [sp, #32]
   1590c:	9109      	str	r1, [sp, #36]	; 0x24
   1590e:	9005      	str	r0, [sp, #20]
   15910:	9204      	str	r2, [sp, #16]
   15912:	9103      	str	r1, [sp, #12]
   15914:	e7ff      	b.n	15916 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x1a>
            .add(self.len)
   15916:	9805      	ldr	r0, [sp, #20]
   15918:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   1591a:	9803      	ldr	r0, [sp, #12]
   1591c:	f001 fa6a 	bl	16df4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15920:	9002      	str	r0, [sp, #8]
   15922:	e7ff      	b.n	15924 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x28>
   15924:	9802      	ldr	r0, [sp, #8]
   15926:	9904      	ldr	r1, [sp, #16]
   15928:	f001 fa6f 	bl	16e0a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   1592c:	e7ff      	b.n	1592e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x32>
        self.len += 1;
   1592e:	9805      	ldr	r0, [sp, #20]
   15930:	6801      	ldr	r1, [r0, #0]
   15932:	1c4a      	adds	r2, r1, #1
   15934:	4613      	mov	r3, r2
   15936:	428a      	cmp	r2, r1
   15938:	9301      	str	r3, [sp, #4]
   1593a:	d305      	bcc.n	15948 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x4c>
   1593c:	e7ff      	b.n	1593e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x42>
   1593e:	9801      	ldr	r0, [sp, #4]
   15940:	9905      	ldr	r1, [sp, #20]
   15942:	6008      	str	r0, [r1, #0]
    }
   15944:	b00a      	add	sp, #40	; 0x28
   15946:	bd80      	pop	{r7, pc}
        self.len += 1;
   15948:	f647 10f0 	movw	r0, #31216	; 0x79f0
   1594c:	f2c0 0002 	movt	r0, #2
   15950:	f647 12d4 	movw	r2, #31188	; 0x79d4
   15954:	f2c0 0202 	movt	r2, #2
   15958:	211c      	movs	r1, #28
   1595a:	f002 fde9 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1595e:	defe      	udf	#254	; 0xfe

00015960 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   15960:	b580      	push	{r7, lr}
   15962:	b094      	sub	sp, #80	; 0x50
   15964:	900e      	str	r0, [sp, #56]	; 0x38
   15966:	910f      	str	r1, [sp, #60]	; 0x3c
   15968:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   1596a:	6803      	ldr	r3, [r0, #0]
   1596c:	9009      	str	r0, [sp, #36]	; 0x24
   1596e:	4608      	mov	r0, r1
   15970:	9108      	str	r1, [sp, #32]
   15972:	4611      	mov	r1, r2
   15974:	9207      	str	r2, [sp, #28]
   15976:	9306      	str	r3, [sp, #24]
   15978:	f001 f943 	bl	16c02 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   1597c:	9005      	str	r0, [sp, #20]
   1597e:	e7ff      	b.n	15980 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x20>
   15980:	9806      	ldr	r0, [sp, #24]
   15982:	9905      	ldr	r1, [sp, #20]
   15984:	1842      	adds	r2, r0, r1
   15986:	4613      	mov	r3, r2
   15988:	4282      	cmp	r2, r0
   1598a:	9304      	str	r3, [sp, #16]
   1598c:	d33f      	bcc.n	15a0e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xae>
   1598e:	e7ff      	b.n	15990 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x30>
   15990:	9809      	ldr	r0, [sp, #36]	; 0x24
   15992:	f000 f96a 	bl	15c6a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>
   15996:	9003      	str	r0, [sp, #12]
   15998:	e7ff      	b.n	1599a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x3a>
   1599a:	9804      	ldr	r0, [sp, #16]
   1599c:	9903      	ldr	r1, [sp, #12]
   1599e:	4288      	cmp	r0, r1
   159a0:	d807      	bhi.n	159b2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x52>
   159a2:	e7ff      	b.n	159a4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x44>
            for elem in other {
   159a4:	9808      	ldr	r0, [sp, #32]
   159a6:	9907      	ldr	r1, [sp, #28]
   159a8:	f001 f99f 	bl	16cea <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   159ac:	9002      	str	r0, [sp, #8]
   159ae:	9101      	str	r1, [sp, #4]
   159b0:	e003      	b.n	159ba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x5a>
   159b2:	2001      	movs	r0, #1
            Err(())
   159b4:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   159b8:	e025      	b.n	15a06 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   159ba:	9802      	ldr	r0, [sp, #8]
   159bc:	900b      	str	r0, [sp, #44]	; 0x2c
   159be:	9901      	ldr	r1, [sp, #4]
   159c0:	910c      	str	r1, [sp, #48]	; 0x30
   159c2:	e7ff      	b.n	159c4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
   159c4:	a80b      	add	r0, sp, #44	; 0x2c
   159c6:	f001 f9b2 	bl	16d2e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   159ca:	900d      	str	r0, [sp, #52]	; 0x34
   159cc:	e7ff      	b.n	159ce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x6e>
   159ce:	980d      	ldr	r0, [sp, #52]	; 0x34
   159d0:	2800      	cmp	r0, #0
   159d2:	4601      	mov	r1, r0
   159d4:	bf18      	it	ne
   159d6:	2101      	movne	r1, #1
   159d8:	2800      	cmp	r0, #0
   159da:	d001      	beq.n	159e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x80>
   159dc:	e7ff      	b.n	159de <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x7e>
   159de:	e004      	b.n	159ea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x8a>
   159e0:	2000      	movs	r0, #0
            Ok(())
   159e2:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   159e6:	e00e      	b.n	15a06 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   159e8:	defe      	udf	#254	; 0xfe
   159ea:	980d      	ldr	r0, [sp, #52]	; 0x34
   159ec:	9011      	str	r0, [sp, #68]	; 0x44
   159ee:	9012      	str	r0, [sp, #72]	; 0x48
   159f0:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   159f2:	f001 f856 	bl	16aa2 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   159f6:	9000      	str	r0, [sp, #0]
   159f8:	e7ff      	b.n	159fa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x9a>
   159fa:	9809      	ldr	r0, [sp, #36]	; 0x24
   159fc:	9900      	ldr	r1, [sp, #0]
   159fe:	f7ff ff4b 	bl	15898 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>
   15a02:	e7ff      	b.n	15a04 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa4>
            for elem in other {
   15a04:	e7de      	b.n	159c4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
    }
   15a06:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   15a0a:	b014      	add	sp, #80	; 0x50
   15a0c:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   15a0e:	f647 10f0 	movw	r0, #31216	; 0x79f0
   15a12:	f2c0 0002 	movt	r0, #2
   15a16:	f647 220c 	movw	r2, #31244	; 0x7a0c
   15a1a:	f2c0 0202 	movt	r2, #2
   15a1e:	211c      	movs	r1, #28
   15a20:	f002 fd86 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15a24:	defe      	udf	#254	; 0xfe

00015a26 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   15a26:	b580      	push	{r7, lr}
   15a28:	b094      	sub	sp, #80	; 0x50
   15a2a:	900e      	str	r0, [sp, #56]	; 0x38
   15a2c:	910f      	str	r1, [sp, #60]	; 0x3c
   15a2e:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   15a30:	6803      	ldr	r3, [r0, #0]
   15a32:	9009      	str	r0, [sp, #36]	; 0x24
   15a34:	4608      	mov	r0, r1
   15a36:	9108      	str	r1, [sp, #32]
   15a38:	4611      	mov	r1, r2
   15a3a:	9207      	str	r2, [sp, #28]
   15a3c:	9306      	str	r3, [sp, #24]
   15a3e:	f001 f8e0 	bl	16c02 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15a42:	9005      	str	r0, [sp, #20]
   15a44:	e7ff      	b.n	15a46 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x20>
   15a46:	9806      	ldr	r0, [sp, #24]
   15a48:	9905      	ldr	r1, [sp, #20]
   15a4a:	1842      	adds	r2, r0, r1
   15a4c:	4613      	mov	r3, r2
   15a4e:	4282      	cmp	r2, r0
   15a50:	9304      	str	r3, [sp, #16]
   15a52:	d33f      	bcc.n	15ad4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xae>
   15a54:	e7ff      	b.n	15a56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x30>
   15a56:	9809      	ldr	r0, [sp, #36]	; 0x24
   15a58:	f000 f8fd 	bl	15c56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   15a5c:	9003      	str	r0, [sp, #12]
   15a5e:	e7ff      	b.n	15a60 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x3a>
   15a60:	9804      	ldr	r0, [sp, #16]
   15a62:	9903      	ldr	r1, [sp, #12]
   15a64:	4288      	cmp	r0, r1
   15a66:	d807      	bhi.n	15a78 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x52>
   15a68:	e7ff      	b.n	15a6a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x44>
            for elem in other {
   15a6a:	9808      	ldr	r0, [sp, #32]
   15a6c:	9907      	ldr	r1, [sp, #28]
   15a6e:	f001 f93c 	bl	16cea <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   15a72:	9002      	str	r0, [sp, #8]
   15a74:	9101      	str	r1, [sp, #4]
   15a76:	e003      	b.n	15a80 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x5a>
   15a78:	2001      	movs	r0, #1
            Err(())
   15a7a:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   15a7e:	e025      	b.n	15acc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   15a80:	9802      	ldr	r0, [sp, #8]
   15a82:	900b      	str	r0, [sp, #44]	; 0x2c
   15a84:	9901      	ldr	r1, [sp, #4]
   15a86:	910c      	str	r1, [sp, #48]	; 0x30
   15a88:	e7ff      	b.n	15a8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
   15a8a:	a80b      	add	r0, sp, #44	; 0x2c
   15a8c:	f001 f94f 	bl	16d2e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   15a90:	900d      	str	r0, [sp, #52]	; 0x34
   15a92:	e7ff      	b.n	15a94 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x6e>
   15a94:	980d      	ldr	r0, [sp, #52]	; 0x34
   15a96:	2800      	cmp	r0, #0
   15a98:	4601      	mov	r1, r0
   15a9a:	bf18      	it	ne
   15a9c:	2101      	movne	r1, #1
   15a9e:	2800      	cmp	r0, #0
   15aa0:	d001      	beq.n	15aa6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x80>
   15aa2:	e7ff      	b.n	15aa4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x7e>
   15aa4:	e004      	b.n	15ab0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x8a>
   15aa6:	2000      	movs	r0, #0
            Ok(())
   15aa8:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   15aac:	e00e      	b.n	15acc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   15aae:	defe      	udf	#254	; 0xfe
   15ab0:	980d      	ldr	r0, [sp, #52]	; 0x34
   15ab2:	9011      	str	r0, [sp, #68]	; 0x44
   15ab4:	9012      	str	r0, [sp, #72]	; 0x48
   15ab6:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   15ab8:	f000 fff3 	bl	16aa2 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   15abc:	9000      	str	r0, [sp, #0]
   15abe:	e7ff      	b.n	15ac0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x9a>
   15ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
   15ac2:	9900      	ldr	r1, [sp, #0]
   15ac4:	f7ff ff1a 	bl	158fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   15ac8:	e7ff      	b.n	15aca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa4>
            for elem in other {
   15aca:	e7de      	b.n	15a8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
    }
   15acc:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   15ad0:	b014      	add	sp, #80	; 0x50
   15ad2:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   15ad4:	f647 10f0 	movw	r0, #31216	; 0x79f0
   15ad8:	f2c0 0002 	movt	r0, #2
   15adc:	f647 220c 	movw	r2, #31244	; 0x7a0c
   15ae0:	f2c0 0202 	movt	r2, #2
   15ae4:	211c      	movs	r1, #28
   15ae6:	f002 fd23 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15aea:	defe      	udf	#254	; 0xfe

00015aec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   15aec:	b580      	push	{r7, lr}
   15aee:	b088      	sub	sp, #32
   15af0:	460a      	mov	r2, r1
   15af2:	9006      	str	r0, [sp, #24]
   15af4:	f8ad 101e 	strh.w	r1, [sp, #30]
        if self.len < self.capacity() {
   15af8:	6801      	ldr	r1, [r0, #0]
   15afa:	9004      	str	r0, [sp, #16]
   15afc:	9203      	str	r2, [sp, #12]
   15afe:	9102      	str	r1, [sp, #8]
   15b00:	f000 f8a9 	bl	15c56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   15b04:	9001      	str	r0, [sp, #4]
   15b06:	e7ff      	b.n	15b08 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x1c>
   15b08:	9802      	ldr	r0, [sp, #8]
   15b0a:	9901      	ldr	r1, [sp, #4]
   15b0c:	4288      	cmp	r0, r1
   15b0e:	d307      	bcc.n	15b20 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x34>
   15b10:	e7ff      	b.n	15b12 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x26>
            Err(item)
   15b12:	9803      	ldr	r0, [sp, #12]
   15b14:	f8ad 0016 	strh.w	r0, [sp, #22]
   15b18:	2101      	movs	r1, #1
   15b1a:	f8ad 1014 	strh.w	r1, [sp, #20]
        if self.len < self.capacity() {
   15b1e:	e008      	b.n	15b32 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
            unsafe { self.push_unchecked(item) }
   15b20:	9804      	ldr	r0, [sp, #16]
   15b22:	9903      	ldr	r1, [sp, #12]
   15b24:	f7ff feea 	bl	158fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   15b28:	e7ff      	b.n	15b2a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x3e>
   15b2a:	2000      	movs	r0, #0
            Ok(())
   15b2c:	f8ad 0014 	strh.w	r0, [sp, #20]
        if self.len < self.capacity() {
   15b30:	e7ff      	b.n	15b32 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
    }
   15b32:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   15b36:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   15b3a:	b008      	add	sp, #32
   15b3c:	bd80      	pop	{r7, pc}

00015b3e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>:
    pub(crate) fn clear(&mut self) {
   15b3e:	b580      	push	{r7, lr}
   15b40:	b082      	sub	sp, #8
   15b42:	9001      	str	r0, [sp, #4]
   15b44:	2100      	movs	r1, #0
        self.truncate(0);
   15b46:	f000 f8d0 	bl	15cea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>
   15b4a:	e7ff      	b.n	15b4c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE+0xe>
    }
   15b4c:	b002      	add	sp, #8
   15b4e:	bd80      	pop	{r7, pc}

00015b50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>:
    pub(crate) fn clear(&mut self) {
   15b50:	b580      	push	{r7, lr}
   15b52:	b082      	sub	sp, #8
   15b54:	9001      	str	r0, [sp, #4]
   15b56:	2100      	movs	r1, #0
        self.truncate(0);
   15b58:	f000 f891 	bl	15c7e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>
   15b5c:	e7ff      	b.n	15b5e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E+0xe>
    }
   15b5e:	b002      	add	sp, #8
   15b60:	bd80      	pop	{r7, pc}

00015b62 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>:
    pub(crate) fn clone(&self) -> Self
   15b62:	b580      	push	{r7, lr}
   15b64:	b0a0      	sub	sp, #128	; 0x80
   15b66:	911f      	str	r1, [sp, #124]	; 0x7c
   15b68:	aa05      	add	r2, sp, #20
        let mut new = Self::new();
   15b6a:	9004      	str	r0, [sp, #16]
   15b6c:	4610      	mov	r0, r2
   15b6e:	9103      	str	r1, [sp, #12]
   15b70:	f7ff fe59 	bl	15826 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   15b74:	e7ff      	b.n	15b76 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   15b76:	9803      	ldr	r0, [sp, #12]
   15b78:	f000 f843 	bl	15c02 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   15b7c:	9002      	str	r0, [sp, #8]
   15b7e:	9101      	str	r1, [sp, #4]
   15b80:	e7ff      	b.n	15b82 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x20>
   15b82:	a805      	add	r0, sp, #20
   15b84:	9902      	ldr	r1, [sp, #8]
   15b86:	9a01      	ldr	r2, [sp, #4]
   15b88:	f7ff ff4d 	bl	15a26 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>
   15b8c:	9000      	str	r0, [sp, #0]
   15b8e:	e7ff      	b.n	15b90 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x2e>
   15b90:	9800      	ldr	r0, [sp, #0]
   15b92:	f000 0001 	and.w	r0, r0, #1
   15b96:	f647 211c 	movw	r1, #31260	; 0x7a1c
   15b9a:	f2c0 0102 	movt	r1, #2
   15b9e:	f000 f959 	bl	15e54 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   15ba2:	e7ff      	b.n	15ba4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x42>
   15ba4:	a905      	add	r1, sp, #20
   15ba6:	2268      	movs	r2, #104	; 0x68
        new
   15ba8:	9804      	ldr	r0, [sp, #16]
   15baa:	f009 f895 	bl	1ecd8 <__aeabi_memcpy>
    }
   15bae:	b020      	add	sp, #128	; 0x80
   15bb0:	bd80      	pop	{r7, pc}

00015bb2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>:
    pub(crate) fn clone(&self) -> Self
   15bb2:	b580      	push	{r7, lr}
   15bb4:	b0ba      	sub	sp, #232	; 0xe8
   15bb6:	9139      	str	r1, [sp, #228]	; 0xe4
   15bb8:	aa06      	add	r2, sp, #24
        let mut new = Self::new();
   15bba:	9005      	str	r0, [sp, #20]
   15bbc:	4610      	mov	r0, r2
   15bbe:	9104      	str	r1, [sp, #16]
   15bc0:	f7ff fe22 	bl	15808 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   15bc4:	e7ff      	b.n	15bc6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   15bc6:	9804      	ldr	r0, [sp, #16]
   15bc8:	f000 f830 	bl	15c2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   15bcc:	9003      	str	r0, [sp, #12]
   15bce:	9102      	str	r1, [sp, #8]
   15bd0:	e7ff      	b.n	15bd2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x20>
   15bd2:	a806      	add	r0, sp, #24
   15bd4:	9903      	ldr	r1, [sp, #12]
   15bd6:	9a02      	ldr	r2, [sp, #8]
   15bd8:	f7ff fec2 	bl	15960 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   15bdc:	9001      	str	r0, [sp, #4]
   15bde:	e7ff      	b.n	15be0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x2e>
   15be0:	9801      	ldr	r0, [sp, #4]
   15be2:	f000 0001 	and.w	r0, r0, #1
   15be6:	f647 211c 	movw	r1, #31260	; 0x7a1c
   15bea:	f2c0 0102 	movt	r1, #2
   15bee:	f000 f931 	bl	15e54 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   15bf2:	e7ff      	b.n	15bf4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x42>
   15bf4:	a906      	add	r1, sp, #24
   15bf6:	22cc      	movs	r2, #204	; 0xcc
        new
   15bf8:	9805      	ldr	r0, [sp, #20]
   15bfa:	f009 f86d 	bl	1ecd8 <__aeabi_memcpy>
    }
   15bfe:	b03a      	add	sp, #232	; 0xe8
   15c00:	bd80      	pop	{r7, pc}

00015c02 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   15c02:	b580      	push	{r7, lr}
   15c04:	b088      	sub	sp, #32
   15c06:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   15c08:	1d01      	adds	r1, r0, #4
   15c0a:	9106      	str	r1, [sp, #24]
   15c0c:	9107      	str	r1, [sp, #28]
   15c0e:	9004      	str	r0, [sp, #16]
   15c10:	9103      	str	r1, [sp, #12]
   15c12:	e7ff      	b.n	15c14 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x12>
   15c14:	9804      	ldr	r0, [sp, #16]
   15c16:	6801      	ldr	r1, [r0, #0]
   15c18:	9803      	ldr	r0, [sp, #12]
   15c1a:	f000 ffc1 	bl	16ba0 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   15c1e:	9002      	str	r0, [sp, #8]
   15c20:	9101      	str	r1, [sp, #4]
   15c22:	e7ff      	b.n	15c24 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x22>
    }
   15c24:	9802      	ldr	r0, [sp, #8]
   15c26:	9901      	ldr	r1, [sp, #4]
   15c28:	b008      	add	sp, #32
   15c2a:	bd80      	pop	{r7, pc}

00015c2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   15c2c:	b580      	push	{r7, lr}
   15c2e:	b088      	sub	sp, #32
   15c30:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   15c32:	1d01      	adds	r1, r0, #4
   15c34:	9106      	str	r1, [sp, #24]
   15c36:	9107      	str	r1, [sp, #28]
   15c38:	9004      	str	r0, [sp, #16]
   15c3a:	9103      	str	r1, [sp, #12]
   15c3c:	e7ff      	b.n	15c3e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x12>
   15c3e:	9804      	ldr	r0, [sp, #16]
   15c40:	6801      	ldr	r1, [r0, #0]
   15c42:	9803      	ldr	r0, [sp, #12]
   15c44:	f000 ffac 	bl	16ba0 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   15c48:	9002      	str	r0, [sp, #8]
   15c4a:	9101      	str	r1, [sp, #4]
   15c4c:	e7ff      	b.n	15c4e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x22>
    }
   15c4e:	9802      	ldr	r0, [sp, #8]
   15c50:	9901      	ldr	r1, [sp, #4]
   15c52:	b008      	add	sp, #32
   15c54:	bd80      	pop	{r7, pc}

00015c56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>:
    pub(crate) fn capacity(&self) -> usize {
   15c56:	b580      	push	{r7, lr}
   15c58:	b082      	sub	sp, #8
   15c5a:	9001      	str	r0, [sp, #4]
        N::to_usize()
   15c5c:	f000 fa26 	bl	160ac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   15c60:	9000      	str	r0, [sp, #0]
   15c62:	e7ff      	b.n	15c64 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E+0xe>
    }
   15c64:	9800      	ldr	r0, [sp, #0]
   15c66:	b002      	add	sp, #8
   15c68:	bd80      	pop	{r7, pc}

00015c6a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>:
    pub(crate) fn capacity(&self) -> usize {
   15c6a:	b580      	push	{r7, lr}
   15c6c:	b082      	sub	sp, #8
   15c6e:	9001      	str	r0, [sp, #4]
        N::to_usize()
   15c70:	f000 fa34 	bl	160dc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>
   15c74:	9000      	str	r0, [sp, #0]
   15c76:	e7ff      	b.n	15c78 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E+0xe>
    }
   15c78:	9800      	ldr	r0, [sp, #0]
   15c7a:	b002      	add	sp, #8
   15c7c:	bd80      	pop	{r7, pc}

00015c7e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   15c7e:	b580      	push	{r7, lr}
   15c80:	b08a      	sub	sp, #40	; 0x28
   15c82:	9007      	str	r0, [sp, #28]
   15c84:	9108      	str	r1, [sp, #32]
   15c86:	9106      	str	r1, [sp, #24]
   15c88:	9005      	str	r0, [sp, #20]
   15c8a:	e7ff      	b.n	15c8c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
            while len < self.len {
   15c8c:	9805      	ldr	r0, [sp, #20]
   15c8e:	6801      	ldr	r1, [r0, #0]
   15c90:	9a06      	ldr	r2, [sp, #24]
   15c92:	428a      	cmp	r2, r1
   15c94:	d302      	bcc.n	15c9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1e>
   15c96:	e7ff      	b.n	15c98 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1a>
    }
   15c98:	b00a      	add	sp, #40	; 0x28
   15c9a:	bd80      	pop	{r7, pc}
                self.len -= 1;
   15c9c:	9805      	ldr	r0, [sp, #20]
   15c9e:	6801      	ldr	r1, [r0, #0]
   15ca0:	1e4a      	subs	r2, r1, #1
   15ca2:	2901      	cmp	r1, #1
   15ca4:	9204      	str	r2, [sp, #16]
   15ca6:	d314      	bcc.n	15cd2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x54>
   15ca8:	e7ff      	b.n	15caa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x2c>
   15caa:	9804      	ldr	r0, [sp, #16]
   15cac:	9905      	ldr	r1, [sp, #20]
   15cae:	6008      	str	r0, [r1, #0]
                let len = self.len;
   15cb0:	680a      	ldr	r2, [r1, #0]
   15cb2:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   15cb4:	4608      	mov	r0, r1
   15cb6:	9203      	str	r2, [sp, #12]
   15cb8:	f7ff fdd9 	bl	1586e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   15cbc:	9002      	str	r0, [sp, #8]
   15cbe:	9101      	str	r1, [sp, #4]
   15cc0:	e7ff      	b.n	15cc2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x44>
   15cc2:	9802      	ldr	r0, [sp, #8]
   15cc4:	9901      	ldr	r1, [sp, #4]
   15cc6:	9a03      	ldr	r2, [sp, #12]
   15cc8:	f000 ff89 	bl	16bde <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   15ccc:	e7ff      	b.n	15cce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x50>
   15cce:	e7ff      	b.n	15cd0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x52>
            while len < self.len {
   15cd0:	e7dc      	b.n	15c8c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
                self.len -= 1;
   15cd2:	f647 10b0 	movw	r0, #31152	; 0x79b0
   15cd6:	f2c0 0002 	movt	r0, #2
   15cda:	f647 222c 	movw	r2, #31276	; 0x7a2c
   15cde:	f2c0 0202 	movt	r2, #2
   15ce2:	2121      	movs	r1, #33	; 0x21
   15ce4:	f002 fc24 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15ce8:	defe      	udf	#254	; 0xfe

00015cea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   15cea:	b580      	push	{r7, lr}
   15cec:	b08a      	sub	sp, #40	; 0x28
   15cee:	9007      	str	r0, [sp, #28]
   15cf0:	9108      	str	r1, [sp, #32]
   15cf2:	9106      	str	r1, [sp, #24]
   15cf4:	9005      	str	r0, [sp, #20]
   15cf6:	e7ff      	b.n	15cf8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
            while len < self.len {
   15cf8:	9805      	ldr	r0, [sp, #20]
   15cfa:	6801      	ldr	r1, [r0, #0]
   15cfc:	9a06      	ldr	r2, [sp, #24]
   15cfe:	428a      	cmp	r2, r1
   15d00:	d302      	bcc.n	15d08 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1e>
   15d02:	e7ff      	b.n	15d04 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1a>
    }
   15d04:	b00a      	add	sp, #40	; 0x28
   15d06:	bd80      	pop	{r7, pc}
                self.len -= 1;
   15d08:	9805      	ldr	r0, [sp, #20]
   15d0a:	6801      	ldr	r1, [r0, #0]
   15d0c:	1e4a      	subs	r2, r1, #1
   15d0e:	2901      	cmp	r1, #1
   15d10:	9204      	str	r2, [sp, #16]
   15d12:	d314      	bcc.n	15d3e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x54>
   15d14:	e7ff      	b.n	15d16 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x2c>
   15d16:	9804      	ldr	r0, [sp, #16]
   15d18:	9905      	ldr	r1, [sp, #20]
   15d1a:	6008      	str	r0, [r1, #0]
                let len = self.len;
   15d1c:	680a      	ldr	r2, [r1, #0]
   15d1e:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   15d20:	4608      	mov	r0, r1
   15d22:	9203      	str	r2, [sp, #12]
   15d24:	f7ff fd8e 	bl	15844 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   15d28:	9002      	str	r0, [sp, #8]
   15d2a:	9101      	str	r1, [sp, #4]
   15d2c:	e7ff      	b.n	15d2e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x44>
   15d2e:	9802      	ldr	r0, [sp, #8]
   15d30:	9901      	ldr	r1, [sp, #4]
   15d32:	9a03      	ldr	r2, [sp, #12]
   15d34:	f000 ff53 	bl	16bde <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   15d38:	e7ff      	b.n	15d3a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x50>
   15d3a:	e7ff      	b.n	15d3c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x52>
            while len < self.len {
   15d3c:	e7dc      	b.n	15cf8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
                self.len -= 1;
   15d3e:	f647 10b0 	movw	r0, #31152	; 0x79b0
   15d42:	f2c0 0002 	movt	r0, #2
   15d46:	f647 222c 	movw	r2, #31276	; 0x7a2c
   15d4a:	f2c0 0202 	movt	r2, #2
   15d4e:	2121      	movs	r1, #33	; 0x21
   15d50:	f002 fbee 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15d54:	defe      	udf	#254	; 0xfe

00015d56 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>:
   15d56:	b082      	sub	sp, #8
   15d58:	9001      	str	r0, [sp, #4]
   15d5a:	8800      	ldrh	r0, [r0, #0]
   15d5c:	2800      	cmp	r0, #0
   15d5e:	d004      	beq.n	15d6a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x14>
   15d60:	e7ff      	b.n	15d62 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0xc>
   15d62:	2000      	movs	r0, #0
   15d64:	f88d 0003 	strb.w	r0, [sp, #3]
   15d68:	e003      	b.n	15d72 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   15d6a:	2001      	movs	r0, #1
   15d6c:	f88d 0003 	strb.w	r0, [sp, #3]
   15d70:	e7ff      	b.n	15d72 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   15d72:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15d76:	b002      	add	sp, #8
   15d78:	4770      	bx	lr

00015d7a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>:
   15d7a:	b082      	sub	sp, #8
   15d7c:	9001      	str	r0, [sp, #4]
   15d7e:	7800      	ldrb	r0, [r0, #0]
   15d80:	07c0      	lsls	r0, r0, #31
   15d82:	2800      	cmp	r0, #0
   15d84:	d004      	beq.n	15d90 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x16>
   15d86:	e7ff      	b.n	15d88 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0xe>
   15d88:	2000      	movs	r0, #0
   15d8a:	f88d 0003 	strb.w	r0, [sp, #3]
   15d8e:	e003      	b.n	15d98 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   15d90:	2001      	movs	r0, #1
   15d92:	f88d 0003 	strb.w	r0, [sp, #3]
   15d96:	e7ff      	b.n	15d98 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   15d98:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15d9c:	b002      	add	sp, #8
   15d9e:	4770      	bx	lr

00015da0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>:
   15da0:	b510      	push	{r4, lr}
   15da2:	b08a      	sub	sp, #40	; 0x28
   15da4:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   15da8:	468e      	mov	lr, r1
   15daa:	4604      	mov	r4, r0
   15dac:	f8ad 0014 	strh.w	r0, [sp, #20]
   15db0:	f8ad 1016 	strh.w	r1, [sp, #22]
   15db4:	9207      	str	r2, [sp, #28]
   15db6:	9308      	str	r3, [sp, #32]
   15db8:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   15dbc:	4601      	mov	r1, r0
   15dbe:	2800      	cmp	r0, #0
   15dc0:	9304      	str	r3, [sp, #16]
   15dc2:	9203      	str	r2, [sp, #12]
   15dc4:	f8cd c008 	str.w	ip, [sp, #8]
   15dc8:	d013      	beq.n	15df2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x52>
   15dca:	e7ff      	b.n	15dcc <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x2c>
   15dcc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   15dd0:	f8ad 001a 	strh.w	r0, [sp, #26]
   15dd4:	4668      	mov	r0, sp
   15dd6:	9902      	ldr	r1, [sp, #8]
   15dd8:	6001      	str	r1, [r0, #0]
   15dda:	f647 234c 	movw	r3, #31308	; 0x7a4c
   15dde:	f2c0 0302 	movt	r3, #2
   15de2:	f10d 021a 	add.w	r2, sp, #26
   15de6:	9803      	ldr	r0, [sp, #12]
   15de8:	9904      	ldr	r1, [sp, #16]
   15dea:	f002 fb73 	bl	184d4 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15dee:	defe      	udf	#254	; 0xfe
   15df0:	defe      	udf	#254	; 0xfe
   15df2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   15df6:	2800      	cmp	r0, #0
   15df8:	d102      	bne.n	15e00 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x60>
   15dfa:	e7ff      	b.n	15dfc <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>
   15dfc:	b00a      	add	sp, #40	; 0x28
   15dfe:	bd10      	pop	{r4, pc}
   15e00:	e7fc      	b.n	15dfc <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>

00015e02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   15e02:	b580      	push	{r7, lr}
   15e04:	b08a      	sub	sp, #40	; 0x28
   15e06:	4684      	mov	ip, r0
   15e08:	f88d 0017 	strb.w	r0, [sp, #23]
   15e0c:	9107      	str	r1, [sp, #28]
   15e0e:	9208      	str	r2, [sp, #32]
   15e10:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15e14:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   15e18:	f1be 0f00 	cmp.w	lr, #0
   15e1c:	9304      	str	r3, [sp, #16]
   15e1e:	9203      	str	r2, [sp, #12]
   15e20:	9102      	str	r1, [sp, #8]
   15e22:	d00e      	beq.n	15e42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   15e24:	e7ff      	b.n	15e26 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   15e26:	4668      	mov	r0, sp
   15e28:	9904      	ldr	r1, [sp, #16]
   15e2a:	6001      	str	r1, [r0, #0]
   15e2c:	f647 233c 	movw	r3, #31292	; 0x7a3c
   15e30:	f2c0 0302 	movt	r3, #2
   15e34:	aa06      	add	r2, sp, #24
   15e36:	9802      	ldr	r0, [sp, #8]
   15e38:	9903      	ldr	r1, [sp, #12]
   15e3a:	f002 fb4b 	bl	184d4 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15e3e:	defe      	udf	#254	; 0xfe
   15e40:	defe      	udf	#254	; 0xfe
   15e42:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15e46:	07c0      	lsls	r0, r0, #31
   15e48:	2800      	cmp	r0, #0
   15e4a:	d102      	bne.n	15e52 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   15e4c:	e7ff      	b.n	15e4e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   15e4e:	b00a      	add	sp, #40	; 0x28
   15e50:	bd80      	pop	{r7, pc}
   15e52:	e7fc      	b.n	15e4e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

00015e54 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>:
   15e54:	b086      	sub	sp, #24
   15e56:	4602      	mov	r2, r0
   15e58:	f88d 000f 	strb.w	r0, [sp, #15]
   15e5c:	f89d 000f 	ldrb.w	r0, [sp, #15]
   15e60:	07c3      	lsls	r3, r0, #31
   15e62:	2b00      	cmp	r3, #0
   15e64:	9102      	str	r1, [sp, #8]
   15e66:	d011      	beq.n	15e8c <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x38>
   15e68:	e7ff      	b.n	15e6a <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x16>
   15e6a:	4668      	mov	r0, sp
   15e6c:	9902      	ldr	r1, [sp, #8]
   15e6e:	6001      	str	r1, [r0, #0]
   15e70:	f647 205c 	movw	r0, #31324	; 0x7a5c
   15e74:	f2c0 0002 	movt	r0, #2
   15e78:	f647 233c 	movw	r3, #31292	; 0x7a3c
   15e7c:	f2c0 0302 	movt	r3, #2
   15e80:	212b      	movs	r1, #43	; 0x2b
   15e82:	aa04      	add	r2, sp, #16
   15e84:	f002 fb26 	bl	184d4 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15e88:	defe      	udf	#254	; 0xfe
   15e8a:	defe      	udf	#254	; 0xfe
   15e8c:	f89d 000f 	ldrb.w	r0, [sp, #15]
   15e90:	07c0      	lsls	r0, r0, #31
   15e92:	2800      	cmp	r0, #0
   15e94:	d102      	bne.n	15e9c <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x48>
   15e96:	e7ff      	b.n	15e98 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>
   15e98:	b006      	add	sp, #24
   15e9a:	4770      	bx	lr
   15e9c:	e7fc      	b.n	15e98 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>

00015e9e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   15e9e:	b580      	push	{r7, lr}
   15ea0:	b088      	sub	sp, #32
   15ea2:	9001      	str	r0, [sp, #4]
   15ea4:	2000      	movs	r0, #0
   15ea6:	f88d 0013 	strb.w	r0, [sp, #19]
   15eaa:	f88d 0011 	strb.w	r0, [sp, #17]
   15eae:	f88d 0012 	strb.w	r0, [sp, #18]
   15eb2:	2001      	movs	r0, #1
   15eb4:	f88d 0012 	strb.w	r0, [sp, #18]
   15eb8:	f88d 0013 	strb.w	r0, [sp, #19]
   15ebc:	f88d 0011 	strb.w	r0, [sp, #17]
   15ec0:	9801      	ldr	r0, [sp, #4]
   15ec2:	1e41      	subs	r1, r0, #1
   15ec4:	bf18      	it	ne
   15ec6:	2101      	movne	r1, #1
   15ec8:	2801      	cmp	r0, #1
   15eca:	d00d      	beq.n	15ee8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   15ecc:	e7ff      	b.n	15ece <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   15ece:	2000      	movs	r0, #0
   15ed0:	f88d 0013 	strb.w	r0, [sp, #19]
   15ed4:	9901      	ldr	r1, [sp, #4]
   15ed6:	9107      	str	r1, [sp, #28]
   15ed8:	f88d 0011 	strb.w	r0, [sp, #17]
   15edc:	9103      	str	r1, [sp, #12]
   15ede:	9803      	ldr	r0, [sp, #12]
   15ee0:	f7f3 fd08 	bl	98f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   15ee4:	e006      	b.n	15ef4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   15ee6:	defe      	udf	#254	; 0xfe
   15ee8:	2000      	movs	r0, #0
   15eea:	f88d 0012 	strb.w	r0, [sp, #18]
   15eee:	f88d 000b 	strb.w	r0, [sp, #11]
   15ef2:	e003      	b.n	15efc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   15ef4:	2001      	movs	r0, #1
   15ef6:	f88d 000b 	strb.w	r0, [sp, #11]
   15efa:	e7ff      	b.n	15efc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   15efc:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15f00:	07c0      	lsls	r0, r0, #31
   15f02:	2800      	cmp	r0, #0
   15f04:	d104      	bne.n	15f10 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   15f06:	e7ff      	b.n	15f08 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   15f08:	9801      	ldr	r0, [sp, #4]
   15f0a:	2801      	cmp	r0, #1
   15f0c:	d008      	beq.n	15f20 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   15f0e:	e011      	b.n	15f34 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   15f10:	2000      	movs	r0, #0
   15f12:	f88d 0011 	strb.w	r0, [sp, #17]
   15f16:	e7f7      	b.n	15f08 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   15f18:	f89d 000b 	ldrb.w	r0, [sp, #11]
   15f1c:	b008      	add	sp, #32
   15f1e:	bd80      	pop	{r7, pc}
   15f20:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15f24:	07c0      	lsls	r0, r0, #31
   15f26:	2800      	cmp	r0, #0
   15f28:	d0f6      	beq.n	15f18 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   15f2a:	e7ff      	b.n	15f2c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   15f2c:	2000      	movs	r0, #0
   15f2e:	f88d 0012 	strb.w	r0, [sp, #18]
   15f32:	e7f1      	b.n	15f18 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   15f34:	f89d 0013 	ldrb.w	r0, [sp, #19]
   15f38:	07c0      	lsls	r0, r0, #31
   15f3a:	2800      	cmp	r0, #0
   15f3c:	d0ec      	beq.n	15f18 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   15f3e:	e7ff      	b.n	15f40 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   15f40:	2000      	movs	r0, #0
   15f42:	f88d 0013 	strb.w	r0, [sp, #19]
   15f46:	e7e7      	b.n	15f18 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

00015f48 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   15f48:	b580      	push	{r7, lr}
   15f4a:	b088      	sub	sp, #32
   15f4c:	9001      	str	r0, [sp, #4]
   15f4e:	2000      	movs	r0, #0
   15f50:	f88d 0013 	strb.w	r0, [sp, #19]
   15f54:	f88d 0011 	strb.w	r0, [sp, #17]
   15f58:	f88d 0012 	strb.w	r0, [sp, #18]
   15f5c:	2001      	movs	r0, #1
   15f5e:	f88d 0012 	strb.w	r0, [sp, #18]
   15f62:	f88d 0013 	strb.w	r0, [sp, #19]
   15f66:	f88d 0011 	strb.w	r0, [sp, #17]
   15f6a:	9801      	ldr	r0, [sp, #4]
   15f6c:	1e41      	subs	r1, r0, #1
   15f6e:	bf18      	it	ne
   15f70:	2101      	movne	r1, #1
   15f72:	2801      	cmp	r0, #1
   15f74:	d00d      	beq.n	15f92 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   15f76:	e7ff      	b.n	15f78 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   15f78:	2000      	movs	r0, #0
   15f7a:	f88d 0013 	strb.w	r0, [sp, #19]
   15f7e:	9901      	ldr	r1, [sp, #4]
   15f80:	9107      	str	r1, [sp, #28]
   15f82:	f88d 0011 	strb.w	r0, [sp, #17]
   15f86:	9103      	str	r1, [sp, #12]
   15f88:	9803      	ldr	r0, [sp, #12]
   15f8a:	f7f3 fca9 	bl	98e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   15f8e:	e006      	b.n	15f9e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   15f90:	defe      	udf	#254	; 0xfe
   15f92:	2000      	movs	r0, #0
   15f94:	f88d 0012 	strb.w	r0, [sp, #18]
   15f98:	f88d 000b 	strb.w	r0, [sp, #11]
   15f9c:	e003      	b.n	15fa6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   15f9e:	2001      	movs	r0, #1
   15fa0:	f88d 000b 	strb.w	r0, [sp, #11]
   15fa4:	e7ff      	b.n	15fa6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   15fa6:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15faa:	07c0      	lsls	r0, r0, #31
   15fac:	2800      	cmp	r0, #0
   15fae:	d104      	bne.n	15fba <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   15fb0:	e7ff      	b.n	15fb2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   15fb2:	9801      	ldr	r0, [sp, #4]
   15fb4:	2801      	cmp	r0, #1
   15fb6:	d008      	beq.n	15fca <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   15fb8:	e011      	b.n	15fde <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   15fba:	2000      	movs	r0, #0
   15fbc:	f88d 0011 	strb.w	r0, [sp, #17]
   15fc0:	e7f7      	b.n	15fb2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   15fc2:	f89d 000b 	ldrb.w	r0, [sp, #11]
   15fc6:	b008      	add	sp, #32
   15fc8:	bd80      	pop	{r7, pc}
   15fca:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15fce:	07c0      	lsls	r0, r0, #31
   15fd0:	2800      	cmp	r0, #0
   15fd2:	d0f6      	beq.n	15fc2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15fd4:	e7ff      	b.n	15fd6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   15fd6:	2000      	movs	r0, #0
   15fd8:	f88d 0012 	strb.w	r0, [sp, #18]
   15fdc:	e7f1      	b.n	15fc2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15fde:	f89d 0013 	ldrb.w	r0, [sp, #19]
   15fe2:	07c0      	lsls	r0, r0, #31
   15fe4:	2800      	cmp	r0, #0
   15fe6:	d0ec      	beq.n	15fc2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15fe8:	e7ff      	b.n	15fea <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   15fea:	2000      	movs	r0, #0
   15fec:	f88d 0013 	strb.w	r0, [sp, #19]
   15ff0:	e7e7      	b.n	15fc2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

00015ff2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   15ff2:	b580      	push	{r7, lr}
   15ff4:	b088      	sub	sp, #32
   15ff6:	9001      	str	r0, [sp, #4]
   15ff8:	2000      	movs	r0, #0
   15ffa:	f88d 0013 	strb.w	r0, [sp, #19]
   15ffe:	f88d 0011 	strb.w	r0, [sp, #17]
   16002:	f88d 0012 	strb.w	r0, [sp, #18]
   16006:	2001      	movs	r0, #1
   16008:	f88d 0012 	strb.w	r0, [sp, #18]
   1600c:	f88d 0013 	strb.w	r0, [sp, #19]
   16010:	f88d 0011 	strb.w	r0, [sp, #17]
   16014:	9801      	ldr	r0, [sp, #4]
   16016:	1e41      	subs	r1, r0, #1
   16018:	bf18      	it	ne
   1601a:	2101      	movne	r1, #1
   1601c:	2801      	cmp	r0, #1
   1601e:	d00d      	beq.n	1603c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   16020:	e7ff      	b.n	16022 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   16022:	2000      	movs	r0, #0
   16024:	f88d 0013 	strb.w	r0, [sp, #19]
   16028:	9901      	ldr	r1, [sp, #4]
   1602a:	9107      	str	r1, [sp, #28]
   1602c:	f88d 0011 	strb.w	r0, [sp, #17]
   16030:	9103      	str	r1, [sp, #12]
   16032:	9803      	ldr	r0, [sp, #12]
   16034:	f7f3 fc59 	bl	98ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   16038:	e006      	b.n	16048 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   1603a:	defe      	udf	#254	; 0xfe
   1603c:	2000      	movs	r0, #0
   1603e:	f88d 0012 	strb.w	r0, [sp, #18]
   16042:	f88d 000b 	strb.w	r0, [sp, #11]
   16046:	e003      	b.n	16050 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   16048:	2001      	movs	r0, #1
   1604a:	f88d 000b 	strb.w	r0, [sp, #11]
   1604e:	e7ff      	b.n	16050 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   16050:	f89d 0011 	ldrb.w	r0, [sp, #17]
   16054:	07c0      	lsls	r0, r0, #31
   16056:	2800      	cmp	r0, #0
   16058:	d104      	bne.n	16064 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   1605a:	e7ff      	b.n	1605c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   1605c:	9801      	ldr	r0, [sp, #4]
   1605e:	2801      	cmp	r0, #1
   16060:	d008      	beq.n	16074 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   16062:	e011      	b.n	16088 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   16064:	2000      	movs	r0, #0
   16066:	f88d 0011 	strb.w	r0, [sp, #17]
   1606a:	e7f7      	b.n	1605c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   1606c:	f89d 000b 	ldrb.w	r0, [sp, #11]
   16070:	b008      	add	sp, #32
   16072:	bd80      	pop	{r7, pc}
   16074:	f89d 0012 	ldrb.w	r0, [sp, #18]
   16078:	07c0      	lsls	r0, r0, #31
   1607a:	2800      	cmp	r0, #0
   1607c:	d0f6      	beq.n	1606c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1607e:	e7ff      	b.n	16080 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   16080:	2000      	movs	r0, #0
   16082:	f88d 0012 	strb.w	r0, [sp, #18]
   16086:	e7f1      	b.n	1606c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   16088:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1608c:	07c0      	lsls	r0, r0, #31
   1608e:	2800      	cmp	r0, #0
   16090:	d0ec      	beq.n	1606c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   16092:	e7ff      	b.n	16094 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   16094:	2000      	movs	r0, #0
   16096:	f88d 0013 	strb.w	r0, [sp, #19]
   1609a:	e7e7      	b.n	1606c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

0001609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   1609c:	b082      	sub	sp, #8
   1609e:	2001      	movs	r0, #1
   160a0:	f88d 0003 	strb.w	r0, [sp, #3]
   160a4:	f89d 0003 	ldrb.w	r0, [sp, #3]
   160a8:	b002      	add	sp, #8
   160aa:	4770      	bx	lr

000160ac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   160ac:	b580      	push	{r7, lr}
   160ae:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   160b0:	f001 ffe0 	bl	18074 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   160b4:	9003      	str	r0, [sp, #12]
   160b6:	e7ff      	b.n	160b8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0xc>
   160b8:	9803      	ldr	r0, [sp, #12]
   160ba:	f002 f841 	bl	18140 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   160be:	9002      	str	r0, [sp, #8]
   160c0:	e7ff      	b.n	160c2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x16>
   160c2:	f000 f823 	bl	1610c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>
   160c6:	9001      	str	r0, [sp, #4]
   160c8:	e7ff      	b.n	160ca <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x1e>
   160ca:	9801      	ldr	r0, [sp, #4]
   160cc:	0041      	lsls	r1, r0, #1
   160ce:	9100      	str	r1, [sp, #0]
   160d0:	e7ff      	b.n	160d2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x26>
   160d2:	9802      	ldr	r0, [sp, #8]
   160d4:	9900      	ldr	r1, [sp, #0]
   160d6:	4308      	orrs	r0, r1
    }
   160d8:	b004      	add	sp, #16
   160da:	bd80      	pop	{r7, pc}

000160dc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>:
    fn to_usize() -> usize {
   160dc:	b580      	push	{r7, lr}
   160de:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   160e0:	f001 ffc8 	bl	18074 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   160e4:	9003      	str	r0, [sp, #12]
   160e6:	e7ff      	b.n	160e8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0xc>
   160e8:	9803      	ldr	r0, [sp, #12]
   160ea:	f002 f829 	bl	18140 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   160ee:	9002      	str	r0, [sp, #8]
   160f0:	e7ff      	b.n	160f2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x16>
   160f2:	f7ff ffdb 	bl	160ac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   160f6:	9001      	str	r0, [sp, #4]
   160f8:	e7ff      	b.n	160fa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x1e>
   160fa:	9801      	ldr	r0, [sp, #4]
   160fc:	0041      	lsls	r1, r0, #1
   160fe:	9100      	str	r1, [sp, #0]
   16100:	e7ff      	b.n	16102 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x26>
   16102:	9802      	ldr	r0, [sp, #8]
   16104:	9900      	ldr	r1, [sp, #0]
   16106:	4308      	orrs	r0, r1
    }
   16108:	b004      	add	sp, #16
   1610a:	bd80      	pop	{r7, pc}

0001610c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>:
    fn to_usize() -> usize {
   1610c:	b580      	push	{r7, lr}
   1610e:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16110:	f001 ffb2 	bl	18078 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   16114:	9003      	str	r0, [sp, #12]
   16116:	e7ff      	b.n	16118 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0xc>
   16118:	9803      	ldr	r0, [sp, #12]
   1611a:	f002 f811 	bl	18140 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1611e:	9002      	str	r0, [sp, #8]
   16120:	e7ff      	b.n	16122 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x16>
   16122:	f000 f83b 	bl	1619c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>
   16126:	9001      	str	r0, [sp, #4]
   16128:	e7ff      	b.n	1612a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x1e>
   1612a:	9801      	ldr	r0, [sp, #4]
   1612c:	0041      	lsls	r1, r0, #1
   1612e:	9100      	str	r1, [sp, #0]
   16130:	e7ff      	b.n	16132 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x26>
   16132:	9802      	ldr	r0, [sp, #8]
   16134:	9900      	ldr	r1, [sp, #0]
   16136:	4308      	orrs	r0, r1
    }
   16138:	b004      	add	sp, #16
   1613a:	bd80      	pop	{r7, pc}

0001613c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>:
    fn to_usize() -> usize {
   1613c:	b580      	push	{r7, lr}
   1613e:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16140:	f001 ff98 	bl	18074 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   16144:	9003      	str	r0, [sp, #12]
   16146:	e7ff      	b.n	16148 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0xc>
   16148:	9803      	ldr	r0, [sp, #12]
   1614a:	f001 fff9 	bl	18140 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1614e:	9002      	str	r0, [sp, #8]
   16150:	e7ff      	b.n	16152 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x16>
   16152:	f000 f80b 	bl	1616c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>
   16156:	9001      	str	r0, [sp, #4]
   16158:	e7ff      	b.n	1615a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x1e>
   1615a:	9801      	ldr	r0, [sp, #4]
   1615c:	0041      	lsls	r1, r0, #1
   1615e:	9100      	str	r1, [sp, #0]
   16160:	e7ff      	b.n	16162 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x26>
   16162:	9802      	ldr	r0, [sp, #8]
   16164:	9900      	ldr	r1, [sp, #0]
   16166:	4308      	orrs	r0, r1
    }
   16168:	b004      	add	sp, #16
   1616a:	bd80      	pop	{r7, pc}

0001616c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>:
    fn to_usize() -> usize {
   1616c:	b580      	push	{r7, lr}
   1616e:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16170:	f001 ff82 	bl	18078 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   16174:	9003      	str	r0, [sp, #12]
   16176:	e7ff      	b.n	16178 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0xc>
   16178:	9803      	ldr	r0, [sp, #12]
   1617a:	f001 ffe1 	bl	18140 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1617e:	9002      	str	r0, [sp, #8]
   16180:	e7ff      	b.n	16182 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x16>
   16182:	f001 feff 	bl	17f84 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   16186:	9001      	str	r0, [sp, #4]
   16188:	e7ff      	b.n	1618a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x1e>
   1618a:	9801      	ldr	r0, [sp, #4]
   1618c:	0041      	lsls	r1, r0, #1
   1618e:	9100      	str	r1, [sp, #0]
   16190:	e7ff      	b.n	16192 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x26>
   16192:	9802      	ldr	r0, [sp, #8]
   16194:	9900      	ldr	r1, [sp, #0]
   16196:	4308      	orrs	r0, r1
    }
   16198:	b004      	add	sp, #16
   1619a:	bd80      	pop	{r7, pc}

0001619c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>:
    fn to_usize() -> usize {
   1619c:	b580      	push	{r7, lr}
   1619e:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   161a0:	f001 ff68 	bl	18074 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   161a4:	9003      	str	r0, [sp, #12]
   161a6:	e7ff      	b.n	161a8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0xc>
   161a8:	9803      	ldr	r0, [sp, #12]
   161aa:	f001 ffc9 	bl	18140 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   161ae:	9002      	str	r0, [sp, #8]
   161b0:	e7ff      	b.n	161b2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x16>
   161b2:	f7ff ffc3 	bl	1613c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>
   161b6:	9001      	str	r0, [sp, #4]
   161b8:	e7ff      	b.n	161ba <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x1e>
   161ba:	9801      	ldr	r0, [sp, #4]
   161bc:	0041      	lsls	r1, r0, #1
   161be:	9100      	str	r1, [sp, #0]
   161c0:	e7ff      	b.n	161c2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x26>
   161c2:	9802      	ldr	r0, [sp, #8]
   161c4:	9900      	ldr	r1, [sp, #0]
   161c6:	4308      	orrs	r0, r1
    }
   161c8:	b004      	add	sp, #16
   161ca:	bd80      	pop	{r7, pc}

000161cc <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>:
pub fn draw_to_display<T>(item: T)
   161cc:	b510      	push	{r4, lr}
   161ce:	b088      	sub	sp, #32
   161d0:	a901      	add	r1, sp, #4
        item
   161d2:	460a      	mov	r2, r1
   161d4:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
   161d8:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
   161dc:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
   161e0:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
   161e4:	f240 1048 	movw	r0, #328	; 0x148
   161e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   161ec:	f000 f819 	bl	16222 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>
   161f0:	9000      	str	r0, [sp, #0]
   161f2:	e7ff      	b.n	161f4 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x28>
   161f4:	9800      	ldr	r0, [sp, #0]
   161f6:	f000 0001 	and.w	r0, r0, #1
   161fa:	f647 2187 	movw	r1, #31367	; 0x7a87
   161fe:	f2c0 0102 	movt	r1, #2
   16202:	f647 23d0 	movw	r3, #31440	; 0x7ad0
   16206:	f2c0 0302 	movt	r3, #2
   1620a:	2210      	movs	r2, #16
   1620c:	f7ff fdf9 	bl	15e02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   16210:	e7ff      	b.n	16212 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x46>
}
   16212:	b008      	add	sp, #32
   16214:	bd10      	pop	{r4, pc}

00016216 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>:
   16216:	b580      	push	{r7, lr}
   16218:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   1621c:	f008 fd5c 	bl	1ecd8 <__aeabi_memcpy>
   16220:	bd80      	pop	{r7, pc}

00016222 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>:
    pub colors:   BlockColors,
}

/// Draw the pixels in the item as Pixel Blocks of contiguous Pixel Rows. The pixels are grouped by row then by block.
#[allow(dead_code)]
pub fn draw_blocks<SPI, DC, RST, T>(display: &mut ST7735<SPI, DC, RST>, item_pixels: T) -> Result<(),()>
   16222:	b5b0      	push	{r4, r5, r7, lr}
   16224:	f5ad 6d48 	sub.w	sp, sp, #3200	; 0xc80
   16228:	f8cd 0c6c 	str.w	r0, [sp, #3180]	; 0xc6c
   1622c:	aa19      	add	r2, sp, #100	; 0x64
    SPI: spi::Write<u8>,
    DC: OutputPin,
    RST: OutputPin,
    T: IntoIterator<Item = Pixel<Rgb565>>, {
    //  Get the pixels for the item to be rendered.
    let pixels = item_pixels.into_iter();
   1622e:	4613      	mov	r3, r2
   16230:	e8b1 5010 	ldmia.w	r1!, {r4, ip, lr}
   16234:	e8a3 5010 	stmia.w	r3!, {r4, ip, lr}
   16238:	e891 5030 	ldmia.w	r1, {r4, r5, ip, lr}
   1623c:	e883 5030 	stmia.w	r3, {r4, r5, ip, lr}
   16240:	a910      	add	r1, sp, #64	; 0x40
   16242:	900e      	str	r0, [sp, #56]	; 0x38
   16244:	4608      	mov	r0, r1
   16246:	4611      	mov	r1, r2
   16248:	f000 fe01 	bl	16e4e <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>
   1624c:	e7ff      	b.n	1624e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x2c>
   1624e:	a810      	add	r0, sp, #64	; 0x40
   16250:	a945      	add	r1, sp, #276	; 0x114
    //  Batch the pixels into Pixel Rows.
    let rows = to_rows(pixels);
   16252:	460a      	mov	r2, r1
   16254:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
   16258:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   1625c:	e890 5038 	ldmia.w	r0, {r3, r4, r5, ip, lr}
   16260:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   16264:	a820      	add	r0, sp, #128	; 0x80
   16266:	f000 f8b7 	bl	163d8 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>
   1626a:	e7ff      	b.n	1626c <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x4a>
   1626c:	a8a9      	add	r0, sp, #676	; 0x2a4
   1626e:	a920      	add	r1, sp, #128	; 0x80
   16270:	2294      	movs	r2, #148	; 0x94
    //  Batch the Pixel Rows into Pixel Blocks.
    let blocks = to_blocks(rows);
   16272:	900d      	str	r0, [sp, #52]	; 0x34
   16274:	f008 fd30 	bl	1ecd8 <__aeabi_memcpy>
   16278:	a84e      	add	r0, sp, #312	; 0x138
   1627a:	990d      	ldr	r1, [sp, #52]	; 0x34
   1627c:	f000 f8db 	bl	16436 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>
   16280:	e7ff      	b.n	16282 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x60>
   16282:	f20d 40a4 	addw	r0, sp, #1188	; 0x4a4
   16286:	a94e      	add	r1, sp, #312	; 0x138
   16288:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    //  For each Pixel Block...
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   1628c:	900c      	str	r0, [sp, #48]	; 0x30
   1628e:	f008 fd23 	bl	1ecd8 <__aeabi_memcpy>
   16292:	a8ce      	add	r0, sp, #824	; 0x338
   16294:	990c      	ldr	r1, [sp, #48]	; 0x30
   16296:	f7ff ffbe 	bl	16216 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>
   1629a:	e7ff      	b.n	1629c <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x7a>
   1629c:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
   162a0:	a9ce      	add	r1, sp, #824	; 0x338
   162a2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   162a6:	f008 fd17 	bl	1ecd8 <__aeabi_memcpy>
   162aa:	e7ff      	b.n	162ac <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
   162ac:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   162b0:	f50d 61c2 	add.w	r1, sp, #1552	; 0x610
   162b4:	f000 fa2c 	bl	16710 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>
   162b8:	e7ff      	b.n	162ba <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x98>
   162ba:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   162be:	2800      	cmp	r0, #0
   162c0:	d001      	beq.n	162c6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa4>
   162c2:	e7ff      	b.n	162c4 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa2>
   162c4:	e005      	b.n	162d2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xb0>
   162c6:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   162ca:	f7f4 faee 	bl	a8aa <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   162ce:	e01c      	b.n	1630a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xe8>
   162d0:	defe      	udf	#254	; 0xfe
   162d2:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   162d6:	1d01      	adds	r1, r0, #4
   162d8:	f60d 1028 	addw	r0, sp, #2344	; 0x928
   162dc:	22d4      	movs	r2, #212	; 0xd4
   162de:	900b      	str	r0, [sp, #44]	; 0x2c
   162e0:	920a      	str	r2, [sp, #40]	; 0x28
   162e2:	f008 fcf9 	bl	1ecd8 <__aeabi_memcpy>
   162e6:	f60d 10fc 	addw	r0, sp, #2556	; 0x9fc
   162ea:	9009      	str	r0, [sp, #36]	; 0x24
   162ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   162ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   162f0:	f008 fcf2 	bl	1ecd8 <__aeabi_memcpy>
   162f4:	f20d 707c 	addw	r0, sp, #1916	; 0x77c
   162f8:	9909      	ldr	r1, [sp, #36]	; 0x24
   162fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   162fc:	f008 fcec 	bl	1ecd8 <__aeabi_memcpy>
   16300:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   16304:	2801      	cmp	r0, #1
   16306:	d02c      	beq.n	16362 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>
   16308:	e061      	b.n	163ce <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x1ac>
   1630a:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
        //  Dump out the Pixel Blocks for the square in test_display()
        /* if x_left >= 60 && x_left <= 150 && x_right >= 60 && x_right <= 150 && y_top >= 60 && y_top <= 150 && y_bottom >= 60 && y_bottom <= 150 {
            console::print("pixel block ("); console::printint(x_left as i32); console::print(", "); console::printint(y_top as i32); ////
            console::print("), ("); console::printint(x_right as i32); console::print(", "); console::printint(y_bottom as i32); console::print(")\n"); ////    
        } */
    }
   1630e:	f7f4 faa9 	bl	a864 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   16312:	e022      	b.n	1635a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x138>
        display.set_pixels(
   16314:	f89d 0b9f 	ldrb.w	r0, [sp, #2975]	; 0xb9f
   16318:	f7f2 fcac 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1631c:	f88d 0b9e 	strb.w	r0, [sp, #2974]	; 0xb9e
   16320:	e7ff      	b.n	16322 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x100>
            colors) ? ;
   16322:	f89d 0b9e 	ldrb.w	r0, [sp, #2974]	; 0xb9e
   16326:	07c1      	lsls	r1, r0, #31
   16328:	2900      	cmp	r1, #0
   1632a:	d001      	beq.n	16330 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10e>
   1632c:	e7ff      	b.n	1632e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10c>
   1632e:	e001      	b.n	16334 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x112>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   16330:	e7bc      	b.n	162ac <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
        display.set_pixels(
   16332:	defe      	udf	#254	; 0xfe
            colors) ? ;
   16334:	f7fc fc0d 	bl	12b52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   16338:	e004      	b.n	16344 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x122>
    Ok(())
}
   1633a:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   1633e:	f50d 6d48 	add.w	sp, sp, #3200	; 0xc80
   16342:	bdb0      	pop	{r4, r5, r7, pc}
            colors) ? ;
   16344:	f7ff feaa 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   16348:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   1634c:	e7ff      	b.n	1634e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x12c>
   1634e:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
    }
   16352:	f7f4 fa87 	bl	a864 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   16356:	e7ff      	b.n	16358 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x136>
}
   16358:	e7ef      	b.n	1633a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
   1635a:	2000      	movs	r0, #0
    Ok(())
   1635c:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
}
   16360:	e7eb      	b.n	1633a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   16362:	f8bd 0848 	ldrh.w	r0, [sp, #2120]	; 0x848
   16366:	f8ad 0c78 	strh.w	r0, [sp, #3192]	; 0xc78
   1636a:	f8bd 184a 	ldrh.w	r1, [sp, #2122]	; 0x84a
   1636e:	f8ad 1c7a 	strh.w	r1, [sp, #3194]	; 0xc7a
   16372:	f8bd 284c 	ldrh.w	r2, [sp, #2124]	; 0x84c
   16376:	f8ad 2c7c 	strh.w	r2, [sp, #3196]	; 0xc7c
   1637a:	f8bd 384e 	ldrh.w	r3, [sp, #2126]	; 0x84e
   1637e:	f8ad 3c7e 	strh.w	r3, [sp, #3198]	; 0xc7e
   16382:	f50d 6c2d 	add.w	ip, sp, #2768	; 0xad0
   16386:	f20d 7e7c 	addw	lr, sp, #1916	; 0x77c
   1638a:	24cc      	movs	r4, #204	; 0xcc
   1638c:	9008      	str	r0, [sp, #32]
   1638e:	4660      	mov	r0, ip
   16390:	9107      	str	r1, [sp, #28]
   16392:	4671      	mov	r1, lr
   16394:	9206      	str	r2, [sp, #24]
   16396:	4622      	mov	r2, r4
   16398:	9305      	str	r3, [sp, #20]
   1639a:	f8cd c010 	str.w	ip, [sp, #16]
   1639e:	9403      	str	r4, [sp, #12]
   163a0:	f008 fc9a 	bl	1ecd8 <__aeabi_memcpy>
   163a4:	f50d 603a 	add.w	r0, sp, #2976	; 0xba0
            colors) ? ;
   163a8:	9002      	str	r0, [sp, #8]
   163aa:	9904      	ldr	r1, [sp, #16]
   163ac:	9a03      	ldr	r2, [sp, #12]
   163ae:	f008 fc93 	bl	1ecd8 <__aeabi_memcpy>
        display.set_pixels(
   163b2:	4668      	mov	r0, sp
   163b4:	9902      	ldr	r1, [sp, #8]
   163b6:	6041      	str	r1, [r0, #4]
   163b8:	9a05      	ldr	r2, [sp, #20]
   163ba:	6002      	str	r2, [r0, #0]
   163bc:	980e      	ldr	r0, [sp, #56]	; 0x38
   163be:	9908      	ldr	r1, [sp, #32]
   163c0:	9a06      	ldr	r2, [sp, #24]
   163c2:	9b07      	ldr	r3, [sp, #28]
   163c4:	f7f3 fa9b 	bl	98fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>
   163c8:	f88d 0b9f 	strb.w	r0, [sp, #2975]	; 0xb9f
   163cc:	e7a2      	b.n	16314 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xf2>
   163ce:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   163d2:	f7f4 fa6a 	bl	a8aa <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   163d6:	e7c4      	b.n	16362 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>

000163d8 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>:

/// Batch the pixels into Pixel Rows, which are contiguous pixels on the same row.
/// P can be any Pixel Iterator (e.g. a rectangle).
fn to_rows<P>(pixels: P) -> RowIterator<P>
   163d8:	b5b0      	push	{r4, r5, r7, lr}
   163da:	b0a4      	sub	sp, #144	; 0x90
   163dc:	aa01      	add	r2, sp, #4
where
    P: Iterator<Item = Pixel<Rgb565>>, {
    RowIterator::<P> {
        pixels,
   163de:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
   163e2:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   163e6:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
   163ea:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   163ee:	a90a      	add	r1, sp, #40	; 0x28
        x_left: 0,
        x_right: 0,
        y: 0,
        colors: RowColors::new(),
   163f0:	9000      	str	r0, [sp, #0]
   163f2:	4608      	mov	r0, r1
   163f4:	f7ff f948 	bl	15688 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>
   163f8:	e7ff      	b.n	163fa <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E+0x22>
   163fa:	a801      	add	r0, sp, #4
    RowIterator::<P> {
   163fc:	9900      	ldr	r1, [sp, #0]
   163fe:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
   16402:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
   16406:	e890 501c 	ldmia.w	r0, {r2, r3, r4, ip, lr}
   1640a:	e881 501c 	stmia.w	r1, {r2, r3, r4, ip, lr}
   1640e:	2000      	movs	r0, #0
   16410:	9900      	ldr	r1, [sp, #0]
   16412:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
   16416:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
   1641a:	f8a1 0090 	strh.w	r0, [r1, #144]	; 0x90
   1641e:	f101 0024 	add.w	r0, r1, #36	; 0x24
   16422:	a90a      	add	r1, sp, #40	; 0x28
   16424:	2268      	movs	r2, #104	; 0x68
   16426:	f008 fc57 	bl	1ecd8 <__aeabi_memcpy>
   1642a:	2001      	movs	r0, #1
   1642c:	9900      	ldr	r1, [sp, #0]
   1642e:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
        first_pixel: true,
    }
}
   16432:	b024      	add	sp, #144	; 0x90
   16434:	bdb0      	pop	{r4, r5, r7, pc}

00016436 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>:

/// Batch the Pixel Rows into Pixel Blocks, which are contiguous Pixel Rows with the same start and end column number
/// R can be any Pixel Row Iterator.
fn to_blocks<R>(rows: R) -> BlockIterator<R>
   16436:	b580      	push	{r7, lr}
   16438:	b0da      	sub	sp, #360	; 0x168
   1643a:	aa02      	add	r2, sp, #8
   1643c:	2394      	movs	r3, #148	; 0x94
where
    R: Iterator<Item = PixelRow>, {
    BlockIterator::<R> {
        rows,
   1643e:	9001      	str	r0, [sp, #4]
   16440:	4610      	mov	r0, r2
   16442:	461a      	mov	r2, r3
   16444:	f008 fc48 	bl	1ecd8 <__aeabi_memcpy>
   16448:	a827      	add	r0, sp, #156	; 0x9c
        x_left: 0,
        x_right: 0,
        y_top: 0,
        y_bottom: 0,
        colors: BlockColors::new(),
   1644a:	f7ff f92c 	bl	156a6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>
   1644e:	e7ff      	b.n	16450 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E+0x1a>
   16450:	a902      	add	r1, sp, #8
   16452:	2294      	movs	r2, #148	; 0x94
    BlockIterator::<R> {
   16454:	9801      	ldr	r0, [sp, #4]
   16456:	f008 fc3f 	bl	1ecd8 <__aeabi_memcpy>
   1645a:	2000      	movs	r0, #0
   1645c:	9901      	ldr	r1, [sp, #4]
   1645e:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
   16462:	f8a1 0162 	strh.w	r0, [r1, #354]	; 0x162
   16466:	f8a1 0164 	strh.w	r0, [r1, #356]	; 0x164
   1646a:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
   1646e:	f101 0094 	add.w	r0, r1, #148	; 0x94
   16472:	a927      	add	r1, sp, #156	; 0x9c
   16474:	22cc      	movs	r2, #204	; 0xcc
   16476:	f008 fc2f 	bl	1ecd8 <__aeabi_memcpy>
   1647a:	2001      	movs	r0, #1
   1647c:	9901      	ldr	r1, [sp, #4]
   1647e:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
        first_row: true,
    }
}    
   16482:	b05a      	add	sp, #360	; 0x168
   16484:	bd80      	pop	{r7, pc}

00016486 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>:
impl<P: Iterator<Item = Pixel<Rgb565>>> Iterator for RowIterator<P> {
    /// This Iterator returns Pixel Rows
    type Item = PixelRow;

    /// Return the next Pixel Row of contiguous pixels on the same row
    fn next(&mut self) -> Option<Self::Item> {
   16486:	b580      	push	{r7, lr}
   16488:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
   1648c:	91c1      	str	r1, [sp, #772]	; 0x304
        //  Loop over all pixels until we have composed a Pixel Row, or we have run out of pixels.
        loop {
   1648e:	9116      	str	r1, [sp, #88]	; 0x58
   16490:	9015      	str	r0, [sp, #84]	; 0x54
   16492:	e7ff      	b.n	16494 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   16494:	a817      	add	r0, sp, #92	; 0x5c
            //  Get the next pixel.
            let next_pixel = self.pixels.next();
   16496:	9916      	ldr	r1, [sp, #88]	; 0x58
   16498:	f000 fd34 	bl	16f04 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>
   1649c:	e7ff      	b.n	1649e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x18>
            match next_pixel {
                None => {  //  If no more pixels...
   1649e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   164a0:	2800      	cmp	r0, #0
   164a2:	d01c      	beq.n	164de <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x58>
   164a4:	e7ff      	b.n	164a6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x20>
                    };
                    self.colors.clear();
                    self.first_pixel = true;
                    return Some(row);
                }
                Some(Pixel(coord, color)) => {  //  If there is a pixel...
   164a6:	9818      	ldr	r0, [sp, #96]	; 0x60
   164a8:	9919      	ldr	r1, [sp, #100]	; 0x64
   164aa:	90c2      	str	r0, [sp, #776]	; 0x308
   164ac:	91c3      	str	r1, [sp, #780]	; 0x30c
   164ae:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   164b2:	4613      	mov	r3, r2
   164b4:	f8ad 2310 	strh.w	r2, [sp, #784]	; 0x310
                    let x = coord.0 as u16;
   164b8:	f8ad 0312 	strh.w	r0, [sp, #786]	; 0x312
                    let y = coord.1 as u16;
   164bc:	f8ad 1314 	strh.w	r1, [sp, #788]	; 0x314
                    let color = color.0;
   164c0:	f8ad 2316 	strh.w	r2, [sp, #790]	; 0x316
                    //  Save the first pixel as the row start and handle next pixel.
                    if self.first_pixel {
   164c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   164c6:	f892 c092 	ldrb.w	ip, [r2, #146]	; 0x92
   164ca:	ea4f 7ccc 	mov.w	ip, ip, lsl #31
   164ce:	f1bc 0f00 	cmp.w	ip, #0
   164d2:	9014      	str	r0, [sp, #80]	; 0x50
   164d4:	9113      	str	r1, [sp, #76]	; 0x4c
   164d6:	9312      	str	r3, [sp, #72]	; 0x48
   164d8:	d156      	bne.n	16588 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x102>
   164da:	e04a      	b.n	16572 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xec>
            match next_pixel {
   164dc:	defe      	udf	#254	; 0xfe
                    if self.first_pixel {
   164de:	9816      	ldr	r0, [sp, #88]	; 0x58
   164e0:	f890 1092 	ldrb.w	r1, [r0, #146]	; 0x92
   164e4:	07c9      	lsls	r1, r1, #31
   164e6:	2900      	cmp	r1, #0
   164e8:	d111      	bne.n	1650e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x88>
   164ea:	e7ff      	b.n	164ec <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x66>
                        x_left: self.x_left,
   164ec:	9816      	ldr	r0, [sp, #88]	; 0x58
   164ee:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   164f2:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   164f6:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   164fa:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   164fe:	a837      	add	r0, sp, #220	; 0xdc
   16500:	9111      	str	r1, [sp, #68]	; 0x44
   16502:	4661      	mov	r1, ip
   16504:	9210      	str	r2, [sp, #64]	; 0x40
   16506:	930f      	str	r3, [sp, #60]	; 0x3c
   16508:	f7ff f827 	bl	1555a <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   1650c:	e006      	b.n	1651c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x96>
   1650e:	2000      	movs	r0, #0
                        return None;  //  No pixels to group
   16510:	9915      	ldr	r1, [sp, #84]	; 0x54
   16512:	6008      	str	r0, [r1, #0]
   16514:	e7ff      	b.n	16516 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                        .expect("never");
                    return Some(row);
                }
            }
        }
    }
   16516:	f50d 7d46 	add.w	sp, sp, #792	; 0x318
   1651a:	bd80      	pop	{r7, pc}
                    let row = PixelRow {
   1651c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1651e:	f8ad 00d4 	strh.w	r0, [sp, #212]	; 0xd4
   16522:	9910      	ldr	r1, [sp, #64]	; 0x40
   16524:	f8ad 10d6 	strh.w	r1, [sp, #214]	; 0xd6
   16528:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1652a:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
   1652e:	a81b      	add	r0, sp, #108	; 0x6c
   16530:	a937      	add	r1, sp, #220	; 0xdc
   16532:	2268      	movs	r2, #104	; 0x68
   16534:	f008 fbd0 	bl	1ecd8 <__aeabi_memcpy>
                    self.colors.clear();
   16538:	9816      	ldr	r0, [sp, #88]	; 0x58
   1653a:	3024      	adds	r0, #36	; 0x24
   1653c:	f7ff f8d2 	bl	156e4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   16540:	e7ff      	b.n	16542 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xbc>
   16542:	2001      	movs	r0, #1
                    self.first_pixel = true;
   16544:	9916      	ldr	r1, [sp, #88]	; 0x58
   16546:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
   1654a:	aa51      	add	r2, sp, #324	; 0x144
   1654c:	a91b      	add	r1, sp, #108	; 0x6c
   1654e:	2370      	movs	r3, #112	; 0x70
                    return Some(row);
   16550:	900e      	str	r0, [sp, #56]	; 0x38
   16552:	4610      	mov	r0, r2
   16554:	920d      	str	r2, [sp, #52]	; 0x34
   16556:	461a      	mov	r2, r3
   16558:	930c      	str	r3, [sp, #48]	; 0x30
   1655a:	f008 fbbd 	bl	1ecd8 <__aeabi_memcpy>
   1655e:	9815      	ldr	r0, [sp, #84]	; 0x54
   16560:	3004      	adds	r0, #4
   16562:	990d      	ldr	r1, [sp, #52]	; 0x34
   16564:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16566:	f008 fbb7 	bl	1ecd8 <__aeabi_memcpy>
   1656a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1656c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1656e:	6008      	str	r0, [r1, #0]
   16570:	e7d1      	b.n	16516 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   16572:	9816      	ldr	r0, [sp, #88]	; 0x58
   16574:	f8b0 108e 	ldrh.w	r1, [r0, #142]	; 0x8e
   16578:	3101      	adds	r1, #1
   1657a:	b28a      	uxth	r2, r1
   1657c:	460b      	mov	r3, r1
   1657e:	428a      	cmp	r2, r1
   16580:	930b      	str	r3, [sp, #44]	; 0x2c
   16582:	f040 80b9 	bne.w	166f8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x272>
   16586:	e040      	b.n	1660a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x184>
   16588:	2000      	movs	r0, #0
                        self.first_pixel = false;
   1658a:	9916      	ldr	r1, [sp, #88]	; 0x58
   1658c:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
                        self.x_left = x;
   16590:	9814      	ldr	r0, [sp, #80]	; 0x50
   16592:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                        self.x_right = x;
   16596:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                        self.y = y;
   1659a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1659c:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                        self.colors.clear();
   165a0:	f101 0024 	add.w	r0, r1, #36	; 0x24
   165a4:	f7ff f89e 	bl	156e4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   165a8:	e7ff      	b.n	165aa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x124>
                        self.colors.push(color)
   165aa:	9816      	ldr	r0, [sp, #88]	; 0x58
   165ac:	3024      	adds	r0, #36	; 0x24
   165ae:	9912      	ldr	r1, [sp, #72]	; 0x48
   165b0:	f7ff f888 	bl	156c4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   165b4:	900a      	str	r0, [sp, #40]	; 0x28
   165b6:	9109      	str	r1, [sp, #36]	; 0x24
   165b8:	e7ff      	b.n	165ba <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x134>
   165ba:	f647 301c 	movw	r0, #31516	; 0x7b1c
   165be:	f2c0 0002 	movt	r0, #2
   165c2:	4669      	mov	r1, sp
   165c4:	6008      	str	r0, [r1, #0]
   165c6:	f647 22e0 	movw	r2, #31456	; 0x7ae0
   165ca:	f2c0 0202 	movt	r2, #2
   165ce:	2305      	movs	r3, #5
   165d0:	980a      	ldr	r0, [sp, #40]	; 0x28
   165d2:	9909      	ldr	r1, [sp, #36]	; 0x24
   165d4:	f7ff fbe4 	bl	15da0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   165d8:	e7ff      	b.n	165da <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x154>
                        continue;
   165da:	e7ff      	b.n	165dc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
   165dc:	e75a      	b.n	16494 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   165de:	2001      	movs	r0, #1
                    if x == self.x_right + 1 && y == self.y {
   165e0:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   165e4:	e00b      	b.n	165fe <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   165e6:	2000      	movs	r0, #0
   165e8:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   165ec:	e007      	b.n	165fe <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   165ee:	9816      	ldr	r0, [sp, #88]	; 0x58
   165f0:	f8b0 1090 	ldrh.w	r1, [r0, #144]	; 0x90
   165f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   165f6:	b293      	uxth	r3, r2
   165f8:	428b      	cmp	r3, r1
   165fa:	d0f0      	beq.n	165de <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x158>
   165fc:	e7f3      	b.n	165e6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
   165fe:	f89d 01b7 	ldrb.w	r0, [sp, #439]	; 0x1b7
   16602:	07c0      	lsls	r0, r0, #31
   16604:	2800      	cmp	r0, #0
   16606:	d107      	bne.n	16618 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x192>
   16608:	e020      	b.n	1664c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
   1660a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1660c:	b281      	uxth	r1, r0
   1660e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16610:	b293      	uxth	r3, r2
   16612:	428b      	cmp	r3, r1
   16614:	d0eb      	beq.n	165ee <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x168>
   16616:	e7e6      	b.n	165e6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
                        if self.colors.push(color).is_ok() {
   16618:	9816      	ldr	r0, [sp, #88]	; 0x58
   1661a:	3024      	adds	r0, #36	; 0x24
   1661c:	9912      	ldr	r1, [sp, #72]	; 0x48
   1661e:	f7ff f851 	bl	156c4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   16622:	f8ad 11ba 	strh.w	r1, [sp, #442]	; 0x1ba
   16626:	f8ad 01b8 	strh.w	r0, [sp, #440]	; 0x1b8
   1662a:	e7ff      	b.n	1662c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1a6>
   1662c:	a86e      	add	r0, sp, #440	; 0x1b8
   1662e:	f7ff fb92 	bl	15d56 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>
   16632:	9008      	str	r0, [sp, #32]
   16634:	e7ff      	b.n	16636 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1b0>
   16636:	9808      	ldr	r0, [sp, #32]
   16638:	07c1      	lsls	r1, r0, #31
   1663a:	2900      	cmp	r1, #0
   1663c:	d101      	bne.n	16642 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1bc>
   1663e:	e7ff      	b.n	16640 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1ba>
                    if x == self.x_right + 1 && y == self.y {
   16640:	e004      	b.n	1664c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
                            self.x_right = x;
   16642:	9814      	ldr	r0, [sp, #80]	; 0x50
   16644:	9916      	ldr	r1, [sp, #88]	; 0x58
   16646:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                            continue;
   1664a:	e7c7      	b.n	165dc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
                        x_left: self.x_left,
   1664c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1664e:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   16652:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   16656:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   1665a:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   1665e:	a88b      	add	r0, sp, #556	; 0x22c
   16660:	9107      	str	r1, [sp, #28]
   16662:	4661      	mov	r1, ip
   16664:	9206      	str	r2, [sp, #24]
   16666:	9305      	str	r3, [sp, #20]
   16668:	f7fe ff77 	bl	1555a <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   1666c:	e7ff      	b.n	1666e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1e8>
                    let row = PixelRow {
   1666e:	9807      	ldr	r0, [sp, #28]
   16670:	f8ad 0224 	strh.w	r0, [sp, #548]	; 0x224
   16674:	9906      	ldr	r1, [sp, #24]
   16676:	f8ad 1226 	strh.w	r1, [sp, #550]	; 0x226
   1667a:	9a05      	ldr	r2, [sp, #20]
   1667c:	f8ad 2228 	strh.w	r2, [sp, #552]	; 0x228
   16680:	a86f      	add	r0, sp, #444	; 0x1bc
   16682:	a98b      	add	r1, sp, #556	; 0x22c
   16684:	2268      	movs	r2, #104	; 0x68
   16686:	f008 fb27 	bl	1ecd8 <__aeabi_memcpy>
                    self.x_left = x;
   1668a:	9814      	ldr	r0, [sp, #80]	; 0x50
   1668c:	9916      	ldr	r1, [sp, #88]	; 0x58
   1668e:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                    self.x_right = x;
   16692:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                    self.y = y;
   16696:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16698:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                    self.colors.clear();
   1669c:	f101 0024 	add.w	r0, r1, #36	; 0x24
   166a0:	f7ff f820 	bl	156e4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   166a4:	e7ff      	b.n	166a6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x220>
                    self.colors.push(color)
   166a6:	9816      	ldr	r0, [sp, #88]	; 0x58
   166a8:	3024      	adds	r0, #36	; 0x24
   166aa:	9912      	ldr	r1, [sp, #72]	; 0x48
   166ac:	f7ff f80a 	bl	156c4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   166b0:	9004      	str	r0, [sp, #16]
   166b2:	9103      	str	r1, [sp, #12]
   166b4:	e7ff      	b.n	166b6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x230>
   166b6:	f647 305c 	movw	r0, #31580	; 0x7b5c
   166ba:	f2c0 0002 	movt	r0, #2
   166be:	4669      	mov	r1, sp
   166c0:	6008      	str	r0, [r1, #0]
   166c2:	f647 22e0 	movw	r2, #31456	; 0x7ae0
   166c6:	f2c0 0202 	movt	r2, #2
   166ca:	2305      	movs	r3, #5
   166cc:	9804      	ldr	r0, [sp, #16]
   166ce:	9903      	ldr	r1, [sp, #12]
   166d0:	f7ff fb66 	bl	15da0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   166d4:	e7ff      	b.n	166d6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x250>
   166d6:	a8a5      	add	r0, sp, #660	; 0x294
   166d8:	a96f      	add	r1, sp, #444	; 0x1bc
   166da:	2270      	movs	r2, #112	; 0x70
                    return Some(row);
   166dc:	9002      	str	r0, [sp, #8]
   166de:	9201      	str	r2, [sp, #4]
   166e0:	f008 fafa 	bl	1ecd8 <__aeabi_memcpy>
   166e4:	9815      	ldr	r0, [sp, #84]	; 0x54
   166e6:	3004      	adds	r0, #4
   166e8:	9902      	ldr	r1, [sp, #8]
   166ea:	9a01      	ldr	r2, [sp, #4]
   166ec:	f008 faf4 	bl	1ecd8 <__aeabi_memcpy>
   166f0:	2001      	movs	r0, #1
   166f2:	9915      	ldr	r1, [sp, #84]	; 0x54
   166f4:	6008      	str	r0, [r1, #0]
   166f6:	e70e      	b.n	16516 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   166f8:	f647 3040 	movw	r0, #31552	; 0x7b40
   166fc:	f2c0 0002 	movt	r0, #2
   16700:	f647 322c 	movw	r2, #31532	; 0x7b2c
   16704:	f2c0 0202 	movt	r2, #2
   16708:	211c      	movs	r1, #28
   1670a:	f001 ff11 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1670e:	defe      	udf	#254	; 0xfe

00016710 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>:
impl<R: Iterator<Item = PixelRow>> Iterator for BlockIterator<R> {
    /// This Iterator returns Pixel Blocks
    type Item = PixelBlock;

    /// Return the next Pixel Block of contiguous Pixel Rows with the same start and end column number
    fn next(&mut self) -> Option<Self::Item> {
   16710:	b580      	push	{r7, lr}
   16712:	f5ad 6dcb 	sub.w	sp, sp, #1624	; 0x658
   16716:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c
   1671a:	2200      	movs	r2, #0
        //  Loop over all Pixel Rows until we have composed a Pixel Block, or we have run out of Pixel Rows.
        loop {
   1671c:	f88d 264b 	strb.w	r2, [sp, #1611]	; 0x64b
   16720:	911f      	str	r1, [sp, #124]	; 0x7c
   16722:	901e      	str	r0, [sp, #120]	; 0x78
   16724:	e7ff      	b.n	16726 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   16726:	2001      	movs	r0, #1
            //  Get the next Pixel Row.
            let next_row = self.rows.next();
   16728:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   1672c:	a820      	add	r0, sp, #128	; 0x80
   1672e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   16730:	f7ff fea9 	bl	16486 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>
   16734:	e7ff      	b.n	16736 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x26>
            match next_row {
                None => {  //  If no more Pixel Rows...
   16736:	9820      	ldr	r0, [sp, #128]	; 0x80
   16738:	2800      	cmp	r0, #0
   1673a:	d026      	beq.n	1678a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x7a>
   1673c:	e7ff      	b.n	1673e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e>
   1673e:	a820      	add	r0, sp, #128	; 0x80
                    };
                    self.colors.clear();
                    self.first_row = true;
                    return Some(row);
                }
                Some(PixelRow { x_left, x_right, y, colors, .. }) => {  //  If there is a Pixel Row...
   16740:	1d01      	adds	r1, r0, #4
   16742:	f8bd 00ec 	ldrh.w	r0, [sp, #236]	; 0xec
   16746:	4602      	mov	r2, r0
   16748:	f8ad 0652 	strh.w	r0, [sp, #1618]	; 0x652
   1674c:	f8bd 00ee 	ldrh.w	r0, [sp, #238]	; 0xee
   16750:	4603      	mov	r3, r0
   16752:	f8ad 0654 	strh.w	r0, [sp, #1620]	; 0x654
   16756:	f8bd 00f0 	ldrh.w	r0, [sp, #240]	; 0xf0
   1675a:	4684      	mov	ip, r0
   1675c:	f8ad 0656 	strh.w	r0, [sp, #1622]	; 0x656
   16760:	2000      	movs	r0, #0
   16762:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   16766:	a8da      	add	r0, sp, #872	; 0x368
   16768:	f04f 0e68 	mov.w	lr, #104	; 0x68
   1676c:	921d      	str	r2, [sp, #116]	; 0x74
   1676e:	4672      	mov	r2, lr
   16770:	931c      	str	r3, [sp, #112]	; 0x70
   16772:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   16776:	f008 faaf 	bl	1ecd8 <__aeabi_memcpy>
                    //  Save the first row as the block start and handle next block.
                    if self.first_row {
   1677a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1677c:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   16780:	07c9      	lsls	r1, r1, #31
   16782:	2900      	cmp	r1, #0
   16784:	d15a      	bne.n	1683c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x12c>
   16786:	e04e      	b.n	16826 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x116>
            match next_row {
   16788:	defe      	udf	#254	; 0xfe
                    if self.first_row {
   1678a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1678c:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   16790:	07c9      	lsls	r1, r1, #31
   16792:	2900      	cmp	r1, #0
   16794:	d115      	bne.n	167c2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xb2>
   16796:	e7ff      	b.n	16798 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x88>
                        x_left: self.x_left,
   16798:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1679a:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   1679e:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   167a2:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   167a6:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   167aa:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   167ae:	a872      	add	r0, sp, #456	; 0x1c8
   167b0:	911a      	str	r1, [sp, #104]	; 0x68
   167b2:	4671      	mov	r1, lr
   167b4:	9219      	str	r2, [sp, #100]	; 0x64
   167b6:	9318      	str	r3, [sp, #96]	; 0x60
   167b8:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
   167bc:	f7fe fedd 	bl	1557a <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   167c0:	e003      	b.n	167ca <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xba>
   167c2:	2000      	movs	r0, #0
                        return None;  //  No rows to group
   167c4:	991e      	ldr	r1, [sp, #120]	; 0x78
   167c6:	6008      	str	r0, [r1, #0]
   167c8:	e153      	b.n	16a72 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                    let row = PixelBlock {
   167ca:	981a      	ldr	r0, [sp, #104]	; 0x68
   167cc:	f8ad 01c0 	strh.w	r0, [sp, #448]	; 0x1c0
   167d0:	9919      	ldr	r1, [sp, #100]	; 0x64
   167d2:	f8ad 11c2 	strh.w	r1, [sp, #450]	; 0x1c2
   167d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
   167d8:	f8ad 21c4 	strh.w	r2, [sp, #452]	; 0x1c4
   167dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   167de:	f8ad 31c6 	strh.w	r3, [sp, #454]	; 0x1c6
   167e2:	a83d      	add	r0, sp, #244	; 0xf4
   167e4:	a972      	add	r1, sp, #456	; 0x1c8
   167e6:	22cc      	movs	r2, #204	; 0xcc
   167e8:	f008 fa76 	bl	1ecd8 <__aeabi_memcpy>
                    self.colors.clear();
   167ec:	981f      	ldr	r0, [sp, #124]	; 0x7c
   167ee:	3094      	adds	r0, #148	; 0x94
   167f0:	f7fe ff80 	bl	156f4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   167f4:	e7ff      	b.n	167f6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xe6>
   167f6:	2001      	movs	r0, #1
                    self.first_row = true;
   167f8:	991f      	ldr	r1, [sp, #124]	; 0x7c
   167fa:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
   167fe:	aaa5      	add	r2, sp, #660	; 0x294
   16800:	a93d      	add	r1, sp, #244	; 0xf4
   16802:	23d4      	movs	r3, #212	; 0xd4
                    return Some(row);
   16804:	9016      	str	r0, [sp, #88]	; 0x58
   16806:	4610      	mov	r0, r2
   16808:	9215      	str	r2, [sp, #84]	; 0x54
   1680a:	461a      	mov	r2, r3
   1680c:	9314      	str	r3, [sp, #80]	; 0x50
   1680e:	f008 fa63 	bl	1ecd8 <__aeabi_memcpy>
   16812:	981e      	ldr	r0, [sp, #120]	; 0x78
   16814:	3004      	adds	r0, #4
   16816:	9915      	ldr	r1, [sp, #84]	; 0x54
   16818:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1681a:	f008 fa5d 	bl	1ecd8 <__aeabi_memcpy>
   1681e:	9816      	ldr	r0, [sp, #88]	; 0x58
   16820:	991e      	ldr	r1, [sp, #120]	; 0x78
   16822:	6008      	str	r0, [r1, #0]
   16824:	e125      	b.n	16a72 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                        self.colors.extend_from_slice(&colors)
                            .expect("never");
                        continue;
                    }
                    //  If this row is adjacent to the previous row and same size, add to the block.
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   16826:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16828:	f8b0 1166 	ldrh.w	r1, [r0, #358]	; 0x166
   1682c:	3101      	adds	r1, #1
   1682e:	b28a      	uxth	r2, r1
   16830:	460b      	mov	r3, r1
   16832:	428a      	cmp	r2, r1
   16834:	9313      	str	r3, [sp, #76]	; 0x4c
   16836:	f040 8128 	bne.w	16a8a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x37a>
   1683a:	e069      	b.n	16910 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x200>
   1683c:	2000      	movs	r0, #0
                        self.first_row = false;
   1683e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   16840:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
                        self.x_left = x_left;
   16844:	981d      	ldr	r0, [sp, #116]	; 0x74
   16846:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                        self.x_right = x_right;
   1684a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1684c:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                        self.y_top = y;
   16850:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   16852:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                        self.y_bottom = y;
   16856:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                        self.colors.clear();
   1685a:	f101 0094 	add.w	r0, r1, #148	; 0x94
   1685e:	f7fe ff49 	bl	156f4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   16862:	e7ff      	b.n	16864 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x154>
                        self.colors.extend_from_slice(&colors)
   16864:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16866:	f100 0194 	add.w	r1, r0, #148	; 0x94
   1686a:	a8da      	add	r0, sp, #872	; 0x368
   1686c:	9112      	str	r1, [sp, #72]	; 0x48
   1686e:	f7fe feb4 	bl	155da <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   16872:	9011      	str	r0, [sp, #68]	; 0x44
   16874:	9110      	str	r1, [sp, #64]	; 0x40
   16876:	e7ff      	b.n	16878 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x168>
   16878:	9812      	ldr	r0, [sp, #72]	; 0x48
   1687a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1687c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1687e:	f7fe fef5 	bl	1566c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   16882:	900f      	str	r0, [sp, #60]	; 0x3c
   16884:	e7ff      	b.n	16886 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x176>
   16886:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16888:	f000 0001 	and.w	r0, r0, #1
   1688c:	f647 21e0 	movw	r1, #31456	; 0x7ae0
   16890:	f2c0 0102 	movt	r1, #2
   16894:	f647 336c 	movw	r3, #31596	; 0x7b6c
   16898:	f2c0 0302 	movt	r3, #2
   1689c:	2205      	movs	r2, #5
   1689e:	f7ff fab0 	bl	15e02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   168a2:	e7ff      	b.n	168a4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x194>
                        continue;
   168a4:	e7ff      	b.n	168a6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
   168a6:	a8da      	add	r0, sp, #872	; 0x368
                    self.colors.clear();
                    self.colors.extend_from_slice(&colors)
                        .expect("never");
                    return Some(row);
                }
            }
   168a8:	f7f3 fff7 	bl	a89a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   168ac:	e7ff      	b.n	168ae <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x19e>
        }
   168ae:	9820      	ldr	r0, [sp, #128]	; 0x80
   168b0:	2801      	cmp	r0, #1
   168b2:	f000 80e2 	beq.w	16a7a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
   168b6:	e0e4      	b.n	16a82 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x372>
   168b8:	2001      	movs	r0, #1
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   168ba:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   168be:	e00b      	b.n	168d8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   168c0:	2000      	movs	r0, #0
   168c2:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   168c6:	e007      	b.n	168d8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   168c8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   168ca:	f8b0 1162 	ldrh.w	r1, [r0, #354]	; 0x162
   168ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   168d0:	b293      	uxth	r3, r2
   168d2:	428b      	cmp	r3, r1
   168d4:	d0f0      	beq.n	168b8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1a8>
   168d6:	e7f3      	b.n	168c0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   168d8:	f89d 03d1 	ldrb.w	r0, [sp, #977]	; 0x3d1
   168dc:	07c0      	lsls	r0, r0, #31
   168de:	2800      	cmp	r0, #0
   168e0:	d11d      	bne.n	1691e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x20e>
   168e2:	e03f      	b.n	16964 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
   168e4:	2001      	movs	r0, #1
   168e6:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   168ea:	e00b      	b.n	16904 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   168ec:	2000      	movs	r0, #0
   168ee:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   168f2:	e007      	b.n	16904 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   168f4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   168f6:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
   168fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   168fc:	b293      	uxth	r3, r2
   168fe:	428b      	cmp	r3, r1
   16900:	d0f0      	beq.n	168e4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1d4>
   16902:	e7f3      	b.n	168ec <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
   16904:	f89d 03d2 	ldrb.w	r0, [sp, #978]	; 0x3d2
   16908:	07c0      	lsls	r0, r0, #31
   1690a:	2800      	cmp	r0, #0
   1690c:	d1dc      	bne.n	168c8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b8>
   1690e:	e7d7      	b.n	168c0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   16910:	9813      	ldr	r0, [sp, #76]	; 0x4c
   16912:	b281      	uxth	r1, r0
   16914:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16916:	b293      	uxth	r3, r2
   16918:	428b      	cmp	r3, r1
   1691a:	d0eb      	beq.n	168f4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1e4>
   1691c:	e7e6      	b.n	168ec <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
                        if self.colors.extend_from_slice(&colors).is_ok() {
   1691e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16920:	f100 0194 	add.w	r1, r0, #148	; 0x94
   16924:	a8da      	add	r0, sp, #872	; 0x368
   16926:	910e      	str	r1, [sp, #56]	; 0x38
   16928:	f7fe fe57 	bl	155da <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   1692c:	900d      	str	r0, [sp, #52]	; 0x34
   1692e:	910c      	str	r1, [sp, #48]	; 0x30
   16930:	e7ff      	b.n	16932 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x222>
   16932:	980e      	ldr	r0, [sp, #56]	; 0x38
   16934:	990d      	ldr	r1, [sp, #52]	; 0x34
   16936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16938:	f7fe fe98 	bl	1566c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   1693c:	f88d 03d3 	strb.w	r0, [sp, #979]	; 0x3d3
   16940:	e7ff      	b.n	16942 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x232>
   16942:	f20d 30d3 	addw	r0, sp, #979	; 0x3d3
   16946:	f7ff fa18 	bl	15d7a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>
   1694a:	900b      	str	r0, [sp, #44]	; 0x2c
   1694c:	e7ff      	b.n	1694e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x23e>
   1694e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   16950:	07c1      	lsls	r1, r0, #31
   16952:	2900      	cmp	r1, #0
   16954:	d101      	bne.n	1695a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x24a>
   16956:	e7ff      	b.n	16958 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x248>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   16958:	e004      	b.n	16964 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
                            self.y_bottom = y;
   1695a:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1695c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1695e:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
                            continue;    
   16962:	e7a0      	b.n	168a6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
                        x_left: self.x_left,
   16964:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16966:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   1696a:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   1696e:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   16972:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   16976:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   1697a:	f50d 6095 	add.w	r0, sp, #1192	; 0x4a8
   1697e:	910a      	str	r1, [sp, #40]	; 0x28
   16980:	4671      	mov	r1, lr
   16982:	9209      	str	r2, [sp, #36]	; 0x24
   16984:	9308      	str	r3, [sp, #32]
   16986:	f8cd c01c 	str.w	ip, [sp, #28]
   1698a:	f7fe fdf6 	bl	1557a <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   1698e:	e7ff      	b.n	16990 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x280>
                    let row = PixelBlock {
   16990:	980a      	ldr	r0, [sp, #40]	; 0x28
   16992:	f8ad 04a0 	strh.w	r0, [sp, #1184]	; 0x4a0
   16996:	9909      	ldr	r1, [sp, #36]	; 0x24
   16998:	f8ad 14a2 	strh.w	r1, [sp, #1186]	; 0x4a2
   1699c:	9a08      	ldr	r2, [sp, #32]
   1699e:	f8ad 24a4 	strh.w	r2, [sp, #1188]	; 0x4a4
   169a2:	9b07      	ldr	r3, [sp, #28]
   169a4:	f8ad 34a6 	strh.w	r3, [sp, #1190]	; 0x4a6
   169a8:	a8f5      	add	r0, sp, #980	; 0x3d4
   169aa:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
   169ae:	22cc      	movs	r2, #204	; 0xcc
   169b0:	f008 f992 	bl	1ecd8 <__aeabi_memcpy>
                    self.x_left = x_left;
   169b4:	981d      	ldr	r0, [sp, #116]	; 0x74
   169b6:	991f      	ldr	r1, [sp, #124]	; 0x7c
   169b8:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                    self.x_right = x_right;
   169bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   169be:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                    self.y_top = y;
   169c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   169c4:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                    self.y_bottom = y;
   169c8:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                    self.colors.clear();
   169cc:	f101 0094 	add.w	r0, r1, #148	; 0x94
   169d0:	f7fe fe90 	bl	156f4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   169d4:	e7ff      	b.n	169d6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2c6>
                    self.colors.extend_from_slice(&colors)
   169d6:	981f      	ldr	r0, [sp, #124]	; 0x7c
   169d8:	f100 0194 	add.w	r1, r0, #148	; 0x94
   169dc:	a8da      	add	r0, sp, #872	; 0x368
   169de:	9106      	str	r1, [sp, #24]
   169e0:	f7fe fdfb 	bl	155da <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   169e4:	9005      	str	r0, [sp, #20]
   169e6:	9104      	str	r1, [sp, #16]
   169e8:	e7ff      	b.n	169ea <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2da>
   169ea:	9806      	ldr	r0, [sp, #24]
   169ec:	9905      	ldr	r1, [sp, #20]
   169ee:	9a04      	ldr	r2, [sp, #16]
   169f0:	f7fe fe3c 	bl	1566c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   169f4:	9003      	str	r0, [sp, #12]
   169f6:	e7ff      	b.n	169f8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e8>
   169f8:	9803      	ldr	r0, [sp, #12]
   169fa:	f000 0001 	and.w	r0, r0, #1
   169fe:	f647 21e0 	movw	r1, #31456	; 0x7ae0
   16a02:	f2c0 0102 	movt	r1, #2
   16a06:	f647 338c 	movw	r3, #31628	; 0x7b8c
   16a0a:	f2c0 0302 	movt	r3, #2
   16a0e:	2205      	movs	r2, #5
   16a10:	f7ff f9f7 	bl	15e02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   16a14:	e7ff      	b.n	16a16 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x306>
   16a16:	f20d 5074 	addw	r0, sp, #1396	; 0x574
   16a1a:	a9f5      	add	r1, sp, #980	; 0x3d4
   16a1c:	22d4      	movs	r2, #212	; 0xd4
                    return Some(row);
   16a1e:	9002      	str	r0, [sp, #8]
   16a20:	9201      	str	r2, [sp, #4]
   16a22:	f008 f959 	bl	1ecd8 <__aeabi_memcpy>
   16a26:	981e      	ldr	r0, [sp, #120]	; 0x78
   16a28:	3004      	adds	r0, #4
   16a2a:	9902      	ldr	r1, [sp, #8]
   16a2c:	9a01      	ldr	r2, [sp, #4]
   16a2e:	f008 f953 	bl	1ecd8 <__aeabi_memcpy>
   16a32:	2001      	movs	r0, #1
   16a34:	991e      	ldr	r1, [sp, #120]	; 0x78
   16a36:	6008      	str	r0, [r1, #0]
   16a38:	a8da      	add	r0, sp, #872	; 0x368
            }
   16a3a:	f7f3 ff2e 	bl	a89a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   16a3e:	e7ff      	b.n	16a40 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x330>
                    return Some(row);
   16a40:	e017      	b.n	16a72 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
   16a42:	2000      	movs	r0, #0
        }
   16a44:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
    }
   16a48:	f50d 6dcb 	add.w	sp, sp, #1624	; 0x658
   16a4c:	bd80      	pop	{r7, pc}
        }
   16a4e:	f89d 064b 	ldrb.w	r0, [sp, #1611]	; 0x64b
   16a52:	07c0      	lsls	r0, r0, #31
   16a54:	2800      	cmp	r0, #0
   16a56:	d0f4      	beq.n	16a42 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   16a58:	e7ff      	b.n	16a5a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x34a>
   16a5a:	2000      	movs	r0, #0
   16a5c:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   16a60:	a820      	add	r0, sp, #128	; 0x80
   16a62:	3004      	adds	r0, #4
   16a64:	f7f3 ff19 	bl	a89a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   16a68:	e7eb      	b.n	16a42 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   16a6a:	a820      	add	r0, sp, #128	; 0x80
   16a6c:	f7f3 feda 	bl	a824 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   16a70:	e7e7      	b.n	16a42 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   16a72:	9820      	ldr	r0, [sp, #128]	; 0x80
   16a74:	2801      	cmp	r0, #1
   16a76:	d0ea      	beq.n	16a4e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x33e>
   16a78:	e7f7      	b.n	16a6a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x35a>
   16a7a:	2000      	movs	r0, #0
   16a7c:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
                        continue;
   16a80:	e651      	b.n	16726 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   16a82:	a820      	add	r0, sp, #128	; 0x80
        }
   16a84:	f7f3 fece 	bl	a824 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   16a88:	e7f7      	b.n	16a7a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   16a8a:	f647 3040 	movw	r0, #31552	; 0x7b40
   16a8e:	f2c0 0002 	movt	r0, #2
   16a92:	f647 327c 	movw	r2, #31612	; 0x7b7c
   16a96:	f2c0 0202 	movt	r2, #2
   16a9a:	211c      	movs	r1, #28
   16a9c:	f001 fd48 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16aa0:	defe      	udf	#254	; 0xfe

00016aa2 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>:
   16aa2:	b081      	sub	sp, #4
   16aa4:	9000      	str	r0, [sp, #0]
   16aa6:	8800      	ldrh	r0, [r0, #0]
   16aa8:	b001      	add	sp, #4
   16aaa:	4770      	bx	lr

00016aac <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>:
   16aac:	b580      	push	{r7, lr}
   16aae:	b08c      	sub	sp, #48	; 0x30
   16ab0:	9009      	str	r0, [sp, #36]	; 0x24
   16ab2:	910a      	str	r1, [sp, #40]	; 0x28
   16ab4:	920b      	str	r2, [sp, #44]	; 0x2c
   16ab6:	9006      	str	r0, [sp, #24]
   16ab8:	4608      	mov	r0, r1
   16aba:	9105      	str	r1, [sp, #20]
   16abc:	4611      	mov	r1, r2
   16abe:	9204      	str	r2, [sp, #16]
   16ac0:	f000 f89f 	bl	16c02 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   16ac4:	9003      	str	r0, [sp, #12]
   16ac6:	e7ff      	b.n	16ac8 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x1c>
   16ac8:	9806      	ldr	r0, [sp, #24]
   16aca:	9007      	str	r0, [sp, #28]
   16acc:	9903      	ldr	r1, [sp, #12]
   16ace:	9108      	str	r1, [sp, #32]
   16ad0:	9807      	ldr	r0, [sp, #28]
   16ad2:	9908      	ldr	r1, [sp, #32]
   16ad4:	9a05      	ldr	r2, [sp, #20]
   16ad6:	9b04      	ldr	r3, [sp, #16]
   16ad8:	f000 f82d 	bl	16b36 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>
   16adc:	9002      	str	r0, [sp, #8]
   16ade:	9101      	str	r1, [sp, #4]
   16ae0:	e7ff      	b.n	16ae2 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x36>
   16ae2:	9802      	ldr	r0, [sp, #8]
   16ae4:	9901      	ldr	r1, [sp, #4]
   16ae6:	b00c      	add	sp, #48	; 0x30
   16ae8:	bd80      	pop	{r7, pc}

00016aea <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>:
   16aea:	b083      	sub	sp, #12
   16aec:	9001      	str	r0, [sp, #4]
   16aee:	9102      	str	r1, [sp, #8]
   16af0:	b003      	add	sp, #12
   16af2:	4770      	bx	lr

00016af4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>:
   16af4:	b580      	push	{r7, lr}
   16af6:	b08a      	sub	sp, #40	; 0x28
   16af8:	9006      	str	r0, [sp, #24]
   16afa:	9107      	str	r1, [sp, #28]
   16afc:	9208      	str	r2, [sp, #32]
   16afe:	9309      	str	r3, [sp, #36]	; 0x24
   16b00:	9005      	str	r0, [sp, #20]
   16b02:	4610      	mov	r0, r2
   16b04:	9104      	str	r1, [sp, #16]
   16b06:	4619      	mov	r1, r3
   16b08:	f000 f864 	bl	16bd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   16b0c:	9003      	str	r0, [sp, #12]
   16b0e:	e7ff      	b.n	16b10 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x1c>
   16b10:	9803      	ldr	r0, [sp, #12]
   16b12:	9905      	ldr	r1, [sp, #20]
   16b14:	f000 f96e 	bl	16df4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   16b18:	9002      	str	r0, [sp, #8]
   16b1a:	e7ff      	b.n	16b1c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x28>
   16b1c:	9804      	ldr	r0, [sp, #16]
   16b1e:	9905      	ldr	r1, [sp, #20]
   16b20:	1a41      	subs	r1, r0, r1
   16b22:	9802      	ldr	r0, [sp, #8]
   16b24:	f000 f849 	bl	16bba <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   16b28:	9001      	str	r0, [sp, #4]
   16b2a:	9100      	str	r1, [sp, #0]
   16b2c:	e7ff      	b.n	16b2e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x3a>
   16b2e:	9801      	ldr	r0, [sp, #4]
   16b30:	9900      	ldr	r1, [sp, #0]
   16b32:	b00a      	add	sp, #40	; 0x28
   16b34:	bd80      	pop	{r7, pc}

00016b36 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>:
   16b36:	b580      	push	{r7, lr}
   16b38:	b08c      	sub	sp, #48	; 0x30
   16b3a:	9008      	str	r0, [sp, #32]
   16b3c:	9109      	str	r1, [sp, #36]	; 0x24
   16b3e:	920a      	str	r2, [sp, #40]	; 0x28
   16b40:	930b      	str	r3, [sp, #44]	; 0x2c
   16b42:	4288      	cmp	r0, r1
   16b44:	9307      	str	r3, [sp, #28]
   16b46:	9206      	str	r2, [sp, #24]
   16b48:	9105      	str	r1, [sp, #20]
   16b4a:	9004      	str	r0, [sp, #16]
   16b4c:	d806      	bhi.n	16b5c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x26>
   16b4e:	e7ff      	b.n	16b50 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x1a>
   16b50:	9806      	ldr	r0, [sp, #24]
   16b52:	9907      	ldr	r1, [sp, #28]
   16b54:	f000 f855 	bl	16c02 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   16b58:	9003      	str	r0, [sp, #12]
   16b5a:	e004      	b.n	16b66 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x30>
   16b5c:	9804      	ldr	r0, [sp, #16]
   16b5e:	9905      	ldr	r1, [sp, #20]
   16b60:	f002 fc5b 	bl	1941a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16b64:	defe      	udf	#254	; 0xfe
   16b66:	9805      	ldr	r0, [sp, #20]
   16b68:	9903      	ldr	r1, [sp, #12]
   16b6a:	4288      	cmp	r0, r1
   16b6c:	d809      	bhi.n	16b82 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x4c>
   16b6e:	e7ff      	b.n	16b70 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x3a>
   16b70:	9804      	ldr	r0, [sp, #16]
   16b72:	9905      	ldr	r1, [sp, #20]
   16b74:	9a06      	ldr	r2, [sp, #24]
   16b76:	9b07      	ldr	r3, [sp, #28]
   16b78:	f7ff ffbc 	bl	16af4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>
   16b7c:	9002      	str	r0, [sp, #8]
   16b7e:	9101      	str	r1, [sp, #4]
   16b80:	e00a      	b.n	16b98 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x62>
   16b82:	9806      	ldr	r0, [sp, #24]
   16b84:	9907      	ldr	r1, [sp, #28]
   16b86:	f000 f83c 	bl	16c02 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   16b8a:	9000      	str	r0, [sp, #0]
   16b8c:	e7ff      	b.n	16b8e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x58>
   16b8e:	9805      	ldr	r0, [sp, #20]
   16b90:	9900      	ldr	r1, [sp, #0]
   16b92:	f002 fc20 	bl	193d6 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   16b96:	defe      	udf	#254	; 0xfe
   16b98:	9802      	ldr	r0, [sp, #8]
   16b9a:	9901      	ldr	r1, [sp, #4]
   16b9c:	b00c      	add	sp, #48	; 0x30
   16b9e:	bd80      	pop	{r7, pc}

00016ba0 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>:
   16ba0:	b580      	push	{r7, lr}
   16ba2:	b084      	sub	sp, #16
   16ba4:	9002      	str	r0, [sp, #8]
   16ba6:	9103      	str	r1, [sp, #12]
   16ba8:	f001 fad1 	bl	1814e <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>
   16bac:	9001      	str	r0, [sp, #4]
   16bae:	9100      	str	r1, [sp, #0]
   16bb0:	e7ff      	b.n	16bb2 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE+0x12>
   16bb2:	9801      	ldr	r0, [sp, #4]
   16bb4:	9900      	ldr	r1, [sp, #0]
   16bb6:	b004      	add	sp, #16
   16bb8:	bd80      	pop	{r7, pc}

00016bba <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>:
   16bba:	b580      	push	{r7, lr}
   16bbc:	b084      	sub	sp, #16
   16bbe:	9002      	str	r0, [sp, #8]
   16bc0:	9103      	str	r1, [sp, #12]
   16bc2:	f001 fad1 	bl	18168 <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>
   16bc6:	9001      	str	r0, [sp, #4]
   16bc8:	9100      	str	r1, [sp, #0]
   16bca:	e7ff      	b.n	16bcc <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E+0x12>
   16bcc:	9801      	ldr	r0, [sp, #4]
   16bce:	9900      	ldr	r1, [sp, #0]
   16bd0:	b004      	add	sp, #16
   16bd2:	bd80      	pop	{r7, pc}

00016bd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>:
   16bd4:	b082      	sub	sp, #8
   16bd6:	9000      	str	r0, [sp, #0]
   16bd8:	9101      	str	r1, [sp, #4]
   16bda:	b002      	add	sp, #8
   16bdc:	4770      	bx	lr

00016bde <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>:
   16bde:	b580      	push	{r7, lr}
   16be0:	b086      	sub	sp, #24
   16be2:	9003      	str	r0, [sp, #12]
   16be4:	9104      	str	r1, [sp, #16]
   16be6:	9205      	str	r2, [sp, #20]
   16be8:	9002      	str	r0, [sp, #8]
   16bea:	4610      	mov	r0, r2
   16bec:	9a02      	ldr	r2, [sp, #8]
   16bee:	9101      	str	r1, [sp, #4]
   16bf0:	4611      	mov	r1, r2
   16bf2:	9a01      	ldr	r2, [sp, #4]
   16bf4:	f000 f886 	bl	16d04 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>
   16bf8:	9000      	str	r0, [sp, #0]
   16bfa:	e7ff      	b.n	16bfc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE+0x1e>
   16bfc:	9800      	ldr	r0, [sp, #0]
   16bfe:	b006      	add	sp, #24
   16c00:	bd80      	pop	{r7, pc}

00016c02 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>:
   16c02:	b084      	sub	sp, #16
   16c04:	9002      	str	r0, [sp, #8]
   16c06:	9103      	str	r1, [sp, #12]
   16c08:	9000      	str	r0, [sp, #0]
   16c0a:	9101      	str	r1, [sp, #4]
   16c0c:	9801      	ldr	r0, [sp, #4]
   16c0e:	b004      	add	sp, #16
   16c10:	4770      	bx	lr

00016c12 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>:
   16c12:	b580      	push	{r7, lr}
   16c14:	b092      	sub	sp, #72	; 0x48
   16c16:	900e      	str	r0, [sp, #56]	; 0x38
   16c18:	910f      	str	r1, [sp, #60]	; 0x3c
   16c1a:	9009      	str	r0, [sp, #36]	; 0x24
   16c1c:	9108      	str	r1, [sp, #32]
   16c1e:	f000 f83e 	bl	16c9e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>
   16c22:	4601      	mov	r1, r0
   16c24:	9010      	str	r0, [sp, #64]	; 0x40
   16c26:	9107      	str	r1, [sp, #28]
   16c28:	e7ff      	b.n	16c2a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x18>
   16c2a:	9807      	ldr	r0, [sp, #28]
   16c2c:	f001 fa47 	bl	180be <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   16c30:	e7ff      	b.n	16c32 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x20>
   16c32:	e7ff      	b.n	16c34 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x22>
   16c34:	2002      	movs	r0, #2
   16c36:	9011      	str	r0, [sp, #68]	; 0x44
   16c38:	9811      	ldr	r0, [sp, #68]	; 0x44
   16c3a:	9006      	str	r0, [sp, #24]
   16c3c:	e7ff      	b.n	16c3e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x2c>
   16c3e:	9806      	ldr	r0, [sp, #24]
   16c40:	2800      	cmp	r0, #0
   16c42:	d006      	beq.n	16c52 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x40>
   16c44:	e7ff      	b.n	16c46 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x34>
   16c46:	9809      	ldr	r0, [sp, #36]	; 0x24
   16c48:	9908      	ldr	r1, [sp, #32]
   16c4a:	f7ff ffda 	bl	16c02 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   16c4e:	9005      	str	r0, [sp, #20]
   16c50:	e011      	b.n	16c76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x64>
   16c52:	9807      	ldr	r0, [sp, #28]
   16c54:	9909      	ldr	r1, [sp, #36]	; 0x24
   16c56:	9004      	str	r0, [sp, #16]
   16c58:	4608      	mov	r0, r1
   16c5a:	9908      	ldr	r1, [sp, #32]
   16c5c:	f7ff ffd1 	bl	16c02 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   16c60:	9003      	str	r0, [sp, #12]
   16c62:	e7ff      	b.n	16c64 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x52>
   16c64:	9804      	ldr	r0, [sp, #16]
   16c66:	9903      	ldr	r1, [sp, #12]
   16c68:	f7fe faa4 	bl	151b4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>
   16c6c:	9002      	str	r0, [sp, #8]
   16c6e:	e7ff      	b.n	16c70 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x5e>
   16c70:	9802      	ldr	r0, [sp, #8]
   16c72:	900c      	str	r0, [sp, #48]	; 0x30
   16c74:	e006      	b.n	16c84 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   16c76:	9807      	ldr	r0, [sp, #28]
   16c78:	9905      	ldr	r1, [sp, #20]
   16c7a:	f001 f9ff 	bl	1807c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   16c7e:	900c      	str	r0, [sp, #48]	; 0x30
   16c80:	e7ff      	b.n	16c82 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x70>
   16c82:	e7ff      	b.n	16c84 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   16c84:	9807      	ldr	r0, [sp, #28]
   16c86:	f000 fc93 	bl	175b0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   16c8a:	9001      	str	r0, [sp, #4]
   16c8c:	e7ff      	b.n	16c8e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x7c>
   16c8e:	980c      	ldr	r0, [sp, #48]	; 0x30
   16c90:	9901      	ldr	r1, [sp, #4]
   16c92:	910a      	str	r1, [sp, #40]	; 0x28
   16c94:	900b      	str	r0, [sp, #44]	; 0x2c
   16c96:	980a      	ldr	r0, [sp, #40]	; 0x28
   16c98:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16c9a:	b012      	add	sp, #72	; 0x48
   16c9c:	bd80      	pop	{r7, pc}

00016c9e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>:
   16c9e:	b082      	sub	sp, #8
   16ca0:	9000      	str	r0, [sp, #0]
   16ca2:	9101      	str	r1, [sp, #4]
   16ca4:	b002      	add	sp, #8
   16ca6:	4770      	bx	lr

00016ca8 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>:
   16ca8:	b580      	push	{r7, lr}
   16caa:	b086      	sub	sp, #24
   16cac:	9003      	str	r0, [sp, #12]
   16cae:	9104      	str	r1, [sp, #16]
   16cb0:	f7ff ff1b 	bl	16aea <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>
   16cb4:	9002      	str	r0, [sp, #8]
   16cb6:	9101      	str	r1, [sp, #4]
   16cb8:	e7ff      	b.n	16cba <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E+0x12>
   16cba:	9802      	ldr	r0, [sp, #8]
   16cbc:	9901      	ldr	r1, [sp, #4]
   16cbe:	b006      	add	sp, #24
   16cc0:	bd80      	pop	{r7, pc}

00016cc2 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>:
   16cc2:	b580      	push	{r7, lr}
   16cc4:	b088      	sub	sp, #32
   16cc6:	9005      	str	r0, [sp, #20]
   16cc8:	9106      	str	r1, [sp, #24]
   16cca:	9207      	str	r2, [sp, #28]
   16ccc:	9004      	str	r0, [sp, #16]
   16cce:	4610      	mov	r0, r2
   16cd0:	9a04      	ldr	r2, [sp, #16]
   16cd2:	9103      	str	r1, [sp, #12]
   16cd4:	4611      	mov	r1, r2
   16cd6:	9a03      	ldr	r2, [sp, #12]
   16cd8:	f7ff fee8 	bl	16aac <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>
   16cdc:	9002      	str	r0, [sp, #8]
   16cde:	9101      	str	r1, [sp, #4]
   16ce0:	e7ff      	b.n	16ce2 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E+0x20>
   16ce2:	9802      	ldr	r0, [sp, #8]
   16ce4:	9901      	ldr	r1, [sp, #4]
   16ce6:	b008      	add	sp, #32
   16ce8:	bd80      	pop	{r7, pc}

00016cea <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>:
   16cea:	b580      	push	{r7, lr}
   16cec:	b084      	sub	sp, #16
   16cee:	9002      	str	r0, [sp, #8]
   16cf0:	9103      	str	r1, [sp, #12]
   16cf2:	f7ff ff8e 	bl	16c12 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>
   16cf6:	9001      	str	r0, [sp, #4]
   16cf8:	9100      	str	r1, [sp, #0]
   16cfa:	e7ff      	b.n	16cfc <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE+0x12>
   16cfc:	9801      	ldr	r0, [sp, #4]
   16cfe:	9900      	ldr	r1, [sp, #0]
   16d00:	b004      	add	sp, #16
   16d02:	bd80      	pop	{r7, pc}

00016d04 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>:
   16d04:	b580      	push	{r7, lr}
   16d06:	b086      	sub	sp, #24
   16d08:	9003      	str	r0, [sp, #12]
   16d0a:	9104      	str	r1, [sp, #16]
   16d0c:	9205      	str	r2, [sp, #20]
   16d0e:	9002      	str	r0, [sp, #8]
   16d10:	4608      	mov	r0, r1
   16d12:	4611      	mov	r1, r2
   16d14:	f7ff ff5e 	bl	16bd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   16d18:	9001      	str	r0, [sp, #4]
   16d1a:	e7ff      	b.n	16d1c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x18>
   16d1c:	9801      	ldr	r0, [sp, #4]
   16d1e:	9902      	ldr	r1, [sp, #8]
   16d20:	f000 f868 	bl	16df4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   16d24:	9000      	str	r0, [sp, #0]
   16d26:	e7ff      	b.n	16d28 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x24>
   16d28:	9800      	ldr	r0, [sp, #0]
   16d2a:	b006      	add	sp, #24
   16d2c:	bd80      	pop	{r7, pc}

00016d2e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>:
   16d2e:	b580      	push	{r7, lr}
   16d30:	b08e      	sub	sp, #56	; 0x38
   16d32:	9007      	str	r0, [sp, #28]
   16d34:	6801      	ldr	r1, [r0, #0]
   16d36:	9005      	str	r0, [sp, #20]
   16d38:	4608      	mov	r0, r1
   16d3a:	f000 fc3f 	bl	175bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16d3e:	9004      	str	r0, [sp, #16]
   16d40:	e7ff      	b.n	16d42 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x14>
   16d42:	9804      	ldr	r0, [sp, #16]
   16d44:	f000 f879 	bl	16e3a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>
   16d48:	e7ff      	b.n	16d4a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1c>
   16d4a:	e7ff      	b.n	16d4c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1e>
   16d4c:	2002      	movs	r0, #2
   16d4e:	9008      	str	r0, [sp, #32]
   16d50:	9808      	ldr	r0, [sp, #32]
   16d52:	9003      	str	r0, [sp, #12]
   16d54:	e7ff      	b.n	16d56 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x28>
   16d56:	9803      	ldr	r0, [sp, #12]
   16d58:	2800      	cmp	r0, #0
   16d5a:	d007      	beq.n	16d6c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   16d5c:	e7ff      	b.n	16d5e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x30>
   16d5e:	9805      	ldr	r0, [sp, #20]
   16d60:	6840      	ldr	r0, [r0, #4]
   16d62:	f001 f9ac 	bl	180be <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   16d66:	e7ff      	b.n	16d68 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3a>
   16d68:	e7ff      	b.n	16d6a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3c>
   16d6a:	e7ff      	b.n	16d6c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   16d6c:	9805      	ldr	r0, [sp, #20]
   16d6e:	6800      	ldr	r0, [r0, #0]
   16d70:	f000 fc24 	bl	175bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16d74:	9002      	str	r0, [sp, #8]
   16d76:	e7ff      	b.n	16d78 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x4a>
   16d78:	9805      	ldr	r0, [sp, #20]
   16d7a:	6841      	ldr	r1, [r0, #4]
   16d7c:	9a02      	ldr	r2, [sp, #8]
   16d7e:	428a      	cmp	r2, r1
   16d80:	d02f      	beq.n	16de2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xb4>
   16d82:	e7ff      	b.n	16d84 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x56>
   16d84:	9805      	ldr	r0, [sp, #20]
   16d86:	900a      	str	r0, [sp, #40]	; 0x28
   16d88:	2101      	movs	r1, #1
   16d8a:	910b      	str	r1, [sp, #44]	; 0x2c
   16d8c:	2102      	movs	r1, #2
   16d8e:	910d      	str	r1, [sp, #52]	; 0x34
   16d90:	990d      	ldr	r1, [sp, #52]	; 0x34
   16d92:	2900      	cmp	r1, #0
   16d94:	d015      	beq.n	16dc2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x94>
   16d96:	e7ff      	b.n	16d98 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x6a>
   16d98:	9805      	ldr	r0, [sp, #20]
   16d9a:	6800      	ldr	r0, [r0, #0]
   16d9c:	f000 fc0e 	bl	175bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16da0:	900c      	str	r0, [sp, #48]	; 0x30
   16da2:	9905      	ldr	r1, [sp, #20]
   16da4:	680a      	ldr	r2, [r1, #0]
   16da6:	9001      	str	r0, [sp, #4]
   16da8:	4610      	mov	r0, r2
   16daa:	f000 fc07 	bl	175bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16dae:	2101      	movs	r1, #1
   16db0:	f000 f837 	bl	16e22 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   16db4:	f000 fbfc 	bl	175b0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   16db8:	9905      	ldr	r1, [sp, #20]
   16dba:	6008      	str	r0, [r1, #0]
   16dbc:	9801      	ldr	r0, [sp, #4]
   16dbe:	9009      	str	r0, [sp, #36]	; 0x24
   16dc0:	e00c      	b.n	16ddc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   16dc2:	9805      	ldr	r0, [sp, #20]
   16dc4:	6840      	ldr	r0, [r0, #4]
   16dc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16dca:	f7fe f9fe 	bl	151ca <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   16dce:	9905      	ldr	r1, [sp, #20]
   16dd0:	6048      	str	r0, [r1, #4]
   16dd2:	6808      	ldr	r0, [r1, #0]
   16dd4:	f000 fbf2 	bl	175bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16dd8:	9009      	str	r0, [sp, #36]	; 0x24
   16dda:	e7ff      	b.n	16ddc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   16ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
   16dde:	9000      	str	r0, [sp, #0]
   16de0:	e002      	b.n	16de8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xba>
   16de2:	2000      	movs	r0, #0
   16de4:	9006      	str	r0, [sp, #24]
   16de6:	e002      	b.n	16dee <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   16de8:	9800      	ldr	r0, [sp, #0]
   16dea:	9006      	str	r0, [sp, #24]
   16dec:	e7ff      	b.n	16dee <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   16dee:	9806      	ldr	r0, [sp, #24]
   16df0:	b00e      	add	sp, #56	; 0x38
   16df2:	bd80      	pop	{r7, pc}

00016df4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>:
   16df4:	b580      	push	{r7, lr}
   16df6:	b084      	sub	sp, #16
   16df8:	9002      	str	r0, [sp, #8]
   16dfa:	9103      	str	r1, [sp, #12]
   16dfc:	f000 f811 	bl	16e22 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   16e00:	9001      	str	r0, [sp, #4]
   16e02:	e7ff      	b.n	16e04 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E+0x10>
   16e04:	9801      	ldr	r0, [sp, #4]
   16e06:	b004      	add	sp, #16
   16e08:	bd80      	pop	{r7, pc}

00016e0a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>:
   16e0a:	b580      	push	{r7, lr}
   16e0c:	b084      	sub	sp, #16
   16e0e:	460a      	mov	r2, r1
   16e10:	9002      	str	r0, [sp, #8]
   16e12:	f8ad 100e 	strh.w	r1, [sp, #14]
   16e16:	9201      	str	r2, [sp, #4]
   16e18:	f001 f9d4 	bl	181c4 <_ZN4core3ptr5write17h147d4643d861e927E>
   16e1c:	e7ff      	b.n	16e1e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E+0x14>
   16e1e:	b004      	add	sp, #16
   16e20:	bd80      	pop	{r7, pc}

00016e22 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>:
   16e22:	b084      	sub	sp, #16
   16e24:	9001      	str	r0, [sp, #4]
   16e26:	9102      	str	r1, [sp, #8]
   16e28:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   16e2c:	9003      	str	r0, [sp, #12]
   16e2e:	9803      	ldr	r0, [sp, #12]
   16e30:	9000      	str	r0, [sp, #0]
   16e32:	e7ff      	b.n	16e34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE+0x12>
   16e34:	9800      	ldr	r0, [sp, #0]
   16e36:	b004      	add	sp, #16
   16e38:	4770      	bx	lr

00016e3a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>:
   16e3a:	b082      	sub	sp, #8
   16e3c:	9001      	str	r0, [sp, #4]
   16e3e:	9000      	str	r0, [sp, #0]
   16e40:	e7ff      	b.n	16e42 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE+0x8>
   16e42:	9800      	ldr	r0, [sp, #0]
   16e44:	fab0 f180 	clz	r1, r0
   16e48:	0948      	lsrs	r0, r1, #5
   16e4a:	b002      	add	sp, #8
   16e4c:	4770      	bx	lr

00016e4e <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   16e4e:	b580      	push	{r7, lr}
        (&self).into_iter()
   16e50:	f000 f814 	bl	16e7c <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>
   16e54:	e7ff      	b.n	16e56 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E+0x8>
    }
   16e56:	bd80      	pop	{r7, pc}

00016e58 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
    fn fill(mut self, color: Option<C>) -> Self {
   16e58:	b5b0      	push	{r4, r5, r7, lr}
   16e5a:	b081      	sub	sp, #4
   16e5c:	469c      	mov	ip, r3
   16e5e:	4696      	mov	lr, r2
   16e60:	f8ad 2000 	strh.w	r2, [sp]
   16e64:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   16e68:	820a      	strh	r2, [r1, #16]
   16e6a:	824b      	strh	r3, [r1, #18]
        self
   16e6c:	c91c      	ldmia	r1!, {r2, r3, r4}
   16e6e:	c01c      	stmia	r0!, {r2, r3, r4}
   16e70:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   16e74:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   16e78:	b001      	add	sp, #4
   16e7a:	bdb0      	pop	{r4, r5, r7, pc}

00016e7c <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   16e7c:	b570      	push	{r4, r5, r6, lr}
   16e7e:	b08e      	sub	sp, #56	; 0x38
   16e80:	910d      	str	r1, [sp, #52]	; 0x34
        RectangleIterator {
            top_left: self.top_left,
   16e82:	680a      	ldr	r2, [r1, #0]
   16e84:	684b      	ldr	r3, [r1, #4]
            bottom_right: self.bottom_right,
   16e86:	f8d1 c008 	ldr.w	ip, [r1, #8]
   16e8a:	f8d1 e00c 	ldr.w	lr, [r1, #12]
            style: self.style,
   16e8e:	8b0c      	ldrh	r4, [r1, #24]
   16e90:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
   16e94:	690c      	ldr	r4, [r1, #16]
   16e96:	694d      	ldr	r5, [r1, #20]
   16e98:	950b      	str	r5, [sp, #44]	; 0x2c
   16e9a:	940a      	str	r4, [sp, #40]	; 0x28
   16e9c:	2400      	movs	r4, #0
            x: self.top_left[0],
   16e9e:	9009      	str	r0, [sp, #36]	; 0x24
   16ea0:	4608      	mov	r0, r1
   16ea2:	9108      	str	r1, [sp, #32]
   16ea4:	4621      	mov	r1, r4
   16ea6:	9207      	str	r2, [sp, #28]
   16ea8:	9306      	str	r3, [sp, #24]
   16eaa:	f8cd c014 	str.w	ip, [sp, #20]
   16eae:	f8cd e010 	str.w	lr, [sp, #16]
   16eb2:	f7fb fb28 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16eb6:	9003      	str	r0, [sp, #12]
   16eb8:	e7ff      	b.n	16eba <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x3e>
   16eba:	9803      	ldr	r0, [sp, #12]
   16ebc:	6801      	ldr	r1, [r0, #0]
   16ebe:	2201      	movs	r2, #1
            y: self.top_left[1],
   16ec0:	9808      	ldr	r0, [sp, #32]
   16ec2:	9102      	str	r1, [sp, #8]
   16ec4:	4611      	mov	r1, r2
   16ec6:	f7fb fb1e 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16eca:	9001      	str	r0, [sp, #4]
   16ecc:	e7ff      	b.n	16ece <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x52>
   16ece:	9801      	ldr	r0, [sp, #4]
   16ed0:	6801      	ldr	r1, [r0, #0]
        RectangleIterator {
   16ed2:	9a07      	ldr	r2, [sp, #28]
   16ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16ed6:	601a      	str	r2, [r3, #0]
   16ed8:	f8dd c018 	ldr.w	ip, [sp, #24]
   16edc:	f8c3 c004 	str.w	ip, [r3, #4]
   16ee0:	f8dd e014 	ldr.w	lr, [sp, #20]
   16ee4:	f8c3 e008 	str.w	lr, [r3, #8]
   16ee8:	9c04      	ldr	r4, [sp, #16]
   16eea:	60dc      	str	r4, [r3, #12]
   16eec:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   16ef0:	841d      	strh	r5, [r3, #32]
   16ef2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   16ef4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   16ef6:	61de      	str	r6, [r3, #28]
   16ef8:	619d      	str	r5, [r3, #24]
   16efa:	9d02      	ldr	r5, [sp, #8]
   16efc:	611d      	str	r5, [r3, #16]
   16efe:	6159      	str	r1, [r3, #20]
        }
    }
   16f00:	b00e      	add	sp, #56	; 0x38
   16f02:	bd70      	pop	{r4, r5, r6, pc}

00016f04 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>:
where
    C: PixelColor,
{
    type Item = Pixel<C>;

    fn next(&mut self) -> Option<Self::Item> {
   16f04:	b510      	push	{r4, lr}
   16f06:	b0d2      	sub	sp, #328	; 0x148
   16f08:	914f      	str	r1, [sp, #316]	; 0x13c
   16f0a:	2200      	movs	r2, #0
        // If entire object is off the top left of the screen or has no border or fill colour,
        // don't render anything
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   16f0c:	902a      	str	r0, [sp, #168]	; 0xa8
   16f0e:	4608      	mov	r0, r1
   16f10:	9129      	str	r1, [sp, #164]	; 0xa4
   16f12:	4611      	mov	r1, r2
   16f14:	f7fb faf7 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16f18:	9028      	str	r0, [sp, #160]	; 0xa0
   16f1a:	e03c      	b.n	16f96 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x92>
   16f1c:	2001      	movs	r0, #1
   16f1e:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   16f22:	e009      	b.n	16f38 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
   16f24:	2000      	movs	r0, #0
   16f26:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   16f2a:	e005      	b.n	16f38 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   16f2c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16f2e:	301c      	adds	r0, #28
   16f30:	f7fe fa86 	bl	15440 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   16f34:	9027      	str	r0, [sp, #156]	; 0x9c
   16f36:	e06c      	b.n	17012 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x10e>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   16f38:	f89d 00af 	ldrb.w	r0, [sp, #175]	; 0xaf
   16f3c:	07c0      	lsls	r0, r0, #31
   16f3e:	2800      	cmp	r0, #0
   16f40:	d172      	bne.n	17028 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x124>
   16f42:	e070      	b.n	17026 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x122>
   16f44:	2001      	movs	r0, #1
   16f46:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   16f4a:	e00a      	b.n	16f62 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
   16f4c:	2000      	movs	r0, #0
   16f4e:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   16f52:	e006      	b.n	16f62 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   16f54:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16f56:	3008      	adds	r0, #8
   16f58:	2100      	movs	r1, #0
   16f5a:	f7fb fad4 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16f5e:	9026      	str	r0, [sp, #152]	; 0x98
   16f60:	e038      	b.n	16fd4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xd0>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   16f62:	f89d 00b0 	ldrb.w	r0, [sp, #176]	; 0xb0
   16f66:	07c0      	lsls	r0, r0, #31
   16f68:	2800      	cmp	r0, #0
   16f6a:	d1d7      	bne.n	16f1c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   16f6c:	e7de      	b.n	16f2c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x28>
   16f6e:	2001      	movs	r0, #1
   16f70:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   16f74:	e009      	b.n	16f8a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   16f76:	2000      	movs	r0, #0
   16f78:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   16f7c:	e005      	b.n	16f8a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   16f7e:	2101      	movs	r1, #1
   16f80:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16f82:	f7fb fac0 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16f86:	9025      	str	r0, [sp, #148]	; 0x94
   16f88:	e00a      	b.n	16fa0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x9c>
   16f8a:	f89d 00b1 	ldrb.w	r0, [sp, #177]	; 0xb1
   16f8e:	07c0      	lsls	r0, r0, #31
   16f90:	2800      	cmp	r0, #0
   16f92:	d1df      	bne.n	16f54 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x50>
   16f94:	e7da      	b.n	16f4c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
   16f96:	9828      	ldr	r0, [sp, #160]	; 0xa0
   16f98:	6801      	ldr	r1, [r0, #0]
   16f9a:	2900      	cmp	r1, #0
   16f9c:	d4e7      	bmi.n	16f6e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   16f9e:	e7ee      	b.n	16f7e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x7a>
   16fa0:	9825      	ldr	r0, [sp, #148]	; 0x94
   16fa2:	6801      	ldr	r1, [r0, #0]
   16fa4:	2900      	cmp	r1, #0
   16fa6:	d4e2      	bmi.n	16f6e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   16fa8:	e7e5      	b.n	16f76 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x72>
   16faa:	2001      	movs	r0, #1
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   16fac:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   16fb0:	e00a      	b.n	16fc8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   16fb2:	2000      	movs	r0, #0
   16fb4:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   16fb8:	e006      	b.n	16fc8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   16fba:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16fbc:	3008      	adds	r0, #8
   16fbe:	2101      	movs	r1, #1
   16fc0:	f7fb faa1 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16fc4:	9024      	str	r0, [sp, #144]	; 0x90
   16fc6:	e00a      	b.n	16fde <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xda>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   16fc8:	f89d 00b2 	ldrb.w	r0, [sp, #178]	; 0xb2
   16fcc:	07c0      	lsls	r0, r0, #31
   16fce:	2800      	cmp	r0, #0
   16fd0:	d1b8      	bne.n	16f44 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40>
   16fd2:	e7bb      	b.n	16f4c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   16fd4:	9826      	ldr	r0, [sp, #152]	; 0x98
   16fd6:	6801      	ldr	r1, [r0, #0]
   16fd8:	2900      	cmp	r1, #0
   16fda:	d4e6      	bmi.n	16faa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   16fdc:	e7ed      	b.n	16fba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xb6>
   16fde:	9824      	ldr	r0, [sp, #144]	; 0x90
   16fe0:	6801      	ldr	r1, [r0, #0]
   16fe2:	2900      	cmp	r1, #0
   16fe4:	d4e1      	bmi.n	16faa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   16fe6:	e7e4      	b.n	16fb2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xae>
   16fe8:	2001      	movs	r0, #1
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   16fea:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   16fee:	e009      	b.n	17004 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   16ff0:	2000      	movs	r0, #0
   16ff2:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   16ff6:	e005      	b.n	17004 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   16ff8:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16ffa:	3018      	adds	r0, #24
   16ffc:	f7fe fa20 	bl	15440 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   17000:	9023      	str	r0, [sp, #140]	; 0x8c
   17002:	e00b      	b.n	1701c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x118>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   17004:	f89d 00b3 	ldrb.w	r0, [sp, #179]	; 0xb3
   17008:	07c0      	lsls	r0, r0, #31
   1700a:	2800      	cmp	r0, #0
   1700c:	f47f af86 	bne.w	16f1c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   17010:	e788      	b.n	16f24 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20>
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   17012:	9827      	ldr	r0, [sp, #156]	; 0x9c
   17014:	07c1      	lsls	r1, r0, #31
   17016:	2900      	cmp	r1, #0
   17018:	d1ee      	bne.n	16ff8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xf4>
   1701a:	e7e9      	b.n	16ff0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
   1701c:	9823      	ldr	r0, [sp, #140]	; 0x8c
   1701e:	07c1      	lsls	r1, r0, #31
   17020:	2900      	cmp	r1, #0
   17022:	d1e1      	bne.n	16fe8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xe4>
   17024:	e7e4      	b.n	16ff0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
        {
            return None;
        }

        let pixel = loop {
   17026:	e012      	b.n	1704e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
   17028:	2000      	movs	r0, #0
            return None;
   1702a:	992a      	ldr	r1, [sp, #168]	; 0xa8
   1702c:	6008      	str	r0, [r1, #0]
   1702e:	e7ff      	b.n	17030 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                break out;
            }
        };

        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
    }
   17030:	b052      	add	sp, #328	; 0x148
   17032:	bd10      	pop	{r4, pc}
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   17034:	982d      	ldr	r0, [sp, #180]	; 0xb4
   17036:	992e      	ldr	r1, [sp, #184]	; 0xb8
   17038:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   1703a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   1703c:	934d      	str	r3, [sp, #308]	; 0x134
   1703e:	924c      	str	r2, [sp, #304]	; 0x130
   17040:	914b      	str	r1, [sp, #300]	; 0x12c
   17042:	904a      	str	r0, [sp, #296]	; 0x128
   17044:	a94a      	add	r1, sp, #296	; 0x128
   17046:	982a      	ldr	r0, [sp, #168]	; 0xa8
   17048:	f7fe f90c 	bl	15264 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>
   1704c:	e201      	b.n	17452 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x54e>
   1704e:	2000      	movs	r0, #0
            let mut out = None;
   17050:	9031      	str	r0, [sp, #196]	; 0xc4
            if self.y > self.bottom_right[1] {
   17052:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17054:	6941      	ldr	r1, [r0, #20]
   17056:	3008      	adds	r0, #8
   17058:	2201      	movs	r2, #1
   1705a:	9122      	str	r1, [sp, #136]	; 0x88
   1705c:	4611      	mov	r1, r2
   1705e:	f7fb fa52 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   17062:	9021      	str	r0, [sp, #132]	; 0x84
   17064:	e7ff      	b.n	17066 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x162>
   17066:	9821      	ldr	r0, [sp, #132]	; 0x84
   17068:	6801      	ldr	r1, [r0, #0]
   1706a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1706c:	428a      	cmp	r2, r1
   1706e:	dc13      	bgt.n	17098 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x194>
   17070:	e7ff      	b.n	17072 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x16e>
            let border_width = self.style.stroke_width as i32;
   17072:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17074:	f890 1020 	ldrb.w	r1, [r0, #32]
   17078:	460a      	mov	r2, r1
   1707a:	9150      	str	r1, [sp, #320]	; 0x140
            let tl = self.top_left;
   1707c:	6801      	ldr	r1, [r0, #0]
   1707e:	6843      	ldr	r3, [r0, #4]
   17080:	9135      	str	r1, [sp, #212]	; 0xd4
   17082:	9336      	str	r3, [sp, #216]	; 0xd8
            let br = self.bottom_right;
   17084:	6881      	ldr	r1, [r0, #8]
   17086:	68c3      	ldr	r3, [r0, #12]
   17088:	9137      	str	r1, [sp, #220]	; 0xdc
   1708a:	9338      	str	r3, [sp, #224]	; 0xe0
            if self.x >= 0 && self.y >= 0 {
   1708c:	6901      	ldr	r1, [r0, #16]
   1708e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   17092:	9220      	str	r2, [sp, #128]	; 0x80
   17094:	dc0b      	bgt.n	170ae <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1aa>
   17096:	e006      	b.n	170a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   17098:	2000      	movs	r0, #0
                break None;
   1709a:	902d      	str	r0, [sp, #180]	; 0xb4
   1709c:	e7ca      	b.n	17034 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
   1709e:	2001      	movs	r0, #1
            if self.x >= 0 && self.y >= 0 {
   170a0:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   170a4:	e009      	b.n	170ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   170a6:	2000      	movs	r0, #0
   170a8:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   170ac:	e005      	b.n	170ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   170ae:	9829      	ldr	r0, [sp, #164]	; 0xa4
   170b0:	6941      	ldr	r1, [r0, #20]
   170b2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   170b6:	dcf2      	bgt.n	1709e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x19a>
   170b8:	e7f5      	b.n	170a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   170ba:	f89d 00e7 	ldrb.w	r0, [sp, #231]	; 0xe7
   170be:	07c0      	lsls	r0, r0, #31
   170c0:	2800      	cmp	r0, #0
   170c2:	f000 8182 	beq.w	173ca <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
   170c6:	e7ff      	b.n	170c8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1c4>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   170c8:	9829      	ldr	r0, [sp, #164]	; 0xa4
   170ca:	6941      	ldr	r1, [r0, #20]
   170cc:	a835      	add	r0, sp, #212	; 0xd4
   170ce:	2201      	movs	r2, #1
   170d0:	911f      	str	r1, [sp, #124]	; 0x7c
   170d2:	4611      	mov	r1, r2
   170d4:	f7fb fa17 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   170d8:	901e      	str	r0, [sp, #120]	; 0x78
   170da:	e074      	b.n	171c6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2c2>
   170dc:	2001      	movs	r0, #1
                if (
   170de:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   170e2:	e009      	b.n	170f8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
   170e4:	2000      	movs	r0, #0
   170e6:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   170ea:	e005      	b.n	170f8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
                ) && self.style.stroke_color.is_some()
   170ec:	9829      	ldr	r0, [sp, #164]	; 0xa4
   170ee:	301c      	adds	r0, #28
   170f0:	f7fe f9d6 	bl	154a0 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   170f4:	901d      	str	r0, [sp, #116]	; 0x74
   170f6:	e104      	b.n	17302 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3fe>
                if (
   170f8:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
   170fc:	07c0      	lsls	r0, r0, #31
   170fe:	2800      	cmp	r0, #0
   17100:	f040 810a 	bne.w	17318 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x414>
   17104:	e103      	b.n	1730e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40a>
   17106:	2001      	movs	r0, #1
   17108:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   1710c:	e00d      	b.n	1712a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
   1710e:	2000      	movs	r0, #0
   17110:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   17114:	e009      	b.n	1712a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   17116:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17118:	6901      	ldr	r1, [r0, #16]
   1711a:	a837      	add	r0, sp, #220	; 0xdc
   1711c:	2200      	movs	r2, #0
   1711e:	911c      	str	r1, [sp, #112]	; 0x70
   17120:	4611      	mov	r1, r2
   17122:	f7fb f9f0 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   17126:	901b      	str	r0, [sp, #108]	; 0x6c
   17128:	e0d7      	b.n	172da <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3d6>
                if (
   1712a:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
   1712e:	07c0      	lsls	r0, r0, #31
   17130:	2800      	cmp	r0, #0
   17132:	d1db      	bne.n	170ec <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e8>
   17134:	e7d6      	b.n	170e4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
   17136:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   17138:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   1713c:	e00d      	b.n	1715a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
   1713e:	2000      	movs	r0, #0
   17140:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   17144:	e009      	b.n	1715a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   17146:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17148:	6901      	ldr	r1, [r0, #16]
   1714a:	a835      	add	r0, sp, #212	; 0xd4
   1714c:	2200      	movs	r2, #0
   1714e:	911a      	str	r1, [sp, #104]	; 0x68
   17150:	4611      	mov	r1, r2
   17152:	f7fb f9d8 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   17156:	9019      	str	r0, [sp, #100]	; 0x64
   17158:	e090      	b.n	1727c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x378>
                if (
   1715a:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
   1715e:	07c0      	lsls	r0, r0, #31
   17160:	2800      	cmp	r0, #0
   17162:	d1d0      	bne.n	17106 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   17164:	e7d7      	b.n	17116 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x212>
   17166:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   17168:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   1716c:	e00d      	b.n	1718a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
   1716e:	2000      	movs	r0, #0
   17170:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   17174:	e009      	b.n	1718a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   17176:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17178:	6941      	ldr	r1, [r0, #20]
   1717a:	a837      	add	r0, sp, #220	; 0xdc
   1717c:	2201      	movs	r2, #1
   1717e:	9118      	str	r1, [sp, #96]	; 0x60
   17180:	4611      	mov	r1, r2
   17182:	f7fb f9c0 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   17186:	9017      	str	r0, [sp, #92]	; 0x5c
   17188:	e04b      	b.n	17222 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x31e>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   1718a:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
   1718e:	07c0      	lsls	r0, r0, #31
   17190:	2800      	cmp	r0, #0
   17192:	d1d0      	bne.n	17136 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   17194:	e7d7      	b.n	17146 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x242>
   17196:	2001      	movs	r0, #1
   17198:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   1719c:	e00d      	b.n	171ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   1719e:	2000      	movs	r0, #0
   171a0:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   171a4:	e009      	b.n	171ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   171a6:	9829      	ldr	r0, [sp, #164]	; 0xa4
   171a8:	6941      	ldr	r1, [r0, #20]
   171aa:	a835      	add	r0, sp, #212	; 0xd4
   171ac:	2201      	movs	r2, #1
   171ae:	9116      	str	r1, [sp, #88]	; 0x58
   171b0:	4611      	mov	r1, r2
   171b2:	f7fb f9a8 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   171b6:	9015      	str	r0, [sp, #84]	; 0x54
   171b8:	e00b      	b.n	171d2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ce>
   171ba:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
   171be:	07c0      	lsls	r0, r0, #31
   171c0:	2800      	cmp	r0, #0
   171c2:	d1d0      	bne.n	17166 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   171c4:	e7d7      	b.n	17176 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x272>
   171c6:	981e      	ldr	r0, [sp, #120]	; 0x78
   171c8:	6801      	ldr	r1, [r0, #0]
   171ca:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   171cc:	428a      	cmp	r2, r1
   171ce:	daea      	bge.n	171a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2a2>
   171d0:	e7e5      	b.n	1719e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   171d2:	9815      	ldr	r0, [sp, #84]	; 0x54
   171d4:	6801      	ldr	r1, [r0, #0]
   171d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   171d8:	188b      	adds	r3, r1, r2
   171da:	469c      	mov	ip, r3
   171dc:	428b      	cmp	r3, r1
   171de:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
   171e2:	f180 8137 	bvs.w	17454 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x550>
   171e6:	e7ff      	b.n	171e8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2e4>
   171e8:	9816      	ldr	r0, [sp, #88]	; 0x58
   171ea:	9914      	ldr	r1, [sp, #80]	; 0x50
   171ec:	4288      	cmp	r0, r1
   171ee:	dbd2      	blt.n	17196 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x292>
   171f0:	e7d5      	b.n	1719e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   171f2:	2001      	movs	r0, #1
                || (self.y <= br[1] && self.y > br[1] - border_width)
   171f4:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   171f8:	e00d      	b.n	17216 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   171fa:	2000      	movs	r0, #0
   171fc:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   17200:	e009      	b.n	17216 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   17202:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17204:	6941      	ldr	r1, [r0, #20]
   17206:	a837      	add	r0, sp, #220	; 0xdc
   17208:	2201      	movs	r2, #1
   1720a:	9113      	str	r1, [sp, #76]	; 0x4c
   1720c:	4611      	mov	r1, r2
   1720e:	f7fb f97a 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   17212:	9012      	str	r0, [sp, #72]	; 0x48
   17214:	e00b      	b.n	1722e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x32a>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   17216:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
   1721a:	07c0      	lsls	r0, r0, #31
   1721c:	2800      	cmp	r0, #0
   1721e:	d1a2      	bne.n	17166 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   17220:	e7a5      	b.n	1716e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x26a>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   17222:	9817      	ldr	r0, [sp, #92]	; 0x5c
   17224:	6801      	ldr	r1, [r0, #0]
   17226:	9a18      	ldr	r2, [sp, #96]	; 0x60
   17228:	428a      	cmp	r2, r1
   1722a:	ddea      	ble.n	17202 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2fe>
   1722c:	e7e5      	b.n	171fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   1722e:	9812      	ldr	r0, [sp, #72]	; 0x48
   17230:	6801      	ldr	r1, [r0, #0]
   17232:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17234:	1a8b      	subs	r3, r1, r2
   17236:	4291      	cmp	r1, r2
   17238:	9311      	str	r3, [sp, #68]	; 0x44
   1723a:	f180 8117 	bvs.w	1746c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x568>
   1723e:	e7ff      	b.n	17240 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x33c>
   17240:	9813      	ldr	r0, [sp, #76]	; 0x4c
   17242:	9911      	ldr	r1, [sp, #68]	; 0x44
   17244:	4288      	cmp	r0, r1
   17246:	dcd4      	bgt.n	171f2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ee>
   17248:	e7d7      	b.n	171fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   1724a:	2001      	movs	r0, #1
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   1724c:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   17250:	e00d      	b.n	1726e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   17252:	2000      	movs	r0, #0
   17254:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   17258:	e009      	b.n	1726e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   1725a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1725c:	6901      	ldr	r1, [r0, #16]
   1725e:	a835      	add	r0, sp, #212	; 0xd4
   17260:	2200      	movs	r2, #0
   17262:	9110      	str	r1, [sp, #64]	; 0x40
   17264:	4611      	mov	r1, r2
   17266:	f7fb f94e 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1726a:	900f      	str	r0, [sp, #60]	; 0x3c
   1726c:	e00c      	b.n	17288 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x384>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   1726e:	f89d 00ee 	ldrb.w	r0, [sp, #238]	; 0xee
   17272:	07c0      	lsls	r0, r0, #31
   17274:	2800      	cmp	r0, #0
   17276:	f47f af5e 	bne.w	17136 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   1727a:	e760      	b.n	1713e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x23a>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   1727c:	9819      	ldr	r0, [sp, #100]	; 0x64
   1727e:	6801      	ldr	r1, [r0, #0]
   17280:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   17282:	428a      	cmp	r2, r1
   17284:	dae9      	bge.n	1725a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x356>
   17286:	e7e4      	b.n	17252 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   17288:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1728a:	6801      	ldr	r1, [r0, #0]
   1728c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1728e:	188b      	adds	r3, r1, r2
   17290:	469c      	mov	ip, r3
   17292:	428b      	cmp	r3, r1
   17294:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   17298:	f180 80f4 	bvs.w	17484 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x580>
   1729c:	e7ff      	b.n	1729e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x39a>
   1729e:	9810      	ldr	r0, [sp, #64]	; 0x40
   172a0:	990e      	ldr	r1, [sp, #56]	; 0x38
   172a2:	4288      	cmp	r0, r1
   172a4:	dbd1      	blt.n	1724a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x346>
   172a6:	e7d4      	b.n	17252 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   172a8:	2001      	movs	r0, #1
                || (self.x <= br[0] && self.x > br[0] - border_width)
   172aa:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   172ae:	e00d      	b.n	172cc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   172b0:	2000      	movs	r0, #0
   172b2:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   172b6:	e009      	b.n	172cc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   172b8:	9829      	ldr	r0, [sp, #164]	; 0xa4
   172ba:	6901      	ldr	r1, [r0, #16]
   172bc:	a837      	add	r0, sp, #220	; 0xdc
   172be:	2200      	movs	r2, #0
   172c0:	910d      	str	r1, [sp, #52]	; 0x34
   172c2:	4611      	mov	r1, r2
   172c4:	f7fb f91f 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   172c8:	900c      	str	r0, [sp, #48]	; 0x30
   172ca:	e00c      	b.n	172e6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3e2>
                if (
   172cc:	f89d 00ef 	ldrb.w	r0, [sp, #239]	; 0xef
   172d0:	07c0      	lsls	r0, r0, #31
   172d2:	2800      	cmp	r0, #0
   172d4:	f47f af17 	bne.w	17106 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   172d8:	e719      	b.n	1710e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20a>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   172da:	981b      	ldr	r0, [sp, #108]	; 0x6c
   172dc:	6801      	ldr	r1, [r0, #0]
   172de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   172e0:	428a      	cmp	r2, r1
   172e2:	dde9      	ble.n	172b8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3b4>
   172e4:	e7e4      	b.n	172b0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
   172e6:	980c      	ldr	r0, [sp, #48]	; 0x30
   172e8:	6801      	ldr	r1, [r0, #0]
   172ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
   172ec:	1a8b      	subs	r3, r1, r2
   172ee:	4291      	cmp	r1, r2
   172f0:	930b      	str	r3, [sp, #44]	; 0x2c
   172f2:	f180 80d3 	bvs.w	1749c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x598>
   172f6:	e7ff      	b.n	172f8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3f4>
   172f8:	980d      	ldr	r0, [sp, #52]	; 0x34
   172fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   172fc:	4288      	cmp	r0, r1
   172fe:	dcd3      	bgt.n	172a8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3a4>
   17300:	e7d6      	b.n	172b0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
                if (
   17302:	981d      	ldr	r0, [sp, #116]	; 0x74
   17304:	07c1      	lsls	r1, r0, #31
   17306:	2900      	cmp	r1, #0
   17308:	f47f aee8 	bne.w	170dc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1d8>
   1730c:	e6ea      	b.n	170e4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
                else if let Some(fill) = self.style.fill_color {
   1730e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17310:	8b01      	ldrh	r1, [r0, #24]
   17312:	2901      	cmp	r1, #1
   17314:	d03b      	beq.n	1738e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48a>
   17316:	e057      	b.n	173c8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                        self.x,
   17318:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1731a:	6901      	ldr	r1, [r0, #16]
                        self.y,
   1731c:	6942      	ldr	r2, [r0, #20]
                        self.style.stroke_color.expect("Expected stroke"),
   1731e:	8bc3      	ldrh	r3, [r0, #30]
   17320:	8b80      	ldrh	r0, [r0, #28]
   17322:	f647 4ca4 	movw	ip, #31908	; 0x7ca4
   17326:	f2c0 0c02 	movt	ip, #2
   1732a:	46ee      	mov	lr, sp
   1732c:	f8ce c000 	str.w	ip, [lr]
   17330:	f647 4c94 	movw	ip, #31892	; 0x7c94
   17334:	f2c0 0c02 	movt	ip, #2
   17338:	f04f 0e0f 	mov.w	lr, #15
   1733c:	910a      	str	r1, [sp, #40]	; 0x28
   1733e:	4619      	mov	r1, r3
   17340:	9209      	str	r2, [sp, #36]	; 0x24
   17342:	4662      	mov	r2, ip
   17344:	4673      	mov	r3, lr
   17346:	f7fd ffff 	bl	15348 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>
   1734a:	9008      	str	r0, [sp, #32]
   1734c:	e7ff      	b.n	1734e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x44a>
                    out = Some((
   1734e:	980a      	ldr	r0, [sp, #40]	; 0x28
   17350:	9040      	str	r0, [sp, #256]	; 0x100
   17352:	9909      	ldr	r1, [sp, #36]	; 0x24
   17354:	9141      	str	r1, [sp, #260]	; 0x104
   17356:	9a08      	ldr	r2, [sp, #32]
   17358:	f8ad 2108 	strh.w	r2, [sp, #264]	; 0x108
   1735c:	9b40      	ldr	r3, [sp, #256]	; 0x100
   1735e:	f8dd c104 	ldr.w	ip, [sp, #260]	; 0x104
   17362:	f8dd e108 	ldr.w	lr, [sp, #264]	; 0x108
   17366:	f8cd e0fc 	str.w	lr, [sp, #252]	; 0xfc
   1736a:	f8cd c0f8 	str.w	ip, [sp, #248]	; 0xf8
   1736e:	933d      	str	r3, [sp, #244]	; 0xf4
   17370:	2301      	movs	r3, #1
   17372:	933c      	str	r3, [sp, #240]	; 0xf0
   17374:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   17376:	f8dd c0f4 	ldr.w	ip, [sp, #244]	; 0xf4
   1737a:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   1737e:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
   17380:	9434      	str	r4, [sp, #208]	; 0xd0
   17382:	f8cd e0cc 	str.w	lr, [sp, #204]	; 0xcc
   17386:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
   1738a:	9331      	str	r3, [sp, #196]	; 0xc4
                if (
   1738c:	e01c      	b.n	173c8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                else if let Some(fill) = self.style.fill_color {
   1738e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17390:	8b41      	ldrh	r1, [r0, #26]
   17392:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
                    out = Some((self.x, self.y, fill));
   17396:	6902      	ldr	r2, [r0, #16]
   17398:	6943      	ldr	r3, [r0, #20]
   1739a:	9247      	str	r2, [sp, #284]	; 0x11c
   1739c:	9348      	str	r3, [sp, #288]	; 0x120
   1739e:	f8ad 1124 	strh.w	r1, [sp, #292]	; 0x124
   173a2:	9947      	ldr	r1, [sp, #284]	; 0x11c
   173a4:	9a48      	ldr	r2, [sp, #288]	; 0x120
   173a6:	9b49      	ldr	r3, [sp, #292]	; 0x124
   173a8:	9346      	str	r3, [sp, #280]	; 0x118
   173aa:	9245      	str	r2, [sp, #276]	; 0x114
   173ac:	9144      	str	r1, [sp, #272]	; 0x110
   173ae:	2101      	movs	r1, #1
   173b0:	9143      	str	r1, [sp, #268]	; 0x10c
   173b2:	9943      	ldr	r1, [sp, #268]	; 0x10c
   173b4:	9a44      	ldr	r2, [sp, #272]	; 0x110
   173b6:	9b45      	ldr	r3, [sp, #276]	; 0x114
   173b8:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   173bc:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
   173c0:	9333      	str	r3, [sp, #204]	; 0xcc
   173c2:	9232      	str	r2, [sp, #200]	; 0xc8
   173c4:	9131      	str	r1, [sp, #196]	; 0xc4
                else if let Some(fill) = self.style.fill_color {
   173c6:	e7ff      	b.n	173c8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
            if self.x >= 0 && self.y >= 0 {
   173c8:	e7ff      	b.n	173ca <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
            self.x += 1;
   173ca:	9829      	ldr	r0, [sp, #164]	; 0xa4
   173cc:	6901      	ldr	r1, [r0, #16]
   173ce:	1c4a      	adds	r2, r1, #1
   173d0:	4613      	mov	r3, r2
   173d2:	428a      	cmp	r2, r1
   173d4:	9307      	str	r3, [sp, #28]
   173d6:	d66d      	bvs.n	174b4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5b0>
   173d8:	e7ff      	b.n	173da <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4d6>
   173da:	9807      	ldr	r0, [sp, #28]
   173dc:	9929      	ldr	r1, [sp, #164]	; 0xa4
   173de:	6108      	str	r0, [r1, #16]
            if self.x > self.bottom_right[0] {
   173e0:	690a      	ldr	r2, [r1, #16]
   173e2:	f101 0008 	add.w	r0, r1, #8
   173e6:	2100      	movs	r1, #0
   173e8:	9206      	str	r2, [sp, #24]
   173ea:	f7fb f88c 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   173ee:	9005      	str	r0, [sp, #20]
   173f0:	e7ff      	b.n	173f2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4ee>
   173f2:	9805      	ldr	r0, [sp, #20]
   173f4:	6801      	ldr	r1, [r0, #0]
   173f6:	9a06      	ldr	r2, [sp, #24]
   173f8:	428a      	cmp	r2, r1
   173fa:	dd16      	ble.n	1742a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   173fc:	e7ff      	b.n	173fe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4fa>
   173fe:	2100      	movs	r1, #0
                self.x = self.top_left[0];
   17400:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17402:	f7fb f880 	bl	12506 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   17406:	9004      	str	r0, [sp, #16]
   17408:	e7ff      	b.n	1740a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x506>
   1740a:	9804      	ldr	r0, [sp, #16]
   1740c:	6801      	ldr	r1, [r0, #0]
   1740e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   17410:	6111      	str	r1, [r2, #16]
                self.y += 1;
   17412:	6951      	ldr	r1, [r2, #20]
   17414:	1c4b      	adds	r3, r1, #1
   17416:	469c      	mov	ip, r3
   17418:	428b      	cmp	r3, r1
   1741a:	f8cd c00c 	str.w	ip, [sp, #12]
   1741e:	d655      	bvs.n	174cc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5c8>
   17420:	e7ff      	b.n	17422 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x51e>
   17422:	9803      	ldr	r0, [sp, #12]
   17424:	9929      	ldr	r1, [sp, #164]	; 0xa4
   17426:	6148      	str	r0, [r1, #20]
            if self.x > self.bottom_right[0] {
   17428:	e7ff      	b.n	1742a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   1742a:	a831      	add	r0, sp, #196	; 0xc4
            if out.is_some() {
   1742c:	f7fe f826 	bl	1547c <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>
   17430:	9002      	str	r0, [sp, #8]
   17432:	e7ff      	b.n	17434 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x530>
   17434:	9802      	ldr	r0, [sp, #8]
   17436:	07c1      	lsls	r1, r0, #31
   17438:	2900      	cmp	r1, #0
   1743a:	d101      	bne.n	17440 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53c>
   1743c:	e7ff      	b.n	1743e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53a>
        let pixel = loop {
   1743e:	e606      	b.n	1704e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
                break out;
   17440:	9831      	ldr	r0, [sp, #196]	; 0xc4
   17442:	9932      	ldr	r1, [sp, #200]	; 0xc8
   17444:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   17446:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   17448:	9330      	str	r3, [sp, #192]	; 0xc0
   1744a:	922f      	str	r2, [sp, #188]	; 0xbc
   1744c:	912e      	str	r1, [sp, #184]	; 0xb8
   1744e:	902d      	str	r0, [sp, #180]	; 0xb4
   17450:	e5f0      	b.n	17034 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
    }
   17452:	e5ed      	b.n	17030 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   17454:	f647 4020 	movw	r0, #31776	; 0x7c20
   17458:	f2c0 0002 	movt	r0, #2
   1745c:	f647 420c 	movw	r2, #31756	; 0x7c0c
   17460:	f2c0 0202 	movt	r2, #2
   17464:	211c      	movs	r1, #28
   17466:	f001 f863 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1746a:	defe      	udf	#254	; 0xfe
                || (self.y <= br[1] && self.y > br[1] - border_width)
   1746c:	f647 4050 	movw	r0, #31824	; 0x7c50
   17470:	f2c0 0002 	movt	r0, #2
   17474:	f647 423c 	movw	r2, #31804	; 0x7c3c
   17478:	f2c0 0202 	movt	r2, #2
   1747c:	2121      	movs	r1, #33	; 0x21
   1747e:	f001 f857 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17482:	defe      	udf	#254	; 0xfe
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   17484:	f647 4020 	movw	r0, #31776	; 0x7c20
   17488:	f2c0 0002 	movt	r0, #2
   1748c:	f647 4274 	movw	r2, #31860	; 0x7c74
   17490:	f2c0 0202 	movt	r2, #2
   17494:	211c      	movs	r1, #28
   17496:	f001 f84b 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1749a:	defe      	udf	#254	; 0xfe
                || (self.x <= br[0] && self.x > br[0] - border_width)
   1749c:	f647 4050 	movw	r0, #31824	; 0x7c50
   174a0:	f2c0 0002 	movt	r0, #2
   174a4:	f647 4284 	movw	r2, #31876	; 0x7c84
   174a8:	f2c0 0202 	movt	r2, #2
   174ac:	2121      	movs	r1, #33	; 0x21
   174ae:	f001 f83f 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   174b2:	defe      	udf	#254	; 0xfe
            self.x += 1;
   174b4:	f647 4020 	movw	r0, #31776	; 0x7c20
   174b8:	f2c0 0002 	movt	r0, #2
   174bc:	f647 42b4 	movw	r2, #31924	; 0x7cb4
   174c0:	f2c0 0202 	movt	r2, #2
   174c4:	211c      	movs	r1, #28
   174c6:	f001 f833 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   174ca:	defe      	udf	#254	; 0xfe
                self.y += 1;
   174cc:	f647 4020 	movw	r0, #31776	; 0x7c20
   174d0:	f2c0 0002 	movt	r0, #2
   174d4:	f647 42c4 	movw	r2, #31940	; 0x7cc4
   174d8:	f2c0 0202 	movt	r2, #2
   174dc:	211c      	movs	r1, #28
   174de:	f001 f827 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   174e2:	defe      	udf	#254	; 0xfe

000174e4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>:
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   174e4:	b580      	push	{r7, lr}
   174e6:	b08a      	sub	sp, #40	; 0x28
   174e8:	680a      	ldr	r2, [r1, #0]
   174ea:	9207      	str	r2, [sp, #28]
   174ec:	684b      	ldr	r3, [r1, #4]
   174ee:	9308      	str	r3, [sp, #32]
   174f0:	8909      	ldrh	r1, [r1, #8]
   174f2:	468c      	mov	ip, r1
   174f4:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
   174f8:	9005      	str	r0, [sp, #20]
   174fa:	4610      	mov	r0, r2
   174fc:	4619      	mov	r1, r3
   174fe:	f8cd c010 	str.w	ip, [sp, #16]
   17502:	f7fa fff7 	bl	124f4 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
   17506:	9003      	str	r0, [sp, #12]
   17508:	9102      	str	r1, [sp, #8]
   1750a:	e7ff      	b.n	1750c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x28>
   1750c:	9803      	ldr	r0, [sp, #12]
   1750e:	9902      	ldr	r1, [sp, #8]
   17510:	f7fb f842 	bl	12598 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>
   17514:	9001      	str	r0, [sp, #4]
   17516:	9100      	str	r1, [sp, #0]
   17518:	e7ff      	b.n	1751a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x36>
   1751a:	9801      	ldr	r0, [sp, #4]
   1751c:	9905      	ldr	r1, [sp, #20]
   1751e:	6008      	str	r0, [r1, #0]
   17520:	9a00      	ldr	r2, [sp, #0]
   17522:	604a      	str	r2, [r1, #4]
   17524:	9b04      	ldr	r3, [sp, #16]
   17526:	810b      	strh	r3, [r1, #8]
   17528:	b00a      	add	sp, #40	; 0x28
   1752a:	bd80      	pop	{r7, pc}

0001752c <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   1752c:	b510      	push	{r4, lr}
   1752e:	b08c      	sub	sp, #48	; 0x30
   17530:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   17534:	9108      	str	r1, [sp, #32]
   17536:	9209      	str	r2, [sp, #36]	; 0x24
   17538:	930a      	str	r3, [sp, #40]	; 0x28
   1753a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1753e:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   17542:	9004      	str	r0, [sp, #16]
   17544:	4670      	mov	r0, lr
   17546:	9303      	str	r3, [sp, #12]
   17548:	9202      	str	r2, [sp, #8]
   1754a:	9101      	str	r1, [sp, #4]
   1754c:	f8cd c000 	str.w	ip, [sp]
   17550:	f000 f818 	bl	17584 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   17554:	e7ff      	b.n	17556 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   17556:	9801      	ldr	r0, [sp, #4]
   17558:	9904      	ldr	r1, [sp, #16]
   1755a:	6008      	str	r0, [r1, #0]
   1755c:	9a02      	ldr	r2, [sp, #8]
   1755e:	604a      	str	r2, [r1, #4]
   17560:	9b03      	ldr	r3, [sp, #12]
   17562:	608b      	str	r3, [r1, #8]
   17564:	f8dd c000 	ldr.w	ip, [sp]
   17568:	f8c1 c00c 	str.w	ip, [r1, #12]
   1756c:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   17570:	f8a1 e018 	strh.w	lr, [r1, #24]
   17574:	f8dd e014 	ldr.w	lr, [sp, #20]
   17578:	9c06      	ldr	r4, [sp, #24]
   1757a:	614c      	str	r4, [r1, #20]
   1757c:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   17580:	b00c      	add	sp, #48	; 0x30
   17582:	bd10      	pop	{r4, pc}

00017584 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   17584:	b082      	sub	sp, #8
   17586:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   17588:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   1758c:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   17590:	f8bd 1000 	ldrh.w	r1, [sp]
   17594:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   17598:	8001      	strh	r1, [r0, #0]
   1759a:	8042      	strh	r2, [r0, #2]
   1759c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   175a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   175a4:	8081      	strh	r1, [r0, #4]
   175a6:	80c2      	strh	r2, [r0, #6]
   175a8:	2101      	movs	r1, #1
   175aa:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   175ac:	b002      	add	sp, #8
   175ae:	4770      	bx	lr

000175b0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>:
   175b0:	b082      	sub	sp, #8
   175b2:	9001      	str	r0, [sp, #4]
   175b4:	9000      	str	r0, [sp, #0]
   175b6:	9800      	ldr	r0, [sp, #0]
   175b8:	b002      	add	sp, #8
   175ba:	4770      	bx	lr

000175bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>:
   175bc:	b081      	sub	sp, #4
   175be:	9000      	str	r0, [sp, #0]
   175c0:	b001      	add	sp, #4
   175c2:	4770      	bx	lr

000175c4 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
   175c4:	b084      	sub	sp, #16
   175c6:	460a      	mov	r2, r1
   175c8:	4603      	mov	r3, r0
   175ca:	9103      	str	r1, [sp, #12]
   175cc:	9002      	str	r0, [sp, #8]
   175ce:	b004      	add	sp, #16
   175d0:	4770      	bx	lr

000175d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E>:
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
   175d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   175d4:	b091      	sub	sp, #68	; 0x44
   175d6:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
   175da:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
   175de:	461c      	mov	r4, r3
   175e0:	4615      	mov	r5, r2
   175e2:	460e      	mov	r6, r1
   175e4:	900a      	str	r0, [sp, #40]	; 0x28
   175e6:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
   175ea:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
   175ee:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   175f2:	f8ad e032 	strh.w	lr, [sp, #50]	; 0x32
   175f6:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
   175f8:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
   175fc:	2701      	movs	r7, #1
   175fe:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
   17602:	466f      	mov	r7, sp
   17604:	f8c7 e000 	str.w	lr, [r7]
   17608:	9008      	str	r0, [sp, #32]
   1760a:	f8cd c01c 	str.w	ip, [sp, #28]
   1760e:	9406      	str	r4, [sp, #24]
   17610:	9505      	str	r5, [sp, #20]
   17612:	9604      	str	r6, [sp, #16]
   17614:	f7f2 fbda 	bl	9dcc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
   17618:	9003      	str	r0, [sp, #12]
   1761a:	e7ff      	b.n	1761c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x4a>
   1761c:	9803      	ldr	r0, [sp, #12]
   1761e:	f000 0001 	and.w	r0, r0, #1
   17622:	f7f1 fb27 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   17626:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   1762a:	e7ff      	b.n	1762c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x5a>
   1762c:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
   17630:	07c1      	lsls	r1, r0, #31
   17632:	2900      	cmp	r1, #0
   17634:	d001      	beq.n	1763a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x68>
   17636:	e7ff      	b.n	17638 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x66>
   17638:	e009      	b.n	1764e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x7c>
   1763a:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
   1763c:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   17640:	9808      	ldr	r0, [sp, #32]
   17642:	9907      	ldr	r1, [sp, #28]
   17644:	f000 f848 	bl	176d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E>
   17648:	9002      	str	r0, [sp, #8]
   1764a:	e00d      	b.n	17668 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x96>
        self.set_address_window(sx, sy, ex, ey)?;
   1764c:	defe      	udf	#254	; 0xfe
   1764e:	f7fb fb68 	bl	12d22 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   17652:	e003      	b.n	1765c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x8a>
    }
   17654:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   17658:	b011      	add	sp, #68	; 0x44
   1765a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
   1765c:	f7fe fd1e 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   17660:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   17664:	e7ff      	b.n	17666 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x94>
   17666:	e031      	b.n	176cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xfa>
        self.write_pixels(colors) ? ;
   17668:	9802      	ldr	r0, [sp, #8]
   1766a:	f000 0001 	and.w	r0, r0, #1
   1766e:	f7f1 fb01 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   17672:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
   17676:	e7ff      	b.n	17678 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xa6>
   17678:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   1767c:	07c1      	lsls	r1, r0, #31
   1767e:	2900      	cmp	r1, #0
   17680:	d001      	beq.n	17686 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xb4>
   17682:	e7ff      	b.n	17684 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xb2>
   17684:	e004      	b.n	17690 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xbe>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   17686:	f7fc fd9b 	bl	141c0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   1768a:	9001      	str	r0, [sp, #4]
   1768c:	e009      	b.n	176a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xd0>
        self.write_pixels(colors) ? ;
   1768e:	defe      	udf	#254	; 0xfe
   17690:	f7fb fb47 	bl	12d22 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   17694:	e7ff      	b.n	17696 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xc4>
   17696:	f7fe fd01 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1769a:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   1769e:	e7ff      	b.n	176a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xce>
   176a0:	e014      	b.n	176cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xfa>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   176a2:	f647 41d4 	movw	r1, #31956	; 0x7cd4
   176a6:	f2c0 0102 	movt	r1, #2
   176aa:	f647 5330 	movw	r3, #32048	; 0x7d30
   176ae:	f2c0 0302 	movt	r3, #2
   176b2:	220e      	movs	r2, #14
   176b4:	9801      	ldr	r0, [sp, #4]
   176b6:	f7f1 faa4 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   176ba:	e7ff      	b.n	176bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xea>
   176bc:	2000      	movs	r0, #0
        Ok(())
   176be:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    }
   176c2:	e7c7      	b.n	17654 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x82>
   176c4:	2000      	movs	r0, #0
   176c6:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   176ca:	e7c3      	b.n	17654 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x82>
   176cc:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   176d0:	07c0      	lsls	r0, r0, #31
   176d2:	2800      	cmp	r0, #0
   176d4:	d1f6      	bne.n	176c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xf2>
   176d6:	e7bd      	b.n	17654 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x82>

000176d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
   176d8:	b580      	push	{r7, lr}
   176da:	b094      	sub	sp, #80	; 0x50
   176dc:	900d      	str	r0, [sp, #52]	; 0x34
   176de:	910e      	str	r1, [sp, #56]	; 0x38
   176e0:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
   176e2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   176e6:	2301      	movs	r3, #1
   176e8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   176ec:	232c      	movs	r3, #44	; 0x2c
   176ee:	f88d 301f 	strb.w	r3, [sp, #31]
   176f2:	9209      	str	r2, [sp, #36]	; 0x24
   176f4:	9208      	str	r2, [sp, #32]
   176f6:	9208      	str	r2, [sp, #32]
   176f8:	9a08      	ldr	r2, [sp, #32]
   176fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   176fc:	f89d c01f 	ldrb.w	ip, [sp, #31]
   17700:	9006      	str	r0, [sp, #24]
   17702:	9105      	str	r1, [sp, #20]
   17704:	4661      	mov	r1, ip
   17706:	f7f2 fa70 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1770a:	9004      	str	r0, [sp, #16]
   1770c:	e7ff      	b.n	1770e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x36>
   1770e:	9804      	ldr	r0, [sp, #16]
   17710:	f000 0001 	and.w	r0, r0, #1
   17714:	f7f1 faae 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   17718:	f88d 001e 	strb.w	r0, [sp, #30]
   1771c:	e7ff      	b.n	1771e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x46>
   1771e:	f89d 001e 	ldrb.w	r0, [sp, #30]
   17722:	07c1      	lsls	r1, r0, #31
   17724:	2900      	cmp	r1, #0
   17726:	d001      	beq.n	1772c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x54>
   17728:	e7ff      	b.n	1772a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x52>
   1772a:	e008      	b.n	1773e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x66>
   1772c:	2000      	movs	r0, #0
        for color in colors {
   1772e:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   17732:	9805      	ldr	r0, [sp, #20]
   17734:	f000 f8ee 	bl	17914 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h48c974e346f24094E>
   17738:	9003      	str	r0, [sp, #12]
   1773a:	e00d      	b.n	17758 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x80>
        self.write_command(Instruction::RAMWR, None)?;
   1773c:	defe      	udf	#254	; 0xfe
   1773e:	f7fb faf0 	bl	12d22 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   17742:	e003      	b.n	1774c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x74>
    }
   17744:	f89d 001d 	ldrb.w	r0, [sp, #29]
   17748:	b014      	add	sp, #80	; 0x50
   1774a:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
   1774c:	f7fe fca6 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   17750:	f88d 001d 	strb.w	r0, [sp, #29]
   17754:	e7ff      	b.n	17756 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x7e>
   17756:	e057      	b.n	17808 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x130>
        for color in colors {
   17758:	9803      	ldr	r0, [sp, #12]
   1775a:	900a      	str	r0, [sp, #40]	; 0x28
   1775c:	e7ff      	b.n	1775e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x86>
   1775e:	a80a      	add	r0, sp, #40	; 0x28
   17760:	f000 f8dc 	bl	1791c <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3601a500030acd5E>
   17764:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
   17768:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   1776c:	e7ff      	b.n	1776e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x96>
   1776e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
   17772:	4601      	mov	r1, r0
   17774:	2800      	cmp	r0, #0
   17776:	d001      	beq.n	1777c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xa4>
   17778:	e7ff      	b.n	1777a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xa2>
   1777a:	e001      	b.n	17780 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xa8>
        }
   1777c:	e02b      	b.n	177d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xfe>
        for color in colors {
   1777e:	defe      	udf	#254	; 0xfe
   17780:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
   17784:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
   17788:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
   1778c:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
            self.write_word(color)?;
   17790:	9906      	ldr	r1, [sp, #24]
   17792:	9002      	str	r0, [sp, #8]
   17794:	4608      	mov	r0, r1
   17796:	9902      	ldr	r1, [sp, #8]
   17798:	f7f2 f958 	bl	9a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   1779c:	9001      	str	r0, [sp, #4]
   1779e:	e7ff      	b.n	177a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xc8>
   177a0:	9801      	ldr	r0, [sp, #4]
   177a2:	f000 0001 	and.w	r0, r0, #1
   177a6:	f7f1 fa65 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   177aa:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   177ae:	e7ff      	b.n	177b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xd8>
   177b0:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
   177b4:	07c1      	lsls	r1, r0, #31
   177b6:	2900      	cmp	r1, #0
   177b8:	d001      	beq.n	177be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xe6>
   177ba:	e7ff      	b.n	177bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xe4>
   177bc:	e001      	b.n	177c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xea>
        for color in colors {
   177be:	e7ce      	b.n	1775e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x86>
            self.write_word(color)?;
   177c0:	defe      	udf	#254	; 0xfe
   177c2:	f7fb faae 	bl	12d22 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   177c6:	e7ff      	b.n	177c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xf0>
   177c8:	f7fe fc68 	bl	1609c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   177cc:	f88d 001d 	strb.w	r0, [sp, #29]
   177d0:	e7ff      	b.n	177d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xfa>
        }
   177d2:	e7ff      	b.n	177d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xfc>
    }
   177d4:	e018      	b.n	17808 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x130>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   177d6:	f7fc fcf3 	bl	141c0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   177da:	9000      	str	r0, [sp, #0]
   177dc:	e7ff      	b.n	177de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x106>
   177de:	f647 41d4 	movw	r1, #31956	; 0x7cd4
   177e2:	f2c0 0102 	movt	r1, #2
   177e6:	f647 5340 	movw	r3, #32064	; 0x7d40
   177ea:	f2c0 0302 	movt	r3, #2
   177ee:	220e      	movs	r2, #14
   177f0:	9800      	ldr	r0, [sp, #0]
   177f2:	f7f1 fa06 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   177f6:	e7ff      	b.n	177f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x120>
   177f8:	2000      	movs	r0, #0
        Ok(())
   177fa:	f88d 001d 	strb.w	r0, [sp, #29]
    }
   177fe:	e7a1      	b.n	17744 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x6c>
   17800:	2000      	movs	r0, #0
   17802:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   17806:	e79d      	b.n	17744 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x6c>
   17808:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   1780c:	07c0      	lsls	r0, r0, #31
   1780e:	2800      	cmp	r0, #0
   17810:	d1f6      	bne.n	17800 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x128>
   17812:	e797      	b.n	17744 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x6c>

00017814 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE>:
   17814:	b083      	sub	sp, #12
   17816:	9002      	str	r0, [sp, #8]
   17818:	9000      	str	r0, [sp, #0]
   1781a:	e7ff      	b.n	1781c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x8>
   1781c:	9800      	ldr	r0, [sp, #0]
   1781e:	28ff      	cmp	r0, #255	; 0xff
   17820:	d807      	bhi.n	17832 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x1e>
   17822:	e7ff      	b.n	17824 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x10>
   17824:	9800      	ldr	r0, [sp, #0]
   17826:	f88d 0005 	strb.w	r0, [sp, #5]
   1782a:	2100      	movs	r1, #0
   1782c:	f88d 1004 	strb.w	r1, [sp, #4]
   17830:	e003      	b.n	1783a <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x26>
   17832:	2001      	movs	r0, #1
   17834:	f88d 0004 	strb.w	r0, [sp, #4]
   17838:	e7ff      	b.n	1783a <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x26>
   1783a:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1783e:	f89d 1005 	ldrb.w	r1, [sp, #5]
   17842:	b003      	add	sp, #12
   17844:	4770      	bx	lr

00017846 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>:
   17846:	b580      	push	{r7, lr}
   17848:	b084      	sub	sp, #16
   1784a:	460a      	mov	r2, r1
   1784c:	4603      	mov	r3, r0
   1784e:	f88d 000e 	strb.w	r0, [sp, #14]
   17852:	f88d 100f 	strb.w	r1, [sp, #15]
   17856:	9202      	str	r2, [sp, #8]
   17858:	9301      	str	r3, [sp, #4]
   1785a:	f000 f805 	bl	17868 <_ZN4core3cmp6min_by17hbd80813895a56a69E>
   1785e:	9000      	str	r0, [sp, #0]
   17860:	e7ff      	b.n	17862 <_ZN4core3cmp3Ord3min17hc89b724701767be9E+0x1c>
   17862:	9800      	ldr	r0, [sp, #0]
   17864:	b004      	add	sp, #16
   17866:	bd80      	pop	{r7, pc}

00017868 <_ZN4core3cmp6min_by17hbd80813895a56a69E>:
   17868:	b580      	push	{r7, lr}
   1786a:	b088      	sub	sp, #32
   1786c:	460a      	mov	r2, r1
   1786e:	4603      	mov	r3, r0
   17870:	f88d 000c 	strb.w	r0, [sp, #12]
   17874:	f88d 100d 	strb.w	r1, [sp, #13]
   17878:	2000      	movs	r0, #0
   1787a:	f88d 001b 	strb.w	r0, [sp, #27]
   1787e:	f88d 001a 	strb.w	r0, [sp, #26]
   17882:	2001      	movs	r0, #1
   17884:	f88d 001b 	strb.w	r0, [sp, #27]
   17888:	f88d 001a 	strb.w	r0, [sp, #26]
   1788c:	a803      	add	r0, sp, #12
   1788e:	9004      	str	r0, [sp, #16]
   17890:	f10d 000d 	add.w	r0, sp, #13
   17894:	9005      	str	r0, [sp, #20]
   17896:	9804      	ldr	r0, [sp, #16]
   17898:	9905      	ldr	r1, [sp, #20]
   1789a:	9202      	str	r2, [sp, #8]
   1789c:	9301      	str	r3, [sp, #4]
   1789e:	f7fa fb21 	bl	11ee4 <_ZN4core3ops8function6FnOnce9call_once17h59e116d6918016e9E>
   178a2:	f88d 000f 	strb.w	r0, [sp, #15]
   178a6:	e7ff      	b.n	178a8 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x40>
   178a8:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   178ac:	1c41      	adds	r1, r0, #1
   178ae:	2902      	cmp	r1, #2
   178b0:	d309      	bcc.n	178c6 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x5e>
   178b2:	e7ff      	b.n	178b4 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x4c>
   178b4:	2000      	movs	r0, #0
   178b6:	f88d 001a 	strb.w	r0, [sp, #26]
   178ba:	f89d 000d 	ldrb.w	r0, [sp, #13]
   178be:	f88d 000e 	strb.w	r0, [sp, #14]
   178c2:	e008      	b.n	178d6 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x6e>
   178c4:	defe      	udf	#254	; 0xfe
   178c6:	2000      	movs	r0, #0
   178c8:	f88d 001b 	strb.w	r0, [sp, #27]
   178cc:	f89d 000c 	ldrb.w	r0, [sp, #12]
   178d0:	f88d 000e 	strb.w	r0, [sp, #14]
   178d4:	e7ff      	b.n	178d6 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x6e>
   178d6:	f89d 001a 	ldrb.w	r0, [sp, #26]
   178da:	07c0      	lsls	r0, r0, #31
   178dc:	2800      	cmp	r0, #0
   178de:	d10a      	bne.n	178f6 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x8e>
   178e0:	e7ff      	b.n	178e2 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x7a>
   178e2:	f89d 001b 	ldrb.w	r0, [sp, #27]
   178e6:	07c0      	lsls	r0, r0, #31
   178e8:	2800      	cmp	r0, #0
   178ea:	d108      	bne.n	178fe <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x96>
   178ec:	e7ff      	b.n	178ee <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x86>
   178ee:	f89d 000e 	ldrb.w	r0, [sp, #14]
   178f2:	b008      	add	sp, #32
   178f4:	bd80      	pop	{r7, pc}
   178f6:	2000      	movs	r0, #0
   178f8:	f88d 001a 	strb.w	r0, [sp, #26]
   178fc:	e7f1      	b.n	178e2 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x7a>
   178fe:	2000      	movs	r0, #0
   17900:	f88d 001b 	strb.w	r0, [sp, #27]
   17904:	e7f3      	b.n	178ee <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x86>

00017906 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h8e5f04233c93701aE>:
   17906:	b081      	sub	sp, #4
   17908:	4601      	mov	r1, r0
   1790a:	f88d 0003 	strb.w	r0, [sp, #3]
   1790e:	b2c0      	uxtb	r0, r0
   17910:	b001      	add	sp, #4
   17912:	4770      	bx	lr

00017914 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h48c974e346f24094E>:
   17914:	b081      	sub	sp, #4
   17916:	9000      	str	r0, [sp, #0]
   17918:	b001      	add	sp, #4
   1791a:	4770      	bx	lr

0001791c <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3601a500030acd5E>:
   1791c:	b580      	push	{r7, lr}
   1791e:	b084      	sub	sp, #16
   17920:	9003      	str	r0, [sp, #12]
   17922:	6800      	ldr	r0, [r0, #0]
   17924:	f7f8 fd3b 	bl	1039e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE>
   17928:	9002      	str	r0, [sp, #8]
   1792a:	9101      	str	r1, [sp, #4]
   1792c:	e7ff      	b.n	1792e <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3601a500030acd5E+0x12>
   1792e:	9802      	ldr	r0, [sp, #8]
   17930:	9901      	ldr	r1, [sp, #4]
   17932:	b004      	add	sp, #16
   17934:	bd80      	pop	{r7, pc}

00017936 <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E>:
   17936:	b580      	push	{r7, lr}
   17938:	b08c      	sub	sp, #48	; 0x30
   1793a:	9005      	str	r0, [sp, #20]
   1793c:	9106      	str	r1, [sp, #24]
   1793e:	9207      	str	r2, [sp, #28]
   17940:	9008      	str	r0, [sp, #32]
   17942:	9109      	str	r1, [sp, #36]	; 0x24
   17944:	2301      	movs	r3, #1
   17946:	930b      	str	r3, [sp, #44]	; 0x2c
   17948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1794a:	9204      	str	r2, [sp, #16]
   1794c:	9103      	str	r1, [sp, #12]
   1794e:	9002      	str	r0, [sp, #8]
   17950:	9301      	str	r3, [sp, #4]
   17952:	e7ff      	b.n	17954 <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E+0x1e>
   17954:	9801      	ldr	r0, [sp, #4]
   17956:	9904      	ldr	r1, [sp, #16]
   17958:	fb00 f201 	mul.w	r2, r0, r1
   1795c:	920a      	str	r2, [sp, #40]	; 0x28
   1795e:	9802      	ldr	r0, [sp, #8]
   17960:	9903      	ldr	r1, [sp, #12]
   17962:	f000 fc37 	bl	181d4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E>
   17966:	e7ff      	b.n	17968 <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E+0x32>
   17968:	b00c      	add	sp, #48	; 0x30
   1796a:	bd80      	pop	{r7, pc}

0001796c <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E>:
   1796c:	b580      	push	{r7, lr}
   1796e:	b088      	sub	sp, #32
   17970:	9004      	str	r0, [sp, #16]
   17972:	9105      	str	r1, [sp, #20]
   17974:	2201      	movs	r2, #1
   17976:	9207      	str	r2, [sp, #28]
   17978:	9a07      	ldr	r2, [sp, #28]
   1797a:	9103      	str	r1, [sp, #12]
   1797c:	9002      	str	r0, [sp, #8]
   1797e:	9201      	str	r2, [sp, #4]
   17980:	e7ff      	b.n	17982 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x16>
   17982:	9801      	ldr	r0, [sp, #4]
   17984:	2820      	cmp	r0, #32
   17986:	d306      	bcc.n	17996 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x2a>
   17988:	e7ff      	b.n	1798a <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x1e>
   1798a:	2201      	movs	r2, #1
   1798c:	9802      	ldr	r0, [sp, #8]
   1798e:	9903      	ldr	r1, [sp, #12]
   17990:	f7ff ffd1 	bl	17936 <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E>
   17994:	e013      	b.n	179be <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x52>
   17996:	9802      	ldr	r0, [sp, #8]
   17998:	f000 f814 	bl	179c4 <_ZN4core3ptr4read17h9c6a8e2989f962ccE>
   1799c:	4601      	mov	r1, r0
   1799e:	f88d 001b 	strb.w	r0, [sp, #27]
   179a2:	9100      	str	r1, [sp, #0]
   179a4:	e7ff      	b.n	179a6 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x3a>
   179a6:	2201      	movs	r2, #1
   179a8:	9803      	ldr	r0, [sp, #12]
   179aa:	9902      	ldr	r1, [sp, #8]
   179ac:	f7fa fe87 	bl	126be <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   179b0:	e7ff      	b.n	179b2 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x46>
   179b2:	9803      	ldr	r0, [sp, #12]
   179b4:	9900      	ldr	r1, [sp, #0]
   179b6:	f7f1 fbf7 	bl	91a8 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   179ba:	e7ff      	b.n	179bc <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x50>
   179bc:	e000      	b.n	179c0 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x54>
   179be:	e7ff      	b.n	179c0 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x54>
   179c0:	b008      	add	sp, #32
   179c2:	bd80      	pop	{r7, pc}

000179c4 <_ZN4core3ptr4read17h9c6a8e2989f962ccE>:
   179c4:	b580      	push	{r7, lr}
   179c6:	b088      	sub	sp, #32
   179c8:	9004      	str	r0, [sp, #16]
   179ca:	f89d 1015 	ldrb.w	r1, [sp, #21]
   179ce:	f88d 100f 	strb.w	r1, [sp, #15]
   179d2:	9002      	str	r0, [sp, #8]
   179d4:	e7ff      	b.n	179d6 <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x12>
   179d6:	f10d 000f 	add.w	r0, sp, #15
   179da:	9006      	str	r0, [sp, #24]
   179dc:	9007      	str	r0, [sp, #28]
   179de:	e7ff      	b.n	179e0 <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x1c>
   179e0:	f10d 010f 	add.w	r1, sp, #15
   179e4:	2201      	movs	r2, #1
   179e6:	9802      	ldr	r0, [sp, #8]
   179e8:	f7fa fe69 	bl	126be <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   179ec:	e7ff      	b.n	179ee <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x2a>
   179ee:	f89d 000f 	ldrb.w	r0, [sp, #15]
   179f2:	4601      	mov	r1, r0
   179f4:	f88d 0016 	strb.w	r0, [sp, #22]
   179f8:	f88d 0017 	strb.w	r0, [sp, #23]
   179fc:	9101      	str	r1, [sp, #4]
   179fe:	e7ff      	b.n	17a00 <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x3c>
   17a00:	9801      	ldr	r0, [sp, #4]
   17a02:	b008      	add	sp, #32
   17a04:	bd80      	pop	{r7, pc}

00017a06 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   17a06:	b580      	push	{r7, lr}
   17a08:	b088      	sub	sp, #32
   17a0a:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   17a0c:	1d01      	adds	r1, r0, #4
   17a0e:	9106      	str	r1, [sp, #24]
   17a10:	9107      	str	r1, [sp, #28]
   17a12:	9004      	str	r0, [sp, #16]
   17a14:	9103      	str	r1, [sp, #12]
   17a16:	e7ff      	b.n	17a18 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   17a18:	9804      	ldr	r0, [sp, #16]
   17a1a:	6801      	ldr	r1, [r0, #0]
   17a1c:	9803      	ldr	r0, [sp, #12]
   17a1e:	f7f1 fa1d 	bl	8e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   17a22:	9002      	str	r0, [sp, #8]
   17a24:	9101      	str	r1, [sp, #4]
   17a26:	e7ff      	b.n	17a28 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   17a28:	9802      	ldr	r0, [sp, #8]
   17a2a:	9901      	ldr	r1, [sp, #4]
   17a2c:	b008      	add	sp, #32
   17a2e:	bd80      	pop	{r7, pc}

00017a30 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   17a30:	b580      	push	{r7, lr}
   17a32:	b088      	sub	sp, #32
   17a34:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   17a36:	1d01      	adds	r1, r0, #4
   17a38:	9106      	str	r1, [sp, #24]
   17a3a:	9107      	str	r1, [sp, #28]
   17a3c:	9004      	str	r0, [sp, #16]
   17a3e:	9103      	str	r1, [sp, #12]
   17a40:	e7ff      	b.n	17a42 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x12>
   17a42:	9804      	ldr	r0, [sp, #16]
   17a44:	6801      	ldr	r1, [r0, #0]
   17a46:	9803      	ldr	r0, [sp, #12]
   17a48:	f7f1 fa08 	bl	8e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   17a4c:	9002      	str	r0, [sp, #8]
   17a4e:	9101      	str	r1, [sp, #4]
   17a50:	e7ff      	b.n	17a52 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x22>
    }
   17a52:	9802      	ldr	r0, [sp, #8]
   17a54:	9901      	ldr	r1, [sp, #4]
   17a56:	b008      	add	sp, #32
   17a58:	bd80      	pop	{r7, pc}

00017a5a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   17a5a:	b580      	push	{r7, lr}
   17a5c:	b08a      	sub	sp, #40	; 0x28
   17a5e:	460a      	mov	r2, r1
   17a60:	9006      	str	r0, [sp, #24]
   17a62:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   17a66:	1d01      	adds	r1, r0, #4
   17a68:	9108      	str	r1, [sp, #32]
   17a6a:	9109      	str	r1, [sp, #36]	; 0x24
   17a6c:	9005      	str	r0, [sp, #20]
   17a6e:	9204      	str	r2, [sp, #16]
   17a70:	9103      	str	r1, [sp, #12]
   17a72:	e7ff      	b.n	17a74 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   17a74:	9805      	ldr	r0, [sp, #20]
   17a76:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   17a78:	9803      	ldr	r0, [sp, #12]
   17a7a:	f7fa ff84 	bl	12986 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   17a7e:	9002      	str	r0, [sp, #8]
   17a80:	e7ff      	b.n	17a82 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   17a82:	9802      	ldr	r0, [sp, #8]
   17a84:	9904      	ldr	r1, [sp, #16]
   17a86:	f000 f994 	bl	17db2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   17a8a:	e7ff      	b.n	17a8c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   17a8c:	9805      	ldr	r0, [sp, #20]
   17a8e:	6801      	ldr	r1, [r0, #0]
   17a90:	1c4a      	adds	r2, r1, #1
   17a92:	4613      	mov	r3, r2
   17a94:	428a      	cmp	r2, r1
   17a96:	9301      	str	r3, [sp, #4]
   17a98:	d305      	bcc.n	17aa6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   17a9a:	e7ff      	b.n	17a9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   17a9c:	9801      	ldr	r0, [sp, #4]
   17a9e:	9905      	ldr	r1, [sp, #20]
   17aa0:	6008      	str	r0, [r1, #0]
    }
   17aa2:	b00a      	add	sp, #40	; 0x28
   17aa4:	bd80      	pop	{r7, pc}
        self.len += 1;
   17aa6:	f647 50c0 	movw	r0, #32192	; 0x7dc0
   17aaa:	f2c0 0002 	movt	r0, #2
   17aae:	f647 52a8 	movw	r2, #32168	; 0x7da8
   17ab2:	f2c0 0202 	movt	r2, #2
   17ab6:	211c      	movs	r1, #28
   17ab8:	f000 fd3a 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17abc:	defe      	udf	#254	; 0xfe

00017abe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   17abe:	b580      	push	{r7, lr}
   17ac0:	b08a      	sub	sp, #40	; 0x28
   17ac2:	460a      	mov	r2, r1
   17ac4:	9006      	str	r0, [sp, #24]
   17ac6:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   17aca:	1d01      	adds	r1, r0, #4
   17acc:	9108      	str	r1, [sp, #32]
   17ace:	9109      	str	r1, [sp, #36]	; 0x24
   17ad0:	9005      	str	r0, [sp, #20]
   17ad2:	9204      	str	r2, [sp, #16]
   17ad4:	9103      	str	r1, [sp, #12]
   17ad6:	e7ff      	b.n	17ad8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x1a>
            .add(self.len)
   17ad8:	9805      	ldr	r0, [sp, #20]
   17ada:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   17adc:	9803      	ldr	r0, [sp, #12]
   17ade:	f7fa ff52 	bl	12986 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   17ae2:	9002      	str	r0, [sp, #8]
   17ae4:	e7ff      	b.n	17ae6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x28>
   17ae6:	9802      	ldr	r0, [sp, #8]
   17ae8:	9904      	ldr	r1, [sp, #16]
   17aea:	f000 f962 	bl	17db2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   17aee:	e7ff      	b.n	17af0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x32>
        self.len += 1;
   17af0:	9805      	ldr	r0, [sp, #20]
   17af2:	6801      	ldr	r1, [r0, #0]
   17af4:	1c4a      	adds	r2, r1, #1
   17af6:	4613      	mov	r3, r2
   17af8:	428a      	cmp	r2, r1
   17afa:	9301      	str	r3, [sp, #4]
   17afc:	d305      	bcc.n	17b0a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x4c>
   17afe:	e7ff      	b.n	17b00 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x42>
   17b00:	9801      	ldr	r0, [sp, #4]
   17b02:	9905      	ldr	r1, [sp, #20]
   17b04:	6008      	str	r0, [r1, #0]
    }
   17b06:	b00a      	add	sp, #40	; 0x28
   17b08:	bd80      	pop	{r7, pc}
        self.len += 1;
   17b0a:	f647 50c0 	movw	r0, #32192	; 0x7dc0
   17b0e:	f2c0 0002 	movt	r0, #2
   17b12:	f647 52a8 	movw	r2, #32168	; 0x7da8
   17b16:	f2c0 0202 	movt	r2, #2
   17b1a:	211c      	movs	r1, #28
   17b1c:	f000 fd08 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17b20:	defe      	udf	#254	; 0xfe

00017b22 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   17b22:	b580      	push	{r7, lr}
   17b24:	b094      	sub	sp, #80	; 0x50
   17b26:	900e      	str	r0, [sp, #56]	; 0x38
   17b28:	910f      	str	r1, [sp, #60]	; 0x3c
   17b2a:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   17b2c:	6803      	ldr	r3, [r0, #0]
   17b2e:	9009      	str	r0, [sp, #36]	; 0x24
   17b30:	4608      	mov	r0, r1
   17b32:	9108      	str	r1, [sp, #32]
   17b34:	4611      	mov	r1, r2
   17b36:	9207      	str	r2, [sp, #28]
   17b38:	9306      	str	r3, [sp, #24]
   17b3a:	f7fa ffb4 	bl	12aa6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   17b3e:	9005      	str	r0, [sp, #20]
   17b40:	e7ff      	b.n	17b42 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x20>
   17b42:	9806      	ldr	r0, [sp, #24]
   17b44:	9905      	ldr	r1, [sp, #20]
   17b46:	1842      	adds	r2, r0, r1
   17b48:	4613      	mov	r3, r2
   17b4a:	4282      	cmp	r2, r0
   17b4c:	9304      	str	r3, [sp, #16]
   17b4e:	d33f      	bcc.n	17bd0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xae>
   17b50:	e7ff      	b.n	17b52 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x30>
   17b52:	9809      	ldr	r0, [sp, #36]	; 0x24
   17b54:	f000 f8b7 	bl	17cc6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   17b58:	9003      	str	r0, [sp, #12]
   17b5a:	e7ff      	b.n	17b5c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x3a>
   17b5c:	9804      	ldr	r0, [sp, #16]
   17b5e:	9903      	ldr	r1, [sp, #12]
   17b60:	4288      	cmp	r0, r1
   17b62:	d807      	bhi.n	17b74 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x52>
   17b64:	e7ff      	b.n	17b66 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x44>
            for elem in other {
   17b66:	9808      	ldr	r0, [sp, #32]
   17b68:	9907      	ldr	r1, [sp, #28]
   17b6a:	f7f1 fa95 	bl	9098 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   17b6e:	9002      	str	r0, [sp, #8]
   17b70:	9101      	str	r1, [sp, #4]
   17b72:	e003      	b.n	17b7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x5a>
   17b74:	2001      	movs	r0, #1
            Err(())
   17b76:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   17b7a:	e025      	b.n	17bc8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   17b7c:	9802      	ldr	r0, [sp, #8]
   17b7e:	900b      	str	r0, [sp, #44]	; 0x2c
   17b80:	9901      	ldr	r1, [sp, #4]
   17b82:	910c      	str	r1, [sp, #48]	; 0x30
   17b84:	e7ff      	b.n	17b86 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
   17b86:	a80b      	add	r0, sp, #44	; 0x2c
   17b88:	f7fa fb5f 	bl	1224a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   17b8c:	900d      	str	r0, [sp, #52]	; 0x34
   17b8e:	e7ff      	b.n	17b90 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x6e>
   17b90:	980d      	ldr	r0, [sp, #52]	; 0x34
   17b92:	2800      	cmp	r0, #0
   17b94:	4601      	mov	r1, r0
   17b96:	bf18      	it	ne
   17b98:	2101      	movne	r1, #1
   17b9a:	2800      	cmp	r0, #0
   17b9c:	d001      	beq.n	17ba2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x80>
   17b9e:	e7ff      	b.n	17ba0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x7e>
   17ba0:	e004      	b.n	17bac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x8a>
   17ba2:	2000      	movs	r0, #0
            Ok(())
   17ba4:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   17ba8:	e00e      	b.n	17bc8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   17baa:	defe      	udf	#254	; 0xfe
   17bac:	980d      	ldr	r0, [sp, #52]	; 0x34
   17bae:	9011      	str	r0, [sp, #68]	; 0x44
   17bb0:	9012      	str	r0, [sp, #72]	; 0x48
   17bb2:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   17bb4:	f000 f909 	bl	17dca <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   17bb8:	9000      	str	r0, [sp, #0]
   17bba:	e7ff      	b.n	17bbc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x9a>
   17bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
   17bbe:	9900      	ldr	r1, [sp, #0]
   17bc0:	f7ff ff7d 	bl	17abe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>
   17bc4:	e7ff      	b.n	17bc6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa4>
            for elem in other {
   17bc6:	e7de      	b.n	17b86 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
    }
   17bc8:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   17bcc:	b014      	add	sp, #80	; 0x50
   17bce:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   17bd0:	f647 50c0 	movw	r0, #32192	; 0x7dc0
   17bd4:	f2c0 0002 	movt	r0, #2
   17bd8:	f647 52dc 	movw	r2, #32220	; 0x7ddc
   17bdc:	f2c0 0202 	movt	r2, #2
   17be0:	211c      	movs	r1, #28
   17be2:	f000 fca5 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17be6:	defe      	udf	#254	; 0xfe

00017be8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   17be8:	b580      	push	{r7, lr}
   17bea:	b088      	sub	sp, #32
   17bec:	460a      	mov	r2, r1
   17bee:	9006      	str	r0, [sp, #24]
   17bf0:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   17bf4:	6801      	ldr	r1, [r0, #0]
   17bf6:	9004      	str	r0, [sp, #16]
   17bf8:	9203      	str	r2, [sp, #12]
   17bfa:	9102      	str	r1, [sp, #8]
   17bfc:	f000 f859 	bl	17cb2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   17c00:	9001      	str	r0, [sp, #4]
   17c02:	e7ff      	b.n	17c04 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   17c04:	9802      	ldr	r0, [sp, #8]
   17c06:	9901      	ldr	r1, [sp, #4]
   17c08:	4288      	cmp	r0, r1
   17c0a:	d307      	bcc.n	17c1c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   17c0c:	e7ff      	b.n	17c0e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   17c0e:	9803      	ldr	r0, [sp, #12]
   17c10:	f88d 0015 	strb.w	r0, [sp, #21]
   17c14:	2101      	movs	r1, #1
   17c16:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   17c1a:	e008      	b.n	17c2e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   17c1c:	9804      	ldr	r0, [sp, #16]
   17c1e:	9903      	ldr	r1, [sp, #12]
   17c20:	f7ff ff1b 	bl	17a5a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   17c24:	e7ff      	b.n	17c26 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   17c26:	2000      	movs	r0, #0
            Ok(())
   17c28:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   17c2c:	e7ff      	b.n	17c2e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   17c2e:	f89d 0014 	ldrb.w	r0, [sp, #20]
   17c32:	f89d 1015 	ldrb.w	r1, [sp, #21]
   17c36:	b008      	add	sp, #32
   17c38:	bd80      	pop	{r7, pc}

00017c3a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   17c3a:	b580      	push	{r7, lr}
   17c3c:	b082      	sub	sp, #8
   17c3e:	9001      	str	r0, [sp, #4]
   17c40:	2100      	movs	r1, #0
        self.truncate(0);
   17c42:	f000 f880 	bl	17d46 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   17c46:	e7ff      	b.n	17c48 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   17c48:	b002      	add	sp, #8
   17c4a:	bd80      	pop	{r7, pc}

00017c4c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>:
    pub(crate) fn clear(&mut self) {
   17c4c:	b580      	push	{r7, lr}
   17c4e:	b082      	sub	sp, #8
   17c50:	9001      	str	r0, [sp, #4]
   17c52:	2100      	movs	r1, #0
        self.truncate(0);
   17c54:	f000 f841 	bl	17cda <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>
   17c58:	e7ff      	b.n	17c5a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E+0xe>
    }
   17c5a:	b002      	add	sp, #8
   17c5c:	bd80      	pop	{r7, pc}

00017c5e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   17c5e:	b580      	push	{r7, lr}
   17c60:	b088      	sub	sp, #32
   17c62:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   17c64:	1d01      	adds	r1, r0, #4
   17c66:	9106      	str	r1, [sp, #24]
   17c68:	9107      	str	r1, [sp, #28]
   17c6a:	9004      	str	r0, [sp, #16]
   17c6c:	9103      	str	r1, [sp, #12]
   17c6e:	e7ff      	b.n	17c70 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x12>
   17c70:	9804      	ldr	r0, [sp, #16]
   17c72:	6801      	ldr	r1, [r0, #0]
   17c74:	9803      	ldr	r0, [sp, #12]
   17c76:	f7fb fb2a 	bl	132ce <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   17c7a:	9002      	str	r0, [sp, #8]
   17c7c:	9101      	str	r1, [sp, #4]
   17c7e:	e7ff      	b.n	17c80 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x22>
    }
   17c80:	9802      	ldr	r0, [sp, #8]
   17c82:	9901      	ldr	r1, [sp, #4]
   17c84:	b008      	add	sp, #32
   17c86:	bd80      	pop	{r7, pc}

00017c88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   17c88:	b580      	push	{r7, lr}
   17c8a:	b088      	sub	sp, #32
   17c8c:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   17c8e:	1d01      	adds	r1, r0, #4
   17c90:	9106      	str	r1, [sp, #24]
   17c92:	9107      	str	r1, [sp, #28]
   17c94:	9004      	str	r0, [sp, #16]
   17c96:	9103      	str	r1, [sp, #12]
   17c98:	e7ff      	b.n	17c9a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   17c9a:	9804      	ldr	r0, [sp, #16]
   17c9c:	6801      	ldr	r1, [r0, #0]
   17c9e:	9803      	ldr	r0, [sp, #12]
   17ca0:	f7fb fb15 	bl	132ce <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   17ca4:	9002      	str	r0, [sp, #8]
   17ca6:	9101      	str	r1, [sp, #4]
   17ca8:	e7ff      	b.n	17caa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   17caa:	9802      	ldr	r0, [sp, #8]
   17cac:	9901      	ldr	r1, [sp, #4]
   17cae:	b008      	add	sp, #32
   17cb0:	bd80      	pop	{r7, pc}

00017cb2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   17cb2:	b580      	push	{r7, lr}
   17cb4:	b082      	sub	sp, #8
   17cb6:	9001      	str	r0, [sp, #4]
        N::to_usize()
   17cb8:	f000 f964 	bl	17f84 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   17cbc:	9000      	str	r0, [sp, #0]
   17cbe:	e7ff      	b.n	17cc0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   17cc0:	9800      	ldr	r0, [sp, #0]
   17cc2:	b002      	add	sp, #8
   17cc4:	bd80      	pop	{r7, pc}

00017cc6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>:
    pub(crate) fn capacity(&self) -> usize {
   17cc6:	b580      	push	{r7, lr}
   17cc8:	b082      	sub	sp, #8
   17cca:	9001      	str	r0, [sp, #4]
        N::to_usize()
   17ccc:	f000 f8b2 	bl	17e34 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>
   17cd0:	9000      	str	r0, [sp, #0]
   17cd2:	e7ff      	b.n	17cd4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE+0xe>
    }
   17cd4:	9800      	ldr	r0, [sp, #0]
   17cd6:	b002      	add	sp, #8
   17cd8:	bd80      	pop	{r7, pc}

00017cda <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   17cda:	b580      	push	{r7, lr}
   17cdc:	b08a      	sub	sp, #40	; 0x28
   17cde:	9007      	str	r0, [sp, #28]
   17ce0:	9108      	str	r1, [sp, #32]
   17ce2:	9106      	str	r1, [sp, #24]
   17ce4:	9005      	str	r0, [sp, #20]
   17ce6:	e7ff      	b.n	17ce8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
            while len < self.len {
   17ce8:	9805      	ldr	r0, [sp, #20]
   17cea:	6801      	ldr	r1, [r0, #0]
   17cec:	9a06      	ldr	r2, [sp, #24]
   17cee:	428a      	cmp	r2, r1
   17cf0:	d302      	bcc.n	17cf8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1e>
   17cf2:	e7ff      	b.n	17cf4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1a>
    }
   17cf4:	b00a      	add	sp, #40	; 0x28
   17cf6:	bd80      	pop	{r7, pc}
                self.len -= 1;
   17cf8:	9805      	ldr	r0, [sp, #20]
   17cfa:	6801      	ldr	r1, [r0, #0]
   17cfc:	1e4a      	subs	r2, r1, #1
   17cfe:	2901      	cmp	r1, #1
   17d00:	9204      	str	r2, [sp, #16]
   17d02:	d314      	bcc.n	17d2e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x54>
   17d04:	e7ff      	b.n	17d06 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x2c>
   17d06:	9804      	ldr	r0, [sp, #16]
   17d08:	9905      	ldr	r1, [sp, #20]
   17d0a:	6008      	str	r0, [r1, #0]
                let len = self.len;
   17d0c:	680a      	ldr	r2, [r1, #0]
   17d0e:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   17d10:	4608      	mov	r0, r1
   17d12:	9203      	str	r2, [sp, #12]
   17d14:	f7ff fe8c 	bl	17a30 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>
   17d18:	9002      	str	r0, [sp, #8]
   17d1a:	9101      	str	r1, [sp, #4]
   17d1c:	e7ff      	b.n	17d1e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x44>
   17d1e:	9802      	ldr	r0, [sp, #8]
   17d20:	9901      	ldr	r1, [sp, #4]
   17d22:	9a03      	ldr	r2, [sp, #12]
   17d24:	f7fa fead 	bl	12a82 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   17d28:	e7ff      	b.n	17d2a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x50>
   17d2a:	e7ff      	b.n	17d2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x52>
            while len < self.len {
   17d2c:	e7dc      	b.n	17ce8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
                self.len -= 1;
   17d2e:	f647 6000 	movw	r0, #32256	; 0x7e00
   17d32:	f2c0 0002 	movt	r0, #2
   17d36:	f647 52ec 	movw	r2, #32236	; 0x7dec
   17d3a:	f2c0 0202 	movt	r2, #2
   17d3e:	2121      	movs	r1, #33	; 0x21
   17d40:	f000 fbf6 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17d44:	defe      	udf	#254	; 0xfe

00017d46 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   17d46:	b580      	push	{r7, lr}
   17d48:	b08a      	sub	sp, #40	; 0x28
   17d4a:	9007      	str	r0, [sp, #28]
   17d4c:	9108      	str	r1, [sp, #32]
   17d4e:	9106      	str	r1, [sp, #24]
   17d50:	9005      	str	r0, [sp, #20]
   17d52:	e7ff      	b.n	17d54 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   17d54:	9805      	ldr	r0, [sp, #20]
   17d56:	6801      	ldr	r1, [r0, #0]
   17d58:	9a06      	ldr	r2, [sp, #24]
   17d5a:	428a      	cmp	r2, r1
   17d5c:	d302      	bcc.n	17d64 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   17d5e:	e7ff      	b.n	17d60 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   17d60:	b00a      	add	sp, #40	; 0x28
   17d62:	bd80      	pop	{r7, pc}
                self.len -= 1;
   17d64:	9805      	ldr	r0, [sp, #20]
   17d66:	6801      	ldr	r1, [r0, #0]
   17d68:	1e4a      	subs	r2, r1, #1
   17d6a:	2901      	cmp	r1, #1
   17d6c:	9204      	str	r2, [sp, #16]
   17d6e:	d314      	bcc.n	17d9a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   17d70:	e7ff      	b.n	17d72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   17d72:	9804      	ldr	r0, [sp, #16]
   17d74:	9905      	ldr	r1, [sp, #20]
   17d76:	6008      	str	r0, [r1, #0]
                let len = self.len;
   17d78:	680a      	ldr	r2, [r1, #0]
   17d7a:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   17d7c:	4608      	mov	r0, r1
   17d7e:	9203      	str	r2, [sp, #12]
   17d80:	f7ff fe41 	bl	17a06 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   17d84:	9002      	str	r0, [sp, #8]
   17d86:	9101      	str	r1, [sp, #4]
   17d88:	e7ff      	b.n	17d8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   17d8a:	9802      	ldr	r0, [sp, #8]
   17d8c:	9901      	ldr	r1, [sp, #4]
   17d8e:	9a03      	ldr	r2, [sp, #12]
   17d90:	f7fa fe77 	bl	12a82 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   17d94:	e7ff      	b.n	17d96 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   17d96:	e7ff      	b.n	17d98 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   17d98:	e7dc      	b.n	17d54 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   17d9a:	f647 6000 	movw	r0, #32256	; 0x7e00
   17d9e:	f2c0 0002 	movt	r0, #2
   17da2:	f647 52ec 	movw	r2, #32236	; 0x7dec
   17da6:	f2c0 0202 	movt	r2, #2
   17daa:	2121      	movs	r1, #33	; 0x21
   17dac:	f000 fbc0 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17db0:	defe      	udf	#254	; 0xfe

00017db2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   17db2:	b580      	push	{r7, lr}
   17db4:	b084      	sub	sp, #16
   17db6:	460a      	mov	r2, r1
   17db8:	9002      	str	r0, [sp, #8]
   17dba:	f88d 100f 	strb.w	r1, [sp, #15]
   17dbe:	9201      	str	r2, [sp, #4]
   17dc0:	f7f1 f9f2 	bl	91a8 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   17dc4:	e7ff      	b.n	17dc6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   17dc6:	b004      	add	sp, #16
   17dc8:	bd80      	pop	{r7, pc}

00017dca <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   17dca:	b081      	sub	sp, #4
   17dcc:	9000      	str	r0, [sp, #0]
   17dce:	7800      	ldrb	r0, [r0, #0]
   17dd0:	b001      	add	sp, #4
   17dd2:	4770      	bx	lr

00017dd4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    fn to_usize() -> usize {
   17dd4:	b580      	push	{r7, lr}
   17dd6:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   17dd8:	f000 fa8a 	bl	182f0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17ddc:	9003      	str	r0, [sp, #12]
   17dde:	e7ff      	b.n	17de0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   17de0:	9803      	ldr	r0, [sp, #12]
   17de2:	f000 fa8b 	bl	182fc <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17de6:	9002      	str	r0, [sp, #8]
   17de8:	e7ff      	b.n	17dea <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   17dea:	f000 f8cb 	bl	17f84 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   17dee:	9001      	str	r0, [sp, #4]
   17df0:	e7ff      	b.n	17df2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   17df2:	9801      	ldr	r0, [sp, #4]
   17df4:	0041      	lsls	r1, r0, #1
   17df6:	9100      	str	r1, [sp, #0]
   17df8:	e7ff      	b.n	17dfa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   17dfa:	9802      	ldr	r0, [sp, #8]
   17dfc:	9900      	ldr	r1, [sp, #0]
   17dfe:	4308      	orrs	r0, r1
    }
   17e00:	b004      	add	sp, #16
   17e02:	bd80      	pop	{r7, pc}

00017e04 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   17e04:	b580      	push	{r7, lr}
   17e06:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   17e08:	f000 fa72 	bl	182f0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17e0c:	9003      	str	r0, [sp, #12]
   17e0e:	e7ff      	b.n	17e10 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   17e10:	9803      	ldr	r0, [sp, #12]
   17e12:	f000 fa73 	bl	182fc <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17e16:	9002      	str	r0, [sp, #8]
   17e18:	e7ff      	b.n	17e1a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   17e1a:	f000 f86b 	bl	17ef4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   17e1e:	9001      	str	r0, [sp, #4]
   17e20:	e7ff      	b.n	17e22 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   17e22:	9801      	ldr	r0, [sp, #4]
   17e24:	0041      	lsls	r1, r0, #1
   17e26:	9100      	str	r1, [sp, #0]
   17e28:	e7ff      	b.n	17e2a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   17e2a:	9802      	ldr	r0, [sp, #8]
   17e2c:	9900      	ldr	r1, [sp, #0]
   17e2e:	4308      	orrs	r0, r1
    }
   17e30:	b004      	add	sp, #16
   17e32:	bd80      	pop	{r7, pc}

00017e34 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>:
    fn to_usize() -> usize {
   17e34:	b580      	push	{r7, lr}
   17e36:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   17e38:	f000 fa5a 	bl	182f0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17e3c:	9003      	str	r0, [sp, #12]
   17e3e:	e7ff      	b.n	17e40 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0xc>
   17e40:	9803      	ldr	r0, [sp, #12]
   17e42:	f000 fa5b 	bl	182fc <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17e46:	9002      	str	r0, [sp, #8]
   17e48:	e7ff      	b.n	17e4a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x16>
   17e4a:	f000 f8fb 	bl	18044 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>
   17e4e:	9001      	str	r0, [sp, #4]
   17e50:	e7ff      	b.n	17e52 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x1e>
   17e52:	9801      	ldr	r0, [sp, #4]
   17e54:	0041      	lsls	r1, r0, #1
   17e56:	9100      	str	r1, [sp, #0]
   17e58:	e7ff      	b.n	17e5a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x26>
   17e5a:	9802      	ldr	r0, [sp, #8]
   17e5c:	9900      	ldr	r1, [sp, #0]
   17e5e:	4308      	orrs	r0, r1
    }
   17e60:	b004      	add	sp, #16
   17e62:	bd80      	pop	{r7, pc}

00017e64 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   17e64:	b580      	push	{r7, lr}
   17e66:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   17e68:	f000 fa42 	bl	182f0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17e6c:	9003      	str	r0, [sp, #12]
   17e6e:	e7ff      	b.n	17e70 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   17e70:	9803      	ldr	r0, [sp, #12]
   17e72:	f000 fa43 	bl	182fc <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17e76:	9002      	str	r0, [sp, #8]
   17e78:	e7ff      	b.n	17e7a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   17e7a:	f000 f80b 	bl	17e94 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   17e7e:	9001      	str	r0, [sp, #4]
   17e80:	e7ff      	b.n	17e82 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   17e82:	9801      	ldr	r0, [sp, #4]
   17e84:	0041      	lsls	r1, r0, #1
   17e86:	9100      	str	r1, [sp, #0]
   17e88:	e7ff      	b.n	17e8a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   17e8a:	9802      	ldr	r0, [sp, #8]
   17e8c:	9900      	ldr	r1, [sp, #0]
   17e8e:	4308      	orrs	r0, r1
    }
   17e90:	b004      	add	sp, #16
   17e92:	bd80      	pop	{r7, pc}

00017e94 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   17e94:	b580      	push	{r7, lr}
   17e96:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   17e98:	f000 fa2a 	bl	182f0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17e9c:	9003      	str	r0, [sp, #12]
   17e9e:	e7ff      	b.n	17ea0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   17ea0:	9803      	ldr	r0, [sp, #12]
   17ea2:	f000 fa2b 	bl	182fc <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17ea6:	9002      	str	r0, [sp, #8]
   17ea8:	e7ff      	b.n	17eaa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   17eaa:	f000 f89b 	bl	17fe4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   17eae:	9001      	str	r0, [sp, #4]
   17eb0:	e7ff      	b.n	17eb2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   17eb2:	9801      	ldr	r0, [sp, #4]
   17eb4:	0041      	lsls	r1, r0, #1
   17eb6:	9100      	str	r1, [sp, #0]
   17eb8:	e7ff      	b.n	17eba <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   17eba:	9802      	ldr	r0, [sp, #8]
   17ebc:	9900      	ldr	r1, [sp, #0]
   17ebe:	4308      	orrs	r0, r1
    }
   17ec0:	b004      	add	sp, #16
   17ec2:	bd80      	pop	{r7, pc}

00017ec4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   17ec4:	b580      	push	{r7, lr}
   17ec6:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   17ec8:	f000 fa12 	bl	182f0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17ecc:	9003      	str	r0, [sp, #12]
   17ece:	e7ff      	b.n	17ed0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   17ed0:	9803      	ldr	r0, [sp, #12]
   17ed2:	f000 fa13 	bl	182fc <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17ed6:	9002      	str	r0, [sp, #8]
   17ed8:	e7ff      	b.n	17eda <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   17eda:	f7ff ff7b 	bl	17dd4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   17ede:	9001      	str	r0, [sp, #4]
   17ee0:	e7ff      	b.n	17ee2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   17ee2:	9801      	ldr	r0, [sp, #4]
   17ee4:	0041      	lsls	r1, r0, #1
   17ee6:	9100      	str	r1, [sp, #0]
   17ee8:	e7ff      	b.n	17eea <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   17eea:	9802      	ldr	r0, [sp, #8]
   17eec:	9900      	ldr	r1, [sp, #0]
   17eee:	4308      	orrs	r0, r1
    }
   17ef0:	b004      	add	sp, #16
   17ef2:	bd80      	pop	{r7, pc}

00017ef4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   17ef4:	b580      	push	{r7, lr}
   17ef6:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   17ef8:	f000 f9fa 	bl	182f0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17efc:	9003      	str	r0, [sp, #12]
   17efe:	e7ff      	b.n	17f00 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   17f00:	9803      	ldr	r0, [sp, #12]
   17f02:	f000 f9fb 	bl	182fc <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17f06:	9002      	str	r0, [sp, #8]
   17f08:	e7ff      	b.n	17f0a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   17f0a:	f000 f823 	bl	17f54 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   17f0e:	9001      	str	r0, [sp, #4]
   17f10:	e7ff      	b.n	17f12 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   17f12:	9801      	ldr	r0, [sp, #4]
   17f14:	0041      	lsls	r1, r0, #1
   17f16:	9100      	str	r1, [sp, #0]
   17f18:	e7ff      	b.n	17f1a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   17f1a:	9802      	ldr	r0, [sp, #8]
   17f1c:	9900      	ldr	r1, [sp, #0]
   17f1e:	4308      	orrs	r0, r1
    }
   17f20:	b004      	add	sp, #16
   17f22:	bd80      	pop	{r7, pc}

00017f24 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   17f24:	b580      	push	{r7, lr}
   17f26:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   17f28:	f000 f9e2 	bl	182f0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17f2c:	9003      	str	r0, [sp, #12]
   17f2e:	e7ff      	b.n	17f30 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   17f30:	9803      	ldr	r0, [sp, #12]
   17f32:	f000 f9e3 	bl	182fc <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17f36:	9002      	str	r0, [sp, #8]
   17f38:	e7ff      	b.n	17f3a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   17f3a:	f000 f86b 	bl	18014 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   17f3e:	9001      	str	r0, [sp, #4]
   17f40:	e7ff      	b.n	17f42 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   17f42:	9801      	ldr	r0, [sp, #4]
   17f44:	0041      	lsls	r1, r0, #1
   17f46:	9100      	str	r1, [sp, #0]
   17f48:	e7ff      	b.n	17f4a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   17f4a:	9802      	ldr	r0, [sp, #8]
   17f4c:	9900      	ldr	r1, [sp, #0]
   17f4e:	4308      	orrs	r0, r1
    }
   17f50:	b004      	add	sp, #16
   17f52:	bd80      	pop	{r7, pc}

00017f54 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   17f54:	b580      	push	{r7, lr}
   17f56:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   17f58:	f000 f9ca 	bl	182f0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17f5c:	9003      	str	r0, [sp, #12]
   17f5e:	e7ff      	b.n	17f60 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   17f60:	9803      	ldr	r0, [sp, #12]
   17f62:	f000 f9cb 	bl	182fc <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17f66:	9002      	str	r0, [sp, #8]
   17f68:	e7ff      	b.n	17f6a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   17f6a:	f000 f823 	bl	17fb4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   17f6e:	9001      	str	r0, [sp, #4]
   17f70:	e7ff      	b.n	17f72 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   17f72:	9801      	ldr	r0, [sp, #4]
   17f74:	0041      	lsls	r1, r0, #1
   17f76:	9100      	str	r1, [sp, #0]
   17f78:	e7ff      	b.n	17f7a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   17f7a:	9802      	ldr	r0, [sp, #8]
   17f7c:	9900      	ldr	r1, [sp, #0]
   17f7e:	4308      	orrs	r0, r1
    }
   17f80:	b004      	add	sp, #16
   17f82:	bd80      	pop	{r7, pc}

00017f84 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   17f84:	b580      	push	{r7, lr}
   17f86:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   17f88:	f000 f9b4 	bl	182f4 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   17f8c:	9003      	str	r0, [sp, #12]
   17f8e:	e7ff      	b.n	17f90 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   17f90:	9803      	ldr	r0, [sp, #12]
   17f92:	f000 f9b3 	bl	182fc <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17f96:	9002      	str	r0, [sp, #8]
   17f98:	e7ff      	b.n	17f9a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   17f9a:	f000 f9ad 	bl	182f8 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   17f9e:	9001      	str	r0, [sp, #4]
   17fa0:	e7ff      	b.n	17fa2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   17fa2:	9801      	ldr	r0, [sp, #4]
   17fa4:	0041      	lsls	r1, r0, #1
   17fa6:	9100      	str	r1, [sp, #0]
   17fa8:	e7ff      	b.n	17faa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   17faa:	9802      	ldr	r0, [sp, #8]
   17fac:	9900      	ldr	r1, [sp, #0]
   17fae:	4308      	orrs	r0, r1
    }
   17fb0:	b004      	add	sp, #16
   17fb2:	bd80      	pop	{r7, pc}

00017fb4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   17fb4:	b580      	push	{r7, lr}
   17fb6:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   17fb8:	f000 f99a 	bl	182f0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17fbc:	9003      	str	r0, [sp, #12]
   17fbe:	e7ff      	b.n	17fc0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   17fc0:	9803      	ldr	r0, [sp, #12]
   17fc2:	f000 f99b 	bl	182fc <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17fc6:	9002      	str	r0, [sp, #8]
   17fc8:	e7ff      	b.n	17fca <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   17fca:	f7ff ff7b 	bl	17ec4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   17fce:	9001      	str	r0, [sp, #4]
   17fd0:	e7ff      	b.n	17fd2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   17fd2:	9801      	ldr	r0, [sp, #4]
   17fd4:	0041      	lsls	r1, r0, #1
   17fd6:	9100      	str	r1, [sp, #0]
   17fd8:	e7ff      	b.n	17fda <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   17fda:	9802      	ldr	r0, [sp, #8]
   17fdc:	9900      	ldr	r1, [sp, #0]
   17fde:	4308      	orrs	r0, r1
    }
   17fe0:	b004      	add	sp, #16
   17fe2:	bd80      	pop	{r7, pc}

00017fe4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   17fe4:	b580      	push	{r7, lr}
   17fe6:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   17fe8:	f000 f982 	bl	182f0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17fec:	9003      	str	r0, [sp, #12]
   17fee:	e7ff      	b.n	17ff0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   17ff0:	9803      	ldr	r0, [sp, #12]
   17ff2:	f000 f983 	bl	182fc <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17ff6:	9002      	str	r0, [sp, #8]
   17ff8:	e7ff      	b.n	17ffa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   17ffa:	f7ff ff03 	bl	17e04 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   17ffe:	9001      	str	r0, [sp, #4]
   18000:	e7ff      	b.n	18002 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   18002:	9801      	ldr	r0, [sp, #4]
   18004:	0041      	lsls	r1, r0, #1
   18006:	9100      	str	r1, [sp, #0]
   18008:	e7ff      	b.n	1800a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   1800a:	9802      	ldr	r0, [sp, #8]
   1800c:	9900      	ldr	r1, [sp, #0]
   1800e:	4308      	orrs	r0, r1
    }
   18010:	b004      	add	sp, #16
   18012:	bd80      	pop	{r7, pc}

00018014 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   18014:	b580      	push	{r7, lr}
   18016:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   18018:	f000 f96a 	bl	182f0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1801c:	9003      	str	r0, [sp, #12]
   1801e:	e7ff      	b.n	18020 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   18020:	9803      	ldr	r0, [sp, #12]
   18022:	f000 f96b 	bl	182fc <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   18026:	9002      	str	r0, [sp, #8]
   18028:	e7ff      	b.n	1802a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   1802a:	f7ff ff1b 	bl	17e64 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   1802e:	9001      	str	r0, [sp, #4]
   18030:	e7ff      	b.n	18032 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   18032:	9801      	ldr	r0, [sp, #4]
   18034:	0041      	lsls	r1, r0, #1
   18036:	9100      	str	r1, [sp, #0]
   18038:	e7ff      	b.n	1803a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   1803a:	9802      	ldr	r0, [sp, #8]
   1803c:	9900      	ldr	r1, [sp, #0]
   1803e:	4308      	orrs	r0, r1
    }
   18040:	b004      	add	sp, #16
   18042:	bd80      	pop	{r7, pc}

00018044 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>:
    fn to_usize() -> usize {
   18044:	b580      	push	{r7, lr}
   18046:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   18048:	f000 f952 	bl	182f0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1804c:	9003      	str	r0, [sp, #12]
   1804e:	e7ff      	b.n	18050 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0xc>
   18050:	9803      	ldr	r0, [sp, #12]
   18052:	f000 f953 	bl	182fc <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   18056:	9002      	str	r0, [sp, #8]
   18058:	e7ff      	b.n	1805a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x16>
   1805a:	f7ff ff63 	bl	17f24 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   1805e:	9001      	str	r0, [sp, #4]
   18060:	e7ff      	b.n	18062 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x1e>
   18062:	9801      	ldr	r0, [sp, #4]
   18064:	0041      	lsls	r1, r0, #1
   18066:	9100      	str	r1, [sp, #0]
   18068:	e7ff      	b.n	1806a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x26>
   1806a:	9802      	ldr	r0, [sp, #8]
   1806c:	9900      	ldr	r1, [sp, #0]
   1806e:	4308      	orrs	r0, r1
    }
   18070:	b004      	add	sp, #16
   18072:	bd80      	pop	{r7, pc}

00018074 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   18074:	2000      	movs	r0, #0
        0
    }
   18076:	4770      	bx	lr

00018078 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   18078:	2001      	movs	r0, #1
        1
    }
   1807a:	4770      	bx	lr

0001807c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>:
   1807c:	b580      	push	{r7, lr}
   1807e:	b084      	sub	sp, #16
   18080:	9002      	str	r0, [sp, #8]
   18082:	9103      	str	r1, [sp, #12]
   18084:	f000 f80f 	bl	180a6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>
   18088:	9001      	str	r0, [sp, #4]
   1808a:	e7ff      	b.n	1808c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E+0x10>
   1808c:	9801      	ldr	r0, [sp, #4]
   1808e:	b004      	add	sp, #16
   18090:	bd80      	pop	{r7, pc}

00018092 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>:
   18092:	b580      	push	{r7, lr}
   18094:	b082      	sub	sp, #8
   18096:	9001      	str	r0, [sp, #4]
   18098:	f000 f873 	bl	18182 <_ZN4core3ptr4read17h27a035d1812d8297E>
   1809c:	9000      	str	r0, [sp, #0]
   1809e:	e7ff      	b.n	180a0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E+0xe>
   180a0:	9800      	ldr	r0, [sp, #0]
   180a2:	b002      	add	sp, #8
   180a4:	bd80      	pop	{r7, pc}

000180a6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>:
   180a6:	b084      	sub	sp, #16
   180a8:	9001      	str	r0, [sp, #4]
   180aa:	9102      	str	r1, [sp, #8]
   180ac:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   180b0:	9003      	str	r0, [sp, #12]
   180b2:	9803      	ldr	r0, [sp, #12]
   180b4:	9000      	str	r0, [sp, #0]
   180b6:	e7ff      	b.n	180b8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE+0x12>
   180b8:	9800      	ldr	r0, [sp, #0]
   180ba:	b004      	add	sp, #16
   180bc:	4770      	bx	lr

000180be <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>:
   180be:	b082      	sub	sp, #8
   180c0:	9001      	str	r0, [sp, #4]
   180c2:	9000      	str	r0, [sp, #0]
   180c4:	e7ff      	b.n	180c6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E+0x8>
   180c6:	9800      	ldr	r0, [sp, #0]
   180c8:	fab0 f180 	clz	r1, r0
   180cc:	0948      	lsrs	r0, r1, #5
   180ce:	b002      	add	sp, #8
   180d0:	4770      	bx	lr

000180d2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE>:
   180d2:	b580      	push	{r7, lr}
   180d4:	b088      	sub	sp, #32
   180d6:	9006      	str	r0, [sp, #24]
   180d8:	9107      	str	r1, [sp, #28]
   180da:	9004      	str	r0, [sp, #16]
   180dc:	4608      	mov	r0, r1
   180de:	9103      	str	r1, [sp, #12]
   180e0:	f001 f8c7 	bl	19272 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   180e4:	9002      	str	r0, [sp, #8]
   180e6:	e7ff      	b.n	180e8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x16>
   180e8:	9802      	ldr	r0, [sp, #8]
   180ea:	07c1      	lsls	r1, r0, #31
   180ec:	2900      	cmp	r1, #0
   180ee:	d105      	bne.n	180fc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x2a>
   180f0:	e7ff      	b.n	180f2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x20>
   180f2:	9803      	ldr	r0, [sp, #12]
   180f4:	f001 f8c1 	bl	1927a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   180f8:	9001      	str	r0, [sp, #4]
   180fa:	e007      	b.n	1810c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x3a>
   180fc:	9804      	ldr	r0, [sp, #16]
   180fe:	9903      	ldr	r1, [sp, #12]
   18100:	f001 fe23 	bl	19d4a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>
   18104:	f88d 0017 	strb.w	r0, [sp, #23]
   18108:	e7ff      	b.n	1810a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x38>
   1810a:	e015      	b.n	18138 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   1810c:	9801      	ldr	r0, [sp, #4]
   1810e:	07c1      	lsls	r1, r0, #31
   18110:	2900      	cmp	r1, #0
   18112:	d107      	bne.n	18124 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x52>
   18114:	e7ff      	b.n	18116 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x44>
   18116:	9804      	ldr	r0, [sp, #16]
   18118:	9903      	ldr	r1, [sp, #12]
   1811a:	f001 ffe7 	bl	1a0ec <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>
   1811e:	f88d 0017 	strb.w	r0, [sp, #23]
   18122:	e007      	b.n	18134 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x62>
   18124:	9804      	ldr	r0, [sp, #16]
   18126:	9903      	ldr	r1, [sp, #12]
   18128:	f001 fe6e 	bl	19e08 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>
   1812c:	f88d 0017 	strb.w	r0, [sp, #23]
   18130:	e7ff      	b.n	18132 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x60>
   18132:	e000      	b.n	18136 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   18134:	e7ff      	b.n	18136 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   18136:	e7ff      	b.n	18138 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   18138:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1813c:	b008      	add	sp, #32
   1813e:	bd80      	pop	{r7, pc}

00018140 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>:
   18140:	b081      	sub	sp, #4
   18142:	4601      	mov	r1, r0
   18144:	f88d 0003 	strb.w	r0, [sp, #3]
   18148:	b2c0      	uxtb	r0, r0
   1814a:	b001      	add	sp, #4
   1814c:	4770      	bx	lr

0001814e <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>:
   1814e:	b086      	sub	sp, #24
   18150:	9004      	str	r0, [sp, #16]
   18152:	9105      	str	r1, [sp, #20]
   18154:	9002      	str	r0, [sp, #8]
   18156:	9103      	str	r1, [sp, #12]
   18158:	9802      	ldr	r0, [sp, #8]
   1815a:	9903      	ldr	r1, [sp, #12]
   1815c:	9000      	str	r0, [sp, #0]
   1815e:	9101      	str	r1, [sp, #4]
   18160:	9800      	ldr	r0, [sp, #0]
   18162:	9901      	ldr	r1, [sp, #4]
   18164:	b006      	add	sp, #24
   18166:	4770      	bx	lr

00018168 <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>:
   18168:	b086      	sub	sp, #24
   1816a:	9004      	str	r0, [sp, #16]
   1816c:	9105      	str	r1, [sp, #20]
   1816e:	9002      	str	r0, [sp, #8]
   18170:	9103      	str	r1, [sp, #12]
   18172:	9802      	ldr	r0, [sp, #8]
   18174:	9903      	ldr	r1, [sp, #12]
   18176:	9000      	str	r0, [sp, #0]
   18178:	9101      	str	r1, [sp, #4]
   1817a:	9800      	ldr	r0, [sp, #0]
   1817c:	9901      	ldr	r1, [sp, #4]
   1817e:	b006      	add	sp, #24
   18180:	4770      	bx	lr

00018182 <_ZN4core3ptr4read17h27a035d1812d8297E>:
   18182:	b580      	push	{r7, lr}
   18184:	b088      	sub	sp, #32
   18186:	9003      	str	r0, [sp, #12]
   18188:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1818c:	f8ad 100a 	strh.w	r1, [sp, #10]
   18190:	9001      	str	r0, [sp, #4]
   18192:	e7ff      	b.n	18194 <_ZN4core3ptr4read17h27a035d1812d8297E+0x12>
   18194:	f10d 000a 	add.w	r0, sp, #10
   18198:	9006      	str	r0, [sp, #24]
   1819a:	9007      	str	r0, [sp, #28]
   1819c:	e7ff      	b.n	1819e <_ZN4core3ptr4read17h27a035d1812d8297E+0x1c>
   1819e:	f10d 010a 	add.w	r1, sp, #10
   181a2:	2201      	movs	r2, #1
   181a4:	9801      	ldr	r0, [sp, #4]
   181a6:	f000 f8b0 	bl	1830a <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>
   181aa:	e7ff      	b.n	181ac <_ZN4core3ptr4read17h27a035d1812d8297E+0x2a>
   181ac:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   181b0:	4601      	mov	r1, r0
   181b2:	f8ad 0014 	strh.w	r0, [sp, #20]
   181b6:	f8ad 0016 	strh.w	r0, [sp, #22]
   181ba:	9100      	str	r1, [sp, #0]
   181bc:	e7ff      	b.n	181be <_ZN4core3ptr4read17h27a035d1812d8297E+0x3c>
   181be:	9800      	ldr	r0, [sp, #0]
   181c0:	b008      	add	sp, #32
   181c2:	bd80      	pop	{r7, pc}

000181c4 <_ZN4core3ptr5write17h147d4643d861e927E>:
   181c4:	b082      	sub	sp, #8
   181c6:	460a      	mov	r2, r1
   181c8:	9000      	str	r0, [sp, #0]
   181ca:	f8ad 1006 	strh.w	r1, [sp, #6]
   181ce:	8001      	strh	r1, [r0, #0]
   181d0:	b002      	add	sp, #8
   181d2:	4770      	bx	lr

000181d4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E>:
   181d4:	b5d0      	push	{r4, r6, r7, lr}
   181d6:	af02      	add	r7, sp, #8
   181d8:	b0b4      	sub	sp, #208	; 0xd0
   181da:	466c      	mov	r4, sp
   181dc:	f36f 0404 	bfc	r4, #0, #5
   181e0:	46a5      	mov	sp, r4
   181e2:	9024      	str	r0, [sp, #144]	; 0x90
   181e4:	9125      	str	r1, [sp, #148]	; 0x94
   181e6:	9226      	str	r2, [sp, #152]	; 0x98
   181e8:	2320      	movs	r3, #32
   181ea:	932f      	str	r3, [sp, #188]	; 0xbc
   181ec:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   181ee:	9327      	str	r3, [sp, #156]	; 0x9c
   181f0:	920e      	str	r2, [sp, #56]	; 0x38
   181f2:	910d      	str	r1, [sp, #52]	; 0x34
   181f4:	900c      	str	r0, [sp, #48]	; 0x30
   181f6:	930b      	str	r3, [sp, #44]	; 0x2c
   181f8:	e7ff      	b.n	181fa <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x26>
   181fa:	2000      	movs	r0, #0
   181fc:	900f      	str	r0, [sp, #60]	; 0x3c
   181fe:	e7ff      	b.n	18200 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x2c>
   18200:	980f      	ldr	r0, [sp, #60]	; 0x3c
   18202:	990b      	ldr	r1, [sp, #44]	; 0x2c
   18204:	4408      	add	r0, r1
   18206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18208:	4290      	cmp	r0, r2
   1820a:	d905      	bls.n	18218 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x44>
   1820c:	e7ff      	b.n	1820e <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x3a>
   1820e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   18210:	990e      	ldr	r1, [sp, #56]	; 0x38
   18212:	4288      	cmp	r0, r1
   18214:	d334      	bcc.n	18280 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xac>
   18216:	e067      	b.n	182e8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x114>
   18218:	e7ff      	b.n	1821a <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x46>
   1821a:	a810      	add	r0, sp, #64	; 0x40
   1821c:	9032      	str	r0, [sp, #200]	; 0xc8
   1821e:	9033      	str	r0, [sp, #204]	; 0xcc
   18220:	e7ff      	b.n	18222 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x4e>
   18222:	a810      	add	r0, sp, #64	; 0x40
   18224:	4601      	mov	r1, r0
   18226:	9028      	str	r0, [sp, #160]	; 0xa0
   18228:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1822a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1822c:	900a      	str	r0, [sp, #40]	; 0x28
   1822e:	4610      	mov	r0, r2
   18230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18232:	9109      	str	r1, [sp, #36]	; 0x24
   18234:	4619      	mov	r1, r3
   18236:	f7fa fba6 	bl	12986 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1823a:	4601      	mov	r1, r0
   1823c:	9029      	str	r0, [sp, #164]	; 0xa4
   1823e:	9108      	str	r1, [sp, #32]
   18240:	e7ff      	b.n	18242 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x6e>
   18242:	990f      	ldr	r1, [sp, #60]	; 0x3c
   18244:	980d      	ldr	r0, [sp, #52]	; 0x34
   18246:	f7fa fb9e 	bl	12986 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1824a:	4601      	mov	r1, r0
   1824c:	902a      	str	r0, [sp, #168]	; 0xa8
   1824e:	9107      	str	r1, [sp, #28]
   18250:	e7ff      	b.n	18252 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x7e>
   18252:	9808      	ldr	r0, [sp, #32]
   18254:	9909      	ldr	r1, [sp, #36]	; 0x24
   18256:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18258:	f7fa fa31 	bl	126be <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1825c:	e7ff      	b.n	1825e <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x8a>
   1825e:	9807      	ldr	r0, [sp, #28]
   18260:	9908      	ldr	r1, [sp, #32]
   18262:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18264:	f7fa fa2b 	bl	126be <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   18268:	e7ff      	b.n	1826a <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x96>
   1826a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1826c:	9907      	ldr	r1, [sp, #28]
   1826e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18270:	f7fa fa25 	bl	126be <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   18274:	e7ff      	b.n	18276 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xa2>
   18276:	980f      	ldr	r0, [sp, #60]	; 0x3c
   18278:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1827a:	4408      	add	r0, r1
   1827c:	900f      	str	r0, [sp, #60]	; 0x3c
   1827e:	e7bf      	b.n	18200 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x2c>
   18280:	e7ff      	b.n	18282 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xae>
   18282:	980f      	ldr	r0, [sp, #60]	; 0x3c
   18284:	990e      	ldr	r1, [sp, #56]	; 0x38
   18286:	1a08      	subs	r0, r1, r0
   18288:	4602      	mov	r2, r0
   1828a:	902b      	str	r0, [sp, #172]	; 0xac
   1828c:	a81c      	add	r0, sp, #112	; 0x70
   1828e:	9030      	str	r0, [sp, #192]	; 0xc0
   18290:	9031      	str	r0, [sp, #196]	; 0xc4
   18292:	9206      	str	r2, [sp, #24]
   18294:	9005      	str	r0, [sp, #20]
   18296:	e7ff      	b.n	18298 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xc4>
   18298:	9805      	ldr	r0, [sp, #20]
   1829a:	9905      	ldr	r1, [sp, #20]
   1829c:	912c      	str	r1, [sp, #176]	; 0xb0
   1829e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   182a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   182a2:	9004      	str	r0, [sp, #16]
   182a4:	4610      	mov	r0, r2
   182a6:	f7fa fb6e 	bl	12986 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   182aa:	4601      	mov	r1, r0
   182ac:	902d      	str	r0, [sp, #180]	; 0xb4
   182ae:	9103      	str	r1, [sp, #12]
   182b0:	e7ff      	b.n	182b2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xde>
   182b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   182b4:	980d      	ldr	r0, [sp, #52]	; 0x34
   182b6:	f7fa fb66 	bl	12986 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   182ba:	4601      	mov	r1, r0
   182bc:	902e      	str	r0, [sp, #184]	; 0xb8
   182be:	9102      	str	r1, [sp, #8]
   182c0:	e7ff      	b.n	182c2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xee>
   182c2:	9803      	ldr	r0, [sp, #12]
   182c4:	9904      	ldr	r1, [sp, #16]
   182c6:	9a06      	ldr	r2, [sp, #24]
   182c8:	f7fa f9f9 	bl	126be <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   182cc:	e7ff      	b.n	182ce <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xfa>
   182ce:	9802      	ldr	r0, [sp, #8]
   182d0:	9903      	ldr	r1, [sp, #12]
   182d2:	9a06      	ldr	r2, [sp, #24]
   182d4:	f7fa f9f3 	bl	126be <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   182d8:	e7ff      	b.n	182da <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x106>
   182da:	9804      	ldr	r0, [sp, #16]
   182dc:	9902      	ldr	r1, [sp, #8]
   182de:	9a06      	ldr	r2, [sp, #24]
   182e0:	f7fa f9ed 	bl	126be <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   182e4:	e7ff      	b.n	182e6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x112>
   182e6:	e7ff      	b.n	182e8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x114>
   182e8:	f1a7 0408 	sub.w	r4, r7, #8
   182ec:	46a5      	mov	sp, r4
   182ee:	bdd0      	pop	{r4, r6, r7, pc}

000182f0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
    fn to_u8() -> u8 {
   182f0:	2000      	movs	r0, #0
    }
   182f2:	4770      	bx	lr

000182f4 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
    fn to_u8() -> u8 {
   182f4:	2001      	movs	r0, #1
    }
   182f6:	4770      	bx	lr

000182f8 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   182f8:	2000      	movs	r0, #0
    }
   182fa:	4770      	bx	lr

000182fc <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   182fc:	b081      	sub	sp, #4
   182fe:	4601      	mov	r1, r0
   18300:	f88d 0003 	strb.w	r0, [sp, #3]
   18304:	b2c0      	uxtb	r0, r0
   18306:	b001      	add	sp, #4
   18308:	4770      	bx	lr

0001830a <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>:
   1830a:	b580      	push	{r7, lr}
   1830c:	b084      	sub	sp, #16
   1830e:	9001      	str	r0, [sp, #4]
   18310:	9102      	str	r1, [sp, #8]
   18312:	9203      	str	r2, [sp, #12]
   18314:	0052      	lsls	r2, r2, #1
   18316:	9000      	str	r0, [sp, #0]
   18318:	4608      	mov	r0, r1
   1831a:	9900      	ldr	r1, [sp, #0]
   1831c:	f006 fcdc 	bl	1ecd8 <__aeabi_memcpy>
   18320:	e7ff      	b.n	18322 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E+0x18>
   18322:	b004      	add	sp, #16
   18324:	bd80      	pop	{r7, pc}

00018326 <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   18326:	4770      	bx	lr

00018328 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   18328:	b5b0      	push	{r4, r5, r7, lr}
   1832a:	b086      	sub	sp, #24
   1832c:	460c      	mov	r4, r1
   1832e:	4605      	mov	r5, r0
   18330:	f001 fb87 	bl	19a42 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   18334:	b9a8      	cbnz	r0, 18362 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   18336:	f647 6324 	movw	r3, #32292	; 0x7e24
   1833a:	2200      	movs	r2, #0
   1833c:	f2c0 0302 	movt	r3, #2
   18340:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   18344:	9205      	str	r2, [sp, #20]
   18346:	9304      	str	r3, [sp, #16]
   18348:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1834c:	2201      	movs	r2, #1
   1834e:	9201      	str	r2, [sp, #4]
   18350:	f647 62e8 	movw	r2, #32488	; 0x7ee8
   18354:	f2c0 0202 	movt	r2, #2
   18358:	9200      	str	r2, [sp, #0]
   1835a:	466a      	mov	r2, sp
   1835c:	f000 fbe0 	bl	18b20 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   18360:	b110      	cbz	r0, 18368 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   18362:	2001      	movs	r0, #1
   18364:	b006      	add	sp, #24
   18366:	bdb0      	pop	{r4, r5, r7, pc}
   18368:	1d28      	adds	r0, r5, #4
   1836a:	4621      	mov	r1, r4
   1836c:	b006      	add	sp, #24
   1836e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   18372:	f001 bb66 	b.w	19a42 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

00018376 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   18376:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   1837a:	f243 6134 	movw	r1, #13876	; 0x3634
   1837e:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   18382:	f6cd 0131 	movt	r1, #55345	; 0xd831
   18386:	4770      	bx	lr

00018388 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   18388:	b570      	push	{r4, r5, r6, lr}
   1838a:	460e      	mov	r6, r1
   1838c:	3909      	subs	r1, #9
   1838e:	4604      	mov	r4, r0
   18390:	291e      	cmp	r1, #30
   18392:	d818      	bhi.n	183c6 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   18394:	2002      	movs	r0, #2
   18396:	2574      	movs	r5, #116	; 0x74
   18398:	e8df f001 	tbb	[pc, r1]
   1839c:	1c1c1019 	.word	0x1c1c1019
   183a0:	1c1c1c29 	.word	0x1c1c1c29
   183a4:	1c1c1c1c 	.word	0x1c1c1c1c
   183a8:	1c1c1c1c 	.word	0x1c1c1c1c
   183ac:	1c1c1c1c 	.word	0x1c1c1c1c
   183b0:	1c1c1c1c 	.word	0x1c1c1c1c
   183b4:	1c1c171c 	.word	0x1c1c171c
   183b8:	00171c1c 	.word	0x00171c1c
   183bc:	2002      	movs	r0, #2
   183be:	256e      	movs	r5, #110	; 0x6e
   183c0:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   183c4:	bd70      	pop	{r4, r5, r6, pc}
   183c6:	2e5c      	cmp	r6, #92	; 0x5c
   183c8:	d104      	bne.n	183d4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   183ca:	2002      	movs	r0, #2
   183cc:	4635      	mov	r5, r6
   183ce:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   183d2:	bd70      	pop	{r4, r5, r6, pc}
   183d4:	2a00      	cmp	r2, #0
   183d6:	d040      	beq.n	1845a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   183d8:	f3c6 1083 	ubfx	r0, r6, #6, #4
   183dc:	0ab1      	lsrs	r1, r6, #10
   183de:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   183e2:	d309      	bcc.n	183f8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   183e4:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   183e8:	d137      	bne.n	1845a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   183ea:	211e      	movs	r1, #30
   183ec:	e00b      	b.n	18406 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   183ee:	2002      	movs	r0, #2
   183f0:	2572      	movs	r5, #114	; 0x72
   183f2:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   183f6:	bd70      	pop	{r4, r5, r6, pc}
   183f8:	f648 125c 	movw	r2, #35164	; 0x895c
   183fc:	f2c0 0202 	movt	r2, #2
   18400:	5c51      	ldrb	r1, [r2, r1]
   18402:	291e      	cmp	r1, #30
   18404:	d842      	bhi.n	1848c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   18406:	f648 12d7 	movw	r2, #35287	; 0x89d7
   1840a:	f2c0 0202 	movt	r2, #2
   1840e:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   18412:	5c09      	ldrb	r1, [r1, r0]
   18414:	298b      	cmp	r1, #139	; 0x8b
   18416:	d231      	bcs.n	1847c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   18418:	f648 30c8 	movw	r0, #35784	; 0x8bc8
   1841c:	2301      	movs	r3, #1
   1841e:	f2c0 0002 	movt	r0, #2
   18422:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   18426:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   1842a:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   1842e:	f8d2 c004 	ldr.w	ip, [r2, #4]
   18432:	fa03 f501 	lsl.w	r5, r3, r1
   18436:	f1b1 0220 	subs.w	r2, r1, #32
   1843a:	f1c1 0120 	rsb	r1, r1, #32
   1843e:	bf58      	it	pl
   18440:	2500      	movpl	r5, #0
   18442:	2a00      	cmp	r2, #0
   18444:	ea00 0005 	and.w	r0, r0, r5
   18448:	fa23 f101 	lsr.w	r1, r3, r1
   1844c:	bf58      	it	pl
   1844e:	fa03 f102 	lslpl.w	r1, r3, r2
   18452:	ea01 010c 	and.w	r1, r1, ip
   18456:	4308      	orrs	r0, r1
   18458:	d105      	bne.n	18466 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   1845a:	4630      	mov	r0, r6
   1845c:	f001 f9a5 	bl	197aa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   18460:	b108      	cbz	r0, 18466 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   18462:	2001      	movs	r0, #1
   18464:	e7b2      	b.n	183cc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   18466:	f046 0001 	orr.w	r0, r6, #1
   1846a:	2107      	movs	r1, #7
   1846c:	fab0 f080 	clz	r0, r0
   18470:	f04f 0e05 	mov.w	lr, #5
   18474:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   18478:	2003      	movs	r0, #3
   1847a:	e7a7      	b.n	183cc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   1847c:	f648 104c 	movw	r0, #35148	; 0x894c
   18480:	228b      	movs	r2, #139	; 0x8b
   18482:	f2c0 0002 	movt	r0, #2
   18486:	f000 f869 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1848a:	defe      	udf	#254	; 0xfe
   1848c:	f648 103c 	movw	r0, #35132	; 0x893c
   18490:	221f      	movs	r2, #31
   18492:	f2c0 0002 	movt	r0, #2
   18496:	f000 f861 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1849a:	defe      	udf	#254	; 0xfe

0001849c <_ZN4core6option13expect_failed17had6579abaad447b4E>:
   1849c:	b08a      	sub	sp, #40	; 0x28
   1849e:	e9cd 0100 	strd	r0, r1, [sp]
   184a2:	2001      	movs	r0, #1
   184a4:	a908      	add	r1, sp, #32
   184a6:	9007      	str	r0, [sp, #28]
   184a8:	9106      	str	r1, [sp, #24]
   184aa:	2100      	movs	r1, #0
   184ac:	9105      	str	r1, [sp, #20]
   184ae:	e9cd 0103 	strd	r0, r1, [sp, #12]
   184b2:	f647 70ec 	movw	r0, #32748	; 0x7fec
   184b6:	f2c0 0002 	movt	r0, #2
   184ba:	4611      	mov	r1, r2
   184bc:	9002      	str	r0, [sp, #8]
   184be:	f24a 309f 	movw	r0, #41887	; 0xa39f
   184c2:	f2c0 0001 	movt	r0, #1
   184c6:	9009      	str	r0, [sp, #36]	; 0x24
   184c8:	4668      	mov	r0, sp
   184ca:	9008      	str	r0, [sp, #32]
   184cc:	a802      	add	r0, sp, #8
   184ce:	f000 f865 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   184d2:	defe      	udf	#254	; 0xfe

000184d4 <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   184d4:	b08e      	sub	sp, #56	; 0x38
   184d6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   184da:	2002      	movs	r0, #2
   184dc:	a90a      	add	r1, sp, #40	; 0x28
   184de:	9009      	str	r0, [sp, #36]	; 0x24
   184e0:	9108      	str	r1, [sp, #32]
   184e2:	2100      	movs	r1, #0
   184e4:	9107      	str	r1, [sp, #28]
   184e6:	e9cd 0105 	strd	r0, r1, [sp, #20]
   184ea:	f647 70f8 	movw	r0, #32760	; 0x7ff8
   184ee:	f2c0 0002 	movt	r0, #2
   184f2:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   184f6:	9004      	str	r0, [sp, #16]
   184f8:	f24a 3095 	movw	r0, #41877	; 0xa395
   184fc:	f2c0 0001 	movt	r0, #1
   18500:	900d      	str	r0, [sp, #52]	; 0x34
   18502:	a802      	add	r0, sp, #8
   18504:	900c      	str	r0, [sp, #48]	; 0x30
   18506:	f24a 309f 	movw	r0, #41887	; 0xa39f
   1850a:	f2c0 0001 	movt	r0, #1
   1850e:	4661      	mov	r1, ip
   18510:	900b      	str	r0, [sp, #44]	; 0x2c
   18512:	4668      	mov	r0, sp
   18514:	900a      	str	r0, [sp, #40]	; 0x28
   18516:	a804      	add	r0, sp, #16
   18518:	f000 f840 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1851c:	defe      	udf	#254	; 0xfe

0001851e <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   1851e:	68c0      	ldr	r0, [r0, #12]
   18520:	4770      	bx	lr

00018522 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   18522:	4770      	bx	lr

00018524 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   18524:	e9d0 2100 	ldrd	r2, r1, [r0]
   18528:	4610      	mov	r0, r2
   1852a:	4770      	bx	lr

0001852c <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   1852c:	6880      	ldr	r0, [r0, #8]
   1852e:	4770      	bx	lr

00018530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   18530:	b088      	sub	sp, #32
   18532:	4694      	mov	ip, r2
   18534:	f647 6224 	movw	r2, #32292	; 0x7e24
   18538:	2300      	movs	r3, #0
   1853a:	f2c0 0202 	movt	r2, #2
   1853e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   18542:	4668      	mov	r0, sp
   18544:	9305      	str	r3, [sp, #20]
   18546:	4661      	mov	r1, ip
   18548:	9204      	str	r2, [sp, #16]
   1854a:	2201      	movs	r2, #1
   1854c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   18550:	9201      	str	r2, [sp, #4]
   18552:	aa06      	add	r2, sp, #24
   18554:	9200      	str	r2, [sp, #0]
   18556:	f000 f821 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1855a:	defe      	udf	#254	; 0xfe

0001855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   1855c:	b08c      	sub	sp, #48	; 0x30
   1855e:	4603      	mov	r3, r0
   18560:	e9cd 1200 	strd	r1, r2, [sp]
   18564:	2002      	movs	r0, #2
   18566:	a908      	add	r1, sp, #32
   18568:	9007      	str	r0, [sp, #28]
   1856a:	9106      	str	r1, [sp, #24]
   1856c:	2100      	movs	r1, #0
   1856e:	9105      	str	r1, [sp, #20]
   18570:	e9cd 0103 	strd	r0, r1, [sp, #12]
   18574:	f248 002c 	movw	r0, #32812	; 0x802c
   18578:	f2c0 0002 	movt	r0, #2
   1857c:	4669      	mov	r1, sp
   1857e:	9002      	str	r0, [sp, #8]
   18580:	f24a 20b1 	movw	r0, #41649	; 0xa2b1
   18584:	f2c0 0001 	movt	r0, #1
   18588:	900b      	str	r0, [sp, #44]	; 0x2c
   1858a:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   1858e:	a801      	add	r0, sp, #4
   18590:	9008      	str	r0, [sp, #32]
   18592:	a802      	add	r0, sp, #8
   18594:	4619      	mov	r1, r3
   18596:	f000 f801 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1859a:	defe      	udf	#254	; 0xfe

0001859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   1859c:	b084      	sub	sp, #16
   1859e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   185a2:	f248 0008 	movw	r0, #32776	; 0x8008
   185a6:	f2c0 0002 	movt	r0, #2
   185aa:	9001      	str	r0, [sp, #4]
   185ac:	f647 6024 	movw	r0, #32292	; 0x7e24
   185b0:	f2c0 0002 	movt	r0, #2
   185b4:	9000      	str	r0, [sp, #0]
   185b6:	4668      	mov	r0, sp
   185b8:	f7f0 f88a 	bl	86d0 <rust_begin_unwind>
   185bc:	defe      	udf	#254	; 0xfe

000185be <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   185be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185c2:	b081      	sub	sp, #4
   185c4:	2a00      	cmp	r2, #0
   185c6:	f000 80fe 	beq.w	187c6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   185ca:	4690      	mov	r8, r2
   185cc:	468a      	mov	sl, r1
   185ce:	4681      	mov	r9, r0
   185d0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   185d4:	7800      	ldrb	r0, [r0, #0]
   185d6:	b948      	cbnz	r0, 185ec <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   185d8:	e014      	b.n	18604 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   185da:	44da      	add	sl, fp
   185dc:	2c00      	cmp	r4, #0
   185de:	46a0      	mov	r8, r4
   185e0:	f000 80f1 	beq.w	187c6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   185e4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   185e8:	7800      	ldrb	r0, [r0, #0]
   185ea:	b158      	cbz	r0, 18604 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   185ec:	e9d9 0100 	ldrd	r0, r1, [r9]
   185f0:	2204      	movs	r2, #4
   185f2:	68cb      	ldr	r3, [r1, #12]
   185f4:	f647 7144 	movw	r1, #32580	; 0x7f44
   185f8:	f2c0 0102 	movt	r1, #2
   185fc:	4798      	blx	r3
   185fe:	2800      	cmp	r0, #0
   18600:	f040 80e5 	bne.w	187ce <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   18604:	f04f 0b00 	mov.w	fp, #0
   18608:	4641      	mov	r1, r8
   1860a:	e008      	b.n	1861e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   1860c:	ebb8 010b 	subs.w	r1, r8, fp
   18610:	f04f 0000 	mov.w	r0, #0
   18614:	bf38      	it	cc
   18616:	4601      	movcc	r1, r0
   18618:	45c3      	cmp	fp, r8
   1861a:	f200 80a5 	bhi.w	18768 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   1861e:	eb0a 0e0b 	add.w	lr, sl, fp
   18622:	2000      	movs	r0, #0
   18624:	f01e 0203 	ands.w	r2, lr, #3
   18628:	bf18      	it	ne
   1862a:	f1d2 0c04 	rsbsne	ip, r2, #4
   1862e:	d120      	bne.n	18672 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   18630:	2908      	cmp	r1, #8
   18632:	d357      	bcc.n	186e4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   18634:	f1a1 0208 	sub.w	r2, r1, #8
   18638:	4290      	cmp	r0, r2
   1863a:	d853      	bhi.n	186e4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   1863c:	f85e 3000 	ldr.w	r3, [lr, r0]
   18640:	eb0e 0700 	add.w	r7, lr, r0
   18644:	687f      	ldr	r7, [r7, #4]
   18646:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   1864a:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   1864e:	ea26 0303 	bic.w	r3, r6, r3
   18652:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   18656:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   1865a:	ea26 0707 	bic.w	r7, r6, r7
   1865e:	433b      	orrs	r3, r7
   18660:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   18664:	d102      	bne.n	1866c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   18666:	3008      	adds	r0, #8
   18668:	4290      	cmp	r0, r2
   1866a:	d9e7      	bls.n	1863c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   1866c:	4288      	cmp	r0, r1
   1866e:	d939      	bls.n	186e4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   18670:	e0b1      	b.n	187d6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   18672:	458c      	cmp	ip, r1
   18674:	bf88      	it	hi
   18676:	468c      	movhi	ip, r1
   18678:	eb0e 060c 	add.w	r6, lr, ip
   1867c:	2000      	movs	r0, #0
   1867e:	4663      	mov	r3, ip
   18680:	4677      	mov	r7, lr
   18682:	b363      	cbz	r3, 186de <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   18684:	463a      	mov	r2, r7
   18686:	f812 4b01 	ldrb.w	r4, [r2], #1
   1868a:	f1b4 050a 	subs.w	r5, r4, #10
   1868e:	bf18      	it	ne
   18690:	2501      	movne	r5, #1
   18692:	4428      	add	r0, r5
   18694:	2c0a      	cmp	r4, #10
   18696:	d059      	beq.n	1874c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   18698:	42b2      	cmp	r2, r6
   1869a:	d020      	beq.n	186de <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   1869c:	787a      	ldrb	r2, [r7, #1]
   1869e:	f1b2 040a 	subs.w	r4, r2, #10
   186a2:	bf18      	it	ne
   186a4:	2401      	movne	r4, #1
   186a6:	4420      	add	r0, r4
   186a8:	2a0a      	cmp	r2, #10
   186aa:	d04f      	beq.n	1874c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   186ac:	1cba      	adds	r2, r7, #2
   186ae:	42b2      	cmp	r2, r6
   186b0:	d015      	beq.n	186de <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   186b2:	78ba      	ldrb	r2, [r7, #2]
   186b4:	f1b2 040a 	subs.w	r4, r2, #10
   186b8:	bf18      	it	ne
   186ba:	2401      	movne	r4, #1
   186bc:	4420      	add	r0, r4
   186be:	2a0a      	cmp	r2, #10
   186c0:	d044      	beq.n	1874c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   186c2:	1cfa      	adds	r2, r7, #3
   186c4:	42b2      	cmp	r2, r6
   186c6:	d00a      	beq.n	186de <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   186c8:	78fa      	ldrb	r2, [r7, #3]
   186ca:	3b04      	subs	r3, #4
   186cc:	3704      	adds	r7, #4
   186ce:	f1b2 040a 	subs.w	r4, r2, #10
   186d2:	bf18      	it	ne
   186d4:	2401      	movne	r4, #1
   186d6:	4420      	add	r0, r4
   186d8:	2a0a      	cmp	r2, #10
   186da:	d1d2      	bne.n	18682 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   186dc:	e036      	b.n	1874c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   186de:	4660      	mov	r0, ip
   186e0:	2908      	cmp	r1, #8
   186e2:	d2a7      	bcs.n	18634 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   186e4:	eb0e 0700 	add.w	r7, lr, r0
   186e8:	eb0e 0201 	add.w	r2, lr, r1
   186ec:	1a0e      	subs	r6, r1, r0
   186ee:	2100      	movs	r1, #0
   186f0:	b3ce      	cbz	r6, 18766 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   186f2:	463b      	mov	r3, r7
   186f4:	f813 5b01 	ldrb.w	r5, [r3], #1
   186f8:	f1b5 040a 	subs.w	r4, r5, #10
   186fc:	bf18      	it	ne
   186fe:	2401      	movne	r4, #1
   18700:	4421      	add	r1, r4
   18702:	2d0a      	cmp	r5, #10
   18704:	d021      	beq.n	1874a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   18706:	4293      	cmp	r3, r2
   18708:	d02d      	beq.n	18766 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   1870a:	787b      	ldrb	r3, [r7, #1]
   1870c:	f1b3 050a 	subs.w	r5, r3, #10
   18710:	bf18      	it	ne
   18712:	2501      	movne	r5, #1
   18714:	4429      	add	r1, r5
   18716:	2b0a      	cmp	r3, #10
   18718:	d017      	beq.n	1874a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   1871a:	1cbb      	adds	r3, r7, #2
   1871c:	4293      	cmp	r3, r2
   1871e:	d022      	beq.n	18766 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   18720:	78bb      	ldrb	r3, [r7, #2]
   18722:	f1b3 050a 	subs.w	r5, r3, #10
   18726:	bf18      	it	ne
   18728:	2501      	movne	r5, #1
   1872a:	4429      	add	r1, r5
   1872c:	2b0a      	cmp	r3, #10
   1872e:	d00c      	beq.n	1874a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   18730:	1cfb      	adds	r3, r7, #3
   18732:	4293      	cmp	r3, r2
   18734:	d017      	beq.n	18766 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   18736:	78fb      	ldrb	r3, [r7, #3]
   18738:	3e04      	subs	r6, #4
   1873a:	3704      	adds	r7, #4
   1873c:	f1b3 050a 	subs.w	r5, r3, #10
   18740:	bf18      	it	ne
   18742:	2501      	movne	r5, #1
   18744:	4429      	add	r1, r5
   18746:	2b0a      	cmp	r3, #10
   18748:	d1d2      	bne.n	186f0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   1874a:	4408      	add	r0, r1
   1874c:	4458      	add	r0, fp
   1874e:	f100 0b01 	add.w	fp, r0, #1
   18752:	4540      	cmp	r0, r8
   18754:	f4bf af5a 	bcs.w	1860c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   18758:	f81a 0000 	ldrb.w	r0, [sl, r0]
   1875c:	280a      	cmp	r0, #10
   1875e:	f47f af55 	bne.w	1860c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   18762:	2001      	movs	r0, #1
   18764:	e001      	b.n	1876a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   18766:	2000      	movs	r0, #0
   18768:	46c3      	mov	fp, r8
   1876a:	f8d9 1008 	ldr.w	r1, [r9, #8]
   1876e:	eba8 040b 	sub.w	r4, r8, fp
   18772:	7008      	strb	r0, [r1, #0]
   18774:	fab4 f084 	clz	r0, r4
   18778:	0942      	lsrs	r2, r0, #5
   1877a:	fabb f08b 	clz	r0, fp
   1877e:	0943      	lsrs	r3, r0, #5
   18780:	e9d9 0100 	ldrd	r0, r1, [r9]
   18784:	ea53 0602 	orrs.w	r6, r3, r2
   18788:	d106      	bne.n	18798 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   1878a:	45d8      	cmp	r8, fp
   1878c:	d926      	bls.n	187dc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   1878e:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   18792:	f112 0f41 	cmn.w	r2, #65	; 0x41
   18796:	dd21      	ble.n	187dc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   18798:	68cb      	ldr	r3, [r1, #12]
   1879a:	4651      	mov	r1, sl
   1879c:	465a      	mov	r2, fp
   1879e:	4798      	blx	r3
   187a0:	b9a8      	cbnz	r0, 187ce <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   187a2:	2e00      	cmp	r6, #0
   187a4:	f47f af19 	bne.w	185da <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   187a8:	45d8      	cmp	r8, fp
   187aa:	d905      	bls.n	187b8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   187ac:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   187b0:	f110 0f41 	cmn.w	r0, #65	; 0x41
   187b4:	f73f af11 	bgt.w	185da <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   187b8:	4650      	mov	r0, sl
   187ba:	4641      	mov	r1, r8
   187bc:	465a      	mov	r2, fp
   187be:	4643      	mov	r3, r8
   187c0:	f000 fe4d 	bl	1945e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   187c4:	defe      	udf	#254	; 0xfe
   187c6:	2000      	movs	r0, #0
   187c8:	b001      	add	sp, #4
   187ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187ce:	2001      	movs	r0, #1
   187d0:	b001      	add	sp, #4
   187d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187d6:	f000 fe20 	bl	1941a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   187da:	defe      	udf	#254	; 0xfe
   187dc:	4650      	mov	r0, sl
   187de:	4641      	mov	r1, r8
   187e0:	2200      	movs	r2, #0
   187e2:	465b      	mov	r3, fp
   187e4:	f000 fe3b 	bl	1945e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   187e8:	defe      	udf	#254	; 0xfe

000187ea <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   187ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   187ec:	b08d      	sub	sp, #52	; 0x34
   187ee:	4604      	mov	r4, r0
   187f0:	7a00      	ldrb	r0, [r0, #8]
   187f2:	b138      	cbz	r0, 18804 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   187f4:	2001      	movs	r0, #1
   187f6:	6861      	ldr	r1, [r4, #4]
   187f8:	7220      	strb	r0, [r4, #8]
   187fa:	1c48      	adds	r0, r1, #1
   187fc:	6060      	str	r0, [r4, #4]
   187fe:	4620      	mov	r0, r4
   18800:	b00d      	add	sp, #52	; 0x34
   18802:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18804:	4616      	mov	r6, r2
   18806:	460d      	mov	r5, r1
   18808:	e9d4 1200 	ldrd	r1, r2, [r4]
   1880c:	7808      	ldrb	r0, [r1, #0]
   1880e:	0740      	lsls	r0, r0, #29
   18810:	d419      	bmi.n	18846 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   18812:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   18816:	f248 0156 	movw	r1, #32854	; 0x8056
   1881a:	f248 0c5a 	movw	ip, #32858	; 0x805a
   1881e:	f2c0 0102 	movt	r1, #2
   18822:	2a00      	cmp	r2, #0
   18824:	f2c0 0c02 	movt	ip, #2
   18828:	bf08      	it	eq
   1882a:	4661      	moveq	r1, ip
   1882c:	68db      	ldr	r3, [r3, #12]
   1882e:	f04f 0202 	mov.w	r2, #2
   18832:	bf08      	it	eq
   18834:	2201      	moveq	r2, #1
   18836:	4798      	blx	r3
   18838:	2800      	cmp	r0, #0
   1883a:	d1db      	bne.n	187f4 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   1883c:	68f2      	ldr	r2, [r6, #12]
   1883e:	4628      	mov	r0, r5
   18840:	6821      	ldr	r1, [r4, #0]
   18842:	4790      	blx	r2
   18844:	e7d7      	b.n	187f6 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   18846:	b95a      	cbnz	r2, 18860 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   18848:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1884c:	2202      	movs	r2, #2
   1884e:	68cb      	ldr	r3, [r1, #12]
   18850:	f248 0158 	movw	r1, #32856	; 0x8058
   18854:	f2c0 0102 	movt	r1, #2
   18858:	4798      	blx	r3
   1885a:	2800      	cmp	r0, #0
   1885c:	d1ca      	bne.n	187f4 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   1885e:	6821      	ldr	r1, [r4, #0]
   18860:	2001      	movs	r0, #1
   18862:	f10d 030f 	add.w	r3, sp, #15
   18866:	f88d 000f 	strb.w	r0, [sp, #15]
   1886a:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   1886e:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   18872:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   18876:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   1887a:	f891 1020 	ldrb.w	r1, [r1, #32]
   1887e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   18882:	a904      	add	r1, sp, #16
   18884:	e9cd 0204 	strd	r0, r2, [sp, #16]
   18888:	f248 003c 	movw	r0, #32828	; 0x803c
   1888c:	f2c0 0002 	movt	r0, #2
   18890:	68f2      	ldr	r2, [r6, #12]
   18892:	900b      	str	r0, [sp, #44]	; 0x2c
   18894:	4668      	mov	r0, sp
   18896:	900a      	str	r0, [sp, #40]	; 0x28
   18898:	4628      	mov	r0, r5
   1889a:	e9cd 3708 	strd	r3, r7, [sp, #32]
   1889e:	e9cd ce06 	strd	ip, lr, [sp, #24]
   188a2:	4790      	blx	r2
   188a4:	2800      	cmp	r0, #0
   188a6:	d1a5      	bne.n	187f4 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   188a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   188ac:	2202      	movs	r2, #2
   188ae:	68cb      	ldr	r3, [r1, #12]
   188b0:	f248 0154 	movw	r1, #32852	; 0x8054
   188b4:	f2c0 0102 	movt	r1, #2
   188b8:	4798      	blx	r3
   188ba:	e79c      	b.n	187f6 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

000188bc <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   188bc:	b5b0      	push	{r4, r5, r7, lr}
   188be:	4604      	mov	r4, r0
   188c0:	7a05      	ldrb	r5, [r0, #8]
   188c2:	6840      	ldr	r0, [r0, #4]
   188c4:	b308      	cbz	r0, 1890a <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   188c6:	b10d      	cbz	r5, 188cc <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   188c8:	2501      	movs	r5, #1
   188ca:	e01d      	b.n	18908 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   188cc:	2801      	cmp	r0, #1
   188ce:	d110      	bne.n	188f2 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   188d0:	7a60      	ldrb	r0, [r4, #9]
   188d2:	b170      	cbz	r0, 188f2 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   188d4:	6821      	ldr	r1, [r4, #0]
   188d6:	7808      	ldrb	r0, [r1, #0]
   188d8:	0740      	lsls	r0, r0, #29
   188da:	d40a      	bmi.n	188f2 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   188dc:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   188e0:	2201      	movs	r2, #1
   188e2:	68cb      	ldr	r3, [r1, #12]
   188e4:	f248 015b 	movw	r1, #32859	; 0x805b
   188e8:	f2c0 0102 	movt	r1, #2
   188ec:	2501      	movs	r5, #1
   188ee:	4798      	blx	r3
   188f0:	b950      	cbnz	r0, 18908 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   188f2:	6821      	ldr	r1, [r4, #0]
   188f4:	2201      	movs	r2, #1
   188f6:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   188fa:	68cb      	ldr	r3, [r1, #12]
   188fc:	f248 015c 	movw	r1, #32860	; 0x805c
   18900:	f2c0 0102 	movt	r1, #2
   18904:	4798      	blx	r3
   18906:	4605      	mov	r5, r0
   18908:	7225      	strb	r5, [r4, #8]
   1890a:	2d00      	cmp	r5, #0
   1890c:	bf18      	it	ne
   1890e:	2501      	movne	r5, #1
   18910:	4628      	mov	r0, r5
   18912:	bdb0      	pop	{r4, r5, r7, pc}

00018914 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   18914:	b580      	push	{r7, lr}
   18916:	b082      	sub	sp, #8
   18918:	468c      	mov	ip, r1
   1891a:	2100      	movs	r1, #0
   1891c:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   18920:	9101      	str	r1, [sp, #4]
   18922:	d207      	bcs.n	18934 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   18924:	f88d c004 	strb.w	ip, [sp, #4]
   18928:	a901      	add	r1, sp, #4
   1892a:	2201      	movs	r2, #1
   1892c:	f7ff fe47 	bl	185be <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   18930:	b002      	add	sp, #8
   18932:	bd80      	pop	{r7, pc}
   18934:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   18938:	d210      	bcs.n	1895c <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   1893a:	ea4f 119c 	mov.w	r1, ip, lsr #6
   1893e:	2306      	movs	r3, #6
   18940:	2202      	movs	r2, #2
   18942:	f363 115f 	bfi	r1, r3, #5, #27
   18946:	f362 1c9f 	bfi	ip, r2, #6, #26
   1894a:	f88d c005 	strb.w	ip, [sp, #5]
   1894e:	f88d 1004 	strb.w	r1, [sp, #4]
   18952:	a901      	add	r1, sp, #4
   18954:	f7ff fe33 	bl	185be <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   18958:	b002      	add	sp, #8
   1895a:	bd80      	pop	{r7, pc}
   1895c:	2202      	movs	r2, #2
   1895e:	4663      	mov	r3, ip
   18960:	a901      	add	r1, sp, #4
   18962:	f362 139f 	bfi	r3, r2, #6, #26
   18966:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   1896a:	d213      	bcs.n	18994 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   1896c:	f88d 3006 	strb.w	r3, [sp, #6]
   18970:	ea4f 139c 	mov.w	r3, ip, lsr #6
   18974:	f362 139f 	bfi	r3, r2, #6, #26
   18978:	f88d 3005 	strb.w	r3, [sp, #5]
   1897c:	ea4f 321c 	mov.w	r2, ip, lsr #12
   18980:	230e      	movs	r3, #14
   18982:	f363 121f 	bfi	r2, r3, #4, #28
   18986:	f88d 2004 	strb.w	r2, [sp, #4]
   1898a:	2203      	movs	r2, #3
   1898c:	f7ff fe17 	bl	185be <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   18990:	b002      	add	sp, #8
   18992:	bd80      	pop	{r7, pc}
   18994:	f88d 3007 	strb.w	r3, [sp, #7]
   18998:	ea4f 139c 	mov.w	r3, ip, lsr #6
   1899c:	f362 139f 	bfi	r3, r2, #6, #26
   189a0:	f88d 3006 	strb.w	r3, [sp, #6]
   189a4:	ea4f 331c 	mov.w	r3, ip, lsr #12
   189a8:	f362 139f 	bfi	r3, r2, #6, #26
   189ac:	22f0      	movs	r2, #240	; 0xf0
   189ae:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   189b2:	f88d 3005 	strb.w	r3, [sp, #5]
   189b6:	f88d 2004 	strb.w	r2, [sp, #4]
   189ba:	2204      	movs	r2, #4
   189bc:	f7ff fdff 	bl	185be <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   189c0:	b002      	add	sp, #8
   189c2:	bd80      	pop	{r7, pc}

000189c4 <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   189c4:	b570      	push	{r4, r5, r6, lr}
   189c6:	b088      	sub	sp, #32
   189c8:	9001      	str	r0, [sp, #4]
   189ca:	aa02      	add	r2, sp, #8
   189cc:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   189d0:	f248 1128 	movw	r1, #33064	; 0x8128
   189d4:	4610      	mov	r0, r2
   189d6:	f2c0 0102 	movt	r1, #2
   189da:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   189de:	a801      	add	r0, sp, #4
   189e0:	f000 f89e 	bl	18b20 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   189e4:	b008      	add	sp, #32
   189e6:	bd70      	pop	{r4, r5, r6, pc}

000189e8 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   189e8:	6800      	ldr	r0, [r0, #0]
   189ea:	f7ff bde8 	b.w	185be <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

000189ee <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   189ee:	6800      	ldr	r0, [r0, #0]
   189f0:	f7ff bf90 	b.w	18914 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

000189f4 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   189f4:	b570      	push	{r4, r5, r6, lr}
   189f6:	b088      	sub	sp, #32
   189f8:	6800      	ldr	r0, [r0, #0]
   189fa:	aa02      	add	r2, sp, #8
   189fc:	9001      	str	r0, [sp, #4]
   189fe:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   18a02:	4610      	mov	r0, r2
   18a04:	f248 1128 	movw	r1, #33064	; 0x8128
   18a08:	f2c0 0102 	movt	r1, #2
   18a0c:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   18a10:	a801      	add	r0, sp, #4
   18a12:	f000 f885 	bl	18b20 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   18a16:	b008      	add	sp, #32
   18a18:	bd70      	pop	{r4, r5, r6, pc}

00018a1a <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   18a1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a1e:	b08d      	sub	sp, #52	; 0x34
   18a20:	468c      	mov	ip, r1
   18a22:	6801      	ldr	r1, [r0, #0]
   18a24:	f248 5e1f 	movw	lr, #34079	; 0x851f
   18a28:	f248 005f 	movw	r0, #32863	; 0x805f
   18a2c:	f242 7810 	movw	r8, #10000	; 0x2710
   18a30:	4541      	cmp	r1, r8
   18a32:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   18a36:	f2c0 0002 	movt	r0, #2
   18a3a:	d337      	bcc.n	18aac <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   18a3c:	f241 7959 	movw	r9, #5977	; 0x1759
   18a40:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   18a44:	f10d 0b0c 	add.w	fp, sp, #12
   18a48:	2300      	movs	r3, #0
   18a4a:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   18a4e:	f04f 0a64 	mov.w	sl, #100	; 0x64
   18a52:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   18a56:	fba1 2409 	umull	r2, r4, r1, r9
   18a5a:	42b9      	cmp	r1, r7
   18a5c:	ea4f 3254 	mov.w	r2, r4, lsr #13
   18a60:	fb02 1418 	mls	r4, r2, r8, r1
   18a64:	4611      	mov	r1, r2
   18a66:	b2a5      	uxth	r5, r4
   18a68:	fba5 560e 	umull	r5, r6, r5, lr
   18a6c:	ea4f 1556 	mov.w	r5, r6, lsr #5
   18a70:	eb0b 0603 	add.w	r6, fp, r3
   18a74:	fb05 441a 	mls	r4, r5, sl, r4
   18a78:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   18a7c:	f1a3 0304 	sub.w	r3, r3, #4
   18a80:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   18a84:	b2a4      	uxth	r4, r4
   18a86:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   18a8a:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   18a8e:	d8e2      	bhi.n	18a56 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   18a90:	f103 0427 	add.w	r4, r3, #39	; 0x27
   18a94:	4611      	mov	r1, r2
   18a96:	2963      	cmp	r1, #99	; 0x63
   18a98:	dc0b      	bgt.n	18ab2 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   18a9a:	460b      	mov	r3, r1
   18a9c:	2b0a      	cmp	r3, #10
   18a9e:	db17      	blt.n	18ad0 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   18aa0:	1ea1      	subs	r1, r4, #2
   18aa2:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   18aa6:	aa03      	add	r2, sp, #12
   18aa8:	5250      	strh	r0, [r2, r1]
   18aaa:	e016      	b.n	18ada <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   18aac:	2427      	movs	r4, #39	; 0x27
   18aae:	2963      	cmp	r1, #99	; 0x63
   18ab0:	ddf3      	ble.n	18a9a <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   18ab2:	b28a      	uxth	r2, r1
   18ab4:	3c02      	subs	r4, #2
   18ab6:	fba2 230e 	umull	r2, r3, r2, lr
   18aba:	2264      	movs	r2, #100	; 0x64
   18abc:	095b      	lsrs	r3, r3, #5
   18abe:	fb03 1112 	mls	r1, r3, r2, r1
   18ac2:	aa03      	add	r2, sp, #12
   18ac4:	b289      	uxth	r1, r1
   18ac6:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   18aca:	5311      	strh	r1, [r2, r4]
   18acc:	2b0a      	cmp	r3, #10
   18ace:	dae7      	bge.n	18aa0 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   18ad0:	1e61      	subs	r1, r4, #1
   18ad2:	aa03      	add	r2, sp, #12
   18ad4:	f103 0030 	add.w	r0, r3, #48	; 0x30
   18ad8:	5450      	strb	r0, [r2, r1]
   18ada:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   18ade:	aa03      	add	r2, sp, #12
   18ae0:	4411      	add	r1, r2
   18ae2:	f647 6224 	movw	r2, #32292	; 0x7e24
   18ae6:	e9cd 1000 	strd	r1, r0, [sp]
   18aea:	f2c0 0202 	movt	r2, #2
   18aee:	4660      	mov	r0, ip
   18af0:	2101      	movs	r1, #1
   18af2:	2300      	movs	r3, #0
   18af4:	f000 f8f4 	bl	18ce0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18af8:	b00d      	add	sp, #52	; 0x34
   18afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018afe <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   18afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b02:	b086      	sub	sp, #24
   18b04:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   18b08:	466a      	mov	r2, sp
   18b0a:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   18b0e:	4613      	mov	r3, r2
   18b10:	4660      	mov	r0, ip
   18b12:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   18b16:	f000 f803 	bl	18b20 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   18b1a:	b006      	add	sp, #24
   18b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018b20 <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   18b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b24:	b08b      	sub	sp, #44	; 0x2c
   18b26:	2303      	movs	r3, #3
   18b28:	6897      	ldr	r7, [r2, #8]
   18b2a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   18b2e:	2320      	movs	r3, #32
   18b30:	9303      	str	r3, [sp, #12]
   18b32:	2300      	movs	r3, #0
   18b34:	2f00      	cmp	r7, #0
   18b36:	9302      	str	r3, [sp, #8]
   18b38:	e9cd 0108 	strd	r0, r1, [sp, #32]
   18b3c:	9306      	str	r3, [sp, #24]
   18b3e:	9304      	str	r3, [sp, #16]
   18b40:	d07c      	beq.n	18c3c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   18b42:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   18b46:	e9d2 9400 	ldrd	r9, r4, [r2]
   18b4a:	45a3      	cmp	fp, r4
   18b4c:	bf88      	it	hi
   18b4e:	46a3      	movhi	fp, r4
   18b50:	f1bb 0f00 	cmp.w	fp, #0
   18b54:	f000 809b 	beq.w	18c8e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   18b58:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   18b5c:	68cd      	ldr	r5, [r1, #12]
   18b5e:	9201      	str	r2, [sp, #4]
   18b60:	e9d9 3200 	ldrd	r3, r2, [r9]
   18b64:	4619      	mov	r1, r3
   18b66:	47a8      	blx	r5
   18b68:	2800      	cmp	r0, #0
   18b6a:	f040 809e 	bne.w	18caa <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18b6e:	464d      	mov	r5, r9
   18b70:	f04f 0a01 	mov.w	sl, #1
   18b74:	f04f 0800 	mov.w	r8, #0
   18b78:	f04f 0910 	mov.w	r9, #16
   18b7c:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   18b80:	6841      	ldr	r1, [r0, #4]
   18b82:	9103      	str	r1, [sp, #12]
   18b84:	7f01      	ldrb	r1, [r0, #28]
   18b86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   18b8a:	6881      	ldr	r1, [r0, #8]
   18b8c:	9102      	str	r1, [sp, #8]
   18b8e:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   18b92:	b18a      	cbz	r2, 18bb8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   18b94:	2a02      	cmp	r2, #2
   18b96:	d011      	beq.n	18bbc <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   18b98:	9a01      	ldr	r2, [sp, #4]
   18b9a:	4291      	cmp	r1, r2
   18b9c:	f080 8098 	bcs.w	18cd0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   18ba0:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   18ba4:	f648 231b 	movw	r3, #35355	; 0x8a1b
   18ba8:	f2c0 0301 	movt	r3, #1
   18bac:	6852      	ldr	r2, [r2, #4]
   18bae:	429a      	cmp	r2, r3
   18bb0:	d104      	bne.n	18bbc <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   18bb2:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   18bb6:	6809      	ldr	r1, [r1, #0]
   18bb8:	2201      	movs	r2, #1
   18bba:	e000      	b.n	18bbe <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   18bbc:	2200      	movs	r2, #0
   18bbe:	e9cd 2104 	strd	r2, r1, [sp, #16]
   18bc2:	f857 1009 	ldr.w	r1, [r7, r9]
   18bc6:	68c0      	ldr	r0, [r0, #12]
   18bc8:	b180      	cbz	r0, 18bec <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   18bca:	2802      	cmp	r0, #2
   18bcc:	d010      	beq.n	18bf0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   18bce:	9801      	ldr	r0, [sp, #4]
   18bd0:	4281      	cmp	r1, r0
   18bd2:	d27d      	bcs.n	18cd0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   18bd4:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   18bd8:	f648 221b 	movw	r2, #35355	; 0x8a1b
   18bdc:	f2c0 0201 	movt	r2, #1
   18be0:	6840      	ldr	r0, [r0, #4]
   18be2:	4290      	cmp	r0, r2
   18be4:	d104      	bne.n	18bf0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   18be6:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   18bea:	6801      	ldr	r1, [r0, #0]
   18bec:	2001      	movs	r0, #1
   18bee:	e000      	b.n	18bf2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   18bf0:	2000      	movs	r0, #0
   18bf2:	eb07 0209 	add.w	r2, r7, r9
   18bf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   18bfa:	9801      	ldr	r0, [sp, #4]
   18bfc:	f852 1c10 	ldr.w	r1, [r2, #-16]
   18c00:	4281      	cmp	r1, r0
   18c02:	d25d      	bcs.n	18cc0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   18c04:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   18c08:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   18c0c:	684a      	ldr	r2, [r1, #4]
   18c0e:	a902      	add	r1, sp, #8
   18c10:	4790      	blx	r2
   18c12:	2800      	cmp	r0, #0
   18c14:	d149      	bne.n	18caa <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18c16:	45da      	cmp	sl, fp
   18c18:	d24b      	bcs.n	18cb2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   18c1a:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   18c1e:	eb05 0208 	add.w	r2, r5, r8
   18c22:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   18c26:	68db      	ldr	r3, [r3, #12]
   18c28:	4798      	blx	r3
   18c2a:	f109 0920 	add.w	r9, r9, #32
   18c2e:	f108 0808 	add.w	r8, r8, #8
   18c32:	f10a 0a01 	add.w	sl, sl, #1
   18c36:	2800      	cmp	r0, #0
   18c38:	d0a0      	beq.n	18b7c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   18c3a:	e036      	b.n	18caa <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18c3c:	6956      	ldr	r6, [r2, #20]
   18c3e:	e9d2 9400 	ldrd	r9, r4, [r2]
   18c42:	42a6      	cmp	r6, r4
   18c44:	bf88      	it	hi
   18c46:	4626      	movhi	r6, r4
   18c48:	b30e      	cbz	r6, 18c8e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   18c4a:	6917      	ldr	r7, [r2, #16]
   18c4c:	e9d9 3200 	ldrd	r3, r2, [r9]
   18c50:	68cd      	ldr	r5, [r1, #12]
   18c52:	4619      	mov	r1, r3
   18c54:	47a8      	blx	r5
   18c56:	bb40      	cbnz	r0, 18caa <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18c58:	f10d 0808 	add.w	r8, sp, #8
   18c5c:	2500      	movs	r5, #0
   18c5e:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   18c62:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   18c66:	684a      	ldr	r2, [r1, #4]
   18c68:	4641      	mov	r1, r8
   18c6a:	4790      	blx	r2
   18c6c:	b9e8      	cbnz	r0, 18caa <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18c6e:	f105 0a01 	add.w	sl, r5, #1
   18c72:	45b2      	cmp	sl, r6
   18c74:	d20d      	bcs.n	18c92 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   18c76:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   18c7a:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   18c7e:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   18c82:	68db      	ldr	r3, [r3, #12]
   18c84:	4798      	blx	r3
   18c86:	2800      	cmp	r0, #0
   18c88:	4655      	mov	r5, sl
   18c8a:	d0e8      	beq.n	18c5e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   18c8c:	e00d      	b.n	18caa <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18c8e:	f04f 0a00 	mov.w	sl, #0
   18c92:	4554      	cmp	r4, sl
   18c94:	d910      	bls.n	18cb8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   18c96:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   18c9a:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   18c9e:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   18ca2:	6852      	ldr	r2, [r2, #4]
   18ca4:	68db      	ldr	r3, [r3, #12]
   18ca6:	4798      	blx	r3
   18ca8:	b130      	cbz	r0, 18cb8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   18caa:	2001      	movs	r0, #1
   18cac:	b00b      	add	sp, #44	; 0x2c
   18cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cb2:	46a9      	mov	r9, r5
   18cb4:	4554      	cmp	r4, sl
   18cb6:	d8ee      	bhi.n	18c96 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   18cb8:	2000      	movs	r0, #0
   18cba:	b00b      	add	sp, #44	; 0x2c
   18cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cc0:	f248 1058 	movw	r0, #33112	; 0x8158
   18cc4:	f2c0 0002 	movt	r0, #2
   18cc8:	9a01      	ldr	r2, [sp, #4]
   18cca:	f7ff fc47 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   18cce:	defe      	udf	#254	; 0xfe
   18cd0:	f248 1068 	movw	r0, #33128	; 0x8168
   18cd4:	f2c0 0002 	movt	r0, #2
   18cd8:	9a01      	ldr	r2, [sp, #4]
   18cda:	f7ff fc3f 	bl	1855c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   18cde:	defe      	udf	#254	; 0xfe

00018ce0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   18ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ce4:	b083      	sub	sp, #12
   18ce6:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   18cea:	469a      	mov	sl, r3
   18cec:	4604      	mov	r4, r0
   18cee:	b1e1      	cbz	r1, 18d2a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   18cf0:	f8d4 e000 	ldr.w	lr, [r4]
   18cf4:	f04f 082b 	mov.w	r8, #43	; 0x2b
   18cf8:	f01e 0101 	ands.w	r1, lr, #1
   18cfc:	bf08      	it	eq
   18cfe:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   18d02:	eb01 0907 	add.w	r9, r1, r7
   18d06:	ea5f 714e 	movs.w	r1, lr, lsl #29
   18d0a:	d517      	bpl.n	18d3c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   18d0c:	f1ba 0f00 	cmp.w	sl, #0
   18d10:	d033      	beq.n	18d7a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   18d12:	f1aa 0101 	sub.w	r1, sl, #1
   18d16:	f00a 0c03 	and.w	ip, sl, #3
   18d1a:	2903      	cmp	r1, #3
   18d1c:	d22f      	bcs.n	18d7e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   18d1e:	2100      	movs	r1, #0
   18d20:	4613      	mov	r3, r2
   18d22:	f1bc 0f00 	cmp.w	ip, #0
   18d26:	d152      	bne.n	18dce <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   18d28:	e069      	b.n	18dfe <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18d2a:	f8d4 e000 	ldr.w	lr, [r4]
   18d2e:	f107 0901 	add.w	r9, r7, #1
   18d32:	f04f 082d 	mov.w	r8, #45	; 0x2d
   18d36:	ea5f 714e 	movs.w	r1, lr, lsl #29
   18d3a:	d4e7      	bmi.n	18d0c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   18d3c:	f04f 0a00 	mov.w	sl, #0
   18d40:	2200      	movs	r2, #0
   18d42:	68a0      	ldr	r0, [r4, #8]
   18d44:	2801      	cmp	r0, #1
   18d46:	d161      	bne.n	18e0c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   18d48:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   18d4c:	45cb      	cmp	fp, r9
   18d4e:	d95d      	bls.n	18e0c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   18d50:	ea5f 700e 	movs.w	r0, lr, lsl #28
   18d54:	d46e      	bmi.n	18e34 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   18d56:	9202      	str	r2, [sp, #8]
   18d58:	ebab 0109 	sub.w	r1, fp, r9
   18d5c:	f894 2020 	ldrb.w	r2, [r4, #32]
   18d60:	2000      	movs	r0, #0
   18d62:	46a9      	mov	r9, r5
   18d64:	460e      	mov	r6, r1
   18d66:	2a03      	cmp	r2, #3
   18d68:	bf08      	it	eq
   18d6a:	2201      	moveq	r2, #1
   18d6c:	e8df f002 	tbb	[pc, r2]
   18d70:	02840287 	.word	0x02840287
   18d74:	2600      	movs	r6, #0
   18d76:	4608      	mov	r0, r1
   18d78:	e081      	b.n	18e7e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   18d7a:	2100      	movs	r1, #0
   18d7c:	e03f      	b.n	18dfe <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18d7e:	ebac 060a 	sub.w	r6, ip, sl
   18d82:	2100      	movs	r1, #0
   18d84:	4693      	mov	fp, r2
   18d86:	4613      	mov	r3, r2
   18d88:	e9cd 7501 	strd	r7, r5, [sp, #4]
   18d8c:	781a      	ldrb	r2, [r3, #0]
   18d8e:	785d      	ldrb	r5, [r3, #1]
   18d90:	7898      	ldrb	r0, [r3, #2]
   18d92:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   18d96:	78df      	ldrb	r7, [r3, #3]
   18d98:	2a80      	cmp	r2, #128	; 0x80
   18d9a:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   18d9e:	bf08      	it	eq
   18da0:	3101      	addeq	r1, #1
   18da2:	2a80      	cmp	r2, #128	; 0x80
   18da4:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   18da8:	bf08      	it	eq
   18daa:	3101      	addeq	r1, #1
   18dac:	2880      	cmp	r0, #128	; 0x80
   18dae:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   18db2:	bf08      	it	eq
   18db4:	3101      	addeq	r1, #1
   18db6:	2880      	cmp	r0, #128	; 0x80
   18db8:	bf08      	it	eq
   18dba:	3101      	addeq	r1, #1
   18dbc:	3304      	adds	r3, #4
   18dbe:	3604      	adds	r6, #4
   18dc0:	d1e4      	bne.n	18d8c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   18dc2:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   18dc6:	465a      	mov	r2, fp
   18dc8:	f1bc 0f00 	cmp.w	ip, #0
   18dcc:	d017      	beq.n	18dfe <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18dce:	7818      	ldrb	r0, [r3, #0]
   18dd0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   18dd4:	2880      	cmp	r0, #128	; 0x80
   18dd6:	bf08      	it	eq
   18dd8:	3101      	addeq	r1, #1
   18dda:	f1bc 0f01 	cmp.w	ip, #1
   18dde:	d00e      	beq.n	18dfe <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18de0:	7858      	ldrb	r0, [r3, #1]
   18de2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   18de6:	2880      	cmp	r0, #128	; 0x80
   18de8:	bf08      	it	eq
   18dea:	3101      	addeq	r1, #1
   18dec:	f1bc 0f02 	cmp.w	ip, #2
   18df0:	d005      	beq.n	18dfe <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18df2:	7898      	ldrb	r0, [r3, #2]
   18df4:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   18df8:	2880      	cmp	r0, #128	; 0x80
   18dfa:	bf08      	it	eq
   18dfc:	3101      	addeq	r1, #1
   18dfe:	eb09 000a 	add.w	r0, r9, sl
   18e02:	eba0 0901 	sub.w	r9, r0, r1
   18e06:	68a0      	ldr	r0, [r4, #8]
   18e08:	2801      	cmp	r0, #1
   18e0a:	d09d      	beq.n	18d48 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   18e0c:	4620      	mov	r0, r4
   18e0e:	4641      	mov	r1, r8
   18e10:	4653      	mov	r3, sl
   18e12:	f000 f893 	bl	18f3c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   18e16:	b120      	cbz	r0, 18e22 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   18e18:	2601      	movs	r6, #1
   18e1a:	4630      	mov	r0, r6
   18e1c:	b003      	add	sp, #12
   18e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e22:	69e1      	ldr	r1, [r4, #28]
   18e24:	463a      	mov	r2, r7
   18e26:	69a0      	ldr	r0, [r4, #24]
   18e28:	68cb      	ldr	r3, [r1, #12]
   18e2a:	4629      	mov	r1, r5
   18e2c:	b003      	add	sp, #12
   18e2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e32:	4718      	bx	r3
   18e34:	6860      	ldr	r0, [r4, #4]
   18e36:	2601      	movs	r6, #1
   18e38:	9002      	str	r0, [sp, #8]
   18e3a:	2030      	movs	r0, #48	; 0x30
   18e3c:	f894 1020 	ldrb.w	r1, [r4, #32]
   18e40:	4653      	mov	r3, sl
   18e42:	6060      	str	r0, [r4, #4]
   18e44:	4620      	mov	r0, r4
   18e46:	9101      	str	r1, [sp, #4]
   18e48:	4641      	mov	r1, r8
   18e4a:	f884 6020 	strb.w	r6, [r4, #32]
   18e4e:	f000 f875 	bl	18f3c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   18e52:	2800      	cmp	r0, #0
   18e54:	d1e1      	bne.n	18e1a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   18e56:	f894 2020 	ldrb.w	r2, [r4, #32]
   18e5a:	ebab 0109 	sub.w	r1, fp, r9
   18e5e:	2000      	movs	r0, #0
   18e60:	46a9      	mov	r9, r5
   18e62:	2a03      	cmp	r2, #3
   18e64:	bf08      	it	eq
   18e66:	2201      	moveq	r2, #1
   18e68:	460e      	mov	r6, r1
   18e6a:	e8df f002 	tbb	[pc, r2]
   18e6e:	0235      	.short	0x0235
   18e70:	0232      	.short	0x0232
   18e72:	2600      	movs	r6, #0
   18e74:	4608      	mov	r0, r1
   18e76:	e02f      	b.n	18ed8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   18e78:	0848      	lsrs	r0, r1, #1
   18e7a:	3101      	adds	r1, #1
   18e7c:	084e      	lsrs	r6, r1, #1
   18e7e:	1c45      	adds	r5, r0, #1
   18e80:	3d01      	subs	r5, #1
   18e82:	d007      	beq.n	18e94 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   18e84:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   18e88:	6861      	ldr	r1, [r4, #4]
   18e8a:	6912      	ldr	r2, [r2, #16]
   18e8c:	4790      	blx	r2
   18e8e:	2800      	cmp	r0, #0
   18e90:	d0f6      	beq.n	18e80 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   18e92:	e7c1      	b.n	18e18 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   18e94:	9a02      	ldr	r2, [sp, #8]
   18e96:	4620      	mov	r0, r4
   18e98:	4641      	mov	r1, r8
   18e9a:	4653      	mov	r3, sl
   18e9c:	f8d4 b004 	ldr.w	fp, [r4, #4]
   18ea0:	f000 f84c 	bl	18f3c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   18ea4:	2800      	cmp	r0, #0
   18ea6:	d1b7      	bne.n	18e18 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   18ea8:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   18eac:	463a      	mov	r2, r7
   18eae:	68cb      	ldr	r3, [r1, #12]
   18eb0:	4649      	mov	r1, r9
   18eb2:	4798      	blx	r3
   18eb4:	2800      	cmp	r0, #0
   18eb6:	d1af      	bne.n	18e18 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   18eb8:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   18ebc:	1c77      	adds	r7, r6, #1
   18ebe:	2601      	movs	r6, #1
   18ec0:	3f01      	subs	r7, #1
   18ec2:	d02c      	beq.n	18f1e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   18ec4:	6922      	ldr	r2, [r4, #16]
   18ec6:	4628      	mov	r0, r5
   18ec8:	4659      	mov	r1, fp
   18eca:	4790      	blx	r2
   18ecc:	2800      	cmp	r0, #0
   18ece:	d0f7      	beq.n	18ec0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   18ed0:	e7a3      	b.n	18e1a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   18ed2:	0848      	lsrs	r0, r1, #1
   18ed4:	3101      	adds	r1, #1
   18ed6:	084e      	lsrs	r6, r1, #1
   18ed8:	1c45      	adds	r5, r0, #1
   18eda:	3d01      	subs	r5, #1
   18edc:	d007      	beq.n	18eee <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   18ede:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   18ee2:	6861      	ldr	r1, [r4, #4]
   18ee4:	6912      	ldr	r2, [r2, #16]
   18ee6:	4790      	blx	r2
   18ee8:	2800      	cmp	r0, #0
   18eea:	d0f6      	beq.n	18eda <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   18eec:	e794      	b.n	18e18 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   18eee:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   18ef2:	463a      	mov	r2, r7
   18ef4:	68cb      	ldr	r3, [r1, #12]
   18ef6:	4649      	mov	r1, r9
   18ef8:	f8d4 8004 	ldr.w	r8, [r4, #4]
   18efc:	4798      	blx	r3
   18efe:	2800      	cmp	r0, #0
   18f00:	f47f af8a 	bne.w	18e18 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   18f04:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   18f08:	1c77      	adds	r7, r6, #1
   18f0a:	2601      	movs	r6, #1
   18f0c:	3f01      	subs	r7, #1
   18f0e:	d00b      	beq.n	18f28 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   18f10:	692a      	ldr	r2, [r5, #16]
   18f12:	4648      	mov	r0, r9
   18f14:	4641      	mov	r1, r8
   18f16:	4790      	blx	r2
   18f18:	2800      	cmp	r0, #0
   18f1a:	d0f7      	beq.n	18f0c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   18f1c:	e77d      	b.n	18e1a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   18f1e:	2600      	movs	r6, #0
   18f20:	4630      	mov	r0, r6
   18f22:	b003      	add	sp, #12
   18f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f28:	9801      	ldr	r0, [sp, #4]
   18f2a:	2600      	movs	r6, #0
   18f2c:	f884 0020 	strb.w	r0, [r4, #32]
   18f30:	9802      	ldr	r0, [sp, #8]
   18f32:	6060      	str	r0, [r4, #4]
   18f34:	4630      	mov	r0, r6
   18f36:	b003      	add	sp, #12
   18f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018f3c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   18f3c:	b570      	push	{r4, r5, r6, lr}
   18f3e:	461c      	mov	r4, r3
   18f40:	4615      	mov	r5, r2
   18f42:	4606      	mov	r6, r0
   18f44:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   18f48:	d006      	beq.n	18f58 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   18f4a:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   18f4e:	6912      	ldr	r2, [r2, #16]
   18f50:	4790      	blx	r2
   18f52:	b108      	cbz	r0, 18f58 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   18f54:	2001      	movs	r0, #1
   18f56:	bd70      	pop	{r4, r5, r6, pc}
   18f58:	b13d      	cbz	r5, 18f6a <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   18f5a:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   18f5e:	4622      	mov	r2, r4
   18f60:	68cb      	ldr	r3, [r1, #12]
   18f62:	4629      	mov	r1, r5
   18f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18f68:	4718      	bx	r3
   18f6a:	2000      	movs	r0, #0
   18f6c:	bd70      	pop	{r4, r5, r6, pc}
	...

00018f70 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   18f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f74:	b081      	sub	sp, #4
   18f76:	f8d0 e008 	ldr.w	lr, [r0, #8]
   18f7a:	4682      	mov	sl, r0
   18f7c:	6900      	ldr	r0, [r0, #16]
   18f7e:	4691      	mov	r9, r2
   18f80:	4688      	mov	r8, r1
   18f82:	f1be 0f01 	cmp.w	lr, #1
   18f86:	d111      	bne.n	18fac <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   18f88:	2801      	cmp	r0, #1
   18f8a:	d012      	beq.n	18fb2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   18f8c:	f1b9 0f00 	cmp.w	r9, #0
   18f90:	f000 80c5 	beq.w	1911e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   18f94:	f1a9 0101 	sub.w	r1, r9, #1
   18f98:	f009 0003 	and.w	r0, r9, #3
   18f9c:	2903      	cmp	r1, #3
   18f9e:	d267      	bcs.n	19070 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   18fa0:	2100      	movs	r1, #0
   18fa2:	4642      	mov	r2, r8
   18fa4:	2800      	cmp	r0, #0
   18fa6:	f040 8083 	bne.w	190b0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   18faa:	e097      	b.n	190dc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   18fac:	2801      	cmp	r0, #1
   18fae:	f040 80bd 	bne.w	1912c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   18fb2:	f1b9 0f00 	cmp.w	r9, #0
   18fb6:	d054      	beq.n	19062 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   18fb8:	f8da 0014 	ldr.w	r0, [sl, #20]
   18fbc:	eb08 0109 	add.w	r1, r8, r9
   18fc0:	2200      	movs	r2, #0
   18fc2:	4647      	mov	r7, r8
   18fc4:	1c43      	adds	r3, r0, #1
   18fc6:	4646      	mov	r6, r8
   18fc8:	463c      	mov	r4, r7
   18fca:	f914 5b01 	ldrsb.w	r5, [r4], #1
   18fce:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   18fd2:	b2e8      	uxtb	r0, r5
   18fd4:	dc2e      	bgt.n	19034 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   18fd6:	428c      	cmp	r4, r1
   18fd8:	d01a      	beq.n	19010 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   18fda:	787d      	ldrb	r5, [r7, #1]
   18fdc:	1cbc      	adds	r4, r7, #2
   18fde:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   18fe2:	4627      	mov	r7, r4
   18fe4:	f000 0b1f 	and.w	fp, r0, #31
   18fe8:	28df      	cmp	r0, #223	; 0xdf
   18fea:	d917      	bls.n	1901c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   18fec:	428f      	cmp	r7, r1
   18fee:	d018      	beq.n	19022 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   18ff0:	f817 4b01 	ldrb.w	r4, [r7], #1
   18ff4:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   18ff8:	463c      	mov	r4, r7
   18ffa:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   18ffe:	28f0      	cmp	r0, #240	; 0xf0
   19000:	d316      	bcc.n	19030 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   19002:	428f      	cmp	r7, r1
   19004:	d020      	beq.n	19048 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   19006:	f817 0b01 	ldrb.w	r0, [r7], #1
   1900a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1900e:	e01d      	b.n	1904c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   19010:	2500      	movs	r5, #0
   19012:	460f      	mov	r7, r1
   19014:	f000 0b1f 	and.w	fp, r0, #31
   19018:	28df      	cmp	r0, #223	; 0xdf
   1901a:	d8e7      	bhi.n	18fec <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   1901c:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   19020:	e008      	b.n	19034 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   19022:	f04f 0c00 	mov.w	ip, #0
   19026:	460f      	mov	r7, r1
   19028:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   1902c:	28f0      	cmp	r0, #240	; 0xf0
   1902e:	d2e8      	bcs.n	19002 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   19030:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   19034:	4627      	mov	r7, r4
   19036:	3b01      	subs	r3, #1
   19038:	d065      	beq.n	19106 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   1903a:	1b90      	subs	r0, r2, r6
   1903c:	42b9      	cmp	r1, r7
   1903e:	eb00 0207 	add.w	r2, r0, r7
   19042:	463e      	mov	r6, r7
   19044:	d1c0      	bne.n	18fc8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   19046:	e061      	b.n	1910c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   19048:	2000      	movs	r0, #0
   1904a:	4627      	mov	r7, r4
   1904c:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   19050:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   19054:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   19058:	4428      	add	r0, r5
   1905a:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   1905e:	d1ea      	bne.n	19036 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   19060:	e054      	b.n	1910c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   19062:	2200      	movs	r2, #0
   19064:	f1be 0f01 	cmp.w	lr, #1
   19068:	d054      	beq.n	19114 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   1906a:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   1906e:	e062      	b.n	19136 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   19070:	eba0 0309 	sub.w	r3, r0, r9
   19074:	2100      	movs	r1, #0
   19076:	4642      	mov	r2, r8
   19078:	7817      	ldrb	r7, [r2, #0]
   1907a:	7856      	ldrb	r6, [r2, #1]
   1907c:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   19080:	7895      	ldrb	r5, [r2, #2]
   19082:	78d4      	ldrb	r4, [r2, #3]
   19084:	2f80      	cmp	r7, #128	; 0x80
   19086:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   1908a:	bf08      	it	eq
   1908c:	3101      	addeq	r1, #1
   1908e:	2f80      	cmp	r7, #128	; 0x80
   19090:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   19094:	bf08      	it	eq
   19096:	3101      	addeq	r1, #1
   19098:	2f80      	cmp	r7, #128	; 0x80
   1909a:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   1909e:	bf08      	it	eq
   190a0:	3101      	addeq	r1, #1
   190a2:	2f80      	cmp	r7, #128	; 0x80
   190a4:	bf08      	it	eq
   190a6:	3101      	addeq	r1, #1
   190a8:	3204      	adds	r2, #4
   190aa:	3304      	adds	r3, #4
   190ac:	d1e4      	bne.n	19078 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   190ae:	b1a8      	cbz	r0, 190dc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   190b0:	7813      	ldrb	r3, [r2, #0]
   190b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   190b6:	2b80      	cmp	r3, #128	; 0x80
   190b8:	bf08      	it	eq
   190ba:	3101      	addeq	r1, #1
   190bc:	2801      	cmp	r0, #1
   190be:	d00d      	beq.n	190dc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   190c0:	7853      	ldrb	r3, [r2, #1]
   190c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   190c6:	2b80      	cmp	r3, #128	; 0x80
   190c8:	bf08      	it	eq
   190ca:	3101      	addeq	r1, #1
   190cc:	2802      	cmp	r0, #2
   190ce:	d005      	beq.n	190dc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   190d0:	7890      	ldrb	r0, [r2, #2]
   190d2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   190d6:	2880      	cmp	r0, #128	; 0x80
   190d8:	bf08      	it	eq
   190da:	3101      	addeq	r1, #1
   190dc:	f8da 000c 	ldr.w	r0, [sl, #12]
   190e0:	eba9 0101 	sub.w	r1, r9, r1
   190e4:	4281      	cmp	r1, r0
   190e6:	d221      	bcs.n	1912c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   190e8:	f1b9 0f00 	cmp.w	r9, #0
   190ec:	d029      	beq.n	19142 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   190ee:	f1a9 0101 	sub.w	r1, r9, #1
   190f2:	f009 0c03 	and.w	ip, r9, #3
   190f6:	2903      	cmp	r1, #3
   190f8:	d225      	bcs.n	19146 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   190fa:	2100      	movs	r1, #0
   190fc:	4643      	mov	r3, r8
   190fe:	f1bc 0f00 	cmp.w	ip, #0
   19102:	d142      	bne.n	1918a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   19104:	e059      	b.n	191ba <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   19106:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   1910a:	d167      	bne.n	191dc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   1910c:	464a      	mov	r2, r9
   1910e:	f1be 0f01 	cmp.w	lr, #1
   19112:	d1aa      	bne.n	1906a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   19114:	4691      	mov	r9, r2
   19116:	f1b9 0f00 	cmp.w	r9, #0
   1911a:	f47f af3b 	bne.w	18f94 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   1911e:	2100      	movs	r1, #0
   19120:	f8da 000c 	ldr.w	r0, [sl, #12]
   19124:	eba9 0101 	sub.w	r1, r9, r1
   19128:	4281      	cmp	r1, r0
   1912a:	d3dd      	bcc.n	190e8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   1912c:	f8da 101c 	ldr.w	r1, [sl, #28]
   19130:	464a      	mov	r2, r9
   19132:	f8da 0018 	ldr.w	r0, [sl, #24]
   19136:	68cb      	ldr	r3, [r1, #12]
   19138:	4641      	mov	r1, r8
   1913a:	b001      	add	sp, #4
   1913c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19140:	4718      	bx	r3
   19142:	2100      	movs	r1, #0
   19144:	e039      	b.n	191ba <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   19146:	ebac 0709 	sub.w	r7, ip, r9
   1914a:	2100      	movs	r1, #0
   1914c:	4643      	mov	r3, r8
   1914e:	781e      	ldrb	r6, [r3, #0]
   19150:	785d      	ldrb	r5, [r3, #1]
   19152:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   19156:	789c      	ldrb	r4, [r3, #2]
   19158:	78da      	ldrb	r2, [r3, #3]
   1915a:	2e80      	cmp	r6, #128	; 0x80
   1915c:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   19160:	bf08      	it	eq
   19162:	3101      	addeq	r1, #1
   19164:	2e80      	cmp	r6, #128	; 0x80
   19166:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   1916a:	bf08      	it	eq
   1916c:	3101      	addeq	r1, #1
   1916e:	2e80      	cmp	r6, #128	; 0x80
   19170:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   19174:	bf08      	it	eq
   19176:	3101      	addeq	r1, #1
   19178:	2a80      	cmp	r2, #128	; 0x80
   1917a:	bf08      	it	eq
   1917c:	3101      	addeq	r1, #1
   1917e:	3304      	adds	r3, #4
   19180:	3704      	adds	r7, #4
   19182:	d1e4      	bne.n	1914e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   19184:	f1bc 0f00 	cmp.w	ip, #0
   19188:	d017      	beq.n	191ba <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1918a:	781a      	ldrb	r2, [r3, #0]
   1918c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   19190:	2a80      	cmp	r2, #128	; 0x80
   19192:	bf08      	it	eq
   19194:	3101      	addeq	r1, #1
   19196:	f1bc 0f01 	cmp.w	ip, #1
   1919a:	d00e      	beq.n	191ba <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1919c:	785a      	ldrb	r2, [r3, #1]
   1919e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   191a2:	2a80      	cmp	r2, #128	; 0x80
   191a4:	bf08      	it	eq
   191a6:	3101      	addeq	r1, #1
   191a8:	f1bc 0f02 	cmp.w	ip, #2
   191ac:	d005      	beq.n	191ba <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   191ae:	789a      	ldrb	r2, [r3, #2]
   191b0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   191b4:	2a80      	cmp	r2, #128	; 0x80
   191b6:	bf08      	it	eq
   191b8:	3101      	addeq	r1, #1
   191ba:	f89a 3020 	ldrb.w	r3, [sl, #32]
   191be:	eba1 0109 	sub.w	r1, r1, r9
   191c2:	4401      	add	r1, r0
   191c4:	2000      	movs	r0, #0
   191c6:	1eda      	subs	r2, r3, #3
   191c8:	bf18      	it	ne
   191ca:	461a      	movne	r2, r3
   191cc:	460e      	mov	r6, r1
   191ce:	e8df f002 	tbb	[pc, r2]
   191d2:	0216      	.short	0x0216
   191d4:	0213      	.short	0x0213
   191d6:	2600      	movs	r6, #0
   191d8:	4608      	mov	r0, r1
   191da:	e010      	b.n	191fe <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   191dc:	2a00      	cmp	r2, #0
   191de:	bf18      	it	ne
   191e0:	454a      	cmpne	r2, r9
   191e2:	d134      	bne.n	1924e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   191e4:	4640      	mov	r0, r8
   191e6:	2800      	cmp	r0, #0
   191e8:	bf0c      	ite	eq
   191ea:	464a      	moveq	r2, r9
   191ec:	4680      	movne	r8, r0
   191ee:	f1be 0f01 	cmp.w	lr, #1
   191f2:	f43f af8f 	beq.w	19114 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   191f6:	e738      	b.n	1906a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   191f8:	0848      	lsrs	r0, r1, #1
   191fa:	3101      	adds	r1, #1
   191fc:	084e      	lsrs	r6, r1, #1
   191fe:	1c44      	adds	r4, r0, #1
   19200:	3c01      	subs	r4, #1
   19202:	d008      	beq.n	19216 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   19204:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   19208:	f8da 1004 	ldr.w	r1, [sl, #4]
   1920c:	6912      	ldr	r2, [r2, #16]
   1920e:	4790      	blx	r2
   19210:	2800      	cmp	r0, #0
   19212:	d0f5      	beq.n	19200 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   19214:	e013      	b.n	1923e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   19216:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   1921a:	464a      	mov	r2, r9
   1921c:	68cb      	ldr	r3, [r1, #12]
   1921e:	4641      	mov	r1, r8
   19220:	f8da 7004 	ldr.w	r7, [sl, #4]
   19224:	4798      	blx	r3
   19226:	b950      	cbnz	r0, 1923e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   19228:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   1922c:	3601      	adds	r6, #1
   1922e:	3e01      	subs	r6, #1
   19230:	d009      	beq.n	19246 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   19232:	692a      	ldr	r2, [r5, #16]
   19234:	4620      	mov	r0, r4
   19236:	4639      	mov	r1, r7
   19238:	4790      	blx	r2
   1923a:	2800      	cmp	r0, #0
   1923c:	d0f7      	beq.n	1922e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   1923e:	2001      	movs	r0, #1
   19240:	b001      	add	sp, #4
   19242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19246:	2000      	movs	r0, #0
   19248:	b001      	add	sp, #4
   1924a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1924e:	454a      	cmp	r2, r9
   19250:	d204      	bcs.n	1925c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   19252:	f918 0002 	ldrsb.w	r0, [r8, r2]
   19256:	f110 0f40 	cmn.w	r0, #64	; 0x40
   1925a:	dac3      	bge.n	191e4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   1925c:	2000      	movs	r0, #0
   1925e:	2200      	movs	r2, #0
   19260:	2800      	cmp	r0, #0
   19262:	bf0c      	ite	eq
   19264:	464a      	moveq	r2, r9
   19266:	4680      	movne	r8, r0
   19268:	f1be 0f01 	cmp.w	lr, #1
   1926c:	f43f af52 	beq.w	19114 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   19270:	e6fb      	b.n	1906a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

00019272 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   19272:	7800      	ldrb	r0, [r0, #0]
   19274:	f3c0 1000 	ubfx	r0, r0, #4, #1
   19278:	4770      	bx	lr

0001927a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   1927a:	7800      	ldrb	r0, [r0, #0]
   1927c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19280:	4770      	bx	lr

00019282 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   19282:	b570      	push	{r4, r5, r6, lr}
   19284:	460d      	mov	r5, r1
   19286:	4606      	mov	r6, r0
   19288:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1928c:	461c      	mov	r4, r3
   1928e:	68cb      	ldr	r3, [r1, #12]
   19290:	4611      	mov	r1, r2
   19292:	4622      	mov	r2, r4
   19294:	4798      	blx	r3
   19296:	7230      	strb	r0, [r6, #8]
   19298:	fab4 f084 	clz	r0, r4
   1929c:	0940      	lsrs	r0, r0, #5
   1929e:	7270      	strb	r0, [r6, #9]
   192a0:	2000      	movs	r0, #0
   192a2:	e9c6 5000 	strd	r5, r0, [r6]
   192a6:	bd70      	pop	{r4, r5, r6, pc}

000192a8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   192a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   192ac:	b085      	sub	sp, #20
   192ae:	460c      	mov	r4, r1
   192b0:	4605      	mov	r5, r0
   192b2:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   192b6:	690a      	ldr	r2, [r1, #16]
   192b8:	2127      	movs	r1, #39	; 0x27
   192ba:	4790      	blx	r2
   192bc:	b118      	cbz	r0, 192c6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   192be:	2001      	movs	r0, #1
   192c0:	b005      	add	sp, #20
   192c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   192c6:	6829      	ldr	r1, [r5, #0]
   192c8:	a801      	add	r0, sp, #4
   192ca:	2201      	movs	r2, #1
   192cc:	f7ff f85c 	bl	18388 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   192d0:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   192d4:	f04f 091c 	mov.w	r9, #28
   192d8:	f8dd 800c 	ldr.w	r8, [sp, #12]
   192dc:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   192e0:	f89d 6010 	ldrb.w	r6, [sp, #16]
   192e4:	d139      	bne.n	1935a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   192e6:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   192ea:	2f02      	cmp	r7, #2
   192ec:	f0c0 806b 	bcc.w	193c6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   192f0:	d00c      	beq.n	1930c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   192f2:	b2f0      	uxtb	r0, r6
   192f4:	2604      	movs	r6, #4
   192f6:	2703      	movs	r7, #3
   192f8:	215c      	movs	r1, #92	; 0x5c
   192fa:	e8df f000 	tbb	[pc, r0]
   192fe:	0364      	.short	0x0364
   19300:	09242010 	.word	0x09242010
   19304:	2600      	movs	r6, #0
   19306:	2703      	movs	r7, #3
   19308:	217d      	movs	r1, #125	; 0x7d
   1930a:	e001      	b.n	19310 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   1930c:	2701      	movs	r7, #1
   1930e:	215c      	movs	r1, #92	; 0x5c
   19310:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   19314:	6912      	ldr	r2, [r2, #16]
   19316:	4790      	blx	r2
   19318:	2800      	cmp	r0, #0
   1931a:	d0e6      	beq.n	192ea <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   1931c:	e7cf      	b.n	192be <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   1931e:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   19322:	2602      	movs	r6, #2
   19324:	2703      	movs	r7, #3
   19326:	f1b8 0f00 	cmp.w	r8, #0
   1932a:	fa25 f100 	lsr.w	r1, r5, r0
   1932e:	bf08      	it	eq
   19330:	2601      	moveq	r6, #1
   19332:	bf18      	it	ne
   19334:	f1a8 0801 	subne.w	r8, r8, #1
   19338:	f367 111f 	bfi	r1, r7, #4, #28
   1933c:	e7e8      	b.n	19310 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   1933e:	2602      	movs	r6, #2
   19340:	2703      	movs	r7, #3
   19342:	217b      	movs	r1, #123	; 0x7b
   19344:	e7e4      	b.n	19310 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   19346:	2703      	movs	r7, #3
   19348:	2175      	movs	r1, #117	; 0x75
   1934a:	2603      	movs	r6, #3
   1934c:	e7e0      	b.n	19310 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   1934e:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   19352:	6912      	ldr	r2, [r2, #16]
   19354:	4790      	blx	r2
   19356:	2800      	cmp	r0, #0
   19358:	d1b1      	bne.n	192be <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   1935a:	4638      	mov	r0, r7
   1935c:	2701      	movs	r7, #1
   1935e:	215c      	movs	r1, #92	; 0x5c
   19360:	e8df f000 	tbb	[pc, r0]
   19364:	06020331 	.word	0x06020331
   19368:	e7f1      	b.n	1934e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1936a:	2700      	movs	r7, #0
   1936c:	4629      	mov	r1, r5
   1936e:	e7ee      	b.n	1934e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   19370:	b2f0      	uxtb	r0, r6
   19372:	2604      	movs	r6, #4
   19374:	2703      	movs	r7, #3
   19376:	215c      	movs	r1, #92	; 0x5c
   19378:	e8df f000 	tbb	[pc, r0]
   1937c:	1d080425 	.word	0x1d080425
   19380:	0321      	.short	0x0321
   19382:	e7e4      	b.n	1934e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   19384:	2600      	movs	r6, #0
   19386:	2703      	movs	r7, #3
   19388:	217d      	movs	r1, #125	; 0x7d
   1938a:	e7e0      	b.n	1934e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1938c:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   19390:	2602      	movs	r6, #2
   19392:	2703      	movs	r7, #3
   19394:	fa25 f000 	lsr.w	r0, r5, r0
   19398:	f000 000f 	and.w	r0, r0, #15
   1939c:	f100 0157 	add.w	r1, r0, #87	; 0x57
   193a0:	280a      	cmp	r0, #10
   193a2:	bf38      	it	cc
   193a4:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   193a8:	f1b8 0f00 	cmp.w	r8, #0
   193ac:	bf0c      	ite	eq
   193ae:	2601      	moveq	r6, #1
   193b0:	f1a8 0801 	subne.w	r8, r8, #1
   193b4:	e7cb      	b.n	1934e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   193b6:	2602      	movs	r6, #2
   193b8:	2703      	movs	r7, #3
   193ba:	217b      	movs	r1, #123	; 0x7b
   193bc:	e7c7      	b.n	1934e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   193be:	2703      	movs	r7, #3
   193c0:	2175      	movs	r1, #117	; 0x75
   193c2:	2603      	movs	r6, #3
   193c4:	e7c3      	b.n	1934e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   193c6:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   193ca:	690a      	ldr	r2, [r1, #16]
   193cc:	2127      	movs	r1, #39	; 0x27
   193ce:	b005      	add	sp, #20
   193d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   193d4:	4710      	bx	r2

000193d6 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   193d6:	b08c      	sub	sp, #48	; 0x30
   193d8:	e9cd 0100 	strd	r0, r1, [sp]
   193dc:	2002      	movs	r0, #2
   193de:	a908      	add	r1, sp, #32
   193e0:	9007      	str	r0, [sp, #28]
   193e2:	9106      	str	r1, [sp, #24]
   193e4:	2100      	movs	r1, #0
   193e6:	9105      	str	r1, [sp, #20]
   193e8:	e9cd 0103 	strd	r0, r1, [sp, #12]
   193ec:	f248 10b8 	movw	r0, #33208	; 0x81b8
   193f0:	f2c0 0002 	movt	r0, #2
   193f4:	a901      	add	r1, sp, #4
   193f6:	9002      	str	r0, [sp, #8]
   193f8:	f24a 20b1 	movw	r0, #41649	; 0xa2b1
   193fc:	f2c0 0001 	movt	r0, #1
   19400:	900b      	str	r0, [sp, #44]	; 0x2c
   19402:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   19406:	4668      	mov	r0, sp
   19408:	f248 11c8 	movw	r1, #33224	; 0x81c8
   1940c:	9008      	str	r0, [sp, #32]
   1940e:	a802      	add	r0, sp, #8
   19410:	f2c0 0102 	movt	r1, #2
   19414:	f7ff f8c2 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   19418:	defe      	udf	#254	; 0xfe

0001941a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   1941a:	b08c      	sub	sp, #48	; 0x30
   1941c:	e9cd 0100 	strd	r0, r1, [sp]
   19420:	2002      	movs	r0, #2
   19422:	a908      	add	r1, sp, #32
   19424:	9007      	str	r0, [sp, #28]
   19426:	9106      	str	r1, [sp, #24]
   19428:	2100      	movs	r1, #0
   1942a:	9105      	str	r1, [sp, #20]
   1942c:	e9cd 0103 	strd	r0, r1, [sp, #12]
   19430:	f248 10fc 	movw	r0, #33276	; 0x81fc
   19434:	f2c0 0002 	movt	r0, #2
   19438:	a901      	add	r1, sp, #4
   1943a:	9002      	str	r0, [sp, #8]
   1943c:	f24a 20b1 	movw	r0, #41649	; 0xa2b1
   19440:	f2c0 0001 	movt	r0, #1
   19444:	900b      	str	r0, [sp, #44]	; 0x2c
   19446:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   1944a:	4668      	mov	r0, sp
   1944c:	f248 210c 	movw	r1, #33292	; 0x820c
   19450:	9008      	str	r0, [sp, #32]
   19452:	a802      	add	r0, sp, #8
   19454:	f2c0 0102 	movt	r1, #2
   19458:	f7ff f8a0 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1945c:	defe      	udf	#254	; 0xfe

0001945e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   1945e:	b09a      	sub	sp, #104	; 0x68
   19460:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   19464:	e9cd 2300 	strd	r2, r3, [sp]
   19468:	d802      	bhi.n	19470 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   1946a:	2501      	movs	r5, #1
   1946c:	468c      	mov	ip, r1
   1946e:	e03e      	b.n	194ee <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   19470:	f1c1 0e00 	rsb	lr, r1, #0
   19474:	f44f 7c80 	mov.w	ip, #256	; 0x100
   19478:	458c      	cmp	ip, r1
   1947a:	d205      	bcs.n	19488 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   1947c:	f910 400c 	ldrsb.w	r4, [r0, ip]
   19480:	f114 0f41 	cmn.w	r4, #65	; 0x41
   19484:	f300 8108 	bgt.w	19698 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   19488:	eb0e 040c 	add.w	r4, lr, ip
   1948c:	f1ac 0601 	sub.w	r6, ip, #1
   19490:	2c01      	cmp	r4, #1
   19492:	d02a      	beq.n	194ea <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   19494:	428e      	cmp	r6, r1
   19496:	d206      	bcs.n	194a6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   19498:	eb00 050c 	add.w	r5, r0, ip
   1949c:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   194a0:	f115 0f41 	cmn.w	r5, #65	; 0x41
   194a4:	dc21      	bgt.n	194ea <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   194a6:	f1ac 0602 	sub.w	r6, ip, #2
   194aa:	2c02      	cmp	r4, #2
   194ac:	d01d      	beq.n	194ea <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   194ae:	428e      	cmp	r6, r1
   194b0:	d206      	bcs.n	194c0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   194b2:	eb00 050c 	add.w	r5, r0, ip
   194b6:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   194ba:	f115 0f41 	cmn.w	r5, #65	; 0x41
   194be:	dc14      	bgt.n	194ea <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   194c0:	f1ac 0603 	sub.w	r6, ip, #3
   194c4:	2c03      	cmp	r4, #3
   194c6:	d010      	beq.n	194ea <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   194c8:	428e      	cmp	r6, r1
   194ca:	d206      	bcs.n	194da <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   194cc:	eb00 050c 	add.w	r5, r0, ip
   194d0:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   194d4:	f115 0f41 	cmn.w	r5, #65	; 0x41
   194d8:	dc07      	bgt.n	194ea <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   194da:	f1bc 0c04 	subs.w	ip, ip, #4
   194de:	f04f 0500 	mov.w	r5, #0
   194e2:	d004      	beq.n	194ee <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   194e4:	2c04      	cmp	r4, #4
   194e6:	d1c7      	bne.n	19478 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   194e8:	e001      	b.n	194ee <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   194ea:	2500      	movs	r5, #0
   194ec:	46b4      	mov	ip, r6
   194ee:	2605      	movs	r6, #5
   194f0:	2d00      	cmp	r5, #0
   194f2:	f248 25da 	movw	r5, #33498	; 0x82da
   194f6:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   194fa:	bf18      	it	ne
   194fc:	2600      	movne	r6, #0
   194fe:	9605      	str	r6, [sp, #20]
   19500:	f647 6624 	movw	r6, #32292	; 0x7e24
   19504:	f2c0 0502 	movt	r5, #2
   19508:	f2c0 0602 	movt	r6, #2
   1950c:	bf18      	it	ne
   1950e:	4635      	movne	r5, r6
   19510:	428a      	cmp	r2, r1
   19512:	9504      	str	r5, [sp, #16]
   19514:	bf98      	it	ls
   19516:	428b      	cmpls	r3, r1
   19518:	d92a      	bls.n	19570 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   1951a:	428a      	cmp	r2, r1
   1951c:	f04f 0003 	mov.w	r0, #3
   19520:	a910      	add	r1, sp, #64	; 0x40
   19522:	bf88      	it	hi
   19524:	4613      	movhi	r3, r2
   19526:	900f      	str	r0, [sp, #60]	; 0x3c
   19528:	910e      	str	r1, [sp, #56]	; 0x38
   1952a:	2100      	movs	r1, #0
   1952c:	910d      	str	r1, [sp, #52]	; 0x34
   1952e:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   19532:	f248 3000 	movw	r0, #33536	; 0x8300
   19536:	f2c0 0002 	movt	r0, #2
   1953a:	a904      	add	r1, sp, #16
   1953c:	900a      	str	r0, [sp, #40]	; 0x28
   1953e:	f24a 309f 	movw	r0, #41887	; 0xa39f
   19542:	f2c0 0001 	movt	r0, #1
   19546:	9308      	str	r3, [sp, #32]
   19548:	9015      	str	r0, [sp, #84]	; 0x54
   1954a:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   1954e:	a802      	add	r0, sp, #8
   19550:	f248 3118 	movw	r1, #33560	; 0x8318
   19554:	9012      	str	r0, [sp, #72]	; 0x48
   19556:	f24a 20b1 	movw	r0, #41649	; 0xa2b1
   1955a:	f2c0 0102 	movt	r1, #2
   1955e:	f2c0 0001 	movt	r0, #1
   19562:	9011      	str	r0, [sp, #68]	; 0x44
   19564:	a808      	add	r0, sp, #32
   19566:	9010      	str	r0, [sp, #64]	; 0x40
   19568:	a80a      	add	r0, sp, #40	; 0x28
   1956a:	f7ff f817 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1956e:	defe      	udf	#254	; 0xfe
   19570:	429a      	cmp	r2, r3
   19572:	f200 80f1 	bhi.w	19758 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   19576:	2a00      	cmp	r2, #0
   19578:	bf18      	it	ne
   1957a:	4291      	cmpne	r1, r2
   1957c:	d109      	bne.n	19592 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   1957e:	461a      	mov	r2, r3
   19580:	2a00      	cmp	r2, #0
   19582:	9206      	str	r2, [sp, #24]
   19584:	bf18      	it	ne
   19586:	428a      	cmpne	r2, r1
   19588:	d10e      	bne.n	195a8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   1958a:	4613      	mov	r3, r2
   1958c:	428b      	cmp	r3, r1
   1958e:	d047      	beq.n	19620 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   19590:	e052      	b.n	19638 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   19592:	d9f5      	bls.n	19580 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   19594:	5686      	ldrsb	r6, [r0, r2]
   19596:	f116 0f40 	cmn.w	r6, #64	; 0x40
   1959a:	bfa8      	it	ge
   1959c:	461a      	movge	r2, r3
   1959e:	2a00      	cmp	r2, #0
   195a0:	9206      	str	r2, [sp, #24]
   195a2:	bf18      	it	ne
   195a4:	428a      	cmpne	r2, r1
   195a6:	d0f0      	beq.n	1958a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   195a8:	f1a0 0c01 	sub.w	ip, r0, #1
   195ac:	f101 0e02 	add.w	lr, r1, #2
   195b0:	1ccc      	adds	r4, r1, #3
   195b2:	1c4d      	adds	r5, r1, #1
   195b4:	1d0e      	adds	r6, r1, #4
   195b6:	428a      	cmp	r2, r1
   195b8:	d206      	bcs.n	195c8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   195ba:	eb0c 0302 	add.w	r3, ip, r2
   195be:	f993 3001 	ldrsb.w	r3, [r3, #1]
   195c2:	f113 0f41 	cmn.w	r3, #65	; 0x41
   195c6:	dce0      	bgt.n	1958a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   195c8:	1e53      	subs	r3, r2, #1
   195ca:	bf18      	it	ne
   195cc:	4295      	cmpne	r5, r2
   195ce:	d025      	beq.n	1961c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   195d0:	428b      	cmp	r3, r1
   195d2:	d204      	bcs.n	195de <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   195d4:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   195d8:	f117 0f41 	cmn.w	r7, #65	; 0x41
   195dc:	dc1e      	bgt.n	1961c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   195de:	1e93      	subs	r3, r2, #2
   195e0:	bf18      	it	ne
   195e2:	4596      	cmpne	lr, r2
   195e4:	d01a      	beq.n	1961c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   195e6:	428b      	cmp	r3, r1
   195e8:	d206      	bcs.n	195f8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   195ea:	eb0c 0702 	add.w	r7, ip, r2
   195ee:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   195f2:	f117 0f41 	cmn.w	r7, #65	; 0x41
   195f6:	dc11      	bgt.n	1961c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   195f8:	1ed3      	subs	r3, r2, #3
   195fa:	bf18      	it	ne
   195fc:	4294      	cmpne	r4, r2
   195fe:	d00d      	beq.n	1961c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   19600:	428b      	cmp	r3, r1
   19602:	d206      	bcs.n	19612 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   19604:	eb0c 0702 	add.w	r7, ip, r2
   19608:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   1960c:	f117 0f41 	cmn.w	r7, #65	; 0x41
   19610:	dc04      	bgt.n	1961c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   19612:	1f13      	subs	r3, r2, #4
   19614:	d002      	beq.n	1961c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   19616:	4296      	cmp	r6, r2
   19618:	461a      	mov	r2, r3
   1961a:	d1cc      	bne.n	195b6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   1961c:	428b      	cmp	r3, r1
   1961e:	d10b      	bne.n	19638 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   19620:	f647 70c0 	movw	r0, #32704	; 0x7fc0
   19624:	f248 3268 	movw	r2, #33640	; 0x8368
   19628:	f2c0 0002 	movt	r0, #2
   1962c:	f2c0 0202 	movt	r2, #2
   19630:	212b      	movs	r1, #43	; 0x2b
   19632:	f7fe ff7d 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   19636:	defe      	udf	#254	; 0xfe
   19638:	18c5      	adds	r5, r0, r3
   1963a:	462e      	mov	r6, r5
   1963c:	f916 4b01 	ldrsb.w	r4, [r6], #1
   19640:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   19644:	b2e2      	uxtb	r2, r4
   19646:	dd02      	ble.n	1964e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   19648:	9207      	str	r2, [sp, #28]
   1964a:	2101      	movs	r1, #1
   1964c:	e04d      	b.n	196ea <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   1964e:	4408      	add	r0, r1
   19650:	4286      	cmp	r6, r0
   19652:	d10b      	bne.n	1966c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   19654:	2500      	movs	r5, #0
   19656:	4606      	mov	r6, r0
   19658:	f002 011f 	and.w	r1, r2, #31
   1965c:	2adf      	cmp	r2, #223	; 0xdf
   1965e:	d80d      	bhi.n	1967c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   19660:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   19664:	2880      	cmp	r0, #128	; 0x80
   19666:	9007      	str	r0, [sp, #28]
   19668:	d333      	bcc.n	196d2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   1966a:	e034      	b.n	196d6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   1966c:	7869      	ldrb	r1, [r5, #1]
   1966e:	1cae      	adds	r6, r5, #2
   19670:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   19674:	f002 011f 	and.w	r1, r2, #31
   19678:	2adf      	cmp	r2, #223	; 0xdf
   1967a:	d9f1      	bls.n	19660 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   1967c:	4286      	cmp	r6, r0
   1967e:	d10d      	bne.n	1969c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   19680:	2400      	movs	r4, #0
   19682:	4606      	mov	r6, r0
   19684:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   19688:	2af0      	cmp	r2, #240	; 0xf0
   1968a:	d20f      	bcs.n	196ac <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   1968c:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   19690:	2880      	cmp	r0, #128	; 0x80
   19692:	9007      	str	r0, [sp, #28]
   19694:	d31d      	bcc.n	196d2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   19696:	e01e      	b.n	196d6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   19698:	2500      	movs	r5, #0
   1969a:	e728      	b.n	194ee <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   1969c:	f816 4b01 	ldrb.w	r4, [r6], #1
   196a0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   196a4:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   196a8:	2af0      	cmp	r2, #240	; 0xf0
   196aa:	d3ef      	bcc.n	1968c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   196ac:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   196b0:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   196b4:	4286      	cmp	r6, r0
   196b6:	bf1a      	itte	ne
   196b8:	7830      	ldrbne	r0, [r6, #0]
   196ba:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   196be:	2000      	moveq	r0, #0
   196c0:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   196c4:	4408      	add	r0, r1
   196c6:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   196ca:	d0a9      	beq.n	19620 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   196cc:	2880      	cmp	r0, #128	; 0x80
   196ce:	9007      	str	r0, [sp, #28]
   196d0:	d201      	bcs.n	196d6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   196d2:	2101      	movs	r1, #1
   196d4:	e009      	b.n	196ea <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   196d6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   196da:	d201      	bcs.n	196e0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   196dc:	2102      	movs	r1, #2
   196de:	e004      	b.n	196ea <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   196e0:	2104      	movs	r1, #4
   196e2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   196e6:	bf38      	it	cc
   196e8:	2103      	movcc	r1, #3
   196ea:	4419      	add	r1, r3
   196ec:	aa10      	add	r2, sp, #64	; 0x40
   196ee:	a808      	add	r0, sp, #32
   196f0:	e9cd 3108 	strd	r3, r1, [sp, #32]
   196f4:	2105      	movs	r1, #5
   196f6:	910f      	str	r1, [sp, #60]	; 0x3c
   196f8:	920e      	str	r2, [sp, #56]	; 0x38
   196fa:	2200      	movs	r2, #0
   196fc:	920d      	str	r2, [sp, #52]	; 0x34
   196fe:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   19702:	f248 31a4 	movw	r1, #33700	; 0x83a4
   19706:	f2c0 0102 	movt	r1, #2
   1970a:	aa04      	add	r2, sp, #16
   1970c:	910a      	str	r1, [sp, #40]	; 0x28
   1970e:	f24a 319f 	movw	r1, #41887	; 0xa39f
   19712:	f2c0 0101 	movt	r1, #1
   19716:	9119      	str	r1, [sp, #100]	; 0x64
   19718:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   1971c:	a902      	add	r1, sp, #8
   1971e:	9116      	str	r1, [sp, #88]	; 0x58
   19720:	f248 3129 	movw	r1, #33577	; 0x8329
   19724:	f2c0 0101 	movt	r1, #1
   19728:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   1972c:	f249 20a9 	movw	r0, #37545	; 0x92a9
   19730:	f2c0 0001 	movt	r0, #1
   19734:	f248 31cc 	movw	r1, #33740	; 0x83cc
   19738:	9013      	str	r0, [sp, #76]	; 0x4c
   1973a:	a807      	add	r0, sp, #28
   1973c:	9012      	str	r0, [sp, #72]	; 0x48
   1973e:	f24a 20b1 	movw	r0, #41649	; 0xa2b1
   19742:	f2c0 0001 	movt	r0, #1
   19746:	f2c0 0102 	movt	r1, #2
   1974a:	9011      	str	r0, [sp, #68]	; 0x44
   1974c:	a806      	add	r0, sp, #24
   1974e:	9010      	str	r0, [sp, #64]	; 0x40
   19750:	a80a      	add	r0, sp, #40	; 0x28
   19752:	f7fe ff23 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   19756:	defe      	udf	#254	; 0xfe
   19758:	2004      	movs	r0, #4
   1975a:	a910      	add	r1, sp, #64	; 0x40
   1975c:	900f      	str	r0, [sp, #60]	; 0x3c
   1975e:	910e      	str	r1, [sp, #56]	; 0x38
   19760:	2100      	movs	r1, #0
   19762:	910d      	str	r1, [sp, #52]	; 0x34
   19764:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   19768:	f248 3038 	movw	r0, #33592	; 0x8338
   1976c:	f2c0 0002 	movt	r0, #2
   19770:	a904      	add	r1, sp, #16
   19772:	900a      	str	r0, [sp, #40]	; 0x28
   19774:	f24a 309f 	movw	r0, #41887	; 0xa39f
   19778:	f2c0 0001 	movt	r0, #1
   1977c:	9017      	str	r0, [sp, #92]	; 0x5c
   1977e:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   19782:	a802      	add	r0, sp, #8
   19784:	9014      	str	r0, [sp, #80]	; 0x50
   19786:	f24a 20b1 	movw	r0, #41649	; 0xa2b1
   1978a:	a901      	add	r1, sp, #4
   1978c:	f2c0 0001 	movt	r0, #1
   19790:	9013      	str	r0, [sp, #76]	; 0x4c
   19792:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   19796:	f248 3158 	movw	r1, #33624	; 0x8358
   1979a:	4668      	mov	r0, sp
   1979c:	f2c0 0102 	movt	r1, #2
   197a0:	9010      	str	r0, [sp, #64]	; 0x40
   197a2:	a80a      	add	r0, sp, #40	; 0x28
   197a4:	f7fe fefa 	bl	1859c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   197a8:	defe      	udf	#254	; 0xfe

000197aa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   197aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   197ae:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   197b2:	d270      	bcs.n	19896 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   197b4:	f248 3eec 	movw	lr, #33772	; 0x83ec
   197b8:	f248 483e 	movw	r8, #33854	; 0x843e
   197bc:	fa1f f980 	uxth.w	r9, r0
   197c0:	f2c0 0e02 	movt	lr, #2
   197c4:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   197c8:	f04f 0a00 	mov.w	sl, #0
   197cc:	f2c0 0802 	movt	r8, #2
   197d0:	4675      	mov	r5, lr
   197d2:	786e      	ldrb	r6, [r5, #1]
   197d4:	4652      	mov	r2, sl
   197d6:	782b      	ldrb	r3, [r5, #0]
   197d8:	3502      	adds	r5, #2
   197da:	44b2      	add	sl, r6
   197dc:	4563      	cmp	r3, ip
   197de:	d129      	bne.n	19834 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   197e0:	4592      	cmp	sl, r2
   197e2:	f0c0 8112 	bcc.w	19a0a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   197e6:	ea4f 035a 	mov.w	r3, sl, lsr #1
   197ea:	2b92      	cmp	r3, #146	; 0x92
   197ec:	f200 8112 	bhi.w	19a14 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   197f0:	eb08 0302 	add.w	r3, r8, r2
   197f4:	199a      	adds	r2, r3, r6
   197f6:	b31e      	cbz	r6, 19840 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   197f8:	461f      	mov	r7, r3
   197fa:	b2c4      	uxtb	r4, r0
   197fc:	f817 1b01 	ldrb.w	r1, [r7], #1
   19800:	42a1      	cmp	r1, r4
   19802:	f000 80b6 	beq.w	19972 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   19806:	4297      	cmp	r7, r2
   19808:	d01a      	beq.n	19840 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   1980a:	7859      	ldrb	r1, [r3, #1]
   1980c:	42a1      	cmp	r1, r4
   1980e:	f000 80b0 	beq.w	19972 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   19812:	1c99      	adds	r1, r3, #2
   19814:	4291      	cmp	r1, r2
   19816:	d013      	beq.n	19840 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   19818:	7899      	ldrb	r1, [r3, #2]
   1981a:	42a1      	cmp	r1, r4
   1981c:	f000 80a9 	beq.w	19972 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   19820:	1cd9      	adds	r1, r3, #3
   19822:	4291      	cmp	r1, r2
   19824:	d00c      	beq.n	19840 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   19826:	1d19      	adds	r1, r3, #4
   19828:	78db      	ldrb	r3, [r3, #3]
   1982a:	3e04      	subs	r6, #4
   1982c:	42a3      	cmp	r3, r4
   1982e:	460b      	mov	r3, r1
   19830:	d1e1      	bne.n	197f6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   19832:	e09e      	b.n	19972 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   19834:	d808      	bhi.n	19848 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   19836:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   1983a:	4295      	cmp	r5, r2
   1983c:	d1c9      	bne.n	197d2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   1983e:	e003      	b.n	19848 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   19840:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   19844:	428d      	cmp	r5, r1
   19846:	d1c4      	bne.n	197d2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   19848:	f248 5563 	movw	r5, #34147	; 0x8563
   1984c:	2101      	movs	r1, #1
   1984e:	f2c0 0502 	movt	r5, #2
   19852:	4628      	mov	r0, r5
   19854:	4602      	mov	r2, r0
   19856:	f812 7b01 	ldrb.w	r7, [r2], #1
   1985a:	b27e      	sxtb	r6, r7
   1985c:	2e00      	cmp	r6, #0
   1985e:	d404      	bmi.n	1986a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   19860:	4610      	mov	r0, r2
   19862:	ebb9 0907 	subs.w	r9, r9, r7
   19866:	d50f      	bpl.n	19888 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   19868:	e0bd      	b.n	199e6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   1986a:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   1986e:	429a      	cmp	r2, r3
   19870:	f000 80db 	beq.w	19a2a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   19874:	7842      	ldrb	r2, [r0, #1]
   19876:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   1987a:	3002      	adds	r0, #2
   1987c:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   19880:	ebb9 0907 	subs.w	r9, r9, r7
   19884:	f100 80af 	bmi.w	199e6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   19888:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   1988c:	f081 0101 	eor.w	r1, r1, #1
   19890:	4290      	cmp	r0, r2
   19892:	d1df      	bne.n	19854 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   19894:	e0a7      	b.n	199e6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   19896:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   1989a:	d26f      	bcs.n	1997c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   1989c:	f248 6e9d 	movw	lr, #34461	; 0x869d
   198a0:	f248 68e3 	movw	r8, #34531	; 0x86e3
   198a4:	fa1f f980 	uxth.w	r9, r0
   198a8:	f2c0 0e02 	movt	lr, #2
   198ac:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   198b0:	f04f 0a00 	mov.w	sl, #0
   198b4:	f2c0 0802 	movt	r8, #2
   198b8:	4675      	mov	r5, lr
   198ba:	786e      	ldrb	r6, [r5, #1]
   198bc:	4652      	mov	r2, sl
   198be:	782b      	ldrb	r3, [r5, #0]
   198c0:	3502      	adds	r5, #2
   198c2:	44b2      	add	sl, r6
   198c4:	4563      	cmp	r3, ip
   198c6:	d125      	bne.n	19914 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   198c8:	4592      	cmp	sl, r2
   198ca:	f0c0 809e 	bcc.w	19a0a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   198ce:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   198d2:	f200 80a5 	bhi.w	19a20 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   198d6:	eb08 0302 	add.w	r3, r8, r2
   198da:	199a      	adds	r2, r3, r6
   198dc:	b306      	cbz	r6, 19920 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   198de:	461f      	mov	r7, r3
   198e0:	b2c4      	uxtb	r4, r0
   198e2:	f817 1b01 	ldrb.w	r1, [r7], #1
   198e6:	42a1      	cmp	r1, r4
   198e8:	d043      	beq.n	19972 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   198ea:	4297      	cmp	r7, r2
   198ec:	d018      	beq.n	19920 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   198ee:	7859      	ldrb	r1, [r3, #1]
   198f0:	42a1      	cmp	r1, r4
   198f2:	d03e      	beq.n	19972 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   198f4:	1c99      	adds	r1, r3, #2
   198f6:	4291      	cmp	r1, r2
   198f8:	d012      	beq.n	19920 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   198fa:	7899      	ldrb	r1, [r3, #2]
   198fc:	42a1      	cmp	r1, r4
   198fe:	d038      	beq.n	19972 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   19900:	1cd9      	adds	r1, r3, #3
   19902:	4291      	cmp	r1, r2
   19904:	d00c      	beq.n	19920 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   19906:	1d19      	adds	r1, r3, #4
   19908:	78db      	ldrb	r3, [r3, #3]
   1990a:	3e04      	subs	r6, #4
   1990c:	42a3      	cmp	r3, r4
   1990e:	460b      	mov	r3, r1
   19910:	d1e4      	bne.n	198dc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   19912:	e02e      	b.n	19972 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   19914:	d808      	bhi.n	19928 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   19916:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   1991a:	4295      	cmp	r5, r2
   1991c:	d1cd      	bne.n	198ba <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   1991e:	e003      	b.n	19928 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   19920:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   19924:	428d      	cmp	r5, r1
   19926:	d1c8      	bne.n	198ba <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   19928:	f248 7589 	movw	r5, #34697	; 0x8789
   1992c:	2101      	movs	r1, #1
   1992e:	f2c0 0502 	movt	r5, #2
   19932:	4628      	mov	r0, r5
   19934:	4602      	mov	r2, r0
   19936:	f812 7b01 	ldrb.w	r7, [r2], #1
   1993a:	b27e      	sxtb	r6, r7
   1993c:	2e00      	cmp	r6, #0
   1993e:	d40a      	bmi.n	19956 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   19940:	4610      	mov	r0, r2
   19942:	ebb9 0907 	subs.w	r9, r9, r7
   19946:	d44e      	bmi.n	199e6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   19948:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   1994c:	f081 0101 	eor.w	r1, r1, #1
   19950:	4290      	cmp	r0, r2
   19952:	d1ef      	bne.n	19934 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   19954:	e047      	b.n	199e6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   19956:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   1995a:	429a      	cmp	r2, r3
   1995c:	d065      	beq.n	19a2a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   1995e:	7842      	ldrb	r2, [r0, #1]
   19960:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   19964:	3002      	adds	r0, #2
   19966:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   1996a:	ebb9 0907 	subs.w	r9, r9, r7
   1996e:	d5eb      	bpl.n	19948 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   19970:	e039      	b.n	199e6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   19972:	2100      	movs	r1, #0
   19974:	f001 0001 	and.w	r0, r1, #1
   19978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1997c:	f240 51e2 	movw	r1, #1506	; 0x5e2
   19980:	f240 63e2 	movw	r3, #1762	; 0x6e2
   19984:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   19988:	1842      	adds	r2, r0, r1
   1998a:	f2c0 030b 	movt	r3, #11
   1998e:	2100      	movs	r1, #0
   19990:	429a      	cmp	r2, r3
   19992:	d328      	bcc.n	199e6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   19994:	f241 421f 	movw	r2, #5151	; 0x141f
   19998:	f640 431f 	movw	r3, #3103	; 0xc1f
   1999c:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   199a0:	4402      	add	r2, r0
   199a2:	429a      	cmp	r2, r3
   199a4:	bf21      	itttt	cs
   199a6:	f243 125e 	movwcs	r2, #12638	; 0x315e
   199aa:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   199ae:	4402      	addcs	r2, r0
   199b0:	2a0e      	cmpcs	r2, #14
   199b2:	d318      	bcc.n	199e6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   199b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   199b8:	f64b 031e 	movw	r3, #47134	; 0xb81e
   199bc:	f2c0 021f 	movt	r2, #31
   199c0:	f2c0 0302 	movt	r3, #2
   199c4:	4002      	ands	r2, r0
   199c6:	429a      	cmp	r2, r3
   199c8:	d00d      	beq.n	199e6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   199ca:	f645 1229 	movw	r2, #22825	; 0x5929
   199ce:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   199d2:	4402      	add	r2, r0
   199d4:	2a29      	cmp	r2, #41	; 0x29
   199d6:	bf21      	itttt	cs
   199d8:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   199dc:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   199e0:	4402      	addcs	r2, r0
   199e2:	2a0b      	cmpcs	r2, #11
   199e4:	d203      	bcs.n	199ee <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   199e6:	f001 0001 	and.w	r0, r1, #1
   199ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   199ee:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   199f2:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   199f6:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   199fa:	2000      	movs	r0, #0
   199fc:	f2c0 0202 	movt	r2, #2
   19a00:	4291      	cmp	r1, r2
   19a02:	bf88      	it	hi
   19a04:	2001      	movhi	r0, #1
   19a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19a0a:	4610      	mov	r0, r2
   19a0c:	4651      	mov	r1, sl
   19a0e:	f7ff fd04 	bl	1941a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   19a12:	defe      	udf	#254	; 0xfe
   19a14:	4650      	mov	r0, sl
   19a16:	f240 1125 	movw	r1, #293	; 0x125
   19a1a:	f7ff fcdc 	bl	193d6 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   19a1e:	defe      	udf	#254	; 0xfe
   19a20:	4650      	mov	r0, sl
   19a22:	21a6      	movs	r1, #166	; 0xa6
   19a24:	f7ff fcd7 	bl	193d6 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   19a28:	defe      	udf	#254	; 0xfe
   19a2a:	f647 70c0 	movw	r0, #32704	; 0x7fc0
   19a2e:	f248 32dc 	movw	r2, #33756	; 0x83dc
   19a32:	f2c0 0002 	movt	r0, #2
   19a36:	f2c0 0202 	movt	r2, #2
   19a3a:	212b      	movs	r1, #43	; 0x2b
   19a3c:	f7fe fd78 	bl	18530 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   19a40:	defe      	udf	#254	; 0xfe

00019a42 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   19a42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a46:	b0a3      	sub	sp, #140	; 0x8c
   19a48:	468c      	mov	ip, r1
   19a4a:	6809      	ldr	r1, [r1, #0]
   19a4c:	06ca      	lsls	r2, r1, #27
   19a4e:	d44a      	bmi.n	19ae6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   19a50:	6804      	ldr	r4, [r0, #0]
   19a52:	0688      	lsls	r0, r1, #26
   19a54:	f100 8089 	bmi.w	19b6a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   19a58:	f248 5e1f 	movw	lr, #34079	; 0x851f
   19a5c:	f248 025f 	movw	r2, #32863	; 0x805f
   19a60:	f242 7810 	movw	r8, #10000	; 0x2710
   19a64:	4544      	cmp	r4, r8
   19a66:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   19a6a:	f2c0 0202 	movt	r2, #2
   19a6e:	f0c0 80e3 	bcc.w	19c38 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   19a72:	f241 7959 	movw	r9, #5977	; 0x1759
   19a76:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   19a7a:	f10d 0b0c 	add.w	fp, sp, #12
   19a7e:	2300      	movs	r3, #0
   19a80:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   19a84:	f04f 0a64 	mov.w	sl, #100	; 0x64
   19a88:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   19a8c:	fba4 0109 	umull	r0, r1, r4, r9
   19a90:	42bc      	cmp	r4, r7
   19a92:	ea4f 3051 	mov.w	r0, r1, lsr #13
   19a96:	fb00 4118 	mls	r1, r0, r8, r4
   19a9a:	4604      	mov	r4, r0
   19a9c:	b28d      	uxth	r5, r1
   19a9e:	fba5 560e 	umull	r5, r6, r5, lr
   19aa2:	ea4f 1556 	mov.w	r5, r6, lsr #5
   19aa6:	eb0b 0603 	add.w	r6, fp, r3
   19aaa:	fb05 111a 	mls	r1, r5, sl, r1
   19aae:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   19ab2:	f1a3 0304 	sub.w	r3, r3, #4
   19ab6:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   19aba:	b289      	uxth	r1, r1
   19abc:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   19ac0:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   19ac4:	d8e2      	bhi.n	19a8c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   19ac6:	f103 0127 	add.w	r1, r3, #39	; 0x27
   19aca:	4604      	mov	r4, r0
   19acc:	2c63      	cmp	r4, #99	; 0x63
   19ace:	f300 80b7 	bgt.w	19c40 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   19ad2:	4623      	mov	r3, r4
   19ad4:	2b0a      	cmp	r3, #10
   19ad6:	f2c0 80c3 	blt.w	19c60 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   19ada:	1e88      	subs	r0, r1, #2
   19adc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   19ae0:	aa03      	add	r2, sp, #12
   19ae2:	5211      	strh	r1, [r2, r0]
   19ae4:	e0c1      	b.n	19c6a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   19ae6:	6800      	ldr	r0, [r0, #0]
   19ae8:	f10d 0e0c 	add.w	lr, sp, #12
   19aec:	2381      	movs	r3, #129	; 0x81
   19aee:	2100      	movs	r1, #0
   19af0:	f000 020f 	and.w	r2, r0, #15
   19af4:	f102 0457 	add.w	r4, r2, #87	; 0x57
   19af8:	2a0a      	cmp	r2, #10
   19afa:	bf38      	it	cc
   19afc:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   19b00:	eb0e 0203 	add.w	r2, lr, r3
   19b04:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   19b08:	f802 4c02 	strb.w	r4, [r2, #-2]
   19b0c:	d071      	beq.n	19bf2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   19b0e:	0904      	lsrs	r4, r0, #4
   19b10:	f004 040f 	and.w	r4, r4, #15
   19b14:	f104 0557 	add.w	r5, r4, #87	; 0x57
   19b18:	2c0a      	cmp	r4, #10
   19b1a:	bf38      	it	cc
   19b1c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19b20:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   19b24:	f802 5c03 	strb.w	r5, [r2, #-3]
   19b28:	d079      	beq.n	19c1e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   19b2a:	0a04      	lsrs	r4, r0, #8
   19b2c:	f004 040f 	and.w	r4, r4, #15
   19b30:	f104 0557 	add.w	r5, r4, #87	; 0x57
   19b34:	2c0a      	cmp	r4, #10
   19b36:	bf38      	it	cc
   19b38:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19b3c:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   19b40:	f802 5c04 	strb.w	r5, [r2, #-4]
   19b44:	d073      	beq.n	19c2e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   19b46:	0b04      	lsrs	r4, r0, #12
   19b48:	3b04      	subs	r3, #4
   19b4a:	f004 040f 	and.w	r4, r4, #15
   19b4e:	f104 0557 	add.w	r5, r4, #87	; 0x57
   19b52:	2c0a      	cmp	r4, #10
   19b54:	bf38      	it	cc
   19b56:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19b5a:	f802 5c05 	strb.w	r5, [r2, #-5]
   19b5e:	0c02      	lsrs	r2, r0, #16
   19b60:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   19b64:	4610      	mov	r0, r2
   19b66:	d1c3      	bne.n	19af0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   19b68:	e03f      	b.n	19bea <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   19b6a:	f10d 0e0c 	add.w	lr, sp, #12
   19b6e:	2381      	movs	r3, #129	; 0x81
   19b70:	2100      	movs	r1, #0
   19b72:	f004 000f 	and.w	r0, r4, #15
   19b76:	eb0e 0203 	add.w	r2, lr, r3
   19b7a:	f100 0537 	add.w	r5, r0, #55	; 0x37
   19b7e:	280a      	cmp	r0, #10
   19b80:	bf38      	it	cc
   19b82:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   19b86:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   19b8a:	f802 5c02 	strb.w	r5, [r2, #-2]
   19b8e:	d030      	beq.n	19bf2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   19b90:	0920      	lsrs	r0, r4, #4
   19b92:	f000 000f 	and.w	r0, r0, #15
   19b96:	f100 0537 	add.w	r5, r0, #55	; 0x37
   19b9a:	280a      	cmp	r0, #10
   19b9c:	bf38      	it	cc
   19b9e:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   19ba2:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   19ba6:	f802 5c03 	strb.w	r5, [r2, #-3]
   19baa:	d038      	beq.n	19c1e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   19bac:	0a20      	lsrs	r0, r4, #8
   19bae:	f000 000f 	and.w	r0, r0, #15
   19bb2:	f100 0537 	add.w	r5, r0, #55	; 0x37
   19bb6:	280a      	cmp	r0, #10
   19bb8:	bf38      	it	cc
   19bba:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   19bbe:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   19bc2:	f802 5c04 	strb.w	r5, [r2, #-4]
   19bc6:	d032      	beq.n	19c2e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   19bc8:	0b20      	lsrs	r0, r4, #12
   19bca:	3b04      	subs	r3, #4
   19bcc:	f000 000f 	and.w	r0, r0, #15
   19bd0:	f100 0537 	add.w	r5, r0, #55	; 0x37
   19bd4:	280a      	cmp	r0, #10
   19bd6:	bf38      	it	cc
   19bd8:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   19bdc:	0c20      	lsrs	r0, r4, #16
   19bde:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   19be2:	4604      	mov	r4, r0
   19be4:	f802 5c05 	strb.w	r5, [r2, #-5]
   19be8:	d1c3      	bne.n	19b72 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   19bea:	1e58      	subs	r0, r3, #1
   19bec:	2881      	cmp	r0, #129	; 0x81
   19bee:	d305      	bcc.n	19bfc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   19bf0:	e019      	b.n	19c26 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   19bf2:	1e59      	subs	r1, r3, #1
   19bf4:	1e98      	subs	r0, r3, #2
   19bf6:	460b      	mov	r3, r1
   19bf8:	2881      	cmp	r0, #129	; 0x81
   19bfa:	d214      	bcs.n	19c26 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   19bfc:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   19c00:	f248 025d 	movw	r2, #32861	; 0x805d
   19c04:	4470      	add	r0, lr
   19c06:	f2c0 0202 	movt	r2, #2
   19c0a:	e9cd 0100 	strd	r0, r1, [sp]
   19c0e:	4660      	mov	r0, ip
   19c10:	2101      	movs	r1, #1
   19c12:	2302      	movs	r3, #2
   19c14:	f7ff f864 	bl	18ce0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19c18:	b023      	add	sp, #140	; 0x8c
   19c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c1e:	1ed8      	subs	r0, r3, #3
   19c20:	3b02      	subs	r3, #2
   19c22:	2881      	cmp	r0, #129	; 0x81
   19c24:	d3ea      	bcc.n	19bfc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   19c26:	2180      	movs	r1, #128	; 0x80
   19c28:	f7ff fbf7 	bl	1941a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   19c2c:	defe      	udf	#254	; 0xfe
   19c2e:	1f18      	subs	r0, r3, #4
   19c30:	3b03      	subs	r3, #3
   19c32:	2881      	cmp	r0, #129	; 0x81
   19c34:	d3e2      	bcc.n	19bfc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   19c36:	e7f6      	b.n	19c26 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   19c38:	2127      	movs	r1, #39	; 0x27
   19c3a:	2c63      	cmp	r4, #99	; 0x63
   19c3c:	f77f af49 	ble.w	19ad2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   19c40:	b2a0      	uxth	r0, r4
   19c42:	3902      	subs	r1, #2
   19c44:	fba0 030e 	umull	r0, r3, r0, lr
   19c48:	af03      	add	r7, sp, #12
   19c4a:	2064      	movs	r0, #100	; 0x64
   19c4c:	095b      	lsrs	r3, r3, #5
   19c4e:	fb03 4010 	mls	r0, r3, r0, r4
   19c52:	b280      	uxth	r0, r0
   19c54:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   19c58:	5278      	strh	r0, [r7, r1]
   19c5a:	2b0a      	cmp	r3, #10
   19c5c:	f6bf af3d 	bge.w	19ada <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   19c60:	1e48      	subs	r0, r1, #1
   19c62:	aa03      	add	r2, sp, #12
   19c64:	f103 0130 	add.w	r1, r3, #48	; 0x30
   19c68:	5411      	strb	r1, [r2, r0]
   19c6a:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   19c6e:	aa03      	add	r2, sp, #12
   19c70:	4410      	add	r0, r2
   19c72:	f647 6224 	movw	r2, #32292	; 0x7e24
   19c76:	e9cd 0100 	strd	r0, r1, [sp]
   19c7a:	f2c0 0202 	movt	r2, #2
   19c7e:	4660      	mov	r0, ip
   19c80:	2101      	movs	r1, #1
   19c82:	2300      	movs	r3, #0
   19c84:	f7ff f82c 	bl	18ce0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19c88:	b023      	add	sp, #140	; 0x8c
   19c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019c8e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   19c8e:	b580      	push	{r7, lr}
   19c90:	b0a2      	sub	sp, #136	; 0x88
   19c92:	7802      	ldrb	r2, [r0, #0]
   19c94:	468c      	mov	ip, r1
   19c96:	f002 030f 	and.w	r3, r2, #15
   19c9a:	f103 0057 	add.w	r0, r3, #87	; 0x57
   19c9e:	2b0a      	cmp	r3, #10
   19ca0:	bf38      	it	cc
   19ca2:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   19ca6:	2300      	movs	r3, #0
   19ca8:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   19cac:	d00b      	beq.n	19cc6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   19cae:	0913      	lsrs	r3, r2, #4
   19cb0:	f103 0157 	add.w	r1, r3, #87	; 0x57
   19cb4:	2aa0      	cmp	r2, #160	; 0xa0
   19cb6:	bf38      	it	cc
   19cb8:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   19cbc:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   19cc0:	227e      	movs	r2, #126	; 0x7e
   19cc2:	2302      	movs	r3, #2
   19cc4:	e001      	b.n	19cca <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   19cc6:	227f      	movs	r2, #127	; 0x7f
   19cc8:	2301      	movs	r3, #1
   19cca:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   19cce:	a802      	add	r0, sp, #8
   19cd0:	4410      	add	r0, r2
   19cd2:	f248 025d 	movw	r2, #32861	; 0x805d
   19cd6:	e9cd 0300 	strd	r0, r3, [sp]
   19cda:	f2c0 0202 	movt	r2, #2
   19cde:	4660      	mov	r0, ip
   19ce0:	2101      	movs	r1, #1
   19ce2:	2302      	movs	r3, #2
   19ce4:	f7fe fffc 	bl	18ce0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19ce8:	b022      	add	sp, #136	; 0x88
   19cea:	bd80      	pop	{r7, pc}

00019cec <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   19cec:	b580      	push	{r7, lr}
   19cee:	b0a2      	sub	sp, #136	; 0x88
   19cf0:	7802      	ldrb	r2, [r0, #0]
   19cf2:	468c      	mov	ip, r1
   19cf4:	f002 030f 	and.w	r3, r2, #15
   19cf8:	f103 0037 	add.w	r0, r3, #55	; 0x37
   19cfc:	2b0a      	cmp	r3, #10
   19cfe:	bf38      	it	cc
   19d00:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   19d04:	2300      	movs	r3, #0
   19d06:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   19d0a:	d00b      	beq.n	19d24 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   19d0c:	0913      	lsrs	r3, r2, #4
   19d0e:	f103 0137 	add.w	r1, r3, #55	; 0x37
   19d12:	2aa0      	cmp	r2, #160	; 0xa0
   19d14:	bf38      	it	cc
   19d16:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   19d1a:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   19d1e:	227e      	movs	r2, #126	; 0x7e
   19d20:	2302      	movs	r3, #2
   19d22:	e001      	b.n	19d28 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   19d24:	227f      	movs	r2, #127	; 0x7f
   19d26:	2301      	movs	r3, #1
   19d28:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   19d2c:	a802      	add	r0, sp, #8
   19d2e:	4410      	add	r0, r2
   19d30:	f248 025d 	movw	r2, #32861	; 0x805d
   19d34:	e9cd 0300 	strd	r0, r3, [sp]
   19d38:	f2c0 0202 	movt	r2, #2
   19d3c:	4660      	mov	r0, ip
   19d3e:	2101      	movs	r1, #1
   19d40:	2302      	movs	r3, #2
   19d42:	f7fe ffcd 	bl	18ce0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19d46:	b022      	add	sp, #136	; 0x88
   19d48:	bd80      	pop	{r7, pc}

00019d4a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   19d4a:	b580      	push	{r7, lr}
   19d4c:	b0a2      	sub	sp, #136	; 0x88
   19d4e:	8800      	ldrh	r0, [r0, #0]
   19d50:	468c      	mov	ip, r1
   19d52:	f000 020f 	and.w	r2, r0, #15
   19d56:	f102 0357 	add.w	r3, r2, #87	; 0x57
   19d5a:	2a0a      	cmp	r2, #10
   19d5c:	bf38      	it	cc
   19d5e:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   19d62:	2200      	movs	r2, #0
   19d64:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   19d68:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   19d6c:	d02a      	beq.n	19dc4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   19d6e:	0903      	lsrs	r3, r0, #4
   19d70:	f003 030f 	and.w	r3, r3, #15
   19d74:	f103 0157 	add.w	r1, r3, #87	; 0x57
   19d78:	2b0a      	cmp	r3, #10
   19d7a:	bf38      	it	cc
   19d7c:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   19d80:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   19d84:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   19d88:	d031      	beq.n	19dee <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   19d8a:	0a01      	lsrs	r1, r0, #8
   19d8c:	f001 010f 	and.w	r1, r1, #15
   19d90:	f101 0257 	add.w	r2, r1, #87	; 0x57
   19d94:	290a      	cmp	r1, #10
   19d96:	bf38      	it	cc
   19d98:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   19d9c:	2100      	movs	r1, #0
   19d9e:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   19da2:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   19da6:	d027      	beq.n	19df8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   19da8:	0b00      	lsrs	r0, r0, #12
   19daa:	f100 0157 	add.w	r1, r0, #87	; 0x57
   19dae:	280a      	cmp	r0, #10
   19db0:	bf38      	it	cc
   19db2:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   19db6:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   19dba:	227d      	movs	r2, #125	; 0x7d
   19dbc:	207c      	movs	r0, #124	; 0x7c
   19dbe:	2881      	cmp	r0, #129	; 0x81
   19dc0:	d304      	bcc.n	19dcc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   19dc2:	e01d      	b.n	19e00 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   19dc4:	2280      	movs	r2, #128	; 0x80
   19dc6:	207f      	movs	r0, #127	; 0x7f
   19dc8:	2881      	cmp	r0, #129	; 0x81
   19dca:	d219      	bcs.n	19e00 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   19dcc:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   19dd0:	ab02      	add	r3, sp, #8
   19dd2:	4418      	add	r0, r3
   19dd4:	2101      	movs	r1, #1
   19dd6:	e9cd 0200 	strd	r0, r2, [sp]
   19dda:	f248 025d 	movw	r2, #32861	; 0x805d
   19dde:	f2c0 0202 	movt	r2, #2
   19de2:	4660      	mov	r0, ip
   19de4:	2302      	movs	r3, #2
   19de6:	f7fe ff7b 	bl	18ce0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19dea:	b022      	add	sp, #136	; 0x88
   19dec:	bd80      	pop	{r7, pc}
   19dee:	207e      	movs	r0, #126	; 0x7e
   19df0:	227f      	movs	r2, #127	; 0x7f
   19df2:	2881      	cmp	r0, #129	; 0x81
   19df4:	d3ea      	bcc.n	19dcc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   19df6:	e003      	b.n	19e00 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   19df8:	207d      	movs	r0, #125	; 0x7d
   19dfa:	227e      	movs	r2, #126	; 0x7e
   19dfc:	2881      	cmp	r0, #129	; 0x81
   19dfe:	d3e5      	bcc.n	19dcc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   19e00:	2180      	movs	r1, #128	; 0x80
   19e02:	f7ff fb0a 	bl	1941a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   19e06:	defe      	udf	#254	; 0xfe

00019e08 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>:
   19e08:	b580      	push	{r7, lr}
   19e0a:	b0a2      	sub	sp, #136	; 0x88
   19e0c:	8800      	ldrh	r0, [r0, #0]
   19e0e:	468c      	mov	ip, r1
   19e10:	f000 020f 	and.w	r2, r0, #15
   19e14:	f102 0337 	add.w	r3, r2, #55	; 0x37
   19e18:	2a0a      	cmp	r2, #10
   19e1a:	bf38      	it	cc
   19e1c:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   19e20:	2200      	movs	r2, #0
   19e22:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   19e26:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   19e2a:	d02a      	beq.n	19e82 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x7a>
   19e2c:	0903      	lsrs	r3, r0, #4
   19e2e:	f003 030f 	and.w	r3, r3, #15
   19e32:	f103 0137 	add.w	r1, r3, #55	; 0x37
   19e36:	2b0a      	cmp	r3, #10
   19e38:	bf38      	it	cc
   19e3a:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   19e3e:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   19e42:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   19e46:	d031      	beq.n	19eac <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xa4>
   19e48:	0a01      	lsrs	r1, r0, #8
   19e4a:	f001 010f 	and.w	r1, r1, #15
   19e4e:	f101 0237 	add.w	r2, r1, #55	; 0x37
   19e52:	290a      	cmp	r1, #10
   19e54:	bf38      	it	cc
   19e56:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   19e5a:	2100      	movs	r1, #0
   19e5c:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   19e60:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   19e64:	d027      	beq.n	19eb6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xae>
   19e66:	0b00      	lsrs	r0, r0, #12
   19e68:	f100 0137 	add.w	r1, r0, #55	; 0x37
   19e6c:	280a      	cmp	r0, #10
   19e6e:	bf38      	it	cc
   19e70:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   19e74:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   19e78:	227d      	movs	r2, #125	; 0x7d
   19e7a:	207c      	movs	r0, #124	; 0x7c
   19e7c:	2881      	cmp	r0, #129	; 0x81
   19e7e:	d304      	bcc.n	19e8a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   19e80:	e01d      	b.n	19ebe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   19e82:	2280      	movs	r2, #128	; 0x80
   19e84:	207f      	movs	r0, #127	; 0x7f
   19e86:	2881      	cmp	r0, #129	; 0x81
   19e88:	d219      	bcs.n	19ebe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   19e8a:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   19e8e:	ab02      	add	r3, sp, #8
   19e90:	4418      	add	r0, r3
   19e92:	2101      	movs	r1, #1
   19e94:	e9cd 0200 	strd	r0, r2, [sp]
   19e98:	f248 025d 	movw	r2, #32861	; 0x805d
   19e9c:	f2c0 0202 	movt	r2, #2
   19ea0:	4660      	mov	r0, ip
   19ea2:	2302      	movs	r3, #2
   19ea4:	f7fe ff1c 	bl	18ce0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19ea8:	b022      	add	sp, #136	; 0x88
   19eaa:	bd80      	pop	{r7, pc}
   19eac:	207e      	movs	r0, #126	; 0x7e
   19eae:	227f      	movs	r2, #127	; 0x7f
   19eb0:	2881      	cmp	r0, #129	; 0x81
   19eb2:	d3ea      	bcc.n	19e8a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   19eb4:	e003      	b.n	19ebe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   19eb6:	207d      	movs	r0, #125	; 0x7d
   19eb8:	227e      	movs	r2, #126	; 0x7e
   19eba:	2881      	cmp	r0, #129	; 0x81
   19ebc:	d3e5      	bcc.n	19e8a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   19ebe:	2180      	movs	r1, #128	; 0x80
   19ec0:	f7ff faab 	bl	1941a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   19ec4:	defe      	udf	#254	; 0xfe

00019ec6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   19ec6:	b5b0      	push	{r4, r5, r7, lr}
   19ec8:	b0a2      	sub	sp, #136	; 0x88
   19eca:	6800      	ldr	r0, [r0, #0]
   19ecc:	f10d 0e08 	add.w	lr, sp, #8
   19ed0:	468c      	mov	ip, r1
   19ed2:	2381      	movs	r3, #129	; 0x81
   19ed4:	2100      	movs	r1, #0
   19ed6:	f000 020f 	and.w	r2, r0, #15
   19eda:	f102 0457 	add.w	r4, r2, #87	; 0x57
   19ede:	2a0a      	cmp	r2, #10
   19ee0:	bf38      	it	cc
   19ee2:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   19ee6:	eb0e 0203 	add.w	r2, lr, r3
   19eea:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   19eee:	f802 4c02 	strb.w	r4, [r2, #-2]
   19ef2:	d030      	beq.n	19f56 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   19ef4:	0904      	lsrs	r4, r0, #4
   19ef6:	f004 040f 	and.w	r4, r4, #15
   19efa:	f104 0557 	add.w	r5, r4, #87	; 0x57
   19efe:	2c0a      	cmp	r4, #10
   19f00:	bf38      	it	cc
   19f02:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19f06:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   19f0a:	f802 5c03 	strb.w	r5, [r2, #-3]
   19f0e:	d028      	beq.n	19f62 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   19f10:	0a04      	lsrs	r4, r0, #8
   19f12:	f004 040f 	and.w	r4, r4, #15
   19f16:	f104 0557 	add.w	r5, r4, #87	; 0x57
   19f1a:	2c0a      	cmp	r4, #10
   19f1c:	bf38      	it	cc
   19f1e:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19f22:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   19f26:	f802 5c04 	strb.w	r5, [r2, #-4]
   19f2a:	d01f      	beq.n	19f6c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   19f2c:	0b04      	lsrs	r4, r0, #12
   19f2e:	3b04      	subs	r3, #4
   19f30:	f004 040f 	and.w	r4, r4, #15
   19f34:	f104 0557 	add.w	r5, r4, #87	; 0x57
   19f38:	2c0a      	cmp	r4, #10
   19f3a:	bf38      	it	cc
   19f3c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19f40:	f802 5c05 	strb.w	r5, [r2, #-5]
   19f44:	0c02      	lsrs	r2, r0, #16
   19f46:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   19f4a:	4610      	mov	r0, r2
   19f4c:	d1c3      	bne.n	19ed6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   19f4e:	1e58      	subs	r0, r3, #1
   19f50:	2881      	cmp	r0, #129	; 0x81
   19f52:	d30f      	bcc.n	19f74 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   19f54:	e01e      	b.n	19f94 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   19f56:	1e59      	subs	r1, r3, #1
   19f58:	1e98      	subs	r0, r3, #2
   19f5a:	460b      	mov	r3, r1
   19f5c:	2881      	cmp	r0, #129	; 0x81
   19f5e:	d309      	bcc.n	19f74 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   19f60:	e018      	b.n	19f94 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   19f62:	1ed8      	subs	r0, r3, #3
   19f64:	3b02      	subs	r3, #2
   19f66:	2881      	cmp	r0, #129	; 0x81
   19f68:	d304      	bcc.n	19f74 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   19f6a:	e013      	b.n	19f94 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   19f6c:	1f18      	subs	r0, r3, #4
   19f6e:	3b03      	subs	r3, #3
   19f70:	2881      	cmp	r0, #129	; 0x81
   19f72:	d20f      	bcs.n	19f94 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   19f74:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   19f78:	f248 025d 	movw	r2, #32861	; 0x805d
   19f7c:	4470      	add	r0, lr
   19f7e:	f2c0 0202 	movt	r2, #2
   19f82:	e9cd 0100 	strd	r0, r1, [sp]
   19f86:	4660      	mov	r0, ip
   19f88:	2101      	movs	r1, #1
   19f8a:	2302      	movs	r3, #2
   19f8c:	f7fe fea8 	bl	18ce0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19f90:	b022      	add	sp, #136	; 0x88
   19f92:	bdb0      	pop	{r4, r5, r7, pc}
   19f94:	2180      	movs	r1, #128	; 0x80
   19f96:	f7ff fa40 	bl	1941a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   19f9a:	defe      	udf	#254	; 0xfe

00019f9c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   19f9c:	b5b0      	push	{r4, r5, r7, lr}
   19f9e:	b0a2      	sub	sp, #136	; 0x88
   19fa0:	6800      	ldr	r0, [r0, #0]
   19fa2:	f10d 0e08 	add.w	lr, sp, #8
   19fa6:	468c      	mov	ip, r1
   19fa8:	2381      	movs	r3, #129	; 0x81
   19faa:	2100      	movs	r1, #0
   19fac:	f000 020f 	and.w	r2, r0, #15
   19fb0:	f102 0437 	add.w	r4, r2, #55	; 0x37
   19fb4:	2a0a      	cmp	r2, #10
   19fb6:	bf38      	it	cc
   19fb8:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   19fbc:	eb0e 0203 	add.w	r2, lr, r3
   19fc0:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   19fc4:	f802 4c02 	strb.w	r4, [r2, #-2]
   19fc8:	d030      	beq.n	1a02c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   19fca:	0904      	lsrs	r4, r0, #4
   19fcc:	f004 040f 	and.w	r4, r4, #15
   19fd0:	f104 0537 	add.w	r5, r4, #55	; 0x37
   19fd4:	2c0a      	cmp	r4, #10
   19fd6:	bf38      	it	cc
   19fd8:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19fdc:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   19fe0:	f802 5c03 	strb.w	r5, [r2, #-3]
   19fe4:	d028      	beq.n	1a038 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   19fe6:	0a04      	lsrs	r4, r0, #8
   19fe8:	f004 040f 	and.w	r4, r4, #15
   19fec:	f104 0537 	add.w	r5, r4, #55	; 0x37
   19ff0:	2c0a      	cmp	r4, #10
   19ff2:	bf38      	it	cc
   19ff4:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19ff8:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   19ffc:	f802 5c04 	strb.w	r5, [r2, #-4]
   1a000:	d01f      	beq.n	1a042 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   1a002:	0b04      	lsrs	r4, r0, #12
   1a004:	3b04      	subs	r3, #4
   1a006:	f004 040f 	and.w	r4, r4, #15
   1a00a:	f104 0537 	add.w	r5, r4, #55	; 0x37
   1a00e:	2c0a      	cmp	r4, #10
   1a010:	bf38      	it	cc
   1a012:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1a016:	f802 5c05 	strb.w	r5, [r2, #-5]
   1a01a:	0c02      	lsrs	r2, r0, #16
   1a01c:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   1a020:	4610      	mov	r0, r2
   1a022:	d1c3      	bne.n	19fac <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   1a024:	1e58      	subs	r0, r3, #1
   1a026:	2881      	cmp	r0, #129	; 0x81
   1a028:	d30f      	bcc.n	1a04a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   1a02a:	e01e      	b.n	1a06a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1a02c:	1e59      	subs	r1, r3, #1
   1a02e:	1e98      	subs	r0, r3, #2
   1a030:	460b      	mov	r3, r1
   1a032:	2881      	cmp	r0, #129	; 0x81
   1a034:	d309      	bcc.n	1a04a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   1a036:	e018      	b.n	1a06a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1a038:	1ed8      	subs	r0, r3, #3
   1a03a:	3b02      	subs	r3, #2
   1a03c:	2881      	cmp	r0, #129	; 0x81
   1a03e:	d304      	bcc.n	1a04a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   1a040:	e013      	b.n	1a06a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1a042:	1f18      	subs	r0, r3, #4
   1a044:	3b03      	subs	r3, #3
   1a046:	2881      	cmp	r0, #129	; 0x81
   1a048:	d20f      	bcs.n	1a06a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1a04a:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   1a04e:	f248 025d 	movw	r2, #32861	; 0x805d
   1a052:	4470      	add	r0, lr
   1a054:	f2c0 0202 	movt	r2, #2
   1a058:	e9cd 0100 	strd	r0, r1, [sp]
   1a05c:	4660      	mov	r0, ip
   1a05e:	2101      	movs	r1, #1
   1a060:	2302      	movs	r3, #2
   1a062:	f7fe fe3d 	bl	18ce0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1a066:	b022      	add	sp, #136	; 0x88
   1a068:	bdb0      	pop	{r4, r5, r7, pc}
   1a06a:	2180      	movs	r1, #128	; 0x80
   1a06c:	f7ff f9d5 	bl	1941a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1a070:	defe      	udf	#254	; 0xfe

0001a072 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   1a072:	b580      	push	{r7, lr}
   1a074:	b08c      	sub	sp, #48	; 0x30
   1a076:	7802      	ldrb	r2, [r0, #0]
   1a078:	2a64      	cmp	r2, #100	; 0x64
   1a07a:	d314      	bcc.n	1a0a6 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   1a07c:	f248 501f 	movw	r0, #34079	; 0x851f
   1a080:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   1a084:	fba2 0300 	umull	r0, r3, r2, r0
   1a088:	2064      	movs	r0, #100	; 0x64
   1a08a:	095b      	lsrs	r3, r3, #5
   1a08c:	fb03 2010 	mls	r0, r3, r0, r2
   1a090:	f248 025f 	movw	r2, #32863	; 0x805f
   1a094:	f2c0 0202 	movt	r2, #2
   1a098:	b2c0      	uxtb	r0, r0
   1a09a:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1a09e:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1a0a2:	2024      	movs	r0, #36	; 0x24
   1a0a4:	e003      	b.n	1a0ae <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   1a0a6:	2a0a      	cmp	r2, #10
   1a0a8:	d206      	bcs.n	1a0b8 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   1a0aa:	2026      	movs	r0, #38	; 0x26
   1a0ac:	4613      	mov	r3, r2
   1a0ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1a0b2:	ab02      	add	r3, sp, #8
   1a0b4:	541a      	strb	r2, [r3, r0]
   1a0b6:	e008      	b.n	1a0ca <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   1a0b8:	f248 005f 	movw	r0, #32863	; 0x805f
   1a0bc:	f2c0 0002 	movt	r0, #2
   1a0c0:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   1a0c4:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1a0c8:	2025      	movs	r0, #37	; 0x25
   1a0ca:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   1a0ce:	ab02      	add	r3, sp, #8
   1a0d0:	4418      	add	r0, r3
   1a0d2:	2300      	movs	r3, #0
   1a0d4:	e9cd 0200 	strd	r0, r2, [sp]
   1a0d8:	f647 6224 	movw	r2, #32292	; 0x7e24
   1a0dc:	4608      	mov	r0, r1
   1a0de:	f2c0 0202 	movt	r2, #2
   1a0e2:	2101      	movs	r1, #1
   1a0e4:	f7fe fdfc 	bl	18ce0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1a0e8:	b00c      	add	sp, #48	; 0x30
   1a0ea:	bd80      	pop	{r7, pc}

0001a0ec <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>:
   1a0ec:	b580      	push	{r7, lr}
   1a0ee:	b08c      	sub	sp, #48	; 0x30
   1a0f0:	8800      	ldrh	r0, [r0, #0]
   1a0f2:	f242 720f 	movw	r2, #9999	; 0x270f
   1a0f6:	468e      	mov	lr, r1
   1a0f8:	4290      	cmp	r0, r2
   1a0fa:	d924      	bls.n	1a146 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x5a>
   1a0fc:	f241 7259 	movw	r2, #5977	; 0x1759
   1a100:	f248 511f 	movw	r1, #34079	; 0x851f
   1a104:	f2cd 12b7 	movt	r2, #53687	; 0xd1b7
   1a108:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   1a10c:	fba0 2302 	umull	r2, r3, r0, r2
   1a110:	0b5a      	lsrs	r2, r3, #13
   1a112:	f242 7310 	movw	r3, #10000	; 0x2710
   1a116:	fb02 0013 	mls	r0, r2, r3, r0
   1a11a:	b283      	uxth	r3, r0
   1a11c:	fba3 1301 	umull	r1, r3, r3, r1
   1a120:	0959      	lsrs	r1, r3, #5
   1a122:	2364      	movs	r3, #100	; 0x64
   1a124:	fb01 0013 	mls	r0, r1, r3, r0
   1a128:	f248 035f 	movw	r3, #32863	; 0x805f
   1a12c:	f2c0 0302 	movt	r3, #2
   1a130:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   1a134:	f8ad 102b 	strh.w	r1, [sp, #43]	; 0x2b
   1a138:	b280      	uxth	r0, r0
   1a13a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1a13e:	2323      	movs	r3, #35	; 0x23
   1a140:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1a144:	e024      	b.n	1a190 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa4>
   1a146:	f248 0c5f 	movw	ip, #32863	; 0x805f
   1a14a:	2863      	cmp	r0, #99	; 0x63
   1a14c:	f2c0 0c02 	movt	ip, #2
   1a150:	d919      	bls.n	1a186 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x9a>
   1a152:	f248 511f 	movw	r1, #34079	; 0x851f
   1a156:	2325      	movs	r3, #37	; 0x25
   1a158:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   1a15c:	fba0 1201 	umull	r1, r2, r0, r1
   1a160:	0951      	lsrs	r1, r2, #5
   1a162:	2264      	movs	r2, #100	; 0x64
   1a164:	fb01 0012 	mls	r0, r1, r2, r0
   1a168:	b280      	uxth	r0, r0
   1a16a:	f83c 0010 	ldrh.w	r0, [ip, r0, lsl #1]
   1a16e:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1a172:	4608      	mov	r0, r1
   1a174:	b282      	uxth	r2, r0
   1a176:	2a0a      	cmp	r2, #10
   1a178:	d309      	bcc.n	1a18e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa2>
   1a17a:	f83c 1012 	ldrh.w	r1, [ip, r2, lsl #1]
   1a17e:	1e98      	subs	r0, r3, #2
   1a180:	aa02      	add	r2, sp, #8
   1a182:	5211      	strh	r1, [r2, r0]
   1a184:	e009      	b.n	1a19a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xae>
   1a186:	2327      	movs	r3, #39	; 0x27
   1a188:	b282      	uxth	r2, r0
   1a18a:	2a0a      	cmp	r2, #10
   1a18c:	d2f5      	bcs.n	1a17a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x8e>
   1a18e:	4602      	mov	r2, r0
   1a190:	1e58      	subs	r0, r3, #1
   1a192:	f102 0130 	add.w	r1, r2, #48	; 0x30
   1a196:	aa02      	add	r2, sp, #8
   1a198:	5411      	strb	r1, [r2, r0]
   1a19a:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   1a19e:	aa02      	add	r2, sp, #8
   1a1a0:	4410      	add	r0, r2
   1a1a2:	f647 6224 	movw	r2, #32292	; 0x7e24
   1a1a6:	e9cd 0100 	strd	r0, r1, [sp]
   1a1aa:	f2c0 0202 	movt	r2, #2
   1a1ae:	4670      	mov	r0, lr
   1a1b0:	2101      	movs	r1, #1
   1a1b2:	2300      	movs	r3, #0
   1a1b4:	f7fe fd94 	bl	18ce0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1a1b8:	b00c      	add	sp, #48	; 0x30
   1a1ba:	bd80      	pop	{r7, pc}

0001a1bc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   1a1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1c0:	b08f      	sub	sp, #60	; 0x3c
   1a1c2:	6805      	ldr	r5, [r0, #0]
   1a1c4:	f248 581f 	movw	r8, #34079	; 0x851f
   1a1c8:	460e      	mov	r6, r1
   1a1ca:	f248 015f 	movw	r1, #32863	; 0x805f
   1a1ce:	2d00      	cmp	r5, #0
   1a1d0:	f242 7910 	movw	r9, #10000	; 0x2710
   1a1d4:	462b      	mov	r3, r5
   1a1d6:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   1a1da:	bf48      	it	mi
   1a1dc:	426b      	negmi	r3, r5
   1a1de:	454b      	cmp	r3, r9
   1a1e0:	f2c0 0102 	movt	r1, #2
   1a1e4:	d33a      	bcc.n	1a25c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   1a1e6:	f241 7a59 	movw	sl, #5977	; 0x1759
   1a1ea:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   1a1ee:	f10d 0e14 	add.w	lr, sp, #20
   1a1f2:	2400      	movs	r4, #0
   1a1f4:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   1a1f8:	f04f 0b64 	mov.w	fp, #100	; 0x64
   1a1fc:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   1a200:	e9cd 5603 	strd	r5, r6, [sp, #12]
   1a204:	fba3 250a 	umull	r2, r5, r3, sl
   1a208:	eb0e 0704 	add.w	r7, lr, r4
   1a20c:	3c04      	subs	r4, #4
   1a20e:	4283      	cmp	r3, r0
   1a210:	ea4f 3255 	mov.w	r2, r5, lsr #13
   1a214:	fb02 3519 	mls	r5, r2, r9, r3
   1a218:	4613      	mov	r3, r2
   1a21a:	b2ae      	uxth	r6, r5
   1a21c:	fba6 6c08 	umull	r6, ip, r6, r8
   1a220:	ea4f 165c 	mov.w	r6, ip, lsr #5
   1a224:	fb06 551b 	mls	r5, r6, fp, r5
   1a228:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   1a22c:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   1a230:	b2ad      	uxth	r5, r5
   1a232:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   1a236:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   1a23a:	d8e3      	bhi.n	1a204 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   1a23c:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   1a240:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1a244:	4613      	mov	r3, r2
   1a246:	2b63      	cmp	r3, #99	; 0x63
   1a248:	dc0b      	bgt.n	1a262 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   1a24a:	461a      	mov	r2, r3
   1a24c:	2a0a      	cmp	r2, #10
   1a24e:	db17      	blt.n	1a280 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   1a250:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   1a254:	3802      	subs	r0, #2
   1a256:	aa05      	add	r2, sp, #20
   1a258:	5211      	strh	r1, [r2, r0]
   1a25a:	e016      	b.n	1a28a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   1a25c:	2027      	movs	r0, #39	; 0x27
   1a25e:	2b63      	cmp	r3, #99	; 0x63
   1a260:	ddf3      	ble.n	1a24a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   1a262:	b29a      	uxth	r2, r3
   1a264:	3802      	subs	r0, #2
   1a266:	fba2 2708 	umull	r2, r7, r2, r8
   1a26a:	097a      	lsrs	r2, r7, #5
   1a26c:	2764      	movs	r7, #100	; 0x64
   1a26e:	fb02 3317 	mls	r3, r2, r7, r3
   1a272:	af05      	add	r7, sp, #20
   1a274:	b29b      	uxth	r3, r3
   1a276:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1a27a:	523b      	strh	r3, [r7, r0]
   1a27c:	2a0a      	cmp	r2, #10
   1a27e:	dae7      	bge.n	1a250 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   1a280:	3801      	subs	r0, #1
   1a282:	f102 0130 	add.w	r1, r2, #48	; 0x30
   1a286:	aa05      	add	r2, sp, #20
   1a288:	5411      	strb	r1, [r2, r0]
   1a28a:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   1a28e:	aa05      	add	r2, sp, #20
   1a290:	4410      	add	r0, r2
   1a292:	f647 6224 	movw	r2, #32292	; 0x7e24
   1a296:	e9cd 0100 	strd	r0, r1, [sp]
   1a29a:	43e8      	mvns	r0, r5
   1a29c:	0fc1      	lsrs	r1, r0, #31
   1a29e:	f2c0 0202 	movt	r2, #2
   1a2a2:	4630      	mov	r0, r6
   1a2a4:	2300      	movs	r3, #0
   1a2a6:	f7fe fd1b 	bl	18ce0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1a2aa:	b00f      	add	sp, #60	; 0x3c
   1a2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a2b0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   1a2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2b4:	b08d      	sub	sp, #52	; 0x34
   1a2b6:	468c      	mov	ip, r1
   1a2b8:	6801      	ldr	r1, [r0, #0]
   1a2ba:	f248 5e1f 	movw	lr, #34079	; 0x851f
   1a2be:	f248 005f 	movw	r0, #32863	; 0x805f
   1a2c2:	f242 7810 	movw	r8, #10000	; 0x2710
   1a2c6:	4541      	cmp	r1, r8
   1a2c8:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   1a2cc:	f2c0 0002 	movt	r0, #2
   1a2d0:	d337      	bcc.n	1a342 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   1a2d2:	f241 7959 	movw	r9, #5977	; 0x1759
   1a2d6:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   1a2da:	f10d 0b0c 	add.w	fp, sp, #12
   1a2de:	2300      	movs	r3, #0
   1a2e0:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   1a2e4:	f04f 0a64 	mov.w	sl, #100	; 0x64
   1a2e8:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   1a2ec:	fba1 2409 	umull	r2, r4, r1, r9
   1a2f0:	42b9      	cmp	r1, r7
   1a2f2:	ea4f 3254 	mov.w	r2, r4, lsr #13
   1a2f6:	fb02 1418 	mls	r4, r2, r8, r1
   1a2fa:	4611      	mov	r1, r2
   1a2fc:	b2a5      	uxth	r5, r4
   1a2fe:	fba5 560e 	umull	r5, r6, r5, lr
   1a302:	ea4f 1556 	mov.w	r5, r6, lsr #5
   1a306:	eb0b 0603 	add.w	r6, fp, r3
   1a30a:	fb05 441a 	mls	r4, r5, sl, r4
   1a30e:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   1a312:	f1a3 0304 	sub.w	r3, r3, #4
   1a316:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   1a31a:	b2a4      	uxth	r4, r4
   1a31c:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   1a320:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   1a324:	d8e2      	bhi.n	1a2ec <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   1a326:	f103 0427 	add.w	r4, r3, #39	; 0x27
   1a32a:	4611      	mov	r1, r2
   1a32c:	2963      	cmp	r1, #99	; 0x63
   1a32e:	dc0b      	bgt.n	1a348 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   1a330:	460b      	mov	r3, r1
   1a332:	2b0a      	cmp	r3, #10
   1a334:	db17      	blt.n	1a366 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   1a336:	1ea1      	subs	r1, r4, #2
   1a338:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   1a33c:	aa03      	add	r2, sp, #12
   1a33e:	5250      	strh	r0, [r2, r1]
   1a340:	e016      	b.n	1a370 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   1a342:	2427      	movs	r4, #39	; 0x27
   1a344:	2963      	cmp	r1, #99	; 0x63
   1a346:	ddf3      	ble.n	1a330 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   1a348:	b28a      	uxth	r2, r1
   1a34a:	3c02      	subs	r4, #2
   1a34c:	fba2 230e 	umull	r2, r3, r2, lr
   1a350:	2264      	movs	r2, #100	; 0x64
   1a352:	095b      	lsrs	r3, r3, #5
   1a354:	fb03 1112 	mls	r1, r3, r2, r1
   1a358:	aa03      	add	r2, sp, #12
   1a35a:	b289      	uxth	r1, r1
   1a35c:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   1a360:	5311      	strh	r1, [r2, r4]
   1a362:	2b0a      	cmp	r3, #10
   1a364:	dae7      	bge.n	1a336 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   1a366:	1e61      	subs	r1, r4, #1
   1a368:	aa03      	add	r2, sp, #12
   1a36a:	f103 0030 	add.w	r0, r3, #48	; 0x30
   1a36e:	5450      	strb	r0, [r2, r1]
   1a370:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   1a374:	aa03      	add	r2, sp, #12
   1a376:	4411      	add	r1, r2
   1a378:	f647 6224 	movw	r2, #32292	; 0x7e24
   1a37c:	e9cd 1000 	strd	r1, r0, [sp]
   1a380:	f2c0 0202 	movt	r2, #2
   1a384:	4660      	mov	r0, ip
   1a386:	2101      	movs	r1, #1
   1a388:	2300      	movs	r3, #0
   1a38a:	f7fe fca9 	bl	18ce0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1a38e:	b00d      	add	sp, #52	; 0x34
   1a390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a394 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   1a394:	e9d0 2000 	ldrd	r2, r0, [r0]
   1a398:	68c3      	ldr	r3, [r0, #12]
   1a39a:	4610      	mov	r0, r2
   1a39c:	4718      	bx	r3

0001a39e <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   1a39e:	460b      	mov	r3, r1
   1a3a0:	e9d0 1200 	ldrd	r1, r2, [r0]
   1a3a4:	4618      	mov	r0, r3
   1a3a6:	f7fe bde3 	b.w	18f70 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
	...

0001a3ac <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   1a3ac:	4b07      	ldr	r3, [pc, #28]	; (1a3cc <__semihost+0x20>)
   1a3ae:	781b      	ldrb	r3, [r3, #0]
   1a3b0:	b14b      	cbz	r3, 1a3c6 <__semihost+0x1a>
static int __semihost(int command, void* message) {
   1a3b2:	b410      	push	{r4}
   1a3b4:	4602      	mov	r2, r0
   1a3b6:	460c      	mov	r4, r1
    __asm( 
   1a3b8:	4610      	mov	r0, r2
   1a3ba:	4621      	mov	r1, r4
   1a3bc:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   1a3be:	2000      	movs	r0, #0
}
   1a3c0:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a3c4:	4770      	bx	lr
    if (!log_enabled) return -1;
   1a3c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1a3ca:	4770      	bx	lr
   1a3cc:	20000100 	.word	0x20000100

0001a3d0 <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   1a3d0:	4b02      	ldr	r3, [pc, #8]	; (1a3dc <debugger_connected+0xc>)
   1a3d2:	6818      	ldr	r0, [r3, #0]
}
   1a3d4:	f000 0001 	and.w	r0, r0, #1
   1a3d8:	4770      	bx	lr
   1a3da:	bf00      	nop
   1a3dc:	e000edf0 	.word	0xe000edf0

0001a3e0 <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   1a3e0:	b570      	push	{r4, r5, r6, lr}
   1a3e2:	b084      	sub	sp, #16
   1a3e4:	4606      	mov	r6, r0
   1a3e6:	460d      	mov	r5, r1
   1a3e8:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   1a3ea:	f7ff fff1 	bl	1a3d0 <debugger_connected>
   1a3ee:	4603      	mov	r3, r0
   1a3f0:	b108      	cbz	r0, 1a3f6 <semihost_write+0x16>
    if (length == 0) { return 0; }
   1a3f2:	b91c      	cbnz	r4, 1a3fc <semihost_write+0x1c>
   1a3f4:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   1a3f6:	4618      	mov	r0, r3
   1a3f8:	b004      	add	sp, #16
   1a3fa:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   1a3fc:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   1a3fe:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   1a400:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   1a402:	a901      	add	r1, sp, #4
   1a404:	2005      	movs	r0, #5
   1a406:	f7ff ffd1 	bl	1a3ac <__semihost>
   1a40a:	4603      	mov	r3, r0
   1a40c:	e7f3      	b.n	1a3f6 <semihost_write+0x16>
	...

0001a410 <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   1a410:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   1a412:	4b0e      	ldr	r3, [pc, #56]	; (1a44c <console_flush+0x3c>)
   1a414:	781b      	ldrb	r3, [r3, #0]
   1a416:	b1bb      	cbz	r3, 1a448 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   1a418:	4b0d      	ldr	r3, [pc, #52]	; (1a450 <console_flush+0x40>)
   1a41a:	681d      	ldr	r5, [r3, #0]
   1a41c:	b1a5      	cbz	r5, 1a448 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   1a41e:	4b0d      	ldr	r3, [pc, #52]	; (1a454 <console_flush+0x44>)
   1a420:	685b      	ldr	r3, [r3, #4]
   1a422:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   1a426:	b97b      	cbnz	r3, 1a448 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   1a428:	4b09      	ldr	r3, [pc, #36]	; (1a450 <console_flush+0x40>)
   1a42a:	2200      	movs	r2, #0
   1a42c:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   1a42e:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   1a430:	e005      	b.n	1a43e <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   1a432:	88e2      	ldrh	r2, [r4, #6]
   1a434:	6821      	ldr	r1, [r4, #0]
   1a436:	2002      	movs	r0, #2
   1a438:	f7ff ffd2 	bl	1a3e0 <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   1a43c:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   1a43e:	2c00      	cmp	r4, #0
   1a440:	d1f7      	bne.n	1a432 <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   1a442:	4628      	mov	r0, r5
   1a444:	f001 fbfc 	bl	1bc40 <os_mbuf_free_chain>
}
   1a448:	bd38      	pop	{r3, r4, r5, pc}
   1a44a:	bf00      	nop
   1a44c:	20000100 	.word	0x20000100
   1a450:	20006f04 	.word	0x20006f04
   1a454:	e000ed00 	.word	0xe000ed00

0001a458 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   1a458:	b508      	push	{r3, lr}
   1a45a:	f7ff ffd9 	bl	1a410 <console_flush>
   1a45e:	bd08      	pop	{r3, pc}

0001a460 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   1a460:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   1a462:	4b12      	ldr	r3, [pc, #72]	; (1a4ac <console_buffer+0x4c>)
   1a464:	781b      	ldrb	r3, [r3, #0]
   1a466:	b903      	cbnz	r3, 1a46a <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   1a468:	bd38      	pop	{r3, r4, r5, pc}
   1a46a:	460d      	mov	r5, r1
   1a46c:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   1a46e:	f7ff ffaf 	bl	1a3d0 <debugger_connected>
   1a472:	2800      	cmp	r0, #0
   1a474:	d0f8      	beq.n	1a468 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   1a476:	4b0e      	ldr	r3, [pc, #56]	; (1a4b0 <console_buffer+0x50>)
   1a478:	681b      	ldr	r3, [r3, #0]
   1a47a:	b173      	cbz	r3, 1a49a <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   1a47c:	4b0c      	ldr	r3, [pc, #48]	; (1a4b0 <console_buffer+0x50>)
   1a47e:	6818      	ldr	r0, [r3, #0]
   1a480:	f001 fbf0 	bl	1bc64 <os_mbuf_len>
   1a484:	4428      	add	r0, r5
   1a486:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   1a48a:	d2ed      	bcs.n	1a468 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   1a48c:	b2aa      	uxth	r2, r5
   1a48e:	4621      	mov	r1, r4
   1a490:	4b07      	ldr	r3, [pc, #28]	; (1a4b0 <console_buffer+0x50>)
   1a492:	6818      	ldr	r0, [r3, #0]
   1a494:	f001 fbf0 	bl	1bc78 <os_mbuf_append>
   1a498:	e7e6      	b.n	1a468 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   1a49a:	2100      	movs	r1, #0
   1a49c:	b2a8      	uxth	r0, r5
   1a49e:	f001 fd93 	bl	1bfc8 <os_msys_get_pkthdr>
   1a4a2:	4b03      	ldr	r3, [pc, #12]	; (1a4b0 <console_buffer+0x50>)
   1a4a4:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   1a4a6:	2800      	cmp	r0, #0
   1a4a8:	d1e8      	bne.n	1a47c <console_buffer+0x1c>
   1a4aa:	e7dd      	b.n	1a468 <console_buffer+0x8>
   1a4ac:	20000100 	.word	0x20000100
   1a4b0:	20006f04 	.word	0x20006f04

0001a4b4 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   1a4b4:	b500      	push	{lr}
   1a4b6:	b083      	sub	sp, #12
   1a4b8:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   1a4bc:	280d      	cmp	r0, #13
   1a4be:	d004      	beq.n	1a4ca <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   1a4c0:	2101      	movs	r1, #1
   1a4c2:	f10d 0007 	add.w	r0, sp, #7
   1a4c6:	f7ff ffcb 	bl	1a460 <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   1a4ca:	b003      	add	sp, #12
   1a4cc:	f85d fb04 	ldr.w	pc, [sp], #4

0001a4d0 <console_printhex>:
void console_printhex(uint8_t v) {
   1a4d0:	b510      	push	{r4, lr}
   1a4d2:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   1a4d4:	2310      	movs	r3, #16
    int length = 0;
   1a4d6:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   1a4d8:	e005      	b.n	1a4e6 <console_printhex+0x16>
        v = v % divisor;
   1a4da:	fbb0 f1f3 	udiv	r1, r0, r3
   1a4de:	fb03 0011 	mls	r0, r3, r1, r0
   1a4e2:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   1a4e4:	091b      	lsrs	r3, r3, #4
   1a4e6:	b18b      	cbz	r3, 1a50c <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   1a4e8:	fbb0 f4f3 	udiv	r4, r0, r3
   1a4ec:	f104 0130 	add.w	r1, r4, #48	; 0x30
   1a4f0:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   1a4f2:	2939      	cmp	r1, #57	; 0x39
   1a4f4:	d902      	bls.n	1a4fc <console_printhex+0x2c>
   1a4f6:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1a4fa:	b2c9      	uxtb	r1, r1
            if (length < size) {
   1a4fc:	2a02      	cmp	r2, #2
   1a4fe:	dcec      	bgt.n	1a4da <console_printhex+0xa>
                buffer[length++] = digit;
   1a500:	ac02      	add	r4, sp, #8
   1a502:	4414      	add	r4, r2
   1a504:	f804 1c04 	strb.w	r1, [r4, #-4]
   1a508:	3201      	adds	r2, #1
   1a50a:	e7e6      	b.n	1a4da <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   1a50c:	b92a      	cbnz	r2, 1a51a <console_printhex+0x4a>
   1a50e:	ab02      	add	r3, sp, #8
   1a510:	4413      	add	r3, r2
   1a512:	2130      	movs	r1, #48	; 0x30
   1a514:	f803 1c04 	strb.w	r1, [r3, #-4]
   1a518:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   1a51a:	2a02      	cmp	r2, #2
   1a51c:	dc04      	bgt.n	1a528 <console_printhex+0x58>
   1a51e:	ab02      	add	r3, sp, #8
   1a520:	441a      	add	r2, r3
   1a522:	2300      	movs	r3, #0
   1a524:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   1a528:	2300      	movs	r3, #0
   1a52a:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   1a52e:	a801      	add	r0, sp, #4
   1a530:	f002 fb73 	bl	1cc1a <strlen>
   1a534:	4601      	mov	r1, r0
   1a536:	a801      	add	r0, sp, #4
   1a538:	f7ff ff92 	bl	1a460 <console_buffer>
}
   1a53c:	b002      	add	sp, #8
   1a53e:	bd10      	pop	{r4, pc}

0001a540 <console_printint>:
void console_printint(int i) {
   1a540:	b508      	push	{r3, lr}
    console_printf("%d", i);
   1a542:	4601      	mov	r1, r0
   1a544:	4801      	ldr	r0, [pc, #4]	; (1a54c <console_printint+0xc>)
   1a546:	f000 f873 	bl	1a630 <console_printf>
}
   1a54a:	bd08      	pop	{r3, pc}
   1a54c:	00029024 	.word	0x00029024

0001a550 <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   1a550:	b180      	cbz	r0, 1a574 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   1a552:	b570      	push	{r4, r5, r6, lr}
   1a554:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   1a556:	b161      	cbz	r1, 1a572 <console_dump+0x22>
   1a558:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   1a55a:	2400      	movs	r4, #0
   1a55c:	e007      	b.n	1a56e <console_dump+0x1e>
   1a55e:	5d30      	ldrb	r0, [r6, r4]
   1a560:	f7ff ffb6 	bl	1a4d0 <console_printhex>
   1a564:	2101      	movs	r1, #1
   1a566:	4804      	ldr	r0, [pc, #16]	; (1a578 <console_dump+0x28>)
   1a568:	f7ff ff7a 	bl	1a460 <console_buffer>
   1a56c:	3401      	adds	r4, #1
   1a56e:	42ac      	cmp	r4, r5
   1a570:	d3f5      	bcc.n	1a55e <console_dump+0xe>
}
   1a572:	bd70      	pop	{r4, r5, r6, pc}
   1a574:	4770      	bx	lr
   1a576:	bf00      	nop
   1a578:	00029020 	.word	0x00029020

0001a57c <console_out_nolock>:

int console_out_nolock(int character) {
   1a57c:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   1a57e:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   1a580:	4b0b      	ldr	r3, [pc, #44]	; (1a5b0 <console_out_nolock+0x34>)
   1a582:	781b      	ldrb	r3, [r3, #0]
   1a584:	b953      	cbnz	r3, 1a59c <console_out_nolock+0x20>
   1a586:	4604      	mov	r4, r0
    if ('\n' == c) {
   1a588:	2d0a      	cmp	r5, #10
   1a58a:	d009      	beq.n	1a5a0 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   1a58c:	4b09      	ldr	r3, [pc, #36]	; (1a5b4 <console_out_nolock+0x38>)
   1a58e:	2201      	movs	r2, #1
   1a590:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   1a592:	4628      	mov	r0, r5
   1a594:	f7ff ff8e 	bl	1a4b4 <semihosting_console_write_ch>
    return character;
   1a598:	4620      	mov	r0, r4
}
   1a59a:	bd38      	pop	{r3, r4, r5, pc}
   1a59c:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   1a59e:	e7fc      	b.n	1a59a <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   1a5a0:	200d      	movs	r0, #13
   1a5a2:	f7ff ff87 	bl	1a4b4 <semihosting_console_write_ch>
        console_is_midline = 0;
   1a5a6:	4b03      	ldr	r3, [pc, #12]	; (1a5b4 <console_out_nolock+0x38>)
   1a5a8:	2200      	movs	r2, #0
   1a5aa:	601a      	str	r2, [r3, #0]
   1a5ac:	e7f1      	b.n	1a592 <console_out_nolock+0x16>
   1a5ae:	bf00      	nop
   1a5b0:	2000ddb4 	.word	0x2000ddb4
   1a5b4:	2000ddb8 	.word	0x2000ddb8

0001a5b8 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   1a5b8:	2000      	movs	r0, #0
   1a5ba:	4770      	bx	lr

0001a5bc <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   1a5bc:	b570      	push	{r4, r5, r6, lr}
   1a5be:	4606      	mov	r6, r0
   1a5c0:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   1a5c2:	2400      	movs	r4, #0
   1a5c4:	42ac      	cmp	r4, r5
   1a5c6:	da07      	bge.n	1a5d8 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   1a5c8:	5d30      	ldrb	r0, [r6, r4]
   1a5ca:	f7ff ffd7 	bl	1a57c <console_out_nolock>
   1a5ce:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1a5d2:	d001      	beq.n	1a5d8 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   1a5d4:	3401      	adds	r4, #1
   1a5d6:	e7f5      	b.n	1a5c4 <console_write+0x8>
    }
}
   1a5d8:	bd70      	pop	{r4, r5, r6, pc}

0001a5da <console_blocking_mode>:

void console_blocking_mode(void) {
   1a5da:	b508      	push	{r3, lr}
    disable_buffer();
   1a5dc:	f7ff ff3c 	bl	1a458 <disable_buffer>
}
   1a5e0:	bd08      	pop	{r3, pc}
	...

0001a5e4 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   1a5e4:	b510      	push	{r4, lr}
   1a5e6:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1a5e8:	4b0d      	ldr	r3, [pc, #52]	; (1a620 <console_pkg_init+0x3c>)
   1a5ea:	781b      	ldrb	r3, [r3, #0]
   1a5ec:	b193      	cbz	r3, 1a614 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   1a5ee:	480d      	ldr	r0, [pc, #52]	; (1a624 <console_pkg_init+0x40>)
   1a5f0:	f001 f9fa 	bl	1b9e8 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   1a5f4:	480c      	ldr	r0, [pc, #48]	; (1a628 <console_pkg_init+0x44>)
   1a5f6:	f001 fd15 	bl	1c024 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   1a5fa:	f7ff ffdd 	bl	1a5b8 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a5fe:	b138      	cbz	r0, 1a610 <console_pkg_init+0x2c>
   1a600:	2000      	movs	r0, #0
   1a602:	9000      	str	r0, [sp, #0]
   1a604:	4b09      	ldr	r3, [pc, #36]	; (1a62c <console_pkg_init+0x48>)
   1a606:	681c      	ldr	r4, [r3, #0]
   1a608:	4603      	mov	r3, r0
   1a60a:	4602      	mov	r2, r0
   1a60c:	4601      	mov	r1, r0
   1a60e:	47a0      	blx	r4
}
   1a610:	b002      	add	sp, #8
   1a612:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1a614:	461a      	mov	r2, r3
   1a616:	4619      	mov	r1, r3
   1a618:	4618      	mov	r0, r3
   1a61a:	f000 fed1 	bl	1b3c0 <__assert_func>
   1a61e:	bf00      	nop
   1a620:	2000ddbc 	.word	0x2000ddbc
   1a624:	20006f08 	.word	0x20006f08
   1a628:	20006f18 	.word	0x20006f18
   1a62c:	20000104 	.word	0x20000104

0001a630 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   1a630:	b40f      	push	{r0, r1, r2, r3}
   1a632:	b510      	push	{r4, lr}
   1a634:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   1a636:	f000 f81f 	bl	1a678 <console_get_ticks>
   1a63a:	b160      	cbz	r0, 1a656 <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   1a63c:	4b0c      	ldr	r3, [pc, #48]	; (1a670 <console_printf+0x40>)
   1a63e:	681b      	ldr	r3, [r3, #0]
   1a640:	b10b      	cbz	r3, 1a646 <console_printf+0x16>
    num_chars = 0;
   1a642:	2400      	movs	r4, #0
   1a644:	e008      	b.n	1a658 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   1a646:	f002 f8d9 	bl	1c7fc <os_time_get>
   1a64a:	4601      	mov	r1, r0
   1a64c:	4809      	ldr	r0, [pc, #36]	; (1a674 <console_printf+0x44>)
   1a64e:	f002 fd97 	bl	1d180 <printf>
   1a652:	4604      	mov	r4, r0
   1a654:	e000      	b.n	1a658 <console_printf+0x28>
    num_chars = 0;
   1a656:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   1a658:	a905      	add	r1, sp, #20
   1a65a:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   1a65c:	9804      	ldr	r0, [sp, #16]
   1a65e:	f002 fdbf 	bl	1d1e0 <vprintf>
    va_end(args);

    return num_chars;
}
   1a662:	4420      	add	r0, r4
   1a664:	b002      	add	sp, #8
   1a666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a66a:	b004      	add	sp, #16
   1a66c:	4770      	bx	lr
   1a66e:	bf00      	nop
   1a670:	2000ddb8 	.word	0x2000ddb8
   1a674:	00029028 	.word	0x00029028

0001a678 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   1a678:	4b01      	ldr	r3, [pc, #4]	; (1a680 <console_get_ticks+0x8>)
   1a67a:	7818      	ldrb	r0, [r3, #0]
   1a67c:	4770      	bx	lr
   1a67e:	bf00      	nop
   1a680:	20006f24 	.word	0x20006f24

0001a684 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   1a684:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   1a686:	f000 fe9b 	bl	1b3c0 <__assert_func>
	...

0001a68c <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   1a68c:	4b01      	ldr	r3, [pc, #4]	; (1a694 <sysinit_start+0x8>)
   1a68e:	2201      	movs	r2, #1
   1a690:	701a      	strb	r2, [r3, #0]
}
   1a692:	4770      	bx	lr
   1a694:	2000ddbc 	.word	0x2000ddbc

0001a698 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   1a698:	4b01      	ldr	r3, [pc, #4]	; (1a6a0 <sysinit_end+0x8>)
   1a69a:	2200      	movs	r2, #0
   1a69c:	701a      	strb	r2, [r3, #0]
}
   1a69e:	4770      	bx	lr
   1a6a0:	2000ddbc 	.word	0x2000ddbc

0001a6a4 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   1a6a4:	4a09      	ldr	r2, [pc, #36]	; (1a6cc <NVIC_Relocate+0x28>)
   1a6a6:	4b0a      	ldr	r3, [pc, #40]	; (1a6d0 <NVIC_Relocate+0x2c>)
   1a6a8:	429a      	cmp	r2, r3
   1a6aa:	d00a      	beq.n	1a6c2 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   1a6ac:	2300      	movs	r3, #0
   1a6ae:	e006      	b.n	1a6be <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   1a6b0:	4a07      	ldr	r2, [pc, #28]	; (1a6d0 <NVIC_Relocate+0x2c>)
   1a6b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1a6b6:	4a05      	ldr	r2, [pc, #20]	; (1a6cc <NVIC_Relocate+0x28>)
   1a6b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   1a6bc:	3301      	adds	r3, #1
   1a6be:	2b35      	cmp	r3, #53	; 0x35
   1a6c0:	ddf6      	ble.n	1a6b0 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   1a6c2:	4a02      	ldr	r2, [pc, #8]	; (1a6cc <NVIC_Relocate+0x28>)
   1a6c4:	4b03      	ldr	r3, [pc, #12]	; (1a6d4 <NVIC_Relocate+0x30>)
   1a6c6:	609a      	str	r2, [r3, #8]
#endif
}
   1a6c8:	4770      	bx	lr
   1a6ca:	bf00      	nop
   1a6cc:	20000000 	.word	0x20000000
   1a6d0:	00008020 	.word	0x00008020
   1a6d4:	e000ed00 	.word	0xe000ed00

0001a6d8 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   1a6d8:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   1a6da:	2400      	movs	r4, #0
   1a6dc:	e000      	b.n	1a6e0 <hal_gpio_irq_handler+0x8>
   1a6de:	3401      	adds	r4, #1
   1a6e0:	2c07      	cmp	r4, #7
   1a6e2:	dc1c      	bgt.n	1a71e <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   1a6e4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1a6e8:	4a0d      	ldr	r2, [pc, #52]	; (1a720 <hal_gpio_irq_handler+0x48>)
   1a6ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1a6ee:	2b00      	cmp	r3, #0
   1a6f0:	d0f5      	beq.n	1a6de <hal_gpio_irq_handler+0x6>
   1a6f2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1a6f6:	2301      	movs	r3, #1
   1a6f8:	40a3      	lsls	r3, r4
   1a6fa:	421a      	tst	r2, r3
   1a6fc:	d0ef      	beq.n	1a6de <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   1a6fe:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1a702:	4a07      	ldr	r2, [pc, #28]	; (1a720 <hal_gpio_irq_handler+0x48>)
   1a704:	2100      	movs	r1, #0
   1a706:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   1a70a:	4b06      	ldr	r3, [pc, #24]	; (1a724 <hal_gpio_irq_handler+0x4c>)
   1a70c:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   1a710:	2a00      	cmp	r2, #0
   1a712:	d0e4      	beq.n	1a6de <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   1a714:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1a718:	6858      	ldr	r0, [r3, #4]
   1a71a:	4790      	blx	r2
   1a71c:	e7df      	b.n	1a6de <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   1a71e:	bd10      	pop	{r4, pc}
   1a720:	40006000 	.word	0x40006000
   1a724:	20006f28 	.word	0x20006f28

0001a728 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   1a728:	4b06      	ldr	r3, [pc, #24]	; (1a744 <hal_gpio_irq_setup+0x1c>)
   1a72a:	781b      	ldrb	r3, [r3, #0]
   1a72c:	b94b      	cbnz	r3, 1a742 <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a72e:	4b06      	ldr	r3, [pc, #24]	; (1a748 <hal_gpio_irq_setup+0x20>)
   1a730:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a732:	4a06      	ldr	r2, [pc, #24]	; (1a74c <hal_gpio_irq_setup+0x24>)
   1a734:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a736:	4b06      	ldr	r3, [pc, #24]	; (1a750 <hal_gpio_irq_setup+0x28>)
   1a738:	2240      	movs	r2, #64	; 0x40
   1a73a:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   1a73c:	4b01      	ldr	r3, [pc, #4]	; (1a744 <hal_gpio_irq_setup+0x1c>)
   1a73e:	2201      	movs	r2, #1
   1a740:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   1a742:	4770      	bx	lr
   1a744:	20006f68 	.word	0x20006f68
   1a748:	e000ed00 	.word	0xe000ed00
   1a74c:	0001a6d9 	.word	0x0001a6d9
   1a750:	e000e100 	.word	0xe000e100

0001a754 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   1a754:	2000      	movs	r0, #0
   1a756:	2807      	cmp	r0, #7
   1a758:	dc05      	bgt.n	1a766 <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   1a75a:	4b04      	ldr	r3, [pc, #16]	; (1a76c <hal_gpio_find_empty_slot+0x18>)
   1a75c:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   1a760:	b11b      	cbz	r3, 1a76a <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   1a762:	3001      	adds	r0, #1
   1a764:	e7f7      	b.n	1a756 <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   1a766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1a76a:	4770      	bx	lr
   1a76c:	20006f28 	.word	0x20006f28

0001a770 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   1a770:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   1a772:	2000      	movs	r0, #0
   1a774:	e000      	b.n	1a778 <hal_gpio_find_pin+0x8>
   1a776:	3001      	adds	r0, #1
   1a778:	2807      	cmp	r0, #7
   1a77a:	dc0e      	bgt.n	1a79a <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   1a77c:	4b08      	ldr	r3, [pc, #32]	; (1a7a0 <hal_gpio_find_pin+0x30>)
   1a77e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   1a782:	2b00      	cmp	r3, #0
   1a784:	d0f7      	beq.n	1a776 <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   1a786:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   1a78a:	4a06      	ldr	r2, [pc, #24]	; (1a7a4 <hal_gpio_find_pin+0x34>)
   1a78c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1a790:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   1a794:	428b      	cmp	r3, r1
   1a796:	d1ee      	bne.n	1a776 <hal_gpio_find_pin+0x6>
   1a798:	e001      	b.n	1a79e <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   1a79a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1a79e:	4770      	bx	lr
   1a7a0:	20006f28 	.word	0x20006f28
   1a7a4:	40006000 	.word	0x40006000

0001a7a8 <hal_gpio_init_in>:
    switch (pull) {
   1a7a8:	2901      	cmp	r1, #1
   1a7aa:	d003      	beq.n	1a7b4 <hal_gpio_init_in+0xc>
   1a7ac:	2902      	cmp	r1, #2
   1a7ae:	d00f      	beq.n	1a7d0 <hal_gpio_init_in+0x28>
        conf = 0;
   1a7b0:	2100      	movs	r1, #0
        break;
   1a7b2:	e000      	b.n	1a7b6 <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   1a7b4:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   1a7b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1a7ba:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   1a7be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   1a7c2:	2301      	movs	r3, #1
   1a7c4:	fa03 f000 	lsl.w	r0, r3, r0
   1a7c8:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   1a7cc:	2000      	movs	r0, #0
   1a7ce:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   1a7d0:	2104      	movs	r1, #4
   1a7d2:	e7f0      	b.n	1a7b6 <hal_gpio_init_in+0xe>

0001a7d4 <hal_gpio_init_out>:
    if (val) {
   1a7d4:	b999      	cbnz	r1, 1a7fe <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   1a7d6:	2301      	movs	r3, #1
   1a7d8:	4083      	lsls	r3, r0
   1a7da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1a7de:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   1a7e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1a7e6:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   1a7ea:	2103      	movs	r1, #3
   1a7ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   1a7f0:	2301      	movs	r3, #1
   1a7f2:	fa03 f000 	lsl.w	r0, r3, r0
   1a7f6:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   1a7fa:	2000      	movs	r0, #0
   1a7fc:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   1a7fe:	2301      	movs	r3, #1
   1a800:	4083      	lsls	r3, r0
   1a802:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1a806:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1a80a:	e7ea      	b.n	1a7e2 <hal_gpio_init_out+0xe>

0001a80c <hal_gpio_write>:
    if (val) {
   1a80c:	b939      	cbnz	r1, 1a81e <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   1a80e:	2301      	movs	r3, #1
   1a810:	fa03 f000 	lsl.w	r0, r3, r0
   1a814:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a818:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1a81c:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   1a81e:	2301      	movs	r3, #1
   1a820:	fa03 f000 	lsl.w	r0, r3, r0
   1a824:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a828:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   1a82c:	4770      	bx	lr

0001a82e <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   1a82e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a832:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   1a836:	2301      	movs	r3, #1
   1a838:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   1a83a:	421a      	tst	r2, r3
   1a83c:	d108      	bne.n	1a850 <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   1a83e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a842:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   1a846:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   1a84a:	f000 0001 	and.w	r0, r0, #1
}
   1a84e:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   1a850:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a854:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   1a858:	fa23 f000 	lsr.w	r0, r3, r0
   1a85c:	f000 0001 	and.w	r0, r0, #1
   1a860:	4770      	bx	lr
	...

0001a864 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   1a864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a868:	4680      	mov	r8, r0
   1a86a:	460f      	mov	r7, r1
   1a86c:	4616      	mov	r6, r2
   1a86e:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   1a870:	f7ff ff5a 	bl	1a728 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   1a874:	f7ff ff6e 	bl	1a754 <hal_gpio_find_empty_slot>
    if (i < 0) {
   1a878:	1e05      	subs	r5, r0, #0
   1a87a:	db27      	blt.n	1a8cc <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   1a87c:	f89d 1018 	ldrb.w	r1, [sp, #24]
   1a880:	4640      	mov	r0, r8
   1a882:	f7ff ff91 	bl	1a7a8 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   1a886:	2c02      	cmp	r4, #2
   1a888:	d01d      	beq.n	1a8c6 <hal_gpio_irq_init+0x62>
   1a88a:	2c03      	cmp	r4, #3
   1a88c:	d018      	beq.n	1a8c0 <hal_gpio_irq_init+0x5c>
   1a88e:	2c01      	cmp	r4, #1
   1a890:	d002      	beq.n	1a898 <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   1a892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a896:	e011      	b.n	1a8bc <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   1a898:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   1a89c:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   1a8a0:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   1a8a4:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   1a8a8:	4b0a      	ldr	r3, [pc, #40]	; (1a8d4 <hal_gpio_irq_init+0x70>)
   1a8aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   1a8ae:	4b0a      	ldr	r3, [pc, #40]	; (1a8d8 <hal_gpio_irq_init+0x74>)
   1a8b0:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   1a8b4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1a8b8:	605e      	str	r6, [r3, #4]

    return 0;
   1a8ba:	2000      	movs	r0, #0
}
   1a8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   1a8c0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   1a8c4:	e7ea      	b.n	1a89c <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   1a8c6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1a8ca:	e7e7      	b.n	1a89c <hal_gpio_irq_init+0x38>
        return -1;
   1a8cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a8d0:	e7f4      	b.n	1a8bc <hal_gpio_irq_init+0x58>
   1a8d2:	bf00      	nop
   1a8d4:	40006000 	.word	0x40006000
   1a8d8:	20006f28 	.word	0x20006f28

0001a8dc <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   1a8dc:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   1a8de:	f7ff ff47 	bl	1a770 <hal_gpio_find_pin>
    if (i < 0) {
   1a8e2:	2800      	cmp	r0, #0
   1a8e4:	db0a      	blt.n	1a8fc <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   1a8e6:	4a06      	ldr	r2, [pc, #24]	; (1a900 <hal_gpio_irq_enable+0x24>)
   1a8e8:	f100 0340 	add.w	r3, r0, #64	; 0x40
   1a8ec:	2100      	movs	r1, #0
   1a8ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   1a8f2:	2301      	movs	r3, #1
   1a8f4:	fa03 f000 	lsl.w	r0, r3, r0
   1a8f8:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   1a8fc:	bd08      	pop	{r3, pc}
   1a8fe:	bf00      	nop
   1a900:	40006000 	.word	0x40006000

0001a904 <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   1a904:	3801      	subs	r0, #1
   1a906:	bf00      	nop
   1a908:	bf00      	nop
   1a90a:	bf00      	nop
   1a90c:	bf00      	nop
   1a90e:	bf00      	nop
   1a910:	bf00      	nop
   1a912:	bf00      	nop
   1a914:	bf00      	nop
   1a916:	bf00      	nop
   1a918:	bf00      	nop
   1a91a:	bf00      	nop
   1a91c:	bf00      	nop
   1a91e:	bf00      	nop
   1a920:	bf00      	nop
   1a922:	bf00      	nop
   1a924:	bf00      	nop
   1a926:	bf00      	nop
   1a928:	bf00      	nop
   1a92a:	bf00      	nop
   1a92c:	bf00      	nop
   1a92e:	bf00      	nop
   1a930:	bf00      	nop
   1a932:	bf00      	nop
   1a934:	bf00      	nop
   1a936:	bf00      	nop
   1a938:	bf00      	nop
   1a93a:	bf00      	nop
   1a93c:	bf00      	nop
   1a93e:	bf00      	nop
   1a940:	bf00      	nop
   1a942:	bf00      	nop
   1a944:	bf00      	nop
   1a946:	bf00      	nop
   1a948:	bf00      	nop
   1a94a:	bf00      	nop
   1a94c:	bf00      	nop
   1a94e:	bf00      	nop
   1a950:	bf00      	nop
   1a952:	bf00      	nop
   1a954:	bf00      	nop
   1a956:	bf00      	nop
   1a958:	bf00      	nop
   1a95a:	bf00      	nop
   1a95c:	bf00      	nop
   1a95e:	bf00      	nop
   1a960:	bf00      	nop
   1a962:	bf00      	nop
   1a964:	bf00      	nop
   1a966:	bf00      	nop
   1a968:	bf00      	nop
   1a96a:	bf00      	nop
   1a96c:	bf00      	nop
   1a96e:	bf00      	nop
   1a970:	bf00      	nop
   1a972:	bf00      	nop
   1a974:	bf00      	nop
   1a976:	bf00      	nop
   1a978:	bf00      	nop
   1a97a:	d1c3      	bne.n	1a904 <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   1a97c:	4770      	bx	lr
	...

0001a980 <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   1a980:	2801      	cmp	r0, #1
   1a982:	d806      	bhi.n	1a992 <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   1a984:	4b06      	ldr	r3, [pc, #24]	; (1a9a0 <hal_i2c_resolve+0x20>)
   1a986:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a98a:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   1a98c:	b12b      	cbz	r3, 1a99a <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   1a98e:	2000      	movs	r0, #0
}
   1a990:	4770      	bx	lr
        *out_i2c = NULL;
   1a992:	2300      	movs	r3, #0
   1a994:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   1a996:	2002      	movs	r0, #2
   1a998:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   1a99a:	2002      	movs	r0, #2
   1a99c:	4770      	bx	lr
   1a99e:	bf00      	nop
   1a9a0:	00029030 	.word	0x00029030

0001a9a4 <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   1a9a4:	b148      	cbz	r0, 1a9ba <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   1a9a6:	f010 0f04 	tst.w	r0, #4
   1a9aa:	d107      	bne.n	1a9bc <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   1a9ac:	f010 0f02 	tst.w	r0, #2
   1a9b0:	d101      	bne.n	1a9b6 <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   1a9b2:	2001      	movs	r0, #1
    }
}
   1a9b4:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   1a9b6:	2004      	movs	r0, #4
   1a9b8:	4770      	bx	lr
   1a9ba:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   1a9bc:	2005      	movs	r0, #5
   1a9be:	4770      	bx	lr

0001a9c0 <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   1a9c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a9c4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   1a9c8:	fa23 f000 	lsr.w	r0, r3, r0
}
   1a9cc:	f000 0001 	and.w	r0, r0, #1
   1a9d0:	4770      	bx	lr

0001a9d2 <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   1a9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a9d6:	4605      	mov	r5, r0
   1a9d8:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   1a9da:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1a9de:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   1a9e2:	f240 630c 	movw	r3, #1548	; 0x60c
   1a9e6:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   1a9ea:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   1a9ee:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   1a9f2:	2101      	movs	r1, #1
   1a9f4:	f7ff ff0a 	bl	1a80c <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   1a9f8:	2101      	movs	r1, #1
   1a9fa:	4630      	mov	r0, r6
   1a9fc:	f7ff ff06 	bl	1a80c <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   1aa00:	f240 630d 	movw	r3, #1549	; 0x60d
   1aa04:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   1aa08:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   1aa0c:	2004      	movs	r0, #4
   1aa0e:	f7ff ff79 	bl	1a904 <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   1aa12:	2400      	movs	r4, #0
   1aa14:	2c08      	cmp	r4, #8
   1aa16:	dc14      	bgt.n	1aa42 <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   1aa18:	4630      	mov	r0, r6
   1aa1a:	f7ff ffd1 	bl	1a9c0 <read_gpio_inbuffer>
   1aa1e:	b978      	cbnz	r0, 1aa40 <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   1aa20:	2100      	movs	r1, #0
   1aa22:	4628      	mov	r0, r5
   1aa24:	f7ff fef2 	bl	1a80c <hal_gpio_write>
        hal_i2c_delay_us(4);
   1aa28:	2004      	movs	r0, #4
   1aa2a:	f7ff ff6b 	bl	1a904 <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   1aa2e:	2101      	movs	r1, #1
   1aa30:	4628      	mov	r0, r5
   1aa32:	f7ff feeb 	bl	1a80c <hal_gpio_write>
        hal_i2c_delay_us(4);
   1aa36:	2004      	movs	r0, #4
   1aa38:	f7ff ff64 	bl	1a904 <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   1aa3c:	3401      	adds	r4, #1
   1aa3e:	e7e9      	b.n	1aa14 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   1aa40:	b154      	cbz	r4, 1aa58 <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   1aa42:	2100      	movs	r1, #0
   1aa44:	4630      	mov	r0, r6
   1aa46:	f7ff fee1 	bl	1a80c <hal_gpio_write>
    hal_i2c_delay_us(4);
   1aa4a:	2004      	movs	r0, #4
   1aa4c:	f7ff ff5a 	bl	1a904 <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   1aa50:	2101      	movs	r1, #1
   1aa52:	4630      	mov	r0, r6
   1aa54:	f7ff feda 	bl	1a80c <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   1aa58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1aa5c:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1aa60:	f240 620c 	movw	r2, #1548	; 0x60c
   1aa64:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   1aa68:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1aa6c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1aa70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001aa74 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   1aa74:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa76:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   1aa78:	b1a1      	cbz	r1, 1aaa4 <hal_i2c_init+0x30>
   1aa7a:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1aa7c:	a901      	add	r1, sp, #4
   1aa7e:	f7ff ff7f 	bl	1a980 <hal_i2c_resolve>
    if (rc != 0) {
   1aa82:	4606      	mov	r6, r0
   1aa84:	bba8      	cbnz	r0, 1aaf2 <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   1aa86:	9b01      	ldr	r3, [sp, #4]
   1aa88:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   1aa8a:	68a3      	ldr	r3, [r4, #8]
   1aa8c:	2bfa      	cmp	r3, #250	; 0xfa
   1aa8e:	d035      	beq.n	1aafc <hal_i2c_init+0x88>
   1aa90:	d90e      	bls.n	1aab0 <hal_i2c_init+0x3c>
   1aa92:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   1aa96:	d02f      	beq.n	1aaf8 <hal_i2c_init+0x84>
   1aa98:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   1aa9c:	d131      	bne.n	1ab02 <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   1aa9e:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   1aaa2:	e009      	b.n	1aab8 <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   1aaa4:	2300      	movs	r3, #0
   1aaa6:	461a      	mov	r2, r3
   1aaa8:	4619      	mov	r1, r3
   1aaaa:	4618      	mov	r0, r3
   1aaac:	f000 fc88 	bl	1b3c0 <__assert_func>
    switch (cfg->i2c_frequency) {
   1aab0:	2b64      	cmp	r3, #100	; 0x64
   1aab2:	d126      	bne.n	1ab02 <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   1aab4:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   1aab8:	6861      	ldr	r1, [r4, #4]
   1aaba:	6820      	ldr	r0, [r4, #0]
   1aabc:	f7ff ff89 	bl	1a9d2 <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   1aac0:	6823      	ldr	r3, [r4, #0]
   1aac2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1aac6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1aaca:	f240 610c 	movw	r1, #1548	; 0x60c
   1aace:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   1aad2:	6863      	ldr	r3, [r4, #4]
   1aad4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1aad8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   1aadc:	6823      	ldr	r3, [r4, #0]
   1aade:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   1aae2:	6863      	ldr	r3, [r4, #4]
   1aae4:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   1aae8:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1aaec:	2305      	movs	r3, #5
   1aaee:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   1aaf2:	4630      	mov	r0, r6
   1aaf4:	b003      	add	sp, #12
   1aaf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   1aaf8:	4f03      	ldr	r7, [pc, #12]	; (1ab08 <hal_i2c_init+0x94>)
        break;
   1aafa:	e7dd      	b.n	1aab8 <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   1aafc:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   1ab00:	e7da      	b.n	1aab8 <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   1ab02:	2602      	movs	r6, #2
   1ab04:	e7f5      	b.n	1aaf2 <hal_i2c_init+0x7e>
   1ab06:	bf00      	nop
   1ab08:	06147ae9 	.word	0x06147ae9

0001ab0c <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   1ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab10:	b083      	sub	sp, #12
   1ab12:	4688      	mov	r8, r1
   1ab14:	4615      	mov	r5, r2
   1ab16:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1ab18:	a901      	add	r1, sp, #4
   1ab1a:	f7ff ff31 	bl	1a980 <hal_i2c_resolve>
    if (rc != 0) {
   1ab1e:	4681      	mov	r9, r0
   1ab20:	b118      	cbz	r0, 1ab2a <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   1ab22:	4648      	mov	r0, r9
   1ab24:	b003      	add	sp, #12
   1ab26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   1ab2a:	9b01      	ldr	r3, [sp, #4]
   1ab2c:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   1ab2e:	f898 3000 	ldrb.w	r3, [r8]
   1ab32:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   1ab36:	2300      	movs	r3, #0
   1ab38:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   1ab3c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   1ab40:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   1ab44:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   1ab48:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   1ab4c:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   1ab50:	2300      	movs	r3, #0
   1ab52:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   1ab56:	2301      	movs	r3, #1
   1ab58:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   1ab5a:	f000 fe61 	bl	1b820 <os_cputime_get32>
   1ab5e:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   1ab62:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1ab66:	f7ff fe62 	bl	1a82e <hal_gpio_read>
   1ab6a:	b1b0      	cbz	r0, 1ab9a <hal_i2c_master_write+0x8e>
   1ab6c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1ab70:	b99b      	cbnz	r3, 1ab9a <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   1ab72:	f000 fe55 	bl	1b820 <os_cputime_get32>
   1ab76:	1b80      	subs	r0, r0, r6
   1ab78:	2800      	cmp	r0, #0
   1ab7a:	dbf2      	blt.n	1ab62 <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   1ab7c:	2300      	movs	r3, #0
   1ab7e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1ab82:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1ab86:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   1ab8a:	f7ff ff22 	bl	1a9d2 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1ab8e:	2305      	movs	r3, #5
   1ab90:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   1ab94:	f1bb 0b01 	subs.w	fp, fp, #1
   1ab98:	d1da      	bne.n	1ab50 <hal_i2c_master_write+0x44>
    start = os_time_get();
   1ab9a:	f001 fe2f 	bl	1c7fc <os_time_get>
   1ab9e:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   1aba0:	464f      	mov	r7, r9
   1aba2:	e003      	b.n	1abac <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   1aba4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1aba8:	b9db      	cbnz	r3, 1abe2 <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   1abaa:	3701      	adds	r7, #1
   1abac:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   1abb0:	42bb      	cmp	r3, r7
   1abb2:	dd24      	ble.n	1abfe <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   1abb4:	2300      	movs	r3, #0
   1abb6:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   1abba:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1abbe:	5ddb      	ldrb	r3, [r3, r7]
   1abc0:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   1abc4:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1abc8:	2b00      	cmp	r3, #0
   1abca:	d1eb      	bne.n	1aba4 <hal_i2c_master_write+0x98>
   1abcc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1abd0:	2b00      	cmp	r3, #0
   1abd2:	d1e7      	bne.n	1aba4 <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   1abd4:	f001 fe12 	bl	1c7fc <os_time_get>
   1abd8:	1b80      	subs	r0, r0, r6
   1abda:	42a8      	cmp	r0, r5
   1abdc:	d9f2      	bls.n	1abc4 <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   1abde:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   1abe2:	2301      	movs	r3, #1
   1abe4:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   1abe6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1abea:	2b00      	cmp	r3, #0
   1abec:	d099      	beq.n	1ab22 <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   1abee:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   1abf2:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   1abf6:	f7ff fed5 	bl	1a9a4 <hal_i2c_convert_status>
   1abfa:	4681      	mov	r9, r0
   1abfc:	e791      	b.n	1ab22 <hal_i2c_master_write+0x16>
    if (last_op) {
   1abfe:	f1ba 0f00 	cmp.w	sl, #0
   1ac02:	d08e      	beq.n	1ab22 <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   1ac04:	2300      	movs	r3, #0
   1ac06:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   1ac0a:	2301      	movs	r3, #1
   1ac0c:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   1ac0e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1ac12:	b953      	cbnz	r3, 1ac2a <hal_i2c_master_write+0x11e>
   1ac14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ac18:	b93b      	cbnz	r3, 1ac2a <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   1ac1a:	f001 fdef 	bl	1c7fc <os_time_get>
   1ac1e:	1b80      	subs	r0, r0, r6
   1ac20:	42a8      	cmp	r0, r5
   1ac22:	d9f4      	bls.n	1ac0e <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   1ac24:	f04f 0903 	mov.w	r9, #3
   1ac28:	e7db      	b.n	1abe2 <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   1ac2a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ac2e:	2b00      	cmp	r3, #0
   1ac30:	d1d7      	bne.n	1abe2 <hal_i2c_master_write+0xd6>
   1ac32:	e776      	b.n	1ab22 <hal_i2c_master_write+0x16>

0001ac34 <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   1ac34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac38:	b085      	sub	sp, #20
   1ac3a:	460f      	mov	r7, r1
   1ac3c:	4615      	mov	r5, r2
   1ac3e:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1ac40:	a903      	add	r1, sp, #12
   1ac42:	f7ff fe9d 	bl	1a980 <hal_i2c_resolve>
    if (rc != 0) {
   1ac46:	4681      	mov	r9, r0
   1ac48:	b118      	cbz	r0, 1ac52 <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   1ac4a:	4648      	mov	r0, r9
   1ac4c:	b005      	add	sp, #20
   1ac4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   1ac52:	9b03      	ldr	r3, [sp, #12]
   1ac54:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   1ac56:	f001 fdd1 	bl	1c7fc <os_time_get>
   1ac5a:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   1ac5c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ac60:	b11b      	cbz	r3, 1ac6a <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   1ac62:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   1ac66:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   1ac6a:	2300      	movs	r3, #0
   1ac6c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   1ac70:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   1ac74:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   1ac78:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   1ac7c:	783b      	ldrb	r3, [r7, #0]
   1ac7e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   1ac82:	887b      	ldrh	r3, [r7, #2]
   1ac84:	2b01      	cmp	r3, #1
   1ac86:	d02e      	beq.n	1ace6 <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   1ac88:	2301      	movs	r3, #1
   1ac8a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   1ac8e:	46a2      	mov	sl, r4
    int retry = 2;
   1ac90:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   1ac94:	2300      	movs	r3, #0
   1ac96:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   1ac9a:	2301      	movs	r3, #1
   1ac9c:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   1aca0:	f000 fdbe 	bl	1b820 <os_cputime_get32>
   1aca4:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   1aca8:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1acac:	f7ff fdbf 	bl	1a82e <hal_gpio_read>
   1acb0:	b1b8      	cbz	r0, 1ace2 <hal_i2c_master_read+0xae>
   1acb2:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1acb6:	b9a3      	cbnz	r3, 1ace2 <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   1acb8:	f000 fdb2 	bl	1b820 <os_cputime_get32>
   1acbc:	eba0 0008 	sub.w	r0, r0, r8
   1acc0:	2800      	cmp	r0, #0
   1acc2:	dbf1      	blt.n	1aca8 <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   1acc4:	2300      	movs	r3, #0
   1acc6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1acca:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1acce:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   1acd2:	f7ff fe7e 	bl	1a9d2 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1acd6:	2305      	movs	r3, #5
   1acd8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   1acdc:	f1bb 0b01 	subs.w	fp, fp, #1
   1ace0:	d1d8      	bne.n	1ac94 <hal_i2c_master_read+0x60>
    int retry = 2;
   1ace2:	46c8      	mov	r8, r9
   1ace4:	e017      	b.n	1ad16 <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   1ace6:	9b01      	ldr	r3, [sp, #4]
   1ace8:	2b00      	cmp	r3, #0
   1acea:	d0cd      	beq.n	1ac88 <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   1acec:	2302      	movs	r3, #2
   1acee:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1acf2:	e7cc      	b.n	1ac8e <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   1acf4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1acf8:	bb0b      	cbnz	r3, 1ad3e <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   1acfa:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   1acfe:	687b      	ldr	r3, [r7, #4]
   1ad00:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   1ad04:	887b      	ldrh	r3, [r7, #2]
   1ad06:	3b02      	subs	r3, #2
   1ad08:	4543      	cmp	r3, r8
   1ad0a:	d02a      	beq.n	1ad62 <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   1ad0c:	2300      	movs	r3, #0
   1ad0e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   1ad12:	f108 0801 	add.w	r8, r8, #1
   1ad16:	887b      	ldrh	r3, [r7, #2]
   1ad18:	4543      	cmp	r3, r8
   1ad1a:	dd96      	ble.n	1ac4a <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   1ad1c:	2301      	movs	r3, #1
   1ad1e:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   1ad20:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ad24:	2b00      	cmp	r3, #0
   1ad26:	d1e5      	bne.n	1acf4 <hal_i2c_master_read+0xc0>
   1ad28:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ad2c:	2b00      	cmp	r3, #0
   1ad2e:	d1e1      	bne.n	1acf4 <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   1ad30:	f001 fd64 	bl	1c7fc <os_time_get>
   1ad34:	1b80      	subs	r0, r0, r6
   1ad36:	42a8      	cmp	r0, r5
   1ad38:	d9f2      	bls.n	1ad20 <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   1ad3a:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   1ad3e:	2301      	movs	r3, #1
   1ad40:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   1ad42:	2300      	movs	r3, #0
   1ad44:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   1ad48:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ad4c:	2b00      	cmp	r3, #0
   1ad4e:	f43f af7c 	beq.w	1ac4a <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   1ad52:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   1ad56:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   1ad5a:	f7ff fe23 	bl	1a9a4 <hal_i2c_convert_status>
   1ad5e:	4681      	mov	r9, r0
   1ad60:	e773      	b.n	1ac4a <hal_i2c_master_read+0x16>
            if (last_op) {
   1ad62:	9b01      	ldr	r3, [sp, #4]
   1ad64:	2b00      	cmp	r3, #0
   1ad66:	d0d1      	beq.n	1ad0c <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   1ad68:	2302      	movs	r3, #2
   1ad6a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1ad6e:	e7cd      	b.n	1ad0c <hal_i2c_master_read+0xd8>

0001ad70 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   1ad70:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   1ad72:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   1ad74:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1ad78:	b32b      	cbz	r3, 1adc6 <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   1ad7a:	2300      	movs	r3, #0
   1ad7c:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   1ad80:	7843      	ldrb	r3, [r0, #1]
   1ad82:	b303      	cbz	r3, 1adc6 <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   1ad84:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   1ad88:	88c3      	ldrh	r3, [r0, #6]
   1ad8a:	fa13 f382 	uxtah	r3, r3, r2
   1ad8e:	b29b      	uxth	r3, r3
   1ad90:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   1ad92:	8881      	ldrh	r1, [r0, #4]
   1ad94:	428b      	cmp	r3, r1
   1ad96:	d217      	bcs.n	1adc8 <nrf52_irqm_handler+0x58>
   1ad98:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   1ad9a:	6984      	ldr	r4, [r0, #24]
   1ad9c:	4414      	add	r4, r2
   1ad9e:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   1ada0:	1acb      	subs	r3, r1, r3
   1ada2:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   1ada4:	2bff      	cmp	r3, #255	; 0xff
   1ada6:	bf28      	it	cs
   1ada8:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   1adaa:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   1adae:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   1adb2:	69c1      	ldr	r1, [r0, #28]
   1adb4:	b129      	cbz	r1, 1adc2 <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   1adb6:	440a      	add	r2, r1
   1adb8:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   1adba:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   1adbe:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   1adc2:	2301      	movs	r3, #1
   1adc4:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   1adc6:	bd38      	pop	{r3, r4, r5, pc}
   1adc8:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   1adca:	6a03      	ldr	r3, [r0, #32]
   1adcc:	b10b      	cbz	r3, 1add2 <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   1adce:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1add0:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   1add2:	2300      	movs	r3, #0
   1add4:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   1add6:	2340      	movs	r3, #64	; 0x40
   1add8:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1addc:	e7f3      	b.n	1adc6 <nrf52_irqm_handler+0x56>
	...

0001ade0 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   1ade0:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   1ade2:	4b04      	ldr	r3, [pc, #16]	; (1adf4 <nrf52_spi0_irq_handler+0x14>)
   1ade4:	781b      	ldrb	r3, [r3, #0]
   1ade6:	b103      	cbz	r3, 1adea <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   1ade8:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   1adea:	4802      	ldr	r0, [pc, #8]	; (1adf4 <nrf52_spi0_irq_handler+0x14>)
   1adec:	f7ff ffc0 	bl	1ad70 <nrf52_irqm_handler>
}
   1adf0:	e7fa      	b.n	1ade8 <nrf52_spi0_irq_handler+0x8>
   1adf2:	bf00      	nop
   1adf4:	2000ddc0 	.word	0x2000ddc0

0001adf8 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   1adf8:	2301      	movs	r3, #1
   1adfa:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   1adfc:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   1ae00:	2b00      	cmp	r3, #0
   1ae02:	d0fb      	beq.n	1adfc <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   1ae04:	2300      	movs	r3, #0
   1ae06:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   1ae0a:	4770      	bx	lr

0001ae0c <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   1ae0c:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   1ae0e:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   1ae10:	780b      	ldrb	r3, [r1, #0]
   1ae12:	2b03      	cmp	r3, #3
   1ae14:	d80c      	bhi.n	1ae30 <hal_spi_config_slave+0x24>
   1ae16:	e8df f003 	tbb	[pc, r3]
   1ae1a:	0e02      	.short	0x0e02
   1ae1c:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1ae1e:	2300      	movs	r3, #0
    rc = 0;
   1ae20:	4618      	mov	r0, r3
   1ae22:	e00a      	b.n	1ae3a <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1ae24:	2304      	movs	r3, #4
    rc = 0;
   1ae26:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   1ae28:	e007      	b.n	1ae3a <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1ae2a:	2306      	movs	r3, #6
    rc = 0;
   1ae2c:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   1ae2e:	e004      	b.n	1ae3a <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   1ae30:	2300      	movs	r3, #0
            rc = EINVAL;
   1ae32:	2016      	movs	r0, #22
            break;
   1ae34:	e001      	b.n	1ae3a <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1ae36:	2302      	movs	r3, #2
    rc = 0;
   1ae38:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1ae3a:	784c      	ldrb	r4, [r1, #1]
   1ae3c:	2c01      	cmp	r4, #1
   1ae3e:	d006      	beq.n	1ae4e <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   1ae40:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   1ae44:	788b      	ldrb	r3, [r1, #2]
   1ae46:	b92b      	cbnz	r3, 1ae54 <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   1ae48:	f85d 4b04 	ldr.w	r4, [sp], #4
   1ae4c:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   1ae4e:	f043 0301 	orr.w	r3, r3, #1
   1ae52:	e7f5      	b.n	1ae40 <hal_spi_config_slave+0x34>
            rc = EINVAL;
   1ae54:	2016      	movs	r0, #22
    return rc;
   1ae56:	e7f7      	b.n	1ae48 <hal_spi_config_slave+0x3c>

0001ae58 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   1ae58:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   1ae5a:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   1ae5c:	2501      	movs	r5, #1
   1ae5e:	409d      	lsls	r5, r3
   1ae60:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1ae64:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   1ae68:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ae6c:	2503      	movs	r5, #3
   1ae6e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   1ae72:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   1ae74:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ae78:	2500      	movs	r5, #0
   1ae7a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   1ae7e:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   1ae80:	780c      	ldrb	r4, [r1, #0]
   1ae82:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   1ae86:	784c      	ldrb	r4, [r1, #1]
   1ae88:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   1ae8c:	7889      	ldrb	r1, [r1, #2]
   1ae8e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1ae92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ae96:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1ae9a:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ae9e:	4919      	ldr	r1, [pc, #100]	; (1af04 <hal_spi_init_master+0xac>)
   1aea0:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1aea2:	3310      	adds	r3, #16
   1aea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   1aea8:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1aeac:	42ab      	cmp	r3, r5
   1aeae:	db22      	blt.n	1aef6 <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1aeb0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1aeb4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1aeb8:	22e0      	movs	r2, #224	; 0xe0
   1aeba:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   1aebe:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1aec2:	2b00      	cmp	r3, #0
   1aec4:	db08      	blt.n	1aed8 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1aec6:	f003 011f 	and.w	r1, r3, #31
   1aeca:	095b      	lsrs	r3, r3, #5
   1aecc:	2201      	movs	r2, #1
   1aece:	408a      	lsls	r2, r1
   1aed0:	3360      	adds	r3, #96	; 0x60
   1aed2:	490d      	ldr	r1, [pc, #52]	; (1af08 <hal_spi_init_master+0xb0>)
   1aed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   1aed8:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1aedc:	2b00      	cmp	r3, #0
   1aede:	db07      	blt.n	1aef0 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1aee0:	f003 011f 	and.w	r1, r3, #31
   1aee4:	095b      	lsrs	r3, r3, #5
   1aee6:	2201      	movs	r2, #1
   1aee8:	408a      	lsls	r2, r1
   1aeea:	4907      	ldr	r1, [pc, #28]	; (1af08 <hal_spi_init_master+0xb0>)
   1aeec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   1aef0:	2000      	movs	r0, #0
   1aef2:	bc30      	pop	{r4, r5}
   1aef4:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1aef6:	f003 030f 	and.w	r3, r3, #15
   1aefa:	4a04      	ldr	r2, [pc, #16]	; (1af0c <hal_spi_init_master+0xb4>)
   1aefc:	441a      	add	r2, r3
   1aefe:	23e0      	movs	r3, #224	; 0xe0
   1af00:	7613      	strb	r3, [r2, #24]
   1af02:	e7dc      	b.n	1aebe <hal_spi_init_master+0x66>
   1af04:	e000ed00 	.word	0xe000ed00
   1af08:	e000e100 	.word	0xe000e100
   1af0c:	e000ecfc 	.word	0xe000ecfc

0001af10 <hal_spi_config_master>:
{
   1af10:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   1af12:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   1af14:	680c      	ldr	r4, [r1, #0]
   1af16:	684b      	ldr	r3, [r1, #4]
   1af18:	6084      	str	r4, [r0, #8]
   1af1a:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   1af1c:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   1af20:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   1af24:	7808      	ldrb	r0, [r1, #0]
   1af26:	2801      	cmp	r0, #1
   1af28:	d916      	bls.n	1af58 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   1af2a:	2001      	movs	r0, #1
   1af2c:	4098      	lsls	r0, r3
   1af2e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1af32:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   1af36:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1af3a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1af3e:	2403      	movs	r4, #3
   1af40:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   1af44:	788b      	ldrb	r3, [r1, #2]
   1af46:	b973      	cbnz	r3, 1af66 <hal_spi_config_master+0x56>
    rc = 0;
   1af48:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   1af4a:	780b      	ldrb	r3, [r1, #0]
   1af4c:	2b03      	cmp	r3, #3
   1af4e:	d812      	bhi.n	1af76 <hal_spi_config_master+0x66>
   1af50:	e8df f003 	tbb	[pc, r3]
   1af54:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   1af58:	2001      	movs	r0, #1
   1af5a:	4098      	lsls	r0, r3
   1af5c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1af60:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   1af64:	e7e7      	b.n	1af36 <hal_spi_config_master+0x26>
            rc = EINVAL;
   1af66:	2016      	movs	r0, #22
   1af68:	e7ef      	b.n	1af4a <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1af6a:	2300      	movs	r3, #0
   1af6c:	e007      	b.n	1af7e <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1af6e:	2304      	movs	r3, #4
            break;
   1af70:	e005      	b.n	1af7e <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1af72:	2306      	movs	r3, #6
            break;
   1af74:	e003      	b.n	1af7e <hal_spi_config_master+0x6e>
            nrf_config = 0;
   1af76:	2300      	movs	r3, #0
            rc = EINVAL;
   1af78:	2016      	movs	r0, #22
            break;
   1af7a:	e000      	b.n	1af7e <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1af7c:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1af7e:	784c      	ldrb	r4, [r1, #1]
   1af80:	2c01      	cmp	r4, #1
   1af82:	d010      	beq.n	1afa6 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   1af84:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   1af88:	684b      	ldr	r3, [r1, #4]
   1af8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1af8e:	d023      	beq.n	1afd8 <hal_spi_config_master+0xc8>
   1af90:	d80c      	bhi.n	1afac <hal_spi_config_master+0x9c>
   1af92:	2bfa      	cmp	r3, #250	; 0xfa
   1af94:	d029      	beq.n	1afea <hal_spi_config_master+0xda>
   1af96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1af9a:	d01a      	beq.n	1afd2 <hal_spi_config_master+0xc2>
   1af9c:	2b7d      	cmp	r3, #125	; 0x7d
   1af9e:	d011      	beq.n	1afc4 <hal_spi_config_master+0xb4>
            frequency = 0;
   1afa0:	2300      	movs	r3, #0
            rc = EINVAL;
   1afa2:	2016      	movs	r0, #22
            break;
   1afa4:	e010      	b.n	1afc8 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   1afa6:	f043 0301 	orr.w	r3, r3, #1
   1afaa:	e7eb      	b.n	1af84 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   1afac:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   1afb0:	d015      	beq.n	1afde <hal_spi_config_master+0xce>
   1afb2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   1afb6:	d015      	beq.n	1afe4 <hal_spi_config_master+0xd4>
   1afb8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   1afbc:	d1f0      	bne.n	1afa0 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   1afbe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   1afc2:	e001      	b.n	1afc8 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   1afc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   1afc8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   1afcc:	f85d 4b04 	ldr.w	r4, [sp], #4
   1afd0:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   1afd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   1afd6:	e7f7      	b.n	1afc8 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   1afd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   1afdc:	e7f4      	b.n	1afc8 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   1afde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   1afe2:	e7f1      	b.n	1afc8 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   1afe4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   1afe8:	e7ee      	b.n	1afc8 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   1afea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1afee:	e7eb      	b.n	1afc8 <hal_spi_config_master+0xb8>

0001aff0 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1aff0:	2802      	cmp	r0, #2
   1aff2:	dc10      	bgt.n	1b016 <hal_spi_config+0x26>
{
   1aff4:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1aff6:	4b0b      	ldr	r3, [pc, #44]	; (1b024 <hal_spi_config+0x34>)
   1aff8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1affc:	b168      	cbz	r0, 1b01a <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1affe:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   1b000:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   1b004:	b95b      	cbnz	r3, 1b01e <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1b006:	7803      	ldrb	r3, [r0, #0]
   1b008:	b113      	cbz	r3, 1b010 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   1b00a:	f7ff feff 	bl	1ae0c <hal_spi_config_slave>
    }

err:
    return (rc);
}
   1b00e:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   1b010:	f7ff ff7e 	bl	1af10 <hal_spi_config_master>
   1b014:	e7fb      	b.n	1b00e <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b016:	2016      	movs	r0, #22
}
   1b018:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b01a:	2016      	movs	r0, #22
   1b01c:	e7f7      	b.n	1b00e <hal_spi_config+0x1e>
        return -1;
   1b01e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b022:	e7f4      	b.n	1b00e <hal_spi_config+0x1e>
   1b024:	00029038 	.word	0x00029038

0001b028 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b028:	2802      	cmp	r0, #2
   1b02a:	dc1b      	bgt.n	1b064 <hal_spi_enable+0x3c>
   1b02c:	4b10      	ldr	r3, [pc, #64]	; (1b070 <hal_spi_enable+0x48>)
   1b02e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1b032:	b1cb      	cbz	r3, 1b068 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1b034:	781a      	ldrb	r2, [r3, #0]
   1b036:	b17a      	cbz	r2, 1b058 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   1b038:	6a1a      	ldr	r2, [r3, #32]
   1b03a:	b1ba      	cbz	r2, 1b06c <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   1b03c:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   1b03e:	2000      	movs	r0, #0
   1b040:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1b044:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   1b048:	f240 4202 	movw	r2, #1026	; 0x402
   1b04c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   1b050:	2202      	movs	r2, #2
   1b052:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1b056:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   1b058:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1b05a:	2201      	movs	r2, #1
   1b05c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   1b060:	2000      	movs	r0, #0
   1b062:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b064:	2016      	movs	r0, #22
   1b066:	4770      	bx	lr
   1b068:	2016      	movs	r0, #22
   1b06a:	4770      	bx	lr
            rc = EINVAL;
   1b06c:	2016      	movs	r0, #22

err:
    return rc;
}
   1b06e:	4770      	bx	lr
   1b070:	00029038 	.word	0x00029038

0001b074 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b074:	2802      	cmp	r0, #2
   1b076:	dc2a      	bgt.n	1b0ce <hal_spi_disable+0x5a>
{
   1b078:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b07a:	4b17      	ldr	r3, [pc, #92]	; (1b0d8 <hal_spi_disable+0x64>)
   1b07c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1b080:	b33c      	cbz	r4, 1b0d2 <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1b082:	7823      	ldrb	r3, [r4, #0]
   1b084:	b9ab      	cbnz	r3, 1b0b2 <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   1b086:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1b088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b08c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   1b090:	7863      	ldrb	r3, [r4, #1]
   1b092:	b943      	cbnz	r3, 1b0a6 <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   1b094:	2300      	movs	r3, #0
   1b096:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   1b09a:	2000      	movs	r0, #0
   1b09c:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   1b09e:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   1b0a0:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   1b0a2:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   1b0a4:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   1b0a6:	4628      	mov	r0, r5
   1b0a8:	f7ff fea6 	bl	1adf8 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   1b0ac:	2300      	movs	r3, #0
   1b0ae:	7063      	strb	r3, [r4, #1]
   1b0b0:	e7f0      	b.n	1b094 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   1b0b2:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1b0b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b0b8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   1b0bc:	2300      	movs	r3, #0
   1b0be:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1b0c2:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   1b0c6:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   1b0ca:	70e3      	strb	r3, [r4, #3]
   1b0cc:	e7e5      	b.n	1b09a <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b0ce:	2016      	movs	r0, #22
}
   1b0d0:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b0d2:	2016      	movs	r0, #22
    return rc;
   1b0d4:	e7e6      	b.n	1b0a4 <hal_spi_disable+0x30>
   1b0d6:	bf00      	nop
   1b0d8:	00029038 	.word	0x00029038

0001b0dc <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b0dc:	2802      	cmp	r0, #2
   1b0de:	dc1d      	bgt.n	1b11c <hal_spi_init+0x40>
{
   1b0e0:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b0e2:	4b13      	ldr	r3, [pc, #76]	; (1b130 <hal_spi_init+0x54>)
   1b0e4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1b0e8:	b1d4      	cbz	r4, 1b120 <hal_spi_init+0x44>
    if (cfg == NULL) {
   1b0ea:	b1d9      	cbz	r1, 1b124 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   1b0ec:	2a01      	cmp	r2, #1
   1b0ee:	d81b      	bhi.n	1b128 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   1b0f0:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   1b0f2:	b9d8      	cbnz	r0, 1b12c <hal_spi_init+0x50>
   1b0f4:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   1b0f6:	2303      	movs	r3, #3
   1b0f8:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   1b0fa:	b94a      	cbnz	r2, 1b110 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   1b0fc:	4b0d      	ldr	r3, [pc, #52]	; (1b134 <hal_spi_init+0x58>)
   1b0fe:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   1b100:	f7ff ffb8 	bl	1b074 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   1b104:	4a0c      	ldr	r2, [pc, #48]	; (1b138 <hal_spi_init+0x5c>)
   1b106:	4629      	mov	r1, r5
   1b108:	4620      	mov	r0, r4
   1b10a:	f7ff fea5 	bl	1ae58 <hal_spi_init_master>
   1b10e:	e00c      	b.n	1b12a <hal_spi_init+0x4e>
            assert(0);
   1b110:	2300      	movs	r3, #0
   1b112:	461a      	mov	r2, r3
   1b114:	4619      	mov	r1, r3
   1b116:	4618      	mov	r0, r3
   1b118:	f000 f952 	bl	1b3c0 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b11c:	2016      	movs	r0, #22
}
   1b11e:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b120:	2016      	movs	r0, #22
   1b122:	e002      	b.n	1b12a <hal_spi_init+0x4e>
    rc = EINVAL;
   1b124:	2016      	movs	r0, #22
   1b126:	e000      	b.n	1b12a <hal_spi_init+0x4e>
   1b128:	2016      	movs	r0, #22
}
   1b12a:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   1b12c:	2016      	movs	r0, #22
    return (rc);
   1b12e:	e7fc      	b.n	1b12a <hal_spi_init+0x4e>
   1b130:	00029038 	.word	0x00029038
   1b134:	40003000 	.word	0x40003000
   1b138:	0001ade1 	.word	0x0001ade1

0001b13c <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b13c:	2802      	cmp	r0, #2
   1b13e:	dc0a      	bgt.n	1b156 <hal_spi_set_txrx_cb+0x1a>
   1b140:	4b08      	ldr	r3, [pc, #32]	; (1b164 <hal_spi_set_txrx_cb+0x28>)
   1b142:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1b146:	b143      	cbz	r3, 1b15a <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1b148:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   1b14a:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   1b14e:	b930      	cbnz	r0, 1b15e <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   1b150:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   1b152:	625a      	str	r2, [r3, #36]	; 0x24
   1b154:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b156:	2016      	movs	r0, #22
   1b158:	4770      	bx	lr
   1b15a:	2016      	movs	r0, #22
   1b15c:	4770      	bx	lr
        rc = -1;
   1b15e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   1b162:	4770      	bx	lr
   1b164:	00029038 	.word	0x00029038

0001b168 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   1b168:	2b00      	cmp	r3, #0
   1b16a:	d046      	beq.n	1b1fa <hal_spi_txrx+0x92>
{
   1b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b16e:	460d      	mov	r5, r1
   1b170:	4617      	mov	r7, r2
   1b172:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   1b174:	2802      	cmp	r0, #2
   1b176:	dc42      	bgt.n	1b1fe <hal_spi_txrx+0x96>
   1b178:	4b25      	ldr	r3, [pc, #148]	; (1b210 <hal_spi_txrx+0xa8>)
   1b17a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1b17e:	2b00      	cmp	r3, #0
   1b180:	d03f      	beq.n	1b202 <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1b182:	781a      	ldrb	r2, [r3, #0]
   1b184:	2a00      	cmp	r2, #0
   1b186:	d13e      	bne.n	1b206 <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1b188:	2900      	cmp	r1, #0
   1b18a:	d03e      	beq.n	1b20a <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   1b18c:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   1b18e:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   1b192:	2b07      	cmp	r3, #7
   1b194:	d004      	beq.n	1b1a0 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   1b196:	b95b      	cbnz	r3, 1b1b0 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1b198:	2301      	movs	r3, #1
   1b19a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1b19e:	e007      	b.n	1b1b0 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   1b1a0:	f7ff ff68 	bl	1b074 <hal_spi_disable>
   1b1a4:	e7f8      	b.n	1b198 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   1b1a6:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   1b1aa:	2300      	movs	r3, #0
   1b1ac:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   1b1b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1b1b4:	2b00      	cmp	r3, #0
   1b1b6:	d1f6      	bne.n	1b1a6 <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   1b1b8:	782b      	ldrb	r3, [r5, #0]
   1b1ba:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   1b1be:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   1b1c0:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   1b1c2:	2200      	movs	r2, #0
   1b1c4:	e00d      	b.n	1b1e2 <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   1b1c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1b1ca:	2b00      	cmp	r3, #0
   1b1cc:	d0fb      	beq.n	1b1c6 <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   1b1ce:	2300      	movs	r3, #0
   1b1d0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   1b1d4:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   1b1d8:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   1b1da:	b10f      	cbz	r7, 1b1e0 <hal_spi_txrx+0x78>
                *rxd = rxval;
   1b1dc:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   1b1e0:	3201      	adds	r2, #1
   1b1e2:	42b2      	cmp	r2, r6
   1b1e4:	da07      	bge.n	1b1f6 <hal_spi_txrx+0x8e>
            if (txcnt) {
   1b1e6:	2900      	cmp	r1, #0
   1b1e8:	d0ed      	beq.n	1b1c6 <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   1b1ea:	786b      	ldrb	r3, [r5, #1]
   1b1ec:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   1b1f0:	3901      	subs	r1, #1
                ++txd;
   1b1f2:	3501      	adds	r5, #1
   1b1f4:	e7e7      	b.n	1b1c6 <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   1b1f6:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   1b1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   1b1fa:	2016      	movs	r0, #22
}
   1b1fc:	4770      	bx	lr
    return rc;
   1b1fe:	2016      	movs	r0, #22
   1b200:	e7fa      	b.n	1b1f8 <hal_spi_txrx+0x90>
   1b202:	2016      	movs	r0, #22
   1b204:	e7f8      	b.n	1b1f8 <hal_spi_txrx+0x90>
   1b206:	2016      	movs	r0, #22
   1b208:	e7f6      	b.n	1b1f8 <hal_spi_txrx+0x90>
   1b20a:	2016      	movs	r0, #22
   1b20c:	e7f4      	b.n	1b1f8 <hal_spi_txrx+0x90>
   1b20e:	bf00      	nop
   1b210:	00029038 	.word	0x00029038

0001b214 <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b214:	2802      	cmp	r0, #2
   1b216:	dc57      	bgt.n	1b2c8 <hal_spi_txrx_noblock+0xb4>
{
   1b218:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b21a:	4c35      	ldr	r4, [pc, #212]	; (1b2f0 <hal_spi_txrx_noblock+0xdc>)
   1b21c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   1b220:	2800      	cmp	r0, #0
   1b222:	d053      	beq.n	1b2cc <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   1b224:	6a04      	ldr	r4, [r0, #32]
   1b226:	2c00      	cmp	r4, #0
   1b228:	d052      	beq.n	1b2d0 <hal_spi_txrx_noblock+0xbc>
   1b22a:	2b00      	cmp	r3, #0
   1b22c:	d052      	beq.n	1b2d4 <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1b22e:	7804      	ldrb	r4, [r0, #0]
   1b230:	2c00      	cmp	r4, #0
   1b232:	d137      	bne.n	1b2a4 <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1b234:	2900      	cmp	r1, #0
   1b236:	d050      	beq.n	1b2da <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   1b238:	7844      	ldrb	r4, [r0, #1]
   1b23a:	2c00      	cmp	r4, #0
   1b23c:	d14f      	bne.n	1b2de <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   1b23e:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   1b240:	2540      	movs	r5, #64	; 0x40
   1b242:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   1b246:	2501      	movs	r5, #1
   1b248:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   1b24a:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   1b24e:	2d07      	cmp	r5, #7
   1b250:	d005      	beq.n	1b25e <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   1b252:	2500      	movs	r5, #0
   1b254:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1b258:	2507      	movs	r5, #7
   1b25a:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   1b25e:	2500      	movs	r5, #0
   1b260:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   1b262:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   1b264:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   1b266:	2bff      	cmp	r3, #255	; 0xff
   1b268:	bfa8      	it	ge
   1b26a:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   1b26c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   1b270:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   1b274:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   1b276:	b172      	cbz	r2, 1b296 <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   1b278:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   1b27c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   1b280:	2000      	movs	r0, #0
   1b282:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   1b286:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   1b28a:	2301      	movs	r3, #1
   1b28c:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   1b28e:	2340      	movs	r3, #64	; 0x40
   1b290:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1b294:	e01f      	b.n	1b2d6 <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   1b296:	3002      	adds	r0, #2
   1b298:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   1b29c:	2301      	movs	r3, #1
   1b29e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   1b2a2:	e7ed      	b.n	1b280 <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1b2a4:	b161      	cbz	r1, 1b2c0 <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   1b2a6:	2bff      	cmp	r3, #255	; 0xff
   1b2a8:	dc1c      	bgt.n	1b2e4 <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   1b2aa:	78c4      	ldrb	r4, [r0, #3]
   1b2ac:	b9e4      	cbnz	r4, 1b2e8 <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   1b2ae:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   1b2b0:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   1b2b2:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   1b2b4:	2301      	movs	r3, #1
   1b2b6:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   1b2b8:	6902      	ldr	r2, [r0, #16]
   1b2ba:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   1b2bc:	2000      	movs	r0, #0
   1b2be:	e00a      	b.n	1b2d6 <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1b2c0:	2a00      	cmp	r2, #0
   1b2c2:	d1f0      	bne.n	1b2a6 <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   1b2c4:	2016      	movs	r0, #22
   1b2c6:	e006      	b.n	1b2d6 <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b2c8:	2016      	movs	r0, #22

err:
    return rc;
}
   1b2ca:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b2cc:	2016      	movs	r0, #22
   1b2ce:	e002      	b.n	1b2d6 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   1b2d0:	2016      	movs	r0, #22
   1b2d2:	e000      	b.n	1b2d6 <hal_spi_txrx_noblock+0xc2>
   1b2d4:	2016      	movs	r0, #22
}
   1b2d6:	bc30      	pop	{r4, r5}
   1b2d8:	4770      	bx	lr
    rc = EINVAL;
   1b2da:	2016      	movs	r0, #22
   1b2dc:	e7fb      	b.n	1b2d6 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1b2de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b2e2:	e7f8      	b.n	1b2d6 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   1b2e4:	2016      	movs	r0, #22
   1b2e6:	e7f6      	b.n	1b2d6 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1b2e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b2ec:	e7f3      	b.n	1b2d6 <hal_spi_txrx_noblock+0xc2>
   1b2ee:	bf00      	nop
   1b2f0:	00029038 	.word	0x00029038

0001b2f4 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   1b2f4:	b508      	push	{r3, lr}
    assert(0);
   1b2f6:	2300      	movs	r3, #0
   1b2f8:	461a      	mov	r2, r3
   1b2fa:	4619      	mov	r1, r3
   1b2fc:	4618      	mov	r0, r3
   1b2fe:	f000 f85f 	bl	1b3c0 <__assert_func>
	...

0001b304 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   1b304:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   1b306:	4b06      	ldr	r3, [pc, #24]	; (1b320 <nrf52_wdt_irq_handler+0x1c>)
   1b308:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   1b30c:	f013 0f01 	tst.w	r3, #1
   1b310:	d100      	bne.n	1b314 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   1b312:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   1b314:	4b02      	ldr	r3, [pc, #8]	; (1b320 <nrf52_wdt_irq_handler+0x1c>)
   1b316:	2200      	movs	r2, #0
   1b318:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   1b31c:	f7ff ffea 	bl	1b2f4 <nrf52_hal_wdt_default_handler>
   1b320:	40010000 	.word	0x40010000

0001b324 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   1b324:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   1b326:	4b17      	ldr	r3, [pc, #92]	; (1b384 <hal_watchdog_init+0x60>)
   1b328:	2201      	movs	r2, #1
   1b32a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   1b32e:	4b16      	ldr	r3, [pc, #88]	; (1b388 <hal_watchdog_init+0x64>)
   1b330:	4298      	cmp	r0, r3
   1b332:	d821      	bhi.n	1b378 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   1b334:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1b338:	0153      	lsls	r3, r2, #5
   1b33a:	4a14      	ldr	r2, [pc, #80]	; (1b38c <hal_watchdog_init+0x68>)
   1b33c:	fba2 2303 	umull	r2, r3, r2, r3
   1b340:	08db      	lsrs	r3, r3, #3
   1b342:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1b346:	4b0f      	ldr	r3, [pc, #60]	; (1b384 <hal_watchdog_init+0x60>)
   1b348:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1b34c:	4a10      	ldr	r2, [pc, #64]	; (1b390 <hal_watchdog_init+0x6c>)
   1b34e:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1b350:	4910      	ldr	r1, [pc, #64]	; (1b394 <hal_watchdog_init+0x70>)
   1b352:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b356:	4a10      	ldr	r2, [pc, #64]	; (1b398 <hal_watchdog_init+0x74>)
   1b358:	21e0      	movs	r1, #224	; 0xe0
   1b35a:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b35e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1b362:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b366:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   1b368:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   1b36c:	f042 0201 	orr.w	r2, r2, #1
   1b370:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   1b374:	2000      	movs	r0, #0
   1b376:	bd08      	pop	{r3, pc}
        assert(0);
   1b378:	2300      	movs	r3, #0
   1b37a:	461a      	mov	r2, r3
   1b37c:	4619      	mov	r1, r3
   1b37e:	4618      	mov	r0, r3
   1b380:	f000 f81e 	bl	1b3c0 <__assert_func>
   1b384:	40010000 	.word	0x40010000
   1b388:	02aaaaaa 	.word	0x02aaaaaa
   1b38c:	10624dd3 	.word	0x10624dd3
   1b390:	e000ed00 	.word	0xe000ed00
   1b394:	0001b305 	.word	0x0001b305
   1b398:	e000e100 	.word	0xe000e100

0001b39c <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   1b39c:	4b02      	ldr	r3, [pc, #8]	; (1b3a8 <hal_watchdog_enable+0xc>)
   1b39e:	2201      	movs	r2, #1
   1b3a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   1b3a4:	601a      	str	r2, [r3, #0]
}
   1b3a6:	4770      	bx	lr
   1b3a8:	40010000 	.word	0x40010000

0001b3ac <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   1b3ac:	4b02      	ldr	r3, [pc, #8]	; (1b3b8 <hal_watchdog_tickle+0xc>)
   1b3ae:	4a03      	ldr	r2, [pc, #12]	; (1b3bc <hal_watchdog_tickle+0x10>)
   1b3b0:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   1b3b4:	4770      	bx	lr
   1b3b6:	bf00      	nop
   1b3b8:	40010000 	.word	0x40010000
   1b3bc:	6e524635 	.word	0x6e524635

0001b3c0 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   1b3c0:	b508      	push	{r3, lr}
   1b3c2:	4675      	mov	r5, lr
   1b3c4:	4604      	mov	r4, r0
   1b3c6:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   1b3c8:	f001 fa90 	bl	1c8ec <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   1b3cc:	f7ff f905 	bl	1a5da <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   1b3d0:	b18c      	cbz	r4, 1b3f6 <__assert_func+0x36>
   1b3d2:	4633      	mov	r3, r6
   1b3d4:	4622      	mov	r2, r4
   1b3d6:	4629      	mov	r1, r5
   1b3d8:	4809      	ldr	r0, [pc, #36]	; (1b400 <__assert_func+0x40>)
   1b3da:	f7ff f929 	bl	1a630 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   1b3de:	f7ec fed1 	bl	8184 <hal_debugger_connected>
   1b3e2:	b100      	cbz	r0, 1b3e6 <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   1b3e4:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   1b3e6:	4b07      	ldr	r3, [pc, #28]	; (1b404 <__assert_func+0x44>)
   1b3e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1b3ec:	605a      	str	r2, [r3, #4]
    asm("isb");
   1b3ee:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   1b3f2:	f7ec fecf 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   1b3f6:	4629      	mov	r1, r5
   1b3f8:	4803      	ldr	r0, [pc, #12]	; (1b408 <__assert_func+0x48>)
   1b3fa:	f7ff f919 	bl	1a630 <console_printf>
   1b3fe:	e7ee      	b.n	1b3de <__assert_func+0x1e>
   1b400:	00029054 	.word	0x00029054
   1b404:	e000ed00 	.word	0xe000ed00
   1b408:	00029044 	.word	0x00029044

0001b40c <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   1b40c:	b500      	push	{lr}
   1b40e:	b083      	sub	sp, #12
   1b410:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   1b412:	f7ff f8e2 	bl	1a5da <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   1b416:	4d1b      	ldr	r5, [pc, #108]	; (1b484 <os_default_irq+0x78>)
   1b418:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   1b41a:	6822      	ldr	r2, [r4, #0]
   1b41c:	f3c1 0108 	ubfx	r1, r1, #0, #9
   1b420:	4819      	ldr	r0, [pc, #100]	; (1b488 <os_default_irq+0x7c>)
   1b422:	f7ff f905 	bl	1a630 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   1b426:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   1b428:	6883      	ldr	r3, [r0, #8]
   1b42a:	6842      	ldr	r2, [r0, #4]
   1b42c:	6801      	ldr	r1, [r0, #0]
   1b42e:	68c0      	ldr	r0, [r0, #12]
   1b430:	9000      	str	r0, [sp, #0]
   1b432:	4816      	ldr	r0, [pc, #88]	; (1b48c <os_default_irq+0x80>)
   1b434:	f7ff f8fc 	bl	1a630 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   1b438:	6923      	ldr	r3, [r4, #16]
   1b43a:	9300      	str	r3, [sp, #0]
   1b43c:	68e3      	ldr	r3, [r4, #12]
   1b43e:	68a2      	ldr	r2, [r4, #8]
   1b440:	6861      	ldr	r1, [r4, #4]
   1b442:	4813      	ldr	r0, [pc, #76]	; (1b490 <os_default_irq+0x84>)
   1b444:	f7ff f8f4 	bl	1a630 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   1b448:	6a23      	ldr	r3, [r4, #32]
   1b44a:	9300      	str	r3, [sp, #0]
   1b44c:	69e3      	ldr	r3, [r4, #28]
   1b44e:	69a2      	ldr	r2, [r4, #24]
   1b450:	6961      	ldr	r1, [r4, #20]
   1b452:	4810      	ldr	r0, [pc, #64]	; (1b494 <os_default_irq+0x88>)
   1b454:	f7ff f8ec 	bl	1a630 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   1b458:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   1b45a:	6983      	ldr	r3, [r0, #24]
   1b45c:	6942      	ldr	r2, [r0, #20]
   1b45e:	6901      	ldr	r1, [r0, #16]
   1b460:	69c0      	ldr	r0, [r0, #28]
   1b462:	9000      	str	r0, [sp, #0]
   1b464:	480c      	ldr	r0, [pc, #48]	; (1b498 <os_default_irq+0x8c>)
   1b466:	f7ff f8e3 	bl	1a630 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   1b46a:	6869      	ldr	r1, [r5, #4]
   1b46c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   1b46e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b470:	480a      	ldr	r0, [pc, #40]	; (1b49c <os_default_irq+0x90>)
   1b472:	f7ff f8dd 	bl	1a630 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   1b476:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1b478:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   1b47a:	4809      	ldr	r0, [pc, #36]	; (1b4a0 <os_default_irq+0x94>)
   1b47c:	f7ff f8d8 	bl	1a630 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   1b480:	f7ec fe88 	bl	8194 <hal_system_reset>
   1b484:	e000ed00 	.word	0xe000ed00
   1b488:	0002906c 	.word	0x0002906c
   1b48c:	000290a0 	.word	0x000290a0
   1b490:	000290d4 	.word	0x000290d4
   1b494:	00029108 	.word	0x00029108
   1b498:	0002913c 	.word	0x0002913c
   1b49c:	00029170 	.word	0x00029170
   1b4a0:	00029198 	.word	0x00029198

0001b4a4 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   1b4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   1b4a6:	f7ff ff81 	bl	1b3ac <hal_watchdog_tickle>
    sanity_last = 0;
   1b4aa:	2500      	movs	r5, #0
   1b4ac:	e00b      	b.n	1b4c6 <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   1b4ae:	f000 fec7 	bl	1c240 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   1b4b2:	f7ff ff7b 	bl	1b3ac <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   1b4b6:	4625      	mov	r5, r4
   1b4b8:	e011      	b.n	1b4de <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   1b4ba:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   1b4bc:	f002 f842 	bl	1d544 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   1b4c0:	4638      	mov	r0, r7
   1b4c2:	f001 fa19 	bl	1c8f8 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   1b4c6:	4a14      	ldr	r2, [pc, #80]	; (1b518 <os_idle_task+0x74>)
   1b4c8:	6813      	ldr	r3, [r2, #0]
   1b4ca:	3301      	adds	r3, #1
   1b4cc:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   1b4ce:	f001 f995 	bl	1c7fc <os_time_get>
   1b4d2:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   1b4d4:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   1b4d8:	1ac3      	subs	r3, r0, r3
   1b4da:	2b00      	cmp	r3, #0
   1b4dc:	dce7      	bgt.n	1b4ae <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   1b4de:	f001 fa05 	bl	1c8ec <os_arch_save_sr>
   1b4e2:	4607      	mov	r7, r0
        now = os_time_get();
   1b4e4:	f001 f98a 	bl	1c7fc <os_time_get>
   1b4e8:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   1b4ea:	f000 ffd7 	bl	1c49c <os_sched_wakeup_ticks>
   1b4ee:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   1b4f0:	4630      	mov	r0, r6
   1b4f2:	f000 f975 	bl	1b7e0 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   1b4f6:	42a0      	cmp	r0, r4
   1b4f8:	bf28      	it	cs
   1b4fa:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   1b4fc:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   1b500:	1b9b      	subs	r3, r3, r6
   1b502:	4298      	cmp	r0, r3
   1b504:	bf28      	it	cs
   1b506:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   1b508:	280b      	cmp	r0, #11
   1b50a:	d9d6      	bls.n	1b4ba <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   1b50c:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   1b510:	d9d4      	bls.n	1b4bc <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   1b512:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   1b516:	e7d1      	b.n	1b4bc <os_idle_task+0x18>
   1b518:	2000de8c 	.word	0x2000de8c

0001b51c <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   1b51c:	b508      	push	{r3, lr}
   1b51e:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   1b520:	2100      	movs	r1, #0
   1b522:	4608      	mov	r0, r1
   1b524:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   1b526:	2300      	movs	r3, #0
   1b528:	461a      	mov	r2, r3
   1b52a:	4619      	mov	r1, r3
   1b52c:	4618      	mov	r0, r3
   1b52e:	f7ff ff47 	bl	1b3c0 <__assert_func>
	...

0001b534 <os_started>:
}
   1b534:	4b01      	ldr	r3, [pc, #4]	; (1b53c <os_started+0x8>)
   1b536:	6818      	ldr	r0, [r3, #0]
   1b538:	4770      	bx	lr
   1b53a:	bf00      	nop
   1b53c:	2000de88 	.word	0x2000de88

0001b540 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   1b540:	b500      	push	{lr}
   1b542:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   1b544:	2340      	movs	r3, #64	; 0x40
   1b546:	9303      	str	r3, [sp, #12]
   1b548:	4b15      	ldr	r3, [pc, #84]	; (1b5a0 <os_init_idle_task+0x60>)
   1b54a:	9302      	str	r3, [sp, #8]
   1b54c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b550:	9301      	str	r3, [sp, #4]
   1b552:	23ff      	movs	r3, #255	; 0xff
   1b554:	9300      	str	r3, [sp, #0]
   1b556:	2300      	movs	r3, #0
   1b558:	4a12      	ldr	r2, [pc, #72]	; (1b5a4 <os_init_idle_task+0x64>)
   1b55a:	4913      	ldr	r1, [pc, #76]	; (1b5a8 <os_init_idle_task+0x68>)
   1b55c:	4813      	ldr	r0, [pc, #76]	; (1b5ac <os_init_idle_task+0x6c>)
   1b55e:	f001 f88d 	bl	1c67c <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   1b562:	b950      	cbnz	r0, 1b57a <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   1b564:	f000 fea2 	bl	1c2ac <os_sanity_init>
    assert(rc == 0);
   1b568:	b968      	cbnz	r0, 1b586 <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   1b56a:	f247 5030 	movw	r0, #30000	; 0x7530
   1b56e:	f7ff fed9 	bl	1b324 <hal_watchdog_init>
    assert(rc == 0);
   1b572:	b970      	cbnz	r0, 1b592 <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   1b574:	b005      	add	sp, #20
   1b576:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   1b57a:	2300      	movs	r3, #0
   1b57c:	461a      	mov	r2, r3
   1b57e:	4619      	mov	r1, r3
   1b580:	4618      	mov	r0, r3
   1b582:	f7ff ff1d 	bl	1b3c0 <__assert_func>
    assert(rc == 0);
   1b586:	2300      	movs	r3, #0
   1b588:	461a      	mov	r2, r3
   1b58a:	4619      	mov	r1, r3
   1b58c:	4618      	mov	r0, r3
   1b58e:	f7ff ff17 	bl	1b3c0 <__assert_func>
    assert(rc == 0);
   1b592:	2300      	movs	r3, #0
   1b594:	461a      	mov	r2, r3
   1b596:	4619      	mov	r1, r3
   1b598:	4618      	mov	r0, r3
   1b59a:	f7ff ff11 	bl	1b3c0 <__assert_func>
   1b59e:	bf00      	nop
   1b5a0:	20006f70 	.word	0x20006f70
   1b5a4:	0001b4a5 	.word	0x0001b4a5
   1b5a8:	000291bc 	.word	0x000291bc
   1b5ac:	2000dde8 	.word	0x2000dde8

0001b5b0 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   1b5b0:	b510      	push	{r4, lr}
   1b5b2:	b084      	sub	sp, #16
   1b5b4:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   1b5b6:	4b24      	ldr	r3, [pc, #144]	; (1b648 <os_init+0x98>)
   1b5b8:	2200      	movs	r2, #0
   1b5ba:	601a      	str	r2, [r3, #0]
   1b5bc:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   1b5be:	4b23      	ldr	r3, [pc, #140]	; (1b64c <os_init+0x9c>)
   1b5c0:	601a      	str	r2, [r3, #0]
   1b5c2:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   1b5c4:	f000 faba 	bl	1bb3c <os_eventq_dflt_get>
   1b5c8:	f000 fa0e 	bl	1b9e8 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   1b5cc:	f000 fa04 	bl	1b9d8 <os_dev_reset>

    err = os_arch_os_init();
   1b5d0:	f001 f9c6 	bl	1c960 <os_arch_os_init>
    assert(err == OS_OK);
   1b5d4:	bb00      	cbnz	r0, 1b618 <os_init+0x68>

    if (main_fn) {
   1b5d6:	b18c      	cbz	r4, 1b5fc <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   1b5d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   1b5dc:	9303      	str	r3, [sp, #12]
   1b5de:	4b1c      	ldr	r3, [pc, #112]	; (1b650 <os_init+0xa0>)
   1b5e0:	9302      	str	r3, [sp, #8]
   1b5e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b5e6:	9301      	str	r3, [sp, #4]
   1b5e8:	237f      	movs	r3, #127	; 0x7f
   1b5ea:	9300      	str	r3, [sp, #0]
   1b5ec:	4623      	mov	r3, r4
   1b5ee:	4a19      	ldr	r2, [pc, #100]	; (1b654 <os_init+0xa4>)
   1b5f0:	4919      	ldr	r1, [pc, #100]	; (1b658 <os_init+0xa8>)
   1b5f2:	481a      	ldr	r0, [pc, #104]	; (1b65c <os_init+0xac>)
   1b5f4:	f001 f842 	bl	1c67c <os_task_init>
   1b5f8:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   1b5fa:	b998      	cbnz	r0, 1b624 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   1b5fc:	f001 fe72 	bl	1d2e4 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   1b600:	2001      	movs	r0, #1
   1b602:	f000 f985 	bl	1b910 <os_dev_initialize_all>
   1b606:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1b608:	b990      	cbnz	r0, 1b630 <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   1b60a:	2002      	movs	r0, #2
   1b60c:	f000 f980 	bl	1b910 <os_dev_initialize_all>
   1b610:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1b612:	b998      	cbnz	r0, 1b63c <os_init+0x8c>
}
   1b614:	b004      	add	sp, #16
   1b616:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   1b618:	2300      	movs	r3, #0
   1b61a:	461a      	mov	r2, r3
   1b61c:	4619      	mov	r1, r3
   1b61e:	4618      	mov	r0, r3
   1b620:	f7ff fece 	bl	1b3c0 <__assert_func>
        assert(err == 0);
   1b624:	2300      	movs	r3, #0
   1b626:	461a      	mov	r2, r3
   1b628:	4619      	mov	r1, r3
   1b62a:	4618      	mov	r0, r3
   1b62c:	f7ff fec8 	bl	1b3c0 <__assert_func>
    assert(err == OS_OK);
   1b630:	2300      	movs	r3, #0
   1b632:	461a      	mov	r2, r3
   1b634:	4619      	mov	r1, r3
   1b636:	4618      	mov	r0, r3
   1b638:	f7ff fec2 	bl	1b3c0 <__assert_func>
    assert(err == OS_OK);
   1b63c:	2300      	movs	r3, #0
   1b63e:	461a      	mov	r2, r3
   1b640:	4619      	mov	r1, r3
   1b642:	4618      	mov	r0, r3
   1b644:	f7ff febc 	bl	1b3c0 <__assert_func>
   1b648:	2000de90 	.word	0x2000de90
   1b64c:	2000deb8 	.word	0x2000deb8
   1b650:	20007070 	.word	0x20007070
   1b654:	0001b51d 	.word	0x0001b51d
   1b658:	000291b4 	.word	0x000291b4
   1b65c:	2000de38 	.word	0x2000de38

0001b660 <os_start>:

void
os_start(void)
{
   1b660:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   1b662:	f7ff fe9b 	bl	1b39c <hal_watchdog_enable>

    err = os_arch_os_start();
   1b666:	f001 f9db 	bl	1ca20 <os_arch_os_start>
    assert(err == OS_OK);
   1b66a:	b900      	cbnz	r0, 1b66e <os_start+0xe>
#else
    assert(0);
#endif
}
   1b66c:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   1b66e:	2300      	movs	r3, #0
   1b670:	461a      	mov	r2, r3
   1b672:	4619      	mov	r1, r3
   1b674:	4618      	mov	r0, r3
   1b676:	f7ff fea3 	bl	1b3c0 <__assert_func>
	...

0001b67c <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   1b67c:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b67e:	4b0c      	ldr	r3, [pc, #48]	; (1b6b0 <os_pkg_init+0x34>)
   1b680:	781b      	ldrb	r3, [r3, #0]
   1b682:	b14b      	cbz	r3, 1b698 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   1b684:	2003      	movs	r0, #3
   1b686:	f000 f943 	bl	1b910 <os_dev_initialize_all>
   1b68a:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1b68c:	b948      	cbnz	r0, 1b6a2 <os_pkg_init+0x26>

    os_mempool_module_init();
   1b68e:	f000 fc25 	bl	1bedc <os_mempool_module_init>
    os_msys_init();
   1b692:	f000 fcad 	bl	1bff0 <os_msys_init>
}
   1b696:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b698:	461a      	mov	r2, r3
   1b69a:	4619      	mov	r1, r3
   1b69c:	4618      	mov	r0, r3
   1b69e:	f7ff fe8f 	bl	1b3c0 <__assert_func>
    assert(err == OS_OK);
   1b6a2:	2300      	movs	r3, #0
   1b6a4:	461a      	mov	r2, r3
   1b6a6:	4619      	mov	r1, r3
   1b6a8:	4618      	mov	r0, r3
   1b6aa:	f7ff fe89 	bl	1b3c0 <__assert_func>
   1b6ae:	bf00      	nop
   1b6b0:	2000ddbc 	.word	0x2000ddbc

0001b6b4 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   1b6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b6b6:	4604      	mov	r4, r0
   1b6b8:	460d      	mov	r5, r1
   1b6ba:	4617      	mov	r7, r2
   1b6bc:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   1b6be:	2220      	movs	r2, #32
   1b6c0:	2100      	movs	r1, #0
   1b6c2:	f001 fa80 	bl	1cbc6 <memset>
    c->c_ev.ev_cb = ev_cb;
   1b6c6:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   1b6c8:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   1b6ca:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   1b6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001b6d0 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   1b6d0:	b538      	push	{r3, r4, r5, lr}
   1b6d2:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   1b6d4:	f001 f90a 	bl	1c8ec <os_arch_save_sr>
   1b6d8:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   1b6da:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   1b6dc:	b13b      	cbz	r3, 1b6ee <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1b6de:	69a2      	ldr	r2, [r4, #24]
   1b6e0:	b172      	cbz	r2, 1b700 <os_callout_stop+0x30>
   1b6e2:	61d3      	str	r3, [r2, #28]
   1b6e4:	69e3      	ldr	r3, [r4, #28]
   1b6e6:	69a2      	ldr	r2, [r4, #24]
   1b6e8:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   1b6ea:	2300      	movs	r3, #0
   1b6ec:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   1b6ee:	6920      	ldr	r0, [r4, #16]
   1b6f0:	b110      	cbz	r0, 1b6f8 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   1b6f2:	4621      	mov	r1, r4
   1b6f4:	f000 fa02 	bl	1bafc <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   1b6f8:	4628      	mov	r0, r5
   1b6fa:	f001 f8fd 	bl	1c8f8 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   1b6fe:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1b700:	4a01      	ldr	r2, [pc, #4]	; (1b708 <os_callout_stop+0x38>)
   1b702:	6053      	str	r3, [r2, #4]
   1b704:	e7ee      	b.n	1b6e4 <os_callout_stop+0x14>
   1b706:	bf00      	nop
   1b708:	2000de90 	.word	0x2000de90

0001b70c <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   1b70c:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   1b70e:	6903      	ldr	r3, [r0, #16]
   1b710:	b1c3      	cbz	r3, 1b744 <os_callout_reset+0x38>
   1b712:	4605      	mov	r5, r0
   1b714:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   1b716:	2900      	cmp	r1, #0
   1b718:	db2f      	blt.n	1b77a <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   1b71a:	f001 f8e7 	bl	1c8ec <os_arch_save_sr>
   1b71e:	4606      	mov	r6, r0

    os_callout_stop(c);
   1b720:	4628      	mov	r0, r5
   1b722:	f7ff ffd5 	bl	1b6d0 <os_callout_stop>

    if (ticks == 0) {
   1b726:	b904      	cbnz	r4, 1b72a <os_callout_reset+0x1e>
        ticks = 1;
   1b728:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   1b72a:	f001 f867 	bl	1c7fc <os_time_get>
   1b72e:	4420      	add	r0, r4
   1b730:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1b732:	4b13      	ldr	r3, [pc, #76]	; (1b780 <os_callout_reset+0x74>)
   1b734:	681b      	ldr	r3, [r3, #0]
   1b736:	b153      	cbz	r3, 1b74e <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   1b738:	695a      	ldr	r2, [r3, #20]
   1b73a:	1a82      	subs	r2, r0, r2
   1b73c:	2a00      	cmp	r2, #0
   1b73e:	db06      	blt.n	1b74e <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1b740:	699b      	ldr	r3, [r3, #24]
   1b742:	e7f8      	b.n	1b736 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   1b744:	461a      	mov	r2, r3
   1b746:	4619      	mov	r1, r3
   1b748:	4618      	mov	r0, r3
   1b74a:	f7ff fe39 	bl	1b3c0 <__assert_func>
            break;
        }
    }

    if (entry) {
   1b74e:	b15b      	cbz	r3, 1b768 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   1b750:	69da      	ldr	r2, [r3, #28]
   1b752:	61ea      	str	r2, [r5, #28]
   1b754:	61ab      	str	r3, [r5, #24]
   1b756:	69da      	ldr	r2, [r3, #28]
   1b758:	6015      	str	r5, [r2, #0]
   1b75a:	3518      	adds	r5, #24
   1b75c:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   1b75e:	4630      	mov	r0, r6
   1b760:	f001 f8ca 	bl	1c8f8 <os_arch_restore_sr>

    ret = OS_OK;
   1b764:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   1b766:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   1b768:	2300      	movs	r3, #0
   1b76a:	61ab      	str	r3, [r5, #24]
   1b76c:	4b04      	ldr	r3, [pc, #16]	; (1b780 <os_callout_reset+0x74>)
   1b76e:	685a      	ldr	r2, [r3, #4]
   1b770:	61ea      	str	r2, [r5, #28]
   1b772:	6015      	str	r5, [r2, #0]
   1b774:	3518      	adds	r5, #24
   1b776:	605d      	str	r5, [r3, #4]
   1b778:	e7f1      	b.n	1b75e <os_callout_reset+0x52>
        ret = OS_EINVAL;
   1b77a:	2002      	movs	r0, #2
    return ret;
   1b77c:	e7f3      	b.n	1b766 <os_callout_reset+0x5a>
   1b77e:	bf00      	nop
   1b780:	2000de90 	.word	0x2000de90

0001b784 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   1b784:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   1b786:	f001 f839 	bl	1c7fc <os_time_get>
   1b78a:	4605      	mov	r5, r0
   1b78c:	e00f      	b.n	1b7ae <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1b78e:	69e2      	ldr	r2, [r4, #28]
   1b790:	4b12      	ldr	r3, [pc, #72]	; (1b7dc <os_callout_tick+0x58>)
   1b792:	605a      	str	r2, [r3, #4]
   1b794:	69e3      	ldr	r3, [r4, #28]
   1b796:	69a2      	ldr	r2, [r4, #24]
   1b798:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   1b79a:	2300      	movs	r3, #0
   1b79c:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   1b79e:	f001 f8ab 	bl	1c8f8 <os_arch_restore_sr>

        if (c) {
   1b7a2:	b1d4      	cbz	r4, 1b7da <os_callout_tick+0x56>
            if (c->c_evq) {
   1b7a4:	6920      	ldr	r0, [r4, #16]
   1b7a6:	b9a0      	cbnz	r0, 1b7d2 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   1b7a8:	6863      	ldr	r3, [r4, #4]
   1b7aa:	4620      	mov	r0, r4
   1b7ac:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   1b7ae:	f001 f89d 	bl	1c8ec <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   1b7b2:	4b0a      	ldr	r3, [pc, #40]	; (1b7dc <os_callout_tick+0x58>)
   1b7b4:	681c      	ldr	r4, [r3, #0]
        if (c) {
   1b7b6:	2c00      	cmp	r4, #0
   1b7b8:	d0f1      	beq.n	1b79e <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   1b7ba:	6963      	ldr	r3, [r4, #20]
   1b7bc:	1aeb      	subs	r3, r5, r3
   1b7be:	2b00      	cmp	r3, #0
   1b7c0:	db05      	blt.n	1b7ce <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1b7c2:	69a3      	ldr	r3, [r4, #24]
   1b7c4:	2b00      	cmp	r3, #0
   1b7c6:	d0e2      	beq.n	1b78e <os_callout_tick+0xa>
   1b7c8:	69e2      	ldr	r2, [r4, #28]
   1b7ca:	61da      	str	r2, [r3, #28]
   1b7cc:	e7e2      	b.n	1b794 <os_callout_tick+0x10>
                c = NULL;
   1b7ce:	2400      	movs	r4, #0
   1b7d0:	e7e5      	b.n	1b79e <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   1b7d2:	4621      	mov	r1, r4
   1b7d4:	f000 f915 	bl	1ba02 <os_eventq_put>
   1b7d8:	e7e9      	b.n	1b7ae <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   1b7da:	bd38      	pop	{r3, r4, r5, pc}
   1b7dc:	2000de90 	.word	0x2000de90

0001b7e0 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   1b7e0:	b510      	push	{r4, lr}
   1b7e2:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   1b7e4:	f001 f88b 	bl	1c8fe <os_arch_in_critical>
   1b7e8:	b130      	cbz	r0, 1b7f8 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   1b7ea:	4b09      	ldr	r3, [pc, #36]	; (1b810 <os_callout_wakeup_ticks+0x30>)
   1b7ec:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   1b7ee:	b15b      	cbz	r3, 1b808 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   1b7f0:	6958      	ldr	r0, [r3, #20]
   1b7f2:	1b00      	subs	r0, r0, r4
   1b7f4:	d406      	bmi.n	1b804 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   1b7f6:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1b7f8:	2300      	movs	r3, #0
   1b7fa:	461a      	mov	r2, r3
   1b7fc:	4619      	mov	r1, r3
   1b7fe:	4618      	mov	r0, r3
   1b800:	f7ff fdde 	bl	1b3c0 <__assert_func>
            rt = 0;     /* callout time is in the past */
   1b804:	2000      	movs	r0, #0
   1b806:	e7f6      	b.n	1b7f6 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   1b808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1b80c:	e7f3      	b.n	1b7f6 <os_callout_wakeup_ticks+0x16>
   1b80e:	bf00      	nop
   1b810:	2000de90 	.word	0x2000de90

0001b814 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   1b814:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   1b816:	4601      	mov	r1, r0
   1b818:	2000      	movs	r0, #0
   1b81a:	f002 f84d 	bl	1d8b8 <hal_timer_config>
    return rc;
}
   1b81e:	bd08      	pop	{r3, pc}

0001b820 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   1b820:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   1b822:	2000      	movs	r0, #0
   1b824:	f002 f8c4 	bl	1d9b0 <hal_timer_read>
    return cpu_time;
}
   1b828:	bd08      	pop	{r3, pc}
	...

0001b82c <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   1b82c:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   1b82e:	4b15      	ldr	r3, [pc, #84]	; (1b884 <os_dev_add+0x58>)
   1b830:	681d      	ldr	r5, [r3, #0]
   1b832:	b115      	cbz	r5, 1b83a <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1b834:	462b      	mov	r3, r5
    prev_dev = NULL;
   1b836:	2400      	movs	r4, #0
   1b838:	e008      	b.n	1b84c <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1b83a:	4603      	mov	r3, r0
   1b83c:	f843 5f20 	str.w	r5, [r3, #32]!
   1b840:	4a10      	ldr	r2, [pc, #64]	; (1b884 <os_dev_add+0x58>)
   1b842:	6053      	str	r3, [r2, #4]
   1b844:	6010      	str	r0, [r2, #0]
        return (0);
   1b846:	e010      	b.n	1b86a <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   1b848:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1b84a:	6a1b      	ldr	r3, [r3, #32]
   1b84c:	b143      	cbz	r3, 1b860 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   1b84e:	7e01      	ldrb	r1, [r0, #24]
   1b850:	7e1a      	ldrb	r2, [r3, #24]
   1b852:	4291      	cmp	r1, r2
   1b854:	d304      	bcc.n	1b860 <os_dev_add+0x34>
   1b856:	d1f7      	bne.n	1b848 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   1b858:	7e41      	ldrb	r1, [r0, #25]
   1b85a:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   1b85c:	4291      	cmp	r1, r2
   1b85e:	d2f3      	bcs.n	1b848 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   1b860:	b15c      	cbz	r4, 1b87a <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1b862:	6a23      	ldr	r3, [r4, #32]
   1b864:	6203      	str	r3, [r0, #32]
   1b866:	b11b      	cbz	r3, 1b870 <os_dev_add+0x44>
   1b868:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   1b86a:	2000      	movs	r0, #0
   1b86c:	bc30      	pop	{r4, r5}
   1b86e:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1b870:	f100 0320 	add.w	r3, r0, #32
   1b874:	4a03      	ldr	r2, [pc, #12]	; (1b884 <os_dev_add+0x58>)
   1b876:	6053      	str	r3, [r2, #4]
   1b878:	e7f6      	b.n	1b868 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1b87a:	6205      	str	r5, [r0, #32]
   1b87c:	4b01      	ldr	r3, [pc, #4]	; (1b884 <os_dev_add+0x58>)
   1b87e:	6018      	str	r0, [r3, #0]
   1b880:	e7f3      	b.n	1b86a <os_dev_add+0x3e>
   1b882:	bf00      	nop
   1b884:	20009070 	.word	0x20009070

0001b888 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   1b888:	b510      	push	{r4, lr}
   1b88a:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   1b88c:	6903      	ldr	r3, [r0, #16]
   1b88e:	6941      	ldr	r1, [r0, #20]
   1b890:	4798      	blx	r3
    if (rc != 0) {
   1b892:	4603      	mov	r3, r0
   1b894:	b128      	cbz	r0, 1b8a2 <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   1b896:	7ee2      	ldrb	r2, [r4, #27]
   1b898:	f012 0f08 	tst.w	r2, #8
   1b89c:	d105      	bne.n	1b8aa <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   1b89e:	2300      	movs	r3, #0
   1b8a0:	e003      	b.n	1b8aa <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   1b8a2:	7ee2      	ldrb	r2, [r4, #27]
   1b8a4:	f042 0201 	orr.w	r2, r2, #1
   1b8a8:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   1b8aa:	4618      	mov	r0, r3
   1b8ac:	bd10      	pop	{r4, pc}

0001b8ae <os_dev_init>:
    dev->od_name = name;
   1b8ae:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   1b8b0:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   1b8b2:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   1b8b4:	2300      	movs	r3, #0
   1b8b6:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   1b8b8:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   1b8ba:	9a00      	ldr	r2, [sp, #0]
   1b8bc:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   1b8be:	9a01      	ldr	r2, [sp, #4]
   1b8c0:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   1b8c2:	6003      	str	r3, [r0, #0]
   1b8c4:	6043      	str	r3, [r0, #4]
   1b8c6:	6083      	str	r3, [r0, #8]
   1b8c8:	60c3      	str	r3, [r0, #12]
}
   1b8ca:	4618      	mov	r0, r3
   1b8cc:	4770      	bx	lr
	...

0001b8d0 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   1b8d0:	b530      	push	{r4, r5, lr}
   1b8d2:	b083      	sub	sp, #12
   1b8d4:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   1b8d6:	9c07      	ldr	r4, [sp, #28]
   1b8d8:	9401      	str	r4, [sp, #4]
   1b8da:	9c06      	ldr	r4, [sp, #24]
   1b8dc:	9400      	str	r4, [sp, #0]
   1b8de:	f7ff ffe6 	bl	1b8ae <os_dev_init>
    if (rc != 0) {
   1b8e2:	4603      	mov	r3, r0
   1b8e4:	b110      	cbz	r0, 1b8ec <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   1b8e6:	4618      	mov	r0, r3
   1b8e8:	b003      	add	sp, #12
   1b8ea:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   1b8ec:	4628      	mov	r0, r5
   1b8ee:	f7ff ff9d 	bl	1b82c <os_dev_add>
    if (rc != 0) {
   1b8f2:	4603      	mov	r3, r0
   1b8f4:	2800      	cmp	r0, #0
   1b8f6:	d1f6      	bne.n	1b8e6 <os_dev_create+0x16>
    if (g_os_started) {
   1b8f8:	4a04      	ldr	r2, [pc, #16]	; (1b90c <os_dev_create+0x3c>)
   1b8fa:	6812      	ldr	r2, [r2, #0]
   1b8fc:	2a00      	cmp	r2, #0
   1b8fe:	d0f2      	beq.n	1b8e6 <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   1b900:	4628      	mov	r0, r5
   1b902:	f7ff ffc1 	bl	1b888 <os_dev_initialize>
   1b906:	4603      	mov	r3, r0
    return (rc);
   1b908:	e7ed      	b.n	1b8e6 <os_dev_create+0x16>
   1b90a:	bf00      	nop
   1b90c:	2000de88 	.word	0x2000de88

0001b910 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   1b910:	b538      	push	{r3, r4, r5, lr}
   1b912:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1b914:	4b08      	ldr	r3, [pc, #32]	; (1b938 <os_dev_initialize_all+0x28>)
   1b916:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   1b918:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1b91a:	e000      	b.n	1b91e <os_dev_initialize_all+0xe>
   1b91c:	6a24      	ldr	r4, [r4, #32]
   1b91e:	b144      	cbz	r4, 1b932 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   1b920:	7e23      	ldrb	r3, [r4, #24]
   1b922:	42ab      	cmp	r3, r5
   1b924:	d1fa      	bne.n	1b91c <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   1b926:	4620      	mov	r0, r4
   1b928:	f7ff ffae 	bl	1b888 <os_dev_initialize>
            if (rc) {
   1b92c:	4602      	mov	r2, r0
   1b92e:	2800      	cmp	r0, #0
   1b930:	d0f4      	beq.n	1b91c <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   1b932:	4610      	mov	r0, r2
   1b934:	bd38      	pop	{r3, r4, r5, pc}
   1b936:	bf00      	nop
   1b938:	20009070 	.word	0x20009070

0001b93c <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   1b93c:	b538      	push	{r3, r4, r5, lr}
   1b93e:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1b940:	4b05      	ldr	r3, [pc, #20]	; (1b958 <os_dev_lookup+0x1c>)
   1b942:	681c      	ldr	r4, [r3, #0]
   1b944:	b134      	cbz	r4, 1b954 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   1b946:	4629      	mov	r1, r5
   1b948:	69e0      	ldr	r0, [r4, #28]
   1b94a:	f001 f958 	bl	1cbfe <strcmp>
   1b94e:	b108      	cbz	r0, 1b954 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1b950:	6a24      	ldr	r4, [r4, #32]
   1b952:	e7f7      	b.n	1b944 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   1b954:	4620      	mov	r0, r4
   1b956:	bd38      	pop	{r3, r4, r5, pc}
   1b958:	20009070 	.word	0x20009070

0001b95c <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   1b95c:	b570      	push	{r4, r5, r6, lr}
   1b95e:	460d      	mov	r5, r1
   1b960:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   1b962:	f7ff ffeb 	bl	1b93c <os_dev_lookup>
    if (dev == NULL) {
   1b966:	4604      	mov	r4, r0
   1b968:	b1a0      	cbz	r0, 1b994 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   1b96a:	7ec3      	ldrb	r3, [r0, #27]
   1b96c:	f013 0f01 	tst.w	r3, #1
   1b970:	d012      	beq.n	1b998 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   1b972:	6803      	ldr	r3, [r0, #0]
   1b974:	b11b      	cbz	r3, 1b97e <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   1b976:	4632      	mov	r2, r6
   1b978:	4629      	mov	r1, r5
   1b97a:	4798      	blx	r3
        if (rc != 0) {
   1b97c:	b970      	cbnz	r0, 1b99c <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1b97e:	f000 ffb5 	bl	1c8ec <os_arch_save_sr>
    ++dev->od_open_ref;
   1b982:	7ea3      	ldrb	r3, [r4, #26]
   1b984:	3301      	adds	r3, #1
   1b986:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   1b988:	7ee3      	ldrb	r3, [r4, #27]
   1b98a:	f043 0302 	orr.w	r3, r3, #2
   1b98e:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   1b990:	f000 ffb2 	bl	1c8f8 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   1b994:	4620      	mov	r0, r4
   1b996:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   1b998:	2400      	movs	r4, #0
   1b99a:	e7fb      	b.n	1b994 <os_dev_open+0x38>
    return (NULL);
   1b99c:	2400      	movs	r4, #0
   1b99e:	e7f9      	b.n	1b994 <os_dev_open+0x38>

0001b9a0 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   1b9a0:	b1b0      	cbz	r0, 1b9d0 <os_dev_close+0x30>
{
   1b9a2:	b510      	push	{r4, lr}
   1b9a4:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   1b9a6:	68c3      	ldr	r3, [r0, #12]
   1b9a8:	b113      	cbz	r3, 1b9b0 <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   1b9aa:	4798      	blx	r3
        if (rc != 0) {
   1b9ac:	4603      	mov	r3, r0
   1b9ae:	b968      	cbnz	r0, 1b9cc <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1b9b0:	f000 ff9c 	bl	1c8ec <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   1b9b4:	7ea3      	ldrb	r3, [r4, #26]
   1b9b6:	3b01      	subs	r3, #1
   1b9b8:	b2db      	uxtb	r3, r3
   1b9ba:	76a3      	strb	r3, [r4, #26]
   1b9bc:	b91b      	cbnz	r3, 1b9c6 <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   1b9be:	7ee3      	ldrb	r3, [r4, #27]
   1b9c0:	f023 0306 	bic.w	r3, r3, #6
   1b9c4:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   1b9c6:	f000 ff97 	bl	1c8f8 <os_arch_restore_sr>

    return (0);
   1b9ca:	2300      	movs	r3, #0
err:
    return (rc);
}
   1b9cc:	4618      	mov	r0, r3
   1b9ce:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   1b9d0:	2302      	movs	r3, #2
}
   1b9d2:	4618      	mov	r0, r3
   1b9d4:	4770      	bx	lr
	...

0001b9d8 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   1b9d8:	4b02      	ldr	r3, [pc, #8]	; (1b9e4 <os_dev_reset+0xc>)
   1b9da:	2200      	movs	r2, #0
   1b9dc:	601a      	str	r2, [r3, #0]
   1b9de:	605b      	str	r3, [r3, #4]
}
   1b9e0:	4770      	bx	lr
   1b9e2:	bf00      	nop
   1b9e4:	20009070 	.word	0x20009070

0001b9e8 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   1b9e8:	2200      	movs	r2, #0
   1b9ea:	6002      	str	r2, [r0, #0]
   1b9ec:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   1b9ee:	4603      	mov	r3, r0
   1b9f0:	f843 2f08 	str.w	r2, [r3, #8]!
   1b9f4:	60c3      	str	r3, [r0, #12]
}
   1b9f6:	4770      	bx	lr

0001b9f8 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   1b9f8:	68c0      	ldr	r0, [r0, #12]
}
   1b9fa:	3000      	adds	r0, #0
   1b9fc:	bf18      	it	ne
   1b9fe:	2001      	movne	r0, #1
   1ba00:	4770      	bx	lr

0001ba02 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   1ba02:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   1ba04:	b1f0      	cbz	r0, 1ba44 <os_eventq_put+0x42>
   1ba06:	460c      	mov	r4, r1
   1ba08:	4605      	mov	r5, r0
   1ba0a:	f7ff fff5 	bl	1b9f8 <os_eventq_inited>
   1ba0e:	b1c8      	cbz	r0, 1ba44 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1ba10:	f000 ff6c 	bl	1c8ec <os_arch_save_sr>
   1ba14:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   1ba16:	7823      	ldrb	r3, [r4, #0]
   1ba18:	b9d3      	cbnz	r3, 1ba50 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   1ba1a:	2301      	movs	r3, #1
   1ba1c:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   1ba1e:	2300      	movs	r3, #0
   1ba20:	60e3      	str	r3, [r4, #12]
   1ba22:	68eb      	ldr	r3, [r5, #12]
   1ba24:	601c      	str	r4, [r3, #0]
   1ba26:	340c      	adds	r4, #12
   1ba28:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   1ba2a:	6868      	ldr	r0, [r5, #4]
   1ba2c:	b1b8      	cbz	r0, 1ba5e <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   1ba2e:	7b03      	ldrb	r3, [r0, #12]
   1ba30:	2b02      	cmp	r3, #2
   1ba32:	d010      	beq.n	1ba56 <os_eventq_put+0x54>
    resched = 0;
   1ba34:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   1ba36:	2300      	movs	r3, #0
   1ba38:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   1ba3a:	4630      	mov	r0, r6
   1ba3c:	f000 ff5c 	bl	1c8f8 <os_arch_restore_sr>

    if (resched) {
   1ba40:	b97c      	cbnz	r4, 1ba62 <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   1ba42:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   1ba44:	2300      	movs	r3, #0
   1ba46:	461a      	mov	r2, r3
   1ba48:	4619      	mov	r1, r3
   1ba4a:	4618      	mov	r0, r3
   1ba4c:	f7ff fcb8 	bl	1b3c0 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   1ba50:	f000 ff52 	bl	1c8f8 <os_arch_restore_sr>
   1ba54:	e7f5      	b.n	1ba42 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   1ba56:	f000 fcc7 	bl	1c3e8 <os_sched_wakeup>
            resched = 1;
   1ba5a:	2401      	movs	r4, #1
   1ba5c:	e7eb      	b.n	1ba36 <os_eventq_put+0x34>
    resched = 0;
   1ba5e:	2400      	movs	r4, #0
   1ba60:	e7eb      	b.n	1ba3a <os_eventq_put+0x38>
        os_sched(NULL);
   1ba62:	2000      	movs	r0, #0
   1ba64:	f000 fd40 	bl	1c4e8 <os_sched>
   1ba68:	e7eb      	b.n	1ba42 <os_eventq_put+0x40>

0001ba6a <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   1ba6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ba6c:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   1ba6e:	f000 fc67 	bl	1c340 <os_sched_get_current_task>
   1ba72:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   1ba74:	682b      	ldr	r3, [r5, #0]
   1ba76:	4283      	cmp	r3, r0
   1ba78:	d001      	beq.n	1ba7e <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   1ba7a:	b9db      	cbnz	r3, 1bab4 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   1ba7c:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   1ba7e:	f000 ff35 	bl	1c8ec <os_arch_save_sr>
   1ba82:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   1ba84:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   1ba86:	b9de      	cbnz	r6, 1bac0 <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   1ba88:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   1ba8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ba8e:	4620      	mov	r0, r4
   1ba90:	f000 fc62 	bl	1c358 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   1ba94:	7b63      	ldrb	r3, [r4, #13]
   1ba96:	f043 0308 	orr.w	r3, r3, #8
   1ba9a:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   1ba9c:	4638      	mov	r0, r7
   1ba9e:	f000 ff2b 	bl	1c8f8 <os_arch_restore_sr>

        os_sched(NULL);
   1baa2:	2000      	movs	r0, #0
   1baa4:	f000 fd20 	bl	1c4e8 <os_sched>

        OS_ENTER_CRITICAL(sr);
   1baa8:	f000 ff20 	bl	1c8ec <os_arch_save_sr>
   1baac:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   1baae:	2300      	movs	r3, #0
   1bab0:	606b      	str	r3, [r5, #4]
        goto pull_one;
   1bab2:	e7e7      	b.n	1ba84 <os_eventq_get+0x1a>
            assert(0);
   1bab4:	2300      	movs	r3, #0
   1bab6:	461a      	mov	r2, r3
   1bab8:	4619      	mov	r1, r3
   1baba:	4618      	mov	r0, r3
   1babc:	f7ff fc80 	bl	1b3c0 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1bac0:	68f3      	ldr	r3, [r6, #12]
   1bac2:	60ab      	str	r3, [r5, #8]
   1bac4:	b153      	cbz	r3, 1badc <os_eventq_get+0x72>
        ev->ev_queued = 0;
   1bac6:	2300      	movs	r3, #0
   1bac8:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   1baca:	7b63      	ldrb	r3, [r4, #13]
   1bacc:	f023 0308 	bic.w	r3, r3, #8
   1bad0:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   1bad2:	4638      	mov	r0, r7
   1bad4:	f000 ff10 	bl	1c8f8 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   1bad8:	4630      	mov	r0, r6
   1bada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1badc:	f105 0308 	add.w	r3, r5, #8
   1bae0:	60eb      	str	r3, [r5, #12]
   1bae2:	e7f0      	b.n	1bac6 <os_eventq_get+0x5c>

0001bae4 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   1bae4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   1bae6:	f7ff ffc0 	bl	1ba6a <os_eventq_get>
    assert(ev->ev_cb != NULL);
   1baea:	6843      	ldr	r3, [r0, #4]
   1baec:	b10b      	cbz	r3, 1baf2 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   1baee:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   1baf0:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   1baf2:	461a      	mov	r2, r3
   1baf4:	4619      	mov	r1, r3
   1baf6:	4618      	mov	r0, r3
   1baf8:	f7ff fc62 	bl	1b3c0 <__assert_func>

0001bafc <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   1bafc:	b538      	push	{r3, r4, r5, lr}
   1bafe:	4605      	mov	r5, r0
   1bb00:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1bb02:	f000 fef3 	bl	1c8ec <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   1bb06:	7823      	ldrb	r3, [r4, #0]
   1bb08:	b183      	cbz	r3, 1bb2c <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1bb0a:	68aa      	ldr	r2, [r5, #8]
   1bb0c:	42a2      	cmp	r2, r4
   1bb0e:	d107      	bne.n	1bb20 <os_eventq_remove+0x24>
   1bb10:	68d3      	ldr	r3, [r2, #12]
   1bb12:	60ab      	str	r3, [r5, #8]
   1bb14:	b953      	cbnz	r3, 1bb2c <os_eventq_remove+0x30>
   1bb16:	f105 0308 	add.w	r3, r5, #8
   1bb1a:	60eb      	str	r3, [r5, #12]
   1bb1c:	e006      	b.n	1bb2c <os_eventq_remove+0x30>
   1bb1e:	461a      	mov	r2, r3
   1bb20:	68d3      	ldr	r3, [r2, #12]
   1bb22:	42a3      	cmp	r3, r4
   1bb24:	d1fb      	bne.n	1bb1e <os_eventq_remove+0x22>
   1bb26:	68db      	ldr	r3, [r3, #12]
   1bb28:	60d3      	str	r3, [r2, #12]
   1bb2a:	b123      	cbz	r3, 1bb36 <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   1bb2c:	2300      	movs	r3, #0
   1bb2e:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   1bb30:	f000 fee2 	bl	1c8f8 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   1bb34:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1bb36:	320c      	adds	r2, #12
   1bb38:	60ea      	str	r2, [r5, #12]
   1bb3a:	e7f7      	b.n	1bb2c <os_eventq_remove+0x30>

0001bb3c <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   1bb3c:	4800      	ldr	r0, [pc, #0]	; (1bb40 <os_eventq_dflt_get+0x4>)
   1bb3e:	4770      	bx	lr
   1bb40:	20009078 	.word	0x20009078

0001bb44 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   1bb44:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   1bb46:	2000      	movs	r0, #0
   1bb48:	6018      	str	r0, [r3, #0]
   1bb4a:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   1bb4c:	6098      	str	r0, [r3, #8]
   1bb4e:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   1bb50:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   1bb52:	611a      	str	r2, [r3, #16]

    return (0);
}
   1bb54:	4770      	bx	lr

0001bb56 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   1bb56:	b538      	push	{r3, r4, r5, lr}
   1bb58:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1bb5a:	f000 fec7 	bl	1c8ec <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   1bb5e:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   1bb60:	b114      	cbz	r4, 1bb68 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1bb62:	6863      	ldr	r3, [r4, #4]
   1bb64:	602b      	str	r3, [r5, #0]
   1bb66:	b12b      	cbz	r3, 1bb74 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   1bb68:	f000 fec6 	bl	1c8f8 <os_arch_restore_sr>

    if (mp) {
   1bb6c:	b124      	cbz	r4, 1bb78 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   1bb6e:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   1bb72:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1bb74:	606d      	str	r5, [r5, #4]
   1bb76:	e7f7      	b.n	1bb68 <os_mqueue_get+0x12>
        m = NULL;
   1bb78:	2000      	movs	r0, #0
    return (m);
   1bb7a:	e7fa      	b.n	1bb72 <os_mqueue_get+0x1c>

0001bb7c <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   1bb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   1bb7e:	7953      	ldrb	r3, [r2, #5]
   1bb80:	2b07      	cmp	r3, #7
   1bb82:	d916      	bls.n	1bbb2 <os_mqueue_put+0x36>
   1bb84:	4614      	mov	r4, r2
   1bb86:	460e      	mov	r6, r1
   1bb88:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   1bb8a:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   1bb8e:	f000 fead 	bl	1c8ec <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   1bb92:	2300      	movs	r3, #0
   1bb94:	f844 3f14 	str.w	r3, [r4, #20]!
   1bb98:	686b      	ldr	r3, [r5, #4]
   1bb9a:	601f      	str	r7, [r3, #0]
   1bb9c:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   1bb9e:	f000 feab 	bl	1c8f8 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   1bba2:	b146      	cbz	r6, 1bbb6 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   1bba4:	f105 0108 	add.w	r1, r5, #8
   1bba8:	4630      	mov	r0, r6
   1bbaa:	f7ff ff2a 	bl	1ba02 <os_eventq_put>
    }

    return (0);
   1bbae:	2000      	movs	r0, #0
   1bbb0:	e000      	b.n	1bbb4 <os_mqueue_put+0x38>
err:
    return (rc);
   1bbb2:	2002      	movs	r0, #2
}
   1bbb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   1bbb6:	2000      	movs	r0, #0
   1bbb8:	e7fc      	b.n	1bbb4 <os_mqueue_put+0x38>

0001bbba <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   1bbba:	3a10      	subs	r2, #16
   1bbbc:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   1bbbe:	6041      	str	r1, [r0, #4]

    return (0);
}
   1bbc0:	2000      	movs	r0, #0
   1bbc2:	4770      	bx	lr

0001bbc4 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   1bbc4:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   1bbc6:	8803      	ldrh	r3, [r0, #0]
   1bbc8:	428b      	cmp	r3, r1
   1bbca:	d312      	bcc.n	1bbf2 <os_mbuf_get+0x2e>
   1bbcc:	460d      	mov	r5, r1
   1bbce:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   1bbd0:	6840      	ldr	r0, [r0, #4]
   1bbd2:	f000 f947 	bl	1be64 <os_memblock_get>
    if (!om) {
   1bbd6:	4603      	mov	r3, r0
   1bbd8:	b148      	cbz	r0, 1bbee <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   1bbda:	2200      	movs	r2, #0
   1bbdc:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   1bbde:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   1bbe0:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   1bbe2:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   1bbe4:	f100 0110 	add.w	r1, r0, #16
   1bbe8:	4429      	add	r1, r5
   1bbea:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   1bbec:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   1bbee:	4618      	mov	r0, r3
   1bbf0:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1bbf2:	2300      	movs	r3, #0
    return om;
   1bbf4:	e7fb      	b.n	1bbee <os_mbuf_get+0x2a>

0001bbf6 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   1bbf6:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   1bbf8:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   1bbfc:	8803      	ldrh	r3, [r0, #0]
   1bbfe:	42ab      	cmp	r3, r5
   1bc00:	d310      	bcc.n	1bc24 <os_mbuf_get_pkthdr+0x2e>
   1bc02:	2dff      	cmp	r5, #255	; 0xff
   1bc04:	d810      	bhi.n	1bc28 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   1bc06:	2100      	movs	r1, #0
   1bc08:	f7ff ffdc 	bl	1bbc4 <os_mbuf_get>
    if (om) {
   1bc0c:	4603      	mov	r3, r0
   1bc0e:	b138      	cbz	r0, 1bc20 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   1bc10:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   1bc12:	6802      	ldr	r2, [r0, #0]
   1bc14:	4415      	add	r5, r2
   1bc16:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   1bc18:	2200      	movs	r2, #0
   1bc1a:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   1bc1c:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   1bc1e:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   1bc20:	4618      	mov	r0, r3
   1bc22:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1bc24:	2300      	movs	r3, #0
   1bc26:	e7fb      	b.n	1bc20 <os_mbuf_get_pkthdr+0x2a>
   1bc28:	2300      	movs	r3, #0
    return om;
   1bc2a:	e7f9      	b.n	1bc20 <os_mbuf_get_pkthdr+0x2a>

0001bc2c <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   1bc2c:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   1bc2e:	6883      	ldr	r3, [r0, #8]
   1bc30:	b123      	cbz	r3, 1bc3c <os_mbuf_free+0x10>
   1bc32:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   1bc34:	6858      	ldr	r0, [r3, #4]
   1bc36:	f000 f93d 	bl	1beb4 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   1bc3a:	bd08      	pop	{r3, pc}
    rc = 0;
   1bc3c:	2000      	movs	r0, #0
    return (rc);
   1bc3e:	e7fc      	b.n	1bc3a <os_mbuf_free+0xe>

0001bc40 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   1bc40:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   1bc42:	b160      	cbz	r0, 1bc5e <os_mbuf_free_chain+0x1e>
{
   1bc44:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   1bc46:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   1bc48:	4618      	mov	r0, r3
   1bc4a:	f7ff ffef 	bl	1bc2c <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   1bc4e:	4623      	mov	r3, r4
        if (rc != 0) {
   1bc50:	4602      	mov	r2, r0
   1bc52:	b910      	cbnz	r0, 1bc5a <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   1bc54:	2c00      	cmp	r4, #0
   1bc56:	d1f6      	bne.n	1bc46 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   1bc58:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   1bc5a:	4610      	mov	r0, r2
   1bc5c:	bd10      	pop	{r4, pc}
    rc = 0;
   1bc5e:	2200      	movs	r2, #0
}
   1bc60:	4610      	mov	r0, r2
   1bc62:	4770      	bx	lr

0001bc64 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   1bc64:	2300      	movs	r3, #0
    while (om != NULL) {
   1bc66:	e003      	b.n	1bc70 <os_mbuf_len+0xc>
        len += om->om_len;
   1bc68:	88c2      	ldrh	r2, [r0, #6]
   1bc6a:	4413      	add	r3, r2
   1bc6c:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   1bc6e:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   1bc70:	2800      	cmp	r0, #0
   1bc72:	d1f9      	bne.n	1bc68 <os_mbuf_len+0x4>
    }

    return len;
}
   1bc74:	4618      	mov	r0, r3
   1bc76:	4770      	bx	lr

0001bc78 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   1bc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   1bc7c:	2800      	cmp	r0, #0
   1bc7e:	d04d      	beq.n	1bd1c <os_mbuf_append+0xa4>
   1bc80:	460f      	mov	r7, r1
   1bc82:	4691      	mov	r9, r2
   1bc84:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   1bc86:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   1bc8a:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   1bc8c:	e000      	b.n	1bc90 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   1bc8e:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   1bc90:	68eb      	ldr	r3, [r5, #12]
   1bc92:	2b00      	cmp	r3, #0
   1bc94:	d1fb      	bne.n	1bc8e <os_mbuf_append+0x16>
    }

    remainder = len;
   1bc96:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   1bc98:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1bc9a:	f105 0410 	add.w	r4, r5, #16
   1bc9e:	881b      	ldrh	r3, [r3, #0]
   1bca0:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   1bca2:	6828      	ldr	r0, [r5, #0]
   1bca4:	88eb      	ldrh	r3, [r5, #6]
   1bca6:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1bca8:	1a24      	subs	r4, r4, r0
   1bcaa:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   1bcac:	b164      	cbz	r4, 1bcc8 <os_mbuf_append+0x50>
        if (space > remainder) {
   1bcae:	454c      	cmp	r4, r9
   1bcb0:	dd00      	ble.n	1bcb4 <os_mbuf_append+0x3c>
            space = remainder;
   1bcb2:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   1bcb4:	4622      	mov	r2, r4
   1bcb6:	4639      	mov	r1, r7
   1bcb8:	f000 ff78 	bl	1cbac <memcpy>

        last->om_len += space;
   1bcbc:	88eb      	ldrh	r3, [r5, #6]
   1bcbe:	4423      	add	r3, r4
   1bcc0:	80eb      	strh	r3, [r5, #6]
        data += space;
   1bcc2:	4427      	add	r7, r4
        remainder -= space;
   1bcc4:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   1bcc8:	2e00      	cmp	r6, #0
   1bcca:	dd16      	ble.n	1bcfa <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   1bccc:	2100      	movs	r1, #0
   1bcce:	4640      	mov	r0, r8
   1bcd0:	f7ff ff78 	bl	1bbc4 <os_mbuf_get>
        if (!new) {
   1bcd4:	4604      	mov	r4, r0
   1bcd6:	b180      	cbz	r0, 1bcfa <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   1bcd8:	f8b8 2000 	ldrh.w	r2, [r8]
   1bcdc:	42b2      	cmp	r2, r6
   1bcde:	bfa8      	it	ge
   1bce0:	4632      	movge	r2, r6
   1bce2:	b292      	uxth	r2, r2
   1bce4:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   1bce6:	4639      	mov	r1, r7
   1bce8:	6800      	ldr	r0, [r0, #0]
   1bcea:	f000 ff5f 	bl	1cbac <memcpy>
        data += new->om_len;
   1bcee:	88e3      	ldrh	r3, [r4, #6]
   1bcf0:	441f      	add	r7, r3
        remainder -= new->om_len;
   1bcf2:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   1bcf4:	60ec      	str	r4, [r5, #12]
        last = new;
   1bcf6:	4625      	mov	r5, r4
   1bcf8:	e7e6      	b.n	1bcc8 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   1bcfa:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1bcfe:	2b07      	cmp	r3, #7
   1bd00:	d907      	bls.n	1bd12 <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   1bd02:	eba9 0906 	sub.w	r9, r9, r6
   1bd06:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   1bd0a:	fa13 f989 	uxtah	r9, r3, r9
   1bd0e:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   1bd12:	b106      	cbz	r6, 1bd16 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   1bd14:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   1bd16:	4630      	mov	r0, r6
   1bd18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   1bd1c:	2602      	movs	r6, #2
   1bd1e:	e7fa      	b.n	1bd16 <os_mbuf_append+0x9e>

0001bd20 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   1bd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd24:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   1bd26:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   1bd2a:	2700      	movs	r7, #0
    head = NULL;
   1bd2c:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1bd2e:	e017      	b.n	1bd60 <os_mbuf_dup+0x40>
    startoff = 0;
   1bd30:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1bd32:	4623      	mov	r3, r4
   1bd34:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1bd38:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1bd3a:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   1bd3c:	b299      	uxth	r1, r3
   1bd3e:	4640      	mov	r0, r8
   1bd40:	f7ff ff40 	bl	1bbc4 <os_mbuf_get>
   1bd44:	4605      	mov	r5, r0
   1bd46:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   1bd48:	b188      	cbz	r0, 1bd6e <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   1bd4a:	7923      	ldrb	r3, [r4, #4]
   1bd4c:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   1bd4e:	88e3      	ldrh	r3, [r4, #6]
   1bd50:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   1bd52:	88e2      	ldrh	r2, [r4, #6]
   1bd54:	6821      	ldr	r1, [r4, #0]
   1bd56:	6828      	ldr	r0, [r5, #0]
   1bd58:	f000 ff28 	bl	1cbac <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1bd5c:	68e4      	ldr	r4, [r4, #12]
   1bd5e:	462f      	mov	r7, r5
   1bd60:	b14c      	cbz	r4, 1bd76 <os_mbuf_dup+0x56>
        if (head) {
   1bd62:	b15e      	cbz	r6, 1bd7c <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   1bd64:	7963      	ldrb	r3, [r4, #5]
   1bd66:	2b07      	cmp	r3, #7
   1bd68:	d9e2      	bls.n	1bd30 <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   1bd6a:	b299      	uxth	r1, r3
   1bd6c:	e7e1      	b.n	1bd32 <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   1bd6e:	4630      	mov	r0, r6
   1bd70:	f7ff ff66 	bl	1bc40 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   1bd74:	462e      	mov	r6, r5
}
   1bd76:	4630      	mov	r0, r6
   1bd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   1bd7c:	7963      	ldrb	r3, [r4, #5]
   1bd7e:	2b07      	cmp	r3, #7
   1bd80:	d911      	bls.n	1bda6 <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   1bd82:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1bd84:	4623      	mov	r3, r4
   1bd86:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1bd8a:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1bd8c:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1bd8e:	b299      	uxth	r1, r3
   1bd90:	4640      	mov	r0, r8
   1bd92:	f7ff ff17 	bl	1bbc4 <os_mbuf_get>
            if (!head) {
   1bd96:	4606      	mov	r6, r0
   1bd98:	2800      	cmp	r0, #0
   1bd9a:	d0ec      	beq.n	1bd76 <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   1bd9c:	7963      	ldrb	r3, [r4, #5]
   1bd9e:	2b07      	cmp	r3, #7
   1bda0:	d803      	bhi.n	1bdaa <os_mbuf_dup+0x8a>
            copy = head;
   1bda2:	4605      	mov	r5, r0
   1bda4:	e7d1      	b.n	1bd4a <os_mbuf_dup+0x2a>
    startoff = 0;
   1bda6:	2100      	movs	r1, #0
   1bda8:	e7ec      	b.n	1bd84 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   1bdaa:	88c3      	ldrh	r3, [r0, #6]
   1bdac:	b973      	cbnz	r3, 1bdcc <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1bdae:	f100 0510 	add.w	r5, r0, #16
   1bdb2:	7962      	ldrb	r2, [r4, #5]
   1bdb4:	f104 0110 	add.w	r1, r4, #16
   1bdb8:	4628      	mov	r0, r5
   1bdba:	f000 fef7 	bl	1cbac <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   1bdbe:	7963      	ldrb	r3, [r4, #5]
   1bdc0:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   1bdc2:	7963      	ldrb	r3, [r4, #5]
   1bdc4:	441d      	add	r5, r3
   1bdc6:	6035      	str	r5, [r6, #0]
            copy = head;
   1bdc8:	4635      	mov	r5, r6
   1bdca:	e7be      	b.n	1bd4a <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   1bdcc:	2300      	movs	r3, #0
   1bdce:	461a      	mov	r2, r3
   1bdd0:	4619      	mov	r1, r3
   1bdd2:	4618      	mov	r0, r3
   1bdd4:	f7ff faf4 	bl	1b3c0 <__assert_func>

0001bdd8 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   1bdd8:	2800      	cmp	r0, #0
   1bdda:	d031      	beq.n	1be40 <os_mempool_init_internal+0x68>
{
   1bddc:	b430      	push	{r4, r5}
   1bdde:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   1bde0:	2a00      	cmp	r2, #0
   1bde2:	d02f      	beq.n	1be44 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   1bde4:	b1bb      	cbz	r3, 1be16 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   1bde6:	b113      	cbz	r3, 1bdee <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   1bde8:	f013 0f03 	tst.w	r3, #3
   1bdec:	d12c      	bne.n	1be48 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   1bdee:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   1bdf0:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   1bdf2:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   1bdf4:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1bdf8:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   1bdfa:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   1bdfc:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   1bdfe:	9802      	ldr	r0, [sp, #8]
   1be00:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   1be02:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   1be04:	b199      	cbz	r1, 1be2e <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   1be06:	f012 0f03 	tst.w	r2, #3
   1be0a:	d002      	beq.n	1be12 <os_mempool_init_internal+0x3a>
   1be0c:	f022 0203 	bic.w	r2, r2, #3
   1be10:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   1be12:	2001      	movs	r0, #1
   1be14:	e007      	b.n	1be26 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   1be16:	2900      	cmp	r1, #0
   1be18:	d0e5      	beq.n	1bde6 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   1be1a:	2003      	movs	r0, #3
   1be1c:	e00e      	b.n	1be3c <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   1be1e:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   1be20:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   1be22:	3001      	adds	r0, #1
            block_addr += true_block_size;
   1be24:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   1be26:	4281      	cmp	r1, r0
   1be28:	dcf9      	bgt.n	1be1e <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   1be2a:	2200      	movs	r2, #0
   1be2c:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   1be2e:	2000      	movs	r0, #0
   1be30:	6120      	str	r0, [r4, #16]
   1be32:	4b06      	ldr	r3, [pc, #24]	; (1be4c <os_mempool_init_internal+0x74>)
   1be34:	685a      	ldr	r2, [r3, #4]
   1be36:	6014      	str	r4, [r2, #0]
   1be38:	3410      	adds	r4, #16
   1be3a:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   1be3c:	bc30      	pop	{r4, r5}
   1be3e:	4770      	bx	lr
        return OS_INVALID_PARM;
   1be40:	2003      	movs	r0, #3
}
   1be42:	4770      	bx	lr
        return OS_INVALID_PARM;
   1be44:	2003      	movs	r0, #3
   1be46:	e7f9      	b.n	1be3c <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   1be48:	2004      	movs	r0, #4
   1be4a:	e7f7      	b.n	1be3c <os_mempool_init_internal+0x64>
   1be4c:	2000de98 	.word	0x2000de98

0001be50 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   1be50:	b510      	push	{r4, lr}
   1be52:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   1be54:	2400      	movs	r4, #0
   1be56:	9401      	str	r4, [sp, #4]
   1be58:	9c04      	ldr	r4, [sp, #16]
   1be5a:	9400      	str	r4, [sp, #0]
   1be5c:	f7ff ffbc 	bl	1bdd8 <os_mempool_init_internal>
}
   1be60:	b002      	add	sp, #8
   1be62:	bd10      	pop	{r4, pc}

0001be64 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   1be64:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   1be66:	b1a0      	cbz	r0, 1be92 <os_memblock_get+0x2e>
   1be68:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1be6a:	f000 fd3f 	bl	1c8ec <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   1be6e:	88e3      	ldrh	r3, [r4, #6]
   1be70:	b153      	cbz	r3, 1be88 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   1be72:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   1be74:	682a      	ldr	r2, [r5, #0]
   1be76:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   1be78:	3b01      	subs	r3, #1
   1be7a:	b29b      	uxth	r3, r3
   1be7c:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   1be7e:	8922      	ldrh	r2, [r4, #8]
   1be80:	4293      	cmp	r3, r2
   1be82:	d202      	bcs.n	1be8a <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   1be84:	8123      	strh	r3, [r4, #8]
   1be86:	e000      	b.n	1be8a <os_memblock_get+0x26>
    block = NULL;
   1be88:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   1be8a:	f000 fd35 	bl	1c8f8 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   1be8e:	4628      	mov	r0, r5
   1be90:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   1be92:	2500      	movs	r5, #0
    return (void *)block;
   1be94:	e7fb      	b.n	1be8e <os_memblock_get+0x2a>

0001be96 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   1be96:	b538      	push	{r3, r4, r5, lr}
   1be98:	4604      	mov	r4, r0
   1be9a:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   1be9c:	f000 fd26 	bl	1c8ec <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   1bea0:	6963      	ldr	r3, [r4, #20]
   1bea2:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   1bea4:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   1bea6:	88e3      	ldrh	r3, [r4, #6]
   1bea8:	3301      	adds	r3, #1
   1beaa:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   1beac:	f000 fd24 	bl	1c8f8 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   1beb0:	2000      	movs	r0, #0
   1beb2:	bd38      	pop	{r3, r4, r5, pc}

0001beb4 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   1beb4:	b168      	cbz	r0, 1bed2 <os_memblock_put+0x1e>
{
   1beb6:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   1beb8:	b169      	cbz	r1, 1bed6 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   1beba:	7a83      	ldrb	r3, [r0, #10]
   1bebc:	f013 0f01 	tst.w	r3, #1
   1bec0:	d004      	beq.n	1becc <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   1bec2:	69c3      	ldr	r3, [r0, #28]
   1bec4:	b113      	cbz	r3, 1becc <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   1bec6:	6a02      	ldr	r2, [r0, #32]
   1bec8:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   1beca:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   1becc:	f7ff ffe3 	bl	1be96 <os_memblock_put_from_cb>
   1bed0:	e7fb      	b.n	1beca <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   1bed2:	2003      	movs	r0, #3
}
   1bed4:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1bed6:	2003      	movs	r0, #3
   1bed8:	e7f7      	b.n	1beca <os_memblock_put+0x16>
	...

0001bedc <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   1bedc:	4b02      	ldr	r3, [pc, #8]	; (1bee8 <os_mempool_module_init+0xc>)
   1bede:	2200      	movs	r2, #0
   1bee0:	601a      	str	r2, [r3, #0]
   1bee2:	605b      	str	r3, [r3, #4]
}
   1bee4:	4770      	bx	lr
   1bee6:	bf00      	nop
   1bee8:	2000de98 	.word	0x2000de98

0001beec <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1beec:	4b02      	ldr	r3, [pc, #8]	; (1bef8 <os_msys_find_biggest_pool+0xc>)
   1beee:	6818      	ldr	r0, [r3, #0]
   1bef0:	b108      	cbz	r0, 1bef6 <os_msys_find_biggest_pool+0xa>
   1bef2:	6858      	ldr	r0, [r3, #4]
   1bef4:	3808      	subs	r0, #8
}
   1bef6:	4770      	bx	lr
   1bef8:	2000010c 	.word	0x2000010c

0001befc <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1befc:	4b09      	ldr	r3, [pc, #36]	; (1bf24 <os_msys_find_pool+0x28>)
   1befe:	6819      	ldr	r1, [r3, #0]
   1bf00:	460b      	mov	r3, r1
   1bf02:	b123      	cbz	r3, 1bf0e <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   1bf04:	881a      	ldrh	r2, [r3, #0]
   1bf06:	4282      	cmp	r2, r0
   1bf08:	d201      	bcs.n	1bf0e <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1bf0a:	689b      	ldr	r3, [r3, #8]
   1bf0c:	e7f9      	b.n	1bf02 <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   1bf0e:	b10b      	cbz	r3, 1bf14 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   1bf10:	4618      	mov	r0, r3
   1bf12:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1bf14:	b119      	cbz	r1, 1bf1e <os_msys_find_pool+0x22>
   1bf16:	4b03      	ldr	r3, [pc, #12]	; (1bf24 <os_msys_find_pool+0x28>)
   1bf18:	685b      	ldr	r3, [r3, #4]
   1bf1a:	3b08      	subs	r3, #8
   1bf1c:	e7f8      	b.n	1bf10 <os_msys_find_pool+0x14>
   1bf1e:	460b      	mov	r3, r1
    return (pool);
   1bf20:	e7f6      	b.n	1bf10 <os_msys_find_pool+0x14>
   1bf22:	bf00      	nop
   1bf24:	2000010c 	.word	0x2000010c

0001bf28 <os_msys_register>:
{
   1bf28:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1bf2a:	4b11      	ldr	r3, [pc, #68]	; (1bf70 <os_msys_register+0x48>)
   1bf2c:	681d      	ldr	r5, [r3, #0]
   1bf2e:	462b      	mov	r3, r5
    prev = NULL;
   1bf30:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1bf32:	b133      	cbz	r3, 1bf42 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   1bf34:	8801      	ldrh	r1, [r0, #0]
   1bf36:	881a      	ldrh	r2, [r3, #0]
   1bf38:	4291      	cmp	r1, r2
   1bf3a:	d302      	bcc.n	1bf42 <os_msys_register+0x1a>
        prev = pool;
   1bf3c:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1bf3e:	689b      	ldr	r3, [r3, #8]
   1bf40:	e7f7      	b.n	1bf32 <os_msys_register+0xa>
    if (prev) {
   1bf42:	b15c      	cbz	r4, 1bf5c <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1bf44:	68a3      	ldr	r3, [r4, #8]
   1bf46:	6083      	str	r3, [r0, #8]
   1bf48:	b11b      	cbz	r3, 1bf52 <os_msys_register+0x2a>
   1bf4a:	60a0      	str	r0, [r4, #8]
}
   1bf4c:	2000      	movs	r0, #0
   1bf4e:	bc30      	pop	{r4, r5}
   1bf50:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1bf52:	f100 0308 	add.w	r3, r0, #8
   1bf56:	4a06      	ldr	r2, [pc, #24]	; (1bf70 <os_msys_register+0x48>)
   1bf58:	6053      	str	r3, [r2, #4]
   1bf5a:	e7f6      	b.n	1bf4a <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   1bf5c:	6085      	str	r5, [r0, #8]
   1bf5e:	b115      	cbz	r5, 1bf66 <os_msys_register+0x3e>
   1bf60:	4b03      	ldr	r3, [pc, #12]	; (1bf70 <os_msys_register+0x48>)
   1bf62:	6018      	str	r0, [r3, #0]
   1bf64:	e7f2      	b.n	1bf4c <os_msys_register+0x24>
   1bf66:	f100 0308 	add.w	r3, r0, #8
   1bf6a:	4a01      	ldr	r2, [pc, #4]	; (1bf70 <os_msys_register+0x48>)
   1bf6c:	6053      	str	r3, [r2, #4]
   1bf6e:	e7f7      	b.n	1bf60 <os_msys_register+0x38>
   1bf70:	2000010c 	.word	0x2000010c

0001bf74 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   1bf74:	b530      	push	{r4, r5, lr}
   1bf76:	b083      	sub	sp, #12
   1bf78:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1bf7a:	9d07      	ldr	r5, [sp, #28]
   1bf7c:	9501      	str	r5, [sp, #4]
   1bf7e:	9d06      	ldr	r5, [sp, #24]
   1bf80:	9500      	str	r5, [sp, #0]
   1bf82:	f001 f96d 	bl	1d260 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1bf86:	b138      	cbz	r0, 1bf98 <os_msys_init_once+0x24>
   1bf88:	2000      	movs	r0, #0
   1bf8a:	9000      	str	r0, [sp, #0]
   1bf8c:	4b09      	ldr	r3, [pc, #36]	; (1bfb4 <os_msys_init_once+0x40>)
   1bf8e:	681d      	ldr	r5, [r3, #0]
   1bf90:	4603      	mov	r3, r0
   1bf92:	4602      	mov	r2, r0
   1bf94:	4601      	mov	r1, r0
   1bf96:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   1bf98:	4620      	mov	r0, r4
   1bf9a:	f7ff ffc5 	bl	1bf28 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1bf9e:	b138      	cbz	r0, 1bfb0 <os_msys_init_once+0x3c>
   1bfa0:	2000      	movs	r0, #0
   1bfa2:	9000      	str	r0, [sp, #0]
   1bfa4:	4b03      	ldr	r3, [pc, #12]	; (1bfb4 <os_msys_init_once+0x40>)
   1bfa6:	681c      	ldr	r4, [r3, #0]
   1bfa8:	4603      	mov	r3, r0
   1bfaa:	4602      	mov	r2, r0
   1bfac:	4601      	mov	r1, r0
   1bfae:	47a0      	blx	r4
}
   1bfb0:	b003      	add	sp, #12
   1bfb2:	bd30      	pop	{r4, r5, pc}
   1bfb4:	20000104 	.word	0x20000104

0001bfb8 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   1bfb8:	4b02      	ldr	r3, [pc, #8]	; (1bfc4 <os_msys_reset+0xc>)
   1bfba:	2200      	movs	r2, #0
   1bfbc:	601a      	str	r2, [r3, #0]
   1bfbe:	605b      	str	r3, [r3, #4]
}
   1bfc0:	4770      	bx	lr
   1bfc2:	bf00      	nop
   1bfc4:	2000010c 	.word	0x2000010c

0001bfc8 <os_msys_get_pkthdr>:
{
   1bfc8:	b510      	push	{r4, lr}
   1bfca:	460c      	mov	r4, r1
    if (dsize == 0) {
   1bfcc:	b930      	cbnz	r0, 1bfdc <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   1bfce:	f7ff ff8d 	bl	1beec <os_msys_find_biggest_pool>
    if (!pool) {
   1bfd2:	b158      	cbz	r0, 1bfec <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   1bfd4:	b2e1      	uxtb	r1, r4
   1bfd6:	f7ff fe0e 	bl	1bbf6 <os_mbuf_get_pkthdr>
}
   1bfda:	bd10      	pop	{r4, pc}
   1bfdc:	f101 0308 	add.w	r3, r1, #8
   1bfe0:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   1bfe2:	4403      	add	r3, r0
   1bfe4:	b298      	uxth	r0, r3
   1bfe6:	f7ff ff89 	bl	1befc <os_msys_find_pool>
   1bfea:	e7f2      	b.n	1bfd2 <os_msys_get_pkthdr+0xa>
    return (NULL);
   1bfec:	2000      	movs	r0, #0
   1bfee:	e7f4      	b.n	1bfda <os_msys_get_pkthdr+0x12>

0001bff0 <os_msys_init>:

void
os_msys_init(void)
{
   1bff0:	b500      	push	{lr}
   1bff2:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   1bff4:	f7ff ffe0 	bl	1bfb8 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   1bff8:	4b06      	ldr	r3, [pc, #24]	; (1c014 <os_msys_init+0x24>)
   1bffa:	9301      	str	r3, [sp, #4]
   1bffc:	f44f 7392 	mov.w	r3, #292	; 0x124
   1c000:	9300      	str	r3, [sp, #0]
   1c002:	2340      	movs	r3, #64	; 0x40
   1c004:	4a04      	ldr	r2, [pc, #16]	; (1c018 <os_msys_init+0x28>)
   1c006:	4905      	ldr	r1, [pc, #20]	; (1c01c <os_msys_init+0x2c>)
   1c008:	4805      	ldr	r0, [pc, #20]	; (1c020 <os_msys_init+0x30>)
   1c00a:	f7ff ffb3 	bl	1bf74 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   1c00e:	b003      	add	sp, #12
   1c010:	f85d fb04 	ldr.w	pc, [sp], #4
   1c014:	000291c4 	.word	0x000291c4
   1c018:	2000d988 	.word	0x2000d988
   1c01c:	2000d994 	.word	0x2000d994
   1c020:	20009088 	.word	0x20009088

0001c024 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   1c024:	4603      	mov	r3, r0
   1c026:	b128      	cbz	r0, 1c034 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   1c028:	2000      	movs	r0, #0
   1c02a:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   1c02c:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   1c02e:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   1c030:	6018      	str	r0, [r3, #0]
   1c032:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1c034:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   1c036:	4770      	bx	lr

0001c038 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   1c038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1c03a:	4b2c      	ldr	r3, [pc, #176]	; (1c0ec <os_mutex_release+0xb4>)
   1c03c:	681b      	ldr	r3, [r3, #0]
   1c03e:	2b00      	cmp	r3, #0
   1c040:	d04d      	beq.n	1c0de <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1c042:	2800      	cmp	r0, #0
   1c044:	d04d      	beq.n	1c0e2 <os_mutex_release+0xaa>
   1c046:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   1c048:	f000 f97a 	bl	1c340 <os_sched_get_current_task>
   1c04c:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1c04e:	88e3      	ldrh	r3, [r4, #6]
   1c050:	2b00      	cmp	r3, #0
   1c052:	d048      	beq.n	1c0e6 <os_mutex_release+0xae>
   1c054:	68a2      	ldr	r2, [r4, #8]
   1c056:	4282      	cmp	r2, r0
   1c058:	d001      	beq.n	1c05e <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   1c05a:	2005      	movs	r0, #5
   1c05c:	e040      	b.n	1c0e0 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1c05e:	2b01      	cmp	r3, #1
   1c060:	d003      	beq.n	1c06a <os_mutex_release+0x32>
        --mu->mu_level;
   1c062:	3b01      	subs	r3, #1
   1c064:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1c066:	2000      	movs	r0, #0
        goto done;
   1c068:	e03a      	b.n	1c0e0 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   1c06a:	f000 fc3f 	bl	1c8ec <os_arch_save_sr>
   1c06e:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   1c070:	88e3      	ldrh	r3, [r4, #6]
   1c072:	3b01      	subs	r3, #1
   1c074:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   1c076:	7aea      	ldrb	r2, [r5, #11]
   1c078:	7963      	ldrb	r3, [r4, #5]
   1c07a:	429a      	cmp	r2, r3
   1c07c:	d11e      	bne.n	1c0bc <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1c07e:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   1c080:	b146      	cbz	r6, 1c094 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   1c082:	69f3      	ldr	r3, [r6, #28]
   1c084:	b1fb      	cbz	r3, 1c0c6 <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   1c086:	4630      	mov	r0, r6
   1c088:	f000 f9ae 	bl	1c3e8 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1c08c:	2301      	movs	r3, #1
   1c08e:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   1c090:	7af3      	ldrb	r3, [r6, #11]
   1c092:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   1c094:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   1c096:	b116      	cbz	r6, 1c09e <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   1c098:	7bb3      	ldrb	r3, [r6, #14]
   1c09a:	3301      	adds	r3, #1
   1c09c:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1c09e:	7bab      	ldrb	r3, [r5, #14]
   1c0a0:	3b01      	subs	r3, #1
   1c0a2:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   1c0a4:	f000 fa1a 	bl	1c4dc <os_sched_next_task>
   1c0a8:	4604      	mov	r4, r0
    if (rdy != current) {
   1c0aa:	4285      	cmp	r5, r0
   1c0ac:	d010      	beq.n	1c0d0 <os_mutex_release+0x98>
        resched = 1;
   1c0ae:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   1c0b0:	4638      	mov	r0, r7
   1c0b2:	f000 fc21 	bl	1c8f8 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1c0b6:	b96d      	cbnz	r5, 1c0d4 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   1c0b8:	2000      	movs	r0, #0
   1c0ba:	e011      	b.n	1c0e0 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   1c0bc:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   1c0be:	4628      	mov	r0, r5
   1c0c0:	f000 fa24 	bl	1c50c <os_sched_resort>
   1c0c4:	e7db      	b.n	1c07e <os_mutex_release+0x46>
        assert(rdy->t_obj);
   1c0c6:	461a      	mov	r2, r3
   1c0c8:	4619      	mov	r1, r3
   1c0ca:	4618      	mov	r0, r3
   1c0cc:	f7ff f978 	bl	1b3c0 <__assert_func>
    resched = 0;
   1c0d0:	2500      	movs	r5, #0
   1c0d2:	e7ed      	b.n	1c0b0 <os_mutex_release+0x78>
        os_sched(rdy);
   1c0d4:	4620      	mov	r0, r4
   1c0d6:	f000 fa07 	bl	1c4e8 <os_sched>
    ret = OS_OK;
   1c0da:	2000      	movs	r0, #0
   1c0dc:	e000      	b.n	1c0e0 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   1c0de:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   1c0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   1c0e2:	2003      	movs	r0, #3
   1c0e4:	e7fc      	b.n	1c0e0 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   1c0e6:	2005      	movs	r0, #5
   1c0e8:	e7fa      	b.n	1c0e0 <os_mutex_release+0xa8>
   1c0ea:	bf00      	nop
   1c0ec:	2000de88 	.word	0x2000de88

0001c0f0 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   1c0f0:	4b36      	ldr	r3, [pc, #216]	; (1c1cc <os_mutex_pend+0xdc>)
   1c0f2:	681b      	ldr	r3, [r3, #0]
   1c0f4:	2b00      	cmp	r3, #0
   1c0f6:	d065      	beq.n	1c1c4 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1c0f8:	2800      	cmp	r0, #0
   1c0fa:	d065      	beq.n	1c1c8 <os_mutex_pend+0xd8>
{
   1c0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c100:	460f      	mov	r7, r1
   1c102:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   1c104:	f000 fbf2 	bl	1c8ec <os_arch_save_sr>
   1c108:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   1c10a:	f000 f919 	bl	1c340 <os_sched_get_current_task>
   1c10e:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   1c110:	88e3      	ldrh	r3, [r4, #6]
   1c112:	b19b      	cbz	r3, 1c13c <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   1c114:	68a2      	ldr	r2, [r4, #8]
   1c116:	4282      	cmp	r2, r0
   1c118:	d01e      	beq.n	1c158 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1c11a:	b327      	cbz	r7, 1c166 <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   1c11c:	7ad1      	ldrb	r1, [r2, #11]
   1c11e:	7ac3      	ldrb	r3, [r0, #11]
   1c120:	4299      	cmp	r1, r3
   1c122:	d825      	bhi.n	1c170 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   1c124:	6821      	ldr	r1, [r4, #0]
   1c126:	b369      	cbz	r1, 1c184 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1c128:	460b      	mov	r3, r1
    last = NULL;
   1c12a:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1c12c:	b32b      	cbz	r3, 1c17a <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   1c12e:	7ae8      	ldrb	r0, [r5, #11]
   1c130:	7ada      	ldrb	r2, [r3, #11]
   1c132:	4290      	cmp	r0, r2
   1c134:	d321      	bcc.n	1c17a <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   1c136:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1c138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c13a:	e7f7      	b.n	1c12c <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   1c13c:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   1c13e:	7ac3      	ldrb	r3, [r0, #11]
   1c140:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   1c142:	7b83      	ldrb	r3, [r0, #14]
   1c144:	3301      	adds	r3, #1
   1c146:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   1c148:	2301      	movs	r3, #1
   1c14a:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1c14c:	4640      	mov	r0, r8
   1c14e:	f000 fbd3 	bl	1c8f8 <os_arch_restore_sr>
        ret = OS_OK;
   1c152:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   1c154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   1c158:	3301      	adds	r3, #1
   1c15a:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1c15c:	4640      	mov	r0, r8
   1c15e:	f000 fbcb 	bl	1c8f8 <os_arch_restore_sr>
        ret = OS_OK;
   1c162:	2000      	movs	r0, #0
        goto done;
   1c164:	e7f6      	b.n	1c154 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   1c166:	4640      	mov	r0, r8
   1c168:	f000 fbc6 	bl	1c8f8 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   1c16c:	2006      	movs	r0, #6
        goto done;
   1c16e:	e7f1      	b.n	1c154 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   1c170:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   1c172:	68a0      	ldr	r0, [r4, #8]
   1c174:	f000 f9ca 	bl	1c50c <os_sched_resort>
   1c178:	e7d4      	b.n	1c124 <os_mutex_pend+0x34>
    if (last) {
   1c17a:	b11e      	cbz	r6, 1c184 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   1c17c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   1c17e:	64eb      	str	r3, [r5, #76]	; 0x4c
   1c180:	64f5      	str	r5, [r6, #76]	; 0x4c
   1c182:	e001      	b.n	1c188 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   1c184:	64e9      	str	r1, [r5, #76]	; 0x4c
   1c186:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   1c188:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   1c18a:	7b6b      	ldrb	r3, [r5, #13]
   1c18c:	f043 0304 	orr.w	r3, r3, #4
   1c190:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   1c192:	4639      	mov	r1, r7
   1c194:	4628      	mov	r0, r5
   1c196:	f000 f8df 	bl	1c358 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   1c19a:	4640      	mov	r0, r8
   1c19c:	f000 fbac 	bl	1c8f8 <os_arch_restore_sr>
    os_sched(NULL);
   1c1a0:	2000      	movs	r0, #0
   1c1a2:	f000 f9a1 	bl	1c4e8 <os_sched>
    OS_ENTER_CRITICAL(sr);
   1c1a6:	f000 fba1 	bl	1c8ec <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   1c1aa:	7b6b      	ldrb	r3, [r5, #13]
   1c1ac:	f023 0304 	bic.w	r3, r3, #4
   1c1b0:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   1c1b2:	f000 fba1 	bl	1c8f8 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   1c1b6:	68a3      	ldr	r3, [r4, #8]
   1c1b8:	42ab      	cmp	r3, r5
   1c1ba:	d001      	beq.n	1c1c0 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   1c1bc:	2006      	movs	r0, #6
   1c1be:	e7c9      	b.n	1c154 <os_mutex_pend+0x64>
        ret = OS_OK;
   1c1c0:	2000      	movs	r0, #0
   1c1c2:	e7c7      	b.n	1c154 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   1c1c4:	2009      	movs	r0, #9
   1c1c6:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1c1c8:	2003      	movs	r0, #3
}
   1c1ca:	4770      	bx	lr
   1c1cc:	2000de88 	.word	0x2000de88

0001c1d0 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   1c1d0:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1c1d2:	4b05      	ldr	r3, [pc, #20]	; (1c1e8 <os_sanity_check_list_lock+0x18>)
   1c1d4:	6818      	ldr	r0, [r3, #0]
   1c1d6:	b900      	cbnz	r0, 1c1da <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1c1d8:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   1c1da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c1de:	4803      	ldr	r0, [pc, #12]	; (1c1ec <os_sanity_check_list_lock+0x1c>)
   1c1e0:	f7ff ff86 	bl	1c0f0 <os_mutex_pend>
err:
   1c1e4:	e7f8      	b.n	1c1d8 <os_sanity_check_list_lock+0x8>
   1c1e6:	bf00      	nop
   1c1e8:	2000de88 	.word	0x2000de88
   1c1ec:	2000dea0 	.word	0x2000dea0

0001c1f0 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   1c1f0:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1c1f2:	4b04      	ldr	r3, [pc, #16]	; (1c204 <os_sanity_check_list_unlock+0x14>)
   1c1f4:	6818      	ldr	r0, [r3, #0]
   1c1f6:	b900      	cbnz	r0, 1c1fa <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1c1f8:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   1c1fa:	4803      	ldr	r0, [pc, #12]	; (1c208 <os_sanity_check_list_unlock+0x18>)
   1c1fc:	f7ff ff1c 	bl	1c038 <os_mutex_release>
err:
   1c200:	e7fa      	b.n	1c1f8 <os_sanity_check_list_unlock+0x8>
   1c202:	bf00      	nop
   1c204:	2000de88 	.word	0x2000de88
   1c208:	2000dea0 	.word	0x2000dea0

0001c20c <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   1c20c:	2300      	movs	r3, #0
   1c20e:	6003      	str	r3, [r0, #0]
   1c210:	6043      	str	r3, [r0, #4]
   1c212:	6083      	str	r3, [r0, #8]
   1c214:	60c3      	str	r3, [r0, #12]
   1c216:	6103      	str	r3, [r0, #16]
}
   1c218:	4618      	mov	r0, r3
   1c21a:	4770      	bx	lr

0001c21c <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   1c21c:	b510      	push	{r4, lr}
   1c21e:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   1c220:	f7ff ffd6 	bl	1c1d0 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   1c224:	4603      	mov	r3, r0
   1c226:	b108      	cbz	r0, 1c22c <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   1c228:	4618      	mov	r0, r3
   1c22a:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   1c22c:	4b03      	ldr	r3, [pc, #12]	; (1c23c <os_sanity_check_register+0x20>)
   1c22e:	681a      	ldr	r2, [r3, #0]
   1c230:	6122      	str	r2, [r4, #16]
   1c232:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   1c234:	f7ff ffdc 	bl	1c1f0 <os_sanity_check_list_unlock>
   1c238:	4603      	mov	r3, r0
err:
   1c23a:	e7f5      	b.n	1c228 <os_sanity_check_register+0xc>
   1c23c:	2000d9b0 	.word	0x2000d9b0

0001c240 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   1c240:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1c242:	f7ff ffc5 	bl	1c1d0 <os_sanity_check_list_lock>
    if (rc != 0) {
   1c246:	b910      	cbnz	r0, 1c24e <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1c248:	4b17      	ldr	r3, [pc, #92]	; (1c2a8 <os_sanity_run+0x68>)
   1c24a:	681c      	ldr	r4, [r3, #0]
   1c24c:	e00e      	b.n	1c26c <os_sanity_run+0x2c>
        assert(0);
   1c24e:	2300      	movs	r3, #0
   1c250:	461a      	mov	r2, r3
   1c252:	4619      	mov	r1, r3
   1c254:	4618      	mov	r0, r3
   1c256:	f7ff f8b3 	bl	1b3c0 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1c25a:	f000 facf 	bl	1c7fc <os_time_get>
   1c25e:	6823      	ldr	r3, [r4, #0]
   1c260:	6862      	ldr	r2, [r4, #4]
   1c262:	4413      	add	r3, r2
   1c264:	1ac3      	subs	r3, r0, r3
   1c266:	2b00      	cmp	r3, #0
   1c268:	dc0d      	bgt.n	1c286 <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1c26a:	6924      	ldr	r4, [r4, #16]
   1c26c:	b18c      	cbz	r4, 1c292 <os_sanity_run+0x52>
        if (sc->sc_func) {
   1c26e:	68a3      	ldr	r3, [r4, #8]
   1c270:	2b00      	cmp	r3, #0
   1c272:	d0f2      	beq.n	1c25a <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   1c274:	68e1      	ldr	r1, [r4, #12]
   1c276:	4620      	mov	r0, r4
   1c278:	4798      	blx	r3
            if (rc == OS_OK) {
   1c27a:	2800      	cmp	r0, #0
   1c27c:	d1ed      	bne.n	1c25a <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   1c27e:	f000 fabd 	bl	1c7fc <os_time_get>
   1c282:	6020      	str	r0, [r4, #0]
                continue;
   1c284:	e7f1      	b.n	1c26a <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1c286:	2300      	movs	r3, #0
   1c288:	461a      	mov	r2, r3
   1c28a:	4619      	mov	r1, r3
   1c28c:	4618      	mov	r0, r3
   1c28e:	f7ff f897 	bl	1b3c0 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   1c292:	f7ff ffad 	bl	1c1f0 <os_sanity_check_list_unlock>
    if (rc != 0) {
   1c296:	b900      	cbnz	r0, 1c29a <os_sanity_run+0x5a>
        assert(0);
    }
}
   1c298:	bd10      	pop	{r4, pc}
        assert(0);
   1c29a:	2300      	movs	r3, #0
   1c29c:	461a      	mov	r2, r3
   1c29e:	4619      	mov	r1, r3
   1c2a0:	4618      	mov	r0, r3
   1c2a2:	f7ff f88d 	bl	1b3c0 <__assert_func>
   1c2a6:	bf00      	nop
   1c2a8:	2000d9b0 	.word	0x2000d9b0

0001c2ac <os_sanity_init>:

int
os_sanity_init(void)
{
   1c2ac:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   1c2ae:	4802      	ldr	r0, [pc, #8]	; (1c2b8 <os_sanity_init+0xc>)
   1c2b0:	f7ff feb8 	bl	1c024 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   1c2b4:	bd08      	pop	{r3, pc}
   1c2b6:	bf00      	nop
   1c2b8:	2000dea0 	.word	0x2000dea0

0001c2bc <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   1c2bc:	7b03      	ldrb	r3, [r0, #12]
   1c2be:	2b01      	cmp	r3, #1
   1c2c0:	d001      	beq.n	1c2c6 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   1c2c2:	2002      	movs	r0, #2
}
   1c2c4:	4770      	bx	lr
{
   1c2c6:	b510      	push	{r4, lr}
   1c2c8:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1c2ca:	f000 fb0f 	bl	1c8ec <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1c2ce:	4b0f      	ldr	r3, [pc, #60]	; (1c30c <os_sched_insert+0x50>)
   1c2d0:	681b      	ldr	r3, [r3, #0]
   1c2d2:	b12b      	cbz	r3, 1c2e0 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   1c2d4:	7ae1      	ldrb	r1, [r4, #11]
   1c2d6:	7ada      	ldrb	r2, [r3, #11]
   1c2d8:	4291      	cmp	r1, r2
   1c2da:	d301      	bcc.n	1c2e0 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1c2dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c2de:	e7f8      	b.n	1c2d2 <os_sched_insert+0x16>
    if (entry) {
   1c2e0:	b153      	cbz	r3, 1c2f8 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   1c2e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c2e4:	64a2      	str	r2, [r4, #72]	; 0x48
   1c2e6:	6463      	str	r3, [r4, #68]	; 0x44
   1c2e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c2ea:	6014      	str	r4, [r2, #0]
   1c2ec:	3444      	adds	r4, #68	; 0x44
   1c2ee:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1c2f0:	f000 fb02 	bl	1c8f8 <os_arch_restore_sr>
    return (0);
   1c2f4:	2000      	movs	r0, #0
}
   1c2f6:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   1c2f8:	2300      	movs	r3, #0
   1c2fa:	6463      	str	r3, [r4, #68]	; 0x44
   1c2fc:	4b03      	ldr	r3, [pc, #12]	; (1c30c <os_sched_insert+0x50>)
   1c2fe:	685a      	ldr	r2, [r3, #4]
   1c300:	64a2      	str	r2, [r4, #72]	; 0x48
   1c302:	6014      	str	r4, [r2, #0]
   1c304:	3444      	adds	r4, #68	; 0x44
   1c306:	605c      	str	r4, [r3, #4]
   1c308:	e7f2      	b.n	1c2f0 <os_sched_insert+0x34>
   1c30a:	bf00      	nop
   1c30c:	20000114 	.word	0x20000114

0001c310 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   1c310:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1c312:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1c314:	3301      	adds	r3, #1
   1c316:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   1c318:	4b06      	ldr	r3, [pc, #24]	; (1c334 <os_sched_ctx_sw_hook+0x24>)
   1c31a:	681c      	ldr	r4, [r3, #0]
   1c31c:	4b06      	ldr	r3, [pc, #24]	; (1c338 <os_sched_ctx_sw_hook+0x28>)
   1c31e:	6818      	ldr	r0, [r3, #0]
   1c320:	4906      	ldr	r1, [pc, #24]	; (1c33c <os_sched_ctx_sw_hook+0x2c>)
   1c322:	680b      	ldr	r3, [r1, #0]
   1c324:	1ac2      	subs	r2, r0, r3
   1c326:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1c328:	4413      	add	r3, r2
   1c32a:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   1c32c:	6008      	str	r0, [r1, #0]
}
   1c32e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c332:	4770      	bx	lr
   1c334:	2000deb0 	.word	0x2000deb0
   1c338:	2000dec0 	.word	0x2000dec0
   1c33c:	2000deac 	.word	0x2000deac

0001c340 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   1c340:	4b01      	ldr	r3, [pc, #4]	; (1c348 <os_sched_get_current_task+0x8>)
   1c342:	6818      	ldr	r0, [r3, #0]
   1c344:	4770      	bx	lr
   1c346:	bf00      	nop
   1c348:	2000deb0 	.word	0x2000deb0

0001c34c <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   1c34c:	4b01      	ldr	r3, [pc, #4]	; (1c354 <os_sched_set_current_task+0x8>)
   1c34e:	6018      	str	r0, [r3, #0]
}
   1c350:	4770      	bx	lr
   1c352:	bf00      	nop
   1c354:	2000deb0 	.word	0x2000deb0

0001c358 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   1c358:	b538      	push	{r3, r4, r5, lr}
   1c35a:	4604      	mov	r4, r0
   1c35c:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1c35e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1c360:	b1d3      	cbz	r3, 1c398 <os_sched_sleep+0x40>
   1c362:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1c364:	649a      	str	r2, [r3, #72]	; 0x48
   1c366:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1c368:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1c36a:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   1c36c:	2302      	movs	r3, #2
   1c36e:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1c370:	f000 fa44 	bl	1c7fc <os_time_get>
   1c374:	4428      	add	r0, r5
   1c376:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   1c378:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1c37c:	d010      	beq.n	1c3a0 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1c37e:	4b18      	ldr	r3, [pc, #96]	; (1c3e0 <os_sched_sleep+0x88>)
   1c380:	681b      	ldr	r3, [r3, #0]
   1c382:	b1d3      	cbz	r3, 1c3ba <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1c384:	7b5a      	ldrb	r2, [r3, #13]
   1c386:	f012 0f01 	tst.w	r2, #1
   1c38a:	d116      	bne.n	1c3ba <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   1c38c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1c38e:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1c390:	2a00      	cmp	r2, #0
   1c392:	dc12      	bgt.n	1c3ba <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1c394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c396:	e7f4      	b.n	1c382 <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1c398:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1c39a:	4b12      	ldr	r3, [pc, #72]	; (1c3e4 <os_sched_sleep+0x8c>)
   1c39c:	605a      	str	r2, [r3, #4]
   1c39e:	e7e2      	b.n	1c366 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   1c3a0:	7b63      	ldrb	r3, [r4, #13]
   1c3a2:	f043 0301 	orr.w	r3, r3, #1
   1c3a6:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1c3a8:	2300      	movs	r3, #0
   1c3aa:	6463      	str	r3, [r4, #68]	; 0x44
   1c3ac:	4b0c      	ldr	r3, [pc, #48]	; (1c3e0 <os_sched_sleep+0x88>)
   1c3ae:	685a      	ldr	r2, [r3, #4]
   1c3b0:	64a2      	str	r2, [r4, #72]	; 0x48
   1c3b2:	6014      	str	r4, [r2, #0]
   1c3b4:	3444      	adds	r4, #68	; 0x44
   1c3b6:	605c      	str	r4, [r3, #4]
   1c3b8:	e007      	b.n	1c3ca <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   1c3ba:	b143      	cbz	r3, 1c3ce <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   1c3bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c3be:	64a2      	str	r2, [r4, #72]	; 0x48
   1c3c0:	6463      	str	r3, [r4, #68]	; 0x44
   1c3c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c3c4:	6014      	str	r4, [r2, #0]
   1c3c6:	3444      	adds	r4, #68	; 0x44
   1c3c8:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   1c3ca:	2000      	movs	r0, #0
   1c3cc:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1c3ce:	2300      	movs	r3, #0
   1c3d0:	6463      	str	r3, [r4, #68]	; 0x44
   1c3d2:	4b03      	ldr	r3, [pc, #12]	; (1c3e0 <os_sched_sleep+0x88>)
   1c3d4:	685a      	ldr	r2, [r3, #4]
   1c3d6:	64a2      	str	r2, [r4, #72]	; 0x48
   1c3d8:	6014      	str	r4, [r2, #0]
   1c3da:	3444      	adds	r4, #68	; 0x44
   1c3dc:	605c      	str	r4, [r3, #4]
   1c3de:	e7f4      	b.n	1c3ca <os_sched_sleep+0x72>
   1c3e0:	2000011c 	.word	0x2000011c
   1c3e4:	20000114 	.word	0x20000114

0001c3e8 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   1c3e8:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   1c3ea:	7b03      	ldrb	r3, [r0, #12]
   1c3ec:	2b02      	cmp	r3, #2
   1c3ee:	d108      	bne.n	1c402 <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1c3f0:	69c3      	ldr	r3, [r0, #28]
   1c3f2:	b1db      	cbz	r3, 1c42c <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1c3f4:	681a      	ldr	r2, [r3, #0]
   1c3f6:	b152      	cbz	r2, 1c40e <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1c3f8:	4282      	cmp	r2, r0
   1c3fa:	d10f      	bne.n	1c41c <os_sched_wakeup+0x34>
   1c3fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1c3fe:	601a      	str	r2, [r3, #0]
   1c400:	e011      	b.n	1c426 <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   1c402:	2300      	movs	r3, #0
   1c404:	461a      	mov	r2, r3
   1c406:	4619      	mov	r1, r3
   1c408:	4618      	mov	r0, r3
   1c40a:	f7fe ffd9 	bl	1b3c0 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1c40e:	2300      	movs	r3, #0
   1c410:	461a      	mov	r2, r3
   1c412:	4619      	mov	r1, r3
   1c414:	4618      	mov	r0, r3
   1c416:	f7fe ffd3 	bl	1b3c0 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1c41a:	461a      	mov	r2, r3
   1c41c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1c41e:	4283      	cmp	r3, r0
   1c420:	d1fb      	bne.n	1c41a <os_sched_wakeup+0x32>
   1c422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c424:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   1c426:	2300      	movs	r3, #0
   1c428:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   1c42a:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1c42c:	2301      	movs	r3, #1
   1c42e:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   1c430:	2300      	movs	r3, #0
   1c432:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   1c434:	7b43      	ldrb	r3, [r0, #13]
   1c436:	f023 0301 	bic.w	r3, r3, #1
   1c43a:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1c43c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1c43e:	b143      	cbz	r3, 1c452 <os_sched_wakeup+0x6a>
   1c440:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1c442:	649a      	str	r2, [r3, #72]	; 0x48
   1c444:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1c446:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1c448:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1c44a:	f7ff ff37 	bl	1c2bc <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   1c44e:	2000      	movs	r0, #0
   1c450:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1c452:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1c454:	4b01      	ldr	r3, [pc, #4]	; (1c45c <os_sched_wakeup+0x74>)
   1c456:	605a      	str	r2, [r3, #4]
   1c458:	e7f4      	b.n	1c444 <os_sched_wakeup+0x5c>
   1c45a:	bf00      	nop
   1c45c:	2000011c 	.word	0x2000011c

0001c460 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1c460:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1c462:	f000 f9cb 	bl	1c7fc <os_time_get>
   1c466:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1c468:	f000 fa40 	bl	1c8ec <os_arch_save_sr>
   1c46c:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1c46e:	4b0a      	ldr	r3, [pc, #40]	; (1c498 <os_sched_os_timer_exp+0x38>)
   1c470:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1c472:	b160      	cbz	r0, 1c48e <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   1c474:	7b43      	ldrb	r3, [r0, #13]
   1c476:	f013 0f01 	tst.w	r3, #1
   1c47a:	d108      	bne.n	1c48e <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   1c47c:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   1c47e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1c480:	1aeb      	subs	r3, r5, r3
   1c482:	2b00      	cmp	r3, #0
   1c484:	db03      	blt.n	1c48e <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   1c486:	f7ff ffaf 	bl	1c3e8 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   1c48a:	4620      	mov	r0, r4
   1c48c:	e7f1      	b.n	1c472 <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   1c48e:	4630      	mov	r0, r6
   1c490:	f000 fa32 	bl	1c8f8 <os_arch_restore_sr>
}
   1c494:	bd70      	pop	{r4, r5, r6, pc}
   1c496:	bf00      	nop
   1c498:	2000011c 	.word	0x2000011c

0001c49c <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   1c49c:	b510      	push	{r4, lr}
   1c49e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   1c4a0:	f000 fa2d 	bl	1c8fe <os_arch_in_critical>
   1c4a4:	b150      	cbz	r0, 1c4bc <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   1c4a6:	4b0c      	ldr	r3, [pc, #48]	; (1c4d8 <os_sched_wakeup_ticks+0x3c>)
   1c4a8:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   1c4aa:	b17b      	cbz	r3, 1c4cc <os_sched_wakeup_ticks+0x30>
   1c4ac:	7b5a      	ldrb	r2, [r3, #13]
   1c4ae:	f012 0f01 	tst.w	r2, #1
   1c4b2:	d10e      	bne.n	1c4d2 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   1c4b4:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1c4b6:	1b00      	subs	r0, r0, r4
   1c4b8:	d406      	bmi.n	1c4c8 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   1c4ba:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1c4bc:	2300      	movs	r3, #0
   1c4be:	461a      	mov	r2, r3
   1c4c0:	4619      	mov	r1, r3
   1c4c2:	4618      	mov	r0, r3
   1c4c4:	f7fe ff7c 	bl	1b3c0 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   1c4c8:	2000      	movs	r0, #0
   1c4ca:	e7f6      	b.n	1c4ba <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   1c4cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c4d0:	e7f3      	b.n	1c4ba <os_sched_wakeup_ticks+0x1e>
   1c4d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1c4d6:	e7f0      	b.n	1c4ba <os_sched_wakeup_ticks+0x1e>
   1c4d8:	2000011c 	.word	0x2000011c

0001c4dc <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   1c4dc:	4b01      	ldr	r3, [pc, #4]	; (1c4e4 <os_sched_next_task+0x8>)
   1c4de:	6818      	ldr	r0, [r3, #0]
   1c4e0:	4770      	bx	lr
   1c4e2:	bf00      	nop
   1c4e4:	20000114 	.word	0x20000114

0001c4e8 <os_sched>:
{
   1c4e8:	b538      	push	{r3, r4, r5, lr}
   1c4ea:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1c4ec:	f000 f9fe 	bl	1c8ec <os_arch_save_sr>
   1c4f0:	4605      	mov	r5, r0
    if (!next_t) {
   1c4f2:	b134      	cbz	r4, 1c502 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   1c4f4:	4620      	mov	r0, r4
   1c4f6:	f000 f9ef 	bl	1c8d8 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   1c4fa:	4628      	mov	r0, r5
   1c4fc:	f000 f9fc 	bl	1c8f8 <os_arch_restore_sr>
}
   1c500:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1c502:	f7ff ffeb 	bl	1c4dc <os_sched_next_task>
   1c506:	4604      	mov	r4, r0
   1c508:	e7f4      	b.n	1c4f4 <os_sched+0xc>
	...

0001c50c <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   1c50c:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   1c50e:	7b03      	ldrb	r3, [r0, #12]
   1c510:	2b01      	cmp	r3, #1
   1c512:	d000      	beq.n	1c516 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1c514:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1c516:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1c518:	b13b      	cbz	r3, 1c52a <os_sched_resort+0x1e>
   1c51a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1c51c:	649a      	str	r2, [r3, #72]	; 0x48
   1c51e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1c520:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1c522:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1c524:	f7ff feca 	bl	1c2bc <os_sched_insert>
}
   1c528:	e7f4      	b.n	1c514 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1c52a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1c52c:	4b01      	ldr	r3, [pc, #4]	; (1c534 <os_sched_resort+0x28>)
   1c52e:	605a      	str	r2, [r3, #4]
   1c530:	e7f5      	b.n	1c51e <os_sched_resort+0x12>
   1c532:	bf00      	nop
   1c534:	20000114 	.word	0x20000114

0001c538 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   1c538:	4603      	mov	r3, r0
   1c53a:	b118      	cbz	r0, 1c544 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   1c53c:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   1c53e:	2000      	movs	r0, #0
   1c540:	6018      	str	r0, [r3, #0]
   1c542:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1c544:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1c546:	4770      	bx	lr

0001c548 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   1c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   1c54a:	4b17      	ldr	r3, [pc, #92]	; (1c5a8 <os_sem_release+0x60>)
   1c54c:	681b      	ldr	r3, [r3, #0]
   1c54e:	b33b      	cbz	r3, 1c5a0 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1c550:	b340      	cbz	r0, 1c5a4 <os_sem_release+0x5c>
   1c552:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   1c554:	f7ff fef4 	bl	1c340 <os_sched_get_current_task>
   1c558:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   1c55a:	f000 f9c7 	bl	1c8ec <os_arch_save_sr>
   1c55e:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   1c560:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1c562:	b165      	cbz	r5, 1c57e <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1c564:	7b6b      	ldrb	r3, [r5, #13]
   1c566:	f023 0302 	bic.w	r3, r3, #2
   1c56a:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   1c56c:	4628      	mov	r0, r5
   1c56e:	f7ff ff3b 	bl	1c3e8 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   1c572:	7afa      	ldrb	r2, [r7, #11]
   1c574:	7aeb      	ldrb	r3, [r5, #11]
   1c576:	429a      	cmp	r2, r3
   1c578:	d80b      	bhi.n	1c592 <os_sem_release+0x4a>
    resched = 0;
   1c57a:	2400      	movs	r4, #0
   1c57c:	e003      	b.n	1c586 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   1c57e:	88e3      	ldrh	r3, [r4, #6]
   1c580:	3301      	adds	r3, #1
   1c582:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   1c584:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1c586:	4630      	mov	r0, r6
   1c588:	f000 f9b6 	bl	1c8f8 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1c58c:	b91c      	cbnz	r4, 1c596 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1c58e:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   1c590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   1c592:	2401      	movs	r4, #1
   1c594:	e7f7      	b.n	1c586 <os_sem_release+0x3e>
        os_sched(rdy);
   1c596:	4628      	mov	r0, r5
   1c598:	f7ff ffa6 	bl	1c4e8 <os_sched>
    ret = OS_OK;
   1c59c:	2000      	movs	r0, #0
   1c59e:	e7f7      	b.n	1c590 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   1c5a0:	2009      	movs	r0, #9
   1c5a2:	e7f5      	b.n	1c590 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   1c5a4:	2003      	movs	r0, #3
   1c5a6:	e7f3      	b.n	1c590 <os_sem_release+0x48>
   1c5a8:	2000de88 	.word	0x2000de88

0001c5ac <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   1c5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1c5ae:	4b2c      	ldr	r3, [pc, #176]	; (1c660 <os_sem_pend+0xb4>)
   1c5b0:	681b      	ldr	r3, [r3, #0]
   1c5b2:	2b00      	cmp	r3, #0
   1c5b4:	d04f      	beq.n	1c656 <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1c5b6:	2800      	cmp	r0, #0
   1c5b8:	d04f      	beq.n	1c65a <os_sem_pend+0xae>
   1c5ba:	460d      	mov	r5, r1
   1c5bc:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1c5be:	f7ff febf 	bl	1c340 <os_sched_get_current_task>
   1c5c2:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   1c5c4:	f000 f992 	bl	1c8ec <os_arch_save_sr>
   1c5c8:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   1c5ca:	88e3      	ldrh	r3, [r4, #6]
   1c5cc:	b14b      	cbz	r3, 1c5e2 <os_sem_pend+0x36>
        sem->sem_tokens--;
   1c5ce:	3b01      	subs	r3, #1
   1c5d0:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1c5d2:	2400      	movs	r4, #0
    sched = 0;
   1c5d4:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   1c5d6:	4638      	mov	r0, r7
   1c5d8:	f000 f98e 	bl	1c8f8 <os_arch_restore_sr>

    if (sched) {
   1c5dc:	bb45      	cbnz	r5, 1c630 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1c5de:	4620      	mov	r0, r4
   1c5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1c5e2:	b315      	cbz	r5, 1c62a <os_sem_pend+0x7e>
        current->t_obj = sem;
   1c5e4:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   1c5e6:	7b73      	ldrb	r3, [r6, #13]
   1c5e8:	f043 0302 	orr.w	r3, r3, #2
   1c5ec:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1c5ee:	f8d4 c000 	ldr.w	ip, [r4]
   1c5f2:	f1bc 0f00 	cmp.w	ip, #0
   1c5f6:	d00e      	beq.n	1c616 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1c5f8:	4663      	mov	r3, ip
        last = NULL;
   1c5fa:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1c5fc:	b133      	cbz	r3, 1c60c <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1c5fe:	7af1      	ldrb	r1, [r6, #11]
   1c600:	7ada      	ldrb	r2, [r3, #11]
   1c602:	4291      	cmp	r1, r2
   1c604:	d302      	bcc.n	1c60c <os_sem_pend+0x60>
                last = entry;
   1c606:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1c608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c60a:	e7f7      	b.n	1c5fc <os_sem_pend+0x50>
        if (last) {
   1c60c:	b118      	cbz	r0, 1c616 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1c60e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1c610:	64f3      	str	r3, [r6, #76]	; 0x4c
   1c612:	64c6      	str	r6, [r0, #76]	; 0x4c
   1c614:	e002      	b.n	1c61c <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1c616:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   1c61a:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   1c61c:	4629      	mov	r1, r5
   1c61e:	4630      	mov	r0, r6
   1c620:	f7ff fe9a 	bl	1c358 <os_sched_sleep>
        ret = OS_OK;
   1c624:	2400      	movs	r4, #0
        sched = 1;
   1c626:	2501      	movs	r5, #1
   1c628:	e7d5      	b.n	1c5d6 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1c62a:	2406      	movs	r4, #6
    sched = 0;
   1c62c:	2500      	movs	r5, #0
   1c62e:	e7d2      	b.n	1c5d6 <os_sem_pend+0x2a>
        os_sched(NULL);
   1c630:	2000      	movs	r0, #0
   1c632:	f7ff ff59 	bl	1c4e8 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1c636:	7b73      	ldrb	r3, [r6, #13]
   1c638:	f013 0f02 	tst.w	r3, #2
   1c63c:	d101      	bne.n	1c642 <os_sem_pend+0x96>
            ret = OS_OK;
   1c63e:	2400      	movs	r4, #0
   1c640:	e7cd      	b.n	1c5de <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1c642:	f000 f953 	bl	1c8ec <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1c646:	7b73      	ldrb	r3, [r6, #13]
   1c648:	f023 0302 	bic.w	r3, r3, #2
   1c64c:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   1c64e:	f000 f953 	bl	1c8f8 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1c652:	2406      	movs	r4, #6
   1c654:	e7c3      	b.n	1c5de <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1c656:	2409      	movs	r4, #9
   1c658:	e7c1      	b.n	1c5de <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1c65a:	2403      	movs	r4, #3
   1c65c:	e7bf      	b.n	1c5de <os_sem_pend+0x32>
   1c65e:	bf00      	nop
   1c660:	2000de88 	.word	0x2000de88

0001c664 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   1c664:	2300      	movs	r3, #0
   1c666:	e003      	b.n	1c670 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   1c668:	4a03      	ldr	r2, [pc, #12]	; (1c678 <_clear_stack+0x14>)
   1c66a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1c66e:	3301      	adds	r3, #1
   1c670:	428b      	cmp	r3, r1
   1c672:	dbf9      	blt.n	1c668 <_clear_stack+0x4>
    }
}
   1c674:	4770      	bx	lr
   1c676:	bf00      	nop
   1c678:	deadbeef 	.word	0xdeadbeef

0001c67c <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   1c67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c680:	4604      	mov	r4, r0
   1c682:	460f      	mov	r7, r1
   1c684:	4690      	mov	r8, r2
   1c686:	461d      	mov	r5, r3
   1c688:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   1c68c:	2250      	movs	r2, #80	; 0x50
   1c68e:	2100      	movs	r1, #0
   1c690:	f000 fa99 	bl	1cbc6 <memset>

    t->t_func = func;
   1c694:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   1c698:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   1c69a:	f000 f927 	bl	1c8ec <os_arch_save_sr>
    rc = g_task_id;
   1c69e:	4b2b      	ldr	r3, [pc, #172]	; (1c74c <os_task_init+0xd0>)
   1c6a0:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   1c6a2:	1c6a      	adds	r2, r5, #1
   1c6a4:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1c6a6:	f000 f927 	bl	1c8f8 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   1c6aa:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   1c6ac:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1c6b0:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   1c6b2:	2301      	movs	r3, #1
   1c6b4:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   1c6b6:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   1c6b8:	2300      	movs	r3, #0
   1c6ba:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   1c6bc:	f104 0720 	add.w	r7, r4, #32
   1c6c0:	4638      	mov	r0, r7
   1c6c2:	f7ff fda3 	bl	1c20c <os_sanity_check_init>
    if (rc != OS_OK) {
   1c6c6:	4605      	mov	r5, r0
   1c6c8:	2800      	cmp	r0, #0
   1c6ca:	d132      	bne.n	1c732 <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   1c6cc:	9b07      	ldr	r3, [sp, #28]
   1c6ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c6d2:	d005      	beq.n	1c6e0 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   1c6d4:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   1c6d6:	4638      	mov	r0, r7
   1c6d8:	f7ff fda0 	bl	1c21c <os_sanity_check_register>
        if (rc != OS_OK) {
   1c6dc:	4605      	mov	r5, r0
   1c6de:	bb40      	cbnz	r0, 1c732 <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   1c6e0:	4631      	mov	r1, r6
   1c6e2:	9808      	ldr	r0, [sp, #32]
   1c6e4:	f7ff ffbe 	bl	1c664 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   1c6e8:	9b08      	ldr	r3, [sp, #32]
   1c6ea:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1c6ee:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   1c6f0:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   1c6f2:	4632      	mov	r2, r6
   1c6f4:	4620      	mov	r0, r4
   1c6f6:	f000 f907 	bl	1c908 <os_arch_task_stack_init>
   1c6fa:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1c6fc:	4b14      	ldr	r3, [pc, #80]	; (1c750 <os_task_init+0xd4>)
   1c6fe:	681b      	ldr	r3, [r3, #0]
   1c700:	b15b      	cbz	r3, 1c71a <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   1c702:	7ae1      	ldrb	r1, [r4, #11]
   1c704:	7ada      	ldrb	r2, [r3, #11]
   1c706:	4291      	cmp	r1, r2
   1c708:	d001      	beq.n	1c70e <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1c70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c70c:	e7f8      	b.n	1c700 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   1c70e:	2300      	movs	r3, #0
   1c710:	461a      	mov	r2, r3
   1c712:	4619      	mov	r1, r3
   1c714:	4618      	mov	r0, r3
   1c716:	f7fe fe53 	bl	1b3c0 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1c71a:	6423      	str	r3, [r4, #64]	; 0x40
   1c71c:	4b0c      	ldr	r3, [pc, #48]	; (1c750 <os_task_init+0xd4>)
   1c71e:	685a      	ldr	r2, [r3, #4]
   1c720:	6014      	str	r4, [r2, #0]
   1c722:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1c726:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   1c728:	4620      	mov	r0, r4
   1c72a:	f7ff fdc7 	bl	1c2bc <os_sched_insert>
   1c72e:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   1c730:	b110      	cbz	r0, 1c738 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   1c732:	4628      	mov	r0, r5
   1c734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   1c738:	f7fe fefc 	bl	1b534 <os_started>
   1c73c:	b908      	cbnz	r0, 1c742 <os_task_init+0xc6>
    return (0);
   1c73e:	4605      	mov	r5, r0
   1c740:	e7f7      	b.n	1c732 <os_task_init+0xb6>
        os_sched(NULL);
   1c742:	2000      	movs	r0, #0
   1c744:	f7ff fed0 	bl	1c4e8 <os_sched>
   1c748:	e7f3      	b.n	1c732 <os_task_init+0xb6>
   1c74a:	bf00      	nop
   1c74c:	2000deb4 	.word	0x2000deb4
   1c750:	2000deb8 	.word	0x2000deb8

0001c754 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   1c754:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1c758:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1c75a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1c75e:	e9d1 4500 	ldrd	r4, r5, [r1]
   1c762:	eb14 0b03 	adds.w	fp, r4, r3
   1c766:	f145 0c00 	adc.w	ip, r5, #0
   1c76a:	e9c2 bc00 	strd	fp, ip, [r2]
   1c76e:	688b      	ldr	r3, [r1, #8]
   1c770:	f641 6184 	movw	r1, #7812	; 0x1e84
   1c774:	fb01 3000 	mla	r0, r1, r0, r3
   1c778:	6090      	str	r0, [r2, #8]
   1c77a:	4b08      	ldr	r3, [pc, #32]	; (1c79c <os_deltatime+0x48>)
   1c77c:	4298      	cmp	r0, r3
   1c77e:	dd0a      	ble.n	1c796 <os_deltatime+0x42>
   1c780:	f11b 0401 	adds.w	r4, fp, #1
   1c784:	f14c 0500 	adc.w	r5, ip, #0
   1c788:	e9c2 4500 	strd	r4, r5, [r2]
   1c78c:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1c790:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   1c794:	6090      	str	r0, [r2, #8]
}
   1c796:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1c79a:	4770      	bx	lr
   1c79c:	000f423f 	.word	0x000f423f

0001c7a0 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   1c7a0:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   1c7a2:	1e04      	subs	r4, r0, #0
   1c7a4:	db0d      	blt.n	1c7c2 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   1c7a6:	f000 f8a1 	bl	1c8ec <os_arch_save_sr>
   1c7aa:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   1c7ac:	4a11      	ldr	r2, [pc, #68]	; (1c7f4 <os_time_tick+0x54>)
   1c7ae:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   1c7b0:	18e0      	adds	r0, r4, r3
   1c7b2:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   1c7b4:	ea90 0f03 	teq	r0, r3
   1c7b8:	d409      	bmi.n	1c7ce <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   1c7ba:	4628      	mov	r0, r5
   1c7bc:	f000 f89c 	bl	1c8f8 <os_arch_restore_sr>
}
   1c7c0:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   1c7c2:	2300      	movs	r3, #0
   1c7c4:	461a      	mov	r2, r3
   1c7c6:	4619      	mov	r1, r3
   1c7c8:	4618      	mov	r0, r3
   1c7ca:	f7fe fdf9 	bl	1b3c0 <__assert_func>
        delta = g_os_time - basetod.ostime;
   1c7ce:	4e0a      	ldr	r6, [pc, #40]	; (1c7f8 <os_time_tick+0x58>)
   1c7d0:	4631      	mov	r1, r6
   1c7d2:	f851 4b08 	ldr.w	r4, [r1], #8
   1c7d6:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   1c7d8:	460a      	mov	r2, r1
   1c7da:	4620      	mov	r0, r4
   1c7dc:	f7ff ffba 	bl	1c754 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   1c7e0:	f106 0118 	add.w	r1, r6, #24
   1c7e4:	460a      	mov	r2, r1
   1c7e6:	4620      	mov	r0, r4
   1c7e8:	f7ff ffb4 	bl	1c754 <os_deltatime>
        basetod.ostime = g_os_time;
   1c7ec:	4b01      	ldr	r3, [pc, #4]	; (1c7f4 <os_time_tick+0x54>)
   1c7ee:	681b      	ldr	r3, [r3, #0]
   1c7f0:	6033      	str	r3, [r6, #0]
   1c7f2:	e7e2      	b.n	1c7ba <os_time_tick+0x1a>
   1c7f4:	2000dec0 	.word	0x2000dec0
   1c7f8:	2000d9b8 	.word	0x2000d9b8

0001c7fc <os_time_get>:
}
   1c7fc:	4b01      	ldr	r3, [pc, #4]	; (1c804 <os_time_get+0x8>)
   1c7fe:	6818      	ldr	r0, [r3, #0]
   1c800:	4770      	bx	lr
   1c802:	bf00      	nop
   1c804:	2000dec0 	.word	0x2000dec0

0001c808 <os_time_advance>:

void
os_time_advance(int ticks)
{
   1c808:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1c80a:	1e04      	subs	r4, r0, #0
   1c80c:	db09      	blt.n	1c822 <os_time_advance+0x1a>

    if (ticks > 0) {
   1c80e:	2c00      	cmp	r4, #0
   1c810:	dd06      	ble.n	1c820 <os_time_advance+0x18>
        if (!os_started()) {
   1c812:	f7fe fe8f 	bl	1b534 <os_started>
   1c816:	b950      	cbnz	r0, 1c82e <os_time_advance+0x26>
            g_os_time += ticks;
   1c818:	4a0a      	ldr	r2, [pc, #40]	; (1c844 <os_time_advance+0x3c>)
   1c81a:	6813      	ldr	r3, [r2, #0]
   1c81c:	441c      	add	r4, r3
   1c81e:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   1c820:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   1c822:	2300      	movs	r3, #0
   1c824:	461a      	mov	r2, r3
   1c826:	4619      	mov	r1, r3
   1c828:	4618      	mov	r0, r3
   1c82a:	f7fe fdc9 	bl	1b3c0 <__assert_func>
            os_time_tick(ticks);
   1c82e:	4620      	mov	r0, r4
   1c830:	f7ff ffb6 	bl	1c7a0 <os_time_tick>
            os_callout_tick();
   1c834:	f7fe ffa6 	bl	1b784 <os_callout_tick>
            os_sched_os_timer_exp();
   1c838:	f7ff fe12 	bl	1c460 <os_sched_os_timer_exp>
            os_sched(NULL);
   1c83c:	2000      	movs	r0, #0
   1c83e:	f7ff fe53 	bl	1c4e8 <os_sched>
}
   1c842:	e7ed      	b.n	1c820 <os_time_advance+0x18>
   1c844:	2000dec0 	.word	0x2000dec0

0001c848 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   1c848:	b900      	cbnz	r0, 1c84c <os_time_delay+0x4>
   1c84a:	4770      	bx	lr
{
   1c84c:	b538      	push	{r3, r4, r5, lr}
   1c84e:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1c850:	f000 f84c 	bl	1c8ec <os_arch_save_sr>
   1c854:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1c856:	f7ff fd73 	bl	1c340 <os_sched_get_current_task>
   1c85a:	4621      	mov	r1, r4
   1c85c:	f7ff fd7c 	bl	1c358 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   1c860:	4628      	mov	r0, r5
   1c862:	f000 f849 	bl	1c8f8 <os_arch_restore_sr>
        os_sched(NULL);
   1c866:	2000      	movs	r0, #0
   1c868:	f7ff fe3e 	bl	1c4e8 <os_sched>
    }
}
   1c86c:	bd38      	pop	{r3, r4, r5, pc}
	...

0001c870 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   1c870:	b570      	push	{r4, r5, r6, lr}
   1c872:	4605      	mov	r5, r0
   1c874:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   1c876:	f000 f839 	bl	1c8ec <os_arch_save_sr>
   1c87a:	4606      	mov	r6, r0
    if (tv != NULL) {
   1c87c:	b145      	cbz	r5, 1c890 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1c87e:	f7ff ffbd 	bl	1c7fc <os_time_get>
   1c882:	4908      	ldr	r1, [pc, #32]	; (1c8a4 <os_gettimeofday+0x34>)
   1c884:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   1c888:	462a      	mov	r2, r5
   1c88a:	1ac0      	subs	r0, r0, r3
   1c88c:	f7ff ff62 	bl	1c754 <os_deltatime>
    }

    if (tz != NULL) {
   1c890:	b114      	cbz	r4, 1c898 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   1c892:	4b04      	ldr	r3, [pc, #16]	; (1c8a4 <os_gettimeofday+0x34>)
   1c894:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1c896:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   1c898:	4630      	mov	r0, r6
   1c89a:	f000 f82d 	bl	1c8f8 <os_arch_restore_sr>

    return (0);
}
   1c89e:	2000      	movs	r0, #0
   1c8a0:	bd70      	pop	{r4, r5, r6, pc}
   1c8a2:	bf00      	nop
   1c8a4:	2000d9b8 	.word	0x2000d9b8

0001c8a8 <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   1c8a8:	b538      	push	{r3, r4, r5, lr}
   1c8aa:	4604      	mov	r4, r0
   1c8ac:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1c8ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c8b2:	2300      	movs	r3, #0
   1c8b4:	01c0      	lsls	r0, r0, #7
   1c8b6:	0e61      	lsrs	r1, r4, #25
   1c8b8:	f002 f88a 	bl	1e9d0 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   1c8bc:	2901      	cmp	r1, #1
   1c8be:	bf08      	it	eq
   1c8c0:	2800      	cmpeq	r0, #0
   1c8c2:	d202      	bcs.n	1c8ca <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   1c8c4:	6028      	str	r0, [r5, #0]
    return 0;
   1c8c6:	2000      	movs	r0, #0
}
   1c8c8:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   1c8ca:	2002      	movs	r0, #2
   1c8cc:	e7fc      	b.n	1c8c8 <os_time_ms_to_ticks+0x20>

0001c8ce <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   1c8ce:	b508      	push	{r3, lr}
    os_time_advance(1);
   1c8d0:	2001      	movs	r0, #1
   1c8d2:	f7ff ff99 	bl	1c808 <os_time_advance>
}
   1c8d6:	bd08      	pop	{r3, pc}

0001c8d8 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   1c8d8:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1c8da:	f7ff fd19 	bl	1c310 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1c8de:	4b02      	ldr	r3, [pc, #8]	; (1c8e8 <os_arch_ctx_sw+0x10>)
   1c8e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c8e4:	605a      	str	r2, [r3, #4]
}
   1c8e6:	bd08      	pop	{r3, pc}
   1c8e8:	e000ed00 	.word	0xe000ed00

0001c8ec <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1c8ec:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1c8f0:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   1c8f2:	f000 0001 	and.w	r0, r0, #1
   1c8f6:	4770      	bx	lr

0001c8f8 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   1c8f8:	b900      	cbnz	r0, 1c8fc <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1c8fa:	b662      	cpsie	i
        __enable_irq();
    }
}
   1c8fc:	4770      	bx	lr

0001c8fe <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1c8fe:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   1c902:	f000 0001 	and.w	r0, r0, #1
   1c906:	4770      	bx	lr

0001c908 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   1c908:	b570      	push	{r4, r5, r6, lr}
   1c90a:	4606      	mov	r6, r0
   1c90c:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1c90e:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   1c912:	2309      	movs	r3, #9
   1c914:	e003      	b.n	1c91e <os_arch_task_stack_init+0x16>
        s[i] = 0;
   1c916:	2200      	movs	r2, #0
   1c918:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   1c91c:	3301      	adds	r3, #1
   1c91e:	2b0d      	cmp	r3, #13
   1c920:	ddf9      	ble.n	1c916 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1c922:	4620      	mov	r0, r4
   1c924:	f000 f8b6 	bl	1ca94 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   1c928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1c92c:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   1c930:	6973      	ldr	r3, [r6, #20]
   1c932:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1c936:	69b3      	ldr	r3, [r6, #24]
   1c938:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   1c93c:	f06f 0302 	mvn.w	r3, #2
   1c940:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   1c944:	4620      	mov	r0, r4
   1c946:	bd70      	pop	{r4, r5, r6, pc}

0001c948 <os_arch_init>:

void
os_arch_init(void)
{
   1c948:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1c94a:	4a04      	ldr	r2, [pc, #16]	; (1c95c <os_arch_init+0x14>)
   1c94c:	6953      	ldr	r3, [r2, #20]
   1c94e:	f043 0310 	orr.w	r3, r3, #16
   1c952:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   1c954:	f7fe fdf4 	bl	1b540 <os_init_idle_task>
}
   1c958:	bd08      	pop	{r3, pc}
   1c95a:	bf00      	nop
   1c95c:	e000ed00 	.word	0xe000ed00

0001c960 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1c960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1c962:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1c966:	b90c      	cbnz	r4, 1c96c <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1c968:	2400      	movs	r4, #0
   1c96a:	e009      	b.n	1c980 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   1c96c:	2007      	movs	r0, #7
   1c96e:	e02e      	b.n	1c9ce <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1c970:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1c974:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   1c978:	26ff      	movs	r6, #255	; 0xff
   1c97a:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1c97e:	3401      	adds	r4, #1
   1c980:	2cef      	cmp	r4, #239	; 0xef
   1c982:	d9f5      	bls.n	1c970 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1c984:	f06f 040d 	mvn.w	r4, #13
   1c988:	e007      	b.n	1c99a <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1c98a:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1c98c:	4e12      	ldr	r6, [pc, #72]	; (1c9d8 <os_arch_os_init+0x78>)
   1c98e:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1c990:	3510      	adds	r5, #16
   1c992:	4f12      	ldr	r7, [pc, #72]	; (1c9dc <os_arch_os_init+0x7c>)
   1c994:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   1c998:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1c99a:	2c25      	cmp	r4, #37	; 0x25
   1c99c:	ddf5      	ble.n	1c98a <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1c99e:	4c0e      	ldr	r4, [pc, #56]	; (1c9d8 <os_arch_os_init+0x78>)
   1c9a0:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1c9a2:	4e0f      	ldr	r6, [pc, #60]	; (1c9e0 <os_arch_os_init+0x80>)
   1c9a4:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1c9a6:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1c9a8:	4e0e      	ldr	r6, [pc, #56]	; (1c9e4 <os_arch_os_init+0x84>)
   1c9aa:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1c9ac:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1c9ae:	4e0e      	ldr	r6, [pc, #56]	; (1c9e8 <os_arch_os_init+0x88>)
   1c9b0:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c9b2:	25e0      	movs	r5, #224	; 0xe0
   1c9b4:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   1c9b8:	2520      	movs	r5, #32
   1c9ba:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1c9bc:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1c9c0:	f014 0f01 	tst.w	r4, #1
   1c9c4:	d004      	beq.n	1c9d0 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1c9c6:	f8df c024 	ldr.w	ip, [pc, #36]	; 1c9ec <os_arch_os_init+0x8c>
   1c9ca:	df00      	svc	0
        err = OS_OK;
   1c9cc:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1c9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1c9d0:	f7ff ffba 	bl	1c948 <os_arch_init>
        err = OS_OK;
   1c9d4:	2000      	movs	r0, #0
   1c9d6:	e7fa      	b.n	1c9ce <os_arch_os_init+0x6e>
   1c9d8:	e000ed00 	.word	0xe000ed00
   1c9dc:	0001cb33 	.word	0x0001cb33
   1c9e0:	0001ca9b 	.word	0x0001ca9b
   1c9e4:	0001cae1 	.word	0x0001cae1
   1c9e8:	0001cb27 	.word	0x0001cb27
   1c9ec:	0001c949 	.word	0x0001c949

0001c9f0 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1c9f0:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1c9f2:	f7ff fd73 	bl	1c4dc <os_sched_next_task>
   1c9f6:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   1c9f8:	f7ff fca8 	bl	1c34c <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1c9fc:	6823      	ldr	r3, [r4, #0]
   1c9fe:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1ca00:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   1ca04:	2106      	movs	r1, #6
   1ca06:	2080      	movs	r0, #128	; 0x80
   1ca08:	f000 fde8 	bl	1d5dc <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1ca0c:	4b03      	ldr	r3, [pc, #12]	; (1ca1c <os_arch_start+0x2c>)
   1ca0e:	2201      	movs	r2, #1
   1ca10:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1ca12:	4620      	mov	r0, r4
   1ca14:	f7ff ff60 	bl	1c8d8 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   1ca18:	69a0      	ldr	r0, [r4, #24]
   1ca1a:	bd10      	pop	{r4, pc}
   1ca1c:	2000de88 	.word	0x2000de88

0001ca20 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1ca20:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1ca22:	4814      	ldr	r0, [pc, #80]	; (1ca74 <os_arch_os_start+0x54>)
   1ca24:	6800      	ldr	r0, [r0, #0]
   1ca26:	3804      	subs	r0, #4
   1ca28:	f000 f82a 	bl	1ca80 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ca2c:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1ca30:	b9d4      	cbnz	r4, 1ca68 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1ca32:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1ca36:	f004 0403 	and.w	r4, r4, #3
   1ca3a:	2c03      	cmp	r4, #3
   1ca3c:	d808      	bhi.n	1ca50 <os_arch_os_start+0x30>
   1ca3e:	e8df f004 	tbb	[pc, r4]
   1ca42:	1515      	.short	0x1515
   1ca44:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   1ca46:	4c0c      	ldr	r4, [pc, #48]	; (1ca78 <os_arch_os_start+0x58>)
   1ca48:	6824      	ldr	r4, [r4, #0]
   1ca4a:	f014 0f01 	tst.w	r4, #1
   1ca4e:	d10f      	bne.n	1ca70 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   1ca50:	f8df c028 	ldr.w	ip, [pc, #40]	; 1ca7c <os_arch_os_start+0x5c>
   1ca54:	df00      	svc	0
   1ca56:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   1ca58:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   1ca5a:	4c07      	ldr	r4, [pc, #28]	; (1ca78 <os_arch_os_start+0x58>)
   1ca5c:	6824      	ldr	r4, [r4, #0]
   1ca5e:	f014 0f01 	tst.w	r4, #1
   1ca62:	d1f5      	bne.n	1ca50 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   1ca64:	2008      	movs	r0, #8
   1ca66:	e7f7      	b.n	1ca58 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   1ca68:	2007      	movs	r0, #7
   1ca6a:	e7f5      	b.n	1ca58 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   1ca6c:	2008      	movs	r0, #8
   1ca6e:	e7f3      	b.n	1ca58 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   1ca70:	2008      	movs	r0, #8
   1ca72:	e7f1      	b.n	1ca58 <os_arch_os_start+0x38>
   1ca74:	2000dde8 	.word	0x2000dde8
   1ca78:	2000d9e8 	.word	0x2000d9e8
   1ca7c:	0001c9f1 	.word	0x0001c9f1

0001ca80 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   1ca80:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   1ca84:	4832      	ldr	r0, [pc, #200]	; (1cb50 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1ca86:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1ca88:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1ca8a:	f380 8814 	msr	CONTROL, r0
        ISB
   1ca8e:	f3bf 8f6f 	isb	sy
        BX      LR
   1ca92:	4770      	bx	lr

0001ca94 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   1ca94:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   1ca98:	4770      	bx	lr

0001ca9a <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   1ca9a:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   1ca9e:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   1caa0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   1caa4:	b951      	cbnz	r1, 1cabc <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1caa6:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1caaa:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   1caac:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1caae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   1cab2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   1cab6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   1caba:	4770      	bx	lr

0001cabc <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1cabc:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   1cabe:	4a25      	ldr	r2, [pc, #148]	; (1cb54 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   1cac0:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   1cac2:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   1cac4:	d809      	bhi.n	1cada <SVC_Done>

        LDR     R4,=SVC_Table-4
   1cac6:	4c24      	ldr	r4, [pc, #144]	; (1cb58 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   1cac8:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1cacc:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   1cad0:	47a0      	blx	r4

        MRS     R12,PSP
   1cad2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   1cad6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0001cada <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1cada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   1cade:	4770      	bx	lr

0001cae0 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1cae0:	4b1e      	ldr	r3, [pc, #120]	; (1cb5c <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   1cae2:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   1cae4:	4b1e      	ldr	r3, [pc, #120]	; (1cb60 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1cae6:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   1cae8:	4291      	cmp	r1, r2
        IT      EQ
   1caea:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   1caec:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   1caee:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   1caf2:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   1caf6:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   1caf8:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   1cafc:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1cb00:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1cb04:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   1cb06:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   1cb0a:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   1cb0e:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   1cb12:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   1cb14:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   1cb18:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   1cb1c:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   1cb20:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1cb24:	4770      	bx	lr

0001cb26 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1cb26:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   1cb28:	f7ff fed1 	bl	1c8ce <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1cb2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   1cb30:	4770      	bx	lr

0001cb32 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1cb32:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1cb36:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   1cb38:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   1cb3c:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   1cb40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1cb44:	4668      	mov	r0, sp
        BL      os_default_irq
   1cb46:	f7fe fc61 	bl	1b40c <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   1cb4a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   1cb4e:	4770      	bx	lr
        LDR     R0,=os_flags
   1cb50:	2000d9e8 	.word	0x2000d9e8
        LDR     R2,=SVC_Count
   1cb54:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   1cb58:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1cb5c:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   1cb60:	2000deb0 	.word	0x2000deb0

0001cb64 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   1cb64:	b470      	push	{r4, r5, r6}
   1cb66:	f04f 0500 	mov.w	r5, #0
   1cb6a:	f022 0603 	bic.w	r6, r2, #3
   1cb6e:	e005      	b.n	1cb7c <test1>

0001cb70 <loop1>:
   1cb70:	5943      	ldr	r3, [r0, r5]
   1cb72:	594c      	ldr	r4, [r1, r5]
   1cb74:	42a3      	cmp	r3, r4
   1cb76:	d104      	bne.n	1cb82 <res1>
   1cb78:	f105 0504 	add.w	r5, r5, #4

0001cb7c <test1>:
   1cb7c:	42b5      	cmp	r5, r6
   1cb7e:	d1f7      	bne.n	1cb70 <loop1>
   1cb80:	e00d      	b.n	1cb9e <test2>

0001cb82 <res1>:
   1cb82:	ba1b      	rev	r3, r3
   1cb84:	ba24      	rev	r4, r4
   1cb86:	1b1b      	subs	r3, r3, r4
   1cb88:	bf8c      	ite	hi
   1cb8a:	2301      	movhi	r3, #1
   1cb8c:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   1cb90:	e009      	b.n	1cba6 <done>

0001cb92 <loop2>:
   1cb92:	5d43      	ldrb	r3, [r0, r5]
   1cb94:	5d4c      	ldrb	r4, [r1, r5]
   1cb96:	1b1b      	subs	r3, r3, r4
   1cb98:	d105      	bne.n	1cba6 <done>
   1cb9a:	f105 0501 	add.w	r5, r5, #1

0001cb9e <test2>:
   1cb9e:	4295      	cmp	r5, r2
   1cba0:	d1f7      	bne.n	1cb92 <loop2>
   1cba2:	f04f 0300 	mov.w	r3, #0

0001cba6 <done>:
   1cba6:	4618      	mov	r0, r3
   1cba8:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1cbaa:	4770      	bx	lr

0001cbac <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1cbac:	e001      	b.n	1cbb2 <test1>

0001cbae <loop1>:
   1cbae:	588b      	ldr	r3, [r1, r2]
   1cbb0:	5083      	str	r3, [r0, r2]

0001cbb2 <test1>:
   1cbb2:	3a04      	subs	r2, #4
   1cbb4:	d5fb      	bpl.n	1cbae <loop1>
   1cbb6:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1cbba:	e001      	b.n	1cbc0 <test2>

0001cbbc <loop2>:
   1cbbc:	5c8b      	ldrb	r3, [r1, r2]
   1cbbe:	5483      	strb	r3, [r0, r2]

0001cbc0 <test2>:
   1cbc0:	3a01      	subs	r2, #1
   1cbc2:	d5fb      	bpl.n	1cbbc <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   1cbc4:	4770      	bx	lr

0001cbc6 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1cbc6:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1cbc8:	4605      	mov	r5, r0
   1cbca:	b2c9      	uxtb	r1, r1
   1cbcc:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1cbd0:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1cbd4:	18ab      	adds	r3, r5, r2
   1cbd6:	2403      	movs	r4, #3
   1cbd8:	4023      	ands	r3, r4
   1cbda:	1ad3      	subs	r3, r2, r3
   1cbdc:	d40b      	bmi.n	1cbf6 <memset+0x30>
   1cbde:	e001      	b.n	1cbe4 <memset+0x1e>
   1cbe0:	3a01      	subs	r2, #1
   1cbe2:	54a9      	strb	r1, [r5, r2]
   1cbe4:	429a      	cmp	r2, r3
   1cbe6:	d1fb      	bne.n	1cbe0 <memset+0x1a>
   1cbe8:	e000      	b.n	1cbec <memset+0x26>
   1cbea:	50a9      	str	r1, [r5, r2]
   1cbec:	3a04      	subs	r2, #4
   1cbee:	d5fc      	bpl.n	1cbea <memset+0x24>
   1cbf0:	3204      	adds	r2, #4
   1cbf2:	e000      	b.n	1cbf6 <memset+0x30>
   1cbf4:	54a9      	strb	r1, [r5, r2]
   1cbf6:	3a01      	subs	r2, #1
   1cbf8:	d5fc      	bpl.n	1cbf4 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1cbfa:	bc30      	pop	{r4, r5}
   1cbfc:	4770      	bx	lr

0001cbfe <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1cbfe:	b430      	push	{r4, r5}
   1cc00:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   1cc02:	1c55      	adds	r5, r2, #1
   1cc04:	7813      	ldrb	r3, [r2, #0]
   1cc06:	1c4c      	adds	r4, r1, #1
   1cc08:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   1cc0a:	1a18      	subs	r0, r3, r0
   1cc0c:	d103      	bne.n	1cc16 <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   1cc0e:	462a      	mov	r2, r5
   1cc10:	4621      	mov	r1, r4
		if (d || !ch)
   1cc12:	2b00      	cmp	r3, #0
   1cc14:	d1f5      	bne.n	1cc02 <strcmp+0x4>
			break;
	}

	return d;
}
   1cc16:	bc30      	pop	{r4, r5}
   1cc18:	4770      	bx	lr

0001cc1a <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1cc1a:	4603      	mov	r3, r0
	while (*ss)
   1cc1c:	e000      	b.n	1cc20 <strlen+0x6>
		ss++;
   1cc1e:	3301      	adds	r3, #1
	while (*ss)
   1cc20:	781a      	ldrb	r2, [r3, #0]
   1cc22:	2a00      	cmp	r2, #0
   1cc24:	d1fb      	bne.n	1cc1e <strlen+0x4>
	return ss - s;
}
   1cc26:	1a18      	subs	r0, r3, r0
   1cc28:	4770      	bx	lr

0001cc2a <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1cc2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cc2e:	b082      	sub	sp, #8
   1cc30:	e9cd 0100 	strd	r0, r1, [sp]
   1cc34:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1cc36:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   1cc3a:	2401      	movs	r4, #1
   1cc3c:	2500      	movs	r5, #0
    while (num / d >= p->base)
   1cc3e:	e004      	b.n	1cc4a <ui2a+0x20>
        d *= p->base;
   1cc40:	fb06 f305 	mul.w	r3, r6, r5
   1cc44:	fba4 4506 	umull	r4, r5, r4, r6
   1cc48:	441d      	add	r5, r3
    while (num / d >= p->base)
   1cc4a:	4622      	mov	r2, r4
   1cc4c:	462b      	mov	r3, r5
   1cc4e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1cc52:	f001 febd 	bl	1e9d0 <__aeabi_uldivmod>
   1cc56:	f899 6003 	ldrb.w	r6, [r9, #3]
   1cc5a:	2700      	movs	r7, #0
   1cc5c:	42b9      	cmp	r1, r7
   1cc5e:	bf08      	it	eq
   1cc60:	42b0      	cmpeq	r0, r6
   1cc62:	d2ed      	bcs.n	1cc40 <ui2a+0x16>
    int n = 0;
   1cc64:	f04f 0a00 	mov.w	sl, #0
   1cc68:	e007      	b.n	1cc7a <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1cc6a:	2330      	movs	r3, #48	; 0x30
   1cc6c:	441e      	add	r6, r3
   1cc6e:	f888 6000 	strb.w	r6, [r8]
            ++n;
   1cc72:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1cc76:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   1cc7a:	ea54 0305 	orrs.w	r3, r4, r5
   1cc7e:	d02e      	beq.n	1ccde <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   1cc80:	4622      	mov	r2, r4
   1cc82:	462b      	mov	r3, r5
   1cc84:	e9dd 0100 	ldrd	r0, r1, [sp]
   1cc88:	f001 fea2 	bl	1e9d0 <__aeabi_uldivmod>
   1cc8c:	4606      	mov	r6, r0
   1cc8e:	460f      	mov	r7, r1
        num %= d;
   1cc90:	4622      	mov	r2, r4
   1cc92:	462b      	mov	r3, r5
   1cc94:	e9dd 0100 	ldrd	r0, r1, [sp]
   1cc98:	f001 fe9a 	bl	1e9d0 <__aeabi_uldivmod>
   1cc9c:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   1cca0:	f899 2003 	ldrb.w	r2, [r9, #3]
   1cca4:	2300      	movs	r3, #0
   1cca6:	4620      	mov	r0, r4
   1cca8:	4629      	mov	r1, r5
   1ccaa:	f001 fe91 	bl	1e9d0 <__aeabi_uldivmod>
   1ccae:	4604      	mov	r4, r0
   1ccb0:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   1ccb2:	f1ba 0f00 	cmp.w	sl, #0
   1ccb6:	d105      	bne.n	1ccc4 <ui2a+0x9a>
   1ccb8:	ea56 0307 	orrs.w	r3, r6, r7
   1ccbc:	d102      	bne.n	1ccc4 <ui2a+0x9a>
   1ccbe:	ea54 0305 	orrs.w	r3, r4, r5
   1ccc2:	d1da      	bne.n	1cc7a <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1ccc4:	2f00      	cmp	r7, #0
   1ccc6:	bf08      	it	eq
   1ccc8:	2e0a      	cmpeq	r6, #10
   1ccca:	d3ce      	bcc.n	1cc6a <ui2a+0x40>
   1cccc:	f899 3002 	ldrb.w	r3, [r9, #2]
   1ccd0:	f013 0f04 	tst.w	r3, #4
   1ccd4:	d001      	beq.n	1ccda <ui2a+0xb0>
   1ccd6:	2337      	movs	r3, #55	; 0x37
   1ccd8:	e7c8      	b.n	1cc6c <ui2a+0x42>
   1ccda:	2357      	movs	r3, #87	; 0x57
   1ccdc:	e7c6      	b.n	1cc6c <ui2a+0x42>
        }
    }
    *bf = 0;
   1ccde:	2300      	movs	r3, #0
   1cce0:	f888 3000 	strb.w	r3, [r8]
}
   1cce4:	b002      	add	sp, #8
   1cce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ccea <i2a>:

static void i2a(long long int num, struct param *p)
{
   1ccea:	b508      	push	{r3, lr}
    if (num < 0) {
   1ccec:	2800      	cmp	r0, #0
   1ccee:	f171 0300 	sbcs.w	r3, r1, #0
   1ccf2:	db02      	blt.n	1ccfa <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1ccf4:	f7ff ff99 	bl	1cc2a <ui2a>
}
   1ccf8:	bd08      	pop	{r3, pc}
        num = -num;
   1ccfa:	4240      	negs	r0, r0
   1ccfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1cd00:	7893      	ldrb	r3, [r2, #2]
   1cd02:	f043 0301 	orr.w	r3, r3, #1
   1cd06:	7093      	strb	r3, [r2, #2]
   1cd08:	e7f4      	b.n	1ccf4 <i2a+0xa>

0001cd0a <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1cd0a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1cd0e:	b2db      	uxtb	r3, r3
   1cd10:	2b09      	cmp	r3, #9
   1cd12:	d90b      	bls.n	1cd2c <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1cd14:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1cd18:	b2db      	uxtb	r3, r3
   1cd1a:	2b05      	cmp	r3, #5
   1cd1c:	d908      	bls.n	1cd30 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1cd1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1cd22:	b2db      	uxtb	r3, r3
   1cd24:	2b05      	cmp	r3, #5
   1cd26:	d805      	bhi.n	1cd34 <a2d+0x2a>
        return ch - 'A' + 10;
   1cd28:	3837      	subs	r0, #55	; 0x37
   1cd2a:	4770      	bx	lr
        return ch - '0';
   1cd2c:	3830      	subs	r0, #48	; 0x30
   1cd2e:	4770      	bx	lr
        return ch - 'a' + 10;
   1cd30:	3857      	subs	r0, #87	; 0x57
   1cd32:	4770      	bx	lr
    else
        return -1;
   1cd34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1cd38:	4770      	bx	lr

0001cd3a <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1cd3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cd3e:	4605      	mov	r5, r0
   1cd40:	4688      	mov	r8, r1
   1cd42:	4617      	mov	r7, r2
   1cd44:	4699      	mov	r9, r3
    const char *p = *src;
   1cd46:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1cd48:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1cd4a:	4628      	mov	r0, r5
   1cd4c:	f7ff ffdd 	bl	1cd0a <a2d>
   1cd50:	2800      	cmp	r0, #0
   1cd52:	db06      	blt.n	1cd62 <a2i+0x28>
        if (digit > base)
   1cd54:	42b8      	cmp	r0, r7
   1cd56:	dc04      	bgt.n	1cd62 <a2i+0x28>
            break;
        num = num * base + digit;
   1cd58:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   1cd5c:	7825      	ldrb	r5, [r4, #0]
   1cd5e:	3401      	adds	r4, #1
   1cd60:	e7f3      	b.n	1cd4a <a2i+0x10>
    }
    *src = p;
   1cd62:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   1cd66:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   1cd6a:	4628      	mov	r0, r5
   1cd6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001cd70 <putf>:

static int putf(FILE *putp, char c)
{
   1cd70:	b500      	push	{lr}
   1cd72:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1cd74:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1cd78:	6803      	ldr	r3, [r0, #0]
   1cd7a:	681b      	ldr	r3, [r3, #0]
   1cd7c:	b14b      	cbz	r3, 1cd92 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1cd7e:	2201      	movs	r2, #1
   1cd80:	f10d 0107 	add.w	r1, sp, #7
   1cd84:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1cd86:	2801      	cmp	r0, #1
   1cd88:	d005      	beq.n	1cd96 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   1cd8a:	2000      	movs	r0, #0
    else
        return 1;
}
   1cd8c:	b003      	add	sp, #12
   1cd8e:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1cd92:	2000      	movs	r0, #0
   1cd94:	e7fa      	b.n	1cd8c <putf+0x1c>
        return 1;
   1cd96:	2001      	movs	r0, #1
   1cd98:	e7f8      	b.n	1cd8c <putf+0x1c>
	...

0001cd9c <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1cd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cda0:	4606      	mov	r6, r0
   1cda2:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1cda4:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1cda6:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1cda8:	e001      	b.n	1cdae <putchw+0x12>
        n--;
   1cdaa:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   1cdac:	4613      	mov	r3, r2
   1cdae:	1c5a      	adds	r2, r3, #1
   1cdb0:	781b      	ldrb	r3, [r3, #0]
   1cdb2:	b10b      	cbz	r3, 1cdb8 <putchw+0x1c>
   1cdb4:	2c00      	cmp	r4, #0
   1cdb6:	dcf8      	bgt.n	1cdaa <putchw+0xe>
    if (p->sign)
   1cdb8:	78bb      	ldrb	r3, [r7, #2]
   1cdba:	f013 0f01 	tst.w	r3, #1
   1cdbe:	d000      	beq.n	1cdc2 <putchw+0x26>
        n--;
   1cdc0:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1cdc2:	887b      	ldrh	r3, [r7, #2]
   1cdc4:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1cdc8:	b29b      	uxth	r3, r3
   1cdca:	f241 0202 	movw	r2, #4098	; 0x1002
   1cdce:	4293      	cmp	r3, r2
   1cdd0:	d01c      	beq.n	1ce0c <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   1cdd2:	f640 0202 	movw	r2, #2050	; 0x802
   1cdd6:	4293      	cmp	r3, r2
   1cdd8:	d01a      	beq.n	1ce10 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1cdda:	683b      	ldr	r3, [r7, #0]
   1cddc:	4d35      	ldr	r5, [pc, #212]	; (1ceb4 <putchw+0x118>)
   1cdde:	401d      	ands	r5, r3
   1cde0:	b1f5      	cbz	r5, 1ce20 <putchw+0x84>
    unsigned written = 0;
   1cde2:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1cde4:	78bb      	ldrb	r3, [r7, #2]
   1cde6:	f013 0f01 	tst.w	r3, #1
   1cdea:	d11f      	bne.n	1ce2c <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1cdec:	887b      	ldrh	r3, [r7, #2]
   1cdee:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1cdf2:	b29b      	uxth	r3, r3
   1cdf4:	f241 0202 	movw	r2, #4098	; 0x1002
   1cdf8:	4293      	cmp	r3, r2
   1cdfa:	d01d      	beq.n	1ce38 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1cdfc:	f640 0202 	movw	r2, #2050	; 0x802
   1ce00:	4293      	cmp	r3, r2
   1ce02:	d02a      	beq.n	1ce5a <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1ce04:	787b      	ldrb	r3, [r7, #1]
   1ce06:	bba3      	cbnz	r3, 1ce72 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1ce08:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   1ce0a:	e03d      	b.n	1ce88 <putchw+0xec>
        n -= 2;
   1ce0c:	3c02      	subs	r4, #2
   1ce0e:	e7e4      	b.n	1cdda <putchw+0x3e>
        n--;
   1ce10:	3c01      	subs	r4, #1
   1ce12:	e7e2      	b.n	1cdda <putchw+0x3e>
            written += putf(putp, ' ');
   1ce14:	2120      	movs	r1, #32
   1ce16:	4630      	mov	r0, r6
   1ce18:	f7ff ffaa 	bl	1cd70 <putf>
   1ce1c:	4405      	add	r5, r0
        while (n-- > 0)
   1ce1e:	4644      	mov	r4, r8
   1ce20:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1ce24:	2c00      	cmp	r4, #0
   1ce26:	dcf5      	bgt.n	1ce14 <putchw+0x78>
   1ce28:	4644      	mov	r4, r8
   1ce2a:	e7db      	b.n	1cde4 <putchw+0x48>
        written += putf(putp, '-');
   1ce2c:	212d      	movs	r1, #45	; 0x2d
   1ce2e:	4630      	mov	r0, r6
   1ce30:	f7ff ff9e 	bl	1cd70 <putf>
   1ce34:	4405      	add	r5, r0
   1ce36:	e7d9      	b.n	1cdec <putchw+0x50>
        written += putf(putp, '0');
   1ce38:	2130      	movs	r1, #48	; 0x30
   1ce3a:	4630      	mov	r0, r6
   1ce3c:	f7ff ff98 	bl	1cd70 <putf>
   1ce40:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1ce42:	78bb      	ldrb	r3, [r7, #2]
   1ce44:	f013 0f04 	tst.w	r3, #4
   1ce48:	d005      	beq.n	1ce56 <putchw+0xba>
   1ce4a:	2158      	movs	r1, #88	; 0x58
   1ce4c:	4630      	mov	r0, r6
   1ce4e:	f7ff ff8f 	bl	1cd70 <putf>
   1ce52:	4405      	add	r5, r0
   1ce54:	e7d6      	b.n	1ce04 <putchw+0x68>
   1ce56:	2178      	movs	r1, #120	; 0x78
   1ce58:	e7f8      	b.n	1ce4c <putchw+0xb0>
        written += putf(putp, '0');
   1ce5a:	2130      	movs	r1, #48	; 0x30
   1ce5c:	4630      	mov	r0, r6
   1ce5e:	f7ff ff87 	bl	1cd70 <putf>
   1ce62:	4405      	add	r5, r0
   1ce64:	e7ce      	b.n	1ce04 <putchw+0x68>
            written += putf(putp, '0');
   1ce66:	2130      	movs	r1, #48	; 0x30
   1ce68:	4630      	mov	r0, r6
   1ce6a:	f7ff ff81 	bl	1cd70 <putf>
   1ce6e:	4405      	add	r5, r0
        while (n-- > 0)
   1ce70:	4644      	mov	r4, r8
   1ce72:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1ce76:	2c00      	cmp	r4, #0
   1ce78:	dcf5      	bgt.n	1ce66 <putchw+0xca>
   1ce7a:	4644      	mov	r4, r8
   1ce7c:	e7c4      	b.n	1ce08 <putchw+0x6c>
        written += putf(putp, ch);
   1ce7e:	4630      	mov	r0, r6
   1ce80:	f7ff ff76 	bl	1cd70 <putf>
   1ce84:	4405      	add	r5, r0
    while ((ch = *bf++))
   1ce86:	4643      	mov	r3, r8
   1ce88:	f103 0801 	add.w	r8, r3, #1
   1ce8c:	7819      	ldrb	r1, [r3, #0]
   1ce8e:	2900      	cmp	r1, #0
   1ce90:	d1f5      	bne.n	1ce7e <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1ce92:	78bb      	ldrb	r3, [r7, #2]
   1ce94:	f013 0f08 	tst.w	r3, #8
   1ce98:	d106      	bne.n	1cea8 <putchw+0x10c>
   1ce9a:	e008      	b.n	1ceae <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   1ce9c:	2120      	movs	r1, #32
   1ce9e:	4630      	mov	r0, r6
   1cea0:	f7ff ff66 	bl	1cd70 <putf>
   1cea4:	4405      	add	r5, r0
        while (n-- > 0)
   1cea6:	463c      	mov	r4, r7
   1cea8:	1e67      	subs	r7, r4, #1
   1ceaa:	2c00      	cmp	r4, #0
   1ceac:	dcf6      	bgt.n	1ce9c <putchw+0x100>
    }
    
    return written;
}
   1ceae:	4628      	mov	r0, r5
   1ceb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ceb4:	0008ff00 	.word	0x0008ff00

0001ceb8 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1ceb8:	b160      	cbz	r0, 1ced4 <intarg+0x1c>
   1ceba:	2801      	cmp	r0, #1
   1cebc:	d017      	beq.n	1ceee <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1cebe:	bb19      	cbnz	r1, 1cf08 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   1cec0:	6813      	ldr	r3, [r2, #0]
   1cec2:	3307      	adds	r3, #7
   1cec4:	f023 0307 	bic.w	r3, r3, #7
   1cec8:	f103 0108 	add.w	r1, r3, #8
   1cecc:	6011      	str	r1, [r2, #0]
   1cece:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1ced2:	4770      	bx	lr
        if (sign) {
   1ced4:	b129      	cbz	r1, 1cee2 <intarg+0x2a>
            val = va_arg(*va, int);
   1ced6:	6813      	ldr	r3, [r2, #0]
   1ced8:	1d19      	adds	r1, r3, #4
   1ceda:	6011      	str	r1, [r2, #0]
   1cedc:	6818      	ldr	r0, [r3, #0]
   1cede:	17c1      	asrs	r1, r0, #31
   1cee0:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1cee2:	6813      	ldr	r3, [r2, #0]
   1cee4:	1d19      	adds	r1, r3, #4
   1cee6:	6011      	str	r1, [r2, #0]
   1cee8:	6818      	ldr	r0, [r3, #0]
   1ceea:	2100      	movs	r1, #0
   1ceec:	4770      	bx	lr
        if (sign) {
   1ceee:	b129      	cbz	r1, 1cefc <intarg+0x44>
            val = va_arg(*va, long);
   1cef0:	6813      	ldr	r3, [r2, #0]
   1cef2:	1d19      	adds	r1, r3, #4
   1cef4:	6011      	str	r1, [r2, #0]
   1cef6:	6818      	ldr	r0, [r3, #0]
   1cef8:	17c1      	asrs	r1, r0, #31
   1cefa:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1cefc:	6813      	ldr	r3, [r2, #0]
   1cefe:	1d19      	adds	r1, r3, #4
   1cf00:	6011      	str	r1, [r2, #0]
   1cf02:	6818      	ldr	r0, [r3, #0]
   1cf04:	2100      	movs	r1, #0
   1cf06:	4770      	bx	lr
            val = va_arg(*va, long long);
   1cf08:	6813      	ldr	r3, [r2, #0]
   1cf0a:	3307      	adds	r3, #7
   1cf0c:	f023 0307 	bic.w	r3, r3, #7
   1cf10:	f103 0108 	add.w	r1, r3, #8
   1cf14:	6011      	str	r1, [r2, #0]
   1cf16:	e9d3 0100 	ldrd	r0, r1, [r3]
   1cf1a:	4770      	bx	lr

0001cf1c <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1cf1c:	b570      	push	{r4, r5, r6, lr}
   1cf1e:	b08a      	sub	sp, #40	; 0x28
   1cf20:	4605      	mov	r5, r0
   1cf22:	9101      	str	r1, [sp, #4]
   1cf24:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1cf26:	ab02      	add	r3, sp, #8
   1cf28:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1cf2a:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   1cf2c:	9b01      	ldr	r3, [sp, #4]
   1cf2e:	1c5a      	adds	r2, r3, #1
   1cf30:	9201      	str	r2, [sp, #4]
   1cf32:	7819      	ldrb	r1, [r3, #0]
   1cf34:	2900      	cmp	r1, #0
   1cf36:	f000 811c 	beq.w	1d172 <tfp_format+0x256>
        if (ch != '%') {
   1cf3a:	2925      	cmp	r1, #37	; 0x25
   1cf3c:	d004      	beq.n	1cf48 <tfp_format+0x2c>
            written += putf(putp, ch);
   1cf3e:	4628      	mov	r0, r5
   1cf40:	f7ff ff16 	bl	1cd70 <putf>
   1cf44:	4404      	add	r4, r0
   1cf46:	e7f1      	b.n	1cf2c <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1cf48:	2200      	movs	r2, #0
   1cf4a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1cf4e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   1cf52:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   1cf56:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   1cf5a:	f362 0382 	bfi	r3, r2, #2, #1
   1cf5e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   1cf62:	9b01      	ldr	r3, [sp, #4]
   1cf64:	1c5a      	adds	r2, r3, #1
   1cf66:	9201      	str	r2, [sp, #4]
   1cf68:	7818      	ldrb	r0, [r3, #0]
   1cf6a:	b128      	cbz	r0, 1cf78 <tfp_format+0x5c>
                switch (ch) {
   1cf6c:	282d      	cmp	r0, #45	; 0x2d
   1cf6e:	d04e      	beq.n	1d00e <tfp_format+0xf2>
   1cf70:	2830      	cmp	r0, #48	; 0x30
   1cf72:	d03c      	beq.n	1cfee <tfp_format+0xd2>
   1cf74:	2823      	cmp	r0, #35	; 0x23
   1cf76:	d043      	beq.n	1d000 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1cf78:	282a      	cmp	r0, #42	; 0x2a
   1cf7a:	d052      	beq.n	1d022 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1cf7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1cf80:	b2db      	uxtb	r3, r3
   1cf82:	2b09      	cmp	r3, #9
   1cf84:	d961      	bls.n	1d04a <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1cf86:	286c      	cmp	r0, #108	; 0x6c
   1cf88:	d065      	beq.n	1d056 <tfp_format+0x13a>
            lng = 0;
   1cf8a:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   1cf8c:	287a      	cmp	r0, #122	; 0x7a
   1cf8e:	d06f      	beq.n	1d070 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   1cf90:	2869      	cmp	r0, #105	; 0x69
   1cf92:	f000 808e 	beq.w	1d0b2 <tfp_format+0x196>
   1cf96:	d970      	bls.n	1d07a <tfp_format+0x15e>
   1cf98:	2873      	cmp	r0, #115	; 0x73
   1cf9a:	f000 80dd 	beq.w	1d158 <tfp_format+0x23c>
   1cf9e:	f200 8099 	bhi.w	1d0d4 <tfp_format+0x1b8>
   1cfa2:	286f      	cmp	r0, #111	; 0x6f
   1cfa4:	f000 80c7 	beq.w	1d136 <tfp_format+0x21a>
   1cfa8:	2870      	cmp	r0, #112	; 0x70
   1cfaa:	d1bf      	bne.n	1cf2c <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   1cfac:	9b00      	ldr	r3, [sp, #0]
   1cfae:	1d1a      	adds	r2, r3, #4
   1cfb0:	9200      	str	r2, [sp, #0]
   1cfb2:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   1cfb4:	2310      	movs	r3, #16
   1cfb6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1cfba:	aa08      	add	r2, sp, #32
   1cfbc:	2100      	movs	r1, #0
   1cfbe:	f7ff fe34 	bl	1cc2a <ui2a>
                p.width = 2 * sizeof(void*);
   1cfc2:	2308      	movs	r3, #8
   1cfc4:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1cfc8:	2301      	movs	r3, #1
   1cfca:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   1cfce:	2130      	movs	r1, #48	; 0x30
   1cfd0:	4628      	mov	r0, r5
   1cfd2:	f7ff fecd 	bl	1cd70 <putf>
   1cfd6:	4404      	add	r4, r0
                written += putf(putp, 'x');
   1cfd8:	2178      	movs	r1, #120	; 0x78
   1cfda:	4628      	mov	r0, r5
   1cfdc:	f7ff fec8 	bl	1cd70 <putf>
   1cfe0:	4404      	add	r4, r0
                written += putchw(putp, &p);
   1cfe2:	a908      	add	r1, sp, #32
   1cfe4:	4628      	mov	r0, r5
   1cfe6:	f7ff fed9 	bl	1cd9c <putchw>
   1cfea:	4404      	add	r4, r0
                break;
   1cfec:	e79e      	b.n	1cf2c <tfp_format+0x10>
                    if (!p.left) {
   1cfee:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1cff2:	f013 0f08 	tst.w	r3, #8
   1cff6:	d1b4      	bne.n	1cf62 <tfp_format+0x46>
                        p.lz = 1;
   1cff8:	2301      	movs	r3, #1
   1cffa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1cffe:	e7b0      	b.n	1cf62 <tfp_format+0x46>
                    p.alt = 1;
   1d000:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1d004:	f043 0302 	orr.w	r3, r3, #2
   1d008:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1d00c:	e7a9      	b.n	1cf62 <tfp_format+0x46>
                    p.left = 1;
   1d00e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1d012:	f043 0308 	orr.w	r3, r3, #8
   1d016:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1d01a:	2300      	movs	r3, #0
   1d01c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1d020:	e79f      	b.n	1cf62 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1d022:	466a      	mov	r2, sp
   1d024:	2101      	movs	r1, #1
   1d026:	2000      	movs	r0, #0
   1d028:	f7ff ff46 	bl	1ceb8 <intarg>
                if (i > UCHAR_MAX) {
   1d02c:	28ff      	cmp	r0, #255	; 0xff
   1d02e:	dd07      	ble.n	1d040 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   1d030:	23ff      	movs	r3, #255	; 0xff
   1d032:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1d036:	9b01      	ldr	r3, [sp, #4]
   1d038:	1c5a      	adds	r2, r3, #1
   1d03a:	9201      	str	r2, [sp, #4]
   1d03c:	7818      	ldrb	r0, [r3, #0]
   1d03e:	e7a2      	b.n	1cf86 <tfp_format+0x6a>
                } else if (i > 0) {
   1d040:	2800      	cmp	r0, #0
   1d042:	ddf8      	ble.n	1d036 <tfp_format+0x11a>
                    p.width = i;
   1d044:	f88d 0020 	strb.w	r0, [sp, #32]
   1d048:	e7f5      	b.n	1d036 <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1d04a:	ab08      	add	r3, sp, #32
   1d04c:	220a      	movs	r2, #10
   1d04e:	a901      	add	r1, sp, #4
   1d050:	f7ff fe73 	bl	1cd3a <a2i>
   1d054:	e797      	b.n	1cf86 <tfp_format+0x6a>
                ch = *(fmt++);
   1d056:	9b01      	ldr	r3, [sp, #4]
   1d058:	1c5a      	adds	r2, r3, #1
   1d05a:	9201      	str	r2, [sp, #4]
   1d05c:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   1d05e:	286c      	cmp	r0, #108	; 0x6c
   1d060:	d001      	beq.n	1d066 <tfp_format+0x14a>
                lng = 1;
   1d062:	2601      	movs	r6, #1
   1d064:	e792      	b.n	1cf8c <tfp_format+0x70>
                    ch = *(fmt++);
   1d066:	1c9a      	adds	r2, r3, #2
   1d068:	9201      	str	r2, [sp, #4]
   1d06a:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   1d06c:	2602      	movs	r6, #2
   1d06e:	e78d      	b.n	1cf8c <tfp_format+0x70>
                ch = *(fmt++);
   1d070:	9b01      	ldr	r3, [sp, #4]
   1d072:	1c5a      	adds	r2, r3, #1
   1d074:	9201      	str	r2, [sp, #4]
   1d076:	7818      	ldrb	r0, [r3, #0]
   1d078:	e78a      	b.n	1cf90 <tfp_format+0x74>
            switch (ch) {
   1d07a:	2858      	cmp	r0, #88	; 0x58
   1d07c:	d040      	beq.n	1d100 <tfp_format+0x1e4>
   1d07e:	d80a      	bhi.n	1d096 <tfp_format+0x17a>
   1d080:	2800      	cmp	r0, #0
   1d082:	d076      	beq.n	1d172 <tfp_format+0x256>
   1d084:	2825      	cmp	r0, #37	; 0x25
   1d086:	f47f af51 	bne.w	1cf2c <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1d08a:	4601      	mov	r1, r0
   1d08c:	4628      	mov	r0, r5
   1d08e:	f7ff fe6f 	bl	1cd70 <putf>
   1d092:	4404      	add	r4, r0
                break;
   1d094:	e74a      	b.n	1cf2c <tfp_format+0x10>
            switch (ch) {
   1d096:	2863      	cmp	r0, #99	; 0x63
   1d098:	d108      	bne.n	1d0ac <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   1d09a:	9b00      	ldr	r3, [sp, #0]
   1d09c:	1d1a      	adds	r2, r3, #4
   1d09e:	9200      	str	r2, [sp, #0]
   1d0a0:	7819      	ldrb	r1, [r3, #0]
   1d0a2:	4628      	mov	r0, r5
   1d0a4:	f7ff fe64 	bl	1cd70 <putf>
   1d0a8:	4404      	add	r4, r0
                break;
   1d0aa:	e73f      	b.n	1cf2c <tfp_format+0x10>
            switch (ch) {
   1d0ac:	2864      	cmp	r0, #100	; 0x64
   1d0ae:	f47f af3d 	bne.w	1cf2c <tfp_format+0x10>
                p.base = 10;
   1d0b2:	230a      	movs	r3, #10
   1d0b4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1d0b8:	466a      	mov	r2, sp
   1d0ba:	2101      	movs	r1, #1
   1d0bc:	4630      	mov	r0, r6
   1d0be:	f7ff fefb 	bl	1ceb8 <intarg>
   1d0c2:	aa08      	add	r2, sp, #32
   1d0c4:	f7ff fe11 	bl	1ccea <i2a>
                written += putchw(putp, &p);
   1d0c8:	a908      	add	r1, sp, #32
   1d0ca:	4628      	mov	r0, r5
   1d0cc:	f7ff fe66 	bl	1cd9c <putchw>
   1d0d0:	4404      	add	r4, r0
                break;
   1d0d2:	e72b      	b.n	1cf2c <tfp_format+0x10>
            switch (ch) {
   1d0d4:	2875      	cmp	r0, #117	; 0x75
   1d0d6:	d110      	bne.n	1d0fa <tfp_format+0x1de>
                p.base = 10;
   1d0d8:	230a      	movs	r3, #10
   1d0da:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1d0de:	466a      	mov	r2, sp
   1d0e0:	2100      	movs	r1, #0
   1d0e2:	4630      	mov	r0, r6
   1d0e4:	f7ff fee8 	bl	1ceb8 <intarg>
   1d0e8:	aa08      	add	r2, sp, #32
   1d0ea:	f7ff fd9e 	bl	1cc2a <ui2a>
                written += putchw(putp, &p);
   1d0ee:	a908      	add	r1, sp, #32
   1d0f0:	4628      	mov	r0, r5
   1d0f2:	f7ff fe53 	bl	1cd9c <putchw>
   1d0f6:	4404      	add	r4, r0
                break;
   1d0f8:	e718      	b.n	1cf2c <tfp_format+0x10>
            switch (ch) {
   1d0fa:	2878      	cmp	r0, #120	; 0x78
   1d0fc:	f47f af16 	bne.w	1cf2c <tfp_format+0x10>
                p.base = 16;
   1d100:	2310      	movs	r3, #16
   1d102:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1d106:	2858      	cmp	r0, #88	; 0x58
   1d108:	bf14      	ite	ne
   1d10a:	2300      	movne	r3, #0
   1d10c:	2301      	moveq	r3, #1
   1d10e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1d112:	f363 0282 	bfi	r2, r3, #2, #1
   1d116:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1d11a:	466a      	mov	r2, sp
   1d11c:	2100      	movs	r1, #0
   1d11e:	4630      	mov	r0, r6
   1d120:	f7ff feca 	bl	1ceb8 <intarg>
   1d124:	aa08      	add	r2, sp, #32
   1d126:	f7ff fd80 	bl	1cc2a <ui2a>
                written += putchw(putp, &p);
   1d12a:	a908      	add	r1, sp, #32
   1d12c:	4628      	mov	r0, r5
   1d12e:	f7ff fe35 	bl	1cd9c <putchw>
   1d132:	4404      	add	r4, r0
                break;
   1d134:	e6fa      	b.n	1cf2c <tfp_format+0x10>
                p.base = 8;
   1d136:	2308      	movs	r3, #8
   1d138:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1d13c:	466a      	mov	r2, sp
   1d13e:	2100      	movs	r1, #0
   1d140:	4630      	mov	r0, r6
   1d142:	f7ff feb9 	bl	1ceb8 <intarg>
   1d146:	aa08      	add	r2, sp, #32
   1d148:	f7ff fd6f 	bl	1cc2a <ui2a>
                written += putchw(putp, &p);
   1d14c:	a908      	add	r1, sp, #32
   1d14e:	4628      	mov	r0, r5
   1d150:	f7ff fe24 	bl	1cd9c <putchw>
   1d154:	4404      	add	r4, r0
                break;
   1d156:	e6e9      	b.n	1cf2c <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1d158:	9b00      	ldr	r3, [sp, #0]
   1d15a:	1d1a      	adds	r2, r3, #4
   1d15c:	9200      	str	r2, [sp, #0]
   1d15e:	681b      	ldr	r3, [r3, #0]
   1d160:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1d162:	a908      	add	r1, sp, #32
   1d164:	4628      	mov	r0, r5
   1d166:	f7ff fe19 	bl	1cd9c <putchw>
   1d16a:	4404      	add	r4, r0
                p.bf = bf;
   1d16c:	ab02      	add	r3, sp, #8
   1d16e:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1d170:	e6dc      	b.n	1cf2c <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1d172:	4620      	mov	r0, r4
   1d174:	b00a      	add	sp, #40	; 0x28
   1d176:	bd70      	pop	{r4, r5, r6, pc}

0001d178 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1d178:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1d17a:	f7ff fecf 	bl	1cf1c <tfp_format>
}
   1d17e:	bd08      	pop	{r3, pc}

0001d180 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   1d180:	b40f      	push	{r0, r1, r2, r3}
   1d182:	b500      	push	{lr}
   1d184:	b083      	sub	sp, #12
   1d186:	aa04      	add	r2, sp, #16
   1d188:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1d18c:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1d18e:	4b04      	ldr	r3, [pc, #16]	; (1d1a0 <printf+0x20>)
   1d190:	6818      	ldr	r0, [r3, #0]
   1d192:	f7ff fff1 	bl	1d178 <vfprintf>
    va_end(va);
    return rv;
}
   1d196:	b003      	add	sp, #12
   1d198:	f85d eb04 	ldr.w	lr, [sp], #4
   1d19c:	b004      	add	sp, #16
   1d19e:	4770      	bx	lr
   1d1a0:	000291d4 	.word	0x000291d4

0001d1a4 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   1d1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d1a6:	b085      	sub	sp, #20
   1d1a8:	4605      	mov	r5, r0
   1d1aa:	460c      	mov	r4, r1
   1d1ac:	4616      	mov	r6, r2
   1d1ae:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1d1b0:	460a      	mov	r2, r1
   1d1b2:	4601      	mov	r1, r0
   1d1b4:	4668      	mov	r0, sp
   1d1b6:	f000 f835 	bl	1d224 <fmemopen_w>
    tfp_format(f, fmt, va);
   1d1ba:	463a      	mov	r2, r7
   1d1bc:	4631      	mov	r1, r6
   1d1be:	f7ff fead 	bl	1cf1c <tfp_format>
    if (size > 0) {
   1d1c2:	b12c      	cbz	r4, 1d1d0 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   1d1c4:	9b02      	ldr	r3, [sp, #8]
   1d1c6:	42a3      	cmp	r3, r4
   1d1c8:	d305      	bcc.n	1d1d6 <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   1d1ca:	3c01      	subs	r4, #1
   1d1cc:	2300      	movs	r3, #0
   1d1ce:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   1d1d0:	9802      	ldr	r0, [sp, #8]
   1d1d2:	b005      	add	sp, #20
   1d1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   1d1d6:	9b01      	ldr	r3, [sp, #4]
   1d1d8:	2200      	movs	r2, #0
   1d1da:	701a      	strb	r2, [r3, #0]
   1d1dc:	e7f8      	b.n	1d1d0 <vsnprintf+0x2c>
	...

0001d1e0 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1d1e0:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   1d1e2:	460a      	mov	r2, r1
   1d1e4:	4601      	mov	r1, r0
   1d1e6:	4b02      	ldr	r3, [pc, #8]	; (1d1f0 <vprintf+0x10>)
   1d1e8:	6818      	ldr	r0, [r3, #0]
   1d1ea:	f7ff ffc5 	bl	1d178 <vfprintf>
}
   1d1ee:	bd08      	pop	{r3, pc}
   1d1f0:	000291d4 	.word	0x000291d4

0001d1f4 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1d1f4:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1d1f6:	2500      	movs	r5, #0
    
    while (n--)
   1d1f8:	e000      	b.n	1d1fc <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1d1fa:	4622      	mov	r2, r4
    while (n--)
   1d1fc:	1e54      	subs	r4, r2, #1
   1d1fe:	b16a      	cbz	r2, 1d21c <memfile_write+0x28>
        f->bytes_written++;
   1d200:	6883      	ldr	r3, [r0, #8]
   1d202:	3301      	adds	r3, #1
   1d204:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   1d206:	68c2      	ldr	r2, [r0, #12]
   1d208:	4293      	cmp	r3, r2
   1d20a:	d8f6      	bhi.n	1d1fa <memfile_write+0x6>
            *f->buffer++ = *bp++;
   1d20c:	6843      	ldr	r3, [r0, #4]
   1d20e:	1c5a      	adds	r2, r3, #1
   1d210:	6042      	str	r2, [r0, #4]
   1d212:	780a      	ldrb	r2, [r1, #0]
   1d214:	701a      	strb	r2, [r3, #0]
            i++;
   1d216:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   1d218:	3101      	adds	r1, #1
   1d21a:	e7ee      	b.n	1d1fa <memfile_write+0x6>
        }
    }
    
    return i;
}
   1d21c:	4628      	mov	r0, r5
   1d21e:	bc30      	pop	{r4, r5}
   1d220:	4770      	bx	lr
	...

0001d224 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1d224:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1d226:	4c04      	ldr	r4, [pc, #16]	; (1d238 <fmemopen_w+0x14>)
   1d228:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1d22a:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1d22c:	2100      	movs	r1, #0
   1d22e:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1d230:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1d232:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d236:	4770      	bx	lr
   1d238:	000291cc 	.word	0x000291cc

0001d23c <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1d23c:	2000      	movs	r0, #0
   1d23e:	4770      	bx	lr

0001d240 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1d240:	b510      	push	{r4, lr}
   1d242:	4608      	mov	r0, r1
   1d244:	4614      	mov	r4, r2
    console_write(bp, n);
   1d246:	4611      	mov	r1, r2
   1d248:	f7fd f9b8 	bl	1a5bc <console_write>
    return n;
}
   1d24c:	4620      	mov	r0, r4
   1d24e:	bd10      	pop	{r4, pc}

0001d250 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   1d250:	b508      	push	{r3, lr}
    sysinit();
   1d252:	f7fd fa1b 	bl	1a68c <sysinit_start>
   1d256:	f000 f81b 	bl	1d290 <sysinit_app>
   1d25a:	f7fd fa1d 	bl	1a698 <sysinit_end>
}
   1d25e:	bd08      	pop	{r3, pc}

0001d260 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1d260:	b570      	push	{r4, r5, r6, lr}
   1d262:	b082      	sub	sp, #8
   1d264:	460c      	mov	r4, r1
   1d266:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1d268:	b29d      	uxth	r5, r3
   1d26a:	9b07      	ldr	r3, [sp, #28]
   1d26c:	9300      	str	r3, [sp, #0]
   1d26e:	4603      	mov	r3, r0
   1d270:	9a06      	ldr	r2, [sp, #24]
   1d272:	4629      	mov	r1, r5
   1d274:	4620      	mov	r0, r4
   1d276:	f7fe fdeb 	bl	1be50 <os_mempool_init>
    if (rc != 0) {
   1d27a:	b108      	cbz	r0, 1d280 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1d27c:	b002      	add	sp, #8
   1d27e:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1d280:	462b      	mov	r3, r5
   1d282:	9a06      	ldr	r2, [sp, #24]
   1d284:	b292      	uxth	r2, r2
   1d286:	4621      	mov	r1, r4
   1d288:	4630      	mov	r0, r6
   1d28a:	f7fe fc96 	bl	1bbba <os_mbuf_pool_init>
   1d28e:	e7f5      	b.n	1d27c <mem_init_mbuf_pool+0x1c>

0001d290 <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   1d290:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1d292:	f7fe f9f3 	bl	1b67c <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1d296:	f001 f985 	bl	1e5a4 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1d29a:	f7fd f9a3 	bl	1a5e4 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   1d29e:	f001 fac7 	bl	1e830 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   1d2a2:	f001 f9b7 	bl	1e614 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   1d2a6:	f001 f8e1 	bl	1e46c <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   1d2aa:	f001 f8f1 	bl	1e490 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1d2ae:	f001 f8f0 	bl	1e492 <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   1d2b2:	f001 f8ef 	bl	1e494 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   1d2b6:	f001 f8ee 	bl	1e496 <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   1d2ba:	f001 f8ed 	bl	1e498 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1d2be:	f000 fbd1 	bl	1da64 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   1d2c2:	f000 fd1f 	bl	1dd04 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   1d2c6:	f000 ff3d 	bl	1e144 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   1d2ca:	f000 feb3 	bl	1e034 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   1d2ce:	f000 fe3d 	bl	1df4c <init_sensor_coap>
}
   1d2d2:	bd08      	pop	{r3, pc}

0001d2d4 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   1d2d4:	b908      	cbnz	r0, 1d2da <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   1d2d6:	4802      	ldr	r0, [pc, #8]	; (1d2e0 <hal_bsp_flash_dev+0xc>)
   1d2d8:	4770      	bx	lr
    }

    return NULL;
   1d2da:	2000      	movs	r0, #0
}
   1d2dc:	4770      	bx	lr
   1d2de:	bf00      	nop
   1d2e0:	000291d8 	.word	0x000291d8

0001d2e4 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   1d2e4:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   1d2e6:	f7ea ff6b 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   1d2ea:	f000 fbb3 	bl	1da54 <nrf52_periph_create>
}
   1d2ee:	bd08      	pop	{r3, pc}

0001d2f0 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1d2f0:	2300      	movs	r3, #0
   1d2f2:	4a07      	ldr	r2, [pc, #28]	; (1d310 <nrf52k_flash_wait_ready+0x20>)
   1d2f4:	4293      	cmp	r3, r2
   1d2f6:	dc06      	bgt.n	1d306 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1d2f8:	4a06      	ldr	r2, [pc, #24]	; (1d314 <nrf52k_flash_wait_ready+0x24>)
   1d2fa:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1d2fe:	2a01      	cmp	r2, #1
   1d300:	d004      	beq.n	1d30c <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1d302:	3301      	adds	r3, #1
   1d304:	e7f5      	b.n	1d2f2 <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1d306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d30a:	4770      	bx	lr
            return 0;
   1d30c:	2000      	movs	r0, #0
}
   1d30e:	4770      	bx	lr
   1d310:	0001869f 	.word	0x0001869f
   1d314:	4001e000 	.word	0x4001e000

0001d318 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1d318:	b538      	push	{r3, r4, r5, lr}
   1d31a:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1d31c:	f7ff ffe8 	bl	1d2f0 <nrf52k_flash_wait_ready>
   1d320:	b9f0      	cbnz	r0, 1d360 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1d322:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d326:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1d328:	4b0f      	ldr	r3, [pc, #60]	; (1d368 <nrf52k_flash_erase_sector+0x50>)
   1d32a:	2202      	movs	r2, #2
   1d32c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1d330:	f7ff ffde 	bl	1d2f0 <nrf52k_flash_wait_ready>
   1d334:	b148      	cbz	r0, 1d34a <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1d336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1d33a:	4a0b      	ldr	r2, [pc, #44]	; (1d368 <nrf52k_flash_erase_sector+0x50>)
   1d33c:	2100      	movs	r1, #0
   1d33e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1d342:	b904      	cbnz	r4, 1d346 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1d344:	b662      	cpsie	i
    return rc;
}
   1d346:	4618      	mov	r0, r3
   1d348:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1d34a:	4b07      	ldr	r3, [pc, #28]	; (1d368 <nrf52k_flash_erase_sector+0x50>)
   1d34c:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1d350:	f7ff ffce 	bl	1d2f0 <nrf52k_flash_wait_ready>
   1d354:	4603      	mov	r3, r0
   1d356:	2800      	cmp	r0, #0
   1d358:	d0ef      	beq.n	1d33a <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1d35a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d35e:	e7ec      	b.n	1d33a <nrf52k_flash_erase_sector+0x22>
        return -1;
   1d360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d364:	e7ef      	b.n	1d346 <nrf52k_flash_erase_sector+0x2e>
   1d366:	bf00      	nop
   1d368:	4001e000 	.word	0x4001e000

0001d36c <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1d36c:	2000      	movs	r0, #0
   1d36e:	4770      	bx	lr

0001d370 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1d370:	297f      	cmp	r1, #127	; 0x7f
   1d372:	dc06      	bgt.n	1d382 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1d374:	0309      	lsls	r1, r1, #12
   1d376:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1d378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1d37c:	601a      	str	r2, [r3, #0]
}
   1d37e:	2000      	movs	r0, #0
   1d380:	4770      	bx	lr
{
   1d382:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1d384:	2300      	movs	r3, #0
   1d386:	461a      	mov	r2, r3
   1d388:	4619      	mov	r1, r3
   1d38a:	4618      	mov	r0, r3
   1d38c:	f7fe f818 	bl	1b3c0 <__assert_func>

0001d390 <nrf52k_flash_write>:
{
   1d390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d394:	b082      	sub	sp, #8
   1d396:	460d      	mov	r5, r1
   1d398:	4616      	mov	r6, r2
   1d39a:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1d39c:	f7ff ffa8 	bl	1d2f0 <nrf52k_flash_wait_ready>
   1d3a0:	2800      	cmp	r0, #0
   1d3a2:	d158      	bne.n	1d456 <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1d3a4:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d3a8:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1d3aa:	4b2c      	ldr	r3, [pc, #176]	; (1d45c <nrf52k_flash_write+0xcc>)
   1d3ac:	2201      	movs	r2, #1
   1d3ae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1d3b2:	f015 0803 	ands.w	r8, r5, #3
   1d3b6:	d10b      	bne.n	1d3d0 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1d3b8:	2c03      	cmp	r4, #3
   1d3ba:	d925      	bls.n	1d408 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1d3bc:	f7ff ff98 	bl	1d2f0 <nrf52k_flash_wait_ready>
   1d3c0:	2800      	cmp	r0, #0
   1d3c2:	d139      	bne.n	1d438 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1d3c4:	f856 3b04 	ldr.w	r3, [r6], #4
   1d3c8:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1d3cc:	3c04      	subs	r4, #4
   1d3ce:	e7f3      	b.n	1d3b8 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1d3d0:	f7ff ff8e 	bl	1d2f0 <nrf52k_flash_wait_ready>
   1d3d4:	bb68      	cbnz	r0, 1d432 <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1d3d6:	f025 0a03 	bic.w	sl, r5, #3
   1d3da:	f8da 3000 	ldr.w	r3, [sl]
   1d3de:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1d3e0:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1d3e4:	45a1      	cmp	r9, r4
   1d3e6:	d900      	bls.n	1d3ea <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1d3e8:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1d3ea:	464a      	mov	r2, r9
   1d3ec:	4631      	mov	r1, r6
   1d3ee:	ab01      	add	r3, sp, #4
   1d3f0:	eb03 0008 	add.w	r0, r3, r8
   1d3f4:	f7ff fbda 	bl	1cbac <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1d3f8:	9b01      	ldr	r3, [sp, #4]
   1d3fa:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1d3fe:	444d      	add	r5, r9
        num_bytes -= cnt;
   1d400:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1d404:	444e      	add	r6, r9
   1d406:	e7d7      	b.n	1d3b8 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1d408:	b164      	cbz	r4, 1d424 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1d40a:	682b      	ldr	r3, [r5, #0]
   1d40c:	a802      	add	r0, sp, #8
   1d40e:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1d412:	4622      	mov	r2, r4
   1d414:	4631      	mov	r1, r6
   1d416:	f7ff fbc9 	bl	1cbac <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1d41a:	f7ff ff69 	bl	1d2f0 <nrf52k_flash_wait_ready>
   1d41e:	b9b8      	cbnz	r0, 1d450 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1d420:	9b01      	ldr	r3, [sp, #4]
   1d422:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1d424:	f7ff ff64 	bl	1d2f0 <nrf52k_flash_wait_ready>
   1d428:	4603      	mov	r3, r0
   1d42a:	b138      	cbz	r0, 1d43c <nrf52k_flash_write+0xac>
        rc = -1;
   1d42c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d430:	e004      	b.n	1d43c <nrf52k_flash_write+0xac>
    int rc = -1;
   1d432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d436:	e001      	b.n	1d43c <nrf52k_flash_write+0xac>
   1d438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1d43c:	4a07      	ldr	r2, [pc, #28]	; (1d45c <nrf52k_flash_write+0xcc>)
   1d43e:	2100      	movs	r1, #0
   1d440:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1d444:	b907      	cbnz	r7, 1d448 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1d446:	b662      	cpsie	i
}
   1d448:	4618      	mov	r0, r3
   1d44a:	b002      	add	sp, #8
   1d44c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1d450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d454:	e7f2      	b.n	1d43c <nrf52k_flash_write+0xac>
        return -1;
   1d456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d45a:	e7f5      	b.n	1d448 <nrf52k_flash_write+0xb8>
   1d45c:	4001e000 	.word	0x4001e000

0001d460 <nrf52k_flash_read>:
{
   1d460:	b508      	push	{r3, lr}
   1d462:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1d464:	461a      	mov	r2, r3
   1d466:	f7ff fba1 	bl	1cbac <memcpy>
}
   1d46a:	2000      	movs	r0, #0
   1d46c:	bd08      	pop	{r3, pc}
	...

0001d470 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1d470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1d472:	f7ff fa3b 	bl	1c8ec <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1d476:	4b31      	ldr	r3, [pc, #196]	; (1d53c <nrf52_timer_handler+0xcc>)
   1d478:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1d47c:	4b30      	ldr	r3, [pc, #192]	; (1d540 <nrf52_timer_handler+0xd0>)
   1d47e:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1d480:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1d484:	d225      	bcs.n	1d4d2 <nrf52_timer_handler+0x62>
   1d486:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1d488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1d48c:	d227      	bcs.n	1d4de <nrf52_timer_handler+0x6e>
    result = x - y;
   1d48e:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1d490:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1d494:	d129      	bne.n	1d4ea <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   1d496:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1d49a:	4f29      	ldr	r7, [pc, #164]	; (1d540 <nrf52_timer_handler+0xd0>)
   1d49c:	683c      	ldr	r4, [r7, #0]
   1d49e:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1d4a2:	4628      	mov	r0, r5
   1d4a4:	f7ff f9b0 	bl	1c808 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1d4a8:	4b24      	ldr	r3, [pc, #144]	; (1d53c <nrf52_timer_handler+0xcc>)
   1d4aa:	2200      	movs	r2, #0
   1d4ac:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1d4b0:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1d4b2:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1d4b4:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1d4b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1d4bc:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1d4be:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1d4c0:	f7ff fa1d 	bl	1c8fe <os_arch_in_critical>
   1d4c4:	bb28      	cbnz	r0, 1d512 <nrf52_timer_handler+0xa2>
   1d4c6:	2300      	movs	r3, #0
   1d4c8:	461a      	mov	r2, r3
   1d4ca:	4619      	mov	r1, r3
   1d4cc:	4618      	mov	r0, r3
   1d4ce:	f7fd ff77 	bl	1b3c0 <__assert_func>
    assert(x <= 0xffffff);
   1d4d2:	2300      	movs	r3, #0
   1d4d4:	461a      	mov	r2, r3
   1d4d6:	4619      	mov	r1, r3
   1d4d8:	4618      	mov	r0, r3
   1d4da:	f7fd ff71 	bl	1b3c0 <__assert_func>
    assert(y <= 0xffffff);
   1d4de:	2300      	movs	r3, #0
   1d4e0:	461a      	mov	r2, r3
   1d4e2:	4619      	mov	r1, r3
   1d4e4:	4618      	mov	r0, r3
   1d4e6:	f7fd ff6b 	bl	1b3c0 <__assert_func>
        return (result | 0xff800000);
   1d4ea:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1d4ee:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1d4f2:	e7d2      	b.n	1d49a <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1d4f4:	2300      	movs	r3, #0
   1d4f6:	461a      	mov	r2, r3
   1d4f8:	4619      	mov	r1, r3
   1d4fa:	4618      	mov	r0, r3
   1d4fc:	f7fd ff60 	bl	1b3c0 <__assert_func>
        return (result | 0xff800000);
   1d500:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1d504:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1d508:	2a02      	cmp	r2, #2
   1d50a:	dc13      	bgt.n	1d534 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1d50c:	4a0c      	ldr	r2, [pc, #48]	; (1d540 <nrf52_timer_handler+0xd0>)
   1d50e:	6814      	ldr	r4, [r2, #0]
   1d510:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1d512:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1d516:	4a09      	ldr	r2, [pc, #36]	; (1d53c <nrf52_timer_handler+0xcc>)
   1d518:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1d51c:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1d520:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1d524:	d2e6      	bcs.n	1d4f4 <nrf52_timer_handler+0x84>
    result = x - y;
   1d526:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1d528:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1d52c:	d1e8      	bne.n	1d500 <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   1d52e:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1d532:	e7e9      	b.n	1d508 <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   1d534:	4630      	mov	r0, r6
   1d536:	f7ff f9df 	bl	1c8f8 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1d53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d53c:	40011000 	.word	0x40011000
   1d540:	2000dec4 	.word	0x2000dec4

0001d544 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1d544:	b538      	push	{r3, r4, r5, lr}
   1d546:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1d548:	f7ff f9d9 	bl	1c8fe <os_arch_in_critical>
   1d54c:	b1a0      	cbz	r0, 1d578 <os_tick_idle+0x34>

    if (ticks > 0) {
   1d54e:	2d00      	cmp	r5, #0
   1d550:	d038      	beq.n	1d5c4 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1d552:	4b20      	ldr	r3, [pc, #128]	; (1d5d4 <os_tick_idle+0x90>)
   1d554:	685b      	ldr	r3, [r3, #4]
   1d556:	42ab      	cmp	r3, r5
   1d558:	d200      	bcs.n	1d55c <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1d55a:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1d55c:	4b1d      	ldr	r3, [pc, #116]	; (1d5d4 <os_tick_idle+0x90>)
   1d55e:	689c      	ldr	r4, [r3, #8]
   1d560:	681a      	ldr	r2, [r3, #0]
   1d562:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1d566:	f7ff f9ca 	bl	1c8fe <os_arch_in_critical>
   1d56a:	b9d0      	cbnz	r0, 1d5a2 <os_tick_idle+0x5e>
   1d56c:	2300      	movs	r3, #0
   1d56e:	461a      	mov	r2, r3
   1d570:	4619      	mov	r1, r3
   1d572:	4618      	mov	r0, r3
   1d574:	f7fd ff24 	bl	1b3c0 <__assert_func>
    OS_ASSERT_CRITICAL();
   1d578:	2300      	movs	r3, #0
   1d57a:	461a      	mov	r2, r3
   1d57c:	4619      	mov	r1, r3
   1d57e:	4618      	mov	r0, r3
   1d580:	f7fd ff1e 	bl	1b3c0 <__assert_func>
    assert(y <= 0xffffff);
   1d584:	2300      	movs	r3, #0
   1d586:	461a      	mov	r2, r3
   1d588:	4619      	mov	r1, r3
   1d58a:	4618      	mov	r0, r3
   1d58c:	f7fd ff18 	bl	1b3c0 <__assert_func>
        return (result | 0xff800000);
   1d590:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1d594:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1d598:	2b02      	cmp	r3, #2
   1d59a:	dc13      	bgt.n	1d5c4 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1d59c:	4b0d      	ldr	r3, [pc, #52]	; (1d5d4 <os_tick_idle+0x90>)
   1d59e:	681c      	ldr	r4, [r3, #0]
   1d5a0:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1d5a2:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1d5a6:	4b0c      	ldr	r3, [pc, #48]	; (1d5d8 <os_tick_idle+0x94>)
   1d5a8:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1d5ac:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1d5b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1d5b4:	d2e6      	bcs.n	1d584 <os_tick_idle+0x40>
    result = x - y;
   1d5b6:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1d5b8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1d5bc:	d1e8      	bne.n	1d590 <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1d5be:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1d5c2:	e7e9      	b.n	1d598 <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1d5c4:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1d5c8:	bf30      	wfi

    if (ticks > 0) {
   1d5ca:	b905      	cbnz	r5, 1d5ce <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1d5cc:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1d5ce:	f7ff ff4f 	bl	1d470 <nrf52_timer_handler>
}
   1d5d2:	e7fb      	b.n	1d5cc <os_tick_idle+0x88>
   1d5d4:	2000dec4 	.word	0x2000dec4
   1d5d8:	40011000 	.word	0x40011000

0001d5dc <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1d5dc:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1d5de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1d5e2:	fbb3 f3f0 	udiv	r3, r3, r0
   1d5e6:	fb00 f303 	mul.w	r3, r0, r3
   1d5ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d5ee:	d136      	bne.n	1d65e <os_tick_init+0x82>
   1d5f0:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1d5f2:	4d1e      	ldr	r5, [pc, #120]	; (1d66c <os_tick_init+0x90>)
   1d5f4:	2600      	movs	r6, #0
   1d5f6:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1d5f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1d5fc:	fbb3 f0f0 	udiv	r0, r3, r0
   1d600:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1d602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1d606:	fbb3 f0f0 	udiv	r0, r3, r0
   1d60a:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1d60c:	f7ff f96e 	bl	1c8ec <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1d610:	0164      	lsls	r4, r4, #5
   1d612:	b2e4      	uxtb	r4, r4
   1d614:	4b16      	ldr	r3, [pc, #88]	; (1d670 <os_tick_init+0x94>)
   1d616:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1d61a:	4a16      	ldr	r2, [pc, #88]	; (1d674 <os_tick_init+0x98>)
   1d61c:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1d61e:	4916      	ldr	r1, [pc, #88]	; (1d678 <os_tick_init+0x9c>)
   1d620:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d624:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1d628:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1d62a:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1d62e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1d632:	2201      	movs	r2, #1
   1d634:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1d636:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1d638:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d63c:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1d640:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1d644:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1d648:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1d64c:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1d650:	6829      	ldr	r1, [r5, #0]
   1d652:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1d656:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1d658:	f7ff f94e 	bl	1c8f8 <os_arch_restore_sr>
}
   1d65c:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1d65e:	2300      	movs	r3, #0
   1d660:	461a      	mov	r2, r3
   1d662:	4619      	mov	r1, r3
   1d664:	4618      	mov	r0, r3
   1d666:	f7fd feab 	bl	1b3c0 <__assert_func>
   1d66a:	bf00      	nop
   1d66c:	2000dec4 	.word	0x2000dec4
   1d670:	e000e100 	.word	0xe000e100
   1d674:	e000ed00 	.word	0xe000ed00
   1d678:	0001d471 	.word	0x0001d471

0001d67c <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1d67c:	2301      	movs	r3, #1
   1d67e:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1d680:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1d684:	4770      	bx	lr
	...

0001d688 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1d688:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1d68a:	7883      	ldrb	r3, [r0, #2]
   1d68c:	b393      	cbz	r3, 1d6f4 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1d68e:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1d690:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1d694:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1d698:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1d69a:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1d69e:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1d6a2:	b11d      	cbz	r5, 1d6ac <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1d6a4:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1d6a8:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1d6ac:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1d6ae:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1d6b0:	2b02      	cmp	r3, #2
   1d6b2:	dc0e      	bgt.n	1d6d2 <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1d6b4:	7842      	ldrb	r2, [r0, #1]
   1d6b6:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1d6b8:	2b00      	cmp	r3, #0
   1d6ba:	db15      	blt.n	1d6e8 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d6bc:	f002 021f 	and.w	r2, r2, #31
   1d6c0:	095b      	lsrs	r3, r3, #5
   1d6c2:	2101      	movs	r1, #1
   1d6c4:	fa01 f202 	lsl.w	r2, r1, r2
   1d6c8:	3340      	adds	r3, #64	; 0x40
   1d6ca:	491b      	ldr	r1, [pc, #108]	; (1d738 <nrf_timer_set_ocmp+0xb0>)
   1d6cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1d6d0:	e00a      	b.n	1d6e8 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1d6d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1d6d6:	d208      	bcs.n	1d6ea <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1d6d8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1d6dc:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1d6e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1d6e4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1d6e8:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1d6ea:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1d6ee:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1d6f2:	e7f5      	b.n	1d6e0 <nrf_timer_set_ocmp+0x58>
   1d6f4:	460d      	mov	r5, r1
   1d6f6:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1d6f8:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1d6fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1d6fe:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1d702:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1d706:	2200      	movs	r2, #0
   1d708:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1d70c:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1d710:	f7ff ffb4 	bl	1d67c <nrf_read_timer_cntr>
   1d714:	1b40      	subs	r0, r0, r5
   1d716:	2800      	cmp	r0, #0
   1d718:	dbe6      	blt.n	1d6e8 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1d71a:	7862      	ldrb	r2, [r4, #1]
   1d71c:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1d71e:	2b00      	cmp	r3, #0
   1d720:	dbe2      	blt.n	1d6e8 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d722:	f002 021f 	and.w	r2, r2, #31
   1d726:	095b      	lsrs	r3, r3, #5
   1d728:	2101      	movs	r1, #1
   1d72a:	fa01 f202 	lsl.w	r2, r1, r2
   1d72e:	3340      	adds	r3, #64	; 0x40
   1d730:	4901      	ldr	r1, [pc, #4]	; (1d738 <nrf_timer_set_ocmp+0xb0>)
   1d732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1d736:	e7d7      	b.n	1d6e8 <nrf_timer_set_ocmp+0x60>
   1d738:	e000e100 	.word	0xe000e100

0001d73c <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1d73c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1d740:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1d744:	4770      	bx	lr

0001d746 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1d746:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1d74a:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1d74e:	4770      	bx	lr

0001d750 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1d750:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1d752:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1d754:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d758:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1d75a:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1d75c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1d760:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1d764:	b1ad      	cbz	r5, 1d792 <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1d766:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1d76a:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1d76c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1d770:	2500      	movs	r5, #0
   1d772:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1d776:	7840      	ldrb	r0, [r0, #1]
   1d778:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1d77a:	42aa      	cmp	r2, r5
   1d77c:	db09      	blt.n	1d792 <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d77e:	f000 001f 	and.w	r0, r0, #31
   1d782:	0952      	lsrs	r2, r2, #5
   1d784:	2501      	movs	r5, #1
   1d786:	fa05 f000 	lsl.w	r0, r5, r0
   1d78a:	3240      	adds	r2, #64	; 0x40
   1d78c:	4d04      	ldr	r5, [pc, #16]	; (1d7a0 <hal_timer_read_bsptimer+0x50>)
   1d78e:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1d792:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1d796:	b904      	cbnz	r4, 1d79a <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1d798:	b662      	cpsie	i

    return tcntr;
}
   1d79a:	bc30      	pop	{r4, r5}
   1d79c:	4770      	bx	lr
   1d79e:	bf00      	nop
   1d7a0:	e000e100 	.word	0xe000e100

0001d7a4 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1d7a4:	b570      	push	{r4, r5, r6, lr}
   1d7a6:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1d7a8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d7ac:	b672      	cpsid	i
   1d7ae:	e013      	b.n	1d7d8 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1d7b0:	6928      	ldr	r0, [r5, #16]
   1d7b2:	f7ff ff63 	bl	1d67c <nrf_read_timer_cntr>
            delta = 0;
   1d7b6:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1d7b8:	68e3      	ldr	r3, [r4, #12]
   1d7ba:	1ac0      	subs	r0, r0, r3
   1d7bc:	4290      	cmp	r0, r2
   1d7be:	db19      	blt.n	1d7f4 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1d7c0:	6923      	ldr	r3, [r4, #16]
   1d7c2:	b1a3      	cbz	r3, 1d7ee <hal_timer_chk_queue+0x4a>
   1d7c4:	6962      	ldr	r2, [r4, #20]
   1d7c6:	615a      	str	r2, [r3, #20]
   1d7c8:	6963      	ldr	r3, [r4, #20]
   1d7ca:	6922      	ldr	r2, [r4, #16]
   1d7cc:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1d7ce:	2300      	movs	r3, #0
   1d7d0:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1d7d2:	6863      	ldr	r3, [r4, #4]
   1d7d4:	68a0      	ldr	r0, [r4, #8]
   1d7d6:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1d7d8:	696c      	ldr	r4, [r5, #20]
   1d7da:	b15c      	cbz	r4, 1d7f4 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1d7dc:	78ab      	ldrb	r3, [r5, #2]
   1d7de:	2b00      	cmp	r3, #0
   1d7e0:	d0e6      	beq.n	1d7b0 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1d7e2:	4628      	mov	r0, r5
   1d7e4:	f7ff ffb4 	bl	1d750 <hal_timer_read_bsptimer>
            delta = -3;
   1d7e8:	f06f 0202 	mvn.w	r2, #2
   1d7ec:	e7e4      	b.n	1d7b8 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1d7ee:	6963      	ldr	r3, [r4, #20]
   1d7f0:	61ab      	str	r3, [r5, #24]
   1d7f2:	e7e9      	b.n	1d7c8 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1d7f4:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1d7f6:	b133      	cbz	r3, 1d806 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1d7f8:	68d9      	ldr	r1, [r3, #12]
   1d7fa:	4628      	mov	r0, r5
   1d7fc:	f7ff ff44 	bl	1d688 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1d800:	b906      	cbnz	r6, 1d804 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1d802:	b662      	cpsie	i
}
   1d804:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1d806:	78ab      	ldrb	r3, [r5, #2]
   1d808:	b11b      	cbz	r3, 1d812 <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1d80a:	6928      	ldr	r0, [r5, #16]
   1d80c:	f7ff ff9b 	bl	1d746 <nrf_rtc_disable_ocmp>
   1d810:	e7f6      	b.n	1d800 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1d812:	6928      	ldr	r0, [r5, #16]
   1d814:	f7ff ff92 	bl	1d73c <nrf_timer_disable_ocmp>
   1d818:	e7f2      	b.n	1d800 <hal_timer_chk_queue+0x5c>

0001d81a <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1d81a:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1d81c:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1d81e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1d822:	b113      	cbz	r3, 1d82a <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1d824:	2300      	movs	r3, #0
   1d826:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1d82a:	6883      	ldr	r3, [r0, #8]
   1d82c:	3301      	adds	r3, #1
   1d82e:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1d830:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1d834:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1d838:	d100      	bne.n	1d83c <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1d83a:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1d83c:	f7ff ffb2 	bl	1d7a4 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1d840:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1d844:	e7f9      	b.n	1d83a <hal_timer_irq_handler+0x20>
	...

0001d848 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1d848:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1d84a:	4802      	ldr	r0, [pc, #8]	; (1d854 <nrf52_timer0_irq_handler+0xc>)
   1d84c:	f7ff ffe5 	bl	1d81a <hal_timer_irq_handler>
}
   1d850:	bd08      	pop	{r3, pc}
   1d852:	bf00      	nop
   1d854:	2000ded0 	.word	0x2000ded0

0001d858 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1d858:	2805      	cmp	r0, #5
   1d85a:	dc1c      	bgt.n	1d896 <hal_timer_init+0x3e>
   1d85c:	4b12      	ldr	r3, [pc, #72]	; (1d8a8 <hal_timer_init+0x50>)
   1d85e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1d862:	b1d3      	cbz	r3, 1d89a <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1d864:	781a      	ldrb	r2, [r3, #0]
   1d866:	b9d2      	cbnz	r2, 1d89e <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1d868:	b9d8      	cbnz	r0, 1d8a2 <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1d86a:	4a10      	ldr	r2, [pc, #64]	; (1d8ac <hal_timer_init+0x54>)
   1d86c:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1d86e:	2208      	movs	r2, #8
   1d870:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d872:	4b0f      	ldr	r3, [pc, #60]	; (1d8b0 <hal_timer_init+0x58>)
   1d874:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1d87c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1d880:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1d884:	22e0      	movs	r2, #224	; 0xe0
   1d886:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1d88a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1d88e:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1d890:	4a08      	ldr	r2, [pc, #32]	; (1d8b4 <hal_timer_init+0x5c>)
   1d892:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1d894:	4770      	bx	lr

err:
    return rc;
   1d896:	2016      	movs	r0, #22
   1d898:	4770      	bx	lr
   1d89a:	2016      	movs	r0, #22
   1d89c:	4770      	bx	lr
   1d89e:	2016      	movs	r0, #22
   1d8a0:	4770      	bx	lr
   1d8a2:	2016      	movs	r0, #22
}
   1d8a4:	4770      	bx	lr
   1d8a6:	bf00      	nop
   1d8a8:	0002920c 	.word	0x0002920c
   1d8ac:	40008000 	.word	0x40008000
   1d8b0:	e000e100 	.word	0xe000e100
   1d8b4:	0001d849 	.word	0x0001d849

0001d8b8 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1d8b8:	2805      	cmp	r0, #5
   1d8ba:	dc65      	bgt.n	1d988 <hal_timer_config+0xd0>
   1d8bc:	4b39      	ldr	r3, [pc, #228]	; (1d9a4 <hal_timer_config+0xec>)
   1d8be:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1d8c2:	2800      	cmp	r0, #0
   1d8c4:	d062      	beq.n	1d98c <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1d8c6:	4b38      	ldr	r3, [pc, #224]	; (1d9a8 <hal_timer_config+0xf0>)
   1d8c8:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1d8cc:	7803      	ldrb	r3, [r0, #0]
   1d8ce:	2b00      	cmp	r3, #0
   1d8d0:	d15e      	bne.n	1d990 <hal_timer_config+0xd8>
   1d8d2:	2900      	cmp	r1, #0
   1d8d4:	d05e      	beq.n	1d994 <hal_timer_config+0xdc>
   1d8d6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1d8da:	d85d      	bhi.n	1d998 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1d8dc:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1d8de:	2a00      	cmp	r2, #0
   1d8e0:	d05c      	beq.n	1d99c <hal_timer_config+0xe4>
{
   1d8e2:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1d8e4:	2901      	cmp	r1, #1
   1d8e6:	d013      	beq.n	1d910 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1d8e8:	2301      	movs	r3, #1
   1d8ea:	2b09      	cmp	r3, #9
   1d8ec:	d810      	bhi.n	1d910 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1d8ee:	2201      	movs	r2, #1
   1d8f0:	409a      	lsls	r2, r3
   1d8f2:	428a      	cmp	r2, r1
   1d8f4:	d202      	bcs.n	1d8fc <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1d8f6:	3301      	adds	r3, #1
   1d8f8:	b2db      	uxtb	r3, r3
   1d8fa:	e7f6      	b.n	1d8ea <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1d8fc:	1e5c      	subs	r4, r3, #1
   1d8fe:	2501      	movs	r5, #1
   1d900:	fa05 f404 	lsl.w	r4, r5, r4
   1d904:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1d906:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1d908:	428c      	cmp	r4, r1
   1d90a:	d201      	bcs.n	1d910 <hal_timer_config+0x58>
                    prescaler -= 1;
   1d90c:	3b01      	subs	r3, #1
   1d90e:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1d910:	4a25      	ldr	r2, [pc, #148]	; (1d9a8 <hal_timer_config+0xf0>)
   1d912:	411a      	asrs	r2, r3
   1d914:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1d916:	2201      	movs	r2, #1
   1d918:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1d91a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d91e:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1d920:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1d924:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1d928:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1d92c:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1d930:	d00c      	beq.n	1d94c <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1d932:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1d936:	2100      	movs	r1, #0
   1d938:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1d93c:	2101      	movs	r1, #1
   1d93e:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1d940:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1d944:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1d948:	2a00      	cmp	r2, #0
   1d94a:	d0f9      	beq.n	1d940 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1d94c:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1d94e:	2101      	movs	r1, #1
   1d950:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1d952:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1d954:	2500      	movs	r5, #0
   1d956:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1d95a:	2503      	movs	r5, #3
   1d95c:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1d960:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1d964:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1d966:	7842      	ldrb	r2, [r0, #1]
   1d968:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1d96a:	2b00      	cmp	r3, #0
   1d96c:	db07      	blt.n	1d97e <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d96e:	f002 021f 	and.w	r2, r2, #31
   1d972:	095b      	lsrs	r3, r3, #5
   1d974:	fa01 f202 	lsl.w	r2, r1, r2
   1d978:	490c      	ldr	r1, [pc, #48]	; (1d9ac <hal_timer_config+0xf4>)
   1d97a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1d97e:	b97c      	cbnz	r4, 1d9a0 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1d980:	b662      	cpsie	i

    return 0;
   1d982:	2000      	movs	r0, #0

err:
    return rc;
}
   1d984:	bc30      	pop	{r4, r5}
   1d986:	4770      	bx	lr
    return rc;
   1d988:	2016      	movs	r0, #22
   1d98a:	4770      	bx	lr
   1d98c:	2016      	movs	r0, #22
   1d98e:	4770      	bx	lr
   1d990:	2016      	movs	r0, #22
   1d992:	4770      	bx	lr
   1d994:	2016      	movs	r0, #22
   1d996:	4770      	bx	lr
   1d998:	2016      	movs	r0, #22
   1d99a:	4770      	bx	lr
   1d99c:	2016      	movs	r0, #22
}
   1d99e:	4770      	bx	lr
    return 0;
   1d9a0:	2000      	movs	r0, #0
   1d9a2:	e7ef      	b.n	1d984 <hal_timer_config+0xcc>
   1d9a4:	0002920c 	.word	0x0002920c
   1d9a8:	00f42400 	.word	0x00f42400
   1d9ac:	e000e100 	.word	0xe000e100

0001d9b0 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1d9b0:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1d9b2:	2805      	cmp	r0, #5
   1d9b4:	dc0c      	bgt.n	1d9d0 <hal_timer_read+0x20>
   1d9b6:	4b09      	ldr	r3, [pc, #36]	; (1d9dc <hal_timer_read+0x2c>)
   1d9b8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1d9bc:	b140      	cbz	r0, 1d9d0 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1d9be:	7883      	ldrb	r3, [r0, #2]
   1d9c0:	b91b      	cbnz	r3, 1d9ca <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1d9c2:	6900      	ldr	r0, [r0, #16]
   1d9c4:	f7ff fe5a 	bl	1d67c <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1d9c8:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1d9ca:	f7ff fec1 	bl	1d750 <hal_timer_read_bsptimer>
   1d9ce:	e7fb      	b.n	1d9c8 <hal_timer_read+0x18>
    assert(0);
   1d9d0:	2300      	movs	r3, #0
   1d9d2:	461a      	mov	r2, r3
   1d9d4:	4619      	mov	r1, r3
   1d9d6:	4618      	mov	r0, r3
   1d9d8:	f7fd fcf2 	bl	1b3c0 <__assert_func>
   1d9dc:	0002920c 	.word	0x0002920c

0001d9e0 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1d9e0:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1d9e2:	2100      	movs	r1, #0
   1d9e4:	4608      	mov	r0, r1
   1d9e6:	f7ff ff37 	bl	1d858 <hal_timer_init>
    assert(rc == 0);
   1d9ea:	b920      	cbnz	r0, 1d9f6 <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1d9ec:	4808      	ldr	r0, [pc, #32]	; (1da10 <nrf52_periph_create_timers+0x30>)
   1d9ee:	f7fd ff11 	bl	1b814 <os_cputime_init>
    assert(rc == 0);
   1d9f2:	b930      	cbnz	r0, 1da02 <nrf52_periph_create_timers+0x22>
#endif
}
   1d9f4:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1d9f6:	2300      	movs	r3, #0
   1d9f8:	461a      	mov	r2, r3
   1d9fa:	4619      	mov	r1, r3
   1d9fc:	4618      	mov	r0, r3
   1d9fe:	f7fd fcdf 	bl	1b3c0 <__assert_func>
    assert(rc == 0);
   1da02:	2300      	movs	r3, #0
   1da04:	461a      	mov	r2, r3
   1da06:	4619      	mov	r1, r3
   1da08:	4618      	mov	r0, r3
   1da0a:	f7fd fcd9 	bl	1b3c0 <__assert_func>
   1da0e:	bf00      	nop
   1da10:	000f4240 	.word	0x000f4240

0001da14 <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1da14:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1da16:	4906      	ldr	r1, [pc, #24]	; (1da30 <nrf52_periph_create_i2c+0x1c>)
   1da18:	2001      	movs	r0, #1
   1da1a:	f7fd f82b 	bl	1aa74 <hal_i2c_init>
    assert(rc == 0);
   1da1e:	b900      	cbnz	r0, 1da22 <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1da20:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1da22:	2300      	movs	r3, #0
   1da24:	461a      	mov	r2, r3
   1da26:	4619      	mov	r1, r3
   1da28:	4618      	mov	r0, r3
   1da2a:	f7fd fcc9 	bl	1b3c0 <__assert_func>
   1da2e:	bf00      	nop
   1da30:	00029224 	.word	0x00029224

0001da34 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1da34:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1da36:	2200      	movs	r2, #0
   1da38:	4905      	ldr	r1, [pc, #20]	; (1da50 <nrf52_periph_create_spi+0x1c>)
   1da3a:	4610      	mov	r0, r2
   1da3c:	f7fd fb4e 	bl	1b0dc <hal_spi_init>
    assert(rc == 0);
   1da40:	b900      	cbnz	r0, 1da44 <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1da42:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1da44:	2300      	movs	r3, #0
   1da46:	461a      	mov	r2, r3
   1da48:	4619      	mov	r1, r3
   1da4a:	4618      	mov	r0, r3
   1da4c:	f7fd fcb8 	bl	1b3c0 <__assert_func>
   1da50:	00029230 	.word	0x00029230

0001da54 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1da54:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1da56:	f7ff ffc3 	bl	1d9e0 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1da5a:	f7ff ffdb 	bl	1da14 <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1da5e:	f7ff ffe9 	bl	1da34 <nrf52_periph_create_spi>
}
   1da62:	bd08      	pop	{r3, pc}

0001da64 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1da64:	4770      	bx	lr
	...

0001da68 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1da68:	4b08      	ldr	r3, [pc, #32]	; (1da8c <sensor_mgr_remove+0x24>)
   1da6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1da6c:	4282      	cmp	r2, r0
   1da6e:	d104      	bne.n	1da7a <sensor_mgr_remove+0x12>
   1da70:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1da74:	631a      	str	r2, [r3, #48]	; 0x30
   1da76:	4770      	bx	lr
   1da78:	461a      	mov	r2, r3
   1da7a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1da7e:	4283      	cmp	r3, r0
   1da80:	d1fa      	bne.n	1da78 <sensor_mgr_remove+0x10>
   1da82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1da86:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1da8a:	4770      	bx	lr
   1da8c:	2000def0 	.word	0x2000def0

0001da90 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1da90:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1da92:	6a03      	ldr	r3, [r0, #32]
   1da94:	b993      	cbnz	r3, 1dabc <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1da96:	4b15      	ldr	r3, [pc, #84]	; (1daec <sensor_mgr_insert+0x5c>)
   1da98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1da9a:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1da9c:	e002      	b.n	1daa4 <sensor_mgr_insert+0x14>
            prev = cursor;
   1da9e:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1daa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1daa4:	2b00      	cmp	r3, #0
   1daa6:	d1fa      	bne.n	1da9e <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1daa8:	b1c9      	cbz	r1, 1dade <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1daaa:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1daae:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1dab2:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1dab6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1daba:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1dabc:	4b0b      	ldr	r3, [pc, #44]	; (1daec <sensor_mgr_insert+0x5c>)
   1dabe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1dac0:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1dac2:	2b00      	cmp	r3, #0
   1dac4:	d0f0      	beq.n	1daa8 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1dac6:	6a1a      	ldr	r2, [r3, #32]
   1dac8:	2a00      	cmp	r2, #0
   1daca:	d0ed      	beq.n	1daa8 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1dacc:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1dace:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1dad0:	1b12      	subs	r2, r2, r4
   1dad2:	2a00      	cmp	r2, #0
   1dad4:	dbe8      	blt.n	1daa8 <sensor_mgr_insert+0x18>
        prev = cursor;
   1dad6:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1dad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1dadc:	e7f1      	b.n	1dac2 <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1dade:	4b03      	ldr	r3, [pc, #12]	; (1daec <sensor_mgr_insert+0x5c>)
   1dae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1dae2:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1dae6:	6318      	str	r0, [r3, #48]	; 0x30
   1dae8:	e7e5      	b.n	1dab6 <sensor_mgr_insert+0x26>
   1daea:	bf00      	nop
   1daec:	2000def0 	.word	0x2000def0

0001daf0 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1daf0:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1daf2:	fab0 f080 	clz	r0, r0
   1daf6:	0940      	lsrs	r0, r0, #5
   1daf8:	4770      	bx	lr
	...

0001dafc <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1dafc:	4b01      	ldr	r3, [pc, #4]	; (1db04 <sensor_mgr_evq_set+0x8>)
   1dafe:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1db00:	4770      	bx	lr
   1db02:	bf00      	nop
   1db04:	2000def0 	.word	0x2000def0

0001db08 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1db08:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1db0c:	e9d1 2300 	ldrd	r2, r3, [r1]
   1db10:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1db14:	ea02 0b04 	and.w	fp, r2, r4
   1db18:	ea03 0c05 	and.w	ip, r3, r5
   1db1c:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1db20:	ea0b 0200 	and.w	r2, fp, r0
   1db24:	ea0c 0301 	and.w	r3, ip, r1
   1db28:	4313      	orrs	r3, r2
}
   1db2a:	bf14      	ite	ne
   1db2c:	2001      	movne	r0, #1
   1db2e:	2000      	moveq	r0, #0
   1db30:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1db34:	4770      	bx	lr

0001db36 <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1db36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1db3a:	b083      	sub	sp, #12
   1db3c:	4605      	mov	r5, r0
   1db3e:	4689      	mov	r9, r1
   1db40:	4690      	mov	r8, r2
   1db42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1db46:	790b      	ldrb	r3, [r1, #4]
   1db48:	2b01      	cmp	r3, #1
   1db4a:	d013      	beq.n	1db74 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1db4c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1db4e:	e000      	b.n	1db52 <sensor_read_data_func+0x1c>
   1db50:	6924      	ldr	r4, [r4, #16]
   1db52:	b17c      	cbz	r4, 1db74 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1db54:	e9d4 0100 	ldrd	r0, r1, [r4]
   1db58:	ea00 0206 	and.w	r2, r0, r6
   1db5c:	ea01 0307 	and.w	r3, r1, r7
   1db60:	4313      	orrs	r3, r2
   1db62:	d0f5      	beq.n	1db50 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1db64:	68a3      	ldr	r3, [r4, #8]
   1db66:	68e1      	ldr	r1, [r4, #12]
   1db68:	e9cd 6700 	strd	r6, r7, [sp]
   1db6c:	4642      	mov	r2, r8
   1db6e:	4628      	mov	r0, r5
   1db70:	4798      	blx	r3
   1db72:	e7ed      	b.n	1db50 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1db74:	f8d9 3000 	ldr.w	r3, [r9]
   1db78:	b14b      	cbz	r3, 1db8e <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1db7a:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1db7e:	e9cd 6700 	strd	r6, r7, [sp]
   1db82:	4642      	mov	r2, r8
   1db84:	4628      	mov	r0, r5
   1db86:	4798      	blx	r3
    }

    return (0);
}
   1db88:	b003      	add	sp, #12
   1db8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1db8e:	2000      	movs	r0, #0
   1db90:	e7fa      	b.n	1db88 <sensor_read_data_func+0x52>
	...

0001db94 <sensor_base_ts_update_event>:
{
   1db94:	b530      	push	{r4, r5, lr}
   1db96:	b087      	sub	sp, #28
    ticks = os_time_get();
   1db98:	f7fe fe30 	bl	1c7fc <os_time_get>
   1db9c:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1db9e:	a901      	add	r1, sp, #4
   1dba0:	a802      	add	r0, sp, #8
   1dba2:	f7fe fe65 	bl	1c870 <os_gettimeofday>
    if (rc) {
   1dba6:	b138      	cbz	r0, 1dbb8 <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1dba8:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1dbac:	4621      	mov	r1, r4
   1dbae:	4809      	ldr	r0, [pc, #36]	; (1dbd4 <sensor_base_ts_update_event+0x40>)
   1dbb0:	f7fd fdac 	bl	1b70c <os_callout_reset>
}
   1dbb4:	b007      	add	sp, #28
   1dbb6:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1dbb8:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1dbbc:	4d06      	ldr	r5, [pc, #24]	; (1dbd8 <sensor_base_ts_update_event+0x44>)
   1dbbe:	ab06      	add	r3, sp, #24
   1dbc0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1dbc4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1dbc8:	9b01      	ldr	r3, [sp, #4]
   1dbca:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1dbcc:	f7fd fe28 	bl	1b820 <os_cputime_get32>
   1dbd0:	6168      	str	r0, [r5, #20]
   1dbd2:	e7eb      	b.n	1dbac <sensor_base_ts_update_event+0x18>
   1dbd4:	2000df24 	.word	0x2000df24
   1dbd8:	2000df48 	.word	0x2000df48

0001dbdc <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1dbdc:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1dbe0:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1dbe2:	f7fd fe1d 	bl	1b820 <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1dbe6:	4a0e      	ldr	r2, [pc, #56]	; (1dc20 <sensor_up_timestamp+0x44>)
   1dbe8:	6955      	ldr	r5, [r2, #20]
   1dbea:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1dbec:	6460      	str	r0, [r4, #68]	; 0x44
   1dbee:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1dbf0:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1dbf4:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1dbf6:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1dbf8:	4b0a      	ldr	r3, [pc, #40]	; (1dc24 <sensor_up_timestamp+0x48>)
   1dbfa:	fba3 c305 	umull	ip, r3, r3, r5
   1dbfe:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1dc00:	eb10 0b03 	adds.w	fp, r0, r3
   1dc04:	f141 0c00 	adc.w	ip, r1, #0
   1dc08:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1dc0c:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1dc10:	4905      	ldr	r1, [pc, #20]	; (1dc28 <sensor_up_timestamp+0x4c>)
   1dc12:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1dc16:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1dc18:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1dc1a:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1dc1e:	bf00      	nop
   1dc20:	2000df48 	.word	0x2000df48
   1dc24:	431bde83 	.word	0x431bde83
   1dc28:	000f4240 	.word	0x000f4240

0001dc2c <sensor_mgr_lock>:
{
   1dc2c:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1dc2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dc32:	4804      	ldr	r0, [pc, #16]	; (1dc44 <sensor_mgr_lock+0x18>)
   1dc34:	f7fe fa5c 	bl	1c0f0 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1dc38:	b108      	cbz	r0, 1dc3e <sensor_mgr_lock+0x12>
   1dc3a:	2809      	cmp	r0, #9
   1dc3c:	d000      	beq.n	1dc40 <sensor_mgr_lock+0x14>
}
   1dc3e:	bd08      	pop	{r3, pc}
        return (0);
   1dc40:	2000      	movs	r0, #0
   1dc42:	e7fc      	b.n	1dc3e <sensor_mgr_lock+0x12>
   1dc44:	2000def0 	.word	0x2000def0

0001dc48 <sensor_mgr_unlock>:
{
   1dc48:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1dc4a:	4802      	ldr	r0, [pc, #8]	; (1dc54 <sensor_mgr_unlock+0xc>)
   1dc4c:	f7fe f9f4 	bl	1c038 <os_mutex_release>
}
   1dc50:	bd08      	pop	{r3, pc}
   1dc52:	bf00      	nop
   1dc54:	2000def0 	.word	0x2000def0

0001dc58 <sensor_mgr_evq_get>:
}
   1dc58:	4b01      	ldr	r3, [pc, #4]	; (1dc60 <sensor_mgr_evq_get+0x8>)
   1dc5a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1dc5c:	4770      	bx	lr
   1dc5e:	bf00      	nop
   1dc60:	2000def0 	.word	0x2000def0

0001dc64 <sensor_mgr_init>:
{
   1dc64:	b570      	push	{r4, r5, r6, lr}
   1dc66:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1dc68:	f7fd ff68 	bl	1bb3c <os_eventq_dflt_get>
   1dc6c:	f7ff ff46 	bl	1dafc <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1dc70:	4b1c      	ldr	r3, [pc, #112]	; (1dce4 <sensor_mgr_init+0x80>)
   1dc72:	9300      	str	r3, [sp, #0]
   1dc74:	4b1c      	ldr	r3, [pc, #112]	; (1dce8 <sensor_mgr_init+0x84>)
   1dc76:	2218      	movs	r2, #24
   1dc78:	2105      	movs	r1, #5
   1dc7a:	481c      	ldr	r0, [pc, #112]	; (1dcec <sensor_mgr_init+0x88>)
   1dc7c:	f7fe f8e8 	bl	1be50 <os_mempool_init>
    assert(rc == OS_OK);
   1dc80:	bb50      	cbnz	r0, 1dcd8 <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1dc82:	f7ff ffe9 	bl	1dc58 <sensor_mgr_evq_get>
   1dc86:	4e1a      	ldr	r6, [pc, #104]	; (1dcf0 <sensor_mgr_init+0x8c>)
   1dc88:	2300      	movs	r3, #0
   1dc8a:	4a1a      	ldr	r2, [pc, #104]	; (1dcf4 <sensor_mgr_init+0x90>)
   1dc8c:	4601      	mov	r1, r0
   1dc8e:	4630      	mov	r0, r6
   1dc90:	f7fd fd10 	bl	1b6b4 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1dc94:	ad04      	add	r5, sp, #16
   1dc96:	a903      	add	r1, sp, #12
   1dc98:	4628      	mov	r0, r5
   1dc9a:	f7fe fde9 	bl	1c870 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1dc9e:	4c16      	ldr	r4, [pc, #88]	; (1dcf8 <sensor_mgr_init+0x94>)
   1dca0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1dca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1dca8:	9b03      	ldr	r3, [sp, #12]
   1dcaa:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1dcac:	f7fd fdb8 	bl	1b820 <os_cputime_get32>
   1dcb0:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1dcb2:	f7ff ffd1 	bl	1dc58 <sensor_mgr_evq_get>
   1dcb6:	4c11      	ldr	r4, [pc, #68]	; (1dcfc <sensor_mgr_init+0x98>)
   1dcb8:	2300      	movs	r3, #0
   1dcba:	4a11      	ldr	r2, [pc, #68]	; (1dd00 <sensor_mgr_init+0x9c>)
   1dcbc:	4601      	mov	r1, r0
   1dcbe:	4620      	mov	r0, r4
   1dcc0:	f7fd fcf8 	bl	1b6b4 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1dcc4:	2180      	movs	r1, #128	; 0x80
   1dcc6:	4620      	mov	r0, r4
   1dcc8:	f7fd fd20 	bl	1b70c <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1dccc:	f1a6 000c 	sub.w	r0, r6, #12
   1dcd0:	f7fe f9a8 	bl	1c024 <os_mutex_init>
}
   1dcd4:	b008      	add	sp, #32
   1dcd6:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1dcd8:	2300      	movs	r3, #0
   1dcda:	461a      	mov	r2, r3
   1dcdc:	4619      	mov	r1, r3
   1dcde:	4618      	mov	r0, r3
   1dce0:	f7fd fb6e 	bl	1b3c0 <__assert_func>
   1dce4:	00029234 	.word	0x00029234
   1dce8:	2000d9ec 	.word	0x2000d9ec
   1dcec:	2000da64 	.word	0x2000da64
   1dcf0:	2000defc 	.word	0x2000defc
   1dcf4:	0001ded1 	.word	0x0001ded1
   1dcf8:	2000df48 	.word	0x2000df48
   1dcfc:	2000df24 	.word	0x2000df24
   1dd00:	0001db95 	.word	0x0001db95

0001dd04 <sensor_pkg_init>:
{
   1dd04:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1dd06:	f7ff ffad 	bl	1dc64 <sensor_mgr_init>
}
   1dd0a:	bd08      	pop	{r3, pc}

0001dd0c <sensor_lock>:
{
   1dd0c:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1dd0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dd12:	3004      	adds	r0, #4
   1dd14:	f7fe f9ec 	bl	1c0f0 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1dd18:	b108      	cbz	r0, 1dd1e <sensor_lock+0x12>
   1dd1a:	2809      	cmp	r0, #9
   1dd1c:	d000      	beq.n	1dd20 <sensor_lock+0x14>
}
   1dd1e:	bd08      	pop	{r3, pc}
        return (0);
   1dd20:	2000      	movs	r0, #0
   1dd22:	e7fc      	b.n	1dd1e <sensor_lock+0x12>

0001dd24 <sensor_unlock>:
{
   1dd24:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1dd26:	3004      	adds	r0, #4
   1dd28:	f7fe f986 	bl	1c038 <os_mutex_release>
}
   1dd2c:	bd08      	pop	{r3, pc}

0001dd2e <sensor_update_nextrun>:
{
   1dd2e:	b530      	push	{r4, r5, lr}
   1dd30:	b083      	sub	sp, #12
   1dd32:	4604      	mov	r4, r0
   1dd34:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1dd36:	a901      	add	r1, sp, #4
   1dd38:	6a00      	ldr	r0, [r0, #32]
   1dd3a:	f7fe fdb5 	bl	1c8a8 <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1dd3e:	4620      	mov	r0, r4
   1dd40:	f7ff ffe4 	bl	1dd0c <sensor_lock>
    sensor_mgr_remove(sensor);
   1dd44:	4620      	mov	r0, r4
   1dd46:	f7ff fe8f 	bl	1da68 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1dd4a:	9b01      	ldr	r3, [sp, #4]
   1dd4c:	441d      	add	r5, r3
   1dd4e:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1dd50:	4620      	mov	r0, r4
   1dd52:	f7ff fe9d 	bl	1da90 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1dd56:	4620      	mov	r0, r4
   1dd58:	f7ff ffe4 	bl	1dd24 <sensor_unlock>
}
   1dd5c:	b003      	add	sp, #12
   1dd5e:	bd30      	pop	{r4, r5, pc}

0001dd60 <sensor_calc_nextrun_delta>:
{
   1dd60:	b538      	push	{r3, r4, r5, lr}
   1dd62:	4605      	mov	r5, r0
   1dd64:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1dd66:	f7ff ffd1 	bl	1dd0c <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1dd6a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1dd6c:	1b0c      	subs	r4, r1, r4
   1dd6e:	d404      	bmi.n	1dd7a <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1dd70:	4628      	mov	r0, r5
   1dd72:	f7ff ffd7 	bl	1dd24 <sensor_unlock>
}
   1dd76:	4620      	mov	r0, r4
   1dd78:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1dd7a:	2400      	movs	r4, #0
   1dd7c:	e7f8      	b.n	1dd70 <sensor_calc_nextrun_delta+0x10>
	...

0001dd80 <sensor_find_min_nextrun_sensor>:
{
   1dd80:	b570      	push	{r4, r5, r6, lr}
   1dd82:	4606      	mov	r6, r0
   1dd84:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1dd86:	f7ff ff51 	bl	1dc2c <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1dd8a:	4b05      	ldr	r3, [pc, #20]	; (1dda0 <sensor_find_min_nextrun_sensor+0x20>)
   1dd8c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1dd8e:	4631      	mov	r1, r6
   1dd90:	4620      	mov	r0, r4
   1dd92:	f7ff ffe5 	bl	1dd60 <sensor_calc_nextrun_delta>
   1dd96:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1dd98:	f7ff ff56 	bl	1dc48 <sensor_mgr_unlock>
}
   1dd9c:	4620      	mov	r0, r4
   1dd9e:	bd70      	pop	{r4, r5, r6, pc}
   1dda0:	2000def0 	.word	0x2000def0

0001dda4 <sensor_mgr_register>:
{
   1dda4:	b538      	push	{r3, r4, r5, lr}
   1dda6:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1dda8:	f7ff ff40 	bl	1dc2c <sensor_mgr_lock>
    if (rc != 0) {
   1ddac:	4604      	mov	r4, r0
   1ddae:	b108      	cbz	r0, 1ddb4 <sensor_mgr_register+0x10>
}
   1ddb0:	4620      	mov	r0, r4
   1ddb2:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1ddb4:	4628      	mov	r0, r5
   1ddb6:	f7ff ffa9 	bl	1dd0c <sensor_lock>
    if (rc != 0) {
   1ddba:	4604      	mov	r4, r0
   1ddbc:	2800      	cmp	r0, #0
   1ddbe:	d1f7      	bne.n	1ddb0 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1ddc0:	4628      	mov	r0, r5
   1ddc2:	f7ff fe65 	bl	1da90 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1ddc6:	4628      	mov	r0, r5
   1ddc8:	f7ff ffac 	bl	1dd24 <sensor_unlock>
    sensor_mgr_unlock();
   1ddcc:	f7ff ff3c 	bl	1dc48 <sensor_mgr_unlock>
    return (0);
   1ddd0:	e7ee      	b.n	1ddb0 <sensor_mgr_register+0xc>

0001ddd2 <sensor_init>:
{
   1ddd2:	b538      	push	{r3, r4, r5, lr}
   1ddd4:	4604      	mov	r4, r0
   1ddd6:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1ddd8:	2288      	movs	r2, #136	; 0x88
   1ddda:	2100      	movs	r1, #0
   1dddc:	f7fe fef3 	bl	1cbc6 <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1dde0:	1d20      	adds	r0, r4, #4
   1dde2:	f7fe f91f 	bl	1c024 <os_mutex_init>
    if (rc != 0) {
   1dde6:	4603      	mov	r3, r0
   1dde8:	b900      	cbnz	r0, 1ddec <sensor_init+0x1a>
    sensor->s_dev = dev;
   1ddea:	6025      	str	r5, [r4, #0]
}
   1ddec:	4618      	mov	r0, r3
   1ddee:	bd38      	pop	{r3, r4, r5, pc}

0001ddf0 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1ddf0:	b530      	push	{r4, r5, lr}
   1ddf2:	b089      	sub	sp, #36	; 0x24
   1ddf4:	4604      	mov	r4, r0
   1ddf6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1ddfa:	f7ff ff87 	bl	1dd0c <sensor_lock>
    if (rc) {
   1ddfe:	4605      	mov	r5, r0
   1de00:	b9f8      	cbnz	r0, 1de42 <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1de02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1de04:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1de06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1de08:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1de0a:	a904      	add	r1, sp, #16
   1de0c:	4620      	mov	r0, r4
   1de0e:	f7ff fe7b 	bl	1db08 <sensor_mgr_match_bytype>
   1de12:	b1e0      	cbz	r0, 1de4e <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1de14:	4620      	mov	r0, r4
   1de16:	f7ff fee1 	bl	1dbdc <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1de1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1de1c:	6819      	ldr	r1, [r3, #0]
   1de1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1de20:	9302      	str	r3, [sp, #8]
   1de22:	ab06      	add	r3, sp, #24
   1de24:	9301      	str	r3, [sp, #4]
   1de26:	4b0b      	ldr	r3, [pc, #44]	; (1de54 <sensor_read+0x64>)
   1de28:	9300      	str	r3, [sp, #0]
   1de2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1de2e:	4620      	mov	r0, r4
   1de30:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1de32:	4605      	mov	r5, r0
   1de34:	b128      	cbz	r0, 1de42 <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1de36:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1de38:	b11b      	cbz	r3, 1de42 <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1de3a:	4602      	mov	r2, r0
   1de3c:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1de3e:	4620      	mov	r0, r4
   1de40:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1de42:	4620      	mov	r0, r4
   1de44:	f7ff ff6e 	bl	1dd24 <sensor_unlock>
    return (rc);
}
   1de48:	4628      	mov	r0, r5
   1de4a:	b009      	add	sp, #36	; 0x24
   1de4c:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1de4e:	f06f 0503 	mvn.w	r5, #3
   1de52:	e7f6      	b.n	1de42 <sensor_read+0x52>
   1de54:	0001db37 	.word	0x0001db37

0001de58 <sensor_mgr_poll_bytype>:
{
   1de58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1de5a:	b085      	sub	sp, #20
   1de5c:	4616      	mov	r6, r2
   1de5e:	461f      	mov	r7, r3
   1de60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1de62:	b10c      	cbz	r4, 1de68 <sensor_mgr_poll_bytype+0x10>
   1de64:	8aa3      	ldrh	r3, [r4, #20]
   1de66:	b9cb      	cbnz	r3, 1de9c <sensor_mgr_poll_bytype+0x44>
   1de68:	4632      	mov	r2, r6
   1de6a:	463b      	mov	r3, r7
   1de6c:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1de6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1de72:	9102      	str	r1, [sp, #8]
   1de74:	2100      	movs	r1, #0
   1de76:	9101      	str	r1, [sp, #4]
   1de78:	9100      	str	r1, [sp, #0]
   1de7a:	f7ff ffb9 	bl	1ddf0 <sensor_read>
        sensor_lock(sensor);
   1de7e:	4628      	mov	r0, r5
   1de80:	f7ff ff44 	bl	1dd0c <sensor_lock>
        if (stt) {
   1de84:	b12c      	cbz	r4, 1de92 <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1de86:	8aa3      	ldrh	r3, [r4, #20]
   1de88:	b91b      	cbnz	r3, 1de92 <sensor_mgr_poll_bytype+0x3a>
   1de8a:	8a63      	ldrh	r3, [r4, #18]
   1de8c:	b10b      	cbz	r3, 1de92 <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1de8e:	3b01      	subs	r3, #1
   1de90:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1de92:	4628      	mov	r0, r5
   1de94:	f7ff ff46 	bl	1dd24 <sensor_unlock>
}
   1de98:	b005      	add	sp, #20
   1de9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1de9c:	3b01      	subs	r3, #1
   1de9e:	82a3      	strh	r3, [r4, #20]
}
   1dea0:	e7fa      	b.n	1de98 <sensor_mgr_poll_bytype+0x40>

0001dea2 <sensor_poll_per_type_trait>:
{
   1dea2:	b570      	push	{r4, r5, r6, lr}
   1dea4:	b082      	sub	sp, #8
   1dea6:	4605      	mov	r5, r0
   1dea8:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1deaa:	f7ff ff2f 	bl	1dd0c <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1deae:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1deb0:	e007      	b.n	1dec2 <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1deb2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1deb6:	9601      	str	r6, [sp, #4]
   1deb8:	9400      	str	r4, [sp, #0]
   1deba:	4628      	mov	r0, r5
   1debc:	f7ff ffcc 	bl	1de58 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1dec0:	6a24      	ldr	r4, [r4, #32]
   1dec2:	2c00      	cmp	r4, #0
   1dec4:	d1f5      	bne.n	1deb2 <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1dec6:	4628      	mov	r0, r5
   1dec8:	f7ff ff2c 	bl	1dd24 <sensor_unlock>
}
   1decc:	b002      	add	sp, #8
   1dece:	bd70      	pop	{r4, r5, r6, pc}

0001ded0 <sensor_mgr_wakeup_event>:
{
   1ded0:	b570      	push	{r4, r5, r6, lr}
   1ded2:	b084      	sub	sp, #16
    now = os_time_get();
   1ded4:	f7fe fc92 	bl	1c7fc <os_time_get>
   1ded8:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1deda:	f7ff fea7 	bl	1dc2c <sensor_mgr_lock>
   1dede:	e012      	b.n	1df06 <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1dee0:	4620      	mov	r0, r4
   1dee2:	f7ff ff1f 	bl	1dd24 <sensor_unlock>
            sensor_mgr_unlock();
   1dee6:	f7ff feaf 	bl	1dc48 <sensor_mgr_unlock>
}
   1deea:	b004      	add	sp, #16
   1deec:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1deee:	4632      	mov	r2, r6
   1def0:	4629      	mov	r1, r5
   1def2:	4620      	mov	r0, r4
   1def4:	f7ff ffd5 	bl	1dea2 <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1def8:	4629      	mov	r1, r5
   1defa:	4620      	mov	r0, r4
   1defc:	f7ff ff17 	bl	1dd2e <sensor_update_nextrun>
        sensor_unlock(cursor);
   1df00:	4620      	mov	r0, r4
   1df02:	f7ff ff0f 	bl	1dd24 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1df06:	a903      	add	r1, sp, #12
   1df08:	4628      	mov	r0, r5
   1df0a:	f7ff ff39 	bl	1dd80 <sensor_find_min_nextrun_sensor>
   1df0e:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1df10:	f7ff fefc 	bl	1dd0c <sensor_lock>
        if (!cursor->s_poll_rate) {
   1df14:	6a23      	ldr	r3, [r4, #32]
   1df16:	2b00      	cmp	r3, #0
   1df18:	d0e2      	beq.n	1dee0 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1df1a:	9e03      	ldr	r6, [sp, #12]
   1df1c:	b96e      	cbnz	r6, 1df3a <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1df1e:	4620      	mov	r0, r4
   1df20:	f7ff fde6 	bl	1daf0 <sensor_type_traits_empty>
   1df24:	2800      	cmp	r0, #0
   1df26:	d0e2      	beq.n	1deee <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1df28:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1df2c:	9501      	str	r5, [sp, #4]
   1df2e:	2100      	movs	r1, #0
   1df30:	9100      	str	r1, [sp, #0]
   1df32:	4620      	mov	r0, r4
   1df34:	f7ff ff90 	bl	1de58 <sensor_mgr_poll_bytype>
   1df38:	e7de      	b.n	1def8 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1df3a:	f7ff fe85 	bl	1dc48 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1df3e:	9903      	ldr	r1, [sp, #12]
   1df40:	4801      	ldr	r0, [pc, #4]	; (1df48 <sensor_mgr_wakeup_event+0x78>)
   1df42:	f7fd fbe3 	bl	1b70c <os_callout_reset>
   1df46:	e7d0      	b.n	1deea <sensor_mgr_wakeup_event+0x1a>
   1df48:	2000defc 	.word	0x2000defc

0001df4c <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1df4c:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1df4e:	2101      	movs	r1, #1
   1df50:	4806      	ldr	r0, [pc, #24]	; (1df6c <init_sensor_coap+0x20>)
   1df52:	f7fe faf1 	bl	1c538 <os_sem_init>
    assert(rc == OS_OK);
   1df56:	b918      	cbnz	r0, 1df60 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1df58:	4b05      	ldr	r3, [pc, #20]	; (1df70 <init_sensor_coap+0x24>)
   1df5a:	2201      	movs	r2, #1
   1df5c:	701a      	strb	r2, [r3, #0]
}
   1df5e:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1df60:	2300      	movs	r3, #0
   1df62:	461a      	mov	r2, r3
   1df64:	4619      	mov	r1, r3
   1df66:	4618      	mov	r0, r3
   1df68:	f7fd fa2a 	bl	1b3c0 <__assert_func>
   1df6c:	2000da80 	.word	0x2000da80
   1df70:	2000da88 	.word	0x2000da88

0001df74 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1df74:	4b04      	ldr	r3, [pc, #16]	; (1df88 <is_sensor_node+0x14>)
   1df76:	e9d3 2300 	ldrd	r2, r3, [r3]
   1df7a:	4313      	orrs	r3, r2
   1df7c:	d101      	bne.n	1df82 <is_sensor_node+0xe>
    return false;
   1df7e:	2000      	movs	r0, #0
}
   1df80:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1df82:	2001      	movs	r0, #1
   1df84:	4770      	bx	lr
   1df86:	bf00      	nop
   1df88:	2000daa0 	.word	0x2000daa0

0001df8c <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1df8c:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1df8e:	4b16      	ldr	r3, [pc, #88]	; (1dfe8 <get_hardware_id+0x5c>)
   1df90:	681b      	ldr	r3, [r3, #0]
   1df92:	b10b      	cbz	r3, 1df98 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1df94:	4815      	ldr	r0, [pc, #84]	; (1dfec <get_hardware_id+0x60>)
   1df96:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1df98:	f000 fcee 	bl	1e978 <hal_bsp_hw_id_len>
   1df9c:	4b12      	ldr	r3, [pc, #72]	; (1dfe8 <get_hardware_id+0x5c>)
   1df9e:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1dfa0:	280b      	cmp	r0, #11
   1dfa2:	d914      	bls.n	1dfce <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1dfa4:	210c      	movs	r1, #12
   1dfa6:	4811      	ldr	r0, [pc, #68]	; (1dfec <get_hardware_id+0x60>)
   1dfa8:	f000 fce8 	bl	1e97c <hal_bsp_hw_id>
   1dfac:	4b0e      	ldr	r3, [pc, #56]	; (1dfe8 <get_hardware_id+0x5c>)
   1dfae:	6018      	str	r0, [r3, #0]
   1dfb0:	2800      	cmp	r0, #0
   1dfb2:	dd12      	ble.n	1dfda <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1dfb4:	490e      	ldr	r1, [pc, #56]	; (1dff0 <get_hardware_id+0x64>)
   1dfb6:	480f      	ldr	r0, [pc, #60]	; (1dff4 <get_hardware_id+0x68>)
   1dfb8:	f7fc fb3a 	bl	1a630 <console_printf>
   1dfbc:	4b0a      	ldr	r3, [pc, #40]	; (1dfe8 <get_hardware_id+0x5c>)
   1dfbe:	6819      	ldr	r1, [r3, #0]
   1dfc0:	480a      	ldr	r0, [pc, #40]	; (1dfec <get_hardware_id+0x60>)
   1dfc2:	f7fc fac5 	bl	1a550 <console_dump>
   1dfc6:	480c      	ldr	r0, [pc, #48]	; (1dff8 <get_hardware_id+0x6c>)
   1dfc8:	f7fc fb32 	bl	1a630 <console_printf>
   1dfcc:	e7e2      	b.n	1df94 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1dfce:	2300      	movs	r3, #0
   1dfd0:	461a      	mov	r2, r3
   1dfd2:	4619      	mov	r1, r3
   1dfd4:	4618      	mov	r0, r3
   1dfd6:	f7fd f9f3 	bl	1b3c0 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1dfda:	2300      	movs	r3, #0
   1dfdc:	461a      	mov	r2, r3
   1dfde:	4619      	mov	r1, r3
   1dfe0:	4618      	mov	r0, r3
   1dfe2:	f7fd f9ed 	bl	1b3c0 <__assert_func>
   1dfe6:	bf00      	nop
   1dfe8:	2000da98 	.word	0x2000da98
   1dfec:	2000da8c 	.word	0x2000da8c
   1dff0:	000292d8 	.word	0x000292d8
   1dff4:	00029290 	.word	0x00029290
   1dff8:	000293f0 	.word	0x000293f0

0001dffc <is_collector_node>:
bool is_collector_node(void) {
   1dffc:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1dffe:	f7ff ffc5 	bl	1df8c <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1e002:	220c      	movs	r2, #12
   1e004:	4903      	ldr	r1, [pc, #12]	; (1e014 <is_collector_node+0x18>)
   1e006:	f7fe fdad 	bl	1cb64 <memcmp>
   1e00a:	b108      	cbz	r0, 1e010 <is_collector_node+0x14>
    return false; 
   1e00c:	2000      	movs	r0, #0
}
   1e00e:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1e010:	2001      	movs	r0, #1
   1e012:	e7fc      	b.n	1e00e <is_collector_node+0x12>
   1e014:	00029248 	.word	0x00029248

0001e018 <is_standalone_node>:
bool is_standalone_node(void) {
   1e018:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1e01a:	f7ff ffef 	bl	1dffc <is_collector_node>
   1e01e:	b928      	cbnz	r0, 1e02c <is_standalone_node+0x14>
   1e020:	4604      	mov	r4, r0
   1e022:	f7ff ffa7 	bl	1df74 <is_sensor_node>
   1e026:	b910      	cbnz	r0, 1e02e <is_standalone_node+0x16>
   1e028:	2401      	movs	r4, #1
   1e02a:	e000      	b.n	1e02e <is_standalone_node+0x16>
    return false;
   1e02c:	2400      	movs	r4, #0
}
   1e02e:	4620      	mov	r0, r4
   1e030:	bd10      	pop	{r4, pc}
	...

0001e034 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1e034:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1e036:	2400      	movs	r4, #0
   1e038:	2c04      	cmp	r4, #4
   1e03a:	dc15      	bgt.n	1e068 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1e03c:	4b23      	ldr	r3, [pc, #140]	; (1e0cc <sensor_network_init+0x98>)
   1e03e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1e042:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e046:	4922      	ldr	r1, [pc, #136]	; (1e0d0 <sensor_network_init+0x9c>)
   1e048:	4822      	ldr	r0, [pc, #136]	; (1e0d4 <sensor_network_init+0xa0>)
   1e04a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1e04e:	f000 fcaf 	bl	1e9b0 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1e052:	3001      	adds	r0, #1
   1e054:	280b      	cmp	r0, #11
   1e056:	dc01      	bgt.n	1e05c <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1e058:	3401      	adds	r4, #1
   1e05a:	e7ed      	b.n	1e038 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1e05c:	2300      	movs	r3, #0
   1e05e:	461a      	mov	r2, r3
   1e060:	4619      	mov	r1, r3
   1e062:	4618      	mov	r0, r3
   1e064:	f7fd f9ac 	bl	1b3c0 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1e068:	f7ff ff90 	bl	1df8c <get_hardware_id>
   1e06c:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1e06e:	2400      	movs	r4, #0
   1e070:	2c04      	cmp	r4, #4
   1e072:	dc19      	bgt.n	1e0a8 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1e074:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1e078:	0093      	lsls	r3, r2, #2
   1e07a:	220c      	movs	r2, #12
   1e07c:	4916      	ldr	r1, [pc, #88]	; (1e0d8 <sensor_network_init+0xa4>)
   1e07e:	4419      	add	r1, r3
   1e080:	4628      	mov	r0, r5
   1e082:	f7fe fd6f 	bl	1cb64 <memcmp>
   1e086:	b108      	cbz	r0, 1e08c <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1e088:	3401      	adds	r4, #1
   1e08a:	e7f1      	b.n	1e070 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1e08c:	4b0f      	ldr	r3, [pc, #60]	; (1e0cc <sensor_network_init+0x98>)
   1e08e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1e092:	e9d3 0100 	ldrd	r0, r1, [r3]
   1e096:	4b11      	ldr	r3, [pc, #68]	; (1e0dc <sensor_network_init+0xa8>)
   1e098:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1e09c:	1c63      	adds	r3, r4, #1
   1e09e:	4a10      	ldr	r2, [pc, #64]	; (1e0e0 <sensor_network_init+0xac>)
   1e0a0:	4910      	ldr	r1, [pc, #64]	; (1e0e4 <sensor_network_init+0xb0>)
   1e0a2:	4811      	ldr	r0, [pc, #68]	; (1e0e8 <sensor_network_init+0xb4>)
   1e0a4:	f7fc fac4 	bl	1a630 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1e0a8:	f7ff ffa8 	bl	1dffc <is_collector_node>
   1e0ac:	b940      	cbnz	r0, 1e0c0 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1e0ae:	f7ff ffb3 	bl	1e018 <is_standalone_node>
   1e0b2:	b150      	cbz	r0, 1e0ca <sensor_network_init+0x96>
   1e0b4:	4a0a      	ldr	r2, [pc, #40]	; (1e0e0 <sensor_network_init+0xac>)
   1e0b6:	490b      	ldr	r1, [pc, #44]	; (1e0e4 <sensor_network_init+0xb0>)
   1e0b8:	480c      	ldr	r0, [pc, #48]	; (1e0ec <sensor_network_init+0xb8>)
   1e0ba:	f7fc fab9 	bl	1a630 <console_printf>
}
   1e0be:	e004      	b.n	1e0ca <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1e0c0:	4a07      	ldr	r2, [pc, #28]	; (1e0e0 <sensor_network_init+0xac>)
   1e0c2:	4908      	ldr	r1, [pc, #32]	; (1e0e4 <sensor_network_init+0xb0>)
   1e0c4:	480a      	ldr	r0, [pc, #40]	; (1e0f0 <sensor_network_init+0xbc>)
   1e0c6:	f7fc fab3 	bl	1a630 <console_printf>
}
   1e0ca:	bd38      	pop	{r3, r4, r5, pc}
   1e0cc:	000292f0 	.word	0x000292f0
   1e0d0:	00029298 	.word	0x00029298
   1e0d4:	20000130 	.word	0x20000130
   1e0d8:	00029254 	.word	0x00029254
   1e0dc:	2000daa0 	.word	0x2000daa0
   1e0e0:	000292a0 	.word	0x000292a0
   1e0e4:	000292d8 	.word	0x000292d8
   1e0e8:	000292a8 	.word	0x000292a8
   1e0ec:	000292c8 	.word	0x000292c8
   1e0f0:	000292b8 	.word	0x000292b8

0001e0f4 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1e0f4:	b530      	push	{r4, r5, lr}
   1e0f6:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1e0f8:	2200      	movs	r2, #0
   1e0fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e0fe:	4810      	ldr	r0, [pc, #64]	; (1e140 <config_device+0x4c>)
   1e100:	f7fd fc2c 	bl	1b95c <os_dev_open>
    assert(dev != NULL);
   1e104:	b178      	cbz	r0, 1e126 <config_device+0x32>
   1e106:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1e108:	4668      	mov	r0, sp
   1e10a:	f000 f86c 	bl	1e1e6 <temp_stub_default_cfg>
    assert(rc == 0);
   1e10e:	b980      	cbnz	r0, 1e132 <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1e110:	4669      	mov	r1, sp
   1e112:	4620      	mov	r0, r4
   1e114:	f000 f900 	bl	1e318 <temp_stub_config>
   1e118:	4605      	mov	r5, r0
    os_dev_close(dev);
   1e11a:	4620      	mov	r0, r4
   1e11c:	f7fd fc40 	bl	1b9a0 <os_dev_close>
    return rc;
}
   1e120:	4628      	mov	r0, r5
   1e122:	b003      	add	sp, #12
   1e124:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1e126:	2300      	movs	r3, #0
   1e128:	461a      	mov	r2, r3
   1e12a:	4619      	mov	r1, r3
   1e12c:	4618      	mov	r0, r3
   1e12e:	f7fd f947 	bl	1b3c0 <__assert_func>
    assert(rc == 0);
   1e132:	2300      	movs	r3, #0
   1e134:	461a      	mov	r2, r3
   1e136:	4619      	mov	r1, r3
   1e138:	4618      	mov	r0, r3
   1e13a:	f7fd f941 	bl	1b3c0 <__assert_func>
   1e13e:	bf00      	nop
   1e140:	00029318 	.word	0x00029318

0001e144 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1e144:	b510      	push	{r4, lr}
   1e146:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1e148:	4c10      	ldr	r4, [pc, #64]	; (1e18c <temp_stub_create+0x48>)
   1e14a:	4621      	mov	r1, r4
   1e14c:	4810      	ldr	r0, [pc, #64]	; (1e190 <temp_stub_create+0x4c>)
   1e14e:	f7fc fa6f 	bl	1a630 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1e152:	4b10      	ldr	r3, [pc, #64]	; (1e194 <temp_stub_create+0x50>)
   1e154:	9301      	str	r3, [sp, #4]
   1e156:	4b10      	ldr	r3, [pc, #64]	; (1e198 <temp_stub_create+0x54>)
   1e158:	9300      	str	r3, [sp, #0]
   1e15a:	2300      	movs	r3, #0
   1e15c:	2201      	movs	r2, #1
   1e15e:	4621      	mov	r1, r4
   1e160:	480e      	ldr	r0, [pc, #56]	; (1e19c <temp_stub_create+0x58>)
   1e162:	f7fd fbb5 	bl	1b8d0 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1e166:	b920      	cbnz	r0, 1e172 <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1e168:	f7ff ffc4 	bl	1e0f4 <config_device>
    assert(rc == 0);
   1e16c:	b938      	cbnz	r0, 1e17e <temp_stub_create+0x3a>
}
   1e16e:	b002      	add	sp, #8
   1e170:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1e172:	2300      	movs	r3, #0
   1e174:	461a      	mov	r2, r3
   1e176:	4619      	mov	r1, r3
   1e178:	4618      	mov	r0, r3
   1e17a:	f7fd f921 	bl	1b3c0 <__assert_func>
    assert(rc == 0);
   1e17e:	2300      	movs	r3, #0
   1e180:	461a      	mov	r2, r3
   1e182:	4619      	mov	r1, r3
   1e184:	4618      	mov	r0, r3
   1e186:	f7fd f91b 	bl	1b3c0 <__assert_func>
   1e18a:	bf00      	nop
   1e18c:	00029318 	.word	0x00029318
   1e190:	00029324 	.word	0x00029324
   1e194:	2000dae0 	.word	0x2000dae0
   1e198:	0001e1f5 	.word	0x0001e1f5
   1e19c:	2000daf8 	.word	0x2000daf8

0001e1a0 <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1e1a0:	2000      	movs	r0, #0
   1e1a2:	4770      	bx	lr

0001e1a4 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1e1a4:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1e1a8:	2100      	movs	r1, #0
   1e1aa:	ea50 0301 	orrs.w	r3, r0, r1
   1e1ae:	d004      	beq.n	1e1ba <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1e1b0:	9b00      	ldr	r3, [sp, #0]
   1e1b2:	2201      	movs	r2, #1
   1e1b4:	701a      	strb	r2, [r3, #0]
    return (0);
   1e1b6:	2000      	movs	r0, #0
   1e1b8:	4770      	bx	lr
err:
    return (rc);
   1e1ba:	f06f 0001 	mvn.w	r0, #1
}
   1e1be:	4770      	bx	lr

0001e1c0 <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1e1c0:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1e1c2:	b120      	cbz	r0, 1e1ce <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1e1c4:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1e1c8:	d007      	beq.n	1e1da <temp_stub_open+0x1a>
}
   1e1ca:	2000      	movs	r0, #0
   1e1cc:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1e1ce:	2300      	movs	r3, #0
   1e1d0:	461a      	mov	r2, r3
   1e1d2:	4619      	mov	r1, r3
   1e1d4:	4618      	mov	r0, r3
   1e1d6:	f7fd f8f3 	bl	1b3c0 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1e1da:	2300      	movs	r3, #0
   1e1dc:	461a      	mov	r2, r3
   1e1de:	4619      	mov	r1, r3
   1e1e0:	4618      	mov	r0, r3
   1e1e2:	f7fd f8ed 	bl	1b3c0 <__assert_func>

0001e1e6 <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1e1e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e1ea:	2300      	movs	r3, #0
   1e1ec:	e9c0 2300 	strd	r2, r3, [r0]
}
   1e1f0:	2000      	movs	r0, #0
   1e1f2:	4770      	bx	lr

0001e1f4 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1e1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1e1f6:	b379      	cbz	r1, 1e258 <temp_stub_init+0x64>
   1e1f8:	460d      	mov	r5, r1
   1e1fa:	b380      	cbz	r0, 1e25e <temp_stub_init+0x6a>
   1e1fc:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1e1fe:	30b0      	adds	r0, #176	; 0xb0
   1e200:	f7ff fff1 	bl	1e1e6 <temp_stub_default_cfg>
    if (rc) { goto err; }
   1e204:	4603      	mov	r3, r0
   1e206:	b108      	cbz	r0, 1e20c <temp_stub_init+0x18>
}
   1e208:	4618      	mov	r0, r3
   1e20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1e20c:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1e210:	4621      	mov	r1, r4
   1e212:	4630      	mov	r0, r6
   1e214:	f7ff fddd 	bl	1ddd2 <sensor_init>
    if (rc != 0) { goto err; }
   1e218:	4603      	mov	r3, r0
   1e21a:	2800      	cmp	r0, #0
   1e21c:	d1f4      	bne.n	1e208 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1e21e:	4b11      	ldr	r3, [pc, #68]	; (1e264 <temp_stub_init+0x70>)
   1e220:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1e222:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1e226:	2300      	movs	r3, #0
   1e228:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1e22c:	682a      	ldr	r2, [r5, #0]
   1e22e:	686f      	ldr	r7, [r5, #4]
   1e230:	68a8      	ldr	r0, [r5, #8]
   1e232:	68e9      	ldr	r1, [r5, #12]
   1e234:	6722      	str	r2, [r4, #112]	; 0x70
   1e236:	6767      	str	r7, [r4, #116]	; 0x74
   1e238:	67a0      	str	r0, [r4, #120]	; 0x78
   1e23a:	67e1      	str	r1, [r4, #124]	; 0x7c
   1e23c:	692a      	ldr	r2, [r5, #16]
   1e23e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1e242:	4630      	mov	r0, r6
   1e244:	f7ff fdae 	bl	1dda4 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1e248:	4603      	mov	r3, r0
   1e24a:	2800      	cmp	r0, #0
   1e24c:	d1dc      	bne.n	1e208 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1e24e:	4a06      	ldr	r2, [pc, #24]	; (1e268 <temp_stub_init+0x74>)
   1e250:	6022      	str	r2, [r4, #0]
   1e252:	4a06      	ldr	r2, [pc, #24]	; (1e26c <temp_stub_init+0x78>)
   1e254:	60e2      	str	r2, [r4, #12]
    return (0);
   1e256:	e7d7      	b.n	1e208 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1e258:	f06f 0308 	mvn.w	r3, #8
   1e25c:	e7d4      	b.n	1e208 <temp_stub_init+0x14>
   1e25e:	f06f 0308 	mvn.w	r3, #8
   1e262:	e7d1      	b.n	1e208 <temp_stub_init+0x14>
   1e264:	00029334 	.word	0x00029334
   1e268:	0001e1c1 	.word	0x0001e1c1
   1e26c:	0001e1a1 	.word	0x0001e1a1

0001e270 <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1e270:	b538      	push	{r3, r4, r5, lr}
   1e272:	460d      	mov	r5, r1
   1e274:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1e276:	4808      	ldr	r0, [pc, #32]	; (1e298 <temp_stub_get_raw_temperature+0x28>)
   1e278:	f7fc f9da 	bl	1a630 <console_printf>
    assert(temp_sum);
   1e27c:	b134      	cbz	r4, 1e28c <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1e27e:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1e282:	fb01 f105 	mul.w	r1, r1, r5
   1e286:	6021      	str	r1, [r4, #0]
}
   1e288:	2000      	movs	r0, #0
   1e28a:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1e28c:	2300      	movs	r3, #0
   1e28e:	461a      	mov	r2, r3
   1e290:	4619      	mov	r1, r3
   1e292:	4618      	mov	r0, r3
   1e294:	f7fd f894 	bl	1b3c0 <__assert_func>
   1e298:	0002935c 	.word	0x0002935c

0001e29c <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1e29c:	b530      	push	{r4, r5, lr}
   1e29e:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1e2a0:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1e2a4:	2500      	movs	r5, #0
   1e2a6:	ea54 0305 	orrs.w	r3, r4, r5
   1e2aa:	d032      	beq.n	1e312 <temp_stub_sensor_read+0x76>
   1e2ac:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1e2ae:	6805      	ldr	r5, [r0, #0]
   1e2b0:	b165      	cbz	r5, 1e2cc <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1e2b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e2b6:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1e2b8:	2200      	movs	r2, #0
   1e2ba:	4611      	mov	r1, r2
   1e2bc:	4628      	mov	r0, r5
   1e2be:	f7ff ff7f 	bl	1e1c0 <temp_stub_open>
        if (rc) { goto err; }
   1e2c2:	4603      	mov	r3, r0
   1e2c4:	b140      	cbz	r0, 1e2d8 <temp_stub_sensor_read+0x3c>
}
   1e2c6:	4618      	mov	r0, r3
   1e2c8:	b007      	add	sp, #28
   1e2ca:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1e2cc:	2300      	movs	r3, #0
   1e2ce:	461a      	mov	r2, r3
   1e2d0:	4619      	mov	r1, r3
   1e2d2:	4618      	mov	r0, r3
   1e2d4:	f7fd f874 	bl	1b3c0 <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1e2d8:	2300      	movs	r3, #0
   1e2da:	aa03      	add	r2, sp, #12
   1e2dc:	2101      	movs	r1, #1
   1e2de:	4628      	mov	r0, r5
   1e2e0:	f7ff ffc6 	bl	1e270 <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1e2e4:	4603      	mov	r3, r0
   1e2e6:	2800      	cmp	r0, #0
   1e2e8:	d1ed      	bne.n	1e2c6 <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1e2ea:	9a03      	ldr	r2, [sp, #12]
   1e2ec:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1e2ee:	2201      	movs	r2, #1
   1e2f0:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1e2f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e2f6:	2a00      	cmp	r2, #0
   1e2f8:	d0e5      	beq.n	1e2c6 <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1e2fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1e2fe:	2300      	movs	r3, #0
   1e300:	e9cd 2300 	strd	r2, r3, [sp]
   1e304:	aa04      	add	r2, sp, #16
   1e306:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1e308:	4620      	mov	r0, r4
   1e30a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e30c:	4798      	blx	r3
   1e30e:	4603      	mov	r3, r0
   1e310:	e7d9      	b.n	1e2c6 <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1e312:	f06f 0301 	mvn.w	r3, #1
   1e316:	e7d6      	b.n	1e2c6 <temp_stub_sensor_read+0x2a>

0001e318 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1e318:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1e31a:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1e31e:	d009      	beq.n	1e334 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1e320:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1e324:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1e328:	e9d1 2300 	ldrd	r2, r3, [r1]
   1e32c:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1e330:	2000      	movs	r0, #0
   1e332:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1e334:	2300      	movs	r3, #0
   1e336:	461a      	mov	r2, r3
   1e338:	4619      	mov	r1, r3
   1e33a:	4618      	mov	r0, r3
   1e33c:	f7fd f840 	bl	1b3c0 <__assert_func>

0001e340 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1e340:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1e342:	e002      	b.n	1e34a <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1e344:	4618      	mov	r0, r3
   1e346:	f000 f85b 	bl	1e400 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1e34a:	4808      	ldr	r0, [pc, #32]	; (1e36c <oc_buffer_tx+0x2c>)
   1e34c:	f7fd fc03 	bl	1bb56 <os_mqueue_get>
   1e350:	4603      	mov	r3, r0
   1e352:	b148      	cbz	r0, 1e368 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1e354:	2200      	movs	r2, #0
   1e356:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1e358:	7e1a      	ldrb	r2, [r3, #24]
   1e35a:	f012 0f08 	tst.w	r2, #8
   1e35e:	d0f1      	beq.n	1e344 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1e360:	4618      	mov	r0, r3
   1e362:	f000 f85d 	bl	1e420 <oc_send_multicast_message>
   1e366:	e7f0      	b.n	1e34a <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1e368:	bd08      	pop	{r3, pc}
   1e36a:	bf00      	nop
   1e36c:	2000dbd0 	.word	0x2000dbd0

0001e370 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1e370:	b500      	push	{lr}
   1e372:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1e374:	4808      	ldr	r0, [pc, #32]	; (1e398 <oc_buffer_rx+0x28>)
   1e376:	f7fd fbee 	bl	1bb56 <os_mqueue_get>
   1e37a:	9001      	str	r0, [sp, #4]
   1e37c:	b140      	cbz	r0, 1e390 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1e37e:	a801      	add	r0, sp, #4
   1e380:	f000 faa2 	bl	1e8c8 <__wrap_coap_receive>
#endif
        if (m) {
   1e384:	9801      	ldr	r0, [sp, #4]
   1e386:	2800      	cmp	r0, #0
   1e388:	d0f4      	beq.n	1e374 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1e38a:	f7fd fc59 	bl	1bc40 <os_mbuf_free_chain>
   1e38e:	e7f1      	b.n	1e374 <oc_buffer_rx+0x4>
        }
    }
}
   1e390:	b003      	add	sp, #12
   1e392:	f85d fb04 	ldr.w	pc, [sp], #4
   1e396:	bf00      	nop
   1e398:	2000dbb8 	.word	0x2000dbb8

0001e39c <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1e39c:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1e39e:	2200      	movs	r2, #0
   1e3a0:	4904      	ldr	r1, [pc, #16]	; (1e3b4 <oc_buffer_init+0x18>)
   1e3a2:	4805      	ldr	r0, [pc, #20]	; (1e3b8 <oc_buffer_init+0x1c>)
   1e3a4:	f7fd fbce 	bl	1bb44 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1e3a8:	2200      	movs	r2, #0
   1e3aa:	4904      	ldr	r1, [pc, #16]	; (1e3bc <oc_buffer_init+0x20>)
   1e3ac:	4804      	ldr	r0, [pc, #16]	; (1e3c0 <oc_buffer_init+0x24>)
   1e3ae:	f7fd fbc9 	bl	1bb44 <os_mqueue_init>
}
   1e3b2:	bd08      	pop	{r3, pc}
   1e3b4:	0001e371 	.word	0x0001e371
   1e3b8:	2000dbb8 	.word	0x2000dbb8
   1e3bc:	0001e341 	.word	0x0001e341
   1e3c0:	2000dbd0 	.word	0x2000dbd0

0001e3c4 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1e3c4:	b500      	push	{lr}
   1e3c6:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1e3c8:	4b07      	ldr	r3, [pc, #28]	; (1e3e8 <oc_ri_mem_init+0x24>)
   1e3ca:	9300      	str	r3, [sp, #0]
   1e3cc:	4b07      	ldr	r3, [pc, #28]	; (1e3ec <oc_ri_mem_init+0x28>)
   1e3ce:	2264      	movs	r2, #100	; 0x64
   1e3d0:	2102      	movs	r1, #2
   1e3d2:	4807      	ldr	r0, [pc, #28]	; (1e3f0 <oc_ri_mem_init+0x2c>)
   1e3d4:	f7fd fd3c 	bl	1be50 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1e3d8:	f000 f860 	bl	1e49c <oc_rep_init>
#endif
    oc_buffer_init();
   1e3dc:	f7ff ffde 	bl	1e39c <oc_buffer_init>
}
   1e3e0:	b003      	add	sp, #12
   1e3e2:	f85d fb04 	ldr.w	pc, [sp], #4
   1e3e6:	bf00      	nop
   1e3e8:	00029374 	.word	0x00029374
   1e3ec:	2000dbe8 	.word	0x2000dbe8
   1e3f0:	2000dcb0 	.word	0x2000dcb0

0001e3f4 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1e3f4:	4b01      	ldr	r3, [pc, #4]	; (1e3fc <oc_evq_set+0x8>)
   1e3f6:	6018      	str	r0, [r3, #0]
}
   1e3f8:	4770      	bx	lr
   1e3fa:	bf00      	nop
   1e3fc:	2000dccc 	.word	0x2000dccc

0001e400 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1e400:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1e402:	7e03      	ldrb	r3, [r0, #24]
   1e404:	f003 0307 	and.w	r3, r3, #7
   1e408:	4a04      	ldr	r2, [pc, #16]	; (1e41c <oc_send_buffer+0x1c>)
   1e40a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1e40e:	b113      	cbz	r3, 1e416 <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1e410:	68db      	ldr	r3, [r3, #12]
   1e412:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1e414:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1e416:	f7fd fc13 	bl	1bc40 <os_mbuf_free_chain>
}
   1e41a:	e7fb      	b.n	1e414 <oc_send_buffer+0x14>
   1e41c:	2000df60 	.word	0x2000df60

0001e420 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1e420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e424:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1e426:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1e428:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1e42a:	e002      	b.n	1e432 <oc_send_multicast_message+0x12>
   1e42c:	4635      	mov	r5, r6
   1e42e:	3401      	adds	r4, #1
   1e430:	462e      	mov	r6, r5
   1e432:	2c07      	cmp	r4, #7
   1e434:	dc12      	bgt.n	1e45c <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1e436:	4b0c      	ldr	r3, [pc, #48]	; (1e468 <oc_send_multicast_message+0x48>)
   1e438:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1e43c:	2d00      	cmp	r5, #0
   1e43e:	d0f5      	beq.n	1e42c <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1e440:	2e00      	cmp	r6, #0
   1e442:	d0f4      	beq.n	1e42e <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1e444:	4638      	mov	r0, r7
   1e446:	f7fd fc6b 	bl	1bd20 <os_mbuf_dup>
   1e44a:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1e44c:	6933      	ldr	r3, [r6, #16]
   1e44e:	4638      	mov	r0, r7
   1e450:	4798      	blx	r3
            if (!n) {
   1e452:	f1b8 0f00 	cmp.w	r8, #0
   1e456:	d005      	beq.n	1e464 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1e458:	4647      	mov	r7, r8
   1e45a:	e7e8      	b.n	1e42e <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1e45c:	b116      	cbz	r6, 1e464 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1e45e:	6933      	ldr	r3, [r6, #16]
   1e460:	4638      	mov	r0, r7
   1e462:	4798      	blx	r3
    }
}
   1e464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e468:	2000df60 	.word	0x2000df60

0001e46c <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1e46c:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1e46e:	4b07      	ldr	r3, [pc, #28]	; (1e48c <oc_init+0x20>)
   1e470:	781b      	ldrb	r3, [r3, #0]
   1e472:	b133      	cbz	r3, 1e482 <oc_init+0x16>
    oc_ri_mem_init();
   1e474:	f7ff ffa6 	bl	1e3c4 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1e478:	f7fd fb60 	bl	1bb3c <os_eventq_dflt_get>
   1e47c:	f7ff ffba 	bl	1e3f4 <oc_evq_set>
}
   1e480:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1e482:	461a      	mov	r2, r3
   1e484:	4619      	mov	r1, r3
   1e486:	4618      	mov	r0, r3
   1e488:	f7fc ff9a 	bl	1b3c0 <__assert_func>
   1e48c:	2000ddbc 	.word	0x2000ddbc

0001e490 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1e490:	4770      	bx	lr

0001e492 <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1e492:	4770      	bx	lr

0001e494 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1e494:	4770      	bx	lr

0001e496 <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1e496:	4770      	bx	lr

0001e498 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1e498:	4770      	bx	lr
	...

0001e49c <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1e49c:	b500      	push	{lr}
   1e49e:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1e4a0:	4b05      	ldr	r3, [pc, #20]	; (1e4b8 <oc_rep_init+0x1c>)
   1e4a2:	9300      	str	r3, [sp, #0]
   1e4a4:	4b05      	ldr	r3, [pc, #20]	; (1e4bc <oc_rep_init+0x20>)
   1e4a6:	2218      	movs	r2, #24
   1e4a8:	2102      	movs	r1, #2
   1e4aa:	4805      	ldr	r0, [pc, #20]	; (1e4c0 <oc_rep_init+0x24>)
   1e4ac:	f7fd fcd0 	bl	1be50 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1e4b0:	b003      	add	sp, #12
   1e4b2:	f85d fb04 	ldr.w	pc, [sp], #4
   1e4b6:	bf00      	nop
   1e4b8:	00029380 	.word	0x00029380
   1e4bc:	2000dcec 	.word	0x2000dcec
   1e4c0:	2000dcd0 	.word	0x2000dcd0

0001e4c4 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1e4c4:	b570      	push	{r4, r5, r6, lr}
   1e4c6:	b086      	sub	sp, #24
   1e4c8:	4605      	mov	r5, r0
   1e4ca:	460e      	mov	r6, r1
   1e4cc:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1e4ce:	2300      	movs	r3, #0
   1e4d0:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1e4d2:	f000 f9ad 	bl	1e830 <mfg_init>

    mfg_open(&reader);
   1e4d6:	a801      	add	r0, sp, #4
   1e4d8:	f000 f9c6 	bl	1e868 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1e4dc:	6823      	ldr	r3, [r4, #0]
   1e4de:	42ab      	cmp	r3, r5
   1e4e0:	da29      	bge.n	1e536 <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1e4e2:	2102      	movs	r1, #2
   1e4e4:	a801      	add	r0, sp, #4
   1e4e6:	f000 f98c 	bl	1e802 <mfg_seek_next_with_type>
   1e4ea:	4603      	mov	r3, r0
        switch (rc) {
   1e4ec:	f110 0f0f 	cmn.w	r0, #15
   1e4f0:	d003      	beq.n	1e4fa <flash_map_read_mfg+0x36>
   1e4f2:	b120      	cbz	r0, 1e4fe <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1e4f4:	4618      	mov	r0, r3
   1e4f6:	b006      	add	sp, #24
   1e4f8:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1e4fa:	2300      	movs	r3, #0
   1e4fc:	e7fa      	b.n	1e4f4 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1e4fe:	a903      	add	r1, sp, #12
   1e500:	a801      	add	r0, sp, #4
   1e502:	f000 f98b 	bl	1e81c <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1e506:	4603      	mov	r3, r0
   1e508:	2800      	cmp	r0, #0
   1e50a:	d1f3      	bne.n	1e4f4 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1e50c:	6823      	ldr	r3, [r4, #0]
   1e50e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e512:	009a      	lsls	r2, r3, #2
   1e514:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1e516:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1e51a:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1e51c:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1e520:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1e522:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1e526:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1e528:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1e52c:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1e52e:	6823      	ldr	r3, [r4, #0]
   1e530:	3301      	adds	r3, #1
   1e532:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1e534:	e7d2      	b.n	1e4dc <flash_map_read_mfg+0x18>
            return -1;
   1e536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e53a:	e7db      	b.n	1e4f4 <flash_map_read_mfg+0x30>

0001e53c <flash_area_open>:
{
   1e53c:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1e53e:	4b0d      	ldr	r3, [pc, #52]	; (1e574 <flash_area_open+0x38>)
   1e540:	681d      	ldr	r5, [r3, #0]
   1e542:	b1a5      	cbz	r5, 1e56e <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1e544:	2300      	movs	r3, #0
   1e546:	4a0c      	ldr	r2, [pc, #48]	; (1e578 <flash_area_open+0x3c>)
   1e548:	6812      	ldr	r2, [r2, #0]
   1e54a:	429a      	cmp	r2, r3
   1e54c:	dd0b      	ble.n	1e566 <flash_area_open+0x2a>
        area = flash_map + i;
   1e54e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1e552:	00a2      	lsls	r2, r4, #2
   1e554:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1e556:	5caa      	ldrb	r2, [r5, r2]
   1e558:	4282      	cmp	r2, r0
   1e55a:	d001      	beq.n	1e560 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1e55c:	3301      	adds	r3, #1
   1e55e:	e7f2      	b.n	1e546 <flash_area_open+0xa>
            *fap = area;
   1e560:	600c      	str	r4, [r1, #0]
            return 0;
   1e562:	2000      	movs	r0, #0
   1e564:	e001      	b.n	1e56a <flash_area_open+0x2e>
    return SYS_ENOENT;
   1e566:	f06f 0003 	mvn.w	r0, #3
}
   1e56a:	bc30      	pop	{r4, r5}
   1e56c:	4770      	bx	lr
        return SYS_EACCES;
   1e56e:	f06f 0006 	mvn.w	r0, #6
   1e572:	e7fa      	b.n	1e56a <flash_area_open+0x2e>
   1e574:	2000df84 	.word	0x2000df84
   1e578:	2000df80 	.word	0x2000df80

0001e57c <flash_area_read>:
{
   1e57c:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1e57e:	6884      	ldr	r4, [r0, #8]
   1e580:	428c      	cmp	r4, r1
   1e582:	d308      	bcc.n	1e596 <flash_area_read+0x1a>
   1e584:	18cd      	adds	r5, r1, r3
   1e586:	42ac      	cmp	r4, r5
   1e588:	d308      	bcc.n	1e59c <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1e58a:	6844      	ldr	r4, [r0, #4]
   1e58c:	4421      	add	r1, r4
   1e58e:	7840      	ldrb	r0, [r0, #1]
   1e590:	f000 f9c8 	bl	1e924 <hal_flash_read>
}
   1e594:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1e596:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e59a:	e7fb      	b.n	1e594 <flash_area_read+0x18>
   1e59c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5a0:	e7f8      	b.n	1e594 <flash_area_read+0x18>
	...

0001e5a4 <flash_map_init>:

void
flash_map_init(void)
{
   1e5a4:	b510      	push	{r4, lr}
   1e5a6:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1e5a8:	4b14      	ldr	r3, [pc, #80]	; (1e5fc <flash_map_init+0x58>)
   1e5aa:	781b      	ldrb	r3, [r3, #0]
   1e5ac:	b303      	cbz	r3, 1e5f0 <flash_map_init+0x4c>

    rc = hal_flash_init();
   1e5ae:	f000 f9a5 	bl	1e8fc <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e5b2:	b138      	cbz	r0, 1e5c4 <flash_map_init+0x20>
   1e5b4:	2000      	movs	r0, #0
   1e5b6:	9000      	str	r0, [sp, #0]
   1e5b8:	4b11      	ldr	r3, [pc, #68]	; (1e600 <flash_map_init+0x5c>)
   1e5ba:	681c      	ldr	r4, [r3, #0]
   1e5bc:	4603      	mov	r3, r0
   1e5be:	4602      	mov	r2, r0
   1e5c0:	4601      	mov	r1, r0
   1e5c2:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1e5c4:	4b0f      	ldr	r3, [pc, #60]	; (1e604 <flash_map_init+0x60>)
   1e5c6:	4a10      	ldr	r2, [pc, #64]	; (1e608 <flash_map_init+0x64>)
   1e5c8:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1e5ca:	4b10      	ldr	r3, [pc, #64]	; (1e60c <flash_map_init+0x68>)
   1e5cc:	2206      	movs	r2, #6
   1e5ce:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1e5d0:	aa03      	add	r2, sp, #12
   1e5d2:	490f      	ldr	r1, [pc, #60]	; (1e610 <flash_map_init+0x6c>)
   1e5d4:	200a      	movs	r0, #10
   1e5d6:	f7ff ff75 	bl	1e4c4 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1e5da:	b938      	cbnz	r0, 1e5ec <flash_map_init+0x48>
   1e5dc:	9b03      	ldr	r3, [sp, #12]
   1e5de:	2b00      	cmp	r3, #0
   1e5e0:	dd04      	ble.n	1e5ec <flash_map_init+0x48>
        flash_map = mfg_areas;
   1e5e2:	4a08      	ldr	r2, [pc, #32]	; (1e604 <flash_map_init+0x60>)
   1e5e4:	490a      	ldr	r1, [pc, #40]	; (1e610 <flash_map_init+0x6c>)
   1e5e6:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1e5e8:	4a08      	ldr	r2, [pc, #32]	; (1e60c <flash_map_init+0x68>)
   1e5ea:	6013      	str	r3, [r2, #0]
    }
}
   1e5ec:	b004      	add	sp, #16
   1e5ee:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1e5f0:	461a      	mov	r2, r3
   1e5f2:	4619      	mov	r1, r3
   1e5f4:	4618      	mov	r0, r3
   1e5f6:	f7fc fee3 	bl	1b3c0 <__assert_func>
   1e5fa:	bf00      	nop
   1e5fc:	2000ddbc 	.word	0x2000ddbc
   1e600:	20000104 	.word	0x20000104
   1e604:	2000df84 	.word	0x2000df84
   1e608:	0002938c 	.word	0x0002938c
   1e60c:	2000df80 	.word	0x2000df80
   1e610:	2000dd1c 	.word	0x2000dd1c

0001e614 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1e614:	4770      	bx	lr
	...

0001e618 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1e618:	b530      	push	{r4, r5, lr}
   1e61a:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1e61c:	7885      	ldrb	r5, [r0, #2]
   1e61e:	4b21      	ldr	r3, [pc, #132]	; (1e6a4 <mfg_seek_next_aux+0x8c>)
   1e620:	681b      	ldr	r3, [r3, #0]
   1e622:	429d      	cmp	r5, r3
   1e624:	da32      	bge.n	1e68c <mfg_seek_next_aux+0x74>
   1e626:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1e628:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1e62c:	0093      	lsls	r3, r2, #2
   1e62e:	a901      	add	r1, sp, #4
   1e630:	4a1d      	ldr	r2, [pc, #116]	; (1e6a8 <mfg_seek_next_aux+0x90>)
   1e632:	5cd0      	ldrb	r0, [r2, r3]
   1e634:	f7ff ff82 	bl	1e53c <flash_area_open>
    if (rc != 0) {
   1e638:	bb58      	cbnz	r0, 1e692 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1e63a:	6862      	ldr	r2, [r4, #4]
   1e63c:	b9c2      	cbnz	r2, 1e670 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1e63e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1e642:	00aa      	lsls	r2, r5, #2
   1e644:	4b18      	ldr	r3, [pc, #96]	; (1e6a8 <mfg_seek_next_aux+0x90>)
   1e646:	4413      	add	r3, r2
   1e648:	685b      	ldr	r3, [r3, #4]
   1e64a:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1e64c:	6861      	ldr	r1, [r4, #4]
   1e64e:	9801      	ldr	r0, [sp, #4]
   1e650:	6883      	ldr	r3, [r0, #8]
   1e652:	3b08      	subs	r3, #8
   1e654:	4299      	cmp	r1, r3
   1e656:	d310      	bcc.n	1e67a <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1e658:	78a3      	ldrb	r3, [r4, #2]
   1e65a:	1c59      	adds	r1, r3, #1
   1e65c:	4a11      	ldr	r2, [pc, #68]	; (1e6a4 <mfg_seek_next_aux+0x8c>)
   1e65e:	6812      	ldr	r2, [r2, #0]
   1e660:	4291      	cmp	r1, r2
   1e662:	da19      	bge.n	1e698 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1e664:	2200      	movs	r2, #0
   1e666:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1e668:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1e66a:	f06f 0305 	mvn.w	r3, #5
   1e66e:	e015      	b.n	1e69c <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1e670:	7863      	ldrb	r3, [r4, #1]
   1e672:	4413      	add	r3, r2
   1e674:	3302      	adds	r3, #2
   1e676:	6063      	str	r3, [r4, #4]
   1e678:	e7e8      	b.n	1e64c <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1e67a:	2302      	movs	r3, #2
   1e67c:	4622      	mov	r2, r4
   1e67e:	f7ff ff7d 	bl	1e57c <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1e682:	4603      	mov	r3, r0
   1e684:	b150      	cbz	r0, 1e69c <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1e686:	f06f 0304 	mvn.w	r3, #4
   1e68a:	e007      	b.n	1e69c <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1e68c:	f06f 0301 	mvn.w	r3, #1
   1e690:	e004      	b.n	1e69c <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1e692:	f06f 0304 	mvn.w	r3, #4
   1e696:	e001      	b.n	1e69c <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1e698:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1e69c:	4618      	mov	r0, r3
   1e69e:	b003      	add	sp, #12
   1e6a0:	bd30      	pop	{r4, r5, pc}
   1e6a2:	bf00      	nop
   1e6a4:	2000ddb0 	.word	0x2000ddb0
   1e6a8:	2000dd98 	.word	0x2000dd98

0001e6ac <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1e6ac:	b530      	push	{r4, r5, lr}
   1e6ae:	b085      	sub	sp, #20
   1e6b0:	4605      	mov	r5, r0
   1e6b2:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1e6b4:	a903      	add	r1, sp, #12
   1e6b6:	f7ff ff41 	bl	1e53c <flash_area_open>
    if (rc != 0) {
   1e6ba:	b9e8      	cbnz	r0, 1e6f8 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1e6bc:	9803      	ldr	r0, [sp, #12]
   1e6be:	6881      	ldr	r1, [r0, #8]
   1e6c0:	2308      	movs	r3, #8
   1e6c2:	aa01      	add	r2, sp, #4
   1e6c4:	3908      	subs	r1, #8
   1e6c6:	f7ff ff59 	bl	1e57c <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1e6ca:	4601      	mov	r1, r0
   1e6cc:	b9b8      	cbnz	r0, 1e6fe <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1e6ce:	9a02      	ldr	r2, [sp, #8]
   1e6d0:	4b11      	ldr	r3, [pc, #68]	; (1e718 <mfg_read_mmr+0x6c>)
   1e6d2:	429a      	cmp	r2, r3
   1e6d4:	d116      	bne.n	1e704 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1e6d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1e6da:	2b02      	cmp	r3, #2
   1e6dc:	d115      	bne.n	1e70a <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1e6de:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1e6e2:	9b03      	ldr	r3, [sp, #12]
   1e6e4:	689b      	ldr	r3, [r3, #8]
   1e6e6:	429a      	cmp	r2, r3
   1e6e8:	d812      	bhi.n	1e710 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1e6ea:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1e6ec:	7025      	strb	r5, [r4, #0]
   1e6ee:	6063      	str	r3, [r4, #4]
   1e6f0:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1e6f2:	4608      	mov	r0, r1
   1e6f4:	b005      	add	sp, #20
   1e6f6:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1e6f8:	f06f 0104 	mvn.w	r1, #4
   1e6fc:	e7f9      	b.n	1e6f2 <mfg_read_mmr+0x46>
        return SYS_EIO;
   1e6fe:	f06f 0104 	mvn.w	r1, #4
   1e702:	e7f6      	b.n	1e6f2 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1e704:	f06f 0108 	mvn.w	r1, #8
   1e708:	e7f3      	b.n	1e6f2 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1e70a:	f06f 010b 	mvn.w	r1, #11
   1e70e:	e7f0      	b.n	1e6f2 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1e710:	f06f 0108 	mvn.w	r1, #8
   1e714:	e7ed      	b.n	1e6f2 <mfg_read_mmr+0x46>
   1e716:	bf00      	nop
   1e718:	3bb2a269 	.word	0x3bb2a269

0001e71c <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1e71c:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1e71e:	2300      	movs	r3, #0
   1e720:	4a11      	ldr	r2, [pc, #68]	; (1e768 <mfg_read_next_mmr+0x4c>)
   1e722:	6812      	ldr	r2, [r2, #0]
   1e724:	429a      	cmp	r2, r3
   1e726:	dd08      	ble.n	1e73a <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1e728:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1e72c:	008a      	lsls	r2, r1, #2
   1e72e:	490f      	ldr	r1, [pc, #60]	; (1e76c <mfg_read_next_mmr+0x50>)
   1e730:	5c8a      	ldrb	r2, [r1, r2]
   1e732:	4282      	cmp	r2, r0
   1e734:	d011      	beq.n	1e75a <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1e736:	3301      	adds	r3, #1
   1e738:	e7f2      	b.n	1e720 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1e73a:	2a01      	cmp	r2, #1
   1e73c:	dc11      	bgt.n	1e762 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1e73e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1e742:	0093      	lsls	r3, r2, #2
   1e744:	4909      	ldr	r1, [pc, #36]	; (1e76c <mfg_read_next_mmr+0x50>)
   1e746:	4419      	add	r1, r3
   1e748:	f7ff ffb0 	bl	1e6ac <mfg_read_mmr>
    if (rc != 0) {
   1e74c:	4603      	mov	r3, r0
   1e74e:	b930      	cbnz	r0, 1e75e <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1e750:	4905      	ldr	r1, [pc, #20]	; (1e768 <mfg_read_next_mmr+0x4c>)
   1e752:	680a      	ldr	r2, [r1, #0]
   1e754:	3201      	adds	r2, #1
   1e756:	600a      	str	r2, [r1, #0]
    return 0;
   1e758:	e001      	b.n	1e75e <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1e75a:	f06f 030a 	mvn.w	r3, #10
}
   1e75e:	4618      	mov	r0, r3
   1e760:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1e762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e766:	e7fa      	b.n	1e75e <mfg_read_next_mmr+0x42>
   1e768:	2000ddb0 	.word	0x2000ddb0
   1e76c:	2000dd98 	.word	0x2000dd98

0001e770 <mfg_open_flash_area>:
{
   1e770:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1e772:	7883      	ldrb	r3, [r0, #2]
   1e774:	4a0b      	ldr	r2, [pc, #44]	; (1e7a4 <mfg_open_flash_area+0x34>)
   1e776:	6812      	ldr	r2, [r2, #0]
   1e778:	4293      	cmp	r3, r2
   1e77a:	da0a      	bge.n	1e792 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1e77c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e780:	009a      	lsls	r2, r3, #2
   1e782:	4b09      	ldr	r3, [pc, #36]	; (1e7a8 <mfg_open_flash_area+0x38>)
   1e784:	5c98      	ldrb	r0, [r3, r2]
   1e786:	f7ff fed9 	bl	1e53c <flash_area_open>
    if (rc != 0) {
   1e78a:	4603      	mov	r3, r0
   1e78c:	b938      	cbnz	r0, 1e79e <mfg_open_flash_area+0x2e>
}
   1e78e:	4618      	mov	r0, r3
   1e790:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1e792:	2300      	movs	r3, #0
   1e794:	461a      	mov	r2, r3
   1e796:	4619      	mov	r1, r3
   1e798:	4618      	mov	r0, r3
   1e79a:	f7fc fe11 	bl	1b3c0 <__assert_func>
        return SYS_EIO;
   1e79e:	f06f 0304 	mvn.w	r3, #4
   1e7a2:	e7f4      	b.n	1e78e <mfg_open_flash_area+0x1e>
   1e7a4:	2000ddb0 	.word	0x2000ddb0
   1e7a8:	2000dd98 	.word	0x2000dd98

0001e7ac <mfg_read_tlv_body>:
{
   1e7ac:	b570      	push	{r4, r5, r6, lr}
   1e7ae:	b082      	sub	sp, #8
   1e7b0:	4606      	mov	r6, r0
   1e7b2:	460c      	mov	r4, r1
   1e7b4:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1e7b6:	a901      	add	r1, sp, #4
   1e7b8:	f7ff ffda 	bl	1e770 <mfg_open_flash_area>
    if (rc != 0) {
   1e7bc:	4603      	mov	r3, r0
   1e7be:	b110      	cbz	r0, 1e7c6 <mfg_read_tlv_body+0x1a>
}
   1e7c0:	4618      	mov	r0, r3
   1e7c2:	b002      	add	sp, #8
   1e7c4:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1e7c6:	462a      	mov	r2, r5
   1e7c8:	2100      	movs	r1, #0
   1e7ca:	4620      	mov	r0, r4
   1e7cc:	f7fe f9fb 	bl	1cbc6 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1e7d0:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1e7d2:	6871      	ldr	r1, [r6, #4]
   1e7d4:	42ab      	cmp	r3, r5
   1e7d6:	bfa8      	it	ge
   1e7d8:	462b      	movge	r3, r5
   1e7da:	4622      	mov	r2, r4
   1e7dc:	3102      	adds	r1, #2
   1e7de:	9801      	ldr	r0, [sp, #4]
   1e7e0:	f7ff fecc 	bl	1e57c <flash_area_read>
    if (rc != 0) {
   1e7e4:	4603      	mov	r3, r0
   1e7e6:	2800      	cmp	r0, #0
   1e7e8:	d0ea      	beq.n	1e7c0 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1e7ea:	f06f 0304 	mvn.w	r3, #4
   1e7ee:	e7e7      	b.n	1e7c0 <mfg_read_tlv_body+0x14>

0001e7f0 <mfg_seek_next>:
{
   1e7f0:	b510      	push	{r4, lr}
   1e7f2:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1e7f4:	4620      	mov	r0, r4
   1e7f6:	f7ff ff0f 	bl	1e618 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1e7fa:	f110 0f06 	cmn.w	r0, #6
   1e7fe:	d0f9      	beq.n	1e7f4 <mfg_seek_next+0x4>
}
   1e800:	bd10      	pop	{r4, pc}

0001e802 <mfg_seek_next_with_type>:
{
   1e802:	b538      	push	{r3, r4, r5, lr}
   1e804:	4604      	mov	r4, r0
   1e806:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1e808:	4620      	mov	r0, r4
   1e80a:	f7ff fff1 	bl	1e7f0 <mfg_seek_next>
        if (rc != 0) {
   1e80e:	4602      	mov	r2, r0
   1e810:	b910      	cbnz	r0, 1e818 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1e812:	7823      	ldrb	r3, [r4, #0]
   1e814:	42ab      	cmp	r3, r5
   1e816:	d1f7      	bne.n	1e808 <mfg_seek_next_with_type+0x6>
}
   1e818:	4610      	mov	r0, r2
   1e81a:	bd38      	pop	{r3, r4, r5, pc}

0001e81c <mfg_read_tlv_flash_area>:
{
   1e81c:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1e81e:	220a      	movs	r2, #10
   1e820:	f7ff ffc4 	bl	1e7ac <mfg_read_tlv_body>
}
   1e824:	bd08      	pop	{r3, pc}

0001e826 <mfg_read_tlv_mmr_ref>:
{
   1e826:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1e828:	2201      	movs	r2, #1
   1e82a:	f7ff ffbf 	bl	1e7ac <mfg_read_tlv_body>
}
   1e82e:	bd08      	pop	{r3, pc}

0001e830 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1e830:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1e832:	4b0b      	ldr	r3, [pc, #44]	; (1e860 <mfg_init+0x30>)
   1e834:	781b      	ldrb	r3, [r3, #0]
   1e836:	b94b      	cbnz	r3, 1e84c <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1e838:	4b09      	ldr	r3, [pc, #36]	; (1e860 <mfg_init+0x30>)
   1e83a:	2201      	movs	r2, #1
   1e83c:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1e83e:	4b09      	ldr	r3, [pc, #36]	; (1e864 <mfg_init+0x34>)
   1e840:	781b      	ldrb	r3, [r3, #0]
   1e842:	b123      	cbz	r3, 1e84e <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1e844:	2000      	movs	r0, #0
   1e846:	f7ff ff69 	bl	1e71c <mfg_read_next_mmr>
    if (rc != 0) {
   1e84a:	b128      	cbz	r0, 1e858 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1e84c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1e84e:	461a      	mov	r2, r3
   1e850:	4619      	mov	r1, r3
   1e852:	4618      	mov	r0, r3
   1e854:	f7fc fdb4 	bl	1b3c0 <__assert_func>
    rc = mfg_read_mmr_refs();
   1e858:	f000 f80e 	bl	1e878 <mfg_read_mmr_refs>
err:
   1e85c:	e7f6      	b.n	1e84c <mfg_init+0x1c>
   1e85e:	bf00      	nop
   1e860:	2000dd94 	.word	0x2000dd94
   1e864:	2000ddbc 	.word	0x2000ddbc

0001e868 <mfg_open>:
{
   1e868:	b510      	push	{r4, lr}
   1e86a:	4604      	mov	r4, r0
    mfg_init();
   1e86c:	f7ff ffe0 	bl	1e830 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1e870:	2300      	movs	r3, #0
   1e872:	6023      	str	r3, [r4, #0]
   1e874:	6063      	str	r3, [r4, #4]
}
   1e876:	bd10      	pop	{r4, pc}

0001e878 <mfg_read_mmr_refs>:
{
   1e878:	b500      	push	{lr}
   1e87a:	b085      	sub	sp, #20
    mfg_open(&reader);
   1e87c:	a801      	add	r0, sp, #4
   1e87e:	f7ff fff3 	bl	1e868 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1e882:	2104      	movs	r1, #4
   1e884:	eb0d 0001 	add.w	r0, sp, r1
   1e888:	f7ff ffbb 	bl	1e802 <mfg_seek_next_with_type>
   1e88c:	4603      	mov	r3, r0
        switch (rc) {
   1e88e:	f110 0f0f 	cmn.w	r0, #15
   1e892:	d004      	beq.n	1e89e <mfg_read_mmr_refs+0x26>
   1e894:	b128      	cbz	r0, 1e8a2 <mfg_read_mmr_refs+0x2a>
}
   1e896:	4618      	mov	r0, r3
   1e898:	b005      	add	sp, #20
   1e89a:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1e89e:	2300      	movs	r3, #0
   1e8a0:	e7f9      	b.n	1e896 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1e8a2:	a903      	add	r1, sp, #12
   1e8a4:	a801      	add	r0, sp, #4
   1e8a6:	f7ff ffbe 	bl	1e826 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1e8aa:	4603      	mov	r3, r0
   1e8ac:	2800      	cmp	r0, #0
   1e8ae:	d1f2      	bne.n	1e896 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1e8b0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1e8b4:	f7ff ff32 	bl	1e71c <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1e8b8:	4603      	mov	r3, r0
   1e8ba:	2800      	cmp	r0, #0
   1e8bc:	d0e1      	beq.n	1e882 <mfg_read_mmr_refs+0xa>
   1e8be:	f110 0f0b 	cmn.w	r0, #11
   1e8c2:	d0de      	beq.n	1e882 <mfg_read_mmr_refs+0xa>
   1e8c4:	e7e7      	b.n	1e896 <mfg_read_mmr_refs+0x1e>
	...

0001e8c8 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1e8c8:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1e8ca:	4803      	ldr	r0, [pc, #12]	; (1e8d8 <__wrap_coap_receive+0x10>)
   1e8cc:	f7fb feb0 	bl	1a630 <console_printf>
    return -1;
}
   1e8d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e8d4:	bd08      	pop	{r3, pc}
   1e8d6:	bf00      	nop
   1e8d8:	000293d4 	.word	0x000293d4

0001e8dc <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1e8dc:	4770      	bx	lr

0001e8de <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1e8de:	6843      	ldr	r3, [r0, #4]
   1e8e0:	428b      	cmp	r3, r1
   1e8e2:	d808      	bhi.n	1e8f6 <hal_flash_check_addr+0x18>
   1e8e4:	6882      	ldr	r2, [r0, #8]
   1e8e6:	4413      	add	r3, r2
   1e8e8:	428b      	cmp	r3, r1
   1e8ea:	d301      	bcc.n	1e8f0 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1e8ec:	2000      	movs	r0, #0
}
   1e8ee:	4770      	bx	lr
        return SYS_EINVAL;
   1e8f0:	f06f 0001 	mvn.w	r0, #1
   1e8f4:	4770      	bx	lr
   1e8f6:	f06f 0001 	mvn.w	r0, #1
   1e8fa:	4770      	bx	lr

0001e8fc <hal_flash_init>:
{
   1e8fc:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1e8fe:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1e900:	462c      	mov	r4, r5
   1e902:	e001      	b.n	1e908 <hal_flash_init+0xc>
   1e904:	3401      	adds	r4, #1
   1e906:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1e908:	4620      	mov	r0, r4
   1e90a:	f7fe fce3 	bl	1d2d4 <hal_bsp_flash_dev>
        if (!hf) {
   1e90e:	b138      	cbz	r0, 1e920 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1e910:	6802      	ldr	r2, [r0, #0]
   1e912:	6952      	ldr	r2, [r2, #20]
   1e914:	4790      	blx	r2
   1e916:	2800      	cmp	r0, #0
   1e918:	d0f4      	beq.n	1e904 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1e91a:	f06f 0504 	mvn.w	r5, #4
   1e91e:	e7f1      	b.n	1e904 <hal_flash_init+0x8>
}
   1e920:	4628      	mov	r0, r5
   1e922:	bd38      	pop	{r3, r4, r5, pc}

0001e924 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1e924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e928:	460d      	mov	r5, r1
   1e92a:	4690      	mov	r8, r2
   1e92c:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1e92e:	f7fe fcd1 	bl	1d2d4 <hal_bsp_flash_dev>
    if (!hf) {
   1e932:	b1c0      	cbz	r0, 1e966 <hal_flash_read+0x42>
   1e934:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1e936:	4629      	mov	r1, r5
   1e938:	f7ff ffd1 	bl	1e8de <hal_flash_check_addr>
   1e93c:	b9b0      	cbnz	r0, 1e96c <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1e93e:	19a9      	adds	r1, r5, r6
   1e940:	4620      	mov	r0, r4
   1e942:	f7ff ffcc 	bl	1e8de <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1e946:	b9a0      	cbnz	r0, 1e972 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1e948:	6823      	ldr	r3, [r4, #0]
   1e94a:	681f      	ldr	r7, [r3, #0]
   1e94c:	4633      	mov	r3, r6
   1e94e:	4642      	mov	r2, r8
   1e950:	4629      	mov	r1, r5
   1e952:	4620      	mov	r0, r4
   1e954:	47b8      	blx	r7
    if (rc != 0) {
   1e956:	4603      	mov	r3, r0
   1e958:	b910      	cbnz	r0, 1e960 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1e95a:	4618      	mov	r0, r3
   1e95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1e960:	f06f 0304 	mvn.w	r3, #4
   1e964:	e7f9      	b.n	1e95a <hal_flash_read+0x36>
        return SYS_EINVAL;
   1e966:	f06f 0301 	mvn.w	r3, #1
   1e96a:	e7f6      	b.n	1e95a <hal_flash_read+0x36>
        return SYS_EINVAL;
   1e96c:	f06f 0301 	mvn.w	r3, #1
   1e970:	e7f3      	b.n	1e95a <hal_flash_read+0x36>
   1e972:	f06f 0301 	mvn.w	r3, #1
   1e976:	e7f0      	b.n	1e95a <hal_flash_read+0x36>

0001e978 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1e978:	2010      	movs	r0, #16
   1e97a:	4770      	bx	lr

0001e97c <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1e97c:	b570      	push	{r4, r5, r6, lr}
   1e97e:	4606      	mov	r6, r0
   1e980:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1e982:	460d      	mov	r5, r1
   1e984:	2908      	cmp	r1, #8
   1e986:	bf28      	it	cs
   1e988:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1e98a:	462a      	mov	r2, r5
   1e98c:	4906      	ldr	r1, [pc, #24]	; (1e9a8 <hal_bsp_hw_id+0x2c>)
   1e98e:	f7fe f90d 	bl	1cbac <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1e992:	1b64      	subs	r4, r4, r5
   1e994:	2c08      	cmp	r4, #8
   1e996:	bf28      	it	cs
   1e998:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1e99a:	4622      	mov	r2, r4
   1e99c:	4903      	ldr	r1, [pc, #12]	; (1e9ac <hal_bsp_hw_id+0x30>)
   1e99e:	1970      	adds	r0, r6, r5
   1e9a0:	f7fe f904 	bl	1cbac <memcpy>

    return len + cnt;
}
   1e9a4:	1928      	adds	r0, r5, r4
   1e9a6:	bd70      	pop	{r4, r5, r6, pc}
   1e9a8:	10000060 	.word	0x10000060
   1e9ac:	100000a4 	.word	0x100000a4

0001e9b0 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1e9b0:	b40e      	push	{r1, r2, r3}
   1e9b2:	b500      	push	{lr}
   1e9b4:	b082      	sub	sp, #8
   1e9b6:	ab03      	add	r3, sp, #12
   1e9b8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1e9bc:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1e9be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1e9c2:	f7fe fbef 	bl	1d1a4 <vsnprintf>
	va_end(ap);

	return rv;
}
   1e9c6:	b002      	add	sp, #8
   1e9c8:	f85d eb04 	ldr.w	lr, [sp], #4
   1e9cc:	b003      	add	sp, #12
   1e9ce:	4770      	bx	lr

0001e9d0 <__aeabi_uldivmod>:
   1e9d0:	b953      	cbnz	r3, 1e9e8 <__aeabi_uldivmod+0x18>
   1e9d2:	b94a      	cbnz	r2, 1e9e8 <__aeabi_uldivmod+0x18>
   1e9d4:	2900      	cmp	r1, #0
   1e9d6:	bf08      	it	eq
   1e9d8:	2800      	cmpeq	r0, #0
   1e9da:	bf1c      	itt	ne
   1e9dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1e9e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1e9e4:	f000 b972 	b.w	1eccc <__aeabi_idiv0>
   1e9e8:	f1ad 0c08 	sub.w	ip, sp, #8
   1e9ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1e9f0:	f000 f806 	bl	1ea00 <__udivmoddi4>
   1e9f4:	f8dd e004 	ldr.w	lr, [sp, #4]
   1e9f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1e9fc:	b004      	add	sp, #16
   1e9fe:	4770      	bx	lr

0001ea00 <__udivmoddi4>:
   1ea00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ea04:	9e08      	ldr	r6, [sp, #32]
   1ea06:	4604      	mov	r4, r0
   1ea08:	4688      	mov	r8, r1
   1ea0a:	2b00      	cmp	r3, #0
   1ea0c:	d14b      	bne.n	1eaa6 <__udivmoddi4+0xa6>
   1ea0e:	428a      	cmp	r2, r1
   1ea10:	4615      	mov	r5, r2
   1ea12:	d967      	bls.n	1eae4 <__udivmoddi4+0xe4>
   1ea14:	fab2 f282 	clz	r2, r2
   1ea18:	b14a      	cbz	r2, 1ea2e <__udivmoddi4+0x2e>
   1ea1a:	f1c2 0720 	rsb	r7, r2, #32
   1ea1e:	fa01 f302 	lsl.w	r3, r1, r2
   1ea22:	fa20 f707 	lsr.w	r7, r0, r7
   1ea26:	4095      	lsls	r5, r2
   1ea28:	ea47 0803 	orr.w	r8, r7, r3
   1ea2c:	4094      	lsls	r4, r2
   1ea2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1ea32:	0c23      	lsrs	r3, r4, #16
   1ea34:	fbb8 f7fe 	udiv	r7, r8, lr
   1ea38:	fa1f fc85 	uxth.w	ip, r5
   1ea3c:	fb0e 8817 	mls	r8, lr, r7, r8
   1ea40:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1ea44:	fb07 f10c 	mul.w	r1, r7, ip
   1ea48:	4299      	cmp	r1, r3
   1ea4a:	d909      	bls.n	1ea60 <__udivmoddi4+0x60>
   1ea4c:	18eb      	adds	r3, r5, r3
   1ea4e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1ea52:	f080 811b 	bcs.w	1ec8c <__udivmoddi4+0x28c>
   1ea56:	4299      	cmp	r1, r3
   1ea58:	f240 8118 	bls.w	1ec8c <__udivmoddi4+0x28c>
   1ea5c:	3f02      	subs	r7, #2
   1ea5e:	442b      	add	r3, r5
   1ea60:	1a5b      	subs	r3, r3, r1
   1ea62:	b2a4      	uxth	r4, r4
   1ea64:	fbb3 f0fe 	udiv	r0, r3, lr
   1ea68:	fb0e 3310 	mls	r3, lr, r0, r3
   1ea6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1ea70:	fb00 fc0c 	mul.w	ip, r0, ip
   1ea74:	45a4      	cmp	ip, r4
   1ea76:	d909      	bls.n	1ea8c <__udivmoddi4+0x8c>
   1ea78:	192c      	adds	r4, r5, r4
   1ea7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1ea7e:	f080 8107 	bcs.w	1ec90 <__udivmoddi4+0x290>
   1ea82:	45a4      	cmp	ip, r4
   1ea84:	f240 8104 	bls.w	1ec90 <__udivmoddi4+0x290>
   1ea88:	3802      	subs	r0, #2
   1ea8a:	442c      	add	r4, r5
   1ea8c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1ea90:	eba4 040c 	sub.w	r4, r4, ip
   1ea94:	2700      	movs	r7, #0
   1ea96:	b11e      	cbz	r6, 1eaa0 <__udivmoddi4+0xa0>
   1ea98:	40d4      	lsrs	r4, r2
   1ea9a:	2300      	movs	r3, #0
   1ea9c:	e9c6 4300 	strd	r4, r3, [r6]
   1eaa0:	4639      	mov	r1, r7
   1eaa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1eaa6:	428b      	cmp	r3, r1
   1eaa8:	d909      	bls.n	1eabe <__udivmoddi4+0xbe>
   1eaaa:	2e00      	cmp	r6, #0
   1eaac:	f000 80eb 	beq.w	1ec86 <__udivmoddi4+0x286>
   1eab0:	2700      	movs	r7, #0
   1eab2:	e9c6 0100 	strd	r0, r1, [r6]
   1eab6:	4638      	mov	r0, r7
   1eab8:	4639      	mov	r1, r7
   1eaba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1eabe:	fab3 f783 	clz	r7, r3
   1eac2:	2f00      	cmp	r7, #0
   1eac4:	d147      	bne.n	1eb56 <__udivmoddi4+0x156>
   1eac6:	428b      	cmp	r3, r1
   1eac8:	d302      	bcc.n	1ead0 <__udivmoddi4+0xd0>
   1eaca:	4282      	cmp	r2, r0
   1eacc:	f200 80fa 	bhi.w	1ecc4 <__udivmoddi4+0x2c4>
   1ead0:	1a84      	subs	r4, r0, r2
   1ead2:	eb61 0303 	sbc.w	r3, r1, r3
   1ead6:	2001      	movs	r0, #1
   1ead8:	4698      	mov	r8, r3
   1eada:	2e00      	cmp	r6, #0
   1eadc:	d0e0      	beq.n	1eaa0 <__udivmoddi4+0xa0>
   1eade:	e9c6 4800 	strd	r4, r8, [r6]
   1eae2:	e7dd      	b.n	1eaa0 <__udivmoddi4+0xa0>
   1eae4:	b902      	cbnz	r2, 1eae8 <__udivmoddi4+0xe8>
   1eae6:	deff      	udf	#255	; 0xff
   1eae8:	fab2 f282 	clz	r2, r2
   1eaec:	2a00      	cmp	r2, #0
   1eaee:	f040 808f 	bne.w	1ec10 <__udivmoddi4+0x210>
   1eaf2:	1b49      	subs	r1, r1, r5
   1eaf4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1eaf8:	fa1f f885 	uxth.w	r8, r5
   1eafc:	2701      	movs	r7, #1
   1eafe:	fbb1 fcfe 	udiv	ip, r1, lr
   1eb02:	0c23      	lsrs	r3, r4, #16
   1eb04:	fb0e 111c 	mls	r1, lr, ip, r1
   1eb08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1eb0c:	fb08 f10c 	mul.w	r1, r8, ip
   1eb10:	4299      	cmp	r1, r3
   1eb12:	d907      	bls.n	1eb24 <__udivmoddi4+0x124>
   1eb14:	18eb      	adds	r3, r5, r3
   1eb16:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1eb1a:	d202      	bcs.n	1eb22 <__udivmoddi4+0x122>
   1eb1c:	4299      	cmp	r1, r3
   1eb1e:	f200 80cd 	bhi.w	1ecbc <__udivmoddi4+0x2bc>
   1eb22:	4684      	mov	ip, r0
   1eb24:	1a59      	subs	r1, r3, r1
   1eb26:	b2a3      	uxth	r3, r4
   1eb28:	fbb1 f0fe 	udiv	r0, r1, lr
   1eb2c:	fb0e 1410 	mls	r4, lr, r0, r1
   1eb30:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1eb34:	fb08 f800 	mul.w	r8, r8, r0
   1eb38:	45a0      	cmp	r8, r4
   1eb3a:	d907      	bls.n	1eb4c <__udivmoddi4+0x14c>
   1eb3c:	192c      	adds	r4, r5, r4
   1eb3e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1eb42:	d202      	bcs.n	1eb4a <__udivmoddi4+0x14a>
   1eb44:	45a0      	cmp	r8, r4
   1eb46:	f200 80b6 	bhi.w	1ecb6 <__udivmoddi4+0x2b6>
   1eb4a:	4618      	mov	r0, r3
   1eb4c:	eba4 0408 	sub.w	r4, r4, r8
   1eb50:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1eb54:	e79f      	b.n	1ea96 <__udivmoddi4+0x96>
   1eb56:	f1c7 0c20 	rsb	ip, r7, #32
   1eb5a:	40bb      	lsls	r3, r7
   1eb5c:	fa22 fe0c 	lsr.w	lr, r2, ip
   1eb60:	ea4e 0e03 	orr.w	lr, lr, r3
   1eb64:	fa01 f407 	lsl.w	r4, r1, r7
   1eb68:	fa20 f50c 	lsr.w	r5, r0, ip
   1eb6c:	fa21 f30c 	lsr.w	r3, r1, ip
   1eb70:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1eb74:	4325      	orrs	r5, r4
   1eb76:	fbb3 f9f8 	udiv	r9, r3, r8
   1eb7a:	0c2c      	lsrs	r4, r5, #16
   1eb7c:	fb08 3319 	mls	r3, r8, r9, r3
   1eb80:	fa1f fa8e 	uxth.w	sl, lr
   1eb84:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1eb88:	fb09 f40a 	mul.w	r4, r9, sl
   1eb8c:	429c      	cmp	r4, r3
   1eb8e:	fa02 f207 	lsl.w	r2, r2, r7
   1eb92:	fa00 f107 	lsl.w	r1, r0, r7
   1eb96:	d90b      	bls.n	1ebb0 <__udivmoddi4+0x1b0>
   1eb98:	eb1e 0303 	adds.w	r3, lr, r3
   1eb9c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1eba0:	f080 8087 	bcs.w	1ecb2 <__udivmoddi4+0x2b2>
   1eba4:	429c      	cmp	r4, r3
   1eba6:	f240 8084 	bls.w	1ecb2 <__udivmoddi4+0x2b2>
   1ebaa:	f1a9 0902 	sub.w	r9, r9, #2
   1ebae:	4473      	add	r3, lr
   1ebb0:	1b1b      	subs	r3, r3, r4
   1ebb2:	b2ad      	uxth	r5, r5
   1ebb4:	fbb3 f0f8 	udiv	r0, r3, r8
   1ebb8:	fb08 3310 	mls	r3, r8, r0, r3
   1ebbc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1ebc0:	fb00 fa0a 	mul.w	sl, r0, sl
   1ebc4:	45a2      	cmp	sl, r4
   1ebc6:	d908      	bls.n	1ebda <__udivmoddi4+0x1da>
   1ebc8:	eb1e 0404 	adds.w	r4, lr, r4
   1ebcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1ebd0:	d26b      	bcs.n	1ecaa <__udivmoddi4+0x2aa>
   1ebd2:	45a2      	cmp	sl, r4
   1ebd4:	d969      	bls.n	1ecaa <__udivmoddi4+0x2aa>
   1ebd6:	3802      	subs	r0, #2
   1ebd8:	4474      	add	r4, lr
   1ebda:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1ebde:	fba0 8902 	umull	r8, r9, r0, r2
   1ebe2:	eba4 040a 	sub.w	r4, r4, sl
   1ebe6:	454c      	cmp	r4, r9
   1ebe8:	46c2      	mov	sl, r8
   1ebea:	464b      	mov	r3, r9
   1ebec:	d354      	bcc.n	1ec98 <__udivmoddi4+0x298>
   1ebee:	d051      	beq.n	1ec94 <__udivmoddi4+0x294>
   1ebf0:	2e00      	cmp	r6, #0
   1ebf2:	d069      	beq.n	1ecc8 <__udivmoddi4+0x2c8>
   1ebf4:	ebb1 050a 	subs.w	r5, r1, sl
   1ebf8:	eb64 0403 	sbc.w	r4, r4, r3
   1ebfc:	fa04 fc0c 	lsl.w	ip, r4, ip
   1ec00:	40fd      	lsrs	r5, r7
   1ec02:	40fc      	lsrs	r4, r7
   1ec04:	ea4c 0505 	orr.w	r5, ip, r5
   1ec08:	e9c6 5400 	strd	r5, r4, [r6]
   1ec0c:	2700      	movs	r7, #0
   1ec0e:	e747      	b.n	1eaa0 <__udivmoddi4+0xa0>
   1ec10:	f1c2 0320 	rsb	r3, r2, #32
   1ec14:	fa20 f703 	lsr.w	r7, r0, r3
   1ec18:	4095      	lsls	r5, r2
   1ec1a:	fa01 f002 	lsl.w	r0, r1, r2
   1ec1e:	fa21 f303 	lsr.w	r3, r1, r3
   1ec22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1ec26:	4338      	orrs	r0, r7
   1ec28:	0c01      	lsrs	r1, r0, #16
   1ec2a:	fbb3 f7fe 	udiv	r7, r3, lr
   1ec2e:	fa1f f885 	uxth.w	r8, r5
   1ec32:	fb0e 3317 	mls	r3, lr, r7, r3
   1ec36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1ec3a:	fb07 f308 	mul.w	r3, r7, r8
   1ec3e:	428b      	cmp	r3, r1
   1ec40:	fa04 f402 	lsl.w	r4, r4, r2
   1ec44:	d907      	bls.n	1ec56 <__udivmoddi4+0x256>
   1ec46:	1869      	adds	r1, r5, r1
   1ec48:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1ec4c:	d22f      	bcs.n	1ecae <__udivmoddi4+0x2ae>
   1ec4e:	428b      	cmp	r3, r1
   1ec50:	d92d      	bls.n	1ecae <__udivmoddi4+0x2ae>
   1ec52:	3f02      	subs	r7, #2
   1ec54:	4429      	add	r1, r5
   1ec56:	1acb      	subs	r3, r1, r3
   1ec58:	b281      	uxth	r1, r0
   1ec5a:	fbb3 f0fe 	udiv	r0, r3, lr
   1ec5e:	fb0e 3310 	mls	r3, lr, r0, r3
   1ec62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1ec66:	fb00 f308 	mul.w	r3, r0, r8
   1ec6a:	428b      	cmp	r3, r1
   1ec6c:	d907      	bls.n	1ec7e <__udivmoddi4+0x27e>
   1ec6e:	1869      	adds	r1, r5, r1
   1ec70:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1ec74:	d217      	bcs.n	1eca6 <__udivmoddi4+0x2a6>
   1ec76:	428b      	cmp	r3, r1
   1ec78:	d915      	bls.n	1eca6 <__udivmoddi4+0x2a6>
   1ec7a:	3802      	subs	r0, #2
   1ec7c:	4429      	add	r1, r5
   1ec7e:	1ac9      	subs	r1, r1, r3
   1ec80:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1ec84:	e73b      	b.n	1eafe <__udivmoddi4+0xfe>
   1ec86:	4637      	mov	r7, r6
   1ec88:	4630      	mov	r0, r6
   1ec8a:	e709      	b.n	1eaa0 <__udivmoddi4+0xa0>
   1ec8c:	4607      	mov	r7, r0
   1ec8e:	e6e7      	b.n	1ea60 <__udivmoddi4+0x60>
   1ec90:	4618      	mov	r0, r3
   1ec92:	e6fb      	b.n	1ea8c <__udivmoddi4+0x8c>
   1ec94:	4541      	cmp	r1, r8
   1ec96:	d2ab      	bcs.n	1ebf0 <__udivmoddi4+0x1f0>
   1ec98:	ebb8 0a02 	subs.w	sl, r8, r2
   1ec9c:	eb69 020e 	sbc.w	r2, r9, lr
   1eca0:	3801      	subs	r0, #1
   1eca2:	4613      	mov	r3, r2
   1eca4:	e7a4      	b.n	1ebf0 <__udivmoddi4+0x1f0>
   1eca6:	4660      	mov	r0, ip
   1eca8:	e7e9      	b.n	1ec7e <__udivmoddi4+0x27e>
   1ecaa:	4618      	mov	r0, r3
   1ecac:	e795      	b.n	1ebda <__udivmoddi4+0x1da>
   1ecae:	4667      	mov	r7, ip
   1ecb0:	e7d1      	b.n	1ec56 <__udivmoddi4+0x256>
   1ecb2:	4681      	mov	r9, r0
   1ecb4:	e77c      	b.n	1ebb0 <__udivmoddi4+0x1b0>
   1ecb6:	3802      	subs	r0, #2
   1ecb8:	442c      	add	r4, r5
   1ecba:	e747      	b.n	1eb4c <__udivmoddi4+0x14c>
   1ecbc:	f1ac 0c02 	sub.w	ip, ip, #2
   1ecc0:	442b      	add	r3, r5
   1ecc2:	e72f      	b.n	1eb24 <__udivmoddi4+0x124>
   1ecc4:	4638      	mov	r0, r7
   1ecc6:	e708      	b.n	1eada <__udivmoddi4+0xda>
   1ecc8:	4637      	mov	r7, r6
   1ecca:	e6e9      	b.n	1eaa0 <__udivmoddi4+0xa0>

0001eccc <__aeabi_idiv0>:
   1eccc:	4770      	bx	lr
   1ecce:	bf00      	nop

0001ecd0 <__aeabi_memclr>:
   1ecd0:	2200      	movs	r2, #0
   1ecd2:	f000 b803 	b.w	1ecdc <__aeabi_memset>
   1ecd6:	bf00      	nop

0001ecd8 <__aeabi_memcpy>:
   1ecd8:	f7fd bf68 	b.w	1cbac <memcpy>

0001ecdc <__aeabi_memset>:
   1ecdc:	b470      	push	{r4, r5, r6}
   1ecde:	0784      	lsls	r4, r0, #30
   1ece0:	d046      	beq.n	1ed70 <__aeabi_memset+0x94>
   1ece2:	1e4c      	subs	r4, r1, #1
   1ece4:	2900      	cmp	r1, #0
   1ece6:	d041      	beq.n	1ed6c <__aeabi_memset+0x90>
   1ece8:	b2d5      	uxtb	r5, r2
   1ecea:	4603      	mov	r3, r0
   1ecec:	e002      	b.n	1ecf4 <__aeabi_memset+0x18>
   1ecee:	1e61      	subs	r1, r4, #1
   1ecf0:	b3e4      	cbz	r4, 1ed6c <__aeabi_memset+0x90>
   1ecf2:	460c      	mov	r4, r1
   1ecf4:	f803 5b01 	strb.w	r5, [r3], #1
   1ecf8:	0799      	lsls	r1, r3, #30
   1ecfa:	d1f8      	bne.n	1ecee <__aeabi_memset+0x12>
   1ecfc:	2c03      	cmp	r4, #3
   1ecfe:	d92e      	bls.n	1ed5e <__aeabi_memset+0x82>
   1ed00:	b2d5      	uxtb	r5, r2
   1ed02:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1ed06:	2c0f      	cmp	r4, #15
   1ed08:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1ed0c:	d919      	bls.n	1ed42 <__aeabi_memset+0x66>
   1ed0e:	4626      	mov	r6, r4
   1ed10:	f103 0110 	add.w	r1, r3, #16
   1ed14:	3e10      	subs	r6, #16
   1ed16:	2e0f      	cmp	r6, #15
   1ed18:	f841 5c10 	str.w	r5, [r1, #-16]
   1ed1c:	f841 5c0c 	str.w	r5, [r1, #-12]
   1ed20:	f841 5c08 	str.w	r5, [r1, #-8]
   1ed24:	f841 5c04 	str.w	r5, [r1, #-4]
   1ed28:	f101 0110 	add.w	r1, r1, #16
   1ed2c:	d8f2      	bhi.n	1ed14 <__aeabi_memset+0x38>
   1ed2e:	f1a4 0110 	sub.w	r1, r4, #16
   1ed32:	f021 010f 	bic.w	r1, r1, #15
   1ed36:	f004 040f 	and.w	r4, r4, #15
   1ed3a:	3110      	adds	r1, #16
   1ed3c:	2c03      	cmp	r4, #3
   1ed3e:	440b      	add	r3, r1
   1ed40:	d90d      	bls.n	1ed5e <__aeabi_memset+0x82>
   1ed42:	461e      	mov	r6, r3
   1ed44:	4621      	mov	r1, r4
   1ed46:	3904      	subs	r1, #4
   1ed48:	2903      	cmp	r1, #3
   1ed4a:	f846 5b04 	str.w	r5, [r6], #4
   1ed4e:	d8fa      	bhi.n	1ed46 <__aeabi_memset+0x6a>
   1ed50:	1f21      	subs	r1, r4, #4
   1ed52:	f021 0103 	bic.w	r1, r1, #3
   1ed56:	3104      	adds	r1, #4
   1ed58:	440b      	add	r3, r1
   1ed5a:	f004 0403 	and.w	r4, r4, #3
   1ed5e:	b12c      	cbz	r4, 1ed6c <__aeabi_memset+0x90>
   1ed60:	b2d2      	uxtb	r2, r2
   1ed62:	441c      	add	r4, r3
   1ed64:	f803 2b01 	strb.w	r2, [r3], #1
   1ed68:	42a3      	cmp	r3, r4
   1ed6a:	d1fb      	bne.n	1ed64 <__aeabi_memset+0x88>
   1ed6c:	bc70      	pop	{r4, r5, r6}
   1ed6e:	4770      	bx	lr
   1ed70:	460c      	mov	r4, r1
   1ed72:	4603      	mov	r3, r0
   1ed74:	e7c2      	b.n	1ecfc <__aeabi_memset+0x20>
   1ed76:	5344      	.short	0x5344
   1ed78:	61662050 	.word	0x61662050
   1ed7c:	43546c69 	.word	0x43546c69
   1ed80:	61662048 	.word	0x61662048
   1ed84:	45476c69 	.word	0x45476c69
   1ed88:	61662054 	.word	0x61662054
   1ed8c:	55526c69 	.word	0x55526c69
   1ed90:	6166204e 	.word	0x6166204e
   1ed94:	6c69      	.short	0x6c69
   1ed96:	7572      	.short	0x7572
   1ed98:	612f7473 	.word	0x612f7473
   1ed9c:	732f7070 	.word	0x732f7070
   1eda0:	6c2f6372 	.word	0x6c2f6372
   1eda4:	722e6269 	.word	0x722e6269
   1eda8:	00000073 	.word	0x00000073
   1edac:	0001ed96 	.word	0x0001ed96
   1edb0:	00000013 	.word	0x00000013
   1edb4:	0000005c 	.word	0x0000005c
   1edb8:	00000005 	.word	0x00000005
   1edbc:	0001ed96 	.word	0x0001ed96
   1edc0:	00000013 	.word	0x00000013
   1edc4:	00000065 	.word	0x00000065
   1edc8:	00000005 	.word	0x00000005
   1edcc:	50494843 	.word	0x50494843
   1edd0:	61662038 	.word	0x61662038
   1edd4:	00006c69 	.word	0x00006c69
   1edd8:	0001ed96 	.word	0x0001ed96
   1eddc:	00000013 	.word	0x00000013
   1ede0:	00000077 	.word	0x00000077
   1ede4:	00000005 	.word	0x00000005
   1ede8:	0001ed96 	.word	0x0001ed96
   1edec:	00000013 	.word	0x00000013
   1edf0:	0000007d 	.word	0x0000007d
   1edf4:	0000000d 	.word	0x0000000d
   1edf8:	0001ed96 	.word	0x0001ed96
   1edfc:	00000013 	.word	0x00000013
   1ee00:	0000007c 	.word	0x0000007c
   1ee04:	00000009 	.word	0x00000009
   1ee08:	696e6170 	.word	0x696e6170
   1ee0c:	2063      	.short	0x2063
   1ee0e:	6f6e      	.short	0x6f6e
   1ee10:	636f6c20 	.word	0x636f6c20
   1ee14:	0a          	.byte	0x0a
   1ee15:	61          	.byte	0x61
   1ee16:	2074      	.short	0x2074
   1ee18:	6e696c20 	.word	0x6e696c20
   1ee1c:	2065      	.short	0x2065
   1ee1e:	000a      	.short	0x000a
   1ee20:	0001ed96 	.word	0x0001ed96
   1ee24:	00000013 	.word	0x00000013
   1ee28:	00000095 	.word	0x00000095
   1ee2c:	00000014 	.word	0x00000014
   1ee30:	6c6c6163 	.word	0x6c6c6163
   1ee34:	60206465 	.word	0x60206465
   1ee38:	6974704f 	.word	0x6974704f
   1ee3c:	3a3a6e6f 	.word	0x3a3a6e6f
   1ee40:	72776e75 	.word	0x72776e75
   1ee44:	29287061 	.word	0x29287061
   1ee48:	6e6f2060 	.word	0x6e6f2060
   1ee4c:	60206120 	.word	0x60206120
   1ee50:	656e6f4e 	.word	0x656e6f4e
   1ee54:	61762060 	.word	0x61762060
   1ee58:	756c      	.short	0x756c
   1ee5a:	65          	.byte	0x65
   1ee5b:	00          	.byte	0x00
   1ee5c:	0001ee5b 	.word	0x0001ee5b
   1ee60:	0001ee5c 	.word	0x0001ee5c
   1ee64:	65737361 	.word	0x65737361
   1ee68:	6f697472 	.word	0x6f697472
   1ee6c:	6166206e 	.word	0x6166206e
   1ee70:	64656c69 	.word	0x64656c69
   1ee74:	2860203a 	.word	0x2860203a
   1ee78:	7466656c 	.word	0x7466656c
   1ee7c:	203d3d20 	.word	0x203d3d20
   1ee80:	68676972 	.word	0x68676972
   1ee84:	0a602974 	.word	0x0a602974
   1ee88:	656c2020 	.word	0x656c2020
   1ee8c:	203a7466 	.word	0x203a7466
   1ee90:	60          	.byte	0x60
   1ee91:	60          	.byte	0x60
   1ee92:	0a2c      	.short	0x0a2c
   1ee94:	67697220 	.word	0x67697220
   1ee98:	203a7468 	.word	0x203a7468
   1ee9c:	60          	.byte	0x60
   1ee9d:	60          	.byte	0x60
   1ee9e:	203a      	.short	0x203a
   1eea0:	0001ee64 	.word	0x0001ee64
   1eea4:	0000002d 	.word	0x0000002d
   1eea8:	0001ee91 	.word	0x0001ee91
   1eeac:	0000000c 	.word	0x0000000c
   1eeb0:	0001ee9d 	.word	0x0001ee9d
   1eeb4:	00000003 	.word	0x00000003
   1eeb8:	0001eea0 	.word	0x0001eea0
   1eebc:	6e206f6e 	.word	0x6e206f6e
   1eec0:	006c6c75 	.word	0x006c6c75
   1eec4:	0001eebc 	.word	0x0001eebc
   1eec8:	00000007 	.word	0x00000007
   1eecc:	0001eec4 	.word	0x0001eec4
   1eed0:	0001eed0 	.word	0x0001eed0
   1eed4:	74737572 	.word	0x74737572
   1eed8:	6e796d2f 	.word	0x6e796d2f
   1eedc:	2f747765 	.word	0x2f747765
   1eee0:	2f637273 	.word	0x2f637273
   1eee4:	2e62696c 	.word	0x2e62696c
   1eee8:	00007372 	.word	0x00007372
   1eeec:	0001eed4 	.word	0x0001eed4
   1eef0:	00000016 	.word	0x00000016
   1eef4:	000000db 	.word	0x000000db
   1eef8:	00000011 	.word	0x00000011
   1eefc:	00008e55 	.word	0x00008e55
   1ef00:	00000004 	.word	0x00000004
   1ef04:	00000004 	.word	0x00000004
   1ef08:	0001331f 	.word	0x0001331f
   1ef0c:	65737361 	.word	0x65737361
   1ef10:	6f697472 	.word	0x6f697472
   1ef14:	6166206e 	.word	0x6166206e
   1ef18:	64656c69 	.word	0x64656c69
   1ef1c:	2860203a 	.word	0x2860203a
   1ef20:	7466656c 	.word	0x7466656c
   1ef24:	203d3d20 	.word	0x203d3d20
   1ef28:	68676972 	.word	0x68676972
   1ef2c:	0a602974 	.word	0x0a602974
   1ef30:	656c2020 	.word	0x656c2020
   1ef34:	203a7466 	.word	0x203a7466
   1ef38:	60          	.byte	0x60
   1ef39:	60          	.byte	0x60
   1ef3a:	0a2c      	.short	0x0a2c
   1ef3c:	67697220 	.word	0x67697220
   1ef40:	203a7468 	.word	0x203a7468
   1ef44:	60          	.byte	0x60
   1ef45:	60          	.byte	0x60
   1ef46:	203a      	.short	0x203a
   1ef48:	0001ef0c 	.word	0x0001ef0c
   1ef4c:	0000002d 	.word	0x0000002d
   1ef50:	0001ef39 	.word	0x0001ef39
   1ef54:	0000000c 	.word	0x0000000c
   1ef58:	0001ef45 	.word	0x0001ef45
   1ef5c:	00000003 	.word	0x00000003
   1ef60:	0001ef48 	.word	0x0001ef48
   1ef64:	74736564 	.word	0x74736564
   1ef68:	74616e69 	.word	0x74616e69
   1ef6c:	206e6f69 	.word	0x206e6f69
   1ef70:	20646e61 	.word	0x20646e61
   1ef74:	72756f73 	.word	0x72756f73
   1ef78:	73206563 	.word	0x73206563
   1ef7c:	6563696c 	.word	0x6563696c
   1ef80:	61682073 	.word	0x61682073
   1ef84:	64206576 	.word	0x64206576
   1ef88:	65666669 	.word	0x65666669
   1ef8c:	746e6572 	.word	0x746e6572
   1ef90:	6e656c20 	.word	0x6e656c20
   1ef94:	73687467 	.word	0x73687467
   1ef98:	0001ef64 	.word	0x0001ef64
   1ef9c:	00000034 	.word	0x00000034
   1efa0:	0001ef98 	.word	0x0001ef98
   1efa4:	0001efa4 	.word	0x0001efa4
   1efa8:	7375722f 	.word	0x7375722f
   1efac:	352f6374 	.word	0x352f6374
   1efb0:	66613765 	.word	0x66613765
   1efb4:	39363634 	.word	0x39363634
   1efb8:	65303866 	.word	0x65303866
   1efbc:	38366635 	.word	0x38366635
   1efc0:	31343132 	.word	0x31343132
   1efc4:	30353066 	.word	0x30353066
   1efc8:	61333931 	.word	0x61333931
   1efcc:	39373662 	.word	0x39373662
   1efd0:	62646661 	.word	0x62646661
   1efd4:	2f316234 	.word	0x2f316234
   1efd8:	2f637273 	.word	0x2f637273
   1efdc:	6362696c 	.word	0x6362696c
   1efe0:	2f65726f 	.word	0x2f65726f
   1efe4:	7263616d 	.word	0x7263616d
   1efe8:	6d2f736f 	.word	0x6d2f736f
   1efec:	722e646f 	.word	0x722e646f
   1eff0:	00000073 	.word	0x00000073
   1eff4:	0001efa8 	.word	0x0001efa8
   1eff8:	00000049 	.word	0x00000049
   1effc:	00000012 	.word	0x00000012
   1f000:	0000000d 	.word	0x0000000d
   1f004:	656d6f53 	.word	0x656d6f53
   1f008:	656e6f4e 	.word	0x656e6f4e
   1f00c:	00008e4d 	.word	0x00008e4d
   1f010:	00000004 	.word	0x00000004
   1f014:	00000004 	.word	0x00000004
   1f018:	0000942b 	.word	0x0000942b
   1f01c:	00000060 	.word	0x00000060
   1f020:	0001f01c 	.word	0x0001f01c
   1f024:	20697073 	.word	0x20697073
   1f028:	73756c66 	.word	0x73756c66
   1f02c:	61662068 	.word	0x61662068
   1f030:	6c69      	.short	0x6c69
   1f032:	552f      	.short	0x552f
   1f034:	73726573 	.word	0x73726573
   1f038:	70754c2f 	.word	0x70754c2f
   1f03c:	502f7970 	.word	0x502f7970
   1f040:	54656e69 	.word	0x54656e69
   1f044:	2f656d69 	.word	0x2f656d69
   1f048:	656e6970 	.word	0x656e6970
   1f04c:	656d6974 	.word	0x656d6974
   1f050:	7375722d 	.word	0x7375722d
   1f054:	796d2d74 	.word	0x796d2d74
   1f058:	7477656e 	.word	0x7477656e
   1f05c:	7375722f 	.word	0x7375722f
   1f060:	74732f74 	.word	0x74732f74
   1f064:	35333737 	.word	0x35333737
   1f068:	64636c2d 	.word	0x64636c2d
   1f06c:	7461622d 	.word	0x7461622d
   1f070:	722d6863 	.word	0x722d6863
   1f074:	72732f73 	.word	0x72732f73
   1f078:	696c2f63 	.word	0x696c2f63
   1f07c:	73722e62 	.word	0x73722e62
   1f080:	0001f032 	.word	0x0001f032
   1f084:	0000004e 	.word	0x0000004e
   1f088:	000000fe 	.word	0x000000fe
   1f08c:	00000009 	.word	0x00000009
   1f090:	20697073 	.word	0x20697073
   1f094:	61746164 	.word	0x61746164
   1f098:	69616620 	.word	0x69616620
   1f09c:	0000006c 	.word	0x0000006c
   1f0a0:	0001f032 	.word	0x0001f032
   1f0a4:	0000004e 	.word	0x0000004e
   1f0a8:	000000b0 	.word	0x000000b0
   1f0ac:	00000009 	.word	0x00000009
   1f0b0:	0001f032 	.word	0x0001f032
   1f0b4:	0000004e 	.word	0x0000004e
   1f0b8:	000000f3 	.word	0x000000f3
   1f0bc:	00000009 	.word	0x00000009
   1f0c0:	0001f032 	.word	0x0001f032
   1f0c4:	0000004e 	.word	0x0000004e
   1f0c8:	00000098 	.word	0x00000098
   1f0cc:	0000000d 	.word	0x0000000d
   1f0d0:	20697073 	.word	0x20697073
   1f0d4:	20646d63 	.word	0x20646d63
   1f0d8:	6c696166 	.word	0x6c696166
   1f0dc:	0001f032 	.word	0x0001f032
   1f0e0:	0000004e 	.word	0x0000004e
   1f0e4:	00000097 	.word	0x00000097
   1f0e8:	00000009 	.word	0x00000009
   1f0ec:	0001f032 	.word	0x0001f032
   1f0f0:	0000004e 	.word	0x0000004e
   1f0f4:	0000009d 	.word	0x0000009d
   1f0f8:	00000011 	.word	0x00000011
   1f0fc:	0001f032 	.word	0x0001f032
   1f100:	0000004e 	.word	0x0000004e
   1f104:	0000009c 	.word	0x0000009c
   1f108:	0000000d 	.word	0x0000000d
   1f10c:	0001f032 	.word	0x0001f032
   1f110:	0000004e 	.word	0x0000004e
   1f114:	000000c5 	.word	0x000000c5
   1f118:	0000002d 	.word	0x0000002d
   1f11c:	0001f032 	.word	0x0001f032
   1f120:	0000004e 	.word	0x0000004e
   1f124:	000000c9 	.word	0x000000c9
   1f128:	0000002d 	.word	0x0000002d
   1f12c:	0001f032 	.word	0x0001f032
   1f130:	0000004e 	.word	0x0000004e
   1f134:	000000d8 	.word	0x000000d8
   1f138:	00000019 	.word	0x00000019
   1f13c:	00000000 	.word	0x00000000

0001f140 <str.0>:
   1f140:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f150:	20687469 7265766f 776f6c66 0001f032     ith overflow2...
   1f160:	0000004e 000000d9 00000019 0001f032     N...........2...
   1f170:	0000004e 000000db 00000019 0001f032     N...........2...
   1f180:	0000004e 000000dc 00000019 20697073     N...........spi 
   1f190:	74696e69 69616620 0000006c 0001f032     init fail...2...
   1f1a0:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1f1b0:	0001f1ac 012d2c01 00002d2c 0001f1b4     .....,-.,-......
   1f1c0:	00000007 0001f1c0 008402a2 0001f1c8     ................
   1f1d0:	000000c5 0001f1d0 0000000a 0001f1d8     ................
   1f1e0:	00002a8a 0001f1e0 0000ee8a 0001f1e8     .*..............
   1f1f0:	0000000e 0001f1f0 00000000 0001f1f8     ................
   1f200:	00000008 0001f200 00000005 0001f208     ................
   1f210:	0001f032 0000004e 00000088 00000009     2...N...........
   1f220:	6573552f 4c2f7372 79707075 61632e2f     /Users/Luppy/.ca
   1f230:	2f6f6772 69676572 79727473 6372732f     rgo/registry/src
   1f240:	7469672f 2e627568 2d6d6f63 63636531     /github.com-1ecc
   1f250:	39393236 65396264 33323863 62696c2f     6299db9ec823/lib
   1f260:	70696863 2e302d38 2f322e31 2f637273     chip8-0.1.2/src/
   1f270:	2e62696c 00007372 0001f220 00000056     lib.rs.. ...V...
   1f280:	0000009d 00000014 0001f220 00000056     ........ ...V...
   1f290:	000000d4 00000011 0001f220 00000056     ........ ...V...
   1f2a0:	000000d5 0000001a 00000000 00000000     ................

0001f2b0 <str.0>:
   1f2b0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f2c0:	20687469 7265766f 776f6c66 0001f220     ith overflow ...
   1f2d0:	00000056 000000d5 00000011 00000005     V...............
   1f2e0:	0001f2dc 4c205d5b 78562044 495b202c     ....[] LD Vx, [I
   1f2f0:	0000005d 0001f2e4 00000001 0001f2e5     ]...............
   1f300:	0000000c 0001f2f4 00000000 00000020     ............ ...
   1f310:	00000008 00000002 00000000 00000000     ................
   1f320:	00000004 00000003 0001f308 6362696c     ............libc
   1f330:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1f340:	6e6e6e20 00000040 00000020 0001f32c      nnn@... ...,...
   1f350:	00000008 0001f32c 00000008 0001f220     ....,....... ...
   1f360:	00000056 000001a1 0001f34c 0001f220     V.......L... ...
   1f370:	00000056 000001a3 0000001d 0001f220     V........... ...
   1f380:	00000056 000001a4 0000002a 0001f220     V.......*... ...
   1f390:	00000056 000001a4 00000021 0001f220     V.......!... ...
   1f3a0:	00000056 000001a4 00000015 444c205d     V...........] LD
   1f3b0:	5d495b20 7856202c 0001f2e4 00000001      [I], Vx........
   1f3c0:	0001f3ac 0000000c 0001f3b8 0001f32c     ............,...
   1f3d0:	00000008 0001f32c 00000008 0001f220     ....,....... ...
   1f3e0:	00000056 0000019a 0001f3cc 0001f220     V........... ...
   1f3f0:	00000056 0000019c 0000001d 0001f220     V........... ...
   1f400:	00000056 0000019d 00000035 0001f220     V.......5... ...
   1f410:	00000056 0000019d 0000001e 0001f220     V........... ...
   1f420:	00000056 0000019d 00000015 444c205d     V...........] LD
   1f430:	202c4220 00007856 0001f2e4 00000001      B, Vx..........
   1f440:	0001f42c 0000000a 0001f438 0001f32c     ,.......8...,...
   1f450:	00000008 0001f32c 00000008 0001f220     ....,....... ...
   1f460:	00000056 00000193 0001f44c 0001f220     V.......L... ...
   1f470:	00000056 00000194 0000001b 0001f220     V........... ...
   1f480:	00000056 00000195 00000011 0001f220     V........... ...
   1f490:	00000056 00000196 0000001a 0001f220     V........... ...
   1f4a0:	00000056 00000196 00000011 0001f220     V........... ...
   1f4b0:	00000056 00000197 0000001a 0001f220     V........... ...
   1f4c0:	00000056 00000197 00000011 444c205d     V...........] LD
   1f4d0:	202c4620 00007856 0001f2e4 00000001      F, Vx..........
   1f4e0:	0001f4cc 0000000a 0001f4d8 0001f32c     ............,...
   1f4f0:	00000008 0001f32c 00000008 0001f220     ....,....... ...
   1f500:	00000056 0000018f 0001f4ec 0001f220     V........... ...
   1f510:	00000056 00000190 0000001b 0001f220     V........... ...
   1f520:	00000056 00000190 0000001a 00000000     V...............

0001f530 <str.1>:
   1f530:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1f540:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1f550:	41205d77 49204444 7856202c 0001f2e4     w] ADD I, Vx....
   1f560:	00000001 0001f551 0000000b 0001f55c     ....Q.......\...
   1f570:	0001f32c 00000008 0001f32c 00000008     ,.......,.......
   1f580:	0001f220 00000056 0000018b 0001f570      ...V.......p...
   1f590:	0001f220 00000056 0000018c 0000002e      ...V...........
   1f5a0:	444c205d 2c545320 00785620 0001f2e4     ] LD ST, Vx.....
   1f5b0:	00000001 0001f5a0 0000000b 0001f5ac     ................
   1f5c0:	0001f32c 00000008 0001f32c 00000008     ,.......,.......
   1f5d0:	0001f220 00000056 00000187 0001f5c0      ...V...........
   1f5e0:	0001f220 00000056 00000188 0000001b      ...V...........
   1f5f0:	444c205d 2c544420 00785620 0001f2e4     ] LD DT, Vx.....
   1f600:	00000001 0001f5f0 0000000b 0001f5fc     ................
   1f610:	0001f32c 00000008 0001f32c 00000008     ,.......,.......
   1f620:	0001f220 00000056 00000183 0001f610      ...V...........
   1f630:	0001f220 00000056 00000184 0000001b      ...V...........
   1f640:	444c205d 2c785620 00004b20 0001f2e4     ] LD Vx, K......
   1f650:	00000001 0001f640 0000000a 0001f64c     ....@.......L...
   1f660:	0001f32c 00000008 0001f32c 00000008     ,.......,.......
   1f670:	0001f220 00000056 0000017f 0001f660      ...V.......`...
   1f680:	0001f220 00000056 00000180 00000011      ...V...........
   1f690:	444c205d 2c785620 00544420 0001f2e4     ] LD Vx, DT.....
   1f6a0:	00000001 0001f690 0000000b 0001f69c     ................
   1f6b0:	0001f32c 00000008 0001f32c 00000008     ,.......,.......
   1f6c0:	0001f220 00000056 0000017b 0001f6b0      ...V...{.......
   1f6d0:	0001f220 00000056 0000017c 00000011      ...V...|.......
   1f6e0:	4b53205d 5620504e 00000078 0001f2e4     ] SKNP Vx.......
   1f6f0:	00000001 0001f6e0 00000009 0001f6ec     ................
   1f700:	0001f32c 00000008 0001f32c 00000008     ,.......,.......
   1f710:	0001f220 00000056 00000175 0001f700      ...V...u.......
   1f720:	0001f220 00000056 00000176 00000021      ...V...v...!...
   1f730:	0001f2e4 00000001 0001f334 00000008     ........4.......
   1f740:	0001f730 0001f32c 00000008 0001f32c     0...,.......,...
   1f750:	00000008 0001f220 00000056 0000016f     .... ...V...o...
   1f760:	0001f744 0001f220 00000056 00000170     D... ...V...p...
   1f770:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1f780:	006e202c 0001f2e4 00000001 0001f774     , n.........t...
   1f790:	0000000f 0001f784 0001f32c 00000008     ........,.......
   1f7a0:	0001f32c 00000008 0001f220 00000056     ,....... ...V...
   1f7b0:	00000156 0001f798 0001f220 00000056     V....... ...V...
   1f7c0:	00000157 0000001d 0001f220 00000056     W....... ...V...
   1f7d0:	00000158 0000001d 0001f220 00000056     X....... ...V...
   1f7e0:	0000015e 00000026 0001f220 00000056     ^...&... ...V...
   1f7f0:	0000015e 0000001d 0001f220 00000056     ^....... ...V...
   1f800:	00000160 00000021 00000000 00000000     `...!...........

0001f810 <str.2>:
   1f810:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1f820:	6574616c 65687420 6d657220 646e6961     late the remaind
   1f830:	77207265 20687469 69642061 6f736976     er with a diviso
   1f840:	666f2072 72657a20 0000006f 0001f220     r of zero... ...
   1f850:	00000056 00000163 00000025 0001f220     V...c...%... ...
   1f860:	00000056 00000165 0000002d 00000000     V...e...-.......

0001f870 <str.3>:
   1f870:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1f880:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1f890:	00000077 0001f220 00000056 00000165     w... ...V...e...
   1f8a0:	00000028 00000000 00000000 00000000     (...............

0001f8b0 <str.4>:
   1f8b0:	65747461 2074706d 73206f74 74666968     attempt to shift
   1f8c0:	66656c20 69772074 6f206874 66726576      left with overf
   1f8d0:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1f8e0:	0001f2e4 00000001 0001f8d3 0000000c     ................
   1f8f0:	0001f8e0 0001f32c 00000008 0001f32c     ....,.......,...
   1f900:	00000008 0001f220 00000056 00000152     .... ...V...R...
   1f910:	0001f8f4 0001f220 00000056 00000153     .... ...V...S...
   1f920:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1f930:	0001f2e4 00000001 0001f924 0000000c     ........$.......
   1f940:	0001f930 0001f32c 00000008 0001f32c     0...,.......,...
   1f950:	00000008 0001f220 00000056 0000014e     .... ...V...N...
   1f960:	0001f944 444c205d 202c4920 006e6e6e     D...] LD I, nnn.
   1f970:	0001f2e4 00000001 0001f964 0000000b     ........d.......
   1f980:	0001f970 0001f32c 00000008 0001f32c     p...,.......,...
   1f990:	00000008 0001f220 00000056 0000014a     .... ...V...J...
   1f9a0:	0001f984 4e53205d 78562045 7956202c     ....] SNE Vx, Vy
   1f9b0:	0001f2e4 00000001 0001f9a4 0000000c     ................
   1f9c0:	0001f9b0 0001f32c 00000008 0001f32c     ....,.......,...
   1f9d0:	00000008 0001f220 00000056 00000144     .... ...V...D...
   1f9e0:	0001f9c4 0001f220 00000056 00000145     .... ...V...E...
   1f9f0:	00000014 0001f220 00000056 00000145     .... ...V...E...
   1fa00:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1fa10:	0001f2e4 00000001 0001fa04 0000000c     ................
   1fa20:	0001fa10 0001f32c 00000008 0001f32c     ....,.......,...
   1fa30:	00000008 0001f220 00000056 0000013f     .... ...V...?...
   1fa40:	0001fa24 0001f220 00000056 00000140     $... ...V...@...
   1fa50:	00000020 0001f220 00000056 00000141      ... ...V...A...
   1fa60:	0000001d 0001f220 00000056 00000141     .... ...V...A...
   1fa70:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   1fa80:	00000079 0001f2e4 00000001 0001fa74     y...........t...
   1fa90:	0000000d 0001fa84 0001f32c 00000008     ........,.......
   1faa0:	0001f32c 00000008 0001f220 00000056     ,....... ...V...
   1fab0:	00000139 0001fa98 0001f220 00000056     9....... ...V...
   1fac0:	0000013a 0000001e 0001f220 00000056     :....... ...V...
   1fad0:	0000013a 00000038 0001f220 00000056     :...8... ...V...
   1fae0:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   1faf0:	7956202c 0001f2e4 00000001 0001fae8     , Vy............
   1fb00:	0000000c 0001faf4 0001f32c 00000008     ........,.......
   1fb10:	0001f32c 00000008 0001f220 00000056     ,....... ...V...
   1fb20:	00000134 0001fb08 0001f220 00000056     4....... ...V...
   1fb30:	00000135 0000001f 0001f220 00000056     5....... ...V...
   1fb40:	00000136 0000001d 0001f220 00000056     6....... ...V...
   1fb50:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   1fb60:	7956202c 0001f2e4 00000001 0001fb58     , Vy........X...
   1fb70:	0000000c 0001fb64 0001f32c 00000008     ....d...,.......
   1fb80:	0001f32c 00000008 0001f220 00000056     ,....... ...V...
   1fb90:	0000012e 0001fb78 0001f220 00000056     ....x... ...V...
   1fba0:	0000012f 0000001e 0001f220 00000056     /....... ...V...
   1fbb0:	0000012f 00000038 0001f220 00000056     /...8... ...V...
   1fbc0:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   1fbd0:	7956202c 0001f2e4 00000001 0001fbc8     , Vy............
   1fbe0:	0000000c 0001fbd4 0001f32c 00000008     ........,.......
   1fbf0:	0001f32c 00000008 0001f220 00000056     ,....... ...V...
   1fc00:	00000128 0001fbe8 0001f220 00000056     (....... ...V...
   1fc10:	00000129 0000001e 0001f220 00000056     )....... ...V...
   1fc20:	00000129 00000038 0001f220 00000056     )...8... ...V...
   1fc30:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   1fc40:	7956202c 0001f2e4 00000001 0001fc38     , Vy........8...
   1fc50:	0000000c 0001fc44 0001f32c 00000008     ....D...,.......
   1fc60:	0001f32c 00000008 0001f220 00000056     ,....... ...V...
   1fc70:	00000124 0001fc58 0001f220 00000056     $...X... ...V...
   1fc80:	00000125 0000001e 0001f220 00000056     %....... ...V...
   1fc90:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   1fca0:	7956202c 0001f2e4 00000001 0001fc98     , Vy............
   1fcb0:	0000000c 0001fca4 0001f32c 00000008     ........,.......
   1fcc0:	0001f32c 00000008 0001f220 00000056     ,....... ...V...
   1fcd0:	00000120 0001fcb8 0001f220 00000056      ....... ...V...
   1fce0:	00000121 0000001e 0001f220 00000056     !....... ...V...
   1fcf0:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   1fd00:	00795620 0001f2e4 00000001 0001fcf8      Vy.............
   1fd10:	0000000b 0001fd04 0001f32c 00000008     ........,.......
   1fd20:	0001f32c 00000008 0001f220 00000056     ,....... ...V...
   1fd30:	0000011c 0001fd18 0001f220 00000056     ........ ...V...
   1fd40:	0000011d 0000001e 0001f220 00000056     ........ ...V...
   1fd50:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   1fd60:	00795620 0001f2e4 00000001 0001fd58      Vy.........X...
   1fd70:	0000000b 0001fd64 0001f32c 00000008     ....d...,.......
   1fd80:	0001f32c 00000008 0001f220 00000056     ,....... ...V...
   1fd90:	00000118 0001fd78 0001f220 00000056     ....x... ...V...
   1fda0:	00000119 0000001d 0001f220 00000056     ........ ...V...
   1fdb0:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   1fdc0:	6b6b202c 0001f2e4 00000001 0001fdb8     , kk............
   1fdd0:	0000000c 0001fdc4 0001f32c 00000008     ........,.......
   1fde0:	0001f32c 00000008 0001f220 00000056     ,....... ...V...
   1fdf0:	00000114 0001fdd8 0001f220 00000056     ........ ...V...
   1fe00:	00000115 0000001d 0001f220 00000056     ........ ...V...
   1fe10:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   1fe20:	006b6b20 0001f2e4 00000001 0001fe18      kk.............
   1fe30:	0000000b 0001fe24 0001f32c 00000008     ....$...,.......
   1fe40:	0001f32c 00000008 0001f220 00000056     ,....... ...V...
   1fe50:	00000110 0001fe38 0001f220 00000056     ....8... ...V...
   1fe60:	00000111 00000011 6e49205d 696c6176     ........] Invali
   1fe70:	706f2064 0000203a 0001f2e4 00000001     d op: ..........
   1fe80:	0001fe68 0000000e 0001fe78 00000000     h.......x.......
   1fe90:	00000020 00000008 00000002 00000000      ...............
   1fea0:	00000000 00000004 00000003 00000001     ................
   1feb0:	00000020 00000008 00000002 00000000      ...............
   1fec0:	00000000 00000004 00000003 0001fe8c     ................
   1fed0:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   1fee0:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   1fef0:	0001fed0 0000001e 00000005 00000032     ............2...
   1ff00:	4553205d 2c785620 00795620 0001f2e4     ] SE Vx, Vy.....
   1ff10:	00000001 0001ff00 0000000b 0001ff0c     ................
   1ff20:	0001f32c 00000008 0001f32c 00000008     ,.......,.......
   1ff30:	0001f220 00000056 0000010a 0001ff20      ...V....... ...
   1ff40:	0001f220 00000056 0000010b 00000014      ...V...........
   1ff50:	0001f220 00000056 0000010b 00000021      ...V.......!...
   1ff60:	4e53205d 78562045 6b6b202c 0001f2e4     ] SNE Vx, kk....
   1ff70:	00000001 0001ff60 0000000c 0001ff6c     ....`.......l...
   1ff80:	0001f32c 00000008 0001f32c 00000008     ,.......,.......
   1ff90:	0001f220 00000056 00000104 0001ff80      ...V...........
   1ffa0:	0001f220 00000056 00000105 00000014      ...V...........
   1ffb0:	4553205d 20785620 00006b6b 0001f2e4     ] SE Vx kk......
   1ffc0:	00000001 0001ffb0 0000000a 0001ffbc     ................
   1ffd0:	0001f32c 00000008 0001f32c 00000008     ,.......,.......
   1ffe0:	0001f220 00000056 000000fe 0001ffd0      ...V...........
   1fff0:	0001f220 00000056 000000ff 00000014      ...V...........
   20000:	4143205d 6e204c4c 00006e6e 0001f2e4     ] CALL nnn......
   20010:	00000001 00020000 0000000a 0002000c     ................
   20020:	0001f32c 00000008 0001f32c 00000008     ,.......,.......
   20030:	0001f220 00000056 000000f9 00020020      ...V....... ...
   20040:	0001f2e4 00000001 0001f33c 00000008     ........<.......
   20050:	00020040 0001f32c 00000008 0001f32c     @...,.......,...
   20060:	00000008 0001f220 00000056 000000f5     .... ...V.......
   20070:	00020054 5953205d 6e6e2053 0000006e     T...] SYS nnn...
   20080:	0001f2e4 00000001 00020074 00000009     ........t.......
   20090:	00020080 0001f32c 00000008 0001f32c     ....,.......,...
   200a0:	00000008 0001f220 00000056 000000f1     .... ...V.......
   200b0:	00020094 20746f6e 6c706d69 6e656d65     ....not implemen
   200c0:	00646574 0001fed0 0000001e 00000002     ted.............
   200d0:	00000002 4552205d 00000054 0001f2e4     ....] RET.......
   200e0:	00000001 000200d4 00000005 000200dc     ................
   200f0:	0001f32c 00000008 0001f32c 00000008     ,.......,.......
   20100:	0001f220 00000056 000000ec 000200f0      ...V...........
   20110:	4c43205d 00000053 0001f2e4 00000001     ] CLS...........
   20120:	00020110 00000005 00020118 0001f32c     ............,...
   20130:	00000008 0001f32c 00000008 0001f220     ....,....... ...
   20140:	00000056 000000e5 0002012c 0001f220     V.......,... ...
   20150:	00000056 00000093 0000001b 0001f220     V........... ...
   20160:	00000056 00000097 00000009 0001f220     V........... ...
   20170:	00000056 000000bb 0000000d 0001f220     V........... ...
   20180:	00000056 000000be 0000000d 00011eff     V...............
   20190:	00000004 00000004 0001331f 74737552     .........3..Rust
   201a0:	49484320 630a3850 38706968 00000000      CHIP8.chip8....
   201b0:	00000000 000201a7 00000006 000201b0     ................
   201c0:	50494843 74732038 65747261 026a0a64     CHIP8 started.j.
   201d0:	3f6c0c6b eaa20c6d d6dcb6da d422006e     k.l?m.......n.".
   201e0:	02680366 15f06060 003007f0 17c71a12     f.h.``....0.....
   201f0:	ff690877 71d6f0a2 b6daeaa2 0160d6dc     w.i....q......`.
   20200:	fe7ba1e0 a1e00460 1f60027b b6da028b     ..{.`...{.`.....
   20210:	a1e00c60 0d60fe7d 027da1e0 028d1f60     `...}.`...}.`...
   20220:	f0a2d6dc 848671d6 3f609487 1f610286     .....q....`?..a.
   20230:	02461287 3f467812 1f478212 0047ff69     ..F..xF?..G.i.G.
   20240:	71d60169 02682a12 70800163 8a12b580     i..q.*h.c..p....
   20250:	0a63fe68 d5807080 a212013f 15800261     h.c..p..?...a...
   20260:	ba12013f 013f1580 1580c812 c212013f     ?.....?.....?...
   20270:	18f02060 348ed422 3e66d422 03660133     ` .."..4".f>3.f.
   20280:	0133fe68 16120268 fe49ff79 c812ff69     h.3.h...y.I.i...
   20290:	02490179 04600169 017618f0 fe764046     y.I.i.`...v.F@v.
   202a0:	f2a26c12 65f233fe 146429f1 55d40065     .l...3.e.)d.e..U
   202b0:	29f21574 ee0055d4 80808080 00808080     t..).U..........
   202c0:	00000000 50494843 6f642038 430a656e     ....CHIP8 done.C
   202d0:	38504948 6f687320 20646c75 20746f6e     HIP8 should not 
   202e0:	72646e65 2f747375 2f707061 2f637273     endrust/app/src/
   202f0:	70696863 73722e38 000202e3 00000015     chip8.rs........
   20300:	00000061 00000005 0a79656b 766f2078     a.......key.x ov
   20310:	6c667265 0000776f 000202e3 00000015     erflow..........
   20320:	000000ac 00000009 766f2079 6c667265     ........y overfl
   20330:	0000776f 000202e3 00000015 000000ad     ow..............
   20340:	00000009 000202e3 00000015 000000ae     ................
   20350:	00000015 00000000 00000000 00000000     ................

00020360 <str.0>:
   20360:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   20370:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   20380:	00000077 000202e3 00000015 000000ae     w...............
   20390:	00000011 00000000 00000000 00000000     ................

000203a0 <str.1>:
   203a0:	65747461 2074706d 61206f74 77206464     attempt to add w
   203b0:	20687469 7265766f 776f6c66 000202e3     ith overflow....
   203c0:	00000015 000000af 00000012 000202e3     ................
   203d0:	00000015 000000cb 00000009 000202e3     ................
   203e0:	00000015 000000cc 00000009 000202e3     ................
   203f0:	00000015 000000cd 00000015 000202e3     ................
   20400:	00000015 000000cd 00000011 000202e3     ................
   20410:	00000015 000000ce 00000012 20646162     ............bad 
   20420:	657a6973 73746573 20657a69 7265766f     sizesetsize over
   20430:	776f6c66 666f5f78 74657366 666f5f79     flowx_offsety_of
   20440:	74657366 000202e3 00000015 000000d4     fset............
   20450:	00000009 000a202c 000202e3 00000015     ...., ..........
   20460:	000000df 00000012 000202e3 00000015     ................
   20470:	00000113 0000001c 00000000 00000000     ................

00020480 <str.2>:
   20480:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20490:	20746361 68746977 65766f20 6f6c6672     act with overflo
   204a0:	00000077 000202e3 00000015 00000113     w...............
   204b0:	0000001b 000202e3 00000015 00000114     ................
   204c0:	0000001c 000202e3 00000015 00000114     ................
   204d0:	0000001b 000202e3 00000015 00000116     ................
   204e0:	00000008 000202e3 00000015 0000011d     ................
   204f0:	00000021 000202e3 00000015 0000011d     !...............
   20500:	00000020 000202e3 00000015 0000011e      ...............
   20510:	00000021 000202e3 00000015 0000011e     !...............
   20520:	00000020 000202e3 00000015 00000121      ...........!...
   20530:	00000024 000202e3 00000015 00000121     $...........!...
   20540:	00000023 000202e3 00000015 00000122     #..........."...
   20550:	00000024 000202e3 00000015 00000122     $..........."...
   20560:	00000023 000202e3 00000015 00000128     #...........(...
   20570:	0000000d 000202e3 00000015 0000012b     ............+...
   20580:	00000011 20746573 65786970 6620736c     ....set pixels f
   20590:	656c6961 00000064 000202e3 00000015     ailed...........
   205a0:	0000013c 00000005 6f6c6f63 766f2072     <.......color ov
   205b0:	6c667265 0000776f 000202e3 00000015     erflow..........
   205c0:	0000018e 00000009 000202e3 00000015     ................
   205d0:	0000018f 00000023 000202e3 00000015     ....#...........
   205e0:	0000018f 00000011 000202e3 00000015     ................
   205f0:	00000190 0000002c 000202e3 00000015     ....,...........
   20600:	00000192 00000036 000202e3 00000015     ....6...........
   20610:	00000192 00000016 000202e3 00000015     ................
   20620:	000001cd 00000009 000202e3 00000015     ................
   20630:	000001ce 00000009 000202e3 00000015     ................
   20640:	000001d5 0000000d 000202e3 00000015     ................
   20650:	000001e2 00000009 000202e3 00000015     ................
   20660:	000001e6 0000000d 000202e3 00000015     ................
   20670:	000001f2 00000024 000202e3 00000015     ....$...........
   20680:	000001f2 00000036 000202e3 00000015     ....6...........
   20690:	000001fa 00000016 50494843 6f742038     ........CHIP8 to
   206a0:	20686375 20746f6e 646e6168 0a64656c     uch not handled.
   206b0:	000202e3 00000015 00000222 00000005     ........".......
   206c0:	000202e3 00000015 0000023b 00000015     ........;.......
   206d0:	000202e3 00000015 0000023c 00000015     ........<.......
   206e0:	000202e3 00000015 0000023e 00000015     ........>.......
   206f0:	000202e3 00000015 0000023f 00000015     ........?.......
   20700:	000202e3 00000015 00000242 00000015     ........B.......
   20710:	000202e3 00000015 00000243 00000015     ........C.......
   20720:	000202e3 00000015 00000245 00000015     ........E.......
   20730:	000202e3 00000015 00000246 00000015     ........F.......
   20740:	000202e3 00000015 0000025e 00000015     ........^.......
   20750:	000202e3 00000015 0000025f 00000015     ........_.......
   20760:	000202e3 00000015 00000261 00000015     ........a.......
   20770:	000202e3 00000015 00000262 00000015     ........b.......
   20780:	000202e3 00000015 00000265 00000015     ........e.......
   20790:	000202e3 00000015 00000266 00000015     ........f.......
   207a0:	000202e3 00000015 00000268 00000015     ........h.......
   207b0:	000202e3 00000015 00000269 00000015     ........i.......
   207c0:	000202e3 00000015 0000026b 00000015     ........k.......
   207d0:	000202e3 00000015 0000026c 00000015     ........l.......
   207e0:	000202e3 00000015 0000026e 00000015     ........n.......
   207f0:	000202e3 00000015 0000026f 00000015     ........o.......
   20800:	000202e3 00000015 0000027e 00000019     ........~.......
   20810:	000202e3 00000015 00000286 00000018     ................
	...
   20828:	00010000 00010001 00020001 00020002     ................
   20838:	00030002 00030003 00040003 00040004     ................
   20848:	00050004 00050005 00060005 00060006     ................
   20858:	00070006 00070007 00080007 00080008     ................
   20868:	00090009 00090009 000a000a 000a000a     ................
   20878:	000b000b 000c000b 000c000c 000d000c     ................
   20888:	000d000d 000e000e 000e000e 000f000f     ................
   20898:	0010000f 00100010 00110011 00110011     ................
   208a8:	00120012 00130012 00130013 00140014     ................
   208b8:	00140014 00150015 00160015 00160016     ................
   208c8:	00170017 00170017 00180018 00190018     ................
   208d8:	00190019 001a0019 001a001a 001b001b     ................
   208e8:	001c001b 001c001c 001d001c 001d001d     ................
   208f8:	001e001e 001f001e 001f001f 0020001f     .............. .
   20908:	00200020 00200020 00000000 00000000      . . . .........
   20918:	00010000 00010001 00020001 00020002     ................
   20928:	00030002 00030003 00040003 00040004     ................
   20938:	00050004 00050005 00060005 00060006     ................
   20948:	00070006 00070007 00080007 00080008     ................
   20958:	00090009 00090009 000a000a 000a000a     ................
   20968:	000b000b 000b000b 000c000c 000d000c     ................
   20978:	000d000d 000e000d 000e000e 000f000e     ................
   20988:	000f000f 00100010 00100010 00110011     ................
   20998:	00120011 00120012 00130012 00130013     ................
   209a8:	00140013 00140014 00150015 00160015     ................
   209b8:	00160016 00170016 00170017 00180018     ................
   209c8:	00190018 00190019 001a001a 001b001a     ................
   209d8:	001b001b 001c001c 001d001c 001d001d     ................
   209e8:	001e001e 001e001e 001f001f 0020001f     .............. .
   209f8:	00200020 00200020 00000000 00000000      . . . .........
   20a08:	00010000 00010001 00020001 00020002     ................
   20a18:	00030002 00030003 00040003 00040004     ................
   20a28:	00050004 00050005 00060005 00060006     ................
   20a38:	00070006 00070007 00080007 00080008     ................
   20a48:	00090009 00090009 000a000a 000a000a     ................
   20a58:	000b000b 000b000b 000c000c 000d000c     ................
   20a68:	000d000d 000e000d 000e000e 000f000f     ................
   20a78:	000f000f 00100010 00100010 00110011     ................
   20a88:	00120011 00120012 00130012 00130013     ................
   20a98:	00140013 00140014 00150015 00160015     ................
   20aa8:	00160016 00170016 00170017 00180018     ................
   20ab8:	00190018 00190019 001a001a 001b001a     ................
   20ac8:	001b001b 001c001c 001d001c 001d001d     ................
   20ad8:	001e001e 001e001e 001f001f 0020001f     .............. .
   20ae8:	00200020 00200020 00000000 00000000      . . . .........
   20af8:	00010000 00010001 00020001 00020002     ................
   20b08:	00030002 00030003 00040003 00040004     ................
   20b18:	00050004 00050005 00060005 00060006     ................
   20b28:	00070006 00070007 00080008 00080008     ................
   20b38:	00090009 00090009 000a000a 000a000a     ................
   20b48:	000b000b 000b000b 000c000c 000d000c     ................
   20b58:	000d000d 000e000d 000e000e 000f000f     ................
   20b68:	000f000f 00100010 00100010 00110011     ................
   20b78:	00120011 00120012 00130012 00130013     ................
   20b88:	00140014 00140014 00150015 00160015     ................
   20b98:	00160016 00170017 00170017 00180018     ................
   20ba8:	00190018 00190019 001a001a 001b001a     ................
   20bb8:	001b001b 001c001c 001d001c 001d001d     ................
   20bc8:	001e001e 001e001e 001f001f 0020001f     .............. .
   20bd8:	00200020 00200020 00000000 00000000      . . . .........
   20be8:	00010000 00010001 00020001 00020002     ................
   20bf8:	00030002 00030003 00040003 00040004     ................
   20c08:	00050004 00050005 00060005 00060006     ................
   20c18:	00070006 00070007 00080008 00080008     ................
   20c28:	00090009 00090009 000a000a 000a000a     ................
   20c38:	000b000b 000b000b 000c000c 000d000c     ................
   20c48:	000d000d 000e000d 000e000e 000f000f     ................
   20c58:	000f000f 00100010 00100010 00110011     ................
   20c68:	00120011 00120012 00130012 00130013     ................
   20c78:	00140014 00140014 00150015 00160015     ................
   20c88:	00160016 00170017 00170017 00180018     ................
   20c98:	00190018 00190019 001a001a 001b001a     ................
   20ca8:	001b001b 001c001c 001d001c 001d001d     ................
   20cb8:	001e001e 001f001e 001f001f 0020001f     .............. .
   20cc8:	00200020 00200020 00000000 00000000      . . . .........
   20cd8:	00010000 00010001 00020001 00020002     ................
   20ce8:	00030002 00030003 00040003 00040004     ................
   20cf8:	00050004 00050005 00060005 00060006     ................
   20d08:	00070006 00070007 00080008 00080008     ................
   20d18:	00090009 00090009 000a000a 000a000a     ................
   20d28:	000b000b 000c000b 000c000c 000d000c     ................
   20d38:	000d000d 000e000d 000e000e 000f000f     ................
   20d48:	000f000f 00100010 00110010 00110011     ................
   20d58:	00120011 00120012 00130012 00130013     ................
   20d68:	00140014 00140014 00150015 00160015     ................
   20d78:	00160016 00170017 00170017 00180018     ................
   20d88:	00190018 00190019 001a001a 001b001a     ................
   20d98:	001b001b 011c001c 011d011c 011d011d     ................
   20da8:	011e011e 011f011e 011f011f 0120011f     .............. .
   20db8:	01200120 01200120 00000000 00000000      . . . .........
   20dc8:	00010000 00010001 00020001 00020002     ................
   20dd8:	00030002 00030003 00040003 00040004     ................
   20de8:	00050004 00050005 00060005 00060006     ................
   20df8:	00070007 00070007 00080008 00080008     ................
   20e08:	00090009 00090009 000a000a 000a000a     ................
   20e18:	000b000b 000c000b 000c000c 000d000c     ................
   20e28:	000d000d 000e000d 000e000e 000f000f     ................
   20e38:	000f000f 00100010 00110010 00110011     ................
   20e48:	00120011 00120012 00130012 00130013     ................
   20e58:	00140014 00140014 00150015 00160015     ................
   20e68:	01160116 01170117 01180117 01180118     ................
   20e78:	01190118 01190119 011a011a 011b011a     ................
   20e88:	011b011b 011c011c 011d011c 011d011d     ................
   20e98:	011e011e 011f011e 011f011f 0120011f     .............. .
   20ea8:	01200120 01200120 01000100 01000100      . . . .........
   20eb8:	01010100 01010101 01020101 01020102     ................
   20ec8:	01030102 01030103 01040103 01040104     ................
   20ed8:	01050104 01050105 01060105 01060106     ................
   20ee8:	01070107 01070107 01080108 01080108     ................
   20ef8:	01090109 01090109 010a010a 010a010a     ................
   20f08:	010b010b 010c010b 010c010c 010d010c     ................
   20f18:	010d010d 010e010d 010e010e 010f010f     ................
   20f28:	010f010f 01100110 01110110 01110111     ................
   20f38:	01120111 01120112 01130112 01130113     ................
   20f48:	01140114 01140114 01150115 01160115     ................
   20f58:	01160116 01170117 01180117 01180118     ................
   20f68:	01190118 01190119 011a011a 011b011a     ................
   20f78:	011b011b 011c011c 011d011c 011d011d     ................
   20f88:	011e011e 011f011e 011f011f 01200120     ............ . .
   20f98:	01200120 01200120 01000100 01000100      . . . .........
   20fa8:	01010100 01010101 01020101 01020102     ................
   20fb8:	01030102 01030103 01040103 01040104     ................
   20fc8:	01050104 01050105 01060105 01060106     ................
   20fd8:	01070107 01070107 01080108 01080108     ................
   20fe8:	01090109 01090109 010a010a 010a010a     ................
   20ff8:	010b010b 010c010b 010c010c 010d010c     ................
   21008:	010d010d 010e010e 010e010e 010f010f     ................
   21018:	010f010f 01100110 01110110 01110111     ................
   21028:	01120111 01120112 01130113 01130113     ................
   21038:	01140114 01140114 01150115 01160115     ................
   21048:	01160116 01170117 01180117 01180118     ................
   21058:	01190119 01190119 011a011a 011b011a     ................
   21068:	011b011b 011c011c 011d011c 011d011d     ................
   21078:	011e011e 011f011e 011f011f 01200120     ............ . .
   21088:	01200120 01200120 01000100 01000100      . . . .........
   21098:	01010100 01010101 01020101 01020102     ................
   210a8:	01030102 01030103 01040103 01040104     ................
   210b8:	01050104 01050105 01060106 01060106     ................
   210c8:	01070107 01070107 01080108 01080108     ................
   210d8:	01090109 01090109 010a010a 010a010a     ................
   210e8:	010b010b 010c010b 010c010c 010d010c     ................
   210f8:	010d010d 010e010e 010e010e 010f010f     ................
   21108:	010f010f 01100110 01110110 01110111     ................
   21118:	01120111 01120112 01130113 01130113     ................
   21128:	01140114 01140114 01150115 01160115     ................
   21138:	01160116 01170117 01180117 01180118     ................
   21148:	01190119 01190119 011a011a 011b011a     ................
   21158:	011b011b 011c011c 011d011c 011d011d     ................
   21168:	011e011e 011f011e 011f011f 01200120     ............ . .
   21178:	01200120 01200120 01000100 01000100      . . . .........
   21188:	01010100 01010101 01020101 01020102     ................
   21198:	01030102 01030103 01040103 01040104     ................
   211a8:	01050104 01050105 01060106 01060106     ................
   211b8:	01070107 01070107 01080108 01080108     ................
   211c8:	01090109 01090109 010a010a 010a010a     ................
   211d8:	010b010b 010c010b 010c010c 010d010c     ................
   211e8:	010d010d 010e010e 010e010e 010f010f     ................
   211f8:	010f010f 01100110 01110110 01110111     ................
   21208:	01120111 01120112 01130113 01130113     ................
   21218:	01140114 01150114 01150115 01160115     ................
   21228:	01160116 01170117 01180117 01180118     ................
   21238:	01190119 011a0119 011a011a 011b011a     ................
   21248:	021b021b 021c021c 021d021c 021d021d     ................
   21258:	021e021e 021f021e 021f021f 02200220     ............ . .
   21268:	02200220 02200220 01000100 01000100      . . . .........
   21278:	01010100 01010101 01020101 01020102     ................
   21288:	01030102 01030103 01040103 01040104     ................
   21298:	01050104 01050105 01060106 01060106     ................
   212a8:	01070107 01070107 01080108 01080108     ................
   212b8:	01090109 01090109 010a010a 010b010a     ................
   212c8:	010b010b 010c010b 010c010c 010d010c     ................
   212d8:	010d010d 010e010e 010e010e 010f010f     ................
   212e8:	0110010f 01100110 01110110 01110111     ................
   212f8:	01120111 01120112 01130113 01130113     ................
   21308:	01140114 01150114 01150115 01160115     ................
   21318:	01160116 02170117 02180217 02180218     ................
   21328:	02190219 021a0219 021a021a 021b021a     ................
   21338:	021b021b 021c021c 021d021c 021d021d     ................
   21348:	021e021e 021f021e 021f021f 02200220     ............ . .
   21358:	02200220 02200220 01000100 01000100      . . . .........
   21368:	01010100 01010101 01020101 01020102     ................
   21378:	01030102 01030103 01040103 01040104     ................
   21388:	01050104 01050105 01060106 01060106     ................
   21398:	01070107 01070107 01080108 01080108     ................
   213a8:	01090109 01090109 010a010a 010b010a     ................
   213b8:	010b010b 010c010b 010c010c 010d010c     ................
   213c8:	020d010d 020e020e 020e020e 020f020f     ................
   213d8:	0210020f 02100210 02110210 02110211     ................
   213e8:	02120211 02120212 02130213 02130213     ................
   213f8:	02140214 02150214 02150215 02160215     ................
   21408:	02160216 02170217 02180217 02180218     ................
   21418:	02190219 021a0219 021a021a 021b021a     ................
   21428:	021b021b 021c021c 021d021c 021d021d     ................
   21438:	021e021e 021f021e 021f021f 02200220     ............ . .
   21448:	02200220 02200220 02000200 02000200      . . . .........
   21458:	02010200 02010201 02020201 02020202     ................
   21468:	02030202 02030203 02040203 02040204     ................
   21478:	02050204 02050205 02060206 02060206     ................
   21488:	02070207 02070207 02080208 02080208     ................
   21498:	02090209 02090209 020a020a 020b020a     ................
   214a8:	020b020b 020c020b 020c020c 020d020c     ................
   214b8:	020d020d 020e020e 020e020e 020f020f     ................
   214c8:	0210020f 02100210 02110210 02110211     ................
   214d8:	02120211 02120212 02130213 02130213     ................
   214e8:	02140214 02150214 02150215 02160215     ................
   214f8:	02160216 02170217 02180217 02180218     ................
   21508:	02190219 021a0219 021a021a 021b021b     ................
   21518:	021b021b 021c021c 021d021c 021d021d     ................
   21528:	021e021e 021f021e 021f021f 02200220     ............ . .
   21538:	02200220 02200220 02000200 02000200      . . . .........
   21548:	02010200 02010201 02020201 02020202     ................
   21558:	02030202 02030203 02040203 02040204     ................
   21568:	02050204 02050205 02060206 02060206     ................
   21578:	02070207 02070207 02080208 02080208     ................
   21588:	02090209 02090209 020a020a 020b020a     ................
   21598:	020b020b 020c020b 020c020c 020d020c     ................
   215a8:	020d020d 020e020e 020e020e 020f020f     ................
   215b8:	0210020f 02100210 02110210 02110211     ................
   215c8:	02120212 02120212 02130213 02130213     ................
   215d8:	02140214 02150214 02150215 02160215     ................
   215e8:	02160216 02170217 02180217 02180218     ................
   215f8:	02190219 021a0219 021a021a 021b021b     ................
   21608:	021b021b 021c021c 021d021c 021d021d     ................
   21618:	021e021e 031f021e 031f031f 03200320     ............ . .
   21628:	03200320 02200320 02000200 02000200      . . . .........
   21638:	02010200 02010201 02020201 02020202     ................
   21648:	02030202 02030203 02040203 02040204     ................
   21658:	02050205 02050205 02060206 02060206     ................
   21668:	02070207 02070207 02080208 02080208     ................
   21678:	02090209 020a0209 020a020a 020b020a     ................
   21688:	020b020b 020c020b 020c020c 020d020d     ................
   21698:	020d020d 020e020e 020e020e 020f020f     ................
   216a8:	0210020f 02100210 02110210 02110211     ................
   216b8:	02120212 02120212 02130213 02130213     ................
   216c8:	02140214 02150214 02150215 02160216     ................
   216d8:	02160216 02170217 02180217 02180218     ................
   216e8:	02190219 021a0219 021a021a 031b021b     ................
   216f8:	031b031b 031c031c 031d031c 031d031d     ................
   21708:	031e031e 031f031e 031f031f 03200320     ............ . .
   21718:	03200320 03200320 02000200 02000200      . . . .........
   21728:	02010200 02010201 02020201 02020202     ................
   21738:	02030202 02030203 02040203 02040204     ................
   21748:	02050205 02050205 02060206 02060206     ................
   21758:	02070207 02070207 02080208 02080208     ................
   21768:	02090209 020a0209 020a020a 020b020a     ................
   21778:	020b020b 020c020b 020c020c 020d020d     ................
   21788:	020d020d 020e020e 020e020e 020f020f     ................
   21798:	0210020f 02100210 02110210 02110211     ................
   217a8:	02120212 02120212 02130213 02130213     ................
   217b8:	02140214 02150214 02150215 02160216     ................
   217c8:	02160216 02170217 03180217 03180318     ................
   217d8:	03190319 031a0319 031a031a 031b031b     ................
   217e8:	031c031b 031c031c 031d031c 031d031d     ................
   217f8:	031e031e 031f031e 031f031f 03200320     ............ . .
   21808:	03200320 03200320 02000200 02000200      . . . .........
   21818:	02010200 02010201 02020201 02020202     ................
   21828:	02030202 02030203 02040203 02040204     ................
   21838:	02050205 02050205 02060206 02060206     ................
   21848:	02070207 02070207 02080208 02080208     ................
   21858:	02090209 020a0209 020a020a 020b020a     ................
   21868:	020b020b 020c020b 020c020c 020d020d     ................
   21878:	020d020d 020e020e 020e020e 020f020f     ................
   21888:	0210020f 02100210 02110210 02110211     ................
   21898:	02120212 02120212 02130213 02140213     ................
   218a8:	02140214 03150314 03150315 03160316     ................
   218b8:	03160316 03170317 03180317 03180318     ................
   218c8:	03190319 031a0319 031a031a 031b031b     ................
   218d8:	031c031b 031c031c 031d031c 031d031d     ................
   218e8:	031e031e 031f031e 031f031f 03200320     ............ . .
   218f8:	03200320 03200320 02000200 02000200      . . . .........
   21908:	02010200 02010201 02020201 02020202     ................
   21918:	02030202 02030203 02040203 02040204     ................
   21928:	02050205 02050205 02060206 02060206     ................
   21938:	02070207 02070207 02080208 02080208     ................
   21948:	02090209 020a0209 020a020a 020b020a     ................
   21958:	020b020b 020c020b 020c020c 020d020d     ................
   21968:	030d030d 030e030e 030f030e 030f030f     ................
   21978:	0310030f 03100310 03110310 03110311     ................
   21988:	03120312 03120312 03130313 03140313     ................
   21998:	03140314 03150314 03150315 03160316     ................
   219a8:	03160316 03170317 03180317 03180318     ................
   219b8:	03190319 031a0319 031a031a 031b031b     ................
   219c8:	031c031b 031c031c 031d031c 031d031d     ................
   219d8:	031e031e 031f031e 031f031f 03200320     ............ . .
   219e8:	03200320 03200320 02000200 02000200      . . . .........
   219f8:	03010200 03010301 03020301 03020302     ................
   21a08:	03030302 03030303 03040303 03040304     ................
   21a18:	03050305 03050305 03060306 03060306     ................
   21a28:	03070307 03070307 03080308 03090308     ................
   21a38:	03090309 030a0309 030a030a 030b030a     ................
   21a48:	030b030b 030c030b 030c030c 030d030d     ................
   21a58:	030d030d 030e030e 030f030e 030f030f     ................
   21a68:	0310030f 03100310 03110310 03110311     ................
   21a78:	03120312 03120312 03130313 03140313     ................
   21a88:	03140314 03150314 03150315 03160316     ................
   21a98:	03170316 03170317 03180317 03180318     ................
   21aa8:	03190319 031a0319 031a031a 031b031b     ................
   21ab8:	031c031b 031c031c 031d031d 031d031d     ................
   21ac8:	041e041e 041f041e 041f041f 04200420     ............ . .
   21ad8:	04200420 04200420 03000300 03000300      . . . .........
   21ae8:	03010300 03010301 03020301 03020302     ................
   21af8:	03030302 03030303 03040303 03040304     ................
   21b08:	03050305 03050305 03060306 03060306     ................
   21b18:	03070307 03070307 03080308 03090308     ................
   21b28:	03090309 030a0309 030a030a 030b030a     ................
   21b38:	030b030b 030c030b 030c030c 030d030d     ................
   21b48:	030d030d 030e030e 030f030e 030f030f     ................
   21b58:	0310030f 03100310 03110311 03110311     ................
   21b68:	03120312 03120312 03130313 03140313     ................
   21b78:	03140314 03150314 03150315 03160316     ................
   21b88:	03170316 03170317 03180317 03180318     ................
   21b98:	03190319 031a0319 031a031a 041b031b     ................
   21ba8:	041c041b 041c041c 041d041d 041d041d     ................
   21bb8:	041e041e 041f041e 041f041f 04200420     ............ . .
   21bc8:	04200420 04200420 03000300 03000300      . . . .........
   21bd8:	03010300 03010301 03020301 03020302     ................
   21be8:	03030302 03030303 03040303 03040304     ................
   21bf8:	03050305 03050305 03060306 03060306     ................
   21c08:	03070307 03070307 03080308 03090308     ................
   21c18:	03090309 030a0309 030a030a 030b030a     ................
   21c28:	030b030b 030c030c 030c030c 030d030d     ................
   21c38:	030d030d 030e030e 030f030e 030f030f     ................
   21c48:	0310030f 03100310 03110311 03110311     ................
   21c58:	03120312 03120312 03130313 03140313     ................
   21c68:	03140314 03150314 03150315 03160316     ................
   21c78:	03170316 03170317 03180318 04180418     ................
   21c88:	04190419 041a0419 041a041a 041b041b     ................
   21c98:	041c041b 041c041c 041d041d 041e041d     ................
   21ca8:	041e041e 041f041e 041f041f 04200420     ............ . .
   21cb8:	04200420 04200420 03000300 03000300      . . . .........
   21cc8:	03010300 03010301 03020301 03020302     ................
   21cd8:	03030302 03030303 03040303 03040304     ................
   21ce8:	03050305 03050305 03060306 03060306     ................
   21cf8:	03070307 03070307 03080308 03090308     ................
   21d08:	03090309 030a0309 030a030a 030b030a     ................
   21d18:	030b030b 030c030c 030c030c 030d030d     ................
   21d28:	030d030d 030e030e 030f030e 030f030f     ................
   21d38:	0310030f 03100310 03110311 03110311     ................
   21d48:	03120312 03120312 03130313 03140313     ................
   21d58:	03140314 03150314 03150315 04160316     ................
   21d68:	04170416 04170417 04180418 04190418     ................
   21d78:	04190419 041a0419 041a041a 041b041b     ................
   21d88:	041c041b 041c041c 041d041d 041e041d     ................
   21d98:	041e041e 041f041e 041f041f 04200420     ............ . .
   21da8:	04200420 04200420 03000300 03000300      . . . .........
   21db8:	03010300 03010301 03020301 03020302     ................
   21dc8:	03030302 03030303 03040303 03040304     ................
   21dd8:	03050305 03050305 03060306 03060306     ................
   21de8:	03070307 03070307 03080308 03090308     ................
   21df8:	03090309 030a0309 030a030a 030b030a     ................
   21e08:	030b030b 030c030c 030c030c 030d030d     ................
   21e18:	030d030d 030e030e 030f030e 030f030f     ................
   21e28:	0310030f 03100310 03110311 03110311     ................
   21e38:	04120412 04130412 04130413 04140413     ................
   21e48:	04140414 04150414 04150415 04160416     ................
   21e58:	04170416 04170417 04180418 04190418     ................
   21e68:	04190419 041a041a 041a041a 041b041b     ................
   21e78:	041c041b 041c041c 041d041d 041e041d     ................
   21e88:	041e041e 041f041e 041f041f 04200420     ............ . .
   21e98:	04200420 04200420 03000300 03000300      . . . .........
   21ea8:	03010300 03010301 03020301 03020302     ................
   21eb8:	03030302 03030303 03040304 03040304     ................
   21ec8:	03050305 03050305 03060306 03060306     ................
   21ed8:	03070307 03080307 03080308 03090308     ................
   21ee8:	03090309 030a0309 030a030a 030b030a     ................
   21ef8:	030b030b 030c030c 030c030c 030d030d     ................
   21f08:	040e040d 040e040e 040f040e 040f040f     ................
   21f18:	0410040f 04100410 04110411 04110411     ................
   21f28:	04120412 04130412 04130413 04140413     ................
   21f38:	04140414 04150414 04150415 04160416     ................
   21f48:	04170416 04170417 04180418 04190418     ................
   21f58:	04190419 041a041a 041b041a 041b041b     ................
   21f68:	041c041b 041c041c 041d041d 051e051d     ................
   21f78:	051e051e 051f051f 051f051f 05200520     ............ . .
   21f88:	05200520 05200520 03000300 03000300      . . . .........
   21f98:	03010300 03010301 03020301 03020302     ................
   21fa8:	03030302 03030303 03040304 03040304     ................
   21fb8:	03050305 03050305 04060306 04060406     ................
   21fc8:	04070407 04080407 04080408 04090408     ................
   21fd8:	04090409 040a0409 040a040a 040b040a     ................
   21fe8:	040b040b 040c040c 040c040c 040d040d     ................
   21ff8:	040e040d 040e040e 040f040e 040f040f     ................
   22008:	0410040f 04100410 04110411 04110411     ................
   22018:	04120412 04130412 04130413 04140413     ................
   22028:	04140414 04150415 04150415 04160416     ................
   22038:	04170416 04170417 04180418 04190418     ................
   22048:	04190419 041a041a 041b041a 051b051b     ................
   22058:	051c051c 051c051c 051d051d 051e051d     ................
   22068:	051e051e 051f051f 051f051f 05200520     ............ . .
   22078:	05200520 05200520 04000400 04000400      . . . .........
   22088:	04010400 04010401 04020401 04020402     ................
   22098:	04030402 04030403 04040404 04040404     ................
   220a8:	04050405 04050405 04060406 04060406     ................
   220b8:	04070407 04080407 04080408 04090408     ................
   220c8:	04090409 040a0409 040a040a 040b040a     ................
   220d8:	040b040b 040c040c 040c040c 040d040d     ................
   220e8:	040e040d 040e040e 040f040e 040f040f     ................
   220f8:	04100410 04100410 04110411 04110411     ................
   22108:	04120412 04130412 04130413 04140413     ................
   22118:	04140414 04150415 04150415 04160416     ................
   22128:	04170416 04170417 04180418 05190418     ................
   22138:	05190519 051a051a 051b051a 051b051b     ................
   22148:	051c051c 051c051c 051d051d 051e051d     ................
   22158:	051e051e 051f051f 0520051f 05200520     .......... . . .
   22168:	05200520 05200520 04000400 04000400      . . . .........
   22178:	04010400 04010401 04020401 04020402     ................
   22188:	04030402 04030403 04040404 04040404     ................
   22198:	04050405 04050405 04060406 04060406     ................
   221a8:	04070407 04080407 04080408 04090408     ................
   221b8:	04090409 040a0409 040a040a 040b040b     ................
   221c8:	040b040b 040c040c 040c040c 040d040d     ................
   221d8:	040e040d 040e040e 040f040e 040f040f     ................
   221e8:	04100410 04100410 04110411 04110411     ................
   221f8:	04120412 04130412 04130413 04140413     ................
   22208:	04140414 04150415 04150415 04160416     ................
   22218:	05170516 05170517 05180518 05190518     ................
   22228:	05190519 051a051a 051b051a 051b051b     ................
   22238:	051c051c 051d051c 051d051d 051e051d     ................
   22248:	051e051e 051f051f 0520051f 05200520     .......... . . .
   22258:	05200520 05200520 04000400 04000400      . . . .........
   22268:	04010400 04010401 04020401 04020402     ................
   22278:	04030402 04030403 04040404 04040404     ................
   22288:	04050405 04050405 04060406 04060406     ................
   22298:	04070407 04080407 04080408 04090408     ................
   222a8:	04090409 040a0409 040a040a 040b040b     ................
   222b8:	040b040b 040c040c 040c040c 040d040d     ................
   222c8:	040e040d 040e040e 040f040e 040f040f     ................
   222d8:	04100410 04100410 04110411 04120411     ................
   222e8:	04120412 04130412 04130413 04140413     ................
   222f8:	05140414 05150515 05150515 05160516     ................
   22308:	05170516 05170517 05180518 05190518     ................
   22318:	05190519 051a051a 051b051a 051b051b     ................
   22328:	051c051c 051d051c 051d051d 051e051e     ................
   22338:	051e051e 051f051f 0520061f 05200520     .......... . . .
   22348:	05200520 05200520 04000400 04000400      . . . .........
   22358:	04010400 04010401 04020401 04020402     ................
   22368:	04030402 04030403 04040404 04040404     ................
   22378:	04050405 04050405 04060406 04070406     ................
   22388:	04070407 04080407 04080408 04090408     ................
   22398:	04090409 040a0409 040a040a 040b040b     ................
   223a8:	040b040b 040c040c 040d040c 040d040d     ................
   223b8:	040e040d 040e040e 040f040e 040f040f     ................
   223c8:	04100410 04100410 04110411 05120511     ................
   223d8:	05120512 05130512 05130513 05140513     ................
   223e8:	05140514 05150515 05160515 05160516     ................
   223f8:	05170517 05180517 05180518 05190519     ................
   22408:	051a0519 051a051a 051b051a 051b051b     ................
   22418:	051c051c 051d051c 061d061d 061e061e     ................
   22428:	061f061e 061f061f 06200620 06200620     ........ . . . .
   22438:	05200620 05200520 04000400 04000400      . . . .........
   22448:	04010400 04010401 04020401 04020402     ................
   22458:	04030402 04030403 04040404 04040404     ................
   22468:	04050405 04050405 04060406 04070406     ................
   22478:	04070407 04080407 04080408 04090408     ................
   22488:	04090409 040a0409 040a040a 040b040b     ................
   22498:	040b040b 040c040c 040d040c 040d040d     ................
   224a8:	050e040d 050e050e 050f050f 050f050f     ................
   224b8:	05100510 05100510 05110511 05120511     ................
   224c8:	05120512 05130512 05130513 05140514     ................
   224d8:	05140514 05150515 05160515 05160516     ................
   224e8:	05170517 05180517 05180518 05190519     ................
   224f8:	051a0519 051a051a 061b051b 061b061b     ................
   22508:	061c061c 061d061c 061d061d 061e061e     ................
   22518:	061f061e 061f061f 06200620 06200620     ........ . . . .
   22528:	06200620 06200620 04000400 04000400      . . . .........
   22538:	04010400 04010401 04020401 04020402     ................
   22548:	04030402 04030403 04040404 04040404     ................
   22558:	04050405 04050405 04060406 04070406     ................
   22568:	04070407 04080407 04080408 04090408     ................
   22578:	04090409 050a0509 050a050a 050b050b     ................
   22588:	050b050b 050c050c 050d050c 050d050d     ................
   22598:	050e050d 050e050e 050f050f 050f050f     ................
   225a8:	05100510 05110510 05110511 05120511     ................
   225b8:	05120512 05130512 05130513 05140514     ................
   225c8:	05140514 05150515 05160515 05160516     ................
   225d8:	05170517 05180517 05180518 06190519     ................
   225e8:	061a0619 061a061a 061b061b 061c061b     ................
   225f8:	061c061c 061d061d 061d061d 061e061e     ................
   22608:	061f061e 061f061f 06200620 06200620     ........ . . . .
   22618:	06200620 06200620 05000500 05000500      . . . .........
   22628:	05010500 05010501 05020501 05020502     ................
   22638:	05030502 05030503 05040504 05040504     ................
   22648:	05050505 05050505 05060506 05070506     ................
   22658:	05070507 05080507 05080508 05090508     ................
   22668:	05090509 050a0509 050a050a 050b050b     ................
   22678:	050b050b 050c050c 050d050c 050d050d     ................
   22688:	050e050d 050e050e 050f050f 050f050f     ................
   22698:	05100510 05110510 05110511 05120511     ................
   226a8:	05120512 05130512 05130513 05140514     ................
   226b8:	05140514 05150515 05160515 05160516     ................
   226c8:	06170517 06180617 06180618 06190619     ................
   226d8:	061a0619 061a061a 061b061b 061c061b     ................
   226e8:	061c061c 061d061d 061e061d 061e061e     ................
   226f8:	061f061f 0620061f 06200620 06200620     ...... . . . . .
   22708:	06200620 06200620 05000500 05000500      . . . .........
   22718:	05010500 05010501 05020501 05020502     ................
   22728:	05030503 05030503 05040504 05040504     ................
   22738:	05050505 05050505 05060506 05070506     ................
   22748:	05070507 05080507 05080508 05090508     ................
   22758:	05090509 050a050a 050a050a 050b050b     ................
   22768:	050b050b 050c050c 050d050c 050d050d     ................
   22778:	050e050d 050e050e 050f050f 050f050f     ................
   22788:	05100510 05110510 05110511 05120511     ................
   22798:	05120512 05130513 05130513 05140514     ................
   227a8:	05140514 05150515 06160515 06160616     ................
   227b8:	06170617 06180617 06180618 06190619     ................
   227c8:	061a0619 061a061a 061b061b 061c061b     ................
   227d8:	061c061c 061d061d 061e061d 061e061e     ................
   227e8:	061f061f 0720071f 06200620 06200620     ...... . . . . .
   227f8:	06200620 06200620 05000500 05000500      . . . .........
   22808:	05010500 05010501 05020501 05020502     ................
   22818:	05030503 05030503 05040504 05040504     ................
   22828:	05050505 05060505 05060506 05070506     ................
   22838:	05070507 05080507 05080508 05090508     ................
   22848:	05090509 050a050a 050a050a 050b050b     ................
   22858:	050c050b 050c050c 050d050c 050d050d     ................
   22868:	050e050e 050e050e 050f050f 050f050f     ................
   22878:	05100510 05110510 05110511 05120511     ................
   22888:	05120512 05130513 05130513 05140514     ................
   22898:	06150514 06150615 06160616 06170616     ................
   228a8:	06170617 06180618 06190618 06190619     ................
   228b8:	061a061a 061b061a 061b061b 061c061b     ................
   228c8:	061c061c 071d061d 071e071d 071e071e     ................
   228d8:	071f071f 0720071f 07200720 06200720     ...... . . . . .
   228e8:	06200620 06200620 05000500 05000500      . . . .........
   228f8:	05010500 05010501 05020501 05020502     ................
   22908:	05030503 05030503 05040504 05040504     ................
   22918:	05050505 05060505 05060506 05070506     ................
   22928:	05070507 05080507 05080508 05090509     ................
   22938:	05090509 050a050a 050a050a 050b050b     ................
   22948:	050c050b 050c050c 050d050c 050d050d     ................
   22958:	050e050e 050e050e 050f050f 0510050f     ................
   22968:	05100510 05110510 05110511 06120511     ................
   22978:	06120612 06130613 06130613 06140614     ................
   22988:	06150614 06150615 06160616 06170616     ................
   22998:	06170617 06180618 06190618 06190619     ................
   229a8:	061a061a 061b061a 071b071b 071c071c     ................
   229b8:	071d071c 071d071d 071e071e 071f071e     ................
   229c8:	071f071f 0720071f 07200720 07200720     ...... . . . . .
   229d8:	07200720 06200720 05000500 05000500      . . . .........
   229e8:	05010500 05010501 05020501 05020502     ................
   229f8:	05030503 05030503 05040504 05040504     ................
   22a08:	05050505 05060505 05060506 05070506     ................
   22a18:	05070507 05080507 05080508 05090509     ................
   22a28:	05090509 050a050a 050a050a 050b050b     ................
   22a38:	050c050b 050c050c 050d050c 050d050d     ................
   22a48:	050e050e 060e060e 060f060f 0610060f     ................
   22a58:	06100610 06110610 06110611 06120612     ................
   22a68:	06120612 06130613 06140613 06140614     ................
   22a78:	06150614 06150615 06160616 06170616     ................
   22a88:	06170617 06180618 06190618 07190619     ................
   22a98:	071a071a 071b071a 071b071b 071c071c     ................
   22aa8:	071d071c 071d071d 071e071e 071f071e     ................
   22ab8:	071f071f 07200720 07200720 07200720     .... . . . . . .
   22ac8:	07200720 07200720 05000500 05000500      . . . .........
   22ad8:	05010500 05010501 05020501 05020502     ................
   22ae8:	05030503 05030503 05040504 05040504     ................
   22af8:	05050505 05060505 05060506 05070506     ................
   22b08:	05070507 05080507 05080508 05090509     ................
   22b18:	06090509 060a060a 060a060a 060b060b     ................
   22b28:	060c060b 060c060c 060d060c 060d060d     ................
   22b38:	060e060e 060e060e 060f060f 0610060f     ................
   22b48:	06100610 06110610 06110611 06120612     ................
   22b58:	06120612 06130613 06140613 06140614     ................
   22b68:	06150614 06150615 06160616 06170616     ................
   22b78:	06170617 07180618 07190718 07190719     ................
   22b88:	071a071a 071b071a 071b071b 071c071c     ................
   22b98:	071d071c 071d071d 071e071e 071f071e     ................
   22ba8:	071f071f 07200720 07200720 07200720     .... . . . . . .
   22bb8:	07200720 07200720 06000600 06000600      . . . .........
   22bc8:	06010600 06010601 06020601 06020602     ................
   22bd8:	06030603 06030603 06040604 06040604     ................
   22be8:	06050605 06060605 06060606 06070606     ................
   22bf8:	06070607 06080607 06080608 06090609     ................
   22c08:	06090609 060a060a 060b060a 060b060b     ................
   22c18:	060c060b 060c060c 060d060d 060d060d     ................
   22c28:	060e060e 060e060e 060f060f 0610060f     ................
   22c38:	06100610 06110610 06110611 06120612     ................
   22c48:	06120612 06130613 06140613 06140614     ................
   22c58:	06150615 06150615 06160616 06170616     ................
   22c68:	07170717 07180718 07190719 071a0719     ................
   22c78:	071a071a 071b071b 071c071b 071c071c     ................
   22c88:	071d071d 071e071d 071e071e 071f071e     ................
   22c98:	081f081f 07200820 07200720 07200720     .... . . . . . .
   22ca8:	07200720 07200720 06000600 06000600      . . . .........
   22cb8:	06010600 06010601 06020601 06020602     ................
   22cc8:	06030603 06030603 06040604 06040604     ................
   22cd8:	06050605 06060605 06060606 06070606     ................
   22ce8:	06070607 06080608 06080608 06090609     ................
   22cf8:	06090609 060a060a 060b060a 060b060b     ................
   22d08:	060c060b 060c060c 060d060d 060d060d     ................
   22d18:	060e060e 060f060e 060f060f 0610060f     ................
   22d28:	06100610 06110611 06110611 06120612     ................
   22d38:	06130612 06130613 06140613 06140614     ................
   22d48:	06150615 06160615 07160616 07170717     ................
   22d58:	07180717 07180718 07190719 071a0719     ................
   22d68:	071a071a 071b071b 071c071b 071c071c     ................
   22d78:	081d071d 081e081d 081e081e 081f081f     ................
   22d88:	0820081f 08200820 08200820 07200720     .. . . . . . . .
   22d98:	07200720 07200720 06000600 06000600      . . . .........
   22da8:	06010600 06010601 06020601 06020602     ................
   22db8:	06030603 06030603 06040604 06050604     ................
   22dc8:	06050605 06060605 06060606 06070606     ................
   22dd8:	06070607 06080608 06080608 06090609     ................
   22de8:	06090609 060a060a 060b060a 060b060b     ................
   22df8:	060c060b 060c060c 060d060d 060d060d     ................
   22e08:	060e060e 060f060e 060f060f 0610060f     ................
   22e18:	06100610 06110611 06110611 06120612     ................
   22e28:	06130612 06130613 06140613 06140614     ................
   22e38:	07150615 07160715 07160716 07170717     ................
   22e48:	07180717 07180718 07190719 071a0719     ................
   22e58:	071a071a 071b071b 081c081b 081c081c     ................
   22e68:	081d081d 081e081d 081e081e 081f081f     ................
   22e78:	0820081f 08200820 08200820 08200820     .. . . . . . . .
   22e88:	07200820 07200720 06000600 06000600      . . . .........
   22e98:	06010600 06010601 06020601 06020602     ................
   22ea8:	06030603 06030603 06040604 06050604     ................
   22eb8:	06050605 06060605 06060606 06070606     ................
   22ec8:	06070607 06080608 06080608 06090609     ................
   22ed8:	060a0609 060a060a 060b060a 060b060b     ................
   22ee8:	060c060b 060c060c 060d060d 060d060d     ................
   22ef8:	060e060e 060f060e 060f060f 0610060f     ................
   22f08:	06100610 06110611 06110611 06120612     ................
   22f18:	06130612 07130713 07140713 07140714     ................
   22f28:	07150715 07160715 07160716 07170717     ................
   22f38:	07180717 07180718 07190719 071a0719     ................
   22f48:	081a071a 081b081b 081c081b 081c081c     ................
   22f58:	081d081d 081e081d 081e081e 081f081f     ................
   22f68:	0820081f 08200820 08200820 08200820     .. . . . . . . .
   22f78:	08200820 08200820 06000600 06000600      . . . .........
   22f88:	06010600 06010601 06020601 06020602     ................
   22f98:	06030603 06030603 06040604 06050604     ................
   22fa8:	06050605 06060605 06060606 06070606     ................
   22fb8:	06070607 06080608 06080608 06090609     ................
   22fc8:	060a0609 060a060a 060b060a 060b060b     ................
   22fd8:	060c060c 060c060c 060d060d 060e060d     ................
   22fe8:	060e060e 060f060e 070f060f 07100710     ................
   22ff8:	07100710 07110711 07120711 07120712     ................
   23008:	07130712 07130713 07140714 07140714     ................
   23018:	07150715 07160715 07160716 07170717     ................
   23028:	07180717 07180718 08190719 081a0819     ................
   23038:	081b081a 081b081b 081c081c 081d081c     ................
   23048:	081d081d 081e081e 081f081e 081f081f     ................
   23058:	08200820 08200820 08200820 08200820      . . . . . . . .
   23068:	08200820 08200820 06000600 06000600      . . . .........
   23078:	06010600 06010601 06020601 06020602     ................
   23088:	06030603 06030603 06040604 06050604     ................
   23098:	06050605 06060605 06060606 06070607     ................
   230a8:	06070607 06080608 07080608 07090709     ................
   230b8:	070a0709 070a070a 070b070a 070b070b     ................
   230c8:	070c070c 070c070c 070d070d 070e070d     ................
   230d8:	070e070e 070f070e 070f070f 07100710     ................
   230e8:	07100710 07110711 07120711 07120712     ................
   230f8:	07130712 07130713 07140714 07150714     ................
   23108:	07150715 07160715 07160716 07170717     ................
   23118:	07180717 08190818 08190819 081a081a     ................
   23128:	081b081a 081b081b 081c081c 081d081c     ................
   23138:	081d081d 081e081e 091f081e 091f091f     ................
   23148:	09200920 08200820 08200820 08200820      . . . . . . . .
   23158:	08200820 08200820 06000600 06000600      . . . .........
   23168:	07010600 07010701 07020701 07020702     ................
   23178:	07030703 07030703 07040704 07050704     ................
   23188:	07050705 07060705 07060706 07070707     ................
   23198:	07070707 07080708 07090708 07090709     ................
   231a8:	070a0709 070a070a 070b070a 070b070b     ................
   231b8:	070c070c 070c070c 070d070d 070e070d     ................
   231c8:	070e070e 070f070e 070f070f 07100710     ................
   231d8:	07100710 07110711 07120711 07120712     ................
   231e8:	07130712 07130713 07140714 07150714     ................
   231f8:	07150715 07160716 07170716 08170717     ................
   23208:	08180818 08190818 08190819 081a081a     ................
   23218:	081b081a 081b081b 081c081c 081d081c     ................
   23228:	091d081d 091e091e 091f091e 091f091f     ................
   23238:	09200920 09200920 08200920 08200820      . . . . . . . .
   23248:	08200820 08200820 07000700 07000700      . . . .........
   23258:	07010700 07010701 07020702 07020702     ................
   23268:	07030703 07030703 07040704 07050704     ................
   23278:	07050705 07060705 07060706 07070707     ................
   23288:	07070707 07080708 07090708 07090709     ................
   23298:	070a0709 070a070a 070b070b 070b070b     ................
   232a8:	070c070c 070d070c 070d070d 070e070d     ................
   232b8:	070e070e 070f070f 070f070f 07100710     ................
   232c8:	07110710 07110711 07120711 07120712     ................
   232d8:	07130713 07130713 07140714 07150714     ................
   232e8:	07150715 07160716 08170716 08170817     ................
   232f8:	08180818 08190818 08190819 081a081a     ................
   23308:	081b081a 081b081b 091c081c 091d091c     ................
   23318:	091e091d 091e091e 091f091f 0920091f     .............. .
   23328:	09200920 09200920 09200920 09200920      . . . . . . . .
   23338:	08200820 08200820 07000700 07000700      . . . .........
   23348:	07010700 07010701 07020702 07020702     ................
   23358:	07030703 07030703 07040704 07050704     ................
   23368:	07050705 07060705 07060706 07070707     ................
   23378:	07070707 07080708 07090708 07090709     ................
   23388:	070a0709 070a070a 070b070b 070b070b     ................
   23398:	070c070c 070d070c 070d070d 070e070d     ................
   233a8:	070e070e 070f070f 070f070f 07100710     ................
   233b8:	07110710 07110711 07120711 07120712     ................
   233c8:	07130713 07130713 07140714 07150714     ................
   233d8:	08150715 08160816 08170816 08170817     ................
   233e8:	08180818 08190818 08190819 081a081a     ................
   233f8:	081b081b 091c091b 091c091c 091d091d     ................
   23408:	091e091d 091e091e 091f091f 0920091f     .............. .
   23418:	09200920 09200920 09200920 09200920      . . . . . . . .
   23428:	09200920 08200920 07000700 07000700      . . . .........
   23438:	07010700 07010701 07020702 07020702     ................
   23448:	07030703 07040703 07040704 07050704     ................
   23458:	07050705 07060705 07060706 07070707     ................
   23468:	07070707 07080708 07090708 07090709     ................
   23478:	070a0709 070a070a 070b070b 070b070b     ................
   23488:	070c070c 070d070c 070d070d 070e070d     ................
   23498:	070e070e 070f070f 070f070f 07100710     ................
   234a8:	07110710 07110711 07120711 07120712     ................
   234b8:	07130713 07140713 08140814 08150814     ................
   234c8:	08150815 08160816 08170816 08170817     ................
   234d8:	08180818 08190818 081a0819 091a081a     ................
   234e8:	091b091b 091c091b 091c091c 091d091d     ................
   234f8:	091e091d 091e091e 091f091f 0920091f     .............. .
   23508:	09200920 09200920 09200920 09200920      . . . . . . . .
   23518:	09200920 09200920 07000700 07000700      . . . .........
   23528:	07010700 07010701 07020702 07020702     ................
   23538:	07030703 07040703 07040704 07050704     ................
   23548:	07050705 07060706 07060706 07070707     ................
   23558:	07070707 07080708 07090708 07090709     ................
   23568:	070a0709 070a070a 070b070b 070b070b     ................
   23578:	070c070c 070d070c 070d070d 070e070d     ................
   23588:	070e070e 070f070f 0710070f 07100710     ................
   23598:	08110810 08110811 08120812 08120812     ................
   235a8:	08130813 08140813 08140814 08150814     ................
   235b8:	08150815 08160816 08170816 08170817     ................
   235c8:	08180818 08190819 091a0919 091a091a     ................
   235d8:	091b091b 091c091b 091c091c 091d091d     ................
   235e8:	091e091d 091e091e 0a1f0a1f 0a200a1f     .............. .
   235f8:	09200920 09200920 09200920 09200920      . . . . . . . .
   23608:	09200920 09200920 07000700 07000700      . . . .........
   23618:	07010700 07010701 07020702 07020702     ................
   23628:	07030703 07040703 07040704 07050704     ................
   23638:	07050705 07060706 07060706 07070707     ................
   23648:	07080707 08080808 08090808 08090809     ................
   23658:	080a080a 080a080a 080b080b 080c080b     ................
   23668:	080c080c 080d080c 080d080d 080e080e     ................
   23678:	080e080e 080f080f 0810080f 08100810     ................
   23688:	08110810 08110811 08120812 08120812     ................
   23698:	08130813 08140813 08140814 08150815     ................
   236a8:	08150815 08160816 08170816 08180817     ................
   236b8:	09180818 09190919 091a0919 091a091a     ................
   236c8:	091b091b 091c091b 091d091c 091d091d     ................
   236d8:	0a1e0a1e 0a1f0a1e 0a1f0a1f 0a200a20     ............ . .
   236e8:	0a200a20 0a200a20 09200920 09200920      . . . . . . . .
   236f8:	09200920 09200920 07000700 07000700      . . . .........
   23708:	07010700 07010701 08020802 08020802     ................
   23718:	08030803 08040803 08040804 08050804     ................
   23728:	08050805 08060806 08060806 08070807     ................
   23738:	08080807 08080808 08090808 08090809     ................
   23748:	080a080a 080a080a 080b080b 080c080b     ................
   23758:	080c080c 080d080c 080d080d 080e080e     ................
   23768:	080e080e 080f080f 0810080f 08100810     ................
   23778:	08110810 08110811 08120812 08120812     ................
   23788:	08130813 08140813 08140814 08150815     ................
   23798:	08160815 08160816 08170817 09180817     ................
   237a8:	09180918 09190919 091a0919 091b091a     ................
   237b8:	091b091b 091c091c 0a1d091c 0a1d0a1d     ................
   237c8:	0a1e0a1e 0a1f0a1e 0a1f0a1f 0a200a20     ............ . .
   237d8:	0a200a20 0a200a20 0a200a20 09200a20      . . . . . . . .
   237e8:	09200920 09200920 08000800 08000800      . . . .........
   237f8:	08010800 08010801 08020802 08020802     ................
   23808:	08030803 08040803 08040804 08050804     ................
   23818:	08050805 08060806 08060806 08070807     ................
   23828:	08080807 08080808 08090808 08090809     ................
   23838:	080a080a 080a080a 080b080b 080c080b     ................
   23848:	080c080c 080d080c 080d080d 080e080e     ................
   23858:	080e080e 080f080f 0810080f 08100810     ................
   23868:	08110810 08110811 08120812 08130812     ................
   23878:	08130813 08140813 08140814 08150815     ................
   23888:	08160815 08160816 09170917 09180917     ................
   23898:	09180918 09190919 091a091a 091b091a     ................
   238a8:	091b091b 0a1c0a1c 0a1d0a1c 0a1d0a1d     ................
   238b8:	0a1e0a1e 0a1f0a1e 0a1f0a1f 0a200a20     ............ . .
   238c8:	0a200a20 0a200a20 0a200a20 0a200a20      . . . . . . . .
   238d8:	0a200a20 09200920 08000800 08000800      . . . .........
   238e8:	08010800 08010801 08020802 08020802     ................
   238f8:	08030803 08040803 08040804 08050804     ................
   23908:	08050805 08060806 08060806 08070807     ................
   23918:	08080807 08080808 08090808 08090809     ................
   23928:	080a080a 080a080a 080b080b 080c080b     ................
   23938:	080c080c 080d080c 080d080d 080e080e     ................
   23948:	080f080e 080f080f 0810080f 08100810     ................
   23958:	08110811 08110811 08120812 08130812     ................
   23968:	08130813 08140813 08140814 08150815     ................
   23978:	08160815 09160916 09170917 09180917     ................
   23988:	09190918 09190919 091a091a 0a1b091a     ................
   23998:	0a1b0a1b 0a1c0a1c 0a1d0a1c 0a1e0a1d     ................
   239a8:	0a1e0a1e 0a1f0a1f 0a200a1f 0a200a20     .......... . . .
   239b8:	0a200a20 0a200a20 0a200a20 0a200a20      . . . . . . . .
   239c8:	0a200a20 0a200a20 08000800 08000800      . . . .........
   239d8:	08010800 08010801 08020802 08020802     ................
   239e8:	08030803 08040803 08040804 08050804     ................
   239f8:	08050805 08060806 08060806 08070807     ................
   23a08:	08080807 08080808 08090808 08090809     ................
   23a18:	080a080a 080b080a 080b080b 080c080b     ................
   23a28:	080c080c 080d080d 080d080d 080e080e     ................
   23a38:	080f080e 080f080f 0810080f 08100810     ................
   23a48:	08110811 08110811 08120812 08130812     ................
   23a58:	08130813 08140813 08140814 09150915     ................
   23a68:	09160915 09160916 09170917 09180917     ................
   23a78:	09190918 09190919 0a1a091a 0a1b0a1a     ................
   23a88:	0a1c0a1b 0a1c0a1c 0a1d0a1d 0a1e0a1d     ................
   23a98:	0a1e0a1e 0b1f0a1f 0b200b1f 0a200a20     .......... . . .
   23aa8:	0a200a20 0a200a20 0a200a20 0a200a20      . . . . . . . .
   23ab8:	0a200a20 0a200a20 08000800 08000800      . . . .........
   23ac8:	08010800 08010801 08020802 08020802     ................
   23ad8:	08030803 08040803 08040804 08050804     ................
   23ae8:	08050805 08060806 08070806 08070807     ................
   23af8:	08080807 08080808 08090809 08090809     ................
   23b08:	080a080a 080b080a 080b080b 080c080b     ................
   23b18:	080c080c 080d080d 080d080d 080e080e     ................
   23b28:	080f080e 080f080f 0810080f 08100810     ................
   23b38:	08110811 08110811 09120812 09130912     ................
   23b48:	09130913 09140914 09140914 09150915     ................
   23b58:	09160915 09160916 09170917 09180918     ................
   23b68:	09190918 0a190a19 0a1a0a1a 0a1b0a1b     ................
   23b78:	0a1c0a1b 0a1c0a1c 0a1d0a1d 0a1e0a1d     ................
   23b88:	0b1e0b1e 0b1f0b1f 0b200b20 0b200b20     ........ . . . .
   23b98:	0a200b20 0a200a20 0a200a20 0a200a20      . . . . . . . .
   23ba8:	0a200a20 0a200a20 08000800 08000800      . . . .........
   23bb8:	08010800 08010801 08020802 08020802     ................
   23bc8:	08030803 08040803 08040804 08050804     ................
   23bd8:	08050805 08060806 08070806 08070807     ................
   23be8:	09080807 09080908 09090909 09090909     ................
   23bf8:	090a090a 090b090a 090b090b 090c090b     ................
   23c08:	090c090c 090d090d 090e090d 090e090e     ................
   23c18:	090f090e 090f090f 09100910 09100910     ................
   23c28:	09110911 09120911 09120912 09130912     ................
   23c38:	09130913 09140914 09150914 09150915     ................
   23c48:	09160915 09170916 09170917 09180918     ................
   23c58:	0a190a18 0a1a0a19 0a1a0a1a 0a1b0a1b     ................
   23c68:	0a1c0a1b 0a1c0a1c 0b1d0a1d 0b1e0b1e     ................
   23c78:	0b1f0b1e 0b1f0b1f 0b200b20 0b200b20     ........ . . . .
   23c88:	0b200b20 0a200b20 0a200a20 0a200a20      . . . . . . . .
   23c98:	0a200a20 0a200a20 08000800 08000800      . . . .........
   23ca8:	08010800 08010801 08020802 09020902     ................
   23cb8:	09030903 09040903 09040904 09050905     ................
   23cc8:	09050905 09060906 09070906 09070907     ................
   23cd8:	09080907 09080908 09090909 09090909     ................
   23ce8:	090a090a 090b090a 090b090b 090c090b     ................
   23cf8:	090c090c 090d090d 090e090d 090e090e     ................
   23d08:	090f090e 090f090f 09100910 09100910     ................
   23d18:	09110911 09120911 09120912 09130912     ................
   23d28:	09130913 09140914 09150914 09150915     ................
   23d38:	09160916 09170916 09170917 0a180a18     ................
   23d48:	0a190a19 0a1a0a19 0a1a0a1a 0a1b0a1b     ................
   23d58:	0a1c0a1b 0b1d0b1c 0b1d0b1d 0b1e0b1e     ................
   23d68:	0b1f0b1e 0b200b1f 0b200b20 0b200b20     ...... . . . . .
   23d78:	0b200b20 0b200b20 0a200b20 0a200a20      . . . . . . . .
   23d88:	0a200a20 0a200a20 09000900 09000900      . . . .........
   23d98:	09010900 09010901 09020902 09020902     ................
   23da8:	09030903 09040903 09040904 09050905     ................
   23db8:	09050905 09060906 09070906 09070907     ................
   23dc8:	09080907 09080908 09090909 09090909     ................
   23dd8:	090a090a 090b090a 090b090b 090c090c     ................
   23de8:	090c090c 090d090d 090e090d 090e090e     ................
   23df8:	090f090e 090f090f 09100910 09110910     ................
   23e08:	09110911 09120911 09120912 09130913     ................
   23e18:	09130913 09140914 09150914 09150915     ................
   23e28:	09160916 09170916 0a170a17 0a180a18     ................
   23e38:	0a190a19 0a1a0a19 0a1a0a1a 0b1b0a1b     ................
   23e48:	0b1c0b1c 0b1d0b1c 0b1d0b1d 0b1e0b1e     ................
   23e58:	0b1f0b1f 0b200b1f 0b200b20 0b200b20     ...... . . . . .
   23e68:	0b200b20 0b200b20 0b200b20 0b200b20      . . . . . . . .
   23e78:	0a200a20 0a200a20 09000900 09000900      . . . .........
   23e88:	09010900 09010901 09020902 09020902     ................
   23e98:	09030903 09040903 09040904 09050905     ................
   23ea8:	09050905 09060906 09070906 09070907     ................
   23eb8:	09080907 09080908 09090909 090a0909     ................
   23ec8:	090a090a 090b090a 090b090b 090c090c     ................
   23ed8:	090c090c 090d090d 090e090d 090e090e     ................
   23ee8:	090f090f 090f090f 09100910 09110910     ................
   23ef8:	09110911 09120911 09120912 09130913     ................
   23f08:	09130913 09140914 09150914 09150915     ................
   23f18:	09160916 0a170a16 0a180a17 0a180a18     ................
   23f28:	0a190a19 0a1a0a19 0b1b0a1a 0b1b0b1b     ................
   23f38:	0b1c0b1c 0b1d0b1c 0b1e0b1d 0b1e0b1e     ................
   23f48:	0c1f0b1f 0c200c1f 0b200c20 0b200b20     ...... . . . . .
   23f58:	0b200b20 0b200b20 0b200b20 0b200b20      . . . . . . . .
   23f68:	0b200b20 0a200a20 09000900 09000900      . . . .........
   23f78:	09010900 09010901 09020902 09020902     ................
   23f88:	09030903 09040903 09040904 09050905     ................
   23f98:	09050905 09060906 09070906 09070907     ................
   23fa8:	09080908 09080908 09090909 090a0909     ................
   23fb8:	090a090a 090b090a 090b090b 090c090c     ................
   23fc8:	090d090c 090d090d 090e090d 090e090e     ................
   23fd8:	090f090f 090f090f 09100910 09110910     ................
   23fe8:	09110911 09120911 09120912 09130913     ................
   23ff8:	09130913 09140914 09150914 09150915     ................
   24008:	0a160a16 0a170a16 0a180a17 0a180a18     ................
   24018:	0a190a19 0b1a0b1a 0b1b0b1a 0b1b0b1b     ................
   24028:	0b1c0b1c 0b1d0b1d 0b1e0b1d 0c1e0c1e     ................
   24038:	0c1f0c1f 0c200c20 0c200c20 0b200c20     .... . . . . . .
   24048:	0b200b20 0b200b20 0b200b20 0b200b20      . . . . . . . .
   24058:	0b200b20 0b200b20 09000900 09000900      . . . .........
   24068:	09010900 09010901 09020902 09020902     ................
   24078:	09030903 09040903 09040904 09050905     ................
   24088:	09050905 09060906 09070906 09070907     ................
   24098:	09080908 09080908 09090909 090a0909     ................
   240a8:	090a090a 090b090a 090b090b 090c090c     ................
   240b8:	090d090c 090d090d 090e090d 090e090e     ................
   240c8:	090f090f 0a100a0f 0a100a10 0a110a10     ................
   240d8:	0a110a11 0a120a12 09120912 09130913     ................
   240e8:	09140913 09140914 0a150a14 0a150a15     ................
   240f8:	0a160a16 0a170a17 0a180a17 0a190a18     ................
   24108:	0b190b19 0b1a0b1a 0b1b0b1a 0b1c0b1b     ................
   24118:	0b1c0b1c 0c1d0b1d 0c1e0c1e 0c1f0c1e     ................
   24128:	0c1f0c1f 0c200c20 0c200c20 0c200c20     .... . . . . . .
   24138:	0b200c20 0b200b20 0b200b20 0b200b20      . . . . . . . .
   24148:	0b200b20 0b200b20 09000900 09000900      . . . .........
   24158:	09010900 09010901 09020902 09030902     ................
   24168:	09030903 09040903 09040904 09050905     ................
   24178:	09060905 09060906 09070906 0a070907     ................
   24188:	0a080a08 0a080a08 0a090a09 0a0a0a09     ................
   24198:	0a0a0a0a 0a0b0a0b 0a0b0a0b 0a0c0a0c     ................
   241a8:	0a0d0a0c 0a0d0a0d 0a0e0a0e 0a0e0a0e     ................
   241b8:	0a0f0a0f 0a100a0f 0a100a10 0a110a10     ................
   241c8:	0a110a11 0a120a12 0a120a12 0a130a13     ................
   241d8:	0a140a13 0a140a14 0a150a14 0a150a15     ................
   241e8:	0a160a16 0a170a17 0a180a17 0b190b18     ................
   241f8:	0b190b19 0b1a0b1a 0b1b0b1b 0b1c0b1b     ................
   24208:	0c1d0b1c 0c1d0c1d 0c1e0c1e 0c1f0c1e     ................
   24218:	0c200c1f 0c200c20 0c200c20 0c200c20     .. . . . . . . .
   24228:	0c200c20 0c200c20 0b200b20 0b200b20      . . . . . . . .
   24238:	0b200b20 0b200b20 09000900 09000900      . . . .........
   24248:	09010900 09010901 09020902 0a030902     ................
   24258:	0a030a03 0a040a03 0a040a04 0a050a05     ................
   24268:	0a060a05 0a060a06 0a070a06 0a070a07     ................
   24278:	0a080a08 0a080a08 0a090a09 0a0a0a09     ................
   24288:	0a0a0a0a 0a0b0a0b 0a0b0a0b 0a0c0a0c     ................
   24298:	0a0d0a0c 0a0d0a0d 0a0e0a0e 0a0f0a0e     ................
   242a8:	0a0f0a0f 0a100a0f 0a100a10 0a110a11     ................
   242b8:	0a110a11 0a120a12 0a130a12 0a130a13     ................
   242c8:	0a140a13 0a140a14 0a150a14 0a160a15     ................
   242d8:	0a160a16 0a170a17 0b180b18 0b190b18     ................
   242e8:	0b1a0b19 0b1a0b1a 0b1b0b1b 0c1c0c1b     ................
   242f8:	0c1d0c1c 0c1d0c1d 0c1e0c1e 0c1f0c1f     ................
   24308:	0c200c1f 0c200c20 0c200c20 0c200c20     .. . . . . . . .
   24318:	0c200c20 0c200c20 0c200c20 0b200b20      . . . . . . . .
   24328:	0b200b20 0b200b20 0a000a00 0a000a00      . . . .........
   24338:	0a010a00 0a010a01 0a020a02 0a030a02     ................
   24348:	0a030a03 0a040a03 0a040a04 0a050a05     ................
   24358:	0a060a05 0a060a06 0a070a06 0a070a07     ................
   24368:	0a080a08 0a090a08 0a090a09 0a0a0a09     ................
   24378:	0a0a0a0a 0a0b0a0b 0a0c0a0b 0a0c0a0c     ................
   24388:	0a0d0a0c 0a0d0a0d 0a0e0a0e 0a0f0a0e     ................
   24398:	0a0f0a0f 0a100a0f 0a100a10 0a110a11     ................
   243a8:	0a110a11 0a120a12 0a130a12 0a130a13     ................
   243b8:	0a140a13 0a140a14 0a150a15 0a160a15     ................
   243c8:	0a160a16 0b170b17 0b180b18 0b190b18     ................
   243d8:	0b1a0b19 0b1a0b1a 0c1b0c1b 0c1c0c1c     ................
   243e8:	0c1d0c1c 0c1e0c1d 0c1e0c1e 0d1f0d1f     ................
   243f8:	0d200d20 0c200d20 0c200c20 0c200c20      . . . . . . . .
   24408:	0c200c20 0c200c20 0c200c20 0c200c20      . . . . . . . .
   24418:	0b200b20 0b200b20 0a000a00 0a000a00      . . . .........
   24428:	0a010a00 0a010a01 0a020a02 0a030a02     ................
   24438:	0a030a03 0a040a03 0a040a04 0a050a05     ................
   24448:	0a060a05 0a060a06 0a070a06 0a070a07     ................
   24458:	0a080a08 0a090a08 0a090a09 0a0a0a09     ................
   24468:	0a0a0a0a 0a0b0a0b 0a0c0a0b 0a0c0a0c     ................
   24478:	0a0d0a0d 0a0d0a0d 0a0e0a0e 0a0f0a0e     ................
   24488:	0a0f0a0f 0a100a10 0a100a10 0a110a11     ................
   24498:	0a120a11 0a120a12 0a130a12 0a130a13     ................
   244a8:	0a140a14 0a140a14 0a150a15 0a160a15     ................
   244b8:	0b170a16 0b170b17 0b180b18 0b190b19     ................
   244c8:	0b1a0b19 0c1b0c1a 0c1b0c1b 0c1c0c1c     ................
   244d8:	0c1d0c1d 0c1e0c1d 0d1f0d1e 0d1f0d1f     ................
   244e8:	0d200d20 0d200d20 0d200d20 0c200c20      . . . . . . . .
   244f8:	0c200c20 0c200c20 0c200c20 0c200c20      . . . . . . . .
   24508:	0c200c20 0b200c20 0a000a00 0a000a00      . . . .........
   24518:	0a010a00 0a010a01 0a020a02 0a030a02     ................
   24528:	0a030a03 0a040a03 0a040a04 0a050a05     ................
   24538:	0a060a05 0a060a06 0a070a07 0a070a07     ................
   24548:	0a080a08 0a090a08 0a090a09 0a0a0a09     ................
   24558:	0a0a0a0a 0a0b0a0b 0a0c0a0b 0a0c0a0c     ................
   24568:	0a0d0a0d 0a0e0a0d 0a0e0a0e 0a0f0a0e     ................
   24578:	0a0f0a0f 0a100a10 0a110a10 0a110a11     ................
   24588:	0a120a11 0a120a12 0a130a12 0a130a13     ................
   24598:	0a140a14 0a140a14 0a150a15 0b160a15     ................
   245a8:	0b170b16 0b170b17 0b180b18 0b190b19     ................
   245b8:	0c1a0c1a 0c1b0c1a 0c1c0c1b 0c1c0c1c     ................
   245c8:	0d1d0c1d 0d1e0d1e 0d1f0d1e 0d200d1f     .............. .
   245d8:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   245e8:	0c200c20 0c200c20 0c200c20 0c200c20      . . . . . . . .
   245f8:	0c200c20 0c200c20 0a000a00 0a000a00      . . . .........
   24608:	0a010a00 0a010a01 0a020a02 0a030a02     ................
   24618:	0a030a03 0a040a04 0a040a04 0a050a05     ................
   24628:	0a060a05 0a060a06 0a070a07 0a070a07     ................
   24638:	0a080a08 0a090a08 0a090a09 0a0a0a0a     ................
   24648:	0a0a0a0a 0b0b0b0b 0b0c0b0b 0b0c0b0c     ................
   24658:	0b0d0b0d 0b0e0b0d 0b0e0b0e 0b0f0b0f     ................
   24668:	0b0f0b0f 0b100b10 0b110b10 0b110b11     ................
   24678:	0b120b11 0b120b12 0b130b13 0b130b13     ................
   24688:	0b140b14 0b150b14 0b150b15 0b160b16     ................
   24698:	0b170b16 0b180b17 0c180b18 0c190c19     ................
   246a8:	0c1a0c1a 0c1b0c1a 0c1c0c1b 0d1c0c1c     ................
   246b8:	0d1d0d1d 0d1e0d1e 0d1f0d1e 0d200d1f     .............. .
   246c8:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   246d8:	0d200d20 0c200c20 0c200c20 0c200c20      . . . . . . . .
   246e8:	0c200c20 0c200c20 0a000a00 0a000a00      . . . .........
   246f8:	0a010a00 0a010a01 0a020a02 0a030a02     ................
   24708:	0a030a03 0a040a04 0a040a04 0a050a05     ................
   24718:	0a060a05 0b060b06 0b070b07 0b080b07     ................
   24728:	0b080b08 0b090b08 0b090b09 0b0a0b0a     ................
   24738:	0b0b0b0a 0b0b0b0b 0b0c0b0c 0b0c0b0c     ................
   24748:	0b0d0b0d 0b0e0b0d 0b0e0b0e 0b0f0b0f     ................
   24758:	0b100b0f 0b100b10 0b110b10 0b110b11     ................
   24768:	0b120b12 0b120b12 0b130b13 0b140b13     ................
   24778:	0b140b14 0b150b14 0b150b15 0b160b16     ................
   24788:	0b170b17 0c180b17 0c190c18 0c190c19     ................
   24798:	0c1a0c1a 0c1b0c1b 0d1c0c1b 0d1d0d1c     ................
   247a8:	0d1d0d1d 0d1e0d1e 0d1f0d1f 0d200e1f     .............. .
   247b8:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   247c8:	0d200d20 0d200d20 0c200c20 0c200c20      . . . . . . . .
   247d8:	0c200c20 0c200c20 0a000a00 0a000a00      . . . .........
   247e8:	0a010a00 0a010a01 0b020a02 0b030b02     ................
   247f8:	0b030b03 0b040b04 0b040b04 0b050b05     ................
   24808:	0b060b05 0b060b06 0b070b07 0b080b07     ................
   24818:	0b080b08 0b090b08 0b090b09 0b0a0b0a     ................
   24828:	0b0b0b0a 0b0b0b0b 0b0c0b0c 0b0d0b0c     ................
   24838:	0b0d0b0d 0b0e0b0d 0b0e0b0e 0b0f0b0f     ................
   24848:	0b100b0f 0b100b10 0b110b11 0b110b11     ................
   24858:	0b120b12 0b130b12 0b130b13 0b140b13     ................
   24868:	0b140b14 0b150b15 0b160b15 0b160b16     ................
   24878:	0c170b17 0c180c18 0c190c18 0c1a0c19     ................
   24888:	0c1a0c1a 0d1b0d1b 0d1c0d1c 0d1d0d1c     ................
   24898:	0d1e0d1d 0d1e0d1e 0e1f0e1f 0e200e20     ............ . .
   248a8:	0e200e20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   248b8:	0d200d20 0d200d20 0d200d20 0c200d20      . . . . . . . .
   248c8:	0c200c20 0c200c20 0b000b00 0b000b00      . . . .........
   248d8:	0b010b00 0b010b01 0b020b02 0b030b02     ................
   248e8:	0b030b03 0b040b04 0b050b04 0b050b05     ................
   248f8:	0b060b05 0b060b06 0b070b07 0b080b07     ................
   24908:	0b080b08 0b090b09 0b090b09 0b0a0b0a     ................
   24918:	0b0b0b0a 0b0b0b0b 0b0c0b0c 0b0d0b0c     ................
   24928:	0b0d0b0d 0b0e0b0e 0b0e0b0e 0b0f0b0f     ................
   24938:	0b100b0f 0b100b10 0b110b11 0b110b11     ................
   24948:	0b120b12 0b130b12 0b130b13 0b140b13     ................
   24958:	0b140b14 0b150b15 0b160b15 0c170c16     ................
   24968:	0c170c17 0c180c18 0c190c19 0c1a0c19     ................
   24978:	0d1b0d1a 0d1b0d1b 0d1c0d1c 0d1d0d1d     ................
   24988:	0e1e0d1d 0e1f0e1e 0e1f0e1f 0e200e20     ............ . .
   24998:	0e200e20 0e200e20 0d200d20 0d200d20      . . . . . . . .
   249a8:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   249b8:	0c200d20 0c200c20 0b000b00 0b000b00      . . . .........
   249c8:	0b010b00 0b010b01 0b020b02 0b030b02     ................
   249d8:	0b030b03 0b040b04 0b050b04 0b050b05     ................
   249e8:	0b060b05 0b060b06 0b070b07 0b080b07     ................
   249f8:	0b080b08 0b090b09 0b0a0b09 0b0a0b0a     ................
   24a08:	0b0b0b0a 0b0b0b0b 0b0c0b0c 0b0d0b0c     ................
   24a18:	0b0d0b0d 0b0e0b0e 0b0f0b0e 0b0f0b0f     ................
   24a28:	0b100b10 0b100b10 0b110b11 0b120b11     ................
   24a38:	0b120b12 0b130b12 0b130b13 0b140b14     ................
   24a48:	0c150b14 0c150c15 0c160c16 0c170c16     ................
   24a58:	0c180c17 0c180c18 0d190c19 0d1a0d1a     ................
   24a68:	0d1b0d1a 0d1c0d1b 0d1c0d1c 0e1d0d1d     ................
   24a78:	0e1e0e1e 0e1f0e1e 0e200e1f 0e200e20     .......... . . .
   24a88:	0e200e20 0e200e20 0e200e20 0d200d20      . . . . . . . .
   24a98:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   24aa8:	0d200d20 0c200d20 0b000b00 0b000b00      . . . .........
   24ab8:	0b010b00 0b010b01 0b020b02 0b030b02     ................
   24ac8:	0b030b03 0b040b04 0b050b04 0b050b05     ................
   24ad8:	0b060b06 0b060b06 0b070b07 0b080b07     ................
   24ae8:	0b080b08 0b090b09 0b0a0b09 0b0a0b0a     ................
   24af8:	0b0b0b0b 0c0c0b0b 0c0c0c0c 0c0d0c0c     ................
   24b08:	0c0d0c0d 0c0e0c0e 0c0f0c0e 0c0f0c0f     ................
   24b18:	0c100c10 0c110c10 0c110c11 0c120c11     ................
   24b28:	0c120c12 0c130c13 0c130c13 0c140c14     ................
   24b38:	0c150c14 0c150c15 0c160c16 0c170c17     ................
   24b48:	0c180c17 0d190c18 0d190d19 0d1a0d1a     ................
   24b58:	0d1b0d1b 0d1c0d1b 0e1d0e1c 0e1d0e1d     ................
   24b68:	0e1e0e1e 0e1f0e1f 0e200e1f 0e200e20     .......... . . .
   24b78:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   24b88:	0d200e20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   24b98:	0d200d20 0d200d20 0b000b00 0b000b00      . . . .........
   24ba8:	0b010b00 0b010b01 0b020b02 0b030b02     ................
   24bb8:	0b030b03 0b040b04 0b050b04 0b050b05     ................
   24bc8:	0b060b06 0b070b06 0b070b07 0b080b07     ................
   24bd8:	0c080b08 0c090c09 0c0a0c09 0c0a0c0a     ................
   24be8:	0c0b0c0b 0c0c0c0b 0c0c0c0c 0c0d0c0d     ................
   24bf8:	0c0e0c0d 0c0e0c0e 0c0f0c0e 0c0f0c0f     ................
   24c08:	0c100c10 0c110c10 0c110c11 0c120c12     ................
   24c18:	0c120c12 0c130c13 0c140c13 0c140c14     ................
   24c28:	0c150c15 0c160c15 0c160c16 0c170c17     ................
   24c38:	0d180d18 0d190d18 0d1a0d19 0d1a0d1a     ................
   24c48:	0d1b0d1b 0e1c0e1c 0e1d0e1c 0e1e0e1d     ................
   24c58:	0e1e0e1e 0f1f0e1f 0f200f20 0e200e20     ........ . . . .
   24c68:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   24c78:	0e200e20 0d200e20 0d200d20 0d200d20      . . . . . . . .
   24c88:	0d200d20 0d200d20 0b000b00 0b000b00      . . . .........
   24c98:	0b010b01 0b010b01 0b020b02 0b030b02     ................
   24ca8:	0b030b03 0c040c04 0c050c04 0c050c05     ................
   24cb8:	0c060c06 0c070c06 0c070c07 0c080c08     ................
   24cc8:	0c080c08 0c090c09 0c0a0c09 0c0a0c0a     ................
   24cd8:	0c0b0c0b 0c0c0c0b 0c0c0c0c 0c0d0c0d     ................
   24ce8:	0c0e0c0d 0c0e0c0e 0c0f0c0f 0c100c0f     ................
   24cf8:	0c100c10 0c110c10 0c110c11 0c120c12     ................
   24d08:	0c130c12 0c130c13 0c140c13 0c140c14     ................
   24d18:	0c150c15 0c160c15 0d170c16 0d170d17     ................
   24d28:	0d180d18 0d190d19 0d1a0d19 0e1b0d1a     ................
   24d38:	0e1b0e1b 0e1c0e1c 0e1d0e1d 0e1e0e1d     ................
   24d48:	0f1f0e1e 0f1f0f1f 0f200f20 0f200f20     ........ . . . .
   24d58:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   24d68:	0e200e20 0e200e20 0d200e20 0d200d20      . . . . . . . .
   24d78:	0d200d20 0d200d20 0c000c00 0c000c00      . . . .........
   24d88:	0c010c01 0c010c01 0c020c02 0c030c02     ................
   24d98:	0c030c03 0c040c04 0c050c04 0c050c05     ................
   24da8:	0c060c06 0c070c06 0c070c07 0c080c08     ................
   24db8:	0c090c08 0c090c09 0c0a0c09 0c0a0c0a     ................
   24dc8:	0c0b0c0b 0c0c0c0b 0c0c0c0c 0c0d0c0d     ................
   24dd8:	0c0e0c0d 0c0e0c0e 0c0f0c0f 0c100c0f     ................
   24de8:	0c100c10 0c110c11 0c110c11 0c120c12     ................
   24df8:	0c130c12 0c130c13 0c140c14 0c150c14     ................
   24e08:	0d150c15 0d160d16 0d170d16 0d180d17     ................
   24e18:	0d180d18 0d190d19 0e1a0e19 0e1b0e1a     ................
   24e28:	0e1b0e1b 0e1c0e1c 0e1d0e1d 0f1e0f1d     ................
   24e38:	0f1f0f1e 0f1f0f1f 0f200f20 0f200f20     ........ . . . .
   24e48:	0f200f20 0e200f20 0e200e20 0e200e20      . . . . . . . .
   24e58:	0e200e20 0e200e20 0e200e20 0d200e20      . . . . . . . .
   24e68:	0d200d20 0d200d20 0c000c00 0c000c00      . . . .........
   24e78:	0c010c01 0c020c01 0c020c02 0c030c02     ................
   24e88:	0c030c03 0c040c04 0c050c04 0c050c05     ................
   24e98:	0c060c06 0c070c06 0c070c07 0c080c08     ................
   24ea8:	0c090c08 0c090c09 0c0a0c0a 0c0b0c0a     ................
   24eb8:	0c0b0c0b 0c0c0c0c 0c0d0c0c 0c0d0c0d     ................
   24ec8:	0c0e0c0e 0c0e0c0e 0c0f0c0f 0c100c0f     ................
   24ed8:	0d100c10 0d110d11 0d120d11 0d120d12     ................
   24ee8:	0d130d13 0d130d13 0d140d14 0d150d14     ................
   24ef8:	0d150d15 0d160d16 0d170d17 0d180d17     ................
   24f08:	0d180d18 0e190e19 0e1a0e1a 0e1b0e1a     ................
   24f18:	0e1c0e1b 0e1c0e1c 0f1d0f1d 0f1e0f1e     ................
   24f28:	0f1f0f1e 0f200f1f 0f200f20 0f200f20     ...... . . . . .
   24f38:	0f200f20 0f200f20 0e200f20 0e200e20      . . . . . . . .
   24f48:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   24f58:	0e200e20 0d200d20 0c000c00 0c000c00      . . . .........
   24f68:	0c010c01 0c020c01 0c020c02 0c030c02     ................
   24f78:	0c030c03 0c040c04 0c050c04 0c050c05     ................
   24f88:	0c060c06 0c070c06 0c070c07 0c080c08     ................
   24f98:	0c090c08 0c090c09 0c0a0c0a 0c0b0c0a     ................
   24fa8:	0c0b0c0b 0c0c0c0c 0d0d0d0c 0d0d0d0d     ................
   24fb8:	0d0e0d0e 0d0f0d0e 0d0f0d0f 0d100d10     ................
   24fc8:	0d100d10 0d110d11 0d120d11 0d120d12     ................
   24fd8:	0d130d13 0d140d13 0d140d14 0d150d15     ................
   24fe8:	0d160d15 0d160d16 0d170d17 0e180d17     ................
   24ff8:	0e190e18 0e190e19 0e1a0e1a 0e1b0e1b     ................
   25008:	0f1c0e1b 0f1d0f1c 0f1d0f1d 0f1e0f1e     ................
   25018:	0f1f0f1f 0f200f1f 0f200f20 0f200f20     ...... . . . . .
   25028:	0f200f20 0f200f20 0f200f20 0e200f20      . . . . . . . .
   25038:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   25048:	0e200e20 0e200e20 0c000c00 0c000c00      . . . .........
   25058:	0c010c01 0c020c01 0c020c02 0c030c03     ................
   25068:	0c040c03 0c040c04 0c050c04 0c050c05     ................
   25078:	0c060c06 0c070c06 0c070c07 0c080c08     ................
   25088:	0c090c08 0c090c09 0d0a0d0a 0d0b0d0a     ................
   25098:	0d0b0d0b 0d0c0d0c 0d0d0d0c 0d0d0d0d     ................
   250a8:	0d0e0d0e 0d0f0d0e 0d0f0d0f 0d100d10     ................
   250b8:	0d110d10 0d110d11 0d120d12 0d120d12     ................
   250c8:	0d130d13 0d140d13 0d140d14 0d150d15     ................
   250d8:	0d160d15 0d160d16 0e170e17 0e180e18     ................
   250e8:	0e190e18 0e1a0e19 0e1a0e1a 0f1b0f1b     ................
   250f8:	0f1c0f1c 0f1d0f1c 0f1e0f1d 0f1e0f1e     ................
   25108:	101f101f 1020101f 0f200f20 0f200f20     ...... . . . . .
   25118:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   25128:	0e200f20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   25138:	0e200e20 0e200e20 0c000c00 0c000c00      . . . .........
   25148:	0c010c01 0c020c01 0c020c02 0c030c03     ................
   25158:	0c040c03 0c040c04 0c050c05 0d060c05     ................
   25168:	0d060d06 0d070d06 0d070d07 0d080d08     ................
   25178:	0d090d08 0d090d09 0d0a0d0a 0d0b0d0a     ................
   25188:	0d0b0d0b 0d0c0d0c 0d0d0d0c 0d0d0d0d     ................
   25198:	0d0e0d0e 0d0f0d0e 0d0f0d0f 0d100d10     ................
   251a8:	0d110d10 0d110d11 0d120d12 0d130d12     ................
   251b8:	0d130d13 0d140d14 0d150d14 0d150d15     ................
   251c8:	0e160d16 0e170e16 0e170e17 0e180e18     ................
   251d8:	0e190e19 0e1a0e19 0f1b0f1a 0f1b0f1b     ................
   251e8:	0f1c0f1c 0f1d0f1d 0f1e0f1d 101e101e     ................
   251f8:	101f101f 1020101f 10201020 0f201020     ...... . . . . .
   25208:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   25218:	0f200f20 0f200f20 0e200e20 0e200e20      . . . . . . . .
   25228:	0e200e20 0e200e20 0c000c00 0d000c00      . . . .........
   25238:	0d010d01 0d020d01 0d020d02 0d030d03     ................
   25248:	0d040d03 0d040d04 0d050d05 0d060d05     ................
   25258:	0d060d06 0d070d07 0d080d07 0d080d08     ................
   25268:	0d090d08 0d090d09 0d0a0d0a 0d0b0d0a     ................
   25278:	0d0b0d0b 0d0c0d0c 0d0d0d0d 0d0e0d0d     ................
   25288:	0d0e0d0e 0d0f0d0f 0d100d0f 0d100d10     ................
   25298:	0d110d11 0d110d11 0d120d12 0d130d12     ................
   252a8:	0d130d13 0d140d14 0e150e14 0e150e15     ................
   252b8:	0e160e16 0e170e16 0e180e17 0e180e18     ................
   252c8:	0f190e19 0f1a0f1a 0f1b0f1a 0f1c0f1b     ................
   252d8:	0f1c0f1c 101d0f1d 101e101d 101e101e     ................
   252e8:	101f101f 101f101f 10201020 10201020     ........ . . . .
   252f8:	0f201020 0f200f20 0f200f20 0f200f20      . . . . . . . .
   25308:	0f200f20 0f200f20 0f200f20 0e200e20      . . . . . . . .
   25318:	0e200e20 0e200e20 0d000d00 0d000d00      . . . .........
   25328:	0d010d01 0d020d01 0d020d02 0d030d03     ................
   25338:	0d040d03 0d040d04 0d050d05 0d060d05     ................
   25348:	0d060d06 0d070d07 0d080d07 0d080d08     ................
   25358:	0d090d09 0d0a0d09 0d0a0d0a 0d0b0d0b     ................
   25368:	0d0c0d0b 0d0c0d0c 0d0d0d0d 0d0e0d0d     ................
   25378:	0d0e0d0e 0d0f0d0f 0d100d0f 0e100e10     ................
   25388:	0e110e11 0e120e11 0e120e12 0e130e13     ................
   25398:	0e140e13 0e140e14 0e150e14 0e160e15     ................
   253a8:	0e160e16 0e170e17 0e180e17 0f190f18     ................
   253b8:	0f190f19 0f1a0f1a 0f1b0f1b 0f1c0f1b     ................
   253c8:	101c101c 101d101d 101e101d 101e101e     ................
   253d8:	101f101e 101f101f 10201020 10201020     ........ . . . .
   253e8:	10201020 0f201020 0f200f20 0f200f20      . . . . . . . .
   253f8:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   25408:	0e200e20 0e200e20 0d000d00 0d000d00      . . . .........
   25418:	0d010d01 0d020d01 0d020d02 0d030d03     ................
   25428:	0d040d03 0d040d04 0d050d05 0d060d05     ................
   25438:	0d060d06 0d070d07 0d080d07 0d080d08     ................
   25448:	0d090d09 0d0a0d09 0d0a0d0a 0d0b0d0b     ................
   25458:	0d0c0d0b 0d0c0d0c 0e0d0d0d 0e0e0e0d     ................
   25468:	0e0e0e0e 0e0f0e0f 0e100e0f 0e100e10     ................
   25478:	0e110e11 0e120e11 0e120e12 0e130e13     ................
   25488:	0e140e13 0e140e14 0e150e15 0e160e15     ................
   25498:	0e160e16 0f170e17 0f180f18 0f190f18     ................
   254a8:	0f1a0f19 0f1a0f1a 101b0f1b 101c101b     ................
   254b8:	101c101c 101d101d 101e101d 101e101e     ................
   254c8:	101f101e 101f101f 10201020 10201020     ........ . . . .
   254d8:	10201020 10201020 10201020 0f200f20      . . . . . . . .
   254e8:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   254f8:	0f200f20 0e200e20 0d000d00 0d000d00      . . . .........
   25508:	0d010d01 0d020d01 0d020d02 0d030d03     ................
   25518:	0d040d03 0d040d04 0d050d05 0d060d05     ................
   25528:	0d060d06 0d070d07 0d080d07 0d080d08     ................
   25538:	0d090d09 0d0a0d09 0d0a0d0a 0e0b0d0b     ................
   25548:	0e0c0e0b 0e0c0e0c 0e0d0e0d 0e0e0e0d     ................
   25558:	0e0e0e0e 0e0f0e0f 0e100e0f 0e110e10     ................
   25568:	0e110e11 0e120e12 0e120e12 0e130e13     ................
   25578:	0e140e13 0e140e14 0e150e15 0e160e15     ................
   25588:	0f170e16 0f170f17 0f180f18 0f190f19     ................
   25598:	0f1a0f19 101b0f1a 101b101b 101c101b     ................
   255a8:	101c101c 101d101d 101d101d 101e101e     ................
   255b8:	101f101e 101f101f 1020101f 10201020     .......... . . .
   255c8:	10201020 10201020 10201020 10201020      . . . . . . . .
   255d8:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   255e8:	0f200f20 0f200f20 0d000d00 0d000d00      . . . .........
   255f8:	0d010d01 0d020d01 0d020d02 0d030d03     ................
   25608:	0d040d03 0d040d04 0d050d05 0d060d05     ................
   25618:	0d060d06 0e070d07 0e080e07 0e080e08     ................
   25628:	0e090e09 0e0a0e09 0e0a0e0a 0e0b0e0b     ................
   25638:	0e0c0e0b 0e0c0e0c 0e0d0e0d 0e0e0e0e     ................
   25648:	0e0f0e0e 0e0f0e0f 0e100e10 0e110e10     ................
   25658:	0e110e11 0e120e12 0e130e12 0e130e13     ................
   25668:	0e140e14 0e150e14 0f150e15 0f160f16     ................
   25678:	0f170f16 0f180f17 0f180f18 0f190f19     ................
   25688:	101a101a 101a101a 101b101b 101c101b     ................
   25698:	101c101c 101d101c 101d101d 101e101e     ................
   256a8:	101e101e 101f101f 1020101f 10201020     .......... . . .
   256b8:	10201020 10201020 10201020 10201020      . . . . . . . .
   256c8:	10201020 0f200f20 0f200f20 0f200f20      . . . . . . . .
   256d8:	0f200f20 0f200f20 0d000d00 0d000d00      . . . .........
   256e8:	0d010d01 0e020d01 0e020e02 0e030e03     ................
   256f8:	0e040e03 0e040e04 0e050e05 0e060e05     ................
   25708:	0e060e06 0e070e07 0e080e07 0e080e08     ................
   25718:	0e090e09 0e0a0e09 0e0a0e0a 0e0b0e0b     ................
   25728:	0e0c0e0b 0e0d0e0c 0e0d0e0d 0e0e0e0e     ................
   25738:	0e0f0e0e 0e0f0e0f 0e100e10 0e110e10     ................
   25748:	0e110e11 0e120e12 0f130e12 0f130f13     ................
   25758:	0f140f14 0f150f14 0f150f15 0f160f16     ................
   25768:	0f170f17 0f180f17 10190f18 10191019     ................
   25778:	101a1019 101a101a 101b101b 101b101b     ................
   25788:	101c101c 101d101c 101d101d 101e101d     ................
   25798:	101e101e 101f101f 1020101f 10201020     .......... . . .
   257a8:	10201020 10201020 10201020 10201020      . . . . . . . .
   257b8:	10201020 10201020 0f200f20 0f200f20      . . . . . . . .
   257c8:	0f200f20 0f200f20 0e000e00 0e000e00      . . . .........
   257d8:	0e010e01 0e020e01 0e020e02 0e030e03     ................
   257e8:	0e040e03 0e040e04 0e050e05 0e060e05     ................
   257f8:	0e060e06 0e070e07 0e080e07 0e090e08     ................
   25808:	0e090e09 0e0a0e0a 0e0b0e0a 0e0b0e0b     ................
   25818:	0e0c0e0c 0e0d0e0c 0e0d0e0d 0e0e0e0e     ................
   25828:	0e0f0e0e 0e0f0e0f 0f100e10 0f110f10     ................
   25838:	0f110f11 0f120f12 0f130f13 0f140f13     ................
   25848:	0f140f14 0f150f15 0f160f15 0f160f16     ................
   25858:	0f170f17 10180f18 10181018 10191019     ................
   25868:	101a1019 101a101a 101b101a 101b101b     ................
   25878:	101c101c 101d101c 101d101d 101e101d     ................
   25888:	101e101e 101f101f 101f101f 10201020     ............ . .
   25898:	10201020 10201020 10201020 10201020      . . . . . . . .
   258a8:	10201020 10201020 10201020 0f201020      . . . . . . . .
   258b8:	0f200f20 0f200f20 0e000e00 0e000e00      . . . .........
   258c8:	0e010e01 0e020e01 0e020e02 0e030e03     ................
   258d8:	0e040e03 0e040e04 0e050e05 0e060e05     ................
   258e8:	0e070e06 0e070e07 0e080e08 0e090e08     ................
   258f8:	0e090e09 0e0a0e0a 0e0b0e0a 0e0b0e0b     ................
   25908:	0e0c0e0c 0e0d0e0c 0e0d0e0d 0f0e0e0e     ................
   25918:	0f0f0f0e 0f100f0f 0f100f10 0f110f11     ................
   25928:	0f120f11 0f120f12 0f130f13 0f140f13     ................
   25938:	0f140f14 0f150f15 0f160f15 0f170f16     ................
   25948:	10171017 10181017 10181018 10191019     ................
   25958:	10191019 101a101a 101b101a 101b101b     ................
   25968:	101c101c 101c101c 101d101d 101e101d     ................
   25978:	101e101e 101f101e 101f101f 10201020     ............ . .
   25988:	10201020 10201020 10201020 10201020      . . . . . . . .
   25998:	10201020 10201020 10201020 10201020      . . . . . . . .
   259a8:	0f201020 0f200f20 0e000e00 0e000e00      . . . .........
   259b8:	0e010e01 0e020e01 0e020e02 0e030e03     ................
   259c8:	0e040e03 0e040e04 0e050e05 0e060e06     ................
   259d8:	0e070e06 0e070e07 0e080e08 0e090e08     ................
   259e8:	0e090e09 0e0a0e0a 0e0b0e0a 0e0b0e0b     ................
   259f8:	0f0c0f0c 0f0d0f0c 0f0d0f0d 0f0e0f0e     ................
   25a08:	0f0f0f0f 0f100f0f 0f100f10 0f110f11     ................
   25a18:	0f120f11 0f120f12 0f130f13 0f140f13     ................
   25a28:	0f140f14 0f150f15 10160f16 10161016     ................
   25a38:	10171017 10181017 10181018 10191019     ................
   25a48:	10191019 101a101a 101b101a 101b101b     ................
   25a58:	101c101b 101c101c 101d101d 101d101d     ................
   25a68:	101e101e 101f101e 101f101f 1020101f     .............. .
   25a78:	10201020 10201020 10201020 10201020      . . . . . . . .
   25a88:	10201020 10201020 10201020 10201020      . . . . . . . .
   25a98:	10201020 0f201020 0e000e00 0e000e00      . . . .........
   25aa8:	0e010e01 0e020e01 0e020e02 0e030e03     ................
   25ab8:	0e040e03 0e040e04 0e050e05 0e060e06     ................
   25ac8:	0e070e06 0e070e07 0e080e08 0e090e08     ................
   25ad8:	0f090f09 0f0a0f0a 0f0b0f0a 0f0b0f0b     ................
   25ae8:	0f0c0f0c 0f0d0f0c 0f0e0f0d 0f0e0f0e     ................
   25af8:	0f0f0f0f 0f100f0f 0f100f10 0f110f11     ................
   25b08:	0f120f11 0f120f12 0f130f13 0f140f14     ................
   25b18:	0f150f14 10151015 10161016 10161016     ................
   25b28:	10171017 10181017 10181018 10191018     ................
   25b38:	10191019 101a101a 101a101a 101b101b     ................
   25b48:	101c101b 101c101c 101d101c 101d101d     ................
   25b58:	101e101e 101f101e 101f101f 1020101f     .............. .
   25b68:	10201020 10201020 10201020 10201020      . . . . . . . .
   25b78:	10201020 10201020 10201020 10201020      . . . . . . . .
   25b88:	10201020 10201020 0e000e00 0e000e00      . . . .........
   25b98:	0e010e01 0e020e01 0e020e02 0f030e03     ................
   25ba8:	0f040f03 0f050f04 0f050f05 0f060f06     ................
   25bb8:	0f070f06 0f070f07 0f080f08 0f090f08     ................
   25bc8:	0f090f09 0f0a0f0a 0f0b0f0a 0f0c0f0b     ................
   25bd8:	0f0c0f0c 0f0d0f0d 0f0e0f0d 0f0e0f0e     ................
   25be8:	0f0f0f0f 0f100f0f 0f100f10 0f110f11     ................
   25bf8:	0f120f11 0f130f12 10131013 10141014     ................
   25c08:	10151014 10151015 10161015 10161016     ................
   25c18:	10171017 10171017 10181018 10191018     ................
   25c28:	10191019 101a1019 101a101a 101b101b     ................
   25c38:	101c101b 101c101c 101d101c 101d101d     ................
   25c48:	101e101e 101e101e 101f101f 1020101f     .............. .
   25c58:	10201020 10201020 10201020 10201020      . . . . . . . .
   25c68:	10201020 10201020 10201020 10201020      . . . . . . . .
   25c78:	10201020 10201020 0f000f00 0f000f00      . . . .........
   25c88:	0f010f01 0f020f01 0f020f02 0f030f03     ................
   25c98:	0f040f03 0f050f04 0f050f05 0f060f06     ................
   25ca8:	0f070f06 0f070f07 0f080f08 0f090f08     ................
   25cb8:	0f090f09 0f0a0f0a 0f0b0f0b 0f0c0f0b     ................
   25cc8:	0f0c0f0c 0f0d0f0d 0f0e0f0d 0f0e0f0e     ................
   25cd8:	0f0f0f0f 0f100f0f 0f110f10 10111011     ................
   25ce8:	10121012 10131012 10131013 10141014     ................
   25cf8:	10141014 10151015 10161015 10161016     ................
   25d08:	10171016 10171017 10181018 10181018     ................
   25d18:	10191019 101a1019 101a101a 101b101b     ................
   25d28:	101b101b 101c101c 101d101c 101d101d     ................
   25d38:	101e101d 101e101e 101f101f 101f101f     ................
   25d48:	10201020 10201020 10201020 10201020      . . . . . . . .
   25d58:	10201020 10201020 10201020 10201020      . . . . . . . .
   25d68:	10201020 10201020 0f000f00 0f000f00      . . . .........
   25d78:	0f010f01 0f020f01 0f020f02 0f030f03     ................
   25d88:	0f040f03 0f050f04 0f050f05 0f060f06     ................
   25d98:	0f070f06 0f070f07 0f080f08 0f090f08     ................
   25da8:	0f0a0f09 0f0a0f0a 0f0b0f0b 0f0c0f0b     ................
   25db8:	0f0c0f0c 0f0d0f0d 0f0e0f0d 0f0e0f0e     ................
   25dc8:	100f100f 1010100f 10101010 10111011     ................
   25dd8:	10121011 10121012 10131013 10141013     ................
   25de8:	10141014 10151015 10151015 10161016     ................
   25df8:	10171016 10171017 10181018 10181018     ................
   25e08:	10191019 101a1019 101a101a 101b101a     ................
   25e18:	101b101b 101c101c 101c101c 101d101d     ................
   25e28:	101e101d 101e101e 101f101e 101f101f     ................
   25e38:	10201020 10201020 10201020 10201020      . . . . . . . .
   25e48:	10201020 10201020 10201020 10201020      . . . . . . . .
   25e58:	10201020 10201020 0f000f00 0f000f00      . . . .........
   25e68:	0f010f01 0f020f01 0f020f02 0f030f03     ................
   25e78:	0f040f03 0f050f04 0f050f05 0f060f06     ................
   25e88:	0f070f06 0f070f07 0f080f08 0f090f09     ................
   25e98:	0f0a0f09 0f0a0f0a 0f0b0f0b 0f0c0f0b     ................
   25ea8:	0f0c0f0c 100d100d 100e100d 100e100e     ................
   25eb8:	100f100f 1010100f 10101010 10111011     ................
   25ec8:	10121011 10121012 10131013 10141013     ................
   25ed8:	10141014 10151015 10151015 10161016     ................
   25ee8:	10171016 10171017 10181017 10181018     ................
   25ef8:	10191019 10191019 101a101a 101b101a     ................
   25f08:	101b101b 101c101b 101c101c 101d101d     ................
   25f18:	101e101d 101e101e 101f101e 101f101f     ................
   25f28:	10201020 10201020 10201020 10201020      . . . . . . . .
   25f38:	10201020 10201020 10201020 10201020      . . . . . . . .
   25f48:	10201020 10201020 0f000f00 0f000f00      . . . .........
   25f58:	0f010f01 0f020f01 0f020f02 0f030f03     ................
   25f68:	0f040f03 0f050f04 0f050f05 0f060f06     ................
   25f78:	0f070f06 0f070f07 0f080f08 0f090f09     ................
   25f88:	0f0a0f09 0f0a0f0a 100b100b 100c100b     ................
   25f98:	100c100c 100d100d 100e100d 100e100e     ................
   25fa8:	100f100f 1010100f 10101010 10111011     ................
   25fb8:	10121011 10121012 10131013 10141013     ................
   25fc8:	10141014 10151015 10151015 10161016     ................
   25fd8:	10161016 10171017 10181017 10181018     ................
   25fe8:	10191018 10191019 101a101a 101a101a     ................
   25ff8:	101b101b 101c101b 101c101c 101d101d     ................
   26008:	101d101d 101e101e 101f101e 101f101f     ................
   26018:	1020101f 10201020 10201020 10201020     .. . . . . . . .
   26028:	10201020 10201020 10201020 10201020      . . . . . . . .
   26038:	10201020 10201020 0f000f00 0f000f00      . . . .........
   26048:	0f010f01 0f020f01 0f020f02 0f030f03     ................
   26058:	0f040f03 0f050f04 10051005 10061006     ................
   26068:	10071006 10071007 10081008 10091009     ................
   26078:	100a1009 100a100a 100b100b 100c100b     ................
   26088:	100c100c 100d100d 100e100d 100e100e     ................
   26098:	100f100f 1010100f 10101010 10111011     ................
   260a8:	10121011 10121012 10131013 10141013     ................
   260b8:	10141014 10151015 10151015 10161015     ................
   260c8:	10161016 10171017 10171017 10181018     ................
   260d8:	10191018 10191019 101a101a 101a101a     ................
   260e8:	101b101b 101c101b 101c101c 101d101c     ................
   260f8:	101d101d 101e101e 101e101e 101f101f     ................
   26108:	1020101f 10201020 10201020 10201020     .. . . . . . . .
   26118:	10201020 10201020 10201020 10201020      . . . . . . . .
   26128:	10201020 10201020 10001000 10001000      . . . .........
   26138:	10011001 10021001 10021002 10031003     ................
   26148:	10041003 10051004 10051005 10061006     ................
   26158:	10071006 10071007 10081008 10091009     ................
   26168:	100a1009 100a100a 100b100b 100c100b     ................
   26178:	100c100c 100d100d 100e100d 100e100e     ................
   26188:	100f100f 1010100f 10101010 10111011     ................
   26198:	10121011 10121012 10131013 10141013     ................
   261a8:	10141014 10151015 10151015 10161015     ................
   261b8:	10161016 10171017 10171017 10181018     ................
   261c8:	10191018 10191019 101a1019 101a101a     ................
   261d8:	101b101b 101b101b 101c101c 101d101c     ................
   261e8:	101d101d 101e101d 101e101e 101f101f     ................
   261f8:	1020101f 10201020 10201020 10201020     .. . . . . . . .
   26208:	10201020 10201020 10201020 10201020      . . . . . . . .
   26218:	10201020 10201020 10001000 10001000      . . . .........
   26228:	10011001 10021001 10021002 10031003     ................
   26238:	10041003 10051004 10051005 10061006     ................
   26248:	10071006 10071007 10081008 10091009     ................
   26258:	100a1009 100a100a 100b100b 100c100b     ................
   26268:	100c100c 100d100d 100e100d 100e100e     ................
   26278:	100f100f 1010100f 10101010 10111011     ................
   26288:	10121011 10121012 10131013 10141013     ................
   26298:	10141014 10151015 10151015 10161015     ................
   262a8:	10161016 10171016 10171017 10181018     ................
   262b8:	10181018 10191019 101a1019 101a101a     ................
   262c8:	101b101a 101b101b 101c101c 101d101c     ................
   262d8:	101d101d 101e101d 101e101e 101f101f     ................
   262e8:	101f101f 10201020 10201020 10201020     .... . . . . . .
   262f8:	10201020 10201020 10201020 10201020      . . . . . . . .
   26308:	10201020 10201020 10001000 10001000      . . . .........
   26318:	10011001 10021001 10021002 10031003     ................
   26328:	10041003 10051004 10051005 10061006     ................
   26338:	10071006 10071007 10081008 10091009     ................
   26348:	100a1009 100a100a 100b100b 100c100b     ................
   26358:	100c100c 100d100c 100d100d 100e100e     ................
   26368:	100f100e 100f100f 10101010 10111010     ................
   26378:	10111011 10121012 10131012 10131013     ................
   26388:	10141014 10151014 10151015 10151015     ................
   26398:	10161016 10171016 10171017 10181017     ................
   263a8:	10181018 10191019 10191019 101a101a     ................
   263b8:	101b101a 101b101b 101c101c 101c101c     ................
   263c8:	101d101d 101e101d 101e101e 101f101e     ................
   263d8:	101f101f 10201020 10201020 10201020     .... . . . . . .
   263e8:	10201020 10201020 10201020 10201020      . . . . . . . .
   263f8:	10201020 10201020 10001000 10001000      . . . .........
   26408:	10011001 10021001 10021002 10031003     ................
   26418:	10041003 10051004 10051005 10061006     ................
   26428:	10071006 10071007 10081008 10091008     ................
   26438:	100a1009 100a100a 100b100a 100b100b     ................
   26448:	100c100c 100d100c 100d100d 100e100e     ................
   26458:	100f100e 100f100f 10101010 10111010     ................
   26468:	10111011 10121012 10131012 10131013     ................
   26478:	10141014 10151014 10151015 10151015     ................
   26488:	10161016 10161016 10171017 10181017     ................
   26498:	10181018 10191019 10191019 101a101a     ................
   264a8:	101b101a 101b101b 101c101b 101c101c     ................
   264b8:	101d101d 101d101d 101e101e 101f101e     ................
   264c8:	101f101f 1020101f 10201020 10201020     ...... . . . . .
   264d8:	10201020 10201020 10201020 10201020      . . . . . . . .
   264e8:	10201020 10201020 10001000 10001000      . . . .........
   264f8:	10011000 10021001 10021002 10031003     ................
   26508:	10041003 10041004 10051005 10061006     ................
   26518:	10071006 10071007 10081008 10091008     ................
   26528:	100a1009 100a100a 100b100a 100b100b     ................
   26538:	100c100c 100d100c 100d100d 100e100e     ................
   26548:	100f100e 100f100f 10101010 10111010     ................
   26558:	10111011 10121012 10131012 10131013     ................
   26568:	10141014 10151014 10151015 10151015     ................
   26578:	10161015 10161016 10171017 10181017     ................
   26588:	10181018 10191018 10191019 101a101a     ................
   26598:	101a101a 101b101b 101c101b 101c101c     ................
   265a8:	101d101c 101d101d 101e101e 101f101e     ................
   265b8:	101f101f 1020101f 10201020 10201020     ...... . . . . .
   265c8:	10201020 10201020 10201020 10201020      . . . . . . . .
   265d8:	10201020 10201020                        . . . .

000265e0 <_ZN3app5chip823PHYSICAL_TO_VIRTUAL_MAP17h5b1a7b084f35e873E>:
   265e0:	00020820 06040000 06080005 060c0009      ...............
   265f0:	0610000d 06150011 06190016 061d001a     ................
   26600:	0621001d 06240021 06280025 062d002a     ..!.!.$.%.(.*.-.
   26610:	0631002e 06340031 06380035 063c0038     ..1.1.4.5.8.8.<.
   26620:	0640003c 06440040 06470043 064b0047     <.@.@.D.C.G.G.K.
   26630:	064f004a 0652004d 06560051 065a0055     J.O.M.R.Q.V.U.Z.
   26640:	055d0058 0560005c 0563005f 05660063     X.].\.`._.c.c.f.
   26650:	056a0066 056d006a 0470006e 04740071     f.j.j.m.n.p.q.t.
   26660:	04770074 0c040700 0c080705 0c0c0709     t.w.............
   26670:	0c10070d 0c150711 0c190716 0c1c0719     ................
   26680:	0c20071d 0c240721 0c280725 0c2d072a     .. .!.$.%.(.*.-.
   26690:	0c30072d 0c340731 0c380735 0b3b0738     -.0.1.4.5.8.8.;.
   266a0:	0b40073c 0b430740 0b470744 0b4b0748     <.@.@.C.D.G.H.K.
   266b0:	0b4e074b 0b52074f 0b560752 0b590657     K.N.O.R.R.V.W.Y.
   266c0:	0b5c065a 0a60065d 0a630660 0a660663     Z.\.].`.`.c.c.f.
   266d0:	0a6a0667 096d056b 0970056e 09730571     g.j.k.m.n.p.q.s.
   266e0:	09770574 13040d00 12080d05 120c0d09     t.w.............
   266f0:	12100d0d 12150d11 12180d15 121c0d19     ................
   26700:	12200d1d 12240d21 12280d25 122c0d28     .. .!.$.%.(.(.,.
   26710:	12300d2d 12340d31 12370c34 113b0c38     -.0.1.4.4.7.8.;.
   26720:	113f0c3c 11430c40 11470c44 114a0c47     <.?.@.C.D.G.G.J.
   26730:	114e0c4b 11510c4e 10560c52 10590c56     K.N.N.Q.R.V.V.Y.
   26740:	105c0b5a 0f5f0b5d 0f620b60 0f660b63     Z.\.]._.`.b.c.f.
   26750:	0f6a0a66 0e6d0a6b 0e700a6e 0e730a71     f.j.k.m.n.p.q.s.
   26760:	0d760a74 1a041500 1a081305 1a0c1309     t.v.............
   26770:	1a10130d 1a131310 1a181315 1a1c1319     ................
   26780:	1920131d 19231320 19271324 192c1328     .. . .#.$.'.(.,.
   26790:	1930132d 19331330 19371234 183a1238     -.0.0.3.4.7.8.:.
   267a0:	183f123b 18431240 18461243 174a1247     ;.?.@.C.C.F.G.J.
   267b0:	174d124b 1751114e 17551152 17591156     K.M.N.Q.R.U.V.Y.
   267c0:	165c1159 165f105c 15621060 15651063     Y.\.\._.`.b.c.e.
   267d0:	156a0f66 136d0f6a 13700f6d 12730f71     f.j.j.m.m.p.q.s.
   267e0:	12760e74 20041b00 20081b05 200c1b09     t.v.... ... ... 
   267f0:	200f1b0d 20131b10 20181b15 201c1a19     ... ... ... ... 
   26800:	201f1a1c 20231a20 20271a24 1f2c1a28     ...  .# $.' (.,.
   26810:	1f2f1a2c 1f331a30 1f361933 1e3a1937     ,./.0.3.3.6.7.:.
   26820:	1e3f193b 1e42193f 1e461943 1d491846     ;.?.?.B.C.F.F.I.
   26830:	1d4d184a 1d51184e 1c551851 1c581756     J.M.N.Q.Q.U.V.X.
   26840:	1b5b1759 1b5f165c 1a62165f 1a651662     Y.[.\._._.b.b.e.
   26850:	1a691565 196c156a 1970156d 18731370     e.i.j.l.m.p.p.s.
   26860:	18761374 26042100 26082105 260c2109     t.v..!.&.!.&.!.&
   26870:	260f210c 26132110 26182115 261b2118     .!.&.!.&.!.&.!.&
   26880:	261f211c 26232120 26272023 252b2027     .!.& !#&# '&' +%
   26890:	252f202c 2532202f 25362033 25391f36     , /%/ 2%3 6%6.9%
   268a0:	243d1f3a 24421f3d 24451e42 23491e46     :.=$=.B$B.E$F.I#
   268b0:	234d1e49 23501d4d 22551d51 21581c55     I.M#M.P#Q.U"U.X!
   268c0:	215b1c58 205e1c5b 20611b5e 1f641b61     X.[![.^ ^.a a.d.
   268d0:	1f671a64 1e6c1a69 1e6f196c 1d72196f     d.g.i.l.l.o.o.r.
   268e0:	1d761973 2e042700 2d082705 2d0b2709     s.v..'...'.-.'.-
   268f0:	2d0f270c 2d132710 2d172713 2d1b2718     .'.-.'.-.'.-.'.-
   26900:	2d1f271b 2d22271f 2c262623 2c2b2626     .'.-.'"-#&&,&&+,
   26910:	2c2e262b 2c32262e 2c352632 2c392535     +&.,.&2,2&5,5%9,
   26920:	2c3c2539 2b41253d 2b442541 2b482445     9%<,=%A+A%D+E$H+
   26930:	2b4c2448 2a4f244c 2a52234f 28572252     H$L+L$O*O#R*R"W(
   26940:	275a2157 265d215a 2560205d 24632060     W!Z'Z!]&] `%` c$
   26950:	24671f63 236b1f67 236e1e6b 22711e6e     c.g$g.k#k.n#n.q"
   26960:	22751d71 34042f00 34082e05 330b2e08     q.u"./.4...4...3
   26970:	330f2e0c 33122e0f 33172e13 331a2e17     ...3...3...3...3
   26980:	331e2e1b 33222d1e 32252d22 322a2d26     ...3.-"3"-%2&-*2
   26990:	322d2d2a 32312d2e 32342d31 32382d35     *--2.-121-425-82
   269a0:	323b2c38 32402c3b 31432c40 31472c44     8,;2;,@2@,C1D,G1
   269b0:	314b2b47 314e2b4a 30512a4e 2f552851     G+K1J+N1N*Q0Q(U/
   269c0:	2e592755 2d5c2659 2c5f255c 2b62255f     U'Y.Y&\-\%_,_%b+
   269d0:	2a652462 28692465 286d2369 2770236c     b$e*e$i(i#m(l#p'
   269e0:	27732270 3a043500 3a073505 3a0b3408     p"s'.5.:.5.:.4.:
   269f0:	390e340c 3912340f 39163413 391a3417     .4.9.4.9.4.9.4.9
   26a00:	391d341a 3821331e 38243321 38283325     .4.9.3!8!3$8%3(8
   26a10:	382c3328 3830332d 38333330 38373334     (3,8-30803384378
   26a20:	383a3337 383f323b 3842323f 38463243     73:8;2?8?2B8C2F8
   26a30:	37493246 374d314a 3650304d 36543050     F2I7J1M7M0P6P0T6
   26a40:	34572e54 335a2d57 325e2c5a 31612b5d     T.W4W-Z3Z,^2]+a1
   26a50:	30642a60 2f672a64 2e6b2867 2d6e286b     `*d0d*g/g(k.k(n-
   26a60:	2c72276e 41043b00 41073b05 410b3a08     n'r,.;.A.;.A.:.A
   26a70:	400e3a0b 40113a0f 40163a12 40193a16     .:.@.:.@.:.@.:.@
   26a80:	401d3a1a 3f20391d 3f243921 3f273924     .:.@.9 ?!9$?$9'?
   26a90:	3f2c3928 3f2f392c 3f32392f 3f363933     (9,?,9/?/92?396?
   26aa0:	3f393936 3d3d393a 3d41393d 3f453842     699?:9===9A=B8E?
   26ab0:	3f483845 3f4c3848 3d4f374c 3c52364f     E8H?H8L?L7O=O6R<
   26ac0:	3b563552 39593356 385c3259 375f315c     R5V;V3Y9Y2\8\1_7
   26ad0:	3562305f 34662f62 336a2e65 326d2e6a     _0b5b/f4e.j3j.m2
   26ae0:	31702d6d 47044200 47074205 470a4208     m-p1.B.G.B.G.B.G
   26af0:	460e410b 4611410e 46154112 46194116     .A.F.A.F.A.F.A.F
   26b00:	451c4019 4520401d 45234020 45264023     .@.E.@ E @#E#@&E
   26b10:	442b4027 442e402b 4431402e 44354031     '@+D+@.D.@1D1@5D
   26b20:	44383f35 443c3f38 44403f3b 44443f40     5?8D8?<D;?@D@?DD
   26b30:	44474044 444b3f47 444e3f4b 43513c4e     D@GDG?KDK?NDN<QC
   26b40:	41553b51 40583955 3f5b3857 3c5e375b     Q;UAU9X@W8[?[7^<
   26b50:	3b61365e 3a643561 39673464 386b3367     ^6a;a5d:d4g9g3k8
   26b60:	376f326b 4c044800 4c074804 4c0a4708     k2o7.H.L.H.L.G.L
   26b70:	4c0d470b 4b11470e 4b154711 4b184615     .G.L.G.K.G.K.F.K
   26b80:	4b1b4618 4b1f461c 4a22461f 4a254622     .F.K.F.K.F"J"F%J
   26b90:	4a2a4525 492d452a 4930452d 49334530     %E*J*E-I-E0I0E3I
   26ba0:	49374533 493a4536 493f453a 4942453d     3E7I6E:I:E?I=EBI
   26bb0:	49464542 49494545 484c4549 484f444c     BEFIEEIIIELHLDOH
   26bc0:	4752424f 45564052 44593f56 435c3d59     OBRGR@VEV?YDY=\C
   26bd0:	415f3b5c 40623a5f 3f653962 3d6a3865     \;_A_:b@b9e?e8j=
   26be0:	3c6d3769 52034d00 51074d04 510a4d07     i7m<.M.R.M.Q.M.Q
   26bf0:	510d4d0a 51104c0d 51134c10 50174c15     .M.Q.L.Q.L.Q.L.P
   26c00:	501a4c18 501e4b1b 50214b1e 4f244b21     .L.P.K.P.K!P!K$O
   26c10:	4f274b24 4f2c4a27 4e2f4a2b 4e324a2e     $K'O'J,O+J/N.J2N
   26c20:	4e354a32 4e384a35 4d3c4a38 4d404a3c     2J5N5J8N8J<M<J@M
   26c30:	4d444a40 4d474a43 4d4a4946 4c4d484a     @JDMCJGMFIJMJHML
   26c40:	4b50474d 4a554550 49574554 485a4357     MGPKPEUJTEWIWCZH
   26c50:	465e415a 4560415d 44633f60 43673d63     ZA^F]A`E`?cDc=gC
   26c60:	416b3c66 58035200 58065204 57095207     f<kA.R.X.R.X.R.W
   26c70:	570c520a 570f520d 57125210 57175113     .R.W.R.W.R.W.Q.W
   26c80:	571a5117 561d511a 5620511d 56235020     .Q.W.Q.V.Q V P#V
   26c90:	56265023 552a4f26 552d4f2a 54304f2d     #P&V&O*U*O-U-O0T
   26ca0:	54334f30 54374e33 523a4e36 523d4e3a     0O3T3N7T6N:R:N=R
   26cb0:	52424e3d 52454e41 51484d44 514b4d47     =NBRANERDMHQGMKQ
   26cc0:	4f4e4c4b 4e514b4e 4d554951 4c584855     KLNONKQNQIUMUHXL
   26cd0:	4b5b4758 4a5f455b 4961445e 47644361     XG[K[E_J^DaIaCdG
   26ce0:	46674264 5d035900 5d065904 5d095807     dBgF.Y.].Y.].X.]
   26cf0:	5d0c580a 5c0f580d 5c125810 5c165812     .X.].X.\.X.\.X.\
   26d00:	5c195716 5c1c5719 5c1f571c 5b22571f     .W.\.W.\.W.\.W"[
   26d10:	5b255622 5a285625 5a2c5528 5a2f552c     "V%[%V(Z(U,Z,U/Z
   26d20:	5932552f 59355432 58385435 583b5438     /U2Y2T5Y5T8X8T;X
   26d30:	573f543b 5743523f 57465242 56495146     ;T?W?RCWBRFWFQIV
   26d40:	554c5049 544f4f4c 52544d4f 51564d52     IPLULOOTOMTRRMVQ
   26d50:	4f594c56 4e5c4a59 4d5f495c 4c62485f     VLYOYJ\N\I_M_HbL
   26d60:	4b664662 62035e00 62065e04 62095e07     bFfK.^.b.^.b.^.b
   26d70:	620c5d0a 620e5d0d 62115d0f 61155d12     .].b.].b.].b.].a
   26d80:	61185d16 611b5d19 611e5c1b 61215c1e     .].a.].a.\.a.\!a
   26d90:	60245c21 60275b24 5f2b5b27 5f2e5a2b     !\$`$['`'[+_+Z._
   26da0:	5e305a2e 5e345931 5e375933 5d395937     .Z0^1Y4^3Y7^7Y9]
   26db0:	5d3d5839 5c41583c 5c445740 5b475743     9X=]<XA\@WD\CWG[
   26dc0:	5a4a5546 594d5449 5750524d 56545150     FUJZITMYMRPWPQTV
   26dd0:	55575054 545a4f57 525e4d5a 51604d5d     TPWUWOZTZM^R]M`Q
   26de0:	4f634b60                                `KcO

00026de4 <_ZN3app5chip823VIRTUAL_TO_PHYSICAL_MAP17h0c964d4301637332E>:
   26de4:	000265e4 74737552 756f7420 73206863     .e..Rust touch s
   26df4:	6f736e65 00000a72 00000000 00026dfc     ensor........m..
   26e04:	65737361 6f697472 6166206e 64656c69     assertion failed
   26e14:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   26e24:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   26e34:	67697220 203a7468 203a6060 00026e04      right: ``: .n..
   26e44:	0000002d 00026e31 0000000c 00026e3d     -...1n......=n..
   26e54:	00000003 00026e40 20515249 74696e69     ....@n..IRQ init
   26e64:	69616620 0000006c 00026e5c 0000000d      fail...\n......
   26e74:	00026e6c 00026e78 74737572 7070612f     ln..xn..rust/app
   26e84:	6372732f 756f742f 735f6863 6f736e65     /src/touch_senso
   26e94:	73722e72 00026e7c 0000001c 0000003f     r.rs|n......?...
   26ea4:	00000005 20633269 72646461 00026e7c     ....i2c addr|n..
   26eb4:	0000001c 0000004b 00000011 63756f74     ....K.......touc
   26ec4:	74616468 61662061 00006c69 00026e7c     hdata fail..|n..
   26ed4:	0000001c 00000056 00000009 00026e7c     ....V.......|n..
   26ee4:	0000001c 0000005a 00000031 64616572     ....Z...1...read
   26ef4:	756f7420 61646863 66206174 006c6961      touchdata fail.
   26f04:	00026e7c 0000001c 00000089 00000005     |n..............
   26f14:	00026e7c 0000001c 00000095 00000037     |n..........7...
	...

00026f30 <str.0>:
   26f30:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   26f40:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   26f50:	00000077 00026e7c 0000001c 00000095     w...|n..........
   26f60:	00000024 00000000 00000000 00000000     $...............

00026f70 <str.1>:
   26f70:	65747461 2074706d 61206f74 77206464     attempt to add w
   26f80:	20687469 7265766f 776f6c66 00026e7c     ith overflow|n..
   26f90:	0000001c 00000095 00000020 00026e7c     ........ ...|n..
   26fa0:	0000001c 00000099 00000009 00026e7c     ............|n..
   26fb0:	0000001c 0000009a 00000037 00026e7c     ........7...|n..
   26fc0:	0000001c 0000009a 00000023 00026e7c     ........#...|n..
   26fd0:	0000001c 0000009a 0000001f 00026e7c     ............|n..
   26fe0:	0000001c 0000009b 00000037 00026e7c     ........7...|n..
   26ff0:	0000001c 0000009b 00000023 00026e7c     ........#...|n..
   27000:	0000001c 0000009b 0000001f 00026e7c     ............|n..
   27010:	0000001c 0000009c 00000009 00026e7c     ............|n..
   27020:	0000001c 0000009e 00000037 00026e7c     ........7...|n..
   27030:	0000001c 0000009e 00000023 00026e7c     ........#...|n..
   27040:	0000001c 0000009e 0000001f 00026e7c     ............|n..
   27050:	0000001c 0000009f 00000037 00026e7c     ........7...|n..
   27060:	0000001c 0000009f 00000023 00026e7c     ........#...|n..
   27070:	0000001c 0000009f 0000001f 00026e7c     ............|n..
   27080:	0000001c 000000a0 00000009 00026e7c     ............|n..
   27090:	0000001c 000000a4 00000030 00026e7c     ........0...|n..
   270a0:	0000001c 000000a4 0000001a 00026e7c     ............|n..
   270b0:	0000001c 000000a4 00000016 00026e7c     ............|n..
   270c0:	0000001c 000000a3 00000009 00026e7c     ............|n..
   270d0:	0000001c 000000a6 00000030 00026e7c     ........0...|n..
   270e0:	0000001c 000000a6 0000001a 00026e7c     ............|n..
   270f0:	0000001c 000000a6 00000016 00026e7c     ............|n..
   27100:	0000001c 000000a5 00000009 00026e7c     ............|n..
   27110:	0000001c 000000aa 0000002d 00026e7c     ........-...|n..
   27120:	0000001c 000000aa 0000001a 00026e7c     ............|n..
   27130:	0000001c 000000aa 00000016 00026e7c     ............|n..
   27140:	0000001c 000000a9 00000009 00026e7c     ............|n..
   27150:	0000001c 000000ac 0000002d 00026e7c     ........-...|n..
   27160:	0000001c 000000ac 0000001a 00026e7c     ............|n..
   27170:	0000001c 000000ac 00000016 00026e7c     ............|n..
   27180:	0000001c 000000ab 00000009 00026e7c     ............|n..
   27190:	0000001c 000000af 0000000d 00026e7c     ............|n..
   271a0:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   271b0:	00667562 00026e7c 0000001c 000000f1     buf.|n..........
   271c0:	00000005 00026e7c 0000001c 000000f2     ....|n..........
   271d0:	0000000d 00026e7c 0000001c 000000f2     ....|n..........
   271e0:	00000005 20633269 6c696166 73552f0a     ....i2c fail./Us
   271f0:	2f737265 7070754c 632e2f79 6f677261     ers/Luppy/.cargo
   27200:	6765722f 72747369 72732f79 69672f63     /registry/src/gi
   27210:	62756874 6d6f632e 6365312d 39323663     thub.com-1ecc629
   27220:	39626439 32386365 6d652f33 64646562     9db9ec823/embedd
   27230:	672d6465 68706172 2d736369 2e352e30     ed-graphics-0.5.
   27240:	72732f32 6f632f63 2e64726f 6e557372     2/src/coord.rsUn
   27250:	63616572 6c626168 6e692065 20786564     reachable index 
   27260:	0002724e 00000012 00027260 000271ed     Nr......`r...q..
   27270:	00000061 00000070 00000016              a...p.......

0002727c <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   2727c:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   2728c:	f010f010 10f09090 f080f010 80f0f010     ................
   2729c:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   272ac:	90f0f010 e09090f0 e090e090 808080f0     ................
   272bc:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   272cc:	72656874 73692065 206f6e20 68637573     there is no such
   272dc:	69687420 6120676e 6e612073 71636120      thing as an acq
   272ec:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   272fc:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   2730c:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   2731c:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   2732c:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   2733c:	2f736f72 2e646f6d 00007372 000272fd     ros/mod.rs...r..
   2734c:	00000049 0000000a 00000009 72656874     I...........ther
   2735c:	73692065 206f6e20 68637573 69687420     e is no such thi
   2736c:	6120676e 20612073 656c6572 20657361     ng as a release 
   2737c:	64616f6c 00012ba7 00000000 00000001     load.+..........
   2738c:	00012f69 00012f75 00012f7f 00027380     i/..u/.../...s..
   2739c:	00012ba7 00000000 00000001 00012f69     .+..........i/..
   273ac:	00012f75 00012f7f                       u/.../..

000273b4 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   273b4:	00697073 00026dfc 65737361 6f697472     spi..m..assertio
   273c4:	6166206e 64656c69 2860203a 7466656c     n failed: `(left
   273d4:	203d3d20 68676972 0a602974 656c2020      == right)`.  le
   273e4:	203a7466 0a2c6060 67697220 203a7468     ft: ``,. right: 
   273f4:	203a6060 000273bc 0000002d 000273e9     ``: .s..-....s..
   27404:	0000000c 000273f5 00000003 000273f8     .....s.......s..
   27414:	20697073 666e6f63 66206769 006c6961     spi config fail.
   27424:	00027414 0000000f 00027424 00027430     .t......$t..0t..
   27434:	74737572 6e796d2f 2f747765 2f637273     rust/mynewt/src/
   27444:	2e697073 00007372 00027434 00000016     spi.rs..4t......
   27454:	00000050 0000004a 20697073 66206263     P...J...spi cb f
   27464:	006c6961 0002745c 0000000b 00027468     ail.\t......ht..
   27474:	00027434 00000016 00000057 00000005     4t......W.......
   27484:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   27494:	00027484 0000000f 00027494 00027434     .t.......t..4t..
   274a4:	00000016 0000005a 00000037 6f697067     ....Z...7...gpio
   274b4:	69616620 0000006c 000274b0 00000009      fail....t......
   274c4:	000274bc 00027434 00000016 0000005b     .t..4t......[...
   274d4:	00000040 00027434 00000016 0000005c     @...4t......\...
   274e4:	00000040 6575716d 66206575 006c6961     @...mqueue fail.
   274f4:	000274e8 0000000b 000274f4 00027434     .t.......t..4t..
   27504:	00000016 00000065 00000005 206d6573     ....e.......sem 
   27514:	6c696166 20697073 6c696166 00027510     failspi fail.u..
   27524:	00000008 00027520 00027434 00000016     .... u..4t......
   27534:	00000069 00000005 00027434 00000016     i.......4t......
   27544:	0000006d 00000005 00000000 000273b4     m............s..
   27554:	00000004 0002754c 6e657665 66207174     ....Lu..eventq f
   27564:	006c6961 00027434 00000016 00000081     ail.4t..........
   27574:	00000009 63206f6e 6220646d 00657479     ....no cmd byte.
   27584:	00027434 00000016 00000097 00000005     4t..............
   27594:	00027434 00000016 00000099 00000016     4t..............
	...

000275b0 <str.0>:
   275b0:	65747461 2074706d 61206f74 77206464     attempt to add w
   275c0:	20687469 7265766f 776f6c66 20697073     ith overflowspi 
   275d0:	7265766f 776f6c66 00027434 00000016     overflow4t......
   275e0:	00000099 00000005 00027434 00000016     ........4t......
   275f0:	000000a8 00000012 00027434 00000016     ........4t......
   27600:	000000c1 00000035 00000000 00000000     ....5...........

00027610 <str.1>:
   27610:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   27620:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   27630:	00000077 00027434 00000016 000000c4     w...4t..........
   27640:	0000000f 20746e69 20697073 6c696166     ....int spi fail
   27650:	00027434 00000016 00000101 00000011     4t..............
   27660:	00027434 00000016 00000111 00000015     4t..............

00027670 <str.2>:
   27670:	65747461 2074706d 73206f74 72746275     attempt to subtr
   27680:	20746361 68746977 65766f20 6f6c6672     act with overflo
   27690:	00000077 00027434 00000016 0000010f     w...4t..........
   276a0:	00000011 00027434 00000016 00000117     ....4t..........
   276b0:	00000011 00027434 00000016 00000124     ....4t......$...
   276c0:	00000009 20646162 20697073 006e656c     ....bad spi len.
   276d0:	00027434 00000016 0000012b 00000005     4t......+.......
   276e0:	00027518 00000008 000276e0 00027434     .u.......v..4t..
   276f0:	00000016 00000141 00000009 00027434     ....A.......4t..
   27700:	00000016 0000014a 00000009 00027434     ....J.......4t..
   27710:	00000016 0000014e 00000030 00027434     ....N...0...4t..
   27720:	00000016 0000015a 00000005 00027434     ....Z.......4t..
   27730:	00000016 0000015f 00000017 00026dfc     ...._........m..
   27740:	65737361 6f697472 6166206e 64656c69     assertion failed
   27750:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   27760:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   27770:	67697220 203a7468 203a6060 00027740      right: ``: @w..
   27780:	0000002d 0002776d 0000000c 00027779     -...mw......yw..
   27790:	00000003 0002777c 20697073 666e6f63     ....|w..spi conf
   277a0:	66206769 006c6961 00027798 0000000f     ig fail..w......
   277b0:	000277a8 000277b4 74737572 6e796d2f     .w...w..rust/myn
   277c0:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   277d0:	000277b8 00000016 00000016 00000009     .w..............
   277e0:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   277f0:	000277e0 0000000f 000277f0 000277b8     .w.......w...w..
   27800:	00000016 00000019 00000009 20697073     ............spi 
   27810:	74696e69 69616620 0000006c 0002780c     init fail....x..
   27820:	0000000d 0002781c 000277b8 00000016     .....x...w......
   27830:	0000001c 00000009 6f697067 69616620     ........gpio fai
   27840:	0000006c 00027838 00000009 00027844     l...8x......Dx..
   27850:	000277b8 00000016 00000045 00000009     .w......E.......
   27860:	000277b8 00000016 0000006c 0000001b     .w......l.......

00027870 <str.0>:
   27870:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   27880:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   27890:	6c616377 2064656c 74704f60 3a6e6f69     wcalled `Option:
   278a0:	776e753a 28706172 6f206029 2061206e     :unwrap()` on a 
   278b0:	6e6f4e60 76206065 65756c61 6573552f     `None` value/Use
   278c0:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   278d0:	69676572 79727473 6372732f 7469672f     registry/src/git
   278e0:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   278f0:	65396264 33323863 6165682f 73656c70     db9ec823/heaples
   27900:	2e302d73 2f312e35 2f637273 2e636576     s-0.5.1/src/vec.
   27910:	00007372 000278bc 00000056 000001e8     rs...x..V.......
   27920:	0000000d 00000000 00000000 00000000     ................

00027930 <str.0>:
   27930:	65747461 2074706d 61206f74 77206464     attempt to add w
   27940:	20687469 7265766f 776f6c66 552f2928     ith overflow()/U
   27950:	73726573 70754c2f 2e2f7970 67726163     sers/Luppy/.carg
   27960:	65722f6f 74736967 732f7972 672f6372     o/registry/src/g
   27970:	75687469 6f632e62 65312d6d 32366363     ithub.com-1ecc62
   27980:	62643939 38636539 682f3332 6c706165     99db9ec823/heapl
   27990:	2d737365 2e352e30 72732f31 65762f63     ess-0.5.1/src/ve
   279a0:	73722e63 00000000 00000000 00000000     c.rs............

000279b0 <str.0>:
   279b0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   279c0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   279d0:	00000077 0002794e 00000056 00000066     w...Ny..V...f...
   279e0:	00000009 00000000 00000000 00000000     ................

000279f0 <str.1>:
   279f0:	65747461 2074706d 61206f74 77206464     attempt to add w
   27a00:	20687469 7265766f 776f6c66 0002794e     ith overflowNy..
   27a10:	00000056 0000003e 0000000c 0002794e     V...>.......Ny..
   27a20:	00000056 0000002d 00000009 0002794e     V...-.......Ny..
   27a30:	00000056 0000007e 00000011 0000a8c9     V...~...........
   27a40:	00000000 00000001 000157df 0000a80d     .........W......
   27a50:	00000002 00000002 000180d3 6c6c6163     ............call
   27a60:	60206465 75736552 3a3a746c 72776e75     ed `Result::unwr
   27a70:	29287061 6e6f2060 206e6120 72724560     ap()` on an `Err
   27a80:	61762060 6465756c 20776172 636f6c62     ` valuedraw bloc
   27a90:	6620736b 726c6961 2f747375 74656970     ks failrust/piet
   27aa0:	626d652d 65646465 69702f64 652d7465     -embedded/piet-e
   27ab0:	6465626d 2d646564 70617267 73636968     mbedded-graphics
   27ac0:	6372732f 7369642f 79616c70 0073722e     /src/display.rs.
   27ad0:	00027a97 00000038 00000080 00000005     .z..8...........
   27ae0:	6576656e 73757272 69702f74 652d7465     neverrust/piet-e
   27af0:	6465626d 2f646564 74656970 626d652d     mbedded/piet-emb
   27b00:	65646465 72672d64 69687061 732f7363     edded-graphics/s
   27b10:	622f6372 68637461 0073722e 00027ae5     rc/batch.rs..z..
   27b20:	00000036 000000be 00000019 00027ae5     6............z..
   27b30:	00000036 000000c3 0000001d 00000000     6...............

00027b40 <str.0>:
   27b40:	65747461 2074706d 61206f74 77206464     attempt to add w
   27b50:	20687469 7265766f 776f6c66 00027ae5     ith overflow.z..
   27b60:	00000036 000000d5 00000015 00027ae5     6............z..
   27b70:	00000036 00000104 00000019 00027ae5     6............z..
   27b80:	00000036 00000109 0000001d 00027ae5     6............z..
   27b90:	00000036 0000011d 00000015 6573552f     6.........../Use
   27ba0:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   27bb0:	69676572 79727473 6372732f 7469672f     registry/src/git
   27bc0:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   27bd0:	65396264 33323863 626d652f 65646465     db9ec823/embedde
   27be0:	72672d64 69687061 302d7363 322e352e     d-graphics-0.5.2
   27bf0:	6372732f 6972702f 6974696d 2f736576     /src/primitives/
   27c00:	74636572 6c676e61 73722e65 00027b9c     rectangle.rs.{..
   27c10:	00000070 000000c0 00000032 00000000     p.......2.......

00027c20 <str.0>:
   27c20:	65747461 2074706d 61206f74 77206464     attempt to add w
   27c30:	20687469 7265766f 776f6c66 00027b9c     ith overflow.{..
   27c40:	00000070 000000c2 00000031 00000000     p.......1.......

00027c50 <str.1>:
   27c50:	65747461 2074706d 73206f74 72746275     attempt to subtr
   27c60:	20746361 68746977 65766f20 6f6c6672     act with overflo
   27c70:	00000077 00027b9c 00000070 000000c4     w....{..p.......
   27c80:	00000031 00027b9c 00000070 000000c6     1....{..p.......
   27c90:	00000031 65707845 64657463 72747320     1...Expected str
   27ca0:	00656b6f 00027b9c 00000070 000000cc     oke..{..p.......
   27cb0:	00000019 00027b9c 00000070 000000d5     .....{..p.......
   27cc0:	0000000d 00027b9c 00000070 000000da     .....{..p.......
   27cd0:	00000011 20697073 73756c66 61662068     ....spi flush fa
   27ce0:	552f6c69 73726573 70754c2f 502f7970     il/Users/Luppy/P
   27cf0:	54656e69 2f656d69 656e6970 656d6974     ineTime/pinetime
   27d00:	7375722d 796d2d74 7477656e 7375722f     -rust-mynewt/rus
   27d10:	74732f74 35333737 64636c2d 7461622d     t/st7735-lcd-bat
   27d20:	722d6863 72732f73 696c2f63 73722e62     ch-rs/src/lib.rs
   27d30:	00027ce2 0000004e 000000fe 00000009     .|..N...........
   27d40:	00027ce2 0000004e 000000f3 00000009     .|..N...........
   27d50:	6573552f 4c2f7372 79707075 61632e2f     /Users/Luppy/.ca
   27d60:	2f6f6772 69676572 79727473 6372732f     rgo/registry/src
   27d70:	7469672f 2e627568 2d6d6f63 63636531     /github.com-1ecc
   27d80:	39393236 65396264 33323863 6165682f     6299db9ec823/hea
   27d90:	73656c70 2e302d73 2f312e35 2f637273     pless-0.5.1/src/
   27da0:	2e636576 00007372 00027d50 00000056     vec.rs..P}..V...
   27db0:	00000066 00000009 00000000 00000000     f...............

00027dc0 <str.0>:
   27dc0:	65747461 2074706d 61206f74 77206464     attempt to add w
   27dd0:	20687469 7265766f 776f6c66 00027d50     ith overflowP}..
   27de0:	00000056 0000003e 0000000c 00027d50     V...>.......P}..
   27df0:	00000056 0000007e 00000011 00000000     V...~...........

00027e00 <str.1>:
   27e00:	65747461 2074706d 73206f74 72746275     attempt to subtr
   27e10:	20746361 68746977 65766f20 6f6c6672     act with overflo
   27e20:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   27e30:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   27e40:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   27e50:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   27e60:	20736920 00000000 00000020 00000008      is .... .......
   27e70:	00000002 00000000 00000000 00000002     ................
   27e80:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   27e90:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   27ea0:	73722e65 00000000 00000020 00000004     e.rs.... .......
   27eb0:	00000002 00000000 00000002 00000000     ................
   27ec0:	00000003 00000000 00000020 00000008     ........ .......
   27ed0:	00000002 00000000 00000001 00000001     ................
   27ee0:	00000003 002e2e60 00027ee5 00000002     ....`....~......
   27ef0:	65726c61 20796461 72726f62 6465776f     already borrowed
   27f00:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   27f10:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   27f20:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

00027f30 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   27f30:	00010201 00000000 00000000 00000000     ................
   27f40:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   27f50:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   27f60:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   27f70:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   27f80:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   27f90:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   27fa0:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   27fb0:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   27fc0:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   27fd0:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   27fe0:	656e6f4e 61762060 0065756c 00027e24     None` value.$~..
   27ff0:	00000000 0000203a 00027e24 00000000     ....: ..$~......
   28000:	00027ff4 00000002 00018327 00000000     ........'.......
   28010:	00000001 00018377 74756220 65687420     ....w... but the
   28020:	646e6920 69207865 00002073 00027e44      index is ..D~..
   28030:	00000020 00028018 00000012 00018327      ...........'...
   28040:	0000000c 00000004 000185bf 00018915     ................
   28050:	000189c5 202c0a2c 2c280a28 30783029     ....,., (.(,)0x0
   28060:	30313030 30333032 30353034 30373036     0010203040506070
   28070:	31393038 31313130 31333132 31353134     8091011121314151
   28080:	31373136 32393138 32313230 32333232     6171819202122232
   28090:	32353234 32373236 33393238 33313330     4252627282930313
   280a0:	33333332 33353334 33373336 34393338     2333435363738394
   280b0:	34313430 34333432 34353434 34373436     0414243444546474
   280c0:	35393438 35313530 35333532 35353534     8495051525354555
   280d0:	35373536 36393538 36313630 36333632     6575859606162636
   280e0:	36353634 36373636 37393638 37313730     4656667686970717
   280f0:	37333732 37353734 37373736 38393738     2737475767778798
   28100:	38313830 38333832 38353834 38373836     0818283848586878
   28110:	39393838 39313930 39333932 39353934     8899091929394959
   28120:	39373936 00393938 00018327 00000004     6979899.'.......
   28130:	00000004 000189e9 000189ef 000189f5     ................
   28140:	2f637273 6362696c 2f65726f 2f746d66     src/libcore/fmt/
   28150:	2e646f6d 00007372 00028140 00000016     mod.rs..@.......
   28160:	0000043b 00000011 00028140 00000016     ;.......@.......
   28170:	00000445 00000024 2f637273 6362696c     E...$...src/libc
   28180:	2f65726f 63696c73 6f6d2f65 73722e64     ore/slice/mod.rs
   28190:	65646e69 6f202078 6f207475 61722066     index  out of ra
   281a0:	2065676e 20726f66 63696c73 666f2065     nge for slice of
   281b0:	6e656c20 20687467 00028190 00000006      length ........
   281c0:	00028196 00000022 00028178 00000018     ...."...x.......
   281d0:	00000a72 00000005 63696c73 6e692065     r.......slice in
   281e0:	20786564 72617473 61207374 62202074     dex starts at  b
   281f0:	65207475 2073646e 00207461 000281d8     ut ends at .....
   28200:	00000016 000281ee 0000000d 00028178     ............x...
   28210:	00000018 00000a78 00000005 696e6966     ....x.......fini
   28220:	64656873 73796168 6b636174 79622820     shedhaystack (by
   28230:	20736574 6167654e 65766974 69736f50     tes NegativePosi
   28240:	65766974 65746e69 6c617267 61706e55     tiveintegralUnpa
   28250:	64656b63 69666e49 6574696e 756e694d     ckedInfiniteMinu
   28260:	77615273 7265764f 776f6c66 6b636162     sRawOverflowback
   28270:	72657469 6f746e49 72657449 61636f6c     iterIntoIterloca
   28280:	6e6f6974 61636f4c 6e6f6974 72616573     tionLocationsear
   28290:	72656863 69736f70 6e6f6974 74697263     cherpositioncrit
   282a0:	736f705f 656e694c 796e4173 57776152     _posLinesAnyRawW
   282b0:	72656b61 6f6c6c41 72724563 38746e69     akerAllocErrint8
   282c0:	745f3478 2f637273 6362696c 2f65726f     x4_tsrc/libcore/
   282d0:	2f727473 2e646f6d 2e5b7372 625d2e2e     str/mod.rs[...]b
   282e0:	20657479 65646e69 69202078 756f2073     yte index  is ou
   282f0:	666f2074 756f6220 2073646e 6020666f     t of bounds of `
   28300:	000282df 0000000b 000282ea 00000016     ................
   28310:	00027ee4 00000001 000282c4 00000016     .~..............
   28320:	00000853 00000009 69676562 3d3c206e     S.......begin <=
   28330:	646e6520 00002820 00028328 0000000e      end (..(.......
   28340:	00027f54 00000004 00027f00 00000010     T...............
   28350:	00027ee4 00000001 000282c4 00000016     .~..............
   28360:	00000857 00000005 000282c4 00000016     W...............
   28370:	00000868 0000000e 20736920 20746f6e     h....... is not 
   28380:	68632061 62207261 646e756f 3b797261     a char boundary;
   28390:	20746920 69207369 6469736e 20292065      it is inside ) 
   283a0:	6020666f 000282df 0000000b 00028378     of `........x...
   283b0:	00000026 0002822c 00000008 0002839e     &...,...........
   283c0:	00000006 00027ee4 00000001 000282c4     .....~..........
   283d0:	00000016 0000086a 00000005 00027e84     ....j........~..
   283e0:	00000020 0000001a 00000028 05030100      .......(.......
   283f0:	03060605 08080607 1c0a1109 140c190b     ................
   28400:	0d0e120d 0310040f 09131212 05170116     ................
   28410:	03190218 021c071a 161f011d 042b0320     ............ .+.
   28420:	0b2d022c 0330012e 01320231 02a902a7     ,.-...0.1.2.....
   28430:	08ab04aa 05fb02fa 03fe04fd 78ad09ff     ...............x
   28440:	a28d8b79 8b585730 1d1c908c 4b0f0edd     y...0WX........K
   28450:	2efcfb4c 5d5c3f2f 84e2b55f 92918e8d     L.../?\]_.......
   28460:	bbbab1a9 cac9c6c5 ffe5e4de 12110400     ................
   28470:	37343129 493d3b3a 8e845d4a b4b1a992     )147:;=IJ]......
   28480:	cac6bbba e5e4cfce 0e0d0400 31291211     ..............)1
   28490:	453b3a34 5e4a4946 91846564 cec99d9b     4:;EFIJ^de......
   284a0:	29110dcf 64574945 a9918d65 c5bbbab4     ...)EIWde.......
   284b0:	e5e4dfc9 110d04f0 65644945 b2848180     ........EIde....
   284c0:	d5bfbebc 83f1f0d7 a6a48b85 c7c5bfbe     ................
   284d0:	dbdacfce cdbd9848 49cfcec6 59574f4e     ....H......INOWY
   284e0:	8e895f5e b7b6b18f c7c6c1bf 171611d7     ^_..............
   284f0:	f7f65c5b 0d80fffe dfde716d 6e1f0f0e     [\......mq.....n
   28500:	5f1d1c6f afae7e7d 16fabcbb 461f1e17     o.._}~.........F
   28510:	584f4e47 7e5e5c5a d4c5b57f f1f0dcd5     GNOXZ\^~........
   28520:	8f7372f5 97967574 2e265f2f b7afa72f     .rs.tu../_&./...
   28530:	d7cfc7bf 97409adf 1f8f3098 ffcec1c0     ......@..0......
   28540:	5b5a4f4e 100f0807 efee2f27 3d376f6e     NOZ[....'/..no7=
   28550:	9045423f 53fffe91 c9c87567 d9d8d1d0     ?BE....Sgu......
   28560:	00fffee7 82225f20 448204df 06041b08     .... _"....D....
   28570:	0eac8111 1e35ab80 03e08015 04010819     ......5.........
   28580:	0434042f 07010307 0a110706 07120f50     /.4.........P...
   28590:	04020855 03090a1c 03070308 03030302     U...............
   285a0:	0305040c 0e01060b 033a0515 05060711     ..........:.....
   285b0:	07570710 0d150702 03430450 0401032d     ..W.....P.C.-...
   285c0:	0c0f0611 251d043a 046d205f c880256a     ....:..%_ m.j%..
   285d0:	03b08205 fd82061a 15075903 1409170b     .........Y......
   285e0:	6a0c140c 1a060a06 2b075906 2c0a4605     ...j.....Y.+.F.,
   285f0:	01040c04 2c0b3103 0b061a04 06ac8003     .....1.,........
   28600:	411f060a 032d044c 033c0874 073c030f     ...AL.-.t.<...<.
   28610:	052b0838 1811ff82 2d112f08 21102003     8.+....../.-. .!
   28620:	048c800f 0b199782 05948815 073b052f     ............/.;.
   28630:	09180e02 7430b080 1ad6800c ff80050c     ......0t........
   28640:	05b68005 c69b0c24 1030d20a 37038d84     ....$.....0....7
   28650:	145c8109 8008b880 043530c7 0838060a     ..\......05...8.
   28660:	060c0846 031e0b74 0959045a 1c188380     F...t...Z.Y.....
   28670:	4809160a 068a8008 170ca4ab 04a13104     ...H.........1..
   28680:	0726da81 8005050c 6d8111a5 2a287810     ..&........m.x(*
   28690:	80044c06 be80048d 0f031b03 0106000d     .L..............
   286a0:	04010301 09080802 0b050a02 11011002     ................
   286b0:	13051204 15021411 19021702 1d051c04     ................
   286c0:	6a012408 bc026b03 d402d102 d609d50c     .$.j.k..........
   286d0:	da02d702 e105e001 ee02e802 f904f020     ............ ...
   286e0:	0c02fa06 4e3e3b27 9e9e8f4f 0907069f     ....';>NO.......
   286f0:	563e3d36 04d1d0f3 37361814 35bd5756     6=>V......67VW.5
   28700:	12e0cfce 9e8e8987 110e0d04 34312912     .............)14
   28710:	4946453a 644f4e4a b65c5a65 a81c1bb7     :EFIJNOdeZ\.....
   28720:	09d9d8a9 a8919037 3e3b0a07 928f6966     ....7.....;>fi..
   28730:	efee5f6f 9b9a625a 9d552827 a4a3a1a0     o_..Zb..'(U.....
   28740:	baada8a7 0b06c4bc 3a1d150c a651453f     ...........:?EQ.
   28750:	a0cdcca7 221a1907 c53f3e25 232004c6     ......."%>?... #
   28760:	33282625 4a483a38 5553504c 5c5a5856     %&(38:HJLPSUVXZ\
   28770:	6563605e 78736b66 a48a7f7d c0b0afaa     ^`cefksx}.......
   28780:	a3720cd0 6ecccba4 7b225e6f 2d040305     ..r....no^"{...-
   28790:	01046503 82802e2f 0f31031d 0924041c     .e../.....1...$.
   287a0:	052b051e 2a0e0444 2406aa80 28042404     ..+.D..*...$.$.(
   287b0:	010b3408 37819080 080a1609 03399880     .4.....7......9.
   287c0:	30090863 03210516 4001051b 054b0438     c..0..!....@8.K.
   287d0:	070a042f 20400709 090c0427 053a0336     /.....@ '...6.:.
   287e0:	0c04071a 37495007 07330d33 810a082e     .....PI73.3.....
   287f0:	81801f26 802a0828 4e091786 430f1e04     &...(.*....N...C
   28800:	0a07190e 27094706 3f0b7509 3b062a41     .....G.'.u.?A*.;
   28810:	51060a05 10050106 8b800503 08482060     ...Q........` H.
   28820:	5ea6800a 0a0b4522 39130d06 2c360a07     ...^"E.....9..6,
   28830:	c0801004 0c53643c 45a08001 5308481b     ....<dS....E.H.S
   28840:	0781391d 031d0a46 03374947 060a080e     .9..F...GI7.....
   28850:	810a0739 c7801936 9b830d32 800b7566     9...6...2...fu..
   28860:	84bc8ac4 82d18f2f 82b9a147 042a0739     ..../...G...9.*.
   28870:	0a266002 05280a46 5bb08213 39044b65     .`&.F.(....[eK.9
   28880:	04401107 08f8971c 0da5f382 03311f81     ..@...........1.
   28890:	81080411 6b04898c 09030d05 60931007     .......k.......`
   288a0:	730af680 46176e08 0c149a80 80190957     ...s.n.F....W...
   288b0:	03478187 150f4285 802b5085 1a032dd5     ..G..B...P+..-..
   288c0:	70810204 8501053a 29d78000 040a044c     ...p:......)L...
   288d0:	44118302 c2803d4c 0401063c 341b0555     ...DL=..<...U..4
   288e0:	2c0e8102 560c6404 5d030d0a 1d393d03     ...,.d.V...].=9.
   288f0:	09042c0d 060e0207 d6839a80 0b030d0a     .,..............
   28900:	590c7405 0c140c07 0a083804 1e082806     .t.Y.....8...(..
   28910:	31037752 0ca68003 05030414 85060d03     Rw.1............
   28920:	6372736a 62696c2f 65726f63 696e752f     jsrc/libcore/uni
   28930:	65646f63 646f6d2f 0073722e 00028921     code/mod.rs.!...
   28940:	0000001a 00000038 0000000f 00028921     ....8.......!...
   28950:	0000001a 00000039 00000010              ....9.......

0002895c <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   2895c:	1b150f04 17120319 0e000011 00000016     ................
	...
   28984:	00130600 00000000 00000000 00000000     ................
   28994:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   289b4:	01050000 00000000 00000000 00000000     ................
   289c4:	00000000 10000000 00000000 0009000b     ................
   289d4:	                                         ...

000289d7 <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   289f3:	00120f00 00000000 00000000 00000000     ................
   28a03:	0000001f 00000000 00000000 00000000     ................
   28a13:	1d664649 00000000 00000000 00000000     IFf.............
   28a23:	00003e8a 00000000 00000000 4b000000     .>.............K
   28a33:	00000053 00000000 00000000 42236700     S............g#B
	...
   28a4f:	0000003d 00230000 00000000 00000000     =.....#.........
   28a5f:	2d000075 00000000 00000000 00000000     u..-............
   28a6f:	003c4e82 00000000 00000000 63000000     .N<............c
   28a7f:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   28a8f:	00000300 00000000 00000000 0000002f     ............/...
   28a9f:	00000000 00001000 13000000 00000800     ................
	...
   28ab7:	43000000 89007200 00000000 00000000     ...C.r..........
   28ac7:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   28ad7:	00210000 00000000 00000000 00000000     ..!.............
   28ae7:	4100000a 00000000 00000000 00000000     ...A............
   28af7:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   28b07:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   28b17:	00000031 00000053 3a000000 00000000     1...S......:....
   28b27:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   28b37:	0017003b 00000000 00000000 00000000     ;...............
   28b47:	57000055 83000000 00000000 00000000     U..W............
   28b57:	00000059 26000000 00161b6e 00000000     Y......&n.......
   28b67:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   28b77:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   28b87:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   28b97:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   28ba7:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   28bb7:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

00028bc8 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   28bd0:	00000001 00000000 0000000d 00000000     ................
   28be0:	0000001c 00000000 00000040 00000000     ........@.......
   28bf0:	000000b6 00000000 000000bf 00000000     ................
   28c00:	000003f8 00000000 000007f0 00000000     ................
   28c10:	000007ff 00000000 00001000 00000000     ................
   28c20:	00001e00 00000000 00003800 00000000     .........8......
   28c30:	00003f00 00000000 00007f80 00000000     .?..............
   28c40:	00008000 00000000 0001ffc0 00000000     ................
   28c50:	0003ff80 00000000 00078000 00000000     ................
   28c60:	007f0000 00000000 00802001 00000000     ......... ......
   28c70:	00a30000 00000000 037ffc00 00000000     ................
   28c80:	06000000 00000000 07ff0000 00000000     ................
   28c90:	09800000 00000000 0e000000 00000000     ................
   28ca0:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   28cb0:	200ffe40 00000000 30000001 00000000     @.. .......0....
   28cc0:	40000000 00000000 4000005c 00000000     ...@....\..@....
   28cd0:	60000000 00000000 805c8400 00000000     ...`......\.....
   28ce0:	c0000000 00000000 e0000000 00000000     ................
   28cf0:	00000000 00000001 0cf00000 00000001     ................
   28d00:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   28d10:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   28d20:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   28d30:	00000000 00000060 00000844 00000060     ....`...D...`...
   28d40:	00000000 000000f0 00000060 00000200     ........`.......
   28d50:	f9ffff7f 000007db 80000000 000007f8     ................
   28d60:	e0000000 00000fbc 00000000 00002120     ............ !..
   28d70:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   28d80:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   28d90:	00000000 00003fc0 00000000 0000f000     .....?..........
   28da0:	00000000 0000fc00 f8000010 0000fffe     ................
   28db0:	0000ffff 0000ffff ffffffff 0000ffff     ................
   28dc0:	fffff800 00010000 00000000 0001ffc0     ................
   28dd0:	ffff0000 0001ffff 00000000 00030000     ................
   28de0:	00000000 00038000 00000000 0003a340     ............@...
   28df0:	00000000 00080000 000c0000 000c0000     ................
   28e00:	00000004 000ff800 00000000 00180000     ................
   28e10:	001c0000 001c0000 c3000000 001e0001     ................
   28e20:	00000000 001f0000 00800001 001f1fc0     ................
   28e30:	00000007 001fef80 ffffffff 00201fff     .............. .
   28e40:	00023986 00230000 00000002 00403000     .9....#......0@.
   28e50:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   28e60:	00000000 007f0000 00000000 00bf2800     .............(..
   28e70:	00000000 00cff000 03000000 02a00000     ................
   28e80:	fff70000 031021fd 00000003 06780000     .....!........x.
   28e90:	00000000 06ff8000 00000000 07c00000     ................
   28ea0:	00000000 07f20000 00000000 0e040187     ................
   28eb0:	00000006 10000000 00001008 10000000     ................
   28ec0:	00000007 14000000 0000000f 17f00000     ................
   28ed0:	00000000 1ff20000 feffe0df 1fffffff     ................
   28ee0:	00000000 20000000 00000000 200ff800     ....... ....... 
   28ef0:	00000007 33c80000 00000000 3fb00000     .......3.......?
   28f00:	00000000 3ff78000 00000004 40000000     .......?.......@
   28f10:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   28f20:	00000002 50000000 00000003 58000000     .......P.......X
   28f30:	00000000 66fde000 000007fe 79f80000     .......f.......y
   28f40:	00000003 7fc00000 00000000 7ffe0000     ................
   28f50:	00000000 7fff0000 00000000 80000000     ................
   28f60:	0000007f 80000000 00000030 8003ffff     ........0.......
   28f70:	0000f06e 87000000 00000002 90000000     n...............
   28f80:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   28f90:	00000000 a7f80000 00000000 b03c8000     ..............<.
   28fa0:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   28fb0:	fffe0000 bfffffff 00000011 c0000000     ................
   28fc0:	00000000 c19d0000 00000002 d0000000     ................
   28fd0:	00000000 f807c3a0 ffffffff f87fffff     ................
   28fe0:	ffffffff fbffffff 000021be fc00000c     .........!......
   28ff0:	00000000 ff000000 00000002 ff000000     ................
   29000:	00020000 ffff0000 fff80000 fffffffb     ................
   29010:	00000000 ffffffff ffffffff ffffffff     ................
   29020:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

00029030 <nrf52_hal_i2cs>:
   29030:	00000000 20000108                       ....... 

00029038 <nrf52_hal_spis>:
   29038:	2000ddc0 00000000 00000000 65737341     ... ........Asse
   29048:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   29058:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   29068:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   29078:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   29088:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   29098:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   290a8:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   290b8:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   290c8:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   290d8:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   290e8:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   290f8:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   29108:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   29118:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   29128:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   29138:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   29148:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   29158:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   29168:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   29178:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   29188:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   29198:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   291a8:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   291b8:	00000000 656c6469 00000000 7379736d     ....idle....msys
   291c8:	0000315f                                _1..

000291cc <MemFile_methods>:
   291cc:	0001d1f5 00000000                       ........

000291d4 <stdout>:
   291d4:	20000124                                $.. 

000291d8 <nrf52k_flash_dev>:
   291d8:	000291f0 00000000 00080000 00000080     ................
   291e8:	00000001 000000ff                       ........

000291f0 <nrf52k_flash_funcs>:
   291f0:	0001d461 0001d391 0001d319 0001d371     a...........q...
   29200:	00000000 0001d36d 00000000              ....m.......

0002920c <nrf52_hal_timers>:
   2920c:	2000ded0 00000000 00000000 00000000     ... ............
	...

00029224 <hal_i2c1_cfg>:
   29224:	00000007 00000006 00000064              ........d...

00029230 <os_bsp_spi0m_cfg>:
   29230:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   29240:	7476655f 00000073                       _evts...

00029248 <COLLECTOR_NODE_HW_ID>:
   29248:	066aff57 50547878 67242949              W.j.xxTPI)$g

00029254 <SENSOR_NODE_HW_IDS>:
   29254:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   29264:	08070605 020b0a09 04030201 08070605     ................
   29274:	030b0a09 04030201 08070605 040b0a09     ................
   29284:	04030201 08070605 050b0a09 77687325     ............%shw
   29294:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   292a4:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   292b4:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   292c4:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   292d4:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   292e4:	0a732520 00000000 00000000               %s.........

000292f0 <sensor_node_addresses>:
   292f0:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   29300:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   29310:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   29320:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   29330:	00000a73                                s...

00029334 <g_temp_stub_sensor_driver>:
   29334:	0001e29d 0001e1a5 00000000 00000000     ................
	...
   2935c:	20425453 64616572 6d657420 65732070     STB read temp se
   2936c:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   2937c:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

0002938c <sysflash_map_dflt>:
	...
   29394:	00004000 00000001 00008000 00073c00     .@...........<..
   293a4:	00000002 0007bc00 00000400 00000003     ................
   293b4:	0007c000 00001000 00000010 00004000     .............@..
   293c4:	00004000 00000011 0007d000 00003000     .@...........0..
   293d4:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   293e4:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 136172	    108	  57144	 193424	  2f390	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
