
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x00026d9c vaddr 0x00026d9c paddr 0x00026d9c align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00026db4 memsz 0x00026db4 flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x00026db4 align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00030148 vaddr 0x20000148 paddr 0x00026e20 align 2**16
         filesz 0x00000000 memsz 0x0000de40 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              0001ed7c  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00026d9c  00026d9c  00030144  2**0  CONTENTS
  3 .ARM.exidx         00000018  00026d9c  00026d9c  00026d9c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00030144  2**0  CONTENTS
  6 .data              0000006c  200000d8  00026db4  000300d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00030144  2**0  CONTENTS
  8 .bss               0000de40  20000148  00026e20  00030148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000df88  2000df88  00030148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000302f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00030333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000303b2  2**0  CONTENTS, READONLY
 13 .debug_line        000497e0  00000000  00000000  000303b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        000859a7  00000000  00000000  00079b96  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000e3fe  00000000  00000000  000ff53d  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005a48  00000000  00000000  0010d940  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         00059a70  00000000  00000000  00113388  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         000134bc  00000000  00000000  0016cdf8  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      00019e88  00000000  00000000  001802b4  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000e9b4  00000000  00000000  0019a13c  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000054  00000000  00000000  001a8af0  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00014cc0  00000000  00000000  001a8b44  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    00030986  00000000  00000000  001bd804  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
00026d9c l    d  .ARM.extab	00000000 .ARM.extab
00026d9c l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000df88 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 9mu0l0cofx40kg7
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000201b2 l       .debug_str	00000000 
000201a6 l       .debug_str	00000000 
0002c60f l       .debug_str	00000000 
0005229b l       .debug_str	00000000 
00052a02 l       .debug_str	00000000 
00051ccf l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0002c63c l       .debug_str	00000000 
0002c62e l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00054ef4 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
00053d7d l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00003f42 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0002c5fb l       .debug_str	00000000 
000579b5 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000316b5 l       .debug_str	00000000 
00054d9e l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 uihlqvdlbzm5wxk
00001076 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
0000103b l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000010df l       .debug_str	00000000 
0000114a l       .debug_str	00000000 
00001186 l       .debug_str	00000000 
000011d3 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
0000121d l       .debug_str	00000000 
00001288 l       .debug_str	00000000 
000012a3 l       .debug_str	00000000 
0000130f l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0005301e l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0000136b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013535 l       .debug_str	00000000 
000551cb l       .debug_str	00000000 
000594be l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016f2f l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000238a1 l       .debug_str	00000000 
00057911 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e9c l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002011a l       .debug_str	00000000 
00000eee l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
00000f20 l       .debug_str	00000000 
00000f59 l       .debug_str	00000000 
00000f82 l       .debug_str	00000000 
00016e0a l       .debug_str	00000000 
00000f99 l       .debug_str	00000000 
00000fd2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000316b5 l       .debug_str	00000000 
00054d9e l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000201b2 l       .debug_str	00000000 
000201a6 l       .debug_str	00000000 
0000151c l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00013535 l       .debug_str	00000000 
000551cb l       .debug_str	00000000 
000594be l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
000593c9 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000580b4 l       .debug_str	00000000 
000013e2 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00059088 l       .debug_str	00000000 
000013ef l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
000167d3 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000169d l       .debug_str	00000000 
000013ff l       .debug_str	00000000 
00001484 l       .debug_str	00000000 
0000149a l       .debug_str	00000000 
00054efd l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
00037ad9 l       .debug_str	00000000 
000014e9 l       .debug_str	00000000 
00001517 l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
00001553 l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
0000157b l       .debug_str	00000000 
00059449 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
000015a8 l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
000015dc l       .debug_str	00000000 
0000160c l       .debug_str	00000000 
00001617 l       .debug_str	00000000 
00001644 l       .debug_str	00000000 
0000164d l       .debug_str	00000000 
00001683 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00001694 l       .debug_str	00000000 
0000151b l       .debug_str	00000000 
00051e1c l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
000016bb l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000201b2 l       .debug_str	00000000 
000016e7 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000316b5 l       .debug_str	00000000 
00054d9e l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
000030eb l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
000036ac l       .debug_str	00000000 
000036ec l       .debug_str	00000000 
0000373a l       .debug_str	00000000 
0000377a l       .debug_str	00000000 
000037a1 l       .debug_str	00000000 
000037e1 l       .debug_str	00000000 
000037ef l       .debug_str	00000000 
0000385e l       .debug_str	00000000 
00003889 l       .debug_str	00000000 
000038f9 l       .debug_str	00000000 
0000390c l       .debug_str	00000000 
0000397c l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000039a8 l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00017691 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
000039b7 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00052dc2 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a7d3 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b6b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00057690 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
000520d5 l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
000584cb l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
00047778 l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
00001d93 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0005817e l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da7 l       .debug_str	00000000 
00001db2 l       .debug_str	00000000 
00001dba l       .debug_str	00000000 
0000b338 l       .debug_str	00000000 
0000b863 l       .debug_str	00000000 
00001dc2 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001fc2 l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fdb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002008 l       .debug_str	00000000 
00001fe5 l       .debug_str	00000000 
00002013 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00002111 l       .debug_str	00000000 
0000211f l       .debug_str	00000000 
0000217e l       .debug_str	00000000 
000021e5 l       .debug_str	00000000 
000021fb l       .debug_str	00000000 
0000220b l       .debug_str	00000000 
000569b4 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000221a l       .debug_str	00000000 
00025ae5 l       .debug_str	00000000 
00002220 l       .debug_str	00000000 
00002226 l       .debug_str	00000000 
0000222c l       .debug_str	00000000 
00002238 l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
00002240 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
0000224e l       .debug_str	00000000 
00002294 l       .debug_str	00000000 
00002271 l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
00056541 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002338 l       .debug_str	00000000 
00002361 l       .debug_str	00000000 
0000233e l       .debug_str	00000000 
00002373 l       .debug_str	00000000 
000023b5 l       .debug_str	00000000 
0005642a l       .debug_str	00000000 
000023ff l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002434 l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002446 l       .debug_str	00000000 
00002488 l       .debug_str	00000000 
000558ee l       .debug_str	00000000 
000024d2 l       .debug_str	00000000 
000024d8 l       .debug_str	00000000 
000024de l       .debug_str	00000000 
000024e4 l       .debug_str	00000000 
0000250d l       .debug_str	00000000 
000024ea l       .debug_str	00000000 
0000251e l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
000025a8 l       .debug_str	00000000 
000025ad l       .debug_str	00000000 
00056778 l       .debug_str	00000000 
000025b2 l       .debug_str	00000000 
000025b8 l       .debug_str	00000000 
000025be l       .debug_str	00000000 
000025e7 l       .debug_str	00000000 
000025c4 l       .debug_str	00000000 
000025f8 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
000559a6 l       .debug_str	00000000 
00002682 l       .debug_str	00000000 
000026ae l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
000026bf l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
00002749 l       .debug_str	00000000 
0005694c l       .debug_str	00000000 
0000274e l       .debug_str	00000000 
00002757 l       .debug_str	00000000 
0000275e l       .debug_str	00000000 
00002789 l       .debug_str	00000000 
00002766 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027dd l       .debug_str	00000000 
00056614 l       .debug_str	00000000 
00002827 l       .debug_str	00000000 
0000282d l       .debug_str	00000000 
00002833 l       .debug_str	00000000 
00002839 l       .debug_str	00000000 
0000283f l       .debug_str	00000000 
00002847 l       .debug_str	00000000 
00002855 l       .debug_str	00000000 
00002864 l       .debug_str	00000000 
00002875 l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002896 l       .debug_str	00000000 
0000289d l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028c0 l       .debug_str	00000000 
000028f5 l       .debug_str	00000000 
00002937 l       .debug_str	00000000 
00055aa9 l       .debug_str	00000000 
00002981 l       .debug_str	00000000 
000029ae l       .debug_str	00000000 
0000298b l       .debug_str	00000000 
000029c0 l       .debug_str	00000000 
00002a02 l       .debug_str	00000000 
00002a4c l       .debug_str	00000000 
00002a51 l       .debug_str	00000000 
00002a7e l       .debug_str	00000000 
00002a5b l       .debug_str	00000000 
00002a90 l       .debug_str	00000000 
00002ad2 l       .debug_str	00000000 
00002b1c l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002b30 l       .debug_str	00000000 
00002b40 l       .debug_str	00000000 
00002b49 l       .debug_str	00000000 
00002b54 l       .debug_str	00000000 
00002b63 l       .debug_str	00000000 
00002b78 l       .debug_str	00000000 
00002ba9 l       .debug_str	00000000 
00002c46 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002cf6 l       .debug_str	00000000 
00002cff l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d20 l       .debug_str	00000000 
00002d56 l       .debug_str	00000000 
00002dd9 l       .debug_str	00000000 
00002e64 l       .debug_str	00000000 
00002e80 l       .debug_str	00000000 
00002ecc l       .debug_str	00000000 
00002f20 l       .debug_str	00000000 
00002f3d l       .debug_str	00000000 
00002f51 l       .debug_str	00000000 
00002f9d l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00003007 l       .debug_str	00000000 
0000301b l       .debug_str	00000000 
00003062 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030dd l       .debug_str	00000000 
000030ba l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003108 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
0002c0fa l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
00003e57 l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003135 l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314c l       .debug_str	00000000 
00003154 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003165 l       .debug_str	00000000 
0000316d l       .debug_str	00000000 
00003175 l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031a2 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
000031b6 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000031ca l       .debug_str	00000000 
000031d5 l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
00055a1a l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00003298 l       .debug_str	00000000 
000032a8 l       .debug_str	00000000 
000032b7 l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
000032c6 l       .debug_str	00000000 
000032ce l       .debug_str	00000000 
0000330f l       .debug_str	00000000 
000032ec l       .debug_str	00000000 
0000331f l       .debug_str	00000000 
00003334 l       .debug_str	00000000 
0000333d l       .debug_str	00000000 
0000339a l       .debug_str	00000000 
000033ff l       .debug_str	00000000 
00003409 l       .debug_str	00000000 
00003419 l       .debug_str	00000000 
0000342e l       .debug_str	00000000 
00003436 l       .debug_str	00000000 
0000349a l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
0000350d l       .debug_str	00000000 
00003515 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003566 l       .debug_str	00000000 
0000357b l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035aa l       .debug_str	00000000 
000035bf l       .debug_str	00000000 
000035e9 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003660 l       .debug_str	00000000 
0000369f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
00003ba4 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000551cb l       .debug_str	00000000 
000594be l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
000238a1 l       .debug_str	00000000 
00003b19 l       .debug_str	00000000 
00003b7c l       .debug_str	00000000 
00003c22 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00003cc8 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00003d4f l       .debug_str	00000000 
00003d5e l       .debug_str	00000000 
00052883 l       .debug_str	00000000 
00003d80 l       .debug_str	00000000 
00016f2f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00013535 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000039d8 l       .debug_str	00000000 
00003a62 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
00003a7a l       .debug_str	00000000 
00003b0f l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000201d0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
00004acd l       .debug_str	00000000 
00004afa l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00004b15 l       .debug_str	00000000 
00004b49 l       .debug_str	00000000 
00004b30 l       .debug_str	00000000 
00004b51 l       .debug_str	00000000 
00004b67 l       .debug_str	00000000 
00004bcf l       .debug_str	00000000 
00004c47 l       .debug_str	00000000 
00004c74 l       .debug_str	00000000 
00004c8c l       .debug_str	00000000 
00004cf6 l       .debug_str	00000000 
00004cfe l       .debug_str	00000000 
00004d04 l       .debug_str	00000000 
00004d0e l       .debug_str	00000000 
00004d88 l       .debug_str	00000000 
00004df4 l       .debug_str	00000000 
00004e6d l       .debug_str	00000000 
00004ee6 l       .debug_str	00000000 
00004f51 l       .debug_str	00000000 
00004fc0 l       .debug_str	00000000 
00004fc7 l       .debug_str	00000000 
00004fd2 l       .debug_str	00000000 
00004ffa l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
000050ec l       .debug_str	00000000 
00004feb l       .debug_str	00000000 
000050f8 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
0000516f l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00047778 l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
000051d8 l       .debug_str	00000000 
00005256 l       .debug_str	00000000 
000052c6 l       .debug_str	00000000 
00005340 l       .debug_str	00000000 
0000535a l       .debug_str	00000000 
000053c6 l       .debug_str	00000000 
000053cf l       .debug_str	00000000 
000053db l       .debug_str	00000000 
00005451 l       .debug_str	00000000 
000054c7 l       .debug_str	00000000 
0000553d l       .debug_str	00000000 
000055a5 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00005614 l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
00005681 l       .debug_str	00000000 
000056f6 l       .debug_str	00000000 
0000570b l       .debug_str	00000000 
00005772 l       .debug_str	00000000 
0000577b l       .debug_str	00000000 
00005786 l       .debug_str	00000000 
0000578d l       .debug_str	00000000 
00053d85 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
000057c2 l       .debug_str	00000000 
000537be l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00053665 l       .debug_str	00000000 
00058afc l       .debug_str	00000000 
00005877 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
00005884 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00059088 l       .debug_str	00000000 
000013ef l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
000167d3 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000169d l       .debug_str	00000000 
00001694 l       .debug_str	00000000 
000058a5 l       .debug_str	00000000 
000058aa l       .debug_str	00000000 
000058af l       .debug_str	00000000 
000058b4 l       .debug_str	00000000 
000058b9 l       .debug_str	00000000 
000058be l       .debug_str	00000000 
000058c9 l       .debug_str	00000000 
000058d4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a7d3 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003d8a l       .debug_str	00000000 
00014363 l       .debug_str	00000000 
00003dfe l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003e0a l       .debug_str	00000000 
00003e30 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
0002c0fa l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
00003e57 l       .debug_str	00000000 
00003e3c l       .debug_str	00000000 
00003e63 l       .debug_str	00000000 
00003e6e l       .debug_str	00000000 
00003e79 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
00003f33 l       .debug_str	00000000 
00003e8a l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003f11 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00003f18 l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00003f47 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003fa4 l       .debug_str	00000000 
00004009 l       .debug_str	00000000 
00004011 l       .debug_str	00000000 
00004033 l       .debug_str	00000000 
0000401a l       .debug_str	00000000 
0000404b l       .debug_str	00000000 
00004071 l       .debug_str	00000000 
000040e9 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
00055a1a l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
00004160 l       .debug_str	00000000 
000041c9 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
00004280 l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00057690 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000520d5 l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
000584cb l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00004306 l       .debug_str	00000000 
0000437f l       .debug_str	00000000 
00058afa l       .debug_str	00000000 
00004384 l       .debug_str	00000000 
000043a7 l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
000043cd l       .debug_str	00000000 
000043b4 l       .debug_str	00000000 
000043af l       .debug_str	00000000 
000043d8 l       .debug_str	00000000 
000043f1 l       .debug_str	00000000 
0000445c l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
000044cc l       .debug_str	00000000 
000044dc l       .debug_str	00000000 
00004554 l       .debug_str	00000000 
00053315 l       .debug_str	00000000 
0005306f l       .debug_str	00000000 
0000455e l       .debug_str	00000000 
00004565 l       .debug_str	00000000 
00004588 l       .debug_str	00000000 
0000456f l       .debug_str	00000000 
0000456a l       .debug_str	00000000 
00004592 l       .debug_str	00000000 
000045aa l       .debug_str	00000000 
00004614 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00004689 l       .debug_str	00000000 
000046f0 l       .debug_str	00000000 
0000476b l       .debug_str	00000000 
0000477b l       .debug_str	00000000 
00004784 l       .debug_str	00000000 
00004792 l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047ac l       .debug_str	00000000 
000049ba l       .debug_str	00000000 
000047b8 l       .debug_str	00000000 
000047c7 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047e8 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
00004801 l       .debug_str	00000000 
00004834 l       .debug_str	00000000 
0000481b l       .debug_str	00000000 
00004840 l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00004872 l       .debug_str	00000000 
00004859 l       .debug_str	00000000 
0000487d l       .debug_str	00000000 
0000489f l       .debug_str	00000000 
00004886 l       .debug_str	00000000 
000048ac l       .debug_str	00000000 
000048c7 l       .debug_str	00000000 
00004934 l       .debug_str	00000000 
000049b1 l       .debug_str	00000000 
000049b9 l       .debug_str	00000000 
00004c65 l       .debug_str	00000000 
00004c4c l       .debug_str	00000000 
000049c3 l       .debug_str	00000000 
000049e0 l       .debug_str	00000000 
00004a4f l       .debug_str	00000000 
00004ac5 l       .debug_str	00000000 
00004ad6 l       .debug_str	00000000 
00004ae4 l       .debug_str	00000000 
00004aeb l       .debug_str	00000000 
00004af2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
000078c2 l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
00029949 l       .debug_str	00000000 
000227e2 l       .debug_str	00000000 
0000a3a8 l       .debug_str	00000000 
0000a3d8 l       .debug_str	00000000 
0000a636 l       .debug_str	00000000 
0000a666 l       .debug_str	00000000 
0000a691 l       .debug_str	00000000 
0000a69b l       .debug_str	00000000 
0000a6f4 l       .debug_str	00000000 
0000a948 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000058d9 l       .debug_str	00000000 
00005909 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00058316 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
00054434 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002db0e l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052e17 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
000298d5 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00022a36 l       .debug_str	00000000 
00005b4c l       .debug_str	00000000 
00005b7c l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000201b2 l       .debug_str	00000000 
000201a6 l       .debug_str	00000000 
00052854 l       .debug_str	00000000 
0005301e l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
000593c9 l       .debug_str	00000000 
0000ad71 l       .debug_str	00000000 
0000ad7a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000a969 l       .debug_str	00000000 
0000b283 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
0000a9a0 l       .debug_str	00000000 
0000a9f3 l       .debug_str	00000000 
000238a1 l       .debug_str	00000000 
0000aa07 l       .debug_str	00000000 
0000aa4d l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
0000aa5b l       .debug_str	00000000 
0000aaa2 l       .debug_str	00000000 
0000aaab l       .debug_str	00000000 
0000aaf4 l       .debug_str	00000000 
000058be l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013535 l       .debug_str	00000000 
00003d80 l       .debug_str	00000000 
0000ab00 l       .debug_str	00000000 
0000ab7c l       .debug_str	00000000 
000594be l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00003d4f l       .debug_str	00000000 
0000aba6 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0000ac51 l       .debug_str	00000000 
0000acd7 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002d954 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00014353 l       .debug_str	00000000 
0000acff l       .debug_str	00000000 
0000ad61 l       .debug_str	00000000 
00054434 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
00016e0a l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000ad69 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000316b5 l       .debug_str	00000000 
00054d9e l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
000551e0 l       .debug_str	00000000 
0000af8d l       .debug_str	00000000 
00051d96 l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
0005980e l       .debug_str	00000000 
0005980d l       .debug_str	00000000 
00059088 l       .debug_str	00000000 
000013ef l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
000167d3 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000169d l       .debug_str	00000000 
00001694 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00025ae5 l       .debug_str	00000000 
00025aea l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000ad81 l       .debug_str	00000000 
00051cb9 l       .debug_str	00000000 
0000ad85 l       .debug_str	00000000 
0000adb6 l       .debug_str	00000000 
0000adbc l       .debug_str	00000000 
0000adfd l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000ae12 l       .debug_str	00000000 
0000ae49 l       .debug_str	00000000 
0000ae54 l       .debug_str	00000000 
00058316 l       .debug_str	00000000 
0000ae86 l       .debug_str	00000000 
00051dfd l       .debug_str	00000000 
0000aeba l       .debug_str	00000000 
00051dec l       .debug_str	00000000 
0000aeee l       .debug_str	00000000 
00051da4 l       .debug_str	00000000 
0000af25 l       .debug_str	00000000 
00051e36 l       .debug_str	00000000 
0000af5d l       .debug_str	00000000 
00051c67 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
00003e57 l       .debug_str	00000000 
0000b2d4 l       .debug_str	00000000 
0000b2fb l       .debug_str	00000000 
0000b306 l       .debug_str	00000000 
0000b32d l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000b338 l       .debug_str	00000000 
0000b337 l       .debug_str	00000000 
00020065 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00052da5 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00054434 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000058be l       .debug_str	00000000 
00055cf5 l       .debug_str	00000000 
00052fff l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000afbe l       .debug_str	00000000 
0000afe7 l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
0000aff4 l       .debug_str	00000000 
0000b006 l       .debug_str	00000000 
0000b017 l       .debug_str	00000000 
0000b063 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000b06f l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052dc2 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a7d3 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b6b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00057690 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
000520d5 l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
000584cb l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
00047778 l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
00001d93 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0005817e l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da7 l       .debug_str	00000000 
00001db2 l       .debug_str	00000000 
00001dba l       .debug_str	00000000 
0000b073 l       .debug_str	00000000 
0000b863 l       .debug_str	00000000 
00001dc2 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001fc2 l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fdb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002008 l       .debug_str	00000000 
00001fe5 l       .debug_str	00000000 
00002013 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00002111 l       .debug_str	00000000 
0000211f l       .debug_str	00000000 
0000217e l       .debug_str	00000000 
000021e5 l       .debug_str	00000000 
000021fb l       .debug_str	00000000 
0000220b l       .debug_str	00000000 
000569b4 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000221a l       .debug_str	00000000 
00025ae5 l       .debug_str	00000000 
00002220 l       .debug_str	00000000 
00002226 l       .debug_str	00000000 
0000222c l       .debug_str	00000000 
00002238 l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
00002240 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
0000224e l       .debug_str	00000000 
00002294 l       .debug_str	00000000 
00002271 l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
00056541 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002338 l       .debug_str	00000000 
00002361 l       .debug_str	00000000 
0000233e l       .debug_str	00000000 
00002373 l       .debug_str	00000000 
000023b5 l       .debug_str	00000000 
0005642a l       .debug_str	00000000 
000023ff l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002434 l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002446 l       .debug_str	00000000 
00002488 l       .debug_str	00000000 
000558ee l       .debug_str	00000000 
000024d2 l       .debug_str	00000000 
000024d8 l       .debug_str	00000000 
000024de l       .debug_str	00000000 
000024e4 l       .debug_str	00000000 
0000250d l       .debug_str	00000000 
000024ea l       .debug_str	00000000 
0000251e l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
000025a8 l       .debug_str	00000000 
000025ad l       .debug_str	00000000 
00056778 l       .debug_str	00000000 
000025b2 l       .debug_str	00000000 
000025b8 l       .debug_str	00000000 
000025be l       .debug_str	00000000 
000025e7 l       .debug_str	00000000 
000025c4 l       .debug_str	00000000 
000025f8 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
000559a6 l       .debug_str	00000000 
00002682 l       .debug_str	00000000 
000026ae l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
000026bf l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
00002749 l       .debug_str	00000000 
0005694c l       .debug_str	00000000 
0000274e l       .debug_str	00000000 
00002757 l       .debug_str	00000000 
0000275e l       .debug_str	00000000 
00002789 l       .debug_str	00000000 
00002766 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027dd l       .debug_str	00000000 
00056614 l       .debug_str	00000000 
00002827 l       .debug_str	00000000 
0000282d l       .debug_str	00000000 
00002833 l       .debug_str	00000000 
00002839 l       .debug_str	00000000 
0000283f l       .debug_str	00000000 
00002847 l       .debug_str	00000000 
00002855 l       .debug_str	00000000 
00002864 l       .debug_str	00000000 
00002875 l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002896 l       .debug_str	00000000 
0000289d l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028c0 l       .debug_str	00000000 
000028f5 l       .debug_str	00000000 
00002937 l       .debug_str	00000000 
00055aa9 l       .debug_str	00000000 
00002981 l       .debug_str	00000000 
000029ae l       .debug_str	00000000 
0000298b l       .debug_str	00000000 
000029c0 l       .debug_str	00000000 
00002a02 l       .debug_str	00000000 
00002a4c l       .debug_str	00000000 
00002a51 l       .debug_str	00000000 
00002a7e l       .debug_str	00000000 
00002a5b l       .debug_str	00000000 
00002a90 l       .debug_str	00000000 
00002ad2 l       .debug_str	00000000 
00002b1c l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002b30 l       .debug_str	00000000 
00002b40 l       .debug_str	00000000 
00002b49 l       .debug_str	00000000 
00002b54 l       .debug_str	00000000 
00002b63 l       .debug_str	00000000 
00002b78 l       .debug_str	00000000 
00002ba9 l       .debug_str	00000000 
00002c46 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002cf6 l       .debug_str	00000000 
00002cff l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d20 l       .debug_str	00000000 
00002d56 l       .debug_str	00000000 
00002dd9 l       .debug_str	00000000 
00002e64 l       .debug_str	00000000 
00002e80 l       .debug_str	00000000 
00002ecc l       .debug_str	00000000 
00002f20 l       .debug_str	00000000 
00002f3d l       .debug_str	00000000 
00002f51 l       .debug_str	00000000 
00002f9d l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00003007 l       .debug_str	00000000 
0000301b l       .debug_str	00000000 
00003062 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030dd l       .debug_str	00000000 
000030ba l       .debug_str	00000000 
000030eb l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003108 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
0002c0fa l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003135 l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314c l       .debug_str	00000000 
00003154 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003165 l       .debug_str	00000000 
0000316d l       .debug_str	00000000 
00003175 l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031a2 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
000031b6 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000031ca l       .debug_str	00000000 
000031d5 l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
00055a1a l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00003298 l       .debug_str	00000000 
000032a8 l       .debug_str	00000000 
000032b7 l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
000032c6 l       .debug_str	00000000 
000032ce l       .debug_str	00000000 
0000330f l       .debug_str	00000000 
000032ec l       .debug_str	00000000 
0000331f l       .debug_str	00000000 
00003334 l       .debug_str	00000000 
0000333d l       .debug_str	00000000 
0000339a l       .debug_str	00000000 
000033ff l       .debug_str	00000000 
00003409 l       .debug_str	00000000 
00003419 l       .debug_str	00000000 
0000342e l       .debug_str	00000000 
00003436 l       .debug_str	00000000 
0000349a l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
0000350d l       .debug_str	00000000 
00003515 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003566 l       .debug_str	00000000 
0000357b l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035aa l       .debug_str	00000000 
000035bf l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
00052e17 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00052b22 l       .debug_str	00000000 
0000b080 l       .debug_str	00000000 
0000b138 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
0000b19c l       .debug_str	00000000 
0000b1d2 l       .debug_str	00000000 
0000b1eb l       .debug_str	00000000 
0000b225 l       .debug_str	00000000 
0000b242 l       .debug_str	00000000 
0000b27d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
0000b29a l       .debug_str	00000000 
0000b2a4 l       .debug_str	00000000 
0000b2ca l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
0005784e l       .debug_str	00000000 
0000b3fe l       .debug_str	00000000 
0000b43a l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000b3b4 l       .debug_str	00000000 
0000b3f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
00003108 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0005301e l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
000130f1 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0000b84b l       .debug_str	00000000 
0000b854 l       .debug_str	00000000 
00020065 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0000b8f7 l       .debug_str	00000000 
0000b337 l       .debug_str	00000000 
0000b902 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
0000b479 l       .debug_str	00000000 
0000b4c1 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
0000b4e0 l       .debug_str	00000000 
0000b51b l       .debug_str	00000000 
0000b540 l       .debug_str	00000000 
0000b567 l       .debug_str	00000000 
0000b5c7 l       .debug_str	00000000 
0000b5d0 l       .debug_str	00000000 
0000b63b l       .debug_str	00000000 
0000b64b l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052dc2 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a7d3 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b6b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00057690 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
000520d5 l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
000584cb l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
00047778 l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
00001d93 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0005817e l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da7 l       .debug_str	00000000 
00001db2 l       .debug_str	00000000 
00001dba l       .debug_str	00000000 
0000b863 l       .debug_str	00000000 
00001dc2 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001fc2 l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fdb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002008 l       .debug_str	00000000 
00001fe5 l       .debug_str	00000000 
00002013 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00002111 l       .debug_str	00000000 
0000211f l       .debug_str	00000000 
0000217e l       .debug_str	00000000 
000021e5 l       .debug_str	00000000 
000021fb l       .debug_str	00000000 
0000220b l       .debug_str	00000000 
000569b4 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000221a l       .debug_str	00000000 
00025ae5 l       .debug_str	00000000 
00002220 l       .debug_str	00000000 
00002226 l       .debug_str	00000000 
0000222c l       .debug_str	00000000 
00002238 l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
00002240 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
0000224e l       .debug_str	00000000 
00002294 l       .debug_str	00000000 
00002271 l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
00056541 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002338 l       .debug_str	00000000 
00002361 l       .debug_str	00000000 
0000233e l       .debug_str	00000000 
00002373 l       .debug_str	00000000 
000023b5 l       .debug_str	00000000 
0005642a l       .debug_str	00000000 
000023ff l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002434 l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002446 l       .debug_str	00000000 
00002488 l       .debug_str	00000000 
000558ee l       .debug_str	00000000 
000024d2 l       .debug_str	00000000 
000024d8 l       .debug_str	00000000 
000024de l       .debug_str	00000000 
000024e4 l       .debug_str	00000000 
0000250d l       .debug_str	00000000 
000024ea l       .debug_str	00000000 
0000251e l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
000025a8 l       .debug_str	00000000 
000025ad l       .debug_str	00000000 
00056778 l       .debug_str	00000000 
000025b2 l       .debug_str	00000000 
000025b8 l       .debug_str	00000000 
000025be l       .debug_str	00000000 
000025e7 l       .debug_str	00000000 
000025c4 l       .debug_str	00000000 
000025f8 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
000559a6 l       .debug_str	00000000 
00002682 l       .debug_str	00000000 
000026ae l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
000026bf l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
00002749 l       .debug_str	00000000 
0005694c l       .debug_str	00000000 
0000274e l       .debug_str	00000000 
00002757 l       .debug_str	00000000 
0000275e l       .debug_str	00000000 
00002789 l       .debug_str	00000000 
00002766 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027dd l       .debug_str	00000000 
00056614 l       .debug_str	00000000 
00002827 l       .debug_str	00000000 
0000282d l       .debug_str	00000000 
00002833 l       .debug_str	00000000 
00002839 l       .debug_str	00000000 
0000283f l       .debug_str	00000000 
00002847 l       .debug_str	00000000 
00002855 l       .debug_str	00000000 
00002864 l       .debug_str	00000000 
00002875 l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002896 l       .debug_str	00000000 
0000289d l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028c0 l       .debug_str	00000000 
000028f5 l       .debug_str	00000000 
00002937 l       .debug_str	00000000 
00055aa9 l       .debug_str	00000000 
00002981 l       .debug_str	00000000 
000029ae l       .debug_str	00000000 
0000298b l       .debug_str	00000000 
000029c0 l       .debug_str	00000000 
00002a02 l       .debug_str	00000000 
00002a4c l       .debug_str	00000000 
00002a51 l       .debug_str	00000000 
00002a7e l       .debug_str	00000000 
00002a5b l       .debug_str	00000000 
00002a90 l       .debug_str	00000000 
00002ad2 l       .debug_str	00000000 
00002b1c l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002b30 l       .debug_str	00000000 
00002b40 l       .debug_str	00000000 
00002b49 l       .debug_str	00000000 
00002b54 l       .debug_str	00000000 
00002b63 l       .debug_str	00000000 
00002b78 l       .debug_str	00000000 
00002ba9 l       .debug_str	00000000 
00002c46 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002cf6 l       .debug_str	00000000 
00002cff l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d20 l       .debug_str	00000000 
00002d56 l       .debug_str	00000000 
00002dd9 l       .debug_str	00000000 
00002e64 l       .debug_str	00000000 
00002e80 l       .debug_str	00000000 
00002ecc l       .debug_str	00000000 
00002f20 l       .debug_str	00000000 
00002f3d l       .debug_str	00000000 
00002f51 l       .debug_str	00000000 
00002f9d l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00003007 l       .debug_str	00000000 
0000301b l       .debug_str	00000000 
00003062 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030dd l       .debug_str	00000000 
000030ba l       .debug_str	00000000 
000030eb l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
0002c0fa l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
00003e57 l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003135 l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314c l       .debug_str	00000000 
00003154 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003165 l       .debug_str	00000000 
0000316d l       .debug_str	00000000 
00003175 l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031a2 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
000031b6 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000031ca l       .debug_str	00000000 
000031d5 l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
00055a1a l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00003298 l       .debug_str	00000000 
000032a8 l       .debug_str	00000000 
000032b7 l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
000032c6 l       .debug_str	00000000 
000032ce l       .debug_str	00000000 
0000330f l       .debug_str	00000000 
000032ec l       .debug_str	00000000 
0000331f l       .debug_str	00000000 
00003334 l       .debug_str	00000000 
0000333d l       .debug_str	00000000 
0000339a l       .debug_str	00000000 
000033ff l       .debug_str	00000000 
00003409 l       .debug_str	00000000 
00003419 l       .debug_str	00000000 
0000342e l       .debug_str	00000000 
00003436 l       .debug_str	00000000 
0000349a l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
0000350d l       .debug_str	00000000 
00003515 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003566 l       .debug_str	00000000 
0000357b l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035aa l       .debug_str	00000000 
000035bf l       .debug_str	00000000 
0000b338 l       .debug_str	00000000 
0000b6ca l       .debug_str	00000000 
0000b72d l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
0000b7ad l       .debug_str	00000000 
0000b810 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000016bb l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000201b2 l       .debug_str	00000000 
0000bba7 l       .debug_str	00000000 
0000bbd8 l       .debug_str	00000000 
0000be6b l       .debug_str	00000000 
0000bbf2 l       .debug_str	00000000 
0000bc23 l       .debug_str	00000000 
0000bca1 l       .debug_str	00000000 
0000bc53 l       .debug_str	00000000 
0000bc84 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
0000bc94 l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
0000bca0 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0000bca6 l       .debug_str	00000000 
0000bcf8 l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
0000bd4b l       .debug_str	00000000 
0000bdb4 l       .debug_str	00000000 
000201a6 l       .debug_str	00000000 
0000be07 l       .debug_str	00000000 
0000be6a l       .debug_str	00000000 
0000be96 l       .debug_str	00000000 
0000bf0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000580b4 l       .debug_str	00000000 
000013e2 l       .debug_str	00000000 
00001725 l       .debug_str	00000000 
0000b90c l       .debug_str	00000000 
0000be8c l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000b91b l       .debug_str	00000000 
0000b963 l       .debug_str	00000000 
0000b96c l       .debug_str	00000000 
0000b9b4 l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
0000b9bc l       .debug_str	00000000 
0000b5c7 l       .debug_str	00000000 
0000ba04 l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0000ba55 l       .debug_str	00000000 
0000ba9d l       .debug_str	00000000 
0000baa6 l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
000198dd l       .debug_str	00000000 
0000bae0 l       .debug_str	00000000 
0000bb11 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
000016bb l       .debug_str	00000000 
0000bb1b l       .debug_str	00000000 
0000bb4c l       .debug_str	00000000 
000198f1 l       .debug_str	00000000 
0000bb6c l       .debug_str	00000000 
0000bb9d l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000316b5 l       .debug_str	00000000 
00054d9e l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
0000c0b6 l       .debug_str	00000000 
0000bfb3 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
0000c00c l       .debug_str	00000000 
0000c018 l       .debug_str	00000000 
0000c05f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
0000c06b l       .debug_str	00000000 
0000c0c6 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
00054d8c l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000bf62 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000201d0 l       .debug_str	00000000 
00009548 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
0000c386 l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
000199a1 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0002630c l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0002cc5a l       .debug_str	00000000 
00027f07 l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c3e5 l       .debug_str	00000000 
00019a85 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00019ac0 l       .debug_str	00000000 
0000c42f l       .debug_str	00000000 
0000c49e l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000198e7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
000170fe l       .debug_str	00000000 
0000c124 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052dc2 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c135 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c13f l       .debug_str	00000000 
0000c14a l       .debug_str	00000000 
0000c154 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000238b9 l       .debug_str	00000000 
0000c15d l       .debug_str	00000000 
0000c1a3 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
000557af l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
0002389f l       .debug_str	00000000 
0000c1be l       .debug_str	00000000 
00052be2 l       .debug_str	00000000 
000238e2 l       .debug_str	00000000 
0005868a l       .debug_str	00000000 
0000c1c2 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00057ac6 l       .debug_str	00000000 
0000c1cf l       .debug_str	00000000 
0005711e l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
0000c1d2 l       .debug_str	00000000 
0000c212 l       .debug_str	00000000 
0000c221 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
0000c269 l       .debug_str	00000000 
0000c2b0 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
0000c2be l       .debug_str	00000000 
0000c302 l       .debug_str	00000000 
0000c30d l       .debug_str	00000000 
0000c316 l       .debug_str	00000000 
0000c31e l       .debug_str	00000000 
000549c7 l       .debug_str	00000000 
0000e90e l       .debug_str	00000000 
0005301e l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000c327 l       .debug_str	00000000 
0000c32d l       .debug_str	00000000 
0000c336 l       .debug_str	00000000 
0000c343 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
0003bd56 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c346 l       .debug_str	00000000 
0000c35d l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
00010b99 l       .debug_str	00000000 
0000c373 l       .debug_str	00000000 
0000c379 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c380 l       .debug_str	00000000 
00017026 l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00019956 l       .debug_str	00000000 
00057f47 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
200000e8 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000160 l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0000e50e l       .debug_str	00000000 
0000e472 l       .debug_str	00000000 
0000e4b8 l       .debug_str	00000000 
0000e557 l       .debug_str	00000000 
0000e59d l       .debug_str	00000000 
0000e90e l       .debug_str	00000000 
000131eb l       .debug_str	00000000 
0000e5d7 l       .debug_str	00000000 
0000e61e l       .debug_str	00000000 
0000e66c l       .debug_str	00000000 
0000e6b8 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c380 l       .debug_str	00000000 
0000c386 l       .debug_str	00000000 
00017026 l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00019956 l       .debug_str	00000000 
00057f47 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
000199a1 l       .debug_str	00000000 
0002630c l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
00027f07 l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000c3e5 l       .debug_str	00000000 
00019a85 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00019ac0 l       .debug_str	00000000 
0000c42f l       .debug_str	00000000 
0000e6f8 l       .debug_str	00000000 
0000e7a4 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e876 l       .debug_str	00000000 
0000e88f l       .debug_str	00000000 
0005301e l       .debug_str	00000000 
000200ee l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0001dbdd l       .debug_str	00000000 
0000e8df l       .debug_str	00000000 
00038f10 l       .debug_str	00000000 
0001ab5b l       .debug_str	00000000 
00035ac0 l       .debug_str	00000000 
0000e8e2 l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
000175f0 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00010925 l       .debug_str	00000000 
000593c9 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
000233bb l       .debug_str	00000000 
0000e8e9 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00026351 l       .debug_str	00000000 
0000e8f0 l       .debug_str	00000000 
000557b0 l       .debug_str	00000000 
0000c1bf l       .debug_str	00000000 
000170fe l       .debug_str	00000000 
000549c7 l       .debug_str	00000000 
0000e8fc l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000e914 l       .debug_str	00000000 
0000e920 l       .debug_str	00000000 
0000e92c l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000e939 l       .debug_str	00000000 
00059936 l       .debug_str	00000000 
0000e946 l       .debug_str	00000000 
0000e9bd l       .debug_str	00000000 
0000e9c6 l       .debug_str	00000000 
0000e9d4 l       .debug_str	00000000 
00019a07 l       .debug_str	00000000 
0000e9ec l       .debug_str	00000000 
0000ea21 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4a5 l       .debug_str	00000000 
0000c4ae l       .debug_str	00000000 
0000c4b8 l       .debug_str	00000000 
0000c4c8 l       .debug_str	00000000 
0000e883 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000c4e9 l       .debug_str	00000000 
0000c4f1 l       .debug_str	00000000 
0000c4f7 l       .debug_str	00000000 
0000c4fd l       .debug_str	00000000 
0000c503 l       .debug_str	00000000 
0000c50a l       .debug_str	00000000 
0000c510 l       .debug_str	00000000 
0000c516 l       .debug_str	00000000 
0000c51d l       .debug_str	00000000 
0000c523 l       .debug_str	00000000 
0000c52b l       .debug_str	00000000 
0000c532 l       .debug_str	00000000 
0000c538 l       .debug_str	00000000 
0000c53e l       .debug_str	00000000 
0000c544 l       .debug_str	00000000 
0000c54a l       .debug_str	00000000 
0000c550 l       .debug_str	00000000 
0000c557 l       .debug_str	00000000 
0000c55e l       .debug_str	00000000 
0000c566 l       .debug_str	00000000 
0000c56e l       .debug_str	00000000 
0000c576 l       .debug_str	00000000 
0000c57d l       .debug_str	00000000 
0000c585 l       .debug_str	00000000 
0000c58c l       .debug_str	00000000 
0000c593 l       .debug_str	00000000 
0000c59a l       .debug_str	00000000 
0000c5a1 l       .debug_str	00000000 
0000c5a8 l       .debug_str	00000000 
0000c5af l       .debug_str	00000000 
0000c5b5 l       .debug_str	00000000 
0000c5bb l       .debug_str	00000000 
0000c5c1 l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
0000c5ce l       .debug_str	00000000 
0000c5d6 l       .debug_str	00000000 
0000eaaf l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
00057023 l       .debug_str	00000000 
0000c5e9 l       .debug_str	00000000 
000557af l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
0002389f l       .debug_str	00000000 
0000c1be l       .debug_str	00000000 
00052be2 l       .debug_str	00000000 
000238e2 l       .debug_str	00000000 
0005868a l       .debug_str	00000000 
0000c1c2 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00057ac6 l       .debug_str	00000000 
0000c1cf l       .debug_str	00000000 
0005711e l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000c5f5 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0000c605 l       .debug_str	00000000 
0000c641 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
0000c660 l       .debug_str	00000000 
0000c6ae l       .debug_str	00000000 
0000c6ef l       .debug_str	00000000 
0000c75b l       .debug_str	00000000 
0000c79d l       .debug_str	00000000 
0000c809 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00058316 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
00054434 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c875 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c8d8 l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000c959 l       .debug_str	00000000 
0000c9f3 l       .debug_str	00000000 
0000cab6 l       .debug_str	00000000 
0000cba3 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002db0e l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052e17 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0000d651 l       .debug_str	00000000 
0000d764 l       .debug_str	00000000 
0000d884 l       .debug_str	00000000 
0000d99b l       .debug_str	00000000 
0000dad4 l       .debug_str	00000000 
0000dc2a l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
0000dd7f l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00010583 l       .debug_str	00000000 
0002cc5a l       .debug_str	00000000 
0000decc l       .debug_str	00000000 
0000df1a l       .debug_str	00000000 
0000e09a l       .debug_str	00000000 
0000e0e8 l       .debug_str	00000000 
0000e129 l       .debug_str	00000000 
0000e177 l       .debug_str	00000000 
0000e1b8 l       .debug_str	00000000 
0000e208 l       .debug_str	00000000 
0000e38a l       .debug_str	00000000 
0000e3db l       .debug_str	00000000 
0000e41f l       .debug_str	00000000 
0001c7e0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0000c5e9 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000ea95 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000c4e9 l       .debug_str	00000000 
0000c4f1 l       .debug_str	00000000 
0000c4f7 l       .debug_str	00000000 
0000c4fd l       .debug_str	00000000 
0000c503 l       .debug_str	00000000 
0000c50a l       .debug_str	00000000 
0000c510 l       .debug_str	00000000 
0000c516 l       .debug_str	00000000 
0000c51d l       .debug_str	00000000 
0000c523 l       .debug_str	00000000 
0000c52b l       .debug_str	00000000 
0000c532 l       .debug_str	00000000 
0000c538 l       .debug_str	00000000 
0000c53e l       .debug_str	00000000 
0000c544 l       .debug_str	00000000 
0000c54a l       .debug_str	00000000 
0000c550 l       .debug_str	00000000 
0000c557 l       .debug_str	00000000 
0000c55e l       .debug_str	00000000 
0000c566 l       .debug_str	00000000 
0000c56e l       .debug_str	00000000 
0000c576 l       .debug_str	00000000 
0000c57d l       .debug_str	00000000 
0000c585 l       .debug_str	00000000 
0000c58c l       .debug_str	00000000 
0000c593 l       .debug_str	00000000 
0000c59a l       .debug_str	00000000 
0000c5a1 l       .debug_str	00000000 
0000c5a8 l       .debug_str	00000000 
0000c5af l       .debug_str	00000000 
0000c5b5 l       .debug_str	00000000 
0000c5bb l       .debug_str	00000000 
0000c5c1 l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
0000c5ce l       .debug_str	00000000 
0000c5d6 l       .debug_str	00000000 
0000eaaf l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
00057023 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0000ea2d l       .debug_str	00000000 
0000ea69 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0000eb0a l       .debug_str	00000000 
0000eaff l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
0000eb48 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000eabb l       .debug_str	00000000 
0000a53c l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0000f6d9 l       .debug_str	00000000 
0001009a l       .debug_str	00000000 
000101ed l       .debug_str	00000000 
0001021d l       .debug_str	00000000 
0000c32d l       .debug_str	00000000 
0000c336 l       .debug_str	00000000 
0000c343 l       .debug_str	00000000 
0003bd56 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c346 l       .debug_str	00000000 
0000c35d l       .debug_str	00000000 
00010b99 l       .debug_str	00000000 
00010b7c l       .debug_str	00000000 
00010344 l       .debug_str	00000000 
00010374 l       .debug_str	00000000 
00010c20 l       .debug_str	00000000 
00010bc2 l       .debug_str	00000000 
000103b6 l       .debug_str	00000000 
000103e6 l       .debug_str	00000000 
00010435 l       .debug_str	00000000 
00010465 l       .debug_str	00000000 
00010477 l       .debug_str	00000000 
000104a7 l       .debug_str	00000000 
000104e0 l       .debug_str	00000000 
000104e9 l       .debug_str	00000000 
00010516 l       .debug_str	00000000 
00010559 l       .debug_str	00000000 
0001056f l       .debug_str	00000000 
000106b3 l       .debug_str	00000000 
0001074f l       .debug_str	00000000 
00010819 l       .debug_str	00000000 
00010832 l       .debug_str	00000000 
00010911 l       .debug_str	00000000 
00010a5a l       .debug_str	00000000 
00010b77 l       .debug_str	00000000 
00010baf l       .debug_str	00000000 
00010bf4 l       .debug_str	00000000 
00010bfc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000eb4e l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
0000eb55 l       .debug_str	00000000 
0000eb5a l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0000eb7f l       .debug_str	00000000 
0000eb86 l       .debug_str	00000000 
0000eb8b l       .debug_str	00000000 
0000ebc6 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
0000ebfd l       .debug_str	00000000 
0000ec2d l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
0000ec40 l       .debug_str	00000000 
0000ec46 l       .debug_str	00000000 
0000ec4d l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000e8e2 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00058316 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
00054434 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c875 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c8d8 l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000c959 l       .debug_str	00000000 
0000c9f3 l       .debug_str	00000000 
0000cab6 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002db0e l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052e17 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0000ec55 l       .debug_str	00000000 
0000ed67 l       .debug_str	00000000 
0000ee96 l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
0000efc4 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00010a6e l       .debug_str	00000000 
0001050d l       .debug_str	00000000 
0000f0ea l       .debug_str	00000000 
0000f11a l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00010529 l       .debug_str	00000000 
0000f151 l       .debug_str	00000000 
0000f181 l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00016a39 l       .debug_str	00000000 
0000f1ce l       .debug_str	00000000 
0000f1fe l       .debug_str	00000000 
0000cba3 l       .debug_str	00000000 
0000d651 l       .debug_str	00000000 
0000d764 l       .debug_str	00000000 
0000d884 l       .debug_str	00000000 
0000d99b l       .debug_str	00000000 
0000dad4 l       .debug_str	00000000 
0000dc2a l       .debug_str	00000000 
0000dd7f l       .debug_str	00000000 
00010583 l       .debug_str	00000000 
0000f21e l       .debug_str	00000000 
0000f24e l       .debug_str	00000000 
0000ea26 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f39c l       .debug_str	00000000 
0000f3a7 l       .debug_str	00000000 
0000f3b1 l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00019956 l       .debug_str	00000000 
0000f3ba l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
000199a1 l       .debug_str	00000000 
0002630c l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0002cc5a l       .debug_str	00000000 
00027f07 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00027e9b l       .debug_str	00000000 
0000f3c7 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
000106d7 l       .debug_str	00000000 
0000f3d3 l       .debug_str	00000000 
0000f403 l       .debug_str	00000000 
0000f4a9 l       .debug_str	00000000 
0000f4ae l       .debug_str	00000000 
0000f4b4 l       .debug_str	00000000 
0000f4bd l       .debug_str	00000000 
00055428 l       .debug_str	00000000 
00010773 l       .debug_str	00000000 
0000f4c7 l       .debug_str	00000000 
0000f4f7 l       .debug_str	00000000 
0000f5cb l       .debug_str	00000000 
00056c66 l       .debug_str	00000000 
00025aea l       .debug_str	00000000 
0001082c l       .debug_str	00000000 
0000f5d1 l       .debug_str	00000000 
0000f601 l       .debug_str	00000000 
0000f624 l       .debug_str	00000000 
0000f651 l       .debug_str	00000000 
0000f672 l       .debug_str	00000000 
0000f779 l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
0000f853 l       .debug_str	00000000 
0000f8ca l       .debug_str	00000000 
0000f94e l       .debug_str	00000000 
0000f9c9 l       .debug_str	00000000 
0000fa67 l       .debug_str	00000000 
0000fb12 l       .debug_str	00000000 
0000fbb4 l       .debug_str	00000000 
0000fc88 l       .debug_str	00000000 
0000fd79 l       .debug_str	00000000 
0000fe69 l       .debug_str	00000000 
00010846 l       .debug_str	00000000 
0000ff51 l       .debug_str	00000000 
0000ff81 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00010925 l       .debug_str	00000000 
0001006a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
00052987 l       .debug_str	00000000 
00010c2b l       .debug_str	00000000 
00010c5c l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000198e7 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00010c65 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
00014096 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010dc9 l       .debug_str	00000000 
00010dd5 l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
000262f1 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000ea95 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000c4e9 l       .debug_str	00000000 
0000c4f1 l       .debug_str	00000000 
0000c4f7 l       .debug_str	00000000 
0000c4fd l       .debug_str	00000000 
0000c503 l       .debug_str	00000000 
0000c50a l       .debug_str	00000000 
0000c510 l       .debug_str	00000000 
0000c516 l       .debug_str	00000000 
0000c51d l       .debug_str	00000000 
0000c523 l       .debug_str	00000000 
0000c52b l       .debug_str	00000000 
0000c532 l       .debug_str	00000000 
0000c538 l       .debug_str	00000000 
0000c53e l       .debug_str	00000000 
0000c544 l       .debug_str	00000000 
0000c54a l       .debug_str	00000000 
0000c550 l       .debug_str	00000000 
0000c557 l       .debug_str	00000000 
0000c55e l       .debug_str	00000000 
0000c566 l       .debug_str	00000000 
0000c56e l       .debug_str	00000000 
0000c576 l       .debug_str	00000000 
0000c57d l       .debug_str	00000000 
0000c585 l       .debug_str	00000000 
0000c58c l       .debug_str	00000000 
0000c593 l       .debug_str	00000000 
0000c59a l       .debug_str	00000000 
0000c5a1 l       .debug_str	00000000 
0000c5a8 l       .debug_str	00000000 
0000c5af l       .debug_str	00000000 
0000c5b5 l       .debug_str	00000000 
0000c5bb l       .debug_str	00000000 
0000c5c1 l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
0000c5ce l       .debug_str	00000000 
0000c5d6 l       .debug_str	00000000 
0000eaaf l       .debug_str	00000000 
00010cdb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00010d01 l       .debug_str	00000000 
00010dc2 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
000262f1 l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e876 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4a5 l       .debug_str	00000000 
0000c4ae l       .debug_str	00000000 
0000c4b8 l       .debug_str	00000000 
0000c4c8 l       .debug_str	00000000 
0000e883 l       .debug_str	00000000 
00010e9d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00010ec3 l       .debug_str	00000000 
00010dc2 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010dc9 l       .debug_str	00000000 
00010f6a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
00001366 l       .debug_str	00000000 
00011061 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010dc9 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
00010cdb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00057911 l       .debug_str	00000000 
00011011 l       .debug_str	00000000 
0001104a l       .debug_str	00000000 
000262f1 l       .debug_str	00000000 
00010e9d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
00002330 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
00010cdb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
0001109a l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 10fld6rw1cguoaz1
00001366 l       .debug_str	00000000 
000111d3 l       .debug_str	00000000 
0001120f l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
00011218 l       .debug_str	00000000 
0001b251 l       .debug_str	00000000 
00011243 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0002c5fb l       .debug_str	00000000 
000112a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00013f1c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00011179 l       .debug_str	00000000 
000111c0 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0002011a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000eee l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1ewcpkt7vg0rrbln
0001163b l       .debug_str	00000000 
0003bd56 l       .debug_str	00000000 
000119cc l       .debug_str	00000000 
00002403 l       .debug_str	00000000 
000119c8 l       .debug_str	00000000 
000119c3 l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00054243 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00057911 l       .debug_str	00000000 
00011352 l       .debug_str	00000000 
000113de l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00013535 l       .debug_str	00000000 
000551cb l       .debug_str	00000000 
000594be l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016f2f l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
000238a1 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
000113fb l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00011487 l       .debug_str	00000000 
000114bc l       .debug_str	00000000 
000114d6 l       .debug_str	00000000 
0001150b l       .debug_str	00000000 
00011998 l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00011525 l       .debug_str	00000000 
00011979 l       .debug_str	00000000 
0001193f l       .debug_str	00000000 
0001155a l       .debug_str	00000000 
00011921 l       .debug_str	00000000 
00011574 l       .debug_str	00000000 
000115aa l       .debug_str	00000000 
000118e8 l       .debug_str	00000000 
000118cc l       .debug_str	00000000 
000115c5 l       .debug_str	00000000 
00011895 l       .debug_str	00000000 
00011879 l       .debug_str	00000000 
00011842 l       .debug_str	00000000 
00011827 l       .debug_str	00000000 
000117f1 l       .debug_str	00000000 
000117d6 l       .debug_str	00000000 
000117a0 l       .debug_str	00000000 
00011785 l       .debug_str	00000000 
0001174f l       .debug_str	00000000 
00011734 l       .debug_str	00000000 
000116fe l       .debug_str	00000000 
000116e3 l       .debug_str	00000000 
000116ad l       .debug_str	00000000 
00011619 l       .debug_str	00000000 
00011d0c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00011a0a l       .debug_str	00000000 
00011a06 l       .debug_str	00000000 
00052fff l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00051cfb l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000112aa l       .debug_str	00000000 
00016a39 l       .debug_str	00000000 
000112ae l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0002c5c7 l       .debug_str	00000000 
000112b3 l       .debug_str	00000000 
00013619 l       .debug_str	00000000 
00020151 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00028289 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
000112b9 l       .debug_str	00000000 
00013753 l       .debug_str	00000000 
000112bc l       .debug_str	00000000 
00044e4b l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0005385d l       .debug_str	00000000 
00058176 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00011a00 l       .debug_str	00000000 
000119fa l       .debug_str	00000000 
000119f4 l       .debug_str	00000000 
000119ee l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000551e1 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
000593c9 l       .debug_str	00000000 
000024e8 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000198e7 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000119eb l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000262f1 l       .debug_str	00000000 
000112bf l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
00052dc2 l       .debug_str	00000000 
00054ef4 l       .debug_str	00000000 
00052883 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
000112c7 l       .debug_str	00000000 
000112d3 l       .debug_str	00000000 
000112de l       .debug_str	00000000 
000112eb l       .debug_str	00000000 
000112f9 l       .debug_str	00000000 
00011308 l       .debug_str	00000000 
00012fd6 l       .debug_str	00000000 
000119a7 l       .debug_str	00000000 
0001131a l       .debug_str	00000000 
00011340 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
0001134a l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
00016e0a l       .debug_str	00000000 
000119e7 l       .debug_str	00000000 
0001301e l       .debug_str	00000000 
00013da9 l       .debug_str	00000000 
00013e1b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
000119de l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
000119d4 l       .debug_str	00000000 
0001c950 l     O .text	0000001c str.0
0001cbd0 l     O .text	00000021 str.1
0001ceb0 l     O .text	00000039 str.2
0001cf10 l     O .text	00000021 str.3
0001cf50 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 1expeypgojy7j7ax
000031f0 l       .debug_str	00000000 
00011a0f l       .debug_str	00000000 
00011a4f l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00017691 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a7d3 l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00057690 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000520d5 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
000584cb l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00055a1a l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00004384 l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1rlfak9oa38tk11p
00011b3d l       .debug_str	00000000 
00052e17 l       .debug_str	00000000 
00016e0a l       .debug_str	00000000 
00011b7c l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00011bef l       .debug_str	00000000 
00011c2e l       .debug_str	00000000 
00011d0c l       .debug_str	00000000 
00011c6b l       .debug_str	00000000 
00011cce l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00011cf5 l       .debug_str	00000000 
00052883 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00013535 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e7ce l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
00011a9f l       .debug_str	00000000 
00011b34 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000551cb l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
000594be l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016f2f l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000238a1 l       .debug_str	00000000 
00057911 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2qmowyvqdyca5tsh
00011ef5 l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00011d5a l       .debug_str	00000000 
00011d9f l       .debug_str	00000000 
00011dac l       .debug_str	00000000 
00011df1 l       .debug_str	00000000 
00011dfe l       .debug_str	00000000 
00011e43 l       .debug_str	00000000 
00011e50 l       .debug_str	00000000 
00011e95 l       .debug_str	00000000 
00011ea2 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
00011eea l       .debug_str	00000000 
0000c0b6 l       .debug_str	00000000 
00011f3d l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00011f83 l       .debug_str	00000000 
00011fc9 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
00054d8c l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00011d16 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 31071ffymf9y6tnj
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00052854 l       .debug_str	00000000 
00013535 l       .debug_str	00000000 
000551cb l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
000594be l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016f2f l       .debug_str	00000000 
000238a1 l       .debug_str	00000000 
0001200f l       .debug_str	00000000 
0001208b l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 33bdok1lz3m5vvyy
00016d6a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00013535 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000120b8 l       .debug_str	00000000 
00012114 l       .debug_str	00000000 
0001210a l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
00052883 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3jm8kpc30rum4biz
0001221b l       .debug_str	00000000 
000119de l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00013e1b l       .debug_str	00000000 
00013da9 l       .debug_str	00000000 
000121ac l       .debug_str	00000000 
000121ed l       .debug_str	00000000 
0001225c l       .debug_str	00000000 
000122bf l       .debug_str	00000000 
00052e17 l       .debug_str	00000000 
0001230f l       .debug_str	00000000 
0001238f l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00012403 l       .debug_str	00000000 
00012483 l       .debug_str	00000000 
00000f82 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e7ce l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013535 l       .debug_str	00000000 
000551cb l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
000594be l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016f2f l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00016e0a l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000238a1 l       .debug_str	00000000 
00057911 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0001211b l       .debug_str	00000000 
0001215e l       .debug_str	00000000 
000119cc l       .debug_str	00000000 
0003bd56 l       .debug_str	00000000 
000119d4 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3tdzqkid9cxb86kn
00012e0c l       .debug_str	00000000 
00012673 l       .debug_str	00000000 
0001267c l       .debug_str	00000000 
00012685 l       .debug_str	00000000 
00012690 l       .debug_str	00000000 
0001269b l       .debug_str	00000000 
000126a6 l       .debug_str	00000000 
000126b2 l       .debug_str	00000000 
000126bc l       .debug_str	00000000 
000126c9 l       .debug_str	00000000 
000126d7 l       .debug_str	00000000 
000126e6 l       .debug_str	00000000 
000126f3 l       .debug_str	00000000 
0002857c l       .debug_str	00000000 
00012703 l       .debug_str	00000000 
0001272e l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00012737 l       .debug_str	00000000 
00023361 l       .debug_str	00000000 
00012763 l       .debug_str	00000000 
00037ad9 l       .debug_str	00000000 
00012792 l       .debug_str	00000000 
00052aa1 l       .debug_str	00000000 
000127ec l       .debug_str	00000000 
00035abf l       .debug_str	00000000 
00012845 l       .debug_str	00000000 
000128a3 l       .debug_str	00000000 
000128ac l       .debug_str	00000000 
0001290a l       .debug_str	00000000 
00012913 l       .debug_str	00000000 
00012976 l       .debug_str	00000000 
00012983 l       .debug_str	00000000 
000129e2 l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000129ec l       .debug_str	00000000 
00012a47 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00012a4d l       .debug_str	00000000 
00012aa7 l       .debug_str	00000000 
00012aac l       .debug_str	00000000 
00053d64 l       .debug_str	00000000 
00012b07 l       .debug_str	00000000 
00012b38 l       .debug_str	00000000 
00012b46 l       .debug_str	00000000 
00012b76 l       .debug_str	00000000 
00012b83 l       .debug_str	00000000 
00012bb8 l       .debug_str	00000000 
00012bfb l       .debug_str	00000000 
00012c0c l       .debug_str	00000000 
00012c49 l       .debug_str	00000000 
00012c54 l       .debug_str	00000000 
00012c8f l       .debug_str	00000000 
00012c99 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00012d0c l       .debug_str	00000000 
00012d18 l       .debug_str	00000000 
00012d49 l       .debug_str	00000000 
00012d57 l       .debug_str	00000000 
00012d87 l       .debug_str	00000000 
00012d94 l       .debug_str	00000000 
00012dc4 l       .debug_str	00000000 
00012dd1 l       .debug_str	00000000 
00012e24 l       .debug_str	00000000 
00012e5f l       .debug_str	00000000 
00012e77 l       .debug_str	00000000 
00012ebd l       .debug_str	00000000 
00012ee0 l       .debug_str	00000000 
00012f26 l       .debug_str	00000000 
00012f49 l       .debug_str	00000000 
00012fa5 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f39c l       .debug_str	00000000 
0000f3a7 l       .debug_str	00000000 
0000f3b1 l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00019956 l       .debug_str	00000000 
0000f3ba l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
000199a1 l       .debug_str	00000000 
0002630c l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0002cc5a l       .debug_str	00000000 
00027f07 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00027e30 l       .debug_str	00000000 
0005301e l       .debug_str	00000000 
000581eb l       .debug_str	00000000 
00012fb0 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000112b9 l       .debug_str	00000000 
00013753 l       .debug_str	00000000 
000112bc l       .debug_str	00000000 
00044e4b l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0005385d l       .debug_str	00000000 
00058176 l       .debug_str	00000000 
000262f1 l       .debug_str	00000000 
000112bf l       .debug_str	00000000 
00052dc2 l       .debug_str	00000000 
000119a7 l       .debug_str	00000000 
00054243 l       .debug_str	00000000 
00012fb9 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00012fc5 l       .debug_str	00000000 
00035abe l       .debug_str	00000000 
00013f21 l       .debug_str	00000000 
0003e9f9 l       .debug_str	00000000 
000540bb l       .debug_str	00000000 
000112da l       .debug_str	00000000 
000112e5 l       .debug_str	00000000 
000112f2 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00012fdf l       .debug_str	00000000 
00012b7d l       .debug_str	00000000 
00012fe6 l       .debug_str	00000000 
00012ff4 l       .debug_str	00000000 
00013001 l       .debug_str	00000000 
00013010 l       .debug_str	00000000 
00013020 l       .debug_str	00000000 
0001302d l       .debug_str	00000000 
00013039 l       .debug_str	00000000 
00013047 l       .debug_str	00000000 
00013056 l       .debug_str	00000000 
00013068 l       .debug_str	00000000 
0001307e l       .debug_str	00000000 
0002856b l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
00013099 l       .debug_str	00000000 
000130a7 l       .debug_str	00000000 
0000232f l       .debug_str	00000000 
00002335 l       .debug_str	00000000 
000130ac l       .debug_str	00000000 
000130b1 l       .debug_str	00000000 
000130be l       .debug_str	00000000 
000130cb l       .debug_str	00000000 
0002f5f5 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
000130d8 l       .debug_str	00000000 
000587b7 l       .debug_str	00000000 
000130e0 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
000130ed l       .debug_str	00000000 
000130f8 l       .debug_str	00000000 
00013104 l       .debug_str	00000000 
0001310f l       .debug_str	00000000 
0001311a l       .debug_str	00000000 
00013125 l       .debug_str	00000000 
00013130 l       .debug_str	00000000 
0001313b l       .debug_str	00000000 
00013146 l       .debug_str	00000000 
00013151 l       .debug_str	00000000 
0001315c l       .debug_str	00000000 
00013167 l       .debug_str	00000000 
00013172 l       .debug_str	00000000 
0001317e l       .debug_str	00000000 
0001318a l       .debug_str	00000000 
00013196 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00054ef4 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
000124c1 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a7d3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00057690 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000520d5 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
000584cb l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
000124cc l       .debug_str	00000000 
000124fa l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0001250b l       .debug_str	00000000 
0001253f l       .debug_str	00000000 
0001254d l       .debug_str	00000000 
0001257e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0003ac57 l       .debug_str	00000000 
00012596 l       .debug_str	00000000 
000125ae l       .debug_str	00000000 
000125e9 l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00012609 l       .debug_str	00000000 
0001261a l       .debug_str	00000000 
00012638 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000112c7 l       .debug_str	00000000 
000112d3 l       .debug_str	00000000 
000112de l       .debug_str	00000000 
000112eb l       .debug_str	00000000 
000112f9 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
00011308 l       .debug_str	00000000 
00012fd6 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
20000164 l     O .bss	00000050 _ZN3app5chip810CHIP8_TASK17hff5b4dd283ecf9fcE
0000fca4 l     F .text	000000a8 _ZN3app5chip812render_block17h6c8b81526965606bE
0001032e l     F .text	00000088 _ZN3app5chip812update_color17h39b5eb1e5de90ff7E
0000ff30 l     F .text	00000022 _ZN3app5chip813PixelIterator10get_window17h111d7a23399766c3E
0000fdf8 l     F .text	00000138 _ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE
0000fd4c l     F .text	000000ac _ZN3app5chip813PixelIterator3new17h975cb5db80e10243E
0000ff52 l     F .text	00000130 _ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE
200041b4 l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17hb69bb065c68bd165E
00010214 l     F .text	0000011a _ZN3app5chip813convert_color17h69ad441a1103d8f7E
0000f9a2 l     F .text	00000302 _ZN3app5chip813render_region17hc692a4d55cab74f0E
200001b4 l     O .bss	00004000 _ZN3app5chip816CHIP8_TASK_STACK17hdcbcc41748325ebbE
00024420 l     O .text	00000004 _ZN3app5chip823PHYSICAL_TO_VIRTUAL_MAP17h5b1a7b084f35e873E
00024c24 l     O .text	00000004 _ZN3app5chip823VIRTUAL_TO_PHYSICAL_MAP17h0c964d4301637332E
000103e4 l     F .text	000002f2 _ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E
000106d6 l     F .text	000003e2 _ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE
00010ab8 l     F .text	000000a4 _ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE
00010b5c l     F .text	00000098 _ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E
0000f3f6 l     F .text	00000010 _ZN3app5chip88Hardware3new17h53332fc09faf36beE
0000f340 l     F .text	000000b6 _ZN3app5chip89task_func17h20d1a4715d78a45aE
0001e240 l     O .text	00000021 str.0
0001e280 l     O .text	0000001c str.1
0001e360 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 3zmcssigt164od5g
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000201b2 l       .debug_str	00000000 
000201a6 l       .debug_str	00000000 
000581ec l       .debug_str	00000000 
000556a7 l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00057690 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
000520d5 l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
000584cb l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00004384 l       .debug_str	00000000 
000567f7 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00013535 l       .debug_str	00000000 
000551cb l       .debug_str	00000000 
000594be l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016f2f l       .debug_str	00000000 
000593c9 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00054434 l       .debug_str	00000000 
0001353b l       .debug_str	00000000 
00013562 l       .debug_str	00000000 
0001356a l       .debug_str	00000000 
00013571 l       .debug_str	00000000 
00013577 l       .debug_str	00000000 
0001357e l       .debug_str	00000000 
000551e1 l       .debug_str	00000000 
00013584 l       .debug_str	00000000 
00013593 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
000135a1 l       .debug_str	00000000 
000135a6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00054ef4 l       .debug_str	00000000 
000133e2 l       .debug_str	00000000 
000131a2 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
00052be2 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000238e2 l       .debug_str	00000000 
000131ae l       .debug_str	00000000 
000131e5 l       .debug_str	00000000 
0000e90e l       .debug_str	00000000 
000131f1 l       .debug_str	00000000 
00013228 l       .debug_str	00000000 
00013233 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0001323b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013242 l       .debug_str	00000000 
00013249 l       .debug_str	00000000 
00058569 l       .debug_str	00000000 
00013252 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00052da5 l       .debug_str	00000000 
0001325c l       .debug_str	00000000 
00013553 l       .debug_str	00000000 
00013266 l       .debug_str	00000000 
0001ad34 l       .debug_str	00000000 
0001329c l       .debug_str	00000000 
000132ca l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a7d3 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
00055a1a l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
000132d6 l       .debug_str	00000000 
0001330d l       .debug_str	00000000 
00052dc2 l       .debug_str	00000000 
0005809d l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
00058316 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00013316 l       .debug_str	00000000 
0001332a l       .debug_str	00000000 
0001335d l       .debug_str	00000000 
00013368 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001339e l       .debug_str	00000000 
000133dc l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
000133ef l       .debug_str	00000000 
00013432 l       .debug_str	00000000 
0001344a l       .debug_str	00000000 
0001348a l       .debug_str	00000000 
0001349f l       .debug_str	00000000 
000134d9 l       .debug_str	00000000 
000134e8 l       .debug_str	00000000 
00013527 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0005301e l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000198dd l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000316b5 l       .debug_str	00000000 
00054d9e l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
20004a64 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h59a4aa8a83a81f4aE
200049b8 l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h163add160b6b9aeeE
200049b8 l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h441481867ef0356fE
20004a4c l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17h8cf0280828a4287dE
200049b4 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17h4fe28d66de6f4ab2E
00010fea l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E
0001173c l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E
00010eb0 l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E
00010e64 l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E
20004a0a l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h040da56764e02a75E
20004a5c l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17hacfa42d26b44dc46E
00024d70 l     O .text	00000021 str.0
00024db0 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 4lznhndqn2vyhgat
00020065 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00051cfb l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00016a39 l       .debug_str	00000000 
000112ae l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
00013613 l       .debug_str	00000000 
0002c5c7 l       .debug_str	00000000 
000112b3 l       .debug_str	00000000 
00020151 l       .debug_str	00000000 
000112aa l       .debug_str	00000000 
00013619 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000135aa l       .debug_str	00000000 
0001a048 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0002014b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n402vs8u2uo93u9
00013671 l       .debug_str	00000000 
0000e8df l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00038f10 l       .debug_str	00000000 
0001ab5b l       .debug_str	00000000 
00035ac0 l       .debug_str	00000000 
0000e8e2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
000170fe l       .debug_str	00000000 
00054ef4 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012673 l       .debug_str	00000000 
0001267c l       .debug_str	00000000 
00012685 l       .debug_str	00000000 
00012690 l       .debug_str	00000000 
0001269b l       .debug_str	00000000 
000126a6 l       .debug_str	00000000 
000126b2 l       .debug_str	00000000 
000126bc l       .debug_str	00000000 
000126c9 l       .debug_str	00000000 
000126d7 l       .debug_str	00000000 
000126e6 l       .debug_str	00000000 
000126f3 l       .debug_str	00000000 
0002857c l       .debug_str	00000000 
0002856b l       .debug_str	00000000 
0002cc5a l       .debug_str	00000000 
00013625 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4op4c7h4jps44h2j
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000201b2 l       .debug_str	00000000 
000136a4 l       .debug_str	00000000 
000136e1 l       .debug_str	00000000 
000136f2 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000316b5 l       .debug_str	00000000 
00054d9e l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 50njrjlotjql8eh3
00013796 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00013724 l       .debug_str	00000000 
00013729 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013730 l       .debug_str	00000000 
00013738 l       .debug_str	00000000 
0000c144 l       .debug_str	00000000 
00013740 l       .debug_str	00000000 
00013748 l       .debug_str	00000000 
0001374f l       .debug_str	00000000 
000172f3 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00013756 l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000201e9 l       .debug_str	00000000 
000137ab l       .debug_str	00000000 
0001375b l       .debug_str	00000000 
0002bf6e l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53ibzm1eooc9qec2
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000137b7 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013810 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
000137bf l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 9p7wjmcx8ujsz0s
0001384c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001381d l       .debug_str	00000000 
00013843 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 mka4gzufox8dws5
0000eb86 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001388b l       .debug_str	00000000 
00013896 l       .debug_str	00000000 
000138d1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001390b l       .debug_str	00000000 
0001393b l       .debug_str	00000000 
0001394e l       .debug_str	00000000 
0000a666 l       .debug_str	00000000 
0001397e l       .debug_str	00000000 
0000a948 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00056986 l       .debug_str	00000000 
0002d97a l       .debug_str	00000000 
00013854 l       .debug_str	00000000 
00013859 l       .debug_str	00000000 
0001385f l       .debug_str	00000000 
000172f3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000eb4e l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
00013867 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nnlkt1k56qesyal
00013b35 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f82 l       .debug_str	00000000 
00013aa1 l       .debug_str	00000000 
00013b7e l       .debug_str	00000000 
00013bc8 l       .debug_str	00000000 
00013c1b l       .debug_str	00000000 
00013caa l       .debug_str	00000000 
00013d0d l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013d85 l       .debug_str	00000000 
00013df7 l       .debug_str	00000000 
00013eb5 l       .debug_str	00000000 
0005301e l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000119cc l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0003bd56 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013535 l       .debug_str	00000000 
000551cb l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
000594be l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016f2f l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00016e0a l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000238a1 l       .debug_str	00000000 
00057911 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
000119d4 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
000119de l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00013e1b l       .debug_str	00000000 
00013da9 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00013987 l       .debug_str	00000000 
00013a11 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 r34gpska6wbd31
00013104 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013eb9 l       .debug_str	00000000 
0002be88 l       .debug_str	00000000 
0000eb55 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00013f1c l       .debug_str	00000000 
00013f10 l       .debug_str	00000000 
00020065 l       .debug_str	00000000 
00013f23 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 rclpy9fcvorr8wf
00000c36 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
00020065 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00056986 l       .debug_str	00000000 
0002d97a l       .debug_str	00000000 
00013854 l       .debug_str	00000000 
00013859 l       .debug_str	00000000 
0001385f l       .debug_str	00000000 
000172f3 l       .debug_str	00000000 
00028289 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013f2e l       .debug_str	00000000 
00013f8a l       .debug_str	00000000 
00013eb6 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
00015625 l       .debug_str	00000000 
00014620 l       .debug_str	00000000 
0001464a l       .debug_str	00000000 
00014698 l       .debug_str	00000000 
000146a0 l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
000146ed l       .debug_str	00000000 
00014747 l       .debug_str	00000000 
00014755 l       .debug_str	00000000 
000147a8 l       .debug_str	00000000 
000147b0 l       .debug_str	00000000 
0001210a l       .debug_str	00000000 
00014805 l       .debug_str	00000000 
00014843 l       .debug_str	00000000 
0001485e l       .debug_str	00000000 
000148bd l       .debug_str	00000000 
00013eb6 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
00014922 l       .debug_str	00000000 
00014953 l       .debug_str	00000000 
0001495e l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00014990 l       .debug_str	00000000 
000149be l       .debug_str	00000000 
000149d0 l       .debug_str	00000000 
000149f6 l       .debug_str	00000000 
00014a02 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
00014a49 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0000c0c6 l       .debug_str	00000000 
00014a94 l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
00014a9a l       .debug_str	00000000 
00014b26 l       .debug_str	00000000 
00014b41 l       .debug_str	00000000 
00014b71 l       .debug_str	00000000 
00014ba6 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
00014bec l       .debug_str	00000000 
00014c22 l       .debug_str	00000000 
00014c3d l       .debug_str	00000000 
00014c77 l       .debug_str	00000000 
00014c96 l       .debug_str	00000000 
00014cd2 l       .debug_str	00000000 
00014cf8 l       .debug_str	00000000 
00014d04 l       .debug_str	00000000 
00014d2b l       .debug_str	00000000 
00014d38 l       .debug_str	00000000 
00014f45 l       .debug_str	00000000 
00014d86 l       .debug_str	00000000 
00014fb5 l       .debug_str	00000000 
00014dd7 l       .debug_str	00000000 
00014e29 l       .debug_str	00000000 
00014e35 l       .debug_str	00000000 
00014e80 l       .debug_str	00000000 
00014e92 l       .debug_str	00000000 
00014ed5 l       .debug_str	00000000 
00014ee0 l       .debug_str	00000000 
00014f3c l       .debug_str	00000000 
00014f4d l       .debug_str	00000000 
00014fac l       .debug_str	00000000 
00014fc0 l       .debug_str	00000000 
00015016 l       .debug_str	00000000 
000150ab l       .debug_str	00000000 
000150b7 l       .debug_str	00000000 
00015151 l       .debug_str	00000000 
00015162 l       .debug_str	00000000 
00015187 l       .debug_str	00000000 
00015230 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00052e17 l       .debug_str	00000000 
00015241 l       .debug_str	00000000 
000152c9 l       .debug_str	00000000 
00015280 l       .debug_str	00000000 
000152c4 l       .debug_str	00000000 
0001530e l       .debug_str	00000000 
0001534f l       .debug_str	00000000 
00015374 l       .debug_str	00000000 
000153c5 l       .debug_str	00000000 
0001540a l       .debug_str	00000000 
0001545d l       .debug_str	00000000 
000154be l       .debug_str	00000000 
00015525 l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
0001556c l       .debug_str	00000000 
000155b7 l       .debug_str	00000000 
000155c4 l       .debug_str	00000000 
0001569e l       .debug_str	00000000 
00015696 l       .debug_str	00000000 
000156a6 l       .debug_str	00000000 
00003d4f l       .debug_str	00000000 
000156c2 l       .debug_str	00000000 
00015737 l       .debug_str	00000000 
00015762 l       .debug_str	00000000 
000157db l       .debug_str	00000000 
000157e5 l       .debug_str	00000000 
0001580b l       .debug_str	00000000 
00015844 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0001585c l       .debug_str	00000000 
00015895 l       .debug_str	00000000 
000158cd l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
00015906 l       .debug_str	00000000 
00015941 l       .debug_str	00000000 
00015985 l       .debug_str	00000000 
000159cb l       .debug_str	00000000 
00015a07 l       .debug_str	00000000 
00015a2f l       .debug_str	00000000 
00015a6b l       .debug_str	00000000 
00015a8f l       .debug_str	00000000 
00015aec l       .debug_str	00000000 
00015b00 l       .debug_str	00000000 
00015b51 l       .debug_str	00000000 
00016a39 l       .debug_str	00000000 
00015b5d l       .debug_str	00000000 
00015bae l       .debug_str	00000000 
00015bc5 l       .debug_str	00000000 
00015c16 l       .debug_str	00000000 
00015c34 l       .debug_str	00000000 
00015c85 l       .debug_str	00000000 
00015c97 l       .debug_str	00000000 
00015cef l       .debug_str	00000000 
00015d05 l       .debug_str	00000000 
00015d68 l       .debug_str	00000000 
00015d93 l       .debug_str	00000000 
00015df6 l       .debug_str	00000000 
00015e6b l       .debug_str	00000000 
00015ecf l       .debug_str	00000000 
00015ed9 l       .debug_str	00000000 
00015f44 l       .debug_str	00000000 
00015f53 l       .debug_str	00000000 
00015fbf l       .debug_str	00000000 
00015ff1 l       .debug_str	00000000 
00016017 l       .debug_str	00000000 
00016086 l       .debug_str	00000000 
000160a6 l       .debug_str	00000000 
00016116 l       .debug_str	00000000 
00016137 l       .debug_str	00000000 
00011b34 l       .debug_str	00000000 
000161ab l       .debug_str	00000000 
0001622b l       .debug_str	00000000 
00016271 l       .debug_str	00000000 
0001629a l       .debug_str	00000000 
000162a1 l       .debug_str	00000000 
000162d9 l       .debug_str	00000000 
00016318 l       .debug_str	00000000 
0001631f l       .debug_str	00000000 
00016398 l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0001642f l       .debug_str	00000000 
000164ad l       .debug_str	00000000 
000164b7 l       .debug_str	00000000 
00016545 l       .debug_str	00000000 
000165f1 l       .debug_str	00000000 
00016638 l       .debug_str	00000000 
00016645 l       .debug_str	00000000 
00016692 l       .debug_str	00000000 
000166a5 l       .debug_str	00000000 
000166f7 l       .debug_str	00000000 
00016767 l       .debug_str	00000000 
00014363 l       .debug_str	00000000 
000167c7 l       .debug_str	00000000 
000167d8 l       .debug_str	00000000 
0001683d l       .debug_str	00000000 
0001686d l       .debug_str	00000000 
00016876 l       .debug_str	00000000 
000168b2 l       .debug_str	00000000 
000168c6 l       .debug_str	00000000 
00016901 l       .debug_str	00000000 
00016947 l       .debug_str	00000000 
00016965 l       .debug_str	00000000 
00016995 l       .debug_str	00000000 
0001699e l       .debug_str	00000000 
000169d8 l       .debug_str	00000000 
000169ea l       .debug_str	00000000 
00016a18 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00016a1f l       .debug_str	00000000 
00016a2b l       .debug_str	00000000 
00016a35 l       .debug_str	00000000 
00016a3f l       .debug_str	00000000 
00016a62 l       .debug_str	00000000 
0002be88 l       .debug_str	00000000 
00016ab7 l       .debug_str	00000000 
00016b17 l       .debug_str	00000000 
00016b23 l       .debug_str	00000000 
00016b73 l       .debug_str	00000000 
00016bd6 l       .debug_str	00000000 
00016c3d l       .debug_str	00000000 
00016cac l       .debug_str	00000000 
0005301e l       .debug_str	00000000 
00013eb5 l       .debug_str	00000000 
00016d3c l       .debug_str	00000000 
000540bb l       .debug_str	00000000 
000112e5 l       .debug_str	00000000 
0000c144 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00020065 l       .debug_str	00000000 
00052883 l       .debug_str	00000000 
00012114 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00016d63 l       .debug_str	00000000 
00052fff l       .debug_str	00000000 
00016d70 l       .debug_str	00000000 
00052da5 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00016d7b l       .debug_str	00000000 
000593c9 l       .debug_str	00000000 
00016dcf l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
00054d8c l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00016dda l       .debug_str	00000000 
00016e05 l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016e11 l       .debug_str	00000000 
00016e4b l       .debug_str	00000000 
00016e84 l       .debug_str	00000000 
00016e93 l       .debug_str	00000000 
00016ed6 l       .debug_str	00000000 
000542d0 l       .debug_str	00000000 
00030c5b l       .debug_str	00000000 
00055cf5 l       .debug_str	00000000 
00016f18 l       .debug_str	00000000 
00016f3c l       .debug_str	00000000 
000164b2 l       .debug_str	00000000 
00052854 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00016f5c l       .debug_str	00000000 
0003e9f9 l       .debug_str	00000000 
00016f97 l       .debug_str	00000000 
00016f9e l       .debug_str	00000000 
0002f5f5 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00016fdf l       .debug_str	00000000 
00017026 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
00020516 l       .debug_str	00000000 
00017000 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000175f0 l       .debug_str	00000000 
00017022 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
000130ed l       .debug_str	00000000 
000130f8 l       .debug_str	00000000 
00013104 l       .debug_str	00000000 
000130f1 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0000b84b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00013fec l       .debug_str	00000000 
00014044 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00014091 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0001409b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
000140a7 l       .debug_str	00000000 
00016deb l       .debug_str	00000000 
00016ddf l       .debug_str	00000000 
00016e0a l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056986 l       .debug_str	00000000 
0002d97a l       .debug_str	00000000 
00013854 l       .debug_str	00000000 
00013859 l       .debug_str	00000000 
0001385f l       .debug_str	00000000 
000172f3 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000119cc l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000140b8 l       .debug_str	00000000 
00013535 l       .debug_str	00000000 
000140be l       .debug_str	00000000 
00028289 l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000316b5 l       .debug_str	00000000 
00054d9e l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000201b2 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000140c9 l       .debug_str	00000000 
000140f2 l       .debug_str	00000000 
00014101 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00016e8d l       .debug_str	00000000 
0001411b l       .debug_str	00000000 
00014144 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00014179 l       .debug_str	00000000 
0001418d l       .debug_str	00000000 
000141a0 l       .debug_str	00000000 
000141ec l       .debug_str	00000000 
000141fa l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
0002d954 l       .debug_str	00000000 
00014202 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e7ce l       .debug_str	00000000 
000594be l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00014353 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000238a1 l       .debug_str	00000000 
00057911 l       .debug_str	00000000 
00016fb9 l       .debug_str	00000000 
0003bd56 l       .debug_str	00000000 
000119d4 l       .debug_str	00000000 
0001420c l       .debug_str	00000000 
000551cb l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016f2f l       .debug_str	00000000 
00054434 l       .debug_str	00000000 
000157fd l       .debug_str	00000000 
00016f6f l       .debug_str	00000000 
000119de l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00016cd0 l       .debug_str	00000000 
00016c61 l       .debug_str	00000000 
00014212 l       .debug_str	00000000 
00014218 l       .debug_str	00000000 
00014241 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
000157e6 l       .debug_str	00000000 
0001424d l       .debug_str	00000000 
000137b7 l       .debug_str	00000000 
0001427a l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
00014285 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
000142ae l       .debug_str	00000000 
000142b5 l       .debug_str	00000000 
000142df l       .debug_str	00000000 
00021236 l       .debug_str	00000000 
000142e3 l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
000142ec l       .debug_str	00000000 
0001432e l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00014341 l       .debug_str	00000000 
0005781b l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
000430a8 l       .debug_str	00000000 
0001435c l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
0001436b l       .debug_str	00000000 
00014375 l       .debug_str	00000000 
0001700c l       .debug_str	00000000 
000167d3 l       .debug_str	00000000 
0001437a l       .debug_str	00000000 
00014400 l       .debug_str	00000000 
0001440a l       .debug_str	00000000 
0001449c l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
000144e2 l       .debug_str	00000000 
00014576 l       .debug_str	00000000 
000145d8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
000179e8 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000316b5 l       .debug_str	00000000 
00054d9e l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000201b2 l       .debug_str	00000000 
0000eb4e l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00019956 l       .debug_str	00000000 
0000c380 l       .debug_str	00000000 
0000c3e5 l       .debug_str	00000000 
000170df l       .debug_str	00000000 
000170e8 l       .debug_str	00000000 
000170f0 l       .debug_str	00000000 
000170f9 l       .debug_str	00000000 
0002cc5a l       .debug_str	00000000 
00017106 l       .debug_str	00000000 
00017116 l       .debug_str	00000000 
00017127 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
000199a1 l       .debug_str	00000000 
0000f39c l       .debug_str	00000000 
00017138 l       .debug_str	00000000 
0000e9c6 l       .debug_str	00000000 
0000e9d4 l       .debug_str	00000000 
00019a07 l       .debug_str	00000000 
00017141 l       .debug_str	00000000 
00017147 l       .debug_str	00000000 
00017152 l       .debug_str	00000000 
0001715c l       .debug_str	00000000 
00017166 l       .debug_str	00000000 
0000b963 l       .debug_str	00000000 
000171ae l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
000171f6 l       .debug_str	00000000 
0001723e l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00017247 l       .debug_str	00000000 
00017270 l       .debug_str	00000000 
00017279 l       .debug_str	00000000 
000172d6 l       .debug_str	00000000 
00057911 l       .debug_str	00000000 
000172fc l       .debug_str	00000000 
00017324 l       .debug_str	00000000 
00017356 l       .debug_str	00000000 
00014953 l       .debug_str	00000000 
00017387 l       .debug_str	00000000 
000173e4 l       .debug_str	00000000 
00017441 l       .debug_str	00000000 
0001749e l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
000174d0 l       .debug_str	00000000 
00017515 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
00017521 l       .debug_str	00000000 
00051e1b l       .debug_str	00000000 
0001755d l       .debug_str	00000000 
0000eaff l       .debug_str	00000000 
000175a1 l       .debug_str	00000000 
000175e8 l       .debug_str	00000000 
000175f6 l       .debug_str	00000000 
0001763d l       .debug_str	00000000 
0001764b l       .debug_str	00000000 
0001768b l       .debug_str	00000000 
00017693 l       .debug_str	00000000 
0000eb86 l       .debug_str	00000000 
000176a0 l       .debug_str	00000000 
000176db l       .debug_str	00000000 
00017719 l       .debug_str	00000000 
00017749 l       .debug_str	00000000 
0001775d l       .debug_str	00000000 
0001778d l       .debug_str	00000000 
000177a1 l       .debug_str	00000000 
000177d1 l       .debug_str	00000000 
000177e5 l       .debug_str	00000000 
00037ad9 l       .debug_str	00000000 
00017830 l       .debug_str	00000000 
00017887 l       .debug_str	00000000 
00017896 l       .debug_str	00000000 
000178e1 l       .debug_str	00000000 
0000bfaf l       .debug_str	00000000 
00017958 l       .debug_str	00000000 
000179dd l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
00017a5f l       .debug_str	00000000 
00017ae4 l       .debug_str	00000000 
00017aef l       .debug_str	00000000 
00052854 l       .debug_str	00000000 
00017b78 l       .debug_str	00000000 
00020984 l       .debug_str	00000000 
00017bef l       .debug_str	00000000 
00054242 l       .debug_str	00000000 
00017c84 l       .debug_str	00000000 
00017d1b l       .debug_str	00000000 
00017db6 l       .debug_str	00000000 
00017e4b l       .debug_str	00000000 
00017ee2 l       .debug_str	00000000 
00017f7d l       .debug_str	00000000 
00018045 l       .debug_str	00000000 
00018050 l       .debug_str	00000000 
0001811c l       .debug_str	00000000 
000181ac l       .debug_str	00000000 
000181b8 l       .debug_str	00000000 
0001825e l       .debug_str	00000000 
0001826a l       .debug_str	00000000 
0001830e l       .debug_str	00000000 
000183b0 l       .debug_str	00000000 
00018454 l       .debug_str	00000000 
000184a8 l       .debug_str	00000000 
000184fd l       .debug_str	00000000 
00018552 l       .debug_str	00000000 
00014363 l       .debug_str	00000000 
000185d5 l       .debug_str	00000000 
00018659 l       .debug_str	00000000 
000186dd l       .debug_str	00000000 
0000282b l       .debug_str	00000000 
00018724 l       .debug_str	00000000 
00002831 l       .debug_str	00000000 
0001876b l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
000187b2 l       .debug_str	00000000 
00018830 l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0001894a l       .debug_str	00000000 
000189de l       .debug_str	00000000 
00018a2b l       .debug_str	00000000 
00018a37 l       .debug_str	00000000 
00018a9a l       .debug_str	00000000 
00018ae2 l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00018aea l       .debug_str	00000000 
00018b7e l       .debug_str	00000000 
00018be4 l       .debug_str	00000000 
00018c75 l       .debug_str	00000000 
00018d14 l       .debug_str	00000000 
00018da5 l       .debug_str	00000000 
00018e44 l       .debug_str	00000000 
00018ee6 l       .debug_str	00000000 
00018f77 l       .debug_str	00000000 
00019025 l       .debug_str	00000000 
000190d5 l       .debug_str	00000000 
00019189 l       .debug_str	00000000 
0001927c l       .debug_str	00000000 
00019287 l       .debug_str	00000000 
0001937e l       .debug_str	00000000 
0001942a l       .debug_str	00000000 
00019434 l       .debug_str	00000000 
000194a6 l       .debug_str	00000000 
0001951b l       .debug_str	00000000 
0001958e l       .debug_str	00000000 
000195ff l       .debug_str	00000000 
00019672 l       .debug_str	00000000 
000196e9 l       .debug_str	00000000 
0001975e l       .debug_str	00000000 
000197d3 l       .debug_str	00000000 
00019843 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
000198cf l       .debug_str	00000000 
00020065 l       .debug_str	00000000 
000198d5 l       .debug_str	00000000 
00014698 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00016e0a l       .debug_str	00000000 
00016d7b l       .debug_str	00000000 
000175f0 l       .debug_str	00000000 
000198d8 l       .debug_str	00000000 
000198e2 l       .debug_str	00000000 
000198ec l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
000198f6 l       .debug_str	00000000 
00019927 l       .debug_str	00000000 
00059936 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0001995c l       .debug_str	00000000 
00019966 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00019970 l       .debug_str	00000000 
00019979 l       .debug_str	00000000 
000199a8 l       .debug_str	00000000 
000199b5 l       .debug_str	00000000 
000199b8 l       .debug_str	00000000 
000199bb l       .debug_str	00000000 
000199be l       .debug_str	00000000 
000199c1 l       .debug_str	00000000 
000199c4 l       .debug_str	00000000 
000199c7 l       .debug_str	00000000 
00019a15 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
000130f1 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
00013104 l       .debug_str	00000000 
0001310f l       .debug_str	00000000 
00019a85 l       .debug_str	00000000 
00019a5f l       .debug_str	00000000 
00019ab8 l       .debug_str	00000000 
00019a93 l       .debug_str	00000000 
00019ae9 l       .debug_str	00000000 
00019ac5 l       .debug_str	00000000 
00019b1a l       .debug_str	00000000 
00019af5 l       .debug_str	00000000 
00019b4e l       .debug_str	00000000 
00019b27 l       .debug_str	00000000 
00019b83 l       .debug_str	00000000 
00019b5d l       .debug_str	00000000 
00019bb7 l       .debug_str	00000000 
00019b91 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001702a l       .debug_str	00000000 
0001708a l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000198dd l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
000198e7 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000198f1 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056986 l       .debug_str	00000000 
0002d97a l       .debug_str	00000000 
00013854 l       .debug_str	00000000 
00013859 l       .debug_str	00000000 
0001385f l       .debug_str	00000000 
000172f3 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0003086b l       .debug_str	00000000 
00028289 l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00011e5a l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
00015c85 l       .debug_str	00000000 
0001a092 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0000c0c6 l       .debug_str	00000000 
0001a0dd l       .debug_str	00000000 
00014c22 l       .debug_str	00000000 
0001a113 l       .debug_str	00000000 
00014c77 l       .debug_str	00000000 
0001a14d l       .debug_str	00000000 
0001a189 l       .debug_str	00000000 
00014cf8 l       .debug_str	00000000 
0001a1af l       .debug_str	00000000 
00014d2b l       .debug_str	00000000 
0001a1d6 l       .debug_str	00000000 
00014f45 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0001a224 l       .debug_str	00000000 
00014fb5 l       .debug_str	00000000 
0001a275 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0001a2c7 l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
0001a31c l       .debug_str	00000000 
000150ab l       .debug_str	00000000 
0001a3b1 l       .debug_str	00000000 
0001a3ff l       .debug_str	00000000 
000238a1 l       .debug_str	00000000 
0001a40e l       .debug_str	00000000 
0001a45f l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
0001a477 l       .debug_str	00000000 
0001a4cc l       .debug_str	00000000 
0001384c l       .debug_str	00000000 
0001a4e8 l       .debug_str	00000000 
0001a52e l       .debug_str	00000000 
0001a536 l       .debug_str	00000000 
00014ed5 l       .debug_str	00000000 
0001a57f l       .debug_str	00000000 
00054242 l       .debug_str	00000000 
0001a5ee l       .debug_str	00000000 
00015b51 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0001a63f l       .debug_str	00000000 
0001a690 l       .debug_str	00000000 
00015cef l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
0001427a l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
00014285 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000551cb l       .debug_str	00000000 
000594be l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016f2f l       .debug_str	00000000 
0001a6e8 l       .debug_str	00000000 
0001a74b l       .debug_str	00000000 
0001a775 l       .debug_str	00000000 
0001a7d8 l       .debug_str	00000000 
0001a7e1 l       .debug_str	00000000 
0001a84e l       .debug_str	00000000 
0001a860 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
0001a8d1 l       .debug_str	00000000 
00014363 l       .debug_str	00000000 
0001a931 l       .debug_str	00000000 
0001a964 l       .debug_str	00000000 
0001a9ce l       .debug_str	00000000 
0001aa01 l       .debug_str	00000000 
0001aa06 l       .debug_str	00000000 
0001aa6a l       .debug_str	00000000 
00056afb l       .debug_str	00000000 
0001aac5 l       .debug_str	00000000 
0001ab01 l       .debug_str	00000000 
0001ab0f l       .debug_str	00000000 
0001ab3e l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00016e0a l       .debug_str	00000000 
00052883 l       .debug_str	00000000 
00012114 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00052fff l       .debug_str	00000000 
00052da5 l       .debug_str	00000000 
00016d63 l       .debug_str	00000000 
00016d70 l       .debug_str	00000000 
00020065 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00016dcf l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
00054d8c l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016e11 l       .debug_str	00000000 
00016e4b l       .debug_str	00000000 
00016e84 l       .debug_str	00000000 
00016e93 l       .debug_str	00000000 
00016ed6 l       .debug_str	00000000 
000542d0 l       .debug_str	00000000 
00030c5b l       .debug_str	00000000 
00055cf5 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
00016f18 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
0002deed l       .debug_str	00000000 
00054434 l       .debug_str	00000000 
0001ab46 l       .debug_str	00000000 
0001ab5e l       .debug_str	00000000 
000593c9 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0001ab7b l       .debug_str	00000000 
00012b7d l       .debug_str	00000000 
0001ab94 l       .debug_str	00000000 
0001abb0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00019bc5 l       .debug_str	00000000 
00019c1a l       .debug_str	00000000 
00019c64 l       .debug_str	00000000 
00019c6b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001310c l       .debug_str	00000000 
00013117 l       .debug_str	00000000 
00013122 l       .debug_str	00000000 
0001312d l       .debug_str	00000000 
0001ab58 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00013535 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000140be l       .debug_str	00000000 
00056986 l       .debug_str	00000000 
00028289 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00019c73 l       .debug_str	00000000 
000140f2 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00014101 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00016e8d l       .debug_str	00000000 
00019c9c l       .debug_str	00000000 
00014144 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00014179 l       .debug_str	00000000 
0001418d l       .debug_str	00000000 
00019cc5 l       .debug_str	00000000 
000141ec l       .debug_str	00000000 
000141fa l       .debug_str	00000000 
00014202 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
000137b7 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00019d11 l       .debug_str	00000000 
0000afe7 l       .debug_str	00000000 
00019d3a l       .debug_str	00000000 
00019d44 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
000175f0 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
00052854 l       .debug_str	00000000 
00019d48 l       .debug_str	00000000 
00052d79 l       .debug_str	00000000 
0001abaa l       .debug_str	00000000 
0001ab74 l       .debug_str	00000000 
00019d52 l       .debug_str	00000000 
0001210a l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00019da7 l       .debug_str	00000000 
00019de5 l       .debug_str	00000000 
00019dfd l       .debug_str	00000000 
00014843 l       .debug_str	00000000 
00019e3b l       .debug_str	00000000 
00013eb6 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
00019ea0 l       .debug_str	00000000 
00019ed0 l       .debug_str	00000000 
00019ef7 l       .debug_str	00000000 
000149f6 l       .debug_str	00000000 
00019f1d l       .debug_str	00000000 
00019f62 l       .debug_str	00000000 
00019f6e l       .debug_str	00000000 
00011d9f l       .debug_str	00000000 
00019fb4 l       .debug_str	00000000 
00019ffa l       .debug_str	00000000 
0001a007 l       .debug_str	00000000 
0001a045 l       .debug_str	00000000 
0001a04b l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
00011f68 l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
00011fd2 l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
00011ffc l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
0001203a l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
0001210a l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
0001ac34 l       .debug_str	00000000 
0001ac32 l       .debug_str	00000000 
0001ac85 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001abb9 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000137b7 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001abd8 l       .debug_str	00000000 
0001ac29 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
0001cdf6 l       .debug_str	00000000 
00013740 l       .debug_str	00000000 
00013748 l       .debug_str	00000000 
0001374f l       .debug_str	00000000 
000112aa l       .debug_str	00000000 
00013619 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0001afad l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
0001afb1 l       .debug_str	00000000 
0001a52e l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
0002d954 l       .debug_str	00000000 
000594be l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00014353 l       .debug_str	00000000 
0001b02f l       .debug_str	00000000 
000551cb l       .debug_str	00000000 
0003e9f9 l       .debug_str	00000000 
0005829f l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0001b046 l       .debug_str	00000000 
00014241 l       .debug_str	00000000 
0001b06f l       .debug_str	00000000 
0001b0a1 l       .debug_str	00000000 
000140be l       .debug_str	00000000 
0003086b l       .debug_str	00000000 
00028289 l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
0000eb4e l       .debug_str	00000000 
0001b0b3 l       .debug_str	00000000 
0001b0dc l       .debug_str	00000000 
00014101 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00016e8d l       .debug_str	00000000 
0001b101 l       .debug_str	00000000 
00014144 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
0001b12a l       .debug_str	00000000 
0001b154 l       .debug_str	00000000 
0001b17d l       .debug_str	00000000 
0001b1c9 l       .debug_str	00000000 
000141fa l       .debug_str	00000000 
0001b1ed l       .debug_str	00000000 
00014202 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b3b4 l       .debug_str	00000000 
0000b3f5 l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00052e17 l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e7ce l       .debug_str	00000000 
00053b6a l       .debug_str	00000000 
00046bbd l       .debug_str	00000000 
000548cf l       .debug_str	00000000 
000561e8 l       .debug_str	00000000 
000238a1 l       .debug_str	00000000 
0001ff56 l       .debug_str	00000000 
0003bd56 l       .debug_str	00000000 
00031475 l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
00020266 l       .debug_str	00000000 
0002020e l       .debug_str	00000000 
0001b210 l       .debug_str	00000000 
0001b21a l       .debug_str	00000000 
000200ee l       .debug_str	00000000 
0002cc5a l       .debug_str	00000000 
0001fec6 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0001dbdd l       .debug_str	00000000 
00057911 l       .debug_str	00000000 
0002029f l       .debug_str	00000000 
00054d8c l       .debug_str	00000000 
0002027e l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00052854 l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
0001ff17 l       .debug_str	00000000 
00014212 l       .debug_str	00000000 
0001b223 l       .debug_str	00000000 
0001b24c l       .debug_str	00000000 
0001b25a l       .debug_str	00000000 
0001b267 l       .debug_str	00000000 
0001b27a l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
0001b293 l       .debug_str	00000000 
000137b7 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0001b2a8 l       .debug_str	00000000 
0001b324 l       .debug_str	00000000 
0001b2bb l       .debug_str	00000000 
0001b2fd l       .debug_str	00000000 
0001b312 l       .debug_str	00000000 
0005781b l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
000430a8 l       .debug_str	00000000 
0001b32f l       .debug_str	00000000 
0001b339 l       .debug_str	00000000 
0001b36b l       .debug_str	00000000 
0001b37f l       .debug_str	00000000 
0001b394 l       .debug_str	00000000 
0001f4c1 l       .debug_str	00000000 
0001f6ca l       .debug_str	00000000 
0001b39b l       .debug_str	00000000 
0001b3a6 l       .debug_str	00000000 
0001b42a l       .debug_str	00000000 
0001b458 l       .debug_str	00000000 
0001b4de l       .debug_str	00000000 
0003ac57 l       .debug_str	00000000 
0001b506 l       .debug_str	00000000 
0001b517 l       .debug_str	00000000 
0001b5a1 l       .debug_str	00000000 
0001b5bf l       .debug_str	00000000 
0001b64d l       .debug_str	00000000 
0001b674 l       .debug_str	00000000 
0001b703 l       .debug_str	00000000 
0001b74b l       .debug_str	00000000 
0001b77a l       .debug_str	00000000 
0001b7c2 l       .debug_str	00000000 
0001b7e1 l       .debug_str	00000000 
0001b829 l       .debug_str	00000000 
0001b839 l       .debug_str	00000000 
0001b881 l       .debug_str	00000000 
0001b892 l       .debug_str	00000000 
0001b8da l       .debug_str	00000000 
0001b8e2 l       .debug_str	00000000 
0001b92a l       .debug_str	00000000 
0001b934 l       .debug_str	00000000 
0001b97c l       .debug_str	00000000 
0001b996 l       .debug_str	00000000 
0001b9de l       .debug_str	00000000 
0001b9f7 l       .debug_str	00000000 
0001ba3f l       .debug_str	00000000 
0001ba52 l       .debug_str	00000000 
0001ba9a l       .debug_str	00000000 
0001baa3 l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
0001baeb l       .debug_str	00000000 
0001bb35 l       .debug_str	00000000 
0001bb80 l       .debug_str	00000000 
0001bbbe l       .debug_str	00000000 
0001bbef l       .debug_str	00000000 
00019de5 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0001bc2d l       .debug_str	00000000 
0001bc56 l       .debug_str	00000000 
0001bc61 l       .debug_str	00000000 
0001bc86 l       .debug_str	00000000 
0001bce5 l       .debug_str	00000000 
0002be88 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
00016e0a l       .debug_str	00000000 
0001bd4c l       .debug_str	00000000 
0001bd76 l       .debug_str	00000000 
0001bd9e l       .debug_str	00000000 
0001bdd6 l       .debug_str	00000000 
0001be07 l       .debug_str	00000000 
0001be11 l       .debug_str	00000000 
0001be6e l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
0001bea0 l       .debug_str	00000000 
0001bec6 l       .debug_str	00000000 
0001bee8 l       .debug_str	00000000 
0001bf0e l       .debug_str	00000000 
0001bf30 l       .debug_str	00000000 
0001bf59 l       .debug_str	00000000 
0001bf7e l       .debug_str	00000000 
00011e95 l       .debug_str	00000000 
0001bfc6 l       .debug_str	00000000 
0001bfcf l       .debug_str	00000000 
0001c059 l       .debug_str	00000000 
0001134a l       .debug_str	00000000 
0001c076 l       .debug_str	00000000 
0001c102 l       .debug_str	00000000 
0001c11f l       .debug_str	00000000 
0001c13f l       .debug_str	00000000 
0000eb86 l       .debug_str	00000000 
0001c146 l       .debug_str	00000000 
0001c181 l       .debug_str	00000000 
0001c1b3 l       .debug_str	00000000 
0001c1c4 l       .debug_str	00000000 
0001c1ff l       .debug_str	00000000 
0001c245 l       .debug_str	00000000 
000177d1 l       .debug_str	00000000 
0001c275 l       .debug_str	00000000 
0001c2a5 l       .debug_str	00000000 
0001c2c3 l       .debug_str	00000000 
0001c2f3 l       .debug_str	00000000 
0001c306 l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0001c34b l       .debug_str	00000000 
0001c37b l       .debug_str	00000000 
0001c397 l       .debug_str	00000000 
0001c3c7 l       .debug_str	00000000 
0001c3e5 l       .debug_str	00000000 
0001c415 l       .debug_str	00000000 
0001c430 l       .debug_str	00000000 
0001c460 l       .debug_str	00000000 
0001c484 l       .debug_str	00000000 
0001c4b4 l       .debug_str	00000000 
0001c4ee l       .debug_str	00000000 
0001c51e l       .debug_str	00000000 
0001c543 l       .debug_str	00000000 
0001c573 l       .debug_str	00000000 
0001c59d l       .debug_str	00000000 
0001c5d3 l       .debug_str	00000000 
0001c604 l       .debug_str	00000000 
0001c63e l       .debug_str	00000000 
0001c673 l       .debug_str	00000000 
0001c6af l       .debug_str	00000000 
0001c6d5 l       .debug_str	00000000 
0001c6f7 l       .debug_str	00000000 
0001c71e l       .debug_str	00000000 
0001c741 l       .debug_str	00000000 
00014f45 l       .debug_str	00000000 
0001c78f l       .debug_str	00000000 
00014fb5 l       .debug_str	00000000 
0001c7e0 l       .debug_str	00000000 
0001c831 l       .debug_str	00000000 
0001c83e l       .debug_str	00000000 
0001c890 l       .debug_str	00000000 
0001c89e l       .debug_str	00000000 
00014e80 l       .debug_str	00000000 
0001c8e9 l       .debug_str	00000000 
0001c934 l       .debug_str	00000000 
0001c948 l       .debug_str	00000000 
0001c98b l       .debug_str	00000000 
0001c998 l       .debug_str	00000000 
00014ed5 l       .debug_str	00000000 
0001c9db l       .debug_str	00000000 
00014f3c l       .debug_str	00000000 
0001ca37 l       .debug_str	00000000 
00014fac l       .debug_str	00000000 
0001ca96 l       .debug_str	00000000 
0001cae8 l       .debug_str	00000000 
0001cb3a l       .debug_str	00000000 
0001cb44 l       .debug_str	00000000 
0001cb99 l       .debug_str	00000000 
0001cbee l       .debug_str	00000000 
0001cc44 l       .debug_str	00000000 
00014e29 l       .debug_str	00000000 
0001cc9a l       .debug_str	00000000 
0001ccd6 l       .debug_str	00000000 
000175f0 l       .debug_str	00000000 
0001cd14 l       .debug_str	00000000 
0001cd4f l       .debug_str	00000000 
00016d70 l       .debug_str	00000000 
0001cd5a l       .debug_str	00000000 
0001cda1 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0001cdb7 l       .debug_str	00000000 
0001ce48 l       .debug_str	00000000 
0001ce5e l       .debug_str	00000000 
0001cea3 l       .debug_str	00000000 
0001cebd l       .debug_str	00000000 
0001cf20 l       .debug_str	00000000 
0001cf40 l       .debug_str	00000000 
0001cf7f l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0001cfe0 l       .debug_str	00000000 
0001d01f l       .debug_str	00000000 
000200e9 l       .debug_str	00000000 
0001d046 l       .debug_str	00000000 
0001d086 l       .debug_str	00000000 
0001d0b9 l       .debug_str	00000000 
0001d0d0 l       .debug_str	00000000 
0001d116 l       .debug_str	00000000 
0001d132 l       .debug_str	00000000 
0001d196 l       .debug_str	00000000 
0001d1b8 l       .debug_str	00000000 
0001d1fa l       .debug_str	00000000 
0001d21b l       .debug_str	00000000 
0001d25d l       .debug_str	00000000 
00055428 l       .debug_str	00000000 
0001d28d l       .debug_str	00000000 
0001d2d1 l       .debug_str	00000000 
0001d326 l       .debug_str	00000000 
0001d36a l       .debug_str	00000000 
0001d3c0 l       .debug_str	00000000 
0001d404 l       .debug_str	00000000 
0001d47c l       .debug_str	00000000 
0001d4c0 l       .debug_str	00000000 
0001d500 l       .debug_str	00000000 
0001d51b l       .debug_str	00000000 
0001d55c l       .debug_str	00000000 
0001d5b2 l       .debug_str	00000000 
0001d5f6 l       .debug_str	00000000 
0001d623 l       .debug_str	00000000 
0001d668 l       .debug_str	00000000 
0001d6b0 l       .debug_str	00000000 
0001d6c1 l       .debug_str	00000000 
0001d709 l       .debug_str	00000000 
0001d71a l       .debug_str	00000000 
0002bf6e l       .debug_str	00000000 
0001d755 l       .debug_str	00000000 
0001d791 l       .debug_str	00000000 
0001d797 l       .debug_str	00000000 
0001d7cd l       .debug_str	00000000 
0001d7e0 l       .debug_str	00000000 
0001d817 l       .debug_str	00000000 
0001d82b l       .debug_str	00000000 
0001d86d l       .debug_str	00000000 
0001d88c l       .debug_str	00000000 
0001d8d1 l       .debug_str	00000000 
0001d8ec l       .debug_str	00000000 
0001d951 l       .debug_str	00000000 
0001d9b8 l       .debug_str	00000000 
0001d9c3 l       .debug_str	00000000 
0001da09 l       .debug_str	00000000 
0001da4f l       .debug_str	00000000 
0001da59 l       .debug_str	00000000 
0001daa0 l       .debug_str	00000000 
0001daab l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
0001daf2 l       .debug_str	00000000 
0001db3b l       .debug_str	00000000 
0001db84 l       .debug_str	00000000 
0001dbbd l       .debug_str	00000000 
0001dbd8 l       .debug_str	00000000 
0001dbe7 l       .debug_str	00000000 
0001dc20 l       .debug_str	00000000 
0001dc45 l       .debug_str	00000000 
0001dc7e l       .debug_str	00000000 
0001dcb7 l       .debug_str	00000000 
0001dcdd l       .debug_str	00000000 
0001dd16 l       .debug_str	00000000 
0001dd54 l       .debug_str	00000000 
0001dd8e l       .debug_str	00000000 
0001dd9a l       .debug_str	00000000 
0001ddd6 l       .debug_str	00000000 
0001dde9 l       .debug_str	00000000 
0001de25 l       .debug_str	00000000 
0001de3e l       .debug_str	00000000 
0001de7b l       .debug_str	00000000 
0001de8c l       .debug_str	00000000 
00015b51 l       .debug_str	00000000 
0001dedd l       .debug_str	00000000 
0001ac29 l       .debug_str	00000000 
0001df2e l       .debug_str	00000000 
0001df89 l       .debug_str	00000000 
0001dfec l       .debug_str	00000000 
0001e008 l       .debug_str	00000000 
0001e068 l       .debug_str	00000000 
0001e0c8 l       .debug_str	00000000 
0001e12c l       .debug_str	00000000 
0001e147 l       .debug_str	00000000 
0001e1ab l       .debug_str	00000000 
0001e1b6 l       .debug_str	00000000 
0001e220 l       .debug_str	00000000 
0001e22f l       .debug_str	00000000 
0001e29e l       .debug_str	00000000 
0001e2b6 l       .debug_str	00000000 
0001e326 l       .debug_str	00000000 
0001e33f l       .debug_str	00000000 
0001e3aa l       .debug_str	00000000 
0001e3bf l       .debug_str	00000000 
0001e42f l       .debug_str	00000000 
0001e444 l       .debug_str	00000000 
0001e4b4 l       .debug_str	00000000 
0001e4c6 l       .debug_str	00000000 
000038f9 l       .debug_str	00000000 
0001e537 l       .debug_str	00000000 
0001e5a8 l       .debug_str	00000000 
0001e5be l       .debug_str	00000000 
0001e5d0 l       .debug_str	00000000 
0001e63c l       .debug_str	00000000 
0001e64e l       .debug_str	00000000 
0001e6ba l       .debug_str	00000000 
0001e6c9 l       .debug_str	00000000 
0001e731 l       .debug_str	00000000 
0001e73b l       .debug_str	00000000 
0001e7af l       .debug_str	00000000 
00000eee l       .debug_str	00000000 
0001e7ba l       .debug_str	00000000 
0001e832 l       .debug_str	00000000 
0001e84b l       .debug_str	00000000 
0001e8c3 l       .debug_str	00000000 
0001e959 l       .debug_str	00000000 
0001e975 l       .debug_str	00000000 
0001ea0b l       .debug_str	00000000 
0001eaa1 l       .debug_str	00000000 
0001eb37 l       .debug_str	00000000 
000150ab l       .debug_str	00000000 
0001ebac l       .debug_str	00000000 
0001ec20 l       .debug_str	00000000 
0001ec99 l       .debug_str	00000000 
0001ed18 l       .debug_str	00000000 
0001ed29 l       .debug_str	00000000 
0001eda9 l       .debug_str	00000000 
0001ee0b l       .debug_str	00000000 
00020357 l       .debug_str	00000000 
0001ee5c l       .debug_str	00000000 
0001ee7e l       .debug_str	00000000 
0001eeab l       .debug_str	00000000 
0001eeda l       .debug_str	00000000 
0001eefc l       .debug_str	00000000 
0001ef23 l       .debug_str	00000000 
0001ef4c l       .debug_str	00000000 
0001ef7e l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0001efce l       .debug_str	00000000 
0001f014 l       .debug_str	00000000 
0001f027 l       .debug_str	00000000 
0001f07b l       .debug_str	00000000 
0001f0ed l       .debug_str	00000000 
0001f15f l       .debug_str	00000000 
0001f1d1 l       .debug_str	00000000 
0001f220 l       .debug_str	00000000 
0001f24e l       .debug_str	00000000 
0001f259 l       .debug_str	00000000 
0001f2b3 l       .debug_str	00000000 
0001f32b l       .debug_str	00000000 
0001f3a3 l       .debug_str	00000000 
0001f3f8 l       .debug_str	00000000 
0001f42d l       .debug_str	00000000 
0000b824 l       .debug_str	00000000 
0001f458 l       .debug_str	00000000 
00037ad9 l       .debug_str	00000000 
0001f487 l       .debug_str	00000000 
0001f4b7 l       .debug_str	00000000 
0001f4cf l       .debug_str	00000000 
0001f500 l       .debug_str	00000000 
0001f532 l       .debug_str	00000000 
0001f571 l       .debug_str	00000000 
0001f584 l       .debug_str	00000000 
0001f5bc l       .debug_str	00000000 
0001f5c8 l       .debug_str	00000000 
0001f5f8 l       .debug_str	00000000 
0001f629 l       .debug_str	00000000 
0001f62f l       .debug_str	00000000 
0001f65c l       .debug_str	00000000 
0001f68d l       .debug_str	00000000 
0001f6c0 l       .debug_str	00000000 
0001f6da l       .debug_str	00000000 
0001f70e l       .debug_str	00000000 
0001f741 l       .debug_str	00000000 
00051db3 l       .debug_str	00000000 
0001f78e l       .debug_str	00000000 
0001f7d7 l       .debug_str	00000000 
00051d96 l       .debug_str	00000000 
0001f822 l       .debug_str	00000000 
0001f84a l       .debug_str	00000000 
0001f890 l       .debug_str	00000000 
0001f896 l       .debug_str	00000000 
0001f8c4 l       .debug_str	00000000 
0001f8e0 l       .debug_str	00000000 
0001f90d l       .debug_str	00000000 
0001f91d l       .debug_str	00000000 
0001f975 l       .debug_str	00000000 
0001f9ce l       .debug_str	00000000 
0001f9f1 l       .debug_str	00000000 
0001fa20 l       .debug_str	00000000 
0001fa32 l       .debug_str	00000000 
0001fa65 l       .debug_str	00000000 
0001fa7b l       .debug_str	00000000 
0001fac8 l       .debug_str	00000000 
0001fb1b l       .debug_str	00000000 
0001fb4e l       .debug_str	00000000 
0001fb5e l       .debug_str	00000000 
0001fbb4 l       .debug_str	00000000 
0001fc0e l       .debug_str	00000000 
0001fc5c l       .debug_str	00000000 
0001fcae l       .debug_str	00000000 
0001fd03 l       .debug_str	00000000 
0001fd53 l       .debug_str	00000000 
0001fda7 l       .debug_str	00000000 
0001fdfe l       .debug_str	00000000 
0001fe54 l       .debug_str	00000000 
0001feab l       .debug_str	00000000 
0001fef7 l       .debug_str	00000000 
0001ff3f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0001ff74 l       .debug_str	00000000 
0001ffa0 l       .debug_str	00000000 
0001ffbc l       .debug_str	00000000 
0001ffc9 l       .debug_str	00000000 
0001ffd7 l       .debug_str	00000000 
0001ffdc l       .debug_str	00000000 
0001ffe3 l       .debug_str	00000000 
0001fffa l       .debug_str	00000000 
00020010 l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00020020 l       .debug_str	00000000 
00052fff l       .debug_str	00000000 
00020043 l       .debug_str	00000000 
00052da5 l       .debug_str	00000000 
00020065 l       .debug_str	00000000 
000198d5 l       .debug_str	00000000 
00020064 l       .debug_str	00000000 
00014698 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0002006b l       .debug_str	00000000 
000200be l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
000200df l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
000200e4 l       .debug_str	00000000 
000198ec l       .debug_str	00000000 
000200f8 l       .debug_str	00000000 
0002010c l       .debug_str	00000000 
00020115 l       .debug_str	00000000 
00020120 l       .debug_str	00000000 
00020132 l       .debug_str	00000000 
00020146 l       .debug_str	00000000 
00020157 l       .debug_str	00000000 
00020171 l       .debug_str	00000000 
000201a1 l       .debug_str	00000000 
000201bc l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016e11 l       .debug_str	00000000 
00016e4b l       .debug_str	00000000 
00016e84 l       .debug_str	00000000 
00016e93 l       .debug_str	00000000 
00016ed6 l       .debug_str	00000000 
000542d0 l       .debug_str	00000000 
00030c5b l       .debug_str	00000000 
00055cf5 l       .debug_str	00000000 
000201dc l       .debug_str	00000000 
000201fb l       .debug_str	00000000 
00058225 l       .debug_str	00000000 
0002021e l       .debug_str	00000000 
0005301e l       .debug_str	00000000 
00013796 l       .debug_str	00000000 
00020224 l       .debug_str	00000000 
0000c144 l       .debug_str	00000000 
0002022c l       .debug_str	00000000 
00053bd7 l       .debug_str	00000000 
000593c9 l       .debug_str	00000000 
00016d63 l       .debug_str	00000000 
00054646 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
000130f1 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0000b84b l       .debug_str	00000000 
00020234 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
0000b8f7 l       .debug_str	00000000 
0000b902 l       .debug_str	00000000 
00052883 l       .debug_str	00000000 
00020253 l       .debug_str	00000000 
00020272 l       .debug_str	00000000 
00020284 l       .debug_str	00000000 
00017691 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00059936 l       .debug_str	00000000 
000544f1 l       .debug_str	00000000 
0002f5f5 l       .debug_str	00000000 
00013613 l       .debug_str	00000000 
0001af9e l       .debug_str	00000000 
000202f6 l       .debug_str	00000000 
000581ec l       .debug_str	00000000 
0002030a l       .debug_str	00000000 
00020320 l       .debug_str	00000000 
00020330 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
00020342 l       .debug_str	00000000 
0002033c l       .debug_str	00000000 
00020351 l       .debug_str	00000000 
00020368 l       .debug_str	00000000 
00020367 l       .debug_str	00000000 
000130ed l       .debug_str	00000000 
000130f8 l       .debug_str	00000000 
00013104 l       .debug_str	00000000 
0001310f l       .debug_str	00000000 
0001311a l       .debug_str	00000000 
00013125 l       .debug_str	00000000 
00013130 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001ad61 l       .debug_str	00000000 
0001adb3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00051cfb l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0001adfa l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001ae01 l       .debug_str	00000000 
0001c130 l       .debug_str	00000000 
0002015c l       .debug_str	00000000 
000198f1 l       .debug_str	00000000 
0001ae0a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0001f891 l       .debug_str	00000000 
0001ae11 l       .debug_str	00000000 
0001ae34 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00013724 l       .debug_str	00000000 
00013729 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00013756 l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000201e9 l       .debug_str	00000000 
000137ab l       .debug_str	00000000 
0001ae3a l       .debug_str	00000000 
0001ae5c l       .debug_str	00000000 
0001ae71 l       .debug_str	00000000 
0001aea3 l       .debug_str	00000000 
0001aeb3 l       .debug_str	00000000 
0001aee0 l       .debug_str	00000000 
0001aef1 l       .debug_str	00000000 
0001af1f l       .debug_str	00000000 
0001af31 l       .debug_str	00000000 
00020102 l       .debug_str	00000000 
00020335 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0001af60 l       .debug_str	00000000 
0002011a l       .debug_str	00000000 
00001d84 l       .debug_str	00000000 
00016a39 l       .debug_str	00000000 
000112ae l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0002c5c7 l       .debug_str	00000000 
000112b3 l       .debug_str	00000000 
00020151 l       .debug_str	00000000 
0001af87 l       .debug_str	00000000 
0002013d l       .debug_str	00000000 
00020137 l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
000316b5 l       .debug_str	00000000 
00054d9e l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000201b2 l       .debug_str	00000000 
000201a6 l       .debug_str	00000000 
00020185 l       .debug_str	00000000 
00020176 l       .debug_str	00000000 
000201d0 l       .debug_str	00000000 
000201c1 l       .debug_str	00000000 
0001af8e l       .debug_str	00000000 
0001af97 l       .debug_str	00000000 
00052a02 l       .debug_str	00000000 
00051ccf l       .debug_str	00000000 
0002012b l       .debug_str	00000000 
00020125 l       .debug_str	00000000 
0002014b l       .debug_str	00000000 
00020111 l       .debug_str	00000000 
00056986 l       .debug_str	00000000 
0002d97a l       .debug_str	00000000 
00013854 l       .debug_str	00000000 
00013859 l       .debug_str	00000000 
0001385f l       .debug_str	00000000 
000172f3 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
0002bc7a l       .debug_str	00000000 
00056ece l       .debug_str	00000000 
0001afa3 l       .debug_str	00000000 
00013730 l       .debug_str	00000000 
00013738 l       .debug_str	00000000 
000127b8 l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
0001278e l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
000126b4 l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
00012750 l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
000127e2 l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
000127f2 l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
00012772 l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
0001277e l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
000129a6 l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
0001280c l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
00012834 l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
20004a68 l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000f0 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
000126aa l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
00025164 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
00012802 l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
000126a0 l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
00012436 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
0001246e l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
00012484 l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
00012494 l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
00012538 l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
000129cc l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
00012a76 l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
000129b8 l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
00012604 l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
000209d3 l       .debug_str	00000000 
000142ae l       .debug_str	00000000 
00019970 l       .debug_str	00000000 
0002041f l       .debug_str	00000000 
00020454 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00057911 l       .debug_str	00000000 
00020460 l       .debug_str	00000000 
00020498 l       .debug_str	00000000 
000204b2 l       .debug_str	00000000 
000204bc l       .debug_str	00000000 
000204c4 l       .debug_str	00000000 
000204cc l       .debug_str	00000000 
00020508 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0002051b l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00020523 l       .debug_str	00000000 
0002055b l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00020563 l       .debug_str	00000000 
0002059b l       .debug_str	00000000 
000205a3 l       .debug_str	00000000 
000205db l       .debug_str	00000000 
000205f5 l       .debug_str	00000000 
000205fe l       .debug_str	00000000 
00020636 l       .debug_str	00000000 
0002063f l       .debug_str	00000000 
00020677 l       .debug_str	00000000 
00014400 l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
000206ff l       .debug_str	00000000 
00020747 l       .debug_str	00000000 
00020752 l       .debug_str	00000000 
00019de5 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00020790 l       .debug_str	00000000 
0001bc56 l       .debug_str	00000000 
000207b9 l       .debug_str	00000000 
000207de l       .debug_str	00000000 
00016e0a l       .debug_str	00000000 
0001bd4c l       .debug_str	00000000 
0002083d l       .debug_str	00000000 
0001bd9e l       .debug_str	00000000 
00020865 l       .debug_str	00000000 
00020896 l       .debug_str	00000000 
000208a2 l       .debug_str	00000000 
00020901 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00020933 l       .debug_str	00000000 
0002097b l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
00020988 l       .debug_str	00000000 
000209e3 l       .debug_str	00000000 
000209f1 l       .debug_str	00000000 
00011e95 l       .debug_str	00000000 
0001c1b3 l       .debug_str	00000000 
0000eb86 l       .debug_str	00000000 
00020a39 l       .debug_str	00000000 
0001c1ff l       .debug_str	00000000 
00020a74 l       .debug_str	00000000 
00020aab l       .debug_str	00000000 
00020ac4 l       .debug_str	00000000 
00020ad0 l       .debug_str	00000000 
00014f45 l       .debug_str	00000000 
00020b22 l       .debug_str	00000000 
00014fb5 l       .debug_str	00000000 
00020b77 l       .debug_str	00000000 
00020ab1 l       .debug_str	00000000 
00020baa l       .debug_str	00000000 
0001a52e l       .debug_str	00000000 
00020bf0 l       .debug_str	00000000 
00014ed5 l       .debug_str	00000000 
00013535 l       .debug_str	00000000 
000551cb l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00020c39 l       .debug_str	00000000 
000238a1 l       .debug_str	00000000 
00020c4a l       .debug_str	00000000 
00020cbf l       .debug_str	00000000 
00020cec l       .debug_str	00000000 
0001a84e l       .debug_str	00000000 
00020d78 l       .debug_str	00000000 
00020dfb l       .debug_str	00000000 
00020e2a l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00020e77 l       .debug_str	00000000 
00020ea7 l       .debug_str	00000000 
00020ef5 l       .debug_str	00000000 
00020f25 l       .debug_str	00000000 
00020f73 l       .debug_str	00000000 
00020fa3 l       .debug_str	00000000 
00020ff1 l       .debug_str	00000000 
00021022 l       .debug_str	00000000 
00021071 l       .debug_str	00000000 
000210a2 l       .debug_str	00000000 
000210f1 l       .debug_str	00000000 
00021121 l       .debug_str	00000000 
00021129 l       .debug_str	00000000 
00021159 l       .debug_str	00000000 
00021161 l       .debug_str	00000000 
0002119f l       .debug_str	00000000 
000211b4 l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000ad69 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00052fff l       .debug_str	00000000 
00052da5 l       .debug_str	00000000 
00020065 l       .debug_str	00000000 
000198d5 l       .debug_str	00000000 
00014698 l       .debug_str	00000000 
000211e0 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
00054434 l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
00052854 l       .debug_str	00000000 
000594be l       .debug_str	00000000 
00016f2f l       .debug_str	00000000 
00021236 l       .debug_str	00000000 
000142e3 l       .debug_str	00000000 
00021235 l       .debug_str	00000000 
00021239 l       .debug_str	00000000 
00021243 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
00054d8c l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
00021249 l       .debug_str	00000000 
0002124d l       .debug_str	00000000 
00020516 l       .debug_str	00000000 
00021252 l       .debug_str	00000000 
00021251 l       .debug_str	00000000 
00021255 l       .debug_str	00000000 
00021259 l       .debug_str	00000000 
0002125e l       .debug_str	00000000 
0002125d l       .debug_str	00000000 
00021261 l       .debug_str	00000000 
00021265 l       .debug_str	00000000 
00052883 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00020380 l       .debug_str	00000000 
000203d5 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056986 l       .debug_str	00000000 
0002d97a l       .debug_str	00000000 
00013854 l       .debug_str	00000000 
00013859 l       .debug_str	00000000 
0001385f l       .debug_str	00000000 
000172f3 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000140be l       .debug_str	00000000 
0003086b l       .debug_str	00000000 
00028289 l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000316b5 l       .debug_str	00000000 
00054d9e l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000201b2 l       .debug_str	00000000 
0000eb4e l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00014202 l       .debug_str	00000000 
00012af6 l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00021269 l       .debug_str	00000000 
00054242 l       .debug_str	00000000 
000212ee l       .debug_str	00000000 
0002135b l       .debug_str	00000000 
000213cd l       .debug_str	00000000 
0005301e l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0002142b l       .debug_str	00000000 
00046bf9 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
00020065 l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000198f1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00056986 l       .debug_str	00000000 
00028289 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00021448 l       .debug_str	00000000 
0002be88 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
000214a9 l       .debug_str	00000000 
00013eb6 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
000298d5 l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
00021b0d l       .debug_str	00000000 
00021b78 l       .debug_str	00000000 
00021bbe l       .debug_str	00000000 
00021c30 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00021e75 l       .debug_str	00000000 
00021ee7 l       .debug_str	00000000 
00021f31 l       .debug_str	00000000 
00021f7b l       .debug_str	00000000 
000221c8 l       .debug_str	00000000 
00022204 l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
000039b7 l       .debug_str	00000000 
00022249 l       .debug_str	00000000 
00022286 l       .debug_str	00000000 
000222cc l       .debug_str	00000000 
00022309 l       .debug_str	00000000 
0002254a l       .debug_str	00000000 
0002258a l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000227ce l       .debug_str	00000000 
00022a22 l       .debug_str	00000000 
00022a7b l       .debug_str	00000000 
00022ccb l       .debug_str	00000000 
00020065 l       .debug_str	00000000 
00011a0a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00058316 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
00054434 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002db0e l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052e17 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
00029949 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000227e2 l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
00022a36 l       .debug_str	00000000 
0002150c l       .debug_str	00000000 
00021574 l       .debug_str	00000000 
000217b4 l       .debug_str	00000000 
0002181c l       .debug_str	00000000 
00021861 l       .debug_str	00000000 
000218cc l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
00022d71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000137b7 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00022d20 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000198dd l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0000bca1 l       .debug_str	00000000 
000198f1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00022d93 l       .debug_str	00000000 
00022def l       .debug_str	00000000 
00022e4c l       .debug_str	00000000 
00022ea9 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
0002011a l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00020065 l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
00023073 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00056986 l       .debug_str	00000000 
00028289 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002d97a l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
00052e17 l       .debug_str	00000000 
00022f06 l       .debug_str	00000000 
00022f77 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00022f83 l       .debug_str	00000000 
000157db l       .debug_str	00000000 
00022ff4 l       .debug_str	00000000 
00023065 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
000233fe l       .debug_str	00000000 
00023469 l       .debug_str	00000000 
00023531 l       .debug_str	00000000 
0002349f l       .debug_str	00000000 
000234d6 l       .debug_str	00000000 
000234e9 l       .debug_str	00000000 
00023528 l       .debug_str	00000000 
00023543 l       .debug_str	00000000 
0002357b l       .debug_str	00000000 
0002358f l       .debug_str	00000000 
000235bb l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000198dd l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000581ec l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000316b5 l       .debug_str	00000000 
00054d9e l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000201b2 l       .debug_str	00000000 
000201a6 l       .debug_str	00000000 
000198f1 l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
0005301e l       .debug_str	00000000 
000581eb l       .debug_str	00000000 
000235c4 l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
00017691 l       .debug_str	00000000 
000235c8 l       .debug_str	00000000 
00057719 l       .debug_str	00000000 
00004ac5 l       .debug_str	00000000 
00004acd l       .debug_str	00000000 
00004ad6 l       .debug_str	00000000 
00004ae4 l       .debug_str	00000000 
00004aeb l       .debug_str	00000000 
0000476b l       .debug_str	00000000 
0000477b l       .debug_str	00000000 
00004784 l       .debug_str	00000000 
00004792 l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047ac l       .debug_str	00000000 
000049ba l       .debug_str	00000000 
000047b8 l       .debug_str	00000000 
000047c7 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047e8 l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
00004801 l       .debug_str	00000000 
00004834 l       .debug_str	00000000 
0000481b l       .debug_str	00000000 
00004840 l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00004872 l       .debug_str	00000000 
00004859 l       .debug_str	00000000 
000048ac l       .debug_str	00000000 
0000489f l       .debug_str	00000000 
00004886 l       .debug_str	00000000 
00004af2 l       .debug_str	00000000 
00004b51 l       .debug_str	00000000 
00004afa l       .debug_str	00000000 
00004b15 l       .debug_str	00000000 
00004b49 l       .debug_str	00000000 
00004b30 l       .debug_str	00000000 
000567f7 l       .debug_str	00000000 
00044e44 l       .debug_str	00000000 
0002416f l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
00054009 l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
000235d0 l       .debug_str	00000000 
0005784d l       .debug_str	00000000 
00055b8d l       .debug_str	00000000 
00053a7f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000557b0 l       .debug_str	00000000 
0000c124 l       .debug_str	00000000 
00052dc2 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c135 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c13f l       .debug_str	00000000 
0000c14a l       .debug_str	00000000 
0000c154 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000238b9 l       .debug_str	00000000 
0002307a l       .debug_str	00000000 
000230ab l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00058316 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
00054434 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002db0e l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052e17 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
000298d5 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00022a36 l       .debug_str	00000000 
000230b7 l       .debug_str	00000000 
000230e7 l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
00029949 l       .debug_str	00000000 
000227e2 l       .debug_str	00000000 
000230f4 l       .debug_str	00000000 
00023125 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a7d3 l       .debug_str	00000000 
00005772 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00057690 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000520d5 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
000584cb l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000056f6 l       .debug_str	00000000 
00047778 l       .debug_str	00000000 
0000577b l       .debug_str	00000000 
00005786 l       .debug_str	00000000 
0002312d l       .debug_str	00000000 
00023158 l       .debug_str	00000000 
00023169 l       .debug_str	00000000 
0002319e l       .debug_str	00000000 
00004cf6 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
000049b1 l       .debug_str	00000000 
000049b9 l       .debug_str	00000000 
0000487d l       .debug_str	00000000 
000049c3 l       .debug_str	00000000 
00004c65 l       .debug_str	00000000 
00004c4c l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004c47 l       .debug_str	00000000 
00004c74 l       .debug_str	00000000 
00004cfe l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
00055a1a l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00004d04 l       .debug_str	00000000 
000231ad l       .debug_str	00000000 
000231e0 l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
000231f0 l       .debug_str	00000000 
00023224 l       .debug_str	00000000 
0002322d l       .debug_str	00000000 
00023259 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00023268 l       .debug_str	00000000 
0002329b l       .debug_str	00000000 
000232a8 l       .debug_str	00000000 
000232b4 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000232e5 l       .debug_str	00000000 
0002331a l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
0002332b l       .debug_str	00000000 
0002335d l       .debug_str	00000000 
0002336b l       .debug_str	00000000 
000233a9 l       .debug_str	00000000 
000233c3 l       .debug_str	00000000 
00023415 l       .debug_str	00000000 
00023451 l       .debug_str	00000000 
20004a70 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20004a78 l     O .bss	00002004 _ZN6mynewt3spi12PENDING_DATA17hf749c482f1fd6e90E
20006f04 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
000138aa l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
20006a8c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
20006b04 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
20006aa4 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20006a84 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
00013bc2 l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
00013dac l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
000143ca l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
00014094 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
20006a7c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
20006ab4 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
000144f2 l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
00025360 l     O .text	0000001c str.0
000253c0 l     O .text	00000021 str.1
00025420 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
000316b5 l       .debug_str	00000000 
00054d9e l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000201b2 l       .debug_str	00000000 
000201a6 l       .debug_str	00000000 
000238ca l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
000238d0 l       .debug_str	00000000 
0000e8fc l       .debug_str	00000000 
00055b8d l       .debug_str	00000000 
00053a7f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
0002389f l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00052be2 l       .debug_str	00000000 
000238e2 l       .debug_str	00000000 
0000e90e l       .debug_str	00000000 
000235db l       .debug_str	00000000 
00037ad9 l       .debug_str	00000000 
00023606 l       .debug_str	00000000 
00058225 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00023632 l       .debug_str	00000000 
00059521 l       .debug_str	00000000 
000236a3 l       .debug_str	00000000 
000236cf l       .debug_str	00000000 
000236fc l       .debug_str	00000000 
00023768 l       .debug_str	00000000 
00023770 l       .debug_str	00000000 
000237dd l       .debug_str	00000000 
000237e6 l       .debug_str	00000000 
00023813 l       .debug_str	00000000 
000235bb l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0002388d l       .debug_str	00000000 
000238bd l       .debug_str	00000000 
00052dc2 l       .debug_str	00000000 
0000c135 l       .debug_str	00000000 
0000c13f l       .debug_str	00000000 
0000c14a l       .debug_str	00000000 
0000c154 l       .debug_str	00000000 
000238b9 l       .debug_str	00000000 
000238a3 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000198dd l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00025620 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
00004afa l       .debug_str	00000000 
00004b15 l       .debug_str	00000000 
00004b49 l       .debug_str	00000000 
000238e7 l       .debug_str	00000000 
00023939 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000141fa l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a7d3 l       .debug_str	00000000 
00004ac5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00004acd l       .debug_str	00000000 
00004ad6 l       .debug_str	00000000 
00004ae4 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00004aeb l       .debug_str	00000000 
0000476b l       .debug_str	00000000 
0000477b l       .debug_str	00000000 
00004784 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00004792 l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047ac l       .debug_str	00000000 
000049ba l       .debug_str	00000000 
000047b8 l       .debug_str	00000000 
000047c7 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047e8 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00004801 l       .debug_str	00000000 
00004834 l       .debug_str	00000000 
0000481b l       .debug_str	00000000 
00004840 l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00004872 l       .debug_str	00000000 
00004859 l       .debug_str	00000000 
0000487d l       .debug_str	00000000 
000048ac l       .debug_str	00000000 
0000489f l       .debug_str	00000000 
00004886 l       .debug_str	00000000 
00004af2 l       .debug_str	00000000 
00004b30 l       .debug_str	00000000 
00004b51 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
00024c89 l       .debug_str	00000000 
00023eaa l       .debug_str	00000000 
00014ed5 l       .debug_str	00000000 
00023eed l       .debug_str	00000000 
00014f3c l       .debug_str	00000000 
00023f49 l       .debug_str	00000000 
00014fac l       .debug_str	00000000 
00023fa8 l       .debug_str	00000000 
00014f45 l       .debug_str	00000000 
00023ffa l       .debug_str	00000000 
0002404f l       .debug_str	00000000 
000240a5 l       .debug_str	00000000 
000240d3 l       .debug_str	00000000 
000240df l       .debug_str	00000000 
00024111 l       .debug_str	00000000 
00024138 l       .debug_str	00000000 
0002416a l       .debug_str	00000000 
0002417a l       .debug_str	00000000 
000241af l       .debug_str	00000000 
000241c2 l       .debug_str	00000000 
000241f8 l       .debug_str	00000000 
0002420c l       .debug_str	00000000 
00024256 l       .debug_str	00000000 
00024267 l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
000242a3 l       .debug_str	00000000 
00052101 l       .debug_str	00000000 
00057911 l       .debug_str	00000000 
000242e1 l       .debug_str	00000000 
0002431f l       .debug_str	00000000 
00014375 l       .debug_str	00000000 
0002432c l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
0002433a l       .debug_str	00000000 
00024362 l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
000243a1 l       .debug_str	00000000 
000243cf l       .debug_str	00000000 
000243d6 l       .debug_str	00000000 
00024479 l       .debug_str	00000000 
00024487 l       .debug_str	00000000 
00038fe2 l       .debug_str	00000000 
0002451f l       .debug_str	00000000 
000245b9 l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00024671 l       .debug_str	00000000 
0002be88 l       .debug_str	00000000 
00013535 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00020c39 l       .debug_str	00000000 
000246d4 l       .debug_str	00000000 
00024746 l       .debug_str	00000000 
00024770 l       .debug_str	00000000 
000247ae l       .debug_str	00000000 
000247c1 l       .debug_str	00000000 
0002480c l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00024815 l       .debug_str	00000000 
00024857 l       .debug_str	00000000 
00025b18 l       .debug_str	00000000 
00024891 l       .debug_str	00000000 
000248d6 l       .debug_str	00000000 
000248f2 l       .debug_str	00000000 
00024935 l       .debug_str	00000000 
0002494b l       .debug_str	00000000 
000249b0 l       .debug_str	00000000 
00024a15 l       .debug_str	00000000 
00024a50 l       .debug_str	00000000 
00024a5d l       .debug_str	00000000 
00020ab1 l       .debug_str	00000000 
00024a90 l       .debug_str	00000000 
0000aa4d l       .debug_str	00000000 
00024ad6 l       .debug_str	00000000 
0001a52e l       .debug_str	00000000 
00024b1c l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
00024b63 l       .debug_str	00000000 
00024bac l       .debug_str	00000000 
000157db l       .debug_str	00000000 
0002011a l       .debug_str	00000000 
00016e0a l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00024c25 l       .debug_str	00000000 
00024c6a l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00024cc2 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
00024cda l       .debug_str	00000000 
00024d15 l       .debug_str	00000000 
00024d39 l       .debug_str	00000000 
00024d5f l       .debug_str	00000000 
00024d9a l       .debug_str	00000000 
00024dbd l       .debug_str	00000000 
00024de2 l       .debug_str	00000000 
00024e1f l       .debug_str	00000000 
00024e36 l       .debug_str	00000000 
00024e73 l       .debug_str	00000000 
00024e8a l       .debug_str	00000000 
00015c16 l       .debug_str	00000000 
00024edb l       .debug_str	00000000 
000179dd l       .debug_str	00000000 
00024f36 l       .debug_str	00000000 
00024f99 l       .debug_str	00000000 
00024fdb l       .debug_str	00000000 
00015ecf l       .debug_str	00000000 
0002503f l       .debug_str	00000000 
0001a84e l       .debug_str	00000000 
000250ac l       .debug_str	00000000 
0000ad61 l       .debug_str	00000000 
0002510e l       .debug_str	00000000 
0002511c l       .debug_str	00000000 
00025187 l       .debug_str	00000000 
000251a1 l       .debug_str	00000000 
000251b7 l       .debug_str	00000000 
00025222 l       .debug_str	00000000 
00025232 l       .debug_str	00000000 
0002529e l       .debug_str	00000000 
000252b0 l       .debug_str	00000000 
0002531c l       .debug_str	00000000 
0002532d l       .debug_str	00000000 
00025394 l       .debug_str	00000000 
000253cc l       .debug_str	00000000 
00025436 l       .debug_str	00000000 
000254be l       .debug_str	00000000 
00011b34 l       .debug_str	00000000 
00025532 l       .debug_str	00000000 
000255b4 l       .debug_str	00000000 
000255cb l       .debug_str	00000000 
00025609 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
0002c0fa l       .debug_str	00000000 
0002d97a l       .debug_str	00000000 
0002561c l       .debug_str	00000000 
0002562b l       .debug_str	00000000 
00025669 l       .debug_str	00000000 
0002567c l       .debug_str	00000000 
000256a8 l       .debug_str	00000000 
000256b1 l       .debug_str	00000000 
000256dd l       .debug_str	00000000 
000256e6 l       .debug_str	00000000 
00025746 l       .debug_str	00000000 
0002bb3b l       .debug_str	00000000 
00025797 l       .debug_str	00000000 
000257e8 l       .debug_str	00000000 
00025845 l       .debug_str	00000000 
000258a3 l       .debug_str	00000000 
00025b88 l       .debug_str	00000000 
000258f4 l       .debug_str	00000000 
0002591d l       .debug_str	00000000 
00025980 l       .debug_str	00000000 
00025991 l       .debug_str	00000000 
0002599e l       .debug_str	00000000 
000259b3 l       .debug_str	00000000 
00025a04 l       .debug_str	00000000 
00025a2d l       .debug_str	00000000 
00025a90 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00020065 l       .debug_str	00000000 
00023073 l       .debug_str	00000000 
000593c9 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
00025aad l       .debug_str	00000000 
00054434 l       .debug_str	00000000 
00031475 l       .debug_str	00000000 
00020516 l       .debug_str	00000000 
000175f0 l       .debug_str	00000000 
0005301e l       .debug_str	00000000 
00051dd5 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00058225 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00025ace l       .debug_str	00000000 
000024e8 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00025ad2 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00023b3f l       .debug_str	00000000 
00025ae4 l       .debug_str	00000000 
00025ae9 l       .debug_str	00000000 
00025aee l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016dcf l       .debug_str	00000000 
00025b13 l       .debug_str	00000000 
00025b4f l       .debug_str	00000000 
00054d8c l       .debug_str	00000000 
00035ea1 l       .debug_str	00000000 
00025b65 l       .debug_str	00000000 
00025b6e l       .debug_str	00000000 
0002f4a6 l       .debug_str	00000000 
00052e71 l       .debug_str	00000000 
000450b8 l       .debug_str	00000000 
00025b77 l       .debug_str	00000000 
00025b7b l       .debug_str	00000000 
0002f76c l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
000130f1 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
000130ed l       .debug_str	00000000 
000130f8 l       .debug_str	00000000 
00013104 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00025b9d l       .debug_str	00000000 
00025b98 l       .debug_str	00000000 
00052bf2 l       .debug_str	00000000 
00025ba1 l       .debug_str	00000000 
00031243 l       .debug_str	00000000 
00025baa l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00033cfd l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0002395e l       .debug_str	00000000 
000239b8 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002bda5 l       .debug_str	00000000 
00023a07 l       .debug_str	00000000 
00025abf l       .debug_str	00000000 
00025ab2 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
00023a0f l       .debug_str	00000000 
00023a1c l       .debug_str	00000000 
00023a25 l       .debug_str	00000000 
00051cef l       .debug_str	00000000 
0002c171 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000140b8 l       .debug_str	00000000 
00056986 l       .debug_str	00000000 
00028289 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000141fa l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d954 l       .debug_str	00000000 
00014202 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b3b4 l       .debug_str	00000000 
0000b3f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
000594be l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00014353 l       .debug_str	00000000 
00025b5f l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00052854 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000137b7 l       .debug_str	00000000 
00054e1a l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e7ce l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00052da5 l       .debug_str	00000000 
000238a1 l       .debug_str	00000000 
00025b33 l       .debug_str	00000000 
00014212 l       .debug_str	00000000 
00023a2f l       .debug_str	00000000 
00023a6d l       .debug_str	00000000 
0001b02f l       .debug_str	00000000 
000551cb l       .debug_str	00000000 
0003e9f9 l       .debug_str	00000000 
0005829f l       .debug_str	00000000 
00023a7c l       .debug_str	00000000 
00014241 l       .debug_str	00000000 
00023aa5 l       .debug_str	00000000 
0001b0a1 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001b25a l       .debug_str	00000000 
000201d0 l       .debug_str	00000000 
0000e939 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00023ad7 l       .debug_str	00000000 
00025afd l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00023ae5 l       .debug_str	00000000 
0001432e l       .debug_str	00000000 
00014341 l       .debug_str	00000000 
0005781b l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
000430a8 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00051e8a l       .debug_str	00000000 
00023b27 l       .debug_str	00000000 
00023b2b l       .debug_str	00000000 
00023b36 l       .debug_str	00000000 
00023b45 l       .debug_str	00000000 
00023b8d l       .debug_str	00000000 
00023bad l       .debug_str	00000000 
00031f8f l       .debug_str	00000000 
00025ae5 l       .debug_str	00000000 
00023bf8 l       .debug_str	00000000 
00025aea l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
00052e17 l       .debug_str	00000000 
00023c43 l       .debug_str	00000000 
00023065 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
00023cb4 l       .debug_str	00000000 
000149be l       .debug_str	00000000 
00023ce2 l       .debug_str	00000000 
00011e95 l       .debug_str	00000000 
00023d2a l       .debug_str	00000000 
00023d5a l       .debug_str	00000000 
00023d85 l       .debug_str	00000000 
00020aab l       .debug_str	00000000 
00020ac4 l       .debug_str	00000000 
00023dbc l       .debug_str	00000000 
00014fb5 l       .debug_str	00000000 
00023e0d l       .debug_str	00000000 
00014e29 l       .debug_str	00000000 
00023e5f l       .debug_str	00000000 
00014e80 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0000eb55 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00025bb6 l       .debug_str	00000000 
00025bdf l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00025c70 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00025bec l       .debug_str	00000000 
00014241 l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
00057023 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00025c15 l       .debug_str	00000000 
00025c6a l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
00025fe5 l       .debug_str	00000000 
00025e4d l       .debug_str	00000000 
00025e89 l       .debug_str	00000000 
00025ea5 l       .debug_str	00000000 
00025ee1 l       .debug_str	00000000 
00025f17 l       .debug_str	00000000 
00025f53 l       .debug_str	00000000 
00025f5e l       .debug_str	00000000 
00025f9a l       .debug_str	00000000 
00025fa8 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
0002601c l       .debug_str	00000000 
00026059 l       .debug_str	00000000 
00026068 l       .debug_str	00000000 
000260a5 l       .debug_str	00000000 
000260e8 l       .debug_str	00000000 
00026125 l       .debug_str	00000000 
0000eb5a l       .debug_str	00000000 
0002615c l       .debug_str	00000000 
0002619a l       .debug_str	00000000 
000261d1 l       .debug_str	00000000 
00026210 l       .debug_str	00000000 
00026249 l       .debug_str	00000000 
000262ad l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000262e2 l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000262fd l       .debug_str	00000000 
00026342 l       .debug_str	00000000 
0002635f l       .debug_str	00000000 
00014363 l       .debug_str	00000000 
00019979 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
000199a1 l       .debug_str	00000000 
00025c74 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0002636e l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
000262f1 l       .debug_str	00000000 
0000f5cb l       .debug_str	00000000 
00056c66 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00025aea l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0001082c l       .debug_str	00000000 
00025cae l       .debug_str	00000000 
0002630c l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
00026351 l       .debug_str	00000000 
0000eb55 l       .debug_str	00000000 
00025cca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000e9bd l       .debug_str	00000000 
0000e9c6 l       .debug_str	00000000 
0000e9d4 l       .debug_str	00000000 
00019a07 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0000e9ec l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000f39c l       .debug_str	00000000 
0000f3a7 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00057911 l       .debug_str	00000000 
00025cd7 l       .debug_str	00000000 
00025d10 l       .debug_str	00000000 
00025dab l       .debug_str	00000000 
00025e05 l       .debug_str	00000000 
00025e41 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000201b2 l       .debug_str	00000000 
000263b0 l       .debug_str	00000000 
000263fb l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00020111 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000316b5 l       .debug_str	00000000 
00054d9e l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
0001d0cb l       .debug_str	00000000 
0002706a l       .debug_str	00000000 
00027077 l       .debug_str	00000000 
000270b7 l       .debug_str	00000000 
000271b4 l       .debug_str	00000000 
000271f4 l       .debug_str	00000000 
00027203 l       .debug_str	00000000 
00027243 l       .debug_str	00000000 
00027262 l       .debug_str	00000000 
000272a2 l       .debug_str	00000000 
000272be l       .debug_str	00000000 
000272fe l       .debug_str	00000000 
0002730c l       .debug_str	00000000 
0002734c l       .debug_str	00000000 
00057911 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c5f5 l       .debug_str	00000000 
0001dbdd l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
0002735a l       .debug_str	00000000 
0002739b l       .debug_str	00000000 
0000c336 l       .debug_str	00000000 
000273d0 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000273da l       .debug_str	00000000 
0002741b l       .debug_str	00000000 
000200ee l       .debug_str	00000000 
00027468 l       .debug_str	00000000 
000274a9 l       .debug_str	00000000 
000274de l       .debug_str	00000000 
000274e9 l       .debug_str	00000000 
0002752a l       .debug_str	00000000 
00027577 l       .debug_str	00000000 
000275b8 l       .debug_str	00000000 
000275ed l       .debug_str	00000000 
0002765c l       .debug_str	00000000 
0002775d l       .debug_str	00000000 
0001e4b4 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000277cc l       .debug_str	00000000 
000277eb l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00017691 l       .debug_str	00000000 
00052c5d l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
0000f5cb l       .debug_str	00000000 
00056c66 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00025aea l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0001082c l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
00016a39 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
000277db l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
00058cc8 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00058316 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
00054434 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
0002642d l       .debug_str	00000000 
0002649a l       .debug_str	00000000 
00026530 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002db0e l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052e17 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
0000f853 l       .debug_str	00000000 
0000f8ca l       .debug_str	00000000 
0000f94e l       .debug_str	00000000 
0000f9c9 l       .debug_str	00000000 
0000fa67 l       .debug_str	00000000 
0000fb12 l       .debug_str	00000000 
000265ef l       .debug_str	00000000 
000266b4 l       .debug_str	00000000 
00026786 l       .debug_str	00000000 
0002684f l       .debug_str	00000000 
00026939 l       .debug_str	00000000 
00026a40 l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
00026b46 l       .debug_str	00000000 
00026c44 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00026d45 l       .debug_str	00000000 
00026e25 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00026f23 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
0000c32d l       .debug_str	00000000 
00026f43 l       .debug_str	00000000 
00026f4a l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00026f52 l       .debug_str	00000000 
00026f66 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00026f98 l       .debug_str	00000000 
00026fac l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00026fde l       .debug_str	00000000 
0002701d l       .debug_str	00000000 
0002702b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
00027d82 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000e9bd l       .debug_str	00000000 
0000e9c6 l       .debug_str	00000000 
0000e9d4 l       .debug_str	00000000 
00019a07 l       .debug_str	00000000 
0000e9ec l       .debug_str	00000000 
00025dab l       .debug_str	00000000 
00027bfe l       .debug_str	00000000 
00027cbb l       .debug_str	00000000 
00027cf6 l       .debug_str	00000000 
00027d4f l       .debug_str	00000000 
000262ad l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00027e05 l       .debug_str	00000000 
00027e69 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
00027e6c l       .debug_str	00000000 
000130a1 l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00025c74 l       .debug_str	00000000 
0002636e l       .debug_str	00000000 
00052000 l       .debug_str	00000000 
00059920 l       .debug_str	00000000 
00027edc l       .debug_str	00000000 
00027edf l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00013104 l       .debug_str	00000000 
000198f6 l       .debug_str	00000000 
0001310f l       .debug_str	00000000 
0001311a l       .debug_str	00000000 
00027eec l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f39c l       .debug_str	00000000 
0000f3a7 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
0000f3b1 l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00019956 l       .debug_str	00000000 
0000f3ba l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
000199a1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0002630c l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002cc5a l       .debug_str	00000000 
00027f07 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00027e30 l       .debug_str	00000000 
00027809 l       .debug_str	00000000 
000278a6 l       .debug_str	00000000 
000278df l       .debug_str	00000000 
0002797e l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00027e9b l       .debug_str	00000000 
000279b7 l       .debug_str	00000000 
00027a54 l       .debug_str	00000000 
00027a88 l       .debug_str	00000000 
00027b2b l       .debug_str	00000000 
00027bca l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
00027eec l       .debug_str	00000000 
00027f07 l       .debug_str	00000000 
00027fab l       .debug_str	00000000 
00028020 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013104 l       .debug_str	00000000 
000262fd l       .debug_str	00000000 
0001310f l       .debug_str	00000000 
0001311a l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
000199a1 l       .debug_str	00000000 
0002cc5a l       .debug_str	00000000 
00027f3c l       .debug_str	00000000 
000262ad l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0002630c l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
0000bca2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
00010e9d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
00028057 l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2m8s7rk6gjg5sdjo
0002821a l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e88f l       .debug_str	00000000 
0000e8df l       .debug_str	00000000 
00038f10 l       .debug_str	00000000 
0001ab5b l       .debug_str	00000000 
00035ac0 l       .debug_str	00000000 
0000e8e2 l       .debug_str	00000000 
0005301e l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000593c9 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
000557af l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
0002389f l       .debug_str	00000000 
0000c1be l       .debug_str	00000000 
00052be2 l       .debug_str	00000000 
000238e2 l       .debug_str	00000000 
0005868a l       .debug_str	00000000 
0000c1c2 l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00057ac6 l       .debug_str	00000000 
0000c1cf l       .debug_str	00000000 
0005711e l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00054ef4 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012673 l       .debug_str	00000000 
0001267c l       .debug_str	00000000 
00012685 l       .debug_str	00000000 
00012690 l       .debug_str	00000000 
0001269b l       .debug_str	00000000 
000126a6 l       .debug_str	00000000 
000126b2 l       .debug_str	00000000 
000126bc l       .debug_str	00000000 
000126c9 l       .debug_str	00000000 
000126d7 l       .debug_str	00000000 
000126e6 l       .debug_str	00000000 
000126f3 l       .debug_str	00000000 
0002857c l       .debug_str	00000000 
0002856b l       .debug_str	00000000 
0002cc5a l       .debug_str	00000000 
0002811c l       .debug_str	00000000 
0002816a l       .debug_str	00000000 
000281ca l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2ug841oumney39pv
000544f1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000137b7 l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
0002827c l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002828f l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
0002831b l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00028324 l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00028334 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vf5zed9a93zfp29
0000171d l       .debug_str	00000000 
00020065 l       .debug_str	00000000 
000198d5 l       .debug_str	00000000 
00014698 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00056986 l       .debug_str	00000000 
0002d97a l       .debug_str	00000000 
00013854 l       .debug_str	00000000 
00013859 l       .debug_str	00000000 
0001385f l       .debug_str	00000000 
000172f3 l       .debug_str	00000000 
0003086b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0002835b l       .debug_str	00000000 
00028384 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
00013867 l       .debug_str	00000000 
00057911 l       .debug_str	00000000 
0002838c l       .debug_str	00000000 
000283b4 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ng3xpvqtoio1chp
0002deed l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000137b7 l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000283e3 l       .debug_str	00000000 
00054242 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3qt6984rqt15w0xm
000104e5 l       .debug_str	00000000 
00028546 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00012d0c l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00028566 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
00054ef4 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012673 l       .debug_str	00000000 
0001267c l       .debug_str	00000000 
00012685 l       .debug_str	00000000 
00012690 l       .debug_str	00000000 
0001269b l       .debug_str	00000000 
000126a6 l       .debug_str	00000000 
000126b2 l       .debug_str	00000000 
000126bc l       .debug_str	00000000 
000126c9 l       .debug_str	00000000 
000126d7 l       .debug_str	00000000 
000126e6 l       .debug_str	00000000 
000126f3 l       .debug_str	00000000 
0002857c l       .debug_str	00000000 
0002856b l       .debug_str	00000000 
000238a1 l       .debug_str	00000000 
00028452 l       .debug_str	00000000 
000284b5 l       .debug_str	00000000 
000284df l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5cymlse6j4664rei
00052da5 l       .debug_str	00000000 
000286b3 l       .debug_str	00000000 
000286cf l       .debug_str	00000000 
000286f5 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00055cf5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002858a l       .debug_str	00000000 
00014241 l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
000285b3 l       .debug_str	00000000 
000285c4 l       .debug_str	00000000 
000285d4 l       .debug_str	00000000 
00028620 l       .debug_str	00000000 
0002862b l       .debug_str	00000000 
00028661 l       .debug_str	00000000 
00028679 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
00028c02 l       .debug_str	00000000 
000367e9 l       .debug_str	00000000 
000039b7 l       .debug_str	00000000 
00028f56 l       .debug_str	00000000 
00022286 l       .debug_str	00000000 
00028fd5 l       .debug_str	00000000 
00022309 l       .debug_str	00000000 
00029054 l       .debug_str	00000000 
000290d6 l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
0002931a l       .debug_str	00000000 
0002939c l       .debug_str	00000000 
000293e5 l       .debug_str	00000000 
00029467 l       .debug_str	00000000 
000294b0 l       .debug_str	00000000 
0002258a l       .debug_str	00000000 
00029532 l       .debug_str	00000000 
000295b4 l       .debug_str	00000000 
000297f8 l       .debug_str	00000000 
0002987a l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000298c3 l       .debug_str	00000000 
00029937 l       .debug_str	00000000 
00011a0a l       .debug_str	00000000 
00020065 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002d954 l       .debug_str	00000000 
000594be l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00014353 l       .debug_str	00000000 
000593c9 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
00029ba6 l       .debug_str	00000000 
00029bab l       .debug_str	00000000 
00029e16 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00058316 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
00054434 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002db0e l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052e17 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
000298d5 l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
00029949 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000286fe l       .debug_str	00000000 
00028785 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
000287d2 l       .debug_str	00000000 
00028859 l       .debug_str	00000000 
00028aa1 l       .debug_str	00000000 
00028b2a l       .debug_str	00000000 
00028b79 l       .debug_str	00000000 
00028e4c l       .debug_str	00000000 
00021f7b l       .debug_str	00000000 
00028ed8 l       .debug_str	00000000 
00022204 l       .debug_str	00000000 
00025770 l     O .text	0000001c str.0
000257b0 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000141fa l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000593c9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00029e86 l       .debug_str	00000000 
0000b32d l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00014212 l       .debug_str	00000000 
00028289 l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00029ed6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
0002a19b l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
0002a213 l       .debug_str	00000000 
0002a43e l       .debug_str	00000000 
0002a4b6 l       .debug_str	00000000 
0002a645 l       .debug_str	00000000 
0002a6bd l       .debug_str	00000000 
0002a825 l       .debug_str	00000000 
0002a89d l       .debug_str	00000000 
0002a91b l       .debug_str	00000000 
0002a993 l       .debug_str	00000000 
0002aa86 l       .debug_str	00000000 
0002aafe l       .debug_str	00000000 
0002acdb l       .debug_str	00000000 
0002ad53 l       .debug_str	00000000 
0002ae1f l       .debug_str	00000000 
0002ae97 l       .debug_str	00000000 
0002aec7 l       .debug_str	00000000 
0002af3f l       .debug_str	00000000 
0002afe4 l       .debug_str	00000000 
0002b05c l       .debug_str	00000000 
0002b19d l       .debug_str	00000000 
0002b215 l       .debug_str	00000000 
0002b3cb l       .debug_str	00000000 
0002b443 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002db0e l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00052e17 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00029f3a l       .debug_str	00000000 
00029fb2 l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
0002a009 l       .debug_str	00000000 
0002a081 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3wi7uqccuys0591w
00016e11 l       .debug_str	00000000 
00016e4b l       .debug_str	00000000 
00016e84 l       .debug_str	00000000 
00016e93 l       .debug_str	00000000 
00016ed6 l       .debug_str	00000000 
000542d0 l       .debug_str	00000000 
00030c5b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00014101 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00016e8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002b647 l       .debug_str	00000000 
00014144 l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
0002b670 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
00025c6a l       .debug_str	00000000 
0002b6ac l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002b70c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
0002db0e l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
0002b7d8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002b76c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
0002deed l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
000137b7 l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002b7e1 l       .debug_str	00000000 
00054242 l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
0002b852 l       .debug_str	00000000 
0002b865 l       .debug_str	00000000 
00014096 l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
0002b896 l       .debug_str	00000000 
0002b89e l       .debug_str	00000000 
0002b8a7 l       .debug_str	00000000 
0002b8f0 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0002b8ae l       .debug_str	00000000 
0002b8ed l       .debug_str	00000000 
0002b8f6 l       .debug_str	00000000 
0002b938 l       .debug_str	00000000 
0002b942 l       .debug_str	00000000 
0002b985 l       .debug_str	00000000 
0002b98f l       .debug_str	00000000 
0002b9d2 l       .debug_str	00000000 
0002b9dc l       .debug_str	00000000 
0002ba1f l       .debug_str	00000000 
0002ba2a l       .debug_str	00000000 
0002ba6f l       .debug_str	00000000 
0002ba7a l       .debug_str	00000000 
0002babf l       .debug_str	00000000 
0002bac5 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002c0fa l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
0002bad2 l       .debug_str	00000000 
0002bae2 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000119cc l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d954 l       .debug_str	00000000 
000594be l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00014353 l       .debug_str	00000000 
00025b5f l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0002bb28 l       .debug_str	00000000 
000238a1 l       .debug_str	00000000 
00057911 l       .debug_str	00000000 
0002c4fe l       .debug_str	00000000 
000119d4 l       .debug_str	00000000 
00057523 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00052d79 l       .debug_str	00000000 
0002bb3a l       .debug_str	00000000 
0002bb3f l       .debug_str	00000000 
00058e99 l       .debug_str	00000000 
0002bb4a l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
0002bb54 l       .debug_str	00000000 
0002c1c8 l       .debug_str	00000000 
0002bb5e l       .debug_str	00000000 
00016d6a l       .debug_str	00000000 
0002c208 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0002c541 l       .debug_str	00000000 
000119de l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0002bb6c l       .debug_str	00000000 
0002bbe0 l       .debug_str	00000000 
0002c422 l       .debug_str	00000000 
0002bbf2 l       .debug_str	00000000 
0002c20e l       .debug_str	00000000 
0002c1e8 l       .debug_str	00000000 
000157fd l       .debug_str	00000000 
0002c465 l       .debug_str	00000000 
0002bbf7 l       .debug_str	00000000 
0002bc6b l       .debug_str	00000000 
0002c57a l       .debug_str	00000000 
0002c5c1 l       .debug_str	00000000 
0002c4c7 l       .debug_str	00000000 
0002bc83 l       .debug_str	00000000 
0003bd56 l       .debug_str	00000000 
00031475 l       .debug_str	00000000 
00052d28 l       .debug_str	00000000 
0002c5dc l       .debug_str	00000000 
0002c496 l       .debug_str	00000000 
0002bcfb l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00056b2f l       .debug_str	00000000 
00023074 l       .debug_str	00000000 
0002bd53 l       .debug_str	00000000 
0002bd58 l       .debug_str	00000000 
0002bd6a l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
0002cc5a l       .debug_str	00000000 
0002bd73 l       .debug_str	00000000 
0001b210 l       .debug_str	00000000 
0002bd9b l       .debug_str	00000000 
0002bdab l       .debug_str	00000000 
000551cb l       .debug_str	00000000 
0002be04 l       .debug_str	00000000 
0002be0c l       .debug_str	00000000 
000142e3 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00013242 l       .debug_str	00000000 
0002be14 l       .debug_str	00000000 
00016f97 l       .debug_str	00000000 
0002be20 l       .debug_str	00000000 
0002be2a l       .debug_str	00000000 
0002be37 l       .debug_str	00000000 
0002be44 l       .debug_str	00000000 
0002be59 l       .debug_str	00000000 
0002be6d l       .debug_str	00000000 
0002be83 l       .debug_str	00000000 
0002be8b l       .debug_str	00000000 
0002be98 l       .debug_str	00000000 
0002bea5 l       .debug_str	00000000 
0002c7ae l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0002beb2 l       .debug_str	00000000 
0002bedf l       .debug_str	00000000 
0002bf0e l       .debug_str	00000000 
0002bf35 l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002bf54 l       .debug_str	00000000 
0002bf69 l       .debug_str	00000000 
0001ac32 l       .debug_str	00000000 
00046bfa l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00052987 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
0002bf73 l       .debug_str	00000000 
0002bf98 l       .debug_str	00000000 
0002bf7e l       .debug_str	00000000 
0002c017 l       .debug_str	00000000 
0002bfa8 l       .debug_str	00000000 
0002bfae l       .debug_str	00000000 
0002bfbd l       .debug_str	00000000 
0002bfc8 l       .debug_str	00000000 
0002bffd l       .debug_str	00000000 
0002c022 l       .debug_str	00000000 
0002c032 l       .debug_str	00000000 
00053591 l       .debug_str	00000000 
0002c064 l       .debug_str	00000000 
0002c069 l       .debug_str	00000000 
00054434 l       .debug_str	00000000 
0002d8ce l       .debug_str	00000000 
0002d8c7 l       .debug_str	00000000 
00014212 l       .debug_str	00000000 
0002d8f5 l       .debug_str	00000000 
0002d929 l       .debug_str	00000000 
0002c06f l       .debug_str	00000000 
00005940 l       .debug_str	00000000 
0002c0ad l       .debug_str	00000000 
0002d8d2 l       .debug_str	00000000 
0002d91f l       .debug_str	00000000 
0002c08e l       .debug_str	00000000 
0002c07b l       .debug_str	00000000 
0002c094 l       .debug_str	00000000 
00023073 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0000bca1 l       .debug_str	00000000 
0002c0bc l       .debug_str	00000000 
0002c0c4 l       .debug_str	00000000 
0003758d l       .debug_str	00000000 
0002c0ca l       .debug_str	00000000 
000450b8 l       .debug_str	00000000 
0002c0f1 l       .debug_str	00000000 
0002c0d5 l       .debug_str	00000000 
0000eb55 l       .debug_str	00000000 
0002c0f9 l       .debug_str	00000000 
0002bda5 l       .debug_str	00000000 
00023a07 l       .debug_str	00000000 
00025abf l       .debug_str	00000000 
0002c0fe l       .debug_str	00000000 
0002c122 l       .debug_str	00000000 
0002c128 l       .debug_str	00000000 
0002c130 l       .debug_str	00000000 
00047723 l       .debug_str	00000000 
00037189 l       .debug_str	00000000 
0002c135 l       .debug_str	00000000 
0002c15d l       .debug_str	00000000 
0002c13f l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
000198e7 l       .debug_str	00000000 
00016e0a l       .debug_str	00000000 
00020111 l       .debug_str	00000000 
00023a0f l       .debug_str	00000000 
00023a1c l       .debug_str	00000000 
00023a25 l       .debug_str	00000000 
00051cef l       .debug_str	00000000 
0002c171 l       .debug_str	00000000 
0002c165 l       .debug_str	00000000 
000137b7 l       .debug_str	00000000 
0002c17e l       .debug_str	00000000 
0002c18a l       .debug_str	00000000 
0002c1ad l       .debug_str	00000000 
0002c197 l       .debug_str	00000000 
0002c1bb l       .debug_str	00000000 
0002c1db l       .debug_str	00000000 
0002c1fb l       .debug_str	00000000 
0002c216 l       .debug_str	00000000 
0002c231 l       .debug_str	00000000 
0002c237 l       .debug_str	00000000 
0002c23b l       .debug_str	00000000 
0002c24c l       .debug_str	00000000 
0002c23f l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
0002c261 l       .debug_str	00000000 
0002c25c l       .debug_str	00000000 
0002c274 l       .debug_str	00000000 
0002c2c0 l       .debug_str	00000000 
0002c299 l       .debug_str	00000000 
0002c2b0 l       .debug_str	00000000 
0002c2da l       .debug_str	00000000 
0002c2cb l       .debug_str	00000000 
0002c322 l       .debug_str	00000000 
0002c302 l       .debug_str	00000000 
0002c37b l       .debug_str	00000000 
0002c35b l       .debug_str	00000000 
00051ce1 l       .debug_str	00000000 
0002c3d2 l       .debug_str	00000000 
0002c3d7 l       .debug_str	00000000 
0002c3dd l       .debug_str	00000000 
0002c400 l       .debug_str	00000000 
0002c3e2 l       .debug_str	00000000 
0002c40b l       .debug_str	00000000 
0002c456 l       .debug_str	00000000 
0002c487 l       .debug_str	00000000 
0002c4b8 l       .debug_str	00000000 
0002c4e7 l       .debug_str	00000000 
0002c532 l       .debug_str	00000000 
0002c563 l       .debug_str	00000000 
0001b02f l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00031b9f l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
000316b5 l       .debug_str	00000000 
00054d9e l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
000593d8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00052911 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00052f59 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00020035 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000201b2 l       .debug_str	00000000 
000201a6 l       .debug_str	00000000 
0001ffe3 l       .debug_str	00000000 
0002c5b4 l       .debug_str	00000000 
0002c5cd l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
0002c5fb l       .debug_str	00000000 
0002c5fa l       .debug_str	00000000 
0002c60f l       .debug_str	00000000 
0002c600 l       .debug_str	00000000 
00052a02 l       .debug_str	00000000 
00051ccf l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0002c63c l       .debug_str	00000000 
0002c62e l       .debug_str	00000000 
0002c62d l       .debug_str	00000000 
0002011a l       .debug_str	00000000 
000198f1 l       .debug_str	00000000 
0005980e l       .debug_str	00000000 
0002c645 l       .debug_str	00000000 
0002c649 l       .debug_str	00000000 
0002c64c l       .debug_str	00000000 
000582fe l       .debug_str	00000000 
000198d5 l       .debug_str	00000000 
0002c64f l       .debug_str	00000000 
0001abaa l       .debug_str	00000000 
0002c653 l       .debug_str	00000000 
0002c652 l       .debug_str	00000000 
0002c658 l       .debug_str	00000000 
0002c72a l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
0002c676 l       .debug_str	00000000 
0002c664 l       .debug_str	00000000 
0002c69b l       .debug_str	00000000 
0002c763 l       .debug_str	00000000 
0002c6b9 l       .debug_str	00000000 
0002c6a7 l       .debug_str	00000000 
0002c6de l       .debug_str	00000000 
0002c6f7 l       .debug_str	00000000 
0002c6e5 l       .debug_str	00000000 
0002c703 l       .debug_str	00000000 
0002c71b l       .debug_str	00000000 
0002c754 l       .debug_str	00000000 
0001abb0 l       .debug_str	00000000 
0002c78d l       .debug_str	00000000 
0002c79a l       .debug_str	00000000 
0002c799 l       .debug_str	00000000 
0002c7a2 l       .debug_str	00000000 
0002c7cf l       .debug_str	00000000 
0002c7ba l       .debug_str	00000000 
0002c7ec l       .debug_str	00000000 
0002c7f8 l       .debug_str	00000000 
0002c8a2 l       .debug_str	00000000 
0002c804 l       .debug_str	00000000 
0002c80b l       .debug_str	00000000 
0002c814 l       .debug_str	00000000 
0002c822 l       .debug_str	00000000 
0002c829 l       .debug_str	00000000 
0002c831 l       .debug_str	00000000 
0002c838 l       .debug_str	00000000 
0002c87e l       .debug_str	00000000 
0002c859 l       .debug_str	00000000 
0002c844 l       .debug_str	00000000 
0002c869 l       .debug_str	00000000 
0002c88d l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
0002c8ae l       .debug_str	00000000 
00025ad2 l       .debug_str	00000000 
000561e8 l       .debug_str	00000000 
0001ff56 l       .debug_str	00000000 
0001ff3f l       .debug_str	00000000 
0002c8c8 l       .debug_str	00000000 
0002c8eb l       .debug_str	00000000 
0002c8d4 l       .debug_str	00000000 
0002c935 l       .debug_str	00000000 
0002c929 l       .debug_str	00000000 
0002bda0 l       .debug_str	00000000 
0002c952 l       .debug_str	00000000 
0002c93b l       .debug_str	00000000 
0002c99b l       .debug_str	00000000 
0002c9c3 l       .debug_str	00000000 
0002c9ac l       .debug_str	00000000 
00054d8c l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00052e17 l       .debug_str	00000000 
0002ca72 l       .debug_str	00000000 
0002ca54 l       .debug_str	00000000 
0002cb68 l       .debug_str	00000000 
0002cb48 l       .debug_str	00000000 
0002cbdb l       .debug_str	00000000 
0002cbbb l       .debug_str	00000000 
000431e1 l       .debug_str	00000000 
0002cc2e l       .debug_str	00000000 
0002cc3b l       .debug_str	00000000 
0002cc46 l       .debug_str	00000000 
0002cc5c l       .debug_str	00000000 
0002cc66 l       .debug_str	00000000 
0002ccbc l       .debug_str	00000000 
0002ccce l       .debug_str	00000000 
0002cd20 l       .debug_str	00000000 
0002cd34 l       .debug_str	00000000 
0002cd88 l       .debug_str	00000000 
0002cd8f l       .debug_str	00000000 
0002cdd5 l       .debug_str	00000000 
0002cde4 l       .debug_str	00000000 
0002ce3e l       .debug_str	00000000 
0002ce94 l       .debug_str	00000000 
0002ceec l       .debug_str	00000000 
0002cf36 l       .debug_str	00000000 
0002cf3c l       .debug_str	00000000 
0002cf8c l       .debug_str	00000000 
0002cfd8 l       .debug_str	00000000 
0002d026 l       .debug_str	00000000 
00025b78 l       .debug_str	00000000 
0002d066 l       .debug_str	00000000 
0002d0b3 l       .debug_str	00000000 
0002d0fc l       .debug_str	00000000 
0002d147 l       .debug_str	00000000 
0002d184 l       .debug_str	00000000 
0002d194 l       .debug_str	00000000 
0002d1ef l       .debug_str	00000000 
0002d246 l       .debug_str	00000000 
0002d29f l       .debug_str	00000000 
0003a575 l       .debug_str	00000000 
0002d2ea l       .debug_str	00000000 
0002d33e l       .debug_str	00000000 
0002d38e l       .debug_str	00000000 
0002d3e0 l       .debug_str	00000000 
00052883 l       .debug_str	00000000 
0002d424 l       .debug_str	00000000 
0002d470 l       .debug_str	00000000 
0002d4b8 l       .debug_str	00000000 
0002d502 l       .debug_str	00000000 
0003a3ab l       .debug_str	00000000 
0002d53e l       .debug_str	00000000 
0002d592 l       .debug_str	00000000 
0002d5e2 l       .debug_str	00000000 
0002d634 l       .debug_str	00000000 
0002d678 l       .debug_str	00000000 
0002d684 l       .debug_str	00000000 
0002d6db l       .debug_str	00000000 
0002d72e l       .debug_str	00000000 
0002d783 l       .debug_str	00000000 
0002d7ca l       .debug_str	00000000 
0002d7d6 l       .debug_str	00000000 
0002d7ed l       .debug_str	00000000 
0002d7e6 l       .debug_str	00000000 
0002d7ff l       .debug_str	00000000 
0002d814 l       .debug_str	00000000 
0002d865 l       .debug_str	00000000 
0002d875 l       .debug_str	00000000 
0002d8c6 l       .debug_str	00000000 
0002d8d1 l       .debug_str	00000000 
0002d8f4 l       .debug_str	00000000 
0002d928 l       .debug_str	00000000 
0002d93e l       .debug_str	00000000 
0002d96c l       .debug_str	00000000 
0002d960 l       .debug_str	00000000 
0002d97a l       .debug_str	00000000 
0002d979 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000198dd l       .debug_str	00000000 
00025ae5 l       .debug_str	00000000 
00025ae4 l       .debug_str	00000000 
00025aea l       .debug_str	00000000 
00025ae9 l       .debug_str	00000000 
0002d97d l       .debug_str	00000000 
0002d9bd l       .debug_str	00000000 
0002d9c5 l       .debug_str	00000000 
0002da05 l       .debug_str	00000000 
0002da0f l       .debug_str	00000000 
00051e1b l       .debug_str	00000000 
00056986 l       .debug_str	00000000 
0002da4b l       .debug_str	00000000 
0001bd9e l       .debug_str	00000000 
0003086b l       .debug_str	00000000 
0002da73 l       .debug_str	00000000 
0001bc56 l       .debug_str	00000000 
0002da9c l       .debug_str	00000000 
0002dac1 l       .debug_str	00000000 
0003e9f9 l       .debug_str	00000000 
00052e71 l       .debug_str	00000000 
0002dac8 l       .debug_str	00000000 
0002dad1 l       .debug_str	00000000 
0002db0a l       .debug_str	00000000 
00013535 l       .debug_str	00000000 
0002db12 l       .debug_str	00000000 
000150ab l       .debug_str	00000000 
0002dba7 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0002dbf2 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
0002dc39 l       .debug_str	00000000 
0001210a l       .debug_str	00000000 
0002dc8e l       .debug_str	00000000 
0002dccb l       .debug_str	00000000 
00014202 l       .debug_str	00000000 
0002dcd6 l       .debug_str	00000000 
00014fb5 l       .debug_str	00000000 
0002dd2b l       .debug_str	00000000 
00014f45 l       .debug_str	00000000 
0002dd7d l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
0002ddc4 l       .debug_str	00000000 
0000acd7 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e7ce l       .debug_str	00000000 
0002de4a l       .debug_str	00000000 
0002de8b l       .debug_str	00000000 
0002deae l       .debug_str	00000000 
0002dee9 l       .debug_str	00000000 
0002def3 l       .debug_str	00000000 
0002df7d l       .debug_str	00000000 
0002dfaf l       .debug_str	00000000 
00011b34 l       .debug_str	00000000 
000141fa l       .debug_str	00000000 
0002e023 l       .debug_str	00000000 
0002e074 l       .debug_str	00000000 
0001432e l       .debug_str	00000000 
0002e0b6 l       .debug_str	00000000 
0002e13d l       .debug_str	00000000 
0002e14c l       .debug_str	00000000 
0002e1d6 l       .debug_str	00000000 
0002e252 l       .debug_str	00000000 
0002e282 l       .debug_str	00000000 
0002e2bd l       .debug_str	00000000 
0002e2c7 l       .debug_str	00000000 
00003b0f l       .debug_str	00000000 
0002e33e l       .debug_str	00000000 
0002e393 l       .debug_str	00000000 
0002e39c l       .debug_str	00000000 
0002e3ed l       .debug_str	00000000 
000058be l       .debug_str	00000000 
0002e3f9 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0002e406 l       .debug_str	00000000 
0002e40f l       .debug_str	00000000 
0002e425 l       .debug_str	00000000 
0002e432 l       .debug_str	00000000 
0002e477 l       .debug_str	00000000 
0002e48b l       .debug_str	00000000 
0002e4e0 l       .debug_str	00000000 
0002e4e9 l       .debug_str	00000000 
00045698 l       .debug_str	00000000 
0002e521 l       .debug_str	00000000 
0002e55e l       .debug_str	00000000 
0002e569 l       .debug_str	00000000 
0002e5ec l       .debug_str	00000000 
0002e5f7 l       .debug_str	00000000 
0002e67d l       .debug_str	00000000 
0002e6f2 l       .debug_str	00000000 
0002e71e l       .debug_str	00000000 
0002e7a7 l       .debug_str	00000000 
0002e7b6 l       .debug_str	00000000 
0002e7c3 l       .debug_str	00000000 
0002e7d7 l       .debug_str	00000000 
0002e82d l       .debug_str	00000000 
0002e89c l       .debug_str	00000000 
0002e91c l       .debug_str	00000000 
0002e98a l       .debug_str	00000000 
0002ea15 l       .debug_str	00000000 
0002ea8a l       .debug_str	00000000 
0002eaca l       .debug_str	00000000 
0002eb4d l       .debug_str	00000000 
0002eb8e l       .debug_str	00000000 
000430a3 l       .debug_str	00000000 
00046bbd l       .debug_str	00000000 
0002ebf3 l       .debug_str	00000000 
0002eca2 l       .debug_str	00000000 
0002eced l       .debug_str	00000000 
00015230 l       .debug_str	00000000 
0002ed96 l       .debug_str	00000000 
0002ee12 l       .debug_str	00000000 
000140b8 l       .debug_str	00000000 
0002ee37 l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
0002ee84 l       .debug_str	00000000 
000147a8 l       .debug_str	00000000 
0002eed7 l       .debug_str	00000000 
0002ef12 l       .debug_str	00000000 
0002ef1d l       .debug_str	00000000 
0001a84e l       .debug_str	00000000 
0002efa9 l       .debug_str	00000000 
00014400 l       .debug_str	00000000 
0002f02c l       .debug_str	00000000 
0002f0b4 l       .debug_str	00000000 
00020cbf l       .debug_str	00000000 
0002f129 l       .debug_str	00000000 
0002f1af l       .debug_str	00000000 
00015737 l       .debug_str	00000000 
0002f224 l       .debug_str	00000000 
0000b810 l       .debug_str	00000000 
0002f287 l       .debug_str	00000000 
0000ad61 l       .debug_str	00000000 
0002f2e9 l       .debug_str	00000000 
0000aa4d l       .debug_str	00000000 
0002f32f l       .debug_str	00000000 
0002f377 l       .debug_str	00000000 
0002f381 l       .debug_str	00000000 
0002f3c2 l       .debug_str	00000000 
0002f3dc l       .debug_str	00000000 
00025b9d l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0002f3e2 l       .debug_str	00000000 
0002f3eb l       .debug_str	00000000 
0002f450 l       .debug_str	00000000 
0002f45f l       .debug_str	00000000 
0002f4a1 l       .debug_str	00000000 
0002f4ab l       .debug_str	00000000 
0002f510 l       .debug_str	00000000 
0002f552 l       .debug_str	00000000 
0002f59c l       .debug_str	00000000 
0002f5ab l       .debug_str	00000000 
0002f5e1 l       .debug_str	00000000 
0002f5ea l       .debug_str	00000000 
00017691 l       .debug_str	00000000 
0002f5f4 l       .debug_str	00000000 
0002f5f7 l       .debug_str	00000000 
0002f62f l       .debug_str	00000000 
0002f639 l       .debug_str	00000000 
0002f67d l       .debug_str	00000000 
0002f693 l       .debug_str	00000000 
0002f6dc l       .debug_str	00000000 
00014375 l       .debug_str	00000000 
00025b88 l       .debug_str	00000000 
0002f721 l       .debug_str	00000000 
0002f76a l       .debug_str	00000000 
0002f778 l       .debug_str	00000000 
0002f7c0 l       .debug_str	00000000 
00024256 l       .debug_str	00000000 
0002f80a l       .debug_str	00000000 
00038fe2 l       .debug_str	00000000 
0002f8a2 l       .debug_str	00000000 
00052854 l       .debug_str	00000000 
0002f93c l       .debug_str	00000000 
00024746 l       .debug_str	00000000 
0002f9ae l       .debug_str	00000000 
00024479 l       .debug_str	00000000 
0002fa51 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
0002fa83 l       .debug_str	00000000 
0002faca l       .debug_str	00000000 
0002fad8 l       .debug_str	00000000 
0002fae2 l       .debug_str	00000000 
0002fb30 l       .debug_str	00000000 
0002fb40 l       .debug_str	00000000 
0002fb8b l       .debug_str	00000000 
0002fb99 l       .debug_str	00000000 
0002fc27 l       .debug_str	00000000 
0002fc36 l       .debug_str	00000000 
0000c0b6 l       .debug_str	00000000 
0002fc7f l       .debug_str	00000000 
0000c05f l       .debug_str	00000000 
0002fcc4 l       .debug_str	00000000 
0002fcfe l       .debug_str	00000000 
0002fd07 l       .debug_str	00000000 
0002fd53 l       .debug_str	00000000 
0002fd6b l       .debug_str	00000000 
0002fdcd l       .debug_str	00000000 
0000bfaf l       .debug_str	00000000 
0002fe02 l       .debug_str	00000000 
0002fe2a l       .debug_str	00000000 
0002fe62 l       .debug_str	00000000 
0002fe8b l       .debug_str	00000000 
0002fe96 l       .debug_str	00000000 
0001afad l       .debug_str	00000000 
0002febb l       .debug_str	00000000 
0002ff4a l       .debug_str	00000000 
0002ff81 l       .debug_str	00000000 
00030007 l       .debug_str	00000000 
00030055 l       .debug_str	00000000 
0003005e l       .debug_str	00000000 
000300e4 l       .debug_str	00000000 
000300f7 l       .debug_str	00000000 
00030180 l       .debug_str	00000000 
000301dc l       .debug_str	00000000 
0003021e l       .debug_str	00000000 
000302d0 l       .debug_str	00000000 
0003030f l       .debug_str	00000000 
000303b4 l       .debug_str	00000000 
00030448 l       .debug_str	00000000 
0003046e l       .debug_str	00000000 
000304ea l       .debug_str	00000000 
00030525 l       .debug_str	00000000 
00030532 l       .debug_str	00000000 
0003056b l       .debug_str	00000000 
00030583 l       .debug_str	00000000 
000305c3 l       .debug_str	00000000 
00028289 l       .debug_str	00000000 
000305cf l       .debug_str	00000000 
0003062c l       .debug_str	00000000 
00030689 l       .debug_str	00000000 
00030736 l       .debug_str	00000000 
00030793 l       .debug_str	00000000 
00016b17 l       .debug_str	00000000 
00030800 l       .debug_str	00000000 
00030864 l       .debug_str	00000000 
0003086f l       .debug_str	00000000 
0003089f l       .debug_str	00000000 
000308cb l       .debug_str	00000000 
00030937 l       .debug_str	00000000 
00030967 l       .debug_str	00000000 
000309a3 l       .debug_str	00000000 
000309ed l       .debug_str	00000000 
000309fd l       .debug_str	00000000 
00030a32 l       .debug_str	00000000 
00030a77 l       .debug_str	00000000 
00030a82 l       .debug_str	00000000 
00030ac2 l       .debug_str	00000000 
00030ad0 l       .debug_str	00000000 
00030b5c l       .debug_str	00000000 
00030bd8 l       .debug_str	00000000 
00030bf8 l       .debug_str	00000000 
00030c52 l       .debug_str	00000000 
00030c5f l       .debug_str	00000000 
00030c98 l       .debug_str	00000000 
00030ca0 l       .debug_str	00000000 
00030cf5 l       .debug_str	00000000 
00030d47 l       .debug_str	00000000 
0002fc2c l       .debug_str	00000000 
00030d8e l       .debug_str	00000000 
00030e02 l       .debug_str	00000000 
00030e46 l       .debug_str	00000000 
00030e92 l       .debug_str	00000000 
00030ed1 l       .debug_str	00000000 
00030ef7 l       .debug_str	00000000 
00030f09 l       .debug_str	00000000 
00030f13 l       .debug_str	00000000 
00030f55 l       .debug_str	00000000 
00003a62 l       .debug_str	00000000 
00030fdc l       .debug_str	00000000 
0001208b l       .debug_str	00000000 
00031058 l       .debug_str	00000000 
000310cf l       .debug_str	00000000 
0003111d l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
000311ad l       .debug_str	00000000 
000311e9 l       .debug_str	00000000 
000311f6 l       .debug_str	00000000 
0003123c l       .debug_str	00000000 
00031249 l       .debug_str	00000000 
00031f8f l       .debug_str	00000000 
0003127b l       .debug_str	00000000 
000312cb l       .debug_str	00000000 
000312e2 l       .debug_str	00000000 
0003136c l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
000313e8 l       .debug_str	00000000 
000313fc l       .debug_str	00000000 
00031459 l       .debug_str	00000000 
00031468 l       .debug_str	00000000 
00031479 l       .debug_str	00000000 
000314d3 l       .debug_str	00000000 
000314e2 l       .debug_str	00000000 
0003156b l       .debug_str	00000000 
00031579 l       .debug_str	00000000 
000315cf l       .debug_str	00000000 
00031623 l       .debug_str	00000000 
0003169c l       .debug_str	00000000 
000316b4 l       .debug_str	00000000 
000316be l       .debug_str	00000000 
00031755 l       .debug_str	00000000 
0003176f l       .debug_str	00000000 
0001dbbd l       .debug_str	00000000 
000317a8 l       .debug_str	00000000 
00013eb6 l       .debug_str	00000000 
0003180d l       .debug_str	00000000 
000318a4 l       .debug_str	00000000 
000318a8 l       .debug_str	00000000 
00031b9d l       .debug_str	00000000 
000318ad l       .debug_str	00000000 
0005784e l       .debug_str	00000000 
000140be l       .debug_str	00000000 
000318df l       .debug_str	00000000 
00019de5 l       .debug_str	00000000 
0003191d l       .debug_str	00000000 
0000a9f3 l       .debug_str	00000000 
00031970 l       .debug_str	00000000 
000319fc l       .debug_str	00000000 
00031a78 l       .debug_str	00000000 
00031a97 l       .debug_str	00000000 
00031ae2 l       .debug_str	00000000 
00031aef l       .debug_str	00000000 
00031b63 l       .debug_str	00000000 
00035ea1 l       .debug_str	00000000 
000475dc l       .debug_str	00000000 
00031b82 l       .debug_str	00000000 
00031ba2 l       .debug_str	00000000 
00031bbe l       .debug_str	00000000 
00031bc8 l       .debug_str	00000000 
00031c54 l       .debug_str	00000000 
00031cd0 l       .debug_str	00000000 
00031d01 l       .debug_str	00000000 
00031d84 l       .debug_str	00000000 
00031da4 l       .debug_str	00000000 
00031e2a l       .debug_str	00000000 
00031e9f l       .debug_str	00000000 
00028324 l       .debug_str	00000000 
00054e1a l       .debug_str	00000000 
00031ee0 l       .debug_str	00000000 
0002480c l       .debug_str	00000000 
00031f2b l       .debug_str	00000000 
00031f87 l       .debug_str	00000000 
00031f93 l       .debug_str	00000000 
00031fdc l       .debug_str	00000000 
00031fec l       .debug_str	00000000 
00032031 l       .debug_str	00000000 
0003207a l       .debug_str	00000000 
000320bf l       .debug_str	00000000 
0003211b l       .debug_str	00000000 
00032166 l       .debug_str	00000000 
000321ad l       .debug_str	00000000 
0003220b l       .debug_str	00000000 
00032256 l       .debug_str	00000000 
0003229d l       .debug_str	00000000 
000322fb l       .debug_str	00000000 
00032346 l       .debug_str	00000000 
0003238d l       .debug_str	00000000 
000323eb l       .debug_str	00000000 
00032434 l       .debug_str	00000000 
00032479 l       .debug_str	00000000 
000324d5 l       .debug_str	00000000 
0003251e l       .debug_str	00000000 
00032563 l       .debug_str	00000000 
000325bf l       .debug_str	00000000 
00032609 l       .debug_str	00000000 
0003264f l       .debug_str	00000000 
000326ac l       .debug_str	00000000 
000326f6 l       .debug_str	00000000 
0003273c l       .debug_str	00000000 
00032799 l       .debug_str	00000000 
000327f4 l       .debug_str	00000000 
0003283c l       .debug_str	00000000 
00032880 l       .debug_str	00000000 
000328c8 l       .debug_str	00000000 
0003290c l       .debug_str	00000000 
00032967 l       .debug_str	00000000 
000329b0 l       .debug_str	00000000 
000329f5 l       .debug_str	00000000 
00032a51 l       .debug_str	00000000 
00032a9a l       .debug_str	00000000 
00032adf l       .debug_str	00000000 
00032b3b l       .debug_str	00000000 
00032b84 l       .debug_str	00000000 
00032bc9 l       .debug_str	00000000 
00032c25 l       .debug_str	00000000 
00032c6f l       .debug_str	00000000 
00032cb5 l       .debug_str	00000000 
00032d12 l       .debug_str	00000000 
00032d5c l       .debug_str	00000000 
00032da2 l       .debug_str	00000000 
00032dff l       .debug_str	00000000 
00032e49 l       .debug_str	00000000 
00032e8f l       .debug_str	00000000 
00032eec l       .debug_str	00000000 
00032f47 l       .debug_str	00000000 
00032f8f l       .debug_str	00000000 
00032fd3 l       .debug_str	00000000 
0003301b l       .debug_str	00000000 
0003305f l       .debug_str	00000000 
000330ba l       .debug_str	00000000 
00033115 l       .debug_str	00000000 
0003315d l       .debug_str	00000000 
000331a1 l       .debug_str	00000000 
000331ea l       .debug_str	00000000 
0003322f l       .debug_str	00000000 
0003328b l       .debug_str	00000000 
000332e7 l       .debug_str	00000000 
00033330 l       .debug_str	00000000 
00033375 l       .debug_str	00000000 
000333d1 l       .debug_str	00000000 
0003341a l       .debug_str	00000000 
0003345f l       .debug_str	00000000 
000334bb l       .debug_str	00000000 
00033504 l       .debug_str	00000000 
00033549 l       .debug_str	00000000 
0002432c l       .debug_str	00000000 
000335a5 l       .debug_str	00000000 
000335e4 l       .debug_str	00000000 
00033619 l       .debug_str	00000000 
0000594d l       .debug_str	00000000 
0001420c l       .debug_str	00000000 
0001435c l       .debug_str	00000000 
00033623 l       .debug_str	00000000 
00016318 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
0003365d l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
000336ef l       .debug_str	00000000 
00015844 l       .debug_str	00000000 
00033728 l       .debug_str	00000000 
00014d2b l       .debug_str	00000000 
0003374f l       .debug_str	00000000 
00014c77 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00033789 l       .debug_str	00000000 
000149f6 l       .debug_str	00000000 
000337af l       .debug_str	00000000 
00014747 l       .debug_str	00000000 
00033809 l       .debug_str	00000000 
00015151 l       .debug_str	00000000 
000338a3 l       .debug_str	00000000 
0001436b l       .debug_str	00000000 
0003392c l       .debug_str	00000000 
000339d3 l       .debug_str	00000000 
00033a0c l       .debug_str	00000000 
00033a81 l       .debug_str	00000000 
00033aaa l       .debug_str	00000000 
000273d0 l       .debug_str	00000000 
00033adf l       .debug_str	00000000 
00033b1b l       .debug_str	00000000 
00033b2c l       .debug_str	00000000 
00033b65 l       .debug_str	00000000 
00013756 l       .debug_str	00000000 
00033b72 l       .debug_str	00000000 
00033b81 l       .debug_str	00000000 
0002f458 l       .debug_str	00000000 
00033bca l       .debug_str	00000000 
00033bfd l       .debug_str	00000000 
00033c0a l       .debug_str	00000000 
00058b0d l       .debug_str	00000000 
00033c55 l       .debug_str	00000000 
00033cad l       .debug_str	00000000 
00033cc2 l       .debug_str	00000000 
00033cf8 l       .debug_str	00000000 
00033d03 l       .debug_str	00000000 
000274de l       .debug_str	00000000 
00033d62 l       .debug_str	00000000 
00033dd5 l       .debug_str	00000000 
00033e3c l       .debug_str	00000000 
00033e5c l       .debug_str	00000000 
00033e9b l       .debug_str	00000000 
00033eba l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
00033f2d l       .debug_str	00000000 
00033faa l       .debug_str	00000000 
0003400f l       .debug_str	00000000 
0003406f l       .debug_str	00000000 
000340e2 l       .debug_str	00000000 
0003415f l       .debug_str	00000000 
000164ad l       .debug_str	00000000 
000341d7 l       .debug_str	00000000 
0003424c l       .debug_str	00000000 
000342c6 l       .debug_str	00000000 
000130ed l       .debug_str	00000000 
000130f8 l       .debug_str	00000000 
00034326 l       .debug_str	00000000 
00056afb l       .debug_str	00000000 
00034364 l       .debug_str	00000000 
000343a6 l       .debug_str	00000000 
000343d1 l       .debug_str	00000000 
00034412 l       .debug_str	00000000 
0003441c l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
000579b5 l       .debug_str	00000000 
0005229b l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00034478 l       .debug_str	00000000 
0001120f l       .debug_str	00000000 
000344b4 l       .debug_str	00000000 
000111c0 l       .debug_str	00000000 
000344fb l       .debug_str	00000000 
00034559 l       .debug_str	00000000 
0002be88 l       .debug_str	00000000 
000345b0 l       .debug_str	00000000 
0003460a l       .debug_str	00000000 
00034614 l       .debug_str	00000000 
00013724 l       .debug_str	00000000 
00013729 l       .debug_str	00000000 
00034657 l       .debug_str	00000000 
0003468d l       .debug_str	00000000 
0003469d l       .debug_str	00000000 
000346ac l       .debug_str	00000000 
000346b7 l       .debug_str	00000000 
0002bf6e l       .debug_str	00000000 
000346f1 l       .debug_str	00000000 
0003473a l       .debug_str	00000000 
00026351 l       .debug_str	00000000 
00034781 l       .debug_str	00000000 
000347bc l       .debug_str	00000000 
000347e1 l       .debug_str	00000000 
0003484d l       .debug_str	00000000 
00034860 l       .debug_str	00000000 
000348d7 l       .debug_str	00000000 
000348e2 l       .debug_str	00000000 
0003491f l       .debug_str	00000000 
0003492a l       .debug_str	00000000 
000349ab l       .debug_str	00000000 
000349f1 l       .debug_str	00000000 
00034a18 l       .debug_str	00000000 
00034a47 l       .debug_str	00000000 
00034a58 l       .debug_str	00000000 
000142ae l       .debug_str	00000000 
00034ab4 l       .debug_str	00000000 
00034ae5 l       .debug_str	00000000 
00011e95 l       .debug_str	00000000 
00034b2d l       .debug_str	00000000 
00020508 l       .debug_str	00000000 
00034b6b l       .debug_str	00000000 
00034baf l       .debug_str	00000000 
00034c02 l       .debug_str	00000000 
0003169d l       .debug_str	00000000 
00034c7a l       .debug_str	00000000 
00034cc9 l       .debug_str	00000000 
00034d5f l       .debug_str	00000000 
00034da3 l       .debug_str	00000000 
00038ae1 l       .debug_str	00000000 
00034e1b l       .debug_str	00000000 
00034e6a l       .debug_str	00000000 
00034f00 l       .debug_str	00000000 
00034f1a l       .debug_str	00000000 
00034f69 l       .debug_str	00000000 
00034fa2 l       .debug_str	00000000 
00034fbd l       .debug_str	00000000 
00015ecf l       .debug_str	00000000 
00035021 l       .debug_str	00000000 
000157db l       .debug_str	00000000 
0003509a l       .debug_str	00000000 
00023065 l       .debug_str	00000000 
0003510b l       .debug_str	00000000 
000351a1 l       .debug_str	00000000 
00035239 l       .debug_str	00000000 
000352ab l       .debug_str	00000000 
000352d3 l       .debug_str	00000000 
0001b25a l       .debug_str	00000000 
0003538b l       .debug_str	00000000 
00024c6a l       .debug_str	00000000 
000353d0 l       .debug_str	00000000 
00035486 l       .debug_str	00000000 
000354cb l       .debug_str	00000000 
00002b2a l       .debug_str	00000000 
0003550d l       .debug_str	00000000 
00035568 l       .debug_str	00000000 
0003556d l       .debug_str	00000000 
000355c6 l       .debug_str	00000000 
000355fa l       .debug_str	00000000 
0003560e l       .debug_str	00000000 
00035649 l       .debug_str	00000000 
0003568b l       .debug_str	00000000 
000356a1 l       .debug_str	00000000 
0003570d l       .debug_str	00000000 
000130f1 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0003574f l       .debug_str	00000000 
0003578f l       .debug_str	00000000 
000357e9 l       .debug_str	00000000 
0003582b l       .debug_str	00000000 
00035886 l       .debug_str	00000000 
000358c8 l       .debug_str	00000000 
000358d3 l       .debug_str	00000000 
00035913 l       .debug_str	00000000 
00035919 l       .debug_str	00000000 
00035973 l       .debug_str	00000000 
0003597c l       .debug_str	00000000 
000359be l       .debug_str	00000000 
00035a16 l       .debug_str	00000000 
00035a58 l       .debug_str	00000000 
00035ab1 l       .debug_str	00000000 
00035abb l       .debug_str	00000000 
00035ac3 l       .debug_str	00000000 
00035acc l       .debug_str	00000000 
00035abf l       .debug_str	00000000 
00035b0e l       .debug_str	00000000 
00035b63 l       .debug_str	00000000 
00035ba0 l       .debug_str	00000000 
00035be2 l       .debug_str	00000000 
00035c39 l       .debug_str	00000000 
00035c7b l       .debug_str	00000000 
00035cd3 l       .debug_str	00000000 
00035d0b l       .debug_str	00000000 
00035d17 l       .debug_str	00000000 
00035d54 l       .debug_str	00000000 
00035db6 l       .debug_str	00000000 
00035df7 l       .debug_str	00000000 
00035e00 l       .debug_str	00000000 
00035e5e l       .debug_str	00000000 
00035e97 l       .debug_str	00000000 
00035ea6 l       .debug_str	00000000 
00035ee5 l       .debug_str	00000000 
00035efa l       .debug_str	00000000 
00035f40 l       .debug_str	00000000 
00035f4d l       .debug_str	00000000 
00035f53 l       .debug_str	00000000 
00035f8c l       .debug_str	00000000 
00036018 l       .debug_str	00000000 
00036054 l       .debug_str	00000000 
00051e8a l       .debug_str	00000000 
00036066 l       .debug_str	00000000 
0003609e l       .debug_str	00000000 
000360aa l       .debug_str	00000000 
000360e7 l       .debug_str	00000000 
00036149 l       .debug_str	00000000 
0003618a l       .debug_str	00000000 
000361e8 l       .debug_str	00000000 
00036222 l       .debug_str	00000000 
0003627c l       .debug_str	00000000 
000362c5 l       .debug_str	00000000 
000362d5 l       .debug_str	00000000 
0003630e l       .debug_str	00000000 
00036390 l       .debug_str	00000000 
000363ca l       .debug_str	00000000 
00036424 l       .debug_str	00000000 
0003645f l       .debug_str	00000000 
000364bf l       .debug_str	00000000 
000364fa l       .debug_str	00000000 
0003655a l       .debug_str	00000000 
00036598 l       .debug_str	00000000 
000365f6 l       .debug_str	00000000 
00036634 l       .debug_str	00000000 
00036692 l       .debug_str	00000000 
000366dd l       .debug_str	00000000 
000366e6 l       .debug_str	00000000 
00036735 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00036741 l       .debug_str	00000000 
00036772 l       .debug_str	00000000 
0003679d l       .debug_str	00000000 
000367eb l       .debug_str	00000000 
000142df l       .debug_str	00000000 
000367f2 l       .debug_str	00000000 
00036857 l       .debug_str	00000000 
00036888 l       .debug_str	00000000 
00036890 l       .debug_str	00000000 
00014953 l       .debug_str	00000000 
000368c1 l       .debug_str	00000000 
0003691a l       .debug_str	00000000 
000369a8 l       .debug_str	00000000 
000369f4 l       .debug_str	00000000 
00036a19 l       .debug_str	00000000 
00036a36 l       .debug_str	00000000 
00036a60 l       .debug_str	00000000 
0001b1ed l       .debug_str	00000000 
0001b2a8 l       .debug_str	00000000 
0001b324 l       .debug_str	00000000 
00036a82 l       .debug_str	00000000 
00036acf l       .debug_str	00000000 
00036b14 l       .debug_str	00000000 
00036b53 l       .debug_str	00000000 
00036b9f l       .debug_str	00000000 
00036c2e l       .debug_str	00000000 
00036c7b l       .debug_str	00000000 
00036d01 l       .debug_str	00000000 
00053d8c l       .debug_str	00000000 
00036d26 l       .debug_str	00000000 
00036d50 l       .debug_str	00000000 
00036d59 l       .debug_str	00000000 
00036d8f l       .debug_str	00000000 
00036d98 l       .debug_str	00000000 
00036e26 l       .debug_str	00000000 
00036e6c l       .debug_str	00000000 
00036e8b l       .debug_str	00000000 
00036ea2 l       .debug_str	00000000 
00036ec6 l       .debug_str	00000000 
00036ee2 l       .debug_str	00000000 
00036f29 l       .debug_str	00000000 
00036f6e l       .debug_str	00000000 
00036fad l       .debug_str	00000000 
00036ff3 l       .debug_str	00000000 
00037082 l       .debug_str	00000000 
000370c9 l       .debug_str	00000000 
0003714f l       .debug_str	00000000 
00037184 l       .debug_str	00000000 
0003718e l       .debug_str	00000000 
00052da5 l       .debug_str	00000000 
000371f9 l       .debug_str	00000000 
0003722e l       .debug_str	00000000 
00037238 l       .debug_str	00000000 
0003726b l       .debug_str	00000000 
00037273 l       .debug_str	00000000 
000372a7 l       .debug_str	00000000 
000372b9 l       .debug_str	00000000 
000372f3 l       .debug_str	00000000 
00037311 l       .debug_str	00000000 
00037337 l       .debug_str	00000000 
00037342 l       .debug_str	00000000 
0003736b l       .debug_str	00000000 
00037379 l       .debug_str	00000000 
000373b3 l       .debug_str	00000000 
000373e9 l       .debug_str	00000000 
0003740f l       .debug_str	00000000 
00037432 l       .debug_str	00000000 
0003745b l       .debug_str	00000000 
00037481 l       .debug_str	00000000 
000374bf l       .debug_str	00000000 
000374d9 l       .debug_str	00000000 
00037517 l       .debug_str	00000000 
00037549 l       .debug_str	00000000 
00037555 l       .debug_str	00000000 
00059521 l       .debug_str	00000000 
00037589 l       .debug_str	00000000 
00037596 l       .debug_str	00000000 
00024111 l       .debug_str	00000000 
000375c8 l       .debug_str	00000000 
00037632 l       .debug_str	00000000 
000376a2 l       .debug_str	00000000 
00037709 l       .debug_str	00000000 
00037726 l       .debug_str	00000000 
00037765 l       .debug_str	00000000 
00037781 l       .debug_str	00000000 
000240d3 l       .debug_str	00000000 
000377af l       .debug_str	00000000 
000241af l       .debug_str	00000000 
000377e4 l       .debug_str	00000000 
00037820 l       .debug_str	00000000 
00037846 l       .debug_str	00000000 
00037885 l       .debug_str	00000000 
00037895 l       .debug_str	00000000 
000378f9 l       .debug_str	00000000 
00037930 l       .debug_str	00000000 
00037946 l       .debug_str	00000000 
00037995 l       .debug_str	00000000 
000379a1 l       .debug_str	00000000 
00037a73 l       .debug_str	00000000 
000379e8 l       .debug_str	00000000 
00037a6e l       .debug_str	00000000 
00037a92 l       .debug_str	00000000 
00037acd l       .debug_str	00000000 
00037add l       .debug_str	00000000 
00059449 l       .debug_str	00000000 
00037b1e l       .debug_str	00000000 
00037b58 l       .debug_str	00000000 
00037b67 l       .debug_str	00000000 
00037ba0 l       .debug_str	00000000 
00037bae l       .debug_str	00000000 
00037be7 l       .debug_str	00000000 
00037bf5 l       .debug_str	00000000 
00037c45 l       .debug_str	00000000 
00037c52 l       .debug_str	00000000 
00037cc8 l       .debug_str	00000000 
00037cd3 l       .debug_str	00000000 
00037ce5 l       .debug_str	00000000 
00037d31 l       .debug_str	00000000 
00037d4e l       .debug_str	00000000 
00037de2 l       .debug_str	00000000 
00037e78 l       .debug_str	00000000 
00037eea l       .debug_str	00000000 
00037f10 l       .debug_str	00000000 
00037faf l       .debug_str	00000000 
00038020 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00038065 l       .debug_str	00000000 
000380c8 l       .debug_str	00000000 
000380eb l       .debug_str	00000000 
0003813f l       .debug_str	00000000 
00038156 l       .debug_str	00000000 
00025c6a l       .debug_str	00000000 
000381a3 l       .debug_str	00000000 
000381b0 l       .debug_str	00000000 
000381eb l       .debug_str	00000000 
00038213 l       .debug_str	00000000 
00038275 l       .debug_str	00000000 
00033cfd l       .debug_str	00000000 
000382de l       .debug_str	00000000 
0003ab0c l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
000285b3 l       .debug_str	00000000 
000285c4 l       .debug_str	00000000 
0003832b l       .debug_str	00000000 
0000b32d l       .debug_str	00000000 
00038376 l       .debug_str	00000000 
000383f9 l       .debug_str	00000000 
00038429 l       .debug_str	00000000 
000384b1 l       .debug_str	00000000 
00038526 l       .debug_str	00000000 
00038579 l       .debug_str	00000000 
00038605 l       .debug_str	00000000 
0003863d l       .debug_str	00000000 
00038692 l       .debug_str	00000000 
000386c3 l       .debug_str	00000000 
00038715 l       .debug_str	00000000 
00038743 l       .debug_str	00000000 
00038797 l       .debug_str	00000000 
000387bd l       .debug_str	00000000 
00020454 l       .debug_str	00000000 
000387f4 l       .debug_str	00000000 
0003883f l       .debug_str	00000000 
0003885b l       .debug_str	00000000 
000388b1 l       .debug_str	00000000 
0002059b l       .debug_str	00000000 
0003892a l       .debug_str	00000000 
0003897a l       .debug_str	00000000 
00038a11 l       .debug_str	00000000 
00038a67 l       .debug_str	00000000 
00038ae0 l       .debug_str	00000000 
00038af8 l       .debug_str	00000000 
00038b8f l       .debug_str	00000000 
00038bc8 l       .debug_str	00000000 
00038df8 l       .debug_str	00000000 
00038c11 l       .debug_str	00000000 
00037ad9 l       .debug_str	00000000 
00038c4e l       .debug_str	00000000 
00038c92 l       .debug_str	00000000 
00038cdd l       .debug_str	00000000 
00038d1d l       .debug_str	00000000 
00038d47 l       .debug_str	00000000 
00038d90 l       .debug_str	00000000 
00038d9f l       .debug_str	00000000 
00038df0 l       .debug_str	00000000 
00038e07 l       .debug_str	00000000 
000430a7 l       .debug_str	00000000 
00054646 l       .debug_str	00000000 
00038e6e l       .debug_str	00000000 
00038ecf l       .debug_str	00000000 
00038eee l       .debug_str	00000000 
00038ef7 l       .debug_str	00000000 
00038f03 l       .debug_str	00000000 
000175f0 l       .debug_str	00000000 
00038f09 l       .debug_str	00000000 
00038f13 l       .debug_str	00000000 
00038f45 l       .debug_str	00000000 
00038f55 l       .debug_str	00000000 
00038fdd l       .debug_str	00000000 
00038fe6 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
00039053 l       .debug_str	00000000 
00039092 l       .debug_str	00000000 
00016a1f l       .debug_str	00000000 
00016a2b l       .debug_str	00000000 
00016a35 l       .debug_str	00000000 
000390a1 l       .debug_str	00000000 
00039111 l       .debug_str	00000000 
00039136 l       .debug_str	00000000 
000391a5 l       .debug_str	00000000 
000391cb l       .debug_str	00000000 
0003923a l       .debug_str	00000000 
00039264 l       .debug_str	00000000 
0003929b l       .debug_str	00000000 
000392a6 l       .debug_str	00000000 
000392e2 l       .debug_str	00000000 
00039301 l       .debug_str	00000000 
0003933b l       .debug_str	00000000 
00039376 l       .debug_str	00000000 
000393b2 l       .debug_str	00000000 
0000e939 l       .debug_str	00000000 
000393cc l       .debug_str	00000000 
00039408 l       .debug_str	00000000 
00039415 l       .debug_str	00000000 
00052101 l       .debug_str	00000000 
00039453 l       .debug_str	00000000 
00039499 l       .debug_str	00000000 
00039521 l       .debug_str	00000000 
0003953a l       .debug_str	00000000 
00039594 l       .debug_str	00000000 
000395da l       .debug_str	00000000 
000395f2 l       .debug_str	00000000 
00039672 l       .debug_str	00000000 
00039b46 l       .debug_str	00000000 
00039682 l       .debug_str	00000000 
000396c1 l       .debug_str	00000000 
00039701 l       .debug_str	00000000 
0003978b l       .debug_str	00000000 
000397a2 l       .debug_str	00000000 
000397f3 l       .debug_str	00000000 
00039801 l       .debug_str	00000000 
00039806 l       .debug_str	00000000 
00039861 l       .debug_str	00000000 
0003a21b l       .debug_str	00000000 
000398b8 l       .debug_str	00000000 
000398eb l       .debug_str	00000000 
00039932 l       .debug_str	00000000 
0003996c l       .debug_str	00000000 
0003999b l       .debug_str	00000000 
00039a19 l       .debug_str	00000000 
00039a9d l       .debug_str	00000000 
00039b2a l       .debug_str	00000000 
00039b3f l       .debug_str	00000000 
00039b4f l       .debug_str	00000000 
00039b9b l       .debug_str	00000000 
00039be0 l       .debug_str	00000000 
00039c77 l       .debug_str	00000000 
00039c93 l       .debug_str	00000000 
00039cda l       .debug_str	00000000 
00039d08 l       .debug_str	00000000 
00039d41 l       .debug_str	00000000 
00039d63 l       .debug_str	00000000 
0001a52e l       .debug_str	00000000 
00039de1 l       .debug_str	00000000 
00039e61 l       .debug_str	00000000 
00039ea0 l       .debug_str	00000000 
00039f2a l       .debug_str	00000000 
00039f76 l       .debug_str	00000000 
00039f94 l       .debug_str	00000000 
00039f9f l       .debug_str	00000000 
0003a001 l       .debug_str	00000000 
0003a058 l       .debug_str	00000000 
0003a0e5 l       .debug_str	00000000 
0003a131 l       .debug_str	00000000 
0003a1c8 l       .debug_str	00000000 
0003a212 l       .debug_str	00000000 
0003a22e l       .debug_str	00000000 
0003a288 l       .debug_str	00000000 
0003a291 l       .debug_str	00000000 
0003a2f0 l       .debug_str	00000000 
0003a347 l       .debug_str	00000000 
0003a3a0 l       .debug_str	00000000 
0003a3b5 l       .debug_str	00000000 
0003a402 l       .debug_str	00000000 
0003a44d l       .debug_str	00000000 
0003a460 l       .debug_str	00000000 
0001f014 l       .debug_str	00000000 
0001384c l       .debug_str	00000000 
0003a4ab l       .debug_str	00000000 
0003a4c0 l       .debug_str	00000000 
0003a4cc l       .debug_str	00000000 
0003a511 l       .debug_str	00000000 
0003a56a l       .debug_str	00000000 
0003a57f l       .debug_str	00000000 
0003a5cc l       .debug_str	00000000 
0003a617 l       .debug_str	00000000 
0003a62a l       .debug_str	00000000 
0003a675 l       .debug_str	00000000 
0003a688 l       .debug_str	00000000 
0003a6ec l       .debug_str	00000000 
0003a725 l       .debug_str	00000000 
0003a751 l       .debug_str	00000000 
00058176 l       .debug_str	00000000 
0005353b l       .debug_str	00000000 
0003a7d0 l       .debug_str	00000000 
0003a7d6 l       .debug_str	00000000 
0003a7df l       .debug_str	00000000 
0003a817 l       .debug_str	00000000 
0003a834 l       .debug_str	00000000 
0003a870 l       .debug_str	00000000 
0003a88d l       .debug_str	00000000 
0003a8e9 l       .debug_str	00000000 
0003a921 l       .debug_str	00000000 
0003a97d l       .debug_str	00000000 
000262f1 l       .debug_str	00000000 
0003a9b5 l       .debug_str	00000000 
0003a9f3 l       .debug_str	00000000 
0003aa0f l       .debug_str	00000000 
0003aa65 l       .debug_str	00000000 
0003aacc l       .debug_str	00000000 
0003ab04 l       .debug_str	00000000 
0003ab10 l       .debug_str	00000000 
0003ab77 l       .debug_str	00000000 
0003abb6 l       .debug_str	00000000 
0003abc7 l       .debug_str	00000000 
0003ac00 l       .debug_str	00000000 
00048ba8 l       .debug_str	00000000 
0003ac1b l       .debug_str	00000000 
0003ac57 l       .debug_str	00000000 
0003ac50 l       .debug_str	00000000 
0003ac60 l       .debug_str	00000000 
0003ac72 l       .debug_str	00000000 
0003acbd l       .debug_str	00000000 
0003acd5 l       .debug_str	00000000 
0003acdf l       .debug_str	00000000 
0003acf6 l       .debug_str	00000000 
0003ad05 l       .debug_str	00000000 
0003ad47 l       .debug_str	00000000 
0003ad60 l       .debug_str	00000000 
0003add4 l       .debug_str	00000000 
0003ade3 l       .debug_str	00000000 
0003ae1c l       .debug_str	00000000 
0003ae32 l       .debug_str	00000000 
0003ae72 l       .debug_str	00000000 
0003ae7d l       .debug_str	00000000 
0003aefc l       .debug_str	00000000 
00052cb4 l       .debug_str	00000000 
0003af1b l       .debug_str	00000000 
0003af30 l       .debug_str	00000000 
0003af3a l       .debug_str	00000000 
0001ab5b l       .debug_str	00000000 
0003af3f l       .debug_str	00000000 
0003af70 l       .debug_str	00000000 
0003af83 l       .debug_str	00000000 
0003af8d l       .debug_str	00000000 
0003afaa l       .debug_str	00000000 
0003afe5 l       .debug_str	00000000 
0003b01a l       .debug_str	00000000 
0003b04b l       .debug_str	00000000 
0003b05f l       .debug_str	00000000 
0003b06a l       .debug_str	00000000 
0003b088 l       .debug_str	00000000 
0003b0c3 l       .debug_str	00000000 
0003b0f9 l       .debug_str	00000000 
0003b12a l       .debug_str	00000000 
0003b13e l       .debug_str	00000000 
0003b149 l       .debug_str	00000000 
0003b167 l       .debug_str	00000000 
0003b1a2 l       .debug_str	00000000 
0003b1d8 l       .debug_str	00000000 
0003b209 l       .debug_str	00000000 
0003b21d l       .debug_str	00000000 
0003b228 l       .debug_str	00000000 
0003b246 l       .debug_str	00000000 
0003b281 l       .debug_str	00000000 
0003b2b7 l       .debug_str	00000000 
0003b2e8 l       .debug_str	00000000 
0003fb35 l       .debug_str	00000000 
0003b2fd l       .debug_str	00000000 
0003b309 l       .debug_str	00000000 
0003b328 l       .debug_str	00000000 
0003b363 l       .debug_str	00000000 
0003b39a l       .debug_str	00000000 
0003b3cb l       .debug_str	00000000 
0003b3de l       .debug_str	00000000 
0003b3e8 l       .debug_str	00000000 
0003b405 l       .debug_str	00000000 
0003b440 l       .debug_str	00000000 
0003b475 l       .debug_str	00000000 
0003b4a6 l       .debug_str	00000000 
0003b4ba l       .debug_str	00000000 
0003b4c5 l       .debug_str	00000000 
0003b4e3 l       .debug_str	00000000 
0003b51e l       .debug_str	00000000 
0003b554 l       .debug_str	00000000 
0003b585 l       .debug_str	00000000 
0003b599 l       .debug_str	00000000 
0003b608 l       .debug_str	00000000 
0003b643 l       .debug_str	00000000 
0003b68c l       .debug_str	00000000 
0003b6d1 l       .debug_str	00000000 
0003b72d l       .debug_str	00000000 
0003b776 l       .debug_str	00000000 
0003b7bb l       .debug_str	00000000 
0003b817 l       .debug_str	00000000 
0003b860 l       .debug_str	00000000 
0003b8a5 l       .debug_str	00000000 
0003b901 l       .debug_str	00000000 
0003b90c l       .debug_str	00000000 
0003b92a l       .debug_str	00000000 
0003b965 l       .debug_str	00000000 
0003b99b l       .debug_str	00000000 
0003b9cc l       .debug_str	00000000 
0003b9e0 l       .debug_str	00000000 
0003b9eb l       .debug_str	00000000 
0003ba09 l       .debug_str	00000000 
0003ba44 l       .debug_str	00000000 
0003ba7a l       .debug_str	00000000 
0003bae9 l       .debug_str	00000000 
0003bb24 l       .debug_str	00000000 
0003bb55 l       .debug_str	00000000 
0003bb6a l       .debug_str	00000000 
0003bb6f l       .debug_str	00000000 
0003bb7b l       .debug_str	00000000 
0003bb9a l       .debug_str	00000000 
0003bbd5 l       .debug_str	00000000 
0003bc0c l       .debug_str	00000000 
0003bc7b l       .debug_str	00000000 
0003bcb7 l       .debug_str	00000000 
0000aaf4 l       .debug_str	00000000 
0003bd00 l       .debug_str	00000000 
0003bd0b l       .debug_str	00000000 
0003bd52 l       .debug_str	00000000 
0003bd5c l       .debug_str	00000000 
0003bdde l       .debug_str	00000000 
0003bdfb l       .debug_str	00000000 
000179dd l       .debug_str	00000000 
0003be56 l       .debug_str	00000000 
0003beb0 l       .debug_str	00000000 
0003bebd l       .debug_str	00000000 
0003bf2f l       .debug_str	00000000 
0003bf93 l       .debug_str	00000000 
0003bf9e l       .debug_str	00000000 
0003c017 l       .debug_str	00000000 
0003c023 l       .debug_str	00000000 
0003c09f l       .debug_str	00000000 
0003c0a5 l       .debug_str	00000000 
0003c0ac l       .debug_str	00000000 
0003c0e8 l       .debug_str	00000000 
00014ed5 l       .debug_str	00000000 
0003c131 l       .debug_str	00000000 
0003c175 l       .debug_str	00000000 
0003c1c0 l       .debug_str	00000000 
0003c1ff l       .debug_str	00000000 
0003c224 l       .debug_str	00000000 
0003c27a l       .debug_str	00000000 
0003c2e8 l       .debug_str	00000000 
0003c368 l       .debug_str	00000000 
0003c3d5 l       .debug_str	00000000 
0003c460 l       .debug_str	00000000 
0003c4d4 l       .debug_str	00000000 
0003c514 l       .debug_str	00000000 
0003c595 l       .debug_str	00000000 
0003c5d6 l       .debug_str	00000000 
0003c63a l       .debug_str	00000000 
0003c6e9 l       .debug_str	00000000 
0003c733 l       .debug_str	00000000 
0003c780 l       .debug_str	00000000 
0003c7c6 l       .debug_str	00000000 
0003c7d0 l       .debug_str	00000000 
0003c809 l       .debug_str	00000000 
0003c838 l       .debug_str	00000000 
0003c899 l       .debug_str	00000000 
0003c8c8 l       .debug_str	00000000 
0003c905 l       .debug_str	00000000 
0003c994 l       .debug_str	00000000 
0003c9c9 l       .debug_str	00000000 
0003ca4f l       .debug_str	00000000 
0003cad5 l       .debug_str	00000000 
0003cb29 l       .debug_str	00000000 
0003cbb2 l       .debug_str	00000000 
0001a3ff l       .debug_str	00000000 
0003cc00 l       .debug_str	00000000 
0003cc8e l       .debug_str	00000000 
0003cce2 l       .debug_str	00000000 
0003cd21 l       .debug_str	00000000 
0003cd6c l       .debug_str	00000000 
0003cdee l       .debug_str	00000000 
0003ce0a l       .debug_str	00000000 
0003ce63 l       .debug_str	00000000 
0003cebc l       .debug_str	00000000 
0003cef9 l       .debug_str	00000000 
0003cf3a l       .debug_str	00000000 
0003cf9b l       .debug_str	00000000 
0003d00c l       .debug_str	00000000 
0003d03c l       .debug_str	00000000 
0003d082 l       .debug_str	00000000 
0003d0f4 l       .debug_str	00000000 
0003d188 l       .debug_str	00000000 
0003d1ac l       .debug_str	00000000 
0003d228 l       .debug_str	00000000 
0003d262 l       .debug_str	00000000 
0003d2a4 l       .debug_str	00000000 
0003d354 l       .debug_str	00000000 
0003d393 l       .debug_str	00000000 
0003d436 l       .debug_str	00000000 
0003d492 l       .debug_str	00000000 
0003d4ef l       .debug_str	00000000 
0003d59a l       .debug_str	00000000 
0003d5d3 l       .debug_str	00000000 
0003d64f l       .debug_str	00000000 
0003d687 l       .debug_str	00000000 
0003d693 l       .debug_str	00000000 
0003d6d0 l       .debug_str	00000000 
0003d728 l       .debug_str	00000000 
0003d748 l       .debug_str	00000000 
0003d7a1 l       .debug_str	00000000 
0003d7fa l       .debug_str	00000000 
0003d853 l       .debug_str	00000000 
0003d8ad l       .debug_str	00000000 
0003d8e3 l       .debug_str	00000000 
0003d8f3 l       .debug_str	00000000 
0003d902 l       .debug_str	00000000 
0003d90b l       .debug_str	00000000 
0003d942 l       .debug_str	00000000 
0003d97e l       .debug_str	00000000 
0003d98e l       .debug_str	00000000 
0003d9ea l       .debug_str	00000000 
0003da4c l       .debug_str	00000000 
00030c5b l       .debug_str	00000000 
0003da96 l       .debug_str	00000000 
0003dad1 l       .debug_str	00000000 
0003daf6 l       .debug_str	00000000 
0003db55 l       .debug_str	00000000 
0003db9f l       .debug_str	00000000 
0003dbda l       .debug_str	00000000 
0003dbff l       .debug_str	00000000 
0003dc5e l       .debug_str	00000000 
0003dcc7 l       .debug_str	00000000 
0003dcd0 l       .debug_str	00000000 
0003dd07 l       .debug_str	00000000 
0003dd63 l       .debug_str	00000000 
0003ddc5 l       .debug_str	00000000 
0003de24 l       .debug_str	00000000 
0003de83 l       .debug_str	00000000 
0003deb9 l       .debug_str	00000000 
0003deca l       .debug_str	00000000 
0003deda l       .debug_str	00000000 
0003dee4 l       .debug_str	00000000 
0003df1c l       .debug_str	00000000 
0003df79 l       .debug_str	00000000 
0003dfdc l       .debug_str	00000000 
0003e027 l       .debug_str	00000000 
0003e062 l       .debug_str	00000000 
0003e088 l       .debug_str	00000000 
0003e0e8 l       .debug_str	00000000 
0003e133 l       .debug_str	00000000 
0003e16e l       .debug_str	00000000 
0003e194 l       .debug_str	00000000 
0003e1f4 l       .debug_str	00000000 
0003e22a l       .debug_str	00000000 
0003e23b l       .debug_str	00000000 
0003e24b l       .debug_str	00000000 
0003e255 l       .debug_str	00000000 
0003e28d l       .debug_str	00000000 
0003e2ea l       .debug_str	00000000 
0003e34d l       .debug_str	00000000 
0003e3ad l       .debug_str	00000000 
0003e40d l       .debug_str	00000000 
0003e443 l       .debug_str	00000000 
0003e454 l       .debug_str	00000000 
0003e464 l       .debug_str	00000000 
0003e46e l       .debug_str	00000000 
0003e4a6 l       .debug_str	00000000 
0003e503 l       .debug_str	00000000 
0003e566 l       .debug_str	00000000 
0003e5b1 l       .debug_str	00000000 
0003e5ec l       .debug_str	00000000 
0003e612 l       .debug_str	00000000 
0003e672 l       .debug_str	00000000 
0003e6bd l       .debug_str	00000000 
0003e6f8 l       .debug_str	00000000 
0003e71e l       .debug_str	00000000 
0003e77e l       .debug_str	00000000 
0003e7b4 l       .debug_str	00000000 
0003e7c5 l       .debug_str	00000000 
0003e7d5 l       .debug_str	00000000 
0003e7df l       .debug_str	00000000 
0003e817 l       .debug_str	00000000 
0003e874 l       .debug_str	00000000 
0003e8d7 l       .debug_str	00000000 
0003e937 l       .debug_str	00000000 
0003e997 l       .debug_str	00000000 
0003e9cd l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0003e9e0 l       .debug_str	00000000 
0003e9f2 l       .debug_str	00000000 
0003e9fe l       .debug_str	00000000 
0003ea39 l       .debug_str	00000000 
0003ea98 l       .debug_str	00000000 
0003eafd l       .debug_str	00000000 
0003eb5f l       .debug_str	00000000 
0003eb9a l       .debug_str	00000000 
0003ebc2 l       .debug_str	00000000 
0003ec24 l       .debug_str	00000000 
0001d7cd l       .debug_str	00000000 
000201e9 l       .debug_str	00000000 
000137ab l       .debug_str	00000000 
0003ec5a l       .debug_str	00000000 
0003ec95 l       .debug_str	00000000 
0003ecd5 l       .debug_str	00000000 
0003ecf2 l       .debug_str	00000000 
0003ed36 l       .debug_str	00000000 
0003ed57 l       .debug_str	00000000 
0003ed97 l       .debug_str	00000000 
0003edb4 l       .debug_str	00000000 
0003edf8 l       .debug_str	00000000 
0003ee19 l       .debug_str	00000000 
0003ee7b l       .debug_str	00000000 
0003eee2 l       .debug_str	00000000 
0003ef1d l       .debug_str	00000000 
0003ef40 l       .debug_str	00000000 
0003efa6 l       .debug_str	00000000 
0003efe1 l       .debug_str	00000000 
0003f003 l       .debug_str	00000000 
0003f03e l       .debug_str	00000000 
0003f062 l       .debug_str	00000000 
0003f09d l       .debug_str	00000000 
0003f0c0 l       .debug_str	00000000 
0003f0fb l       .debug_str	00000000 
0003f11f l       .debug_str	00000000 
0003f15a l       .debug_str	00000000 
0003f17d l       .debug_str	00000000 
0003f1b8 l       .debug_str	00000000 
0003f1dc l       .debug_str	00000000 
0003f227 l       .debug_str	00000000 
0003f289 l       .debug_str	00000000 
0003f2c4 l       .debug_str	00000000 
0003f2e7 l       .debug_str	00000000 
0003f332 l       .debug_str	00000000 
0003f36d l       .debug_str	00000000 
0003f393 l       .debug_str	00000000 
0003f3ce l       .debug_str	00000000 
0003f3f4 l       .debug_str	00000000 
0003f445 l       .debug_str	00000000 
0003f493 l       .debug_str	00000000 
0003f4de l       .debug_str	00000000 
0003f511 l       .debug_str	00000000 
0003f54c l       .debug_str	00000000 
0003f571 l       .debug_str	00000000 
0003f5fd l       .debug_str	00000000 
0003f631 l       .debug_str	00000000 
0003f6ad l       .debug_str	00000000 
0003f6f2 l       .debug_str	00000000 
0003f73e l       .debug_str	00000000 
0003f7a1 l       .debug_str	00000000 
0003f7dc l       .debug_str	00000000 
0003f800 l       .debug_str	00000000 
0003f83b l       .debug_str	00000000 
0003f862 l       .debug_str	00000000 
0003f8ae l       .debug_str	00000000 
0003f8e9 l       .debug_str	00000000 
0003f910 l       .debug_str	00000000 
0003f95b l       .debug_str	00000000 
0003f9a7 l       .debug_str	00000000 
0003f9f3 l       .debug_str	00000000 
0003fa24 l       .debug_str	00000000 
0003fa2c l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
0003fa78 l       .debug_str	00000000 
0003faad l       .debug_str	00000000 
0003fadb l       .debug_str	00000000 
0003fae4 l       .debug_str	00000000 
0003fb32 l       .debug_str	00000000 
0003fb3a l       .debug_str	00000000 
0003fb9f l       .debug_str	00000000 
0003fbf2 l       .debug_str	00000000 
0003fc52 l       .debug_str	00000000 
0003fc71 l       .debug_str	00000000 
0003fcd4 l       .debug_str	00000000 
0003fcf6 l       .debug_str	00000000 
0003fd41 l       .debug_str	00000000 
0003fda6 l       .debug_str	00000000 
0003fdc8 l       .debug_str	00000000 
0003fe31 l       .debug_str	00000000 
0003fe6e l       .debug_str	00000000 
0003fed7 l       .debug_str	00000000 
0003ff67 l       .debug_str	00000000 
0000b9b4 l       .debug_str	00000000 
0003ffc7 l       .debug_str	00000000 
0004002a l       .debug_str	00000000 
00040093 l       .debug_str	00000000 
000400c6 l       .debug_str	00000000 
0004010e l       .debug_str	00000000 
00040188 l       .debug_str	00000000 
000401d9 l       .debug_str	00000000 
00040230 l       .debug_str	00000000 
0001b97c l       .debug_str	00000000 
00040278 l       .debug_str	00000000 
000402d6 l       .debug_str	00000000 
000402f3 l       .debug_str	00000000 
0004035f l       .debug_str	00000000 
000403a4 l       .debug_str	00000000 
000403f2 l       .debug_str	00000000 
0004043a l       .debug_str	00000000 
00040444 l       .debug_str	00000000 
000404b2 l       .debug_str	00000000 
000404ee l       .debug_str	00000000 
00040511 l       .debug_str	00000000 
00040581 l       .debug_str	00000000 
000405c9 l       .debug_str	00000000 
000405d2 l       .debug_str	00000000 
0004062f l       .debug_str	00000000 
00040692 l       .debug_str	00000000 
000406f2 l       .debug_str	00000000 
00040752 l       .debug_str	00000000 
000407ae l       .debug_str	00000000 
0004080d l       .debug_str	00000000 
0004086d l       .debug_str	00000000 
00040888 l       .debug_str	00000000 
0001b8da l       .debug_str	00000000 
000408dc l       .debug_str	00000000 
0004095a l       .debug_str	00000000 
00040984 l       .debug_str	00000000 
000409e6 l       .debug_str	00000000 
00040a47 l       .debug_str	00000000 
00040aa1 l       .debug_str	00000000 
00040b06 l       .debug_str	00000000 
00040b58 l       .debug_str	00000000 
00040ba0 l       .debug_str	00000000 
00040bbb l       .debug_str	00000000 
00040c35 l       .debug_str	00000000 
00040c82 l       .debug_str	00000000 
00040cfc l       .debug_str	00000000 
00040d49 l       .debug_str	00000000 
00040d9d l       .debug_str	00000000 
00040def l       .debug_str	00000000 
00040e57 l       .debug_str	00000000 
00040eb7 l       .debug_str	00000000 
00040f11 l       .debug_str	00000000 
00040f70 l       .debug_str	00000000 
00040fca l       .debug_str	00000000 
00041027 l       .debug_str	00000000 
00023a6d l       .debug_str	00000000 
00041065 l       .debug_str	00000000 
00024a50 l       .debug_str	00000000 
000410a0 l       .debug_str	00000000 
00041112 l       .debug_str	00000000 
000411e5 l       .debug_str	00000000 
0001ba9a l       .debug_str	00000000 
0004122d l       .debug_str	00000000 
0004127b l       .debug_str	00000000 
00041285 l       .debug_str	00000000 
000412cd l       .debug_str	00000000 
000412d9 l       .debug_str	00000000 
0004134d l       .debug_str	00000000 
00041358 l       .debug_str	00000000 
00041394 l       .debug_str	00000000 
000413bb l       .debug_str	00000000 
0004140c l       .debug_str	00000000 
00041419 l       .debug_str	00000000 
00041427 l       .debug_str	00000000 
0004143a l       .debug_str	00000000 
00041445 l       .debug_str	00000000 
00041487 l       .debug_str	00000000 
0004149c l       .debug_str	00000000 
00041506 l       .debug_str	00000000 
00041563 l       .debug_str	00000000 
000415c3 l       .debug_str	00000000 
00041623 l       .debug_str	00000000 
00041695 l       .debug_str	00000000 
000416e2 l       .debug_str	00000000 
00041741 l       .debug_str	00000000 
0004179b l       .debug_str	00000000 
0004180e l       .debug_str	00000000 
0004181b l       .debug_str	00000000 
0004187b l       .debug_str	00000000 
0004189a l       .debug_str	00000000 
00041902 l       .debug_str	00000000 
0004191d l       .debug_str	00000000 
00041975 l       .debug_str	00000000 
000419bf l       .debug_str	00000000 
00041a23 l       .debug_str	00000000 
00041a42 l       .debug_str	00000000 
00041aa4 l       .debug_str	00000000 
00041b0a l       .debug_str	00000000 
00041b8a l       .debug_str	00000000 
00041bd9 l       .debug_str	00000000 
00041c4f l       .debug_str	00000000 
00041cc5 l       .debug_str	00000000 
00041d9a l       .debug_str	00000000 
00041df7 l       .debug_str	00000000 
00041e55 l       .debug_str	00000000 
00041ed5 l       .debug_str	00000000 
00041f44 l       .debug_str	00000000 
00041fc2 l       .debug_str	00000000 
00042015 l       .debug_str	00000000 
0004207a l       .debug_str	00000000 
000420da l       .debug_str	00000000 
00042148 l       .debug_str	00000000 
000421e0 l       .debug_str	00000000 
0004226f l       .debug_str	00000000 
000422fd l       .debug_str	00000000 
0004238b l       .debug_str	00000000 
0004249b l       .debug_str	00000000 
0004250f l       .debug_str	00000000 
00042551 l       .debug_str	00000000 
0004259a l       .debug_str	00000000 
000425f4 l       .debug_str	00000000 
0004266d l       .debug_str	00000000 
0004267a l       .debug_str	00000000 
0004267f l       .debug_str	00000000 
000426eb l       .debug_str	00000000 
00042732 l       .debug_str	00000000 
000427bc l       .debug_str	00000000 
000427db l       .debug_str	00000000 
00042865 l       .debug_str	00000000 
00042889 l       .debug_str	00000000 
000428cd l       .debug_str	00000000 
00042931 l       .debug_str	00000000 
00042975 l       .debug_str	00000000 
000429e7 l       .debug_str	00000000 
00042aa5 l       .debug_str	00000000 
00042b07 l       .debug_str	00000000 
00042b9f l       .debug_str	00000000 
00042c4e l       .debug_str	00000000 
00042ce4 l       .debug_str	00000000 
00042d77 l       .debug_str	00000000 
00042dbb l       .debug_str	00000000 
00042e0e l       .debug_str	00000000 
00042e92 l       .debug_str	00000000 
00042f20 l       .debug_str	00000000 
00042f74 l       .debug_str	00000000 
00042f85 l       .debug_str	00000000 
0004300a l       .debug_str	00000000 
00043096 l       .debug_str	00000000 
0004309f l       .debug_str	00000000 
000430ac l       .debug_str	00000000 
00043103 l       .debug_str	00000000 
00043188 l       .debug_str	00000000 
000431da l       .debug_str	00000000 
000431e9 l       .debug_str	00000000 
00043230 l       .debug_str	00000000 
00043294 l       .debug_str	00000000 
000432b5 l       .debug_str	00000000 
00043335 l       .debug_str	00000000 
000433a0 l       .debug_str	00000000 
0004341e l       .debug_str	00000000 
0004346d l       .debug_str	00000000 
000434cc l       .debug_str	00000000 
00043564 l       .debug_str	00000000 
0004360a l       .debug_str	00000000 
000436a0 l       .debug_str	00000000 
0004372a l       .debug_str	00000000 
000437a0 l       .debug_str	00000000 
000437e9 l       .debug_str	00000000 
00043845 l       .debug_str	00000000 
000438c0 l       .debug_str	00000000 
0004392c l       .debug_str	00000000 
000439b6 l       .debug_str	00000000 
000439fa l       .debug_str	00000000 
00043a5b l       .debug_str	00000000 
00043a9f l       .debug_str	00000000 
00043b23 l       .debug_str	00000000 
00043bad l       .debug_str	00000000 
00043bff l       .debug_str	00000000 
00043c7d l       .debug_str	00000000 
00043d02 l       .debug_str	00000000 
00043d59 l       .debug_str	00000000 
00043dda l       .debug_str	00000000 
00043e98 l       .debug_str	00000000 
00043ef7 l       .debug_str	00000000 
00043f5a l       .debug_str	00000000 
00043f7f l       .debug_str	00000000 
00043fe3 l       .debug_str	00000000 
00044004 l       .debug_str	00000000 
00044084 l       .debug_str	00000000 
000440ef l       .debug_str	00000000 
0004416d l       .debug_str	00000000 
000441bc l       .debug_str	00000000 
0004421b l       .debug_str	00000000 
000442b3 l       .debug_str	00000000 
00044359 l       .debug_str	00000000 
000443ef l       .debug_str	00000000 
00044479 l       .debug_str	00000000 
000444ef l       .debug_str	00000000 
00044538 l       .debug_str	00000000 
00044594 l       .debug_str	00000000 
0004460f l       .debug_str	00000000 
0004467b l       .debug_str	00000000 
00044705 l       .debug_str	00000000 
00044749 l       .debug_str	00000000 
000447aa l       .debug_str	00000000 
000447ee l       .debug_str	00000000 
00044872 l       .debug_str	00000000 
000448fc l       .debug_str	00000000 
0004497a l       .debug_str	00000000 
000449ff l       .debug_str	00000000 
00044a56 l       .debug_str	00000000 
00044ad7 l       .debug_str	00000000 
00044b95 l       .debug_str	00000000 
00044bf4 l       .debug_str	00000000 
00044c27 l       .debug_str	00000000 
00044c5a l       .debug_str	00000000 
00044c8d l       .debug_str	00000000 
00044cc0 l       .debug_str	00000000 
00044cf3 l       .debug_str	00000000 
00044d26 l       .debug_str	00000000 
00044d59 l       .debug_str	00000000 
00044dad l       .debug_str	00000000 
00044ddb l       .debug_str	00000000 
00044e2f l       .debug_str	00000000 
0005780c l       .debug_str	00000000 
00013597 l       .debug_str	00000000 
00044e42 l       .debug_str	00000000 
00044e46 l       .debug_str	00000000 
00044e4a l       .debug_str	00000000 
00044e4e l       .debug_str	00000000 
00044e55 l       .debug_str	00000000 
00044e5a l       .debug_str	00000000 
00044e8a l       .debug_str	00000000 
00044edc l       .debug_str	00000000 
00044f1d l       .debug_str	00000000 
00044f2a l       .debug_str	00000000 
00044f69 l       .debug_str	00000000 
00044f74 l       .debug_str	00000000 
00044fb0 l       .debug_str	00000000 
00044fbe l       .debug_str	00000000 
00044ff2 l       .debug_str	00000000 
0004502d l       .debug_str	00000000 
0004506b l       .debug_str	00000000 
00045079 l       .debug_str	00000000 
000450b2 l       .debug_str	00000000 
000450bc l       .debug_str	00000000 
000450f8 l       .debug_str	00000000 
00045154 l       .debug_str	00000000 
0004515b l       .debug_str	00000000 
000451b9 l       .debug_str	00000000 
000451c2 l       .debug_str	00000000 
00045229 l       .debug_str	00000000 
0004523a l       .debug_str	00000000 
00045297 l       .debug_str	00000000 
000452f6 l       .debug_str	00000000 
00045352 l       .debug_str	00000000 
000453b0 l       .debug_str	00000000 
00045417 l       .debug_str	00000000 
00045474 l       .debug_str	00000000 
000454d3 l       .debug_str	00000000 
0004550c l       .debug_str	00000000 
00045516 l       .debug_str	00000000 
0004557e l       .debug_str	00000000 
000455b1 l       .debug_str	00000000 
000455bb l       .debug_str	00000000 
000455f1 l       .debug_str	00000000 
000455fd l       .debug_str	00000000 
00045634 l       .debug_str	00000000 
00045641 l       .debug_str	00000000 
00045685 l       .debug_str	00000000 
0004569f l       .debug_str	00000000 
00045710 l       .debug_str	00000000 
00045723 l       .debug_str	00000000 
00045794 l       .debug_str	00000000 
000457d7 l       .debug_str	00000000 
000457e1 l       .debug_str	00000000 
0004582b l       .debug_str	00000000 
00045872 l       .debug_str	00000000 
000458bf l       .debug_str	00000000 
00045909 l       .debug_str	00000000 
0004593b l       .debug_str	00000000 
00045944 l       .debug_str	00000000 
00045978 l       .debug_str	00000000 
000459b1 l       .debug_str	00000000 
000459ed l       .debug_str	00000000 
000459ff l       .debug_str	00000000 
00045a40 l       .debug_str	00000000 
00045a9f l       .debug_str	00000000 
00045ad0 l       .debug_str	00000000 
00045ae6 l       .debug_str	00000000 
00045b1b l       .debug_str	00000000 
00045b78 l       .debug_str	00000000 
00045bdc l       .debug_str	00000000 
00045c3b l       .debug_str	00000000 
00045c9b l       .debug_str	00000000 
00045cf9 l       .debug_str	00000000 
00020747 l       .debug_str	00000000 
00045d5e l       .debug_str	00000000 
00045da4 l       .debug_str	00000000 
00045de4 l       .debug_str	00000000 
00045e6c l       .debug_str	00000000 
00054242 l       .debug_str	00000000 
00045ef3 l       .debug_str	00000000 
00045f26 l       .debug_str	00000000 
00045f9a l       .debug_str	00000000 
00046013 l       .debug_str	00000000 
00046087 l       .debug_str	00000000 
000460e6 l       .debug_str	00000000 
00046143 l       .debug_str	00000000 
0004619d l       .debug_str	00000000 
000461f9 l       .debug_str	00000000 
00046256 l       .debug_str	00000000 
000462b5 l       .debug_str	00000000 
0004631d l       .debug_str	00000000 
00046387 l       .debug_str	00000000 
000463f0 l       .debug_str	00000000 
0004644e l       .debug_str	00000000 
000464c0 l       .debug_str	00000000 
000464c4 l       .debug_str	00000000 
00046537 l       .debug_str	00000000 
00046595 l       .debug_str	00000000 
000465f1 l       .debug_str	00000000 
00046662 l       .debug_str	00000000 
000466d8 l       .debug_str	00000000 
0004670f l       .debug_str	00000000 
0004676b l       .debug_str	00000000 
000467bf l       .debug_str	00000000 
0004681d l       .debug_str	00000000 
00046889 l       .debug_str	00000000 
000468de l       .debug_str	00000000 
00046911 l       .debug_str	00000000 
0004691f l       .debug_str	00000000 
00046957 l       .debug_str	00000000 
0004696a l       .debug_str	00000000 
0004699f l       .debug_str	00000000 
000469d5 l       .debug_str	00000000 
00046a30 l       .debug_str	00000000 
00046a63 l       .debug_str	00000000 
00046a6a l       .debug_str	00000000 
00046aac l       .debug_str	00000000 
00046add l       .debug_str	00000000 
00046b0e l       .debug_str	00000000 
00046b41 l       .debug_str	00000000 
00046b48 l       .debug_str	00000000 
00046b75 l       .debug_str	00000000 
00046bb0 l       .debug_str	00000000 
00046bc3 l       .debug_str	00000000 
00046bf4 l       .debug_str	00000000 
00046bfe l       .debug_str	00000000 
00046c5f l       .debug_str	00000000 
00046cc7 l       .debug_str	00000000 
00046d04 l       .debug_str	00000000 
00046d52 l       .debug_str	00000000 
00046d8e l       .debug_str	00000000 
00046dca l       .debug_str	00000000 
00046e03 l       .debug_str	00000000 
00046e3d l       .debug_str	00000000 
00046e76 l       .debug_str	00000000 
00046ead l       .debug_str	00000000 
00046ee6 l       .debug_str	00000000 
00046f20 l       .debug_str	00000000 
00046f66 l       .debug_str	00000000 
00046f89 l       .debug_str	00000000 
00046fcf l       .debug_str	00000000 
00046ff2 l       .debug_str	00000000 
0004703b l       .debug_str	00000000 
00047061 l       .debug_str	00000000 
000470aa l       .debug_str	00000000 
000470d0 l       .debug_str	00000000 
0004711a l       .debug_str	00000000 
00047141 l       .debug_str	00000000 
0004718b l       .debug_str	00000000 
000471b2 l       .debug_str	00000000 
000471ff l       .debug_str	00000000 
00047229 l       .debug_str	00000000 
00047276 l       .debug_str	00000000 
000472a0 l       .debug_str	00000000 
000472d3 l       .debug_str	00000000 
000472ff l       .debug_str	00000000 
00047355 l       .debug_str	00000000 
00047380 l       .debug_str	00000000 
000473d8 l       .debug_str	00000000 
0004742e l       .debug_str	00000000 
00047467 l       .debug_str	00000000 
00047472 l       .debug_str	00000000 
0001f24e l       .debug_str	00000000 
000474ab l       .debug_str	00000000 
000474d2 l       .debug_str	00000000 
0004750b l       .debug_str	00000000 
00047552 l       .debug_str	00000000 
0004755f l       .debug_str	00000000 
00047779 l       .debug_str	00000000 
0004758e l       .debug_str	00000000 
000475ce l       .debug_str	00000000 
000475e2 l       .debug_str	00000000 
00047624 l       .debug_str	00000000 
00047655 l       .debug_str	00000000 
00047685 l       .debug_str	00000000 
000476b6 l       .debug_str	00000000 
000476e7 l       .debug_str	00000000 
0004771e l       .debug_str	00000000 
00047729 l       .debug_str	00000000 
00047769 l       .debug_str	00000000 
0004777d l       .debug_str	00000000 
000477b9 l       .debug_str	00000000 
000477c9 l       .debug_str	00000000 
000477fe l       .debug_str	00000000 
00047808 l       .debug_str	00000000 
0004783d l       .debug_str	00000000 
00047847 l       .debug_str	00000000 
0004789c l       .debug_str	00000000 
000478e4 l       .debug_str	00000000 
0004792a l       .debug_str	00000000 
00047971 l       .debug_str	00000000 
000479ba l       .debug_str	00000000 
00047a0c l       .debug_str	00000000 
00047a5e l       .debug_str	00000000 
00047afc l       .debug_str	00000000 
00047b2e l       .debug_str	00000000 
00047b67 l       .debug_str	00000000 
00047b7c l       .debug_str	00000000 
00047bb7 l       .debug_str	00000000 
00047bce l       .debug_str	00000000 
00047c0c l       .debug_str	00000000 
00047c26 l       .debug_str	00000000 
00047c88 l       .debug_str	00000000 
00047cad l       .debug_str	00000000 
00047d08 l       .debug_str	00000000 
00047d17 l       .debug_str	00000000 
00047d8c l       .debug_str	00000000 
00047da9 l       .debug_str	00000000 
00047de3 l       .debug_str	00000000 
00047e20 l       .debug_str	00000000 
00047e2b l       .debug_str	00000000 
00047e63 l       .debug_str	00000000 
00047e6a l       .debug_str	00000000 
00047ee9 l       .debug_str	00000000 
00047f49 l       .debug_str	00000000 
00047fa7 l       .debug_str	00000000 
00048005 l       .debug_str	00000000 
0004803d l       .debug_str	00000000 
00048072 l       .debug_str	00000000 
0004809d l       .debug_str	00000000 
000480a7 l       .debug_str	00000000 
000480d7 l       .debug_str	00000000 
000480e5 l       .debug_str	00000000 
0004813e l       .debug_str	00000000 
00048191 l       .debug_str	00000000 
0004820d l       .debug_str	00000000 
00048271 l       .debug_str	00000000 
000482d5 l       .debug_str	00000000 
0004830b l       .debug_str	00000000 
0004831f l       .debug_str	00000000 
00048360 l       .debug_str	00000000 
00048378 l       .debug_str	00000000 
0004842c l       .debug_str	00000000 
0004845f l       .debug_str	00000000 
00048470 l       .debug_str	00000000 
000484b6 l       .debug_str	00000000 
000484c3 l       .debug_str	00000000 
00048500 l       .debug_str	00000000 
00048544 l       .debug_str	00000000 
00048585 l       .debug_str	00000000 
000485c7 l       .debug_str	00000000 
000485d1 l       .debug_str	00000000 
00048615 l       .debug_str	00000000 
00048620 l       .debug_str	00000000 
0004866e l       .debug_str	00000000 
000486bc l       .debug_str	00000000 
00048702 l       .debug_str	00000000 
0004874a l       .debug_str	00000000 
00048792 l       .debug_str	00000000 
00014363 l       .debug_str	00000000 
000487f9 l       .debug_str	00000000 
00048852 l       .debug_str	00000000 
000488bc l       .debug_str	00000000 
00017ae4 l       .debug_str	00000000 
00048926 l       .debug_str	00000000 
000489a1 l       .debug_str	00000000 
00048a16 l       .debug_str	00000000 
00048a21 l       .debug_str	00000000 
00048a96 l       .debug_str	00000000 
00048aa1 l       .debug_str	00000000 
00048af8 l       .debug_str	00000000 
00048b5c l       .debug_str	00000000 
00048b68 l       .debug_str	00000000 
00048ba5 l       .debug_str	00000000 
00048bb2 l       .debug_str	00000000 
00048be6 l       .debug_str	00000000 
00048c21 l       .debug_str	00000000 
00048c7d l       .debug_str	00000000 
00048cd8 l       .debug_str	00000000 
00048d32 l       .debug_str	00000000 
0002f76c l       .debug_str	00000000 
00048d78 l       .debug_str	00000000 
00048dde l       .debug_str	00000000 
00048e15 l       .debug_str	00000000 
00048e1d l       .debug_str	00000000 
00048e55 l       .debug_str	00000000 
00048e5e l       .debug_str	00000000 
00048e96 l       .debug_str	00000000 
00048e9f l       .debug_str	00000000 
00048ed6 l       .debug_str	00000000 
00048ede l       .debug_str	00000000 
00048f16 l       .debug_str	00000000 
00048f1f l       .debug_str	00000000 
00048f57 l       .debug_str	00000000 
00048f60 l       .debug_str	00000000 
00048f97 l       .debug_str	00000000 
00048f9f l       .debug_str	00000000 
00049019 l       .debug_str	00000000 
00049093 l       .debug_str	00000000 
0004910d l       .debug_str	00000000 
00049189 l       .debug_str	00000000 
0001b21a l       .debug_str	00000000 
000491e7 l       .debug_str	00000000 
00049246 l       .debug_str	00000000 
000492a5 l       .debug_str	00000000 
00049304 l       .debug_str	00000000 
00049364 l       .debug_str	00000000 
000493c2 l       .debug_str	00000000 
00049421 l       .debug_str	00000000 
00049480 l       .debug_str	00000000 
000494df l       .debug_str	00000000 
0004953f l       .debug_str	00000000 
00049594 l       .debug_str	00000000 
000495e9 l       .debug_str	00000000 
00049643 l       .debug_str	00000000 
0004969d l       .debug_str	00000000 
000496d7 l       .debug_str	00000000 
000496e0 l       .debug_str	00000000 
0004971a l       .debug_str	00000000 
00049723 l       .debug_str	00000000 
00049760 l       .debug_str	00000000 
00030c57 l       .debug_str	00000000 
00049799 l       .debug_str	00000000 
000497fa l       .debug_str	00000000 
00049858 l       .debug_str	00000000 
00049899 l       .debug_str	00000000 
000498d7 l       .debug_str	00000000 
00049910 l       .debug_str	00000000 
0004994f l       .debug_str	00000000 
0004998d l       .debug_str	00000000 
000499cb l       .debug_str	00000000 
00049a0c l       .debug_str	00000000 
00049a50 l       .debug_str	00000000 
00049a8d l       .debug_str	00000000 
00049af3 l       .debug_str	00000000 
00049b5a l       .debug_str	00000000 
00049bbd l       .debug_str	00000000 
00049c1f l       .debug_str	00000000 
00049c84 l       .debug_str	00000000 
00049ced l       .debug_str	00000000 
00049d53 l       .debug_str	00000000 
00049db9 l       .debug_str	00000000 
00049e14 l       .debug_str	00000000 
00049e7b l       .debug_str	00000000 
00049ee6 l       .debug_str	00000000 
00049f41 l       .debug_str	00000000 
00049f9c l       .debug_str	00000000 
00023b36 l       .debug_str	00000000 
00049fe3 l       .debug_str	00000000 
0004a02b l       .debug_str	00000000 
0004a073 l       .debug_str	00000000 
0004a0bb l       .debug_str	00000000 
0004a104 l       .debug_str	00000000 
0004a14e l       .debug_str	00000000 
0004a195 l       .debug_str	00000000 
0004a1e8 l       .debug_str	00000000 
0004a203 l       .debug_str	00000000 
0004a24b l       .debug_str	00000000 
0004a29f l       .debug_str	00000000 
0004a2e7 l       .debug_str	00000000 
0004a33b l       .debug_str	00000000 
0004a383 l       .debug_str	00000000 
0004a3d7 l       .debug_str	00000000 
0004a420 l       .debug_str	00000000 
0004a475 l       .debug_str	00000000 
0004a4bf l       .debug_str	00000000 
0004a517 l       .debug_str	00000000 
0004a579 l       .debug_str	00000000 
0004a5d8 l       .debug_str	00000000 
0004a638 l       .debug_str	00000000 
0004a698 l       .debug_str	00000000 
0004a6f8 l       .debug_str	00000000 
0004a759 l       .debug_str	00000000 
0004a7b8 l       .debug_str	00000000 
0004a818 l       .debug_str	00000000 
0004a878 l       .debug_str	00000000 
0004a8d8 l       .debug_str	00000000 
0004a939 l       .debug_str	00000000 
0004a996 l       .debug_str	00000000 
0004a9f1 l       .debug_str	00000000 
0004aa47 l       .debug_str	00000000 
0004aaa5 l       .debug_str	00000000 
0004aaf9 l       .debug_str	00000000 
0004ab5a l       .debug_str	00000000 
0004abc0 l       .debug_str	00000000 
0004ac28 l       .debug_str	00000000 
0004ac8f l       .debug_str	00000000 
0004aceb l       .debug_str	00000000 
0004ad4c l       .debug_str	00000000 
0004ada6 l       .debug_str	00000000 
0004ae00 l       .debug_str	00000000 
0004ae5e l       .debug_str	00000000 
0004aeb2 l       .debug_str	00000000 
0004af2e l       .debug_str	00000000 
0004af97 l       .debug_str	00000000 
0004b013 l       .debug_str	00000000 
0004b08f l       .debug_str	00000000 
0004b0f8 l       .debug_str	00000000 
0004b174 l       .debug_str	00000000 
0004b1e1 l       .debug_str	00000000 
0004b23b l       .debug_str	00000000 
0004b294 l       .debug_str	00000000 
0004b2ec l       .debug_str	00000000 
0004b34b l       .debug_str	00000000 
0004b3aa l       .debug_str	00000000 
0004b409 l       .debug_str	00000000 
0004b469 l       .debug_str	00000000 
0004b4c9 l       .debug_str	00000000 
0004b529 l       .debug_str	00000000 
0004b589 l       .debug_str	00000000 
0004b5eb l       .debug_str	00000000 
0004b64d l       .debug_str	00000000 
0004b6ae l       .debug_str	00000000 
0004b710 l       .debug_str	00000000 
0004b772 l       .debug_str	00000000 
0004b7d3 l       .debug_str	00000000 
0004b835 l       .debug_str	00000000 
0004b897 l       .debug_str	00000000 
00030c9b l       .debug_str	00000000 
0004b8e0 l       .debug_str	00000000 
0004b92c l       .debug_str	00000000 
0004b934 l       .debug_str	00000000 
0004b97e l       .debug_str	00000000 
0004b9c9 l       .debug_str	00000000 
0004b9d0 l       .debug_str	00000000 
0004ba1b l       .debug_str	00000000 
0004ba66 l       .debug_str	00000000 
0004bab2 l       .debug_str	00000000 
0004bafc l       .debug_str	00000000 
0004bb49 l       .debug_str	00000000 
0004bb94 l       .debug_str	00000000 
0004bbe0 l       .debug_str	00000000 
0004bc2c l       .debug_str	00000000 
0004bc78 l       .debug_str	00000000 
0004bcc5 l       .debug_str	00000000 
0004bd0f l       .debug_str	00000000 
0004bd5c l       .debug_str	00000000 
0004bda7 l       .debug_str	00000000 
0004bdf3 l       .debug_str	00000000 
0004be3f l       .debug_str	00000000 
0004be8b l       .debug_str	00000000 
0004bed8 l       .debug_str	00000000 
0004bf22 l       .debug_str	00000000 
0004bf6f l       .debug_str	00000000 
0004bfba l       .debug_str	00000000 
0004c006 l       .debug_str	00000000 
0004c052 l       .debug_str	00000000 
0004c09e l       .debug_str	00000000 
0004c0eb l       .debug_str	00000000 
0004c136 l       .debug_str	00000000 
0004c184 l       .debug_str	00000000 
0004c1d0 l       .debug_str	00000000 
0004c21d l       .debug_str	00000000 
0004c26a l       .debug_str	00000000 
0004c2b7 l       .debug_str	00000000 
0004c305 l       .debug_str	00000000 
0004c350 l       .debug_str	00000000 
0004c39b l       .debug_str	00000000 
0004c3e7 l       .debug_str	00000000 
0004c433 l       .debug_str	00000000 
0004c480 l       .debug_str	00000000 
0004c4cc l       .debug_str	00000000 
0004c519 l       .debug_str	00000000 
0004c566 l       .debug_str	00000000 
0004c5c5 l       .debug_str	00000000 
0004c622 l       .debug_str	00000000 
0004c67e l       .debug_str	00000000 
0004c6dc l       .debug_str	00000000 
0004c739 l       .debug_str	00000000 
0004c797 l       .debug_str	00000000 
0004c7f4 l       .debug_str	00000000 
0004c852 l       .debug_str	00000000 
0004c8af l       .debug_str	00000000 
0004c90e l       .debug_str	00000000 
0004c96c l       .debug_str	00000000 
0004c9cd l       .debug_str	00000000 
0004ca2e l       .debug_str	00000000 
0004ca91 l       .debug_str	00000000 
0004cac2 l       .debug_str	00000000 
0004caca l       .debug_str	00000000 
0004cb2d l       .debug_str	00000000 
0004cb90 l       .debug_str	00000000 
0004cbf4 l       .debug_str	00000000 
0004cc58 l       .debug_str	00000000 
0004ccbc l       .debug_str	00000000 
0004cd20 l       .debug_str	00000000 
0004cd83 l       .debug_str	00000000 
0004cde6 l       .debug_str	00000000 
0004ce4a l       .debug_str	00000000 
0004ceae l       .debug_str	00000000 
0004cf12 l       .debug_str	00000000 
0004cf76 l       .debug_str	00000000 
0004cfa7 l       .debug_str	00000000 
0004cfaf l       .debug_str	00000000 
0004d013 l       .debug_str	00000000 
0004d077 l       .debug_str	00000000 
0004d0db l       .debug_str	00000000 
0004d13f l       .debug_str	00000000 
0004d19f l       .debug_str	00000000 
0004d1ff l       .debug_str	00000000 
0004d22d l       .debug_str	00000000 
0004d236 l       .debug_str	00000000 
0004d297 l       .debug_str	00000000 
0004d2f8 l       .debug_str	00000000 
0004d359 l       .debug_str	00000000 
0004d3ba l       .debug_str	00000000 
0004d411 l       .debug_str	00000000 
0004d464 l       .debug_str	00000000 
0004d4ac l       .debug_str	00000000 
0004d4d4 l       .debug_str	00000000 
0004d51c l       .debug_str	00000000 
0004d532 l       .debug_str	00000000 
0004d57a l       .debug_str	00000000 
0004d5af l       .debug_str	00000000 
0004d5f7 l       .debug_str	00000000 
0004d632 l       .debug_str	00000000 
0004d67a l       .debug_str	00000000 
0004d6c2 l       .debug_str	00000000 
0004d6e3 l       .debug_str	00000000 
0004d72b l       .debug_str	00000000 
0004d736 l       .debug_str	00000000 
0004d77e l       .debug_str	00000000 
0004d7bb l       .debug_str	00000000 
0004d803 l       .debug_str	00000000 
0004d85c l       .debug_str	00000000 
0004d8a4 l       .debug_str	00000000 
0004d8c0 l       .debug_str	00000000 
0004d908 l       .debug_str	00000000 
0004d9b4 l       .debug_str	00000000 
0004d9fc l       .debug_str	00000000 
0004da1a l       .debug_str	00000000 
0004da62 l       .debug_str	00000000 
0004da6c l       .debug_str	00000000 
0004dab4 l       .debug_str	00000000 
0004daef l       .debug_str	00000000 
0004db37 l       .debug_str	00000000 
0004db86 l       .debug_str	00000000 
0004dbce l       .debug_str	00000000 
0004dbf5 l       .debug_str	00000000 
0004dc3d l       .debug_str	00000000 
0004dc67 l       .debug_str	00000000 
0004dcaf l       .debug_str	00000000 
0004dd2a l       .debug_str	00000000 
0004dd72 l       .debug_str	00000000 
0004ddba l       .debug_str	00000000 
0004ddd0 l       .debug_str	00000000 
0001723e l       .debug_str	00000000 
0004de18 l       .debug_str	00000000 
0004de60 l       .debug_str	00000000 
0004dea8 l       .debug_str	00000000 
0004ded9 l       .debug_str	00000000 
0004df21 l       .debug_str	00000000 
0004df85 l       .debug_str	00000000 
0004dfcd l       .debug_str	00000000 
0000b963 l       .debug_str	00000000 
0004e015 l       .debug_str	00000000 
0004e05d l       .debug_str	00000000 
0004e06a l       .debug_str	00000000 
0004e0b2 l       .debug_str	00000000 
0004e0bc l       .debug_str	00000000 
0004e104 l       .debug_str	00000000 
0004e10d l       .debug_str	00000000 
0004e155 l       .debug_str	00000000 
0004e17d l       .debug_str	00000000 
0004e1c5 l       .debug_str	00000000 
0004e20d l       .debug_str	00000000 
0004e22f l       .debug_str	00000000 
0004e277 l       .debug_str	00000000 
0004e2a8 l       .debug_str	00000000 
0004e2f0 l       .debug_str	00000000 
0004e338 l       .debug_str	00000000 
0004e370 l       .debug_str	00000000 
0004e3b8 l       .debug_str	00000000 
0004e3ed l       .debug_str	00000000 
0004e435 l       .debug_str	00000000 
0004e45e l       .debug_str	00000000 
0004e4a6 l       .debug_str	00000000 
0004e4ca l       .debug_str	00000000 
0004e512 l       .debug_str	00000000 
0004e537 l       .debug_str	00000000 
0004e57f l       .debug_str	00000000 
0004e59c l       .debug_str	00000000 
0004e5e4 l       .debug_str	00000000 
0004e5ef l       .debug_str	00000000 
0004e637 l       .debug_str	00000000 
0004e65f l       .debug_str	00000000 
0004e6a7 l       .debug_str	00000000 
0004e6b6 l       .debug_str	00000000 
0004e6fe l       .debug_str	00000000 
0004e746 l       .debug_str	00000000 
0004e762 l       .debug_str	00000000 
0004e7aa l       .debug_str	00000000 
0004e821 l       .debug_str	00000000 
0004e869 l       .debug_str	00000000 
0004e8e0 l       .debug_str	00000000 
0004e928 l       .debug_str	00000000 
0004e931 l       .debug_str	00000000 
0004e979 l       .debug_str	00000000 
0004e99f l       .debug_str	00000000 
0004e9e7 l       .debug_str	00000000 
0004ea1a l       .debug_str	00000000 
0004ea62 l       .debug_str	00000000 
0004ea7f l       .debug_str	00000000 
0004eac7 l       .debug_str	00000000 
0004ead0 l       .debug_str	00000000 
0004eb18 l       .debug_str	00000000 
0004eb60 l       .debug_str	00000000 
0004eb84 l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
0004ebcc l       .debug_str	00000000 
0004ec14 l       .debug_str	00000000 
0004ec5c l       .debug_str	00000000 
0004ed54 l       .debug_str	00000000 
0001b92a l       .debug_str	00000000 
0004ed9c l       .debug_str	00000000 
0004ede4 l       .debug_str	00000000 
0004ee2c l       .debug_str	00000000 
0004ee59 l       .debug_str	00000000 
0000ba9d l       .debug_str	00000000 
0004eea1 l       .debug_str	00000000 
0004eee9 l       .debug_str	00000000 
0004ef46 l       .debug_str	00000000 
0004ef8e l       .debug_str	00000000 
0004ef97 l       .debug_str	00000000 
0004efdf l       .debug_str	00000000 
0004effc l       .debug_str	00000000 
0004f044 l       .debug_str	00000000 
0004f07a l       .debug_str	00000000 
0004f0c2 l       .debug_str	00000000 
0004f0f7 l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0004f178 l       .debug_str	00000000 
0004f1c0 l       .debug_str	00000000 
0004f1dc l       .debug_str	00000000 
0004f224 l       .debug_str	00000000 
0004f22c l       .debug_str	00000000 
0004f274 l       .debug_str	00000000 
0004f28f l       .debug_str	00000000 
0004f2d7 l       .debug_str	00000000 
0004f2ff l       .debug_str	00000000 
0004f349 l       .debug_str	00000000 
0004f393 l       .debug_str	00000000 
0004f3f2 l       .debug_str	00000000 
0004f44f l       .debug_str	00000000 
0004f4a8 l       .debug_str	00000000 
0004f507 l       .debug_str	00000000 
0004f566 l       .debug_str	00000000 
0004f5c7 l       .debug_str	00000000 
0004f62a l       .debug_str	00000000 
0004f692 l       .debug_str	00000000 
0004f6f4 l       .debug_str	00000000 
0004f75a l       .debug_str	00000000 
0004f7bc l       .debug_str	00000000 
0004f821 l       .debug_str	00000000 
0004f884 l       .debug_str	00000000 
0004f8e0 l       .debug_str	00000000 
0004f937 l       .debug_str	00000000 
0004f990 l       .debug_str	00000000 
0004f9e3 l       .debug_str	00000000 
0004fa3f l       .debug_str	00000000 
0004faa5 l       .debug_str	00000000 
0004fafb l       .debug_str	00000000 
0004fb58 l       .debug_str	00000000 
0004fbba l       .debug_str	00000000 
0004fc13 l       .debug_str	00000000 
0004fc6e l       .debug_str	00000000 
0004fcc9 l       .debug_str	00000000 
0004fd24 l       .debug_str	00000000 
0004fd81 l       .debug_str	00000000 
0004fdde l       .debug_str	00000000 
0004fe24 l       .debug_str	00000000 
0004fe6e l       .debug_str	00000000 
0004feae l       .debug_str	00000000 
0004feeb l       .debug_str	00000000 
0004ff2f l       .debug_str	00000000 
0004ff6b l       .debug_str	00000000 
0004ffaf l       .debug_str	00000000 
0004fff8 l       .debug_str	00000000 
00050001 l       .debug_str	00000000 
0005004a l       .debug_str	00000000 
00050053 l       .debug_str	00000000 
000500bc l       .debug_str	00000000 
00050119 l       .debug_str	00000000 
0005017c l       .debug_str	00000000 
000501d2 l       .debug_str	00000000 
00050228 l       .debug_str	00000000 
00050281 l       .debug_str	00000000 
000502d9 l       .debug_str	00000000 
0005033d l       .debug_str	00000000 
000503c3 l       .debug_str	00000000 
000503c9 l       .debug_str	00000000 
0005044f l       .debug_str	00000000 
00050455 l       .debug_str	00000000 
000504d7 l       .debug_str	00000000 
00050559 l       .debug_str	00000000 
000505dc l       .debug_str	00000000 
000505e3 l       .debug_str	00000000 
00050666 l       .debug_str	00000000 
0005066d l       .debug_str	00000000 
000506f3 l       .debug_str	00000000 
00050779 l       .debug_str	00000000 
000507fc l       .debug_str	00000000 
0005087f l       .debug_str	00000000 
00050901 l       .debug_str	00000000 
00050987 l       .debug_str	00000000 
00050a0d l       .debug_str	00000000 
00050a97 l       .debug_str	00000000 
00050b1f l       .debug_str	00000000 
00050ba7 l       .debug_str	00000000 
00050c0f l       .debug_str	00000000 
00050c78 l       .debug_str	00000000 
00050ce2 l       .debug_str	00000000 
00050d4d l       .debug_str	00000000 
00050dab l       .debug_str	00000000 
00050e09 l       .debug_str	00000000 
00050e67 l       .debug_str	00000000 
00050ec6 l       .debug_str	00000000 
00050f24 l       .debug_str	00000000 
00050f83 l       .debug_str	00000000 
00050fe1 l       .debug_str	00000000 
00051040 l       .debug_str	00000000 
0005109f l       .debug_str	00000000 
000510fe l       .debug_str	00000000 
0005115c l       .debug_str	00000000 
000511bb l       .debug_str	00000000 
0005121a l       .debug_str	00000000 
00051279 l       .debug_str	00000000 
000512d8 l       .debug_str	00000000 
00051337 l       .debug_str	00000000 
00051396 l       .debug_str	00000000 
000513f5 l       .debug_str	00000000 
00051454 l       .debug_str	00000000 
000514b3 l       .debug_str	00000000 
00051512 l       .debug_str	00000000 
00051571 l       .debug_str	00000000 
000515d0 l       .debug_str	00000000 
0005162f l       .debug_str	00000000 
0005168e l       .debug_str	00000000 
000516ed l       .debug_str	00000000 
0005174c l       .debug_str	00000000 
000517ab l       .debug_str	00000000 
0005180a l       .debug_str	00000000 
00051869 l       .debug_str	00000000 
000518c9 l       .debug_str	00000000 
00051928 l       .debug_str	00000000 
00051987 l       .debug_str	00000000 
000519e6 l       .debug_str	00000000 
00051a46 l       .debug_str	00000000 
00051aa5 l       .debug_str	00000000 
00051b04 l       .debug_str	00000000 
00051b63 l       .debug_str	00000000 
00051bc3 l       .debug_str	00000000 
00015bfe l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
00017a56 l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
00017a60 l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
0001626a l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
00017292 l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
00016164 l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
00016214 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
0001678c l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
00015bae l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
00015c10 l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
00026304 l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
0002637f l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
00026570 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
000258e0 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
0001623e l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
00016244 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
00016238 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
00015bb0 l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
00017a6c l     F .text	00000024 __semihost
00017a90 l     F .text	00000010 debugger_connected
00017aa0 l     F .text	0000002e semihost_write
00017b74 l     F .text	0000001c semihosting_console_write_ch
20006f04 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20006f08 l     O .bss	00000010 avail_queue
20006f18 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20006f24 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
00017d44 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00017d98 l     F .text	00000050 hal_gpio_irq_handler
00017de8 l     F .text	0000002c hal_gpio_irq_setup
00017e14 l     F .text	0000001c hal_gpio_find_empty_slot
00017e30 l     F .text	00000038 hal_gpio_find_pin
20006f28 l     O .bss	00000040 hal_gpio_irqs
20006f68 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
00017fc4 l     F .text	0000007a hal_i2c_delay_us
00018040 l     F .text	00000024 hal_i2c_resolve
00018064 l     F .text	0000001c hal_i2c_convert_status
00018080 l     F .text	00000012 read_gpio_inbuffer
00018092 l     F .text	000000a2 hal_i2c_clear_bus
000269d8 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
00018430 l     F .text	0000006e nrf52_irqm_handler
000184b8 l     F .text	00000014 hal_spi_stop_transfer
000184cc l     F .text	0000004c hal_spi_config_slave
00018518 l     F .text	000000b8 hal_spi_init_master
000185d0 l     F .text	000000e0 hal_spi_config_master
000269e0 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
000189b4 l     F .text	0000000e nrf52_hal_wdt_default_handler
000189c4 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00018bdc l     F .text	00000016 os_main
20007070 l     O .bss	00002000 g_os_main_stack
20006f70 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00018eec l     F .text	0000005c os_dev_add
00018f48 l     F .text	00000026 os_dev_initialize
00018f6e l     F .text	00000020 os_dev_init
20009070 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20009078 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
00019498 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
000195ac l     F .text	00000010 os_msys_find_biggest_pool
000195bc l     F .text	0000002c os_msys_find_pool
00019634 l     F .text	00000044 os_msys_init_once
20009088 l     O .bss	00004900 os_msys_1_data
2000d988 l     O .bss	0000000c os_msys_1_mbuf_pool
2000d994 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
00019890 l     F .text	00000020 os_sanity_check_list_lock
000198b0 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00019d24 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
00019e14 l     F .text	0000004c os_deltatime
00019e60 l     F .text	0000005c os_time_tick
2000d9b8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0001a17c l       .text	00000000 SVC_User
0001a19a l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0001a23c l       .text	00000000 test1
0001a230 l       .text	00000000 loop1
0001a242 l       .text	00000000 res1
0001a25e l       .text	00000000 test2
0001a266 l       .text	00000000 done
0001a252 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0001a272 l       .text	00000000 test1
0001a26e l       .text	00000000 loop1
0001a280 l       .text	00000000 test2
0001a27c l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001a2ea l     F .text	000000c0 ui2a
0001a3aa l     F .text	00000020 i2a
0001a3ca l     F .text	00000030 a2d
0001a3fa l     F .text	00000036 a2i
0001a430 l     F .text	0000002a putf
0001a45c l     F .text	0000011c putchw
0001a578 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001a8fc l     F .text	00000004 stdin_read
0001a900 l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001a9b0 l     F .text	00000028 nrf52k_flash_wait_ready
0001a9d8 l     F .text	00000054 nrf52k_flash_erase_sector
0001aa2c l     F .text	00000004 nrf52k_flash_init
0001aa30 l     F .text	00000020 nrf52k_flash_sector_info
0001aa50 l     F .text	000000d0 nrf52k_flash_write
0001ab20 l     F .text	0000000e nrf52k_flash_read
00026b98 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001ab30 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001ad3c l     F .text	0000000a nrf_read_timer_cntr
0001ad48 l     F .text	000000b4 nrf_timer_set_ocmp
0001adfc l     F .text	0000000a nrf_timer_disable_ocmp
0001ae06 l     F .text	0000000a nrf_rtc_disable_ocmp
0001ae10 l     F .text	00000054 hal_timer_read_bsptimer
0001ae64 l     F .text	00000076 hal_timer_chk_queue
0001aeda l     F .text	0000002c hal_timer_irq_handler
00026bb4 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001b0a0 l     F .text	00000034 nrf52_periph_create_timers
0001b0d4 l     F .text	00000020 nrf52_periph_create_i2c
0001b0f4 l     F .text	00000020 nrf52_periph_create_spi
00026bcc l     O .text	0000000c hal_i2c1_cfg
00026bd8 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001b128 l     F .text	00000028 sensor_mgr_remove
0001b150 l     F .text	00000060 sensor_mgr_insert
0001b1b0 l     F .text	0000000a sensor_type_traits_empty
0001b1bc l     F .text	0000000c sensor_mgr_evq_set
0001b1f6 l     F .text	0000005c sensor_read_data_func
0001b254 l     F .text	00000048 sensor_base_ts_update_event
0001b29c l     F .text	00000050 sensor_up_timestamp
0001b324 l     F .text	000000a0 sensor_mgr_init
0001b590 l     F .text	0000007c sensor_mgr_wakeup_event
0001b3ee l     F .text	00000032 sensor_update_nextrun
0001b420 l     F .text	0000001e sensor_calc_nextrun_delta
0001b440 l     F .text	00000024 sensor_find_min_nextrun_sensor
0001b518 l     F .text	0000004a sensor_mgr_poll_bytype
0001b562 l     F .text	0000002e sensor_poll_per_type_trait
2000d9ec l     O .bss	00000078 sensor_notify_evt_area
2000da64 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000da80 l     O .bss	00000008 oc_sem
2000da88 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000da8c l     O .bss	0000000c hw_id
2000da98 l     O .bss	00000004 hw_id_len
2000daa0 l     O .bss	00000008 sensor_node_address
2000daa8 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
00026bf0 l     O .text	0000000c COLLECTOR_NODE_HW_ID
00026bfc l     O .text	0000003c SENSOR_NODE_HW_IDS
00026c98 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001b7b4 l     F .text	00000050 config_device
2000dae0 l     O .bss	00000014 adc_1_itf_temp_stub
2000daf8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001b860 l     F .text	00000004 temp_stub_close
0001b864 l     F .text	0000001c temp_stub_sensor_get_config
0001b880 l     F .text	00000026 temp_stub_open
0001b95c l     F .text	0000007c temp_stub_sensor_read
00026cdc l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001ba00 l     F .text	00000030 oc_buffer_tx
0001ba30 l     F .text	0000002c oc_buffer_rx
2000dbb8 l     O .bss	00000018 oc_inq
2000dbd0 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000dbe8 l     O .bss	000000c8 oc_client_cb_area
2000dcb0 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000dccc l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000dcd0 l     O .bss	0000001c oc_rep_objects
2000dcec l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001bb84 l     F .text	00000078 flash_map_read_mfg
2000dd1c l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001bcd8 l     F .text	00000094 mfg_seek_next_aux
0001bd6c l     F .text	00000070 mfg_read_mmr
0001bddc l     F .text	00000054 mfg_read_next_mmr
0001be30 l     F .text	0000003c mfg_open_flash_area
0001be6c l     F .text	00000044 mfg_read_tlv_body
0001bf38 l     F .text	0000004e mfg_read_mmr_refs
2000dd94 l     O .bss	00000001 mfg_initialized
2000dd98 l     O .bss	00000018 mfg_mmrs
2000ddb0 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001bf9e l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
0001ac8d l       .debug_str	00000000 
0001ace4 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
0001ad30 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0001ad38 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00015d7c g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
0000886c g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE
00008616 g     F .text	000000ba main
00009dfc g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
000191bc g     F .text	00000040 os_eventq_remove
0001a008 g     F .text	00000018 os_arch_init
0001a224 g     F .text	00000048 memcmp
00012542 g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
00014f20 g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
00011c70 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
000128b8 g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
000157b6 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
0001563e g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
00014a24 g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
00015dac g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
0000a574 g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
000091a8 g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
0001787e g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000ded0 g     O .bss	0000001c nrf52_hal_timer0
0000918e g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
0001b3e4 g     F .text	0000000a sensor_unlock
0000a95a g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
00011cc4 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
00008ffa g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
000198dc g     F .text	00000024 os_sanity_check_register
0001b8b4 g     F .text	0000007c temp_stub_init
0001997c g     F .text	00000054 os_sched_insert
2000ddb4 g     O .bss	00000001 g_silence_console
00012bd4 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
00015434 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001c03c g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
00015b9c g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
00008d66 g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
00014e66 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
00008ba4 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
0001bac0 g     F .text	00000020 oc_send_buffer
00011a46 g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E
0001a0b0 g     F .text	00000030 os_arch_start
0000e968 g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE
0001b6d8 g     F .text	0000001a is_standalone_node
00015318 g     F .text	00000008 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h48c974e346f24094E
000190a8 g     F .text	00000010 os_eventq_init
00016c6a g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
00012c8c g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
0001634e g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
00011cae g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
00008e5c g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
000159b8 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001b60c g     F .text	00000028 init_sensor_coap
000156ca g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE
0001bae0 g     F .text	0000004c oc_send_multicast_message
00012264 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
0000eaa2 g     F .text	000000a8 _ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E
00016c26 g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000def0 g     O .bss	00000034 sensor_mgr
00017c10 g     F .text	0000002c console_dump
0000ac5c g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E
00019aa8 g     F .text	00000078 os_sched_wakeup
0000ea26 g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE
00012b64 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
0001772e g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
00008bdc g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001bf9c g     F .text	00000002 _fini
00018ee0 g     F .text	0000000a os_cputime_get32
00011d74 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
000148c6 g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000ddb5 g     O .bss	00000001 g_console_input_ignore
00019f98 g     F .text	00000014 os_arch_ctx_sw
00012baa g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
00015370 g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E
0001a1e6 g     F .text	0000000c SysTick_Handler
0000ef80 g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE
0000f0ea g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E
0001b64c g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
00012664 g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
00011cda g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
00011b90 g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h1051abda59747a6bE
000094e0 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
00012bde g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
0001a2be g     F .text	0000001c strcmp
2000dde8 g     O .bss	00000050 g_idle_task
0000f7e0 g     F .text	000000c4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E
00019098 g     F .text	00000010 os_dev_reset
0000958c g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
00019bf8 g     F .text	00000010 os_sem_init
0000eb4a g     F .text	00000106 _ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E
00017b90 g     F .text	00000070 console_printhex
00014a90 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
0000e9b0 g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE
00026d9c g       .text	00000000 __exidx_start
0001b6bc g     F .text	0000001c is_collector_node
0001a286 g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
0001753c g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
00017b20 g     F .text	00000054 console_buffer
000190b8 g     F .text	0000000a os_eventq_inited
00017d58 g     F .text	0000000c sysinit_end
000155ec g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
00015a48 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
00015d24 g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000df88 g       .bss	00000000 __HeapBase
0000eec0 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E
0000948c g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
0001530a g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h8e5f04233c93701aE
000149f8 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
0000f218 g     F .text	00000128 .hidden _ZN3app5chip88on_start17h13652dc8e27bf6d4E
00014c00 g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001bc3c g     F .text	00000026 flash_area_read
00012b94 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001bb52 g     F .text	00000002 oc_register_ip4
000090b2 g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001bb54 g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
000118ee g     F .text	00000060 _ZN22piet_embedded_graphics7display18set_display_pixels17he48c5c43fd96ddebE
000154c2 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE
0001bfbc g     F .text	00000028 hal_flash_init
00019060 g     F .text	00000036 os_dev_close
00026d34 g     O .text	00000048 sysflash_map_dflt
0000f452 g     F .text	0000020c _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE
0001a9a4 g     F .text	0000000c hal_bsp_init
00008c88 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
0000f8a4 g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha9851d0b0cdc4725E
00012360 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00010082 g     F .text	00000192 _ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE
00009a26 g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
00012226 g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001c398 g     F .text	00000004 __aeabi_memcpy4
000187fc g     F .text	0000002c hal_spi_set_txrx_cb
0001c390 g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000ddb8 g     O .bss	00000004 console_is_midline
0001c390 g     F .text	00000006 __aeabi_memclr4
0000f0ba g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E
000080f8 g       .text	00000000 __isr_vector_end
000182f4 g     F .text	0000013c hal_i2c_master_read
00011a14 g     F .text	0000001a .hidden _ZN4core3ops8function6FnOnce9call_once17h59e116d6918016e9E
0001a5dc g     F .text	0000025c tfp_format
00015a78 g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E
00015988 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001b4b0 g     F .text	00000068 sensor_read
00009174 g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
0001c398 g     F .text	00000004 __aeabi_memcpy
0001c398 g     F .text	00000004 __aeabi_memcpy8
2000df24 g     O .bss	00000020 st_up_osco
0001a0e0 g     F .text	0000005c os_arch_os_start
0001b492 g     F .text	0000001e sensor_init
0000ad80 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E
20000000 g       .bss	00000000 _ram_start
00019f08 g     F .text	00000026 os_time_delay
000118d6 g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E
0001bb50 g     F .text	00000002 oc_register_gatt
20004a6c g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001c038 g     F .text	00000004 hal_bsp_hw_id_len
00018ea0 g     F .text	00000034 os_callout_wakeup_ticks
00019216 g     F .text	00000026 os_mqueue_get
00018134 g     F .text	00000098 hal_i2c_init
00011c58 g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h0340384168a45934E
00016af8 g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
0001753c g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
000089ac g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0002502d g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
00015958 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
00019ba8 g     F .text	00000022 os_sched
00008d78 g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
000123a6 g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001b1c8 g     F .text	0000002e sensor_mgr_match_bytype
0001227a g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
0000aadc g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
000196e4 g     F .text	00000014 os_mutex_init
00009066 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
00009db8 g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
0000f1b2 g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc3726000bdb855aE
2000ddc0 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
00008164  w    F .text	00000002 RTC1_IRQHandler
0001248c g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
000158c8 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
0001524a g     F .text	00000022 _ZN4core3cmp3Ord3min17hc89b724701767be9E
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
0000931c g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
00009462 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
00008c80 g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
00012da4 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
00019688 g     F .text	00000028 os_msys_get_pkthdr
0001b930 g     F .text	0000002c temp_stub_get_raw_temperature
00019b20 g     F .text	0000003c os_sched_os_timer_exp
0000efa6 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE
00018f90 g     F .text	00000040 os_dev_create
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
000198cc g     F .text	00000010 os_sanity_check_init
00015e0e g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
00015218 g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE
00018ed4 g     F .text	0000000c os_cputime_init
0000ac02 g     F .text	00000030 _ZN4core3any6TypeId2of17h3f51c8cccab069bdE
000191a4 g     F .text	00000018 os_eventq_run
00012844 g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
000196b0 g     F .text	00000034 os_msys_init
00014fc8 g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
0001545e g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
00019f8e g     F .text	0000000a timer_handler
00011e3e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
00015ba0 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
000093f2 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
00008cba g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
00015b98 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
00015dec g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
00014f9c g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
0001772e g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
00014c96 g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
0001a838 g     F .text	00000008 vfprintf
00014a7c g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
000123d2 g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
00008984 g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E
00012430 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
000192b6 g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
00015928 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
0000eed4 g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6e7fb991422ea45dE
00016ffa g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
000087d2 g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE
00015d80 g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
00019fbe g     F .text	0000000a os_arch_in_critical
0000e9a0 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E
0001996c g     F .text	00000010 os_sanity_init
0001772e g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
00018a80 g     F .text	0000004c __assert_func
0000ef5e g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E
000156b6 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
00014dbc g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00019556 g     F .text	0000001e os_memblock_put_from_cb
0001a140 g     F .text	00000014 os_set_env
00011a2e g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h63142b18dacbc787E
2000deac g     O .bss	00000004 g_os_last_ctx_sw_time
00012bf0 g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
00017cf0 g     F .text	00000048 console_printf
00012c06 g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
0000aa2c g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
000122a6 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
00012ab0 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
00015868 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
0001a154 g     F .text	00000006 os_arch_init_task_stack
0001bf28 g     F .text	00000010 mfg_open
0001772e g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
0001ba84 g     F .text	00000030 oc_ri_mem_init
000150dc g     F .text	0000013c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E
0000f18e g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h116a6636383259eeE
000097ee g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
0001a994 g     F .text	00000010 hal_bsp_flash_dev
0001bc64 g     F .text	00000070 flash_map_init
2000dec0 g     O .bss	00000004 g_os_time
000103b6 g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17h09fa961dda8dcb87E
0001a1f2 g     F .text	0000001e os_default_irq_asm
00018acc g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
00018734 g     F .text	00000068 hal_spi_disable
00012c4c g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E
00009146 g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001bb56 g     F .text	00000002 oc_register_lora
00019338 g     F .text	000000a8 os_mbuf_append
0001b804 g     F .text	0000005c temp_stub_create
0001bfe4 g     F .text	00000054 hal_flash_read
00017ad0 g     F .text	00000048 console_flush
00018d20 g     F .text	0000001a os_start
0001533a g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E
0001af18 g     F .text	00000060 hal_timer_init
00011cee g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
0001a910 g     F .text	00000010 rust_sysinit
00008164  w    F .text	00000002 I2S_IRQHandler
00017c00 g     F .text	00000010 console_printint
00019bcc g     F .text	0000002c os_sched_resort
00010bf4 g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE
00026b74 g     O .text	00000008 MemFile_methods
0001a8e4 g     F .text	00000018 fmemopen_w
00013a9c g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
000186b0 g     F .text	00000038 hal_spi_config
0001c38c  w    F .text	00000002 .hidden __aeabi_ldiv0
0001959c g     F .text	00000010 os_mempool_module_init
00019b9c g     F .text	0000000c os_sched_next_task
0000ed8e g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17hb4ffb829681b047bE
00017eee g     F .text	00000034 hal_gpio_read
00018d74 g     F .text	0000001a os_callout_init
00019678 g     F .text	00000010 os_msys_reset
0001a840 g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001c090 g     F .text	00000000 .hidden __aeabi_uldivmod
00019f30 g     F .text	00000038 os_gettimeofday
00017c7c g     F .text	0000001e console_write
000119e8 g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E
00015a18 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
00016ac2 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
000098ea g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
00018c00 g     F .text	00000070 os_init_idle_task
0001a020 g     F .text	0000008c os_arch_os_init
0000942a g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
00018c70 g     F .text	000000b0 os_init
2000de98 g     O .bss	00000008 g_os_mempool_list
000098e0 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
000122bc g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
00017c78 g     F .text	00000004 semihosting_console_init
0001bec2 g     F .text	0000001a mfg_seek_next_with_type
000197b0 g     F .text	000000e0 os_mutex_pend
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00017ecc g     F .text	00000022 hal_gpio_write
00008600 g     F .text	00000014 _start
0001239e g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
00012406 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001bf88 g     F .text	00000014 __wrap_coap_receive
00015898 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000ddbc g     O .bss	00000001 sysinit_active
0000ac78 g     F .text	00000108 _ZN8libchip814Chip8$LT$T$GT$3new17hca880a1e3fbd9a67E
00012cc8 g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
00014b14 g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
0001a8b4 g     F .text	0000002e memfile_write
0001c38c  w    F .text	00000002 .hidden __aeabi_idiv0
00018bf4 g     F .text	0000000c os_started
0000ac32 g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE
0001ba5c g     F .text	00000028 oc_buffer_init
00014a26 g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
0000940e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000dea0 g     O .bss	0000000c g_os_sanity_check_mu
000091b8 g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
000153c8 g     F .text	00000042 _ZN4core3ptr4read17h9c6a8e2989f962ccE
0000ed9e g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E
0001c390 g     F .text	00000006 __aeabi_memclr
0001c39c g     F .text	0000009a __aeabi_memset4
0000eeac g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E
00012e30 g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
00016aca g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
00012c1c g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E
00019ec8 g     F .text	00000040 os_time_advance
000186e8 g     F .text	0000004c hal_spi_enable
0001bef0 g     F .text	00000038 mfg_init
00014546 g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
000089ee g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc4148eaa15af1e8eE
2000de38 g     O .bss	00000050 g_os_main_task
0001c39c g     F .text	0000009a __aeabi_memset8
0001759a g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
0000f65e g     F .text	000000d4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE
00008c74 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
00026db4 g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20000148 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
0001610c g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
00008c02 g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
00017972 g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
00017d64 g     F .text	00000034 NVIC_Relocate
0001526c g     F .text	0000009e _ZN4core3cmp6min_by17hbd80813895a56a69E
00017d4c g     F .text	0000000c sysinit_start
00026b80 g     O .text	00000018 nrf52k_flash_dev
0001af78 g     F .text	000000f8 hal_timer_config
00014b90 g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
0001a8a0 g     F .text	00000014 vprintf
00009098 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
00017b18 g     F .text	00000008 disable_buffer
000156de g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E
2000de88 g     O .bss	00000004 g_os_started
00015d74 g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
20000144 g       .bssnz	00000000 __bssnz_end__
00018ffc g     F .text	00000020 os_dev_lookup
00009310 g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
00018a5c g     F .text	00000010 hal_watchdog_enable
2000dec4 g     O .bss	0000000c g_hal_os_tick
00015650 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E
00019fb8 g     F .text	00000006 os_arch_restore_sr
00018dcc g     F .text	00000078 os_callout_reset
000098f4 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001bedc g     F .text	0000000a mfg_read_tlv_flash_area
00012c68 g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
00019204 g     F .text	00000012 os_mqueue_init
000158f8 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
00014cc0 g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0001b8a6 g     F .text	0000000e temp_stub_default_cfg
00012c9c g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E
0000f8ac g     F .text	000000f6 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E
00008020 g       .imghdr	00000000 __text
00018d90 g     F .text	0000003c os_callout_stop
00008908 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E
000081c0 g     F .text	0000004c hal_system_clock_start
00019300 g     F .text	00000024 os_mbuf_free_chain
000091e4 g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
0001a920 g     F .text	00000030 mem_init_mbuf_pool
00012cc0 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
00011a36 g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E
00012bfa g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
00015662 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E
000181cc g     F .text	00000128 hal_i2c_master_write
0000add6 g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E
00008164  w    F .text	00000002 QDEC_IRQHandler
0000f1ec g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE
0000ac48 g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00012e12 g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
0001207a g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
00011b58 g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E
000191fc g     F .text	00000008 os_eventq_dflt_get
0001b3cc g     F .text	00000018 sensor_lock
0001194e g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE
00011c86 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
00017ca4 g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
00019324 g     F .text	00000014 os_mbuf_len
000192ec g     F .text	00000014 os_mbuf_free
00012290 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
00012850 g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
0000ae28 g     F .text	00003b40 _ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE
00017c9a g     F .text	00000008 console_blocking_mode
0000a59a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
00009b52 g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
00011c9a g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0001b114 g     F .text	00000010 nrf52_periph_create
00019900 g     F .text	0000006c os_sanity_run
0000841c g     F .text	00000010 SystemCoreClockUpdate
0000f172 g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E
00014a96 g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
00014bdc g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
0000ec50 g     F .text	0000007e _ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E
00019510 g     F .text	00000014 os_mempool_init
00026b7c g     O .text	00000004 stdout
00011bf0 g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h27d5684c70bb37e8E
0000ab8c g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
00018fd0 g     F .text	0000002c os_dev_initialize_all
00008d98 g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
0000f7cc g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E
0001568c g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
00018b64 g     F .text	00000078 os_idle_task
00008e4c g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
000157ce g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
00009970 g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
0000f732 g     F .text	0000009a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE
000167c0 g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001bbfc g     F .text	00000040 flash_area_open
00008164 g     F .text	00000002 Default_Handler
00015d72 g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
0000f098 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E
00009336 g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
000195e8 g     F .text	0000004c os_msys_register
000091ee g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000d9b0 g     O .bss	00000004 g_os_sanity_check_list
0000a990 g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
000123dc g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
00011fb6 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
0001879c g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001b308 g     F .text	00000010 sensor_mgr_unlock
2000df80 g     O .bss	00000004 flash_map_entries
000174de g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
000157d8 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
0001bb58 g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
00014f10 g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
0000a5c4 g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
00008164  w    F .text	00000002 GPIOTE_IRQHandler
00012554 g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001beb0 g     F .text	00000012 mfg_seek_next
0001285a g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
2000011c g     O .data	00000008 g_os_sleep_list
00016530 g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
0001927a g     F .text	0000000a os_mbuf_pool_init
2000de90 g     O .bss	00000008 g_callout_list
00019a0c g     F .text	0000000c os_sched_set_current_task
00018e44 g     F .text	0000005c os_callout_tick
0000ecce g     F .text	000000c0 _ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE
0000920a g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
000124bc g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
0000f076 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E
000189e4 g     F .text	00000078 hal_watchdog_init
2000deb4 g     O .bss	00000001 g_task_id
00017804 g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
0000a592 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
0001901c g     F .text	00000044 os_dev_open
2000deb0 g     O .bss	00000004 g_current_task
00015b94 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
0001574a g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
00008c68 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
000184a0 g     F .text	00000018 nrf52_spi0_irq_handler
0001b3c4 g     F .text	00000008 sensor_pkg_init
0001b9d8 g     F .text	00000028 temp_stub_config
0001923c g     F .text	0000003e os_mqueue_put
00017972 g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
00018828 g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
00015320 g     F .text	0000001a _ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3601a500030acd5E
00019a00 g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00012acc g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001bcd4 g     F .text	00000002 modlog_init
000188d4 g     F .text	000000e0 hal_spi_txrx_noblock
00016ad2 g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
00009184 g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
00008fd6 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
000199d0 g     F .text	00000030 os_sched_ctx_sw_hook
0001b464 g     F .text	0000002e sensor_mgr_register
00011c14 g     F .text	00000044 .hidden _ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE
00015d24 g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
0000f406 g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hd3173c320d2551cfE
00016370 g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
00008154  w    F .text	00000002 NMI_Handler
00014a0e g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
0000ef3c g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE
00009286 g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
00008e54 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
00012258 g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
00019284 g     F .text	00000032 os_mbuf_get
2000deb8 g     O .bss	00000008 g_os_task_list
00008a58 g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
0001603a g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
0001a864 g     F .text	0000003a vsnprintf
000138e4 g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
0000f1a0 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1647783578bb3807E
000196f8 g     F .text	000000b8 os_mutex_release
00012862 g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
0000f114 g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E
00012616 g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001b318 g     F .text	0000000c sensor_mgr_evq_get
00014f44 g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
000123ba g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
2000de8c g     O .bss	00000004 g_os_idle_ctr
00017e68 g     F .text	0000002c hal_gpio_init_in
00012356 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
000098fe g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
0001b124 g     F .text	00000002 sensor_dev_create
0000ab9a g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E
00011eda g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
00008a0c g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
00017e94 g     F .text	00000038 hal_gpio_init_out
0000f410 g     F .text	00000042 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E
00008e76 g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
00011fea g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
0000950a g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
00019ebc g     F .text	0000000c os_time_get
00015d74 g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
0000a506 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
00019574 g     F .text	00000026 os_memblock_put
00013974 g     F .text	00000128 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
00019a18 g     F .text	00000090 os_sched_sleep
00012394 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001b2ec g     F .text	0000001c sensor_mgr_lock
0001c0c0 g     F .text	000002cc .hidden __udivmoddi4
00011ca6 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
0001ac9c g     F .text	000000a0 os_tick_init
00014b3e g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
00015d6e g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
000090f8 g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
00019b5c g     F .text	00000040 os_sched_wakeup_ticks
00009446 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001b070 g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
00017f9c g     F .text	00000028 hal_gpio_irq_enable
0001bab4 g     F .text	0000000c oc_evq_set
0001b634 g     F .text	00000018 is_sensor_node
000174de g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
0001bb2c g     F .text	00000024 oc_init
00017658 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
00017658 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
00009824 g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
00016cae g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
0000abc8 g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E
00015838 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E
2000df48 g     O .bss	00000018 sensor_base_ts
0001787e g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
00015526 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E
00026db4 g       .ARM.exidx	00000000 __etext
0001759a g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
00014fd6 g     F .text	00000106 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E
00017d38 g     F .text	0000000c console_get_ticks
0000e98c g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6a25aae91f88a8abE
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0000913c g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
0000eee6 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E
00011988 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE
20000108 g     O .data	00000004 hal_twi_i2c1
0000ea4c g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE
00019d3c g     F .text	000000d8 os_task_init
00009070 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
00011f9c g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
00012384 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
000159e8 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
000119c0 g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE
00019c08 g     F .text	00000064 os_sem_release
0000efc8 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E
0001c39c g     F .text	0000009a __aeabi_memset
0000f01e g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE
000193e0 g     F .text	000000b8 os_mbuf_dup
0001a1a0 g     F .text	00000046 PendSV_Handler
00012cac g     F .text	00000014 _ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E
0001a15a g     F .text	00000046 SVC_Handler
000089f8 g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E
00019fac g     F .text	0000000c os_arch_save_sr
00008164  w    F .text	00000002 PWM2_IRQHandler
0000815c  w    F .text	00000002 UsageFault_Handler
0001af08 g     F .text	00000010 nrf52_timer0_irq_handler
00019fc8 g     F .text	00000040 os_arch_task_stack_init
2000df88 g       .bss	00000000 __bss_end__
00019524 g     F .text	00000032 os_memblock_get
0000f1c0 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E
2000df84 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
000120b4 g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
00011d7a g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
00018a6c g     F .text	00000014 hal_watchdog_tickle
0001912a g     F .text	0000007a os_eventq_get
0001c070 g     F .text	00000020 sprintf
00019f68 g     F .text	00000026 os_time_ms_to_ticks
00008a1c g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
0000a9f6 g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000d9e8 g     O .bss	00000004 os_flags
0001bb5c g     F .text	00000028 oc_rep_init
0001a26c g     F .text	0000001a memcpy
0001a950 g     F .text	00000044 sysinit_app
000125fe g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E
00015808 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
00014556 g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
00012b7e g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
00017c3c g     F .text	0000003c console_out_nolock
2000df60 g     O .bss	00000020 oc_transports
00017f24 g     F .text	00000078 hal_gpio_irq_init
0000edf2 g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E
0001a2da g     F .text	00000010 strlen
00019c6c g     F .text	000000b8 os_sem_pend
00011bdc g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he2e30225e051e80dE
0001ac04 g     F .text	00000098 os_tick_idle
00012bc4 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00011a02 g     F .text	00000012 _ZN4core3mem4swap17h21afb25e2d195463E
00000000 g       .svc_table	00000000 SVC_Table
00012d36 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
2000fe50 g       *ABS*	00000000 __HeapLimit
00018d3c g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
000094b6 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
0000a55a g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
00014d12 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
000148c2 g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
00008158  w    F .text	00000002 MemoryManagement_Handler
00017658 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
000190c2 g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
00009934 g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
00011ec8 g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
0001bee6 g     F .text	0000000a mfg_read_tlv_mmr_ref
00008c50 g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
0001b6f4 g     F .text	000000c0 sensor_network_init
00017658 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
0001540a g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
00008cfc g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
00012c34 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0001a15b 	.word	0x0001a15b
	...
    8058:	0001a1a1 	.word	0x0001a1a1
    805c:	0001a1e7 	.word	0x0001a1e7
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000df88 	.word	0x2000df88
    ldr    r1, =__etext
    8138:	00026db4 	.word	0x00026db4
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000df88 	.word	0x2000df88
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f00f fbf9 	bl	17d64 <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f010 fb34 	bl	18c70 <os_init>
    os_start();
    8608:	f010 fb8a 	bl	18d20 <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f000 f9f8 	bl	8a0c <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f000 ffb5 	bl	958c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f24c 4136 	movw	r1, #50230	; 0xc436
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f24c 436c 	movw	r3, #50284	; 0xc46c
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f000 fae2 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f008 fad8 	bl	10bf4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f24c 413e 	movw	r1, #50238	; 0xc43e
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f24c 437c 	movw	r3, #50300	; 0xc47c
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f000 fad1 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f006 fdd9 	bl	f218 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f24c 418c 	movw	r1, #50316	; 0xc48c
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f24c 4398 	movw	r3, #50328	; 0xc498
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f000 fac0 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f000 fb76 	bl	8d78 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f24c 4146 	movw	r1, #50246	; 0xc446
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f006 fb7c 	bl	ed9e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f000 fb5b 	bl	8d66 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f24c 414e 	movw	r1, #50254	; 0xc44e
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f000 fa9b 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f24c 41c8 	movw	r1, #50376	; 0xc4c8
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f000 fd08 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00d fb3f 	bl	15d6e <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f24c 40ce 	movw	r0, #50382	; 0xc4ce
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f000 fcf7 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00d fb2f 	bl	15d74 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00d fb2d 	bl	15d7c <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f24c 40d5 	movw	r0, #50389	; 0xc4d5
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f000 fce0 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f000 fd02 	bl	9146 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f24c 40d8 	movw	r0, #50392	; 0xc4d8
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f000 fcd3 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f000 fd0d 	bl	9174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f24c 40de 	movw	r0, #50398	; 0xc4de
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f000 fcc7 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f000 fd0a 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f000 fd06 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00d faf7 	bl	15d74 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f002 fa4f 	bl	ac32 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f24c 41e0 	movw	r1, #50400	; 0xc4e0
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f000 f903 	bl	89ac <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f000 fca1 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f24c 40de 	movw	r0, #50398	; 0xc4de
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f000 fc99 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f000 fcdc 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE>:
    87d2:	b580      	push	{r7, lr}
    87d4:	b08a      	sub	sp, #40	; 0x28
    87d6:	9104      	str	r1, [sp, #16]
    87d8:	9205      	str	r2, [sp, #20]
    87da:	9308      	str	r3, [sp, #32]
    87dc:	2100      	movs	r1, #0
    87de:	f88d 101e 	strb.w	r1, [sp, #30]
    87e2:	f88d 101f 	strb.w	r1, [sp, #31]
    87e6:	2101      	movs	r1, #1
    87e8:	f88d 101f 	strb.w	r1, [sp, #31]
    87ec:	f88d 101e 	strb.w	r1, [sp, #30]
    87f0:	9904      	ldr	r1, [sp, #16]
    87f2:	2900      	cmp	r1, #0
    87f4:	9303      	str	r3, [sp, #12]
    87f6:	9002      	str	r0, [sp, #8]
    87f8:	d001      	beq.n	87fe <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x2c>
    87fa:	e7ff      	b.n	87fc <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x2a>
    87fc:	e004      	b.n	8808 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x36>
    87fe:	2000      	movs	r0, #0
    8800:	9902      	ldr	r1, [sp, #8]
    8802:	6008      	str	r0, [r1, #0]
    8804:	e01f      	b.n	8846 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x74>
    8806:	defe      	udf	#254	; 0xfe
    8808:	2000      	movs	r0, #0
    880a:	f88d 001f 	strb.w	r0, [sp, #31]
    880e:	9905      	ldr	r1, [sp, #20]
    8810:	9109      	str	r1, [sp, #36]	; 0x24
    8812:	f88d 001e 	strb.w	r0, [sp, #30]
    8816:	9106      	str	r1, [sp, #24]
    8818:	9906      	ldr	r1, [sp, #24]
    881a:	9803      	ldr	r0, [sp, #12]
    881c:	f002 fa1e 	bl	ac5c <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E>
    8820:	9001      	str	r0, [sp, #4]
    8822:	9100      	str	r1, [sp, #0]
    8824:	e7ff      	b.n	8826 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x54>
    8826:	9801      	ldr	r0, [sp, #4]
    8828:	9902      	ldr	r1, [sp, #8]
    882a:	6048      	str	r0, [r1, #4]
    882c:	9a00      	ldr	r2, [sp, #0]
    882e:	608a      	str	r2, [r1, #8]
    8830:	2301      	movs	r3, #1
    8832:	600b      	str	r3, [r1, #0]
    8834:	e007      	b.n	8846 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x74>
    8836:	9804      	ldr	r0, [sp, #16]
    8838:	2801      	cmp	r0, #1
    883a:	d00c      	beq.n	8856 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x84>
    883c:	e015      	b.n	886a <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x98>
    883e:	2000      	movs	r0, #0
    8840:	f88d 001e 	strb.w	r0, [sp, #30]
    8844:	e7f7      	b.n	8836 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x64>
    8846:	f89d 001e 	ldrb.w	r0, [sp, #30]
    884a:	07c0      	lsls	r0, r0, #31
    884c:	2800      	cmp	r0, #0
    884e:	d1f6      	bne.n	883e <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x6c>
    8850:	e7f1      	b.n	8836 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x64>
    8852:	b00a      	add	sp, #40	; 0x28
    8854:	bd80      	pop	{r7, pc}
    8856:	f89d 001f 	ldrb.w	r0, [sp, #31]
    885a:	07c0      	lsls	r0, r0, #31
    885c:	2800      	cmp	r0, #0
    885e:	d0f8      	beq.n	8852 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x80>
    8860:	e7ff      	b.n	8862 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x90>
    8862:	2000      	movs	r0, #0
    8864:	f88d 001f 	strb.w	r0, [sp, #31]
    8868:	e7f3      	b.n	8852 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x80>
    886a:	e7f2      	b.n	8852 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x80>

0000886c <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE>:
    886c:	b580      	push	{r7, lr}
    886e:	b08c      	sub	sp, #48	; 0x30
    8870:	9103      	str	r1, [sp, #12]
    8872:	9204      	str	r2, [sp, #16]
    8874:	930a      	str	r3, [sp, #40]	; 0x28
    8876:	2100      	movs	r1, #0
    8878:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    887c:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    8880:	2101      	movs	r1, #1
    8882:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    8886:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    888a:	9903      	ldr	r1, [sp, #12]
    888c:	2900      	cmp	r1, #0
    888e:	9302      	str	r3, [sp, #8]
    8890:	9001      	str	r0, [sp, #4]
    8892:	d001      	beq.n	8898 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x2c>
    8894:	e7ff      	b.n	8896 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x2a>
    8896:	e004      	b.n	88a2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x36>
    8898:	2000      	movs	r0, #0
    889a:	9901      	ldr	r1, [sp, #4]
    889c:	6008      	str	r0, [r1, #0]
    889e:	e020      	b.n	88e2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x76>
    88a0:	defe      	udf	#254	; 0xfe
    88a2:	2000      	movs	r0, #0
    88a4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    88a8:	9904      	ldr	r1, [sp, #16]
    88aa:	910b      	str	r1, [sp, #44]	; 0x2c
    88ac:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    88b0:	9108      	str	r1, [sp, #32]
    88b2:	9a08      	ldr	r2, [sp, #32]
    88b4:	a805      	add	r0, sp, #20
    88b6:	9902      	ldr	r1, [sp, #8]
    88b8:	f002 f9c6 	bl	ac48 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE>
    88bc:	e7ff      	b.n	88be <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x52>
    88be:	9805      	ldr	r0, [sp, #20]
    88c0:	9906      	ldr	r1, [sp, #24]
    88c2:	9a07      	ldr	r2, [sp, #28]
    88c4:	9b01      	ldr	r3, [sp, #4]
    88c6:	60da      	str	r2, [r3, #12]
    88c8:	6099      	str	r1, [r3, #8]
    88ca:	6058      	str	r0, [r3, #4]
    88cc:	2001      	movs	r0, #1
    88ce:	6018      	str	r0, [r3, #0]
    88d0:	e007      	b.n	88e2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x76>
    88d2:	9803      	ldr	r0, [sp, #12]
    88d4:	2801      	cmp	r0, #1
    88d6:	d00c      	beq.n	88f2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x86>
    88d8:	e015      	b.n	8906 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x9a>
    88da:	2000      	movs	r0, #0
    88dc:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    88e0:	e7f7      	b.n	88d2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x66>
    88e2:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    88e6:	07c0      	lsls	r0, r0, #31
    88e8:	2800      	cmp	r0, #0
    88ea:	d1f6      	bne.n	88da <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x6e>
    88ec:	e7f1      	b.n	88d2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x66>
    88ee:	b00c      	add	sp, #48	; 0x30
    88f0:	bd80      	pop	{r7, pc}
    88f2:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    88f6:	07c0      	lsls	r0, r0, #31
    88f8:	2800      	cmp	r0, #0
    88fa:	d0f8      	beq.n	88ee <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x82>
    88fc:	e7ff      	b.n	88fe <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x92>
    88fe:	2000      	movs	r0, #0
    8900:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    8904:	e7f3      	b.n	88ee <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x82>
    8906:	e7f2      	b.n	88ee <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x82>

00008908 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E>:
    8908:	b085      	sub	sp, #20
    890a:	9000      	str	r0, [sp, #0]
    890c:	2000      	movs	r0, #0
    890e:	f88d 000b 	strb.w	r0, [sp, #11]
    8912:	f88d 000a 	strb.w	r0, [sp, #10]
    8916:	2001      	movs	r0, #1
    8918:	f88d 000b 	strb.w	r0, [sp, #11]
    891c:	f88d 000a 	strb.w	r0, [sp, #10]
    8920:	9800      	ldr	r0, [sp, #0]
    8922:	2800      	cmp	r0, #0
    8924:	4601      	mov	r1, r0
    8926:	bf18      	it	ne
    8928:	2101      	movne	r1, #1
    892a:	2800      	cmp	r0, #0
    892c:	d001      	beq.n	8932 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x2a>
    892e:	e7ff      	b.n	8930 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x28>
    8930:	e005      	b.n	893e <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x36>
    8932:	2000      	movs	r0, #0
    8934:	f88d 000a 	strb.w	r0, [sp, #10]
    8938:	9001      	str	r0, [sp, #4]
    893a:	e007      	b.n	894c <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x44>
    893c:	defe      	udf	#254	; 0xfe
    893e:	2000      	movs	r0, #0
    8940:	f88d 000b 	strb.w	r0, [sp, #11]
    8944:	9800      	ldr	r0, [sp, #0]
    8946:	9004      	str	r0, [sp, #16]
    8948:	9001      	str	r0, [sp, #4]
    894a:	e7ff      	b.n	894c <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x44>
    894c:	f89d 000a 	ldrb.w	r0, [sp, #10]
    8950:	07c0      	lsls	r0, r0, #31
    8952:	2800      	cmp	r0, #0
    8954:	d104      	bne.n	8960 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x58>
    8956:	e7ff      	b.n	8958 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x50>
    8958:	9800      	ldr	r0, [sp, #0]
    895a:	2800      	cmp	r0, #0
    895c:	d107      	bne.n	896e <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x66>
    895e:	e010      	b.n	8982 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x7a>
    8960:	2000      	movs	r0, #0
    8962:	f88d 000a 	strb.w	r0, [sp, #10]
    8966:	e7f7      	b.n	8958 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x50>
    8968:	9801      	ldr	r0, [sp, #4]
    896a:	b005      	add	sp, #20
    896c:	4770      	bx	lr
    896e:	f89d 000b 	ldrb.w	r0, [sp, #11]
    8972:	07c0      	lsls	r0, r0, #31
    8974:	2800      	cmp	r0, #0
    8976:	d0f7      	beq.n	8968 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x60>
    8978:	e7ff      	b.n	897a <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x72>
    897a:	2000      	movs	r0, #0
    897c:	f88d 000b 	strb.w	r0, [sp, #11]
    8980:	e7f2      	b.n	8968 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x60>
    8982:	e7f1      	b.n	8968 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x60>

00008984 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E>:
    8984:	b084      	sub	sp, #16
    8986:	9002      	str	r0, [sp, #8]
    8988:	6801      	ldr	r1, [r0, #0]
    898a:	2900      	cmp	r1, #0
    898c:	9000      	str	r0, [sp, #0]
    898e:	d001      	beq.n	8994 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x10>
    8990:	e7ff      	b.n	8992 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0xe>
    8992:	e003      	b.n	899c <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x18>
    8994:	2000      	movs	r0, #0
    8996:	9001      	str	r0, [sp, #4]
    8998:	e005      	b.n	89a6 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x22>
    899a:	defe      	udf	#254	; 0xfe
    899c:	9800      	ldr	r0, [sp, #0]
    899e:	1d01      	adds	r1, r0, #4
    89a0:	9103      	str	r1, [sp, #12]
    89a2:	9101      	str	r1, [sp, #4]
    89a4:	e7ff      	b.n	89a6 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x22>
    89a6:	9801      	ldr	r0, [sp, #4]
    89a8:	b004      	add	sp, #16
    89aa:	4770      	bx	lr

000089ac <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E>:
    89ac:	b084      	sub	sp, #16
    89ae:	9002      	str	r0, [sp, #8]
    89b0:	9802      	ldr	r0, [sp, #8]
    89b2:	2800      	cmp	r0, #0
    89b4:	4602      	mov	r2, r0
    89b6:	bf18      	it	ne
    89b8:	2201      	movne	r2, #1
    89ba:	2800      	cmp	r0, #0
    89bc:	9101      	str	r1, [sp, #4]
    89be:	d001      	beq.n	89c4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x18>
    89c0:	e7ff      	b.n	89c2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x16>
    89c2:	e009      	b.n	89d8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x2c>
    89c4:	f24c 40f0 	movw	r0, #50416	; 0xc4f0
    89c8:	f2c0 0001 	movt	r0, #1
    89cc:	212b      	movs	r1, #43	; 0x2b
    89ce:	9a01      	ldr	r2, [sp, #4]
    89d0:	f00d f9d6 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    89d4:	defe      	udf	#254	; 0xfe
    89d6:	defe      	udf	#254	; 0xfe
    89d8:	9802      	ldr	r0, [sp, #8]
    89da:	9003      	str	r0, [sp, #12]
    89dc:	9902      	ldr	r1, [sp, #8]
    89de:	2900      	cmp	r1, #0
    89e0:	9000      	str	r0, [sp, #0]
    89e2:	d003      	beq.n	89ec <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x40>
    89e4:	e7ff      	b.n	89e6 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x3a>
    89e6:	9800      	ldr	r0, [sp, #0]
    89e8:	b004      	add	sp, #16
    89ea:	4770      	bx	lr
    89ec:	e7fb      	b.n	89e6 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x3a>

000089ee <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc4148eaa15af1e8eE>:
    89ee:	b081      	sub	sp, #4
    89f0:	2100      	movs	r1, #0
    89f2:	6001      	str	r1, [r0, #0]
    89f4:	b001      	add	sp, #4
    89f6:	4770      	bx	lr

000089f8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E>:
    89f8:	b580      	push	{r7, lr}
    89fa:	b082      	sub	sp, #8
    89fc:	9001      	str	r0, [sp, #4]
    89fe:	f7ff ff83 	bl	8908 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E>
    8a02:	9000      	str	r0, [sp, #0]
    8a04:	e7ff      	b.n	8a06 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E+0xe>
    8a06:	9800      	ldr	r0, [sp, #0]
    8a08:	b002      	add	sp, #8
    8a0a:	bd80      	pop	{r7, pc}

00008a0c <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    8a0c:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    8a0e:	f011 ff7f 	bl	1a910 <rust_sysinit>
    8a12:	e7ff      	b.n	8a14 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    8a14:	f000 fbb6 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8a18:	e7ff      	b.n	8a1a <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    8a1a:	bd80      	pop	{r7, pc}

00008a1c <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    8a1c:	b580      	push	{r7, lr}
    8a1e:	b086      	sub	sp, #24
    8a20:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    8a22:	7801      	ldrb	r1, [r0, #0]
    8a24:	07ca      	lsls	r2, r1, #31
    8a26:	2a00      	cmp	r2, #0
    8a28:	9000      	str	r0, [sp, #0]
    8a2a:	d006      	beq.n	8a3a <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    8a2c:	e7ff      	b.n	8a2e <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    8a2e:	9800      	ldr	r0, [sp, #0]
    8a30:	6841      	ldr	r1, [r0, #4]
    8a32:	9103      	str	r1, [sp, #12]
    8a34:	9101      	str	r1, [sp, #4]
        match self.rep {
    8a36:	e00c      	b.n	8a52 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    8a38:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    8a3a:	9800      	ldr	r0, [sp, #0]
    8a3c:	6841      	ldr	r1, [r0, #4]
    8a3e:	6882      	ldr	r2, [r0, #8]
    8a40:	9104      	str	r1, [sp, #16]
    8a42:	9205      	str	r2, [sp, #20]
    8a44:	4608      	mov	r0, r1
    8a46:	4611      	mov	r1, r2
    8a48:	f009 fca4 	bl	12394 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8a4c:	9001      	str	r0, [sp, #4]
    8a4e:	e7ff      	b.n	8a50 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    8a50:	e7ff      	b.n	8a52 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    8a52:	9801      	ldr	r0, [sp, #4]
    8a54:	b006      	add	sp, #24
    8a56:	bd80      	pop	{r7, pc}

00008a58 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    8a58:	b5b0      	push	{r4, r5, r7, lr}
    8a5a:	b0b2      	sub	sp, #200	; 0xc8
    8a5c:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    8a5e:	7801      	ldrb	r1, [r0, #0]
    8a60:	07ca      	lsls	r2, r1, #31
    8a62:	2a00      	cmp	r2, #0
    8a64:	900e      	str	r0, [sp, #56]	; 0x38
    8a66:	d005      	beq.n	8a74 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    8a68:	e7ff      	b.n	8a6a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    8a6a:	980e      	ldr	r0, [sp, #56]	; 0x38
    8a6c:	6841      	ldr	r1, [r0, #4]
    8a6e:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    8a70:	e096      	b.n	8ba0 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    8a72:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    8a74:	980e      	ldr	r0, [sp, #56]	; 0x38
    8a76:	6841      	ldr	r1, [r0, #4]
    8a78:	6882      	ldr	r2, [r0, #8]
    8a7a:	912b      	str	r1, [sp, #172]	; 0xac
    8a7c:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    8a7e:	4608      	mov	r0, r1
    8a80:	4611      	mov	r1, r2
    8a82:	f000 faba 	bl	8ffa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    8a86:	9011      	str	r0, [sp, #68]	; 0x44
    8a88:	e7ff      	b.n	8a8a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    8a8a:	f24c 5020 	movw	r0, #50464	; 0xc520
    8a8e:	f2c0 0001 	movt	r0, #1
    8a92:	6800      	ldr	r0, [r0, #0]
    8a94:	a911      	add	r1, sp, #68	; 0x44
    8a96:	910f      	str	r1, [sp, #60]	; 0x3c
    8a98:	9010      	str	r0, [sp, #64]	; 0x40
    8a9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8a9c:	902d      	str	r0, [sp, #180]	; 0xb4
    8a9e:	9910      	ldr	r1, [sp, #64]	; 0x40
    8aa0:	912e      	str	r1, [sp, #184]	; 0xb8
    8aa2:	900d      	str	r0, [sp, #52]	; 0x34
    8aa4:	910c      	str	r1, [sp, #48]	; 0x30
    8aa6:	f000 fc46 	bl	9336 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    8aaa:	900b      	str	r0, [sp, #44]	; 0x2c
    8aac:	e7ff      	b.n	8aae <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    8aae:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8ab0:	07c1      	lsls	r1, r0, #31
    8ab2:	2900      	cmp	r1, #0
    8ab4:	d001      	beq.n	8aba <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    8ab6:	e7ff      	b.n	8ab8 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    8ab8:	e072      	b.n	8ba0 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    8aba:	f24c 5078 	movw	r0, #50552	; 0xc578
    8abe:	f2c0 0001 	movt	r0, #1
    8ac2:	6801      	ldr	r1, [r0, #0]
    8ac4:	980d      	ldr	r0, [sp, #52]	; 0x34
    8ac6:	9021      	str	r0, [sp, #132]	; 0x84
    8ac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8aca:	9222      	str	r2, [sp, #136]	; 0x88
    8acc:	f24c 538c 	movw	r3, #50572	; 0xc58c
    8ad0:	f2c0 0301 	movt	r3, #1
    8ad4:	681b      	ldr	r3, [r3, #0]
    8ad6:	f24c 5c90 	movw	ip, #50576	; 0xc590
    8ada:	f2c0 0c01 	movt	ip, #1
    8ade:	f8dc c000 	ldr.w	ip, [ip]
    8ae2:	46ee      	mov	lr, sp
    8ae4:	2400      	movs	r4, #0
    8ae6:	f8ce 4000 	str.w	r4, [lr]
    8aea:	a823      	add	r0, sp, #140	; 0x8c
    8aec:	2201      	movs	r2, #1
    8aee:	910a      	str	r1, [sp, #40]	; 0x28
    8af0:	4619      	mov	r1, r3
    8af2:	4663      	mov	r3, ip
    8af4:	f000 f856 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8af8:	e7ff      	b.n	8afa <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    8afa:	a821      	add	r0, sp, #132	; 0x84
    8afc:	901e      	str	r0, [sp, #120]	; 0x78
    8afe:	a822      	add	r0, sp, #136	; 0x88
    8b00:	901f      	str	r0, [sp, #124]	; 0x7c
    8b02:	a823      	add	r0, sp, #140	; 0x8c
    8b04:	9020      	str	r0, [sp, #128]	; 0x80
    8b06:	981e      	ldr	r0, [sp, #120]	; 0x78
    8b08:	902f      	str	r0, [sp, #188]	; 0xbc
    8b0a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8b0c:	9130      	str	r1, [sp, #192]	; 0xc0
    8b0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    8b10:	9231      	str	r2, [sp, #196]	; 0xc4
    8b12:	f249 13ef 	movw	r3, #37359	; 0x91ef
    8b16:	f2c0 0300 	movt	r3, #0
    8b1a:	9109      	str	r1, [sp, #36]	; 0x24
    8b1c:	4619      	mov	r1, r3
    8b1e:	9208      	str	r2, [sp, #32]
    8b20:	f000 fcb4 	bl	948c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8b24:	9007      	str	r0, [sp, #28]
    8b26:	9106      	str	r1, [sp, #24]
    8b28:	e7ff      	b.n	8b2a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    8b2a:	f249 11ef 	movw	r1, #37359	; 0x91ef
    8b2e:	f2c0 0100 	movt	r1, #0
    8b32:	9809      	ldr	r0, [sp, #36]	; 0x24
    8b34:	f000 fcaa 	bl	948c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8b38:	9005      	str	r0, [sp, #20]
    8b3a:	9104      	str	r1, [sp, #16]
    8b3c:	e7ff      	b.n	8b3e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    8b3e:	f246 314f 	movw	r1, #25423	; 0x634f
    8b42:	f2c0 0101 	movt	r1, #1
    8b46:	9808      	ldr	r0, [sp, #32]
    8b48:	f000 fcca 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8b4c:	9003      	str	r0, [sp, #12]
    8b4e:	9102      	str	r1, [sp, #8]
    8b50:	e7ff      	b.n	8b52 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    8b52:	9807      	ldr	r0, [sp, #28]
    8b54:	9018      	str	r0, [sp, #96]	; 0x60
    8b56:	9906      	ldr	r1, [sp, #24]
    8b58:	9119      	str	r1, [sp, #100]	; 0x64
    8b5a:	9a05      	ldr	r2, [sp, #20]
    8b5c:	921a      	str	r2, [sp, #104]	; 0x68
    8b5e:	9b04      	ldr	r3, [sp, #16]
    8b60:	931b      	str	r3, [sp, #108]	; 0x6c
    8b62:	f8dd c00c 	ldr.w	ip, [sp, #12]
    8b66:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    8b6a:	f8dd e008 	ldr.w	lr, [sp, #8]
    8b6e:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    8b72:	466c      	mov	r4, sp
    8b74:	2503      	movs	r5, #3
    8b76:	6025      	str	r5, [r4, #0]
    8b78:	a812      	add	r0, sp, #72	; 0x48
    8b7a:	ab18      	add	r3, sp, #96	; 0x60
    8b7c:	990a      	ldr	r1, [sp, #40]	; 0x28
    8b7e:	462a      	mov	r2, r5
    8b80:	f000 f810 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8b84:	e7ff      	b.n	8b86 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    8b86:	f24c 50ac 	movw	r0, #50604	; 0xc5ac
    8b8a:	f2c0 0001 	movt	r0, #1
    8b8e:	f00d f8f0 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8b92:	9001      	str	r0, [sp, #4]
    8b94:	e7ff      	b.n	8b96 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    8b96:	a812      	add	r0, sp, #72	; 0x48
    8b98:	9901      	ldr	r1, [sp, #4]
    8b9a:	f00d f927 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8b9e:	defe      	udf	#254	; 0xfe
    }
    8ba0:	b032      	add	sp, #200	; 0xc8
    8ba2:	bdb0      	pop	{r4, r5, r7, pc}

00008ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    8ba4:	b580      	push	{r7, lr}
    8ba6:	b086      	sub	sp, #24
    8ba8:	f8dd c020 	ldr.w	ip, [sp, #32]
    8bac:	9102      	str	r1, [sp, #8]
    8bae:	9203      	str	r2, [sp, #12]
    8bb0:	9304      	str	r3, [sp, #16]
    8bb2:	f8cd c014 	str.w	ip, [sp, #20]
    8bb6:	f04f 0e00 	mov.w	lr, #0
    8bba:	f8cd e004 	str.w	lr, [sp, #4]
    8bbe:	f8cd e000 	str.w	lr, [sp]
    8bc2:	f8cd e000 	str.w	lr, [sp]
    8bc6:	6001      	str	r1, [r0, #0]
    8bc8:	6042      	str	r2, [r0, #4]
    8bca:	9900      	ldr	r1, [sp, #0]
    8bcc:	9a01      	ldr	r2, [sp, #4]
    8bce:	6081      	str	r1, [r0, #8]
    8bd0:	60c2      	str	r2, [r0, #12]
    8bd2:	6103      	str	r3, [r0, #16]
    8bd4:	f8c0 c014 	str.w	ip, [r0, #20]
    8bd8:	b006      	add	sp, #24
    8bda:	bd80      	pop	{r7, pc}

00008bdc <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    8bdc:	b082      	sub	sp, #8
    8bde:	9001      	str	r0, [sp, #4]
    8be0:	7800      	ldrb	r0, [r0, #0]
    8be2:	07c0      	lsls	r0, r0, #31
    8be4:	2800      	cmp	r0, #0
    8be6:	d004      	beq.n	8bf2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    8be8:	e7ff      	b.n	8bea <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    8bea:	2000      	movs	r0, #0
    8bec:	f88d 0003 	strb.w	r0, [sp, #3]
    8bf0:	e003      	b.n	8bfa <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8bf2:	2001      	movs	r0, #1
    8bf4:	f88d 0003 	strb.w	r0, [sp, #3]
    8bf8:	e7ff      	b.n	8bfa <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8bfa:	f89d 0003 	ldrb.w	r0, [sp, #3]
    8bfe:	b002      	add	sp, #8
    8c00:	4770      	bx	lr

00008c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    8c02:	b08a      	sub	sp, #40	; 0x28
    8c04:	9005      	str	r0, [sp, #20]
    8c06:	9107      	str	r1, [sp, #28]
    8c08:	9208      	str	r2, [sp, #32]
    8c0a:	9805      	ldr	r0, [sp, #20]
    8c0c:	f1b0 0c01 	subs.w	ip, r0, #1
    8c10:	bf18      	it	ne
    8c12:	f04f 0c01 	movne.w	ip, #1
    8c16:	2801      	cmp	r0, #1
    8c18:	9304      	str	r3, [sp, #16]
    8c1a:	9203      	str	r2, [sp, #12]
    8c1c:	9102      	str	r1, [sp, #8]
    8c1e:	d010      	beq.n	8c42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    8c20:	e7ff      	b.n	8c22 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    8c22:	9805      	ldr	r0, [sp, #20]
    8c24:	9006      	str	r0, [sp, #24]
    8c26:	4668      	mov	r0, sp
    8c28:	9904      	ldr	r1, [sp, #16]
    8c2a:	6001      	str	r1, [r0, #0]
    8c2c:	f24c 53bc 	movw	r3, #50620	; 0xc5bc
    8c30:	f2c0 0301 	movt	r3, #1
    8c34:	aa06      	add	r2, sp, #24
    8c36:	9802      	ldr	r0, [sp, #8]
    8c38:	9903      	ldr	r1, [sp, #12]
    8c3a:	f00d f873 	bl	15d24 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    8c3e:	defe      	udf	#254	; 0xfe
    8c40:	defe      	udf	#254	; 0xfe
    8c42:	9805      	ldr	r0, [sp, #20]
    8c44:	2801      	cmp	r0, #1
    8c46:	d102      	bne.n	8c4e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    8c48:	e7ff      	b.n	8c4a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    8c4a:	b00a      	add	sp, #40	; 0x28
    8c4c:	4770      	bx	lr
    8c4e:	e7fc      	b.n	8c4a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

00008c50 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    8c50:	b580      	push	{r7, lr}
    8c52:	b082      	sub	sp, #8
    8c54:	9001      	str	r0, [sp, #4]
    8c56:	f7ff ffc1 	bl	8bdc <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    8c5a:	9000      	str	r0, [sp, #0]
    8c5c:	e7ff      	b.n	8c5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    8c5e:	2001      	movs	r0, #1
    8c60:	9900      	ldr	r1, [sp, #0]
    8c62:	4388      	bics	r0, r1
    8c64:	b002      	add	sp, #8
    8c66:	bd80      	pop	{r7, pc}

00008c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    8c68:	b082      	sub	sp, #8
    8c6a:	9001      	str	r0, [sp, #4]
    8c6c:	9000      	str	r0, [sp, #0]
    8c6e:	9800      	ldr	r0, [sp, #0]
    8c70:	b002      	add	sp, #8
    8c72:	4770      	bx	lr

00008c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    8c74:	b081      	sub	sp, #4
    8c76:	4601      	mov	r1, r0
    8c78:	f88d 0003 	strb.w	r0, [sp, #3]
    8c7c:	b001      	add	sp, #4
    8c7e:	4770      	bx	lr

00008c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    8c80:	b081      	sub	sp, #4
    8c82:	9000      	str	r0, [sp, #0]
    8c84:	b001      	add	sp, #4
    8c86:	4770      	bx	lr

00008c88 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    8c88:	b580      	push	{r7, lr}
    8c8a:	b08a      	sub	sp, #40	; 0x28
    8c8c:	9007      	str	r0, [sp, #28]
    8c8e:	9108      	str	r1, [sp, #32]
    8c90:	9209      	str	r2, [sp, #36]	; 0x24
    8c92:	2300      	movs	r3, #0
    8c94:	9305      	str	r3, [sp, #20]
    8c96:	9006      	str	r0, [sp, #24]
    8c98:	9805      	ldr	r0, [sp, #20]
    8c9a:	9b06      	ldr	r3, [sp, #24]
    8c9c:	9104      	str	r1, [sp, #16]
    8c9e:	4619      	mov	r1, r3
    8ca0:	9b04      	ldr	r3, [sp, #16]
    8ca2:	9203      	str	r2, [sp, #12]
    8ca4:	461a      	mov	r2, r3
    8ca6:	9b03      	ldr	r3, [sp, #12]
    8ca8:	f000 f828 	bl	8cfc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    8cac:	9002      	str	r0, [sp, #8]
    8cae:	9101      	str	r1, [sp, #4]
    8cb0:	e7ff      	b.n	8cb2 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    8cb2:	9802      	ldr	r0, [sp, #8]
    8cb4:	9901      	ldr	r1, [sp, #4]
    8cb6:	b00a      	add	sp, #40	; 0x28
    8cb8:	bd80      	pop	{r7, pc}

00008cba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    8cba:	b580      	push	{r7, lr}
    8cbc:	b08a      	sub	sp, #40	; 0x28
    8cbe:	9006      	str	r0, [sp, #24]
    8cc0:	9107      	str	r1, [sp, #28]
    8cc2:	9208      	str	r2, [sp, #32]
    8cc4:	9309      	str	r3, [sp, #36]	; 0x24
    8cc6:	9005      	str	r0, [sp, #20]
    8cc8:	4610      	mov	r0, r2
    8cca:	9104      	str	r1, [sp, #16]
    8ccc:	4619      	mov	r1, r3
    8cce:	f009 fb42 	bl	12356 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8cd2:	9003      	str	r0, [sp, #12]
    8cd4:	e7ff      	b.n	8cd6 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    8cd6:	9803      	ldr	r0, [sp, #12]
    8cd8:	9905      	ldr	r1, [sp, #20]
    8cda:	f009 fac3 	bl	12264 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    8cde:	9002      	str	r0, [sp, #8]
    8ce0:	e7ff      	b.n	8ce2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    8ce2:	9804      	ldr	r0, [sp, #16]
    8ce4:	9905      	ldr	r1, [sp, #20]
    8ce6:	1a41      	subs	r1, r0, r1
    8ce8:	9802      	ldr	r0, [sp, #8]
    8cea:	f000 f8b7 	bl	8e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    8cee:	9001      	str	r0, [sp, #4]
    8cf0:	9100      	str	r1, [sp, #0]
    8cf2:	e7ff      	b.n	8cf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    8cf4:	9801      	ldr	r0, [sp, #4]
    8cf6:	9900      	ldr	r1, [sp, #0]
    8cf8:	b00a      	add	sp, #40	; 0x28
    8cfa:	bd80      	pop	{r7, pc}

00008cfc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    8cfc:	b580      	push	{r7, lr}
    8cfe:	b08c      	sub	sp, #48	; 0x30
    8d00:	9008      	str	r0, [sp, #32]
    8d02:	9109      	str	r1, [sp, #36]	; 0x24
    8d04:	920a      	str	r2, [sp, #40]	; 0x28
    8d06:	930b      	str	r3, [sp, #44]	; 0x2c
    8d08:	4288      	cmp	r0, r1
    8d0a:	9307      	str	r3, [sp, #28]
    8d0c:	9206      	str	r2, [sp, #24]
    8d0e:	9105      	str	r1, [sp, #20]
    8d10:	9004      	str	r0, [sp, #16]
    8d12:	d806      	bhi.n	8d22 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    8d14:	e7ff      	b.n	8d16 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    8d16:	9806      	ldr	r0, [sp, #24]
    8d18:	9907      	ldr	r1, [sp, #28]
    8d1a:	f009 fb33 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d1e:	9003      	str	r0, [sp, #12]
    8d20:	e004      	b.n	8d2c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    8d22:	9804      	ldr	r0, [sp, #16]
    8d24:	9905      	ldr	r1, [sp, #20]
    8d26:	f00d ffa0 	bl	16c6a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    8d2a:	defe      	udf	#254	; 0xfe
    8d2c:	9805      	ldr	r0, [sp, #20]
    8d2e:	9903      	ldr	r1, [sp, #12]
    8d30:	4288      	cmp	r0, r1
    8d32:	d809      	bhi.n	8d48 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    8d34:	e7ff      	b.n	8d36 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    8d36:	9804      	ldr	r0, [sp, #16]
    8d38:	9905      	ldr	r1, [sp, #20]
    8d3a:	9a06      	ldr	r2, [sp, #24]
    8d3c:	9b07      	ldr	r3, [sp, #28]
    8d3e:	f7ff ffbc 	bl	8cba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    8d42:	9002      	str	r0, [sp, #8]
    8d44:	9101      	str	r1, [sp, #4]
    8d46:	e00a      	b.n	8d5e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    8d48:	9806      	ldr	r0, [sp, #24]
    8d4a:	9907      	ldr	r1, [sp, #28]
    8d4c:	f009 fb1a 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d50:	9000      	str	r0, [sp, #0]
    8d52:	e7ff      	b.n	8d54 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    8d54:	9805      	ldr	r0, [sp, #20]
    8d56:	9900      	ldr	r1, [sp, #0]
    8d58:	f00d ff65 	bl	16c26 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    8d5c:	defe      	udf	#254	; 0xfe
    8d5e:	9802      	ldr	r0, [sp, #8]
    8d60:	9901      	ldr	r1, [sp, #4]
    8d62:	b00c      	add	sp, #48	; 0x30
    8d64:	bd80      	pop	{r7, pc}

00008d66 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8d66:	b580      	push	{r7, lr}
    8d68:	b082      	sub	sp, #8
    8d6a:	9001      	str	r0, [sp, #4]
    8d6c:	f010 fa1a 	bl	191a4 <os_eventq_run>
    8d70:	e7ff      	b.n	8d72 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    8d72:	2001      	movs	r0, #1
    8d74:	b002      	add	sp, #8
    8d76:	bd80      	pop	{r7, pc}

00008d78 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8d78:	b580      	push	{r7, lr}
    8d7a:	b084      	sub	sp, #16
    8d7c:	9002      	str	r0, [sp, #8]
    8d7e:	f010 fa3d 	bl	191fc <os_eventq_dflt_get>
    8d82:	4601      	mov	r1, r0
    8d84:	9003      	str	r0, [sp, #12]
    8d86:	9101      	str	r1, [sp, #4]
    8d88:	e7ff      	b.n	8d8a <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    8d8a:	9801      	ldr	r0, [sp, #4]
    8d8c:	9902      	ldr	r1, [sp, #8]
    8d8e:	6048      	str	r0, [r1, #4]
    8d90:	2200      	movs	r2, #0
    8d92:	600a      	str	r2, [r1, #0]
    8d94:	b004      	add	sp, #16
    8d96:	bd80      	pop	{r7, pc}

00008d98 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8d98:	b570      	push	{r4, r5, r6, lr}
    8d9a:	b09c      	sub	sp, #112	; 0x70
    8d9c:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    8da0:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    8da4:	9c22      	ldr	r4, [sp, #136]	; 0x88
    8da6:	9d21      	ldr	r5, [sp, #132]	; 0x84
    8da8:	9e20      	ldr	r6, [sp, #128]	; 0x80
    8daa:	9013      	str	r0, [sp, #76]	; 0x4c
    8dac:	9114      	str	r1, [sp, #80]	; 0x50
    8dae:	9215      	str	r2, [sp, #84]	; 0x54
    8db0:	9316      	str	r3, [sp, #88]	; 0x58
    8db2:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    8db6:	9418      	str	r4, [sp, #96]	; 0x60
    8db8:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    8dbc:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    8dc0:	9011      	str	r0, [sp, #68]	; 0x44
    8dc2:	4608      	mov	r0, r1
    8dc4:	9310      	str	r3, [sp, #64]	; 0x40
    8dc6:	920f      	str	r2, [sp, #60]	; 0x3c
    8dc8:	910e      	str	r1, [sp, #56]	; 0x38
    8dca:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    8dce:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    8dd2:	940b      	str	r4, [sp, #44]	; 0x2c
    8dd4:	950a      	str	r5, [sp, #40]	; 0x28
    8dd6:	9609      	str	r6, [sp, #36]	; 0x24
    8dd8:	f7ff fe3e 	bl	8a58 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    8ddc:	e7ff      	b.n	8dde <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    8dde:	980e      	ldr	r0, [sp, #56]	; 0x38
    8de0:	f7ff fe1c 	bl	8a1c <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    8de4:	9008      	str	r0, [sp, #32]
    8de6:	e7ff      	b.n	8de8 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    8de8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8dea:	990c      	ldr	r1, [sp, #48]	; 0x30
    8dec:	f000 f93b 	bl	9066 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    8df0:	9007      	str	r0, [sp, #28]
    8df2:	e7ff      	b.n	8df4 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    8df4:	980d      	ldr	r0, [sp, #52]	; 0x34
    8df6:	b281      	uxth	r1, r0
    8df8:	466a      	mov	r2, sp
    8dfa:	60d1      	str	r1, [r2, #12]
    8dfc:	9907      	ldr	r1, [sp, #28]
    8dfe:	6091      	str	r1, [r2, #8]
    8e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e02:	6053      	str	r3, [r2, #4]
    8e04:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    8e08:	fa5f fe8c 	uxtb.w	lr, ip
    8e0c:	f8c2 e000 	str.w	lr, [r2]
    8e10:	9811      	ldr	r0, [sp, #68]	; 0x44
    8e12:	9908      	ldr	r1, [sp, #32]
    8e14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8e16:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8e18:	f010 ff90 	bl	19d3c <os_task_init>
    8e1c:	4601      	mov	r1, r0
    8e1e:	901b      	str	r0, [sp, #108]	; 0x6c
    8e20:	9106      	str	r1, [sp, #24]
    8e22:	e7ff      	b.n	8e24 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    8e24:	9806      	ldr	r0, [sp, #24]
    8e26:	2800      	cmp	r0, #0
    8e28:	d005      	beq.n	8e36 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    8e2a:	e7ff      	b.n	8e2c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    8e2c:	9806      	ldr	r0, [sp, #24]
    8e2e:	f009 fed6 	bl	12bde <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    8e32:	9005      	str	r0, [sp, #20]
    8e34:	e004      	b.n	8e40 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    8e36:	2000      	movs	r0, #0
    8e38:	9012      	str	r0, [sp, #72]	; 0x48
    8e3a:	2001      	movs	r0, #1
    8e3c:	9012      	str	r0, [sp, #72]	; 0x48
    8e3e:	e002      	b.n	8e46 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8e40:	9805      	ldr	r0, [sp, #20]
    8e42:	9012      	str	r0, [sp, #72]	; 0x48
    8e44:	e7ff      	b.n	8e46 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8e46:	9812      	ldr	r0, [sp, #72]	; 0x48
    8e48:	b01c      	add	sp, #112	; 0x70
    8e4a:	bd70      	pop	{r4, r5, r6, pc}

00008e4c <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    8e4c:	b081      	sub	sp, #4
    8e4e:	9000      	str	r0, [sp, #0]
    8e50:	b001      	add	sp, #4
    8e52:	4770      	bx	lr

00008e54 <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    8e54:	b081      	sub	sp, #4
    8e56:	9000      	str	r0, [sp, #0]
    8e58:	b001      	add	sp, #4
    8e5a:	4770      	bx	lr

00008e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    8e5c:	b580      	push	{r7, lr}
    8e5e:	b084      	sub	sp, #16
    8e60:	9002      	str	r0, [sp, #8]
    8e62:	9103      	str	r1, [sp, #12]
    8e64:	f000 f993 	bl	918e <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    8e68:	9001      	str	r0, [sp, #4]
    8e6a:	9100      	str	r1, [sp, #0]
    8e6c:	e7ff      	b.n	8e6e <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    8e6e:	9801      	ldr	r0, [sp, #4]
    8e70:	9900      	ldr	r1, [sp, #0]
    8e72:	b004      	add	sp, #16
    8e74:	bd80      	pop	{r7, pc}

00008e76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    8e76:	b5b0      	push	{r4, r5, r7, lr}
    8e78:	b0b8      	sub	sp, #224	; 0xe0
    8e7a:	902f      	str	r0, [sp, #188]	; 0xbc
    8e7c:	9130      	str	r1, [sp, #192]	; 0xc0
    8e7e:	9231      	str	r2, [sp, #196]	; 0xc4
    8e80:	9332      	str	r3, [sp, #200]	; 0xc8
    8e82:	9013      	str	r0, [sp, #76]	; 0x4c
    8e84:	9112      	str	r1, [sp, #72]	; 0x48
    8e86:	9311      	str	r3, [sp, #68]	; 0x44
    8e88:	9210      	str	r2, [sp, #64]	; 0x40
    8e8a:	f009 fa7b 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8e8e:	9016      	str	r0, [sp, #88]	; 0x58
    8e90:	e7ff      	b.n	8e92 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    8e92:	9810      	ldr	r0, [sp, #64]	; 0x40
    8e94:	9911      	ldr	r1, [sp, #68]	; 0x44
    8e96:	f009 fa75 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8e9a:	9017      	str	r0, [sp, #92]	; 0x5c
    8e9c:	e7ff      	b.n	8e9e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    8e9e:	a816      	add	r0, sp, #88	; 0x58
    8ea0:	9014      	str	r0, [sp, #80]	; 0x50
    8ea2:	a817      	add	r0, sp, #92	; 0x5c
    8ea4:	9015      	str	r0, [sp, #84]	; 0x54
    8ea6:	9814      	ldr	r0, [sp, #80]	; 0x50
    8ea8:	9033      	str	r0, [sp, #204]	; 0xcc
    8eaa:	9915      	ldr	r1, [sp, #84]	; 0x54
    8eac:	9134      	str	r1, [sp, #208]	; 0xd0
    8eae:	6802      	ldr	r2, [r0, #0]
    8eb0:	680b      	ldr	r3, [r1, #0]
    8eb2:	429a      	cmp	r2, r3
    8eb4:	900f      	str	r0, [sp, #60]	; 0x3c
    8eb6:	910e      	str	r1, [sp, #56]	; 0x38
    8eb8:	d106      	bne.n	8ec8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    8eba:	e7ff      	b.n	8ebc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    8ebc:	9810      	ldr	r0, [sp, #64]	; 0x40
    8ebe:	9911      	ldr	r1, [sp, #68]	; 0x44
    8ec0:	f009 fa68 	bl	12394 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8ec4:	900d      	str	r0, [sp, #52]	; 0x34
    8ec6:	e072      	b.n	8fae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    8ec8:	f24c 6020 	movw	r0, #50720	; 0xc620
    8ecc:	f2c0 0001 	movt	r0, #1
    8ed0:	6801      	ldr	r1, [r0, #0]
    8ed2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8ed4:	9027      	str	r0, [sp, #156]	; 0x9c
    8ed6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8ed8:	9228      	str	r2, [sp, #160]	; 0xa0
    8eda:	f24c 6360 	movw	r3, #50784	; 0xc660
    8ede:	f2c0 0301 	movt	r3, #1
    8ee2:	681b      	ldr	r3, [r3, #0]
    8ee4:	f24c 6c64 	movw	ip, #50788	; 0xc664
    8ee8:	f2c0 0c01 	movt	ip, #1
    8eec:	f8dc c000 	ldr.w	ip, [ip]
    8ef0:	46ee      	mov	lr, sp
    8ef2:	2400      	movs	r4, #0
    8ef4:	f8ce 4000 	str.w	r4, [lr]
    8ef8:	a829      	add	r0, sp, #164	; 0xa4
    8efa:	2201      	movs	r2, #1
    8efc:	910c      	str	r1, [sp, #48]	; 0x30
    8efe:	4619      	mov	r1, r3
    8f00:	4663      	mov	r3, ip
    8f02:	f7ff fe4f 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8f06:	e7ff      	b.n	8f08 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    8f08:	a827      	add	r0, sp, #156	; 0x9c
    8f0a:	9024      	str	r0, [sp, #144]	; 0x90
    8f0c:	a828      	add	r0, sp, #160	; 0xa0
    8f0e:	9025      	str	r0, [sp, #148]	; 0x94
    8f10:	a829      	add	r0, sp, #164	; 0xa4
    8f12:	9026      	str	r0, [sp, #152]	; 0x98
    8f14:	9824      	ldr	r0, [sp, #144]	; 0x90
    8f16:	9035      	str	r0, [sp, #212]	; 0xd4
    8f18:	9925      	ldr	r1, [sp, #148]	; 0x94
    8f1a:	9136      	str	r1, [sp, #216]	; 0xd8
    8f1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8f1e:	9237      	str	r2, [sp, #220]	; 0xdc
    8f20:	f642 23b1 	movw	r3, #10929	; 0x2ab1
    8f24:	f2c0 0301 	movt	r3, #1
    8f28:	910b      	str	r1, [sp, #44]	; 0x2c
    8f2a:	4619      	mov	r1, r3
    8f2c:	920a      	str	r2, [sp, #40]	; 0x28
    8f2e:	f009 fdcd 	bl	12acc <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8f32:	9009      	str	r0, [sp, #36]	; 0x24
    8f34:	9108      	str	r1, [sp, #32]
    8f36:	e7ff      	b.n	8f38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    8f38:	f642 21b1 	movw	r1, #10929	; 0x2ab1
    8f3c:	f2c0 0101 	movt	r1, #1
    8f40:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8f42:	f009 fdc3 	bl	12acc <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8f46:	9007      	str	r0, [sp, #28]
    8f48:	9106      	str	r1, [sp, #24]
    8f4a:	e7ff      	b.n	8f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    8f4c:	f246 314f 	movw	r1, #25423	; 0x634f
    8f50:	f2c0 0101 	movt	r1, #1
    8f54:	980a      	ldr	r0, [sp, #40]	; 0x28
    8f56:	f000 fac3 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8f5a:	9005      	str	r0, [sp, #20]
    8f5c:	9104      	str	r1, [sp, #16]
    8f5e:	e7ff      	b.n	8f60 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    8f60:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f62:	901e      	str	r0, [sp, #120]	; 0x78
    8f64:	9908      	ldr	r1, [sp, #32]
    8f66:	911f      	str	r1, [sp, #124]	; 0x7c
    8f68:	9a07      	ldr	r2, [sp, #28]
    8f6a:	9220      	str	r2, [sp, #128]	; 0x80
    8f6c:	9b06      	ldr	r3, [sp, #24]
    8f6e:	9321      	str	r3, [sp, #132]	; 0x84
    8f70:	f8dd c014 	ldr.w	ip, [sp, #20]
    8f74:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    8f78:	f8dd e010 	ldr.w	lr, [sp, #16]
    8f7c:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    8f80:	466c      	mov	r4, sp
    8f82:	2503      	movs	r5, #3
    8f84:	6025      	str	r5, [r4, #0]
    8f86:	a818      	add	r0, sp, #96	; 0x60
    8f88:	ab1e      	add	r3, sp, #120	; 0x78
    8f8a:	990c      	ldr	r1, [sp, #48]	; 0x30
    8f8c:	462a      	mov	r2, r5
    8f8e:	f7ff fe09 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8f92:	e7ff      	b.n	8f94 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    8f94:	f24c 60b4 	movw	r0, #50868	; 0xc6b4
    8f98:	f2c0 0001 	movt	r0, #1
    8f9c:	f00c fee9 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8fa0:	9003      	str	r0, [sp, #12]
    8fa2:	e7ff      	b.n	8fa4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    8fa4:	a818      	add	r0, sp, #96	; 0x60
    8fa6:	9903      	ldr	r1, [sp, #12]
    8fa8:	f00c ff20 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8fac:	defe      	udf	#254	; 0xfe
    8fae:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8fb0:	9912      	ldr	r1, [sp, #72]	; 0x48
    8fb2:	f009 f9d0 	bl	12356 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8fb6:	9002      	str	r0, [sp, #8]
    8fb8:	e7ff      	b.n	8fba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    8fba:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8fbc:	9912      	ldr	r1, [sp, #72]	; 0x48
    8fbe:	f009 f9e1 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8fc2:	9001      	str	r0, [sp, #4]
    8fc4:	e7ff      	b.n	8fc6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    8fc6:	980d      	ldr	r0, [sp, #52]	; 0x34
    8fc8:	9902      	ldr	r1, [sp, #8]
    8fca:	9a01      	ldr	r2, [sp, #4]
    8fcc:	f008 ffe6 	bl	11f9c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    8fd0:	e7ff      	b.n	8fd2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    8fd2:	b038      	add	sp, #224	; 0xe0
    8fd4:	bdb0      	pop	{r4, r5, r7, pc}

00008fd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    8fd6:	b580      	push	{r7, lr}
    8fd8:	b086      	sub	sp, #24
    8fda:	9003      	str	r0, [sp, #12]
    8fdc:	9104      	str	r1, [sp, #16]
    8fde:	9205      	str	r2, [sp, #20]
    8fe0:	9002      	str	r0, [sp, #8]
    8fe2:	4610      	mov	r0, r2
    8fe4:	9a02      	ldr	r2, [sp, #8]
    8fe6:	9101      	str	r1, [sp, #4]
    8fe8:	4611      	mov	r1, r2
    8fea:	9a01      	ldr	r2, [sp, #4]
    8fec:	f000 f861 	bl	90b2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    8ff0:	9000      	str	r0, [sp, #0]
    8ff2:	e7ff      	b.n	8ff4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    8ff4:	9800      	ldr	r0, [sp, #0]
    8ff6:	b006      	add	sp, #24
    8ff8:	bd80      	pop	{r7, pc}

00008ffa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    8ffa:	b580      	push	{r7, lr}
    8ffc:	b08e      	sub	sp, #56	; 0x38
    8ffe:	9009      	str	r0, [sp, #36]	; 0x24
    9000:	910a      	str	r1, [sp, #40]	; 0x28
    9002:	9005      	str	r0, [sp, #20]
    9004:	9104      	str	r1, [sp, #16]
    9006:	f009 f9bd 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    900a:	9003      	str	r0, [sp, #12]
    900c:	e7ff      	b.n	900e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    900e:	2101      	movs	r1, #1
    9010:	9803      	ldr	r0, [sp, #12]
    9012:	f000 fa7a 	bl	950a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    9016:	9002      	str	r0, [sp, #8]
    9018:	9101      	str	r1, [sp, #4]
    901a:	e7ff      	b.n	901c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    901c:	9802      	ldr	r0, [sp, #8]
    901e:	9901      	ldr	r1, [sp, #4]
    9020:	f000 f97c 	bl	931c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    9024:	9108      	str	r1, [sp, #32]
    9026:	9007      	str	r0, [sp, #28]
    9028:	e7ff      	b.n	902a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    902a:	9807      	ldr	r0, [sp, #28]
    902c:	2800      	cmp	r0, #0
    902e:	d001      	beq.n	9034 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    9030:	e7ff      	b.n	9032 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    9032:	e00c      	b.n	904e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    9034:	9808      	ldr	r0, [sp, #32]
    9036:	900c      	str	r0, [sp, #48]	; 0x30
    9038:	900d      	str	r0, [sp, #52]	; 0x34
    903a:	9905      	ldr	r1, [sp, #20]
    903c:	9000      	str	r0, [sp, #0]
    903e:	4608      	mov	r0, r1
    9040:	9904      	ldr	r1, [sp, #16]
    9042:	9a00      	ldr	r2, [sp, #0]
    9044:	f7ff ffc7 	bl	8fd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    9048:	9006      	str	r0, [sp, #24]
    904a:	e00b      	b.n	9064 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    904c:	defe      	udf	#254	; 0xfe
    904e:	f008 fe91 	bl	11d74 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    9052:	e002      	b.n	905a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    9054:	9806      	ldr	r0, [sp, #24]
    9056:	b00e      	add	sp, #56	; 0x38
    9058:	bd80      	pop	{r7, pc}
    905a:	f000 f959 	bl	9310 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    905e:	9006      	str	r0, [sp, #24]
    9060:	e7ff      	b.n	9062 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    9062:	e7f7      	b.n	9054 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    9064:	e7f6      	b.n	9054 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

00009066 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    9066:	b082      	sub	sp, #8
    9068:	9000      	str	r0, [sp, #0]
    906a:	9101      	str	r1, [sp, #4]
    906c:	b002      	add	sp, #8
    906e:	4770      	bx	lr

00009070 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    9070:	b580      	push	{r7, lr}
    9072:	b088      	sub	sp, #32
    9074:	9005      	str	r0, [sp, #20]
    9076:	9106      	str	r1, [sp, #24]
    9078:	9207      	str	r2, [sp, #28]
    907a:	9004      	str	r0, [sp, #16]
    907c:	4610      	mov	r0, r2
    907e:	9a04      	ldr	r2, [sp, #16]
    9080:	9103      	str	r1, [sp, #12]
    9082:	4611      	mov	r1, r2
    9084:	9a03      	ldr	r2, [sp, #12]
    9086:	f7ff fdff 	bl	8c88 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    908a:	9002      	str	r0, [sp, #8]
    908c:	9101      	str	r1, [sp, #4]
    908e:	e7ff      	b.n	9090 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    9090:	9802      	ldr	r0, [sp, #8]
    9092:	9901      	ldr	r1, [sp, #4]
    9094:	b008      	add	sp, #32
    9096:	bd80      	pop	{r7, pc}

00009098 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    9098:	b580      	push	{r7, lr}
    909a:	b084      	sub	sp, #16
    909c:	9002      	str	r0, [sp, #8]
    909e:	9103      	str	r1, [sp, #12]
    90a0:	f008 fe25 	bl	11cee <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    90a4:	9001      	str	r0, [sp, #4]
    90a6:	9100      	str	r1, [sp, #0]
    90a8:	e7ff      	b.n	90aa <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    90aa:	9801      	ldr	r0, [sp, #4]
    90ac:	9900      	ldr	r1, [sp, #0]
    90ae:	b004      	add	sp, #16
    90b0:	bd80      	pop	{r7, pc}

000090b2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    90b2:	b580      	push	{r7, lr}
    90b4:	b08a      	sub	sp, #40	; 0x28
    90b6:	9007      	str	r0, [sp, #28]
    90b8:	9108      	str	r1, [sp, #32]
    90ba:	9209      	str	r2, [sp, #36]	; 0x24
    90bc:	9005      	str	r0, [sp, #20]
    90be:	4608      	mov	r0, r1
    90c0:	9104      	str	r1, [sp, #16]
    90c2:	4611      	mov	r1, r2
    90c4:	9203      	str	r2, [sp, #12]
    90c6:	f009 f95d 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    90ca:	9002      	str	r0, [sp, #8]
    90cc:	e7ff      	b.n	90ce <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    90ce:	9805      	ldr	r0, [sp, #20]
    90d0:	9902      	ldr	r1, [sp, #8]
    90d2:	4288      	cmp	r0, r1
    90d4:	d303      	bcc.n	90de <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    90d6:	e7ff      	b.n	90d8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    90d8:	2000      	movs	r0, #0
    90da:	9006      	str	r0, [sp, #24]
    90dc:	e009      	b.n	90f2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    90de:	9805      	ldr	r0, [sp, #20]
    90e0:	9904      	ldr	r1, [sp, #16]
    90e2:	9a03      	ldr	r2, [sp, #12]
    90e4:	f009 f97a 	bl	123dc <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    90e8:	9001      	str	r0, [sp, #4]
    90ea:	e7ff      	b.n	90ec <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    90ec:	9801      	ldr	r0, [sp, #4]
    90ee:	9006      	str	r0, [sp, #24]
    90f0:	e7ff      	b.n	90f2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    90f2:	9806      	ldr	r0, [sp, #24]
    90f4:	b00a      	add	sp, #40	; 0x28
    90f6:	bd80      	pop	{r7, pc}

000090f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    90f8:	b580      	push	{r7, lr}
    90fa:	b08a      	sub	sp, #40	; 0x28
    90fc:	9004      	str	r0, [sp, #16]
    90fe:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    9100:	9003      	str	r0, [sp, #12]
    9102:	9102      	str	r1, [sp, #8]
    9104:	f000 f86e 	bl	91e4 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9108:	4601      	mov	r1, r0
    910a:	9006      	str	r0, [sp, #24]
    910c:	9101      	str	r1, [sp, #4]
    910e:	e7ff      	b.n	9110 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    9110:	9803      	ldr	r0, [sp, #12]
    9112:	9902      	ldr	r1, [sp, #8]
    9114:	f000 f850 	bl	91b8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9118:	9000      	str	r0, [sp, #0]
    911a:	e7ff      	b.n	911c <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    911c:	9800      	ldr	r0, [sp, #0]
    911e:	9007      	str	r0, [sp, #28]
    9120:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    9122:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    9124:	4608      	mov	r0, r1
    9126:	f000 f809 	bl	913c <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    912a:	9009      	str	r0, [sp, #36]	; 0x24
    912c:	e7ff      	b.n	912e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    912e:	9801      	ldr	r0, [sp, #4]
    9130:	9900      	ldr	r1, [sp, #0]
    9132:	f00e fcf5 	bl	17b20 <console_buffer>
    9136:	e7ff      	b.n	9138 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    9138:	b00a      	add	sp, #40	; 0x28
    913a:	bd80      	pop	{r7, pc}

0000913c <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    913c:	b081      	sub	sp, #4
    913e:	9000      	str	r0, [sp, #0]
    9140:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    9142:	b001      	add	sp, #4
    9144:	4770      	bx	lr

00009146 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    9146:	b580      	push	{r7, lr}
    9148:	b086      	sub	sp, #24
    914a:	9004      	str	r0, [sp, #16]
    914c:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    914e:	9003      	str	r0, [sp, #12]
    9150:	9102      	str	r1, [sp, #8]
    9152:	f000 f847 	bl	91e4 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9156:	9001      	str	r0, [sp, #4]
    9158:	e7ff      	b.n	915a <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    915a:	9803      	ldr	r0, [sp, #12]
    915c:	9902      	ldr	r1, [sp, #8]
    915e:	f000 f82b 	bl	91b8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9162:	9000      	str	r0, [sp, #0]
    9164:	e7ff      	b.n	9166 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    9166:	9801      	ldr	r0, [sp, #4]
    9168:	9900      	ldr	r1, [sp, #0]
    916a:	f00e fcd9 	bl	17b20 <console_buffer>
    916e:	e7ff      	b.n	9170 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    9170:	b006      	add	sp, #24
    9172:	bd80      	pop	{r7, pc}

00009174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    9174:	b580      	push	{r7, lr}
    9176:	b082      	sub	sp, #8
    9178:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    917a:	f00e fd41 	bl	17c00 <console_printint>
    917e:	e7ff      	b.n	9180 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    9180:	b002      	add	sp, #8
    9182:	bd80      	pop	{r7, pc}

00009184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    9184:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    9186:	f00e fca3 	bl	17ad0 <console_flush>
    918a:	e7ff      	b.n	918c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    918c:	bd80      	pop	{r7, pc}

0000918e <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    918e:	b086      	sub	sp, #24
    9190:	9004      	str	r0, [sp, #16]
    9192:	9105      	str	r1, [sp, #20]
    9194:	9002      	str	r0, [sp, #8]
    9196:	9103      	str	r1, [sp, #12]
    9198:	9802      	ldr	r0, [sp, #8]
    919a:	9903      	ldr	r1, [sp, #12]
    919c:	9000      	str	r0, [sp, #0]
    919e:	9101      	str	r1, [sp, #4]
    91a0:	9800      	ldr	r0, [sp, #0]
    91a2:	9901      	ldr	r1, [sp, #4]
    91a4:	b006      	add	sp, #24
    91a6:	4770      	bx	lr

000091a8 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    91a8:	b082      	sub	sp, #8
    91aa:	460a      	mov	r2, r1
    91ac:	9000      	str	r0, [sp, #0]
    91ae:	f88d 1007 	strb.w	r1, [sp, #7]
    91b2:	7001      	strb	r1, [r0, #0]
    91b4:	b002      	add	sp, #8
    91b6:	4770      	bx	lr

000091b8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    91b8:	b580      	push	{r7, lr}
    91ba:	b08a      	sub	sp, #40	; 0x28
    91bc:	9004      	str	r0, [sp, #16]
    91be:	9105      	str	r1, [sp, #20]
    91c0:	9008      	str	r0, [sp, #32]
    91c2:	9109      	str	r1, [sp, #36]	; 0x24
    91c4:	9006      	str	r0, [sp, #24]
    91c6:	9107      	str	r1, [sp, #28]
    91c8:	9806      	ldr	r0, [sp, #24]
    91ca:	9907      	ldr	r1, [sp, #28]
    91cc:	9003      	str	r0, [sp, #12]
    91ce:	9102      	str	r1, [sp, #8]
    91d0:	e7ff      	b.n	91d2 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    91d2:	9803      	ldr	r0, [sp, #12]
    91d4:	9902      	ldr	r1, [sp, #8]
    91d6:	f009 f8d5 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    91da:	9001      	str	r0, [sp, #4]
    91dc:	e7ff      	b.n	91de <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    91de:	9801      	ldr	r0, [sp, #4]
    91e0:	b00a      	add	sp, #40	; 0x28
    91e2:	bd80      	pop	{r7, pc}

000091e4 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    91e4:	b082      	sub	sp, #8
    91e6:	9000      	str	r0, [sp, #0]
    91e8:	9101      	str	r1, [sp, #4]
    91ea:	b002      	add	sp, #8
    91ec:	4770      	bx	lr

000091ee <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    91ee:	b580      	push	{r7, lr}
    91f0:	b084      	sub	sp, #16
    91f2:	9002      	str	r0, [sp, #8]
    91f4:	9103      	str	r1, [sp, #12]
    91f6:	6800      	ldr	r0, [r0, #0]
    91f8:	f000 f845 	bl	9286 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    91fc:	9001      	str	r0, [sp, #4]
    91fe:	e7ff      	b.n	9200 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    9200:	9801      	ldr	r0, [sp, #4]
    9202:	f000 0001 	and.w	r0, r0, #1
    9206:	b004      	add	sp, #16
    9208:	bd80      	pop	{r7, pc}

0000920a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    920a:	b087      	sub	sp, #28
    920c:	9000      	str	r0, [sp, #0]
    920e:	9101      	str	r1, [sp, #4]
    9210:	2000      	movs	r0, #0
    9212:	f88d 0013 	strb.w	r0, [sp, #19]
    9216:	f88d 0012 	strb.w	r0, [sp, #18]
    921a:	2001      	movs	r0, #1
    921c:	f88d 0013 	strb.w	r0, [sp, #19]
    9220:	f88d 0012 	strb.w	r0, [sp, #18]
    9224:	9800      	ldr	r0, [sp, #0]
    9226:	2800      	cmp	r0, #0
    9228:	d001      	beq.n	922e <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    922a:	e7ff      	b.n	922c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    922c:	e006      	b.n	923c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    922e:	2000      	movs	r0, #0
    9230:	f88d 0012 	strb.w	r0, [sp, #18]
    9234:	2001      	movs	r0, #1
    9236:	9002      	str	r0, [sp, #8]
    9238:	e008      	b.n	924c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    923a:	defe      	udf	#254	; 0xfe
    923c:	2000      	movs	r0, #0
    923e:	f88d 0013 	strb.w	r0, [sp, #19]
    9242:	9901      	ldr	r1, [sp, #4]
    9244:	9106      	str	r1, [sp, #24]
    9246:	9103      	str	r1, [sp, #12]
    9248:	9002      	str	r0, [sp, #8]
    924a:	e7ff      	b.n	924c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    924c:	f89d 0012 	ldrb.w	r0, [sp, #18]
    9250:	07c0      	lsls	r0, r0, #31
    9252:	2800      	cmp	r0, #0
    9254:	d104      	bne.n	9260 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    9256:	e7ff      	b.n	9258 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9258:	9800      	ldr	r0, [sp, #0]
    925a:	2801      	cmp	r0, #1
    925c:	d008      	beq.n	9270 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    925e:	e011      	b.n	9284 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    9260:	2000      	movs	r0, #0
    9262:	f88d 0012 	strb.w	r0, [sp, #18]
    9266:	e7f7      	b.n	9258 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9268:	9802      	ldr	r0, [sp, #8]
    926a:	9903      	ldr	r1, [sp, #12]
    926c:	b007      	add	sp, #28
    926e:	4770      	bx	lr
    9270:	f89d 0013 	ldrb.w	r0, [sp, #19]
    9274:	07c0      	lsls	r0, r0, #31
    9276:	2800      	cmp	r0, #0
    9278:	d0f6      	beq.n	9268 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    927a:	e7ff      	b.n	927c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    927c:	2000      	movs	r0, #0
    927e:	f88d 0013 	strb.w	r0, [sp, #19]
    9282:	e7f1      	b.n	9268 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    9284:	e7f0      	b.n	9268 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

00009286 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    9286:	b580      	push	{r7, lr}
    9288:	b08e      	sub	sp, #56	; 0x38
    928a:	900b      	str	r0, [sp, #44]	; 0x2c
    928c:	910c      	str	r1, [sp, #48]	; 0x30
    928e:	9003      	str	r0, [sp, #12]
    9290:	9803      	ldr	r0, [sp, #12]
    9292:	6800      	ldr	r0, [r0, #0]
    9294:	2800      	cmp	r0, #0
    9296:	4602      	mov	r2, r0
    9298:	bf18      	it	ne
    929a:	2201      	movne	r2, #1
    929c:	2800      	cmp	r0, #0
    929e:	9101      	str	r1, [sp, #4]
    92a0:	d00f      	beq.n	92c2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    92a2:	e7ff      	b.n	92a4 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    92a4:	9803      	ldr	r0, [sp, #12]
    92a6:	900d      	str	r0, [sp, #52]	; 0x34
    92a8:	f24c 62c4 	movw	r2, #50884	; 0xc6c4
    92ac:	f2c0 0201 	movt	r2, #1
    92b0:	a907      	add	r1, sp, #28
    92b2:	2304      	movs	r3, #4
    92b4:	9000      	str	r0, [sp, #0]
    92b6:	4608      	mov	r0, r1
    92b8:	9901      	ldr	r1, [sp, #4]
    92ba:	f00d fc0a 	bl	16ad2 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    92be:	e011      	b.n	92e4 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    92c0:	defe      	udf	#254	; 0xfe
    92c2:	f24c 62c8 	movw	r2, #50888	; 0xc6c8
    92c6:	f2c0 0201 	movt	r2, #1
    92ca:	a804      	add	r0, sp, #16
    92cc:	2304      	movs	r3, #4
    92ce:	9901      	ldr	r1, [sp, #4]
    92d0:	f00d fbff 	bl	16ad2 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    92d4:	e7ff      	b.n	92d6 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    92d6:	a804      	add	r0, sp, #16
    92d8:	f00c ff18 	bl	1610c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    92dc:	f88d 000b 	strb.w	r0, [sp, #11]
    92e0:	e7ff      	b.n	92e2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    92e2:	e011      	b.n	9308 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    92e4:	9800      	ldr	r0, [sp, #0]
    92e6:	900a      	str	r0, [sp, #40]	; 0x28
    92e8:	f24c 62cc 	movw	r2, #50892	; 0xc6cc
    92ec:	f2c0 0201 	movt	r2, #1
    92f0:	a807      	add	r0, sp, #28
    92f2:	a90a      	add	r1, sp, #40	; 0x28
    92f4:	f00c fea1 	bl	1603a <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    92f8:	e7ff      	b.n	92fa <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    92fa:	a807      	add	r0, sp, #28
    92fc:	f00c ff06 	bl	1610c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    9300:	f88d 000b 	strb.w	r0, [sp, #11]
    9304:	e7ff      	b.n	9306 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    9306:	e7ff      	b.n	9308 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    9308:	f89d 000b 	ldrb.w	r0, [sp, #11]
    930c:	b00e      	add	sp, #56	; 0x38
    930e:	bd80      	pop	{r7, pc}

00009310 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    9310:	b082      	sub	sp, #8
    9312:	2000      	movs	r0, #0
    9314:	9000      	str	r0, [sp, #0]
    9316:	9800      	ldr	r0, [sp, #0]
    9318:	b002      	add	sp, #8
    931a:	4770      	bx	lr

0000931c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    931c:	b580      	push	{r7, lr}
    931e:	b084      	sub	sp, #16
    9320:	9002      	str	r0, [sp, #8]
    9322:	9103      	str	r1, [sp, #12]
    9324:	f7ff ff71 	bl	920a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    9328:	9001      	str	r0, [sp, #4]
    932a:	9100      	str	r1, [sp, #0]
    932c:	e7ff      	b.n	932e <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    932e:	9801      	ldr	r0, [sp, #4]
    9330:	9900      	ldr	r1, [sp, #0]
    9332:	b004      	add	sp, #16
    9334:	bd80      	pop	{r7, pc}

00009336 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    9336:	b580      	push	{r7, lr}
    9338:	b094      	sub	sp, #80	; 0x50
    933a:	9008      	str	r0, [sp, #32]
    933c:	9109      	str	r1, [sp, #36]	; 0x24
    933e:	6802      	ldr	r2, [r0, #0]
    9340:	2a00      	cmp	r2, #0
    9342:	bf18      	it	ne
    9344:	2201      	movne	r2, #1
    9346:	f04f 0300 	mov.w	r3, #0
    934a:	930b      	str	r3, [sp, #44]	; 0x2c
    934c:	920a      	str	r2, [sp, #40]	; 0x28
    934e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9352:	9104      	str	r1, [sp, #16]
    9354:	9003      	str	r0, [sp, #12]
    9356:	9202      	str	r2, [sp, #8]
    9358:	e7ff      	b.n	935a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    935a:	9802      	ldr	r0, [sp, #8]
    935c:	9902      	ldr	r1, [sp, #8]
    935e:	910d      	str	r1, [sp, #52]	; 0x34
    9360:	9a04      	ldr	r2, [sp, #16]
    9362:	6813      	ldr	r3, [r2, #0]
    9364:	2b00      	cmp	r3, #0
    9366:	bf18      	it	ne
    9368:	2301      	movne	r3, #1
    936a:	f04f 0c00 	mov.w	ip, #0
    936e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    9372:	930e      	str	r3, [sp, #56]	; 0x38
    9374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9376:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    937a:	9001      	str	r0, [sp, #4]
    937c:	9300      	str	r3, [sp, #0]
    937e:	e7ff      	b.n	9380 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    9380:	9800      	ldr	r0, [sp, #0]
    9382:	9011      	str	r0, [sp, #68]	; 0x44
    9384:	9901      	ldr	r1, [sp, #4]
    9386:	4281      	cmp	r1, r0
    9388:	d104      	bne.n	9394 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    938a:	e7ff      	b.n	938c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    938c:	2001      	movs	r0, #1
    938e:	f88d 0017 	strb.w	r0, [sp, #23]
    9392:	e003      	b.n	939c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    9394:	2000      	movs	r0, #0
    9396:	f88d 0017 	strb.w	r0, [sp, #23]
    939a:	e7ff      	b.n	939c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    939c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    93a0:	07c0      	lsls	r0, r0, #31
    93a2:	2800      	cmp	r0, #0
    93a4:	d104      	bne.n	93b0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    93a6:	e7ff      	b.n	93a8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    93a8:	2000      	movs	r0, #0
    93aa:	f88d 0016 	strb.w	r0, [sp, #22]
    93ae:	e01c      	b.n	93ea <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    93b0:	9803      	ldr	r0, [sp, #12]
    93b2:	9006      	str	r0, [sp, #24]
    93b4:	9904      	ldr	r1, [sp, #16]
    93b6:	9107      	str	r1, [sp, #28]
    93b8:	9a06      	ldr	r2, [sp, #24]
    93ba:	6812      	ldr	r2, [r2, #0]
    93bc:	2a00      	cmp	r2, #0
    93be:	d104      	bne.n	93ca <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    93c0:	e7ff      	b.n	93c2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    93c2:	2001      	movs	r0, #1
    93c4:	f88d 0016 	strb.w	r0, [sp, #22]
    93c8:	e00e      	b.n	93e8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    93ca:	9807      	ldr	r0, [sp, #28]
    93cc:	6800      	ldr	r0, [r0, #0]
    93ce:	2800      	cmp	r0, #0
    93d0:	d0f7      	beq.n	93c2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    93d2:	e7ff      	b.n	93d4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    93d4:	9806      	ldr	r0, [sp, #24]
    93d6:	9012      	str	r0, [sp, #72]	; 0x48
    93d8:	9907      	ldr	r1, [sp, #28]
    93da:	9113      	str	r1, [sp, #76]	; 0x4c
    93dc:	f009 fd19 	bl	12e12 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    93e0:	f88d 0016 	strb.w	r0, [sp, #22]
    93e4:	e7ff      	b.n	93e6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    93e6:	e7ff      	b.n	93e8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    93e8:	e7ff      	b.n	93ea <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    93ea:	f89d 0016 	ldrb.w	r0, [sp, #22]
    93ee:	b014      	add	sp, #80	; 0x50
    93f0:	bd80      	pop	{r7, pc}

000093f2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    93f2:	b580      	push	{r7, lr}
    93f4:	b084      	sub	sp, #16
    93f6:	9002      	str	r0, [sp, #8]
    93f8:	9103      	str	r1, [sp, #12]
    93fa:	6800      	ldr	r0, [r0, #0]
    93fc:	f009 fc9b 	bl	12d36 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    9400:	9001      	str	r0, [sp, #4]
    9402:	e7ff      	b.n	9404 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    9404:	9801      	ldr	r0, [sp, #4]
    9406:	f000 0001 	and.w	r0, r0, #1
    940a:	b004      	add	sp, #16
    940c:	bd80      	pop	{r7, pc}

0000940e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    940e:	b580      	push	{r7, lr}
    9410:	b084      	sub	sp, #16
    9412:	9002      	str	r0, [sp, #8]
    9414:	9103      	str	r1, [sp, #12]
    9416:	6800      	ldr	r0, [r0, #0]
    9418:	f009 fc56 	bl	12cc8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    941c:	9001      	str	r0, [sp, #4]
    941e:	e7ff      	b.n	9420 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    9420:	9801      	ldr	r0, [sp, #4]
    9422:	f000 0001 	and.w	r0, r0, #1
    9426:	b004      	add	sp, #16
    9428:	bd80      	pop	{r7, pc}

0000942a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    942a:	b580      	push	{r7, lr}
    942c:	b084      	sub	sp, #16
    942e:	9002      	str	r0, [sp, #8]
    9430:	9103      	str	r1, [sp, #12]
    9432:	6800      	ldr	r0, [r0, #0]
    9434:	f7ff ffeb 	bl	940e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    9438:	9001      	str	r0, [sp, #4]
    943a:	e7ff      	b.n	943c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    943c:	9801      	ldr	r0, [sp, #4]
    943e:	f000 0001 	and.w	r0, r0, #1
    9442:	b004      	add	sp, #16
    9444:	bd80      	pop	{r7, pc}

00009446 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    9446:	b580      	push	{r7, lr}
    9448:	b084      	sub	sp, #16
    944a:	9002      	str	r0, [sp, #8]
    944c:	9103      	str	r1, [sp, #12]
    944e:	6800      	ldr	r0, [r0, #0]
    9450:	f009 fca8 	bl	12da4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
    9454:	9001      	str	r0, [sp, #4]
    9456:	e7ff      	b.n	9458 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
    9458:	9801      	ldr	r0, [sp, #4]
    945a:	f000 0001 	and.w	r0, r0, #1
    945e:	b004      	add	sp, #16
    9460:	bd80      	pop	{r7, pc}

00009462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    9462:	b089      	sub	sp, #36	; 0x24
    9464:	9005      	str	r0, [sp, #20]
    9466:	9106      	str	r1, [sp, #24]
    9468:	9107      	str	r1, [sp, #28]
    946a:	9907      	ldr	r1, [sp, #28]
    946c:	9002      	str	r0, [sp, #8]
    946e:	9101      	str	r1, [sp, #4]
    9470:	e7ff      	b.n	9472 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    9472:	9802      	ldr	r0, [sp, #8]
    9474:	9008      	str	r0, [sp, #32]
    9476:	9908      	ldr	r1, [sp, #32]
    9478:	9100      	str	r1, [sp, #0]
    947a:	e7ff      	b.n	947c <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    947c:	9800      	ldr	r0, [sp, #0]
    947e:	9003      	str	r0, [sp, #12]
    9480:	9901      	ldr	r1, [sp, #4]
    9482:	9104      	str	r1, [sp, #16]
    9484:	9803      	ldr	r0, [sp, #12]
    9486:	9904      	ldr	r1, [sp, #16]
    9488:	b009      	add	sp, #36	; 0x24
    948a:	4770      	bx	lr

0000948c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    948c:	b089      	sub	sp, #36	; 0x24
    948e:	9005      	str	r0, [sp, #20]
    9490:	9106      	str	r1, [sp, #24]
    9492:	9107      	str	r1, [sp, #28]
    9494:	9907      	ldr	r1, [sp, #28]
    9496:	9002      	str	r0, [sp, #8]
    9498:	9101      	str	r1, [sp, #4]
    949a:	e7ff      	b.n	949c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    949c:	9802      	ldr	r0, [sp, #8]
    949e:	9008      	str	r0, [sp, #32]
    94a0:	9908      	ldr	r1, [sp, #32]
    94a2:	9100      	str	r1, [sp, #0]
    94a4:	e7ff      	b.n	94a6 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    94a6:	9800      	ldr	r0, [sp, #0]
    94a8:	9003      	str	r0, [sp, #12]
    94aa:	9901      	ldr	r1, [sp, #4]
    94ac:	9104      	str	r1, [sp, #16]
    94ae:	9803      	ldr	r0, [sp, #12]
    94b0:	9904      	ldr	r1, [sp, #16]
    94b2:	b009      	add	sp, #36	; 0x24
    94b4:	4770      	bx	lr

000094b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    94b6:	b089      	sub	sp, #36	; 0x24
    94b8:	9005      	str	r0, [sp, #20]
    94ba:	9106      	str	r1, [sp, #24]
    94bc:	9107      	str	r1, [sp, #28]
    94be:	9907      	ldr	r1, [sp, #28]
    94c0:	9002      	str	r0, [sp, #8]
    94c2:	9101      	str	r1, [sp, #4]
    94c4:	e7ff      	b.n	94c6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    94c6:	9802      	ldr	r0, [sp, #8]
    94c8:	9008      	str	r0, [sp, #32]
    94ca:	9908      	ldr	r1, [sp, #32]
    94cc:	9100      	str	r1, [sp, #0]
    94ce:	e7ff      	b.n	94d0 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
    94d0:	9800      	ldr	r0, [sp, #0]
    94d2:	9003      	str	r0, [sp, #12]
    94d4:	9901      	ldr	r1, [sp, #4]
    94d6:	9104      	str	r1, [sp, #16]
    94d8:	9803      	ldr	r0, [sp, #12]
    94da:	9904      	ldr	r1, [sp, #16]
    94dc:	b009      	add	sp, #36	; 0x24
    94de:	4770      	bx	lr

000094e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
    94e0:	b089      	sub	sp, #36	; 0x24
    94e2:	9005      	str	r0, [sp, #20]
    94e4:	9106      	str	r1, [sp, #24]
    94e6:	9107      	str	r1, [sp, #28]
    94e8:	9907      	ldr	r1, [sp, #28]
    94ea:	9002      	str	r0, [sp, #8]
    94ec:	9101      	str	r1, [sp, #4]
    94ee:	e7ff      	b.n	94f0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
    94f0:	9802      	ldr	r0, [sp, #8]
    94f2:	9008      	str	r0, [sp, #32]
    94f4:	9908      	ldr	r1, [sp, #32]
    94f6:	9100      	str	r1, [sp, #0]
    94f8:	e7ff      	b.n	94fa <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
    94fa:	9800      	ldr	r0, [sp, #0]
    94fc:	9003      	str	r0, [sp, #12]
    94fe:	9901      	ldr	r1, [sp, #4]
    9500:	9104      	str	r1, [sp, #16]
    9502:	9803      	ldr	r0, [sp, #12]
    9504:	9904      	ldr	r1, [sp, #16]
    9506:	b009      	add	sp, #36	; 0x24
    9508:	4770      	bx	lr

0000950a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
    950a:	b580      	push	{r7, lr}
    950c:	b088      	sub	sp, #32
    950e:	9004      	str	r0, [sp, #16]
    9510:	9105      	str	r1, [sp, #20]
    9512:	f000 f819 	bl	9548 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
    9516:	9001      	str	r0, [sp, #4]
    9518:	9100      	str	r1, [sp, #0]
    951a:	e7ff      	b.n	951c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
    951c:	9801      	ldr	r0, [sp, #4]
    951e:	9006      	str	r0, [sp, #24]
    9520:	9900      	ldr	r1, [sp, #0]
    9522:	f001 0201 	and.w	r2, r1, #1
    9526:	f88d 201f 	strb.w	r2, [sp, #31]
    952a:	2a00      	cmp	r2, #0
    952c:	d105      	bne.n	953a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
    952e:	e7ff      	b.n	9530 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
    9530:	9801      	ldr	r0, [sp, #4]
    9532:	9003      	str	r0, [sp, #12]
    9534:	2101      	movs	r1, #1
    9536:	9102      	str	r1, [sp, #8]
    9538:	e002      	b.n	9540 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    953a:	2000      	movs	r0, #0
    953c:	9002      	str	r0, [sp, #8]
    953e:	e7ff      	b.n	9540 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    9540:	9802      	ldr	r0, [sp, #8]
    9542:	9903      	ldr	r1, [sp, #12]
    9544:	b008      	add	sp, #32
    9546:	bd80      	pop	{r7, pc}

00009548 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
    9548:	b08a      	sub	sp, #40	; 0x28
    954a:	9004      	str	r0, [sp, #16]
    954c:	9105      	str	r1, [sp, #20]
    954e:	1a40      	subs	r0, r0, r1
    9550:	f04f 0100 	mov.w	r1, #0
    9554:	f141 0100 	adc.w	r1, r1, #0
    9558:	f1c1 0101 	rsb	r1, r1, #1
    955c:	9006      	str	r0, [sp, #24]
    955e:	f88d 101c 	strb.w	r1, [sp, #28]
    9562:	9806      	ldr	r0, [sp, #24]
    9564:	f89d 101c 	ldrb.w	r1, [sp, #28]
    9568:	9001      	str	r0, [sp, #4]
    956a:	9100      	str	r1, [sp, #0]
    956c:	e7ff      	b.n	956e <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
    956e:	9801      	ldr	r0, [sp, #4]
    9570:	9008      	str	r0, [sp, #32]
    9572:	9900      	ldr	r1, [sp, #0]
    9574:	f001 0201 	and.w	r2, r1, #1
    9578:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    957c:	9002      	str	r0, [sp, #8]
    957e:	f88d 200c 	strb.w	r2, [sp, #12]
    9582:	9802      	ldr	r0, [sp, #8]
    9584:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9588:	b00a      	add	sp, #40	; 0x28
    958a:	4770      	bx	lr

0000958c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
    baudrate:   8000,  //  In kHZ. Use SPI at 8MHz (the fastest clock available on the nRF52832) because otherwise refreshing will be super slow.
    word_size:  hal::HAL_SPI_WORD_SIZE_8BIT as u8,
};

/// Initialise the display controller
pub fn start_display() -> MynewtResult<()> {
    958c:	b5b0      	push	{r4, r5, r7, lr}
    958e:	b0b2      	sub	sp, #200	; 0xc8
    //  Create SPI port and GPIO pins
    let mut spi_port = mynewt::SPI::new();
    9590:	f00a ffd9 	bl	14546 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
    9594:	9115      	str	r1, [sp, #84]	; 0x54
    9596:	9014      	str	r0, [sp, #80]	; 0x50
    9598:	e7ff      	b.n	959a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
    959a:	f00b f992 	bl	148c2 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    959e:	9016      	str	r0, [sp, #88]	; 0x58
    95a0:	e7ff      	b.n	95a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
    95a2:	f00b f98e 	bl	148c2 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    95a6:	9017      	str	r0, [sp, #92]	; 0x5c
    95a8:	e7ff      	b.n	95aa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>

    //  Init SPI port and GPIO pins
    spi_port.init(
    95aa:	f240 03e8 	movw	r3, #232	; 0xe8
    95ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b2:	a814      	add	r0, sp, #80	; 0x50
    95b4:	2100      	movs	r1, #0
    95b6:	2219      	movs	r2, #25
    95b8:	f00a ffcd 	bl	14556 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
    95bc:	9012      	str	r0, [sp, #72]	; 0x48
    95be:	e7ff      	b.n	95c0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
    95c0:	9812      	ldr	r0, [sp, #72]	; 0x48
    95c2:	f7ff fb5d 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    95c6:	9018      	str	r0, [sp, #96]	; 0x60
    95c8:	e7ff      	b.n	95ca <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
        DISPLAY_SPI, //  Mynewt SPI port 0
        DISPLAY_CS,  //  LCD_CS (P0.25): Chip select
        unsafe { &mut SPI_SETTINGS }
    ) ? ;
    95ca:	9818      	ldr	r0, [sp, #96]	; 0x60
    95cc:	1e41      	subs	r1, r0, #1
    95ce:	bf18      	it	ne
    95d0:	2101      	movne	r1, #1
    95d2:	2801      	cmp	r0, #1
    95d4:	d001      	beq.n	95da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
    95d6:	e7ff      	b.n	95d8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
    95d8:	e006      	b.n	95e8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
    95da:	a816      	add	r0, sp, #88	; 0x58
    95dc:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    95de:	f00b f972 	bl	148c6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    95e2:	9011      	str	r0, [sp, #68]	; 0x44
    95e4:	e010      	b.n	9608 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
    95e6:	defe      	udf	#254	; 0xfe
    ) ? ;
    95e8:	9818      	ldr	r0, [sp, #96]	; 0x60
    95ea:	902d      	str	r0, [sp, #180]	; 0xb4
    95ec:	f009 fb68 	bl	12cc0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    95f0:	9010      	str	r0, [sp, #64]	; 0x40
    95f2:	e002      	b.n	95fa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
    unsafe {
        DISPLAY.init(&mut delay) ? ;
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    }
    Ok(())
}
    95f4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    95f6:	b032      	add	sp, #200	; 0xc8
    95f8:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
    95fa:	9810      	ldr	r0, [sp, #64]	; 0x40
    95fc:	f7ff fb34 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9600:	9013      	str	r0, [sp, #76]	; 0x4c
    9602:	e7ff      	b.n	9604 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
    9604:	e7ff      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    9606:	e7f5      	b.n	95f4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9608:	9811      	ldr	r0, [sp, #68]	; 0x44
    960a:	f7ff fb39 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    960e:	9019      	str	r0, [sp, #100]	; 0x64
    9610:	e7ff      	b.n	9612 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
    9612:	9819      	ldr	r0, [sp, #100]	; 0x64
    9614:	1e41      	subs	r1, r0, #1
    9616:	bf18      	it	ne
    9618:	2101      	movne	r1, #1
    961a:	2801      	cmp	r0, #1
    961c:	d001      	beq.n	9622 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
    961e:	e7ff      	b.n	9620 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
    9620:	e006      	b.n	9630 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
    9622:	a817      	add	r0, sp, #92	; 0x5c
    9624:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9626:	f00b f94e 	bl	148c6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    962a:	900f      	str	r0, [sp, #60]	; 0x3c
    962c:	e00c      	b.n	9648 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    962e:	defe      	udf	#254	; 0xfe
    9630:	9819      	ldr	r0, [sp, #100]	; 0x64
    9632:	902e      	str	r0, [sp, #184]	; 0xb8
    9634:	f009 fb44 	bl	12cc0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9638:	900e      	str	r0, [sp, #56]	; 0x38
    963a:	e7ff      	b.n	963c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
    963c:	980e      	ldr	r0, [sp, #56]	; 0x38
    963e:	f7ff fb13 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9642:	9013      	str	r0, [sp, #76]	; 0x4c
    9644:	e7ff      	b.n	9646 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
    9646:	e7de      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9648:	980f      	ldr	r0, [sp, #60]	; 0x3c
    964a:	f7ff fb19 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    964e:	901a      	str	r0, [sp, #104]	; 0x68
    9650:	e7ff      	b.n	9652 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
    9652:	981a      	ldr	r0, [sp, #104]	; 0x68
    9654:	1e41      	subs	r1, r0, #1
    9656:	bf18      	it	ne
    9658:	2101      	movne	r1, #1
    965a:	2801      	cmp	r0, #1
    965c:	d001      	beq.n	9662 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
    965e:	e7ff      	b.n	9660 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
    9660:	e004      	b.n	966c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    9662:	f00b f92e 	bl	148c2 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    9666:	900d      	str	r0, [sp, #52]	; 0x34
    9668:	e00c      	b.n	9684 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    966a:	defe      	udf	#254	; 0xfe
    966c:	981a      	ldr	r0, [sp, #104]	; 0x68
    966e:	902f      	str	r0, [sp, #188]	; 0xbc
    9670:	f009 fb26 	bl	12cc0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9674:	900c      	str	r0, [sp, #48]	; 0x30
    9676:	e7ff      	b.n	9678 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
    9678:	980c      	ldr	r0, [sp, #48]	; 0x30
    967a:	f7ff faf5 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    967e:	9013      	str	r0, [sp, #76]	; 0x4c
    9680:	e7ff      	b.n	9682 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
    9682:	e7c0      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    9684:	f240 1060 	movw	r0, #352	; 0x160
    9688:	f2c2 0000 	movt	r0, #8192	; 0x2000
    968c:	990d      	ldr	r1, [sp, #52]	; 0x34
    968e:	6001      	str	r1, [r0, #0]
    9690:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    9692:	f00b f918 	bl	148c6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    9696:	900b      	str	r0, [sp, #44]	; 0x2c
    9698:	e7ff      	b.n	969a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
    969a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    969c:	f7ff faf0 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    96a0:	901b      	str	r0, [sp, #108]	; 0x6c
    96a2:	e7ff      	b.n	96a4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
    96a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
    96a6:	1e41      	subs	r1, r0, #1
    96a8:	bf18      	it	ne
    96aa:	2101      	movne	r1, #1
    96ac:	2801      	cmp	r0, #1
    96ae:	d001      	beq.n	96b4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
    96b0:	e7ff      	b.n	96b2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
    96b2:	e008      	b.n	96c6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
    96b4:	f240 1060 	movw	r0, #352	; 0x160
    96b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    96bc:	f00b f99c 	bl	149f8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    96c0:	900a      	str	r0, [sp, #40]	; 0x28
    96c2:	e00d      	b.n	96e0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    96c4:	defe      	udf	#254	; 0xfe
    96c6:	981b      	ldr	r0, [sp, #108]	; 0x6c
    96c8:	9030      	str	r0, [sp, #192]	; 0xc0
    96ca:	f009 faf9 	bl	12cc0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    96ce:	9009      	str	r0, [sp, #36]	; 0x24
    96d0:	e7ff      	b.n	96d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
    96d2:	9809      	ldr	r0, [sp, #36]	; 0x24
    96d4:	f7ff fac8 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    96d8:	9013      	str	r0, [sp, #76]	; 0x4c
    96da:	e7ff      	b.n	96dc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
    96dc:	e7ff      	b.n	96de <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    96de:	e792      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
    96e0:	980a      	ldr	r0, [sp, #40]	; 0x28
    96e2:	f7ff facd 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    96e6:	901c      	str	r0, [sp, #112]	; 0x70
    96e8:	e7ff      	b.n	96ea <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
    96ea:	981c      	ldr	r0, [sp, #112]	; 0x70
    96ec:	1e41      	subs	r1, r0, #1
    96ee:	bf18      	it	ne
    96f0:	2101      	movne	r1, #1
    96f2:	2801      	cmp	r0, #1
    96f4:	d001      	beq.n	96fa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
    96f6:	e7ff      	b.n	96f8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
    96f8:	e011      	b.n	971e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
    96fa:	9914      	ldr	r1, [sp, #80]	; 0x50
    96fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
    96fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
    9700:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    9702:	46ec      	mov	ip, sp
    9704:	f04f 0e01 	mov.w	lr, #1
    9708:	f8cc e008 	str.w	lr, [ip, #8]
    970c:	f8cc e004 	str.w	lr, [ip, #4]
    9710:	f8cc 0000 	str.w	r0, [ip]
    9714:	a81d      	add	r0, sp, #116	; 0x74
    9716:	f000 fb4f 	bl	9db8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
    971a:	e00c      	b.n	9736 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
    971c:	defe      	udf	#254	; 0xfe
    971e:	981c      	ldr	r0, [sp, #112]	; 0x70
    9720:	9031      	str	r0, [sp, #196]	; 0xc4
    9722:	f009 facd 	bl	12cc0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9726:	9008      	str	r0, [sp, #32]
    9728:	e7ff      	b.n	972a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
    972a:	9808      	ldr	r0, [sp, #32]
    972c:	f7ff fa9c 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9730:	9013      	str	r0, [sp, #76]	; 0x4c
    9732:	e7ff      	b.n	9734 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
    9734:	e7d3      	b.n	96de <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    9736:	f240 1048 	movw	r0, #328	; 0x148
    973a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    973e:	a91d      	add	r1, sp, #116	; 0x74
    9740:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9744:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
    9748:	f00b f96c 	bl	14a24 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
    974c:	e7ff      	b.n	974e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
    974e:	f240 1048 	movw	r0, #328	; 0x148
    9752:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9756:	a923      	add	r1, sp, #140	; 0x8c
    9758:	f000 fb50 	bl	9dfc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
    975c:	9007      	str	r0, [sp, #28]
    975e:	e7ff      	b.n	9760 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
    9760:	9807      	ldr	r0, [sp, #28]
    9762:	f000 0001 	and.w	r0, r0, #1
    9766:	f7ff fa85 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    976a:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
    976e:	e7ff      	b.n	9770 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
    9770:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
    9774:	07c1      	lsls	r1, r0, #31
    9776:	2900      	cmp	r1, #0
    9778:	d001      	beq.n	977e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
    977a:	e7ff      	b.n	977c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
    977c:	e00d      	b.n	979a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    977e:	f24c 60e0 	movw	r0, #50912	; 0xc6e0
    9782:	f2c0 0001 	movt	r0, #1
    9786:	6801      	ldr	r1, [r0, #0]
    9788:	f240 1048 	movw	r0, #328	; 0x148
    978c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9790:	f000 f949 	bl	9a26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
    9794:	9006      	str	r0, [sp, #24]
    9796:	e00b      	b.n	97b0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
    9798:	defe      	udf	#254	; 0xfe
    979a:	f009 fa29 	bl	12bf0 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    979e:	9005      	str	r0, [sp, #20]
    97a0:	e7ff      	b.n	97a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
    97a2:	9805      	ldr	r0, [sp, #20]
    97a4:	f7ff fa60 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    97a8:	9013      	str	r0, [sp, #76]	; 0x4c
    97aa:	e7ff      	b.n	97ac <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
    97ac:	e7ff      	b.n	97ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
    97ae:	e72a      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    97b0:	9806      	ldr	r0, [sp, #24]
    97b2:	f000 0001 	and.w	r0, r0, #1
    97b6:	f7ff fa5d 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    97ba:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
    97be:	e7ff      	b.n	97c0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
    97c0:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
    97c4:	07c1      	lsls	r1, r0, #31
    97c6:	2900      	cmp	r1, #0
    97c8:	d001      	beq.n	97ce <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
    97ca:	e7ff      	b.n	97cc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
    97cc:	e005      	b.n	97da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
    97ce:	2000      	movs	r0, #0
    Ok(())
    97d0:	9013      	str	r0, [sp, #76]	; 0x4c
    97d2:	2001      	movs	r0, #1
    97d4:	9013      	str	r0, [sp, #76]	; 0x4c
}
    97d6:	e70d      	b.n	95f4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    97d8:	defe      	udf	#254	; 0xfe
    97da:	f009 fa09 	bl	12bf0 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    97de:	9004      	str	r0, [sp, #16]
    97e0:	e7ff      	b.n	97e2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
    97e2:	9804      	ldr	r0, [sp, #16]
    97e4:	f7ff fa40 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    97e8:	9013      	str	r0, [sp, #76]	; 0x4c
    97ea:	e7ff      	b.n	97ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
    97ec:	e7df      	b.n	97ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

000097ee <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
    97ee:	b580      	push	{r7, lr}
    97f0:	b08a      	sub	sp, #40	; 0x28
    97f2:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    97f4:	f001 f8ff 	bl	a9f6 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
    97f8:	9307      	str	r3, [sp, #28]
    97fa:	9206      	str	r2, [sp, #24]
    97fc:	9105      	str	r1, [sp, #20]
    97fe:	9004      	str	r0, [sp, #16]
    9800:	e7ff      	b.n	9802 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
    9802:	a804      	add	r0, sp, #16
    9804:	f00b f986 	bl	14b14 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    9808:	9003      	str	r0, [sp, #12]
    980a:	e7ff      	b.n	980c <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
    980c:	9803      	ldr	r0, [sp, #12]
    980e:	f00b f9f7 	bl	14c00 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    9812:	9002      	str	r0, [sp, #8]
    9814:	9101      	str	r1, [sp, #4]
    9816:	e7ff      	b.n	9818 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
    9818:	9802      	ldr	r0, [sp, #8]
    981a:	f000 0001 	and.w	r0, r0, #1
    981e:	9901      	ldr	r1, [sp, #4]
    9820:	b00a      	add	sp, #40	; 0x28
    9822:	bd80      	pop	{r7, pc}

00009824 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
    9824:	b580      	push	{r7, lr}
    9826:	b090      	sub	sp, #64	; 0x40
    9828:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
    982a:	f100 010c 	add.w	r1, r0, #12
    982e:	9006      	str	r0, [sp, #24]
    9830:	4608      	mov	r0, r1
    9832:	f00b f8ec 	bl	14a0e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    9836:	9005      	str	r0, [sp, #20]
    9838:	e7ff      	b.n	983a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
    983a:	9805      	ldr	r0, [sp, #20]
    983c:	f00b fb13 	bl	14e66 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
    9840:	9004      	str	r0, [sp, #16]
    9842:	e7ff      	b.n	9844 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
    9844:	9804      	ldr	r0, [sp, #16]
    9846:	f000 0001 	and.w	r0, r0, #1
    984a:	f7ff fa13 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    984e:	f88d 001f 	strb.w	r0, [sp, #31]
    9852:	e7ff      	b.n	9854 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
    9854:	f89d 001f 	ldrb.w	r0, [sp, #31]
    9858:	07c1      	lsls	r1, r0, #31
    985a:	2900      	cmp	r1, #0
    985c:	d001      	beq.n	9862 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
    985e:	e7ff      	b.n	9860 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
    9860:	e006      	b.n	9870 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
    9862:	9806      	ldr	r0, [sp, #24]
    9864:	300c      	adds	r0, #12
    9866:	f00b f8c7 	bl	149f8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    986a:	9003      	str	r0, [sp, #12]
    986c:	e00d      	b.n	988a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
    986e:	defe      	udf	#254	; 0xfe
    9870:	f008 fdde 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9874:	e003      	b.n	987e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
    9876:	f89d 001e 	ldrb.w	r0, [sp, #30]
    987a:	b010      	add	sp, #64	; 0x40
    987c:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
    987e:	f00b fb47 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9882:	f88d 001e 	strb.w	r0, [sp, #30]
    9886:	e7ff      	b.n	9888 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
    9888:	e7f5      	b.n	9876 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
    988a:	9803      	ldr	r0, [sp, #12]
    988c:	f00b fa96 	bl	14dbc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
    9890:	9002      	str	r0, [sp, #8]
    9892:	e7ff      	b.n	9894 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
    9894:	9802      	ldr	r0, [sp, #8]
    9896:	f000 0001 	and.w	r0, r0, #1
    989a:	f7ff f9eb 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    989e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    98a2:	e7ff      	b.n	98a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
    98a4:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    98a8:	07c1      	lsls	r1, r0, #31
    98aa:	2900      	cmp	r1, #0
    98ac:	d001      	beq.n	98b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
    98ae:	e7ff      	b.n	98b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
    98b0:	e006      	b.n	98c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
    98b2:	9806      	ldr	r0, [sp, #24]
    98b4:	300c      	adds	r0, #12
    98b6:	f00b f8aa 	bl	14a0e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    98ba:	9001      	str	r0, [sp, #4]
    98bc:	e009      	b.n	98d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
    98be:	defe      	udf	#254	; 0xfe
    98c0:	f008 fdb6 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    98c4:	e7ff      	b.n	98c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
    98c6:	f00b fb23 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    98ca:	f88d 001e 	strb.w	r0, [sp, #30]
    98ce:	e7ff      	b.n	98d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
    98d0:	e7d1      	b.n	9876 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
    98d2:	9801      	ldr	r0, [sp, #4]
    98d4:	f00b fa1d 	bl	14d12 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
    98d8:	f88d 001e 	strb.w	r0, [sp, #30]
    98dc:	e7ff      	b.n	98de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
    98de:	e7ca      	b.n	9876 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

000098e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
    98e0:	b082      	sub	sp, #8
    98e2:	9001      	str	r0, [sp, #4]
    98e4:	e7ff      	b.n	98e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
    98e6:	b002      	add	sp, #8
    98e8:	4770      	bx	lr

000098ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
    98ea:	b082      	sub	sp, #8
    98ec:	9001      	str	r0, [sp, #4]
    98ee:	e7ff      	b.n	98f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
    98f0:	b002      	add	sp, #8
    98f2:	4770      	bx	lr

000098f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
    98f4:	b082      	sub	sp, #8
    98f6:	9001      	str	r0, [sp, #4]
    98f8:	e7ff      	b.n	98fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
    98fa:	b002      	add	sp, #8
    98fc:	4770      	bx	lr

000098fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
        }
        Ok(())
    }

    #[cfg(feature = "noblock_spi")]  //  If non-blocking SPI is enabled...
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
    98fe:	b580      	push	{r7, lr}
    9900:	b084      	sub	sp, #16
    9902:	9001      	str	r0, [sp, #4]
    9904:	9102      	str	r1, [sp, #8]
    9906:	9203      	str	r2, [sp, #12]
        //  Write the data bytes,
        mynewt::spi::spi_noblock_write_data(
    9908:	4608      	mov	r0, r1
    990a:	4611      	mov	r1, r2
    990c:	f00a f832 	bl	13974 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9910:	9000      	str	r0, [sp, #0]
    9912:	e7ff      	b.n	9914 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
    9914:	f24c 7140 	movw	r1, #51008	; 0xc740
    9918:	f2c0 0101 	movt	r1, #1
    991c:	f24c 7350 	movw	r3, #51024	; 0xc750
    9920:	f2c0 0301 	movt	r3, #1
    9924:	220d      	movs	r2, #13
    9926:	9800      	ldr	r0, [sp, #0]
    9928:	f7ff f96b 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    992c:	e7ff      	b.n	992e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
    992e:	2000      	movs	r0, #0
            data
        ).expect("spi data fail");
        Ok(())
    }
    9930:	b004      	add	sp, #16
    9932:	bd80      	pop	{r7, pc}

00009934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
        self.dc.set_high().map_err(|_| ())?;
        self.spi.write(data).map_err(|_| ())
    }

    /// Writes a data word to the display.
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
    9934:	b580      	push	{r7, lr}
    9936:	b088      	sub	sp, #32
    9938:	460a      	mov	r2, r1
    993a:	9006      	str	r0, [sp, #24]
    993c:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
    9940:	9004      	str	r0, [sp, #16]
    9942:	4608      	mov	r0, r1
    9944:	9203      	str	r2, [sp, #12]
    9946:	f000 fe08 	bl	a55a <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
    994a:	9002      	str	r0, [sp, #8]
    994c:	e7ff      	b.n	994e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
    994e:	9802      	ldr	r0, [sp, #8]
    9950:	f8ad 0016 	strh.w	r0, [sp, #22]
    9954:	e7ff      	b.n	9956 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
    9956:	f10d 0116 	add.w	r1, sp, #22
    995a:	2202      	movs	r2, #2
        self.write_data(&bytes)
    995c:	9804      	ldr	r0, [sp, #16]
    995e:	f7ff ffce 	bl	98fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
    9962:	9001      	str	r0, [sp, #4]
    9964:	e7ff      	b.n	9966 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
    9966:	9801      	ldr	r0, [sp, #4]
    9968:	f000 0001 	and.w	r0, r0, #1
    996c:	b008      	add	sp, #32
    996e:	bd80      	pop	{r7, pc}

00009970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
    9970:	b580      	push	{r7, lr}
    9972:	b08e      	sub	sp, #56	; 0x38
    9974:	468c      	mov	ip, r1
    9976:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
    997a:	920b      	str	r2, [sp, #44]	; 0x2c
    997c:	930c      	str	r3, [sp, #48]	; 0x30
    997e:	900d      	str	r0, [sp, #52]	; 0x34
    9980:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
    9984:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9988:	f000 fdbd 	bl	a506 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
    998c:	9008      	str	r0, [sp, #32]
    998e:	9107      	str	r1, [sp, #28]
    9990:	e7ff      	b.n	9992 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
    9992:	9808      	ldr	r0, [sp, #32]
    9994:	f000 0001 	and.w	r0, r0, #1
    9998:	f24c 7260 	movw	r2, #51040	; 0xc760
    999c:	f2c0 0201 	movt	r2, #1
    99a0:	9907      	ldr	r1, [sp, #28]
    99a2:	f00b f8cc 	bl	14b3e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    99a6:	9006      	str	r0, [sp, #24]
    99a8:	e7ff      	b.n	99aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
    99aa:	9806      	ldr	r0, [sp, #24]
    99ac:	f009 ff9a 	bl	138e4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
    99b0:	9005      	str	r0, [sp, #20]
    99b2:	e7ff      	b.n	99b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
    99b4:	f24c 7170 	movw	r1, #51056	; 0xc770
    99b8:	f2c0 0101 	movt	r1, #1
    99bc:	f24c 737c 	movw	r3, #51068	; 0xc77c
    99c0:	f2c0 0301 	movt	r3, #1
    99c4:	220c      	movs	r2, #12
    99c6:	9805      	ldr	r0, [sp, #20]
    99c8:	f7ff f91b 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    99cc:	e7ff      	b.n	99ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
    99ce:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
    99d0:	f00b f904 	bl	14bdc <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
    99d4:	9004      	str	r0, [sp, #16]
    99d6:	e7ff      	b.n	99d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
    99d8:	9804      	ldr	r0, [sp, #16]
    99da:	07c1      	lsls	r1, r0, #31
    99dc:	2900      	cmp	r1, #0
    99de:	d01f      	beq.n	9a20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    99e0:	e7ff      	b.n	99e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
    99e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    99e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    99e6:	f24c 728c 	movw	r2, #51084	; 0xc78c
    99ea:	f2c0 0201 	movt	r2, #1
    99ee:	f00b f8cf 	bl	14b90 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
    99f2:	9003      	str	r0, [sp, #12]
    99f4:	9102      	str	r1, [sp, #8]
    99f6:	e7ff      	b.n	99f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
    99f8:	9803      	ldr	r0, [sp, #12]
    99fa:	9902      	ldr	r1, [sp, #8]
    99fc:	f009 ffba 	bl	13974 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9a00:	9001      	str	r0, [sp, #4]
    9a02:	e7ff      	b.n	9a04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
    9a04:	f24c 7140 	movw	r1, #51008	; 0xc740
    9a08:	f2c0 0101 	movt	r1, #1
    9a0c:	f24c 739c 	movw	r3, #51100	; 0xc79c
    9a10:	f2c0 0301 	movt	r3, #1
    9a14:	220d      	movs	r2, #13
    9a16:	9801      	ldr	r0, [sp, #4]
    9a18:	f7ff f8f3 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9a1c:	e7ff      	b.n	9a1e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
    9a1e:	e7ff      	b.n	9a20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9a20:	2000      	movs	r0, #0
    }
    9a22:	b00e      	add	sp, #56	; 0x38
    9a24:	bd80      	pop	{r7, pc}

00009a26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:

    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
    9a26:	b580      	push	{r7, lr}
    9a28:	b098      	sub	sp, #96	; 0x60
    9a2a:	9012      	str	r0, [sp, #72]	; 0x48
    9a2c:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
    9a2e:	7d02      	ldrb	r2, [r0, #20]
    9a30:	07d2      	lsls	r2, r2, #31
    9a32:	2a00      	cmp	r2, #0
    9a34:	910a      	str	r1, [sp, #40]	; 0x28
    9a36:	9009      	str	r0, [sp, #36]	; 0x24
    9a38:	d109      	bne.n	9a4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
    9a3a:	e7ff      	b.n	9a3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
    9a3c:	2036      	movs	r0, #54	; 0x36
            self.write_command(
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
            ))?;
        } else {
            self.write_command(
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9a3e:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    9a42:	980a      	ldr	r0, [sp, #40]	; 0x28
    9a44:	f7ff fed3 	bl	97ee <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9a48:	9008      	str	r0, [sp, #32]
    9a4a:	9107      	str	r1, [sp, #28]
    9a4c:	e044      	b.n	9ad8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
    9a4e:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
    9a50:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    9a54:	980a      	ldr	r0, [sp, #40]	; 0x28
    9a56:	f7ff feca 	bl	97ee <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9a5a:	9006      	str	r0, [sp, #24]
    9a5c:	9105      	str	r1, [sp, #20]
    9a5e:	e7ff      	b.n	9a60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
    9a60:	9806      	ldr	r0, [sp, #24]
    9a62:	f000 0001 	and.w	r0, r0, #1
    9a66:	f24c 72ac 	movw	r2, #51116	; 0xc7ac
    9a6a:	f2c0 0201 	movt	r2, #1
    9a6e:	9905      	ldr	r1, [sp, #20]
    9a70:	f00b f865 	bl	14b3e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9a74:	9004      	str	r0, [sp, #16]
    9a76:	e7ff      	b.n	9a78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
    9a78:	9804      	ldr	r0, [sp, #16]
    9a7a:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9a7e:	f10d 0139 	add.w	r1, sp, #57	; 0x39
    9a82:	910c      	str	r1, [sp, #48]	; 0x30
    9a84:	2101      	movs	r1, #1
    9a86:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
    9a88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9a8c:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    9a90:	9809      	ldr	r0, [sp, #36]	; 0x24
    9a92:	f7ff ff6d 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9a96:	9003      	str	r0, [sp, #12]
    9a98:	e7ff      	b.n	9a9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
    9a9a:	9803      	ldr	r0, [sp, #12]
    9a9c:	f000 0001 	and.w	r0, r0, #1
    9aa0:	f7ff f8e8 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9aa4:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    9aa8:	e7ff      	b.n	9aaa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
    9aaa:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    9aae:	07c1      	lsls	r1, r0, #31
    9ab0:	2900      	cmp	r1, #0
    9ab2:	d001      	beq.n	9ab8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
    9ab4:	e7ff      	b.n	9ab6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
    9ab6:	e001      	b.n	9abc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
    9ab8:	e047      	b.n	9b4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9aba:	defe      	udf	#254	; 0xfe
            ))?;
    9abc:	f008 fcb8 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ac0:	e003      	b.n	9aca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
            ))?;
        }
        Ok(())
    }
    9ac2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9ac6:	b018      	add	sp, #96	; 0x60
    9ac8:	bd80      	pop	{r7, pc}
            ))?;
    9aca:	f00b fa21 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ace:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9ad2:	e7ff      	b.n	9ad4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
    9ad4:	e7ff      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9ad6:	e7f4      	b.n	9ac2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9ad8:	9808      	ldr	r0, [sp, #32]
    9ada:	f000 0001 	and.w	r0, r0, #1
    9ade:	f24c 72bc 	movw	r2, #51132	; 0xc7bc
    9ae2:	f2c0 0201 	movt	r2, #1
    9ae6:	9907      	ldr	r1, [sp, #28]
    9ae8:	f00b f829 	bl	14b3e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9aec:	9002      	str	r0, [sp, #8]
    9aee:	e7ff      	b.n	9af0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
    9af0:	9802      	ldr	r0, [sp, #8]
    9af2:	f040 0108 	orr.w	r1, r0, #8
    9af6:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    9afa:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    9afe:	910f      	str	r1, [sp, #60]	; 0x3c
    9b00:	2101      	movs	r1, #1
    9b02:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
    9b04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9b06:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9b08:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
    9b0e:	f7ff ff2f 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9b12:	9001      	str	r0, [sp, #4]
    9b14:	e7ff      	b.n	9b16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
    9b16:	9801      	ldr	r0, [sp, #4]
    9b18:	f000 0001 	and.w	r0, r0, #1
    9b1c:	f7ff f8aa 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9b20:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9b24:	e7ff      	b.n	9b26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
    9b26:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9b2a:	07c1      	lsls	r1, r0, #31
    9b2c:	2900      	cmp	r1, #0
    9b2e:	d001      	beq.n	9b34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
    9b30:	e7ff      	b.n	9b32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
    9b32:	e001      	b.n	9b38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
    9b34:	e009      	b.n	9b4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9b36:	defe      	udf	#254	; 0xfe
            ))?;
    9b38:	f008 fc7a 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9b3c:	e7ff      	b.n	9b3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
    9b3e:	f00b f9e7 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9b42:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9b46:	e7ff      	b.n	9b48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
    9b48:	e7c5      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9b4a:	2000      	movs	r0, #0
        Ok(())
    9b4c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    9b50:	e7b7      	b.n	9ac2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

00009b52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
        self.dx = dx;
        self.dy = dy;
    }

    /// Sets the address window for the display.
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
    9b52:	b5b0      	push	{r4, r5, r7, lr}
    9b54:	b0a2      	sub	sp, #136	; 0x88
    9b56:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
    9b5a:	469e      	mov	lr, r3
    9b5c:	4614      	mov	r4, r2
    9b5e:	460d      	mov	r5, r1
    9b60:	9015      	str	r0, [sp, #84]	; 0x54
    9b62:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    9b66:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    9b6a:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    9b6e:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
    9b72:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
    9b74:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
    9b78:	2100      	movs	r1, #0
    9b7a:	9110      	str	r1, [sp, #64]	; 0x40
    9b7c:	910f      	str	r1, [sp, #60]	; 0x3c
    9b7e:	910f      	str	r1, [sp, #60]	; 0x3c
    9b80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9b82:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9b84:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9b88:	900d      	str	r0, [sp, #52]	; 0x34
    9b8a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9b8e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9b92:	940a      	str	r4, [sp, #40]	; 0x28
    9b94:	9509      	str	r5, [sp, #36]	; 0x24
    9b96:	f7ff feeb 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9b9a:	9008      	str	r0, [sp, #32]
    9b9c:	e7ff      	b.n	9b9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
    9b9e:	9808      	ldr	r0, [sp, #32]
    9ba0:	f000 0001 	and.w	r0, r0, #1
    9ba4:	f7ff f866 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9ba8:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9bac:	e7ff      	b.n	9bae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
    9bae:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9bb2:	07c1      	lsls	r1, r0, #31
    9bb4:	2900      	cmp	r1, #0
    9bb6:	d001      	beq.n	9bbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
    9bb8:	e7ff      	b.n	9bba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
    9bba:	e00d      	b.n	9bd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
    9bbc:	980d      	ldr	r0, [sp, #52]	; 0x34
    9bbe:	8a01      	ldrh	r1, [r0, #16]
    9bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9bc2:	fa11 f182 	uxtah	r1, r1, r2
    9bc6:	b28b      	uxth	r3, r1
    9bc8:	468c      	mov	ip, r1
    9bca:	428b      	cmp	r3, r1
    9bcc:	f8cd c01c 	str.w	ip, [sp, #28]
    9bd0:	f040 80c2 	bne.w	9d58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
    9bd4:	e00d      	b.n	9bf2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
    9bd6:	defe      	udf	#254	; 0xfe
    9bd8:	f008 fc2a 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9bdc:	e003      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
        self.write_word(ex + self.dx)?;
        self.write_command(Instruction::RASET, None)?;
        self.write_word(sy + self.dy)?;
        self.write_word(ey + self.dy)
    }
    9bde:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    9be2:	b022      	add	sp, #136	; 0x88
    9be4:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
    9be6:	f00b f993 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9bea:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9bee:	e7ff      	b.n	9bf0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
    9bf0:	e7f5      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9bf2:	980d      	ldr	r0, [sp, #52]	; 0x34
    9bf4:	9907      	ldr	r1, [sp, #28]
    9bf6:	f7ff fe9d 	bl	9934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9bfa:	9006      	str	r0, [sp, #24]
    9bfc:	e7ff      	b.n	9bfe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
    9bfe:	9806      	ldr	r0, [sp, #24]
    9c00:	f000 0001 	and.w	r0, r0, #1
    9c04:	f7ff f836 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c08:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9c0c:	e7ff      	b.n	9c0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
    9c0e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9c12:	07c1      	lsls	r1, r0, #31
    9c14:	2900      	cmp	r1, #0
    9c16:	d001      	beq.n	9c1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
    9c18:	e7ff      	b.n	9c1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
    9c1a:	e00d      	b.n	9c38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
    9c1c:	980d      	ldr	r0, [sp, #52]	; 0x34
    9c1e:	8a01      	ldrh	r1, [r0, #16]
    9c20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9c22:	fa11 f182 	uxtah	r1, r1, r2
    9c26:	b28b      	uxth	r3, r1
    9c28:	468c      	mov	ip, r1
    9c2a:	428b      	cmp	r3, r1
    9c2c:	f8cd c014 	str.w	ip, [sp, #20]
    9c30:	f040 809e 	bne.w	9d70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
    9c34:	e009      	b.n	9c4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
    9c36:	defe      	udf	#254	; 0xfe
    9c38:	f008 fbfa 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9c3c:	e7ff      	b.n	9c3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
    9c3e:	f00b f967 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9c42:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9c46:	e7ff      	b.n	9c48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
    9c48:	e7c9      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
    9c4a:	980d      	ldr	r0, [sp, #52]	; 0x34
    9c4c:	9905      	ldr	r1, [sp, #20]
    9c4e:	f7ff fe71 	bl	9934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9c52:	9004      	str	r0, [sp, #16]
    9c54:	e7ff      	b.n	9c56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
    9c56:	9804      	ldr	r0, [sp, #16]
    9c58:	f000 0001 	and.w	r0, r0, #1
    9c5c:	f7ff f80a 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c60:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    9c64:	e7ff      	b.n	9c66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
    9c66:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    9c6a:	07c1      	lsls	r1, r0, #31
    9c6c:	2900      	cmp	r1, #0
    9c6e:	d001      	beq.n	9c74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
    9c70:	e7ff      	b.n	9c72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
    9c72:	e010      	b.n	9c96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
    9c74:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
    9c76:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
    9c7a:	2000      	movs	r0, #0
    9c7c:	9013      	str	r0, [sp, #76]	; 0x4c
    9c7e:	9012      	str	r0, [sp, #72]	; 0x48
    9c80:	9012      	str	r0, [sp, #72]	; 0x48
    9c82:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9c86:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
    9c8a:	980d      	ldr	r0, [sp, #52]	; 0x34
    9c8c:	f7ff fe70 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9c90:	9003      	str	r0, [sp, #12]
    9c92:	e009      	b.n	9ca8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
    9c94:	defe      	udf	#254	; 0xfe
    9c96:	f008 fbcb 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9c9a:	e7ff      	b.n	9c9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
    9c9c:	f00b f938 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ca0:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9ca4:	e7ff      	b.n	9ca6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
    9ca6:	e79a      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
    9ca8:	9803      	ldr	r0, [sp, #12]
    9caa:	f000 0001 	and.w	r0, r0, #1
    9cae:	f7fe ffe1 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9cb2:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9cb6:	e7ff      	b.n	9cb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
    9cb8:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    9cbc:	07c1      	lsls	r1, r0, #31
    9cbe:	2900      	cmp	r1, #0
    9cc0:	d001      	beq.n	9cc6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
    9cc2:	e7ff      	b.n	9cc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
    9cc4:	e00c      	b.n	9ce0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
    9cc6:	980d      	ldr	r0, [sp, #52]	; 0x34
    9cc8:	8a41      	ldrh	r1, [r0, #18]
    9cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9ccc:	fa11 f182 	uxtah	r1, r1, r2
    9cd0:	b28b      	uxth	r3, r1
    9cd2:	468c      	mov	ip, r1
    9cd4:	428b      	cmp	r3, r1
    9cd6:	f8cd c008 	str.w	ip, [sp, #8]
    9cda:	d155      	bne.n	9d88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
    9cdc:	e009      	b.n	9cf2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
    9cde:	defe      	udf	#254	; 0xfe
    9ce0:	f008 fba6 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ce4:	e7ff      	b.n	9ce6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
    9ce6:	f00b f913 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9cea:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9cee:	e7ff      	b.n	9cf0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
    9cf0:	e775      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
    9cf2:	980d      	ldr	r0, [sp, #52]	; 0x34
    9cf4:	9902      	ldr	r1, [sp, #8]
    9cf6:	f7ff fe1d 	bl	9934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9cfa:	9001      	str	r0, [sp, #4]
    9cfc:	e7ff      	b.n	9cfe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
    9cfe:	9801      	ldr	r0, [sp, #4]
    9d00:	f000 0001 	and.w	r0, r0, #1
    9d04:	f7fe ffb6 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d08:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    9d0c:	e7ff      	b.n	9d0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
    9d0e:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    9d12:	07c1      	lsls	r1, r0, #31
    9d14:	2900      	cmp	r1, #0
    9d16:	d001      	beq.n	9d1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
    9d18:	e7ff      	b.n	9d1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
    9d1a:	e00c      	b.n	9d36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
    9d1c:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d1e:	8a41      	ldrh	r1, [r0, #18]
    9d20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9d22:	fa11 f182 	uxtah	r1, r1, r2
    9d26:	b28b      	uxth	r3, r1
    9d28:	468c      	mov	ip, r1
    9d2a:	428b      	cmp	r3, r1
    9d2c:	f8cd c000 	str.w	ip, [sp]
    9d30:	d136      	bne.n	9da0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
    9d32:	e009      	b.n	9d48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
    9d34:	defe      	udf	#254	; 0xfe
    9d36:	f008 fb7b 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9d3a:	e7ff      	b.n	9d3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
    9d3c:	f00b f8e8 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9d40:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9d44:	e7ff      	b.n	9d46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
    9d46:	e74a      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
    9d48:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d4a:	9900      	ldr	r1, [sp, #0]
    9d4c:	f7ff fdf2 	bl	9934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9d50:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9d54:	e7ff      	b.n	9d56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
    9d56:	e742      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9d58:	f24c 70e0 	movw	r0, #51168	; 0xc7e0
    9d5c:	f2c0 0001 	movt	r0, #1
    9d60:	f24c 72cc 	movw	r2, #51148	; 0xc7cc
    9d64:	f2c0 0201 	movt	r2, #1
    9d68:	211c      	movs	r1, #28
    9d6a:	f00c f809 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9d6e:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
    9d70:	f24c 70e0 	movw	r0, #51168	; 0xc7e0
    9d74:	f2c0 0001 	movt	r0, #1
    9d78:	f24c 72fc 	movw	r2, #51196	; 0xc7fc
    9d7c:	f2c0 0201 	movt	r2, #1
    9d80:	211c      	movs	r1, #28
    9d82:	f00b fffd 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9d86:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
    9d88:	f24c 70e0 	movw	r0, #51168	; 0xc7e0
    9d8c:	f2c0 0001 	movt	r0, #1
    9d90:	f64c 020c 	movw	r2, #51212	; 0xc80c
    9d94:	f2c0 0201 	movt	r2, #1
    9d98:	211c      	movs	r1, #28
    9d9a:	f00b fff1 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9d9e:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
    9da0:	f24c 70e0 	movw	r0, #51168	; 0xc7e0
    9da4:	f2c0 0001 	movt	r0, #1
    9da8:	f64c 021c 	movw	r2, #51228	; 0xc81c
    9dac:	f2c0 0201 	movt	r2, #1
    9db0:	211c      	movs	r1, #28
    9db2:	f00b ffe5 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9db6:	defe      	udf	#254	; 0xfe

00009db8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
    9db8:	b5b0      	push	{r4, r5, r7, lr}
    9dba:	b08a      	sub	sp, #40	; 0x28
    9dbc:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    9dc0:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    9dc4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9dc6:	9106      	str	r1, [sp, #24]
    9dc8:	9207      	str	r2, [sp, #28]
    9dca:	9308      	str	r3, [sp, #32]
    9dcc:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    9dd0:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
    9dd4:	9100      	str	r1, [sp, #0]
    9dd6:	9201      	str	r2, [sp, #4]
    9dd8:	9302      	str	r3, [sp, #8]
    9dda:	9403      	str	r4, [sp, #12]
    9ddc:	f88d e014 	strb.w	lr, [sp, #20]
    9de0:	f88d c015 	strb.w	ip, [sp, #21]
    9de4:	2100      	movs	r1, #0
    9de6:	f8ad 1010 	strh.w	r1, [sp, #16]
    9dea:	f8ad 1012 	strh.w	r1, [sp, #18]
    9dee:	4669      	mov	r1, sp
        display
    9df0:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9df4:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
    9df8:	b00a      	add	sp, #40	; 0x28
    9dfa:	bdb0      	pop	{r4, r5, r7, pc}

00009dfc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
    9dfc:	b580      	push	{r7, lr}
    9dfe:	b0f6      	sub	sp, #472	; 0x1d8
    9e00:	904e      	str	r0, [sp, #312]	; 0x138
    9e02:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
    9e04:	9117      	str	r1, [sp, #92]	; 0x5c
    9e06:	9016      	str	r0, [sp, #88]	; 0x58
    9e08:	f009 f812 	bl	12e30 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
    9e0c:	9015      	str	r0, [sp, #84]	; 0x54
    9e0e:	e7ff      	b.n	9e10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
    9e10:	f64c 012c 	movw	r1, #51244	; 0xc82c
    9e14:	f2c0 0101 	movt	r1, #1
    9e18:	f64c 033c 	movw	r3, #51260	; 0xc83c
    9e1c:	f2c0 0301 	movt	r3, #1
    9e20:	220d      	movs	r2, #13
    9e22:	9815      	ldr	r0, [sp, #84]	; 0x54
    9e24:	f7fe feed 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9e28:	e7ff      	b.n	9e2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
    9e2a:	9816      	ldr	r0, [sp, #88]	; 0x58
    9e2c:	f7ff fcfa 	bl	9824 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
    9e30:	9014      	str	r0, [sp, #80]	; 0x50
    9e32:	e7ff      	b.n	9e34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
    9e34:	9814      	ldr	r0, [sp, #80]	; 0x50
    9e36:	f000 0001 	and.w	r0, r0, #1
    9e3a:	f7fe ff1b 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e3e:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    9e42:	e7ff      	b.n	9e44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
    9e44:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
    9e48:	07c1      	lsls	r1, r0, #31
    9e4a:	2900      	cmp	r1, #0
    9e4c:	d001      	beq.n	9e52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
    9e4e:	e7ff      	b.n	9e50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
    9e50:	e010      	b.n	9e74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
    9e52:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
    9e54:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    9e58:	2000      	movs	r0, #0
    9e5a:	901a      	str	r0, [sp, #104]	; 0x68
    9e5c:	9019      	str	r0, [sp, #100]	; 0x64
    9e5e:	9019      	str	r0, [sp, #100]	; 0x64
    9e60:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9e62:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9e64:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    9e68:	9816      	ldr	r0, [sp, #88]	; 0x58
    9e6a:	f7ff fd81 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9e6e:	9013      	str	r0, [sp, #76]	; 0x4c
    9e70:	e00d      	b.n	9e8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
    9e72:	defe      	udf	#254	; 0xfe
    9e74:	f008 fadc 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e78:	e003      	b.n	9e82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
    9e7a:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    9e7e:	b076      	add	sp, #472	; 0x1d8
    9e80:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
    9e82:	f00b f845 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e86:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9e8a:	e7ff      	b.n	9e8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
    9e8c:	e7f5      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
    9e8e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    9e90:	f000 0001 	and.w	r0, r0, #1
    9e94:	f7fe feee 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e98:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    9e9c:	e7ff      	b.n	9e9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
    9e9e:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    9ea2:	07c1      	lsls	r1, r0, #31
    9ea4:	2900      	cmp	r1, #0
    9ea6:	d001      	beq.n	9eac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
    9ea8:	e7ff      	b.n	9eaa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
    9eaa:	e005      	b.n	9eb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
    9eac:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    9eae:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9eb0:	f00a fdb9 	bl	14a26 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    9eb4:	e009      	b.n	9eca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
    9eb6:	defe      	udf	#254	; 0xfe
    9eb8:	f008 faba 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ebc:	e7ff      	b.n	9ebe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
    9ebe:	f00b f827 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ec2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9ec6:	e7ff      	b.n	9ec8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
    9ec8:	e7d7      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    9eca:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
    9ecc:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    9ed0:	2000      	movs	r0, #0
    9ed2:	901d      	str	r0, [sp, #116]	; 0x74
    9ed4:	901c      	str	r0, [sp, #112]	; 0x70
    9ed6:	901c      	str	r0, [sp, #112]	; 0x70
    9ed8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    9eda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9edc:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
    9ee0:	9816      	ldr	r0, [sp, #88]	; 0x58
    9ee2:	f7ff fd45 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9ee6:	9012      	str	r0, [sp, #72]	; 0x48
    9ee8:	e7ff      	b.n	9eea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
    9eea:	9812      	ldr	r0, [sp, #72]	; 0x48
    9eec:	f000 0001 	and.w	r0, r0, #1
    9ef0:	f7fe fec0 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9ef4:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
    9ef8:	e7ff      	b.n	9efa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
    9efa:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
    9efe:	07c1      	lsls	r1, r0, #31
    9f00:	2900      	cmp	r1, #0
    9f02:	d001      	beq.n	9f08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
    9f04:	e7ff      	b.n	9f06 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
    9f06:	e005      	b.n	9f14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
    9f08:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    9f0a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9f0c:	f00a fd8b 	bl	14a26 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    9f10:	e009      	b.n	9f26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
    9f12:	defe      	udf	#254	; 0xfe
    9f14:	f008 fa8c 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9f18:	e7ff      	b.n	9f1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
    9f1a:	f00a fff9 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9f1e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9f22:	e7ff      	b.n	9f24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
    9f24:	e7a9      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    9f26:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    9f28:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    9f2c:	f64c 0050 	movw	r0, #51280	; 0xc850
    9f30:	f2c0 0001 	movt	r0, #1
    9f34:	6800      	ldr	r0, [r0, #0]
    9f36:	901f      	str	r0, [sp, #124]	; 0x7c
    9f38:	2003      	movs	r0, #3
    9f3a:	9020      	str	r0, [sp, #128]	; 0x80
    9f3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9f3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9f40:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
    9f44:	9816      	ldr	r0, [sp, #88]	; 0x58
    9f46:	f7ff fd13 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9f4a:	9011      	str	r0, [sp, #68]	; 0x44
    9f4c:	e7ff      	b.n	9f4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
    9f4e:	9811      	ldr	r0, [sp, #68]	; 0x44
    9f50:	f000 0001 	and.w	r0, r0, #1
    9f54:	f7fe fe8e 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9f58:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    9f5c:	e7ff      	b.n	9f5e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
    9f5e:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    9f62:	07c1      	lsls	r1, r0, #31
    9f64:	2900      	cmp	r1, #0
    9f66:	d001      	beq.n	9f6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
    9f68:	e7ff      	b.n	9f6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
    9f6a:	e014      	b.n	9f96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
    9f6c:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9f6e:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    9f72:	f64c 0050 	movw	r0, #51280	; 0xc850
    9f76:	f2c0 0001 	movt	r0, #1
    9f7a:	6800      	ldr	r0, [r0, #0]
    9f7c:	9022      	str	r0, [sp, #136]	; 0x88
    9f7e:	2003      	movs	r0, #3
    9f80:	9023      	str	r0, [sp, #140]	; 0x8c
    9f82:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9f84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9f86:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
    9f8a:	9816      	ldr	r0, [sp, #88]	; 0x58
    9f8c:	f7ff fcf0 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9f90:	9010      	str	r0, [sp, #64]	; 0x40
    9f92:	e009      	b.n	9fa8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    9f94:	defe      	udf	#254	; 0xfe
    9f96:	f008 fa4b 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9f9a:	e7ff      	b.n	9f9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
    9f9c:	f00a ffb8 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9fa0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9fa4:	e7ff      	b.n	9fa6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
    9fa6:	e768      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9fa8:	9810      	ldr	r0, [sp, #64]	; 0x40
    9faa:	f000 0001 	and.w	r0, r0, #1
    9fae:	f7fe fe61 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9fb2:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
    9fb6:	e7ff      	b.n	9fb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
    9fb8:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
    9fbc:	07c1      	lsls	r1, r0, #31
    9fbe:	2900      	cmp	r1, #0
    9fc0:	d001      	beq.n	9fc6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
    9fc2:	e7ff      	b.n	9fc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
    9fc4:	e014      	b.n	9ff0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
    9fc6:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
    9fc8:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    9fcc:	f64c 005c 	movw	r0, #51292	; 0xc85c
    9fd0:	f2c0 0001 	movt	r0, #1
    9fd4:	6800      	ldr	r0, [r0, #0]
    9fd6:	9025      	str	r0, [sp, #148]	; 0x94
    9fd8:	2006      	movs	r0, #6
    9fda:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
    9fdc:	9a25      	ldr	r2, [sp, #148]	; 0x94
    9fde:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9fe0:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
    9fe4:	9816      	ldr	r0, [sp, #88]	; 0x58
    9fe6:	f7ff fcc3 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9fea:	900f      	str	r0, [sp, #60]	; 0x3c
    9fec:	e009      	b.n	a002 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9fee:	defe      	udf	#254	; 0xfe
    9ff0:	f008 fa1e 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ff4:	e7ff      	b.n	9ff6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
    9ff6:	f00a ff8b 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ffa:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9ffe:	e7ff      	b.n	a000 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
    a000:	e73b      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
    a002:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a004:	f000 0001 	and.w	r0, r0, #1
    a008:	f7fe fe34 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a00c:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
    a010:	e7ff      	b.n	a012 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a012:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
    a016:	07c1      	lsls	r1, r0, #31
    a018:	2900      	cmp	r1, #0
    a01a:	d001      	beq.n	a020 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
    a01c:	e7ff      	b.n	a01e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
    a01e:	e014      	b.n	a04a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
    a020:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a022:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
    a026:	f64c 0064 	movw	r0, #51300	; 0xc864
    a02a:	f2c0 0001 	movt	r0, #1
    a02e:	6800      	ldr	r0, [r0, #0]
    a030:	9028      	str	r0, [sp, #160]	; 0xa0
    a032:	2001      	movs	r0, #1
    a034:	9029      	str	r0, [sp, #164]	; 0xa4
    a036:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    a038:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    a03a:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
    a03e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a040:	f7ff fc96 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a044:	900e      	str	r0, [sp, #56]	; 0x38
    a046:	e009      	b.n	a05c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
    a048:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a04a:	f008 f9f1 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a04e:	e7ff      	b.n	a050 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
    a050:	f00a ff5e 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a054:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a058:	e7ff      	b.n	a05a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
    a05a:	e70e      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a05c:	980e      	ldr	r0, [sp, #56]	; 0x38
    a05e:	f000 0001 	and.w	r0, r0, #1
    a062:	f7fe fe07 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a066:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
    a06a:	e7ff      	b.n	a06c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
    a06c:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
    a070:	07c1      	lsls	r1, r0, #31
    a072:	2900      	cmp	r1, #0
    a074:	d001      	beq.n	a07a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
    a076:	e7ff      	b.n	a078 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
    a078:	e014      	b.n	a0a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
    a07a:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a07c:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
    a080:	f64c 006c 	movw	r0, #51308	; 0xc86c
    a084:	f2c0 0001 	movt	r0, #1
    a088:	6800      	ldr	r0, [r0, #0]
    a08a:	902b      	str	r0, [sp, #172]	; 0xac
    a08c:	2003      	movs	r0, #3
    a08e:	902c      	str	r0, [sp, #176]	; 0xb0
    a090:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    a092:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    a094:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
    a098:	9816      	ldr	r0, [sp, #88]	; 0x58
    a09a:	f7ff fc69 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a09e:	900d      	str	r0, [sp, #52]	; 0x34
    a0a0:	e009      	b.n	a0b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a0a2:	defe      	udf	#254	; 0xfe
    a0a4:	f008 f9c4 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a0a8:	e7ff      	b.n	a0aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
    a0aa:	f00a ff31 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a0ae:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a0b2:	e7ff      	b.n	a0b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
    a0b4:	e6e1      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a0b6:	980d      	ldr	r0, [sp, #52]	; 0x34
    a0b8:	f000 0001 	and.w	r0, r0, #1
    a0bc:	f7fe fdda 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a0c0:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
    a0c4:	e7ff      	b.n	a0c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
    a0c6:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
    a0ca:	07c1      	lsls	r1, r0, #31
    a0cc:	2900      	cmp	r1, #0
    a0ce:	d001      	beq.n	a0d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
    a0d0:	e7ff      	b.n	a0d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
    a0d2:	e014      	b.n	a0fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
    a0d4:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a0d6:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
    a0da:	f64c 0074 	movw	r0, #51316	; 0xc874
    a0de:	f2c0 0001 	movt	r0, #1
    a0e2:	6800      	ldr	r0, [r0, #0]
    a0e4:	902e      	str	r0, [sp, #184]	; 0xb8
    a0e6:	2001      	movs	r0, #1
    a0e8:	902f      	str	r0, [sp, #188]	; 0xbc
    a0ea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    a0ec:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    a0ee:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
    a0f2:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0f4:	f7ff fc3c 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0f8:	900c      	str	r0, [sp, #48]	; 0x30
    a0fa:	e009      	b.n	a110 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a0fc:	defe      	udf	#254	; 0xfe
    a0fe:	f008 f997 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a102:	e7ff      	b.n	a104 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
    a104:	f00a ff04 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a108:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a10c:	e7ff      	b.n	a10e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
    a10e:	e6b4      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a110:	980c      	ldr	r0, [sp, #48]	; 0x30
    a112:	f000 0001 	and.w	r0, r0, #1
    a116:	f7fe fdad 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a11a:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
    a11e:	e7ff      	b.n	a120 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
    a120:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
    a124:	07c1      	lsls	r1, r0, #31
    a126:	2900      	cmp	r1, #0
    a128:	d001      	beq.n	a12e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
    a12a:	e7ff      	b.n	a12c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
    a12c:	e014      	b.n	a158 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
    a12e:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a130:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
    a134:	f64c 007c 	movw	r0, #51324	; 0xc87c
    a138:	f2c0 0001 	movt	r0, #1
    a13c:	6800      	ldr	r0, [r0, #0]
    a13e:	9031      	str	r0, [sp, #196]	; 0xc4
    a140:	2002      	movs	r0, #2
    a142:	9032      	str	r0, [sp, #200]	; 0xc8
    a144:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    a146:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    a148:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
    a14c:	9816      	ldr	r0, [sp, #88]	; 0x58
    a14e:	f7ff fc0f 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a152:	900b      	str	r0, [sp, #44]	; 0x2c
    a154:	e009      	b.n	a16a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a156:	defe      	udf	#254	; 0xfe
    a158:	f008 f96a 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a15c:	e7ff      	b.n	a15e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
    a15e:	f00a fed7 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a162:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a166:	e7ff      	b.n	a168 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
    a168:	e687      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a16a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a16c:	f000 0001 	and.w	r0, r0, #1
    a170:	f7fe fd80 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a174:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
    a178:	e7ff      	b.n	a17a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
    a17a:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
    a17e:	07c1      	lsls	r1, r0, #31
    a180:	2900      	cmp	r1, #0
    a182:	d001      	beq.n	a188 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
    a184:	e7ff      	b.n	a186 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
    a186:	e014      	b.n	a1b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
    a188:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a18a:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
    a18e:	f64c 0084 	movw	r0, #51332	; 0xc884
    a192:	f2c0 0001 	movt	r0, #1
    a196:	6800      	ldr	r0, [r0, #0]
    a198:	9034      	str	r0, [sp, #208]	; 0xd0
    a19a:	2002      	movs	r0, #2
    a19c:	9035      	str	r0, [sp, #212]	; 0xd4
    a19e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    a1a0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    a1a2:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
    a1a6:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1a8:	f7ff fbe2 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a1ac:	900a      	str	r0, [sp, #40]	; 0x28
    a1ae:	e009      	b.n	a1c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a1b0:	defe      	udf	#254	; 0xfe
    a1b2:	f008 f93d 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a1b6:	e7ff      	b.n	a1b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
    a1b8:	f00a feaa 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a1bc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a1c0:	e7ff      	b.n	a1c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
    a1c2:	e65a      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a1c4:	980a      	ldr	r0, [sp, #40]	; 0x28
    a1c6:	f000 0001 	and.w	r0, r0, #1
    a1ca:	f7fe fd53 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a1ce:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
    a1d2:	e7ff      	b.n	a1d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
    a1d4:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
    a1d8:	07c1      	lsls	r1, r0, #31
    a1da:	2900      	cmp	r1, #0
    a1dc:	d001      	beq.n	a1e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
    a1de:	e7ff      	b.n	a1e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
    a1e0:	e014      	b.n	a20c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
    a1e2:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a1e4:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
    a1e8:	f64c 008c 	movw	r0, #51340	; 0xc88c
    a1ec:	f2c0 0001 	movt	r0, #1
    a1f0:	6800      	ldr	r0, [r0, #0]
    a1f2:	9037      	str	r0, [sp, #220]	; 0xdc
    a1f4:	2002      	movs	r0, #2
    a1f6:	9038      	str	r0, [sp, #224]	; 0xe0
    a1f8:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    a1fa:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    a1fc:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
    a200:	9816      	ldr	r0, [sp, #88]	; 0x58
    a202:	f7ff fbb5 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a206:	9009      	str	r0, [sp, #36]	; 0x24
    a208:	e009      	b.n	a21e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a20a:	defe      	udf	#254	; 0xfe
    a20c:	f008 f910 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a210:	e7ff      	b.n	a212 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
    a212:	f00a fe7d 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a216:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a21a:	e7ff      	b.n	a21c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
    a21c:	e62d      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a21e:	9809      	ldr	r0, [sp, #36]	; 0x24
    a220:	f000 0001 	and.w	r0, r0, #1
    a224:	f7fe fd26 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a228:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
    a22c:	e7ff      	b.n	a22e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
    a22e:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
    a232:	07c1      	lsls	r1, r0, #31
    a234:	2900      	cmp	r1, #0
    a236:	d001      	beq.n	a23c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
    a238:	e7ff      	b.n	a23a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
    a23a:	e014      	b.n	a266 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
    a23c:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a23e:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
    a242:	f64c 0094 	movw	r0, #51348	; 0xc894
    a246:	f2c0 0001 	movt	r0, #1
    a24a:	6800      	ldr	r0, [r0, #0]
    a24c:	903a      	str	r0, [sp, #232]	; 0xe8
    a24e:	2001      	movs	r0, #1
    a250:	903b      	str	r0, [sp, #236]	; 0xec
    a252:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    a254:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    a256:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
    a25a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a25c:	f7ff fb88 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a260:	9008      	str	r0, [sp, #32]
    a262:	e009      	b.n	a278 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a264:	defe      	udf	#254	; 0xfe
    a266:	f008 f8e3 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a26a:	e7ff      	b.n	a26c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
    a26c:	f00a fe50 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a270:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a274:	e7ff      	b.n	a276 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
    a276:	e600      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a278:	9808      	ldr	r0, [sp, #32]
    a27a:	f000 0001 	and.w	r0, r0, #1
    a27e:	f7fe fcf9 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a282:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
    a286:	e7ff      	b.n	a288 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
    a288:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
    a28c:	07c1      	lsls	r1, r0, #31
    a28e:	2900      	cmp	r1, #0
    a290:	d001      	beq.n	a296 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
    a292:	e7ff      	b.n	a294 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
    a294:	e006      	b.n	a2a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
    a296:	9816      	ldr	r0, [sp, #88]	; 0x58
    a298:	7d41      	ldrb	r1, [r0, #21]
    a29a:	07c9      	lsls	r1, r1, #31
    a29c:	2900      	cmp	r1, #0
    a29e:	d11a      	bne.n	a2d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
    a2a0:	e009      	b.n	a2b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a2a2:	defe      	udf	#254	; 0xfe
    a2a4:	f008 f8c4 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a2a8:	e7ff      	b.n	a2aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
    a2aa:	f00a fe31 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a2ae:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a2b2:	e7ff      	b.n	a2b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
    a2b4:	e5e1      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a2b6:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
    a2b8:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    a2bc:	2000      	movs	r0, #0
    a2be:	9041      	str	r0, [sp, #260]	; 0x104
    a2c0:	9040      	str	r0, [sp, #256]	; 0x100
    a2c2:	9040      	str	r0, [sp, #256]	; 0x100
    a2c4:	9a40      	ldr	r2, [sp, #256]	; 0x100
    a2c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
    a2c8:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
    a2cc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a2ce:	f7ff fb4f 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a2d2:	9007      	str	r0, [sp, #28]
    a2d4:	e02a      	b.n	a32c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
    a2d6:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
    a2d8:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
    a2dc:	2000      	movs	r0, #0
    a2de:	903e      	str	r0, [sp, #248]	; 0xf8
    a2e0:	903d      	str	r0, [sp, #244]	; 0xf4
    a2e2:	903d      	str	r0, [sp, #244]	; 0xf4
    a2e4:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    a2e6:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    a2e8:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
    a2ec:	9816      	ldr	r0, [sp, #88]	; 0x58
    a2ee:	f7ff fb3f 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a2f2:	9006      	str	r0, [sp, #24]
    a2f4:	e7ff      	b.n	a2f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
    a2f6:	9806      	ldr	r0, [sp, #24]
    a2f8:	f000 0001 	and.w	r0, r0, #1
    a2fc:	f7fe fcba 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a300:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
    a304:	e7ff      	b.n	a306 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
    a306:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
    a30a:	07c1      	lsls	r1, r0, #31
    a30c:	2900      	cmp	r1, #0
    a30e:	d001      	beq.n	a314 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
    a310:	e7ff      	b.n	a312 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
    a312:	e001      	b.n	a318 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
    a314:	e024      	b.n	a360 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
    a316:	defe      	udf	#254	; 0xfe
    a318:	f008 f88a 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a31c:	e7ff      	b.n	a31e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
    a31e:	f00a fdf7 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a322:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a326:	e7ff      	b.n	a328 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
    a328:	e7ff      	b.n	a32a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
    a32a:	e5a6      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
    a32c:	9807      	ldr	r0, [sp, #28]
    a32e:	f000 0001 	and.w	r0, r0, #1
    a332:	f7fe fc9f 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a336:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
    a33a:	e7ff      	b.n	a33c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
    a33c:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
    a340:	07c1      	lsls	r1, r0, #31
    a342:	2900      	cmp	r1, #0
    a344:	d001      	beq.n	a34a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
    a346:	e7ff      	b.n	a348 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
    a348:	e001      	b.n	a34e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
    a34a:	e009      	b.n	a360 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
    a34c:	defe      	udf	#254	; 0xfe
    a34e:	f008 f86f 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a352:	e7ff      	b.n	a354 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
    a354:	f00a fddc 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a358:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a35c:	e7ff      	b.n	a35e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
    a35e:	e7e4      	b.n	a32a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
    a360:	9816      	ldr	r0, [sp, #88]	; 0x58
    a362:	7d01      	ldrb	r1, [r0, #20]
    a364:	07c9      	lsls	r1, r1, #31
    a366:	2900      	cmp	r1, #0
    a368:	d114      	bne.n	a394 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
    a36a:	e7ff      	b.n	a36c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
    a36c:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a36e:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
    a372:	f64c 00a4 	movw	r0, #51364	; 0xc8a4
    a376:	f2c0 0001 	movt	r0, #1
    a37a:	6800      	ldr	r0, [r0, #0]
    a37c:	9046      	str	r0, [sp, #280]	; 0x118
    a37e:	2001      	movs	r0, #1
    a380:	9047      	str	r0, [sp, #284]	; 0x11c
    a382:	9a46      	ldr	r2, [sp, #280]	; 0x118
    a384:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    a386:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
    a38a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a38c:	f7ff faf0 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a390:	9005      	str	r0, [sp, #20]
    a392:	e02e      	b.n	a3f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
    a394:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a396:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
    a39a:	f64c 009c 	movw	r0, #51356	; 0xc89c
    a39e:	f2c0 0001 	movt	r0, #1
    a3a2:	6800      	ldr	r0, [r0, #0]
    a3a4:	9043      	str	r0, [sp, #268]	; 0x10c
    a3a6:	2001      	movs	r0, #1
    a3a8:	9044      	str	r0, [sp, #272]	; 0x110
    a3aa:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    a3ac:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a3ae:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
    a3b2:	9816      	ldr	r0, [sp, #88]	; 0x58
    a3b4:	f7ff fadc 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a3b8:	9004      	str	r0, [sp, #16]
    a3ba:	e7ff      	b.n	a3bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
    a3bc:	9804      	ldr	r0, [sp, #16]
    a3be:	f000 0001 	and.w	r0, r0, #1
    a3c2:	f7fe fc57 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a3c6:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
    a3ca:	e7ff      	b.n	a3cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
    a3cc:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
    a3d0:	07c1      	lsls	r1, r0, #31
    a3d2:	2900      	cmp	r1, #0
    a3d4:	d001      	beq.n	a3da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
    a3d6:	e7ff      	b.n	a3d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
    a3d8:	e001      	b.n	a3de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
    a3da:	e024      	b.n	a426 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a3dc:	defe      	udf	#254	; 0xfe
    a3de:	f008 f827 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a3e2:	e7ff      	b.n	a3e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
    a3e4:	f00a fd94 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a3e8:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a3ec:	e7ff      	b.n	a3ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
    a3ee:	e7ff      	b.n	a3f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a3f0:	e543      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a3f2:	9805      	ldr	r0, [sp, #20]
    a3f4:	f000 0001 	and.w	r0, r0, #1
    a3f8:	f7fe fc3c 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a3fc:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
    a400:	e7ff      	b.n	a402 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
    a402:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    a406:	07c1      	lsls	r1, r0, #31
    a408:	2900      	cmp	r1, #0
    a40a:	d001      	beq.n	a410 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
    a40c:	e7ff      	b.n	a40e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
    a40e:	e001      	b.n	a414 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
    a410:	e009      	b.n	a426 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a412:	defe      	udf	#254	; 0xfe
    a414:	f008 f80c 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a418:	e7ff      	b.n	a41a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
    a41a:	f00a fd79 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a41e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a422:	e7ff      	b.n	a424 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
    a424:	e7e4      	b.n	a3f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a426:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a428:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
    a42c:	f64c 00ac 	movw	r0, #51372	; 0xc8ac
    a430:	f2c0 0001 	movt	r0, #1
    a434:	6800      	ldr	r0, [r0, #0]
    a436:	9049      	str	r0, [sp, #292]	; 0x124
    a438:	2001      	movs	r0, #1
    a43a:	904a      	str	r0, [sp, #296]	; 0x128
    a43c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a43e:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    a440:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
    a444:	9816      	ldr	r0, [sp, #88]	; 0x58
    a446:	f7ff fa93 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a44a:	9003      	str	r0, [sp, #12]
    a44c:	e7ff      	b.n	a44e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
    a44e:	9803      	ldr	r0, [sp, #12]
    a450:	f000 0001 	and.w	r0, r0, #1
    a454:	f7fe fc0e 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a458:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
    a45c:	e7ff      	b.n	a45e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
    a45e:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
    a462:	07c1      	lsls	r1, r0, #31
    a464:	2900      	cmp	r1, #0
    a466:	d001      	beq.n	a46c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
    a468:	e7ff      	b.n	a46a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
    a46a:	e010      	b.n	a48e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
    a46c:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
    a46e:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
    a472:	2000      	movs	r0, #0
    a474:	904d      	str	r0, [sp, #308]	; 0x134
    a476:	904c      	str	r0, [sp, #304]	; 0x130
    a478:	904c      	str	r0, [sp, #304]	; 0x130
    a47a:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    a47c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    a47e:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
    a482:	9816      	ldr	r0, [sp, #88]	; 0x58
    a484:	f7ff fa74 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a488:	9002      	str	r0, [sp, #8]
    a48a:	e009      	b.n	a4a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a48c:	defe      	udf	#254	; 0xfe
    a48e:	f007 ffcf 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a492:	e7ff      	b.n	a494 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
    a494:	f00a fd3c 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a498:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a49c:	e7ff      	b.n	a49e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
    a49e:	e4ec      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
    a4a0:	9802      	ldr	r0, [sp, #8]
    a4a2:	f000 0001 	and.w	r0, r0, #1
    a4a6:	f7fe fbe5 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a4aa:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
    a4ae:	e7ff      	b.n	a4b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
    a4b0:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
    a4b4:	07c1      	lsls	r1, r0, #31
    a4b6:	2900      	cmp	r1, #0
    a4b8:	d001      	beq.n	a4be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
    a4ba:	e7ff      	b.n	a4bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
    a4bc:	e005      	b.n	a4ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
    a4be:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a4c0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a4c2:	f00a fab0 	bl	14a26 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a4c6:	e009      	b.n	a4dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
    a4c8:	defe      	udf	#254	; 0xfe
    a4ca:	f007 ffb1 	bl	12430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a4ce:	e7ff      	b.n	a4d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
    a4d0:	f00a fd1e 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a4d4:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a4d8:	e7ff      	b.n	a4da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
    a4da:	e4ce      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    a4dc:	f009 fade 	bl	13a9c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    a4e0:	9001      	str	r0, [sp, #4]
    a4e2:	e7ff      	b.n	a4e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
    a4e4:	f24c 61e4 	movw	r1, #50916	; 0xc6e4
    a4e8:	f2c0 0101 	movt	r1, #1
    a4ec:	f64c 03b0 	movw	r3, #51376	; 0xc8b0
    a4f0:	f2c0 0301 	movt	r3, #1
    a4f4:	220e      	movs	r2, #14
    a4f6:	9801      	ldr	r0, [sp, #4]
    a4f8:	f7fe fb83 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a4fc:	e7ff      	b.n	a4fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
    a4fe:	2000      	movs	r0, #0
        Ok(())
    a500:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
    a504:	e4b9      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

0000a506 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
    a506:	b580      	push	{r7, lr}
    a508:	b08a      	sub	sp, #40	; 0x28
    a50a:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    a50c:	f000 fa25 	bl	a95a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
    a510:	9307      	str	r3, [sp, #28]
    a512:	9206      	str	r2, [sp, #24]
    a514:	9105      	str	r1, [sp, #20]
    a516:	9004      	str	r0, [sp, #16]
    a518:	e7ff      	b.n	a51a <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
    a51a:	a804      	add	r0, sp, #16
    a51c:	f00a fafa 	bl	14b14 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    a520:	9003      	str	r0, [sp, #12]
    a522:	e7ff      	b.n	a524 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
    a524:	9803      	ldr	r0, [sp, #12]
    a526:	f00a fb6b 	bl	14c00 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    a52a:	9002      	str	r0, [sp, #8]
    a52c:	9101      	str	r1, [sp, #4]
    a52e:	e7ff      	b.n	a530 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
    a530:	9802      	ldr	r0, [sp, #8]
    a532:	f000 0001 	and.w	r0, r0, #1
    a536:	9901      	ldr	r1, [sp, #4]
    a538:	b00a      	add	sp, #40	; 0x28
    a53a:	bd80      	pop	{r7, pc}

0000a53c <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
    a53c:	b082      	sub	sp, #8
    a53e:	4601      	mov	r1, r0
    a540:	f8ad 0004 	strh.w	r0, [sp, #4]
    a544:	ba00      	rev	r0, r0
    a546:	0c00      	lsrs	r0, r0, #16
    a548:	f8ad 0006 	strh.w	r0, [sp, #6]
    a54c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a550:	9000      	str	r0, [sp, #0]
    a552:	e7ff      	b.n	a554 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
    a554:	9800      	ldr	r0, [sp, #0]
    a556:	b002      	add	sp, #8
    a558:	4770      	bx	lr

0000a55a <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
    a55a:	b580      	push	{r7, lr}
    a55c:	b084      	sub	sp, #16
    a55e:	4601      	mov	r1, r0
    a560:	f8ad 000e 	strh.w	r0, [sp, #14]
    a564:	9102      	str	r1, [sp, #8]
    a566:	f7ff ffe9 	bl	a53c <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
    a56a:	9001      	str	r0, [sp, #4]
    a56c:	e7ff      	b.n	a56e <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
    a56e:	9801      	ldr	r0, [sp, #4]
    a570:	b004      	add	sp, #16
    a572:	bd80      	pop	{r7, pc}

0000a574 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
    a574:	b580      	push	{r7, lr}
    a576:	b084      	sub	sp, #16
    a578:	9002      	str	r0, [sp, #8]
    a57a:	9802      	ldr	r0, [sp, #8]
    a57c:	f00a fa8b 	bl	14a96 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
    a580:	9001      	str	r0, [sp, #4]
    a582:	9100      	str	r1, [sp, #0]
    a584:	e7ff      	b.n	a586 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
    a586:	9801      	ldr	r0, [sp, #4]
    a588:	f000 0001 	and.w	r0, r0, #1
    a58c:	9900      	ldr	r1, [sp, #0]
    a58e:	b004      	add	sp, #16
    a590:	bd80      	pop	{r7, pc}

0000a592 <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
    a592:	b081      	sub	sp, #4
    a594:	9000      	str	r0, [sp, #0]
    a596:	b001      	add	sp, #4
    a598:	4770      	bx	lr

0000a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
    a59a:	b089      	sub	sp, #36	; 0x24
    a59c:	9005      	str	r0, [sp, #20]
    a59e:	9106      	str	r1, [sp, #24]
    a5a0:	9107      	str	r1, [sp, #28]
    a5a2:	9907      	ldr	r1, [sp, #28]
    a5a4:	9002      	str	r0, [sp, #8]
    a5a6:	9101      	str	r1, [sp, #4]
    a5a8:	e7ff      	b.n	a5aa <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
    a5aa:	9802      	ldr	r0, [sp, #8]
    a5ac:	9008      	str	r0, [sp, #32]
    a5ae:	9908      	ldr	r1, [sp, #32]
    a5b0:	9100      	str	r1, [sp, #0]
    a5b2:	e7ff      	b.n	a5b4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
    a5b4:	9800      	ldr	r0, [sp, #0]
    a5b6:	9003      	str	r0, [sp, #12]
    a5b8:	9901      	ldr	r1, [sp, #4]
    a5ba:	9104      	str	r1, [sp, #16]
    a5bc:	9803      	ldr	r0, [sp, #12]
    a5be:	9904      	ldr	r1, [sp, #16]
    a5c0:	b009      	add	sp, #36	; 0x24
    a5c2:	4770      	bx	lr

0000a5c4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
    a5c4:	b08a      	sub	sp, #40	; 0x28
    a5c6:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
    a5c8:	7800      	ldrb	r0, [r0, #0]
    a5ca:	9001      	str	r0, [sp, #4]
    a5cc:	9901      	ldr	r1, [sp, #4]
    a5ce:	e8df f011 	tbh	[pc, r1, lsl #1]
    a5d2:	0103      	.short	0x0103
    a5d4:	01020107 	.word	0x01020107
    a5d8:	010c0102 	.word	0x010c0102
    a5dc:	01020102 	.word	0x01020102
    a5e0:	01020102 	.word	0x01020102
    a5e4:	01020111 	.word	0x01020111
    a5e8:	01020102 	.word	0x01020102
    a5ec:	01020102 	.word	0x01020102
    a5f0:	01160102 	.word	0x01160102
    a5f4:	0120011b 	.word	0x0120011b
    a5f8:	01020125 	.word	0x01020125
    a5fc:	01020102 	.word	0x01020102
    a600:	01020102 	.word	0x01020102
    a604:	01020102 	.word	0x01020102
    a608:	01020102 	.word	0x01020102
    a60c:	01020102 	.word	0x01020102
    a610:	012a0102 	.word	0x012a0102
    a614:	0102012f 	.word	0x0102012f
    a618:	01020102 	.word	0x01020102
    a61c:	01020102 	.word	0x01020102
    a620:	01340102 	.word	0x01340102
    a624:	013e0139 	.word	0x013e0139
    a628:	01480143 	.word	0x01480143
    a62c:	014d0102 	.word	0x014d0102
    a630:	01520102 	.word	0x01520102
    a634:	01020102 	.word	0x01020102
    a638:	01020102 	.word	0x01020102
    a63c:	015c0102 	.word	0x015c0102
    a640:	01020102 	.word	0x01020102
    a644:	01570102 	.word	0x01570102
    a648:	01020102 	.word	0x01020102
    a64c:	01020102 	.word	0x01020102
    a650:	01020102 	.word	0x01020102
    a654:	01020102 	.word	0x01020102
    a658:	01020102 	.word	0x01020102
    a65c:	01020102 	.word	0x01020102
    a660:	01020102 	.word	0x01020102
    a664:	01020102 	.word	0x01020102
    a668:	01020102 	.word	0x01020102
    a66c:	01020102 	.word	0x01020102
    a670:	01020102 	.word	0x01020102
    a674:	01020102 	.word	0x01020102
    a678:	01020102 	.word	0x01020102
    a67c:	01020102 	.word	0x01020102
    a680:	01020102 	.word	0x01020102
    a684:	01020102 	.word	0x01020102
    a688:	01020102 	.word	0x01020102
    a68c:	01020102 	.word	0x01020102
    a690:	01020102 	.word	0x01020102
    a694:	01020102 	.word	0x01020102
    a698:	01020102 	.word	0x01020102
    a69c:	01020102 	.word	0x01020102
    a6a0:	01020102 	.word	0x01020102
    a6a4:	01020102 	.word	0x01020102
    a6a8:	01020102 	.word	0x01020102
    a6ac:	01020102 	.word	0x01020102
    a6b0:	01020102 	.word	0x01020102
    a6b4:	01020102 	.word	0x01020102
    a6b8:	01020102 	.word	0x01020102
    a6bc:	01020102 	.word	0x01020102
    a6c0:	01020102 	.word	0x01020102
    a6c4:	01020102 	.word	0x01020102
    a6c8:	01020102 	.word	0x01020102
    a6cc:	01020102 	.word	0x01020102
    a6d0:	01020102 	.word	0x01020102
    a6d4:	01020102 	.word	0x01020102
    a6d8:	01020102 	.word	0x01020102
    a6dc:	01020102 	.word	0x01020102
    a6e0:	01020102 	.word	0x01020102
    a6e4:	01020102 	.word	0x01020102
    a6e8:	01020102 	.word	0x01020102
    a6ec:	01020102 	.word	0x01020102
    a6f0:	01020102 	.word	0x01020102
    a6f4:	01020102 	.word	0x01020102
    a6f8:	01020102 	.word	0x01020102
    a6fc:	01020102 	.word	0x01020102
    a700:	01020102 	.word	0x01020102
    a704:	01020102 	.word	0x01020102
    a708:	01020102 	.word	0x01020102
    a70c:	01020102 	.word	0x01020102
    a710:	01020102 	.word	0x01020102
    a714:	01020102 	.word	0x01020102
    a718:	01020102 	.word	0x01020102
    a71c:	01020102 	.word	0x01020102
    a720:	01020102 	.word	0x01020102
    a724:	01020102 	.word	0x01020102
    a728:	01020102 	.word	0x01020102
    a72c:	01020102 	.word	0x01020102
    a730:	01020102 	.word	0x01020102
    a734:	01660161 	.word	0x01660161
    a738:	0170016b 	.word	0x0170016b
    a73c:	01750102 	.word	0x01750102
    a740:	01020102 	.word	0x01020102
    a744:	01020102 	.word	0x01020102
    a748:	01020102 	.word	0x01020102
    a74c:	01020102 	.word	0x01020102
    a750:	017a0102 	.word	0x017a0102
    a754:	0184017f 	.word	0x0184017f
    a758:	018e0189 	.word	0x018e0189
    a75c:	01020193 	.word	0x01020193
    a760:	01020102 	.word	0x01020102
    a764:	01020102 	.word	0x01020102
    a768:	01020102 	.word	0x01020102
    a76c:	01020102 	.word	0x01020102
    a770:	01020102 	.word	0x01020102
    a774:	01020102 	.word	0x01020102
    a778:	01020102 	.word	0x01020102
    a77c:	01020102 	.word	0x01020102
    a780:	01020102 	.word	0x01020102
    a784:	01980102 	.word	0x01980102
    a788:	01a2019d 	.word	0x01a2019d
    a78c:	010201a7 	.word	0x010201a7
    a790:	01b10102 	.word	0x01b10102
    a794:	010200fd 	.word	0x010200fd
    a798:	01020102 	.word	0x01020102
    a79c:	01020102 	.word	0x01020102
    a7a0:	01020102 	.word	0x01020102
    a7a4:	01020102 	.word	0x01020102
    a7a8:	01020102 	.word	0x01020102
    a7ac:	01020102 	.word	0x01020102
    a7b0:	01020102 	.word	0x01020102
    a7b4:	01020102 	.word	0x01020102
    a7b8:	01020102 	.word	0x01020102
    a7bc:	01020102 	.word	0x01020102
    a7c0:	01020102 	.word	0x01020102
    a7c4:	01020102 	.word	0x01020102
    a7c8:	01ac0102 	.word	0x01ac0102
    a7cc:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    a7ce:	9007      	str	r0, [sp, #28]
    a7d0:	20e1      	movs	r0, #225	; 0xe1
    a7d2:	9006      	str	r0, [sp, #24]
    a7d4:	e0b3      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7d6:	defe      	udf	#254	; 0xfe
    a7d8:	2000      	movs	r0, #0
    a7da:	9007      	str	r0, [sp, #28]
    a7dc:	9006      	str	r0, [sp, #24]
    a7de:	e0ae      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7e0:	2000      	movs	r0, #0
    a7e2:	9007      	str	r0, [sp, #28]
    a7e4:	2001      	movs	r0, #1
    a7e6:	9006      	str	r0, [sp, #24]
    a7e8:	e0a9      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7ea:	2000      	movs	r0, #0
    a7ec:	9007      	str	r0, [sp, #28]
    a7ee:	2004      	movs	r0, #4
    a7f0:	9006      	str	r0, [sp, #24]
    a7f2:	e0a4      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7f4:	2000      	movs	r0, #0
    a7f6:	9007      	str	r0, [sp, #28]
    a7f8:	2009      	movs	r0, #9
    a7fa:	9006      	str	r0, [sp, #24]
    a7fc:	e09f      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7fe:	2000      	movs	r0, #0
    a800:	9007      	str	r0, [sp, #28]
    a802:	2010      	movs	r0, #16
    a804:	9006      	str	r0, [sp, #24]
    a806:	e09a      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a808:	2000      	movs	r0, #0
    a80a:	9007      	str	r0, [sp, #28]
    a80c:	2011      	movs	r0, #17
    a80e:	9006      	str	r0, [sp, #24]
    a810:	e095      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a812:	2000      	movs	r0, #0
    a814:	9007      	str	r0, [sp, #28]
    a816:	2012      	movs	r0, #18
    a818:	9006      	str	r0, [sp, #24]
    a81a:	e090      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a81c:	2000      	movs	r0, #0
    a81e:	9007      	str	r0, [sp, #28]
    a820:	2013      	movs	r0, #19
    a822:	9006      	str	r0, [sp, #24]
    a824:	e08b      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a826:	2000      	movs	r0, #0
    a828:	9007      	str	r0, [sp, #28]
    a82a:	2020      	movs	r0, #32
    a82c:	9006      	str	r0, [sp, #24]
    a82e:	e086      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a830:	2000      	movs	r0, #0
    a832:	9007      	str	r0, [sp, #28]
    a834:	2021      	movs	r0, #33	; 0x21
    a836:	9006      	str	r0, [sp, #24]
    a838:	e081      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a83a:	2000      	movs	r0, #0
    a83c:	9007      	str	r0, [sp, #28]
    a83e:	2028      	movs	r0, #40	; 0x28
    a840:	9006      	str	r0, [sp, #24]
    a842:	e07c      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a844:	2000      	movs	r0, #0
    a846:	9007      	str	r0, [sp, #28]
    a848:	2029      	movs	r0, #41	; 0x29
    a84a:	9006      	str	r0, [sp, #24]
    a84c:	e077      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a84e:	2000      	movs	r0, #0
    a850:	9007      	str	r0, [sp, #28]
    a852:	202a      	movs	r0, #42	; 0x2a
    a854:	9006      	str	r0, [sp, #24]
    a856:	e072      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a858:	2000      	movs	r0, #0
    a85a:	9007      	str	r0, [sp, #28]
    a85c:	202b      	movs	r0, #43	; 0x2b
    a85e:	9006      	str	r0, [sp, #24]
    a860:	e06d      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a862:	2000      	movs	r0, #0
    a864:	9007      	str	r0, [sp, #28]
    a866:	202c      	movs	r0, #44	; 0x2c
    a868:	9006      	str	r0, [sp, #24]
    a86a:	e068      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a86c:	2000      	movs	r0, #0
    a86e:	9007      	str	r0, [sp, #28]
    a870:	202e      	movs	r0, #46	; 0x2e
    a872:	9006      	str	r0, [sp, #24]
    a874:	e063      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a876:	2000      	movs	r0, #0
    a878:	9007      	str	r0, [sp, #28]
    a87a:	2030      	movs	r0, #48	; 0x30
    a87c:	9006      	str	r0, [sp, #24]
    a87e:	e05e      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a880:	2000      	movs	r0, #0
    a882:	9007      	str	r0, [sp, #28]
    a884:	203a      	movs	r0, #58	; 0x3a
    a886:	9006      	str	r0, [sp, #24]
    a888:	e059      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a88a:	2000      	movs	r0, #0
    a88c:	9007      	str	r0, [sp, #28]
    a88e:	2036      	movs	r0, #54	; 0x36
    a890:	9006      	str	r0, [sp, #24]
    a892:	e054      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a894:	2000      	movs	r0, #0
    a896:	9007      	str	r0, [sp, #28]
    a898:	20b1      	movs	r0, #177	; 0xb1
    a89a:	9006      	str	r0, [sp, #24]
    a89c:	e04f      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a89e:	2000      	movs	r0, #0
    a8a0:	9007      	str	r0, [sp, #28]
    a8a2:	20b2      	movs	r0, #178	; 0xb2
    a8a4:	9006      	str	r0, [sp, #24]
    a8a6:	e04a      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8a8:	2000      	movs	r0, #0
    a8aa:	9007      	str	r0, [sp, #28]
    a8ac:	20b3      	movs	r0, #179	; 0xb3
    a8ae:	9006      	str	r0, [sp, #24]
    a8b0:	e045      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8b2:	2000      	movs	r0, #0
    a8b4:	9007      	str	r0, [sp, #28]
    a8b6:	20b4      	movs	r0, #180	; 0xb4
    a8b8:	9006      	str	r0, [sp, #24]
    a8ba:	e040      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8bc:	2000      	movs	r0, #0
    a8be:	9007      	str	r0, [sp, #28]
    a8c0:	20b6      	movs	r0, #182	; 0xb6
    a8c2:	9006      	str	r0, [sp, #24]
    a8c4:	e03b      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8c6:	2000      	movs	r0, #0
    a8c8:	9007      	str	r0, [sp, #28]
    a8ca:	20c0      	movs	r0, #192	; 0xc0
    a8cc:	9006      	str	r0, [sp, #24]
    a8ce:	e036      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8d0:	2000      	movs	r0, #0
    a8d2:	9007      	str	r0, [sp, #28]
    a8d4:	20c1      	movs	r0, #193	; 0xc1
    a8d6:	9006      	str	r0, [sp, #24]
    a8d8:	e031      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8da:	2000      	movs	r0, #0
    a8dc:	9007      	str	r0, [sp, #28]
    a8de:	20c2      	movs	r0, #194	; 0xc2
    a8e0:	9006      	str	r0, [sp, #24]
    a8e2:	e02c      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8e4:	2000      	movs	r0, #0
    a8e6:	9007      	str	r0, [sp, #28]
    a8e8:	20c3      	movs	r0, #195	; 0xc3
    a8ea:	9006      	str	r0, [sp, #24]
    a8ec:	e027      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8ee:	2000      	movs	r0, #0
    a8f0:	9007      	str	r0, [sp, #28]
    a8f2:	20c4      	movs	r0, #196	; 0xc4
    a8f4:	9006      	str	r0, [sp, #24]
    a8f6:	e022      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8f8:	2000      	movs	r0, #0
    a8fa:	9007      	str	r0, [sp, #28]
    a8fc:	20c5      	movs	r0, #197	; 0xc5
    a8fe:	9006      	str	r0, [sp, #24]
    a900:	e01d      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a902:	2000      	movs	r0, #0
    a904:	9007      	str	r0, [sp, #28]
    a906:	20da      	movs	r0, #218	; 0xda
    a908:	9006      	str	r0, [sp, #24]
    a90a:	e018      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a90c:	2000      	movs	r0, #0
    a90e:	9007      	str	r0, [sp, #28]
    a910:	20db      	movs	r0, #219	; 0xdb
    a912:	9006      	str	r0, [sp, #24]
    a914:	e013      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a916:	2000      	movs	r0, #0
    a918:	9007      	str	r0, [sp, #28]
    a91a:	20dc      	movs	r0, #220	; 0xdc
    a91c:	9006      	str	r0, [sp, #24]
    a91e:	e00e      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a920:	2000      	movs	r0, #0
    a922:	9007      	str	r0, [sp, #28]
    a924:	20dd      	movs	r0, #221	; 0xdd
    a926:	9006      	str	r0, [sp, #24]
    a928:	e009      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a92a:	2000      	movs	r0, #0
    a92c:	9007      	str	r0, [sp, #28]
    a92e:	20fc      	movs	r0, #252	; 0xfc
    a930:	9006      	str	r0, [sp, #24]
    a932:	e004      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a934:	2000      	movs	r0, #0
    a936:	9007      	str	r0, [sp, #28]
    a938:	20e0      	movs	r0, #224	; 0xe0
    a93a:	9006      	str	r0, [sp, #24]
    a93c:	e7ff      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a93e:	9806      	ldr	r0, [sp, #24]
    a940:	9907      	ldr	r1, [sp, #28]
    a942:	9105      	str	r1, [sp, #20]
    a944:	9004      	str	r0, [sp, #16]
    a946:	2000      	movs	r0, #0
    a948:	9003      	str	r0, [sp, #12]
    a94a:	2001      	movs	r0, #1
    a94c:	9002      	str	r0, [sp, #8]
    a94e:	9802      	ldr	r0, [sp, #8]
    a950:	9903      	ldr	r1, [sp, #12]
    a952:	9a04      	ldr	r2, [sp, #16]
    a954:	9b05      	ldr	r3, [sp, #20]
    a956:	b00a      	add	sp, #40	; 0x28
    a958:	4770      	bx	lr

0000a95a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
    a95a:	b580      	push	{r7, lr}
    a95c:	b08a      	sub	sp, #40	; 0x28
    a95e:	9009      	str	r0, [sp, #36]	; 0x24
    a960:	f7ff fe30 	bl	a5c4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
    a964:	9108      	str	r1, [sp, #32]
    a966:	9007      	str	r0, [sp, #28]
    a968:	9306      	str	r3, [sp, #24]
    a96a:	9205      	str	r2, [sp, #20]
    a96c:	e7ff      	b.n	a96e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
    a96e:	9807      	ldr	r0, [sp, #28]
    a970:	9908      	ldr	r1, [sp, #32]
    a972:	9a05      	ldr	r2, [sp, #20]
    a974:	9b06      	ldr	r3, [sp, #24]
    a976:	f000 f859 	bl	aa2c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
    a97a:	9104      	str	r1, [sp, #16]
    a97c:	9003      	str	r0, [sp, #12]
    a97e:	9302      	str	r3, [sp, #8]
    a980:	9201      	str	r2, [sp, #4]
    a982:	e7ff      	b.n	a984 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
    a984:	9803      	ldr	r0, [sp, #12]
    a986:	9904      	ldr	r1, [sp, #16]
    a988:	9a01      	ldr	r2, [sp, #4]
    a98a:	9b02      	ldr	r3, [sp, #8]
    a98c:	b00a      	add	sp, #40	; 0x28
    a98e:	bd80      	pop	{r7, pc}

0000a990 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
    a990:	b08a      	sub	sp, #40	; 0x28
    a992:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
    a994:	7800      	ldrb	r0, [r0, #0]
    a996:	4601      	mov	r1, r0
    a998:	2800      	cmp	r0, #0
    a99a:	9101      	str	r1, [sp, #4]
    a99c:	d00f      	beq.n	a9be <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
    a99e:	e7ff      	b.n	a9a0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
    a9a0:	9801      	ldr	r0, [sp, #4]
    a9a2:	2860      	cmp	r0, #96	; 0x60
    a9a4:	d00f      	beq.n	a9c6 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
    a9a6:	e7ff      	b.n	a9a8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
    a9a8:	9801      	ldr	r0, [sp, #4]
    a9aa:	28a0      	cmp	r0, #160	; 0xa0
    a9ac:	d001      	beq.n	a9b2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
    a9ae:	e7ff      	b.n	a9b0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
    a9b0:	e00e      	b.n	a9d0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
    a9b2:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    a9b4:	9007      	str	r0, [sp, #28]
    a9b6:	20a0      	movs	r0, #160	; 0xa0
    a9b8:	9006      	str	r0, [sp, #24]
    a9ba:	e00e      	b.n	a9da <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a9bc:	defe      	udf	#254	; 0xfe
    a9be:	2000      	movs	r0, #0
    a9c0:	9007      	str	r0, [sp, #28]
    a9c2:	9006      	str	r0, [sp, #24]
    a9c4:	e009      	b.n	a9da <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a9c6:	2000      	movs	r0, #0
    a9c8:	9007      	str	r0, [sp, #28]
    a9ca:	2060      	movs	r0, #96	; 0x60
    a9cc:	9006      	str	r0, [sp, #24]
    a9ce:	e004      	b.n	a9da <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a9d0:	2000      	movs	r0, #0
    a9d2:	9007      	str	r0, [sp, #28]
    a9d4:	20c0      	movs	r0, #192	; 0xc0
    a9d6:	9006      	str	r0, [sp, #24]
    a9d8:	e7ff      	b.n	a9da <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a9da:	9806      	ldr	r0, [sp, #24]
    a9dc:	9907      	ldr	r1, [sp, #28]
    a9de:	9105      	str	r1, [sp, #20]
    a9e0:	9004      	str	r0, [sp, #16]
    a9e2:	2000      	movs	r0, #0
    a9e4:	9003      	str	r0, [sp, #12]
    a9e6:	2001      	movs	r0, #1
    a9e8:	9002      	str	r0, [sp, #8]
    a9ea:	9802      	ldr	r0, [sp, #8]
    a9ec:	9903      	ldr	r1, [sp, #12]
    a9ee:	9a04      	ldr	r2, [sp, #16]
    a9f0:	9b05      	ldr	r3, [sp, #20]
    a9f2:	b00a      	add	sp, #40	; 0x28
    a9f4:	4770      	bx	lr

0000a9f6 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
    a9f6:	b580      	push	{r7, lr}
    a9f8:	b08a      	sub	sp, #40	; 0x28
    a9fa:	9009      	str	r0, [sp, #36]	; 0x24
    a9fc:	f7ff ffc8 	bl	a990 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
    aa00:	9108      	str	r1, [sp, #32]
    aa02:	9007      	str	r0, [sp, #28]
    aa04:	9306      	str	r3, [sp, #24]
    aa06:	9205      	str	r2, [sp, #20]
    aa08:	e7ff      	b.n	aa0a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
    aa0a:	9807      	ldr	r0, [sp, #28]
    aa0c:	9908      	ldr	r1, [sp, #32]
    aa0e:	9a05      	ldr	r2, [sp, #20]
    aa10:	9b06      	ldr	r3, [sp, #24]
    aa12:	f000 f863 	bl	aadc <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
    aa16:	9104      	str	r1, [sp, #16]
    aa18:	9003      	str	r0, [sp, #12]
    aa1a:	9302      	str	r3, [sp, #8]
    aa1c:	9201      	str	r2, [sp, #4]
    aa1e:	e7ff      	b.n	aa20 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
    aa20:	9803      	ldr	r0, [sp, #12]
    aa22:	9904      	ldr	r1, [sp, #16]
    aa24:	9a01      	ldr	r2, [sp, #4]
    aa26:	9b02      	ldr	r3, [sp, #8]
    aa28:	b00a      	add	sp, #40	; 0x28
    aa2a:	bd80      	pop	{r7, pc}

0000aa2c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
    aa2c:	b5b0      	push	{r4, r5, r7, lr}
    aa2e:	b090      	sub	sp, #64	; 0x40
    aa30:	469c      	mov	ip, r3
    aa32:	4696      	mov	lr, r2
    aa34:	460c      	mov	r4, r1
    aa36:	4605      	mov	r5, r0
    aa38:	9103      	str	r1, [sp, #12]
    aa3a:	9002      	str	r0, [sp, #8]
    aa3c:	9305      	str	r3, [sp, #20]
    aa3e:	9204      	str	r2, [sp, #16]
    aa40:	2000      	movs	r0, #0
    aa42:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aa46:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aa4a:	2001      	movs	r0, #1
    aa4c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aa50:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aa54:	9802      	ldr	r0, [sp, #8]
    aa56:	2800      	cmp	r0, #0
    aa58:	d001      	beq.n	aa5e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
    aa5a:	e7ff      	b.n	aa5c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
    aa5c:	e004      	b.n	aa68 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
    aa5e:	2000      	movs	r0, #0
    aa60:	9007      	str	r0, [sp, #28]
    aa62:	9006      	str	r0, [sp, #24]
    aa64:	e023      	b.n	aaae <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    aa66:	defe      	udf	#254	; 0xfe
    aa68:	2000      	movs	r0, #0
    aa6a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aa6e:	9904      	ldr	r1, [sp, #16]
    aa70:	9a05      	ldr	r2, [sp, #20]
    aa72:	920f      	str	r2, [sp, #60]	; 0x3c
    aa74:	910e      	str	r1, [sp, #56]	; 0x38
    aa76:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aa7a:	920b      	str	r2, [sp, #44]	; 0x2c
    aa7c:	910a      	str	r1, [sp, #40]	; 0x28
    aa7e:	980a      	ldr	r0, [sp, #40]	; 0x28
    aa80:	990b      	ldr	r1, [sp, #44]	; 0x2c
    aa82:	f000 f883 	bl	ab8c <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
    aa86:	9101      	str	r1, [sp, #4]
    aa88:	9000      	str	r0, [sp, #0]
    aa8a:	e7ff      	b.n	aa8c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
    aa8c:	9800      	ldr	r0, [sp, #0]
    aa8e:	9008      	str	r0, [sp, #32]
    aa90:	9901      	ldr	r1, [sp, #4]
    aa92:	9109      	str	r1, [sp, #36]	; 0x24
    aa94:	2200      	movs	r2, #0
    aa96:	9207      	str	r2, [sp, #28]
    aa98:	2201      	movs	r2, #1
    aa9a:	9206      	str	r2, [sp, #24]
    aa9c:	e007      	b.n	aaae <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    aa9e:	9802      	ldr	r0, [sp, #8]
    aaa0:	2801      	cmp	r0, #1
    aaa2:	d010      	beq.n	aac6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
    aaa4:	e019      	b.n	aada <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
    aaa6:	2000      	movs	r0, #0
    aaa8:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aaac:	e7f7      	b.n	aa9e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    aaae:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    aab2:	07c0      	lsls	r0, r0, #31
    aab4:	2800      	cmp	r0, #0
    aab6:	d1f6      	bne.n	aaa6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
    aab8:	e7f1      	b.n	aa9e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    aaba:	9806      	ldr	r0, [sp, #24]
    aabc:	9907      	ldr	r1, [sp, #28]
    aabe:	9a08      	ldr	r2, [sp, #32]
    aac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aac2:	b010      	add	sp, #64	; 0x40
    aac4:	bdb0      	pop	{r4, r5, r7, pc}
    aac6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    aaca:	07c0      	lsls	r0, r0, #31
    aacc:	2800      	cmp	r0, #0
    aace:	d0f4      	beq.n	aaba <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    aad0:	e7ff      	b.n	aad2 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
    aad2:	2000      	movs	r0, #0
    aad4:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aad8:	e7ef      	b.n	aaba <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    aada:	e7ee      	b.n	aaba <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

0000aadc <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
    aadc:	b5b0      	push	{r4, r5, r7, lr}
    aade:	b090      	sub	sp, #64	; 0x40
    aae0:	469c      	mov	ip, r3
    aae2:	4696      	mov	lr, r2
    aae4:	460c      	mov	r4, r1
    aae6:	4605      	mov	r5, r0
    aae8:	9103      	str	r1, [sp, #12]
    aaea:	9002      	str	r0, [sp, #8]
    aaec:	9305      	str	r3, [sp, #20]
    aaee:	9204      	str	r2, [sp, #16]
    aaf0:	2000      	movs	r0, #0
    aaf2:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aaf6:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aafa:	2001      	movs	r0, #1
    aafc:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ab00:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ab04:	9802      	ldr	r0, [sp, #8]
    ab06:	2800      	cmp	r0, #0
    ab08:	d001      	beq.n	ab0e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
    ab0a:	e7ff      	b.n	ab0c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
    ab0c:	e004      	b.n	ab18 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
    ab0e:	2000      	movs	r0, #0
    ab10:	9007      	str	r0, [sp, #28]
    ab12:	9006      	str	r0, [sp, #24]
    ab14:	e023      	b.n	ab5e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ab16:	defe      	udf	#254	; 0xfe
    ab18:	2000      	movs	r0, #0
    ab1a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ab1e:	9904      	ldr	r1, [sp, #16]
    ab20:	9a05      	ldr	r2, [sp, #20]
    ab22:	920f      	str	r2, [sp, #60]	; 0x3c
    ab24:	910e      	str	r1, [sp, #56]	; 0x38
    ab26:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ab2a:	920b      	str	r2, [sp, #44]	; 0x2c
    ab2c:	910a      	str	r1, [sp, #40]	; 0x28
    ab2e:	980a      	ldr	r0, [sp, #40]	; 0x28
    ab30:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ab32:	f00a fa49 	bl	14fc8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
    ab36:	9101      	str	r1, [sp, #4]
    ab38:	9000      	str	r0, [sp, #0]
    ab3a:	e7ff      	b.n	ab3c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
    ab3c:	9800      	ldr	r0, [sp, #0]
    ab3e:	9008      	str	r0, [sp, #32]
    ab40:	9901      	ldr	r1, [sp, #4]
    ab42:	9109      	str	r1, [sp, #36]	; 0x24
    ab44:	2200      	movs	r2, #0
    ab46:	9207      	str	r2, [sp, #28]
    ab48:	2201      	movs	r2, #1
    ab4a:	9206      	str	r2, [sp, #24]
    ab4c:	e007      	b.n	ab5e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ab4e:	9802      	ldr	r0, [sp, #8]
    ab50:	2801      	cmp	r0, #1
    ab52:	d010      	beq.n	ab76 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
    ab54:	e019      	b.n	ab8a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
    ab56:	2000      	movs	r0, #0
    ab58:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ab5c:	e7f7      	b.n	ab4e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    ab5e:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    ab62:	07c0      	lsls	r0, r0, #31
    ab64:	2800      	cmp	r0, #0
    ab66:	d1f6      	bne.n	ab56 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
    ab68:	e7f1      	b.n	ab4e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    ab6a:	9806      	ldr	r0, [sp, #24]
    ab6c:	9907      	ldr	r1, [sp, #28]
    ab6e:	9a08      	ldr	r2, [sp, #32]
    ab70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab72:	b010      	add	sp, #64	; 0x40
    ab74:	bdb0      	pop	{r4, r5, r7, pc}
    ab76:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    ab7a:	07c0      	lsls	r0, r0, #31
    ab7c:	2800      	cmp	r0, #0
    ab7e:	d0f4      	beq.n	ab6a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    ab80:	e7ff      	b.n	ab82 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
    ab82:	2000      	movs	r0, #0
    ab84:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ab88:	e7ef      	b.n	ab6a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    ab8a:	e7ee      	b.n	ab6a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

0000ab8c <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
    ab8c:	b084      	sub	sp, #16
    ab8e:	460a      	mov	r2, r1
    ab90:	4603      	mov	r3, r0
    ab92:	9103      	str	r1, [sp, #12]
    ab94:	9002      	str	r0, [sp, #8]
    ab96:	b004      	add	sp, #16
    ab98:	4770      	bx	lr

0000ab9a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E>:
    ab9a:	b580      	push	{r7, lr}
    ab9c:	b086      	sub	sp, #24
    ab9e:	9004      	str	r0, [sp, #16]
    aba0:	9105      	str	r1, [sp, #20]
    aba2:	9002      	str	r0, [sp, #8]
    aba4:	f000 f810 	bl	abc8 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E>
    aba8:	9001      	str	r0, [sp, #4]
    abaa:	e7ff      	b.n	abac <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x12>
    abac:	9801      	ldr	r0, [sp, #4]
    abae:	07c1      	lsls	r1, r0, #31
    abb0:	2900      	cmp	r1, #0
    abb2:	d103      	bne.n	abbc <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x22>
    abb4:	e7ff      	b.n	abb6 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x1c>
    abb6:	2000      	movs	r0, #0
    abb8:	9003      	str	r0, [sp, #12]
    abba:	e002      	b.n	abc2 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x28>
    abbc:	9802      	ldr	r0, [sp, #8]
    abbe:	9003      	str	r0, [sp, #12]
    abc0:	e7ff      	b.n	abc2 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x28>
    abc2:	9803      	ldr	r0, [sp, #12]
    abc4:	b006      	add	sp, #24
    abc6:	bd80      	pop	{r7, pc}

0000abc8 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E>:
    abc8:	b580      	push	{r7, lr}
    abca:	b08a      	sub	sp, #40	; 0x28
    abcc:	9008      	str	r0, [sp, #32]
    abce:	9109      	str	r1, [sp, #36]	; 0x24
    abd0:	9103      	str	r1, [sp, #12]
    abd2:	9002      	str	r0, [sp, #8]
    abd4:	f000 f815 	bl	ac02 <_ZN4core3any6TypeId2of17h3f51c8cccab069bdE>
    abd8:	9105      	str	r1, [sp, #20]
    abda:	9004      	str	r0, [sp, #16]
    abdc:	e7ff      	b.n	abde <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E+0x16>
    abde:	9803      	ldr	r0, [sp, #12]
    abe0:	68c1      	ldr	r1, [r0, #12]
    abe2:	9802      	ldr	r0, [sp, #8]
    abe4:	4788      	blx	r1
    abe6:	9107      	str	r1, [sp, #28]
    abe8:	9006      	str	r0, [sp, #24]
    abea:	e7ff      	b.n	abec <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E+0x24>
    abec:	a804      	add	r0, sp, #16
    abee:	a906      	add	r1, sp, #24
    abf0:	f006 fffe 	bl	11bf0 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h27d5684c70bb37e8E>
    abf4:	9001      	str	r0, [sp, #4]
    abf6:	e7ff      	b.n	abf8 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E+0x30>
    abf8:	9801      	ldr	r0, [sp, #4]
    abfa:	f000 0001 	and.w	r0, r0, #1
    abfe:	b00a      	add	sp, #40	; 0x28
    ac00:	bd80      	pop	{r7, pc}

0000ac02 <_ZN4core3any6TypeId2of17h3f51c8cccab069bdE>:
    ac02:	b086      	sub	sp, #24
    ac04:	f249 40d9 	movw	r0, #38105	; 0x94d9
    ac08:	f2c1 1010 	movt	r0, #4368	; 0x1110
    ac0c:	9005      	str	r0, [sp, #20]
    ac0e:	f249 7064 	movw	r0, #38756	; 0x9764
    ac12:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    ac16:	9004      	str	r0, [sp, #16]
    ac18:	9804      	ldr	r0, [sp, #16]
    ac1a:	9905      	ldr	r1, [sp, #20]
    ac1c:	9001      	str	r0, [sp, #4]
    ac1e:	9100      	str	r1, [sp, #0]
    ac20:	e7ff      	b.n	ac22 <_ZN4core3any6TypeId2of17h3f51c8cccab069bdE+0x20>
    ac22:	9801      	ldr	r0, [sp, #4]
    ac24:	9002      	str	r0, [sp, #8]
    ac26:	9900      	ldr	r1, [sp, #0]
    ac28:	9103      	str	r1, [sp, #12]
    ac2a:	9802      	ldr	r0, [sp, #8]
    ac2c:	9903      	ldr	r1, [sp, #12]
    ac2e:	b006      	add	sp, #24
    ac30:	4770      	bx	lr

0000ac32 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE>:
    ac32:	b580      	push	{r7, lr}
    ac34:	b084      	sub	sp, #16
    ac36:	9002      	str	r0, [sp, #8]
    ac38:	9103      	str	r1, [sp, #12]
    ac3a:	f7ff ffae 	bl	ab9a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E>
    ac3e:	9001      	str	r0, [sp, #4]
    ac40:	e7ff      	b.n	ac42 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE+0x10>
    ac42:	9801      	ldr	r0, [sp, #4]
    ac44:	b004      	add	sp, #16
    ac46:	bd80      	pop	{r7, pc}

0000ac48 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE>:
    ac48:	b580      	push	{r7, lr}
    ac4a:	b082      	sub	sp, #8
    ac4c:	9200      	str	r2, [sp, #0]
    ac4e:	9101      	str	r1, [sp, #4]
    ac50:	9a00      	ldr	r2, [sp, #0]
    ac52:	f003 fe89 	bl	e968 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE>
    ac56:	e7ff      	b.n	ac58 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE+0x10>
    ac58:	b002      	add	sp, #8
    ac5a:	bd80      	pop	{r7, pc}

0000ac5c <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E>:
    ac5c:	b580      	push	{r7, lr}
    ac5e:	b084      	sub	sp, #16
    ac60:	9102      	str	r1, [sp, #8]
    ac62:	9003      	str	r0, [sp, #12]
    ac64:	9902      	ldr	r1, [sp, #8]
    ac66:	f003 fe91 	bl	e98c <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6a25aae91f88a8abE>
    ac6a:	9001      	str	r0, [sp, #4]
    ac6c:	9100      	str	r1, [sp, #0]
    ac6e:	e7ff      	b.n	ac70 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E+0x14>
    ac70:	9801      	ldr	r0, [sp, #4]
    ac72:	9900      	ldr	r1, [sp, #0]
    ac74:	b004      	add	sp, #16
    ac76:	bd80      	pop	{r7, pc}

0000ac78 <_ZN8libchip814Chip8$LT$T$GT$3new17hca880a1e3fbd9a67E>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    ac78:	b5b0      	push	{r4, r5, r7, lr}
    ac7a:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    ac7e:	b082      	sub	sp, #8
    ac80:	f10d 0e0c 	add.w	lr, sp, #12
    ac84:	f50e 5282 	add.w	r2, lr, #4160	; 0x1040
    ac88:	2300      	movs	r3, #0
        Self {
            v: [0; REGS],
    ac8a:	930b      	str	r3, [sp, #44]	; 0x2c
    ac8c:	930a      	str	r3, [sp, #40]	; 0x28
    ac8e:	9309      	str	r3, [sp, #36]	; 0x24
    ac90:	9308      	str	r3, [sp, #32]
    ac92:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
    ac96:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    ac9a:	9007      	str	r0, [sp, #28]
    ac9c:	4660      	mov	r0, ip
    ac9e:	9106      	str	r1, [sp, #24]
    aca0:	4671      	mov	r1, lr
    aca2:	9205      	str	r2, [sp, #20]
    aca4:	9304      	str	r3, [sp, #16]
    aca6:	f8cd c00c 	str.w	ip, [sp, #12]
    acaa:	f8cd e008 	str.w	lr, [sp, #8]
    acae:	f011 fb6f 	bl	1c390 <__aeabi_memclr>
            stack: [0; STACKS],
    acb2:	9804      	ldr	r0, [sp, #16]
    acb4:	9905      	ldr	r1, [sp, #20]
    acb6:	6008      	str	r0, [r1, #0]
    acb8:	f841 0c04 	str.w	r0, [r1, #-4]
    acbc:	f841 0c08 	str.w	r0, [r1, #-8]
    acc0:	f841 0c0c 	str.w	r0, [r1, #-12]
    acc4:	f841 0c10 	str.w	r0, [r1, #-16]
    acc8:	f841 0c14 	str.w	r0, [r1, #-20]
    accc:	f841 0c18 	str.w	r0, [r1, #-24]
    acd0:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    acd4:	6088      	str	r0, [r1, #8]
    acd6:	6048      	str	r0, [r1, #4]
            running: false,
            hw,
    acd8:	9a06      	ldr	r2, [sp, #24]
    acda:	8893      	ldrh	r3, [r2, #4]
    acdc:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    ace0:	f8ae 3064 	strh.w	r3, [lr, #100]	; 0x64
    ace4:	6813      	ldr	r3, [r2, #0]
    ace6:	614b      	str	r3, [r1, #20]
        Self {
    ace8:	9b08      	ldr	r3, [sp, #32]
    acea:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    acee:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    acf2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    acf4:	9d07      	ldr	r5, [sp, #28]
    acf6:	642c      	str	r4, [r5, #64]	; 0x40
    acf8:	f8c5 e03c 	str.w	lr, [r5, #60]	; 0x3c
    acfc:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
    ad00:	636b      	str	r3, [r5, #52]	; 0x34
    ad02:	8228      	strh	r0, [r5, #16]
    ad04:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    ad08:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    ad0c:	8268      	strh	r0, [r5, #18]
    ad0e:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
    ad12:	f105 0047 	add.w	r0, r5, #71	; 0x47
    ad16:	9903      	ldr	r1, [sp, #12]
    ad18:	9a02      	ldr	r2, [sp, #8]
    ad1a:	f011 fb3d 	bl	1c398 <__aeabi_memcpy>
    ad1e:	9907      	ldr	r1, [sp, #28]
    ad20:	f101 0214 	add.w	r2, r1, #20
    ad24:	f10d 0e10 	add.w	lr, sp, #16
    ad28:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    ad2c:	2320      	movs	r3, #32
    ad2e:	9001      	str	r0, [sp, #4]
    ad30:	4610      	mov	r0, r2
    ad32:	461a      	mov	r2, r3
    ad34:	f011 fb30 	bl	1c398 <__aeabi_memcpy>
    ad38:	9905      	ldr	r1, [sp, #20]
    ad3a:	684a      	ldr	r2, [r1, #4]
    ad3c:	688b      	ldr	r3, [r1, #8]
    ad3e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    ad42:	f8d1 e010 	ldr.w	lr, [r1, #16]
    ad46:	9c07      	ldr	r4, [sp, #28]
    ad48:	6063      	str	r3, [r4, #4]
    ad4a:	6022      	str	r2, [r4, #0]
    ad4c:	f8c4 e00c 	str.w	lr, [r4, #12]
    ad50:	f8c4 c008 	str.w	ip, [r4, #8]
    ad54:	f241 0247 	movw	r2, #4167	; 0x1047
    ad58:	9b04      	ldr	r3, [sp, #16]
    ad5a:	54a3      	strb	r3, [r4, r2]
    ad5c:	f241 0248 	movw	r2, #4168	; 0x1048
    ad60:	eb04 0c02 	add.w	ip, r4, r2
    ad64:	f8d1 e014 	ldr.w	lr, [r1, #20]
    ad68:	f844 e002 	str.w	lr, [r4, r2]
    ad6c:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
    ad70:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    ad74:	f8ac 2004 	strh.w	r2, [ip, #4]
        }
    }
    ad78:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    ad7c:	b002      	add	sp, #8
    ad7e:	bdb0      	pop	{r4, r5, r7, pc}

0000ad80 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    ad80:	b580      	push	{r7, lr}
    ad82:	b086      	sub	sp, #24
    ad84:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    ad86:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    ad8a:	2201      	movs	r2, #1
    ad8c:	9003      	str	r0, [sp, #12]
    ad8e:	4608      	mov	r0, r1
    ad90:	4611      	mov	r1, r2
    ad92:	f004 f908 	bl	efa6 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE>
    ad96:	9002      	str	r0, [sp, #8]
    ad98:	e7ff      	b.n	ad9a <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E+0x1a>
    ad9a:	9802      	ldr	r0, [sp, #8]
    ad9c:	9903      	ldr	r1, [sp, #12]
    ad9e:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    ada2:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    ada6:	4613      	mov	r3, r2
    ada8:	2a0f      	cmp	r2, #15
    adaa:	9301      	str	r3, [sp, #4]
    adac:	d80a      	bhi.n	adc4 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E+0x44>
    adae:	e7ff      	b.n	adb0 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E+0x30>
    adb0:	9803      	ldr	r0, [sp, #12]
    adb2:	9901      	ldr	r1, [sp, #4]
    adb4:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    adb8:	8a92      	ldrh	r2, [r2, #20]
    adba:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    adbe:	4610      	mov	r0, r2
    adc0:	b006      	add	sp, #24
    adc2:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    adc4:	f64c 1018 	movw	r0, #51480	; 0xc918
    adc8:	f2c0 0001 	movt	r0, #1
    adcc:	2210      	movs	r2, #16
    adce:	9901      	ldr	r1, [sp, #4]
    add0:	f00a ffec 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    add4:	defe      	udf	#254	; 0xfe

0000add6 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E>:
    pub fn run(mut self, rom: &[u8]) {
    add6:	b580      	push	{r7, lr}
    add8:	b086      	sub	sp, #24
    adda:	9104      	str	r1, [sp, #16]
    addc:	9205      	str	r2, [sp, #20]
        self.setup();
    adde:	9003      	str	r0, [sp, #12]
    ade0:	9202      	str	r2, [sp, #8]
    ade2:	9101      	str	r1, [sp, #4]
    ade4:	f003 ff34 	bl	ec50 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E>
    ade8:	e7ff      	b.n	adea <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x14>
        self.load(rom);
    adea:	9803      	ldr	r0, [sp, #12]
    adec:	9901      	ldr	r1, [sp, #4]
    adee:	9a02      	ldr	r2, [sp, #8]
    adf0:	f003 fdde 	bl	e9b0 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE>
    adf4:	e7ff      	b.n	adf6 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x20>
        while self.running {
    adf6:	e7ff      	b.n	adf8 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x22>
    adf8:	f241 0047 	movw	r0, #4167	; 0x1047
    adfc:	9903      	ldr	r1, [sp, #12]
    adfe:	5c08      	ldrb	r0, [r1, r0]
    ae00:	07c0      	lsls	r0, r0, #31
    ae02:	2800      	cmp	r0, #0
    ae04:	d101      	bne.n	ae0a <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x34>
    ae06:	e7ff      	b.n	ae08 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x32>
    }
    ae08:	e00c      	b.n	ae24 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x4e>
            self.sched();
    ae0a:	9803      	ldr	r0, [sp, #12]
    ae0c:	f003 fe9d 	bl	eb4a <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E>
    ae10:	e7ff      	b.n	ae12 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x3c>
            self.eval();
    ae12:	9803      	ldr	r0, [sp, #12]
    ae14:	f000 f808 	bl	ae28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE>
    ae18:	e7ff      	b.n	ae1a <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x44>
            self.next();
    ae1a:	9803      	ldr	r0, [sp, #12]
    ae1c:	f003 fe03 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    ae20:	e7ff      	b.n	ae22 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x4c>
        while self.running {
    ae22:	e7e9      	b.n	adf8 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x22>
    }
    ae24:	b006      	add	sp, #24
    ae26:	bd80      	pop	{r7, pc}

0000ae28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    ae28:	b570      	push	{r4, r5, r6, lr}
    ae2a:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    ae2e:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    ae32:	8a41      	ldrh	r1, [r0, #18]
    ae34:	460a      	mov	r2, r1
    ae36:	2300      	movs	r3, #0
    ae38:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    ae3c:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    ae40:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    ae44:	f043 82c0 	bne.w	e3c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35a0>
    ae48:	e7ff      	b.n	ae4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22>
    ae4a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ae4e:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    ae52:	1842      	adds	r2, r0, r1
    ae54:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    ae58:	4613      	mov	r3, r2
    ae5a:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    ae5e:	8a42      	ldrh	r2, [r0, #18]
    ae60:	3201      	adds	r2, #1
    ae62:	fa1f fc82 	uxth.w	ip, r2
    ae66:	4696      	mov	lr, r2
    ae68:	4594      	cmp	ip, r2
    ae6a:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    ae6e:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    ae72:	f043 82b4 	bne.w	e3de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35b6>
    ae76:	e7ff      	b.n	ae78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x50>
    ae78:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    ae7c:	b281      	uxth	r1, r0
    ae7e:	460a      	mov	r2, r1
    ae80:	2300      	movs	r3, #0
    ae82:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    ae86:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    ae8a:	f043 82b4 	bne.w	e3f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35ce>
    ae8e:	e7ff      	b.n	ae90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x68>
    ae90:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ae94:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    ae98:	1842      	adds	r2, r0, r1
    ae9a:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    ae9e:	4613      	mov	r3, r2
    aea0:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    aea4:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    aea8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    aeac:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    aeb0:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    aeb4:	e7ff      	b.n	aeb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8e>
    aeb6:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    aeba:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    aebe:	ea40 0201 	orr.w	r2, r0, r1
    aec2:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    aec6:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    aeca:	f36f 321f 	bfc	r2, #12, #20
    aece:	4613      	mov	r3, r2
    aed0:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    aed4:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    aed8:	f002 020f 	and.w	r2, r2, #15
    aedc:	4694      	mov	ip, r2
    aede:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    aee2:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    aee6:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    aeea:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    aeee:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    aef2:	e7ff      	b.n	aef4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcc>
    aef4:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    aef8:	f000 010f 	and.w	r1, r0, #15
    aefc:	460a      	mov	r2, r1
    aefe:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    af02:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    af06:	0909      	lsrs	r1, r1, #4
    af08:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    af0c:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    af10:	e7ff      	b.n	af12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xea>
    af12:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    af16:	f000 010f 	and.w	r1, r0, #15
    af1a:	460a      	mov	r2, r1
    af1c:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    af20:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    af24:	b2cb      	uxtb	r3, r1
    af26:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    af2a:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    af2e:	0b09      	lsrs	r1, r1, #12
    af30:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    af34:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    af38:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    af3c:	e7ff      	b.n	af3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x116>
    af3e:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    af42:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    af46:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    af4a:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    af4e:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    af52:	e7ff      	b.n	af54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12c>
    af54:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    af58:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    af5c:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    af60:	0912      	lsrs	r2, r2, #4
    af62:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    af66:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    af6a:	e7ff      	b.n	af6c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x144>
    af6c:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    af70:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    af74:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    af78:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    af7c:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    af80:	e7ff      	b.n	af82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15a>
    af82:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    af86:	f000 010f 	and.w	r1, r0, #15
        match (
    af8a:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    af8e:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    af92:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    af96:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    af9a:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    af9e:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    afa2:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    afa6:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    afaa:	468e      	mov	lr, r1
    afac:	290f      	cmp	r1, #15
    afae:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    afb2:	d84f      	bhi.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    afb4:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    afb8:	e8df f011 	tbh	[pc, r1, lsl #1]
    afbc:	03060010 	.word	0x03060010
    afc0:	04320399 	.word	0x04320399
    afc4:	002c04d2 	.word	0x002c04d2
    afc8:	06b4061f 	.word	0x06b4061f
    afcc:	00750032 	.word	0x00750032
    afd0:	0ee40e59 	.word	0x0ee40e59
    afd4:	10260f85 	.word	0x10260f85
    afd8:	0095007b 	.word	0x0095007b
    afdc:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    afe0:	2800      	cmp	r0, #0
    afe2:	f040 8261 	bne.w	b4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x680>
    afe6:	e7ff      	b.n	afe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c0>
    afe8:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    afec:	280e      	cmp	r0, #14
    afee:	f040 825b 	bne.w	b4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x680>
    aff2:	e7ff      	b.n	aff4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cc>
    aff4:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    aff8:	4601      	mov	r1, r0
    affa:	2800      	cmp	r0, #0
    affc:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    b000:	f000 80c0 	beq.w	b184 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35c>
    b004:	e7ff      	b.n	b006 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1de>
    b006:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    b00a:	b281      	uxth	r1, r0
    b00c:	290e      	cmp	r1, #14
    b00e:	f000 81b6 	beq.w	b37e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x556>
    b012:	e249      	b.n	b4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x680>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    b014:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b018:	2800      	cmp	r0, #0
    b01a:	f000 8541 	beq.w	baa0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc78>
    b01e:	e019      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    b020:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b024:	4601      	mov	r1, r0
    b026:	280e      	cmp	r0, #14
    b028:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    b02c:	d812      	bhi.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b02e:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    b032:	e8df f011 	tbh	[pc, r1, lsl #1]
    b036:	071e      	.short	0x071e
    b038:	086707c0 	.word	0x086707c0
    b03c:	09b5090e 	.word	0x09b5090e
    b040:	0b3b0a77 	.word	0x0b3b0a77
    b044:	000f0bf0 	.word	0x000f0bf0
    b048:	000f000f 	.word	0x000f000f
    b04c:	000f000f 	.word	0x000f000f
    b050:	0cb4000f 	.word	0x0cb4000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    b054:	f24d 5028 	movw	r0, #54568	; 0xd528
    b058:	f2c0 0001 	movt	r0, #1
    b05c:	6801      	ldr	r1, [r0, #0]
    b05e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b062:	f100 0212 	add.w	r2, r0, #18
    b066:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    b06a:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    b06e:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    b072:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    b076:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    b07a:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    b07e:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    b082:	f247 5c9b 	movw	ip, #30107	; 0x759b
    b086:	f2c0 0c01 	movt	ip, #1
    b08a:	4610      	mov	r0, r2
    b08c:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    b090:	4661      	mov	r1, ip
    b092:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    b096:	f7ff fa80 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b09a:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    b09e:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    b0a2:	f003 b94f 	b.w	e344 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x351c>
            (9, _, _, 0) => {
    b0a6:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b0aa:	2800      	cmp	r0, #0
    b0ac:	f001 8532 	beq.w	cb14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cec>
    b0b0:	e7d0      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xe, _, 9, 0xe) => {
    b0b2:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    b0b6:	4601      	mov	r1, r0
    b0b8:	2809      	cmp	r0, #9
    b0ba:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    b0be:	d006      	beq.n	b0ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a6>
    b0c0:	e7ff      	b.n	b0c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29a>
    b0c2:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    b0c6:	b281      	uxth	r1, r0
    b0c8:	290a      	cmp	r1, #10
    b0ca:	d006      	beq.n	b0da <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b2>
    b0cc:	e7c2      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b0ce:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b0d2:	280e      	cmp	r0, #14
    b0d4:	f002 815b 	beq.w	d38e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2566>
    b0d8:	e7bc      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xe, _, 0xa, 0x1) => {
    b0da:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b0de:	2801      	cmp	r0, #1
    b0e0:	f002 81fe 	beq.w	d4e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b8>
    b0e4:	e7b6      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 0, 7) => {
    b0e6:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    b0ea:	4601      	mov	r1, r0
    b0ec:	2806      	cmp	r0, #6
    b0ee:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    b0f2:	d8af      	bhi.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b0f4:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    b0f8:	e8df f001 	tbb	[pc, r1]
    b0fc:	322c1505 	.word	0x322c1505
    b100:	003e3804 	.word	0x003e3804
    b104:	e7a6      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b106:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b10a:	4601      	mov	r1, r0
    b10c:	2807      	cmp	r0, #7
    b10e:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    b112:	f002 828e 	beq.w	d632 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x280a>
    b116:	e7ff      	b.n	b118 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f0>
    b118:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    b11c:	b281      	uxth	r1, r0
    b11e:	290a      	cmp	r1, #10
    b120:	f002 8320 	beq.w	d764 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x293c>
    b124:	e796      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 1, 5) => {
    b126:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b12a:	4601      	mov	r1, r0
    b12c:	2805      	cmp	r0, #5
    b12e:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    b132:	f002 83b1 	beq.w	d898 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a70>
    b136:	e7ff      	b.n	b138 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x310>
    b138:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    b13c:	b281      	uxth	r1, r0
    b13e:	2908      	cmp	r1, #8
    b140:	f002 843f 	beq.w	d9c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b9a>
    b144:	e7ff      	b.n	b146 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31e>
    b146:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    b14a:	b281      	uxth	r1, r0
    b14c:	290e      	cmp	r1, #14
    b14e:	f002 84cd 	beq.w	daec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2cc4>
    b152:	e77f      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 2, 9) => {
    b154:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b158:	2809      	cmp	r0, #9
    b15a:	f002 856b 	beq.w	dc34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e0c>
    b15e:	e779      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 3, 3) => {
    b160:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b164:	2803      	cmp	r0, #3
    b166:	f002 8616 	beq.w	dd96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f6e>
    b16a:	e773      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 5, 5) => {
    b16c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b170:	2805      	cmp	r0, #5
    b172:	f002 871f 	beq.w	dfb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x318c>
    b176:	e76d      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 6, 5) => {
    b178:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b17c:	2805      	cmp	r0, #5
    b17e:	f002 87fc 	beq.w	e17a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3352>
    b182:	e767      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b184:	2005      	movs	r0, #5
    b186:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    b18a:	f64c 1080 	movw	r0, #51584	; 0xc980
    b18e:	f2c0 0001 	movt	r0, #1
    b192:	6801      	ldr	r1, [r0, #0]
    b194:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    b198:	f006 fb9d 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b19c:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    b1a0:	e01f      	b.n	b1e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ba>
    b1a2:	2001      	movs	r0, #1
    b1a4:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    b1a8:	e015      	b.n	b1d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ae>
    b1aa:	2000      	movs	r0, #0
    b1ac:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    b1b0:	e011      	b.n	b1d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ae>
    b1b2:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    b1b4:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    b1b8:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    b1bc:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b1c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b1c4:	f006 fbfc 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b1c8:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    b1cc:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    b1d0:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    b1d4:	e00b      	b.n	b1ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3c6>
    b1d6:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    b1da:	07c0      	lsls	r0, r0, #31
    b1dc:	2800      	cmp	r0, #0
    b1de:	d115      	bne.n	b20c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3e4>
    b1e0:	e05e      	b.n	b2a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x478>
    b1e2:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    b1e6:	07c1      	lsls	r1, r0, #31
    b1e8:	2900      	cmp	r1, #0
    b1ea:	d1e2      	bne.n	b1b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38a>
    b1ec:	e7dd      	b.n	b1aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x382>
    b1ee:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    b1f2:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    b1f6:	f006 fb6e 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b1fa:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    b1fe:	e7ff      	b.n	b200 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3d8>
    b200:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    b204:	07c1      	lsls	r1, r0, #31
    b206:	2900      	cmp	r1, #0
    b208:	d1cb      	bne.n	b1a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37a>
    b20a:	e7ce      	b.n	b1aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x382>
                trace!("[{:04x}] CLS", self.pc);
    b20c:	f24d 70c8 	movw	r0, #55240	; 0xd7c8
    b210:	f2c0 0001 	movt	r0, #1
    b214:	6801      	ldr	r1, [r0, #0]
    b216:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b21a:	f100 0212 	add.w	r2, r0, #18
    b21e:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    b222:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    b226:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    b22a:	f247 539b 	movw	r3, #30107	; 0x759b
    b22e:	f2c0 0301 	movt	r3, #1
    b232:	4610      	mov	r0, r2
    b234:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    b238:	4619      	mov	r1, r3
    b23a:	f7ff f9ae 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b23e:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    b242:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    b246:	e7ff      	b.n	b248 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x420>
    b248:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    b24c:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    b250:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    b254:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    b258:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    b25c:	f2c0 0201 	movt	r2, #1
    b260:	6812      	ldr	r2, [r2, #0]
    b262:	466b      	mov	r3, sp
    b264:	f04f 0c01 	mov.w	ip, #1
    b268:	f8c3 c008 	str.w	ip, [r3, #8]
    b26c:	605a      	str	r2, [r3, #4]
    b26e:	f8c3 c000 	str.w	ip, [r3]
    b272:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    b276:	2202      	movs	r2, #2
    b278:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    b27c:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    b280:	f006 fb65 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b284:	e7ff      	b.n	b286 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x45e>
    b286:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    b28a:	f24d 70e8 	movw	r0, #55272	; 0xd7e8
    b28e:	f2c0 0001 	movt	r0, #1
    b292:	6802      	ldr	r2, [r0, #0]
    b294:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    b298:	f007 fb0e 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b29c:	e7ff      	b.n	b29e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x476>
    b29e:	e7ff      	b.n	b2a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x478>
    b2a0:	f241 0048 	movw	r0, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    b2a4:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    b2a8:	4408      	add	r0, r1
    b2aa:	f004 fa8f 	bl	f7cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E>
    b2ae:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    b2b0:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    b2b2:	e7ff      	b.n	b2b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x48c>
    b2b4:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    b2b6:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    b2ba:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    b2bc:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    b2c0:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    b2c2:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    b2c6:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    b2ca:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    b2ce:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    b2d2:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    b2d6:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    b2da:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    b2de:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    b2e2:	f003 fde3 	bl	eeac <_ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E>
    b2e6:	e7ff      	b.n	b2e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4c0>
    b2e8:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    b2ec:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    b2f0:	f003 ff3f 	bl	f172 <_ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E>
    b2f4:	e7ff      	b.n	b2f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4ce>
    b2f6:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    b2fa:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    b2fe:	f006 fc6d 	bl	11bdc <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he2e30225e051e80dE>
    b302:	e7ff      	b.n	b304 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4dc>
    b304:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    b308:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    b30c:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    b310:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    b314:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    b318:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    b31c:	e7ff      	b.n	b31e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4f6>
    b31e:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    b322:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    b326:	f006 fb86 	bl	11a36 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E>
    b32a:	e7ff      	b.n	b32c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x504>
    b32c:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    b330:	2800      	cmp	r0, #0
    b332:	d001      	beq.n	b338 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x510>
    b334:	e7ff      	b.n	b336 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x50e>
    b336:	e002      	b.n	b33e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x516>
        match (
    b338:	f003 b843 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    b33c:	defe      	udf	#254	; 0xfe
    b33e:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    b342:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    b346:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    b34a:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    b34e:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    b352:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    b356:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    b35a:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    b35e:	f241 0248 	movw	r2, #4168	; 0x1048
                    self.hw.vram_set(x, y, false);
    b362:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    b366:	441a      	add	r2, r3
    b368:	2300      	movs	r3, #0
    b36a:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    b36c:	4610      	mov	r0, r2
    b36e:	9afd      	ldr	r2, [sp, #1012]	; 0x3f4
    b370:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    b372:	4611      	mov	r1, r2
    b374:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    b376:	f004 f86c 	bl	f452 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE>
    b37a:	e7ff      	b.n	b37c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x554>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    b37c:	e7cf      	b.n	b31e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4f6>
    b37e:	2005      	movs	r0, #5
    b380:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    b384:	f64c 1080 	movw	r0, #51584	; 0xc980
    b388:	f2c0 0001 	movt	r0, #1
    b38c:	6801      	ldr	r1, [r0, #0]
    b38e:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    b392:	f006 faa0 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b396:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    b398:	e01f      	b.n	b3da <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5b2>
    b39a:	2001      	movs	r0, #1
    b39c:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    b3a0:	e015      	b.n	b3ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5a6>
    b3a2:	2000      	movs	r0, #0
    b3a4:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    b3a8:	e011      	b.n	b3ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5a6>
    b3aa:	2000      	movs	r0, #0
    b3ac:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    b3b0:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    b3b4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b3b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b3bc:	f006 fb00 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b3c0:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    b3c4:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    b3c8:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    b3cc:	e00a      	b.n	b3e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5bc>
    b3ce:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    b3d2:	07c0      	lsls	r0, r0, #31
    b3d4:	2800      	cmp	r0, #0
    b3d6:	d112      	bne.n	b3fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5d6>
    b3d8:	e055      	b.n	b486 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x65e>
    b3da:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    b3dc:	07c1      	lsls	r1, r0, #31
    b3de:	2900      	cmp	r1, #0
    b3e0:	d1e3      	bne.n	b3aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x582>
    b3e2:	e7de      	b.n	b3a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x57a>
    b3e4:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    b3e8:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    b3ec:	f006 fa73 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b3f0:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    b3f2:	e7ff      	b.n	b3f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5cc>
    b3f4:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    b3f6:	07c1      	lsls	r1, r0, #31
    b3f8:	2900      	cmp	r1, #0
    b3fa:	d1ce      	bne.n	b39a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x572>
    b3fc:	e7d1      	b.n	b3a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x57a>
                trace!("[{:04x}] RET", self.pc);
    b3fe:	f24d 708c 	movw	r0, #55180	; 0xd78c
    b402:	f2c0 0001 	movt	r0, #1
    b406:	6801      	ldr	r1, [r0, #0]
    b408:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b40c:	f100 0212 	add.w	r2, r0, #18
    b410:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    b414:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    b418:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    b41c:	f247 539b 	movw	r3, #30107	; 0x759b
    b420:	f2c0 0301 	movt	r3, #1
    b424:	4610      	mov	r0, r2
    b426:	91f9      	str	r1, [sp, #996]	; 0x3e4
    b428:	4619      	mov	r1, r3
    b42a:	f7ff f8b6 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b42e:	90f8      	str	r0, [sp, #992]	; 0x3e0
    b430:	91f7      	str	r1, [sp, #988]	; 0x3dc
    b432:	e7ff      	b.n	b434 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x60c>
    b434:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    b436:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    b43a:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    b43c:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    b440:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    b444:	f2c0 0201 	movt	r2, #1
    b448:	6812      	ldr	r2, [r2, #0]
    b44a:	466b      	mov	r3, sp
    b44c:	f04f 0c01 	mov.w	ip, #1
    b450:	f8c3 c008 	str.w	ip, [r3, #8]
    b454:	605a      	str	r2, [r3, #4]
    b456:	f8c3 c000 	str.w	ip, [r3]
    b45a:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    b45e:	2202      	movs	r2, #2
    b460:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    b464:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    b466:	f006 fa72 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b46a:	e7ff      	b.n	b46c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x644>
    b46c:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    b470:	f24d 70ac 	movw	r0, #55212	; 0xd7ac
    b474:	f2c0 0001 	movt	r0, #1
    b478:	6802      	ldr	r2, [r0, #0]
    b47a:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    b47e:	f007 fa1b 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b482:	e7ff      	b.n	b484 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x65c>
    b484:	e7ff      	b.n	b486 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x65e>
                let addr = self.pop();
    b486:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b48a:	f7ff fc79 	bl	ad80 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E>
    b48e:	4601      	mov	r1, r0
    b490:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    b494:	91f6      	str	r1, [sp, #984]	; 0x3d8
    b496:	e7ff      	b.n	b498 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x670>
                self.jump(addr);
    b498:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b49c:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    b49e:	f003 fa7f 	bl	e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    b4a2:	e7ff      	b.n	b4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x67c>
        match (
    b4a4:	f002 bf8d 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    b4a8:	2005      	movs	r0, #5
    b4aa:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    b4ae:	f64c 1080 	movw	r0, #51584	; 0xc980
    b4b2:	f2c0 0001 	movt	r0, #1
    b4b6:	6801      	ldr	r1, [r0, #0]
    b4b8:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    b4bc:	f006 fa0b 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b4c0:	90f5      	str	r0, [sp, #980]	; 0x3d4
    b4c2:	e01f      	b.n	b504 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6dc>
    b4c4:	2001      	movs	r0, #1
    b4c6:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    b4ca:	e015      	b.n	b4f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6d0>
    b4cc:	2000      	movs	r0, #0
    b4ce:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    b4d2:	e011      	b.n	b4f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6d0>
    b4d4:	2000      	movs	r0, #0
    b4d6:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    b4da:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    b4de:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b4e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b4e6:	f006 fa6b 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b4ea:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    b4ee:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    b4f2:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    b4f6:	e00a      	b.n	b50e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6e6>
    b4f8:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    b4fc:	07c0      	lsls	r0, r0, #31
    b4fe:	2800      	cmp	r0, #0
    b500:	d112      	bne.n	b528 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x700>
    b502:	e055      	b.n	b5b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x788>
    b504:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    b506:	07c1      	lsls	r1, r0, #31
    b508:	2900      	cmp	r1, #0
    b50a:	d1e3      	bne.n	b4d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6ac>
    b50c:	e7de      	b.n	b4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6a4>
    b50e:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    b512:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    b516:	f006 f9de 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b51a:	90f4      	str	r0, [sp, #976]	; 0x3d0
    b51c:	e7ff      	b.n	b51e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6f6>
    b51e:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    b520:	07c1      	lsls	r1, r0, #31
    b522:	2900      	cmp	r1, #0
    b524:	d1ce      	bne.n	b4c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x69c>
    b526:	e7d1      	b.n	b4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6a4>
                trace!("[{:04x}] SYS nnn", self.pc);
    b528:	f24d 7030 	movw	r0, #55088	; 0xd730
    b52c:	f2c0 0001 	movt	r0, #1
    b530:	6801      	ldr	r1, [r0, #0]
    b532:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b536:	f100 0212 	add.w	r2, r0, #18
    b53a:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    b53e:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    b542:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    b546:	f247 539b 	movw	r3, #30107	; 0x759b
    b54a:	f2c0 0301 	movt	r3, #1
    b54e:	4610      	mov	r0, r2
    b550:	91f3      	str	r1, [sp, #972]	; 0x3cc
    b552:	4619      	mov	r1, r3
    b554:	f7ff f821 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b558:	90f2      	str	r0, [sp, #968]	; 0x3c8
    b55a:	91f1      	str	r1, [sp, #964]	; 0x3c4
    b55c:	e7ff      	b.n	b55e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x736>
    b55e:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    b560:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    b564:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    b566:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    b56a:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    b56e:	f2c0 0201 	movt	r2, #1
    b572:	6812      	ldr	r2, [r2, #0]
    b574:	466b      	mov	r3, sp
    b576:	f04f 0c01 	mov.w	ip, #1
    b57a:	f8c3 c008 	str.w	ip, [r3, #8]
    b57e:	605a      	str	r2, [r3, #4]
    b580:	f8c3 c000 	str.w	ip, [r3]
    b584:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    b588:	2202      	movs	r2, #2
    b58a:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    b58e:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    b590:	f006 f9dd 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b594:	e7ff      	b.n	b596 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x76e>
    b596:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    b59a:	f24d 7050 	movw	r0, #55120	; 0xd750
    b59e:	f2c0 0001 	movt	r0, #1
    b5a2:	6802      	ldr	r2, [r0, #0]
    b5a4:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    b5a8:	f007 f986 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b5ac:	e7ff      	b.n	b5ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x786>
    b5ae:	e7ff      	b.n	b5b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x788>
    b5b0:	f24d 7054 	movw	r0, #55124	; 0xd754
    b5b4:	f2c0 0001 	movt	r0, #1
    b5b8:	f24d 7264 	movw	r2, #55140	; 0xd764
    b5bc:	f2c0 0201 	movt	r2, #1
    b5c0:	210f      	movs	r1, #15
    b5c2:	f00a fbdd 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b5c6:	defe      	udf	#254	; 0xfe
    b5c8:	2005      	movs	r0, #5
    b5ca:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    b5ce:	f64c 1080 	movw	r0, #51584	; 0xc980
    b5d2:	f2c0 0001 	movt	r0, #1
    b5d6:	6801      	ldr	r1, [r0, #0]
    b5d8:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    b5dc:	f006 f97b 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b5e0:	90f0      	str	r0, [sp, #960]	; 0x3c0
    b5e2:	e01f      	b.n	b624 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7fc>
    b5e4:	2001      	movs	r0, #1
    b5e6:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    b5ea:	e015      	b.n	b618 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7f0>
    b5ec:	2000      	movs	r0, #0
    b5ee:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    b5f2:	e011      	b.n	b618 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7f0>
    b5f4:	2000      	movs	r0, #0
    b5f6:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    b5fa:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    b5fe:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b602:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b606:	f006 f9db 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b60a:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    b60e:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    b612:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    b616:	e00a      	b.n	b62e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x806>
    b618:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    b61c:	07c0      	lsls	r0, r0, #31
    b61e:	2800      	cmp	r0, #0
    b620:	d112      	bne.n	b648 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x820>
    b622:	e055      	b.n	b6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8a8>
    b624:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    b626:	07c1      	lsls	r1, r0, #31
    b628:	2900      	cmp	r1, #0
    b62a:	d1e3      	bne.n	b5f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7cc>
    b62c:	e7de      	b.n	b5ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7c4>
    b62e:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    b632:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    b636:	f006 f94e 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b63a:	90ef      	str	r0, [sp, #956]	; 0x3bc
    b63c:	e7ff      	b.n	b63e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x816>
    b63e:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    b640:	07c1      	lsls	r1, r0, #31
    b642:	2900      	cmp	r1, #0
    b644:	d1ce      	bne.n	b5e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7bc>
    b646:	e7d1      	b.n	b5ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7c4>
                trace!("[{:04x}] JP nnn", self.pc);
    b648:	f24d 60f0 	movw	r0, #55024	; 0xd6f0
    b64c:	f2c0 0001 	movt	r0, #1
    b650:	6801      	ldr	r1, [r0, #0]
    b652:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b656:	f100 0212 	add.w	r2, r0, #18
    b65a:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    b65e:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    b662:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    b666:	f247 539b 	movw	r3, #30107	; 0x759b
    b66a:	f2c0 0301 	movt	r3, #1
    b66e:	4610      	mov	r0, r2
    b670:	91ee      	str	r1, [sp, #952]	; 0x3b8
    b672:	4619      	mov	r1, r3
    b674:	f7fe ff91 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b678:	90ed      	str	r0, [sp, #948]	; 0x3b4
    b67a:	91ec      	str	r1, [sp, #944]	; 0x3b0
    b67c:	e7ff      	b.n	b67e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x856>
    b67e:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    b680:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    b684:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    b686:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    b68a:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    b68e:	f2c0 0201 	movt	r2, #1
    b692:	6812      	ldr	r2, [r2, #0]
    b694:	466b      	mov	r3, sp
    b696:	f04f 0c01 	mov.w	ip, #1
    b69a:	f8c3 c008 	str.w	ip, [r3, #8]
    b69e:	605a      	str	r2, [r3, #4]
    b6a0:	f8c3 c000 	str.w	ip, [r3]
    b6a4:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    b6a8:	2202      	movs	r2, #2
    b6aa:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    b6ae:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    b6b0:	f006 f94d 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b6b4:	e7ff      	b.n	b6b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x88e>
    b6b6:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    b6ba:	f24d 7010 	movw	r0, #55056	; 0xd710
    b6be:	f2c0 0001 	movt	r0, #1
    b6c2:	6802      	ldr	r2, [r0, #0]
    b6c4:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    b6c8:	f007 f8f6 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b6cc:	e7ff      	b.n	b6ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8a6>
    b6ce:	e7ff      	b.n	b6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8a8>
    b6d0:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    b6d2:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    b6d6:	f003 fcdf 	bl	f098 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>
    b6da:	90eb      	str	r0, [sp, #940]	; 0x3ac
    b6dc:	e7ff      	b.n	b6de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8b6>
    b6de:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b6e2:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    b6e4:	f003 f95c 	bl	e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    b6e8:	e7ff      	b.n	b6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8c2>
        match (
    b6ea:	f002 be6a 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    b6ee:	2005      	movs	r0, #5
    b6f0:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    b6f4:	f64c 1080 	movw	r0, #51584	; 0xc980
    b6f8:	f2c0 0001 	movt	r0, #1
    b6fc:	6801      	ldr	r1, [r0, #0]
    b6fe:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    b702:	f006 f8e8 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b706:	90ea      	str	r0, [sp, #936]	; 0x3a8
    b708:	e01f      	b.n	b74a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x922>
    b70a:	2001      	movs	r0, #1
    b70c:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    b710:	e015      	b.n	b73e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x916>
    b712:	2000      	movs	r0, #0
    b714:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    b718:	e011      	b.n	b73e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x916>
    b71a:	2000      	movs	r0, #0
    b71c:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    b720:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    b724:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b728:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b72c:	f006 f948 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b730:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    b734:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    b738:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    b73c:	e00a      	b.n	b754 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x92c>
    b73e:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    b742:	07c0      	lsls	r0, r0, #31
    b744:	2800      	cmp	r0, #0
    b746:	d112      	bne.n	b76e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x946>
    b748:	e055      	b.n	b7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9ce>
    b74a:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    b74c:	07c1      	lsls	r1, r0, #31
    b74e:	2900      	cmp	r1, #0
    b750:	d1e3      	bne.n	b71a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8f2>
    b752:	e7de      	b.n	b712 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8ea>
    b754:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    b758:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    b75c:	f006 f8bb 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b760:	90e9      	str	r0, [sp, #932]	; 0x3a4
    b762:	e7ff      	b.n	b764 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x93c>
    b764:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    b766:	07c1      	lsls	r1, r0, #31
    b768:	2900      	cmp	r1, #0
    b76a:	d1ce      	bne.n	b70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8e2>
    b76c:	e7d1      	b.n	b712 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8ea>
                trace!("[{:04x}] CALL nnn", self.pc);
    b76e:	f24d 60bc 	movw	r0, #54972	; 0xd6bc
    b772:	f2c0 0001 	movt	r0, #1
    b776:	6801      	ldr	r1, [r0, #0]
    b778:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b77c:	f100 0212 	add.w	r2, r0, #18
    b780:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    b784:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    b788:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    b78c:	f247 539b 	movw	r3, #30107	; 0x759b
    b790:	f2c0 0301 	movt	r3, #1
    b794:	4610      	mov	r0, r2
    b796:	91e8      	str	r1, [sp, #928]	; 0x3a0
    b798:	4619      	mov	r1, r3
    b79a:	f7fe fefe 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b79e:	90e7      	str	r0, [sp, #924]	; 0x39c
    b7a0:	91e6      	str	r1, [sp, #920]	; 0x398
    b7a2:	e7ff      	b.n	b7a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x97c>
    b7a4:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    b7a6:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    b7aa:	99e6      	ldr	r1, [sp, #920]	; 0x398
    b7ac:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    b7b0:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    b7b4:	f2c0 0201 	movt	r2, #1
    b7b8:	6812      	ldr	r2, [r2, #0]
    b7ba:	466b      	mov	r3, sp
    b7bc:	f04f 0c01 	mov.w	ip, #1
    b7c0:	f8c3 c008 	str.w	ip, [r3, #8]
    b7c4:	605a      	str	r2, [r3, #4]
    b7c6:	f8c3 c000 	str.w	ip, [r3]
    b7ca:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    b7ce:	2202      	movs	r2, #2
    b7d0:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    b7d4:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    b7d6:	f006 f8ba 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b7da:	e7ff      	b.n	b7dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9b4>
    b7dc:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    b7e0:	f24d 60dc 	movw	r0, #55004	; 0xd6dc
    b7e4:	f2c0 0001 	movt	r0, #1
    b7e8:	6802      	ldr	r2, [r0, #0]
    b7ea:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    b7ee:	f007 f863 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b7f2:	e7ff      	b.n	b7f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9cc>
    b7f4:	e7ff      	b.n	b7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9ce>
                self.push(self.pc);
    b7f6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b7fa:	8a41      	ldrh	r1, [r0, #18]
    b7fc:	f003 f926 	bl	ea4c <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE>
    b800:	e7ff      	b.n	b802 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9da>
    b802:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    b804:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    b808:	f003 fc46 	bl	f098 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>
    b80c:	90e5      	str	r0, [sp, #916]	; 0x394
    b80e:	e7ff      	b.n	b810 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9e8>
    b810:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b814:	99e5      	ldr	r1, [sp, #916]	; 0x394
    b816:	f003 f8c3 	bl	e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    b81a:	e7ff      	b.n	b81c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9f4>
        match (
    b81c:	f002 bdd1 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    b820:	2005      	movs	r0, #5
    b822:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    b826:	f64c 1080 	movw	r0, #51584	; 0xc980
    b82a:	f2c0 0001 	movt	r0, #1
    b82e:	6801      	ldr	r1, [r0, #0]
    b830:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    b834:	f006 f84f 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b838:	90e4      	str	r0, [sp, #912]	; 0x390
    b83a:	e01f      	b.n	b87c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa54>
    b83c:	2001      	movs	r0, #1
    b83e:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    b842:	e015      	b.n	b870 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa48>
    b844:	2000      	movs	r0, #0
    b846:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    b84a:	e011      	b.n	b870 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa48>
    b84c:	2000      	movs	r0, #0
    b84e:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    b852:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    b856:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b85a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b85e:	f006 f8af 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b862:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    b866:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    b86a:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    b86e:	e00a      	b.n	b886 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa5e>
    b870:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    b874:	07c0      	lsls	r0, r0, #31
    b876:	2800      	cmp	r0, #0
    b878:	d112      	bne.n	b8a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa78>
    b87a:	e055      	b.n	b928 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb00>
    b87c:	98e4      	ldr	r0, [sp, #912]	; 0x390
    b87e:	07c1      	lsls	r1, r0, #31
    b880:	2900      	cmp	r1, #0
    b882:	d1e3      	bne.n	b84c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa24>
    b884:	e7de      	b.n	b844 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa1c>
    b886:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    b88a:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    b88e:	f006 f822 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b892:	90e3      	str	r0, [sp, #908]	; 0x38c
    b894:	e7ff      	b.n	b896 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa6e>
    b896:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    b898:	07c1      	lsls	r1, r0, #31
    b89a:	2900      	cmp	r1, #0
    b89c:	d1ce      	bne.n	b83c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa14>
    b89e:	e7d1      	b.n	b844 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa1c>
                trace!("[{:04x}] SE Vx kk", self.pc);
    b8a0:	f24d 606c 	movw	r0, #54892	; 0xd66c
    b8a4:	f2c0 0001 	movt	r0, #1
    b8a8:	6801      	ldr	r1, [r0, #0]
    b8aa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b8ae:	f100 0212 	add.w	r2, r0, #18
    b8b2:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    b8b6:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    b8ba:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    b8be:	f247 539b 	movw	r3, #30107	; 0x759b
    b8c2:	f2c0 0301 	movt	r3, #1
    b8c6:	4610      	mov	r0, r2
    b8c8:	91e2      	str	r1, [sp, #904]	; 0x388
    b8ca:	4619      	mov	r1, r3
    b8cc:	f7fe fe65 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b8d0:	90e1      	str	r0, [sp, #900]	; 0x384
    b8d2:	91e0      	str	r1, [sp, #896]	; 0x380
    b8d4:	e7ff      	b.n	b8d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xaae>
    b8d6:	98e1      	ldr	r0, [sp, #900]	; 0x384
    b8d8:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    b8dc:	99e0      	ldr	r1, [sp, #896]	; 0x380
    b8de:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    b8e2:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    b8e6:	f2c0 0201 	movt	r2, #1
    b8ea:	6812      	ldr	r2, [r2, #0]
    b8ec:	466b      	mov	r3, sp
    b8ee:	f04f 0c01 	mov.w	ip, #1
    b8f2:	f8c3 c008 	str.w	ip, [r3, #8]
    b8f6:	605a      	str	r2, [r3, #4]
    b8f8:	f8c3 c000 	str.w	ip, [r3]
    b8fc:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    b900:	2202      	movs	r2, #2
    b902:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    b906:	99e2      	ldr	r1, [sp, #904]	; 0x388
    b908:	f006 f821 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b90c:	e7ff      	b.n	b90e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xae6>
    b90e:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    b912:	f24d 608c 	movw	r0, #54924	; 0xd68c
    b916:	f2c0 0001 	movt	r0, #1
    b91a:	6802      	ldr	r2, [r0, #0]
    b91c:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    b920:	f006 ffca 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b924:	e7ff      	b.n	b926 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xafe>
    b926:	e7ff      	b.n	b928 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb00>
                if self.v[x] == kk {
    b928:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b92c:	280f      	cmp	r0, #15
    b92e:	f203 8011 	bhi.w	e954 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3b2c>
    b932:	e7ff      	b.n	b934 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb0c>
    b934:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b938:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b93c:	1842      	adds	r2, r0, r1
    b93e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b942:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    b946:	fa5f fc83 	uxtb.w	ip, r3
    b94a:	4562      	cmp	r2, ip
    b94c:	d106      	bne.n	b95c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb34>
    b94e:	e7ff      	b.n	b950 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb28>
                    self.next();
    b950:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b954:	f003 f867 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    b958:	e7ff      	b.n	b95a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb32>
                if self.v[x] == kk {
    b95a:	e7ff      	b.n	b95c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb34>
        match (
    b95c:	f002 bd31 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    b960:	2005      	movs	r0, #5
    b962:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    b966:	f64c 1080 	movw	r0, #51584	; 0xc980
    b96a:	f2c0 0001 	movt	r0, #1
    b96e:	6801      	ldr	r1, [r0, #0]
    b970:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    b974:	f005 ffaf 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b978:	90df      	str	r0, [sp, #892]	; 0x37c
    b97a:	e01f      	b.n	b9bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb94>
    b97c:	2001      	movs	r0, #1
    b97e:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    b982:	e015      	b.n	b9b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb88>
    b984:	2000      	movs	r0, #0
    b986:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    b98a:	e011      	b.n	b9b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb88>
    b98c:	2000      	movs	r0, #0
    b98e:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    b992:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    b996:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b99a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b99e:	f006 f80f 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b9a2:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    b9a6:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    b9aa:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    b9ae:	e00a      	b.n	b9c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb9e>
    b9b0:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    b9b4:	07c0      	lsls	r0, r0, #31
    b9b6:	2800      	cmp	r0, #0
    b9b8:	d112      	bne.n	b9e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xbb8>
    b9ba:	e055      	b.n	ba68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc40>
    b9bc:	98df      	ldr	r0, [sp, #892]	; 0x37c
    b9be:	07c1      	lsls	r1, r0, #31
    b9c0:	2900      	cmp	r1, #0
    b9c2:	d1e3      	bne.n	b98c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb64>
    b9c4:	e7de      	b.n	b984 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb5c>
    b9c6:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    b9ca:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    b9ce:	f005 ff82 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b9d2:	90de      	str	r0, [sp, #888]	; 0x378
    b9d4:	e7ff      	b.n	b9d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xbae>
    b9d6:	98de      	ldr	r0, [sp, #888]	; 0x378
    b9d8:	07c1      	lsls	r1, r0, #31
    b9da:	2900      	cmp	r1, #0
    b9dc:	d1ce      	bne.n	b97c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb54>
    b9de:	e7d1      	b.n	b984 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb5c>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    b9e0:	f24d 601c 	movw	r0, #54812	; 0xd61c
    b9e4:	f2c0 0001 	movt	r0, #1
    b9e8:	6801      	ldr	r1, [r0, #0]
    b9ea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b9ee:	f100 0212 	add.w	r2, r0, #18
    b9f2:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    b9f6:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    b9fa:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    b9fe:	f247 539b 	movw	r3, #30107	; 0x759b
    ba02:	f2c0 0301 	movt	r3, #1
    ba06:	4610      	mov	r0, r2
    ba08:	91dd      	str	r1, [sp, #884]	; 0x374
    ba0a:	4619      	mov	r1, r3
    ba0c:	f7fe fdc5 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ba10:	90dc      	str	r0, [sp, #880]	; 0x370
    ba12:	91db      	str	r1, [sp, #876]	; 0x36c
    ba14:	e7ff      	b.n	ba16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xbee>
    ba16:	98dc      	ldr	r0, [sp, #880]	; 0x370
    ba18:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    ba1c:	99db      	ldr	r1, [sp, #876]	; 0x36c
    ba1e:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    ba22:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    ba26:	f2c0 0201 	movt	r2, #1
    ba2a:	6812      	ldr	r2, [r2, #0]
    ba2c:	466b      	mov	r3, sp
    ba2e:	f04f 0c01 	mov.w	ip, #1
    ba32:	f8c3 c008 	str.w	ip, [r3, #8]
    ba36:	605a      	str	r2, [r3, #4]
    ba38:	f8c3 c000 	str.w	ip, [r3]
    ba3c:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    ba40:	2202      	movs	r2, #2
    ba42:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    ba46:	99dd      	ldr	r1, [sp, #884]	; 0x374
    ba48:	f005 ff81 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    ba4c:	e7ff      	b.n	ba4e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc26>
    ba4e:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    ba52:	f24d 603c 	movw	r0, #54844	; 0xd63c
    ba56:	f2c0 0001 	movt	r0, #1
    ba5a:	6802      	ldr	r2, [r0, #0]
    ba5c:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    ba60:	f006 ff2a 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ba64:	e7ff      	b.n	ba66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc3e>
    ba66:	e7ff      	b.n	ba68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc40>
                if self.v[x] != kk {
    ba68:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ba6c:	280f      	cmp	r0, #15
    ba6e:	f202 8767 	bhi.w	e940 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3b18>
    ba72:	e7ff      	b.n	ba74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc4c>
    ba74:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba78:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ba7c:	1842      	adds	r2, r0, r1
    ba7e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ba82:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    ba86:	fa5f fc83 	uxtb.w	ip, r3
    ba8a:	4562      	cmp	r2, ip
    ba8c:	d006      	beq.n	ba9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc74>
    ba8e:	e7ff      	b.n	ba90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc68>
                    self.next();
    ba90:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba94:	f002 ffc7 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    ba98:	e7ff      	b.n	ba9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc72>
                if self.v[x] != kk {
    ba9a:	e7ff      	b.n	ba9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc74>
        match (
    ba9c:	f002 bc91 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    baa0:	2005      	movs	r0, #5
    baa2:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    baa6:	f64c 1080 	movw	r0, #51584	; 0xc980
    baaa:	f2c0 0001 	movt	r0, #1
    baae:	6801      	ldr	r1, [r0, #0]
    bab0:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    bab4:	f005 ff0f 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bab8:	90da      	str	r0, [sp, #872]	; 0x368
    baba:	e01f      	b.n	bafc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcd4>
    babc:	2001      	movs	r0, #1
    babe:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    bac2:	e015      	b.n	baf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcc8>
    bac4:	2000      	movs	r0, #0
    bac6:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    baca:	e011      	b.n	baf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcc8>
    bacc:	2000      	movs	r0, #0
    bace:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    bad2:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    bad6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bada:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bade:	f005 ff6f 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bae2:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    bae6:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    baea:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    baee:	e00a      	b.n	bb06 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcde>
    baf0:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    baf4:	07c0      	lsls	r0, r0, #31
    baf6:	2800      	cmp	r0, #0
    baf8:	d112      	bne.n	bb20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcf8>
    bafa:	e055      	b.n	bba8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd80>
    bafc:	98da      	ldr	r0, [sp, #872]	; 0x368
    bafe:	07c1      	lsls	r1, r0, #31
    bb00:	2900      	cmp	r1, #0
    bb02:	d1e3      	bne.n	bacc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xca4>
    bb04:	e7de      	b.n	bac4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc9c>
    bb06:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    bb0a:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    bb0e:	f005 fee2 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bb12:	90d9      	str	r0, [sp, #868]	; 0x364
    bb14:	e7ff      	b.n	bb16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcee>
    bb16:	98d9      	ldr	r0, [sp, #868]	; 0x364
    bb18:	07c1      	lsls	r1, r0, #31
    bb1a:	2900      	cmp	r1, #0
    bb1c:	d1ce      	bne.n	babc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc94>
    bb1e:	e7d1      	b.n	bac4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc9c>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    bb20:	f24d 50bc 	movw	r0, #54716	; 0xd5bc
    bb24:	f2c0 0001 	movt	r0, #1
    bb28:	6801      	ldr	r1, [r0, #0]
    bb2a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bb2e:	f100 0212 	add.w	r2, r0, #18
    bb32:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    bb36:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    bb3a:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    bb3e:	f247 539b 	movw	r3, #30107	; 0x759b
    bb42:	f2c0 0301 	movt	r3, #1
    bb46:	4610      	mov	r0, r2
    bb48:	91d8      	str	r1, [sp, #864]	; 0x360
    bb4a:	4619      	mov	r1, r3
    bb4c:	f7fe fd25 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bb50:	90d7      	str	r0, [sp, #860]	; 0x35c
    bb52:	91d6      	str	r1, [sp, #856]	; 0x358
    bb54:	e7ff      	b.n	bb56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd2e>
    bb56:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    bb58:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    bb5c:	99d6      	ldr	r1, [sp, #856]	; 0x358
    bb5e:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    bb62:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    bb66:	f2c0 0201 	movt	r2, #1
    bb6a:	6812      	ldr	r2, [r2, #0]
    bb6c:	466b      	mov	r3, sp
    bb6e:	f04f 0c01 	mov.w	ip, #1
    bb72:	f8c3 c008 	str.w	ip, [r3, #8]
    bb76:	605a      	str	r2, [r3, #4]
    bb78:	f8c3 c000 	str.w	ip, [r3]
    bb7c:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    bb80:	2202      	movs	r2, #2
    bb82:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    bb86:	99d8      	ldr	r1, [sp, #864]	; 0x360
    bb88:	f005 fee1 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    bb8c:	e7ff      	b.n	bb8e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd66>
    bb8e:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    bb92:	f24d 50dc 	movw	r0, #54748	; 0xd5dc
    bb96:	f2c0 0001 	movt	r0, #1
    bb9a:	6802      	ldr	r2, [r0, #0]
    bb9c:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    bba0:	f006 fe8a 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bba4:	e7ff      	b.n	bba6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd7e>
    bba6:	e7ff      	b.n	bba8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd80>
                if self.v[x] == self.v[y] {
    bba8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bbac:	280f      	cmp	r0, #15
    bbae:	f202 86b3 	bhi.w	e918 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3af0>
    bbb2:	e7ff      	b.n	bbb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd8c>
    bbb4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bbb8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bbbc:	1842      	adds	r2, r0, r1
    bbbe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bbc2:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    bbc6:	2b0f      	cmp	r3, #15
    bbc8:	92d5      	str	r2, [sp, #852]	; 0x354
    bbca:	f202 86af 	bhi.w	e92c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3b04>
    bbce:	e7ff      	b.n	bbd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xda8>
    bbd0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bbd4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    bbd8:	1842      	adds	r2, r0, r1
    bbda:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bbde:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    bbe0:	fa5f fc83 	uxtb.w	ip, r3
    bbe4:	4594      	cmp	ip, r2
    bbe6:	d106      	bne.n	bbf6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdce>
    bbe8:	e7ff      	b.n	bbea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdc2>
                    self.next();
    bbea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bbee:	f002 ff1a 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    bbf2:	e7ff      	b.n	bbf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdcc>
                if self.v[x] == self.v[y] {
    bbf4:	e7ff      	b.n	bbf6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdce>
        match (
    bbf6:	f002 bbe4 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    bbfa:	2005      	movs	r0, #5
    bbfc:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    bc00:	f64c 1080 	movw	r0, #51584	; 0xc980
    bc04:	f2c0 0001 	movt	r0, #1
    bc08:	6801      	ldr	r1, [r0, #0]
    bc0a:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    bc0e:	f005 fe62 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bc12:	90d4      	str	r0, [sp, #848]	; 0x350
    bc14:	e01f      	b.n	bc56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe2e>
    bc16:	2001      	movs	r0, #1
    bc18:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    bc1c:	e015      	b.n	bc4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe22>
    bc1e:	2000      	movs	r0, #0
    bc20:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    bc24:	e011      	b.n	bc4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe22>
    bc26:	2000      	movs	r0, #0
    bc28:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    bc2c:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    bc30:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bc34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bc38:	f005 fec2 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bc3c:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    bc40:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    bc44:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    bc48:	e00a      	b.n	bc60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe38>
    bc4a:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    bc4e:	07c0      	lsls	r0, r0, #31
    bc50:	2800      	cmp	r0, #0
    bc52:	d112      	bne.n	bc7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe52>
    bc54:	e055      	b.n	bd02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xeda>
    bc56:	98d4      	ldr	r0, [sp, #848]	; 0x350
    bc58:	07c1      	lsls	r1, r0, #31
    bc5a:	2900      	cmp	r1, #0
    bc5c:	d1e3      	bne.n	bc26 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdfe>
    bc5e:	e7de      	b.n	bc1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdf6>
    bc60:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    bc64:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    bc68:	f005 fe35 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bc6c:	90d3      	str	r0, [sp, #844]	; 0x34c
    bc6e:	e7ff      	b.n	bc70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe48>
    bc70:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    bc72:	07c1      	lsls	r1, r0, #31
    bc74:	2900      	cmp	r1, #0
    bc76:	d1ce      	bne.n	bc16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdee>
    bc78:	e7d1      	b.n	bc1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdf6>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    bc7a:	f24d 40d4 	movw	r0, #54484	; 0xd4d4
    bc7e:	f2c0 0001 	movt	r0, #1
    bc82:	6801      	ldr	r1, [r0, #0]
    bc84:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bc88:	f100 0212 	add.w	r2, r0, #18
    bc8c:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    bc90:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    bc94:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    bc98:	f247 539b 	movw	r3, #30107	; 0x759b
    bc9c:	f2c0 0301 	movt	r3, #1
    bca0:	4610      	mov	r0, r2
    bca2:	91d2      	str	r1, [sp, #840]	; 0x348
    bca4:	4619      	mov	r1, r3
    bca6:	f7fe fc78 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bcaa:	90d1      	str	r0, [sp, #836]	; 0x344
    bcac:	91d0      	str	r1, [sp, #832]	; 0x340
    bcae:	e7ff      	b.n	bcb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe88>
    bcb0:	98d1      	ldr	r0, [sp, #836]	; 0x344
    bcb2:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    bcb6:	99d0      	ldr	r1, [sp, #832]	; 0x340
    bcb8:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    bcbc:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    bcc0:	f2c0 0201 	movt	r2, #1
    bcc4:	6812      	ldr	r2, [r2, #0]
    bcc6:	466b      	mov	r3, sp
    bcc8:	f04f 0c01 	mov.w	ip, #1
    bccc:	f8c3 c008 	str.w	ip, [r3, #8]
    bcd0:	605a      	str	r2, [r3, #4]
    bcd2:	f8c3 c000 	str.w	ip, [r3]
    bcd6:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    bcda:	2202      	movs	r2, #2
    bcdc:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    bce0:	99d2      	ldr	r1, [sp, #840]	; 0x348
    bce2:	f005 fe34 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    bce6:	e7ff      	b.n	bce8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xec0>
    bce8:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    bcec:	f24d 40f4 	movw	r0, #54516	; 0xd4f4
    bcf0:	f2c0 0001 	movt	r0, #1
    bcf4:	6802      	ldr	r2, [r0, #0]
    bcf6:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    bcfa:	f006 fddd 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bcfe:	e7ff      	b.n	bd00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xed8>
    bd00:	e7ff      	b.n	bd02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xeda>
                self.v[x] = kk;
    bd02:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bd06:	280f      	cmp	r0, #15
    bd08:	f202 85fc 	bhi.w	e904 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3adc>
    bd0c:	e7ff      	b.n	bd0e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xee6>
    bd0e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bd12:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bd16:	1842      	adds	r2, r0, r1
    bd18:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    bd1c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    bd20:	f002 bb4f 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    bd24:	2005      	movs	r0, #5
    bd26:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    bd2a:	f64c 1080 	movw	r0, #51584	; 0xc980
    bd2e:	f2c0 0001 	movt	r0, #1
    bd32:	6801      	ldr	r1, [r0, #0]
    bd34:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    bd38:	f005 fdcd 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bd3c:	90cf      	str	r0, [sp, #828]	; 0x33c
    bd3e:	e01f      	b.n	bd80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf58>
    bd40:	2001      	movs	r0, #1
    bd42:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    bd46:	e015      	b.n	bd74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf4c>
    bd48:	2000      	movs	r0, #0
    bd4a:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    bd4e:	e011      	b.n	bd74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf4c>
    bd50:	2000      	movs	r0, #0
    bd52:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    bd56:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    bd5a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bd5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bd62:	f005 fe2d 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bd66:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    bd6a:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    bd6e:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    bd72:	e00a      	b.n	bd8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf62>
    bd74:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    bd78:	07c0      	lsls	r0, r0, #31
    bd7a:	2800      	cmp	r0, #0
    bd7c:	d112      	bne.n	bda4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf7c>
    bd7e:	e055      	b.n	be2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1004>
    bd80:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    bd82:	07c1      	lsls	r1, r0, #31
    bd84:	2900      	cmp	r1, #0
    bd86:	d1e3      	bne.n	bd50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf28>
    bd88:	e7de      	b.n	bd48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf20>
    bd8a:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    bd8e:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    bd92:	f005 fda0 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bd96:	90ce      	str	r0, [sp, #824]	; 0x338
    bd98:	e7ff      	b.n	bd9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf72>
    bd9a:	98ce      	ldr	r0, [sp, #824]	; 0x338
    bd9c:	07c1      	lsls	r1, r0, #31
    bd9e:	2900      	cmp	r1, #0
    bda0:	d1ce      	bne.n	bd40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf18>
    bda2:	e7d1      	b.n	bd48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf20>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    bda4:	f24d 4074 	movw	r0, #54388	; 0xd474
    bda8:	f2c0 0001 	movt	r0, #1
    bdac:	6801      	ldr	r1, [r0, #0]
    bdae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bdb2:	f100 0212 	add.w	r2, r0, #18
    bdb6:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    bdba:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    bdbe:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    bdc2:	f247 539b 	movw	r3, #30107	; 0x759b
    bdc6:	f2c0 0301 	movt	r3, #1
    bdca:	4610      	mov	r0, r2
    bdcc:	91cd      	str	r1, [sp, #820]	; 0x334
    bdce:	4619      	mov	r1, r3
    bdd0:	f7fe fbe3 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bdd4:	90cc      	str	r0, [sp, #816]	; 0x330
    bdd6:	91cb      	str	r1, [sp, #812]	; 0x32c
    bdd8:	e7ff      	b.n	bdda <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xfb2>
    bdda:	98cc      	ldr	r0, [sp, #816]	; 0x330
    bddc:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    bde0:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    bde2:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    bde6:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    bdea:	f2c0 0201 	movt	r2, #1
    bdee:	6812      	ldr	r2, [r2, #0]
    bdf0:	466b      	mov	r3, sp
    bdf2:	f04f 0c01 	mov.w	ip, #1
    bdf6:	f8c3 c008 	str.w	ip, [r3, #8]
    bdfa:	605a      	str	r2, [r3, #4]
    bdfc:	f8c3 c000 	str.w	ip, [r3]
    be00:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    be04:	2202      	movs	r2, #2
    be06:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    be0a:	99cd      	ldr	r1, [sp, #820]	; 0x334
    be0c:	f005 fd9f 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    be10:	e7ff      	b.n	be12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xfea>
    be12:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    be16:	f24d 4094 	movw	r0, #54420	; 0xd494
    be1a:	f2c0 0001 	movt	r0, #1
    be1e:	6802      	ldr	r2, [r0, #0]
    be20:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    be24:	f006 fd48 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    be28:	e7ff      	b.n	be2a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1002>
    be2a:	e7ff      	b.n	be2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1004>
                self.v[x] = self.v[x].wrapping_add(kk);
    be2c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    be30:	280f      	cmp	r0, #15
    be32:	f202 8553 	bhi.w	e8dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ab4>
    be36:	e7ff      	b.n	be38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1010>
    be38:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    be3c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    be40:	1842      	adds	r2, r0, r1
    be42:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    be46:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    be4a:	f003 f877 	bl	ef3c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE>
    be4e:	90ca      	str	r0, [sp, #808]	; 0x328
    be50:	e7ff      	b.n	be52 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x102a>
    be52:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    be56:	280f      	cmp	r0, #15
    be58:	f202 854a 	bhi.w	e8f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ac8>
    be5c:	e7ff      	b.n	be5e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1036>
    be5e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    be62:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    be66:	1842      	adds	r2, r0, r1
    be68:	9bca      	ldr	r3, [sp, #808]	; 0x328
    be6a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    be6e:	f002 baa8 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    be72:	2005      	movs	r0, #5
    be74:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    be78:	f64c 1080 	movw	r0, #51584	; 0xc980
    be7c:	f2c0 0001 	movt	r0, #1
    be80:	6801      	ldr	r1, [r0, #0]
    be82:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    be86:	f005 fd26 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    be8a:	90c9      	str	r0, [sp, #804]	; 0x324
    be8c:	e01f      	b.n	bece <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10a6>
    be8e:	2001      	movs	r0, #1
    be90:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    be94:	e015      	b.n	bec2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x109a>
    be96:	2000      	movs	r0, #0
    be98:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    be9c:	e011      	b.n	bec2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x109a>
    be9e:	2000      	movs	r0, #0
    bea0:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    bea4:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    bea8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    beac:	f2c2 0000 	movt	r0, #8192	; 0x2000
    beb0:	f005 fd86 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    beb4:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    beb8:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    bebc:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    bec0:	e00a      	b.n	bed8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10b0>
    bec2:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    bec6:	07c0      	lsls	r0, r0, #31
    bec8:	2800      	cmp	r0, #0
    beca:	d112      	bne.n	bef2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10ca>
    becc:	e055      	b.n	bf7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1152>
    bece:	98c9      	ldr	r0, [sp, #804]	; 0x324
    bed0:	07c1      	lsls	r1, r0, #31
    bed2:	2900      	cmp	r1, #0
    bed4:	d1e3      	bne.n	be9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1076>
    bed6:	e7de      	b.n	be96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x106e>
    bed8:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    bedc:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    bee0:	f005 fcf9 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bee4:	90c8      	str	r0, [sp, #800]	; 0x320
    bee6:	e7ff      	b.n	bee8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10c0>
    bee8:	98c8      	ldr	r0, [sp, #800]	; 0x320
    beea:	07c1      	lsls	r1, r0, #31
    beec:	2900      	cmp	r1, #0
    beee:	d1ce      	bne.n	be8e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1066>
    bef0:	e7d1      	b.n	be96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x106e>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    bef2:	f24d 4014 	movw	r0, #54292	; 0xd414
    bef6:	f2c0 0001 	movt	r0, #1
    befa:	6801      	ldr	r1, [r0, #0]
    befc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf00:	f100 0212 	add.w	r2, r0, #18
    bf04:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    bf08:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    bf0c:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    bf10:	f247 539b 	movw	r3, #30107	; 0x759b
    bf14:	f2c0 0301 	movt	r3, #1
    bf18:	4610      	mov	r0, r2
    bf1a:	91c7      	str	r1, [sp, #796]	; 0x31c
    bf1c:	4619      	mov	r1, r3
    bf1e:	f7fe fb3c 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bf22:	90c6      	str	r0, [sp, #792]	; 0x318
    bf24:	91c5      	str	r1, [sp, #788]	; 0x314
    bf26:	e7ff      	b.n	bf28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1100>
    bf28:	98c6      	ldr	r0, [sp, #792]	; 0x318
    bf2a:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    bf2e:	99c5      	ldr	r1, [sp, #788]	; 0x314
    bf30:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    bf34:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    bf38:	f2c0 0201 	movt	r2, #1
    bf3c:	6812      	ldr	r2, [r2, #0]
    bf3e:	466b      	mov	r3, sp
    bf40:	f04f 0c01 	mov.w	ip, #1
    bf44:	f8c3 c008 	str.w	ip, [r3, #8]
    bf48:	605a      	str	r2, [r3, #4]
    bf4a:	f8c3 c000 	str.w	ip, [r3]
    bf4e:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    bf52:	2202      	movs	r2, #2
    bf54:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    bf58:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    bf5a:	f005 fcf8 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    bf5e:	e7ff      	b.n	bf60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1138>
    bf60:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    bf64:	f24d 4034 	movw	r0, #54324	; 0xd434
    bf68:	f2c0 0001 	movt	r0, #1
    bf6c:	6802      	ldr	r2, [r0, #0]
    bf6e:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    bf72:	f006 fca1 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bf76:	e7ff      	b.n	bf78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1150>
    bf78:	e7ff      	b.n	bf7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1152>
                self.v[x] = self.v[y];
    bf7a:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    bf7e:	280f      	cmp	r0, #15
    bf80:	f202 8498 	bhi.w	e8b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a8c>
    bf84:	e7ff      	b.n	bf86 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x115e>
    bf86:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf8a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    bf8e:	1842      	adds	r2, r0, r1
    bf90:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bf94:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    bf98:	2b0f      	cmp	r3, #15
    bf9a:	92c4      	str	r2, [sp, #784]	; 0x310
    bf9c:	f202 8494 	bhi.w	e8c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3aa0>
    bfa0:	e7ff      	b.n	bfa2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x117a>
    bfa2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bfa6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bfaa:	1842      	adds	r2, r0, r1
    bfac:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    bfae:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    bfb2:	f002 ba06 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    bfb6:	2005      	movs	r0, #5
    bfb8:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    bfbc:	f64c 1080 	movw	r0, #51584	; 0xc980
    bfc0:	f2c0 0001 	movt	r0, #1
    bfc4:	6801      	ldr	r1, [r0, #0]
    bfc6:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    bfca:	f005 fc84 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bfce:	90c3      	str	r0, [sp, #780]	; 0x30c
    bfd0:	e01f      	b.n	c012 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11ea>
    bfd2:	2001      	movs	r0, #1
    bfd4:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    bfd8:	e015      	b.n	c006 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11de>
    bfda:	2000      	movs	r0, #0
    bfdc:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    bfe0:	e011      	b.n	c006 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11de>
    bfe2:	2000      	movs	r0, #0
    bfe4:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    bfe8:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    bfec:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bff0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bff4:	f005 fce4 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bff8:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    bffc:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    c000:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    c004:	e00a      	b.n	c01c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11f4>
    c006:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    c00a:	07c0      	lsls	r0, r0, #31
    c00c:	2800      	cmp	r0, #0
    c00e:	d112      	bne.n	c036 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x120e>
    c010:	e055      	b.n	c0be <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1296>
    c012:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    c014:	07c1      	lsls	r1, r0, #31
    c016:	2900      	cmp	r1, #0
    c018:	d1e3      	bne.n	bfe2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11ba>
    c01a:	e7de      	b.n	bfda <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11b2>
    c01c:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    c020:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    c024:	f005 fc57 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c028:	90c2      	str	r0, [sp, #776]	; 0x308
    c02a:	e7ff      	b.n	c02c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1204>
    c02c:	98c2      	ldr	r0, [sp, #776]	; 0x308
    c02e:	07c1      	lsls	r1, r0, #31
    c030:	2900      	cmp	r1, #0
    c032:	d1ce      	bne.n	bfd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11aa>
    c034:	e7d1      	b.n	bfda <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11b2>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    c036:	f24d 30b4 	movw	r0, #54196	; 0xd3b4
    c03a:	f2c0 0001 	movt	r0, #1
    c03e:	6801      	ldr	r1, [r0, #0]
    c040:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c044:	f100 0212 	add.w	r2, r0, #18
    c048:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    c04c:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    c050:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    c054:	f247 539b 	movw	r3, #30107	; 0x759b
    c058:	f2c0 0301 	movt	r3, #1
    c05c:	4610      	mov	r0, r2
    c05e:	91c1      	str	r1, [sp, #772]	; 0x304
    c060:	4619      	mov	r1, r3
    c062:	f7fe fa9a 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c066:	90c0      	str	r0, [sp, #768]	; 0x300
    c068:	91bf      	str	r1, [sp, #764]	; 0x2fc
    c06a:	e7ff      	b.n	c06c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1244>
    c06c:	98c0      	ldr	r0, [sp, #768]	; 0x300
    c06e:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    c072:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    c074:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    c078:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    c07c:	f2c0 0201 	movt	r2, #1
    c080:	6812      	ldr	r2, [r2, #0]
    c082:	466b      	mov	r3, sp
    c084:	f04f 0c01 	mov.w	ip, #1
    c088:	f8c3 c008 	str.w	ip, [r3, #8]
    c08c:	605a      	str	r2, [r3, #4]
    c08e:	f8c3 c000 	str.w	ip, [r3]
    c092:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    c096:	2202      	movs	r2, #2
    c098:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    c09c:	99c1      	ldr	r1, [sp, #772]	; 0x304
    c09e:	f005 fc56 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c0a2:	e7ff      	b.n	c0a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x127c>
    c0a4:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    c0a8:	f24d 30d4 	movw	r0, #54228	; 0xd3d4
    c0ac:	f2c0 0001 	movt	r0, #1
    c0b0:	6802      	ldr	r2, [r0, #0]
    c0b2:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    c0b6:	f006 fbff 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c0ba:	e7ff      	b.n	c0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1294>
    c0bc:	e7ff      	b.n	c0be <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1296>
                self.v[x] |= self.v[y];
    c0be:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c0c2:	280f      	cmp	r0, #15
    c0c4:	f202 83e2 	bhi.w	e88c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a64>
    c0c8:	e7ff      	b.n	c0ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12a2>
    c0ca:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c0ce:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c0d2:	1842      	adds	r2, r0, r1
    c0d4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c0d8:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c0dc:	2b0f      	cmp	r3, #15
    c0de:	92be      	str	r2, [sp, #760]	; 0x2f8
    c0e0:	f202 83de 	bhi.w	e8a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a78>
    c0e4:	e7ff      	b.n	c0e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12be>
    c0e6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c0ea:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c0ee:	1842      	adds	r2, r0, r1
    c0f0:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    c0f4:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    c0f8:	ea43 030c 	orr.w	r3, r3, ip
    c0fc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c100:	f002 b95f 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c104:	2005      	movs	r0, #5
    c106:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    c10a:	f64c 1080 	movw	r0, #51584	; 0xc980
    c10e:	f2c0 0001 	movt	r0, #1
    c112:	6801      	ldr	r1, [r0, #0]
    c114:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    c118:	f005 fbdd 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c11c:	90bd      	str	r0, [sp, #756]	; 0x2f4
    c11e:	e01f      	b.n	c160 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1338>
    c120:	2001      	movs	r0, #1
    c122:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    c126:	e015      	b.n	c154 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x132c>
    c128:	2000      	movs	r0, #0
    c12a:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    c12e:	e011      	b.n	c154 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x132c>
    c130:	2000      	movs	r0, #0
    c132:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    c136:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    c13a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c13e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c142:	f005 fc3d 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c146:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    c14a:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    c14e:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    c152:	e00a      	b.n	c16a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1342>
    c154:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    c158:	07c0      	lsls	r0, r0, #31
    c15a:	2800      	cmp	r0, #0
    c15c:	d112      	bne.n	c184 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x135c>
    c15e:	e055      	b.n	c20c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13e4>
    c160:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    c162:	07c1      	lsls	r1, r0, #31
    c164:	2900      	cmp	r1, #0
    c166:	d1e3      	bne.n	c130 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1308>
    c168:	e7de      	b.n	c128 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1300>
    c16a:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    c16e:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    c172:	f005 fbb0 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c176:	90bc      	str	r0, [sp, #752]	; 0x2f0
    c178:	e7ff      	b.n	c17a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1352>
    c17a:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    c17c:	07c1      	lsls	r1, r0, #31
    c17e:	2900      	cmp	r1, #0
    c180:	d1ce      	bne.n	c120 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12f8>
    c182:	e7d1      	b.n	c128 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1300>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    c184:	f24d 3054 	movw	r0, #54100	; 0xd354
    c188:	f2c0 0001 	movt	r0, #1
    c18c:	6801      	ldr	r1, [r0, #0]
    c18e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c192:	f100 0212 	add.w	r2, r0, #18
    c196:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    c19a:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    c19e:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    c1a2:	f247 539b 	movw	r3, #30107	; 0x759b
    c1a6:	f2c0 0301 	movt	r3, #1
    c1aa:	4610      	mov	r0, r2
    c1ac:	91bb      	str	r1, [sp, #748]	; 0x2ec
    c1ae:	4619      	mov	r1, r3
    c1b0:	f7fe f9f3 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c1b4:	90ba      	str	r0, [sp, #744]	; 0x2e8
    c1b6:	91b9      	str	r1, [sp, #740]	; 0x2e4
    c1b8:	e7ff      	b.n	c1ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1392>
    c1ba:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    c1bc:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    c1c0:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    c1c2:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    c1c6:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    c1ca:	f2c0 0201 	movt	r2, #1
    c1ce:	6812      	ldr	r2, [r2, #0]
    c1d0:	466b      	mov	r3, sp
    c1d2:	f04f 0c01 	mov.w	ip, #1
    c1d6:	f8c3 c008 	str.w	ip, [r3, #8]
    c1da:	605a      	str	r2, [r3, #4]
    c1dc:	f8c3 c000 	str.w	ip, [r3]
    c1e0:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    c1e4:	2202      	movs	r2, #2
    c1e6:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    c1ea:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    c1ec:	f005 fbaf 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c1f0:	e7ff      	b.n	c1f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13ca>
    c1f2:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    c1f6:	f24d 3074 	movw	r0, #54132	; 0xd374
    c1fa:	f2c0 0001 	movt	r0, #1
    c1fe:	6802      	ldr	r2, [r0, #0]
    c200:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    c204:	f006 fb58 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c208:	e7ff      	b.n	c20a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13e2>
    c20a:	e7ff      	b.n	c20c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13e4>
                self.v[x] &= self.v[y];
    c20c:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c210:	280f      	cmp	r0, #15
    c212:	f202 8327 	bhi.w	e864 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a3c>
    c216:	e7ff      	b.n	c218 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13f0>
    c218:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c21c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c220:	1842      	adds	r2, r0, r1
    c222:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c226:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c22a:	2b0f      	cmp	r3, #15
    c22c:	92b8      	str	r2, [sp, #736]	; 0x2e0
    c22e:	f202 8323 	bhi.w	e878 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a50>
    c232:	e7ff      	b.n	c234 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x140c>
    c234:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c238:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c23c:	1842      	adds	r2, r0, r1
    c23e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    c242:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    c246:	ea03 030c 	and.w	r3, r3, ip
    c24a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c24e:	f002 b8b8 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c252:	2005      	movs	r0, #5
    c254:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    c258:	f64c 1080 	movw	r0, #51584	; 0xc980
    c25c:	f2c0 0001 	movt	r0, #1
    c260:	6801      	ldr	r1, [r0, #0]
    c262:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    c266:	f005 fb36 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c26a:	90b7      	str	r0, [sp, #732]	; 0x2dc
    c26c:	e01f      	b.n	c2ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1486>
    c26e:	2001      	movs	r0, #1
    c270:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    c274:	e015      	b.n	c2a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x147a>
    c276:	2000      	movs	r0, #0
    c278:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    c27c:	e011      	b.n	c2a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x147a>
    c27e:	2000      	movs	r0, #0
    c280:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    c284:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    c288:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c28c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c290:	f005 fb96 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c294:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    c298:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    c29c:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    c2a0:	e00a      	b.n	c2b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1490>
    c2a2:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    c2a6:	07c0      	lsls	r0, r0, #31
    c2a8:	2800      	cmp	r0, #0
    c2aa:	d112      	bne.n	c2d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x14aa>
    c2ac:	e055      	b.n	c35a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1532>
    c2ae:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    c2b0:	07c1      	lsls	r1, r0, #31
    c2b2:	2900      	cmp	r1, #0
    c2b4:	d1e3      	bne.n	c27e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1456>
    c2b6:	e7de      	b.n	c276 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x144e>
    c2b8:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    c2bc:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    c2c0:	f005 fb09 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c2c4:	90b6      	str	r0, [sp, #728]	; 0x2d8
    c2c6:	e7ff      	b.n	c2c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x14a0>
    c2c8:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    c2ca:	07c1      	lsls	r1, r0, #31
    c2cc:	2900      	cmp	r1, #0
    c2ce:	d1ce      	bne.n	c26e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1446>
    c2d0:	e7d1      	b.n	c276 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x144e>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    c2d2:	f24d 20f4 	movw	r0, #54004	; 0xd2f4
    c2d6:	f2c0 0001 	movt	r0, #1
    c2da:	6801      	ldr	r1, [r0, #0]
    c2dc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c2e0:	f100 0212 	add.w	r2, r0, #18
    c2e4:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    c2e8:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    c2ec:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    c2f0:	f247 539b 	movw	r3, #30107	; 0x759b
    c2f4:	f2c0 0301 	movt	r3, #1
    c2f8:	4610      	mov	r0, r2
    c2fa:	91b5      	str	r1, [sp, #724]	; 0x2d4
    c2fc:	4619      	mov	r1, r3
    c2fe:	f7fe f94c 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c302:	90b4      	str	r0, [sp, #720]	; 0x2d0
    c304:	91b3      	str	r1, [sp, #716]	; 0x2cc
    c306:	e7ff      	b.n	c308 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x14e0>
    c308:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    c30a:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    c30e:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    c310:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    c314:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    c318:	f2c0 0201 	movt	r2, #1
    c31c:	6812      	ldr	r2, [r2, #0]
    c31e:	466b      	mov	r3, sp
    c320:	f04f 0c01 	mov.w	ip, #1
    c324:	f8c3 c008 	str.w	ip, [r3, #8]
    c328:	605a      	str	r2, [r3, #4]
    c32a:	f8c3 c000 	str.w	ip, [r3]
    c32e:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    c332:	2202      	movs	r2, #2
    c334:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    c338:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    c33a:	f005 fb08 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c33e:	e7ff      	b.n	c340 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1518>
    c340:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    c344:	f24d 3014 	movw	r0, #54036	; 0xd314
    c348:	f2c0 0001 	movt	r0, #1
    c34c:	6802      	ldr	r2, [r0, #0]
    c34e:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    c352:	f006 fab1 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c356:	e7ff      	b.n	c358 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1530>
    c358:	e7ff      	b.n	c35a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1532>
                self.v[x] ^= self.v[y];
    c35a:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c35e:	280f      	cmp	r0, #15
    c360:	f202 826c 	bhi.w	e83c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a14>
    c364:	e7ff      	b.n	c366 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x153e>
    c366:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c36a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c36e:	1842      	adds	r2, r0, r1
    c370:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c374:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c378:	2b0f      	cmp	r3, #15
    c37a:	92b2      	str	r2, [sp, #712]	; 0x2c8
    c37c:	f202 8268 	bhi.w	e850 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a28>
    c380:	e7ff      	b.n	c382 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x155a>
    c382:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c386:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c38a:	1842      	adds	r2, r0, r1
    c38c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    c390:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    c394:	ea83 030c 	eor.w	r3, r3, ip
    c398:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c39c:	f002 b811 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c3a0:	2005      	movs	r0, #5
    c3a2:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    c3a6:	f64c 1080 	movw	r0, #51584	; 0xc980
    c3aa:	f2c0 0001 	movt	r0, #1
    c3ae:	6801      	ldr	r1, [r0, #0]
    c3b0:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    c3b4:	f005 fa8f 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c3b8:	90b1      	str	r0, [sp, #708]	; 0x2c4
    c3ba:	e01f      	b.n	c3fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15d4>
    c3bc:	2001      	movs	r0, #1
    c3be:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    c3c2:	e015      	b.n	c3f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15c8>
    c3c4:	2000      	movs	r0, #0
    c3c6:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    c3ca:	e011      	b.n	c3f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15c8>
    c3cc:	2000      	movs	r0, #0
    c3ce:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    c3d2:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    c3d6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c3da:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c3de:	f005 faef 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c3e2:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    c3e6:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    c3ea:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    c3ee:	e00a      	b.n	c406 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15de>
    c3f0:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    c3f4:	07c0      	lsls	r0, r0, #31
    c3f6:	2800      	cmp	r0, #0
    c3f8:	d112      	bne.n	c420 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15f8>
    c3fa:	e055      	b.n	c4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1680>
    c3fc:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    c3fe:	07c1      	lsls	r1, r0, #31
    c400:	2900      	cmp	r1, #0
    c402:	d1e3      	bne.n	c3cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15a4>
    c404:	e7de      	b.n	c3c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x159c>
    c406:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    c40a:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    c40e:	f005 fa62 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c412:	90b0      	str	r0, [sp, #704]	; 0x2c0
    c414:	e7ff      	b.n	c416 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15ee>
    c416:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    c418:	07c1      	lsls	r1, r0, #31
    c41a:	2900      	cmp	r1, #0
    c41c:	d1ce      	bne.n	c3bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1594>
    c41e:	e7d1      	b.n	c3c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x159c>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    c420:	f24d 2084 	movw	r0, #53892	; 0xd284
    c424:	f2c0 0001 	movt	r0, #1
    c428:	6801      	ldr	r1, [r0, #0]
    c42a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c42e:	f100 0212 	add.w	r2, r0, #18
    c432:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    c436:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    c43a:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    c43e:	f247 539b 	movw	r3, #30107	; 0x759b
    c442:	f2c0 0301 	movt	r3, #1
    c446:	4610      	mov	r0, r2
    c448:	91af      	str	r1, [sp, #700]	; 0x2bc
    c44a:	4619      	mov	r1, r3
    c44c:	f7fe f8a5 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c450:	90ae      	str	r0, [sp, #696]	; 0x2b8
    c452:	91ad      	str	r1, [sp, #692]	; 0x2b4
    c454:	e7ff      	b.n	c456 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x162e>
    c456:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    c458:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    c45c:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    c45e:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    c462:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    c466:	f2c0 0201 	movt	r2, #1
    c46a:	6812      	ldr	r2, [r2, #0]
    c46c:	466b      	mov	r3, sp
    c46e:	f04f 0c01 	mov.w	ip, #1
    c472:	f8c3 c008 	str.w	ip, [r3, #8]
    c476:	605a      	str	r2, [r3, #4]
    c478:	f8c3 c000 	str.w	ip, [r3]
    c47c:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    c480:	2202      	movs	r2, #2
    c482:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    c486:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    c488:	f005 fa61 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c48c:	e7ff      	b.n	c48e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1666>
    c48e:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    c492:	f24d 20a4 	movw	r0, #53924	; 0xd2a4
    c496:	f2c0 0001 	movt	r0, #1
    c49a:	6802      	ldr	r2, [r0, #0]
    c49c:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    c4a0:	f006 fa0a 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c4a4:	e7ff      	b.n	c4a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x167e>
    c4a6:	e7ff      	b.n	c4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1680>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    c4a8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c4ac:	280f      	cmp	r0, #15
    c4ae:	f202 81a7 	bhi.w	e800 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39d8>
    c4b2:	e7ff      	b.n	c4b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x168c>
    c4b4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c4b8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c4bc:	1842      	adds	r2, r0, r1
    c4be:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c4c2:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    c4c6:	2b0f      	cmp	r3, #15
    c4c8:	92ac      	str	r2, [sp, #688]	; 0x2b0
    c4ca:	f202 81a3 	bhi.w	e814 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39ec>
    c4ce:	e7ff      	b.n	c4d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x16a8>
    c4d0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c4d4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c4d8:	1842      	adds	r2, r0, r1
    c4da:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c4de:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    c4e0:	f002 fd72 	bl	efc8 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E>
    c4e4:	90ab      	str	r0, [sp, #684]	; 0x2ac
    c4e6:	91aa      	str	r1, [sp, #680]	; 0x2a8
    c4e8:	e7ff      	b.n	c4ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x16c2>
    c4ea:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    c4ec:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    c4f0:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    c4f2:	f001 0201 	and.w	r2, r1, #1
    c4f6:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    c4fa:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c4fe:	2a0f      	cmp	r2, #15
    c500:	f202 8192 	bhi.w	e828 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a00>
    c504:	e7ff      	b.n	c506 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x16de>
    c506:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c50a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c50e:	1842      	adds	r2, r0, r1
    c510:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    c512:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    c516:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    c518:	f002 0c01 	and.w	ip, r2, #1
    c51c:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    c520:	f001 bf4f 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c524:	2005      	movs	r0, #5
    c526:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    c52a:	f64c 1080 	movw	r0, #51584	; 0xc980
    c52e:	f2c0 0001 	movt	r0, #1
    c532:	6801      	ldr	r1, [r0, #0]
    c534:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    c538:	f005 f9cd 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c53c:	90a9      	str	r0, [sp, #676]	; 0x2a4
    c53e:	e01f      	b.n	c580 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1758>
    c540:	2001      	movs	r0, #1
    c542:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    c546:	e015      	b.n	c574 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x174c>
    c548:	2000      	movs	r0, #0
    c54a:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    c54e:	e011      	b.n	c574 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x174c>
    c550:	2000      	movs	r0, #0
    c552:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    c556:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    c55a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c55e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c562:	f005 fa2d 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c566:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    c56a:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    c56e:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    c572:	e00a      	b.n	c58a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1762>
    c574:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    c578:	07c0      	lsls	r0, r0, #31
    c57a:	2800      	cmp	r0, #0
    c57c:	d112      	bne.n	c5a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x177c>
    c57e:	e055      	b.n	c62c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1804>
    c580:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    c582:	07c1      	lsls	r1, r0, #31
    c584:	2900      	cmp	r1, #0
    c586:	d1e3      	bne.n	c550 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1728>
    c588:	e7de      	b.n	c548 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1720>
    c58a:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    c58e:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    c592:	f005 f9a0 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c596:	90a8      	str	r0, [sp, #672]	; 0x2a0
    c598:	e7ff      	b.n	c59a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1772>
    c59a:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    c59c:	07c1      	lsls	r1, r0, #31
    c59e:	2900      	cmp	r1, #0
    c5a0:	d1ce      	bne.n	c540 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1718>
    c5a2:	e7d1      	b.n	c548 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1720>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    c5a4:	f24d 2014 	movw	r0, #53780	; 0xd214
    c5a8:	f2c0 0001 	movt	r0, #1
    c5ac:	6801      	ldr	r1, [r0, #0]
    c5ae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c5b2:	f100 0212 	add.w	r2, r0, #18
    c5b6:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    c5ba:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    c5be:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    c5c2:	f247 539b 	movw	r3, #30107	; 0x759b
    c5c6:	f2c0 0301 	movt	r3, #1
    c5ca:	4610      	mov	r0, r2
    c5cc:	91a7      	str	r1, [sp, #668]	; 0x29c
    c5ce:	4619      	mov	r1, r3
    c5d0:	f7fd ffe3 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c5d4:	90a6      	str	r0, [sp, #664]	; 0x298
    c5d6:	91a5      	str	r1, [sp, #660]	; 0x294
    c5d8:	e7ff      	b.n	c5da <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x17b2>
    c5da:	98a6      	ldr	r0, [sp, #664]	; 0x298
    c5dc:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    c5e0:	99a5      	ldr	r1, [sp, #660]	; 0x294
    c5e2:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    c5e6:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    c5ea:	f2c0 0201 	movt	r2, #1
    c5ee:	6812      	ldr	r2, [r2, #0]
    c5f0:	466b      	mov	r3, sp
    c5f2:	f04f 0c01 	mov.w	ip, #1
    c5f6:	f8c3 c008 	str.w	ip, [r3, #8]
    c5fa:	605a      	str	r2, [r3, #4]
    c5fc:	f8c3 c000 	str.w	ip, [r3]
    c600:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    c604:	2202      	movs	r2, #2
    c606:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    c60a:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    c60c:	f005 f99f 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c610:	e7ff      	b.n	c612 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x17ea>
    c612:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    c616:	f24d 2034 	movw	r0, #53812	; 0xd234
    c61a:	f2c0 0001 	movt	r0, #1
    c61e:	6802      	ldr	r2, [r0, #0]
    c620:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    c624:	f006 f948 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c628:	e7ff      	b.n	c62a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1802>
    c62a:	e7ff      	b.n	c62c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1804>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    c62c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c630:	280f      	cmp	r0, #15
    c632:	f202 80c7 	bhi.w	e7c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x399c>
    c636:	e7ff      	b.n	c638 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1810>
    c638:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c63c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c640:	1842      	adds	r2, r0, r1
    c642:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c646:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    c64a:	2b0f      	cmp	r3, #15
    c64c:	92a4      	str	r2, [sp, #656]	; 0x290
    c64e:	f202 80c3 	bhi.w	e7d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39b0>
    c652:	e7ff      	b.n	c654 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x182c>
    c654:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c658:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c65c:	1842      	adds	r2, r0, r1
    c65e:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c662:	98a4      	ldr	r0, [sp, #656]	; 0x290
    c664:	f002 fcdb 	bl	f01e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE>
    c668:	90a3      	str	r0, [sp, #652]	; 0x28c
    c66a:	91a2      	str	r1, [sp, #648]	; 0x288
    c66c:	e7ff      	b.n	c66e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1846>
    c66e:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    c670:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    c674:	99a2      	ldr	r1, [sp, #648]	; 0x288
    c676:	f001 0201 	and.w	r2, r1, #1
    c67a:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    c67e:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c682:	2a0f      	cmp	r2, #15
    c684:	f202 80b2 	bhi.w	e7ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39c4>
    c688:	e7ff      	b.n	c68a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1862>
    c68a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c68e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c692:	1842      	adds	r2, r0, r1
    c694:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    c696:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    c69a:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    c69c:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    c6a0:	ea22 020c 	bic.w	r2, r2, ip
    c6a4:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    c6a8:	f001 be8b 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c6ac:	2005      	movs	r0, #5
    c6ae:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    c6b2:	f64c 1080 	movw	r0, #51584	; 0xc980
    c6b6:	f2c0 0001 	movt	r0, #1
    c6ba:	6801      	ldr	r1, [r0, #0]
    c6bc:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    c6c0:	f005 f909 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c6c4:	90a1      	str	r0, [sp, #644]	; 0x284
    c6c6:	e01f      	b.n	c708 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18e0>
    c6c8:	2001      	movs	r0, #1
    c6ca:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    c6ce:	e015      	b.n	c6fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18d4>
    c6d0:	2000      	movs	r0, #0
    c6d2:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    c6d6:	e011      	b.n	c6fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18d4>
    c6d8:	2000      	movs	r0, #0
    c6da:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    c6de:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    c6e2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c6e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c6ea:	f005 f969 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c6ee:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    c6f2:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    c6f6:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    c6fa:	e00a      	b.n	c712 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18ea>
    c6fc:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    c700:	07c0      	lsls	r0, r0, #31
    c702:	2800      	cmp	r0, #0
    c704:	d112      	bne.n	c72c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1904>
    c706:	e055      	b.n	c7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x198c>
    c708:	98a1      	ldr	r0, [sp, #644]	; 0x284
    c70a:	07c1      	lsls	r1, r0, #31
    c70c:	2900      	cmp	r1, #0
    c70e:	d1e3      	bne.n	c6d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18b0>
    c710:	e7de      	b.n	c6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18a8>
    c712:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    c716:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    c71a:	f005 f8dc 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c71e:	90a0      	str	r0, [sp, #640]	; 0x280
    c720:	e7ff      	b.n	c722 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18fa>
    c722:	98a0      	ldr	r0, [sp, #640]	; 0x280
    c724:	07c1      	lsls	r1, r0, #31
    c726:	2900      	cmp	r1, #0
    c728:	d1ce      	bne.n	c6c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18a0>
    c72a:	e7d1      	b.n	c6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18a8>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    c72c:	f24d 10a4 	movw	r0, #53668	; 0xd1a4
    c730:	f2c0 0001 	movt	r0, #1
    c734:	6801      	ldr	r1, [r0, #0]
    c736:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c73a:	f100 0212 	add.w	r2, r0, #18
    c73e:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    c742:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    c746:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    c74a:	f247 539b 	movw	r3, #30107	; 0x759b
    c74e:	f2c0 0301 	movt	r3, #1
    c752:	4610      	mov	r0, r2
    c754:	919f      	str	r1, [sp, #636]	; 0x27c
    c756:	4619      	mov	r1, r3
    c758:	f7fd ff1f 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c75c:	909e      	str	r0, [sp, #632]	; 0x278
    c75e:	919d      	str	r1, [sp, #628]	; 0x274
    c760:	e7ff      	b.n	c762 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x193a>
    c762:	989e      	ldr	r0, [sp, #632]	; 0x278
    c764:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    c768:	999d      	ldr	r1, [sp, #628]	; 0x274
    c76a:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    c76e:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    c772:	f2c0 0201 	movt	r2, #1
    c776:	6812      	ldr	r2, [r2, #0]
    c778:	466b      	mov	r3, sp
    c77a:	f04f 0c01 	mov.w	ip, #1
    c77e:	f8c3 c008 	str.w	ip, [r3, #8]
    c782:	605a      	str	r2, [r3, #4]
    c784:	f8c3 c000 	str.w	ip, [r3]
    c788:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    c78c:	2202      	movs	r2, #2
    c78e:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    c792:	999f      	ldr	r1, [sp, #636]	; 0x27c
    c794:	f005 f8db 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c798:	e7ff      	b.n	c79a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1972>
    c79a:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    c79e:	f24d 10c4 	movw	r0, #53700	; 0xd1c4
    c7a2:	f2c0 0001 	movt	r0, #1
    c7a6:	6802      	ldr	r2, [r0, #0]
    c7a8:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    c7ac:	f006 f884 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c7b0:	e7ff      	b.n	c7b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x198a>
    c7b2:	e7ff      	b.n	c7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x198c>
                self.v[0xf] = self.v[x] & 1;
    c7b4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c7b8:	280f      	cmp	r0, #15
    c7ba:	f201 87e5 	bhi.w	e788 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3960>
    c7be:	e7ff      	b.n	c7c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1998>
    c7c0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c7c4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c7c8:	1842      	adds	r2, r0, r1
    c7ca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c7ce:	f002 0201 	and.w	r2, r2, #1
    c7d2:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    c7d6:	290f      	cmp	r1, #15
    c7d8:	f201 87e0 	bhi.w	e79c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3974>
    c7dc:	e7ff      	b.n	c7de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x19b6>
    c7de:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c7e2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c7e6:	1842      	adds	r2, r0, r1
    c7e8:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    c7ec:	2101      	movs	r1, #1
    c7ee:	f002 fbc7 	bl	ef80 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE>
    c7f2:	909c      	str	r0, [sp, #624]	; 0x270
    c7f4:	e7ff      	b.n	c7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x19ce>
    c7f6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c7fa:	280f      	cmp	r0, #15
    c7fc:	f201 87d8 	bhi.w	e7b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3988>
    c800:	e7ff      	b.n	c802 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x19da>
    c802:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c806:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c80a:	1842      	adds	r2, r0, r1
    c80c:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    c80e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c812:	f001 bdd6 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c816:	2005      	movs	r0, #5
    c818:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    c81c:	f64c 1080 	movw	r0, #51584	; 0xc980
    c820:	f2c0 0001 	movt	r0, #1
    c824:	6801      	ldr	r1, [r0, #0]
    c826:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    c82a:	f005 f854 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c82e:	909b      	str	r0, [sp, #620]	; 0x26c
    c830:	e01f      	b.n	c872 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a4a>
    c832:	2001      	movs	r0, #1
    c834:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    c838:	e015      	b.n	c866 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a3e>
    c83a:	2000      	movs	r0, #0
    c83c:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    c840:	e011      	b.n	c866 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a3e>
    c842:	2000      	movs	r0, #0
    c844:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    c848:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    c84c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c850:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c854:	f005 f8b4 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c858:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    c85c:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    c860:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    c864:	e00a      	b.n	c87c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a54>
    c866:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    c86a:	07c0      	lsls	r0, r0, #31
    c86c:	2800      	cmp	r0, #0
    c86e:	d112      	bne.n	c896 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a6e>
    c870:	e055      	b.n	c91e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1af6>
    c872:	989b      	ldr	r0, [sp, #620]	; 0x26c
    c874:	07c1      	lsls	r1, r0, #31
    c876:	2900      	cmp	r1, #0
    c878:	d1e3      	bne.n	c842 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a1a>
    c87a:	e7de      	b.n	c83a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a12>
    c87c:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    c880:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    c884:	f005 f827 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c888:	909a      	str	r0, [sp, #616]	; 0x268
    c88a:	e7ff      	b.n	c88c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a64>
    c88c:	989a      	ldr	r0, [sp, #616]	; 0x268
    c88e:	07c1      	lsls	r1, r0, #31
    c890:	2900      	cmp	r1, #0
    c892:	d1ce      	bne.n	c832 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a0a>
    c894:	e7d1      	b.n	c83a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a12>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    c896:	f24d 1034 	movw	r0, #53556	; 0xd134
    c89a:	f2c0 0001 	movt	r0, #1
    c89e:	6801      	ldr	r1, [r0, #0]
    c8a0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c8a4:	f100 0212 	add.w	r2, r0, #18
    c8a8:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    c8ac:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    c8b0:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    c8b4:	f247 539b 	movw	r3, #30107	; 0x759b
    c8b8:	f2c0 0301 	movt	r3, #1
    c8bc:	4610      	mov	r0, r2
    c8be:	9199      	str	r1, [sp, #612]	; 0x264
    c8c0:	4619      	mov	r1, r3
    c8c2:	f7fd fe6a 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c8c6:	9098      	str	r0, [sp, #608]	; 0x260
    c8c8:	9197      	str	r1, [sp, #604]	; 0x25c
    c8ca:	e7ff      	b.n	c8cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1aa4>
    c8cc:	9898      	ldr	r0, [sp, #608]	; 0x260
    c8ce:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    c8d2:	9997      	ldr	r1, [sp, #604]	; 0x25c
    c8d4:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    c8d8:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    c8dc:	f2c0 0201 	movt	r2, #1
    c8e0:	6812      	ldr	r2, [r2, #0]
    c8e2:	466b      	mov	r3, sp
    c8e4:	f04f 0c01 	mov.w	ip, #1
    c8e8:	f8c3 c008 	str.w	ip, [r3, #8]
    c8ec:	605a      	str	r2, [r3, #4]
    c8ee:	f8c3 c000 	str.w	ip, [r3]
    c8f2:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    c8f6:	2202      	movs	r2, #2
    c8f8:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    c8fc:	9999      	ldr	r1, [sp, #612]	; 0x264
    c8fe:	f005 f826 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c902:	e7ff      	b.n	c904 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1adc>
    c904:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    c908:	f24d 1054 	movw	r0, #53588	; 0xd154
    c90c:	f2c0 0001 	movt	r0, #1
    c910:	6802      	ldr	r2, [r0, #0]
    c912:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    c916:	f005 ffcf 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c91a:	e7ff      	b.n	c91c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1af4>
    c91c:	e7ff      	b.n	c91e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1af6>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    c91e:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c922:	280f      	cmp	r0, #15
    c924:	f201 8712 	bhi.w	e74c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3924>
    c928:	e7ff      	b.n	c92a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b02>
    c92a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c92e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c932:	1842      	adds	r2, r0, r1
    c934:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c938:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c93c:	2b0f      	cmp	r3, #15
    c93e:	9296      	str	r2, [sp, #600]	; 0x258
    c940:	f201 870e 	bhi.w	e760 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3938>
    c944:	e7ff      	b.n	c946 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b1e>
    c946:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c94a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c94e:	1842      	adds	r2, r0, r1
    c950:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c954:	9896      	ldr	r0, [sp, #600]	; 0x258
    c956:	f002 fb62 	bl	f01e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE>
    c95a:	9095      	str	r0, [sp, #596]	; 0x254
    c95c:	9194      	str	r1, [sp, #592]	; 0x250
    c95e:	e7ff      	b.n	c960 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b38>
    c960:	9895      	ldr	r0, [sp, #596]	; 0x254
    c962:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    c966:	9994      	ldr	r1, [sp, #592]	; 0x250
    c968:	f001 0201 	and.w	r2, r1, #1
    c96c:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    c970:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c974:	2a0f      	cmp	r2, #15
    c976:	f201 86fd 	bhi.w	e774 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x394c>
    c97a:	e7ff      	b.n	c97c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b54>
    c97c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c980:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c984:	1842      	adds	r2, r0, r1
    c986:	9b95      	ldr	r3, [sp, #596]	; 0x254
    c988:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    c98c:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    c98e:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    c992:	ea22 020c 	bic.w	r2, r2, ip
    c996:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    c99a:	f001 bd12 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c99e:	2005      	movs	r0, #5
    c9a0:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    c9a4:	f64c 1080 	movw	r0, #51584	; 0xc980
    c9a8:	f2c0 0001 	movt	r0, #1
    c9ac:	6801      	ldr	r1, [r0, #0]
    c9ae:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    c9b2:	f004 ff90 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c9b6:	9093      	str	r0, [sp, #588]	; 0x24c
    c9b8:	e01f      	b.n	c9fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bd2>
    c9ba:	2001      	movs	r0, #1
    c9bc:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    c9c0:	e015      	b.n	c9ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bc6>
    c9c2:	2000      	movs	r0, #0
    c9c4:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    c9c8:	e011      	b.n	c9ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bc6>
    c9ca:	2000      	movs	r0, #0
    c9cc:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    c9d0:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    c9d4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c9d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c9dc:	f004 fff0 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c9e0:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    c9e4:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    c9e8:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    c9ec:	e00a      	b.n	ca04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bdc>
    c9ee:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    c9f2:	07c0      	lsls	r0, r0, #31
    c9f4:	2800      	cmp	r0, #0
    c9f6:	d112      	bne.n	ca1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bf6>
    c9f8:	e055      	b.n	caa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c7e>
    c9fa:	9893      	ldr	r0, [sp, #588]	; 0x24c
    c9fc:	07c1      	lsls	r1, r0, #31
    c9fe:	2900      	cmp	r1, #0
    ca00:	d1e3      	bne.n	c9ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ba2>
    ca02:	e7de      	b.n	c9c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b9a>
    ca04:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    ca08:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    ca0c:	f004 ff63 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    ca10:	9092      	str	r0, [sp, #584]	; 0x248
    ca12:	e7ff      	b.n	ca14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bec>
    ca14:	9892      	ldr	r0, [sp, #584]	; 0x248
    ca16:	07c1      	lsls	r1, r0, #31
    ca18:	2900      	cmp	r1, #0
    ca1a:	d1ce      	bne.n	c9ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b92>
    ca1c:	e7d1      	b.n	c9c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b9a>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    ca1e:	f24d 00c0 	movw	r0, #53440	; 0xd0c0
    ca22:	f2c0 0001 	movt	r0, #1
    ca26:	6801      	ldr	r1, [r0, #0]
    ca28:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ca2c:	f100 0212 	add.w	r2, r0, #18
    ca30:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    ca34:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    ca38:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    ca3c:	f247 539b 	movw	r3, #30107	; 0x759b
    ca40:	f2c0 0301 	movt	r3, #1
    ca44:	4610      	mov	r0, r2
    ca46:	9191      	str	r1, [sp, #580]	; 0x244
    ca48:	4619      	mov	r1, r3
    ca4a:	f7fd fda6 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ca4e:	9090      	str	r0, [sp, #576]	; 0x240
    ca50:	918f      	str	r1, [sp, #572]	; 0x23c
    ca52:	e7ff      	b.n	ca54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c2c>
    ca54:	9890      	ldr	r0, [sp, #576]	; 0x240
    ca56:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    ca5a:	998f      	ldr	r1, [sp, #572]	; 0x23c
    ca5c:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    ca60:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    ca64:	f2c0 0201 	movt	r2, #1
    ca68:	6812      	ldr	r2, [r2, #0]
    ca6a:	466b      	mov	r3, sp
    ca6c:	f04f 0c01 	mov.w	ip, #1
    ca70:	f8c3 c008 	str.w	ip, [r3, #8]
    ca74:	605a      	str	r2, [r3, #4]
    ca76:	f8c3 c000 	str.w	ip, [r3]
    ca7a:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    ca7e:	2202      	movs	r2, #2
    ca80:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    ca84:	9991      	ldr	r1, [sp, #580]	; 0x244
    ca86:	f004 ff62 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    ca8a:	e7ff      	b.n	ca8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c64>
    ca8c:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    ca90:	f24d 00e0 	movw	r0, #53472	; 0xd0e0
    ca94:	f2c0 0001 	movt	r0, #1
    ca98:	6802      	ldr	r2, [r0, #0]
    ca9a:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    ca9e:	f005 ff0b 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    caa2:	e7ff      	b.n	caa4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c7c>
    caa4:	e7ff      	b.n	caa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c7e>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    caa6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    caaa:	280f      	cmp	r0, #15
    caac:	f201 8630 	bhi.w	e710 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38e8>
    cab0:	e7ff      	b.n	cab2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c8a>
    cab2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cab6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    caba:	1842      	adds	r2, r0, r1
    cabc:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cac0:	09d2      	lsrs	r2, r2, #7
    cac2:	928e      	str	r2, [sp, #568]	; 0x238
    cac4:	e7ff      	b.n	cac6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c9e>
    cac6:	988e      	ldr	r0, [sp, #568]	; 0x238
    cac8:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    cacc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    cad0:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    cad4:	2a0f      	cmp	r2, #15
    cad6:	f201 8625 	bhi.w	e724 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38fc>
    cada:	e7ff      	b.n	cadc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cb4>
    cadc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cae0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cae4:	1842      	adds	r2, r0, r1
    cae6:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    caea:	2101      	movs	r1, #1
    caec:	f002 fa37 	bl	ef5e <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E>
    caf0:	908d      	str	r0, [sp, #564]	; 0x234
    caf2:	e7ff      	b.n	caf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ccc>
    caf4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    caf8:	280f      	cmp	r0, #15
    cafa:	f201 861d 	bhi.w	e738 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3910>
    cafe:	e7ff      	b.n	cb00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cd8>
    cb00:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cb04:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cb08:	1842      	adds	r2, r0, r1
    cb0a:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    cb0c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    cb10:	f001 bc57 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cb14:	2005      	movs	r0, #5
    cb16:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    cb1a:	f64c 1080 	movw	r0, #51584	; 0xc980
    cb1e:	f2c0 0001 	movt	r0, #1
    cb22:	6801      	ldr	r1, [r0, #0]
    cb24:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    cb28:	f004 fed5 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cb2c:	908c      	str	r0, [sp, #560]	; 0x230
    cb2e:	e01f      	b.n	cb70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d48>
    cb30:	2001      	movs	r0, #1
    cb32:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    cb36:	e015      	b.n	cb64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d3c>
    cb38:	2000      	movs	r0, #0
    cb3a:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    cb3e:	e011      	b.n	cb64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d3c>
    cb40:	2000      	movs	r0, #0
    cb42:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    cb46:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    cb4a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cb4e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cb52:	f004 ff35 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    cb56:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    cb5a:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    cb5e:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    cb62:	e00a      	b.n	cb7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d52>
    cb64:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    cb68:	07c0      	lsls	r0, r0, #31
    cb6a:	2800      	cmp	r0, #0
    cb6c:	d112      	bne.n	cb94 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d6c>
    cb6e:	e055      	b.n	cc1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1df4>
    cb70:	988c      	ldr	r0, [sp, #560]	; 0x230
    cb72:	07c1      	lsls	r1, r0, #31
    cb74:	2900      	cmp	r1, #0
    cb76:	d1e3      	bne.n	cb40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d18>
    cb78:	e7de      	b.n	cb38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d10>
    cb7a:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    cb7e:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    cb82:	f004 fea8 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cb86:	908b      	str	r0, [sp, #556]	; 0x22c
    cb88:	e7ff      	b.n	cb8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d62>
    cb8a:	988b      	ldr	r0, [sp, #556]	; 0x22c
    cb8c:	07c1      	lsls	r1, r0, #31
    cb8e:	2900      	cmp	r1, #0
    cb90:	d1ce      	bne.n	cb30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d08>
    cb92:	e7d1      	b.n	cb38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d10>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    cb94:	f24d 0060 	movw	r0, #53344	; 0xd060
    cb98:	f2c0 0001 	movt	r0, #1
    cb9c:	6801      	ldr	r1, [r0, #0]
    cb9e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cba2:	f100 0212 	add.w	r2, r0, #18
    cba6:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    cbaa:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    cbae:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    cbb2:	f247 539b 	movw	r3, #30107	; 0x759b
    cbb6:	f2c0 0301 	movt	r3, #1
    cbba:	4610      	mov	r0, r2
    cbbc:	918a      	str	r1, [sp, #552]	; 0x228
    cbbe:	4619      	mov	r1, r3
    cbc0:	f7fd fceb 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cbc4:	9089      	str	r0, [sp, #548]	; 0x224
    cbc6:	9188      	str	r1, [sp, #544]	; 0x220
    cbc8:	e7ff      	b.n	cbca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1da2>
    cbca:	9889      	ldr	r0, [sp, #548]	; 0x224
    cbcc:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    cbd0:	9988      	ldr	r1, [sp, #544]	; 0x220
    cbd2:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    cbd6:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    cbda:	f2c0 0201 	movt	r2, #1
    cbde:	6812      	ldr	r2, [r2, #0]
    cbe0:	466b      	mov	r3, sp
    cbe2:	f04f 0c01 	mov.w	ip, #1
    cbe6:	f8c3 c008 	str.w	ip, [r3, #8]
    cbea:	605a      	str	r2, [r3, #4]
    cbec:	f8c3 c000 	str.w	ip, [r3]
    cbf0:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    cbf4:	2202      	movs	r2, #2
    cbf6:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    cbfa:	998a      	ldr	r1, [sp, #552]	; 0x228
    cbfc:	f004 fea7 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    cc00:	e7ff      	b.n	cc02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1dda>
    cc02:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    cc06:	f24d 0080 	movw	r0, #53376	; 0xd080
    cc0a:	f2c0 0001 	movt	r0, #1
    cc0e:	6802      	ldr	r2, [r0, #0]
    cc10:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    cc14:	f005 fe50 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cc18:	e7ff      	b.n	cc1a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1df2>
    cc1a:	e7ff      	b.n	cc1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1df4>
                if self.v[x] != self.v[y] {
    cc1c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cc20:	280f      	cmp	r0, #15
    cc22:	f201 8561 	bhi.w	e6e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38c0>
    cc26:	e7ff      	b.n	cc28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e00>
    cc28:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc2c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cc30:	1842      	adds	r2, r0, r1
    cc32:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cc36:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    cc3a:	2b0f      	cmp	r3, #15
    cc3c:	9287      	str	r2, [sp, #540]	; 0x21c
    cc3e:	f201 855d 	bhi.w	e6fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38d4>
    cc42:	e7ff      	b.n	cc44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e1c>
    cc44:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc48:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    cc4c:	1842      	adds	r2, r0, r1
    cc4e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cc52:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    cc54:	fa5f fc83 	uxtb.w	ip, r3
    cc58:	4594      	cmp	ip, r2
    cc5a:	d006      	beq.n	cc6a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e42>
    cc5c:	e7ff      	b.n	cc5e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e36>
                    self.next();
    cc5e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc62:	f001 fee0 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    cc66:	e7ff      	b.n	cc68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e40>
                if self.v[x] != self.v[y] {
    cc68:	e7ff      	b.n	cc6a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e42>
        match (
    cc6a:	f001 bbaa 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cc6e:	2005      	movs	r0, #5
    cc70:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    cc74:	f64c 1080 	movw	r0, #51584	; 0xc980
    cc78:	f2c0 0001 	movt	r0, #1
    cc7c:	6801      	ldr	r1, [r0, #0]
    cc7e:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    cc82:	f004 fe28 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cc86:	9086      	str	r0, [sp, #536]	; 0x218
    cc88:	e01f      	b.n	ccca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ea2>
    cc8a:	2001      	movs	r0, #1
    cc8c:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    cc90:	e015      	b.n	ccbe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e96>
    cc92:	2000      	movs	r0, #0
    cc94:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    cc98:	e011      	b.n	ccbe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e96>
    cc9a:	2000      	movs	r0, #0
    cc9c:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    cca0:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    cca4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cca8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ccac:	f004 fe88 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    ccb0:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    ccb4:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    ccb8:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    ccbc:	e00a      	b.n	ccd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1eac>
    ccbe:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    ccc2:	07c0      	lsls	r0, r0, #31
    ccc4:	2800      	cmp	r0, #0
    ccc6:	d112      	bne.n	ccee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ec6>
    ccc8:	e055      	b.n	cd76 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f4e>
    ccca:	9886      	ldr	r0, [sp, #536]	; 0x218
    cccc:	07c1      	lsls	r1, r0, #31
    ccce:	2900      	cmp	r1, #0
    ccd0:	d1e3      	bne.n	cc9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e72>
    ccd2:	e7de      	b.n	cc92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e6a>
    ccd4:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    ccd8:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    ccdc:	f004 fdfb 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cce0:	9085      	str	r0, [sp, #532]	; 0x214
    cce2:	e7ff      	b.n	cce4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ebc>
    cce4:	9885      	ldr	r0, [sp, #532]	; 0x214
    cce6:	07c1      	lsls	r1, r0, #31
    cce8:	2900      	cmp	r1, #0
    ccea:	d1ce      	bne.n	cc8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e62>
    ccec:	e7d1      	b.n	cc92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e6a>
                trace!("[{:04x}] LD I, nnn", self.pc);
    ccee:	f24d 0020 	movw	r0, #53280	; 0xd020
    ccf2:	f2c0 0001 	movt	r0, #1
    ccf6:	6801      	ldr	r1, [r0, #0]
    ccf8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ccfc:	f100 0212 	add.w	r2, r0, #18
    cd00:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    cd04:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    cd08:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    cd0c:	f247 539b 	movw	r3, #30107	; 0x759b
    cd10:	f2c0 0301 	movt	r3, #1
    cd14:	4610      	mov	r0, r2
    cd16:	9184      	str	r1, [sp, #528]	; 0x210
    cd18:	4619      	mov	r1, r3
    cd1a:	f7fd fc3e 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cd1e:	9083      	str	r0, [sp, #524]	; 0x20c
    cd20:	9182      	str	r1, [sp, #520]	; 0x208
    cd22:	e7ff      	b.n	cd24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1efc>
    cd24:	9883      	ldr	r0, [sp, #524]	; 0x20c
    cd26:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    cd2a:	9982      	ldr	r1, [sp, #520]	; 0x208
    cd2c:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    cd30:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    cd34:	f2c0 0201 	movt	r2, #1
    cd38:	6812      	ldr	r2, [r2, #0]
    cd3a:	466b      	mov	r3, sp
    cd3c:	f04f 0c01 	mov.w	ip, #1
    cd40:	f8c3 c008 	str.w	ip, [r3, #8]
    cd44:	605a      	str	r2, [r3, #4]
    cd46:	f8c3 c000 	str.w	ip, [r3]
    cd4a:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    cd4e:	2202      	movs	r2, #2
    cd50:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    cd54:	9984      	ldr	r1, [sp, #528]	; 0x210
    cd56:	f004 fdfa 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    cd5a:	e7ff      	b.n	cd5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f34>
    cd5c:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    cd60:	f24d 0040 	movw	r0, #53312	; 0xd040
    cd64:	f2c0 0001 	movt	r0, #1
    cd68:	6802      	ldr	r2, [r0, #0]
    cd6a:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    cd6e:	f005 fda3 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cd72:	e7ff      	b.n	cd74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f4c>
    cd74:	e7ff      	b.n	cd76 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f4e>
                self.i = nnn;
    cd76:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    cd7a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    cd7e:	8208      	strh	r0, [r1, #16]
        match (
    cd80:	f001 bb1f 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cd84:	2005      	movs	r0, #5
    cd86:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    cd8a:	f64c 1080 	movw	r0, #51584	; 0xc980
    cd8e:	f2c0 0001 	movt	r0, #1
    cd92:	6801      	ldr	r1, [r0, #0]
    cd94:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    cd98:	f004 fd9d 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cd9c:	9081      	str	r0, [sp, #516]	; 0x204
    cd9e:	e01f      	b.n	cde0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fb8>
    cda0:	2001      	movs	r0, #1
    cda2:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    cda6:	e015      	b.n	cdd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fac>
    cda8:	2000      	movs	r0, #0
    cdaa:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    cdae:	e011      	b.n	cdd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fac>
    cdb0:	2000      	movs	r0, #0
    cdb2:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    cdb6:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    cdba:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cdbe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cdc2:	f004 fdfd 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    cdc6:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    cdca:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    cdce:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    cdd2:	e00a      	b.n	cdea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fc2>
    cdd4:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    cdd8:	07c0      	lsls	r0, r0, #31
    cdda:	2800      	cmp	r0, #0
    cddc:	d112      	bne.n	ce04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fdc>
    cdde:	e055      	b.n	ce8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2064>
    cde0:	9881      	ldr	r0, [sp, #516]	; 0x204
    cde2:	07c1      	lsls	r1, r0, #31
    cde4:	2900      	cmp	r1, #0
    cde6:	d1e3      	bne.n	cdb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f88>
    cde8:	e7de      	b.n	cda8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f80>
    cdea:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    cdee:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    cdf2:	f004 fd70 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cdf6:	9080      	str	r0, [sp, #512]	; 0x200
    cdf8:	e7ff      	b.n	cdfa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fd2>
    cdfa:	9880      	ldr	r0, [sp, #512]	; 0x200
    cdfc:	07c1      	lsls	r1, r0, #31
    cdfe:	2900      	cmp	r1, #0
    ce00:	d1ce      	bne.n	cda0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f78>
    ce02:	e7d1      	b.n	cda8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f80>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    ce04:	f64c 70e0 	movw	r0, #53216	; 0xcfe0
    ce08:	f2c0 0001 	movt	r0, #1
    ce0c:	6801      	ldr	r1, [r0, #0]
    ce0e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ce12:	f100 0212 	add.w	r2, r0, #18
    ce16:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    ce1a:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    ce1e:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    ce22:	f247 539b 	movw	r3, #30107	; 0x759b
    ce26:	f2c0 0301 	movt	r3, #1
    ce2a:	4610      	mov	r0, r2
    ce2c:	917f      	str	r1, [sp, #508]	; 0x1fc
    ce2e:	4619      	mov	r1, r3
    ce30:	f7fd fbb3 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ce34:	907e      	str	r0, [sp, #504]	; 0x1f8
    ce36:	917d      	str	r1, [sp, #500]	; 0x1f4
    ce38:	e7ff      	b.n	ce3a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2012>
    ce3a:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    ce3c:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    ce40:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    ce42:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    ce46:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    ce4a:	f2c0 0201 	movt	r2, #1
    ce4e:	6812      	ldr	r2, [r2, #0]
    ce50:	466b      	mov	r3, sp
    ce52:	f04f 0c01 	mov.w	ip, #1
    ce56:	f8c3 c008 	str.w	ip, [r3, #8]
    ce5a:	605a      	str	r2, [r3, #4]
    ce5c:	f8c3 c000 	str.w	ip, [r3]
    ce60:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    ce64:	2202      	movs	r2, #2
    ce66:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    ce6a:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    ce6c:	f004 fd6f 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    ce70:	e7ff      	b.n	ce72 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x204a>
    ce72:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    ce76:	f24d 0000 	movw	r0, #53248	; 0xd000
    ce7a:	f2c0 0001 	movt	r0, #1
    ce7e:	6802      	ldr	r2, [r0, #0]
    ce80:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    ce84:	f005 fd18 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ce88:	e7ff      	b.n	ce8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2062>
    ce8a:	e7ff      	b.n	ce8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2064>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    ce8c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ce90:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    ce94:	f004 fda8 	bl	119e8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>
    ce98:	907c      	str	r0, [sp, #496]	; 0x1f0
    ce9a:	e7ff      	b.n	ce9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2074>
    ce9c:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    cea0:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    cea2:	f002 f8e8 	bl	f076 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>
    cea6:	907b      	str	r0, [sp, #492]	; 0x1ec
    cea8:	e7ff      	b.n	ceaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2082>
    ceaa:	2102      	movs	r1, #2
    ceac:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    ceae:	f002 f8f3 	bl	f098 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>
    ceb2:	907a      	str	r0, [sp, #488]	; 0x1e8
    ceb4:	e7ff      	b.n	ceb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x208e>
    ceb6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ceba:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    cebc:	f001 fd70 	bl	e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    cec0:	e7ff      	b.n	cec2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x209a>
        match (
    cec2:	f001 ba7e 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cec6:	2005      	movs	r0, #5
    cec8:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    cecc:	f64c 1080 	movw	r0, #51584	; 0xc980
    ced0:	f2c0 0001 	movt	r0, #1
    ced4:	6801      	ldr	r1, [r0, #0]
    ced6:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    ceda:	f004 fcfc 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cede:	9079      	str	r0, [sp, #484]	; 0x1e4
    cee0:	e01f      	b.n	cf22 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20fa>
    cee2:	2001      	movs	r0, #1
    cee4:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    cee8:	e015      	b.n	cf16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ee>
    ceea:	2000      	movs	r0, #0
    ceec:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    cef0:	e011      	b.n	cf16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ee>
    cef2:	2000      	movs	r0, #0
    cef4:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    cef8:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    cefc:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cf00:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cf04:	f004 fd5c 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    cf08:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    cf0c:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    cf10:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    cf14:	e00a      	b.n	cf2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2104>
    cf16:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    cf1a:	07c0      	lsls	r0, r0, #31
    cf1c:	2800      	cmp	r0, #0
    cf1e:	d112      	bne.n	cf46 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x211e>
    cf20:	e055      	b.n	cfce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21a6>
    cf22:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    cf24:	07c1      	lsls	r1, r0, #31
    cf26:	2900      	cmp	r1, #0
    cf28:	d1e3      	bne.n	cef2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ca>
    cf2a:	e7de      	b.n	ceea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20c2>
    cf2c:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    cf30:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    cf34:	f004 fccf 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cf38:	9078      	str	r0, [sp, #480]	; 0x1e0
    cf3a:	e7ff      	b.n	cf3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2114>
    cf3c:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    cf3e:	07c1      	lsls	r1, r0, #31
    cf40:	2900      	cmp	r1, #0
    cf42:	d1ce      	bne.n	cee2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ba>
    cf44:	e7d1      	b.n	ceea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20c2>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    cf46:	f64c 7090 	movw	r0, #53136	; 0xcf90
    cf4a:	f2c0 0001 	movt	r0, #1
    cf4e:	6801      	ldr	r1, [r0, #0]
    cf50:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cf54:	f100 0212 	add.w	r2, r0, #18
    cf58:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    cf5c:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    cf60:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    cf64:	f247 539b 	movw	r3, #30107	; 0x759b
    cf68:	f2c0 0301 	movt	r3, #1
    cf6c:	4610      	mov	r0, r2
    cf6e:	9177      	str	r1, [sp, #476]	; 0x1dc
    cf70:	4619      	mov	r1, r3
    cf72:	f7fd fb12 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cf76:	9076      	str	r0, [sp, #472]	; 0x1d8
    cf78:	9175      	str	r1, [sp, #468]	; 0x1d4
    cf7a:	e7ff      	b.n	cf7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2154>
    cf7c:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    cf7e:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    cf82:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    cf84:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    cf88:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    cf8c:	f2c0 0201 	movt	r2, #1
    cf90:	6812      	ldr	r2, [r2, #0]
    cf92:	466b      	mov	r3, sp
    cf94:	f04f 0c01 	mov.w	ip, #1
    cf98:	f8c3 c008 	str.w	ip, [r3, #8]
    cf9c:	605a      	str	r2, [r3, #4]
    cf9e:	f8c3 c000 	str.w	ip, [r3]
    cfa2:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    cfa6:	2202      	movs	r2, #2
    cfa8:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    cfac:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    cfae:	f004 fcce 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    cfb2:	e7ff      	b.n	cfb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x218c>
    cfb4:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    cfb8:	f64c 70b0 	movw	r0, #53168	; 0xcfb0
    cfbc:	f2c0 0001 	movt	r0, #1
    cfc0:	6802      	ldr	r2, [r0, #0]
    cfc2:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    cfc6:	f005 fc77 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cfca:	e7ff      	b.n	cfcc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21a4>
    cfcc:	e7ff      	b.n	cfce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21a6>
    cfce:	f241 0048 	movw	r0, #4168	; 0x1048
                self.v[x] = self.hw.rand() & kk;
    cfd2:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    cfd6:	4408      	add	r0, r1
    cfd8:	f002 fa15 	bl	f406 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hd3173c320d2551cfE>
    cfdc:	9074      	str	r0, [sp, #464]	; 0x1d0
    cfde:	e7ff      	b.n	cfe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21b8>
    cfe0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cfe4:	280f      	cmp	r0, #15
    cfe6:	f201 8375 	bhi.w	e6d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38ac>
    cfea:	e7ff      	b.n	cfec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21c4>
    cfec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cff0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cff4:	1842      	adds	r2, r0, r1
    cff6:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    cff8:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    cffc:	ea03 0e0c 	and.w	lr, r3, ip
    d000:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    d004:	f001 b9dd 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d008:	2005      	movs	r0, #5
    d00a:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    d00e:	f64c 1080 	movw	r0, #51584	; 0xc980
    d012:	f2c0 0001 	movt	r0, #1
    d016:	6801      	ldr	r1, [r0, #0]
    d018:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    d01c:	f004 fc5b 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d020:	9073      	str	r0, [sp, #460]	; 0x1cc
    d022:	e01f      	b.n	d064 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x223c>
    d024:	2001      	movs	r0, #1
    d026:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    d02a:	e015      	b.n	d058 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2230>
    d02c:	2000      	movs	r0, #0
    d02e:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    d032:	e011      	b.n	d058 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2230>
    d034:	2000      	movs	r0, #0
    d036:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    d03a:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    d03e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d042:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d046:	f004 fcbb 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d04a:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    d04e:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    d052:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    d056:	e00a      	b.n	d06e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2246>
    d058:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    d05c:	07c0      	lsls	r0, r0, #31
    d05e:	2800      	cmp	r0, #0
    d060:	d112      	bne.n	d088 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2260>
    d062:	e055      	b.n	d110 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22e8>
    d064:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    d066:	07c1      	lsls	r1, r0, #31
    d068:	2900      	cmp	r1, #0
    d06a:	d1e3      	bne.n	d034 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x220c>
    d06c:	e7de      	b.n	d02c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2204>
    d06e:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    d072:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    d076:	f004 fc2e 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d07a:	9072      	str	r0, [sp, #456]	; 0x1c8
    d07c:	e7ff      	b.n	d07e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2256>
    d07e:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    d080:	07c1      	lsls	r1, r0, #31
    d082:	2900      	cmp	r1, #0
    d084:	d1ce      	bne.n	d024 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21fc>
    d086:	e7d1      	b.n	d02c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2204>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    d088:	f64c 6034 	movw	r0, #52788	; 0xce34
    d08c:	f2c0 0001 	movt	r0, #1
    d090:	6801      	ldr	r1, [r0, #0]
    d092:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d096:	f100 0212 	add.w	r2, r0, #18
    d09a:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    d09e:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    d0a2:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    d0a6:	f247 539b 	movw	r3, #30107	; 0x759b
    d0aa:	f2c0 0301 	movt	r3, #1
    d0ae:	4610      	mov	r0, r2
    d0b0:	9171      	str	r1, [sp, #452]	; 0x1c4
    d0b2:	4619      	mov	r1, r3
    d0b4:	f7fd fa71 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d0b8:	9070      	str	r0, [sp, #448]	; 0x1c0
    d0ba:	916f      	str	r1, [sp, #444]	; 0x1bc
    d0bc:	e7ff      	b.n	d0be <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2296>
    d0be:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    d0c0:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    d0c4:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    d0c6:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    d0ca:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    d0ce:	f2c0 0201 	movt	r2, #1
    d0d2:	6812      	ldr	r2, [r2, #0]
    d0d4:	466b      	mov	r3, sp
    d0d6:	f04f 0c01 	mov.w	ip, #1
    d0da:	f8c3 c008 	str.w	ip, [r3, #8]
    d0de:	605a      	str	r2, [r3, #4]
    d0e0:	f8c3 c000 	str.w	ip, [r3]
    d0e4:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    d0e8:	2202      	movs	r2, #2
    d0ea:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    d0ee:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    d0f0:	f004 fc2d 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d0f4:	e7ff      	b.n	d0f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22ce>
    d0f6:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    d0fa:	f64c 6054 	movw	r0, #52820	; 0xce54
    d0fe:	f2c0 0001 	movt	r0, #1
    d102:	6802      	ldr	r2, [r0, #0]
    d104:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    d108:	f005 fbd6 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d10c:	e7ff      	b.n	d10e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22e6>
    d10e:	e7ff      	b.n	d110 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22e8>
                let basex = self.v[x] as usize;
    d110:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d114:	280f      	cmp	r0, #15
    d116:	f201 826b 	bhi.w	e5f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37c8>
    d11a:	e7ff      	b.n	d11c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22f4>
    d11c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d120:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d124:	1842      	adds	r2, r0, r1
    d126:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d12a:	4613      	mov	r3, r2
    d12c:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    d130:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    d134:	2a0f      	cmp	r2, #15
    d136:	936e      	str	r3, [sp, #440]	; 0x1b8
    d138:	f201 8264 	bhi.w	e604 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37dc>
    d13c:	e7ff      	b.n	d13e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2316>
    d13e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d142:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d146:	1842      	adds	r2, r0, r1
    d148:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d14c:	4613      	mov	r3, r2
    d14e:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
    d152:	f241 0248 	movw	r2, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    d156:	4410      	add	r0, r2
    d158:	936d      	str	r3, [sp, #436]	; 0x1b4
    d15a:	f002 fb37 	bl	f7cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E>
    d15e:	906c      	str	r0, [sp, #432]	; 0x1b0
    d160:	916b      	str	r1, [sp, #428]	; 0x1ac
    d162:	e7ff      	b.n	d164 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x233c>
    d164:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    d166:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    d16a:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    d16c:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    d170:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    d172:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    d176:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    d17a:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    d17e:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    d182:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    d186:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    d18a:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    d18e:	f005 f920 	bl	123d2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    d192:	906a      	str	r0, [sp, #424]	; 0x1a8
    d194:	9169      	str	r1, [sp, #420]	; 0x1a4
    d196:	e7ff      	b.n	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2370>
    d198:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    d19a:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    d19e:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    d1a0:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    d1a4:	e7ff      	b.n	d1a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x237e>
    d1a6:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    d1aa:	f005 f887 	bl	122bc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    d1ae:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    d1b2:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    d1b6:	e7ff      	b.n	d1b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2390>
    d1b8:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    d1bc:	2800      	cmp	r0, #0
    d1be:	d001      	beq.n	d1c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x239c>
    d1c0:	e7ff      	b.n	d1c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x239a>
    d1c2:	e002      	b.n	d1ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x23a2>
        match (
    d1c4:	f001 b8fd 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for y in 0..n {
    d1c8:	defe      	udf	#254	; 0xfe
    d1ca:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    d1ce:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    d1d2:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    d1d6:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    d1da:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d1de:	8a0a      	ldrh	r2, [r1, #16]
    d1e0:	1813      	adds	r3, r2, r0
    d1e2:	469c      	mov	ip, r3
    d1e4:	4293      	cmp	r3, r2
    d1e6:	9068      	str	r0, [sp, #416]	; 0x1a0
    d1e8:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    d1ec:	f0c1 8214 	bcc.w	e618 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37f0>
    d1f0:	e7ff      	b.n	d1f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x23ca>
    d1f2:	2000      	movs	r0, #0
    d1f4:	9967      	ldr	r1, [sp, #412]	; 0x19c
    d1f6:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    d1fa:	f041 8219 	bne.w	e630 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3808>
    d1fe:	e7ff      	b.n	d200 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x23d8>
    d200:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d204:	9967      	ldr	r1, [sp, #412]	; 0x19c
    d206:	1842      	adds	r2, r0, r1
    d208:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d20c:	4613      	mov	r3, r2
    d20e:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    d212:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    d214:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    d218:	eb02 0e0c 	add.w	lr, r2, ip
    d21c:	4674      	mov	r4, lr
    d21e:	4596      	cmp	lr, r2
    d220:	9366      	str	r3, [sp, #408]	; 0x198
    d222:	9465      	str	r4, [sp, #404]	; 0x194
    d224:	f0c1 820e 	bcc.w	e644 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x381c>
    d228:	e7ff      	b.n	d22a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2402>
    d22a:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    d22c:	2800      	cmp	r0, #0
    d22e:	f001 8215 	beq.w	e65c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3834>
    d232:	e7ff      	b.n	d234 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x240c>
    d234:	9865      	ldr	r0, [sp, #404]	; 0x194
    d236:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    d238:	fbb0 f2f1 	udiv	r2, r0, r1
    d23c:	fb02 0211 	mls	r2, r2, r1, r0
    d240:	4613      	mov	r3, r2
    d242:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    d246:	2200      	movs	r2, #0
                    for x in 0..8 {
    d248:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    d24c:	2208      	movs	r2, #8
    d24e:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    d252:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    d256:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    d25a:	9364      	str	r3, [sp, #400]	; 0x190
    d25c:	f005 f8b9 	bl	123d2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    d260:	9063      	str	r0, [sp, #396]	; 0x18c
    d262:	9162      	str	r1, [sp, #392]	; 0x188
    d264:	e7ff      	b.n	d266 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x243e>
    d266:	9863      	ldr	r0, [sp, #396]	; 0x18c
    d268:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    d26c:	9962      	ldr	r1, [sp, #392]	; 0x188
    d26e:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    d272:	e7ff      	b.n	d274 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x244c>
    d274:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    d278:	f005 f820 	bl	122bc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    d27c:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    d280:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    d284:	e7ff      	b.n	d286 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x245e>
    d286:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    d28a:	2800      	cmp	r0, #0
    d28c:	d001      	beq.n	d292 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x246a>
    d28e:	e7ff      	b.n	d290 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2468>
    d290:	e001      	b.n	d296 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x246e>
                for y in 0..n {
    d292:	e788      	b.n	d1a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x237e>
                    for x in 0..8 {
    d294:	defe      	udf	#254	; 0xfe
    d296:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    d29a:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    d29e:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    d2a2:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    d2a6:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    d2a8:	1842      	adds	r2, r0, r1
    d2aa:	4613      	mov	r3, r2
    d2ac:	4282      	cmp	r2, r0
    d2ae:	9061      	str	r0, [sp, #388]	; 0x184
    d2b0:	9360      	str	r3, [sp, #384]	; 0x180
    d2b2:	f0c1 81df 	bcc.w	e674 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x384c>
    d2b6:	e7ff      	b.n	d2b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2490>
    d2b8:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    d2ba:	2800      	cmp	r0, #0
    d2bc:	f001 81e6 	beq.w	e68c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3864>
    d2c0:	e7ff      	b.n	d2c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x249a>
    d2c2:	9860      	ldr	r0, [sp, #384]	; 0x180
    d2c4:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    d2c6:	fbb0 f2f1 	udiv	r2, r0, r1
    d2ca:	fb02 0211 	mls	r2, r2, r1, r0
    d2ce:	4613      	mov	r3, r2
    d2d0:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    d2d4:	9a61      	ldr	r2, [sp, #388]	; 0x184
    d2d6:	f1c2 0c07 	rsb	ip, r2, #7
    d2da:	f04f 0e07 	mov.w	lr, #7
    d2de:	4596      	cmp	lr, r2
    d2e0:	935f      	str	r3, [sp, #380]	; 0x17c
    d2e2:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    d2e6:	f0c1 81dd 	bcc.w	e6a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x387c>
    d2ea:	e7ff      	b.n	d2ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x24c4>
    d2ec:	985e      	ldr	r0, [sp, #376]	; 0x178
    d2ee:	f000 0107 	and.w	r1, r0, #7
    d2f2:	2201      	movs	r2, #1
    d2f4:	fa02 f101 	lsl.w	r1, r2, r1
    d2f8:	08c2      	lsrs	r2, r0, #3
    d2fa:	2a00      	cmp	r2, #0
    d2fc:	915d      	str	r1, [sp, #372]	; 0x174
    d2fe:	f041 81dd 	bne.w	e6bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3894>
    d302:	e7ff      	b.n	d304 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x24dc>
    d304:	9866      	ldr	r0, [sp, #408]	; 0x198
    d306:	995d      	ldr	r1, [sp, #372]	; 0x174
    d308:	ea00 0201 	and.w	r2, r0, r1
    d30c:	b2d2      	uxtb	r2, r2
    d30e:	2a00      	cmp	r2, #0
    d310:	bf18      	it	ne
    d312:	2201      	movne	r2, #1
    d314:	4613      	mov	r3, r2
    d316:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
    d31a:	f241 0248 	movw	r2, #4168	; 0x1048
                        let dst = self.hw.vram_get(vramx, vramy);
    d31e:	f8dd c490 	ldr.w	ip, [sp, #1168]	; 0x490
    d322:	eb0c 0002 	add.w	r0, ip, r2
    d326:	995f      	ldr	r1, [sp, #380]	; 0x17c
    d328:	9a64      	ldr	r2, [sp, #400]	; 0x190
    d32a:	935c      	str	r3, [sp, #368]	; 0x170
    d32c:	f002 f997 	bl	f65e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE>
    d330:	4601      	mov	r1, r0
    d332:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    d336:	915b      	str	r1, [sp, #364]	; 0x16c
    d338:	e7ff      	b.n	d33a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2512>
                        self.v[0xf] |= (src && dst) as u8;
    d33a:	985c      	ldr	r0, [sp, #368]	; 0x170
    d33c:	07c1      	lsls	r1, r0, #31
    d33e:	2900      	cmp	r1, #0
    d340:	d108      	bne.n	d354 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x252c>
    d342:	e003      	b.n	d34c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2524>
    d344:	2001      	movs	r0, #1
    d346:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    d34a:	e008      	b.n	d35e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2536>
    d34c:	2000      	movs	r0, #0
    d34e:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    d352:	e004      	b.n	d35e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2536>
    d354:	985b      	ldr	r0, [sp, #364]	; 0x16c
    d356:	07c1      	lsls	r1, r0, #31
    d358:	2900      	cmp	r1, #0
    d35a:	d1f3      	bne.n	d344 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x251c>
    d35c:	e7f6      	b.n	d34c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2524>
    d35e:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    d362:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d366:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    d36a:	4310      	orrs	r0, r2
    d36c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    d370:	f241 0048 	movw	r0, #4168	; 0x1048
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    d374:	4408      	add	r0, r1
    d376:	9a5c      	ldr	r2, [sp, #368]	; 0x170
    d378:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    d37a:	ea82 0c03 	eor.w	ip, r2, r3
    d37e:	f00c 0301 	and.w	r3, ip, #1
    d382:	995f      	ldr	r1, [sp, #380]	; 0x17c
    d384:	9a64      	ldr	r2, [sp, #400]	; 0x190
    d386:	f002 f864 	bl	f452 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE>
    d38a:	e7ff      	b.n	d38c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2564>
                    for x in 0..8 {
    d38c:	e772      	b.n	d274 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x244c>
    d38e:	2005      	movs	r0, #5
    d390:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    d394:	f64c 1080 	movw	r0, #51584	; 0xc980
    d398:	f2c0 0001 	movt	r0, #1
    d39c:	6801      	ldr	r1, [r0, #0]
    d39e:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    d3a2:	f004 fa98 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d3a6:	905a      	str	r0, [sp, #360]	; 0x168
    d3a8:	e01f      	b.n	d3ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25c2>
    d3aa:	2001      	movs	r0, #1
    d3ac:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    d3b0:	e015      	b.n	d3de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25b6>
    d3b2:	2000      	movs	r0, #0
    d3b4:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    d3b8:	e011      	b.n	d3de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25b6>
    d3ba:	2000      	movs	r0, #0
    d3bc:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    d3c0:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    d3c4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d3c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d3cc:	f004 faf8 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d3d0:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    d3d4:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    d3d8:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    d3dc:	e00a      	b.n	d3f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25cc>
    d3de:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    d3e2:	07c0      	lsls	r0, r0, #31
    d3e4:	2800      	cmp	r0, #0
    d3e6:	d112      	bne.n	d40e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25e6>
    d3e8:	e055      	b.n	d496 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x266e>
    d3ea:	985a      	ldr	r0, [sp, #360]	; 0x168
    d3ec:	07c1      	lsls	r1, r0, #31
    d3ee:	2900      	cmp	r1, #0
    d3f0:	d1e3      	bne.n	d3ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2592>
    d3f2:	e7de      	b.n	d3b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x258a>
    d3f4:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    d3f8:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    d3fc:	f004 fa6b 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d400:	9059      	str	r0, [sp, #356]	; 0x164
    d402:	e7ff      	b.n	d404 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25dc>
    d404:	9859      	ldr	r0, [sp, #356]	; 0x164
    d406:	07c1      	lsls	r1, r0, #31
    d408:	2900      	cmp	r1, #0
    d40a:	d1ce      	bne.n	d3aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2582>
    d40c:	e7d1      	b.n	d3b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x258a>
                trace!("[{:04x}] SKP Vx", self.pc);
    d40e:	f64c 50e0 	movw	r0, #52704	; 0xcde0
    d412:	f2c0 0001 	movt	r0, #1
    d416:	6801      	ldr	r1, [r0, #0]
    d418:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d41c:	f100 0212 	add.w	r2, r0, #18
    d420:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    d424:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    d428:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    d42c:	f247 539b 	movw	r3, #30107	; 0x759b
    d430:	f2c0 0301 	movt	r3, #1
    d434:	4610      	mov	r0, r2
    d436:	9158      	str	r1, [sp, #352]	; 0x160
    d438:	4619      	mov	r1, r3
    d43a:	f7fd f8ae 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d43e:	9057      	str	r0, [sp, #348]	; 0x15c
    d440:	9156      	str	r1, [sp, #344]	; 0x158
    d442:	e7ff      	b.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x261c>
    d444:	9857      	ldr	r0, [sp, #348]	; 0x15c
    d446:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    d44a:	9956      	ldr	r1, [sp, #344]	; 0x158
    d44c:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    d450:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    d454:	f2c0 0201 	movt	r2, #1
    d458:	6812      	ldr	r2, [r2, #0]
    d45a:	466b      	mov	r3, sp
    d45c:	f04f 0c01 	mov.w	ip, #1
    d460:	f8c3 c008 	str.w	ip, [r3, #8]
    d464:	605a      	str	r2, [r3, #4]
    d466:	f8c3 c000 	str.w	ip, [r3]
    d46a:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    d46e:	2202      	movs	r2, #2
    d470:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    d474:	9958      	ldr	r1, [sp, #352]	; 0x160
    d476:	f004 fa6a 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d47a:	e7ff      	b.n	d47c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2654>
    d47c:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    d480:	f64c 6000 	movw	r0, #52736	; 0xce00
    d484:	f2c0 0001 	movt	r0, #1
    d488:	6802      	ldr	r2, [r0, #0]
    d48a:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    d48e:	f005 fa13 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d492:	e7ff      	b.n	d494 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x266c>
    d494:	e7ff      	b.n	d496 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x266e>
    d496:	f241 0048 	movw	r0, #4168	; 0x1048
                if self.hw.key(self.v[x]) {
    d49a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d49e:	4408      	add	r0, r1
    d4a0:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    d4a4:	2a0f      	cmp	r2, #15
    d4a6:	9055      	str	r0, [sp, #340]	; 0x154
    d4a8:	f201 8098 	bhi.w	e5dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37b4>
    d4ac:	e7ff      	b.n	d4ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2686>
    d4ae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d4b2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4b6:	1842      	adds	r2, r0, r1
    d4b8:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    d4bc:	9855      	ldr	r0, [sp, #340]	; 0x154
    d4be:	f001 ffa7 	bl	f410 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>
    d4c2:	9054      	str	r0, [sp, #336]	; 0x150
    d4c4:	e7ff      	b.n	d4c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x269e>
    d4c6:	9854      	ldr	r0, [sp, #336]	; 0x150
    d4c8:	07c1      	lsls	r1, r0, #31
    d4ca:	2900      	cmp	r1, #0
    d4cc:	d006      	beq.n	d4dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b4>
    d4ce:	e7ff      	b.n	d4d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26a8>
                    self.next();
    d4d0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d4d4:	f001 faa7 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    d4d8:	e7ff      	b.n	d4da <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b2>
                if self.hw.key(self.v[x]) {
    d4da:	e7ff      	b.n	d4dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b4>
        match (
    d4dc:	f000 bf71 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d4e0:	2005      	movs	r0, #5
    d4e2:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    d4e6:	f64c 1080 	movw	r0, #51584	; 0xc980
    d4ea:	f2c0 0001 	movt	r0, #1
    d4ee:	6801      	ldr	r1, [r0, #0]
    d4f0:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    d4f4:	f004 f9ef 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d4f8:	9053      	str	r0, [sp, #332]	; 0x14c
    d4fa:	e01f      	b.n	d53c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2714>
    d4fc:	2001      	movs	r0, #1
    d4fe:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    d502:	e015      	b.n	d530 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2708>
    d504:	2000      	movs	r0, #0
    d506:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    d50a:	e011      	b.n	d530 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2708>
    d50c:	2000      	movs	r0, #0
    d50e:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    d512:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    d516:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d51a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d51e:	f004 fa4f 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d522:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    d526:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    d52a:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    d52e:	e00a      	b.n	d546 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x271e>
    d530:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    d534:	07c0      	lsls	r0, r0, #31
    d536:	2800      	cmp	r0, #0
    d538:	d112      	bne.n	d560 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2738>
    d53a:	e055      	b.n	d5e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27c0>
    d53c:	9853      	ldr	r0, [sp, #332]	; 0x14c
    d53e:	07c1      	lsls	r1, r0, #31
    d540:	2900      	cmp	r1, #0
    d542:	d1e3      	bne.n	d50c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26e4>
    d544:	e7de      	b.n	d504 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26dc>
    d546:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    d54a:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    d54e:	f004 f9c2 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d552:	9052      	str	r0, [sp, #328]	; 0x148
    d554:	e7ff      	b.n	d556 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x272e>
    d556:	9852      	ldr	r0, [sp, #328]	; 0x148
    d558:	07c1      	lsls	r1, r0, #31
    d55a:	2900      	cmp	r1, #0
    d55c:	d1ce      	bne.n	d4fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26d4>
    d55e:	e7d1      	b.n	d504 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26dc>
                trace!("[{:04x}] SKNP Vx", self.pc);
    d560:	f64c 509c 	movw	r0, #52636	; 0xcd9c
    d564:	f2c0 0001 	movt	r0, #1
    d568:	6801      	ldr	r1, [r0, #0]
    d56a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d56e:	f100 0212 	add.w	r2, r0, #18
    d572:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    d576:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    d57a:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    d57e:	f247 539b 	movw	r3, #30107	; 0x759b
    d582:	f2c0 0301 	movt	r3, #1
    d586:	4610      	mov	r0, r2
    d588:	9151      	str	r1, [sp, #324]	; 0x144
    d58a:	4619      	mov	r1, r3
    d58c:	f7fd f805 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d590:	9050      	str	r0, [sp, #320]	; 0x140
    d592:	914f      	str	r1, [sp, #316]	; 0x13c
    d594:	e7ff      	b.n	d596 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x276e>
    d596:	9850      	ldr	r0, [sp, #320]	; 0x140
    d598:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    d59c:	994f      	ldr	r1, [sp, #316]	; 0x13c
    d59e:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    d5a2:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    d5a6:	f2c0 0201 	movt	r2, #1
    d5aa:	6812      	ldr	r2, [r2, #0]
    d5ac:	466b      	mov	r3, sp
    d5ae:	f04f 0c01 	mov.w	ip, #1
    d5b2:	f8c3 c008 	str.w	ip, [r3, #8]
    d5b6:	605a      	str	r2, [r3, #4]
    d5b8:	f8c3 c000 	str.w	ip, [r3]
    d5bc:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    d5c0:	2202      	movs	r2, #2
    d5c2:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    d5c6:	9951      	ldr	r1, [sp, #324]	; 0x144
    d5c8:	f004 f9c1 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d5cc:	e7ff      	b.n	d5ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27a6>
    d5ce:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    d5d2:	f64c 50bc 	movw	r0, #52668	; 0xcdbc
    d5d6:	f2c0 0001 	movt	r0, #1
    d5da:	6802      	ldr	r2, [r0, #0]
    d5dc:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    d5e0:	f005 f96a 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d5e4:	e7ff      	b.n	d5e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27be>
    d5e6:	e7ff      	b.n	d5e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27c0>
    d5e8:	f241 0048 	movw	r0, #4168	; 0x1048
                if !self.hw.key(self.v[x]) {
    d5ec:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d5f0:	4408      	add	r0, r1
    d5f2:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    d5f6:	2a0f      	cmp	r2, #15
    d5f8:	904e      	str	r0, [sp, #312]	; 0x138
    d5fa:	f200 87e5 	bhi.w	e5c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37a0>
    d5fe:	e7ff      	b.n	d600 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27d8>
    d600:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d604:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d608:	1842      	adds	r2, r0, r1
    d60a:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    d60e:	984e      	ldr	r0, [sp, #312]	; 0x138
    d610:	f001 fefe 	bl	f410 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>
    d614:	904d      	str	r0, [sp, #308]	; 0x134
    d616:	e7ff      	b.n	d618 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27f0>
    d618:	984d      	ldr	r0, [sp, #308]	; 0x134
    d61a:	07c1      	lsls	r1, r0, #31
    d61c:	2900      	cmp	r1, #0
    d61e:	d106      	bne.n	d62e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2806>
    d620:	e7ff      	b.n	d622 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27fa>
                    self.next();
    d622:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d626:	f001 f9fe 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    d62a:	e7ff      	b.n	d62c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2804>
                if !self.hw.key(self.v[x]) {
    d62c:	e7ff      	b.n	d62e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2806>
        match (
    d62e:	f000 bec8 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d632:	2005      	movs	r0, #5
    d634:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    d638:	f64c 1080 	movw	r0, #51584	; 0xc980
    d63c:	f2c0 0001 	movt	r0, #1
    d640:	6801      	ldr	r1, [r0, #0]
    d642:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    d646:	f004 f946 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d64a:	904c      	str	r0, [sp, #304]	; 0x130
    d64c:	e01f      	b.n	d68e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2866>
    d64e:	2001      	movs	r0, #1
    d650:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    d654:	e015      	b.n	d682 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x285a>
    d656:	2000      	movs	r0, #0
    d658:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    d65c:	e011      	b.n	d682 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x285a>
    d65e:	2000      	movs	r0, #0
    d660:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    d664:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    d668:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d66c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d670:	f004 f9a6 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d674:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    d678:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    d67c:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    d680:	e00a      	b.n	d698 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2870>
    d682:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    d686:	07c0      	lsls	r0, r0, #31
    d688:	2800      	cmp	r0, #0
    d68a:	d112      	bne.n	d6b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x288a>
    d68c:	e055      	b.n	d73a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2912>
    d68e:	984c      	ldr	r0, [sp, #304]	; 0x130
    d690:	07c1      	lsls	r1, r0, #31
    d692:	2900      	cmp	r1, #0
    d694:	d1e3      	bne.n	d65e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2836>
    d696:	e7de      	b.n	d656 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x282e>
    d698:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    d69c:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    d6a0:	f004 f919 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d6a4:	904b      	str	r0, [sp, #300]	; 0x12c
    d6a6:	e7ff      	b.n	d6a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2880>
    d6a8:	984b      	ldr	r0, [sp, #300]	; 0x12c
    d6aa:	07c1      	lsls	r1, r0, #31
    d6ac:	2900      	cmp	r1, #0
    d6ae:	d1ce      	bne.n	d64e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2826>
    d6b0:	e7d1      	b.n	d656 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x282e>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    d6b2:	f64c 504c 	movw	r0, #52556	; 0xcd4c
    d6b6:	f2c0 0001 	movt	r0, #1
    d6ba:	6801      	ldr	r1, [r0, #0]
    d6bc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d6c0:	f100 0212 	add.w	r2, r0, #18
    d6c4:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    d6c8:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    d6cc:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    d6d0:	f247 539b 	movw	r3, #30107	; 0x759b
    d6d4:	f2c0 0301 	movt	r3, #1
    d6d8:	4610      	mov	r0, r2
    d6da:	914a      	str	r1, [sp, #296]	; 0x128
    d6dc:	4619      	mov	r1, r3
    d6de:	f7fc ff5c 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d6e2:	9049      	str	r0, [sp, #292]	; 0x124
    d6e4:	9148      	str	r1, [sp, #288]	; 0x120
    d6e6:	e7ff      	b.n	d6e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x28c0>
    d6e8:	9849      	ldr	r0, [sp, #292]	; 0x124
    d6ea:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    d6ee:	9948      	ldr	r1, [sp, #288]	; 0x120
    d6f0:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    d6f4:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    d6f8:	f2c0 0201 	movt	r2, #1
    d6fc:	6812      	ldr	r2, [r2, #0]
    d6fe:	466b      	mov	r3, sp
    d700:	f04f 0c01 	mov.w	ip, #1
    d704:	f8c3 c008 	str.w	ip, [r3, #8]
    d708:	605a      	str	r2, [r3, #4]
    d70a:	f8c3 c000 	str.w	ip, [r3]
    d70e:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    d712:	2202      	movs	r2, #2
    d714:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    d718:	994a      	ldr	r1, [sp, #296]	; 0x128
    d71a:	f004 f918 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d71e:	e7ff      	b.n	d720 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x28f8>
    d720:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    d724:	f64c 506c 	movw	r0, #52588	; 0xcd6c
    d728:	f2c0 0001 	movt	r0, #1
    d72c:	6802      	ldr	r2, [r0, #0]
    d72e:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    d732:	f005 f8c1 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d736:	e7ff      	b.n	d738 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2910>
    d738:	e7ff      	b.n	d73a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2912>
                self.v[x] = self.dt;
    d73a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d73e:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    d742:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    d746:	2a0f      	cmp	r2, #15
    d748:	9147      	str	r1, [sp, #284]	; 0x11c
    d74a:	f200 8733 	bhi.w	e5b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x378c>
    d74e:	e7ff      	b.n	d750 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2928>
    d750:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d754:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d758:	1842      	adds	r2, r0, r1
    d75a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    d75c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    d760:	f000 be2f 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d764:	2005      	movs	r0, #5
    d766:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    d76a:	f64c 1080 	movw	r0, #51584	; 0xc980
    d76e:	f2c0 0001 	movt	r0, #1
    d772:	6801      	ldr	r1, [r0, #0]
    d774:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    d778:	f004 f8ad 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d77c:	9046      	str	r0, [sp, #280]	; 0x118
    d77e:	e01f      	b.n	d7c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2998>
    d780:	2001      	movs	r0, #1
    d782:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    d786:	e015      	b.n	d7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x298c>
    d788:	2000      	movs	r0, #0
    d78a:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    d78e:	e011      	b.n	d7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x298c>
    d790:	2000      	movs	r0, #0
    d792:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    d796:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    d79a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d79e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d7a2:	f004 f90d 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d7a6:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    d7aa:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    d7ae:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    d7b2:	e00a      	b.n	d7ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29a2>
    d7b4:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    d7b8:	07c0      	lsls	r0, r0, #31
    d7ba:	2800      	cmp	r0, #0
    d7bc:	d112      	bne.n	d7e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29bc>
    d7be:	e055      	b.n	d86c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a44>
    d7c0:	9846      	ldr	r0, [sp, #280]	; 0x118
    d7c2:	07c1      	lsls	r1, r0, #31
    d7c4:	2900      	cmp	r1, #0
    d7c6:	d1e3      	bne.n	d790 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2968>
    d7c8:	e7de      	b.n	d788 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2960>
    d7ca:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    d7ce:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    d7d2:	f004 f880 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d7d6:	9045      	str	r0, [sp, #276]	; 0x114
    d7d8:	e7ff      	b.n	d7da <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29b2>
    d7da:	9845      	ldr	r0, [sp, #276]	; 0x114
    d7dc:	07c1      	lsls	r1, r0, #31
    d7de:	2900      	cmp	r1, #0
    d7e0:	d1ce      	bne.n	d780 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2958>
    d7e2:	e7d1      	b.n	d788 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2960>
                trace!("[{:04x}] LD Vx, K", self.pc);
    d7e4:	f64c 40fc 	movw	r0, #52476	; 0xccfc
    d7e8:	f2c0 0001 	movt	r0, #1
    d7ec:	6801      	ldr	r1, [r0, #0]
    d7ee:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d7f2:	f100 0212 	add.w	r2, r0, #18
    d7f6:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    d7fa:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    d7fe:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    d802:	f247 539b 	movw	r3, #30107	; 0x759b
    d806:	f2c0 0301 	movt	r3, #1
    d80a:	4610      	mov	r0, r2
    d80c:	9144      	str	r1, [sp, #272]	; 0x110
    d80e:	4619      	mov	r1, r3
    d810:	f7fc fec3 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d814:	9043      	str	r0, [sp, #268]	; 0x10c
    d816:	9142      	str	r1, [sp, #264]	; 0x108
    d818:	e7ff      	b.n	d81a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29f2>
    d81a:	9843      	ldr	r0, [sp, #268]	; 0x10c
    d81c:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    d820:	9942      	ldr	r1, [sp, #264]	; 0x108
    d822:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    d826:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    d82a:	f2c0 0201 	movt	r2, #1
    d82e:	6812      	ldr	r2, [r2, #0]
    d830:	466b      	mov	r3, sp
    d832:	f04f 0c01 	mov.w	ip, #1
    d836:	f8c3 c008 	str.w	ip, [r3, #8]
    d83a:	605a      	str	r2, [r3, #4]
    d83c:	f8c3 c000 	str.w	ip, [r3]
    d840:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    d844:	2202      	movs	r2, #2
    d846:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    d84a:	9944      	ldr	r1, [sp, #272]	; 0x110
    d84c:	f004 f87f 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d850:	e7ff      	b.n	d852 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a2a>
    d852:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    d856:	f64c 501c 	movw	r0, #52508	; 0xcd1c
    d85a:	f2c0 0001 	movt	r0, #1
    d85e:	6802      	ldr	r2, [r0, #0]
    d860:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    d864:	f005 f828 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d868:	e7ff      	b.n	d86a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a42>
    d86a:	e7ff      	b.n	d86c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a44>
                self.v[x] = self.waitkey();
    d86c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d870:	f001 fa2d 	bl	ecce <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE>
    d874:	9041      	str	r0, [sp, #260]	; 0x104
    d876:	e7ff      	b.n	d878 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a50>
    d878:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d87c:	280f      	cmp	r0, #15
    d87e:	f200 868f 	bhi.w	e5a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3778>
    d882:	e7ff      	b.n	d884 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a5c>
    d884:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d888:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d88c:	1842      	adds	r2, r0, r1
    d88e:	9b41      	ldr	r3, [sp, #260]	; 0x104
    d890:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    d894:	f000 bd95 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d898:	2005      	movs	r0, #5
    d89a:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    d89e:	f64c 1080 	movw	r0, #51584	; 0xc980
    d8a2:	f2c0 0001 	movt	r0, #1
    d8a6:	6801      	ldr	r1, [r0, #0]
    d8a8:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    d8ac:	f004 f813 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d8b0:	9040      	str	r0, [sp, #256]	; 0x100
    d8b2:	e01f      	b.n	d8f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2acc>
    d8b4:	2001      	movs	r0, #1
    d8b6:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    d8ba:	e015      	b.n	d8e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ac0>
    d8bc:	2000      	movs	r0, #0
    d8be:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    d8c2:	e011      	b.n	d8e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ac0>
    d8c4:	2000      	movs	r0, #0
    d8c6:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    d8ca:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    d8ce:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d8d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d8d6:	f004 f873 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d8da:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    d8de:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    d8e2:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    d8e6:	e00a      	b.n	d8fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ad6>
    d8e8:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    d8ec:	07c0      	lsls	r0, r0, #31
    d8ee:	2800      	cmp	r0, #0
    d8f0:	d112      	bne.n	d918 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2af0>
    d8f2:	e055      	b.n	d9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b78>
    d8f4:	9840      	ldr	r0, [sp, #256]	; 0x100
    d8f6:	07c1      	lsls	r1, r0, #31
    d8f8:	2900      	cmp	r1, #0
    d8fa:	d1e3      	bne.n	d8c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a9c>
    d8fc:	e7de      	b.n	d8bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a94>
    d8fe:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    d902:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    d906:	f003 ffe6 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d90a:	903f      	str	r0, [sp, #252]	; 0xfc
    d90c:	e7ff      	b.n	d90e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ae6>
    d90e:	983f      	ldr	r0, [sp, #252]	; 0xfc
    d910:	07c1      	lsls	r1, r0, #31
    d912:	2900      	cmp	r1, #0
    d914:	d1ce      	bne.n	d8b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a8c>
    d916:	e7d1      	b.n	d8bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a94>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    d918:	f64c 40ac 	movw	r0, #52396	; 0xccac
    d91c:	f2c0 0001 	movt	r0, #1
    d920:	6801      	ldr	r1, [r0, #0]
    d922:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d926:	f100 0212 	add.w	r2, r0, #18
    d92a:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    d92e:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    d932:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    d936:	f247 539b 	movw	r3, #30107	; 0x759b
    d93a:	f2c0 0301 	movt	r3, #1
    d93e:	4610      	mov	r0, r2
    d940:	913e      	str	r1, [sp, #248]	; 0xf8
    d942:	4619      	mov	r1, r3
    d944:	f7fc fe29 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d948:	903d      	str	r0, [sp, #244]	; 0xf4
    d94a:	913c      	str	r1, [sp, #240]	; 0xf0
    d94c:	e7ff      	b.n	d94e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b26>
    d94e:	983d      	ldr	r0, [sp, #244]	; 0xf4
    d950:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    d954:	993c      	ldr	r1, [sp, #240]	; 0xf0
    d956:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    d95a:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    d95e:	f2c0 0201 	movt	r2, #1
    d962:	6812      	ldr	r2, [r2, #0]
    d964:	466b      	mov	r3, sp
    d966:	f04f 0c01 	mov.w	ip, #1
    d96a:	f8c3 c008 	str.w	ip, [r3, #8]
    d96e:	605a      	str	r2, [r3, #4]
    d970:	f8c3 c000 	str.w	ip, [r3]
    d974:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    d978:	2202      	movs	r2, #2
    d97a:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    d97e:	993e      	ldr	r1, [sp, #248]	; 0xf8
    d980:	f003 ffe5 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d984:	e7ff      	b.n	d986 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b5e>
    d986:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    d98a:	f64c 40cc 	movw	r0, #52428	; 0xcccc
    d98e:	f2c0 0001 	movt	r0, #1
    d992:	6802      	ldr	r2, [r0, #0]
    d994:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    d998:	f004 ff8e 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d99c:	e7ff      	b.n	d99e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b76>
    d99e:	e7ff      	b.n	d9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b78>
                self.dt = self.v[x];
    d9a0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d9a4:	280f      	cmp	r0, #15
    d9a6:	f200 85f1 	bhi.w	e58c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3764>
    d9aa:	e7ff      	b.n	d9ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b84>
    d9ac:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d9b0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d9b4:	1842      	adds	r2, r0, r1
    d9b6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d9ba:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    d9be:	f000 bd00 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d9c2:	2005      	movs	r0, #5
    d9c4:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    d9c8:	f64c 1080 	movw	r0, #51584	; 0xc980
    d9cc:	f2c0 0001 	movt	r0, #1
    d9d0:	6801      	ldr	r1, [r0, #0]
    d9d2:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    d9d6:	f003 ff7e 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d9da:	903b      	str	r0, [sp, #236]	; 0xec
    d9dc:	e01f      	b.n	da1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bf6>
    d9de:	2001      	movs	r0, #1
    d9e0:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    d9e4:	e015      	b.n	da12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bea>
    d9e6:	2000      	movs	r0, #0
    d9e8:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    d9ec:	e011      	b.n	da12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bea>
    d9ee:	2000      	movs	r0, #0
    d9f0:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    d9f4:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    d9f8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d9fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    da00:	f003 ffde 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    da04:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    da08:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    da0c:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    da10:	e00a      	b.n	da28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c00>
    da12:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    da16:	07c0      	lsls	r0, r0, #31
    da18:	2800      	cmp	r0, #0
    da1a:	d112      	bne.n	da42 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c1a>
    da1c:	e055      	b.n	daca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ca2>
    da1e:	983b      	ldr	r0, [sp, #236]	; 0xec
    da20:	07c1      	lsls	r1, r0, #31
    da22:	2900      	cmp	r1, #0
    da24:	d1e3      	bne.n	d9ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bc6>
    da26:	e7de      	b.n	d9e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bbe>
    da28:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    da2c:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    da30:	f003 ff51 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    da34:	903a      	str	r0, [sp, #232]	; 0xe8
    da36:	e7ff      	b.n	da38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c10>
    da38:	983a      	ldr	r0, [sp, #232]	; 0xe8
    da3a:	07c1      	lsls	r1, r0, #31
    da3c:	2900      	cmp	r1, #0
    da3e:	d1ce      	bne.n	d9de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bb6>
    da40:	e7d1      	b.n	d9e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bbe>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    da42:	f64c 405c 	movw	r0, #52316	; 0xcc5c
    da46:	f2c0 0001 	movt	r0, #1
    da4a:	6801      	ldr	r1, [r0, #0]
    da4c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da50:	f100 0212 	add.w	r2, r0, #18
    da54:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    da58:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    da5c:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    da60:	f247 539b 	movw	r3, #30107	; 0x759b
    da64:	f2c0 0301 	movt	r3, #1
    da68:	4610      	mov	r0, r2
    da6a:	9139      	str	r1, [sp, #228]	; 0xe4
    da6c:	4619      	mov	r1, r3
    da6e:	f7fc fd94 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    da72:	9038      	str	r0, [sp, #224]	; 0xe0
    da74:	9137      	str	r1, [sp, #220]	; 0xdc
    da76:	e7ff      	b.n	da78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c50>
    da78:	9838      	ldr	r0, [sp, #224]	; 0xe0
    da7a:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    da7e:	9937      	ldr	r1, [sp, #220]	; 0xdc
    da80:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    da84:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    da88:	f2c0 0201 	movt	r2, #1
    da8c:	6812      	ldr	r2, [r2, #0]
    da8e:	466b      	mov	r3, sp
    da90:	f04f 0c01 	mov.w	ip, #1
    da94:	f8c3 c008 	str.w	ip, [r3, #8]
    da98:	605a      	str	r2, [r3, #4]
    da9a:	f8c3 c000 	str.w	ip, [r3]
    da9e:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    daa2:	2202      	movs	r2, #2
    daa4:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    daa8:	9939      	ldr	r1, [sp, #228]	; 0xe4
    daaa:	f003 ff50 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    daae:	e7ff      	b.n	dab0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c88>
    dab0:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    dab4:	f64c 407c 	movw	r0, #52348	; 0xcc7c
    dab8:	f2c0 0001 	movt	r0, #1
    dabc:	6802      	ldr	r2, [r0, #0]
    dabe:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    dac2:	f004 fef9 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dac6:	e7ff      	b.n	dac8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ca0>
    dac8:	e7ff      	b.n	daca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ca2>
                self.st = self.v[x];
    daca:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dace:	280f      	cmp	r0, #15
    dad0:	f200 8552 	bhi.w	e578 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3750>
    dad4:	e7ff      	b.n	dad6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2cae>
    dad6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dada:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dade:	1842      	adds	r2, r0, r1
    dae0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    dae4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    dae8:	f000 bc6b 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    daec:	2005      	movs	r0, #5
    daee:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    daf2:	f64c 1080 	movw	r0, #51584	; 0xc980
    daf6:	f2c0 0001 	movt	r0, #1
    dafa:	6801      	ldr	r1, [r0, #0]
    dafc:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    db00:	f003 fee9 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    db04:	9036      	str	r0, [sp, #216]	; 0xd8
    db06:	e01f      	b.n	db48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d20>
    db08:	2001      	movs	r0, #1
    db0a:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    db0e:	e015      	b.n	db3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d14>
    db10:	2000      	movs	r0, #0
    db12:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    db16:	e011      	b.n	db3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d14>
    db18:	2000      	movs	r0, #0
    db1a:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    db1e:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    db22:	f644 206c 	movw	r0, #19052	; 0x4a6c
    db26:	f2c2 0000 	movt	r0, #8192	; 0x2000
    db2a:	f003 ff49 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    db2e:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    db32:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    db36:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    db3a:	e00a      	b.n	db52 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d2a>
    db3c:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    db40:	07c0      	lsls	r0, r0, #31
    db42:	2800      	cmp	r0, #0
    db44:	d112      	bne.n	db6c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d44>
    db46:	e055      	b.n	dbf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2dcc>
    db48:	9836      	ldr	r0, [sp, #216]	; 0xd8
    db4a:	07c1      	lsls	r1, r0, #31
    db4c:	2900      	cmp	r1, #0
    db4e:	d1e3      	bne.n	db18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2cf0>
    db50:	e7de      	b.n	db10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ce8>
    db52:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    db56:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    db5a:	f003 febc 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    db5e:	9035      	str	r0, [sp, #212]	; 0xd4
    db60:	e7ff      	b.n	db62 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d3a>
    db62:	9835      	ldr	r0, [sp, #212]	; 0xd4
    db64:	07c1      	lsls	r1, r0, #31
    db66:	2900      	cmp	r1, #0
    db68:	d1ce      	bne.n	db08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ce0>
    db6a:	e7d1      	b.n	db10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ce8>
                trace!("[{:04x}] ADD I, Vx", self.pc);
    db6c:	f64c 400c 	movw	r0, #52236	; 0xcc0c
    db70:	f2c0 0001 	movt	r0, #1
    db74:	6801      	ldr	r1, [r0, #0]
    db76:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    db7a:	f100 0212 	add.w	r2, r0, #18
    db7e:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
    db82:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
    db86:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
    db8a:	f247 539b 	movw	r3, #30107	; 0x759b
    db8e:	f2c0 0301 	movt	r3, #1
    db92:	4610      	mov	r0, r2
    db94:	9134      	str	r1, [sp, #208]	; 0xd0
    db96:	4619      	mov	r1, r3
    db98:	f7fc fcff 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    db9c:	9033      	str	r0, [sp, #204]	; 0xcc
    db9e:	9132      	str	r1, [sp, #200]	; 0xc8
    dba0:	e7ff      	b.n	dba2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d7a>
    dba2:	9833      	ldr	r0, [sp, #204]	; 0xcc
    dba4:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
    dba8:	9932      	ldr	r1, [sp, #200]	; 0xc8
    dbaa:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
    dbae:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    dbb2:	f2c0 0201 	movt	r2, #1
    dbb6:	6812      	ldr	r2, [r2, #0]
    dbb8:	466b      	mov	r3, sp
    dbba:	f04f 0c01 	mov.w	ip, #1
    dbbe:	f8c3 c008 	str.w	ip, [r3, #8]
    dbc2:	605a      	str	r2, [r3, #4]
    dbc4:	f8c3 c000 	str.w	ip, [r3]
    dbc8:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    dbcc:	2202      	movs	r2, #2
    dbce:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
    dbd2:	9934      	ldr	r1, [sp, #208]	; 0xd0
    dbd4:	f003 febb 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    dbd8:	e7ff      	b.n	dbda <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2db2>
    dbda:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
    dbde:	f64c 402c 	movw	r0, #52268	; 0xcc2c
    dbe2:	f2c0 0001 	movt	r0, #1
    dbe6:	6802      	ldr	r2, [r0, #0]
    dbe8:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    dbec:	f004 fe64 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dbf0:	e7ff      	b.n	dbf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2dca>
    dbf2:	e7ff      	b.n	dbf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2dcc>
                self.i = self.i.wrapping_add(self.v[x].into());
    dbf4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dbf8:	8a01      	ldrh	r1, [r0, #16]
    dbfa:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    dbfe:	2a0f      	cmp	r2, #15
    dc00:	9131      	str	r1, [sp, #196]	; 0xc4
    dc02:	f200 84af 	bhi.w	e564 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x373c>
    dc06:	e7ff      	b.n	dc08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2de0>
    dc08:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc0c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dc10:	1842      	adds	r2, r0, r1
    dc12:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    dc16:	f003 fee7 	bl	119e8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>
    dc1a:	9030      	str	r0, [sp, #192]	; 0xc0
    dc1c:	e7ff      	b.n	dc1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2df6>
    dc1e:	9831      	ldr	r0, [sp, #196]	; 0xc4
    dc20:	9930      	ldr	r1, [sp, #192]	; 0xc0
    dc22:	f001 fa28 	bl	f076 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>
    dc26:	902f      	str	r0, [sp, #188]	; 0xbc
    dc28:	e7ff      	b.n	dc2a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e02>
    dc2a:	982f      	ldr	r0, [sp, #188]	; 0xbc
    dc2c:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    dc30:	8208      	strh	r0, [r1, #16]
        match (
    dc32:	e3c6      	b.n	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    dc34:	2005      	movs	r0, #5
    dc36:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
    dc3a:	f64c 1080 	movw	r0, #51584	; 0xc980
    dc3e:	f2c0 0001 	movt	r0, #1
    dc42:	6801      	ldr	r1, [r0, #0]
    dc44:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    dc48:	f003 fe45 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dc4c:	902e      	str	r0, [sp, #184]	; 0xb8
    dc4e:	e01f      	b.n	dc90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e68>
    dc50:	2001      	movs	r0, #1
    dc52:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    dc56:	e015      	b.n	dc84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e5c>
    dc58:	2000      	movs	r0, #0
    dc5a:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    dc5e:	e011      	b.n	dc84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e5c>
    dc60:	2000      	movs	r0, #0
    dc62:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
    dc66:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
    dc6a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dc6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dc72:	f003 fea5 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    dc76:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
    dc7a:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
    dc7e:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
    dc82:	e00a      	b.n	dc9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e72>
    dc84:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
    dc88:	07c0      	lsls	r0, r0, #31
    dc8a:	2800      	cmp	r0, #0
    dc8c:	d112      	bne.n	dcb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e8c>
    dc8e:	e055      	b.n	dd3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f14>
    dc90:	982e      	ldr	r0, [sp, #184]	; 0xb8
    dc92:	07c1      	lsls	r1, r0, #31
    dc94:	2900      	cmp	r1, #0
    dc96:	d1e3      	bne.n	dc60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e38>
    dc98:	e7de      	b.n	dc58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e30>
    dc9a:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    dc9e:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
    dca2:	f003 fe18 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dca6:	902d      	str	r0, [sp, #180]	; 0xb4
    dca8:	e7ff      	b.n	dcaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e82>
    dcaa:	982d      	ldr	r0, [sp, #180]	; 0xb4
    dcac:	07c1      	lsls	r1, r0, #31
    dcae:	2900      	cmp	r1, #0
    dcb0:	d1ce      	bne.n	dc50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e28>
    dcb2:	e7d1      	b.n	dc58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e30>
                trace!("[{:04x}] LD F, Vx", self.pc);
    dcb4:	f64c 3088 	movw	r0, #52104	; 0xcb88
    dcb8:	f2c0 0001 	movt	r0, #1
    dcbc:	6801      	ldr	r1, [r0, #0]
    dcbe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dcc2:	f100 0212 	add.w	r2, r0, #18
    dcc6:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
    dcca:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
    dcce:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
    dcd2:	f247 539b 	movw	r3, #30107	; 0x759b
    dcd6:	f2c0 0301 	movt	r3, #1
    dcda:	4610      	mov	r0, r2
    dcdc:	912c      	str	r1, [sp, #176]	; 0xb0
    dcde:	4619      	mov	r1, r3
    dce0:	f7fc fc5b 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dce4:	902b      	str	r0, [sp, #172]	; 0xac
    dce6:	912a      	str	r1, [sp, #168]	; 0xa8
    dce8:	e7ff      	b.n	dcea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ec2>
    dcea:	982b      	ldr	r0, [sp, #172]	; 0xac
    dcec:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
    dcf0:	992a      	ldr	r1, [sp, #168]	; 0xa8
    dcf2:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
    dcf6:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    dcfa:	f2c0 0201 	movt	r2, #1
    dcfe:	6812      	ldr	r2, [r2, #0]
    dd00:	466b      	mov	r3, sp
    dd02:	f04f 0c01 	mov.w	ip, #1
    dd06:	f8c3 c008 	str.w	ip, [r3, #8]
    dd0a:	605a      	str	r2, [r3, #4]
    dd0c:	f8c3 c000 	str.w	ip, [r3]
    dd10:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    dd14:	2202      	movs	r2, #2
    dd16:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
    dd1a:	992c      	ldr	r1, [sp, #176]	; 0xb0
    dd1c:	f003 fe17 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    dd20:	e7ff      	b.n	dd22 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2efa>
    dd22:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
    dd26:	f64c 30a8 	movw	r0, #52136	; 0xcba8
    dd2a:	f2c0 0001 	movt	r0, #1
    dd2e:	6802      	ldr	r2, [r0, #0]
    dd30:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    dd34:	f004 fdc0 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dd38:	e7ff      	b.n	dd3a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f12>
    dd3a:	e7ff      	b.n	dd3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f14>
                self.i = (self.v[x] * 5).into();
    dd3c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dd40:	280f      	cmp	r0, #15
    dd42:	f200 83f9 	bhi.w	e538 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3710>
    dd46:	e7ff      	b.n	dd48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f20>
    dd48:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dd4c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dd50:	1842      	adds	r2, r0, r1
    dd52:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    dd56:	2305      	movs	r3, #5
    dd58:	fba2 2303 	umull	r2, r3, r2, r3
    dd5c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    dd60:	f04f 0e00 	mov.w	lr, #0
    dd64:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    dd68:	bf18      	it	ne
    dd6a:	f04f 0c01 	movne.w	ip, #1
    dd6e:	2b00      	cmp	r3, #0
    dd70:	bf18      	it	ne
    dd72:	2301      	movne	r3, #1
    dd74:	ea43 030c 	orr.w	r3, r3, ip
    dd78:	2b00      	cmp	r3, #0
    dd7a:	9229      	str	r2, [sp, #164]	; 0xa4
    dd7c:	f040 83e6 	bne.w	e54c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3724>
    dd80:	e7ff      	b.n	dd82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f5a>
    dd82:	9829      	ldr	r0, [sp, #164]	; 0xa4
    dd84:	f003 fe30 	bl	119e8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>
    dd88:	9028      	str	r0, [sp, #160]	; 0xa0
    dd8a:	e7ff      	b.n	dd8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f64>
    dd8c:	9828      	ldr	r0, [sp, #160]	; 0xa0
    dd8e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    dd92:	8208      	strh	r0, [r1, #16]
        match (
    dd94:	e315      	b.n	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    dd96:	2005      	movs	r0, #5
    dd98:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
    dd9c:	f64c 1080 	movw	r0, #51584	; 0xc980
    dda0:	f2c0 0001 	movt	r0, #1
    dda4:	6801      	ldr	r1, [r0, #0]
    dda6:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    ddaa:	f003 fd94 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    ddae:	9027      	str	r0, [sp, #156]	; 0x9c
    ddb0:	e01f      	b.n	ddf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fca>
    ddb2:	2001      	movs	r0, #1
    ddb4:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    ddb8:	e015      	b.n	dde6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fbe>
    ddba:	2000      	movs	r0, #0
    ddbc:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    ddc0:	e011      	b.n	dde6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fbe>
    ddc2:	2000      	movs	r0, #0
    ddc4:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
    ddc8:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
    ddcc:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ddd0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ddd4:	f003 fdf4 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    ddd8:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
    dddc:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
    dde0:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
    dde4:	e00a      	b.n	ddfc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fd4>
    dde6:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
    ddea:	07c0      	lsls	r0, r0, #31
    ddec:	2800      	cmp	r0, #0
    ddee:	d112      	bne.n	de16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fee>
    ddf0:	e055      	b.n	de9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3076>
    ddf2:	9827      	ldr	r0, [sp, #156]	; 0x9c
    ddf4:	07c1      	lsls	r1, r0, #31
    ddf6:	2900      	cmp	r1, #0
    ddf8:	d1e3      	bne.n	ddc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f9a>
    ddfa:	e7de      	b.n	ddba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f92>
    ddfc:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    de00:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
    de04:	f003 fd67 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    de08:	9026      	str	r0, [sp, #152]	; 0x98
    de0a:	e7ff      	b.n	de0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fe4>
    de0c:	9826      	ldr	r0, [sp, #152]	; 0x98
    de0e:	07c1      	lsls	r1, r0, #31
    de10:	2900      	cmp	r1, #0
    de12:	d1ce      	bne.n	ddb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f8a>
    de14:	e7d1      	b.n	ddba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f92>
                trace!("[{:04x}] LD B, Vx", self.pc);
    de16:	f64c 20e8 	movw	r0, #51944	; 0xcae8
    de1a:	f2c0 0001 	movt	r0, #1
    de1e:	6801      	ldr	r1, [r0, #0]
    de20:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    de24:	f100 0212 	add.w	r2, r0, #18
    de28:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
    de2c:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
    de30:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
    de34:	f247 539b 	movw	r3, #30107	; 0x759b
    de38:	f2c0 0301 	movt	r3, #1
    de3c:	4610      	mov	r0, r2
    de3e:	9125      	str	r1, [sp, #148]	; 0x94
    de40:	4619      	mov	r1, r3
    de42:	f7fc fbaa 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    de46:	9024      	str	r0, [sp, #144]	; 0x90
    de48:	9123      	str	r1, [sp, #140]	; 0x8c
    de4a:	e7ff      	b.n	de4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3024>
    de4c:	9824      	ldr	r0, [sp, #144]	; 0x90
    de4e:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
    de52:	9923      	ldr	r1, [sp, #140]	; 0x8c
    de54:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
    de58:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    de5c:	f2c0 0201 	movt	r2, #1
    de60:	6812      	ldr	r2, [r2, #0]
    de62:	466b      	mov	r3, sp
    de64:	f04f 0c01 	mov.w	ip, #1
    de68:	f8c3 c008 	str.w	ip, [r3, #8]
    de6c:	605a      	str	r2, [r3, #4]
    de6e:	f8c3 c000 	str.w	ip, [r3]
    de72:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    de76:	2202      	movs	r2, #2
    de78:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
    de7c:	9925      	ldr	r1, [sp, #148]	; 0x94
    de7e:	f003 fd66 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    de82:	e7ff      	b.n	de84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x305c>
    de84:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
    de88:	f64c 3008 	movw	r0, #51976	; 0xcb08
    de8c:	f2c0 0001 	movt	r0, #1
    de90:	6802      	ldr	r2, [r0, #0]
    de92:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    de96:	f004 fd0f 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    de9a:	e7ff      	b.n	de9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3074>
    de9c:	e7ff      	b.n	de9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3076>
                let bcd = self.v[x];
    de9e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dea2:	280f      	cmp	r0, #15
    dea4:	f200 8308 	bhi.w	e4b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3690>
    dea8:	e7ff      	b.n	deaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3082>
    deaa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    deae:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    deb2:	1842      	adds	r2, r0, r1
    deb4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    deb8:	4613      	mov	r3, r2
    deba:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
    debe:	f248 5c1f 	movw	ip, #34079	; 0x851f
    dec2:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
    dec6:	fba2 2c0c 	umull	r2, ip, r2, ip
    deca:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    dece:	f8b0 e010 	ldrh.w	lr, [r0, #16]
    ded2:	4674      	mov	r4, lr
    ded4:	2500      	movs	r5, #0
    ded6:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
    deda:	9322      	str	r3, [sp, #136]	; 0x88
    dedc:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    dee0:	9420      	str	r4, [sp, #128]	; 0x80
    dee2:	f040 82f3 	bne.w	e4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36a4>
    dee6:	e7ff      	b.n	dee8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x30c0>
    dee8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    deec:	9920      	ldr	r1, [sp, #128]	; 0x80
    deee:	1842      	adds	r2, r0, r1
    def0:	9b21      	ldr	r3, [sp, #132]	; 0x84
    def2:	fa5f fc83 	uxtb.w	ip, r3
    def6:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    defa:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    defe:	fbac 450e 	umull	r4, r5, ip, lr
    df02:	08ed      	lsrs	r5, r5, #3
    df04:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    df08:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
    df0c:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    df10:	9a22      	ldr	r2, [sp, #136]	; 0x88
    df12:	fa5f fc82 	uxtb.w	ip, r2
    df16:	fbac ce0e 	umull	ip, lr, ip, lr
    df1a:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    df1e:	8a05      	ldrh	r5, [r0, #16]
    df20:	3501      	adds	r5, #1
    df22:	2600      	movs	r6, #0
    df24:	2e00      	cmp	r6, #0
    df26:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
    df2a:	951e      	str	r5, [sp, #120]	; 0x78
    df2c:	f040 82d8 	bne.w	e4e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36b8>
    df30:	e7ff      	b.n	df32 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x310a>
    df32:	2000      	movs	r0, #0
    df34:	991e      	ldr	r1, [sp, #120]	; 0x78
    df36:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    df3a:	f040 82dd 	bne.w	e4f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36d0>
    df3e:	e7ff      	b.n	df40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3118>
    df40:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df44:	991e      	ldr	r1, [sp, #120]	; 0x78
    df46:	1842      	adds	r2, r0, r1
    df48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    df4a:	fa5f fc83 	uxtb.w	ip, r3
    df4e:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    df52:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    df56:	fbac e40e 	umull	lr, r4, ip, lr
    df5a:	08e4      	lsrs	r4, r4, #3
    df5c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    df60:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    df64:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
    df68:	8a02      	ldrh	r2, [r0, #16]
    df6a:	3202      	adds	r2, #2
    df6c:	f04f 0c00 	mov.w	ip, #0
    df70:	f1bc 0f00 	cmp.w	ip, #0
    df74:	921d      	str	r2, [sp, #116]	; 0x74
    df76:	f040 82c9 	bne.w	e50c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36e4>
    df7a:	e7ff      	b.n	df7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3154>
    df7c:	2000      	movs	r0, #0
    df7e:	991d      	ldr	r1, [sp, #116]	; 0x74
    df80:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    df84:	f040 82ce 	bne.w	e524 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36fc>
    df88:	e7ff      	b.n	df8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3162>
    df8a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df8e:	991d      	ldr	r1, [sp, #116]	; 0x74
    df90:	1842      	adds	r2, r0, r1
    df92:	9b22      	ldr	r3, [sp, #136]	; 0x88
    df94:	fa5f fc83 	uxtb.w	ip, r3
    df98:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    df9c:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    dfa0:	fbac e40e 	umull	lr, r4, ip, lr
    dfa4:	08e4      	lsrs	r4, r4, #3
    dfa6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    dfaa:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    dfae:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
    dfb2:	e206      	b.n	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    dfb4:	2005      	movs	r0, #5
    dfb6:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
    dfba:	f64c 1080 	movw	r0, #51584	; 0xc980
    dfbe:	f2c0 0001 	movt	r0, #1
    dfc2:	6801      	ldr	r1, [r0, #0]
    dfc4:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    dfc8:	f003 fc85 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dfcc:	901c      	str	r0, [sp, #112]	; 0x70
    dfce:	e01f      	b.n	e010 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31e8>
    dfd0:	2001      	movs	r0, #1
    dfd2:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    dfd6:	e015      	b.n	e004 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31dc>
    dfd8:	2000      	movs	r0, #0
    dfda:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    dfde:	e011      	b.n	e004 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31dc>
    dfe0:	2000      	movs	r0, #0
    dfe2:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
    dfe6:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
    dfea:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dfee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dff2:	f003 fce5 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    dff6:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
    dffa:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
    dffe:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
    e002:	e00a      	b.n	e01a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31f2>
    e004:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
    e008:	07c0      	lsls	r0, r0, #31
    e00a:	2800      	cmp	r0, #0
    e00c:	d112      	bne.n	e034 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x320c>
    e00e:	e055      	b.n	e0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3294>
    e010:	981c      	ldr	r0, [sp, #112]	; 0x70
    e012:	07c1      	lsls	r1, r0, #31
    e014:	2900      	cmp	r1, #0
    e016:	d1e3      	bne.n	dfe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31b8>
    e018:	e7de      	b.n	dfd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31b0>
    e01a:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    e01e:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
    e022:	f003 fc58 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e026:	901b      	str	r0, [sp, #108]	; 0x6c
    e028:	e7ff      	b.n	e02a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3202>
    e02a:	981b      	ldr	r0, [sp, #108]	; 0x6c
    e02c:	07c1      	lsls	r1, r0, #31
    e02e:	2900      	cmp	r1, #0
    e030:	d1ce      	bne.n	dfd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31a8>
    e032:	e7d1      	b.n	dfd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31b0>
                trace!("[{:04x}] LD [I], Vx", self.pc);
    e034:	f64c 2068 	movw	r0, #51816	; 0xca68
    e038:	f2c0 0001 	movt	r0, #1
    e03c:	6801      	ldr	r1, [r0, #0]
    e03e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e042:	f100 0212 	add.w	r2, r0, #18
    e046:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
    e04a:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
    e04e:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
    e052:	f247 539b 	movw	r3, #30107	; 0x759b
    e056:	f2c0 0301 	movt	r3, #1
    e05a:	4610      	mov	r0, r2
    e05c:	911a      	str	r1, [sp, #104]	; 0x68
    e05e:	4619      	mov	r1, r3
    e060:	f7fc fa9b 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e064:	9019      	str	r0, [sp, #100]	; 0x64
    e066:	9118      	str	r1, [sp, #96]	; 0x60
    e068:	e7ff      	b.n	e06a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3242>
    e06a:	9819      	ldr	r0, [sp, #100]	; 0x64
    e06c:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
    e070:	9918      	ldr	r1, [sp, #96]	; 0x60
    e072:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
    e076:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    e07a:	f2c0 0201 	movt	r2, #1
    e07e:	6812      	ldr	r2, [r2, #0]
    e080:	466b      	mov	r3, sp
    e082:	f04f 0c01 	mov.w	ip, #1
    e086:	f8c3 c008 	str.w	ip, [r3, #8]
    e08a:	605a      	str	r2, [r3, #4]
    e08c:	f8c3 c000 	str.w	ip, [r3]
    e090:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    e094:	2202      	movs	r2, #2
    e096:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
    e09a:	991a      	ldr	r1, [sp, #104]	; 0x68
    e09c:	f003 fc57 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e0a0:	e7ff      	b.n	e0a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x327a>
    e0a2:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
    e0a6:	f64c 2088 	movw	r0, #51848	; 0xca88
    e0aa:	f2c0 0001 	movt	r0, #1
    e0ae:	6802      	ldr	r2, [r0, #0]
    e0b0:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    e0b4:	f004 fc00 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e0b8:	e7ff      	b.n	e0ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3292>
    e0ba:	e7ff      	b.n	e0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3294>
                let x = x as usize;
    e0bc:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e0c0:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
    e0c4:	1c41      	adds	r1, r0, #1
    e0c6:	460a      	mov	r2, r1
    e0c8:	4281      	cmp	r1, r0
    e0ca:	9217      	str	r2, [sp, #92]	; 0x5c
    e0cc:	f0c0 81c9 	bcc.w	e462 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x363a>
    e0d0:	e7ff      	b.n	e0d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32aa>
    e0d2:	2000      	movs	r0, #0
    e0d4:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
    e0d8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    e0da:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
    e0de:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
    e0e2:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
    e0e6:	f004 f974 	bl	123d2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    e0ea:	9016      	str	r0, [sp, #88]	; 0x58
    e0ec:	9115      	str	r1, [sp, #84]	; 0x54
    e0ee:	e7ff      	b.n	e0f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32c8>
    e0f0:	9816      	ldr	r0, [sp, #88]	; 0x58
    e0f2:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
    e0f6:	9915      	ldr	r1, [sp, #84]	; 0x54
    e0f8:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
    e0fc:	e7ff      	b.n	e0fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32d6>
    e0fe:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
    e102:	f004 f8db 	bl	122bc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    e106:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
    e10a:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
    e10e:	e7ff      	b.n	e110 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32e8>
    e110:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
    e114:	2800      	cmp	r0, #0
    e116:	d001      	beq.n	e11c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32f4>
    e118:	e7ff      	b.n	e11a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32f2>
    e11a:	e001      	b.n	e120 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32f8>
        match (
    e11c:	e151      	b.n	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for i in 0..(x + 1) {
    e11e:	defe      	udf	#254	; 0xfe
    e120:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
    e124:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
    e128:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
    e12c:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
    e130:	280f      	cmp	r0, #15
    e132:	9014      	str	r0, [sp, #80]	; 0x50
    e134:	f200 81a1 	bhi.w	e47a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3652>
    e138:	e7ff      	b.n	e13a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3312>
    e13a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e13e:	9914      	ldr	r1, [sp, #80]	; 0x50
    e140:	1842      	adds	r2, r0, r1
    e142:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e146:	8a03      	ldrh	r3, [r0, #16]
    e148:	eb03 0c01 	add.w	ip, r3, r1
    e14c:	46e6      	mov	lr, ip
    e14e:	459c      	cmp	ip, r3
    e150:	9213      	str	r2, [sp, #76]	; 0x4c
    e152:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    e156:	f0c0 8199 	bcc.w	e48c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3664>
    e15a:	e7ff      	b.n	e15c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3334>
    e15c:	2000      	movs	r0, #0
    e15e:	9912      	ldr	r1, [sp, #72]	; 0x48
    e160:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    e164:	f040 819e 	bne.w	e4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x367c>
    e168:	e7ff      	b.n	e16a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3342>
    e16a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e16e:	9912      	ldr	r1, [sp, #72]	; 0x48
    e170:	1842      	adds	r2, r0, r1
    e172:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e174:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
    e178:	e7c1      	b.n	e0fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32d6>
    e17a:	2005      	movs	r0, #5
    e17c:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
    e180:	f64c 1080 	movw	r0, #51584	; 0xc980
    e184:	f2c0 0001 	movt	r0, #1
    e188:	6801      	ldr	r1, [r0, #0]
    e18a:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    e18e:	f003 fba2 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e192:	9011      	str	r0, [sp, #68]	; 0x44
    e194:	e01f      	b.n	e1d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33ae>
    e196:	2001      	movs	r0, #1
    e198:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    e19c:	e015      	b.n	e1ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33a2>
    e19e:	2000      	movs	r0, #0
    e1a0:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    e1a4:	e011      	b.n	e1ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33a2>
    e1a6:	2000      	movs	r0, #0
    e1a8:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
    e1ac:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
    e1b0:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e1b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e1b8:	f003 fc02 	bl	119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    e1bc:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
    e1c0:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
    e1c4:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
    e1c8:	e00a      	b.n	e1e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33b8>
    e1ca:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
    e1ce:	07c0      	lsls	r0, r0, #31
    e1d0:	2800      	cmp	r0, #0
    e1d2:	d112      	bne.n	e1fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33d2>
    e1d4:	e055      	b.n	e282 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x345a>
    e1d6:	9811      	ldr	r0, [sp, #68]	; 0x44
    e1d8:	07c1      	lsls	r1, r0, #31
    e1da:	2900      	cmp	r1, #0
    e1dc:	d1e3      	bne.n	e1a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x337e>
    e1de:	e7de      	b.n	e19e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3376>
    e1e0:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    e1e4:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
    e1e8:	f003 fb75 	bl	118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e1ec:	9010      	str	r0, [sp, #64]	; 0x40
    e1ee:	e7ff      	b.n	e1f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33c8>
    e1f0:	9810      	ldr	r0, [sp, #64]	; 0x40
    e1f2:	07c1      	lsls	r1, r0, #31
    e1f4:	2900      	cmp	r1, #0
    e1f6:	d1ce      	bne.n	e196 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x336e>
    e1f8:	e7d1      	b.n	e19e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3376>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
    e1fa:	f64c 10a4 	movw	r0, #51620	; 0xc9a4
    e1fe:	f2c0 0001 	movt	r0, #1
    e202:	6801      	ldr	r1, [r0, #0]
    e204:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e208:	f100 0212 	add.w	r2, r0, #18
    e20c:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
    e210:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
    e214:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
    e218:	f247 539b 	movw	r3, #30107	; 0x759b
    e21c:	f2c0 0301 	movt	r3, #1
    e220:	4610      	mov	r0, r2
    e222:	910f      	str	r1, [sp, #60]	; 0x3c
    e224:	4619      	mov	r1, r3
    e226:	f7fc f9b8 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e22a:	900e      	str	r0, [sp, #56]	; 0x38
    e22c:	910d      	str	r1, [sp, #52]	; 0x34
    e22e:	e7ff      	b.n	e230 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3408>
    e230:	980e      	ldr	r0, [sp, #56]	; 0x38
    e232:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
    e236:	990d      	ldr	r1, [sp, #52]	; 0x34
    e238:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
    e23c:	f64c 12c8 	movw	r2, #51656	; 0xc9c8
    e240:	f2c0 0201 	movt	r2, #1
    e244:	6812      	ldr	r2, [r2, #0]
    e246:	466b      	mov	r3, sp
    e248:	f04f 0c01 	mov.w	ip, #1
    e24c:	f8c3 c008 	str.w	ip, [r3, #8]
    e250:	605a      	str	r2, [r3, #4]
    e252:	f8c3 c000 	str.w	ip, [r3]
    e256:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    e25a:	2202      	movs	r2, #2
    e25c:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
    e260:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e262:	f003 fb74 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e266:	e7ff      	b.n	e268 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3440>
    e268:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
    e26c:	f64c 2008 	movw	r0, #51720	; 0xca08
    e270:	f2c0 0001 	movt	r0, #1
    e274:	6802      	ldr	r2, [r0, #0]
    e276:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    e27a:	f004 fb1d 	bl	128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e27e:	e7ff      	b.n	e280 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3458>
    e280:	e7ff      	b.n	e282 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x345a>
                let x = x as usize;
    e282:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e286:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
    e28a:	1c41      	adds	r1, r0, #1
    e28c:	460a      	mov	r2, r1
    e28e:	4281      	cmp	r1, r0
    e290:	920c      	str	r2, [sp, #48]	; 0x30
    e292:	f0c0 80bb 	bcc.w	e40c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35e4>
    e296:	e7ff      	b.n	e298 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3470>
    e298:	2000      	movs	r0, #0
    e29a:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
    e29e:	980c      	ldr	r0, [sp, #48]	; 0x30
    e2a0:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
    e2a4:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
    e2a8:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
    e2ac:	f004 f891 	bl	123d2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    e2b0:	900b      	str	r0, [sp, #44]	; 0x2c
    e2b2:	910a      	str	r1, [sp, #40]	; 0x28
    e2b4:	e7ff      	b.n	e2b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x348e>
    e2b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e2b8:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
    e2bc:	990a      	ldr	r1, [sp, #40]	; 0x28
    e2be:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
    e2c2:	e7ff      	b.n	e2c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x349c>
    e2c4:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
    e2c8:	f003 fff8 	bl	122bc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    e2cc:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
    e2d0:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
    e2d4:	e7ff      	b.n	e2d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34ae>
    e2d6:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
    e2da:	2800      	cmp	r0, #0
    e2dc:	d001      	beq.n	e2e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34ba>
    e2de:	e7ff      	b.n	e2e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34b8>
    e2e0:	e001      	b.n	e2e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34be>
        match (
    e2e2:	e06e      	b.n	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for i in 0..(x + 1) {
    e2e4:	defe      	udf	#254	; 0xfe
    e2e6:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
    e2ea:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
    e2ee:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
    e2f2:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
    e2f6:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    e2fa:	8a0a      	ldrh	r2, [r1, #16]
    e2fc:	1813      	adds	r3, r2, r0
    e2fe:	469c      	mov	ip, r3
    e300:	4293      	cmp	r3, r2
    e302:	9009      	str	r0, [sp, #36]	; 0x24
    e304:	f8cd c020 	str.w	ip, [sp, #32]
    e308:	f0c0 808c 	bcc.w	e424 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35fc>
    e30c:	e7ff      	b.n	e30e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34e6>
    e30e:	2000      	movs	r0, #0
    e310:	9908      	ldr	r1, [sp, #32]
    e312:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    e316:	f040 8091 	bne.w	e43c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3614>
    e31a:	e7ff      	b.n	e31c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34f4>
    e31c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e320:	9908      	ldr	r1, [sp, #32]
    e322:	1842      	adds	r2, r0, r1
    e324:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    e328:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e32a:	2b0f      	cmp	r3, #15
    e32c:	9207      	str	r2, [sp, #28]
    e32e:	f200 808f 	bhi.w	e450 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3628>
    e332:	e7ff      	b.n	e334 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x350c>
    e334:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e338:	9909      	ldr	r1, [sp, #36]	; 0x24
    e33a:	1842      	adds	r2, r0, r1
    e33c:	9b07      	ldr	r3, [sp, #28]
    e33e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
    e342:	e7bf      	b.n	e2c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x349c>
    e344:	f247 519b 	movw	r1, #30107	; 0x759b
    e348:	f2c0 0101 	movt	r1, #1
    e34c:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
    e350:	f7fc f923 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e354:	9006      	str	r0, [sp, #24]
    e356:	9105      	str	r1, [sp, #20]
    e358:	e7ff      	b.n	e35a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3532>
    e35a:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
    e35e:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
    e362:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
    e366:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
    e36a:	9a06      	ldr	r2, [sp, #24]
    e36c:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
    e370:	9b05      	ldr	r3, [sp, #20]
    e372:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
    e376:	f24d 5c6c 	movw	ip, #54636	; 0xd56c
    e37a:	f2c0 0c01 	movt	ip, #1
    e37e:	f8dc c000 	ldr.w	ip, [ip]
    e382:	46ee      	mov	lr, sp
    e384:	2402      	movs	r4, #2
    e386:	f8ce 4008 	str.w	r4, [lr, #8]
    e38a:	f8ce c004 	str.w	ip, [lr, #4]
    e38e:	f8ce 4000 	str.w	r4, [lr]
    e392:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    e396:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
    e39a:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
    e39e:	4622      	mov	r2, r4
    e3a0:	f003 fad5 	bl	1194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e3a4:	e7ff      	b.n	e3a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x357e>
    e3a6:	f24d 5090 	movw	r0, #54672	; 0xd590
    e3aa:	f2c0 0001 	movt	r0, #1
    e3ae:	f007 fce0 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    e3b2:	9004      	str	r0, [sp, #16]
    e3b4:	e7ff      	b.n	e3b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x358e>
    e3b6:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    e3ba:	9904      	ldr	r1, [sp, #16]
    e3bc:	f007 fd16 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    e3c0:	defe      	udf	#254	; 0xfe
        }
    }
    e3c2:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
    e3c6:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
    e3c8:	f64c 1028 	movw	r0, #51496	; 0xc928
    e3cc:	f2c0 0001 	movt	r0, #1
    e3d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e3d4:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    e3d8:	f007 fce8 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e3dc:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
    e3de:	f64c 1050 	movw	r0, #51536	; 0xc950
    e3e2:	f2c0 0001 	movt	r0, #1
    e3e6:	f64c 1238 	movw	r2, #51512	; 0xc938
    e3ea:	f2c0 0201 	movt	r2, #1
    e3ee:	211c      	movs	r1, #28
    e3f0:	f007 fcc6 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e3f4:	defe      	udf	#254	; 0xfe
    e3f6:	f64c 106c 	movw	r0, #51564	; 0xc96c
    e3fa:	f2c0 0001 	movt	r0, #1
    e3fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e402:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    e406:	f007 fcd1 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e40a:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    e40c:	f64c 1050 	movw	r0, #51536	; 0xc950
    e410:	f2c0 0001 	movt	r0, #1
    e414:	f64c 220c 	movw	r2, #51724	; 0xca0c
    e418:	f2c0 0201 	movt	r2, #1
    e41c:	211c      	movs	r1, #28
    e41e:	f007 fcaf 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e422:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
    e424:	f64c 1050 	movw	r0, #51536	; 0xc950
    e428:	f2c0 0001 	movt	r0, #1
    e42c:	f64c 221c 	movw	r2, #51740	; 0xca1c
    e430:	f2c0 0201 	movt	r2, #1
    e434:	211c      	movs	r1, #28
    e436:	f007 fca3 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e43a:	defe      	udf	#254	; 0xfe
    e43c:	f64c 202c 	movw	r0, #51756	; 0xca2c
    e440:	f2c0 0001 	movt	r0, #1
    e444:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e448:	9908      	ldr	r1, [sp, #32]
    e44a:	f007 fcaf 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e44e:	defe      	udf	#254	; 0xfe
    e450:	f64c 203c 	movw	r0, #51772	; 0xca3c
    e454:	f2c0 0001 	movt	r0, #1
    e458:	2210      	movs	r2, #16
    e45a:	9909      	ldr	r1, [sp, #36]	; 0x24
    e45c:	f007 fca6 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e460:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    e462:	f64c 1050 	movw	r0, #51536	; 0xc950
    e466:	f2c0 0001 	movt	r0, #1
    e46a:	f64c 228c 	movw	r2, #51852	; 0xca8c
    e46e:	f2c0 0201 	movt	r2, #1
    e472:	211c      	movs	r1, #28
    e474:	f007 fc84 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e478:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
    e47a:	f64c 209c 	movw	r0, #51868	; 0xca9c
    e47e:	f2c0 0001 	movt	r0, #1
    e482:	2210      	movs	r2, #16
    e484:	9914      	ldr	r1, [sp, #80]	; 0x50
    e486:	f007 fc91 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e48a:	defe      	udf	#254	; 0xfe
    e48c:	f64c 1050 	movw	r0, #51536	; 0xc950
    e490:	f2c0 0001 	movt	r0, #1
    e494:	f64c 22ac 	movw	r2, #51884	; 0xcaac
    e498:	f2c0 0201 	movt	r2, #1
    e49c:	211c      	movs	r1, #28
    e49e:	f007 fc6f 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e4a2:	defe      	udf	#254	; 0xfe
    e4a4:	f64c 20bc 	movw	r0, #51900	; 0xcabc
    e4a8:	f2c0 0001 	movt	r0, #1
    e4ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e4b0:	9912      	ldr	r1, [sp, #72]	; 0x48
    e4b2:	f007 fc7b 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e4b6:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
    e4b8:	f64c 300c 	movw	r0, #51980	; 0xcb0c
    e4bc:	f2c0 0001 	movt	r0, #1
    e4c0:	2210      	movs	r2, #16
    e4c2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e4c6:	f007 fc71 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e4ca:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
    e4cc:	f64c 301c 	movw	r0, #51996	; 0xcb1c
    e4d0:	f2c0 0001 	movt	r0, #1
    e4d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e4d8:	9920      	ldr	r1, [sp, #128]	; 0x80
    e4da:	f007 fc67 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e4de:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    e4e0:	f64c 1050 	movw	r0, #51536	; 0xc950
    e4e4:	f2c0 0001 	movt	r0, #1
    e4e8:	f64c 322c 	movw	r2, #52012	; 0xcb2c
    e4ec:	f2c0 0201 	movt	r2, #1
    e4f0:	211c      	movs	r1, #28
    e4f2:	f007 fc45 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e4f6:	defe      	udf	#254	; 0xfe
    e4f8:	f64c 303c 	movw	r0, #52028	; 0xcb3c
    e4fc:	f2c0 0001 	movt	r0, #1
    e500:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e504:	991e      	ldr	r1, [sp, #120]	; 0x78
    e506:	f007 fc51 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e50a:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
    e50c:	f64c 1050 	movw	r0, #51536	; 0xc950
    e510:	f2c0 0001 	movt	r0, #1
    e514:	f64c 324c 	movw	r2, #52044	; 0xcb4c
    e518:	f2c0 0201 	movt	r2, #1
    e51c:	211c      	movs	r1, #28
    e51e:	f007 fc2f 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e522:	defe      	udf	#254	; 0xfe
    e524:	f64c 305c 	movw	r0, #52060	; 0xcb5c
    e528:	f2c0 0001 	movt	r0, #1
    e52c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e530:	991d      	ldr	r1, [sp, #116]	; 0x74
    e532:	f007 fc3b 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e536:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
    e538:	f64c 30ac 	movw	r0, #52140	; 0xcbac
    e53c:	f2c0 0001 	movt	r0, #1
    e540:	2210      	movs	r2, #16
    e542:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e546:	f007 fc31 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e54a:	defe      	udf	#254	; 0xfe
    e54c:	f64c 30d0 	movw	r0, #52176	; 0xcbd0
    e550:	f2c0 0001 	movt	r0, #1
    e554:	f64c 32bc 	movw	r2, #52156	; 0xcbbc
    e558:	f2c0 0201 	movt	r2, #1
    e55c:	2121      	movs	r1, #33	; 0x21
    e55e:	f007 fc0f 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e562:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
    e564:	f64c 4030 	movw	r0, #52272	; 0xcc30
    e568:	f2c0 0001 	movt	r0, #1
    e56c:	2210      	movs	r2, #16
    e56e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e572:	f007 fc1b 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e576:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
    e578:	f64c 4080 	movw	r0, #52352	; 0xcc80
    e57c:	f2c0 0001 	movt	r0, #1
    e580:	2210      	movs	r2, #16
    e582:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e586:	f007 fc11 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e58a:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
    e58c:	f64c 40d0 	movw	r0, #52432	; 0xccd0
    e590:	f2c0 0001 	movt	r0, #1
    e594:	2210      	movs	r2, #16
    e596:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e59a:	f007 fc07 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e59e:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
    e5a0:	f64c 5020 	movw	r0, #52512	; 0xcd20
    e5a4:	f2c0 0001 	movt	r0, #1
    e5a8:	2210      	movs	r2, #16
    e5aa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5ae:	f007 fbfd 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e5b2:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
    e5b4:	f64c 5070 	movw	r0, #52592	; 0xcd70
    e5b8:	f2c0 0001 	movt	r0, #1
    e5bc:	2210      	movs	r2, #16
    e5be:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5c2:	f007 fbf3 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e5c6:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
    e5c8:	f64c 50c0 	movw	r0, #52672	; 0xcdc0
    e5cc:	f2c0 0001 	movt	r0, #1
    e5d0:	2210      	movs	r2, #16
    e5d2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5d6:	f007 fbe9 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e5da:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
    e5dc:	f64c 6004 	movw	r0, #52740	; 0xce04
    e5e0:	f2c0 0001 	movt	r0, #1
    e5e4:	2210      	movs	r2, #16
    e5e6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5ea:	f007 fbdf 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e5ee:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
    e5f0:	f64c 6058 	movw	r0, #52824	; 0xce58
    e5f4:	f2c0 0001 	movt	r0, #1
    e5f8:	2210      	movs	r2, #16
    e5fa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5fe:	f007 fbd5 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e602:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
    e604:	f64c 6068 	movw	r0, #52840	; 0xce68
    e608:	f2c0 0001 	movt	r0, #1
    e60c:	2210      	movs	r2, #16
    e60e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e612:	f007 fbcb 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e616:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
    e618:	f64c 1050 	movw	r0, #51536	; 0xc950
    e61c:	f2c0 0001 	movt	r0, #1
    e620:	f64c 6278 	movw	r2, #52856	; 0xce78
    e624:	f2c0 0201 	movt	r2, #1
    e628:	211c      	movs	r1, #28
    e62a:	f007 fba9 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e62e:	defe      	udf	#254	; 0xfe
    e630:	f64c 6088 	movw	r0, #52872	; 0xce88
    e634:	f2c0 0001 	movt	r0, #1
    e638:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e63c:	9967      	ldr	r1, [sp, #412]	; 0x19c
    e63e:	f007 fbb5 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e642:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
    e644:	f64c 1050 	movw	r0, #51536	; 0xc950
    e648:	f2c0 0001 	movt	r0, #1
    e64c:	f64c 6298 	movw	r2, #52888	; 0xce98
    e650:	f2c0 0201 	movt	r2, #1
    e654:	211c      	movs	r1, #28
    e656:	f007 fb93 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e65a:	defe      	udf	#254	; 0xfe
    e65c:	f64c 60b0 	movw	r0, #52912	; 0xceb0
    e660:	f2c0 0001 	movt	r0, #1
    e664:	f64c 6298 	movw	r2, #52888	; 0xce98
    e668:	f2c0 0201 	movt	r2, #1
    e66c:	2139      	movs	r1, #57	; 0x39
    e66e:	f007 fb87 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e672:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
    e674:	f64c 1050 	movw	r0, #51536	; 0xc950
    e678:	f2c0 0001 	movt	r0, #1
    e67c:	f64c 62ec 	movw	r2, #52972	; 0xceec
    e680:	f2c0 0201 	movt	r2, #1
    e684:	211c      	movs	r1, #28
    e686:	f007 fb7b 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e68a:	defe      	udf	#254	; 0xfe
    e68c:	f64c 60b0 	movw	r0, #52912	; 0xceb0
    e690:	f2c0 0001 	movt	r0, #1
    e694:	f64c 62ec 	movw	r2, #52972	; 0xceec
    e698:	f2c0 0201 	movt	r2, #1
    e69c:	2139      	movs	r1, #57	; 0x39
    e69e:	f007 fb6f 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e6a2:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
    e6a4:	f64c 7010 	movw	r0, #53008	; 0xcf10
    e6a8:	f2c0 0001 	movt	r0, #1
    e6ac:	f64c 62fc 	movw	r2, #52988	; 0xcefc
    e6b0:	f2c0 0201 	movt	r2, #1
    e6b4:	2121      	movs	r1, #33	; 0x21
    e6b6:	f007 fb63 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e6ba:	defe      	udf	#254	; 0xfe
    e6bc:	f64c 7050 	movw	r0, #53072	; 0xcf50
    e6c0:	f2c0 0001 	movt	r0, #1
    e6c4:	f64c 7234 	movw	r2, #53044	; 0xcf34
    e6c8:	f2c0 0201 	movt	r2, #1
    e6cc:	2123      	movs	r1, #35	; 0x23
    e6ce:	f007 fb57 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e6d2:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
    e6d4:	f64c 70b4 	movw	r0, #53172	; 0xcfb4
    e6d8:	f2c0 0001 	movt	r0, #1
    e6dc:	2210      	movs	r2, #16
    e6de:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e6e2:	f007 fb63 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e6e6:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
    e6e8:	f24d 0084 	movw	r0, #53380	; 0xd084
    e6ec:	f2c0 0001 	movt	r0, #1
    e6f0:	2210      	movs	r2, #16
    e6f2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e6f6:	f007 fb59 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e6fa:	defe      	udf	#254	; 0xfe
    e6fc:	f24d 0094 	movw	r0, #53396	; 0xd094
    e700:	f2c0 0001 	movt	r0, #1
    e704:	2210      	movs	r2, #16
    e706:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e70a:	f007 fb4f 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e70e:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    e710:	f24d 00e4 	movw	r0, #53476	; 0xd0e4
    e714:	f2c0 0001 	movt	r0, #1
    e718:	2210      	movs	r2, #16
    e71a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e71e:	f007 fb45 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e722:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
    e724:	f24d 00f4 	movw	r0, #53492	; 0xd0f4
    e728:	f2c0 0001 	movt	r0, #1
    e72c:	2210      	movs	r2, #16
    e72e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e732:	f007 fb3b 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e736:	defe      	udf	#254	; 0xfe
    e738:	f24d 1004 	movw	r0, #53508	; 0xd104
    e73c:	f2c0 0001 	movt	r0, #1
    e740:	2210      	movs	r2, #16
    e742:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e746:	f007 fb31 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e74a:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    e74c:	f24d 1058 	movw	r0, #53592	; 0xd158
    e750:	f2c0 0001 	movt	r0, #1
    e754:	2210      	movs	r2, #16
    e756:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e75a:	f007 fb27 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e75e:	defe      	udf	#254	; 0xfe
    e760:	f24d 1068 	movw	r0, #53608	; 0xd168
    e764:	f2c0 0001 	movt	r0, #1
    e768:	2210      	movs	r2, #16
    e76a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e76e:	f007 fb1d 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e772:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    e774:	f24d 1078 	movw	r0, #53624	; 0xd178
    e778:	f2c0 0001 	movt	r0, #1
    e77c:	2210      	movs	r2, #16
    e77e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e782:	f007 fb13 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e786:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
    e788:	f24d 10c8 	movw	r0, #53704	; 0xd1c8
    e78c:	f2c0 0001 	movt	r0, #1
    e790:	2210      	movs	r2, #16
    e792:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e796:	f007 fb09 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e79a:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
    e79c:	f24d 10d8 	movw	r0, #53720	; 0xd1d8
    e7a0:	f2c0 0001 	movt	r0, #1
    e7a4:	2210      	movs	r2, #16
    e7a6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7aa:	f007 faff 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7ae:	defe      	udf	#254	; 0xfe
    e7b0:	f24d 10e8 	movw	r0, #53736	; 0xd1e8
    e7b4:	f2c0 0001 	movt	r0, #1
    e7b8:	2210      	movs	r2, #16
    e7ba:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7be:	f007 faf5 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7c2:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    e7c4:	f24d 2038 	movw	r0, #53816	; 0xd238
    e7c8:	f2c0 0001 	movt	r0, #1
    e7cc:	2210      	movs	r2, #16
    e7ce:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7d2:	f007 faeb 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7d6:	defe      	udf	#254	; 0xfe
    e7d8:	f24d 2048 	movw	r0, #53832	; 0xd248
    e7dc:	f2c0 0001 	movt	r0, #1
    e7e0:	2210      	movs	r2, #16
    e7e2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e7e6:	f007 fae1 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7ea:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    e7ec:	f24d 2058 	movw	r0, #53848	; 0xd258
    e7f0:	f2c0 0001 	movt	r0, #1
    e7f4:	2210      	movs	r2, #16
    e7f6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7fa:	f007 fad7 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7fe:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    e800:	f24d 20a8 	movw	r0, #53928	; 0xd2a8
    e804:	f2c0 0001 	movt	r0, #1
    e808:	2210      	movs	r2, #16
    e80a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e80e:	f007 facd 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e812:	defe      	udf	#254	; 0xfe
    e814:	f24d 20b8 	movw	r0, #53944	; 0xd2b8
    e818:	f2c0 0001 	movt	r0, #1
    e81c:	2210      	movs	r2, #16
    e81e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e822:	f007 fac3 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e826:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    e828:	f24d 20c8 	movw	r0, #53960	; 0xd2c8
    e82c:	f2c0 0001 	movt	r0, #1
    e830:	2210      	movs	r2, #16
    e832:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e836:	f007 fab9 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e83a:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
    e83c:	f24d 3018 	movw	r0, #54040	; 0xd318
    e840:	f2c0 0001 	movt	r0, #1
    e844:	2210      	movs	r2, #16
    e846:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e84a:	f007 faaf 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e84e:	defe      	udf	#254	; 0xfe
    e850:	f24d 3028 	movw	r0, #54056	; 0xd328
    e854:	f2c0 0001 	movt	r0, #1
    e858:	2210      	movs	r2, #16
    e85a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e85e:	f007 faa5 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e862:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
    e864:	f24d 3078 	movw	r0, #54136	; 0xd378
    e868:	f2c0 0001 	movt	r0, #1
    e86c:	2210      	movs	r2, #16
    e86e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e872:	f007 fa9b 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e876:	defe      	udf	#254	; 0xfe
    e878:	f24d 3088 	movw	r0, #54152	; 0xd388
    e87c:	f2c0 0001 	movt	r0, #1
    e880:	2210      	movs	r2, #16
    e882:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e886:	f007 fa91 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e88a:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
    e88c:	f24d 30d8 	movw	r0, #54232	; 0xd3d8
    e890:	f2c0 0001 	movt	r0, #1
    e894:	2210      	movs	r2, #16
    e896:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e89a:	f007 fa87 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e89e:	defe      	udf	#254	; 0xfe
    e8a0:	f24d 30e8 	movw	r0, #54248	; 0xd3e8
    e8a4:	f2c0 0001 	movt	r0, #1
    e8a8:	2210      	movs	r2, #16
    e8aa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8ae:	f007 fa7d 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8b2:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
    e8b4:	f24d 4038 	movw	r0, #54328	; 0xd438
    e8b8:	f2c0 0001 	movt	r0, #1
    e8bc:	2210      	movs	r2, #16
    e8be:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e8c2:	f007 fa73 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8c6:	defe      	udf	#254	; 0xfe
    e8c8:	f24d 4048 	movw	r0, #54344	; 0xd448
    e8cc:	f2c0 0001 	movt	r0, #1
    e8d0:	2210      	movs	r2, #16
    e8d2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8d6:	f007 fa69 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8da:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
    e8dc:	f24d 4098 	movw	r0, #54424	; 0xd498
    e8e0:	f2c0 0001 	movt	r0, #1
    e8e4:	2210      	movs	r2, #16
    e8e6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8ea:	f007 fa5f 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8ee:	defe      	udf	#254	; 0xfe
    e8f0:	f24d 40a8 	movw	r0, #54440	; 0xd4a8
    e8f4:	f2c0 0001 	movt	r0, #1
    e8f8:	2210      	movs	r2, #16
    e8fa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8fe:	f007 fa55 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e902:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
    e904:	f24d 40f8 	movw	r0, #54520	; 0xd4f8
    e908:	f2c0 0001 	movt	r0, #1
    e90c:	2210      	movs	r2, #16
    e90e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e912:	f007 fa4b 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e916:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
    e918:	f24d 50e0 	movw	r0, #54752	; 0xd5e0
    e91c:	f2c0 0001 	movt	r0, #1
    e920:	2210      	movs	r2, #16
    e922:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e926:	f007 fa41 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e92a:	defe      	udf	#254	; 0xfe
    e92c:	f24d 50f0 	movw	r0, #54768	; 0xd5f0
    e930:	f2c0 0001 	movt	r0, #1
    e934:	2210      	movs	r2, #16
    e936:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e93a:	f007 fa37 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e93e:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
    e940:	f24d 6040 	movw	r0, #54848	; 0xd640
    e944:	f2c0 0001 	movt	r0, #1
    e948:	2210      	movs	r2, #16
    e94a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e94e:	f007 fa2d 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e952:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
    e954:	f24d 6090 	movw	r0, #54928	; 0xd690
    e958:	f2c0 0001 	movt	r0, #1
    e95c:	2210      	movs	r2, #16
    e95e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e962:	f007 fa23 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e966:	defe      	udf	#254	; 0xfe

0000e968 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    e968:	b580      	push	{r7, lr}
    e96a:	b086      	sub	sp, #24
    e96c:	9104      	str	r1, [sp, #16]
    e96e:	9205      	str	r2, [sp, #20]
    e970:	6809      	ldr	r1, [r1, #0]
    e972:	6809      	ldr	r1, [r1, #0]
    e974:	2300      	movs	r3, #0
    e976:	9301      	str	r3, [sp, #4]
    e978:	9102      	str	r1, [sp, #8]
    e97a:	9203      	str	r2, [sp, #12]
    e97c:	9901      	ldr	r1, [sp, #4]
    e97e:	9a02      	ldr	r2, [sp, #8]
    e980:	9b03      	ldr	r3, [sp, #12]
    e982:	f000 fa9d 	bl	eec0 <_ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E>
    e986:	e7ff      	b.n	e988 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE+0x20>
    e988:	b006      	add	sp, #24
    e98a:	bd80      	pop	{r7, pc}

0000e98c <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6a25aae91f88a8abE>:
    e98c:	b084      	sub	sp, #16
    e98e:	9002      	str	r0, [sp, #8]
    e990:	9103      	str	r1, [sp, #12]
    e992:	6800      	ldr	r0, [r0, #0]
    e994:	9000      	str	r0, [sp, #0]
    e996:	9101      	str	r1, [sp, #4]
    e998:	9800      	ldr	r0, [sp, #0]
    e99a:	9901      	ldr	r1, [sp, #4]
    e99c:	b004      	add	sp, #16
    e99e:	4770      	bx	lr

0000e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>:
    fn jump(&mut self, pc: u16) {
    e9a0:	b082      	sub	sp, #8
    e9a2:	460a      	mov	r2, r1
    e9a4:	9000      	str	r0, [sp, #0]
    e9a6:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
    e9aa:	8241      	strh	r1, [r0, #18]
    }
    e9ac:	b002      	add	sp, #8
    e9ae:	4770      	bx	lr

0000e9b0 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE>:
    fn load(&mut self, rom: &[u8]) {
    e9b0:	b580      	push	{r7, lr}
    e9b2:	b08a      	sub	sp, #40	; 0x28
    e9b4:	9105      	str	r1, [sp, #20]
    e9b6:	9206      	str	r2, [sp, #24]
    e9b8:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    e9ba:	3047      	adds	r0, #71	; 0x47
    e9bc:	9905      	ldr	r1, [sp, #20]
    e9be:	9a06      	ldr	r2, [sp, #24]
    e9c0:	9004      	str	r0, [sp, #16]
    e9c2:	4608      	mov	r0, r1
    e9c4:	4611      	mov	r1, r2
    e9c6:	f003 fcdd 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    e9ca:	9003      	str	r0, [sp, #12]
    e9cc:	e7ff      	b.n	e9ce <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x1e>
    e9ce:	9803      	ldr	r0, [sp, #12]
    e9d0:	f500 7100 	add.w	r1, r0, #512	; 0x200
    e9d4:	460a      	mov	r2, r1
    e9d6:	4281      	cmp	r1, r0
    e9d8:	9202      	str	r2, [sp, #8]
    e9da:	d318      	bcc.n	ea0e <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x5e>
    e9dc:	e7ff      	b.n	e9de <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x2e>
    e9de:	f44f 7000 	mov.w	r0, #512	; 0x200
    e9e2:	9007      	str	r0, [sp, #28]
    e9e4:	9802      	ldr	r0, [sp, #8]
    e9e6:	9008      	str	r0, [sp, #32]
    e9e8:	9a07      	ldr	r2, [sp, #28]
    e9ea:	9b08      	ldr	r3, [sp, #32]
    e9ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    e9f0:	9804      	ldr	r0, [sp, #16]
    e9f2:	f000 fb7a 	bl	f0ea <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E>
    e9f6:	9001      	str	r0, [sp, #4]
    e9f8:	9100      	str	r1, [sp, #0]
    e9fa:	e7ff      	b.n	e9fc <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x4c>
    e9fc:	9a05      	ldr	r2, [sp, #20]
    e9fe:	9b06      	ldr	r3, [sp, #24]
    ea00:	9801      	ldr	r0, [sp, #4]
    ea02:	9900      	ldr	r1, [sp, #0]
    ea04:	f7fa fa37 	bl	8e76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    ea08:	e7ff      	b.n	ea0a <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x5a>
    }
    ea0a:	b00a      	add	sp, #40	; 0x28
    ea0c:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    ea0e:	f64c 1050 	movw	r0, #51536	; 0xc950
    ea12:	f2c0 0001 	movt	r0, #1
    ea16:	f24d 72ec 	movw	r2, #55276	; 0xd7ec
    ea1a:	f2c0 0201 	movt	r2, #1
    ea1e:	211c      	movs	r1, #28
    ea20:	f007 f9ae 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ea24:	defe      	udf	#254	; 0xfe

0000ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>:
    fn next(&mut self) {
    ea26:	b580      	push	{r7, lr}
    ea28:	b084      	sub	sp, #16
    ea2a:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
    ea2c:	8a41      	ldrh	r1, [r0, #18]
    ea2e:	2202      	movs	r2, #2
    ea30:	9002      	str	r0, [sp, #8]
    ea32:	4608      	mov	r0, r1
    ea34:	4611      	mov	r1, r2
    ea36:	f000 fb1e 	bl	f076 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>
    ea3a:	9001      	str	r0, [sp, #4]
    ea3c:	e7ff      	b.n	ea3e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE+0x18>
    ea3e:	9802      	ldr	r0, [sp, #8]
    ea40:	9901      	ldr	r1, [sp, #4]
    ea42:	f7ff ffad 	bl	e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    ea46:	e7ff      	b.n	ea48 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE+0x22>
    }
    ea48:	b004      	add	sp, #16
    ea4a:	bd80      	pop	{r7, pc}

0000ea4c <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE>:
    fn push(&mut self, item: u16) {
    ea4c:	b580      	push	{r7, lr}
    ea4e:	b086      	sub	sp, #24
    ea50:	460a      	mov	r2, r1
    ea52:	9004      	str	r0, [sp, #16]
    ea54:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
    ea58:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    ea5c:	460b      	mov	r3, r1
    ea5e:	290f      	cmp	r1, #15
    ea60:	9003      	str	r0, [sp, #12]
    ea62:	9202      	str	r2, [sp, #8]
    ea64:	9301      	str	r3, [sp, #4]
    ea66:	d813      	bhi.n	ea90 <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE+0x44>
    ea68:	e7ff      	b.n	ea6a <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE+0x1e>
    ea6a:	9803      	ldr	r0, [sp, #12]
    ea6c:	9901      	ldr	r1, [sp, #4]
    ea6e:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    ea72:	9b02      	ldr	r3, [sp, #8]
    ea74:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
    ea76:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    ea7a:	2101      	movs	r1, #1
    ea7c:	f000 fa5e 	bl	ef3c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE>
    ea80:	9000      	str	r0, [sp, #0]
    ea82:	e7ff      	b.n	ea84 <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE+0x38>
    ea84:	9800      	ldr	r0, [sp, #0]
    ea86:	9903      	ldr	r1, [sp, #12]
    ea88:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
    ea8c:	b006      	add	sp, #24
    ea8e:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
    ea90:	f24d 70fc 	movw	r0, #55292	; 0xd7fc
    ea94:	f2c0 0001 	movt	r0, #1
    ea98:	2210      	movs	r2, #16
    ea9a:	9901      	ldr	r1, [sp, #4]
    ea9c:	f007 f986 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eaa0:	defe      	udf	#254	; 0xfe

0000eaa2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E>:
    fn tick(&mut self) {
    eaa2:	b580      	push	{r7, lr}
    eaa4:	b084      	sub	sp, #16
    eaa6:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
    eaa8:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    eaac:	2900      	cmp	r1, #0
    eaae:	9002      	str	r0, [sp, #8]
    eab0:	d00f      	beq.n	ead2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x30>
    eab2:	e7ff      	b.n	eab4 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x12>
            self.dt -= 1;
    eab4:	9802      	ldr	r0, [sp, #8]
    eab6:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    eaba:	3901      	subs	r1, #1
    eabc:	b2ca      	uxtb	r2, r1
    eabe:	460b      	mov	r3, r1
    eac0:	428a      	cmp	r2, r1
    eac2:	9301      	str	r3, [sp, #4]
    eac4:	d129      	bne.n	eb1a <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x78>
    eac6:	e7ff      	b.n	eac8 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x26>
    eac8:	9801      	ldr	r0, [sp, #4]
    eaca:	9902      	ldr	r1, [sp, #8]
    eacc:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
    ead0:	e7ff      	b.n	ead2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x30>
        if self.st > 0 {
    ead2:	9802      	ldr	r0, [sp, #8]
    ead4:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    ead8:	2900      	cmp	r1, #0
    eada:	d01c      	beq.n	eb16 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x74>
    eadc:	e7ff      	b.n	eade <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x3c>
            self.st -= 1;
    eade:	9802      	ldr	r0, [sp, #8]
    eae0:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    eae4:	3901      	subs	r1, #1
    eae6:	b2ca      	uxtb	r2, r1
    eae8:	460b      	mov	r3, r1
    eaea:	428a      	cmp	r2, r1
    eaec:	9300      	str	r3, [sp, #0]
    eaee:	d120      	bne.n	eb32 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x90>
    eaf0:	e7ff      	b.n	eaf2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x50>
    eaf2:	9800      	ldr	r0, [sp, #0]
    eaf4:	9902      	ldr	r1, [sp, #8]
    eaf6:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
    eafa:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
    eafe:	2a00      	cmp	r2, #0
    eb00:	d108      	bne.n	eb14 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x72>
    eb02:	e7ff      	b.n	eb04 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x62>
    eb04:	f241 0048 	movw	r0, #4168	; 0x1048
                self.hw.beep();
    eb08:	9902      	ldr	r1, [sp, #8]
    eb0a:	4408      	add	r0, r1
    eb0c:	f000 feca 	bl	f8a4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha9851d0b0cdc4725E>
    eb10:	e7ff      	b.n	eb12 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x70>
            if self.st == 0 {
    eb12:	e7ff      	b.n	eb14 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x72>
        if self.st > 0 {
    eb14:	e7ff      	b.n	eb16 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x74>
    }
    eb16:	b004      	add	sp, #16
    eb18:	bd80      	pop	{r7, pc}
            self.dt -= 1;
    eb1a:	f64c 7010 	movw	r0, #53008	; 0xcf10
    eb1e:	f2c0 0001 	movt	r0, #1
    eb22:	f64d 020c 	movw	r2, #55308	; 0xd80c
    eb26:	f2c0 0201 	movt	r2, #1
    eb2a:	2121      	movs	r1, #33	; 0x21
    eb2c:	f007 f928 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    eb30:	defe      	udf	#254	; 0xfe
            self.st -= 1;
    eb32:	f64c 7010 	movw	r0, #53008	; 0xcf10
    eb36:	f2c0 0001 	movt	r0, #1
    eb3a:	f64d 021c 	movw	r2, #55324	; 0xd81c
    eb3e:	f2c0 0201 	movt	r2, #1
    eb42:	2121      	movs	r1, #33	; 0x21
    eb44:	f007 f91c 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    eb48:	defe      	udf	#254	; 0xfe

0000eb4a <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E>:
    fn sched(&mut self) {
    eb4a:	b510      	push	{r4, lr}
    eb4c:	b098      	sub	sp, #96	; 0x60
    eb4e:	9015      	str	r0, [sp, #84]	; 0x54
    eb50:	f241 0148 	movw	r1, #4168	; 0x1048
        if self.hw.sched() {
    eb54:	4401      	add	r1, r0
    eb56:	900b      	str	r0, [sp, #44]	; 0x2c
    eb58:	4608      	mov	r0, r1
    eb5a:	f000 fea7 	bl	f8ac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E>
    eb5e:	900a      	str	r0, [sp, #40]	; 0x28
    eb60:	e7ff      	b.n	eb62 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x18>
    eb62:	980a      	ldr	r0, [sp, #40]	; 0x28
    eb64:	07c1      	lsls	r1, r0, #31
    eb66:	2900      	cmp	r1, #0
    eb68:	d005      	beq.n	eb76 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x2c>
    eb6a:	e7ff      	b.n	eb6c <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x22>
            self.shutdown();
    eb6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eb6e:	f000 f90e 	bl	ed8e <_ZN8libchip814Chip8$LT$T$GT$8shutdown17hb4ffb829681b047bE>
    eb72:	e7ff      	b.n	eb74 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x2a>
        if self.hw.sched() {
    eb74:	e7ff      	b.n	eb76 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x2c>
        if let Some(t) = self.time {
    eb76:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eb78:	6801      	ldr	r1, [r0, #0]
    eb7a:	2901      	cmp	r1, #1
    eb7c:	d009      	beq.n	eb92 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x48>
    eb7e:	e7ff      	b.n	eb80 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x36>
    eb80:	f241 0048 	movw	r0, #4168	; 0x1048
            self.time = Some(self.hw.clock());
    eb84:	990b      	ldr	r1, [sp, #44]	; 0x2c
    eb86:	4408      	add	r0, r1
    eb88:	f000 fe2a 	bl	f7e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>
    eb8c:	9109      	str	r1, [sp, #36]	; 0x24
    eb8e:	9008      	str	r0, [sp, #32]
    eb90:	e046      	b.n	ec20 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xd6>
        if let Some(t) = self.time {
    eb92:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eb94:	6881      	ldr	r1, [r0, #8]
    eb96:	68c2      	ldr	r2, [r0, #12]
    eb98:	9217      	str	r2, [sp, #92]	; 0x5c
    eb9a:	9116      	str	r1, [sp, #88]	; 0x58
    eb9c:	f241 0348 	movw	r3, #4168	; 0x1048
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    eba0:	4418      	add	r0, r3
    eba2:	9107      	str	r1, [sp, #28]
    eba4:	9206      	str	r2, [sp, #24]
    eba6:	f000 fe1b 	bl	f7e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>
    ebaa:	9105      	str	r1, [sp, #20]
    ebac:	9004      	str	r0, [sp, #16]
    ebae:	e7ff      	b.n	ebb0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x66>
    ebb0:	9804      	ldr	r0, [sp, #16]
    ebb2:	9905      	ldr	r1, [sp, #20]
    ebb4:	9a07      	ldr	r2, [sp, #28]
    ebb6:	9b06      	ldr	r3, [sp, #24]
    ebb8:	f000 fa7f 	bl	f0ba <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E>
    ebbc:	9103      	str	r1, [sp, #12]
    ebbe:	9002      	str	r0, [sp, #8]
    ebc0:	e7ff      	b.n	ebc2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x78>
    ebc2:	f245 002b 	movw	r0, #20523	; 0x502b
    ebc6:	f2c0 00fe 	movt	r0, #254	; 0xfe
    ebca:	9902      	ldr	r1, [sp, #8]
    ebcc:	1a08      	subs	r0, r1, r0
    ebce:	9a03      	ldr	r2, [sp, #12]
    ebd0:	f172 0300 	sbcs.w	r3, r2, #0
    ebd4:	d323      	bcc.n	ec1e <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xd4>
    ebd6:	e7ff      	b.n	ebd8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x8e>
                self.tick();
    ebd8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ebda:	f7ff ff62 	bl	eaa2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E>
    ebde:	e7ff      	b.n	ebe0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x96>
    ebe0:	f241 0048 	movw	r0, #4168	; 0x1048
                self.time = Some(self.hw.clock());
    ebe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ebe6:	4408      	add	r0, r1
    ebe8:	f000 fdfa 	bl	f7e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>
    ebec:	9101      	str	r1, [sp, #4]
    ebee:	9000      	str	r0, [sp, #0]
    ebf0:	e7ff      	b.n	ebf2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xa8>
    ebf2:	9800      	ldr	r0, [sp, #0]
    ebf4:	900e      	str	r0, [sp, #56]	; 0x38
    ebf6:	9901      	ldr	r1, [sp, #4]
    ebf8:	910f      	str	r1, [sp, #60]	; 0x3c
    ebfa:	2200      	movs	r2, #0
    ebfc:	920d      	str	r2, [sp, #52]	; 0x34
    ebfe:	2201      	movs	r2, #1
    ec00:	920c      	str	r2, [sp, #48]	; 0x30
    ec02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ec04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ec06:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    ec0a:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    ec0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ec10:	6063      	str	r3, [r4, #4]
    ec12:	6022      	str	r2, [r4, #0]
    ec14:	f8c4 e00c 	str.w	lr, [r4, #12]
    ec18:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    ec1c:	e7ff      	b.n	ec1e <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xd4>
        if let Some(t) = self.time {
    ec1e:	e015      	b.n	ec4c <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x102>
            self.time = Some(self.hw.clock());
    ec20:	9808      	ldr	r0, [sp, #32]
    ec22:	9012      	str	r0, [sp, #72]	; 0x48
    ec24:	9909      	ldr	r1, [sp, #36]	; 0x24
    ec26:	9113      	str	r1, [sp, #76]	; 0x4c
    ec28:	2200      	movs	r2, #0
    ec2a:	9211      	str	r2, [sp, #68]	; 0x44
    ec2c:	2201      	movs	r2, #1
    ec2e:	9210      	str	r2, [sp, #64]	; 0x40
    ec30:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ec32:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ec34:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    ec38:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
    ec3c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ec3e:	6063      	str	r3, [r4, #4]
    ec40:	6022      	str	r2, [r4, #0]
    ec42:	f8c4 e00c 	str.w	lr, [r4, #12]
    ec46:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
    ec4a:	e7ff      	b.n	ec4c <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x102>
    }
    ec4c:	b018      	add	sp, #96	; 0x60
    ec4e:	bd10      	pop	{r4, pc}

0000ec50 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E>:
    fn setup(&mut self) {
    ec50:	b580      	push	{r7, lr}
    ec52:	b088      	sub	sp, #32
    ec54:	9007      	str	r0, [sp, #28]
    ec56:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
    ec5a:	8241      	strh	r1, [r0, #18]
    ec5c:	f241 0148 	movw	r1, #4168	; 0x1048
        self.hw.vram_setsize(DISPS);
    ec60:	4401      	add	r1, r0
    ec62:	f64c 12e4 	movw	r2, #51684	; 0xc9e4
    ec66:	f2c0 0201 	movt	r2, #1
    ec6a:	6813      	ldr	r3, [r2, #0]
    ec6c:	6852      	ldr	r2, [r2, #4]
    ec6e:	9005      	str	r0, [sp, #20]
    ec70:	4608      	mov	r0, r1
    ec72:	4619      	mov	r1, r3
    ec74:	f000 fd5d 	bl	f732 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE>
    ec78:	e7ff      	b.n	ec7a <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x2a>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
    ec7a:	9805      	ldr	r0, [sp, #20]
    ec7c:	f100 0147 	add.w	r1, r0, #71	; 0x47
    ec80:	f245 002d 	movw	r0, #20525	; 0x502d
    ec84:	f2c0 0002 	movt	r0, #2
    ec88:	2250      	movs	r2, #80	; 0x50
    ec8a:	9104      	str	r1, [sp, #16]
    ec8c:	4611      	mov	r1, r2
    ec8e:	f003 fb79 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    ec92:	9003      	str	r0, [sp, #12]
    ec94:	e7ff      	b.n	ec96 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x46>
    ec96:	9803      	ldr	r0, [sp, #12]
    ec98:	9006      	str	r0, [sp, #24]
    ec9a:	9a06      	ldr	r2, [sp, #24]
    ec9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    eca0:	9804      	ldr	r0, [sp, #16]
    eca2:	f7fa f9e5 	bl	9070 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
    eca6:	9002      	str	r0, [sp, #8]
    eca8:	9101      	str	r1, [sp, #4]
    ecaa:	e7ff      	b.n	ecac <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x5c>
    ecac:	f245 022d 	movw	r2, #20525	; 0x502d
    ecb0:	f2c0 0202 	movt	r2, #2
    ecb4:	2350      	movs	r3, #80	; 0x50
    ecb6:	9802      	ldr	r0, [sp, #8]
    ecb8:	9901      	ldr	r1, [sp, #4]
    ecba:	f7fa f8dc 	bl	8e76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    ecbe:	e7ff      	b.n	ecc0 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x70>
    ecc0:	f241 0047 	movw	r0, #4167	; 0x1047
    ecc4:	2101      	movs	r1, #1
        self.running = true;
    ecc6:	9a05      	ldr	r2, [sp, #20]
    ecc8:	5411      	strb	r1, [r2, r0]
    }
    ecca:	b008      	add	sp, #32
    eccc:	bd80      	pop	{r7, pc}

0000ecce <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE>:
    fn waitkey(&mut self) -> u8 {
    ecce:	b580      	push	{r7, lr}
    ecd0:	b08c      	sub	sp, #48	; 0x30
    ecd2:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
    ecd4:	9005      	str	r0, [sp, #20]
    ecd6:	e7ff      	b.n	ecd8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xa>
    ecd8:	f241 0047 	movw	r0, #4167	; 0x1047
    ecdc:	9905      	ldr	r1, [sp, #20]
    ecde:	5c08      	ldrb	r0, [r1, r0]
    ece0:	07c0      	lsls	r0, r0, #31
    ece2:	2800      	cmp	r0, #0
    ece4:	d104      	bne.n	ecf0 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x22>
    ece6:	e7ff      	b.n	ece8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x1a>
    ece8:	2020      	movs	r0, #32
        return b' ';
    ecea:	f88d 001b 	strb.w	r0, [sp, #27]
    ecee:	e04a      	b.n	ed86 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xb8>
            self.sched();
    ecf0:	9805      	ldr	r0, [sp, #20]
    ecf2:	f7ff ff2a 	bl	eb4a <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E>
    ecf6:	e7ff      	b.n	ecf8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x2a>
    ecf8:	2000      	movs	r0, #0
            for i in 0..0xf {
    ecfa:	f88d 001c 	strb.w	r0, [sp, #28]
    ecfe:	200f      	movs	r0, #15
    ed00:	f88d 001d 	strb.w	r0, [sp, #29]
    ed04:	f89d 001c 	ldrb.w	r0, [sp, #28]
    ed08:	f89d 101d 	ldrb.w	r1, [sp, #29]
    ed0c:	f000 f8e2 	bl	eed4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6e7fb991422ea45dE>
    ed10:	9004      	str	r0, [sp, #16]
    ed12:	9103      	str	r1, [sp, #12]
    ed14:	e7ff      	b.n	ed16 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x48>
    ed16:	9804      	ldr	r0, [sp, #16]
    ed18:	f88d 0020 	strb.w	r0, [sp, #32]
    ed1c:	9903      	ldr	r1, [sp, #12]
    ed1e:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    ed22:	e7ff      	b.n	ed24 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x56>
    ed24:	a808      	add	r0, sp, #32
    ed26:	f000 f864 	bl	edf2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E>
    ed2a:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
    ed2e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    ed32:	e7ff      	b.n	ed34 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x66>
    ed34:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    ed38:	07c1      	lsls	r1, r0, #31
    ed3a:	2900      	cmp	r1, #0
    ed3c:	d001      	beq.n	ed42 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x74>
    ed3e:	e7ff      	b.n	ed40 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x72>
    ed40:	e001      	b.n	ed46 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x78>
        while self.running {
    ed42:	e7c9      	b.n	ecd8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xa>
            for i in 0..0xf {
    ed44:	defe      	udf	#254	; 0xfe
    ed46:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    ed4a:	4601      	mov	r1, r0
    ed4c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    ed50:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    ed54:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    ed58:	f241 0248 	movw	r2, #4168	; 0x1048
                if self.hw.key(i) {
    ed5c:	9b05      	ldr	r3, [sp, #20]
    ed5e:	441a      	add	r2, r3
    ed60:	9002      	str	r0, [sp, #8]
    ed62:	4610      	mov	r0, r2
    ed64:	9a02      	ldr	r2, [sp, #8]
    ed66:	9101      	str	r1, [sp, #4]
    ed68:	4611      	mov	r1, r2
    ed6a:	f000 fb51 	bl	f410 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>
    ed6e:	9000      	str	r0, [sp, #0]
    ed70:	e7ff      	b.n	ed72 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xa4>
    ed72:	9800      	ldr	r0, [sp, #0]
    ed74:	07c1      	lsls	r1, r0, #31
    ed76:	2900      	cmp	r1, #0
    ed78:	d101      	bne.n	ed7e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xb0>
    ed7a:	e7ff      	b.n	ed7c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xae>
            for i in 0..0xf {
    ed7c:	e7d2      	b.n	ed24 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x56>
                    return i;
    ed7e:	9801      	ldr	r0, [sp, #4]
    ed80:	f88d 001b 	strb.w	r0, [sp, #27]
    ed84:	e7ff      	b.n	ed86 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xb8>
    }
    ed86:	f89d 001b 	ldrb.w	r0, [sp, #27]
    ed8a:	b00c      	add	sp, #48	; 0x30
    ed8c:	bd80      	pop	{r7, pc}

0000ed8e <_ZN8libchip814Chip8$LT$T$GT$8shutdown17hb4ffb829681b047bE>:
    fn shutdown(&mut self) {
    ed8e:	b081      	sub	sp, #4
    ed90:	9000      	str	r0, [sp, #0]
    ed92:	f241 0147 	movw	r1, #4167	; 0x1047
    ed96:	2200      	movs	r2, #0
        self.running = false;
    ed98:	5442      	strb	r2, [r0, r1]
    }
    ed9a:	b001      	add	sp, #4
    ed9c:	4770      	bx	lr

0000ed9e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E>:
    ed9e:	b08a      	sub	sp, #40	; 0x28
    eda0:	9107      	str	r1, [sp, #28]
    eda2:	9208      	str	r2, [sp, #32]
    eda4:	f8d0 c000 	ldr.w	ip, [r0]
    eda8:	f1bc 0f00 	cmp.w	ip, #0
    edac:	9305      	str	r3, [sp, #20]
    edae:	9204      	str	r2, [sp, #16]
    edb0:	9103      	str	r1, [sp, #12]
    edb2:	9002      	str	r0, [sp, #8]
    edb4:	d011      	beq.n	edda <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x3c>
    edb6:	e7ff      	b.n	edb8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x1a>
    edb8:	9802      	ldr	r0, [sp, #8]
    edba:	6841      	ldr	r1, [r0, #4]
    edbc:	9106      	str	r1, [sp, #24]
    edbe:	4669      	mov	r1, sp
    edc0:	9a05      	ldr	r2, [sp, #20]
    edc2:	600a      	str	r2, [r1, #0]
    edc4:	f64d 032c 	movw	r3, #55340	; 0xd82c
    edc8:	f2c0 0301 	movt	r3, #1
    edcc:	aa06      	add	r2, sp, #24
    edce:	9803      	ldr	r0, [sp, #12]
    edd0:	9904      	ldr	r1, [sp, #16]
    edd2:	f006 ffa7 	bl	15d24 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    edd6:	defe      	udf	#254	; 0xfe
    edd8:	defe      	udf	#254	; 0xfe
    edda:	9802      	ldr	r0, [sp, #8]
    eddc:	6841      	ldr	r1, [r0, #4]
    edde:	9109      	str	r1, [sp, #36]	; 0x24
    ede0:	6802      	ldr	r2, [r0, #0]
    ede2:	2a00      	cmp	r2, #0
    ede4:	9101      	str	r1, [sp, #4]
    ede6:	d103      	bne.n	edf0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x52>
    ede8:	e7ff      	b.n	edea <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x4c>
    edea:	9801      	ldr	r0, [sp, #4]
    edec:	b00a      	add	sp, #40	; 0x28
    edee:	4770      	bx	lr
    edf0:	e7fb      	b.n	edea <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x4c>

0000edf2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E>:
    edf2:	b580      	push	{r7, lr}
    edf4:	b086      	sub	sp, #24
    edf6:	9005      	str	r0, [sp, #20]
    edf8:	2100      	movs	r1, #0
    edfa:	f88d 1013 	strb.w	r1, [sp, #19]
    edfe:	1c41      	adds	r1, r0, #1
    ee00:	9002      	str	r0, [sp, #8]
    ee02:	f002 ff29 	bl	11c58 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h0340384168a45934E>
    ee06:	9001      	str	r0, [sp, #4]
    ee08:	e7ff      	b.n	ee0a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x18>
    ee0a:	9801      	ldr	r0, [sp, #4]
    ee0c:	07c1      	lsls	r1, r0, #31
    ee0e:	2900      	cmp	r1, #0
    ee10:	d104      	bne.n	ee1c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x2a>
    ee12:	e7ff      	b.n	ee14 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x22>
    ee14:	2000      	movs	r0, #0
    ee16:	f88d 000c 	strb.w	r0, [sp, #12]
    ee1a:	e02c      	b.n	ee76 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x84>
    ee1c:	2001      	movs	r0, #1
    ee1e:	f88d 0013 	strb.w	r0, [sp, #19]
    ee22:	9902      	ldr	r1, [sp, #8]
    ee24:	9000      	str	r0, [sp, #0]
    ee26:	4608      	mov	r0, r1
    ee28:	9900      	ldr	r1, [sp, #0]
    ee2a:	f000 f973 	bl	f114 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E>
    ee2e:	f88d 1011 	strb.w	r1, [sp, #17]
    ee32:	f88d 0010 	strb.w	r0, [sp, #16]
    ee36:	e7ff      	b.n	ee38 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x46>
    ee38:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ee3c:	07c0      	lsls	r0, r0, #31
    ee3e:	2800      	cmp	r0, #0
    ee40:	d104      	bne.n	ee4c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x5a>
    ee42:	e7ff      	b.n	ee44 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x52>
    ee44:	2000      	movs	r0, #0
    ee46:	f88d 000c 	strb.w	r0, [sp, #12]
    ee4a:	e029      	b.n	eea0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xae>
    ee4c:	2000      	movs	r0, #0
    ee4e:	f88d 0013 	strb.w	r0, [sp, #19]
    ee52:	f89d 0011 	ldrb.w	r0, [sp, #17]
    ee56:	f88d 0012 	strb.w	r0, [sp, #18]
    ee5a:	f10d 0012 	add.w	r0, sp, #18
    ee5e:	9902      	ldr	r1, [sp, #8]
    ee60:	f002 fdcf 	bl	11a02 <_ZN4core3mem4swap17h21afb25e2d195463E>
    ee64:	e7ff      	b.n	ee66 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x74>
    ee66:	f89d 0012 	ldrb.w	r0, [sp, #18]
    ee6a:	f88d 000d 	strb.w	r0, [sp, #13]
    ee6e:	2001      	movs	r0, #1
    ee70:	f88d 000c 	strb.w	r0, [sp, #12]
    ee74:	e014      	b.n	eea0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xae>
    ee76:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ee7a:	f89d 100d 	ldrb.w	r1, [sp, #13]
    ee7e:	b006      	add	sp, #24
    ee80:	bd80      	pop	{r7, pc}
    ee82:	2000      	movs	r0, #0
    ee84:	f88d 0013 	strb.w	r0, [sp, #19]
    ee88:	e7f5      	b.n	ee76 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x84>
    ee8a:	f89d 0013 	ldrb.w	r0, [sp, #19]
    ee8e:	07c0      	lsls	r0, r0, #31
    ee90:	2800      	cmp	r0, #0
    ee92:	d0f6      	beq.n	ee82 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x90>
    ee94:	e7ff      	b.n	ee96 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xa4>
    ee96:	2000      	movs	r0, #0
    ee98:	f88d 0013 	strb.w	r0, [sp, #19]
    ee9c:	e7f1      	b.n	ee82 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x90>
    ee9e:	e7f0      	b.n	ee82 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x90>
    eea0:	f89d 0010 	ldrb.w	r0, [sp, #16]
    eea4:	07c0      	lsls	r0, r0, #31
    eea6:	2800      	cmp	r0, #0
    eea8:	d1ef      	bne.n	ee8a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x98>
    eeaa:	e7f8      	b.n	ee9e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xac>

0000eeac <_ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E>:
    eeac:	b580      	push	{r7, lr}
    eeae:	b084      	sub	sp, #16
    eeb0:	9101      	str	r1, [sp, #4]
    eeb2:	9202      	str	r2, [sp, #8]
    eeb4:	9303      	str	r3, [sp, #12]
    eeb6:	f000 f96a 	bl	f18e <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h116a6636383259eeE>
    eeba:	e7ff      	b.n	eebc <_ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E+0x10>
    eebc:	b004      	add	sp, #16
    eebe:	bd80      	pop	{r7, pc}

0000eec0 <_ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E>:
    eec0:	b580      	push	{r7, lr}
    eec2:	b084      	sub	sp, #16
    eec4:	9101      	str	r1, [sp, #4]
    eec6:	9202      	str	r2, [sp, #8]
    eec8:	9303      	str	r3, [sp, #12]
    eeca:	f000 f969 	bl	f1a0 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1647783578bb3807E>
    eece:	e7ff      	b.n	eed0 <_ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E+0x10>
    eed0:	b004      	add	sp, #16
    eed2:	bd80      	pop	{r7, pc}

0000eed4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6e7fb991422ea45dE>:
    eed4:	b081      	sub	sp, #4
    eed6:	460a      	mov	r2, r1
    eed8:	4603      	mov	r3, r0
    eeda:	f88d 0000 	strb.w	r0, [sp]
    eede:	f88d 1001 	strb.w	r1, [sp, #1]
    eee2:	b001      	add	sp, #4
    eee4:	4770      	bx	lr

0000eee6 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E>:
    eee6:	b580      	push	{r7, lr}
    eee8:	b086      	sub	sp, #24
    eeea:	460a      	mov	r2, r1
    eeec:	4603      	mov	r3, r0
    eeee:	f88d 0014 	strb.w	r0, [sp, #20]
    eef2:	f88d 1015 	strb.w	r1, [sp, #21]
    eef6:	9203      	str	r2, [sp, #12]
    eef8:	9302      	str	r3, [sp, #8]
    eefa:	f000 f865 	bl	efc8 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E>
    eefe:	9001      	str	r0, [sp, #4]
    ef00:	9100      	str	r1, [sp, #0]
    ef02:	e7ff      	b.n	ef04 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x1e>
    ef04:	9801      	ldr	r0, [sp, #4]
    ef06:	f88d 0016 	strb.w	r0, [sp, #22]
    ef0a:	9900      	ldr	r1, [sp, #0]
    ef0c:	f001 0201 	and.w	r2, r1, #1
    ef10:	f88d 2017 	strb.w	r2, [sp, #23]
    ef14:	2a00      	cmp	r2, #0
    ef16:	d107      	bne.n	ef28 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x42>
    ef18:	e7ff      	b.n	ef1a <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x34>
    ef1a:	9801      	ldr	r0, [sp, #4]
    ef1c:	f88d 0011 	strb.w	r0, [sp, #17]
    ef20:	2101      	movs	r1, #1
    ef22:	f88d 1010 	strb.w	r1, [sp, #16]
    ef26:	e003      	b.n	ef30 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x4a>
    ef28:	2000      	movs	r0, #0
    ef2a:	f88d 0010 	strb.w	r0, [sp, #16]
    ef2e:	e7ff      	b.n	ef30 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x4a>
    ef30:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ef34:	f89d 1011 	ldrb.w	r1, [sp, #17]
    ef38:	b006      	add	sp, #24
    ef3a:	bd80      	pop	{r7, pc}

0000ef3c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE>:
    ef3c:	b082      	sub	sp, #8
    ef3e:	460a      	mov	r2, r1
    ef40:	4603      	mov	r3, r0
    ef42:	f88d 0005 	strb.w	r0, [sp, #5]
    ef46:	f88d 1006 	strb.w	r1, [sp, #6]
    ef4a:	4408      	add	r0, r1
    ef4c:	f88d 0007 	strb.w	r0, [sp, #7]
    ef50:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ef54:	9000      	str	r0, [sp, #0]
    ef56:	e7ff      	b.n	ef58 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE+0x1c>
    ef58:	9800      	ldr	r0, [sp, #0]
    ef5a:	b002      	add	sp, #8
    ef5c:	4770      	bx	lr

0000ef5e <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E>:
    ef5e:	b084      	sub	sp, #16
    ef60:	4602      	mov	r2, r0
    ef62:	f88d 0007 	strb.w	r0, [sp, #7]
    ef66:	9102      	str	r1, [sp, #8]
    ef68:	f001 0107 	and.w	r1, r1, #7
    ef6c:	4088      	lsls	r0, r1
    ef6e:	f88d 000f 	strb.w	r0, [sp, #15]
    ef72:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ef76:	9000      	str	r0, [sp, #0]
    ef78:	e7ff      	b.n	ef7a <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E+0x1c>
    ef7a:	9800      	ldr	r0, [sp, #0]
    ef7c:	b004      	add	sp, #16
    ef7e:	4770      	bx	lr

0000ef80 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE>:
    ef80:	b084      	sub	sp, #16
    ef82:	b2c2      	uxtb	r2, r0
    ef84:	4603      	mov	r3, r0
    ef86:	f88d 0007 	strb.w	r0, [sp, #7]
    ef8a:	9102      	str	r1, [sp, #8]
    ef8c:	f001 0007 	and.w	r0, r1, #7
    ef90:	fa22 f000 	lsr.w	r0, r2, r0
    ef94:	f88d 000f 	strb.w	r0, [sp, #15]
    ef98:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ef9c:	9000      	str	r0, [sp, #0]
    ef9e:	e7ff      	b.n	efa0 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE+0x20>
    efa0:	9800      	ldr	r0, [sp, #0]
    efa2:	b004      	add	sp, #16
    efa4:	4770      	bx	lr

0000efa6 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE>:
    efa6:	b082      	sub	sp, #8
    efa8:	460a      	mov	r2, r1
    efaa:	4603      	mov	r3, r0
    efac:	f88d 0005 	strb.w	r0, [sp, #5]
    efb0:	f88d 1006 	strb.w	r1, [sp, #6]
    efb4:	1a40      	subs	r0, r0, r1
    efb6:	f88d 0007 	strb.w	r0, [sp, #7]
    efba:	f89d 0007 	ldrb.w	r0, [sp, #7]
    efbe:	9000      	str	r0, [sp, #0]
    efc0:	e7ff      	b.n	efc2 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE+0x1c>
    efc2:	9800      	ldr	r0, [sp, #0]
    efc4:	b002      	add	sp, #8
    efc6:	4770      	bx	lr

0000efc8 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E>:
    efc8:	b084      	sub	sp, #16
    efca:	b2c2      	uxtb	r2, r0
    efcc:	460b      	mov	r3, r1
    efce:	4684      	mov	ip, r0
    efd0:	f88d 000a 	strb.w	r0, [sp, #10]
    efd4:	f88d 100b 	strb.w	r1, [sp, #11]
    efd8:	fa52 f081 	uxtab	r0, r2, r1
    efdc:	b2c1      	uxtb	r1, r0
    efde:	1a09      	subs	r1, r1, r0
    efe0:	bf18      	it	ne
    efe2:	2101      	movne	r1, #1
    efe4:	f88d 000c 	strb.w	r0, [sp, #12]
    efe8:	f88d 100d 	strb.w	r1, [sp, #13]
    efec:	f89d 000c 	ldrb.w	r0, [sp, #12]
    eff0:	f89d 100d 	ldrb.w	r1, [sp, #13]
    eff4:	9001      	str	r0, [sp, #4]
    eff6:	9100      	str	r1, [sp, #0]
    eff8:	e7ff      	b.n	effa <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E+0x32>
    effa:	9801      	ldr	r0, [sp, #4]
    effc:	f88d 000e 	strb.w	r0, [sp, #14]
    f000:	9900      	ldr	r1, [sp, #0]
    f002:	f001 0201 	and.w	r2, r1, #1
    f006:	f88d 200f 	strb.w	r2, [sp, #15]
    f00a:	f88d 0008 	strb.w	r0, [sp, #8]
    f00e:	f88d 2009 	strb.w	r2, [sp, #9]
    f012:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f016:	f89d 1009 	ldrb.w	r1, [sp, #9]
    f01a:	b004      	add	sp, #16
    f01c:	4770      	bx	lr

0000f01e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE>:
    f01e:	b580      	push	{r7, lr}
    f020:	b084      	sub	sp, #16
    f022:	b2ca      	uxtb	r2, r1
    f024:	b2c3      	uxtb	r3, r0
    f026:	468c      	mov	ip, r1
    f028:	4686      	mov	lr, r0
    f02a:	f88d 000a 	strb.w	r0, [sp, #10]
    f02e:	f88d 100b 	strb.w	r1, [sp, #11]
    f032:	1a98      	subs	r0, r3, r2
    f034:	b2c1      	uxtb	r1, r0
    f036:	1a09      	subs	r1, r1, r0
    f038:	bf18      	it	ne
    f03a:	2101      	movne	r1, #1
    f03c:	f88d 000c 	strb.w	r0, [sp, #12]
    f040:	f88d 100d 	strb.w	r1, [sp, #13]
    f044:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f048:	f89d 100d 	ldrb.w	r1, [sp, #13]
    f04c:	9001      	str	r0, [sp, #4]
    f04e:	9100      	str	r1, [sp, #0]
    f050:	e7ff      	b.n	f052 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE+0x34>
    f052:	9801      	ldr	r0, [sp, #4]
    f054:	f88d 000e 	strb.w	r0, [sp, #14]
    f058:	9900      	ldr	r1, [sp, #0]
    f05a:	f001 0201 	and.w	r2, r1, #1
    f05e:	f88d 200f 	strb.w	r2, [sp, #15]
    f062:	f88d 0008 	strb.w	r0, [sp, #8]
    f066:	f88d 2009 	strb.w	r2, [sp, #9]
    f06a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f06e:	f89d 1009 	ldrb.w	r1, [sp, #9]
    f072:	b004      	add	sp, #16
    f074:	bd80      	pop	{r7, pc}

0000f076 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>:
    f076:	b083      	sub	sp, #12
    f078:	460a      	mov	r2, r1
    f07a:	4603      	mov	r3, r0
    f07c:	f8ad 0006 	strh.w	r0, [sp, #6]
    f080:	f8ad 1008 	strh.w	r1, [sp, #8]
    f084:	4408      	add	r0, r1
    f086:	f8ad 000a 	strh.w	r0, [sp, #10]
    f08a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    f08e:	9000      	str	r0, [sp, #0]
    f090:	e7ff      	b.n	f092 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E+0x1c>
    f092:	9800      	ldr	r0, [sp, #0]
    f094:	b003      	add	sp, #12
    f096:	4770      	bx	lr

0000f098 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>:
    f098:	b083      	sub	sp, #12
    f09a:	460a      	mov	r2, r1
    f09c:	4603      	mov	r3, r0
    f09e:	f8ad 0006 	strh.w	r0, [sp, #6]
    f0a2:	f8ad 1008 	strh.w	r1, [sp, #8]
    f0a6:	1a40      	subs	r0, r0, r1
    f0a8:	f8ad 000a 	strh.w	r0, [sp, #10]
    f0ac:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    f0b0:	9000      	str	r0, [sp, #0]
    f0b2:	e7ff      	b.n	f0b4 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E+0x1c>
    f0b4:	9800      	ldr	r0, [sp, #0]
    f0b6:	b003      	add	sp, #12
    f0b8:	4770      	bx	lr

0000f0ba <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E>:
    f0ba:	b5b0      	push	{r4, r5, r7, lr}
    f0bc:	b088      	sub	sp, #32
    f0be:	469c      	mov	ip, r3
    f0c0:	4696      	mov	lr, r2
    f0c2:	460c      	mov	r4, r1
    f0c4:	4605      	mov	r5, r0
    f0c6:	9103      	str	r1, [sp, #12]
    f0c8:	9002      	str	r0, [sp, #8]
    f0ca:	9305      	str	r3, [sp, #20]
    f0cc:	9204      	str	r2, [sp, #16]
    f0ce:	1a80      	subs	r0, r0, r2
    f0d0:	eb61 0103 	sbc.w	r1, r1, r3
    f0d4:	9107      	str	r1, [sp, #28]
    f0d6:	9006      	str	r0, [sp, #24]
    f0d8:	9806      	ldr	r0, [sp, #24]
    f0da:	9907      	ldr	r1, [sp, #28]
    f0dc:	9001      	str	r0, [sp, #4]
    f0de:	9100      	str	r1, [sp, #0]
    f0e0:	e7ff      	b.n	f0e2 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E+0x28>
    f0e2:	9801      	ldr	r0, [sp, #4]
    f0e4:	9900      	ldr	r1, [sp, #0]
    f0e6:	b008      	add	sp, #32
    f0e8:	bdb0      	pop	{r4, r5, r7, pc}

0000f0ea <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E>:
    f0ea:	b580      	push	{r7, lr}
    f0ec:	b088      	sub	sp, #32
    f0ee:	9004      	str	r0, [sp, #16]
    f0f0:	9105      	str	r1, [sp, #20]
    f0f2:	9206      	str	r2, [sp, #24]
    f0f4:	9307      	str	r3, [sp, #28]
    f0f6:	9003      	str	r0, [sp, #12]
    f0f8:	4610      	mov	r0, r2
    f0fa:	9102      	str	r1, [sp, #8]
    f0fc:	4619      	mov	r1, r3
    f0fe:	9a03      	ldr	r2, [sp, #12]
    f100:	9b02      	ldr	r3, [sp, #8]
    f102:	f7f9 fdfb 	bl	8cfc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    f106:	9001      	str	r0, [sp, #4]
    f108:	9100      	str	r1, [sp, #0]
    f10a:	e7ff      	b.n	f10c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E+0x22>
    f10c:	9801      	ldr	r0, [sp, #4]
    f10e:	9900      	ldr	r1, [sp, #0]
    f110:	b008      	add	sp, #32
    f112:	bd80      	pop	{r7, pc}

0000f114 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E>:
    f114:	b580      	push	{r7, lr}
    f116:	b088      	sub	sp, #32
    f118:	9005      	str	r0, [sp, #20]
    f11a:	9106      	str	r1, [sp, #24]
    f11c:	9002      	str	r0, [sp, #8]
    f11e:	4608      	mov	r0, r1
    f120:	f006 f87a 	bl	15218 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE>
    f124:	f88d 1011 	strb.w	r1, [sp, #17]
    f128:	f88d 0010 	strb.w	r0, [sp, #16]
    f12c:	e7ff      	b.n	f12e <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x1a>
    f12e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    f132:	07c1      	lsls	r1, r0, #31
    f134:	2900      	cmp	r1, #0
    f136:	d005      	beq.n	f144 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x30>
    f138:	e7ff      	b.n	f13a <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x26>
    f13a:	2000      	movs	r0, #0
    f13c:	f88d 000c 	strb.w	r0, [sp, #12]
    f140:	e011      	b.n	f166 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x52>
    f142:	defe      	udf	#254	; 0xfe
    f144:	f89d 0011 	ldrb.w	r0, [sp, #17]
    f148:	f88d 001f 	strb.w	r0, [sp, #31]
    f14c:	9902      	ldr	r1, [sp, #8]
    f14e:	780a      	ldrb	r2, [r1, #0]
    f150:	9001      	str	r0, [sp, #4]
    f152:	4610      	mov	r0, r2
    f154:	9901      	ldr	r1, [sp, #4]
    f156:	f7ff fec6 	bl	eee6 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E>
    f15a:	f88d 100d 	strb.w	r1, [sp, #13]
    f15e:	f88d 000c 	strb.w	r0, [sp, #12]
    f162:	e7ff      	b.n	f164 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x50>
    f164:	e7ff      	b.n	f166 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x52>
    f166:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f16a:	f89d 100d 	ldrb.w	r1, [sp, #13]
    f16e:	b008      	add	sp, #32
    f170:	bd80      	pop	{r7, pc}

0000f172 <_ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E>:
    f172:	b580      	push	{r7, lr}
    f174:	b084      	sub	sp, #16
    f176:	680a      	ldr	r2, [r1, #0]
    f178:	684b      	ldr	r3, [r1, #4]
    f17a:	6889      	ldr	r1, [r1, #8]
    f17c:	9103      	str	r1, [sp, #12]
    f17e:	9302      	str	r3, [sp, #8]
    f180:	9201      	str	r2, [sp, #4]
    f182:	a901      	add	r1, sp, #4
    f184:	f002 fce8 	bl	11b58 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E>
    f188:	e7ff      	b.n	f18a <_ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E+0x18>
    f18a:	b004      	add	sp, #16
    f18c:	bd80      	pop	{r7, pc}

0000f18e <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h116a6636383259eeE>:
    f18e:	b083      	sub	sp, #12
    f190:	9100      	str	r1, [sp, #0]
    f192:	9201      	str	r2, [sp, #4]
    f194:	9302      	str	r3, [sp, #8]
    f196:	6001      	str	r1, [r0, #0]
    f198:	6042      	str	r2, [r0, #4]
    f19a:	6083      	str	r3, [r0, #8]
    f19c:	b003      	add	sp, #12
    f19e:	4770      	bx	lr

0000f1a0 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1647783578bb3807E>:
    f1a0:	b083      	sub	sp, #12
    f1a2:	9100      	str	r1, [sp, #0]
    f1a4:	9201      	str	r2, [sp, #4]
    f1a6:	9302      	str	r3, [sp, #8]
    f1a8:	6001      	str	r1, [r0, #0]
    f1aa:	6042      	str	r2, [r0, #4]
    f1ac:	6083      	str	r3, [r0, #8]
    f1ae:	b003      	add	sp, #12
    f1b0:	4770      	bx	lr

0000f1b2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc3726000bdb855aE>:
    f1b2:	680a      	ldr	r2, [r1, #0]
    f1b4:	684b      	ldr	r3, [r1, #4]
    f1b6:	6889      	ldr	r1, [r1, #8]
    f1b8:	6081      	str	r1, [r0, #8]
    f1ba:	6043      	str	r3, [r0, #4]
    f1bc:	6002      	str	r2, [r0, #0]
    f1be:	4770      	bx	lr

0000f1c0 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E>:
    f1c0:	b580      	push	{r7, lr}
    f1c2:	b086      	sub	sp, #24
    f1c4:	9105      	str	r1, [sp, #20]
    f1c6:	9004      	str	r0, [sp, #16]
    f1c8:	4608      	mov	r0, r1
    f1ca:	9103      	str	r1, [sp, #12]
    f1cc:	f003 f876 	bl	122bc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f1d0:	9002      	str	r0, [sp, #8]
    f1d2:	9101      	str	r1, [sp, #4]
    f1d4:	e7ff      	b.n	f1d6 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E+0x16>
    f1d6:	9803      	ldr	r0, [sp, #12]
    f1d8:	f100 0308 	add.w	r3, r0, #8
    f1dc:	9804      	ldr	r0, [sp, #16]
    f1de:	9902      	ldr	r1, [sp, #8]
    f1e0:	9a01      	ldr	r2, [sp, #4]
    f1e2:	f7f9 fb43 	bl	886c <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE>
    f1e6:	e7ff      	b.n	f1e8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E+0x28>
    f1e8:	b006      	add	sp, #24
    f1ea:	bd80      	pop	{r7, pc}

0000f1ec <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE>:
    f1ec:	b580      	push	{r7, lr}
    f1ee:	b086      	sub	sp, #24
    f1f0:	9105      	str	r1, [sp, #20]
    f1f2:	9004      	str	r0, [sp, #16]
    f1f4:	4608      	mov	r0, r1
    f1f6:	9103      	str	r1, [sp, #12]
    f1f8:	f003 f860 	bl	122bc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f1fc:	9002      	str	r0, [sp, #8]
    f1fe:	9101      	str	r1, [sp, #4]
    f200:	e7ff      	b.n	f202 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE+0x16>
    f202:	9803      	ldr	r0, [sp, #12]
    f204:	f100 0308 	add.w	r3, r0, #8
    f208:	9804      	ldr	r0, [sp, #16]
    f20a:	9902      	ldr	r1, [sp, #8]
    f20c:	9a01      	ldr	r2, [sp, #4]
    f20e:	f7f9 fae0 	bl	87d2 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE>
    f212:	e7ff      	b.n	f214 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE+0x28>
    f214:	b006      	add	sp, #24
    f216:	bd80      	pop	{r7, pc}

0000f218 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E>:
const PIXEL_WIDTH: usize = 3;
#[cfg(not(feature = "chip8_curve"))]  //  If we are not rendering CHIP8 Emulator as curved surface...
const PIXEL_HEIGHT: usize = 5;

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    f218:	b580      	push	{r7, lr}
    f21a:	b0a4      	sub	sp, #144	; 0x90
    console::print("Rust CHIP8\n"); console::flush();
    f21c:	f64d 003c 	movw	r0, #55356	; 0xd83c
    f220:	f2c0 0001 	movt	r0, #1
    f224:	210b      	movs	r1, #11
    f226:	f7f9 ff67 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f22a:	e7ff      	b.n	f22c <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x14>
    f22c:	f7f9 ffaa 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f230:	e7ff      	b.n	f232 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x1a>
    f232:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    f234:	900e      	str	r0, [sp, #56]	; 0x38
    f236:	990e      	ldr	r1, [sp, #56]	; 0x38
    f238:	f002 fe46 	bl	11ec8 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    f23c:	900d      	str	r0, [sp, #52]	; 0x34
    f23e:	910c      	str	r1, [sp, #48]	; 0x30
    f240:	e7ff      	b.n	f242 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x2a>
    f242:	20ef      	movs	r0, #239	; 0xef
    f244:	900b      	str	r0, [sp, #44]	; 0x2c
    f246:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f248:	f002 fe3e 	bl	11ec8 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    f24c:	900a      	str	r0, [sp, #40]	; 0x28
    f24e:	9109      	str	r1, [sp, #36]	; 0x24
    f250:	e7ff      	b.n	f252 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x3a>
    let background = Rectangle::<Rgb565>
    f252:	4668      	mov	r0, sp
    f254:	9909      	ldr	r1, [sp, #36]	; 0x24
    f256:	6001      	str	r1, [r0, #0]
    f258:	a817      	add	r0, sp, #92	; 0x5c
    f25a:	990d      	ldr	r1, [sp, #52]	; 0x34
    f25c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f260:	f005 fe70 	bl	14f44 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    f264:	e7ff      	b.n	f266 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x4e>
    f266:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    f268:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
    f26c:	f88d 007d 	strb.w	r0, [sp, #125]	; 0x7d
    f270:	f88d 007e 	strb.w	r0, [sp, #126]	; 0x7e
    f274:	f89d 007e 	ldrb.w	r0, [sp, #126]	; 0x7e
    f278:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
    f27c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    f280:	f002 fe2b 	bl	11eda <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    f284:	9008      	str	r0, [sp, #32]
    f286:	e7ff      	b.n	f288 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x70>
    f288:	9808      	ldr	r0, [sp, #32]
    f28a:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    f28e:	2101      	movs	r1, #1
    f290:	f8ad 1078 	strh.w	r1, [sp, #120]	; 0x78
    let background = Rectangle::<Rgb565>
    f294:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    f298:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    f29c:	a810      	add	r0, sp, #64	; 0x40
    f29e:	a917      	add	r1, sp, #92	; 0x5c
    f2a0:	f005 fe3e 	bl	14f20 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    f2a4:	e7ff      	b.n	f2a6 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x8e>
    f2a6:	2000      	movs	r0, #0
    f2a8:	223f      	movs	r2, #63	; 0x3f
    f2aa:	231f      	movs	r3, #31

    //  Render background to display
    //  druid::draw_to_display(background);
    render_region(0, 0, SCREEN_WIDTH as u8 - 1, SCREEN_HEIGHT as u8 - 1);
    f2ac:	9007      	str	r0, [sp, #28]
    f2ae:	9907      	ldr	r1, [sp, #28]
    f2b0:	f000 fb77 	bl	f9a2 <_ZN3app5chip813render_region17hc692a4d55cab74f0E>
    f2b4:	e7ff      	b.n	f2b6 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x9e>

    //  Start the emulator in a background task
    os::task_init(                  //  Create a new task and start it...
        unsafe { &mut CHIP8_TASK }, //  Task object will be saved here
        &init_strn!( "chip8" ),     //  Name of task
    f2b6:	f64d 005c 	movw	r0, #55388	; 0xd85c
    f2ba:	f2c0 0001 	movt	r0, #1
    f2be:	6801      	ldr	r1, [r0, #0]
        Some( task_func ),    //  Function to execute when task starts
    f2c0:	f24f 3041 	movw	r0, #62273	; 0xf341
    f2c4:	f2c0 0000 	movt	r0, #0
    f2c8:	9021      	str	r0, [sp, #132]	; 0x84
    os::task_init(                  //  Create a new task and start it...
    f2ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
    f2cc:	4668      	mov	r0, sp
    f2ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    f2d2:	6103      	str	r3, [r0, #16]
    f2d4:	60c3      	str	r3, [r0, #12]
    f2d6:	f240 13b4 	movw	r3, #436	; 0x1b4
    f2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2de:	6083      	str	r3, [r0, #8]
    f2e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f2e4:	6043      	str	r3, [r0, #4]
    f2e6:	2314      	movs	r3, #20
    f2e8:	6003      	str	r3, [r0, #0]
    f2ea:	f240 1064 	movw	r0, #356	; 0x164
    f2ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f2f2:	2300      	movs	r3, #0
    f2f4:	f7f9 fd50 	bl	8d98 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
    f2f8:	9006      	str	r0, [sp, #24]
    f2fa:	e7ff      	b.n	f2fc <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0xe4>
    f2fc:	9806      	ldr	r0, [sp, #24]
    f2fe:	f7f9 fcbf 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    f302:	9020      	str	r0, [sp, #128]	; 0x80
    f304:	e7ff      	b.n	f306 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0xee>
        NULL,  //  Argument to be passed to above function
        20,    //  Task priority: highest is 0, lowest is 255 (main task is 127), SPI is 10
        os::OS_WAIT_FOREVER as u32,       //  Don't do sanity / watchdog checking
        unsafe { &mut CHIP8_TASK_STACK }, //  Stack space for the task
        CHIP8_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                                 //  `?` means check for error
    f306:	9820      	ldr	r0, [sp, #128]	; 0x80
    f308:	1e41      	subs	r1, r0, #1
    f30a:	bf18      	it	ne
    f30c:	2101      	movne	r1, #1
    f30e:	2801      	cmp	r0, #1
    f310:	d001      	beq.n	f316 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0xfe>
    f312:	e7ff      	b.n	f314 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0xfc>
    f314:	e005      	b.n	f322 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x10a>
    f316:	2000      	movs	r0, #0

    //  Return success to the caller
    Ok(())
    f318:	900f      	str	r0, [sp, #60]	; 0x3c
    f31a:	2001      	movs	r0, #1
    f31c:	900f      	str	r0, [sp, #60]	; 0x3c
}
    f31e:	e006      	b.n	f32e <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x116>
    os::task_init(                  //  Create a new task and start it...
    f320:	defe      	udf	#254	; 0xfe
    ) ? ;                                 //  `?` means check for error
    f322:	9820      	ldr	r0, [sp, #128]	; 0x80
    f324:	9023      	str	r0, [sp, #140]	; 0x8c
    f326:	f003 fccb 	bl	12cc0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    f32a:	9005      	str	r0, [sp, #20]
    f32c:	e002      	b.n	f334 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x11c>
}
    f32e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    f330:	b024      	add	sp, #144	; 0x90
    f332:	bd80      	pop	{r7, pc}
    ) ? ;                                 //  `?` means check for error
    f334:	9805      	ldr	r0, [sp, #20]
    f336:	f7f9 fc97 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    f33a:	900f      	str	r0, [sp, #60]	; 0x3c
    f33c:	e7ff      	b.n	f33e <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x126>
    f33e:	e7f6      	b.n	f32e <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x116>

0000f340 <_ZN3app5chip89task_func17h20d1a4715d78a45aE>:

/// Size of the stack (in 4-byte units). Previously `OS_STACK_ALIGN(256)`  
const CHIP8_TASK_STACK_SIZE: usize = 4096;  //  Must be 4096 and above because CHIP8 Emulator requires substantial stack space

///  Run the emulator
extern "C" fn task_func(_arg: Ptr) {    
    f340:	b580      	push	{r7, lr}
    f342:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
    f346:	b082      	sub	sp, #8
    f348:	f50d 5103 	add.w	r1, sp, #8384	; 0x20c0
    f34c:	6008      	str	r0, [r1, #0]
    f34e:	a804      	add	r0, sp, #16
    //  Create the hardware API for rendering the emulator
    let hardware = Hardware::new();
    f350:	9103      	str	r1, [sp, #12]
    f352:	f000 f850 	bl	f3f6 <_ZN3app5chip88Hardware3new17h53332fc09faf36beE>
    f356:	e7ff      	b.n	f358 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x18>

    //  Create the emulator
    let chip8 = libchip8::Chip8::new(hardware);
    f358:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    f35c:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    f360:	f8ae 006c 	strh.w	r0, [lr, #108]	; 0x6c
    f364:	9804      	ldr	r0, [sp, #16]
    f366:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    f36a:	f8ce 0068 	str.w	r0, [lr, #104]	; 0x68
    f36e:	a806      	add	r0, sp, #24
    f370:	f10d 0e08 	add.w	lr, sp, #8
    f374:	f50e 5183 	add.w	r1, lr, #4192	; 0x1060
    f378:	f7fb fc7e 	bl	ac78 <_ZN8libchip814Chip8$LT$T$GT$3new17hca880a1e3fbd9a67E>
    f37c:	e7ff      	b.n	f37e <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x3e>
    console::print("CHIP8 started\n"); console::flush();
    f37e:	f64d 0060 	movw	r0, #55392	; 0xd860
    f382:	f2c0 0001 	movt	r0, #1
    f386:	210e      	movs	r1, #14
    f388:	f7f9 feb6 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f38c:	e7ff      	b.n	f38e <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x4e>
    f38e:	f7f9 fef9 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f392:	e7ff      	b.n	f394 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x54>

    //  Load the emulator ROM
    //  let rom = include_bytes!("../roms/invaders.ch8");
    let rom = include_bytes!("../roms/blinky.ch8");
    f394:	f64d 006e 	movw	r0, #55406	; 0xd86e
    f398:	f2c0 0001 	movt	r0, #1
    f39c:	9903      	ldr	r1, [sp, #12]
    f39e:	6048      	str	r0, [r1, #4]
    f3a0:	f10d 0e10 	add.w	lr, sp, #16
    f3a4:	f50e 5283 	add.w	r2, lr, #4192	; 0x1060
    f3a8:	a906      	add	r1, sp, #24
    f3aa:	f241 0350 	movw	r3, #4176	; 0x1050
    //  let rom = include_bytes!("../roms/pong.ch8");

    //  Run the emulator ROM. This will block until emulator terminates
    chip8.run(rom);
    f3ae:	9002      	str	r0, [sp, #8]
    f3b0:	4610      	mov	r0, r2
    f3b2:	9201      	str	r2, [sp, #4]
    f3b4:	461a      	mov	r2, r3
    f3b6:	f00c ffef 	bl	1c398 <__aeabi_memcpy>
    f3ba:	f640 1234 	movw	r2, #2356	; 0x934
    f3be:	9801      	ldr	r0, [sp, #4]
    f3c0:	9902      	ldr	r1, [sp, #8]
    f3c2:	f7fb fd08 	bl	add6 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E>
    f3c6:	e7ff      	b.n	f3c8 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x88>

    //  Should not come here
    console::print("CHIP8 done\n"); console::flush();
    f3c8:	f24e 10a2 	movw	r0, #57762	; 0xe1a2
    f3cc:	f2c0 0001 	movt	r0, #1
    f3d0:	210b      	movs	r1, #11
    f3d2:	f7f9 fe91 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f3d6:	e7ff      	b.n	f3d8 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x98>
    f3d8:	f7f9 fed4 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f3dc:	e7ff      	b.n	f3de <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x9e>
    assert!(false, "CHIP8 should not end");
    f3de:	f24e 10ad 	movw	r0, #57773	; 0xe1ad
    f3e2:	f2c0 0001 	movt	r0, #1
    f3e6:	f24e 12d8 	movw	r2, #57816	; 0xe1d8
    f3ea:	f2c0 0201 	movt	r2, #1
    f3ee:	2114      	movs	r1, #20
    f3f0:	f006 fcc6 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f3f4:	defe      	udf	#254	; 0xfe

0000f3f6 <_ZN3app5chip88Hardware3new17h53332fc09faf36beE>:
    is_checking_input: bool,
}

impl Hardware {
    /// Return a new Hardware API for rendering CHIP8 Emulator
    pub fn new() -> Hardware {
    f3f6:	2100      	movs	r1, #0
        Hardware {
    f3f8:	7001      	strb	r1, [r0, #0]
    f3fa:	7041      	strb	r1, [r0, #1]
    f3fc:	7081      	strb	r1, [r0, #2]
    f3fe:	70c1      	strb	r1, [r0, #3]
    f400:	7101      	strb	r1, [r0, #4]
    f402:	7141      	strb	r1, [r0, #5]
            update_right: 0,
            update_bottom: 0,
            is_interactive: false,
            is_checking_input: false,
        }
    }
    f404:	4770      	bx	lr

0000f406 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hd3173c320d2551cfE>:
}

impl libchip8::Hardware for Hardware {
    /// Return a random value.
    fn rand(&mut self) -> u8 {
    f406:	b081      	sub	sp, #4
    f408:	9000      	str	r0, [sp, #0]
    f40a:	207b      	movs	r0, #123	; 0x7b
        123  //  TODO
    }
    f40c:	b001      	add	sp, #4
    f40e:	4770      	bx	lr

0000f410 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>:

    /// Check if the key is pressed.
    fn key(&mut self, _key: u8) -> bool {
    f410:	b580      	push	{r7, lr}
    f412:	b084      	sub	sp, #16
    f414:	460a      	mov	r2, r1
    f416:	9002      	str	r0, [sp, #8]
    f418:	f88d 100f 	strb.w	r1, [sp, #15]
        if !self.is_interactive {
    f41c:	7901      	ldrb	r1, [r0, #4]
    f41e:	07c9      	lsls	r1, r1, #31
    f420:	2900      	cmp	r1, #0
    f422:	9001      	str	r0, [sp, #4]
    f424:	d10f      	bne.n	f446 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x36>
    f426:	e7ff      	b.n	f428 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x18>
    f428:	2001      	movs	r0, #1
            self.is_interactive = true;
    f42a:	9901      	ldr	r1, [sp, #4]
    f42c:	7108      	strb	r0, [r1, #4]
            console::print("key\n"); console::flush(); ////
    f42e:	f24e 10e8 	movw	r0, #57832	; 0xe1e8
    f432:	f2c0 0001 	movt	r0, #1
    f436:	2104      	movs	r1, #4
    f438:	f7f9 fe5e 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f43c:	e7ff      	b.n	f43e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x2e>
    f43e:	f7f9 fea1 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f442:	e7ff      	b.n	f444 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x34>
        if !self.is_interactive {
    f444:	e7ff      	b.n	f446 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x36>
    f446:	2001      	movs	r0, #1
        }
        self.is_checking_input = true;
    f448:	9901      	ldr	r1, [sp, #4]
    f44a:	7148      	strb	r0, [r1, #5]
    f44c:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    f44e:	b004      	add	sp, #16
    f450:	bd80      	pop	{r7, pc}

0000f452 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE>:

    /// Set the state of a pixel in the screen. true for white, and false for black.
    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    f452:	b08c      	sub	sp, #48	; 0x30
    f454:	469c      	mov	ip, r3
    f456:	9007      	str	r0, [sp, #28]
    f458:	9108      	str	r1, [sp, #32]
    f45a:	9209      	str	r2, [sp, #36]	; 0x24
    f45c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        //  console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    f460:	293f      	cmp	r1, #63	; 0x3f
    f462:	9205      	str	r2, [sp, #20]
    f464:	9104      	str	r1, [sp, #16]
    f466:	9003      	str	r0, [sp, #12]
    f468:	f8cd c008 	str.w	ip, [sp, #8]
    f46c:	d804      	bhi.n	f478 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x26>
    f46e:	e7ff      	b.n	f470 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1e>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f470:	9805      	ldr	r0, [sp, #20]
    f472:	281f      	cmp	r0, #31
    f474:	d814      	bhi.n	f4a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x4e>
    f476:	e00b      	b.n	f490 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x3e>
        assert!(x < SCREEN_WIDTH, "x overflow");
    f478:	f24e 10ec 	movw	r0, #57836	; 0xe1ec
    f47c:	f2c0 0001 	movt	r0, #1
    f480:	f24e 12f8 	movw	r2, #57848	; 0xe1f8
    f484:	f2c0 0201 	movt	r2, #1
    f488:	210a      	movs	r1, #10
    f48a:	f006 fc79 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f48e:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f490:	9805      	ldr	r0, [sp, #20]
    f492:	0181      	lsls	r1, r0, #6
    f494:	0e82      	lsrs	r2, r0, #26
    f496:	2a00      	cmp	r2, #0
    f498:	9101      	str	r1, [sp, #4]
    f49a:	f040 80be 	bne.w	f61a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1c8>
    f49e:	e00b      	b.n	f4b8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x66>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f4a0:	f24e 2008 	movw	r0, #57864	; 0xe208
    f4a4:	f2c0 0001 	movt	r0, #1
    f4a8:	f24e 2214 	movw	r2, #57876	; 0xe214
    f4ac:	f2c0 0201 	movt	r2, #1
    f4b0:	210a      	movs	r1, #10
    f4b2:	f006 fc65 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f4b6:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f4b8:	9804      	ldr	r0, [sp, #16]
    f4ba:	9901      	ldr	r1, [sp, #4]
    f4bc:	1842      	adds	r2, r0, r1
    f4be:	4613      	mov	r3, r2
    f4c0:	4282      	cmp	r2, r0
    f4c2:	9300      	str	r3, [sp, #0]
    f4c4:	f0c0 80b5 	bcc.w	f632 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1e0>
    f4c8:	e7ff      	b.n	f4ca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x78>
    f4ca:	9800      	ldr	r0, [sp, #0]
    f4cc:	900b      	str	r0, [sp, #44]	; 0x2c
        unsafe { SCREEN_BUFFER[i] = 
            if d {
    f4ce:	9902      	ldr	r1, [sp, #8]
    f4d0:	07ca      	lsls	r2, r1, #31
    f4d2:	2a00      	cmp	r2, #0
    f4d4:	d106      	bne.n	f4e4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x92>
    f4d6:	e7ff      	b.n	f4d8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x86>
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
                else { 200 }                    //  Darker colour for initial screen
            } 
            else { 
                if self.is_interactive { 127 }  //  Fade to black
    f4d8:	9803      	ldr	r0, [sp, #12]
    f4da:	7901      	ldrb	r1, [r0, #4]
    f4dc:	07c9      	lsls	r1, r1, #31
    f4de:	2900      	cmp	r1, #0
    f4e0:	d113      	bne.n	f50a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xb8>
    f4e2:	e00e      	b.n	f502 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xb0>
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
    f4e4:	9803      	ldr	r0, [sp, #12]
    f4e6:	7901      	ldrb	r1, [r0, #4]
    f4e8:	07c9      	lsls	r1, r1, #31
    f4ea:	2900      	cmp	r1, #0
    f4ec:	d104      	bne.n	f4f8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xa6>
    f4ee:	e7ff      	b.n	f4f0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x9e>
    f4f0:	20c8      	movs	r0, #200	; 0xc8
                else { 200 }                    //  Darker colour for initial screen
    f4f2:	f88d 0018 	strb.w	r0, [sp, #24]
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
    f4f6:	e003      	b.n	f500 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xae>
    f4f8:	20ff      	movs	r0, #255	; 0xff
    f4fa:	f88d 0018 	strb.w	r0, [sp, #24]
    f4fe:	e7ff      	b.n	f500 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xae>
            if d {
    f500:	e008      	b.n	f514 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc2>
    f502:	2000      	movs	r0, #0
                else { 0 }                      //  Black for initial screen                 
    f504:	f88d 0018 	strb.w	r0, [sp, #24]
                if self.is_interactive { 127 }  //  Fade to black
    f508:	e003      	b.n	f512 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc0>
    f50a:	207f      	movs	r0, #127	; 0x7f
    f50c:	f88d 0018 	strb.w	r0, [sp, #24]
    f510:	e7ff      	b.n	f512 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc0>
            if d {
    f512:	e7ff      	b.n	f514 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc2>
    f514:	2000      	movs	r0, #0
        unsafe { SCREEN_BUFFER[i] = 
    f516:	9900      	ldr	r1, [sp, #0]
    f518:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    f51c:	f040 8095 	bne.w	f64a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1f8>
    f520:	e7ff      	b.n	f522 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xd0>
    f522:	f244 10b4 	movw	r0, #16820	; 0x41b4
    f526:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f52a:	f89d 1018 	ldrb.w	r1, [sp, #24]
    f52e:	9a00      	ldr	r2, [sp, #0]
    f530:	5481      	strb	r1, [r0, r2]
            }  
        };

        //  Remember the boundaries of the screen region to be updated
        if self.update_left == 0 && self.update_right == 0 &&
    f532:	9803      	ldr	r0, [sp, #12]
    f534:	7801      	ldrb	r1, [r0, #0]
    f536:	2900      	cmp	r1, #0
    f538:	d02e      	beq.n	f598 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x146>
    f53a:	e029      	b.n	f590 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x13e>
    f53c:	2001      	movs	r0, #1
    f53e:	f88d 0019 	strb.w	r0, [sp, #25]
    f542:	e008      	b.n	f556 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x104>
    f544:	2000      	movs	r0, #0
    f546:	f88d 0019 	strb.w	r0, [sp, #25]
    f54a:	e004      	b.n	f556 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x104>
            self.update_top == 0 && self.update_bottom == 0 {
    f54c:	9803      	ldr	r0, [sp, #12]
    f54e:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    f550:	2900      	cmp	r1, #0
    f552:	d0f3      	beq.n	f53c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xea>
    f554:	e7f6      	b.n	f544 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xf2>
    f556:	f89d 0019 	ldrb.w	r0, [sp, #25]
    f55a:	07c0      	lsls	r0, r0, #31
    f55c:	2800      	cmp	r0, #0
    f55e:	d126      	bne.n	f5ae <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x15c>
    f560:	e02d      	b.n	f5be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x16c>
    f562:	2001      	movs	r0, #1
    f564:	f88d 001a 	strb.w	r0, [sp, #26]
    f568:	e008      	b.n	f57c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x12a>
    f56a:	2000      	movs	r0, #0
    f56c:	f88d 001a 	strb.w	r0, [sp, #26]
    f570:	e004      	b.n	f57c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x12a>
            self.update_top == 0 && self.update_bottom == 0 {
    f572:	9803      	ldr	r0, [sp, #12]
    f574:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    f576:	2900      	cmp	r1, #0
    f578:	d0f3      	beq.n	f562 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x110>
    f57a:	e7f6      	b.n	f56a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x118>
    f57c:	f89d 001a 	ldrb.w	r0, [sp, #26]
    f580:	07c0      	lsls	r0, r0, #31
    f582:	2800      	cmp	r0, #0
    f584:	d1e2      	bne.n	f54c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xfa>
    f586:	e7dd      	b.n	f544 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xf2>
    f588:	2001      	movs	r0, #1
    f58a:	f88d 001b 	strb.w	r0, [sp, #27]
    f58e:	e008      	b.n	f5a2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x150>
    f590:	2000      	movs	r0, #0
    f592:	f88d 001b 	strb.w	r0, [sp, #27]
    f596:	e004      	b.n	f5a2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x150>
    f598:	9803      	ldr	r0, [sp, #12]
    f59a:	7881      	ldrb	r1, [r0, #2]
    f59c:	2900      	cmp	r1, #0
    f59e:	d0f3      	beq.n	f588 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x136>
    f5a0:	e7f6      	b.n	f590 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x13e>
    f5a2:	f89d 001b 	ldrb.w	r0, [sp, #27]
    f5a6:	07c0      	lsls	r0, r0, #31
    f5a8:	2800      	cmp	r0, #0
    f5aa:	d1e2      	bne.n	f572 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x120>
    f5ac:	e7dd      	b.n	f56a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x118>
            self.update_left = x as u8;
    f5ae:	9804      	ldr	r0, [sp, #16]
    f5b0:	9903      	ldr	r1, [sp, #12]
    f5b2:	7008      	strb	r0, [r1, #0]
            self.update_right = x as u8;
    f5b4:	7088      	strb	r0, [r1, #2]
            self.update_top = y as u8;
    f5b6:	9a05      	ldr	r2, [sp, #20]
    f5b8:	704a      	strb	r2, [r1, #1]
            self.update_bottom = y as u8;
    f5ba:	70ca      	strb	r2, [r1, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    f5bc:	e7ff      	b.n	f5be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x16c>
        }
        if (x as u8) < self.update_left { self.update_left = x as u8; }
    f5be:	9804      	ldr	r0, [sp, #16]
    f5c0:	b2c1      	uxtb	r1, r0
    f5c2:	9a03      	ldr	r2, [sp, #12]
    f5c4:	7813      	ldrb	r3, [r2, #0]
    f5c6:	4299      	cmp	r1, r3
    f5c8:	d204      	bcs.n	f5d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x182>
    f5ca:	e7ff      	b.n	f5cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x17a>
    f5cc:	9804      	ldr	r0, [sp, #16]
    f5ce:	9903      	ldr	r1, [sp, #12]
    f5d0:	7008      	strb	r0, [r1, #0]
    f5d2:	e7ff      	b.n	f5d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x182>
        if (x as u8) > self.update_right { self.update_right = x as u8; }
    f5d4:	9804      	ldr	r0, [sp, #16]
    f5d6:	b2c1      	uxtb	r1, r0
    f5d8:	9a03      	ldr	r2, [sp, #12]
    f5da:	7893      	ldrb	r3, [r2, #2]
    f5dc:	4299      	cmp	r1, r3
    f5de:	d904      	bls.n	f5ea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x198>
    f5e0:	e7ff      	b.n	f5e2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x190>
    f5e2:	9804      	ldr	r0, [sp, #16]
    f5e4:	9903      	ldr	r1, [sp, #12]
    f5e6:	7088      	strb	r0, [r1, #2]
    f5e8:	e7ff      	b.n	f5ea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x198>
        if (y as u8) < self.update_top { self.update_top = y as u8; }
    f5ea:	9805      	ldr	r0, [sp, #20]
    f5ec:	b2c1      	uxtb	r1, r0
    f5ee:	9a03      	ldr	r2, [sp, #12]
    f5f0:	7853      	ldrb	r3, [r2, #1]
    f5f2:	4299      	cmp	r1, r3
    f5f4:	d204      	bcs.n	f600 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1ae>
    f5f6:	e7ff      	b.n	f5f8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1a6>
    f5f8:	9805      	ldr	r0, [sp, #20]
    f5fa:	9903      	ldr	r1, [sp, #12]
    f5fc:	7048      	strb	r0, [r1, #1]
    f5fe:	e7ff      	b.n	f600 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1ae>
        if (y as u8) > self.update_bottom { self.update_bottom = y as u8; }
    f600:	9805      	ldr	r0, [sp, #20]
    f602:	b2c1      	uxtb	r1, r0
    f604:	9a03      	ldr	r2, [sp, #12]
    f606:	78d3      	ldrb	r3, [r2, #3]
    f608:	4299      	cmp	r1, r3
    f60a:	d904      	bls.n	f616 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1c4>
    f60c:	e7ff      	b.n	f60e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1bc>
    f60e:	9805      	ldr	r0, [sp, #20]
    f610:	9903      	ldr	r1, [sp, #12]
    f612:	70c8      	strb	r0, [r1, #3]
    f614:	e7ff      	b.n	f616 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1c4>
    }
    f616:	b00c      	add	sp, #48	; 0x30
    f618:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    f61a:	f24e 2040 	movw	r0, #57920	; 0xe240
    f61e:	f2c0 0001 	movt	r0, #1
    f622:	f24e 2224 	movw	r2, #57892	; 0xe224
    f626:	f2c0 0201 	movt	r2, #1
    f62a:	2121      	movs	r1, #33	; 0x21
    f62c:	f006 fba8 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f630:	defe      	udf	#254	; 0xfe
    f632:	f24e 2080 	movw	r0, #57984	; 0xe280
    f636:	f2c0 0001 	movt	r0, #1
    f63a:	f24e 2264 	movw	r2, #57956	; 0xe264
    f63e:	f2c0 0201 	movt	r2, #1
    f642:	211c      	movs	r1, #28
    f644:	f006 fb9c 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f648:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = 
    f64a:	f24e 209c 	movw	r0, #58012	; 0xe29c
    f64e:	f2c0 0001 	movt	r0, #1
    f652:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f656:	9900      	ldr	r1, [sp, #0]
    f658:	f006 fba8 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    f65c:	defe      	udf	#254	; 0xfe

0000f65e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE>:

    /// Get the current state of a pixel in the screen.
    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    f65e:	b088      	sub	sp, #32
    f660:	9004      	str	r0, [sp, #16]
    f662:	9105      	str	r1, [sp, #20]
    f664:	9206      	str	r2, [sp, #24]
        //  console::print("get "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    f666:	293f      	cmp	r1, #63	; 0x3f
    f668:	9203      	str	r2, [sp, #12]
    f66a:	9102      	str	r1, [sp, #8]
    f66c:	d804      	bhi.n	f678 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x1a>
    f66e:	e7ff      	b.n	f670 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x12>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f670:	9803      	ldr	r0, [sp, #12]
    f672:	281f      	cmp	r0, #31
    f674:	d813      	bhi.n	f69e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x40>
    f676:	e00b      	b.n	f690 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x32>
        assert!(x < SCREEN_WIDTH, "x overflow");
    f678:	f24e 10ec 	movw	r0, #57836	; 0xe1ec
    f67c:	f2c0 0001 	movt	r0, #1
    f680:	f24e 22ac 	movw	r2, #58028	; 0xe2ac
    f684:	f2c0 0201 	movt	r2, #1
    f688:	210a      	movs	r1, #10
    f68a:	f006 fb79 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f68e:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f690:	9803      	ldr	r0, [sp, #12]
    f692:	0181      	lsls	r1, r0, #6
    f694:	0e82      	lsrs	r2, r0, #26
    f696:	2a00      	cmp	r2, #0
    f698:	9101      	str	r1, [sp, #4]
    f69a:	d128      	bne.n	f6ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x90>
    f69c:	e00b      	b.n	f6b6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x58>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f69e:	f24e 2008 	movw	r0, #57864	; 0xe208
    f6a2:	f2c0 0001 	movt	r0, #1
    f6a6:	f24e 22bc 	movw	r2, #58044	; 0xe2bc
    f6aa:	f2c0 0201 	movt	r2, #1
    f6ae:	210a      	movs	r1, #10
    f6b0:	f006 fb66 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f6b4:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f6b6:	9802      	ldr	r0, [sp, #8]
    f6b8:	9901      	ldr	r1, [sp, #4]
    f6ba:	1842      	adds	r2, r0, r1
    f6bc:	4613      	mov	r3, r2
    f6be:	4282      	cmp	r2, r0
    f6c0:	9300      	str	r3, [sp, #0]
    f6c2:	d320      	bcc.n	f706 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0xa8>
    f6c4:	e7ff      	b.n	f6c6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x68>
    f6c6:	9800      	ldr	r0, [sp, #0]
    f6c8:	9007      	str	r0, [sp, #28]
    f6ca:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] >= 128 }
    f6cc:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    f6d0:	d125      	bne.n	f71e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0xc0>
    f6d2:	e7ff      	b.n	f6d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x76>
    f6d4:	f244 10b4 	movw	r0, #16820	; 0x41b4
    f6d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f6dc:	9900      	ldr	r1, [sp, #0]
    f6de:	5640      	ldrsb	r0, [r0, r1]
    f6e0:	2200      	movs	r2, #0
    f6e2:	2800      	cmp	r0, #0
    f6e4:	bf48      	it	mi
    f6e6:	2201      	movmi	r2, #1
    }
    f6e8:	4610      	mov	r0, r2
    f6ea:	b008      	add	sp, #32
    f6ec:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    f6ee:	f24e 2040 	movw	r0, #57920	; 0xe240
    f6f2:	f2c0 0001 	movt	r0, #1
    f6f6:	f24e 22cc 	movw	r2, #58060	; 0xe2cc
    f6fa:	f2c0 0201 	movt	r2, #1
    f6fe:	2121      	movs	r1, #33	; 0x21
    f700:	f006 fb3e 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f704:	defe      	udf	#254	; 0xfe
    f706:	f24e 2080 	movw	r0, #57984	; 0xe280
    f70a:	f2c0 0001 	movt	r0, #1
    f70e:	f24e 22dc 	movw	r2, #58076	; 0xe2dc
    f712:	f2c0 0201 	movt	r2, #1
    f716:	211c      	movs	r1, #28
    f718:	f006 fb32 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f71c:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] >= 128 }
    f71e:	f24e 20ec 	movw	r0, #58092	; 0xe2ec
    f722:	f2c0 0001 	movt	r0, #1
    f726:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f72a:	9900      	ldr	r1, [sp, #0]
    f72c:	f006 fb3e 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    f730:	defe      	udf	#254	; 0xfe

0000f732 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE>:

    /// Set the size of the screen.
    fn vram_setsize(&mut self, size: (usize, usize)) {
    f732:	b580      	push	{r7, lr}
    f734:	b086      	sub	sp, #24
    f736:	9003      	str	r0, [sp, #12]
    f738:	9104      	str	r1, [sp, #16]
    f73a:	9205      	str	r2, [sp, #20]
        //  Do nothing. We assume SCREEN_WIDTH and SCREEN_HEIGHT.
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    f73c:	2940      	cmp	r1, #64	; 0x40
    f73e:	9201      	str	r2, [sp, #4]
    f740:	9100      	str	r1, [sp, #0]
    f742:	d008      	beq.n	f756 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x24>
    f744:	e003      	b.n	f74e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x1c>
    f746:	2001      	movs	r0, #1
    f748:	f88d 000b 	strb.w	r0, [sp, #11]
    f74c:	e007      	b.n	f75e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x2c>
    f74e:	2000      	movs	r0, #0
    f750:	f88d 000b 	strb.w	r0, [sp, #11]
    f754:	e003      	b.n	f75e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x2c>
    f756:	9801      	ldr	r0, [sp, #4]
    f758:	2820      	cmp	r0, #32
    f75a:	d0f4      	beq.n	f746 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x14>
    f75c:	e7f7      	b.n	f74e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x1c>
    f75e:	f89d 000b 	ldrb.w	r0, [sp, #11]
    f762:	07c0      	lsls	r0, r0, #31
    f764:	2800      	cmp	r0, #0
    f766:	d008      	beq.n	f77a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x48>
    f768:	e7ff      	b.n	f76a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x38>
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    f76a:	f24e 3004 	movw	r0, #58116	; 0xe304
    f76e:	f2c0 0001 	movt	r0, #1
    f772:	2108      	movs	r1, #8
    f774:	f7f9 fcc0 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f778:	e00b      	b.n	f792 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x60>
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    f77a:	f24e 20fc 	movw	r0, #58108	; 0xe2fc
    f77e:	f2c0 0001 	movt	r0, #1
    f782:	f24e 3224 	movw	r2, #58148	; 0xe324
    f786:	f2c0 0201 	movt	r2, #1
    f78a:	2108      	movs	r1, #8
    f78c:	f006 faf8 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f790:	defe      	udf	#254	; 0xfe
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    f792:	9800      	ldr	r0, [sp, #0]
    f794:	f7f9 fcee 	bl	9174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    f798:	e7ff      	b.n	f79a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x68>
    f79a:	f24e 3034 	movw	r0, #58164	; 0xe334
    f79e:	f2c0 0001 	movt	r0, #1
    f7a2:	2102      	movs	r1, #2
    f7a4:	f7f9 fca8 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f7a8:	e7ff      	b.n	f7aa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x78>
    f7aa:	9801      	ldr	r0, [sp, #4]
    f7ac:	f7f9 fce2 	bl	9174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    f7b0:	e7ff      	b.n	f7b2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x80>
    f7b2:	f24e 3036 	movw	r0, #58166	; 0xe336
    f7b6:	f2c0 0001 	movt	r0, #1
    f7ba:	2101      	movs	r1, #1
    f7bc:	f7f9 fc9c 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f7c0:	e7ff      	b.n	f7c2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x90>
    f7c2:	f7f9 fcdf 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f7c6:	e7ff      	b.n	f7c8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x96>
    }
    f7c8:	b006      	add	sp, #24
    f7ca:	bd80      	pop	{r7, pc}

0000f7cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E>:

    /// Get the size of the screen.
    fn vram_size(&mut self) -> (usize, usize) {
    f7cc:	b083      	sub	sp, #12
    f7ce:	9002      	str	r0, [sp, #8]
    f7d0:	2040      	movs	r0, #64	; 0x40
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    f7d2:	9000      	str	r0, [sp, #0]
    f7d4:	2020      	movs	r0, #32
    f7d6:	9001      	str	r0, [sp, #4]
    }
    f7d8:	9800      	ldr	r0, [sp, #0]
    f7da:	9901      	ldr	r1, [sp, #4]
    f7dc:	b003      	add	sp, #12
    f7de:	4770      	bx	lr

0000f7e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>:

    /// Return the current clock value in nanoseconds.
    fn clock(&mut self) -> u64 {
    f7e0:	b5b0      	push	{r4, r5, r7, lr}
    f7e2:	b086      	sub	sp, #24
    f7e4:	9005      	str	r0, [sp, #20]
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    f7e6:	f00a fb69 	bl	19ebc <os_time_get>
    f7ea:	9004      	str	r0, [sp, #16]
    f7ec:	e7ff      	b.n	f7ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0xe>
    f7ee:	2000      	movs	r0, #0
    f7f0:	9904      	ldr	r1, [sp, #16]
    f7f2:	fba0 2301 	umull	r2, r3, r0, r1
    f7f6:	2b00      	cmp	r3, #0
    f7f8:	bf18      	it	ne
    f7fa:	2301      	movne	r3, #1
    f7fc:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    f800:	fba0 e40c 	umull	lr, r4, r0, ip
    f804:	2c00      	cmp	r4, #0
    f806:	bf18      	it	ne
    f808:	2401      	movne	r4, #1
    f80a:	ea43 0304 	orr.w	r3, r3, r4
    f80e:	4472      	add	r2, lr
    f810:	fba1 ce0c 	umull	ip, lr, r1, ip
    f814:	eb12 020e 	adds.w	r2, r2, lr
    f818:	f140 0000 	adc.w	r0, r0, #0
    f81c:	ea40 0003 	orr.w	r0, r0, r3
    f820:	2800      	cmp	r0, #0
    f822:	f8cd c00c 	str.w	ip, [sp, #12]
    f826:	9202      	str	r2, [sp, #8]
    f828:	d124      	bne.n	f874 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0x94>
    f82a:	e7ff      	b.n	f82c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0x4c>
    f82c:	2000      	movs	r0, #0
    f82e:	9903      	ldr	r1, [sp, #12]
    f830:	fba0 2301 	umull	r2, r3, r0, r1
    f834:	2b00      	cmp	r3, #0
    f836:	bf18      	it	ne
    f838:	2301      	movne	r3, #1
    f83a:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
    f83e:	f8dd e008 	ldr.w	lr, [sp, #8]
    f842:	fbae 450c 	umull	r4, r5, lr, ip
    f846:	2d00      	cmp	r5, #0
    f848:	bf18      	it	ne
    f84a:	2501      	movne	r5, #1
    f84c:	ea43 0305 	orr.w	r3, r3, r5
    f850:	4422      	add	r2, r4
    f852:	fba1 c40c 	umull	ip, r4, r1, ip
    f856:	1912      	adds	r2, r2, r4
    f858:	f140 0000 	adc.w	r0, r0, #0
    f85c:	ea40 0003 	orr.w	r0, r0, r3
    f860:	2800      	cmp	r0, #0
    f862:	f8cd c004 	str.w	ip, [sp, #4]
    f866:	9200      	str	r2, [sp, #0]
    f868:	d110      	bne.n	f88c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0xac>
    f86a:	e7ff      	b.n	f86c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0x8c>
    }
    f86c:	9801      	ldr	r0, [sp, #4]
    f86e:	9900      	ldr	r1, [sp, #0]
    f870:	b006      	add	sp, #24
    f872:	bdb0      	pop	{r4, r5, r7, pc}
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    f874:	f24e 2040 	movw	r0, #57920	; 0xe240
    f878:	f2c0 0001 	movt	r0, #1
    f87c:	f24e 3238 	movw	r2, #58168	; 0xe338
    f880:	f2c0 0201 	movt	r2, #1
    f884:	2121      	movs	r1, #33	; 0x21
    f886:	f006 fa7b 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f88a:	defe      	udf	#254	; 0xfe
    f88c:	f24e 2040 	movw	r0, #57920	; 0xe240
    f890:	f2c0 0001 	movt	r0, #1
    f894:	f24e 3238 	movw	r2, #58168	; 0xe338
    f898:	f2c0 0201 	movt	r2, #1
    f89c:	2121      	movs	r1, #33	; 0x21
    f89e:	f006 fa6f 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f8a2:	defe      	udf	#254	; 0xfe

0000f8a4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha9851d0b0cdc4725E>:

    /// Play beep sound.
    fn beep(&mut self) {
    f8a4:	b081      	sub	sp, #4
    f8a6:	9000      	str	r0, [sp, #0]
        //  TODO: Vibrate? Flash?
    }
    f8a8:	b001      	add	sp, #4
    f8aa:	4770      	bx	lr

0000f8ac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E>:

    /// Called in every step; return true for shutdown.
    fn sched(&mut self) -> bool {
    f8ac:	b580      	push	{r7, lr}
    f8ae:	b084      	sub	sp, #16
    f8b0:	9003      	str	r0, [sp, #12]
        //  console::print("sched\n"); console::flush(); ////

        //  If no screen update, return
        if self.update_left == 0 && self.update_right == 0 &&
    f8b2:	7801      	ldrb	r1, [r0, #0]
    f8b4:	2900      	cmp	r1, #0
    f8b6:	9001      	str	r0, [sp, #4]
    f8b8:	d02e      	beq.n	f918 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x6c>
    f8ba:	e029      	b.n	f910 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x64>
    f8bc:	2001      	movs	r0, #1
    f8be:	f88d 0009 	strb.w	r0, [sp, #9]
    f8c2:	e008      	b.n	f8d6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x2a>
    f8c4:	2000      	movs	r0, #0
    f8c6:	f88d 0009 	strb.w	r0, [sp, #9]
    f8ca:	e004      	b.n	f8d6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x2a>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    f8cc:	9801      	ldr	r0, [sp, #4]
    f8ce:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    f8d0:	2900      	cmp	r1, #0
    f8d2:	d0f3      	beq.n	f8bc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x10>
    f8d4:	e7f6      	b.n	f8c4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x18>
    f8d6:	f89d 0009 	ldrb.w	r0, [sp, #9]
    f8da:	07c0      	lsls	r0, r0, #31
    f8dc:	2800      	cmp	r0, #0
    f8de:	d12c      	bne.n	f93a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x8e>
    f8e0:	e025      	b.n	f92e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x82>
    f8e2:	2001      	movs	r0, #1
    f8e4:	f88d 000a 	strb.w	r0, [sp, #10]
    f8e8:	e008      	b.n	f8fc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x50>
    f8ea:	2000      	movs	r0, #0
    f8ec:	f88d 000a 	strb.w	r0, [sp, #10]
    f8f0:	e004      	b.n	f8fc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x50>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    f8f2:	9801      	ldr	r0, [sp, #4]
    f8f4:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    f8f6:	2900      	cmp	r1, #0
    f8f8:	d0f3      	beq.n	f8e2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x36>
    f8fa:	e7f6      	b.n	f8ea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x3e>
    f8fc:	f89d 000a 	ldrb.w	r0, [sp, #10]
    f900:	07c0      	lsls	r0, r0, #31
    f902:	2800      	cmp	r0, #0
    f904:	d1e2      	bne.n	f8cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x20>
    f906:	e7dd      	b.n	f8c4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x18>
    f908:	2001      	movs	r0, #1
    f90a:	f88d 000b 	strb.w	r0, [sp, #11]
    f90e:	e008      	b.n	f922 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x76>
    f910:	2000      	movs	r0, #0
    f912:	f88d 000b 	strb.w	r0, [sp, #11]
    f916:	e004      	b.n	f922 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x76>
    f918:	9801      	ldr	r0, [sp, #4]
    f91a:	7881      	ldrb	r1, [r0, #2]
    f91c:	2900      	cmp	r1, #0
    f91e:	d0f3      	beq.n	f908 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x5c>
    f920:	e7f6      	b.n	f910 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x64>
    f922:	f89d 000b 	ldrb.w	r0, [sp, #11]
    f926:	07c0      	lsls	r0, r0, #31
    f928:	2800      	cmp	r0, #0
    f92a:	d1e2      	bne.n	f8f2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x46>
    f92c:	e7dd      	b.n	f8ea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x3e>

        //  If emulator is preparing the initial screen, refresh the screen later
        if !self.is_interactive { return false; }
    f92e:	9801      	ldr	r0, [sp, #4]
    f930:	7901      	ldrb	r1, [r0, #4]
    f932:	07c9      	lsls	r1, r1, #31
    f934:	2900      	cmp	r1, #0
    f936:	d00e      	beq.n	f956 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xaa>
    f938:	e007      	b.n	f94a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x9e>
    f93a:	2000      	movs	r0, #0
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    f93c:	f88d 0008 	strb.w	r0, [sp, #8]
    f940:	e7ff      	b.n	f942 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>
        self.update_right = 0;
        self.update_bottom = 0;

        //  Return false to indicate no shutdown
        false
    }
    f942:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f946:	b004      	add	sp, #16
    f948:	bd80      	pop	{r7, pc}
        if !self.is_checking_input { return false; }
    f94a:	9801      	ldr	r0, [sp, #4]
    f94c:	7941      	ldrb	r1, [r0, #5]
    f94e:	07c9      	lsls	r1, r1, #31
    f950:	2900      	cmp	r1, #0
    f952:	d00a      	beq.n	f96a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xbe>
    f954:	e003      	b.n	f95e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xb2>
    f956:	2000      	movs	r0, #0
        if !self.is_interactive { return false; }
    f958:	f88d 0008 	strb.w	r0, [sp, #8]
    f95c:	e7f1      	b.n	f942 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>
    f95e:	2000      	movs	r0, #0
        self.is_checking_input = false;
    f960:	9901      	ldr	r1, [sp, #4]
    f962:	7148      	strb	r0, [r1, #5]
        unsafe { hal_watchdog_tickle() };
    f964:	f009 f882 	bl	18a6c <hal_watchdog_tickle>
    f968:	e003      	b.n	f972 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xc6>
    f96a:	2000      	movs	r0, #0
        if !self.is_checking_input { return false; }
    f96c:	f88d 0008 	strb.w	r0, [sp, #8]
    f970:	e7e7      	b.n	f942 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>
    f972:	2001      	movs	r0, #1
        unsafe { os::os_time_delay(1) };
    f974:	f00a fac8 	bl	19f08 <os_time_delay>
    f978:	e7ff      	b.n	f97a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xce>
        render_region(
    f97a:	9801      	ldr	r0, [sp, #4]
    f97c:	7800      	ldrb	r0, [r0, #0]
    f97e:	9901      	ldr	r1, [sp, #4]
    f980:	7849      	ldrb	r1, [r1, #1]
    f982:	9a01      	ldr	r2, [sp, #4]
    f984:	7892      	ldrb	r2, [r2, #2]
    f986:	9b01      	ldr	r3, [sp, #4]
    f988:	78db      	ldrb	r3, [r3, #3]
    f98a:	f000 f80a 	bl	f9a2 <_ZN3app5chip813render_region17hc692a4d55cab74f0E>
    f98e:	e7ff      	b.n	f990 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xe4>
    f990:	2000      	movs	r0, #0
        self.update_left = 0;
    f992:	9901      	ldr	r1, [sp, #4]
    f994:	7008      	strb	r0, [r1, #0]
        self.update_top = 0;
    f996:	7048      	strb	r0, [r1, #1]
        self.update_right = 0;
    f998:	7088      	strb	r0, [r1, #2]
        self.update_bottom = 0;
    f99a:	70c8      	strb	r0, [r1, #3]
        false
    f99c:	f88d 0008 	strb.w	r0, [sp, #8]
    }
    f9a0:	e7cf      	b.n	f942 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>

0000f9a2 <_ZN3app5chip813render_region17hc692a4d55cab74f0E>:
}

/// Render the Virtual Screen region
fn render_region(left: u8, top: u8, right: u8, bottom: u8) {
    f9a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    f9a4:	b095      	sub	sp, #84	; 0x54
    f9a6:	fa5f fc80 	uxtb.w	ip, r0
    f9aa:	fa5f fe82 	uxtb.w	lr, r2
    f9ae:	461c      	mov	r4, r3
    f9b0:	4615      	mov	r5, r2
    f9b2:	460e      	mov	r6, r1
    f9b4:	4607      	mov	r7, r0
    f9b6:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    f9ba:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    f9be:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
    f9c2:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    let width = right - left + 1;
    f9c6:	ebae 000c 	sub.w	r0, lr, ip
    f9ca:	b2c1      	uxtb	r1, r0
    f9cc:	4602      	mov	r2, r0
    f9ce:	4281      	cmp	r1, r0
    f9d0:	9411      	str	r4, [sp, #68]	; 0x44
    f9d2:	9510      	str	r5, [sp, #64]	; 0x40
    f9d4:	960f      	str	r6, [sp, #60]	; 0x3c
    f9d6:	970e      	str	r7, [sp, #56]	; 0x38
    f9d8:	920d      	str	r2, [sp, #52]	; 0x34
    f9da:	f040 80df 	bne.w	fb9c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1fa>
    f9de:	e7ff      	b.n	f9e0 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x3e>
    f9e0:	2001      	movs	r0, #1
    f9e2:	990d      	ldr	r1, [sp, #52]	; 0x34
    f9e4:	fa50 f081 	uxtab	r0, r0, r1
    f9e8:	b2c2      	uxtb	r2, r0
    f9ea:	4603      	mov	r3, r0
    f9ec:	4282      	cmp	r2, r0
    f9ee:	930c      	str	r3, [sp, #48]	; 0x30
    f9f0:	f040 80e0 	bne.w	fbb4 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x212>
    f9f4:	e7ff      	b.n	f9f6 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x54>
    f9f6:	980c      	ldr	r0, [sp, #48]	; 0x30
    f9f8:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    let height = bottom - top + 1;
    f9fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    f9fe:	b2ca      	uxtb	r2, r1
    fa00:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fa02:	fa5f fc83 	uxtb.w	ip, r3
    fa06:	ebac 0202 	sub.w	r2, ip, r2
    fa0a:	fa5f fc82 	uxtb.w	ip, r2
    fa0e:	4696      	mov	lr, r2
    fa10:	4594      	cmp	ip, r2
    fa12:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    fa16:	f040 80d9 	bne.w	fbcc <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x22a>
    fa1a:	e7ff      	b.n	fa1c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x7a>
    fa1c:	2001      	movs	r0, #1
    fa1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    fa20:	fa50 f081 	uxtab	r0, r0, r1
    fa24:	b2c2      	uxtb	r2, r0
    fa26:	4603      	mov	r3, r0
    fa28:	4282      	cmp	r2, r0
    fa2a:	930a      	str	r3, [sp, #40]	; 0x28
    fa2c:	f040 80da 	bne.w	fbe4 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x242>
    fa30:	e7ff      	b.n	fa32 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x90>
    fa32:	980a      	ldr	r0, [sp, #40]	; 0x28
    fa34:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
    //  If the update region is small, render with a single block
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    fa38:	990c      	ldr	r1, [sp, #48]	; 0x30
    fa3a:	b2ca      	uxtb	r2, r1
    fa3c:	fa52 f280 	uxtab	r2, r2, r0
    fa40:	b2d3      	uxtb	r3, r2
    fa42:	4694      	mov	ip, r2
    fa44:	4293      	cmp	r3, r2
    fa46:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    fa4a:	f040 80d7 	bne.w	fbfc <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x25a>
    fa4e:	e7ff      	b.n	fa50 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xae>
    fa50:	9809      	ldr	r0, [sp, #36]	; 0x24
    fa52:	b2c1      	uxtb	r1, r0
    fa54:	2926      	cmp	r1, #38	; 0x26
    fa56:	d307      	bcc.n	fa68 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xc6>
    fa58:	e7ff      	b.n	fa5a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xb8>
        render_block(left, top, right, bottom);
    } else {
        //  If the update region is too big for a single block, break the region into blocks and render
        let mut x = left;
    fa5a:	980e      	ldr	r0, [sp, #56]	; 0x38
    fa5c:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
        let mut y = top;
    fa60:	990f      	ldr	r1, [sp, #60]	; 0x3c
    fa62:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
        loop {
    fa66:	e007      	b.n	fa78 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xd6>
        render_block(left, top, right, bottom);
    fa68:	980e      	ldr	r0, [sp, #56]	; 0x38
    fa6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    fa6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fa6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fa70:	f000 f918 	bl	fca4 <_ZN3app5chip812render_block17h6c8b81526965606bE>
    fa74:	e7ff      	b.n	fa76 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xd4>
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    fa76:	e08f      	b.n	fb98 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f6>
            let block_right = x + BLOCK_WIDTH as u8 - 1;
    fa78:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    fa7c:	3020      	adds	r0, #32
    fa7e:	b2c1      	uxtb	r1, r0
    fa80:	4602      	mov	r2, r0
    fa82:	4281      	cmp	r1, r0
    fa84:	9208      	str	r2, [sp, #32]
    fa86:	f040 80c5 	bne.w	fc14 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x272>
    fa8a:	e7ff      	b.n	fa8c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xea>
    fa8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fa90:	9908      	ldr	r1, [sp, #32]
    fa92:	fa50 f081 	uxtab	r0, r0, r1
    fa96:	b2c2      	uxtb	r2, r0
    fa98:	4603      	mov	r3, r0
    fa9a:	4282      	cmp	r2, r0
    fa9c:	9307      	str	r3, [sp, #28]
    fa9e:	f040 80c5 	bne.w	fc2c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x28a>
    faa2:	e7ff      	b.n	faa4 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x102>
    faa4:	9807      	ldr	r0, [sp, #28]
    faa6:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
            let block_bottom = y + BLOCK_HEIGHT as u8 - 1;
    faaa:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    faae:	3105      	adds	r1, #5
    fab0:	b2ca      	uxtb	r2, r1
    fab2:	460b      	mov	r3, r1
    fab4:	428a      	cmp	r2, r1
    fab6:	9306      	str	r3, [sp, #24]
    fab8:	f040 80c4 	bne.w	fc44 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2a2>
    fabc:	e7ff      	b.n	fabe <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x11c>
    fabe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fac2:	9906      	ldr	r1, [sp, #24]
    fac4:	fa50 f081 	uxtab	r0, r0, r1
    fac8:	b2c2      	uxtb	r2, r0
    faca:	4603      	mov	r3, r0
    facc:	4282      	cmp	r2, r0
    face:	9305      	str	r3, [sp, #20]
    fad0:	f040 80c4 	bne.w	fc5c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2ba>
    fad4:	e7ff      	b.n	fad6 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x134>
    fad6:	9805      	ldr	r0, [sp, #20]
    fad8:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
            render_block(x, y,
    fadc:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    fae0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
                if block_right  <= right  { block_right }  else { right },
    fae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fae6:	fa5f fc83 	uxtb.w	ip, r3
    faea:	f8dd e01c 	ldr.w	lr, [sp, #28]
    faee:	fa5f f48e 	uxtb.w	r4, lr
    faf2:	4564      	cmp	r4, ip
    faf4:	9104      	str	r1, [sp, #16]
    faf6:	9203      	str	r2, [sp, #12]
    faf8:	d904      	bls.n	fb04 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x162>
    fafa:	e7ff      	b.n	fafc <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x15a>
    fafc:	9810      	ldr	r0, [sp, #64]	; 0x40
    fafe:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    fb02:	e003      	b.n	fb0c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x16a>
    fb04:	9807      	ldr	r0, [sp, #28]
    fb06:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    fb0a:	e7ff      	b.n	fb0c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x16a>
                if block_bottom <= bottom { block_bottom } else { bottom }
    fb0c:	9811      	ldr	r0, [sp, #68]	; 0x44
    fb0e:	b2c1      	uxtb	r1, r0
    fb10:	9a05      	ldr	r2, [sp, #20]
    fb12:	b2d3      	uxtb	r3, r2
    fb14:	428b      	cmp	r3, r1
    fb16:	d904      	bls.n	fb22 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x180>
    fb18:	e7ff      	b.n	fb1a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x178>
    fb1a:	9811      	ldr	r0, [sp, #68]	; 0x44
    fb1c:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
    fb20:	e003      	b.n	fb2a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x188>
    fb22:	9805      	ldr	r0, [sp, #20]
    fb24:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
    fb28:	e7ff      	b.n	fb2a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x188>
            render_block(x, y,
    fb2a:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
    fb2e:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    fb32:	9804      	ldr	r0, [sp, #16]
    fb34:	9903      	ldr	r1, [sp, #12]
    fb36:	f000 f8b5 	bl	fca4 <_ZN3app5chip812render_block17h6c8b81526965606bE>
    fb3a:	e7ff      	b.n	fb3c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x19a>
            );  //  Will not overflow SPI buffer
            x += BLOCK_WIDTH as u8;
    fb3c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    fb40:	3020      	adds	r0, #32
    fb42:	b2c1      	uxtb	r1, r0
    fb44:	4602      	mov	r2, r0
    fb46:	4281      	cmp	r1, r0
    fb48:	9202      	str	r2, [sp, #8]
    fb4a:	f040 8093 	bne.w	fc74 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2d2>
    fb4e:	e7ff      	b.n	fb50 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1ae>
    fb50:	9802      	ldr	r0, [sp, #8]
    fb52:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
            if x > right {
    fb56:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    fb5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fb5c:	b2d3      	uxtb	r3, r2
    fb5e:	4299      	cmp	r1, r3
    fb60:	d919      	bls.n	fb96 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f4>
    fb62:	e7ff      	b.n	fb64 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1c2>
                x = left;
    fb64:	980e      	ldr	r0, [sp, #56]	; 0x38
    fb66:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
                y += BLOCK_HEIGHT as u8;
    fb6a:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    fb6e:	3105      	adds	r1, #5
    fb70:	b2ca      	uxtb	r2, r1
    fb72:	460b      	mov	r3, r1
    fb74:	428a      	cmp	r2, r1
    fb76:	9301      	str	r3, [sp, #4]
    fb78:	f040 8088 	bne.w	fc8c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2ea>
    fb7c:	e7ff      	b.n	fb7e <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1dc>
    fb7e:	9801      	ldr	r0, [sp, #4]
    fb80:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
                if y > bottom { break; }
    fb84:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    fb88:	9a11      	ldr	r2, [sp, #68]	; 0x44
    fb8a:	b2d3      	uxtb	r3, r2
    fb8c:	4299      	cmp	r1, r3
    fb8e:	d801      	bhi.n	fb94 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f2>
    fb90:	e7ff      	b.n	fb92 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f0>
            if x > right {
    fb92:	e000      	b.n	fb96 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f4>
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    fb94:	e000      	b.n	fb98 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f6>
        loop {
    fb96:	e76f      	b.n	fa78 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xd6>
            }
        }
    }
}
    fb98:	b015      	add	sp, #84	; 0x54
    fb9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    let width = right - left + 1;
    fb9c:	f24e 3060 	movw	r0, #58208	; 0xe360
    fba0:	f2c0 0001 	movt	r0, #1
    fba4:	f24e 3248 	movw	r2, #58184	; 0xe348
    fba8:	f2c0 0201 	movt	r2, #1
    fbac:	2121      	movs	r1, #33	; 0x21
    fbae:	f006 f8e7 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fbb2:	defe      	udf	#254	; 0xfe
    fbb4:	f24e 2080 	movw	r0, #57984	; 0xe280
    fbb8:	f2c0 0001 	movt	r0, #1
    fbbc:	f24e 3248 	movw	r2, #58184	; 0xe348
    fbc0:	f2c0 0201 	movt	r2, #1
    fbc4:	211c      	movs	r1, #28
    fbc6:	f006 f8db 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fbca:	defe      	udf	#254	; 0xfe
    let height = bottom - top + 1;
    fbcc:	f24e 3060 	movw	r0, #58208	; 0xe360
    fbd0:	f2c0 0001 	movt	r0, #1
    fbd4:	f24e 3284 	movw	r2, #58244	; 0xe384
    fbd8:	f2c0 0201 	movt	r2, #1
    fbdc:	2121      	movs	r1, #33	; 0x21
    fbde:	f006 f8cf 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fbe2:	defe      	udf	#254	; 0xfe
    fbe4:	f24e 2080 	movw	r0, #57984	; 0xe280
    fbe8:	f2c0 0001 	movt	r0, #1
    fbec:	f24e 3284 	movw	r2, #58244	; 0xe384
    fbf0:	f2c0 0201 	movt	r2, #1
    fbf4:	211c      	movs	r1, #28
    fbf6:	f006 f8c3 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fbfa:	defe      	udf	#254	; 0xfe
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    fbfc:	f24e 2080 	movw	r0, #57984	; 0xe280
    fc00:	f2c0 0001 	movt	r0, #1
    fc04:	f24e 3294 	movw	r2, #58260	; 0xe394
    fc08:	f2c0 0201 	movt	r2, #1
    fc0c:	211c      	movs	r1, #28
    fc0e:	f006 f8b7 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc12:	defe      	udf	#254	; 0xfe
            let block_right = x + BLOCK_WIDTH as u8 - 1;
    fc14:	f24e 2080 	movw	r0, #57984	; 0xe280
    fc18:	f2c0 0001 	movt	r0, #1
    fc1c:	f24e 32a4 	movw	r2, #58276	; 0xe3a4
    fc20:	f2c0 0201 	movt	r2, #1
    fc24:	211c      	movs	r1, #28
    fc26:	f006 f8ab 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc2a:	defe      	udf	#254	; 0xfe
    fc2c:	f24e 3060 	movw	r0, #58208	; 0xe360
    fc30:	f2c0 0001 	movt	r0, #1
    fc34:	f24e 32a4 	movw	r2, #58276	; 0xe3a4
    fc38:	f2c0 0201 	movt	r2, #1
    fc3c:	2121      	movs	r1, #33	; 0x21
    fc3e:	f006 f89f 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc42:	defe      	udf	#254	; 0xfe
            let block_bottom = y + BLOCK_HEIGHT as u8 - 1;
    fc44:	f24e 2080 	movw	r0, #57984	; 0xe280
    fc48:	f2c0 0001 	movt	r0, #1
    fc4c:	f24e 32b4 	movw	r2, #58292	; 0xe3b4
    fc50:	f2c0 0201 	movt	r2, #1
    fc54:	211c      	movs	r1, #28
    fc56:	f006 f893 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc5a:	defe      	udf	#254	; 0xfe
    fc5c:	f24e 3060 	movw	r0, #58208	; 0xe360
    fc60:	f2c0 0001 	movt	r0, #1
    fc64:	f24e 32b4 	movw	r2, #58292	; 0xe3b4
    fc68:	f2c0 0201 	movt	r2, #1
    fc6c:	2121      	movs	r1, #33	; 0x21
    fc6e:	f006 f887 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc72:	defe      	udf	#254	; 0xfe
            x += BLOCK_WIDTH as u8;
    fc74:	f24e 2080 	movw	r0, #57984	; 0xe280
    fc78:	f2c0 0001 	movt	r0, #1
    fc7c:	f24e 32c4 	movw	r2, #58308	; 0xe3c4
    fc80:	f2c0 0201 	movt	r2, #1
    fc84:	211c      	movs	r1, #28
    fc86:	f006 f87b 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc8a:	defe      	udf	#254	; 0xfe
                y += BLOCK_HEIGHT as u8;
    fc8c:	f24e 2080 	movw	r0, #57984	; 0xe280
    fc90:	f2c0 0001 	movt	r0, #1
    fc94:	f24e 32d4 	movw	r2, #58324	; 0xe3d4
    fc98:	f2c0 0201 	movt	r2, #1
    fc9c:	211c      	movs	r1, #28
    fc9e:	f006 f86f 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fca2:	defe      	udf	#254	; 0xfe

0000fca4 <_ZN3app5chip812render_block17h6c8b81526965606bE>:

/// Render the Virtual Block
fn render_block(left: u8, top: u8, right: u8, bottom: u8) {
    fca4:	b570      	push	{r4, r5, r6, lr}
    fca6:	b092      	sub	sp, #72	; 0x48
    fca8:	469c      	mov	ip, r3
    fcaa:	4696      	mov	lr, r2
    fcac:	460c      	mov	r4, r1
    fcae:	4605      	mov	r5, r0
    fcb0:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
    fcb4:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
    fcb8:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
    fcbc:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    //  console::print("render "); console::printint(left as i32); console::print(", "); console::printint(top as i32); console::print(", "); console::printint(right as i32 - left as i32); console::print(", "); console::printint(bottom as i32 - top as i32); console::print("\n"); console::flush(); ////
    //  Create a new block for the region to be updated
    let mut block = PixelIterator::new(
    fcc0:	466e      	mov	r6, sp
    fcc2:	6033      	str	r3, [r6, #0]
    fcc4:	ab0a      	add	r3, sp, #40	; 0x28
    fcc6:	9009      	str	r0, [sp, #36]	; 0x24
    fcc8:	4618      	mov	r0, r3
    fcca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fccc:	9108      	str	r1, [sp, #32]
    fcce:	4619      	mov	r1, r3
    fcd0:	9e08      	ldr	r6, [sp, #32]
    fcd2:	9207      	str	r2, [sp, #28]
    fcd4:	4632      	mov	r2, r6
    fcd6:	9b07      	ldr	r3, [sp, #28]
    fcd8:	f8cd c018 	str.w	ip, [sp, #24]
    fcdc:	f8cd e014 	str.w	lr, [sp, #20]
    fce0:	9404      	str	r4, [sp, #16]
    fce2:	9503      	str	r5, [sp, #12]
    fce4:	f000 f832 	bl	fd4c <_ZN3app5chip813PixelIterator3new17h975cb5db80e10243E>
    fce8:	e7ff      	b.n	fcea <_ZN3app5chip812render_block17h6c8b81526965606bE+0x46>
    fcea:	a80a      	add	r0, sp, #40	; 0x28
        left, top, 
        right, bottom,
    );
    //  Render the block
    let (left_physical, top_physical, right_physical, bottom_physical) = block.get_window();
    fcec:	f000 f920 	bl	ff30 <_ZN3app5chip813PixelIterator10get_window17h111d7a23399766c3E>
    fcf0:	9010      	str	r0, [sp, #64]	; 0x40
    fcf2:	9810      	ldr	r0, [sp, #64]	; 0x40
    fcf4:	900e      	str	r0, [sp, #56]	; 0x38
    fcf6:	e7ff      	b.n	fcf8 <_ZN3app5chip812render_block17h6c8b81526965606bE+0x54>
    fcf8:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    fcfc:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    fd00:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    fd04:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    fd08:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    fd0c:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
    fd10:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
    fd14:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    druid::set_display_pixels(left_physical as u16, top_physical as u16, right_physical as u16, bottom_physical as u16,
    fd18:	46ec      	mov	ip, sp
    fd1a:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
    fd1e:	f8cc e000 	str.w	lr, [ip]
    fd22:	f001 fde4 	bl	118ee <_ZN22piet_embedded_graphics7display18set_display_pixels17he48c5c43fd96ddebE>
    fd26:	9002      	str	r0, [sp, #8]
    fd28:	e7ff      	b.n	fd2a <_ZN3app5chip812render_block17h6c8b81526965606bE+0x86>
    fd2a:	9802      	ldr	r0, [sp, #8]
    fd2c:	f000 0001 	and.w	r0, r0, #1
    fd30:	f24e 31e4 	movw	r1, #58340	; 0xe3e4
    fd34:	f2c0 0101 	movt	r1, #1
    fd38:	f24e 33f8 	movw	r3, #58360	; 0xe3f8
    fd3c:	f2c0 0301 	movt	r3, #1
    fd40:	2211      	movs	r2, #17
    fd42:	f004 ffbd 	bl	14cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
    fd46:	e7ff      	b.n	fd48 <_ZN3app5chip812render_block17h6c8b81526965606bE+0xa4>
        &mut block
    ).expect("set pixels failed");    
}
    fd48:	b012      	add	sp, #72	; 0x48
    fd4a:	bd70      	pop	{r4, r5, r6, pc}

0000fd4c <_ZN3app5chip813PixelIterator3new17h975cb5db80e10243E>:
    physical_bottom:    u8,
}

impl PixelIterator {
    /// Return a new PixelInterator for the block dimensions
    pub fn new(
    fd4c:	b570      	push	{r4, r5, r6, lr}
    fd4e:	b08a      	sub	sp, #40	; 0x28
    fd50:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    fd54:	469e      	mov	lr, r3
    fd56:	4614      	mov	r4, r2
    fd58:	460d      	mov	r5, r1
    fd5a:	f88d 101c 	strb.w	r1, [sp, #28]
    fd5e:	f88d 201d 	strb.w	r2, [sp, #29]
    fd62:	f88d 301e 	strb.w	r3, [sp, #30]
    fd66:	f88d c01f 	strb.w	ip, [sp, #31]
        block_right:     u8,
        //  End row number for block
        block_bottom:    u8,        
    ) -> PixelIterator {
        let (physical_left, physical_top, physical_right, physical_bottom) = 
            Self::get_bounding_box(block_left, block_top, block_right, block_bottom);
    fd6a:	9005      	str	r0, [sp, #20]
    fd6c:	4608      	mov	r0, r1
    fd6e:	4611      	mov	r1, r2
    fd70:	461a      	mov	r2, r3
    fd72:	4663      	mov	r3, ip
    fd74:	f8cd c010 	str.w	ip, [sp, #16]
    fd78:	f8cd e00c 	str.w	lr, [sp, #12]
    fd7c:	9402      	str	r4, [sp, #8]
    fd7e:	9501      	str	r5, [sp, #4]
    fd80:	f000 f83a 	bl	fdf8 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE>
    fd84:	9008      	str	r0, [sp, #32]
    fd86:	9808      	ldr	r0, [sp, #32]
    fd88:	9006      	str	r0, [sp, #24]
    fd8a:	e7ff      	b.n	fd8c <_ZN3app5chip813PixelIterator3new17h975cb5db80e10243E+0x40>
        let (physical_left, physical_top, physical_right, physical_bottom) = 
    fd8c:	f89d 0018 	ldrb.w	r0, [sp, #24]
    fd90:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    fd94:	f89d 1019 	ldrb.w	r1, [sp, #25]
    fd98:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
    fd9c:	f89d 201a 	ldrb.w	r2, [sp, #26]
    fda0:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
    fda4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    fda8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        PixelIterator {
    fdac:	f8dd c004 	ldr.w	ip, [sp, #4]
    fdb0:	f8dd e014 	ldr.w	lr, [sp, #20]
    fdb4:	f88e c000 	strb.w	ip, [lr]
    fdb8:	9c02      	ldr	r4, [sp, #8]
    fdba:	f88e 4001 	strb.w	r4, [lr, #1]
    fdbe:	2500      	movs	r5, #0
    fdc0:	f88e 5002 	strb.w	r5, [lr, #2]
    fdc4:	f88e 5003 	strb.w	r5, [lr, #3]
    fdc8:	f88e 0004 	strb.w	r0, [lr, #4]
    fdcc:	f88e 1005 	strb.w	r1, [lr, #5]
    fdd0:	f88e c006 	strb.w	ip, [lr, #6]
    fdd4:	9d03      	ldr	r5, [sp, #12]
    fdd6:	f88e 5007 	strb.w	r5, [lr, #7]
    fdda:	f88e 4008 	strb.w	r4, [lr, #8]
    fdde:	9e04      	ldr	r6, [sp, #16]
    fde0:	f88e 6009 	strb.w	r6, [lr, #9]
    fde4:	f88e 000a 	strb.w	r0, [lr, #10]
    fde8:	f88e 200b 	strb.w	r2, [lr, #11]
    fdec:	f88e 100c 	strb.w	r1, [lr, #12]
    fdf0:	f88e 300d 	strb.w	r3, [lr, #13]
            x_physical: physical_left,
            y_physical: physical_top,
            block_left, block_right, block_top, block_bottom,
            physical_left, physical_top, physical_right, physical_bottom
        }
    }
    fdf4:	b00a      	add	sp, #40	; 0x28
    fdf6:	bd70      	pop	{r4, r5, r6, pc}

0000fdf8 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE>:
        ( left, top, right, bottom )
    }

    /// Return Bounding Box of Physical Pixels (left, top, right, bottom) that correspond to the Virtual Pixels
    #[cfg(feature = "chip8_curve")]  //  If we are rendering CHIP8 Emulator as curved surface...
    fn get_bounding_box(virtual_left: u8, virtual_top: u8, virtual_right: u8, virtual_bottom: u8) -> (u8, u8, u8, u8) {
    fdf8:	b5b0      	push	{r4, r5, r7, lr}
    fdfa:	b090      	sub	sp, #64	; 0x40
    fdfc:	469c      	mov	ip, r3
    fdfe:	4696      	mov	lr, r2
    fe00:	460c      	mov	r4, r1
    fe02:	4605      	mov	r5, r0
    fe04:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    fe08:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
    fe0c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
    fe10:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        //  One Virtual Pixel may map to multiple Physical Pixels, so we lookup the Physical Bounding Box.
        //  TODO: Handle wide and tall Bounding Boxes
        let physical_left_top = map_virtual_to_physical(virtual_left, virtual_top);  //  Returns (left,top,right,bottom)
    fe14:	f8cd c01c 	str.w	ip, [sp, #28]
    fe18:	f8cd e018 	str.w	lr, [sp, #24]
    fe1c:	9405      	str	r4, [sp, #20]
    fe1e:	9504      	str	r5, [sp, #16]
    fe20:	f000 fc59 	bl	106d6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE>
    fe24:	900d      	str	r0, [sp, #52]	; 0x34
    fe26:	980d      	ldr	r0, [sp, #52]	; 0x34
    fe28:	9009      	str	r0, [sp, #36]	; 0x24
    fe2a:	e7ff      	b.n	fe2c <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x34>
        let physical_right_bottom = map_virtual_to_physical(virtual_right, virtual_bottom);
    fe2c:	9806      	ldr	r0, [sp, #24]
    fe2e:	9907      	ldr	r1, [sp, #28]
    fe30:	f000 fc51 	bl	106d6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE>
    fe34:	900e      	str	r0, [sp, #56]	; 0x38
    fe36:	980e      	ldr	r0, [sp, #56]	; 0x38
    fe38:	900a      	str	r0, [sp, #40]	; 0x28
    fe3a:	e7ff      	b.n	fe3c <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x44>

        let left: u8 = physical_left_top.0;
    fe3c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    fe40:	4601      	mov	r1, r0
    fe42:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
        let top: u8 = physical_left_top.1;
    fe46:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    fe4a:	4602      	mov	r2, r0
    fe4c:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
        let right: u8 = physical_right_bottom.2.min(PHYSICAL_WIDTH as u8 - 1);
    fe50:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
    fe54:	23ef      	movs	r3, #239	; 0xef
    fe56:	9103      	str	r1, [sp, #12]
    fe58:	4619      	mov	r1, r3
    fe5a:	9202      	str	r2, [sp, #8]
    fe5c:	f005 f9f5 	bl	1524a <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
    fe60:	4601      	mov	r1, r0
    fe62:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    fe66:	9101      	str	r1, [sp, #4]
    fe68:	e7ff      	b.n	fe6a <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x72>
        let bottom: u8 = physical_right_bottom.3.min(PHYSICAL_HEIGHT as u8 - 1);
    fe6a:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
    fe6e:	21c7      	movs	r1, #199	; 0xc7
    fe70:	f005 f9eb 	bl	1524a <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
    fe74:	4601      	mov	r1, r0
    fe76:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    fe7a:	9100      	str	r1, [sp, #0]
    fe7c:	e7ff      	b.n	fe7e <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x86>
        assert!(left < PHYSICAL_WIDTH as u8 && top < PHYSICAL_HEIGHT as u8 && right < PHYSICAL_WIDTH as u8 && bottom < PHYSICAL_HEIGHT as u8, "overflow");
    fe7e:	9803      	ldr	r0, [sp, #12]
    fe80:	b2c1      	uxtb	r1, r0
    fe82:	29f0      	cmp	r1, #240	; 0xf0
    fe84:	d32e      	bcc.n	fee4 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xec>
    fe86:	e029      	b.n	fedc <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xe4>
    fe88:	2001      	movs	r0, #1
    fe8a:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    fe8e:	e008      	b.n	fea2 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xaa>
    fe90:	2000      	movs	r0, #0
    fe92:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    fe96:	e004      	b.n	fea2 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xaa>
    fe98:	9800      	ldr	r0, [sp, #0]
    fe9a:	b2c1      	uxtb	r1, r0
    fe9c:	29c8      	cmp	r1, #200	; 0xc8
    fe9e:	d3f3      	bcc.n	fe88 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x90>
    fea0:	e7f6      	b.n	fe90 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x98>
    fea2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    fea6:	07c0      	lsls	r0, r0, #31
    fea8:	2800      	cmp	r0, #0
    feaa:	d035      	beq.n	ff18 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x120>
    feac:	e025      	b.n	fefa <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x102>
    feae:	2001      	movs	r0, #1
    feb0:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    feb4:	e008      	b.n	fec8 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xd0>
    feb6:	2000      	movs	r0, #0
    feb8:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    febc:	e004      	b.n	fec8 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xd0>
    febe:	9801      	ldr	r0, [sp, #4]
    fec0:	b2c1      	uxtb	r1, r0
    fec2:	29f0      	cmp	r1, #240	; 0xf0
    fec4:	d3f3      	bcc.n	feae <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xb6>
    fec6:	e7f6      	b.n	feb6 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xbe>
    fec8:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    fecc:	07c0      	lsls	r0, r0, #31
    fece:	2800      	cmp	r0, #0
    fed0:	d1e2      	bne.n	fe98 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xa0>
    fed2:	e7dd      	b.n	fe90 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x98>
    fed4:	2001      	movs	r0, #1
    fed6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    feda:	e008      	b.n	feee <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xf6>
    fedc:	2000      	movs	r0, #0
    fede:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    fee2:	e004      	b.n	feee <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xf6>
    fee4:	9802      	ldr	r0, [sp, #8]
    fee6:	b2c1      	uxtb	r1, r0
    fee8:	29c8      	cmp	r1, #200	; 0xc8
    feea:	d3f3      	bcc.n	fed4 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xdc>
    feec:	e7f6      	b.n	fedc <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xe4>
    feee:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    fef2:	07c0      	lsls	r0, r0, #31
    fef4:	2800      	cmp	r0, #0
    fef6:	d1e2      	bne.n	febe <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xc6>
    fef8:	e7dd      	b.n	feb6 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xbe>
        ( left, top, right, bottom )
    fefa:	9803      	ldr	r0, [sp, #12]
    fefc:	f88d 0020 	strb.w	r0, [sp, #32]
    ff00:	9902      	ldr	r1, [sp, #8]
    ff02:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    ff06:	9a01      	ldr	r2, [sp, #4]
    ff08:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    ff0c:	9b00      	ldr	r3, [sp, #0]
    ff0e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }
    ff12:	9808      	ldr	r0, [sp, #32]
    ff14:	b010      	add	sp, #64	; 0x40
    ff16:	bdb0      	pop	{r4, r5, r7, pc}
        assert!(left < PHYSICAL_WIDTH as u8 && top < PHYSICAL_HEIGHT as u8 && right < PHYSICAL_WIDTH as u8 && bottom < PHYSICAL_HEIGHT as u8, "overflow");
    ff18:	f24e 300c 	movw	r0, #58124	; 0xe30c
    ff1c:	f2c0 0001 	movt	r0, #1
    ff20:	f24e 4208 	movw	r2, #58376	; 0xe408
    ff24:	f2c0 0201 	movt	r2, #1
    ff28:	2108      	movs	r1, #8
    ff2a:	f005 ff29 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ff2e:	defe      	udf	#254	; 0xfe

0000ff30 <_ZN3app5chip813PixelIterator10get_window17h111d7a23399766c3E>:

    /// Return window of Physical Pixels (left, top, right, bottom) for this Virtual Block
    pub fn get_window(&self) -> (u8, u8, u8, u8) {
    ff30:	b082      	sub	sp, #8
    ff32:	9001      	str	r0, [sp, #4]
        ( self.physical_left, self.physical_top, self.physical_right, self.physical_bottom )
    ff34:	7a81      	ldrb	r1, [r0, #10]
    ff36:	7ac2      	ldrb	r2, [r0, #11]
    ff38:	7b03      	ldrb	r3, [r0, #12]
    ff3a:	7b40      	ldrb	r0, [r0, #13]
    ff3c:	f88d 1000 	strb.w	r1, [sp]
    ff40:	f88d 3001 	strb.w	r3, [sp, #1]
    ff44:	f88d 2002 	strb.w	r2, [sp, #2]
    ff48:	f88d 0003 	strb.w	r0, [sp, #3]
    }
    ff4c:	9800      	ldr	r0, [sp, #0]
    ff4e:	b002      	add	sp, #8
    ff50:	4770      	bx	lr

0000ff52 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE>:

    /// Return the 16-bit colour of the Virtual Pixel
    fn get_color(&mut self) -> u16 {
    ff52:	b580      	push	{r7, lr}
    ff54:	b08a      	sub	sp, #40	; 0x28
    ff56:	9007      	str	r0, [sp, #28]
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    ff58:	7801      	ldrb	r1, [r0, #0]
    ff5a:	7842      	ldrb	r2, [r0, #1]
    ff5c:	0192      	lsls	r2, r2, #6
    ff5e:	2300      	movs	r3, #0
    ff60:	2b00      	cmp	r3, #0
    ff62:	9005      	str	r0, [sp, #20]
    ff64:	9104      	str	r1, [sp, #16]
    ff66:	9203      	str	r2, [sp, #12]
    ff68:	d155      	bne.n	10016 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xc4>
    ff6a:	e7ff      	b.n	ff6c <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x1a>
    ff6c:	9804      	ldr	r0, [sp, #16]
    ff6e:	9903      	ldr	r1, [sp, #12]
    ff70:	1842      	adds	r2, r0, r1
    ff72:	4613      	mov	r3, r2
    ff74:	4282      	cmp	r2, r0
    ff76:	9302      	str	r3, [sp, #8]
    ff78:	d359      	bcc.n	1002e <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xdc>
    ff7a:	e7ff      	b.n	ff7c <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x2a>
    ff7c:	9802      	ldr	r0, [sp, #8]
    ff7e:	9008      	str	r0, [sp, #32]
    ff80:	2100      	movs	r1, #0
        let color = unsafe { convert_color(SCREEN_BUFFER[i]) };
    ff82:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    ff86:	d15e      	bne.n	10046 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xf4>
    ff88:	e7ff      	b.n	ff8a <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x38>
    ff8a:	f244 10b4 	movw	r0, #16820	; 0x41b4
    ff8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ff92:	9902      	ldr	r1, [sp, #8]
    ff94:	5c40      	ldrb	r0, [r0, r1]
    ff96:	f000 f93d 	bl	10214 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E>
    ff9a:	4601      	mov	r1, r0
    ff9c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    ffa0:	9101      	str	r1, [sp, #4]
    ffa2:	e7ff      	b.n	ffa4 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x52>
        if self.x_offset == 0 && self.y_offset == 0 {  //  Update colours only once per Virtual Pixel
    ffa4:	9805      	ldr	r0, [sp, #20]
    ffa6:	7881      	ldrb	r1, [r0, #2]
    ffa8:	2900      	cmp	r1, #0
    ffaa:	d008      	beq.n	ffbe <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x6c>
    ffac:	e003      	b.n	ffb6 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x64>
    ffae:	2001      	movs	r0, #1
    ffb0:	f88d 001b 	strb.w	r0, [sp, #27]
    ffb4:	e008      	b.n	ffc8 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x76>
    ffb6:	2000      	movs	r0, #0
    ffb8:	f88d 001b 	strb.w	r0, [sp, #27]
    ffbc:	e004      	b.n	ffc8 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x76>
    ffbe:	9805      	ldr	r0, [sp, #20]
    ffc0:	78c1      	ldrb	r1, [r0, #3]
    ffc2:	2900      	cmp	r1, #0
    ffc4:	d0f3      	beq.n	ffae <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x5c>
    ffc6:	e7f6      	b.n	ffb6 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x64>
    ffc8:	f89d 001b 	ldrb.w	r0, [sp, #27]
    ffcc:	07c0      	lsls	r0, r0, #31
    ffce:	2800      	cmp	r0, #0
    ffd0:	d01e      	beq.n	10010 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xbe>
    ffd2:	e7ff      	b.n	ffd4 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x82>
    ffd4:	2000      	movs	r0, #0
            unsafe { SCREEN_BUFFER[i] = update_color(SCREEN_BUFFER[i]); }  //  Fade to black
    ffd6:	9902      	ldr	r1, [sp, #8]
    ffd8:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    ffdc:	d13d      	bne.n	1005a <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x108>
    ffde:	e7ff      	b.n	ffe0 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x8e>
    ffe0:	f244 10b4 	movw	r0, #16820	; 0x41b4
    ffe4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ffe8:	9902      	ldr	r1, [sp, #8]
    ffea:	5c40      	ldrb	r0, [r0, r1]
    ffec:	f000 f99f 	bl	1032e <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E>
    fff0:	9000      	str	r0, [sp, #0]
    fff2:	e7ff      	b.n	fff4 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xa2>
    fff4:	2000      	movs	r0, #0
    fff6:	9902      	ldr	r1, [sp, #8]
    fff8:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    fffc:	d137      	bne.n	1006e <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x11c>
    fffe:	e7ff      	b.n	10000 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xae>
   10000:	f244 10b4 	movw	r0, #16820	; 0x41b4
   10004:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10008:	9900      	ldr	r1, [sp, #0]
   1000a:	9a02      	ldr	r2, [sp, #8]
   1000c:	5481      	strb	r1, [r0, r2]
        if self.x_offset == 0 && self.y_offset == 0 {  //  Update colours only once per Virtual Pixel
   1000e:	e7ff      	b.n	10010 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xbe>
        }
        color
    }    
   10010:	9801      	ldr	r0, [sp, #4]
   10012:	b00a      	add	sp, #40	; 0x28
   10014:	bd80      	pop	{r7, pc}
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
   10016:	f24e 2040 	movw	r0, #57920	; 0xe240
   1001a:	f2c0 0001 	movt	r0, #1
   1001e:	f24e 4218 	movw	r2, #58392	; 0xe418
   10022:	f2c0 0201 	movt	r2, #1
   10026:	2121      	movs	r1, #33	; 0x21
   10028:	f005 feaa 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1002c:	defe      	udf	#254	; 0xfe
   1002e:	f24e 2080 	movw	r0, #57984	; 0xe280
   10032:	f2c0 0001 	movt	r0, #1
   10036:	f24e 4228 	movw	r2, #58408	; 0xe428
   1003a:	f2c0 0201 	movt	r2, #1
   1003e:	211c      	movs	r1, #28
   10040:	f005 fe9e 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10044:	defe      	udf	#254	; 0xfe
        let color = unsafe { convert_color(SCREEN_BUFFER[i]) };
   10046:	f24e 4038 	movw	r0, #58424	; 0xe438
   1004a:	f2c0 0001 	movt	r0, #1
   1004e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10052:	9902      	ldr	r1, [sp, #8]
   10054:	f005 feaa 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10058:	defe      	udf	#254	; 0xfe
            unsafe { SCREEN_BUFFER[i] = update_color(SCREEN_BUFFER[i]); }  //  Fade to black
   1005a:	f24e 4048 	movw	r0, #58440	; 0xe448
   1005e:	f2c0 0001 	movt	r0, #1
   10062:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10066:	9902      	ldr	r1, [sp, #8]
   10068:	f005 fea0 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1006c:	defe      	udf	#254	; 0xfe
   1006e:	f24e 4058 	movw	r0, #58456	; 0xe458
   10072:	f2c0 0001 	movt	r0, #1
   10076:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1007a:	9902      	ldr	r1, [sp, #8]
   1007c:	f005 fe96 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10080:	defe      	udf	#254	; 0xfe

00010082 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE>:
        return Some(color);
    }

    /// Return the next Physical Pixel colour
    #[cfg(feature = "chip8_curve")]  //  If we are rendering CHIP8 Emulator as curved surface...
    fn next(&mut self) -> Option<Self::Item> {
   10082:	b580      	push	{r7, lr}
   10084:	b08c      	sub	sp, #48	; 0x30
   10086:	900a      	str	r0, [sp, #40]	; 0x28
        if self.y_physical > self.physical_bottom { return None; }  //  No more Physical Pixels
   10088:	7941      	ldrb	r1, [r0, #5]
   1008a:	7b42      	ldrb	r2, [r0, #13]
   1008c:	4291      	cmp	r1, r2
   1008e:	9007      	str	r0, [sp, #28]
   10090:	d805      	bhi.n	1009e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x1c>
   10092:	e7ff      	b.n	10094 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x12>
        assert!(self.x_physical < PHYSICAL_WIDTH as u8, "x overflow");
   10094:	9807      	ldr	r0, [sp, #28]
   10096:	7901      	ldrb	r1, [r0, #4]
   10098:	29ef      	cmp	r1, #239	; 0xef
   1009a:	d80f      	bhi.n	100bc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x3a>
   1009c:	e009      	b.n	100b2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x30>
   1009e:	2000      	movs	r0, #0
        if self.y_physical > self.physical_bottom { return None; }  //  No more Physical Pixels
   100a0:	f8ad 0020 	strh.w	r0, [sp, #32]
   100a4:	e7ff      	b.n	100a6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x24>
            self.y_physical += 1;
        }
        
        //  Return the Physical Pixel color
        return Some(color);
    }    
   100a6:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   100aa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   100ae:	b00c      	add	sp, #48	; 0x30
   100b0:	bd80      	pop	{r7, pc}
        assert!(self.y_physical < PHYSICAL_HEIGHT as u8, "y overflow");
   100b2:	9807      	ldr	r0, [sp, #28]
   100b4:	7941      	ldrb	r1, [r0, #5]
   100b6:	29c7      	cmp	r1, #199	; 0xc7
   100b8:	d81b      	bhi.n	100f2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x70>
   100ba:	e00b      	b.n	100d4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x52>
        assert!(self.x_physical < PHYSICAL_WIDTH as u8, "x overflow");
   100bc:	f24e 10ec 	movw	r0, #57836	; 0xe1ec
   100c0:	f2c0 0001 	movt	r0, #1
   100c4:	f24e 4268 	movw	r2, #58472	; 0xe468
   100c8:	f2c0 0201 	movt	r2, #1
   100cc:	210a      	movs	r1, #10
   100ce:	f005 fe57 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   100d2:	defe      	udf	#254	; 0xfe
        let virtual_pixel = map_physical_to_virtual(self.x_physical, self.y_physical);
   100d4:	9807      	ldr	r0, [sp, #28]
   100d6:	7900      	ldrb	r0, [r0, #4]
   100d8:	9907      	ldr	r1, [sp, #28]
   100da:	7949      	ldrb	r1, [r1, #5]
   100dc:	f000 f982 	bl	103e4 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E>
   100e0:	4602      	mov	r2, r0
   100e2:	460b      	mov	r3, r1
   100e4:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
   100e8:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
   100ec:	9206      	str	r2, [sp, #24]
   100ee:	9305      	str	r3, [sp, #20]
   100f0:	e00b      	b.n	1010a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x88>
        assert!(self.y_physical < PHYSICAL_HEIGHT as u8, "y overflow");
   100f2:	f24e 2008 	movw	r0, #57864	; 0xe208
   100f6:	f2c0 0001 	movt	r0, #1
   100fa:	f24e 4278 	movw	r2, #58488	; 0xe478
   100fe:	f2c0 0201 	movt	r2, #1
   10102:	210a      	movs	r1, #10
   10104:	f005 fe3c 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10108:	defe      	udf	#254	; 0xfe
        if self.x == virtual_pixel.0 && self.y == virtual_pixel.1 {
   1010a:	9807      	ldr	r0, [sp, #28]
   1010c:	7801      	ldrb	r1, [r0, #0]
   1010e:	9a06      	ldr	r2, [sp, #24]
   10110:	b2d3      	uxtb	r3, r2
   10112:	4299      	cmp	r1, r3
   10114:	d008      	beq.n	10128 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xa6>
   10116:	e003      	b.n	10120 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x9e>
   10118:	2001      	movs	r0, #1
   1011a:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   1011e:	e00a      	b.n	10136 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xb4>
   10120:	2000      	movs	r0, #0
   10122:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   10126:	e006      	b.n	10136 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xb4>
   10128:	9807      	ldr	r0, [sp, #28]
   1012a:	7841      	ldrb	r1, [r0, #1]
   1012c:	9a05      	ldr	r2, [sp, #20]
   1012e:	b2d3      	uxtb	r3, r2
   10130:	4299      	cmp	r1, r3
   10132:	d0f1      	beq.n	10118 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x96>
   10134:	e7f4      	b.n	10120 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x9e>
   10136:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   1013a:	07c0      	lsls	r0, r0, #31
   1013c:	2800      	cmp	r0, #0
   1013e:	d109      	bne.n	10154 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xd2>
   10140:	e7ff      	b.n	10142 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xc0>
            self.x = virtual_pixel.0;
   10142:	9806      	ldr	r0, [sp, #24]
   10144:	9907      	ldr	r1, [sp, #28]
   10146:	7008      	strb	r0, [r1, #0]
            self.y = virtual_pixel.1;
   10148:	9a05      	ldr	r2, [sp, #20]
   1014a:	704a      	strb	r2, [r1, #1]
   1014c:	2300      	movs	r3, #0
            self.x_offset = 0;
   1014e:	708b      	strb	r3, [r1, #2]
            self.y_offset = 0;
   10150:	70cb      	strb	r3, [r1, #3]
        if self.x == virtual_pixel.0 && self.y == virtual_pixel.1 {
   10152:	e00c      	b.n	1016e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xec>
            self.x_offset += 1;
   10154:	9807      	ldr	r0, [sp, #28]
   10156:	7881      	ldrb	r1, [r0, #2]
   10158:	3101      	adds	r1, #1
   1015a:	b2ca      	uxtb	r2, r1
   1015c:	460b      	mov	r3, r1
   1015e:	428a      	cmp	r2, r1
   10160:	9304      	str	r3, [sp, #16]
   10162:	d133      	bne.n	101cc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x14a>
   10164:	e7ff      	b.n	10166 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xe4>
   10166:	9804      	ldr	r0, [sp, #16]
   10168:	9907      	ldr	r1, [sp, #28]
   1016a:	7088      	strb	r0, [r1, #2]
        if self.x == virtual_pixel.0 && self.y == virtual_pixel.1 {
   1016c:	e7ff      	b.n	1016e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xec>
        let color = self.get_color();
   1016e:	9807      	ldr	r0, [sp, #28]
   10170:	f7ff feef 	bl	ff52 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE>
   10174:	4601      	mov	r1, r0
   10176:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
   1017a:	9103      	str	r1, [sp, #12]
   1017c:	e7ff      	b.n	1017e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xfc>
        self.x_physical += 1;
   1017e:	9807      	ldr	r0, [sp, #28]
   10180:	7901      	ldrb	r1, [r0, #4]
   10182:	3101      	adds	r1, #1
   10184:	b2ca      	uxtb	r2, r1
   10186:	460b      	mov	r3, r1
   10188:	428a      	cmp	r2, r1
   1018a:	9302      	str	r3, [sp, #8]
   1018c:	d12a      	bne.n	101e4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x162>
   1018e:	e7ff      	b.n	10190 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x10e>
   10190:	9802      	ldr	r0, [sp, #8]
   10192:	9907      	ldr	r1, [sp, #28]
   10194:	7108      	strb	r0, [r1, #4]
        if self.x_physical > self.physical_right {
   10196:	790a      	ldrb	r2, [r1, #4]
   10198:	7acb      	ldrb	r3, [r1, #11]
   1019a:	429a      	cmp	r2, r3
   1019c:	d90f      	bls.n	101be <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x13c>
   1019e:	e7ff      	b.n	101a0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x11e>
            self.x_physical = self.physical_left;
   101a0:	9807      	ldr	r0, [sp, #28]
   101a2:	7a81      	ldrb	r1, [r0, #10]
   101a4:	7101      	strb	r1, [r0, #4]
            self.y_physical += 1;
   101a6:	7941      	ldrb	r1, [r0, #5]
   101a8:	3101      	adds	r1, #1
   101aa:	b2ca      	uxtb	r2, r1
   101ac:	460b      	mov	r3, r1
   101ae:	428a      	cmp	r2, r1
   101b0:	9301      	str	r3, [sp, #4]
   101b2:	d123      	bne.n	101fc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x17a>
   101b4:	e7ff      	b.n	101b6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x134>
   101b6:	9801      	ldr	r0, [sp, #4]
   101b8:	9907      	ldr	r1, [sp, #28]
   101ba:	7148      	strb	r0, [r1, #5]
        if self.x_physical > self.physical_right {
   101bc:	e7ff      	b.n	101be <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x13c>
        return Some(color);
   101be:	9803      	ldr	r0, [sp, #12]
   101c0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
   101c4:	2101      	movs	r1, #1
   101c6:	f8ad 1020 	strh.w	r1, [sp, #32]
   101ca:	e76c      	b.n	100a6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x24>
            self.x_offset += 1;
   101cc:	f24e 2080 	movw	r0, #57984	; 0xe280
   101d0:	f2c0 0001 	movt	r0, #1
   101d4:	f24e 4288 	movw	r2, #58504	; 0xe488
   101d8:	f2c0 0201 	movt	r2, #1
   101dc:	211c      	movs	r1, #28
   101de:	f005 fdcf 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   101e2:	defe      	udf	#254	; 0xfe
        self.x_physical += 1;
   101e4:	f24e 2080 	movw	r0, #57984	; 0xe280
   101e8:	f2c0 0001 	movt	r0, #1
   101ec:	f24e 4298 	movw	r2, #58520	; 0xe498
   101f0:	f2c0 0201 	movt	r2, #1
   101f4:	211c      	movs	r1, #28
   101f6:	f005 fdc3 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   101fa:	defe      	udf	#254	; 0xfe
            self.y_physical += 1;
   101fc:	f24e 2080 	movw	r0, #57984	; 0xe280
   10200:	f2c0 0001 	movt	r0, #1
   10204:	f24e 42a8 	movw	r2, #58536	; 0xe4a8
   10208:	f2c0 0201 	movt	r2, #1
   1020c:	211c      	movs	r1, #28
   1020e:	f005 fdb7 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10212:	defe      	udf	#254	; 0xfe

00010214 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E>:
}

/// Convert the Virtual Colour (8-bit greyscale) to 16-bit Colour
fn convert_color(grey: u8) -> u16 {
   10214:	b580      	push	{r7, lr}
   10216:	b08a      	sub	sp, #40	; 0x28
   10218:	b2c1      	uxtb	r1, r0
   1021a:	4602      	mov	r2, r0
   1021c:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    match grey {
        250..=255 => Rgb565::from(( grey, grey, grey )).0,  //  White
   10220:	29fa      	cmp	r1, #250	; 0xfa
   10222:	9205      	str	r2, [sp, #20]
   10224:	d304      	bcc.n	10230 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x1c>
   10226:	e7ff      	b.n	10228 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x14>
   10228:	2001      	movs	r0, #1
   1022a:	2800      	cmp	r0, #0
   1022c:	d11d      	bne.n	1026a <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x56>
   1022e:	e7ff      	b.n	10230 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x1c>
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
   10230:	9805      	ldr	r0, [sp, #20]
   10232:	b241      	sxtb	r1, r0
   10234:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   10238:	dc05      	bgt.n	10246 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x32>
   1023a:	e7ff      	b.n	1023c <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x28>
   1023c:	9805      	ldr	r0, [sp, #20]
   1023e:	b2c1      	uxtb	r1, r0
   10240:	29fa      	cmp	r1, #250	; 0xfa
   10242:	d327      	bcc.n	10294 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x80>
   10244:	e7ff      	b.n	10246 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x32>
   10246:	2000      	movs	r0, #0
        0..128   => Rgb565::from(( 0, 0, grey )).0,  //  Dark Blue
   10248:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   1024c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   10250:	9805      	ldr	r0, [sp, #20]
   10252:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
   10256:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
   1025a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1025e:	ea42 4001 	orr.w	r0, r2, r1, lsl #16
   10262:	f001 fe3a 	bl	11eda <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
   10266:	9004      	str	r0, [sp, #16]
   10268:	e041      	b.n	102ee <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xda>
        250..=255 => Rgb565::from(( grey, grey, grey )).0,  //  White
   1026a:	9805      	ldr	r0, [sp, #20]
   1026c:	f88d 001c 	strb.w	r0, [sp, #28]
   10270:	f88d 001d 	strb.w	r0, [sp, #29]
   10274:	f88d 001e 	strb.w	r0, [sp, #30]
   10278:	f89d 101e 	ldrb.w	r1, [sp, #30]
   1027c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   10280:	ea42 4001 	orr.w	r0, r2, r1, lsl #16
   10284:	f001 fe29 	bl	11eda <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
   10288:	9003      	str	r0, [sp, #12]
   1028a:	e7ff      	b.n	1028c <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x78>
   1028c:	9803      	ldr	r0, [sp, #12]
   1028e:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
   10292:	e030      	b.n	102f6 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xe2>
   10294:	f06f 0063 	mvn.w	r0, #99	; 0x63
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
   10298:	9905      	ldr	r1, [sp, #20]
   1029a:	fa50 f081 	uxtab	r0, r0, r1
   1029e:	b2c2      	uxtb	r2, r0
   102a0:	4603      	mov	r3, r0
   102a2:	4282      	cmp	r2, r0
   102a4:	9302      	str	r3, [sp, #8]
   102a6:	d12a      	bne.n	102fe <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xea>
   102a8:	e7ff      	b.n	102aa <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x96>
   102aa:	f06f 0063 	mvn.w	r0, #99	; 0x63
   102ae:	9905      	ldr	r1, [sp, #20]
   102b0:	fa50 f081 	uxtab	r0, r0, r1
   102b4:	b2c2      	uxtb	r2, r0
   102b6:	4603      	mov	r3, r0
   102b8:	4282      	cmp	r2, r0
   102ba:	9301      	str	r3, [sp, #4]
   102bc:	d12b      	bne.n	10316 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x102>
   102be:	e7ff      	b.n	102c0 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xac>
   102c0:	9802      	ldr	r0, [sp, #8]
   102c2:	f88d 0020 	strb.w	r0, [sp, #32]
   102c6:	9905      	ldr	r1, [sp, #20]
   102c8:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   102cc:	9a01      	ldr	r2, [sp, #4]
   102ce:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   102d2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   102d6:	f8bd c020 	ldrh.w	ip, [sp, #32]
   102da:	ea4c 4003 	orr.w	r0, ip, r3, lsl #16
   102de:	f001 fdfc 	bl	11eda <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
   102e2:	9000      	str	r0, [sp, #0]
   102e4:	e7ff      	b.n	102e6 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xd2>
   102e6:	9800      	ldr	r0, [sp, #0]
   102e8:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
   102ec:	e003      	b.n	102f6 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xe2>
        0..128   => Rgb565::from(( 0, 0, grey )).0,  //  Dark Blue
   102ee:	9804      	ldr	r0, [sp, #16]
   102f0:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
   102f4:	e7ff      	b.n	102f6 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xe2>
    }
}
   102f6:	f8bd 001a 	ldrh.w	r0, [sp, #26]
   102fa:	b00a      	add	sp, #40	; 0x28
   102fc:	bd80      	pop	{r7, pc}
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
   102fe:	f24e 3060 	movw	r0, #58208	; 0xe360
   10302:	f2c0 0001 	movt	r0, #1
   10306:	f24e 42b8 	movw	r2, #58552	; 0xe4b8
   1030a:	f2c0 0201 	movt	r2, #1
   1030e:	2121      	movs	r1, #33	; 0x21
   10310:	f005 fd36 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10314:	defe      	udf	#254	; 0xfe
   10316:	f24e 3060 	movw	r0, #58208	; 0xe360
   1031a:	f2c0 0001 	movt	r0, #1
   1031e:	f24e 42c8 	movw	r2, #58568	; 0xe4c8
   10322:	f2c0 0201 	movt	r2, #1
   10326:	2121      	movs	r1, #33	; 0x21
   10328:	f005 fd2a 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1032c:	defe      	udf	#254	; 0xfe

0001032e <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E>:

/// Fade the Virtual Colour (8-bit greyscale) to black
fn update_color(grey: u8) -> u8 {
   1032e:	b084      	sub	sp, #16
   10330:	b2c1      	uxtb	r1, r0
   10332:	4602      	mov	r2, r0
   10334:	f88d 000f 	strb.w	r0, [sp, #15]
    match grey {
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
   10338:	29c8      	cmp	r1, #200	; 0xc8
   1033a:	9202      	str	r2, [sp, #8]
   1033c:	d304      	bcc.n	10348 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x1a>
   1033e:	e7ff      	b.n	10340 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x12>
   10340:	2001      	movs	r0, #1
   10342:	2800      	cmp	r0, #0
   10344:	d110      	bne.n	10368 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x3a>
   10346:	e7ff      	b.n	10348 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x1a>
        128..200 => grey,        //  Normal white stays the same
   10348:	9802      	ldr	r0, [sp, #8]
   1034a:	b241      	sxtb	r1, r0
   1034c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   10350:	dc05      	bgt.n	1035e <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x30>
   10352:	e7ff      	b.n	10354 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x26>
   10354:	9802      	ldr	r0, [sp, #8]
   10356:	b2c1      	uxtb	r1, r0
   10358:	29c8      	cmp	r1, #200	; 0xc8
   1035a:	d314      	bcc.n	10386 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x58>
   1035c:	e7ff      	b.n	1035e <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x30>
        0..128   => grey >> 1,   //  Dark fade to black
   1035e:	9802      	ldr	r0, [sp, #8]
   10360:	b2c1      	uxtb	r1, r0
   10362:	0849      	lsrs	r1, r1, #1
   10364:	9101      	str	r1, [sp, #4]
   10366:	e012      	b.n	1038e <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x60>
   10368:	f06f 0001 	mvn.w	r0, #1
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
   1036c:	9902      	ldr	r1, [sp, #8]
   1036e:	fa50 f081 	uxtab	r0, r0, r1
   10372:	b2c2      	uxtb	r2, r0
   10374:	4603      	mov	r3, r0
   10376:	4282      	cmp	r2, r0
   10378:	9300      	str	r3, [sp, #0]
   1037a:	d110      	bne.n	1039e <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x70>
   1037c:	e7ff      	b.n	1037e <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x50>
   1037e:	9800      	ldr	r0, [sp, #0]
   10380:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
   10384:	e007      	b.n	10396 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x68>
        128..200 => grey,        //  Normal white stays the same
   10386:	9802      	ldr	r0, [sp, #8]
   10388:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
   1038c:	e003      	b.n	10396 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x68>
        0..128   => grey >> 1,   //  Dark fade to black
   1038e:	9801      	ldr	r0, [sp, #4]
   10390:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
   10394:	e7ff      	b.n	10396 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x68>
    }
}
   10396:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1039a:	b004      	add	sp, #16
   1039c:	4770      	bx	lr
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
   1039e:	f24e 3060 	movw	r0, #58208	; 0xe360
   103a2:	f2c0 0001 	movt	r0, #1
   103a6:	f24e 42d8 	movw	r2, #58584	; 0xe4d8
   103aa:	f2c0 0201 	movt	r2, #1
   103ae:	2121      	movs	r1, #33	; 0x21
   103b0:	f005 fce6 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   103b4:	defe      	udf	#254	; 0xfe

000103b6 <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E>:

/// TODO: Handle touch events to emulate buttons
pub fn handle_touch(_x: u16, _y: u16) { 
   103b6:	b580      	push	{r7, lr}
   103b8:	b084      	sub	sp, #16
   103ba:	460a      	mov	r2, r1
   103bc:	4603      	mov	r3, r0
   103be:	f8ad 000c 	strh.w	r0, [sp, #12]
   103c2:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
   103c6:	f24e 40e8 	movw	r0, #58600	; 0xe4e8
   103ca:	f2c0 0001 	movt	r0, #1
   103ce:	2118      	movs	r1, #24
   103d0:	9202      	str	r2, [sp, #8]
   103d2:	9301      	str	r3, [sp, #4]
   103d4:	f7f8 fe90 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
   103d8:	e7ff      	b.n	103da <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E+0x24>
   103da:	f7f8 fed3 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
   103de:	e7ff      	b.n	103e0 <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E+0x2a>
}
   103e0:	b004      	add	sp, #16
   103e2:	bd80      	pop	{r7, pc}

000103e4 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E>:
const VIRTUAL_TO_PHYSICAL_MAP_WIDTH: usize = SCREEN_WIDTH / 2;
const VIRTUAL_TO_PHYSICAL_MAP_HEIGHT: usize = SCREEN_HEIGHT / 2;

/// For Physical (x,y) Coordinates, return the corresponding Virtual (x,y) Coordinates.
/// Used by the CHIP-8 Emulator to decide which Virtual Pixel to fetch the colour value when rendering a Physical Pixel.
fn map_physical_to_virtual(x: u8, y: u8) -> (u8, u8) {
   103e4:	b580      	push	{r7, lr}
   103e6:	b092      	sub	sp, #72	; 0x48
   103e8:	b2c2      	uxtb	r2, r0
   103ea:	460b      	mov	r3, r1
   103ec:	4684      	mov	ip, r0
   103ee:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
   103f2:	f88d 1043 	strb.w	r1, [sp, #67]	; 0x43
    //  Check which quadrant (x,y) belongs to and flip accordingly
    let flip =  //  (flip for X, flip for Y)
        if x < PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   103f6:	2a78      	cmp	r2, #120	; 0x78
   103f8:	930c      	str	r3, [sp, #48]	; 0x30
   103fa:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   103fe:	d308      	bcc.n	10412 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x2e>
   10400:	e003      	b.n	1040a <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x26>
   10402:	2001      	movs	r0, #1
   10404:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   10408:	e008      	b.n	1041c <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x38>
   1040a:	2000      	movs	r0, #0
   1040c:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   10410:	e004      	b.n	1041c <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x38>
   10412:	980c      	ldr	r0, [sp, #48]	; 0x30
   10414:	b2c1      	uxtb	r1, r0
   10416:	2964      	cmp	r1, #100	; 0x64
   10418:	d3f3      	bcc.n	10402 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1e>
   1041a:	e7f6      	b.n	1040a <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x26>
   1041c:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   10420:	07c0      	lsls	r0, r0, #31
   10422:	2800      	cmp	r0, #0
   10424:	d105      	bne.n	10432 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x4e>
   10426:	e7ff      	b.n	10428 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x44>
            (true, true)  //  Top left quadrant: Flip horizontally and vertically
        } else if x >= PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   10428:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1042a:	b2c1      	uxtb	r1, r0
   1042c:	2977      	cmp	r1, #119	; 0x77
   1042e:	d80e      	bhi.n	1044e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x6a>
   10430:	e009      	b.n	10446 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x62>
   10432:	2001      	movs	r0, #1
            (true, true)  //  Top left quadrant: Flip horizontally and vertically
   10434:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
   10438:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
        if x < PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   1043c:	e040      	b.n	104c0 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xdc>
   1043e:	2001      	movs	r0, #1
        } else if x >= PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   10440:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
   10444:	e008      	b.n	10458 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x74>
   10446:	2000      	movs	r0, #0
   10448:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
   1044c:	e004      	b.n	10458 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x74>
   1044e:	980c      	ldr	r0, [sp, #48]	; 0x30
   10450:	b2c1      	uxtb	r1, r0
   10452:	2964      	cmp	r1, #100	; 0x64
   10454:	d3f3      	bcc.n	1043e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x5a>
   10456:	e7f6      	b.n	10446 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x62>
   10458:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   1045c:	07c0      	lsls	r0, r0, #31
   1045e:	2800      	cmp	r0, #0
   10460:	d105      	bne.n	1046e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x8a>
   10462:	e7ff      	b.n	10464 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x80>
            (false, true)   //  Top right quadrant: Flip vertically
        } else if x < PHYSICAL_WIDTH as u8 / 2 && y >= PHYSICAL_HEIGHT as u8 / 2 {
   10464:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10466:	b2c1      	uxtb	r1, r0
   10468:	2978      	cmp	r1, #120	; 0x78
   1046a:	d30f      	bcc.n	1048c <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xa8>
   1046c:	e00a      	b.n	10484 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xa0>
   1046e:	2000      	movs	r0, #0
            (false, true)   //  Top right quadrant: Flip vertically
   10470:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
   10474:	2001      	movs	r0, #1
   10476:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
        } else if x >= PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   1047a:	e020      	b.n	104be <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xda>
   1047c:	2001      	movs	r0, #1
        } else if x < PHYSICAL_WIDTH as u8 / 2 && y >= PHYSICAL_HEIGHT as u8 / 2 {
   1047e:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
   10482:	e008      	b.n	10496 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xb2>
   10484:	2000      	movs	r0, #0
   10486:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
   1048a:	e004      	b.n	10496 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xb2>
   1048c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1048e:	b2c1      	uxtb	r1, r0
   10490:	2963      	cmp	r1, #99	; 0x63
   10492:	d8f3      	bhi.n	1047c <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x98>
   10494:	e7f6      	b.n	10484 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xa0>
   10496:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
   1049a:	07c0      	lsls	r0, r0, #31
   1049c:	2800      	cmp	r0, #0
   1049e:	d106      	bne.n	104ae <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xca>
   104a0:	e7ff      	b.n	104a2 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xbe>
   104a2:	2000      	movs	r0, #0
            (true, false)   //  Bottom left quadrant: Flip horizontally
        } else {
            (false, false)    //  Bottom right quadrant: Don't flip
   104a4:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
   104a8:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
        } else if x < PHYSICAL_WIDTH as u8 / 2 && y >= PHYSICAL_HEIGHT as u8 / 2 {
   104ac:	e006      	b.n	104bc <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xd8>
   104ae:	2001      	movs	r0, #1
            (true, false)   //  Bottom left quadrant: Flip horizontally
   104b0:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
   104b4:	2000      	movs	r0, #0
   104b6:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
        } else if x < PHYSICAL_WIDTH as u8 / 2 && y >= PHYSICAL_HEIGHT as u8 / 2 {
   104ba:	e7ff      	b.n	104bc <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xd8>
        } else if x >= PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   104bc:	e7ff      	b.n	104be <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xda>
        if x < PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   104be:	e7ff      	b.n	104c0 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xdc>
        };
    let x_normalised = 
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - x } 
   104c0:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
   104c4:	07c0      	lsls	r0, r0, #31
   104c6:	2800      	cmp	r0, #0
   104c8:	d10c      	bne.n	104e4 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x100>
   104ca:	e7ff      	b.n	104cc <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xe8>
   104cc:	f06f 0077 	mvn.w	r0, #119	; 0x77
        else      { x - PHYSICAL_WIDTH as u8 / 2 };
   104d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   104d2:	fa50 f081 	uxtab	r0, r0, r1
   104d6:	b2c2      	uxtb	r2, r0
   104d8:	4603      	mov	r3, r0
   104da:	4282      	cmp	r2, r0
   104dc:	930a      	str	r3, [sp, #40]	; 0x28
   104de:	f040 80a6 	bne.w	1062e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x24a>
   104e2:	e00e      	b.n	10502 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x11e>
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - x } 
   104e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   104e6:	b2c1      	uxtb	r1, r0
   104e8:	f1c1 0178 	rsb	r1, r1, #120	; 0x78
   104ec:	b2ca      	uxtb	r2, r1
   104ee:	460b      	mov	r3, r1
   104f0:	428a      	cmp	r2, r1
   104f2:	9309      	str	r3, [sp, #36]	; 0x24
   104f4:	f040 808f 	bne.w	10616 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x232>
   104f8:	e7ff      	b.n	104fa <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x116>
   104fa:	9809      	ldr	r0, [sp, #36]	; 0x24
   104fc:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
   10500:	e003      	b.n	1050a <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x126>
        else      { x - PHYSICAL_WIDTH as u8 / 2 };
   10502:	980a      	ldr	r0, [sp, #40]	; 0x28
   10504:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - x } 
   10508:	e7ff      	b.n	1050a <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x126>
    let y_normalised = 
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - y }
   1050a:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
   1050e:	07c0      	lsls	r0, r0, #31
   10510:	2800      	cmp	r0, #0
   10512:	d10c      	bne.n	1052e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x14a>
   10514:	e7ff      	b.n	10516 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x132>
   10516:	f06f 0063 	mvn.w	r0, #99	; 0x63
        else      { y - PHYSICAL_HEIGHT as u8 / 2 };
   1051a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1051c:	fa50 f081 	uxtab	r0, r0, r1
   10520:	b2c2      	uxtb	r2, r0
   10522:	4603      	mov	r3, r0
   10524:	4282      	cmp	r2, r0
   10526:	9308      	str	r3, [sp, #32]
   10528:	f040 8099 	bne.w	1065e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x27a>
   1052c:	e00e      	b.n	1054c <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x168>
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - y }
   1052e:	980c      	ldr	r0, [sp, #48]	; 0x30
   10530:	b2c1      	uxtb	r1, r0
   10532:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
   10536:	b2ca      	uxtb	r2, r1
   10538:	460b      	mov	r3, r1
   1053a:	428a      	cmp	r2, r1
   1053c:	9307      	str	r3, [sp, #28]
   1053e:	f040 8082 	bne.w	10646 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x262>
   10542:	e7ff      	b.n	10544 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x160>
   10544:	9807      	ldr	r0, [sp, #28]
   10546:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   1054a:	e003      	b.n	10554 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x170>
        else      { y - PHYSICAL_HEIGHT as u8 / 2 };
   1054c:	9808      	ldr	r0, [sp, #32]
   1054e:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - y }
   10552:	e7ff      	b.n	10554 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x170>
    let p = map_physical_to_virtual_normalised(x_normalised, y_normalised);  //  Returns (x,y)
   10554:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
   10558:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
   1055c:	f000 faac 	bl	10ab8 <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE>
   10560:	4602      	mov	r2, r0
   10562:	460b      	mov	r3, r1
   10564:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
   10568:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   1056c:	9206      	str	r2, [sp, #24]
   1056e:	9305      	str	r3, [sp, #20]
   10570:	e7ff      	b.n	10572 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x18e>
    (
        if flip.0 { SCREEN_WIDTH as u8 / 2 - p.0 } 
   10572:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
   10576:	07c0      	lsls	r0, r0, #31
   10578:	2800      	cmp	r0, #0
   1057a:	d10a      	bne.n	10592 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1ae>
   1057c:	e7ff      	b.n	1057e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x19a>
   1057e:	2020      	movs	r0, #32
        else      { p.0 + SCREEN_WIDTH as u8 / 2 }
   10580:	9906      	ldr	r1, [sp, #24]
   10582:	fa50 f081 	uxtab	r0, r0, r1
   10586:	b2c2      	uxtb	r2, r0
   10588:	4603      	mov	r3, r0
   1058a:	4282      	cmp	r2, r0
   1058c:	9304      	str	r3, [sp, #16]
   1058e:	d17e      	bne.n	1068e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x2aa>
   10590:	e00d      	b.n	105ae <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1ca>
        if flip.0 { SCREEN_WIDTH as u8 / 2 - p.0 } 
   10592:	9806      	ldr	r0, [sp, #24]
   10594:	b2c1      	uxtb	r1, r0
   10596:	f1c1 0120 	rsb	r1, r1, #32
   1059a:	b2ca      	uxtb	r2, r1
   1059c:	460b      	mov	r3, r1
   1059e:	428a      	cmp	r2, r1
   105a0:	9303      	str	r3, [sp, #12]
   105a2:	d168      	bne.n	10676 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x292>
   105a4:	e7ff      	b.n	105a6 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1c2>
   105a6:	9803      	ldr	r0, [sp, #12]
   105a8:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
   105ac:	e003      	b.n	105b6 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1d2>
        else      { p.0 + SCREEN_WIDTH as u8 / 2 }
   105ae:	9804      	ldr	r0, [sp, #16]
   105b0:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
        if flip.0 { SCREEN_WIDTH as u8 / 2 - p.0 } 
   105b4:	e7ff      	b.n	105b6 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1d2>
        ,
        if flip.0 { SCREEN_HEIGHT as u8 / 2 - p.1 } 
   105b6:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
   105ba:	07c0      	lsls	r0, r0, #31
   105bc:	2800      	cmp	r0, #0
   105be:	d10a      	bne.n	105d6 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1f2>
   105c0:	e7ff      	b.n	105c2 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1de>
   105c2:	2010      	movs	r0, #16
        else      { p.1 + SCREEN_HEIGHT as u8 / 2 }
   105c4:	9905      	ldr	r1, [sp, #20]
   105c6:	fa50 f081 	uxtab	r0, r0, r1
   105ca:	b2c2      	uxtb	r2, r0
   105cc:	4603      	mov	r3, r0
   105ce:	4282      	cmp	r2, r0
   105d0:	9302      	str	r3, [sp, #8]
   105d2:	d174      	bne.n	106be <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x2da>
   105d4:	e00d      	b.n	105f2 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x20e>
        if flip.0 { SCREEN_HEIGHT as u8 / 2 - p.1 } 
   105d6:	9805      	ldr	r0, [sp, #20]
   105d8:	b2c1      	uxtb	r1, r0
   105da:	f1c1 0110 	rsb	r1, r1, #16
   105de:	b2ca      	uxtb	r2, r1
   105e0:	460b      	mov	r3, r1
   105e2:	428a      	cmp	r2, r1
   105e4:	9301      	str	r3, [sp, #4]
   105e6:	d15e      	bne.n	106a6 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x2c2>
   105e8:	e7ff      	b.n	105ea <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x206>
   105ea:	9801      	ldr	r0, [sp, #4]
   105ec:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
   105f0:	e003      	b.n	105fa <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x216>
        else      { p.1 + SCREEN_HEIGHT as u8 / 2 }
   105f2:	9802      	ldr	r0, [sp, #8]
   105f4:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
        if flip.0 { SCREEN_HEIGHT as u8 / 2 - p.1 } 
   105f8:	e7ff      	b.n	105fa <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x216>
    (
   105fa:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   105fe:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   10602:	f89d 0041 	ldrb.w	r0, [sp, #65]	; 0x41
   10606:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
    )
}
   1060a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
   1060e:	f89d 1035 	ldrb.w	r1, [sp, #53]	; 0x35
   10612:	b012      	add	sp, #72	; 0x48
   10614:	bd80      	pop	{r7, pc}
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - x } 
   10616:	f24e 3060 	movw	r0, #58208	; 0xe360
   1061a:	f2c0 0001 	movt	r0, #1
   1061e:	f24e 5200 	movw	r2, #58624	; 0xe500
   10622:	f2c0 0201 	movt	r2, #1
   10626:	2121      	movs	r1, #33	; 0x21
   10628:	f005 fbaa 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1062c:	defe      	udf	#254	; 0xfe
        else      { x - PHYSICAL_WIDTH as u8 / 2 };
   1062e:	f24e 3060 	movw	r0, #58208	; 0xe360
   10632:	f2c0 0001 	movt	r0, #1
   10636:	f24e 5210 	movw	r2, #58640	; 0xe510
   1063a:	f2c0 0201 	movt	r2, #1
   1063e:	2121      	movs	r1, #33	; 0x21
   10640:	f005 fb9e 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10644:	defe      	udf	#254	; 0xfe
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - y }
   10646:	f24e 3060 	movw	r0, #58208	; 0xe360
   1064a:	f2c0 0001 	movt	r0, #1
   1064e:	f24e 5220 	movw	r2, #58656	; 0xe520
   10652:	f2c0 0201 	movt	r2, #1
   10656:	2121      	movs	r1, #33	; 0x21
   10658:	f005 fb92 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1065c:	defe      	udf	#254	; 0xfe
        else      { y - PHYSICAL_HEIGHT as u8 / 2 };
   1065e:	f24e 3060 	movw	r0, #58208	; 0xe360
   10662:	f2c0 0001 	movt	r0, #1
   10666:	f24e 5230 	movw	r2, #58672	; 0xe530
   1066a:	f2c0 0201 	movt	r2, #1
   1066e:	2121      	movs	r1, #33	; 0x21
   10670:	f005 fb86 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10674:	defe      	udf	#254	; 0xfe
        if flip.0 { SCREEN_WIDTH as u8 / 2 - p.0 } 
   10676:	f24e 3060 	movw	r0, #58208	; 0xe360
   1067a:	f2c0 0001 	movt	r0, #1
   1067e:	f24e 5240 	movw	r2, #58688	; 0xe540
   10682:	f2c0 0201 	movt	r2, #1
   10686:	2121      	movs	r1, #33	; 0x21
   10688:	f005 fb7a 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1068c:	defe      	udf	#254	; 0xfe
        else      { p.0 + SCREEN_WIDTH as u8 / 2 }
   1068e:	f24e 2080 	movw	r0, #57984	; 0xe280
   10692:	f2c0 0001 	movt	r0, #1
   10696:	f24e 5250 	movw	r2, #58704	; 0xe550
   1069a:	f2c0 0201 	movt	r2, #1
   1069e:	211c      	movs	r1, #28
   106a0:	f005 fb6e 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   106a4:	defe      	udf	#254	; 0xfe
        if flip.0 { SCREEN_HEIGHT as u8 / 2 - p.1 } 
   106a6:	f24e 3060 	movw	r0, #58208	; 0xe360
   106aa:	f2c0 0001 	movt	r0, #1
   106ae:	f24e 5260 	movw	r2, #58720	; 0xe560
   106b2:	f2c0 0201 	movt	r2, #1
   106b6:	2121      	movs	r1, #33	; 0x21
   106b8:	f005 fb62 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   106bc:	defe      	udf	#254	; 0xfe
        else      { p.1 + SCREEN_HEIGHT as u8 / 2 }
   106be:	f24e 2080 	movw	r0, #57984	; 0xe280
   106c2:	f2c0 0001 	movt	r0, #1
   106c6:	f24e 5270 	movw	r2, #58736	; 0xe570
   106ca:	f2c0 0201 	movt	r2, #1
   106ce:	211c      	movs	r1, #28
   106d0:	f005 fb56 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   106d4:	defe      	udf	#254	; 0xfe

000106d6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE>:

/// For each Virtual (x,y) Coordinate, return the Bounding Box (left, top, right, bottom) that encloses the corresponding Physical (x,y) Coordinates.
/// Used by the CHIP-8 Emulator to decide which Physical Pixels to redraw when a Virtual Pixel is updated.
fn map_virtual_to_physical(x: u8, y: u8) -> (u8, u8, u8, u8) {
   106d6:	b580      	push	{r7, lr}
   106d8:	b096      	sub	sp, #88	; 0x58
   106da:	b2c2      	uxtb	r2, r0
   106dc:	460b      	mov	r3, r1
   106de:	4684      	mov	ip, r0
   106e0:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
   106e4:	f88d 1053 	strb.w	r1, [sp, #83]	; 0x53
    //  Check which quadrant (x,y) belongs to and flip accordingly
    let flip =  //  (flip for X, flip for Y)
        if x < SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   106e8:	2a20      	cmp	r2, #32
   106ea:	930e      	str	r3, [sp, #56]	; 0x38
   106ec:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
   106f0:	d308      	bcc.n	10704 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x2e>
   106f2:	e003      	b.n	106fc <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x26>
   106f4:	2001      	movs	r0, #1
   106f6:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   106fa:	e008      	b.n	1070e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x38>
   106fc:	2000      	movs	r0, #0
   106fe:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   10702:	e004      	b.n	1070e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x38>
   10704:	980e      	ldr	r0, [sp, #56]	; 0x38
   10706:	b2c1      	uxtb	r1, r0
   10708:	2910      	cmp	r1, #16
   1070a:	d3f3      	bcc.n	106f4 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1e>
   1070c:	e7f6      	b.n	106fc <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x26>
   1070e:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   10712:	07c0      	lsls	r0, r0, #31
   10714:	2800      	cmp	r0, #0
   10716:	d105      	bne.n	10724 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x4e>
   10718:	e7ff      	b.n	1071a <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x44>
            (true, true)  //  Top left quadrant: Flip horizontally and vertically
        } else if x >= SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   1071a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1071c:	b2c1      	uxtb	r1, r0
   1071e:	291f      	cmp	r1, #31
   10720:	d80e      	bhi.n	10740 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x6a>
   10722:	e009      	b.n	10738 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x62>
   10724:	2001      	movs	r0, #1
            (true, true)  //  Top left quadrant: Flip horizontally and vertically
   10726:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
   1072a:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
        if x < SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   1072e:	e040      	b.n	107b2 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xdc>
   10730:	2001      	movs	r0, #1
        } else if x >= SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   10732:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
   10736:	e008      	b.n	1074a <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x74>
   10738:	2000      	movs	r0, #0
   1073a:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
   1073e:	e004      	b.n	1074a <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x74>
   10740:	980e      	ldr	r0, [sp, #56]	; 0x38
   10742:	b2c1      	uxtb	r1, r0
   10744:	2910      	cmp	r1, #16
   10746:	d3f3      	bcc.n	10730 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x5a>
   10748:	e7f6      	b.n	10738 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x62>
   1074a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   1074e:	07c0      	lsls	r0, r0, #31
   10750:	2800      	cmp	r0, #0
   10752:	d105      	bne.n	10760 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x8a>
   10754:	e7ff      	b.n	10756 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x80>
            (false, true)   //  Top right quadrant: Flip vertically
        } else if x < SCREEN_WIDTH as u8 / 2 && y >= SCREEN_HEIGHT as u8 / 2 {
   10756:	980d      	ldr	r0, [sp, #52]	; 0x34
   10758:	b2c1      	uxtb	r1, r0
   1075a:	2920      	cmp	r1, #32
   1075c:	d30f      	bcc.n	1077e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xa8>
   1075e:	e00a      	b.n	10776 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xa0>
   10760:	2000      	movs	r0, #0
            (false, true)   //  Top right quadrant: Flip vertically
   10762:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
   10766:	2001      	movs	r0, #1
   10768:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
        } else if x >= SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   1076c:	e020      	b.n	107b0 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xda>
   1076e:	2001      	movs	r0, #1
        } else if x < SCREEN_WIDTH as u8 / 2 && y >= SCREEN_HEIGHT as u8 / 2 {
   10770:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
   10774:	e008      	b.n	10788 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xb2>
   10776:	2000      	movs	r0, #0
   10778:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
   1077c:	e004      	b.n	10788 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xb2>
   1077e:	980e      	ldr	r0, [sp, #56]	; 0x38
   10780:	b2c1      	uxtb	r1, r0
   10782:	290f      	cmp	r1, #15
   10784:	d8f3      	bhi.n	1076e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x98>
   10786:	e7f6      	b.n	10776 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xa0>
   10788:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
   1078c:	07c0      	lsls	r0, r0, #31
   1078e:	2800      	cmp	r0, #0
   10790:	d106      	bne.n	107a0 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xca>
   10792:	e7ff      	b.n	10794 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xbe>
   10794:	2000      	movs	r0, #0
            (true, false)   //  Bottom left quadrant: Flip horizontally
        } else {
            (false, false)    //  Bottom right quadrant: Don't flip
   10796:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
   1079a:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
        } else if x < SCREEN_WIDTH as u8 / 2 && y >= SCREEN_HEIGHT as u8 / 2 {
   1079e:	e006      	b.n	107ae <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xd8>
   107a0:	2001      	movs	r0, #1
            (true, false)   //  Bottom left quadrant: Flip horizontally
   107a2:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
   107a6:	2000      	movs	r0, #0
   107a8:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
        } else if x < SCREEN_WIDTH as u8 / 2 && y >= SCREEN_HEIGHT as u8 / 2 {
   107ac:	e7ff      	b.n	107ae <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xd8>
        } else if x >= SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   107ae:	e7ff      	b.n	107b0 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xda>
        if x < SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   107b0:	e7ff      	b.n	107b2 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xdc>
        };
    let x_normalised = 
        if flip.0 { SCREEN_WIDTH as u8 / 2 - x } 
   107b2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   107b6:	07c0      	lsls	r0, r0, #31
   107b8:	2800      	cmp	r0, #0
   107ba:	d10c      	bne.n	107d6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x100>
   107bc:	e7ff      	b.n	107be <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xe8>
   107be:	f06f 001f 	mvn.w	r0, #31
        else      { x - SCREEN_WIDTH as u8 / 2 };
   107c2:	990d      	ldr	r1, [sp, #52]	; 0x34
   107c4:	fa50 f081 	uxtab	r0, r0, r1
   107c8:	b2c2      	uxtb	r2, r0
   107ca:	4603      	mov	r3, r0
   107cc:	4282      	cmp	r2, r0
   107ce:	930c      	str	r3, [sp, #48]	; 0x30
   107d0:	f040 80ee 	bne.w	109b0 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x2da>
   107d4:	e00e      	b.n	107f4 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x11e>
        if flip.0 { SCREEN_WIDTH as u8 / 2 - x } 
   107d6:	980d      	ldr	r0, [sp, #52]	; 0x34
   107d8:	b2c1      	uxtb	r1, r0
   107da:	f1c1 0120 	rsb	r1, r1, #32
   107de:	b2ca      	uxtb	r2, r1
   107e0:	460b      	mov	r3, r1
   107e2:	428a      	cmp	r2, r1
   107e4:	930b      	str	r3, [sp, #44]	; 0x2c
   107e6:	f040 80d7 	bne.w	10998 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x2c2>
   107ea:	e7ff      	b.n	107ec <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x116>
   107ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
   107ee:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
   107f2:	e003      	b.n	107fc <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x126>
        else      { x - SCREEN_WIDTH as u8 / 2 };
   107f4:	980c      	ldr	r0, [sp, #48]	; 0x30
   107f6:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
        if flip.0 { SCREEN_WIDTH as u8 / 2 - x } 
   107fa:	e7ff      	b.n	107fc <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x126>
    let y_normalised = 
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - y }
   107fc:	f89d 0041 	ldrb.w	r0, [sp, #65]	; 0x41
   10800:	07c0      	lsls	r0, r0, #31
   10802:	2800      	cmp	r0, #0
   10804:	d10c      	bne.n	10820 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x14a>
   10806:	e7ff      	b.n	10808 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x132>
   10808:	f06f 000f 	mvn.w	r0, #15
        else      { y - SCREEN_HEIGHT as u8 / 2 };
   1080c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1080e:	fa50 f081 	uxtab	r0, r0, r1
   10812:	b2c2      	uxtb	r2, r0
   10814:	4603      	mov	r3, r0
   10816:	4282      	cmp	r2, r0
   10818:	930a      	str	r3, [sp, #40]	; 0x28
   1081a:	f040 80e1 	bne.w	109e0 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x30a>
   1081e:	e00e      	b.n	1083e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x168>
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - y }
   10820:	980e      	ldr	r0, [sp, #56]	; 0x38
   10822:	b2c1      	uxtb	r1, r0
   10824:	f1c1 0110 	rsb	r1, r1, #16
   10828:	b2ca      	uxtb	r2, r1
   1082a:	460b      	mov	r3, r1
   1082c:	428a      	cmp	r2, r1
   1082e:	9309      	str	r3, [sp, #36]	; 0x24
   10830:	f040 80ca 	bne.w	109c8 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x2f2>
   10834:	e7ff      	b.n	10836 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x160>
   10836:	9809      	ldr	r0, [sp, #36]	; 0x24
   10838:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   1083c:	e003      	b.n	10846 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x170>
        else      { y - SCREEN_HEIGHT as u8 / 2 };
   1083e:	980a      	ldr	r0, [sp, #40]	; 0x28
   10840:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - y }
   10844:	e7ff      	b.n	10846 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x170>
    let b = map_virtual_to_physical_normalised(x_normalised, y_normalised);  //  Returns (left,top,right,bottom)
   10846:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
   1084a:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
   1084e:	f000 f985 	bl	10b5c <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E>
   10852:	9015      	str	r0, [sp, #84]	; 0x54
   10854:	9815      	ldr	r0, [sp, #84]	; 0x54
   10856:	9012      	str	r0, [sp, #72]	; 0x48
   10858:	e7ff      	b.n	1085a <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x184>
    (
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.0 } 
   1085a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   1085e:	07c0      	lsls	r0, r0, #31
   10860:	2800      	cmp	r0, #0
   10862:	d10a      	bne.n	1087a <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1a4>
   10864:	e7ff      	b.n	10866 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x190>
        else      { b.0 + PHYSICAL_WIDTH as u8 / 2 }
   10866:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   1086a:	3078      	adds	r0, #120	; 0x78
   1086c:	b2c1      	uxtb	r1, r0
   1086e:	4602      	mov	r2, r0
   10870:	4281      	cmp	r1, r0
   10872:	9208      	str	r2, [sp, #32]
   10874:	f040 80cc 	bne.w	10a10 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x33a>
   10878:	e00e      	b.n	10898 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1c2>
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.0 } 
   1087a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   1087e:	f1c0 0078 	rsb	r0, r0, #120	; 0x78
   10882:	b2c1      	uxtb	r1, r0
   10884:	4602      	mov	r2, r0
   10886:	4281      	cmp	r1, r0
   10888:	9207      	str	r2, [sp, #28]
   1088a:	f040 80b5 	bne.w	109f8 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x322>
   1088e:	e7ff      	b.n	10890 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1ba>
   10890:	9807      	ldr	r0, [sp, #28]
   10892:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
   10896:	e003      	b.n	108a0 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1ca>
        else      { b.0 + PHYSICAL_WIDTH as u8 / 2 }
   10898:	9808      	ldr	r0, [sp, #32]
   1089a:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.0 } 
   1089e:	e7ff      	b.n	108a0 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1ca>
        ,
        if flip.0 { PHYSICAL_HEIGHT as u8 / 2 - b.1 } 
   108a0:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   108a4:	07c0      	lsls	r0, r0, #31
   108a6:	2800      	cmp	r0, #0
   108a8:	d10a      	bne.n	108c0 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1ea>
   108aa:	e7ff      	b.n	108ac <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1d6>
        else      { b.1 + PHYSICAL_HEIGHT as u8 / 2 }
   108ac:	f89d 0049 	ldrb.w	r0, [sp, #73]	; 0x49
   108b0:	3064      	adds	r0, #100	; 0x64
   108b2:	b2c1      	uxtb	r1, r0
   108b4:	4602      	mov	r2, r0
   108b6:	4281      	cmp	r1, r0
   108b8:	9206      	str	r2, [sp, #24]
   108ba:	f040 80c1 	bne.w	10a40 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x36a>
   108be:	e00e      	b.n	108de <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x208>
        if flip.0 { PHYSICAL_HEIGHT as u8 / 2 - b.1 } 
   108c0:	f89d 0049 	ldrb.w	r0, [sp, #73]	; 0x49
   108c4:	f1c0 0064 	rsb	r0, r0, #100	; 0x64
   108c8:	b2c1      	uxtb	r1, r0
   108ca:	4602      	mov	r2, r0
   108cc:	4281      	cmp	r1, r0
   108ce:	9205      	str	r2, [sp, #20]
   108d0:	f040 80aa 	bne.w	10a28 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x352>
   108d4:	e7ff      	b.n	108d6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x200>
   108d6:	9805      	ldr	r0, [sp, #20]
   108d8:	f88d 004f 	strb.w	r0, [sp, #79]	; 0x4f
   108dc:	e003      	b.n	108e6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x210>
        else      { b.1 + PHYSICAL_HEIGHT as u8 / 2 }
   108de:	9806      	ldr	r0, [sp, #24]
   108e0:	f88d 004f 	strb.w	r0, [sp, #79]	; 0x4f
        if flip.0 { PHYSICAL_HEIGHT as u8 / 2 - b.1 } 
   108e4:	e7ff      	b.n	108e6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x210>
        ,
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.2 } 
   108e6:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   108ea:	07c0      	lsls	r0, r0, #31
   108ec:	2800      	cmp	r0, #0
   108ee:	d10a      	bne.n	10906 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x230>
   108f0:	e7ff      	b.n	108f2 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x21c>
        else      { b.2 + PHYSICAL_WIDTH as u8 / 2 }
   108f2:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
   108f6:	3078      	adds	r0, #120	; 0x78
   108f8:	b2c1      	uxtb	r1, r0
   108fa:	4602      	mov	r2, r0
   108fc:	4281      	cmp	r1, r0
   108fe:	9204      	str	r2, [sp, #16]
   10900:	f040 80b6 	bne.w	10a70 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x39a>
   10904:	e00e      	b.n	10924 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x24e>
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.2 } 
   10906:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
   1090a:	f1c0 0078 	rsb	r0, r0, #120	; 0x78
   1090e:	b2c1      	uxtb	r1, r0
   10910:	4602      	mov	r2, r0
   10912:	4281      	cmp	r1, r0
   10914:	9203      	str	r2, [sp, #12]
   10916:	f040 809f 	bne.w	10a58 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x382>
   1091a:	e7ff      	b.n	1091c <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x246>
   1091c:	9803      	ldr	r0, [sp, #12]
   1091e:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
   10922:	e003      	b.n	1092c <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x256>
        else      { b.2 + PHYSICAL_WIDTH as u8 / 2 }
   10924:	9804      	ldr	r0, [sp, #16]
   10926:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.2 } 
   1092a:	e7ff      	b.n	1092c <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x256>
        ,
        if flip.0 { PHYSICAL_HEIGHT as u8 / 2 - b.3 } 
   1092c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   10930:	07c0      	lsls	r0, r0, #31
   10932:	2800      	cmp	r0, #0
   10934:	d10a      	bne.n	1094c <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x276>
   10936:	e7ff      	b.n	10938 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x262>
        else      { b.3 + PHYSICAL_HEIGHT as u8 / 2 }
   10938:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1093c:	3064      	adds	r0, #100	; 0x64
   1093e:	b2c1      	uxtb	r1, r0
   10940:	4602      	mov	r2, r0
   10942:	4281      	cmp	r1, r0
   10944:	9202      	str	r2, [sp, #8]
   10946:	f040 80ab 	bne.w	10aa0 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x3ca>
   1094a:	e00e      	b.n	1096a <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x294>
        if flip.0 { PHYSICAL_HEIGHT as u8 / 2 - b.3 } 
   1094c:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   10950:	f1c0 0064 	rsb	r0, r0, #100	; 0x64
   10954:	b2c1      	uxtb	r1, r0
   10956:	4602      	mov	r2, r0
   10958:	4281      	cmp	r1, r0
   1095a:	9201      	str	r2, [sp, #4]
   1095c:	f040 8094 	bne.w	10a88 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x3b2>
   10960:	e7ff      	b.n	10962 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x28c>
   10962:	9801      	ldr	r0, [sp, #4]
   10964:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
   10968:	e003      	b.n	10972 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x29c>
        else      { b.3 + PHYSICAL_HEIGHT as u8 / 2 }
   1096a:	9802      	ldr	r0, [sp, #8]
   1096c:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
        if flip.0 { PHYSICAL_HEIGHT as u8 / 2 - b.3 } 
   10970:	e7ff      	b.n	10972 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x29c>
    (
   10972:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
   10976:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
   1097a:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
   1097e:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
   10982:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
   10986:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
   1098a:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
   1098e:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    )
}
   10992:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10994:	b016      	add	sp, #88	; 0x58
   10996:	bd80      	pop	{r7, pc}
        if flip.0 { SCREEN_WIDTH as u8 / 2 - x } 
   10998:	f24e 3060 	movw	r0, #58208	; 0xe360
   1099c:	f2c0 0001 	movt	r0, #1
   109a0:	f24e 5280 	movw	r2, #58752	; 0xe580
   109a4:	f2c0 0201 	movt	r2, #1
   109a8:	2121      	movs	r1, #33	; 0x21
   109aa:	f005 f9e9 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   109ae:	defe      	udf	#254	; 0xfe
        else      { x - SCREEN_WIDTH as u8 / 2 };
   109b0:	f24e 3060 	movw	r0, #58208	; 0xe360
   109b4:	f2c0 0001 	movt	r0, #1
   109b8:	f24e 5290 	movw	r2, #58768	; 0xe590
   109bc:	f2c0 0201 	movt	r2, #1
   109c0:	2121      	movs	r1, #33	; 0x21
   109c2:	f005 f9dd 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   109c6:	defe      	udf	#254	; 0xfe
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - y }
   109c8:	f24e 3060 	movw	r0, #58208	; 0xe360
   109cc:	f2c0 0001 	movt	r0, #1
   109d0:	f24e 52a0 	movw	r2, #58784	; 0xe5a0
   109d4:	f2c0 0201 	movt	r2, #1
   109d8:	2121      	movs	r1, #33	; 0x21
   109da:	f005 f9d1 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   109de:	defe      	udf	#254	; 0xfe
        else      { y - SCREEN_HEIGHT as u8 / 2 };
   109e0:	f24e 3060 	movw	r0, #58208	; 0xe360
   109e4:	f2c0 0001 	movt	r0, #1
   109e8:	f24e 52b0 	movw	r2, #58800	; 0xe5b0
   109ec:	f2c0 0201 	movt	r2, #1
   109f0:	2121      	movs	r1, #33	; 0x21
   109f2:	f005 f9c5 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   109f6:	defe      	udf	#254	; 0xfe
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.0 } 
   109f8:	f24e 3060 	movw	r0, #58208	; 0xe360
   109fc:	f2c0 0001 	movt	r0, #1
   10a00:	f24e 52c0 	movw	r2, #58816	; 0xe5c0
   10a04:	f2c0 0201 	movt	r2, #1
   10a08:	2121      	movs	r1, #33	; 0x21
   10a0a:	f005 f9b9 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a0e:	defe      	udf	#254	; 0xfe
        else      { b.0 + PHYSICAL_WIDTH as u8 / 2 }
   10a10:	f24e 2080 	movw	r0, #57984	; 0xe280
   10a14:	f2c0 0001 	movt	r0, #1
   10a18:	f24e 52d0 	movw	r2, #58832	; 0xe5d0
   10a1c:	f2c0 0201 	movt	r2, #1
   10a20:	211c      	movs	r1, #28
   10a22:	f005 f9ad 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a26:	defe      	udf	#254	; 0xfe
        if flip.0 { PHYSICAL_HEIGHT as u8 / 2 - b.1 } 
   10a28:	f24e 3060 	movw	r0, #58208	; 0xe360
   10a2c:	f2c0 0001 	movt	r0, #1
   10a30:	f24e 52e0 	movw	r2, #58848	; 0xe5e0
   10a34:	f2c0 0201 	movt	r2, #1
   10a38:	2121      	movs	r1, #33	; 0x21
   10a3a:	f005 f9a1 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a3e:	defe      	udf	#254	; 0xfe
        else      { b.1 + PHYSICAL_HEIGHT as u8 / 2 }
   10a40:	f24e 2080 	movw	r0, #57984	; 0xe280
   10a44:	f2c0 0001 	movt	r0, #1
   10a48:	f24e 52f0 	movw	r2, #58864	; 0xe5f0
   10a4c:	f2c0 0201 	movt	r2, #1
   10a50:	211c      	movs	r1, #28
   10a52:	f005 f995 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a56:	defe      	udf	#254	; 0xfe
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.2 } 
   10a58:	f24e 3060 	movw	r0, #58208	; 0xe360
   10a5c:	f2c0 0001 	movt	r0, #1
   10a60:	f24e 6200 	movw	r2, #58880	; 0xe600
   10a64:	f2c0 0201 	movt	r2, #1
   10a68:	2121      	movs	r1, #33	; 0x21
   10a6a:	f005 f989 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a6e:	defe      	udf	#254	; 0xfe
        else      { b.2 + PHYSICAL_WIDTH as u8 / 2 }
   10a70:	f24e 2080 	movw	r0, #57984	; 0xe280
   10a74:	f2c0 0001 	movt	r0, #1
   10a78:	f24e 6210 	movw	r2, #58896	; 0xe610
   10a7c:	f2c0 0201 	movt	r2, #1
   10a80:	211c      	movs	r1, #28
   10a82:	f005 f97d 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a86:	defe      	udf	#254	; 0xfe
        if flip.0 { PHYSICAL_HEIGHT as u8 / 2 - b.3 } 
   10a88:	f24e 3060 	movw	r0, #58208	; 0xe360
   10a8c:	f2c0 0001 	movt	r0, #1
   10a90:	f24e 6220 	movw	r2, #58912	; 0xe620
   10a94:	f2c0 0201 	movt	r2, #1
   10a98:	2121      	movs	r1, #33	; 0x21
   10a9a:	f005 f971 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a9e:	defe      	udf	#254	; 0xfe
        else      { b.3 + PHYSICAL_HEIGHT as u8 / 2 }
   10aa0:	f24e 2080 	movw	r0, #57984	; 0xe280
   10aa4:	f2c0 0001 	movt	r0, #1
   10aa8:	f24e 6230 	movw	r2, #58928	; 0xe630
   10aac:	f2c0 0201 	movt	r2, #1
   10ab0:	211c      	movs	r1, #28
   10ab2:	f005 f965 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ab6:	defe      	udf	#254	; 0xfe

00010ab8 <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE>:

/// Same as map_physical_to_virtual, except that (x,y) belongs to the X >= 0, Y >= 0 quadrant
fn map_physical_to_virtual_normalised(x: u8, y: u8) -> (u8, u8) {
   10ab8:	b580      	push	{r7, lr}
   10aba:	b088      	sub	sp, #32
   10abc:	460a      	mov	r2, r1
   10abe:	4603      	mov	r3, r0
   10ac0:	f88d 0018 	strb.w	r0, [sp, #24]
   10ac4:	f88d 1019 	strb.w	r1, [sp, #25]
   10ac8:	2177      	movs	r1, #119	; 0x77
    let x_index = x.min(PHYSICAL_TO_VIRTUAL_MAP_WIDTH as u8 - 1);
   10aca:	9205      	str	r2, [sp, #20]
   10acc:	9304      	str	r3, [sp, #16]
   10ace:	f004 fbbc 	bl	1524a <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10ad2:	4601      	mov	r1, r0
   10ad4:	f88d 001a 	strb.w	r0, [sp, #26]
   10ad8:	9103      	str	r1, [sp, #12]
   10ada:	e7ff      	b.n	10adc <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x24>
   10adc:	2163      	movs	r1, #99	; 0x63
    let y_index = y.min(PHYSICAL_TO_VIRTUAL_MAP_HEIGHT as u8 - 1);
   10ade:	9805      	ldr	r0, [sp, #20]
   10ae0:	f004 fbb3 	bl	1524a <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10ae4:	4601      	mov	r1, r0
   10ae6:	f88d 001b 	strb.w	r0, [sp, #27]
   10aea:	9102      	str	r1, [sp, #8]
   10aec:	e7ff      	b.n	10aee <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x36>
    let virtual_pixel = PHYSICAL_TO_VIRTUAL_MAP[y_index as usize][x_index as usize];  //  Returns (x,y)
   10aee:	9802      	ldr	r0, [sp, #8]
   10af0:	b2c1      	uxtb	r1, r0
   10af2:	460a      	mov	r2, r1
   10af4:	2963      	cmp	r1, #99	; 0x63
   10af6:	9201      	str	r2, [sp, #4]
   10af8:	d81e      	bhi.n	10b38 <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x80>
   10afa:	e7ff      	b.n	10afc <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x44>
   10afc:	9803      	ldr	r0, [sp, #12]
   10afe:	b2c1      	uxtb	r1, r0
   10b00:	460a      	mov	r2, r1
   10b02:	2977      	cmp	r1, #119	; 0x77
   10b04:	9200      	str	r2, [sp, #0]
   10b06:	d820      	bhi.n	10b4a <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x92>
   10b08:	e7ff      	b.n	10b0a <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x52>
   10b0a:	f244 4020 	movw	r0, #17440	; 0x4420
   10b0e:	f2c0 0002 	movt	r0, #2
   10b12:	6800      	ldr	r0, [r0, #0]
   10b14:	9901      	ldr	r1, [sp, #4]
   10b16:	ebc1 1201 	rsb	r2, r1, r1, lsl #4
   10b1a:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   10b1e:	9a00      	ldr	r2, [sp, #0]
   10b20:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   10b24:	f810 0012 	ldrb.w	r0, [r0, r2, lsl #1]
   10b28:	785b      	ldrb	r3, [r3, #1]
   10b2a:	f88d 001c 	strb.w	r0, [sp, #28]
   10b2e:	f88d 301d 	strb.w	r3, [sp, #29]
    virtual_pixel
}
   10b32:	4619      	mov	r1, r3
   10b34:	b008      	add	sp, #32
   10b36:	bd80      	pop	{r7, pc}
    let virtual_pixel = PHYSICAL_TO_VIRTUAL_MAP[y_index as usize][x_index as usize];  //  Returns (x,y)
   10b38:	f24e 6040 	movw	r0, #58944	; 0xe640
   10b3c:	f2c0 0001 	movt	r0, #1
   10b40:	2264      	movs	r2, #100	; 0x64
   10b42:	9901      	ldr	r1, [sp, #4]
   10b44:	f005 f932 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b48:	defe      	udf	#254	; 0xfe
   10b4a:	f24e 6040 	movw	r0, #58944	; 0xe640
   10b4e:	f2c0 0001 	movt	r0, #1
   10b52:	2278      	movs	r2, #120	; 0x78
   10b54:	9900      	ldr	r1, [sp, #0]
   10b56:	f005 f929 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b5a:	defe      	udf	#254	; 0xfe

00010b5c <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E>:

/// Same as map_virtual_to_physical, except that (x,y) belongs to the X >= 0, Y >= 0 quadrant
fn map_virtual_to_physical_normalised(x: u8, y: u8) -> (u8, u8, u8, u8) {
   10b5c:	b580      	push	{r7, lr}
   10b5e:	b08a      	sub	sp, #40	; 0x28
   10b60:	460a      	mov	r2, r1
   10b62:	4603      	mov	r3, r0
   10b64:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   10b68:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   10b6c:	211f      	movs	r1, #31
    let x_index = x.min(VIRTUAL_TO_PHYSICAL_MAP_WIDTH as u8 - 1);
   10b6e:	9206      	str	r2, [sp, #24]
   10b70:	9305      	str	r3, [sp, #20]
   10b72:	f004 fb6a 	bl	1524a <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10b76:	4601      	mov	r1, r0
   10b78:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
   10b7c:	9104      	str	r1, [sp, #16]
   10b7e:	e7ff      	b.n	10b80 <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x24>
   10b80:	210f      	movs	r1, #15
    let y_index = y.min(VIRTUAL_TO_PHYSICAL_MAP_HEIGHT as u8 - 1);
   10b82:	9806      	ldr	r0, [sp, #24]
   10b84:	f004 fb61 	bl	1524a <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10b88:	4601      	mov	r1, r0
   10b8a:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   10b8e:	9103      	str	r1, [sp, #12]
   10b90:	e7ff      	b.n	10b92 <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x36>
    let physical_box = VIRTUAL_TO_PHYSICAL_MAP[y_index as usize][x_index as usize];  //  Returns (left,top,right,bottom)
   10b92:	9803      	ldr	r0, [sp, #12]
   10b94:	b2c1      	uxtb	r1, r0
   10b96:	460a      	mov	r2, r1
   10b98:	290f      	cmp	r1, #15
   10b9a:	9202      	str	r2, [sp, #8]
   10b9c:	d818      	bhi.n	10bd0 <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x74>
   10b9e:	e7ff      	b.n	10ba0 <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x44>
   10ba0:	9804      	ldr	r0, [sp, #16]
   10ba2:	b2c1      	uxtb	r1, r0
   10ba4:	460a      	mov	r2, r1
   10ba6:	291f      	cmp	r1, #31
   10ba8:	9201      	str	r2, [sp, #4]
   10baa:	d81a      	bhi.n	10be2 <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x86>
   10bac:	e7ff      	b.n	10bae <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x52>
   10bae:	f644 4024 	movw	r0, #19492	; 0x4c24
   10bb2:	f2c0 0002 	movt	r0, #2
   10bb6:	6800      	ldr	r0, [r0, #0]
   10bb8:	9902      	ldr	r1, [sp, #8]
   10bba:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
   10bbe:	9a01      	ldr	r2, [sp, #4]
   10bc0:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   10bc4:	9008      	str	r0, [sp, #32]
    physical_box
   10bc6:	9808      	ldr	r0, [sp, #32]
   10bc8:	9007      	str	r0, [sp, #28]
}
   10bca:	9807      	ldr	r0, [sp, #28]
   10bcc:	b00a      	add	sp, #40	; 0x28
   10bce:	bd80      	pop	{r7, pc}
    let physical_box = VIRTUAL_TO_PHYSICAL_MAP[y_index as usize][x_index as usize];  //  Returns (left,top,right,bottom)
   10bd0:	f24e 6050 	movw	r0, #58960	; 0xe650
   10bd4:	f2c0 0001 	movt	r0, #1
   10bd8:	2210      	movs	r2, #16
   10bda:	9902      	ldr	r1, [sp, #8]
   10bdc:	f005 f8e6 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10be0:	defe      	udf	#254	; 0xfe
   10be2:	f24e 6050 	movw	r0, #58960	; 0xe650
   10be6:	f2c0 0001 	movt	r0, #1
   10bea:	2220      	movs	r2, #32
   10bec:	9901      	ldr	r1, [sp, #4]
   10bee:	f005 f8dd 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bf2:	defe      	udf	#254	; 0xfe

00010bf4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
   10bf4:	b5b0      	push	{r4, r5, r7, lr}
   10bf6:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
   10bf8:	f644 4028 	movw	r0, #19496	; 0x4c28
   10bfc:	f2c0 0002 	movt	r0, #2
   10c00:	2112      	movs	r1, #18
   10c02:	f7f8 fa79 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
   10c06:	e7ff      	b.n	10c08 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
   10c08:	f644 10b4 	movw	r0, #18868	; 0x49b4
   10c0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10c10:	210a      	movs	r1, #10
   10c12:	f003 fe58 	bl	148c6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   10c16:	9012      	str	r0, [sp, #72]	; 0x48
   10c18:	e7ff      	b.n	10c1a <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x26>
   10c1a:	9812      	ldr	r0, [sp, #72]	; 0x48
   10c1c:	f7f8 f830 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10c20:	9014      	str	r0, [sp, #80]	; 0x50
   10c22:	e7ff      	b.n	10c24 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x30>
   10c24:	9814      	ldr	r0, [sp, #80]	; 0x50
   10c26:	1e41      	subs	r1, r0, #1
   10c28:	bf18      	it	ne
   10c2a:	2101      	movne	r1, #1
   10c2c:	2801      	cmp	r0, #1
   10c2e:	d001      	beq.n	10c34 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x40>
   10c30:	e7ff      	b.n	10c32 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x3e>
   10c32:	e008      	b.n	10c46 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
   10c34:	f644 10b4 	movw	r0, #18868	; 0x49b4
   10c38:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10c3c:	f003 fedc 	bl	149f8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
   10c40:	9011      	str	r0, [sp, #68]	; 0x44
   10c42:	e00f      	b.n	10c64 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
   10c44:	defe      	udf	#254	; 0xfe
   10c46:	9814      	ldr	r0, [sp, #80]	; 0x50
   10c48:	9036      	str	r0, [sp, #216]	; 0xd8
   10c4a:	f002 f839 	bl	12cc0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   10c4e:	9010      	str	r0, [sp, #64]	; 0x40
   10c50:	e002      	b.n	10c58 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
   10c52:	9813      	ldr	r0, [sp, #76]	; 0x4c
   10c54:	b03e      	add	sp, #248	; 0xf8
   10c56:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
   10c58:	9810      	ldr	r0, [sp, #64]	; 0x40
   10c5a:	f7f8 f805 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10c5e:	9013      	str	r0, [sp, #76]	; 0x4c
   10c60:	e7ff      	b.n	10c62 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x6e>
   10c62:	e7f6      	b.n	10c52 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x5e>
        TOUCH_RESET.set_low() ? ;
   10c64:	9811      	ldr	r0, [sp, #68]	; 0x44
   10c66:	f7f8 f80b 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10c6a:	9015      	str	r0, [sp, #84]	; 0x54
   10c6c:	e7ff      	b.n	10c6e <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x7a>
   10c6e:	9815      	ldr	r0, [sp, #84]	; 0x54
   10c70:	1e41      	subs	r1, r0, #1
   10c72:	bf18      	it	ne
   10c74:	2101      	movne	r1, #1
   10c76:	2801      	cmp	r0, #1
   10c78:	d001      	beq.n	10c7e <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x8a>
   10c7a:	e7ff      	b.n	10c7c <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x88>
   10c7c:	e008      	b.n	10c90 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x9c>
        TOUCH_DELAY.delay_ms(20);
   10c7e:	f644 10b8 	movw	r0, #18872	; 0x49b8
   10c82:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10c86:	2114      	movs	r1, #20
   10c88:	f003 fecd 	bl	14a26 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   10c8c:	e00d      	b.n	10caa <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb6>
        TOUCH_RESET.set_low() ? ;
   10c8e:	defe      	udf	#254	; 0xfe
   10c90:	9815      	ldr	r0, [sp, #84]	; 0x54
   10c92:	9037      	str	r0, [sp, #220]	; 0xdc
   10c94:	f002 f814 	bl	12cc0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   10c98:	900f      	str	r0, [sp, #60]	; 0x3c
   10c9a:	e7ff      	b.n	10c9c <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xa8>
   10c9c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10c9e:	f7f7 ffe3 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10ca2:	9013      	str	r0, [sp, #76]	; 0x4c
   10ca4:	e7ff      	b.n	10ca6 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb2>
   10ca6:	e7ff      	b.n	10ca8 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb4>
   10ca8:	e7d3      	b.n	10c52 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x5e>
        TOUCH_RESET.set_high() ? ;
   10caa:	f644 10b4 	movw	r0, #18868	; 0x49b4
   10cae:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10cb2:	f003 feac 	bl	14a0e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
   10cb6:	900e      	str	r0, [sp, #56]	; 0x38
   10cb8:	e7ff      	b.n	10cba <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xc6>
   10cba:	980e      	ldr	r0, [sp, #56]	; 0x38
   10cbc:	f7f7 ffe0 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10cc0:	9016      	str	r0, [sp, #88]	; 0x58
   10cc2:	e7ff      	b.n	10cc4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xd0>
   10cc4:	9816      	ldr	r0, [sp, #88]	; 0x58
   10cc6:	1e41      	subs	r1, r0, #1
   10cc8:	bf18      	it	ne
   10cca:	2101      	movne	r1, #1
   10ccc:	2801      	cmp	r0, #1
   10cce:	d001      	beq.n	10cd4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xe0>
   10cd0:	e7ff      	b.n	10cd2 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xde>
   10cd2:	e008      	b.n	10ce6 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
   10cd4:	f644 10b8 	movw	r0, #18872	; 0x49b8
   10cd8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10cdc:	21c8      	movs	r1, #200	; 0xc8
   10cde:	f003 fea2 	bl	14a26 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   10ce2:	e00c      	b.n	10cfe <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x10a>
        TOUCH_RESET.set_high() ? ;
   10ce4:	defe      	udf	#254	; 0xfe
   10ce6:	9816      	ldr	r0, [sp, #88]	; 0x58
   10ce8:	9038      	str	r0, [sp, #224]	; 0xe0
   10cea:	f001 ffe9 	bl	12cc0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   10cee:	900d      	str	r0, [sp, #52]	; 0x34
   10cf0:	e7ff      	b.n	10cf2 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xfe>
   10cf2:	980d      	ldr	r0, [sp, #52]	; 0x34
   10cf4:	f7f7 ffb8 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10cf8:	9013      	str	r0, [sp, #76]	; 0x4c
   10cfa:	e7ff      	b.n	10cfc <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x108>
   10cfc:	e7d4      	b.n	10ca8 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
   10cfe:	f644 10b8 	movw	r0, #18872	; 0x49b8
   10d02:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10d06:	21c8      	movs	r1, #200	; 0xc8
   10d08:	f003 fe8d 	bl	14a26 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   10d0c:	e7ff      	b.n	10d0e <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
   10d0e:	f640 60b1 	movw	r0, #3761	; 0xeb1
   10d12:	f2c0 0001 	movt	r0, #1
   10d16:	9017      	str	r0, [sp, #92]	; 0x5c
   10d18:	9817      	ldr	r0, [sp, #92]	; 0x5c
   10d1a:	f644 214c 	movw	r1, #19020	; 0x4a4c
   10d1e:	f2c2 0100 	movt	r1, #8192	; 0x2000
   10d22:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
   10d24:	f640 6065 	movw	r0, #3685	; 0xe65
   10d28:	f2c0 0001 	movt	r0, #1
   10d2c:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
   10d2e:	e7ff      	b.n	10d30 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
   10d30:	9919      	ldr	r1, [sp, #100]	; 0x64
   10d32:	4668      	mov	r0, sp
   10d34:	2201      	movs	r2, #1
   10d36:	6002      	str	r2, [r0, #0]
   10d38:	201c      	movs	r0, #28
   10d3a:	2200      	movs	r2, #0
   10d3c:	2302      	movs	r3, #2
   10d3e:	f007 f8f1 	bl	17f24 <hal_gpio_irq_init>
   10d42:	9018      	str	r0, [sp, #96]	; 0x60
   10d44:	e7ff      	b.n	10d46 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
   10d46:	f644 4040 	movw	r0, #19520	; 0x4c40
   10d4a:	f2c0 0002 	movt	r0, #2
   10d4e:	6800      	ldr	r0, [r0, #0]
   10d50:	a918      	add	r1, sp, #96	; 0x60
   10d52:	911a      	str	r1, [sp, #104]	; 0x68
   10d54:	901b      	str	r0, [sp, #108]	; 0x6c
   10d56:	981a      	ldr	r0, [sp, #104]	; 0x68
   10d58:	9039      	str	r0, [sp, #228]	; 0xe4
   10d5a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   10d5c:	913a      	str	r1, [sp, #232]	; 0xe8
   10d5e:	6802      	ldr	r2, [r0, #0]
   10d60:	680b      	ldr	r3, [r1, #0]
   10d62:	429a      	cmp	r2, r3
   10d64:	900c      	str	r0, [sp, #48]	; 0x30
   10d66:	910b      	str	r1, [sp, #44]	; 0x2c
   10d68:	d104      	bne.n	10d74 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x180>
   10d6a:	e7ff      	b.n	10d6c <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x178>
   10d6c:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
   10d6e:	f007 f915 	bl	17f9c <hal_gpio_irq_enable>
   10d72:	e072      	b.n	10e5a <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
   10d74:	f644 4098 	movw	r0, #19608	; 0x4c98
   10d78:	f2c0 0002 	movt	r0, #2
   10d7c:	6801      	ldr	r1, [r0, #0]
   10d7e:	980c      	ldr	r0, [sp, #48]	; 0x30
   10d80:	902b      	str	r0, [sp, #172]	; 0xac
   10d82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10d84:	922c      	str	r2, [sp, #176]	; 0xb0
   10d86:	f644 43b4 	movw	r3, #19636	; 0x4cb4
   10d8a:	f2c0 0302 	movt	r3, #2
   10d8e:	681b      	ldr	r3, [r3, #0]
   10d90:	f644 4cb8 	movw	ip, #19640	; 0x4cb8
   10d94:	f2c0 0c02 	movt	ip, #2
   10d98:	f8dc c000 	ldr.w	ip, [ip]
   10d9c:	46ee      	mov	lr, sp
   10d9e:	2400      	movs	r4, #0
   10da0:	f8ce 4000 	str.w	r4, [lr]
   10da4:	a82d      	add	r0, sp, #180	; 0xb4
   10da6:	2201      	movs	r2, #1
   10da8:	910a      	str	r1, [sp, #40]	; 0x28
   10daa:	4619      	mov	r1, r3
   10dac:	4663      	mov	r3, ip
   10dae:	f000 fdeb 	bl	11988 <_ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE>
   10db2:	e7ff      	b.n	10db4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x1c0>
   10db4:	a82b      	add	r0, sp, #172	; 0xac
   10db6:	9028      	str	r0, [sp, #160]	; 0xa0
   10db8:	a82c      	add	r0, sp, #176	; 0xb0
   10dba:	9029      	str	r0, [sp, #164]	; 0xa4
   10dbc:	a82d      	add	r0, sp, #180	; 0xb4
   10dbe:	902a      	str	r0, [sp, #168]	; 0xa8
   10dc0:	9828      	ldr	r0, [sp, #160]	; 0xa0
   10dc2:	903b      	str	r0, [sp, #236]	; 0xec
   10dc4:	9929      	ldr	r1, [sp, #164]	; 0xa4
   10dc6:	913c      	str	r1, [sp, #240]	; 0xf0
   10dc8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   10dca:	923d      	str	r2, [sp, #244]	; 0xf4
   10dcc:	f641 633f 	movw	r3, #7743	; 0x1e3f
   10dd0:	f2c0 0301 	movt	r3, #1
   10dd4:	9109      	str	r1, [sp, #36]	; 0x24
   10dd6:	4619      	mov	r1, r3
   10dd8:	9208      	str	r2, [sp, #32]
   10dda:	f7f8 fb42 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   10dde:	9007      	str	r0, [sp, #28]
   10de0:	9106      	str	r1, [sp, #24]
   10de2:	e7ff      	b.n	10de4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x1f0>
   10de4:	f641 613f 	movw	r1, #7743	; 0x1e3f
   10de8:	f2c0 0101 	movt	r1, #1
   10dec:	9809      	ldr	r0, [sp, #36]	; 0x24
   10dee:	f7f8 fb38 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   10df2:	9005      	str	r0, [sp, #20]
   10df4:	9104      	str	r1, [sp, #16]
   10df6:	e7ff      	b.n	10df8 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x204>
   10df8:	f246 314f 	movw	r1, #25423	; 0x634f
   10dfc:	f2c0 0101 	movt	r1, #1
   10e00:	9808      	ldr	r0, [sp, #32]
   10e02:	f7f8 fb6d 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   10e06:	9003      	str	r0, [sp, #12]
   10e08:	9102      	str	r1, [sp, #8]
   10e0a:	e7ff      	b.n	10e0c <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x218>
   10e0c:	9807      	ldr	r0, [sp, #28]
   10e0e:	9022      	str	r0, [sp, #136]	; 0x88
   10e10:	9906      	ldr	r1, [sp, #24]
   10e12:	9123      	str	r1, [sp, #140]	; 0x8c
   10e14:	9a05      	ldr	r2, [sp, #20]
   10e16:	9224      	str	r2, [sp, #144]	; 0x90
   10e18:	9b04      	ldr	r3, [sp, #16]
   10e1a:	9325      	str	r3, [sp, #148]	; 0x94
   10e1c:	f8dd c00c 	ldr.w	ip, [sp, #12]
   10e20:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
   10e24:	f8dd e008 	ldr.w	lr, [sp, #8]
   10e28:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
   10e2c:	466c      	mov	r4, sp
   10e2e:	2503      	movs	r5, #3
   10e30:	6025      	str	r5, [r4, #0]
   10e32:	a81c      	add	r0, sp, #112	; 0x70
   10e34:	ab22      	add	r3, sp, #136	; 0x88
   10e36:	990a      	ldr	r1, [sp, #40]	; 0x28
   10e38:	462a      	mov	r2, r5
   10e3a:	f000 fda5 	bl	11988 <_ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE>
   10e3e:	e7ff      	b.n	10e40 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x24c>
   10e40:	f644 40d8 	movw	r0, #19672	; 0x4cd8
   10e44:	f2c0 0002 	movt	r0, #2
   10e48:	f004 ff93 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   10e4c:	9001      	str	r0, [sp, #4]
   10e4e:	e7ff      	b.n	10e50 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x25c>
   10e50:	a81c      	add	r0, sp, #112	; 0x70
   10e52:	9901      	ldr	r1, [sp, #4]
   10e54:	f004 ffca 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   10e58:	defe      	udf	#254	; 0xfe
   10e5a:	2000      	movs	r0, #0
    Ok(())
   10e5c:	9013      	str	r0, [sp, #76]	; 0x4c
   10e5e:	2001      	movs	r0, #1
   10e60:	9013      	str	r0, [sp, #76]	; 0x4c
}
   10e62:	e6f6      	b.n	10c52 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x5e>

00010e64 <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
   10e64:	b580      	push	{r7, lr}
   10e66:	b086      	sub	sp, #24
   10e68:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
   10e6a:	f644 214c 	movw	r1, #19020	; 0x4a4c
   10e6e:	f2c2 0100 	movt	r1, #8192	; 0x2000
   10e72:	6088      	str	r0, [r1, #8]
   10e74:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
   10e76:	f7f7 ff7f 	bl	8d78 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
   10e7a:	e7ff      	b.n	10e7c <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E+0x18>
   10e7c:	f24c 4146 	movw	r1, #50246	; 0xc446
   10e80:	f2c0 0101 	movt	r1, #1
   10e84:	f644 43f0 	movw	r3, #19696	; 0x4cf0
   10e88:	f2c0 0302 	movt	r3, #2
   10e8c:	a802      	add	r0, sp, #8
   10e8e:	2208      	movs	r2, #8
   10e90:	f7fd ff85 	bl	ed9e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E>
   10e94:	4601      	mov	r1, r0
   10e96:	9005      	str	r0, [sp, #20]
   10e98:	9101      	str	r1, [sp, #4]
   10e9a:	e7ff      	b.n	10e9c <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
   10e9c:	f644 214c 	movw	r1, #19020	; 0x4a4c
   10ea0:	f2c2 0100 	movt	r1, #8192	; 0x2000
   10ea4:	9801      	ldr	r0, [sp, #4]
   10ea6:	f008 f90c 	bl	190c2 <os_eventq_put>
   10eaa:	e7ff      	b.n	10eac <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E+0x48>
    //console::print("touch\n"); ////
}
   10eac:	b006      	add	sp, #24
   10eae:	bd80      	pop	{r7, pc}

00010eb0 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
   10eb0:	b580      	push	{r7, lr}
   10eb2:	b094      	sub	sp, #80	; 0x50
   10eb4:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
   10eb6:	f644 10b8 	movw	r0, #18872	; 0x49b8
   10eba:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10ebe:	f000 f894 	bl	10fea <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E>
   10ec2:	9006      	str	r0, [sp, #24]
   10ec4:	e7ff      	b.n	10ec6 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x16>
   10ec6:	f644 5100 	movw	r1, #19712	; 0x4d00
   10eca:	f2c0 0102 	movt	r1, #2
   10ece:	f644 5310 	movw	r3, #19728	; 0x4d10
   10ed2:	f2c0 0302 	movt	r3, #2
   10ed6:	220e      	movs	r2, #14
   10ed8:	9806      	ldr	r0, [sp, #24]
   10eda:	f7f7 fe92 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   10ede:	e7ff      	b.n	10ee0 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
   10ee0:	f644 10b8 	movw	r0, #18872	; 0x49b8
   10ee4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10ee8:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
   10eec:	2100      	movs	r1, #0
   10eee:	9107      	str	r1, [sp, #28]
   10ef0:	9008      	str	r0, [sp, #32]
   10ef2:	9807      	ldr	r0, [sp, #28]
   10ef4:	9908      	ldr	r1, [sp, #32]
   10ef6:	f001 fa6c 	bl	123d2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   10efa:	9005      	str	r0, [sp, #20]
   10efc:	9104      	str	r1, [sp, #16]
   10efe:	e7ff      	b.n	10f00 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x50>
   10f00:	9805      	ldr	r0, [sp, #20]
   10f02:	9009      	str	r0, [sp, #36]	; 0x24
   10f04:	9904      	ldr	r1, [sp, #16]
   10f06:	910a      	str	r1, [sp, #40]	; 0x28
   10f08:	e7ff      	b.n	10f0a <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x5a>
   10f0a:	a809      	add	r0, sp, #36	; 0x24
   10f0c:	f001 f9d6 	bl	122bc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   10f10:	910c      	str	r1, [sp, #48]	; 0x30
   10f12:	900b      	str	r0, [sp, #44]	; 0x2c
   10f14:	e7ff      	b.n	10f16 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x66>
   10f16:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10f18:	2800      	cmp	r0, #0
   10f1a:	d001      	beq.n	10f20 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x70>
   10f1c:	e7ff      	b.n	10f1e <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x6e>
   10f1e:	e002      	b.n	10f26 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
   10f20:	b014      	add	sp, #80	; 0x50
   10f22:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
   10f24:	defe      	udf	#254	; 0xfe
   10f26:	980c      	ldr	r0, [sp, #48]	; 0x30
   10f28:	900f      	str	r0, [sp, #60]	; 0x3c
   10f2a:	9010      	str	r0, [sp, #64]	; 0x40
   10f2c:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
   10f2e:	2809      	cmp	r0, #9
   10f30:	9003      	str	r0, [sp, #12]
   10f32:	d851      	bhi.n	10fd8 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x128>
   10f34:	e7ff      	b.n	10f36 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x86>
   10f36:	f644 10b8 	movw	r0, #18872	; 0x49b8
   10f3a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10f3e:	9903      	ldr	r1, [sp, #12]
   10f40:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   10f44:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
   10f48:	4603      	mov	r3, r0
   10f4a:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
   10f4e:	f8b2 c002 	ldrh.w	ip, [r2, #2]
   10f52:	46e6      	mov	lr, ip
   10f54:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
   10f58:	7912      	ldrb	r2, [r2, #4]
   10f5a:	4694      	mov	ip, r2
   10f5c:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
   10f60:	2800      	cmp	r0, #0
   10f62:	9302      	str	r3, [sp, #8]
   10f64:	f8cd e004 	str.w	lr, [sp, #4]
   10f68:	f8cd c000 	str.w	ip, [sp]
   10f6c:	d008      	beq.n	10f80 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xd0>
   10f6e:	e003      	b.n	10f78 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xc8>
   10f70:	2001      	movs	r0, #1
   10f72:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
   10f76:	e008      	b.n	10f8a <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xda>
   10f78:	2000      	movs	r0, #0
   10f7a:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
   10f7e:	e004      	b.n	10f8a <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xda>
   10f80:	9801      	ldr	r0, [sp, #4]
   10f82:	0401      	lsls	r1, r0, #16
   10f84:	2900      	cmp	r1, #0
   10f86:	d0f3      	beq.n	10f70 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xc0>
   10f88:	e7f6      	b.n	10f78 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xc8>
   10f8a:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
   10f8e:	07c0      	lsls	r0, r0, #31
   10f90:	2800      	cmp	r0, #0
   10f92:	d105      	bne.n	10fa0 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf0>
   10f94:	e7ff      	b.n	10f96 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xe6>
            if action != 0 && action != 2 { continue; }
   10f96:	9800      	ldr	r0, [sp, #0]
   10f98:	0601      	lsls	r1, r0, #24
   10f9a:	2900      	cmp	r1, #0
   10f9c:	d10a      	bne.n	10fb4 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x104>
   10f9e:	e005      	b.n	10fac <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xfc>
            if x == 0 && y == 0 { continue; }
   10fa0:	e7ff      	b.n	10fa2 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf2>
   10fa2:	e7b2      	b.n	10f0a <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x5a>
   10fa4:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
   10fa6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   10faa:	e008      	b.n	10fbe <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x10e>
   10fac:	2000      	movs	r0, #0
   10fae:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   10fb2:	e004      	b.n	10fbe <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x10e>
   10fb4:	9800      	ldr	r0, [sp, #0]
   10fb6:	b2c1      	uxtb	r1, r0
   10fb8:	2902      	cmp	r1, #2
   10fba:	d1f3      	bne.n	10fa4 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf4>
   10fbc:	e7f6      	b.n	10fac <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xfc>
   10fbe:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   10fc2:	07c0      	lsls	r0, r0, #31
   10fc4:	2800      	cmp	r0, #0
   10fc6:	d105      	bne.n	10fd4 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x124>
   10fc8:	e7ff      	b.n	10fca <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x11a>
            super::handle_touch(x, y);
   10fca:	9802      	ldr	r0, [sp, #8]
   10fcc:	9901      	ldr	r1, [sp, #4]
   10fce:	f7ff f9f2 	bl	103b6 <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E>
   10fd2:	e000      	b.n	10fd6 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x126>
            if action != 0 && action != 2 { continue; }
   10fd4:	e7e5      	b.n	10fa2 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
   10fd6:	e798      	b.n	10f0a <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
   10fd8:	f644 5020 	movw	r0, #19744	; 0x4d20
   10fdc:	f2c0 0002 	movt	r0, #2
   10fe0:	220a      	movs	r2, #10
   10fe2:	9903      	ldr	r1, [sp, #12]
   10fe4:	f004 fee2 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10fe8:	defe      	udf	#254	; 0xfe

00010fea <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
   10fea:	b580      	push	{r7, lr}
   10fec:	b0de      	sub	sp, #376	; 0x178
   10fee:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
   10ff0:	4669      	mov	r1, sp
   10ff2:	223f      	movs	r2, #63	; 0x3f
   10ff4:	600a      	str	r2, [r1, #0]
   10ff6:	f644 230a 	movw	r3, #18954	; 0x4a0a
   10ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ffe:	2115      	movs	r1, #21
   11000:	f04f 0c00 	mov.w	ip, #0
   11004:	9026      	str	r0, [sp, #152]	; 0x98
   11006:	4608      	mov	r0, r1
   11008:	4661      	mov	r1, ip
   1100a:	f000 fb97 	bl	1173c <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E>
   1100e:	9025      	str	r0, [sp, #148]	; 0x94
   11010:	e7ff      	b.n	11012 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x28>
   11012:	f644 5130 	movw	r1, #19760	; 0x4d30
   11016:	f2c0 0102 	movt	r1, #2
   1101a:	f644 5344 	movw	r3, #19780	; 0x4d44
   1101e:	f2c0 0302 	movt	r3, #2
   11022:	2213      	movs	r2, #19
   11024:	9825      	ldr	r0, [sp, #148]	; 0x94
   11026:	f7f7 fdec 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1102a:	e7ff      	b.n	1102c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x42>
   1102c:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
   11030:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
   11032:	9024      	str	r0, [sp, #144]	; 0x90
   11034:	9123      	str	r1, [sp, #140]	; 0x8c
   11036:	f00b f9ab 	bl	1c390 <__aeabi_memclr>
   1103a:	a827      	add	r0, sp, #156	; 0x9c
   1103c:	9924      	ldr	r1, [sp, #144]	; 0x90
   1103e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   11040:	f00b f9aa 	bl	1c398 <__aeabi_memcpy>
   11044:	e7ff      	b.n	11046 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5c>
   11046:	a927      	add	r1, sp, #156	; 0x9c
   11048:	2252      	movs	r2, #82	; 0x52
   1104a:	9826      	ldr	r0, [sp, #152]	; 0x98
   1104c:	f00b f9a4 	bl	1c398 <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
   11050:	f644 210a 	movw	r1, #18954	; 0x4a0a
   11054:	f2c2 0100 	movt	r1, #8192	; 0x2000
   11058:	7889      	ldrb	r1, [r1, #2]
   1105a:	f001 010f 	and.w	r1, r1, #15
   1105e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11060:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
   11064:	2100      	movs	r1, #0
    data.count     = 0;
   11066:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
   1106a:	9150      	str	r1, [sp, #320]	; 0x140
   1106c:	2105      	movs	r1, #5
   1106e:	9151      	str	r1, [sp, #324]	; 0x144
   11070:	9950      	ldr	r1, [sp, #320]	; 0x140
   11072:	9b51      	ldr	r3, [sp, #324]	; 0x144
   11074:	9022      	str	r0, [sp, #136]	; 0x88
   11076:	4608      	mov	r0, r1
   11078:	4619      	mov	r1, r3
   1107a:	f001 f9aa 	bl	123d2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   1107e:	9021      	str	r0, [sp, #132]	; 0x84
   11080:	9120      	str	r1, [sp, #128]	; 0x80
   11082:	e7ff      	b.n	11084 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x9a>
   11084:	9821      	ldr	r0, [sp, #132]	; 0x84
   11086:	9052      	str	r0, [sp, #328]	; 0x148
   11088:	9920      	ldr	r1, [sp, #128]	; 0x80
   1108a:	9153      	str	r1, [sp, #332]	; 0x14c
   1108c:	e7ff      	b.n	1108e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xa4>
   1108e:	a852      	add	r0, sp, #328	; 0x148
   11090:	f001 f914 	bl	122bc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   11094:	9155      	str	r1, [sp, #340]	; 0x154
   11096:	9054      	str	r0, [sp, #336]	; 0x150
   11098:	e7ff      	b.n	1109a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xb0>
   1109a:	9854      	ldr	r0, [sp, #336]	; 0x150
   1109c:	2800      	cmp	r0, #0
   1109e:	d001      	beq.n	110a4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xba>
   110a0:	e7ff      	b.n	110a2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xb8>
   110a2:	e001      	b.n	110a8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xbe>
   110a4:	e00d      	b.n	110c2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xd8>
   110a6:	defe      	udf	#254	; 0xfe
   110a8:	9855      	ldr	r0, [sp, #340]	; 0x154
   110aa:	9058      	str	r0, [sp, #352]	; 0x160
   110ac:	9059      	str	r0, [sp, #356]	; 0x164
   110ae:	905a      	str	r0, [sp, #360]	; 0x168
   110b0:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
   110b2:	fba1 1200 	umull	r1, r2, r1, r0
   110b6:	2a00      	cmp	r2, #0
   110b8:	901f      	str	r0, [sp, #124]	; 0x7c
   110ba:	911e      	str	r1, [sp, #120]	; 0x78
   110bc:	f040 81c1 	bne.w	11442 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x458>
   110c0:	e002      	b.n	110c8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xde>
   110c2:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
   110c4:	b05e      	add	sp, #376	; 0x178
   110c6:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
   110c8:	981e      	ldr	r0, [sp, #120]	; 0x78
   110ca:	1d41      	adds	r1, r0, #5
   110cc:	460a      	mov	r2, r1
   110ce:	4281      	cmp	r1, r0
   110d0:	921d      	str	r2, [sp, #116]	; 0x74
   110d2:	f0c0 81c2 	bcc.w	1145a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x470>
   110d6:	e7ff      	b.n	110d8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xee>
   110d8:	981d      	ldr	r0, [sp, #116]	; 0x74
   110da:	283e      	cmp	r0, #62	; 0x3e
   110dc:	f200 81c9 	bhi.w	11472 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x488>
   110e0:	e7ff      	b.n	110e2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xf8>
   110e2:	f644 200a 	movw	r0, #18954	; 0x4a0a
   110e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   110ea:	991d      	ldr	r1, [sp, #116]	; 0x74
   110ec:	5c40      	ldrb	r0, [r0, r1]
   110ee:	0900      	lsrs	r0, r0, #4
   110f0:	901c      	str	r0, [sp, #112]	; 0x70
   110f2:	e7ff      	b.n	110f4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x10a>
   110f4:	981c      	ldr	r0, [sp, #112]	; 0x70
   110f6:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
   110fa:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
   110fc:	290e      	cmp	r1, #14
   110fe:	d80b      	bhi.n	11118 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x12e>
   11100:	e7ff      	b.n	11102 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x118>
        data.count += 1;
   11102:	9826      	ldr	r0, [sp, #152]	; 0x98
   11104:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
   11108:	3101      	adds	r1, #1
   1110a:	b2ca      	uxtb	r2, r1
   1110c:	460b      	mov	r3, r1
   1110e:	428a      	cmp	r2, r1
   11110:	931b      	str	r3, [sp, #108]	; 0x6c
   11112:	f040 81b7 	bne.w	11484 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x49a>
   11116:	e001      	b.n	1111c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x132>
        if pointid >= HYN_MAX_ID { break; }
   11118:	e7ff      	b.n	1111a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x130>
   1111a:	e7d2      	b.n	110c2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xd8>
        data.count += 1;
   1111c:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1111e:	9926      	ldr	r1, [sp, #152]	; 0x98
   11120:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
   11124:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   11126:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   11128:	fba2 2c03 	umull	r2, ip, r2, r3
   1112c:	f1bc 0f00 	cmp.w	ip, #0
   11130:	921a      	str	r2, [sp, #104]	; 0x68
   11132:	f040 81b3 	bne.w	1149c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4b2>
   11136:	e7ff      	b.n	11138 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x14e>
   11138:	981a      	ldr	r0, [sp, #104]	; 0x68
   1113a:	1cc1      	adds	r1, r0, #3
   1113c:	460a      	mov	r2, r1
   1113e:	4281      	cmp	r1, r0
   11140:	9219      	str	r2, [sp, #100]	; 0x64
   11142:	f0c0 81b7 	bcc.w	114b4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4ca>
   11146:	e7ff      	b.n	11148 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x15e>
   11148:	9819      	ldr	r0, [sp, #100]	; 0x64
   1114a:	283e      	cmp	r0, #62	; 0x3e
   1114c:	f200 81be 	bhi.w	114cc <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4e2>
   11150:	e7ff      	b.n	11152 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x168>
   11152:	f644 200a 	movw	r0, #18954	; 0x4a0a
   11156:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1115a:	9919      	ldr	r1, [sp, #100]	; 0x64
   1115c:	5c40      	ldrb	r0, [r0, r1]
   1115e:	f000 000f 	and.w	r0, r0, #15
   11162:	4602      	mov	r2, r0
   11164:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
   11168:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
   1116a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1116c:	fba0 0c03 	umull	r0, ip, r0, r3
   11170:	f1bc 0f00 	cmp.w	ip, #0
   11174:	9218      	str	r2, [sp, #96]	; 0x60
   11176:	9017      	str	r0, [sp, #92]	; 0x5c
   11178:	f040 81b1 	bne.w	114de <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4f4>
   1117c:	e7ff      	b.n	1117e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x194>
   1117e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   11180:	1d01      	adds	r1, r0, #4
   11182:	460a      	mov	r2, r1
   11184:	4281      	cmp	r1, r0
   11186:	9216      	str	r2, [sp, #88]	; 0x58
   11188:	f0c0 81b5 	bcc.w	114f6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x50c>
   1118c:	e7ff      	b.n	1118e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1a4>
   1118e:	9816      	ldr	r0, [sp, #88]	; 0x58
   11190:	283e      	cmp	r0, #62	; 0x3e
   11192:	f200 81bc 	bhi.w	1150e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x524>
   11196:	e7ff      	b.n	11198 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1ae>
   11198:	f644 200a 	movw	r0, #18954	; 0x4a0a
   1119c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   111a0:	9916      	ldr	r1, [sp, #88]	; 0x58
   111a2:	5c40      	ldrb	r0, [r0, r1]
   111a4:	4602      	mov	r2, r0
   111a6:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
   111aa:	9818      	ldr	r0, [sp, #96]	; 0x60
   111ac:	0203      	lsls	r3, r0, #8
   111ae:	9215      	str	r2, [sp, #84]	; 0x54
   111b0:	9314      	str	r3, [sp, #80]	; 0x50
   111b2:	e7ff      	b.n	111b4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1ca>
   111b4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   111b6:	2809      	cmp	r0, #9
   111b8:	f200 81b2 	bhi.w	11520 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x536>
   111bc:	e7ff      	b.n	111be <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1d4>
   111be:	9814      	ldr	r0, [sp, #80]	; 0x50
   111c0:	9915      	ldr	r1, [sp, #84]	; 0x54
   111c2:	ea40 0201 	orr.w	r2, r0, r1
   111c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   111c8:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
   111cc:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
   111d0:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   111d2:	fba2 2e0c 	umull	r2, lr, r2, ip
   111d6:	f1be 0f00 	cmp.w	lr, #0
   111da:	9213      	str	r2, [sp, #76]	; 0x4c
   111dc:	f040 81a9 	bne.w	11532 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x548>
   111e0:	e7ff      	b.n	111e2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1f8>
   111e2:	9813      	ldr	r0, [sp, #76]	; 0x4c
   111e4:	1d41      	adds	r1, r0, #5
   111e6:	460a      	mov	r2, r1
   111e8:	4281      	cmp	r1, r0
   111ea:	9212      	str	r2, [sp, #72]	; 0x48
   111ec:	f0c0 81ad 	bcc.w	1154a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x560>
   111f0:	e7ff      	b.n	111f2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x208>
   111f2:	9812      	ldr	r0, [sp, #72]	; 0x48
   111f4:	283e      	cmp	r0, #62	; 0x3e
   111f6:	f200 81b4 	bhi.w	11562 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x578>
   111fa:	e7ff      	b.n	111fc <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x212>
   111fc:	f644 200a 	movw	r0, #18954	; 0x4a0a
   11200:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11204:	9912      	ldr	r1, [sp, #72]	; 0x48
   11206:	5c40      	ldrb	r0, [r0, r1]
   11208:	f000 000f 	and.w	r0, r0, #15
   1120c:	4602      	mov	r2, r0
   1120e:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
   11212:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
   11214:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   11216:	fba0 0c03 	umull	r0, ip, r0, r3
   1121a:	f1bc 0f00 	cmp.w	ip, #0
   1121e:	9211      	str	r2, [sp, #68]	; 0x44
   11220:	9010      	str	r0, [sp, #64]	; 0x40
   11222:	f040 81a7 	bne.w	11574 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x58a>
   11226:	e7ff      	b.n	11228 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x23e>
   11228:	9810      	ldr	r0, [sp, #64]	; 0x40
   1122a:	1d81      	adds	r1, r0, #6
   1122c:	460a      	mov	r2, r1
   1122e:	4281      	cmp	r1, r0
   11230:	920f      	str	r2, [sp, #60]	; 0x3c
   11232:	f0c0 81ab 	bcc.w	1158c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5a2>
   11236:	e7ff      	b.n	11238 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x24e>
   11238:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1123a:	283e      	cmp	r0, #62	; 0x3e
   1123c:	f200 81b2 	bhi.w	115a4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5ba>
   11240:	e7ff      	b.n	11242 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x258>
   11242:	f644 200a 	movw	r0, #18954	; 0x4a0a
   11246:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1124a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1124c:	5c40      	ldrb	r0, [r0, r1]
   1124e:	4602      	mov	r2, r0
   11250:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
   11254:	9811      	ldr	r0, [sp, #68]	; 0x44
   11256:	0203      	lsls	r3, r0, #8
   11258:	920e      	str	r2, [sp, #56]	; 0x38
   1125a:	930d      	str	r3, [sp, #52]	; 0x34
   1125c:	e7ff      	b.n	1125e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x274>
   1125e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   11260:	2809      	cmp	r0, #9
   11262:	f200 81a8 	bhi.w	115b6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5cc>
   11266:	e7ff      	b.n	11268 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x27e>
   11268:	9826      	ldr	r0, [sp, #152]	; 0x98
   1126a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1126c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   11270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11272:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   11276:	ea43 0e0c 	orr.w	lr, r3, ip
   1127a:	f8a2 e002 	strh.w	lr, [r2, #2]
   1127e:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
   11280:	fba2 2e01 	umull	r2, lr, r2, r1
   11284:	f1be 0f00 	cmp.w	lr, #0
   11288:	920c      	str	r2, [sp, #48]	; 0x30
   1128a:	f040 819d 	bne.w	115c8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5de>
   1128e:	e7ff      	b.n	11290 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2a6>
   11290:	980c      	ldr	r0, [sp, #48]	; 0x30
   11292:	1cc1      	adds	r1, r0, #3
   11294:	460a      	mov	r2, r1
   11296:	4281      	cmp	r1, r0
   11298:	920b      	str	r2, [sp, #44]	; 0x2c
   1129a:	f0c0 81a1 	bcc.w	115e0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5f6>
   1129e:	e7ff      	b.n	112a0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2b6>
   112a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   112a2:	283e      	cmp	r0, #62	; 0x3e
   112a4:	f200 81a8 	bhi.w	115f8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x60e>
   112a8:	e7ff      	b.n	112aa <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2c0>
   112aa:	f644 200a 	movw	r0, #18954	; 0x4a0a
   112ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
   112b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   112b4:	5c40      	ldrb	r0, [r0, r1]
   112b6:	0980      	lsrs	r0, r0, #6
   112b8:	900a      	str	r0, [sp, #40]	; 0x28
   112ba:	e7ff      	b.n	112bc <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2d2>
        data.touches[i].action =
   112bc:	981f      	ldr	r0, [sp, #124]	; 0x7c
   112be:	2809      	cmp	r0, #9
   112c0:	f200 81a3 	bhi.w	1160a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x620>
   112c4:	e7ff      	b.n	112c6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2dc>
   112c6:	9826      	ldr	r0, [sp, #152]	; 0x98
   112c8:	991f      	ldr	r1, [sp, #124]	; 0x7c
   112ca:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   112ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   112d0:	7113      	strb	r3, [r2, #4]
   112d2:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
   112d4:	fba2 2c01 	umull	r2, ip, r2, r1
   112d8:	f1bc 0f00 	cmp.w	ip, #0
   112dc:	9209      	str	r2, [sp, #36]	; 0x24
   112de:	f040 819d 	bne.w	1161c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x632>
   112e2:	e7ff      	b.n	112e4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2fa>
   112e4:	9809      	ldr	r0, [sp, #36]	; 0x24
   112e6:	1d41      	adds	r1, r0, #5
   112e8:	460a      	mov	r2, r1
   112ea:	4281      	cmp	r1, r0
   112ec:	9208      	str	r2, [sp, #32]
   112ee:	f0c0 81a1 	bcc.w	11634 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x64a>
   112f2:	e7ff      	b.n	112f4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x30a>
   112f4:	9808      	ldr	r0, [sp, #32]
   112f6:	283e      	cmp	r0, #62	; 0x3e
   112f8:	f200 81a8 	bhi.w	1164c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x662>
   112fc:	e7ff      	b.n	112fe <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x314>
   112fe:	f644 200a 	movw	r0, #18954	; 0x4a0a
   11302:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11306:	9908      	ldr	r1, [sp, #32]
   11308:	5c40      	ldrb	r0, [r0, r1]
   1130a:	0900      	lsrs	r0, r0, #4
   1130c:	9007      	str	r0, [sp, #28]
   1130e:	e7ff      	b.n	11310 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x326>
        data.touches[i].finger =
   11310:	981f      	ldr	r0, [sp, #124]	; 0x7c
   11312:	2809      	cmp	r0, #9
   11314:	f200 81a3 	bhi.w	1165e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x674>
   11318:	e7ff      	b.n	1131a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x330>
   1131a:	9826      	ldr	r0, [sp, #152]	; 0x98
   1131c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1131e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   11322:	9b07      	ldr	r3, [sp, #28]
   11324:	7153      	strb	r3, [r2, #5]
   11326:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
   11328:	fba2 2c01 	umull	r2, ip, r2, r1
   1132c:	f1bc 0f00 	cmp.w	ip, #0
   11330:	9206      	str	r2, [sp, #24]
   11332:	f040 819d 	bne.w	11670 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x686>
   11336:	e7ff      	b.n	11338 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x34e>
   11338:	9806      	ldr	r0, [sp, #24]
   1133a:	1dc1      	adds	r1, r0, #7
   1133c:	460a      	mov	r2, r1
   1133e:	4281      	cmp	r1, r0
   11340:	9205      	str	r2, [sp, #20]
   11342:	f0c0 81a1 	bcc.w	11688 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x69e>
   11346:	e7ff      	b.n	11348 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x35e>
   11348:	9805      	ldr	r0, [sp, #20]
   1134a:	283e      	cmp	r0, #62	; 0x3e
   1134c:	f200 81a8 	bhi.w	116a0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6b6>
   11350:	e7ff      	b.n	11352 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x368>
   11352:	f644 200a 	movw	r0, #18954	; 0x4a0a
   11356:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1135a:	9905      	ldr	r1, [sp, #20]
   1135c:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
   1135e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   11360:	2a09      	cmp	r2, #9
   11362:	9004      	str	r0, [sp, #16]
   11364:	f200 81a5 	bhi.w	116b2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6c8>
   11368:	e7ff      	b.n	1136a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x380>
   1136a:	9826      	ldr	r0, [sp, #152]	; 0x98
   1136c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1136e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   11372:	9b04      	ldr	r3, [sp, #16]
   11374:	7193      	strb	r3, [r2, #6]
   11376:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
   11378:	fba2 2c01 	umull	r2, ip, r2, r1
   1137c:	f1bc 0f00 	cmp.w	ip, #0
   11380:	9203      	str	r2, [sp, #12]
   11382:	f040 819f 	bne.w	116c4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6da>
   11386:	e7ff      	b.n	11388 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x39e>
   11388:	9803      	ldr	r0, [sp, #12]
   1138a:	f100 0108 	add.w	r1, r0, #8
   1138e:	460a      	mov	r2, r1
   11390:	4281      	cmp	r1, r0
   11392:	9202      	str	r2, [sp, #8]
   11394:	f0c0 81a2 	bcc.w	116dc <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6f2>
   11398:	e7ff      	b.n	1139a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3b0>
   1139a:	9802      	ldr	r0, [sp, #8]
   1139c:	283e      	cmp	r0, #62	; 0x3e
   1139e:	f200 81a9 	bhi.w	116f4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x70a>
   113a2:	e7ff      	b.n	113a4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3ba>
   113a4:	f644 200a 	movw	r0, #18954	; 0x4a0a
   113a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   113ac:	9902      	ldr	r1, [sp, #8]
   113ae:	5c40      	ldrb	r0, [r0, r1]
   113b0:	0900      	lsrs	r0, r0, #4
   113b2:	9001      	str	r0, [sp, #4]
   113b4:	e7ff      	b.n	113b6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3cc>
        data.touches[i].area =
   113b6:	981f      	ldr	r0, [sp, #124]	; 0x7c
   113b8:	2809      	cmp	r0, #9
   113ba:	f200 81a4 	bhi.w	11706 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x71c>
   113be:	e7ff      	b.n	113c0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3d6>
   113c0:	9826      	ldr	r0, [sp, #152]	; 0x98
   113c2:	991f      	ldr	r1, [sp, #124]	; 0x7c
   113c4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   113c8:	9b01      	ldr	r3, [sp, #4]
   113ca:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
   113cc:	290a      	cmp	r1, #10
   113ce:	d326      	bcc.n	1141e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x434>
   113d0:	e1a2      	b.n	11718 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x72e>
   113d2:	2001      	movs	r0, #1
   113d4:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
   113d8:	e009      	b.n	113ee <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x404>
   113da:	2000      	movs	r0, #0
   113dc:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
   113e0:	e005      	b.n	113ee <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x404>
            && (data.point_num == 0) {
   113e2:	9826      	ldr	r0, [sp, #152]	; 0x98
   113e4:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
   113e8:	2900      	cmp	r1, #0
   113ea:	d0f2      	beq.n	113d2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3e8>
   113ec:	e7f5      	b.n	113da <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3f0>
   113ee:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
   113f2:	07c0      	lsls	r0, r0, #31
   113f4:	2800      	cmp	r0, #0
   113f6:	d123      	bne.n	11440 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x456>
   113f8:	e021      	b.n	1143e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x454>
   113fa:	2001      	movs	r0, #1
   113fc:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
   11400:	e007      	b.n	11412 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x428>
   11402:	2000      	movs	r0, #0
   11404:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
   11408:	e003      	b.n	11412 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x428>
   1140a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1140c:	280a      	cmp	r0, #10
   1140e:	d30e      	bcc.n	1142e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x444>
   11410:	e18b      	b.n	1172a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x740>
   11412:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
   11416:	07c0      	lsls	r0, r0, #31
   11418:	2800      	cmp	r0, #0
   1141a:	d1e2      	bne.n	113e2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3f8>
   1141c:	e7dd      	b.n	113da <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3f0>
   1141e:	9826      	ldr	r0, [sp, #152]	; 0x98
   11420:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11422:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   11426:	7912      	ldrb	r2, [r2, #4]
   11428:	2a00      	cmp	r2, #0
   1142a:	d0e6      	beq.n	113fa <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x410>
   1142c:	e7ed      	b.n	1140a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x420>
   1142e:	9826      	ldr	r0, [sp, #152]	; 0x98
   11430:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11432:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   11436:	7912      	ldrb	r2, [r2, #4]
   11438:	2a02      	cmp	r2, #2
   1143a:	d0de      	beq.n	113fa <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x410>
   1143c:	e7e1      	b.n	11402 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
   1143e:	e626      	b.n	1108e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xa4>
            break;
   11440:	e66b      	b.n	1111a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
   11442:	f644 5070 	movw	r0, #19824	; 0x4d70
   11446:	f2c0 0002 	movt	r0, #2
   1144a:	f644 5254 	movw	r2, #19796	; 0x4d54
   1144e:	f2c0 0202 	movt	r2, #2
   11452:	2121      	movs	r1, #33	; 0x21
   11454:	f004 fc94 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11458:	defe      	udf	#254	; 0xfe
   1145a:	f644 50b0 	movw	r0, #19888	; 0x4db0
   1145e:	f2c0 0002 	movt	r0, #2
   11462:	f644 5294 	movw	r2, #19860	; 0x4d94
   11466:	f2c0 0202 	movt	r2, #2
   1146a:	211c      	movs	r1, #28
   1146c:	f004 fc88 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11470:	defe      	udf	#254	; 0xfe
   11472:	f644 50cc 	movw	r0, #19916	; 0x4dcc
   11476:	f2c0 0002 	movt	r0, #2
   1147a:	223f      	movs	r2, #63	; 0x3f
   1147c:	991d      	ldr	r1, [sp, #116]	; 0x74
   1147e:	f004 fc95 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11482:	defe      	udf	#254	; 0xfe
        data.count += 1;
   11484:	f644 50b0 	movw	r0, #19888	; 0x4db0
   11488:	f2c0 0002 	movt	r0, #2
   1148c:	f644 52dc 	movw	r2, #19932	; 0x4ddc
   11490:	f2c0 0202 	movt	r2, #2
   11494:	211c      	movs	r1, #28
   11496:	f004 fc73 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1149a:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   1149c:	f644 5070 	movw	r0, #19824	; 0x4d70
   114a0:	f2c0 0002 	movt	r0, #2
   114a4:	f644 52ec 	movw	r2, #19948	; 0x4dec
   114a8:	f2c0 0202 	movt	r2, #2
   114ac:	2121      	movs	r1, #33	; 0x21
   114ae:	f004 fc67 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   114b2:	defe      	udf	#254	; 0xfe
   114b4:	f644 50b0 	movw	r0, #19888	; 0x4db0
   114b8:	f2c0 0002 	movt	r0, #2
   114bc:	f644 52fc 	movw	r2, #19964	; 0x4dfc
   114c0:	f2c0 0202 	movt	r2, #2
   114c4:	211c      	movs	r1, #28
   114c6:	f004 fc5b 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   114ca:	defe      	udf	#254	; 0xfe
   114cc:	f644 600c 	movw	r0, #19980	; 0x4e0c
   114d0:	f2c0 0002 	movt	r0, #2
   114d4:	223f      	movs	r2, #63	; 0x3f
   114d6:	9919      	ldr	r1, [sp, #100]	; 0x64
   114d8:	f004 fc68 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   114dc:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
   114de:	f644 5070 	movw	r0, #19824	; 0x4d70
   114e2:	f2c0 0002 	movt	r0, #2
   114e6:	f644 621c 	movw	r2, #19996	; 0x4e1c
   114ea:	f2c0 0202 	movt	r2, #2
   114ee:	2121      	movs	r1, #33	; 0x21
   114f0:	f004 fc46 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   114f4:	defe      	udf	#254	; 0xfe
   114f6:	f644 50b0 	movw	r0, #19888	; 0x4db0
   114fa:	f2c0 0002 	movt	r0, #2
   114fe:	f644 622c 	movw	r2, #20012	; 0x4e2c
   11502:	f2c0 0202 	movt	r2, #2
   11506:	211c      	movs	r1, #28
   11508:	f004 fc3a 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1150c:	defe      	udf	#254	; 0xfe
   1150e:	f644 603c 	movw	r0, #20028	; 0x4e3c
   11512:	f2c0 0002 	movt	r0, #2
   11516:	223f      	movs	r2, #63	; 0x3f
   11518:	9916      	ldr	r1, [sp, #88]	; 0x58
   1151a:	f004 fc47 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1151e:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
   11520:	f644 604c 	movw	r0, #20044	; 0x4e4c
   11524:	f2c0 0002 	movt	r0, #2
   11528:	220a      	movs	r2, #10
   1152a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1152c:	f004 fc3e 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11530:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   11532:	f644 5070 	movw	r0, #19824	; 0x4d70
   11536:	f2c0 0002 	movt	r0, #2
   1153a:	f644 625c 	movw	r2, #20060	; 0x4e5c
   1153e:	f2c0 0202 	movt	r2, #2
   11542:	2121      	movs	r1, #33	; 0x21
   11544:	f004 fc1c 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11548:	defe      	udf	#254	; 0xfe
   1154a:	f644 50b0 	movw	r0, #19888	; 0x4db0
   1154e:	f2c0 0002 	movt	r0, #2
   11552:	f644 626c 	movw	r2, #20076	; 0x4e6c
   11556:	f2c0 0202 	movt	r2, #2
   1155a:	211c      	movs	r1, #28
   1155c:	f004 fc10 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11560:	defe      	udf	#254	; 0xfe
   11562:	f644 607c 	movw	r0, #20092	; 0x4e7c
   11566:	f2c0 0002 	movt	r0, #2
   1156a:	223f      	movs	r2, #63	; 0x3f
   1156c:	9912      	ldr	r1, [sp, #72]	; 0x48
   1156e:	f004 fc1d 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11572:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
   11574:	f644 5070 	movw	r0, #19824	; 0x4d70
   11578:	f2c0 0002 	movt	r0, #2
   1157c:	f644 628c 	movw	r2, #20108	; 0x4e8c
   11580:	f2c0 0202 	movt	r2, #2
   11584:	2121      	movs	r1, #33	; 0x21
   11586:	f004 fbfb 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1158a:	defe      	udf	#254	; 0xfe
   1158c:	f644 50b0 	movw	r0, #19888	; 0x4db0
   11590:	f2c0 0002 	movt	r0, #2
   11594:	f644 629c 	movw	r2, #20124	; 0x4e9c
   11598:	f2c0 0202 	movt	r2, #2
   1159c:	211c      	movs	r1, #28
   1159e:	f004 fbef 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   115a2:	defe      	udf	#254	; 0xfe
   115a4:	f644 60ac 	movw	r0, #20140	; 0x4eac
   115a8:	f2c0 0002 	movt	r0, #2
   115ac:	223f      	movs	r2, #63	; 0x3f
   115ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
   115b0:	f004 fbfc 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   115b4:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
   115b6:	f644 60bc 	movw	r0, #20156	; 0x4ebc
   115ba:	f2c0 0002 	movt	r0, #2
   115be:	220a      	movs	r2, #10
   115c0:	991f      	ldr	r1, [sp, #124]	; 0x7c
   115c2:	f004 fbf3 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   115c6:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
   115c8:	f644 5070 	movw	r0, #19824	; 0x4d70
   115cc:	f2c0 0002 	movt	r0, #2
   115d0:	f644 62cc 	movw	r2, #20172	; 0x4ecc
   115d4:	f2c0 0202 	movt	r2, #2
   115d8:	2121      	movs	r1, #33	; 0x21
   115da:	f004 fbd1 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   115de:	defe      	udf	#254	; 0xfe
   115e0:	f644 50b0 	movw	r0, #19888	; 0x4db0
   115e4:	f2c0 0002 	movt	r0, #2
   115e8:	f644 62dc 	movw	r2, #20188	; 0x4edc
   115ec:	f2c0 0202 	movt	r2, #2
   115f0:	211c      	movs	r1, #28
   115f2:	f004 fbc5 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   115f6:	defe      	udf	#254	; 0xfe
   115f8:	f644 60ec 	movw	r0, #20204	; 0x4eec
   115fc:	f2c0 0002 	movt	r0, #2
   11600:	223f      	movs	r2, #63	; 0x3f
   11602:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11604:	f004 fbd2 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11608:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
   1160a:	f644 60fc 	movw	r0, #20220	; 0x4efc
   1160e:	f2c0 0002 	movt	r0, #2
   11612:	220a      	movs	r2, #10
   11614:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11616:	f004 fbc9 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1161a:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
   1161c:	f644 5070 	movw	r0, #19824	; 0x4d70
   11620:	f2c0 0002 	movt	r0, #2
   11624:	f644 720c 	movw	r2, #20236	; 0x4f0c
   11628:	f2c0 0202 	movt	r2, #2
   1162c:	2121      	movs	r1, #33	; 0x21
   1162e:	f004 fba7 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11632:	defe      	udf	#254	; 0xfe
   11634:	f644 50b0 	movw	r0, #19888	; 0x4db0
   11638:	f2c0 0002 	movt	r0, #2
   1163c:	f644 721c 	movw	r2, #20252	; 0x4f1c
   11640:	f2c0 0202 	movt	r2, #2
   11644:	211c      	movs	r1, #28
   11646:	f004 fb9b 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1164a:	defe      	udf	#254	; 0xfe
   1164c:	f644 702c 	movw	r0, #20268	; 0x4f2c
   11650:	f2c0 0002 	movt	r0, #2
   11654:	223f      	movs	r2, #63	; 0x3f
   11656:	9908      	ldr	r1, [sp, #32]
   11658:	f004 fba8 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1165c:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
   1165e:	f644 703c 	movw	r0, #20284	; 0x4f3c
   11662:	f2c0 0002 	movt	r0, #2
   11666:	220a      	movs	r2, #10
   11668:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1166a:	f004 fb9f 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1166e:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
   11670:	f644 5070 	movw	r0, #19824	; 0x4d70
   11674:	f2c0 0002 	movt	r0, #2
   11678:	f644 724c 	movw	r2, #20300	; 0x4f4c
   1167c:	f2c0 0202 	movt	r2, #2
   11680:	2121      	movs	r1, #33	; 0x21
   11682:	f004 fb7d 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11686:	defe      	udf	#254	; 0xfe
   11688:	f644 50b0 	movw	r0, #19888	; 0x4db0
   1168c:	f2c0 0002 	movt	r0, #2
   11690:	f644 725c 	movw	r2, #20316	; 0x4f5c
   11694:	f2c0 0202 	movt	r2, #2
   11698:	211c      	movs	r1, #28
   1169a:	f004 fb71 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1169e:	defe      	udf	#254	; 0xfe
   116a0:	f644 706c 	movw	r0, #20332	; 0x4f6c
   116a4:	f2c0 0002 	movt	r0, #2
   116a8:	223f      	movs	r2, #63	; 0x3f
   116aa:	9905      	ldr	r1, [sp, #20]
   116ac:	f004 fb7e 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   116b0:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
   116b2:	f644 707c 	movw	r0, #20348	; 0x4f7c
   116b6:	f2c0 0002 	movt	r0, #2
   116ba:	220a      	movs	r2, #10
   116bc:	991f      	ldr	r1, [sp, #124]	; 0x7c
   116be:	f004 fb75 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   116c2:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
   116c4:	f644 5070 	movw	r0, #19824	; 0x4d70
   116c8:	f2c0 0002 	movt	r0, #2
   116cc:	f644 728c 	movw	r2, #20364	; 0x4f8c
   116d0:	f2c0 0202 	movt	r2, #2
   116d4:	2121      	movs	r1, #33	; 0x21
   116d6:	f004 fb53 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   116da:	defe      	udf	#254	; 0xfe
   116dc:	f644 50b0 	movw	r0, #19888	; 0x4db0
   116e0:	f2c0 0002 	movt	r0, #2
   116e4:	f644 729c 	movw	r2, #20380	; 0x4f9c
   116e8:	f2c0 0202 	movt	r2, #2
   116ec:	211c      	movs	r1, #28
   116ee:	f004 fb47 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   116f2:	defe      	udf	#254	; 0xfe
   116f4:	f644 70ac 	movw	r0, #20396	; 0x4fac
   116f8:	f2c0 0002 	movt	r0, #2
   116fc:	223f      	movs	r2, #63	; 0x3f
   116fe:	9902      	ldr	r1, [sp, #8]
   11700:	f004 fb54 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11704:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
   11706:	f644 70bc 	movw	r0, #20412	; 0x4fbc
   1170a:	f2c0 0002 	movt	r0, #2
   1170e:	220a      	movs	r2, #10
   11710:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11712:	f004 fb4b 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11716:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
   11718:	f644 70cc 	movw	r0, #20428	; 0x4fcc
   1171c:	f2c0 0002 	movt	r0, #2
   11720:	220a      	movs	r2, #10
   11722:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11724:	f004 fb42 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11728:	defe      	udf	#254	; 0xfe
   1172a:	f644 70dc 	movw	r0, #20444	; 0x4fdc
   1172e:	f2c0 0002 	movt	r0, #2
   11732:	220a      	movs	r2, #10
   11734:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11736:	f004 fb39 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1173a:	defe      	udf	#254	; 0xfe

0001173c <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
   1173c:	b5b0      	push	{r4, r5, r7, lr}
   1173e:	b094      	sub	sp, #80	; 0x50
   11740:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
   11744:	4696      	mov	lr, r2
   11746:	460c      	mov	r4, r1
   11748:	4605      	mov	r5, r0
   1174a:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
   1174e:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
   11752:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
   11756:	9310      	str	r3, [sp, #64]	; 0x40
   11758:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
   1175c:	4618      	mov	r0, r3
   1175e:	4661      	mov	r1, ip
   11760:	930d      	str	r3, [sp, #52]	; 0x34
   11762:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   11766:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   1176a:	940a      	str	r4, [sp, #40]	; 0x28
   1176c:	9509      	str	r5, [sp, #36]	; 0x24
   1176e:	f000 fe09 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   11772:	9008      	str	r0, [sp, #32]
   11774:	e7ff      	b.n	11776 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x3a>
   11776:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11778:	b2c1      	uxtb	r1, r0
   1177a:	9a08      	ldr	r2, [sp, #32]
   1177c:	428a      	cmp	r2, r1
   1177e:	d30d      	bcc.n	1179c <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x60>
   11780:	e7ff      	b.n	11782 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   11782:	980a      	ldr	r0, [sp, #40]	; 0x28
   11784:	b2c1      	uxtb	r1, r0
   11786:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11788:	fa51 f182 	uxtab	r1, r1, r2
   1178c:	b2cb      	uxtb	r3, r1
   1178e:	468c      	mov	ip, r1
   11790:	428b      	cmp	r3, r1
   11792:	f8cd c01c 	str.w	ip, [sp, #28]
   11796:	f040 8092 	bne.w	118be <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x182>
   1179a:	e00b      	b.n	117b4 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
   1179c:	f644 70ec 	movw	r0, #20460	; 0x4fec
   117a0:	f2c0 0002 	movt	r0, #2
   117a4:	f644 72f4 	movw	r2, #20468	; 0x4ff4
   117a8:	f2c0 0202 	movt	r2, #2
   117ac:	2107      	movs	r1, #7
   117ae:	f004 fae7 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   117b2:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   117b4:	9807      	ldr	r0, [sp, #28]
   117b6:	b241      	sxtb	r1, r0
   117b8:	2900      	cmp	r1, #0
   117ba:	d411      	bmi.n	117e0 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0xa4>
   117bc:	e7ff      	b.n	117be <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
   117be:	f644 2064 	movw	r0, #19044	; 0x4a64
   117c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   117c6:	990a      	ldr	r1, [sp, #40]	; 0x28
   117c8:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
   117ca:	f644 225c 	movw	r2, #19036	; 0x4a5c
   117ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
   117d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   117d4:	7013      	strb	r3, [r2, #0]
   117d6:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
   117d8:	f000 fdd4 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   117dc:	9006      	str	r0, [sp, #24]
   117de:	e00b      	b.n	117f8 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   117e0:	f644 40e8 	movw	r0, #19688	; 0x4ce8
   117e4:	f2c0 0002 	movt	r0, #2
   117e8:	f245 0214 	movw	r2, #20500	; 0x5014
   117ec:	f2c0 0202 	movt	r2, #2
   117f0:	2108      	movs	r1, #8
   117f2:	f004 fac5 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   117f6:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
   117f8:	f644 205c 	movw	r0, #19036	; 0x4a5c
   117fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11800:	9906      	ldr	r1, [sp, #24]
   11802:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
   11804:	f644 2064 	movw	r0, #19044	; 0x4a64
   11808:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1180c:	2101      	movs	r1, #1
   1180e:	f000 fda2 	bl	12356 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11812:	9005      	str	r0, [sp, #20]
   11814:	e7ff      	b.n	11816 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0xda>
   11816:	f644 205c 	movw	r0, #19036	; 0x4a5c
   1181a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1181e:	9905      	ldr	r1, [sp, #20]
   11820:	6041      	str	r1, [r0, #4]
   11822:	2201      	movs	r2, #1
   11824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11828:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
   1182c:	9004      	str	r0, [sp, #16]
   1182e:	4610      	mov	r0, r2
   11830:	9904      	ldr	r1, [sp, #16]
   11832:	461a      	mov	r2, r3
   11834:	4663      	mov	r3, ip
   11836:	f006 fcc9 	bl	181cc <hal_i2c_master_write>
   1183a:	9012      	str	r0, [sp, #72]	; 0x48
   1183c:	e7ff      	b.n	1183e <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
   1183e:	f644 2064 	movw	r0, #19044	; 0x4a64
   11842:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11846:	2100      	movs	r1, #0
   11848:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
   1184a:	f644 205c 	movw	r0, #19036	; 0x4a5c
   1184e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11852:	9909      	ldr	r1, [sp, #36]	; 0x24
   11854:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
   11856:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11858:	b2d3      	uxtb	r3, r2
   1185a:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
   1185c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1185e:	990c      	ldr	r1, [sp, #48]	; 0x30
   11860:	f000 fd79 	bl	12356 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11864:	9003      	str	r0, [sp, #12]
   11866:	e7ff      	b.n	11868 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x12c>
   11868:	f644 205c 	movw	r0, #19036	; 0x4a5c
   1186c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11870:	9903      	ldr	r1, [sp, #12]
   11872:	6041      	str	r1, [r0, #4]
   11874:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11878:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
   1187a:	9002      	str	r0, [sp, #8]
   1187c:	4618      	mov	r0, r3
   1187e:	9902      	ldr	r1, [sp, #8]
   11880:	f006 fd38 	bl	182f4 <hal_i2c_master_read>
   11884:	4601      	mov	r1, r0
   11886:	9013      	str	r0, [sp, #76]	; 0x4c
   11888:	9101      	str	r1, [sp, #4]
   1188a:	e7ff      	b.n	1188c <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
   1188c:	9801      	ldr	r0, [sp, #4]
   1188e:	2804      	cmp	r0, #4
   11890:	d005      	beq.n	1189e <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x162>
   11892:	e7ff      	b.n	11894 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x158>
   11894:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
   11896:	900e      	str	r0, [sp, #56]	; 0x38
   11898:	2001      	movs	r0, #1
   1189a:	900e      	str	r0, [sp, #56]	; 0x38
}
   1189c:	e00c      	b.n	118b8 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x17c>
        console::print("i2c fail\n"); ////
   1189e:	f245 0024 	movw	r0, #20516	; 0x5024
   118a2:	f2c0 0002 	movt	r0, #2
   118a6:	2109      	movs	r1, #9
   118a8:	f7f7 fc26 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
   118ac:	e7ff      	b.n	118ae <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x172>
   118ae:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
   118b0:	900e      	str	r0, [sp, #56]	; 0x38
   118b2:	2001      	movs	r0, #1
   118b4:	900e      	str	r0, [sp, #56]	; 0x38
   118b6:	e7ff      	b.n	118b8 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x17c>
}
   118b8:	980e      	ldr	r0, [sp, #56]	; 0x38
   118ba:	b014      	add	sp, #80	; 0x50
   118bc:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   118be:	f644 50b0 	movw	r0, #19888	; 0x4db0
   118c2:	f2c0 0002 	movt	r0, #2
   118c6:	f245 0204 	movw	r2, #20484	; 0x5004
   118ca:	f2c0 0202 	movt	r2, #2
   118ce:	211c      	movs	r1, #28
   118d0:	f004 fa56 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   118d4:	defe      	udf	#254	; 0xfe

000118d6 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>:
    fn le(&self, other: &LevelFilter) -> bool {
   118d6:	b082      	sub	sp, #8
   118d8:	9000      	str	r0, [sp, #0]
   118da:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   118dc:	6800      	ldr	r0, [r0, #0]
   118de:	6809      	ldr	r1, [r1, #0]
   118e0:	2200      	movs	r2, #0
   118e2:	4288      	cmp	r0, r1
   118e4:	bf98      	it	ls
   118e6:	2201      	movls	r2, #1
    }
   118e8:	4610      	mov	r0, r2
   118ea:	b002      	add	sp, #8
   118ec:	4770      	bx	lr

000118ee <_ZN22piet_embedded_graphics7display18set_display_pixels17he48c5c43fd96ddebE>:
        item
    ).expect("draw blocks fail");
}

/// Draw the pixel colours to the display at the window from (sx,sy) to (ex,ey)
pub fn set_display_pixels<P: IntoIterator<Item = u16>>(sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
   118ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   118f0:	b08d      	sub	sp, #52	; 0x34
   118f2:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   118f6:	469e      	mov	lr, r3
   118f8:	4614      	mov	r4, r2
   118fa:	460d      	mov	r5, r1
   118fc:	4606      	mov	r6, r0
   118fe:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   11902:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
   11906:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   1190a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    unsafe { DISPLAY.set_pixels(sx, sy, ex, ey, colors) }
   1190e:	466f      	mov	r7, sp
   11910:	f8c7 c004 	str.w	ip, [r7, #4]
   11914:	603b      	str	r3, [r7, #0]
   11916:	f240 1348 	movw	r3, #328	; 0x148
   1191a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1191e:	900a      	str	r0, [sp, #40]	; 0x28
   11920:	4618      	mov	r0, r3
   11922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11924:	9109      	str	r1, [sp, #36]	; 0x24
   11926:	4619      	mov	r1, r3
   11928:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   1192c:	9208      	str	r2, [sp, #32]
   1192e:	4662      	mov	r2, ip
   11930:	9b08      	ldr	r3, [sp, #32]
   11932:	f8cd e01c 	str.w	lr, [sp, #28]
   11936:	9406      	str	r4, [sp, #24]
   11938:	9505      	str	r5, [sp, #20]
   1193a:	9604      	str	r6, [sp, #16]
   1193c:	f003 fb4b 	bl	14fd6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E>
   11940:	9003      	str	r0, [sp, #12]
   11942:	e7ff      	b.n	11944 <_ZN22piet_embedded_graphics7display18set_display_pixels17he48c5c43fd96ddebE+0x56>
}
   11944:	9803      	ldr	r0, [sp, #12]
   11946:	f000 0001 	and.w	r0, r0, #1
   1194a:	b00d      	add	sp, #52	; 0x34
   1194c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001194e <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>:
   1194e:	b510      	push	{r4, lr}
   11950:	b088      	sub	sp, #32
   11952:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   11956:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
   1195a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1195c:	9102      	str	r1, [sp, #8]
   1195e:	9203      	str	r2, [sp, #12]
   11960:	9304      	str	r3, [sp, #16]
   11962:	9405      	str	r4, [sp, #20]
   11964:	f8cd e018 	str.w	lr, [sp, #24]
   11968:	f8cd c01c 	str.w	ip, [sp, #28]
   1196c:	f8cd e000 	str.w	lr, [sp]
   11970:	f8cd c004 	str.w	ip, [sp, #4]
   11974:	6001      	str	r1, [r0, #0]
   11976:	6042      	str	r2, [r0, #4]
   11978:	9900      	ldr	r1, [sp, #0]
   1197a:	9a01      	ldr	r2, [sp, #4]
   1197c:	6081      	str	r1, [r0, #8]
   1197e:	60c2      	str	r2, [r0, #12]
   11980:	6103      	str	r3, [r0, #16]
   11982:	6144      	str	r4, [r0, #20]
   11984:	b008      	add	sp, #32
   11986:	bd10      	pop	{r4, pc}

00011988 <_ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE>:
   11988:	b580      	push	{r7, lr}
   1198a:	b086      	sub	sp, #24
   1198c:	f8dd c020 	ldr.w	ip, [sp, #32]
   11990:	9102      	str	r1, [sp, #8]
   11992:	9203      	str	r2, [sp, #12]
   11994:	9304      	str	r3, [sp, #16]
   11996:	f8cd c014 	str.w	ip, [sp, #20]
   1199a:	f04f 0e00 	mov.w	lr, #0
   1199e:	f8cd e004 	str.w	lr, [sp, #4]
   119a2:	f8cd e000 	str.w	lr, [sp]
   119a6:	f8cd e000 	str.w	lr, [sp]
   119aa:	6001      	str	r1, [r0, #0]
   119ac:	6042      	str	r2, [r0, #4]
   119ae:	9900      	ldr	r1, [sp, #0]
   119b0:	9a01      	ldr	r2, [sp, #4]
   119b2:	6081      	str	r1, [r0, #8]
   119b4:	60c2      	str	r2, [r0, #12]
   119b6:	6103      	str	r3, [r0, #16]
   119b8:	f8c0 c014 	str.w	ip, [r0, #20]
   119bc:	b006      	add	sp, #24
   119be:	bd80      	pop	{r7, pc}

000119c0 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>:
   119c0:	b580      	push	{r7, lr}
   119c2:	b086      	sub	sp, #24
   119c4:	460a      	mov	r2, r1
   119c6:	9004      	str	r0, [sp, #16]
   119c8:	f88d 1017 	strb.w	r1, [sp, #23]
   119cc:	9203      	str	r2, [sp, #12]
   119ce:	f000 fd5d 	bl	1248c <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   119d2:	9002      	str	r0, [sp, #8]
   119d4:	e7ff      	b.n	119d6 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE+0x16>
   119d6:	9802      	ldr	r0, [sp, #8]
   119d8:	9903      	ldr	r1, [sp, #12]
   119da:	f000 fd6f 	bl	124bc <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   119de:	9001      	str	r0, [sp, #4]
   119e0:	e7ff      	b.n	119e2 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE+0x22>
   119e2:	9801      	ldr	r0, [sp, #4]
   119e4:	b006      	add	sp, #24
   119e6:	bd80      	pop	{r7, pc}

000119e8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>:
   119e8:	b580      	push	{r7, lr}
   119ea:	b084      	sub	sp, #16
   119ec:	4601      	mov	r1, r0
   119ee:	f88d 000f 	strb.w	r0, [sp, #15]
   119f2:	9102      	str	r1, [sp, #8]
   119f4:	f003 fc89 	bl	1530a <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h8e5f04233c93701aE>
   119f8:	9001      	str	r0, [sp, #4]
   119fa:	e7ff      	b.n	119fc <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E+0x14>
   119fc:	9801      	ldr	r0, [sp, #4]
   119fe:	b004      	add	sp, #16
   11a00:	bd80      	pop	{r7, pc}

00011a02 <_ZN4core3mem4swap17h21afb25e2d195463E>:
   11a02:	b580      	push	{r7, lr}
   11a04:	b082      	sub	sp, #8
   11a06:	9000      	str	r0, [sp, #0]
   11a08:	9101      	str	r1, [sp, #4]
   11a0a:	f003 fcb1 	bl	15370 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E>
   11a0e:	e7ff      	b.n	11a10 <_ZN4core3mem4swap17h21afb25e2d195463E+0xe>
   11a10:	b002      	add	sp, #8
   11a12:	bd80      	pop	{r7, pc}

00011a14 <_ZN4core3ops8function6FnOnce9call_once17h59e116d6918016e9E>:
   11a14:	b580      	push	{r7, lr}
   11a16:	b084      	sub	sp, #16
   11a18:	9001      	str	r0, [sp, #4]
   11a1a:	9102      	str	r1, [sp, #8]
   11a1c:	9801      	ldr	r0, [sp, #4]
   11a1e:	9902      	ldr	r1, [sp, #8]
   11a20:	f000 f8f8 	bl	11c14 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE>
   11a24:	9000      	str	r0, [sp, #0]
   11a26:	e7ff      	b.n	11a28 <_ZN4core3ops8function6FnOnce9call_once17h59e116d6918016e9E+0x14>
   11a28:	9800      	ldr	r0, [sp, #0]
   11a2a:	b004      	add	sp, #16
   11a2c:	bd80      	pop	{r7, pc}

00011a2e <_ZN4core3ptr13drop_in_place17h63142b18dacbc787E>:
   11a2e:	b081      	sub	sp, #4
   11a30:	9000      	str	r0, [sp, #0]
   11a32:	b001      	add	sp, #4
   11a34:	4770      	bx	lr

00011a36 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E>:
   11a36:	b580      	push	{r7, lr}
   11a38:	b082      	sub	sp, #8
   11a3a:	9101      	str	r1, [sp, #4]
   11a3c:	f000 f803 	bl	11a46 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E>
   11a40:	e7ff      	b.n	11a42 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E+0xc>
   11a42:	b002      	add	sp, #8
   11a44:	bd80      	pop	{r7, pc}

00011a46 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E>:
   11a46:	b580      	push	{r7, lr}
   11a48:	b0a0      	sub	sp, #128	; 0x80
   11a4a:	911c      	str	r1, [sp, #112]	; 0x70
   11a4c:	9103      	str	r1, [sp, #12]
   11a4e:	9002      	str	r0, [sp, #8]
   11a50:	e7ff      	b.n	11a52 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc>
   11a52:	9803      	ldr	r0, [sp, #12]
   11a54:	68c1      	ldr	r1, [r0, #12]
   11a56:	2901      	cmp	r1, #1
   11a58:	d11e      	bne.n	11a98 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x52>
   11a5a:	e7ff      	b.n	11a5c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x16>
   11a5c:	9803      	ldr	r0, [sp, #12]
   11a5e:	f100 0110 	add.w	r1, r0, #16
   11a62:	911e      	str	r1, [sp, #120]	; 0x78
   11a64:	a804      	add	r0, sp, #16
   11a66:	f7fd fbc1 	bl	f1ec <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE>
   11a6a:	e7ff      	b.n	11a6c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x26>
   11a6c:	9804      	ldr	r0, [sp, #16]
   11a6e:	2801      	cmp	r0, #1
   11a70:	d001      	beq.n	11a76 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x30>
   11a72:	e7ff      	b.n	11a74 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x2e>
   11a74:	e00f      	b.n	11a96 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x50>
   11a76:	9804      	ldr	r0, [sp, #16]
   11a78:	9905      	ldr	r1, [sp, #20]
   11a7a:	9a06      	ldr	r2, [sp, #24]
   11a7c:	9209      	str	r2, [sp, #36]	; 0x24
   11a7e:	9108      	str	r1, [sp, #32]
   11a80:	9007      	str	r0, [sp, #28]
   11a82:	9807      	ldr	r0, [sp, #28]
   11a84:	9908      	ldr	r1, [sp, #32]
   11a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11a88:	9b02      	ldr	r3, [sp, #8]
   11a8a:	609a      	str	r2, [r3, #8]
   11a8c:	6059      	str	r1, [r3, #4]
   11a8e:	6018      	str	r0, [r3, #0]
   11a90:	e7ff      	b.n	11a92 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x4c>
   11a92:	b020      	add	sp, #128	; 0x80
   11a94:	bd80      	pop	{r7, pc}
   11a96:	e7ff      	b.n	11a98 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x52>
   11a98:	a80a      	add	r0, sp, #40	; 0x28
   11a9a:	9903      	ldr	r1, [sp, #12]
   11a9c:	f7fd fb90 	bl	f1c0 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E>
   11aa0:	e7ff      	b.n	11aa2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x5c>
   11aa2:	980a      	ldr	r0, [sp, #40]	; 0x28
   11aa4:	2800      	cmp	r0, #0
   11aa6:	d012      	beq.n	11ace <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x88>
   11aa8:	e7ff      	b.n	11aaa <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x64>
   11aaa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11aac:	990c      	ldr	r1, [sp, #48]	; 0x30
   11aae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11ab0:	9211      	str	r2, [sp, #68]	; 0x44
   11ab2:	9110      	str	r1, [sp, #64]	; 0x40
   11ab4:	900f      	str	r0, [sp, #60]	; 0x3c
   11ab6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11ab8:	9910      	ldr	r1, [sp, #64]	; 0x40
   11aba:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11abc:	921b      	str	r2, [sp, #108]	; 0x6c
   11abe:	911a      	str	r1, [sp, #104]	; 0x68
   11ac0:	9019      	str	r0, [sp, #100]	; 0x64
   11ac2:	a816      	add	r0, sp, #88	; 0x58
   11ac4:	a919      	add	r1, sp, #100	; 0x64
   11ac6:	f7fd fb74 	bl	f1b2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc3726000bdb855aE>
   11aca:	e028      	b.n	11b1e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd8>
   11acc:	defe      	udf	#254	; 0xfe
   11ace:	9803      	ldr	r0, [sp, #12]
   11ad0:	301c      	adds	r0, #28
   11ad2:	f7f6 ff57 	bl	8984 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E>
   11ad6:	9001      	str	r0, [sp, #4]
   11ad8:	e7ff      	b.n	11ada <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x94>
   11ada:	9801      	ldr	r0, [sp, #4]
   11adc:	f7f6 ff8c 	bl	89f8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E>
   11ae0:	900e      	str	r0, [sp, #56]	; 0x38
   11ae2:	e7ff      	b.n	11ae4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x9e>
   11ae4:	980e      	ldr	r0, [sp, #56]	; 0x38
   11ae6:	fab0 f180 	clz	r1, r0
   11aea:	0949      	lsrs	r1, r1, #5
   11aec:	2800      	cmp	r0, #0
   11aee:	d101      	bne.n	11af4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xae>
   11af0:	e7ff      	b.n	11af2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xac>
   11af2:	e009      	b.n	11b08 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc2>
   11af4:	980e      	ldr	r0, [sp, #56]	; 0x38
   11af6:	901f      	str	r0, [sp, #124]	; 0x7c
   11af8:	9902      	ldr	r1, [sp, #8]
   11afa:	9000      	str	r0, [sp, #0]
   11afc:	4608      	mov	r0, r1
   11afe:	9900      	ldr	r1, [sp, #0]
   11b00:	f7fd fb74 	bl	f1ec <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE>
   11b04:	e00a      	b.n	11b1c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd6>
   11b06:	defe      	udf	#254	; 0xfe
   11b08:	f002 ffc2 	bl	14a90 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
   11b0c:	e7ff      	b.n	11b0e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc8>
   11b0e:	9802      	ldr	r0, [sp, #8]
   11b10:	f7f6 ff6d 	bl	89ee <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc4148eaa15af1e8eE>
   11b14:	e7ff      	b.n	11b16 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd0>
   11b16:	e7ff      	b.n	11b18 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd2>
   11b18:	e7ff      	b.n	11b1a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd4>
   11b1a:	e7ba      	b.n	11a92 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x4c>
   11b1c:	e7fc      	b.n	11b18 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd2>
   11b1e:	9816      	ldr	r0, [sp, #88]	; 0x58
   11b20:	9917      	ldr	r1, [sp, #92]	; 0x5c
   11b22:	9a18      	ldr	r2, [sp, #96]	; 0x60
   11b24:	9215      	str	r2, [sp, #84]	; 0x54
   11b26:	9114      	str	r1, [sp, #80]	; 0x50
   11b28:	9013      	str	r0, [sp, #76]	; 0x4c
   11b2a:	2001      	movs	r0, #1
   11b2c:	9012      	str	r0, [sp, #72]	; 0x48
   11b2e:	e7ff      	b.n	11b30 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xea>
   11b30:	9812      	ldr	r0, [sp, #72]	; 0x48
   11b32:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11b34:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11b36:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11b38:	f8dd c00c 	ldr.w	ip, [sp, #12]
   11b3c:	f8cc 3018 	str.w	r3, [ip, #24]
   11b40:	f8cc 2014 	str.w	r2, [ip, #20]
   11b44:	f8cc 1010 	str.w	r1, [ip, #16]
   11b48:	f8cc 000c 	str.w	r0, [ip, #12]
   11b4c:	980a      	ldr	r0, [sp, #40]	; 0x28
   11b4e:	2801      	cmp	r0, #1
   11b50:	d101      	bne.n	11b56 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x110>
   11b52:	e7ff      	b.n	11b54 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x10e>
   11b54:	e77d      	b.n	11a52 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc>
   11b56:	e7fd      	b.n	11b54 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x10e>

00011b58 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E>:
   11b58:	b5b0      	push	{r4, r5, r7, lr}
   11b5a:	b090      	sub	sp, #64	; 0x40
   11b5c:	680a      	ldr	r2, [r1, #0]
   11b5e:	684b      	ldr	r3, [r1, #4]
   11b60:	6889      	ldr	r1, [r1, #8]
   11b62:	910f      	str	r1, [sp, #60]	; 0x3c
   11b64:	930e      	str	r3, [sp, #56]	; 0x38
   11b66:	920d      	str	r2, [sp, #52]	; 0x34
   11b68:	a902      	add	r1, sp, #8
   11b6a:	aa0d      	add	r2, sp, #52	; 0x34
   11b6c:	9001      	str	r0, [sp, #4]
   11b6e:	4608      	mov	r0, r1
   11b70:	4611      	mov	r1, r2
   11b72:	f000 f80d 	bl	11b90 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h1051abda59747a6bE>
   11b76:	e7ff      	b.n	11b78 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E+0x20>
   11b78:	a802      	add	r0, sp, #8
   11b7a:	9901      	ldr	r1, [sp, #4]
   11b7c:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
   11b80:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
   11b84:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
   11b88:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
   11b8c:	b010      	add	sp, #64	; 0x40
   11b8e:	bdb0      	pop	{r4, r5, r7, pc}

00011b90 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h1051abda59747a6bE>:
   11b90:	b08b      	sub	sp, #44	; 0x2c
   11b92:	680a      	ldr	r2, [r1, #0]
   11b94:	684b      	ldr	r3, [r1, #4]
   11b96:	6889      	ldr	r1, [r1, #8]
   11b98:	9102      	str	r1, [sp, #8]
   11b9a:	9301      	str	r3, [sp, #4]
   11b9c:	9200      	str	r2, [sp, #0]
   11b9e:	2100      	movs	r1, #0
   11ba0:	9103      	str	r1, [sp, #12]
   11ba2:	9107      	str	r1, [sp, #28]
   11ba4:	9900      	ldr	r1, [sp, #0]
   11ba6:	9a01      	ldr	r2, [sp, #4]
   11ba8:	9b02      	ldr	r3, [sp, #8]
   11baa:	6083      	str	r3, [r0, #8]
   11bac:	6042      	str	r2, [r0, #4]
   11bae:	6001      	str	r1, [r0, #0]
   11bb0:	9903      	ldr	r1, [sp, #12]
   11bb2:	9a04      	ldr	r2, [sp, #16]
   11bb4:	9b05      	ldr	r3, [sp, #20]
   11bb6:	f8dd c018 	ldr.w	ip, [sp, #24]
   11bba:	f8c0 c018 	str.w	ip, [r0, #24]
   11bbe:	6143      	str	r3, [r0, #20]
   11bc0:	6102      	str	r2, [r0, #16]
   11bc2:	60c1      	str	r1, [r0, #12]
   11bc4:	9907      	ldr	r1, [sp, #28]
   11bc6:	9a08      	ldr	r2, [sp, #32]
   11bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11bca:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   11bce:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   11bd2:	6243      	str	r3, [r0, #36]	; 0x24
   11bd4:	6202      	str	r2, [r0, #32]
   11bd6:	61c1      	str	r1, [r0, #28]
   11bd8:	b00b      	add	sp, #44	; 0x2c
   11bda:	4770      	bx	lr

00011bdc <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he2e30225e051e80dE>:
   11bdc:	b5b0      	push	{r4, r5, r7, lr}
   11bde:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
   11be2:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
   11be6:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   11bea:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   11bee:	bdb0      	pop	{r4, r5, r7, pc}

00011bf0 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h27d5684c70bb37e8E>:
   11bf0:	b084      	sub	sp, #16
   11bf2:	9000      	str	r0, [sp, #0]
   11bf4:	9101      	str	r1, [sp, #4]
   11bf6:	9102      	str	r1, [sp, #8]
   11bf8:	9003      	str	r0, [sp, #12]
   11bfa:	6802      	ldr	r2, [r0, #0]
   11bfc:	6840      	ldr	r0, [r0, #4]
   11bfe:	680b      	ldr	r3, [r1, #0]
   11c00:	6849      	ldr	r1, [r1, #4]
   11c02:	4048      	eors	r0, r1
   11c04:	ea82 0103 	eor.w	r1, r2, r3
   11c08:	4308      	orrs	r0, r1
   11c0a:	fab0 f080 	clz	r0, r0
   11c0e:	0940      	lsrs	r0, r0, #5
   11c10:	b004      	add	sp, #16
   11c12:	4770      	bx	lr

00011c14 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE>:
   11c14:	b085      	sub	sp, #20
   11c16:	9003      	str	r0, [sp, #12]
   11c18:	9104      	str	r1, [sp, #16]
   11c1a:	7802      	ldrb	r2, [r0, #0]
   11c1c:	780b      	ldrb	r3, [r1, #0]
   11c1e:	429a      	cmp	r2, r3
   11c20:	9101      	str	r1, [sp, #4]
   11c22:	9000      	str	r0, [sp, #0]
   11c24:	d307      	bcc.n	11c36 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x22>
   11c26:	e7ff      	b.n	11c28 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x14>
   11c28:	9800      	ldr	r0, [sp, #0]
   11c2a:	7801      	ldrb	r1, [r0, #0]
   11c2c:	9a01      	ldr	r2, [sp, #4]
   11c2e:	7813      	ldrb	r3, [r2, #0]
   11c30:	4299      	cmp	r1, r3
   11c32:	d008      	beq.n	11c46 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x32>
   11c34:	e003      	b.n	11c3e <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x2a>
   11c36:	20ff      	movs	r0, #255	; 0xff
   11c38:	f88d 000b 	strb.w	r0, [sp, #11]
   11c3c:	e008      	b.n	11c50 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x3c>
   11c3e:	2001      	movs	r0, #1
   11c40:	f88d 000b 	strb.w	r0, [sp, #11]
   11c44:	e003      	b.n	11c4e <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x3a>
   11c46:	2000      	movs	r0, #0
   11c48:	f88d 000b 	strb.w	r0, [sp, #11]
   11c4c:	e7ff      	b.n	11c4e <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x3a>
   11c4e:	e7ff      	b.n	11c50 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x3c>
   11c50:	f89d 000b 	ldrb.w	r0, [sp, #11]
   11c54:	b005      	add	sp, #20
   11c56:	4770      	bx	lr

00011c58 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h0340384168a45934E>:
   11c58:	b082      	sub	sp, #8
   11c5a:	9000      	str	r0, [sp, #0]
   11c5c:	9101      	str	r1, [sp, #4]
   11c5e:	7800      	ldrb	r0, [r0, #0]
   11c60:	7809      	ldrb	r1, [r1, #0]
   11c62:	2200      	movs	r2, #0
   11c64:	4288      	cmp	r0, r1
   11c66:	bf38      	it	cc
   11c68:	2201      	movcc	r2, #1
   11c6a:	4610      	mov	r0, r2
   11c6c:	b002      	add	sp, #8
   11c6e:	4770      	bx	lr

00011c70 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   11c70:	b084      	sub	sp, #16
   11c72:	9001      	str	r0, [sp, #4]
   11c74:	9102      	str	r1, [sp, #8]
   11c76:	4408      	add	r0, r1
   11c78:	9003      	str	r0, [sp, #12]
   11c7a:	9803      	ldr	r0, [sp, #12]
   11c7c:	9000      	str	r0, [sp, #0]
   11c7e:	e7ff      	b.n	11c80 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   11c80:	9800      	ldr	r0, [sp, #0]
   11c82:	b004      	add	sp, #16
   11c84:	4770      	bx	lr

00011c86 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   11c86:	b082      	sub	sp, #8
   11c88:	9001      	str	r0, [sp, #4]
   11c8a:	9000      	str	r0, [sp, #0]
   11c8c:	e7ff      	b.n	11c8e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   11c8e:	9800      	ldr	r0, [sp, #0]
   11c90:	fab0 f180 	clz	r1, r0
   11c94:	0948      	lsrs	r0, r1, #5
   11c96:	b002      	add	sp, #8
   11c98:	4770      	bx	lr

00011c9a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   11c9a:	b082      	sub	sp, #8
   11c9c:	9001      	str	r0, [sp, #4]
   11c9e:	9000      	str	r0, [sp, #0]
   11ca0:	9800      	ldr	r0, [sp, #0]
   11ca2:	b002      	add	sp, #8
   11ca4:	4770      	bx	lr

00011ca6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   11ca6:	b081      	sub	sp, #4
   11ca8:	9000      	str	r0, [sp, #0]
   11caa:	b001      	add	sp, #4
   11cac:	4770      	bx	lr

00011cae <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   11cae:	b580      	push	{r7, lr}
   11cb0:	b084      	sub	sp, #16
   11cb2:	9002      	str	r0, [sp, #8]
   11cb4:	9103      	str	r1, [sp, #12]
   11cb6:	f000 f805 	bl	11cc4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   11cba:	9001      	str	r0, [sp, #4]
   11cbc:	e7ff      	b.n	11cbe <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   11cbe:	9801      	ldr	r0, [sp, #4]
   11cc0:	b004      	add	sp, #16
   11cc2:	bd80      	pop	{r7, pc}

00011cc4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   11cc4:	b084      	sub	sp, #16
   11cc6:	9001      	str	r0, [sp, #4]
   11cc8:	9102      	str	r1, [sp, #8]
   11cca:	4408      	add	r0, r1
   11ccc:	9003      	str	r0, [sp, #12]
   11cce:	9803      	ldr	r0, [sp, #12]
   11cd0:	9000      	str	r0, [sp, #0]
   11cd2:	e7ff      	b.n	11cd4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   11cd4:	9800      	ldr	r0, [sp, #0]
   11cd6:	b004      	add	sp, #16
   11cd8:	4770      	bx	lr

00011cda <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   11cda:	b082      	sub	sp, #8
   11cdc:	9001      	str	r0, [sp, #4]
   11cde:	9000      	str	r0, [sp, #0]
   11ce0:	e7ff      	b.n	11ce2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   11ce2:	9800      	ldr	r0, [sp, #0]
   11ce4:	fab0 f180 	clz	r1, r0
   11ce8:	0948      	lsrs	r0, r1, #5
   11cea:	b002      	add	sp, #8
   11cec:	4770      	bx	lr

00011cee <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   11cee:	b580      	push	{r7, lr}
   11cf0:	b090      	sub	sp, #64	; 0x40
   11cf2:	900c      	str	r0, [sp, #48]	; 0x30
   11cf4:	910d      	str	r1, [sp, #52]	; 0x34
   11cf6:	9007      	str	r0, [sp, #28]
   11cf8:	9106      	str	r1, [sp, #24]
   11cfa:	f000 ff6b 	bl	12bd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   11cfe:	4601      	mov	r1, r0
   11d00:	900e      	str	r0, [sp, #56]	; 0x38
   11d02:	9105      	str	r1, [sp, #20]
   11d04:	e7ff      	b.n	11d06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   11d06:	9805      	ldr	r0, [sp, #20]
   11d08:	f7ff ffe7 	bl	11cda <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   11d0c:	e7ff      	b.n	11d0e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   11d0e:	e7ff      	b.n	11d10 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   11d10:	2001      	movs	r0, #1
   11d12:	900f      	str	r0, [sp, #60]	; 0x3c
   11d14:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11d16:	9004      	str	r0, [sp, #16]
   11d18:	e7ff      	b.n	11d1a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   11d1a:	9804      	ldr	r0, [sp, #16]
   11d1c:	2800      	cmp	r0, #0
   11d1e:	d006      	beq.n	11d2e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   11d20:	e7ff      	b.n	11d22 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   11d22:	9807      	ldr	r0, [sp, #28]
   11d24:	9906      	ldr	r1, [sp, #24]
   11d26:	f000 ff4d 	bl	12bc4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   11d2a:	9003      	str	r0, [sp, #12]
   11d2c:	e00e      	b.n	11d4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   11d2e:	9807      	ldr	r0, [sp, #28]
   11d30:	9906      	ldr	r1, [sp, #24]
   11d32:	f000 ff47 	bl	12bc4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   11d36:	9002      	str	r0, [sp, #8]
   11d38:	e7ff      	b.n	11d3a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   11d3a:	9805      	ldr	r0, [sp, #20]
   11d3c:	9902      	ldr	r1, [sp, #8]
   11d3e:	f7ff ffb6 	bl	11cae <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   11d42:	9001      	str	r0, [sp, #4]
   11d44:	e7ff      	b.n	11d46 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   11d46:	9801      	ldr	r0, [sp, #4]
   11d48:	900a      	str	r0, [sp, #40]	; 0x28
   11d4a:	e006      	b.n	11d5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   11d4c:	9805      	ldr	r0, [sp, #20]
   11d4e:	9903      	ldr	r1, [sp, #12]
   11d50:	f000 ff15 	bl	12b7e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   11d54:	900a      	str	r0, [sp, #40]	; 0x28
   11d56:	e7ff      	b.n	11d58 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   11d58:	e7ff      	b.n	11d5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   11d5a:	9805      	ldr	r0, [sp, #20]
   11d5c:	f7ff ff9d 	bl	11c9a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   11d60:	9000      	str	r0, [sp, #0]
   11d62:	e7ff      	b.n	11d64 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   11d64:	980a      	ldr	r0, [sp, #40]	; 0x28
   11d66:	9900      	ldr	r1, [sp, #0]
   11d68:	9108      	str	r1, [sp, #32]
   11d6a:	9009      	str	r0, [sp, #36]	; 0x24
   11d6c:	9808      	ldr	r0, [sp, #32]
   11d6e:	9909      	ldr	r1, [sp, #36]	; 0x24
   11d70:	b010      	add	sp, #64	; 0x40
   11d72:	bd80      	pop	{r7, pc}

00011d74 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   11d74:	b081      	sub	sp, #4
   11d76:	b001      	add	sp, #4
   11d78:	4770      	bx	lr

00011d7a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   11d7a:	b580      	push	{r7, lr}
   11d7c:	b08e      	sub	sp, #56	; 0x38
   11d7e:	9007      	str	r0, [sp, #28]
   11d80:	6801      	ldr	r1, [r0, #0]
   11d82:	9005      	str	r0, [sp, #20]
   11d84:	4608      	mov	r0, r1
   11d86:	f7ff ff8e 	bl	11ca6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11d8a:	9004      	str	r0, [sp, #16]
   11d8c:	e7ff      	b.n	11d8e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   11d8e:	9804      	ldr	r0, [sp, #16]
   11d90:	f7ff ff79 	bl	11c86 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   11d94:	e7ff      	b.n	11d96 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   11d96:	e7ff      	b.n	11d98 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   11d98:	2001      	movs	r0, #1
   11d9a:	9008      	str	r0, [sp, #32]
   11d9c:	9808      	ldr	r0, [sp, #32]
   11d9e:	9003      	str	r0, [sp, #12]
   11da0:	e7ff      	b.n	11da2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   11da2:	9803      	ldr	r0, [sp, #12]
   11da4:	2800      	cmp	r0, #0
   11da6:	d007      	beq.n	11db8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   11da8:	e7ff      	b.n	11daa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   11daa:	9805      	ldr	r0, [sp, #20]
   11dac:	6840      	ldr	r0, [r0, #4]
   11dae:	f7ff ff94 	bl	11cda <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   11db2:	e7ff      	b.n	11db4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   11db4:	e7ff      	b.n	11db6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   11db6:	e7ff      	b.n	11db8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   11db8:	9805      	ldr	r0, [sp, #20]
   11dba:	6800      	ldr	r0, [r0, #0]
   11dbc:	f7ff ff73 	bl	11ca6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11dc0:	9002      	str	r0, [sp, #8]
   11dc2:	e7ff      	b.n	11dc4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   11dc4:	9805      	ldr	r0, [sp, #20]
   11dc6:	6841      	ldr	r1, [r0, #4]
   11dc8:	9a02      	ldr	r2, [sp, #8]
   11dca:	428a      	cmp	r2, r1
   11dcc:	d02e      	beq.n	11e2c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   11dce:	e7ff      	b.n	11dd0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   11dd0:	9805      	ldr	r0, [sp, #20]
   11dd2:	900a      	str	r0, [sp, #40]	; 0x28
   11dd4:	2101      	movs	r1, #1
   11dd6:	910b      	str	r1, [sp, #44]	; 0x2c
   11dd8:	910d      	str	r1, [sp, #52]	; 0x34
   11dda:	990d      	ldr	r1, [sp, #52]	; 0x34
   11ddc:	2900      	cmp	r1, #0
   11dde:	d015      	beq.n	11e0c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   11de0:	e7ff      	b.n	11de2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   11de2:	9805      	ldr	r0, [sp, #20]
   11de4:	6800      	ldr	r0, [r0, #0]
   11de6:	f7ff ff5e 	bl	11ca6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11dea:	900c      	str	r0, [sp, #48]	; 0x30
   11dec:	9905      	ldr	r1, [sp, #20]
   11dee:	680a      	ldr	r2, [r1, #0]
   11df0:	9001      	str	r0, [sp, #4]
   11df2:	4610      	mov	r0, r2
   11df4:	f7ff ff57 	bl	11ca6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11df8:	2101      	movs	r1, #1
   11dfa:	f7ff ff39 	bl	11c70 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   11dfe:	f7ff ff4c 	bl	11c9a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   11e02:	9905      	ldr	r1, [sp, #20]
   11e04:	6008      	str	r0, [r1, #0]
   11e06:	9801      	ldr	r0, [sp, #4]
   11e08:	9009      	str	r0, [sp, #36]	; 0x24
   11e0a:	e00c      	b.n	11e26 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   11e0c:	9805      	ldr	r0, [sp, #20]
   11e0e:	6840      	ldr	r0, [r0, #4]
   11e10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11e14:	f7ff ff56 	bl	11cc4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   11e18:	9905      	ldr	r1, [sp, #20]
   11e1a:	6048      	str	r0, [r1, #4]
   11e1c:	6808      	ldr	r0, [r1, #0]
   11e1e:	f7ff ff42 	bl	11ca6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11e22:	9009      	str	r0, [sp, #36]	; 0x24
   11e24:	e7ff      	b.n	11e26 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   11e26:	9809      	ldr	r0, [sp, #36]	; 0x24
   11e28:	9000      	str	r0, [sp, #0]
   11e2a:	e002      	b.n	11e32 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   11e2c:	2000      	movs	r0, #0
   11e2e:	9006      	str	r0, [sp, #24]
   11e30:	e002      	b.n	11e38 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   11e32:	9800      	ldr	r0, [sp, #0]
   11e34:	9006      	str	r0, [sp, #24]
   11e36:	e7ff      	b.n	11e38 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   11e38:	9806      	ldr	r0, [sp, #24]
   11e3a:	b00e      	add	sp, #56	; 0x38
   11e3c:	bd80      	pop	{r7, pc}

00011e3e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
   11e3e:	b580      	push	{r7, lr}
   11e40:	b084      	sub	sp, #16
   11e42:	9002      	str	r0, [sp, #8]
   11e44:	9103      	str	r1, [sp, #12]
   11e46:	6800      	ldr	r0, [r0, #0]
   11e48:	f000 f807 	bl	11e5a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
   11e4c:	9001      	str	r0, [sp, #4]
   11e4e:	e7ff      	b.n	11e50 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
   11e50:	9801      	ldr	r0, [sp, #4]
   11e52:	f000 0001 	and.w	r0, r0, #1
   11e56:	b004      	add	sp, #16
   11e58:	bd80      	pop	{r7, pc}

00011e5a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
   11e5a:	b580      	push	{r7, lr}
   11e5c:	b088      	sub	sp, #32
   11e5e:	9006      	str	r0, [sp, #24]
   11e60:	9107      	str	r1, [sp, #28]
   11e62:	9004      	str	r0, [sp, #16]
   11e64:	4608      	mov	r0, r1
   11e66:	9103      	str	r1, [sp, #12]
   11e68:	f004 fe2b 	bl	16ac2 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   11e6c:	9002      	str	r0, [sp, #8]
   11e6e:	e7ff      	b.n	11e70 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
   11e70:	9802      	ldr	r0, [sp, #8]
   11e72:	07c1      	lsls	r1, r0, #31
   11e74:	2900      	cmp	r1, #0
   11e76:	d105      	bne.n	11e84 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
   11e78:	e7ff      	b.n	11e7a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
   11e7a:	9803      	ldr	r0, [sp, #12]
   11e7c:	f004 fe25 	bl	16aca <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   11e80:	9001      	str	r0, [sp, #4]
   11e82:	e007      	b.n	11e94 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
   11e84:	9804      	ldr	r0, [sp, #16]
   11e86:	9903      	ldr	r1, [sp, #12]
   11e88:	f005 fbe6 	bl	17658 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   11e8c:	f88d 0017 	strb.w	r0, [sp, #23]
   11e90:	e7ff      	b.n	11e92 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
   11e92:	e015      	b.n	11ec0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   11e94:	9801      	ldr	r0, [sp, #4]
   11e96:	07c1      	lsls	r1, r0, #31
   11e98:	2900      	cmp	r1, #0
   11e9a:	d107      	bne.n	11eac <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
   11e9c:	e7ff      	b.n	11e9e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
   11e9e:	9804      	ldr	r0, [sp, #16]
   11ea0:	9903      	ldr	r1, [sp, #12]
   11ea2:	f005 fcec 	bl	1787e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   11ea6:	f88d 0017 	strb.w	r0, [sp, #23]
   11eaa:	e007      	b.n	11ebc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
   11eac:	9804      	ldr	r0, [sp, #16]
   11eae:	9903      	ldr	r1, [sp, #12]
   11eb0:	f005 fc3d 	bl	1772e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   11eb4:	f88d 0017 	strb.w	r0, [sp, #23]
   11eb8:	e7ff      	b.n	11eba <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
   11eba:	e000      	b.n	11ebe <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   11ebc:	e7ff      	b.n	11ebe <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   11ebe:	e7ff      	b.n	11ec0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   11ec0:	f89d 0017 	ldrb.w	r0, [sp, #23]
   11ec4:	b008      	add	sp, #32
   11ec6:	bd80      	pop	{r7, pc}

00011ec8 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
   11ec8:	b084      	sub	sp, #16
   11eca:	9002      	str	r0, [sp, #8]
   11ecc:	9103      	str	r1, [sp, #12]
            Coord(x, y)
   11ece:	9000      	str	r0, [sp, #0]
   11ed0:	9101      	str	r1, [sp, #4]
        }
   11ed2:	9800      	ldr	r0, [sp, #0]
   11ed4:	9901      	ldr	r1, [sp, #4]
   11ed6:	b004      	add	sp, #16
   11ed8:	4770      	bx	lr

00011eda <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
   11eda:	b08b      	sub	sp, #44	; 0x2c
   11edc:	4601      	mov	r1, r0
   11ede:	f8ad 0020 	strh.w	r0, [sp, #32]
   11ee2:	0c00      	lsrs	r0, r0, #16
   11ee4:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11ee8:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   11eec:	f88d 001e 	strb.w	r0, [sp, #30]
   11ef0:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   11ef4:	f8ad 001c 	strh.w	r0, [sp, #28]
   11ef8:	f89d 001c 	ldrb.w	r0, [sp, #28]
   11efc:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   11f00:	f89d 201d 	ldrb.w	r2, [sp, #29]
   11f04:	4613      	mov	r3, r2
   11f06:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   11f0a:	f89d 201e 	ldrb.w	r2, [sp, #30]
   11f0e:	4694      	mov	ip, r2
   11f10:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
   11f14:	0200      	lsls	r0, r0, #8
   11f16:	9306      	str	r3, [sp, #24]
   11f18:	f8cd c014 	str.w	ip, [sp, #20]
   11f1c:	9004      	str	r0, [sp, #16]
   11f1e:	e7ff      	b.n	11f20 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
   11f20:	9804      	ldr	r0, [sp, #16]
   11f22:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
   11f26:	9a06      	ldr	r2, [sp, #24]
   11f28:	b2d3      	uxtb	r3, r2
   11f2a:	00db      	lsls	r3, r3, #3
   11f2c:	9103      	str	r1, [sp, #12]
   11f2e:	9302      	str	r3, [sp, #8]
   11f30:	e7ff      	b.n	11f32 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
   11f32:	9802      	ldr	r0, [sp, #8]
   11f34:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
   11f38:	9a03      	ldr	r2, [sp, #12]
   11f3a:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
   11f3c:	9b05      	ldr	r3, [sp, #20]
   11f3e:	fa5f fc83 	uxtb.w	ip, r3
   11f42:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   11f46:	9101      	str	r1, [sp, #4]
   11f48:	f8cd c000 	str.w	ip, [sp]
   11f4c:	e7ff      	b.n	11f4e <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
   11f4e:	9800      	ldr	r0, [sp, #0]
   11f50:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
   11f54:	9a01      	ldr	r2, [sp, #4]
   11f56:	4311      	orrs	r1, r2
   11f58:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
   11f5c:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
   11f60:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   11f64:	b00b      	add	sp, #44	; 0x2c
   11f66:	4770      	bx	lr

00011f68 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
   11f68:	b580      	push	{r7, lr}
   11f6a:	b088      	sub	sp, #32
   11f6c:	9005      	str	r0, [sp, #20]
   11f6e:	9106      	str	r1, [sp, #24]
   11f70:	9003      	str	r0, [sp, #12]
   11f72:	4608      	mov	r0, r1
   11f74:	f000 fa21 	bl	123ba <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
   11f78:	9004      	str	r0, [sp, #16]
   11f7a:	e7ff      	b.n	11f7c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
   11f7c:	9804      	ldr	r0, [sp, #16]
   11f7e:	9007      	str	r0, [sp, #28]
   11f80:	9903      	ldr	r1, [sp, #12]
   11f82:	680a      	ldr	r2, [r1, #0]
   11f84:	9002      	str	r0, [sp, #8]
   11f86:	4610      	mov	r0, r2
   11f88:	9902      	ldr	r1, [sp, #8]
   11f8a:	f000 f837 	bl	11ffc <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
   11f8e:	9001      	str	r0, [sp, #4]
   11f90:	9100      	str	r1, [sp, #0]
   11f92:	e7ff      	b.n	11f94 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
   11f94:	9801      	ldr	r0, [sp, #4]
   11f96:	9900      	ldr	r1, [sp, #0]
   11f98:	b008      	add	sp, #32
   11f9a:	bd80      	pop	{r7, pc}

00011f9c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
   11f9c:	b580      	push	{r7, lr}
   11f9e:	b084      	sub	sp, #16
   11fa0:	9001      	str	r0, [sp, #4]
   11fa2:	9102      	str	r1, [sp, #8]
   11fa4:	9203      	str	r2, [sp, #12]
   11fa6:	9000      	str	r0, [sp, #0]
   11fa8:	4608      	mov	r0, r1
   11faa:	9900      	ldr	r1, [sp, #0]
   11fac:	f00a f9f4 	bl	1c398 <__aeabi_memcpy>
   11fb0:	e7ff      	b.n	11fb2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
   11fb2:	b004      	add	sp, #16
   11fb4:	bd80      	pop	{r7, pc}

00011fb6 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
   11fb6:	b580      	push	{r7, lr}
   11fb8:	b084      	sub	sp, #16
   11fba:	9001      	str	r0, [sp, #4]
   11fbc:	9102      	str	r1, [sp, #8]
   11fbe:	9203      	str	r2, [sp, #12]
   11fc0:	0092      	lsls	r2, r2, #2
   11fc2:	9000      	str	r0, [sp, #0]
   11fc4:	4608      	mov	r0, r1
   11fc6:	9900      	ldr	r1, [sp, #0]
   11fc8:	f00a f9e6 	bl	1c398 <__aeabi_memcpy>
   11fcc:	e7ff      	b.n	11fce <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
   11fce:	b004      	add	sp, #16
   11fd0:	bd80      	pop	{r7, pc}

00011fd2 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
   11fd2:	b082      	sub	sp, #8
   11fd4:	9000      	str	r0, [sp, #0]
   11fd6:	9101      	str	r1, [sp, #4]
   11fd8:	6800      	ldr	r0, [r0, #0]
   11fda:	6809      	ldr	r1, [r1, #0]
   11fdc:	2200      	movs	r2, #0
   11fde:	4288      	cmp	r0, r1
   11fe0:	bf38      	it	cc
   11fe2:	2201      	movcc	r2, #1
   11fe4:	4610      	mov	r0, r2
   11fe6:	b002      	add	sp, #8
   11fe8:	4770      	bx	lr

00011fea <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
   11fea:	b580      	push	{r7, lr}
   11fec:	b082      	sub	sp, #8
   11fee:	9000      	str	r0, [sp, #0]
   11ff0:	9101      	str	r1, [sp, #4]
   11ff2:	f000 f85f 	bl	120b4 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
   11ff6:	e7ff      	b.n	11ff8 <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
   11ff8:	b002      	add	sp, #8
   11ffa:	bd80      	pop	{r7, pc}

00011ffc <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
   11ffc:	b580      	push	{r7, lr}
   11ffe:	b088      	sub	sp, #32
   12000:	9004      	str	r0, [sp, #16]
   12002:	9105      	str	r1, [sp, #20]
   12004:	f000 f819 	bl	1203a <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
   12008:	9001      	str	r0, [sp, #4]
   1200a:	9100      	str	r1, [sp, #0]
   1200c:	e7ff      	b.n	1200e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
   1200e:	9801      	ldr	r0, [sp, #4]
   12010:	9006      	str	r0, [sp, #24]
   12012:	9900      	ldr	r1, [sp, #0]
   12014:	f001 0201 	and.w	r2, r1, #1
   12018:	f88d 201f 	strb.w	r2, [sp, #31]
   1201c:	2a00      	cmp	r2, #0
   1201e:	d105      	bne.n	1202c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
   12020:	e7ff      	b.n	12022 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
   12022:	9801      	ldr	r0, [sp, #4]
   12024:	9003      	str	r0, [sp, #12]
   12026:	2101      	movs	r1, #1
   12028:	9102      	str	r1, [sp, #8]
   1202a:	e002      	b.n	12032 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   1202c:	2000      	movs	r0, #0
   1202e:	9002      	str	r0, [sp, #8]
   12030:	e7ff      	b.n	12032 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   12032:	9802      	ldr	r0, [sp, #8]
   12034:	9903      	ldr	r1, [sp, #12]
   12036:	b008      	add	sp, #32
   12038:	bd80      	pop	{r7, pc}

0001203a <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
   1203a:	b08a      	sub	sp, #40	; 0x28
   1203c:	9004      	str	r0, [sp, #16]
   1203e:	9105      	str	r1, [sp, #20]
   12040:	1840      	adds	r0, r0, r1
   12042:	f04f 0100 	mov.w	r1, #0
   12046:	f141 0100 	adc.w	r1, r1, #0
   1204a:	9006      	str	r0, [sp, #24]
   1204c:	f88d 101c 	strb.w	r1, [sp, #28]
   12050:	9806      	ldr	r0, [sp, #24]
   12052:	f89d 101c 	ldrb.w	r1, [sp, #28]
   12056:	9001      	str	r0, [sp, #4]
   12058:	9100      	str	r1, [sp, #0]
   1205a:	e7ff      	b.n	1205c <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
   1205c:	9801      	ldr	r0, [sp, #4]
   1205e:	9008      	str	r0, [sp, #32]
   12060:	9900      	ldr	r1, [sp, #0]
   12062:	f001 0201 	and.w	r2, r1, #1
   12066:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1206a:	9002      	str	r0, [sp, #8]
   1206c:	f88d 200c 	strb.w	r2, [sp, #12]
   12070:	9802      	ldr	r0, [sp, #8]
   12072:	f89d 100c 	ldrb.w	r1, [sp, #12]
   12076:	b00a      	add	sp, #40	; 0x28
   12078:	4770      	bx	lr

0001207a <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
   1207a:	b580      	push	{r7, lr}
   1207c:	b08c      	sub	sp, #48	; 0x30
   1207e:	9005      	str	r0, [sp, #20]
   12080:	9106      	str	r1, [sp, #24]
   12082:	9207      	str	r2, [sp, #28]
   12084:	4603      	mov	r3, r0
   12086:	9008      	str	r0, [sp, #32]
   12088:	4608      	mov	r0, r1
   1208a:	9109      	str	r1, [sp, #36]	; 0x24
   1208c:	2104      	movs	r1, #4
   1208e:	910b      	str	r1, [sp, #44]	; 0x2c
   12090:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12092:	9204      	str	r2, [sp, #16]
   12094:	9303      	str	r3, [sp, #12]
   12096:	9002      	str	r0, [sp, #8]
   12098:	9101      	str	r1, [sp, #4]
   1209a:	e7ff      	b.n	1209c <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
   1209c:	9801      	ldr	r0, [sp, #4]
   1209e:	9904      	ldr	r1, [sp, #16]
   120a0:	fb00 f201 	mul.w	r2, r0, r1
   120a4:	920a      	str	r2, [sp, #40]	; 0x28
   120a6:	9803      	ldr	r0, [sp, #12]
   120a8:	9902      	ldr	r1, [sp, #8]
   120aa:	f000 f82e 	bl	1210a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
   120ae:	e7ff      	b.n	120b0 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
   120b0:	b00c      	add	sp, #48	; 0x30
   120b2:	bd80      	pop	{r7, pc}

000120b4 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
   120b4:	b580      	push	{r7, lr}
   120b6:	b088      	sub	sp, #32
   120b8:	9004      	str	r0, [sp, #16]
   120ba:	9105      	str	r1, [sp, #20]
   120bc:	2204      	movs	r2, #4
   120be:	9207      	str	r2, [sp, #28]
   120c0:	9a07      	ldr	r2, [sp, #28]
   120c2:	9103      	str	r1, [sp, #12]
   120c4:	9002      	str	r0, [sp, #8]
   120c6:	9201      	str	r2, [sp, #4]
   120c8:	e7ff      	b.n	120ca <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
   120ca:	9801      	ldr	r0, [sp, #4]
   120cc:	2820      	cmp	r0, #32
   120ce:	d306      	bcc.n	120de <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
   120d0:	e7ff      	b.n	120d2 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
   120d2:	2201      	movs	r2, #1
   120d4:	9802      	ldr	r0, [sp, #8]
   120d6:	9903      	ldr	r1, [sp, #12]
   120d8:	f7ff ffcf 	bl	1207a <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
   120dc:	e012      	b.n	12104 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
   120de:	9802      	ldr	r0, [sp, #8]
   120e0:	f000 f8a1 	bl	12226 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
   120e4:	4601      	mov	r1, r0
   120e6:	9006      	str	r0, [sp, #24]
   120e8:	9100      	str	r1, [sp, #0]
   120ea:	e7ff      	b.n	120ec <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
   120ec:	2201      	movs	r2, #1
   120ee:	9803      	ldr	r0, [sp, #12]
   120f0:	9902      	ldr	r1, [sp, #8]
   120f2:	f7ff ff60 	bl	11fb6 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   120f6:	e7ff      	b.n	120f8 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
   120f8:	9803      	ldr	r0, [sp, #12]
   120fa:	9900      	ldr	r1, [sp, #0]
   120fc:	f000 f8ac 	bl	12258 <_ZN4core3ptr5write17h4a80332de2cee3d3E>
   12100:	e7ff      	b.n	12102 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
   12102:	e000      	b.n	12106 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   12104:	e7ff      	b.n	12106 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   12106:	b008      	add	sp, #32
   12108:	bd80      	pop	{r7, pc}

0001210a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
   1210a:	b5d0      	push	{r4, r6, r7, lr}
   1210c:	af02      	add	r7, sp, #8
   1210e:	b0b4      	sub	sp, #208	; 0xd0
   12110:	466c      	mov	r4, sp
   12112:	f36f 0404 	bfc	r4, #0, #5
   12116:	46a5      	mov	sp, r4
   12118:	9024      	str	r0, [sp, #144]	; 0x90
   1211a:	9125      	str	r1, [sp, #148]	; 0x94
   1211c:	9226      	str	r2, [sp, #152]	; 0x98
   1211e:	2320      	movs	r3, #32
   12120:	932f      	str	r3, [sp, #188]	; 0xbc
   12122:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   12124:	9327      	str	r3, [sp, #156]	; 0x9c
   12126:	920e      	str	r2, [sp, #56]	; 0x38
   12128:	910d      	str	r1, [sp, #52]	; 0x34
   1212a:	900c      	str	r0, [sp, #48]	; 0x30
   1212c:	930b      	str	r3, [sp, #44]	; 0x2c
   1212e:	e7ff      	b.n	12130 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
   12130:	2000      	movs	r0, #0
   12132:	900f      	str	r0, [sp, #60]	; 0x3c
   12134:	e7ff      	b.n	12136 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   12136:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12138:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1213a:	4408      	add	r0, r1
   1213c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1213e:	4290      	cmp	r0, r2
   12140:	d905      	bls.n	1214e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
   12142:	e7ff      	b.n	12144 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
   12144:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12146:	990e      	ldr	r1, [sp, #56]	; 0x38
   12148:	4288      	cmp	r0, r1
   1214a:	d334      	bcc.n	121b6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
   1214c:	e067      	b.n	1221e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   1214e:	e7ff      	b.n	12150 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
   12150:	a810      	add	r0, sp, #64	; 0x40
   12152:	9030      	str	r0, [sp, #192]	; 0xc0
   12154:	9031      	str	r0, [sp, #196]	; 0xc4
   12156:	e7ff      	b.n	12158 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
   12158:	a810      	add	r0, sp, #64	; 0x40
   1215a:	4601      	mov	r1, r0
   1215c:	9028      	str	r0, [sp, #160]	; 0xa0
   1215e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12162:	900a      	str	r0, [sp, #40]	; 0x28
   12164:	4610      	mov	r0, r2
   12166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12168:	9109      	str	r1, [sp, #36]	; 0x24
   1216a:	4619      	mov	r1, r3
   1216c:	f000 f87a 	bl	12264 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   12170:	4601      	mov	r1, r0
   12172:	9029      	str	r0, [sp, #164]	; 0xa4
   12174:	9108      	str	r1, [sp, #32]
   12176:	e7ff      	b.n	12178 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
   12178:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1217a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1217c:	f000 f872 	bl	12264 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   12180:	4601      	mov	r1, r0
   12182:	902a      	str	r0, [sp, #168]	; 0xa8
   12184:	9107      	str	r1, [sp, #28]
   12186:	e7ff      	b.n	12188 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
   12188:	9808      	ldr	r0, [sp, #32]
   1218a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1218c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1218e:	f7ff ff05 	bl	11f9c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   12192:	e7ff      	b.n	12194 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
   12194:	9807      	ldr	r0, [sp, #28]
   12196:	9908      	ldr	r1, [sp, #32]
   12198:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1219a:	f7ff feff 	bl	11f9c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1219e:	e7ff      	b.n	121a0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
   121a0:	9809      	ldr	r0, [sp, #36]	; 0x24
   121a2:	9907      	ldr	r1, [sp, #28]
   121a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   121a6:	f7ff fef9 	bl	11f9c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   121aa:	e7ff      	b.n	121ac <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
   121ac:	980f      	ldr	r0, [sp, #60]	; 0x3c
   121ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   121b0:	4408      	add	r0, r1
   121b2:	900f      	str	r0, [sp, #60]	; 0x3c
   121b4:	e7bf      	b.n	12136 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   121b6:	e7ff      	b.n	121b8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
   121b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   121ba:	990e      	ldr	r1, [sp, #56]	; 0x38
   121bc:	1a08      	subs	r0, r1, r0
   121be:	4602      	mov	r2, r0
   121c0:	902b      	str	r0, [sp, #172]	; 0xac
   121c2:	a81c      	add	r0, sp, #112	; 0x70
   121c4:	9032      	str	r0, [sp, #200]	; 0xc8
   121c6:	9033      	str	r0, [sp, #204]	; 0xcc
   121c8:	9206      	str	r2, [sp, #24]
   121ca:	9005      	str	r0, [sp, #20]
   121cc:	e7ff      	b.n	121ce <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
   121ce:	9805      	ldr	r0, [sp, #20]
   121d0:	9905      	ldr	r1, [sp, #20]
   121d2:	912c      	str	r1, [sp, #176]	; 0xb0
   121d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   121d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   121d8:	9004      	str	r0, [sp, #16]
   121da:	4610      	mov	r0, r2
   121dc:	f000 f842 	bl	12264 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   121e0:	4601      	mov	r1, r0
   121e2:	902d      	str	r0, [sp, #180]	; 0xb4
   121e4:	9103      	str	r1, [sp, #12]
   121e6:	e7ff      	b.n	121e8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
   121e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   121ea:	980d      	ldr	r0, [sp, #52]	; 0x34
   121ec:	f000 f83a 	bl	12264 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   121f0:	4601      	mov	r1, r0
   121f2:	902e      	str	r0, [sp, #184]	; 0xb8
   121f4:	9102      	str	r1, [sp, #8]
   121f6:	e7ff      	b.n	121f8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
   121f8:	9803      	ldr	r0, [sp, #12]
   121fa:	9904      	ldr	r1, [sp, #16]
   121fc:	9a06      	ldr	r2, [sp, #24]
   121fe:	f7ff fecd 	bl	11f9c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   12202:	e7ff      	b.n	12204 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
   12204:	9802      	ldr	r0, [sp, #8]
   12206:	9903      	ldr	r1, [sp, #12]
   12208:	9a06      	ldr	r2, [sp, #24]
   1220a:	f7ff fec7 	bl	11f9c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1220e:	e7ff      	b.n	12210 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
   12210:	9804      	ldr	r0, [sp, #16]
   12212:	9902      	ldr	r1, [sp, #8]
   12214:	9a06      	ldr	r2, [sp, #24]
   12216:	f7ff fec1 	bl	11f9c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1221a:	e7ff      	b.n	1221c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
   1221c:	e7ff      	b.n	1221e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   1221e:	f1a7 0408 	sub.w	r4, r7, #8
   12222:	46a5      	mov	sp, r4
   12224:	bdd0      	pop	{r4, r6, r7, pc}

00012226 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
   12226:	b580      	push	{r7, lr}
   12228:	b08a      	sub	sp, #40	; 0x28
   1222a:	9004      	str	r0, [sp, #16]
   1222c:	9905      	ldr	r1, [sp, #20]
   1222e:	9103      	str	r1, [sp, #12]
   12230:	9002      	str	r0, [sp, #8]
   12232:	e7ff      	b.n	12234 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
   12234:	a803      	add	r0, sp, #12
   12236:	9008      	str	r0, [sp, #32]
   12238:	9009      	str	r0, [sp, #36]	; 0x24
   1223a:	e7ff      	b.n	1223c <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
   1223c:	a903      	add	r1, sp, #12
   1223e:	2201      	movs	r2, #1
   12240:	9802      	ldr	r0, [sp, #8]
   12242:	f7ff feb8 	bl	11fb6 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   12246:	e7ff      	b.n	12248 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
   12248:	9803      	ldr	r0, [sp, #12]
   1224a:	9006      	str	r0, [sp, #24]
   1224c:	9007      	str	r0, [sp, #28]
   1224e:	9001      	str	r0, [sp, #4]
   12250:	e7ff      	b.n	12252 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
   12252:	9801      	ldr	r0, [sp, #4]
   12254:	b00a      	add	sp, #40	; 0x28
   12256:	bd80      	pop	{r7, pc}

00012258 <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
   12258:	b082      	sub	sp, #8
   1225a:	9000      	str	r0, [sp, #0]
   1225c:	9101      	str	r1, [sp, #4]
   1225e:	6001      	str	r1, [r0, #0]
   12260:	b002      	add	sp, #8
   12262:	4770      	bx	lr

00012264 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
   12264:	b580      	push	{r7, lr}
   12266:	b084      	sub	sp, #16
   12268:	9002      	str	r0, [sp, #8]
   1226a:	9103      	str	r1, [sp, #12]
   1226c:	f000 f805 	bl	1227a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
   12270:	9001      	str	r0, [sp, #4]
   12272:	e7ff      	b.n	12274 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
   12274:	9801      	ldr	r0, [sp, #4]
   12276:	b004      	add	sp, #16
   12278:	bd80      	pop	{r7, pc}

0001227a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
   1227a:	b084      	sub	sp, #16
   1227c:	9001      	str	r0, [sp, #4]
   1227e:	9102      	str	r1, [sp, #8]
   12280:	4408      	add	r0, r1
   12282:	9003      	str	r0, [sp, #12]
   12284:	9803      	ldr	r0, [sp, #12]
   12286:	9000      	str	r0, [sp, #0]
   12288:	e7ff      	b.n	1228a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
   1228a:	9800      	ldr	r0, [sp, #0]
   1228c:	b004      	add	sp, #16
   1228e:	4770      	bx	lr

00012290 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
   12290:	b580      	push	{r7, lr}
   12292:	b084      	sub	sp, #16
   12294:	9002      	str	r0, [sp, #8]
   12296:	9103      	str	r1, [sp, #12]
   12298:	f000 f805 	bl	122a6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
   1229c:	9001      	str	r0, [sp, #4]
   1229e:	e7ff      	b.n	122a0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
   122a0:	9801      	ldr	r0, [sp, #4]
   122a2:	b004      	add	sp, #16
   122a4:	bd80      	pop	{r7, pc}

000122a6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
   122a6:	b084      	sub	sp, #16
   122a8:	9001      	str	r0, [sp, #4]
   122aa:	9102      	str	r1, [sp, #8]
   122ac:	4408      	add	r0, r1
   122ae:	9003      	str	r0, [sp, #12]
   122b0:	9803      	ldr	r0, [sp, #12]
   122b2:	9000      	str	r0, [sp, #0]
   122b4:	e7ff      	b.n	122b6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
   122b6:	9800      	ldr	r0, [sp, #0]
   122b8:	b004      	add	sp, #16
   122ba:	4770      	bx	lr

000122bc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
   122bc:	b580      	push	{r7, lr}
   122be:	b08a      	sub	sp, #40	; 0x28
   122c0:	9009      	str	r0, [sp, #36]	; 0x24
   122c2:	2100      	movs	r1, #0
   122c4:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   122c8:	1d01      	adds	r1, r0, #4
   122ca:	9002      	str	r0, [sp, #8]
   122cc:	f7ff fe81 	bl	11fd2 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
   122d0:	9001      	str	r0, [sp, #4]
   122d2:	e7ff      	b.n	122d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
   122d4:	9801      	ldr	r0, [sp, #4]
   122d6:	07c1      	lsls	r1, r0, #31
   122d8:	2900      	cmp	r1, #0
   122da:	d103      	bne.n	122e4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
   122dc:	e7ff      	b.n	122de <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
   122de:	2000      	movs	r0, #0
   122e0:	9003      	str	r0, [sp, #12]
   122e2:	e021      	b.n	12328 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   122e4:	2001      	movs	r0, #1
   122e6:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   122ea:	9902      	ldr	r1, [sp, #8]
   122ec:	9000      	str	r0, [sp, #0]
   122ee:	4608      	mov	r0, r1
   122f0:	9900      	ldr	r1, [sp, #0]
   122f2:	f7ff fe39 	bl	11f68 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
   122f6:	9106      	str	r1, [sp, #24]
   122f8:	9005      	str	r0, [sp, #20]
   122fa:	e7ff      	b.n	122fc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
   122fc:	9805      	ldr	r0, [sp, #20]
   122fe:	2801      	cmp	r0, #1
   12300:	d003      	beq.n	1230a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
   12302:	e7ff      	b.n	12304 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
   12304:	2000      	movs	r0, #0
   12306:	9003      	str	r0, [sp, #12]
   12308:	e021      	b.n	1234e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   1230a:	2000      	movs	r0, #0
   1230c:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12310:	9806      	ldr	r0, [sp, #24]
   12312:	9007      	str	r0, [sp, #28]
   12314:	a807      	add	r0, sp, #28
   12316:	9902      	ldr	r1, [sp, #8]
   12318:	f7ff fe67 	bl	11fea <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
   1231c:	e7ff      	b.n	1231e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
   1231e:	9807      	ldr	r0, [sp, #28]
   12320:	9004      	str	r0, [sp, #16]
   12322:	2001      	movs	r0, #1
   12324:	9003      	str	r0, [sp, #12]
   12326:	e012      	b.n	1234e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   12328:	9803      	ldr	r0, [sp, #12]
   1232a:	9904      	ldr	r1, [sp, #16]
   1232c:	b00a      	add	sp, #40	; 0x28
   1232e:	bd80      	pop	{r7, pc}
   12330:	2000      	movs	r0, #0
   12332:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12336:	e7f7      	b.n	12328 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   12338:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1233c:	07c0      	lsls	r0, r0, #31
   1233e:	2800      	cmp	r0, #0
   12340:	d0f6      	beq.n	12330 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   12342:	e7ff      	b.n	12344 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
   12344:	2000      	movs	r0, #0
   12346:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   1234a:	e7f1      	b.n	12330 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   1234c:	e7f0      	b.n	12330 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   1234e:	9805      	ldr	r0, [sp, #20]
   12350:	2801      	cmp	r0, #1
   12352:	d0f1      	beq.n	12338 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
   12354:	e7fa      	b.n	1234c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

00012356 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
   12356:	b082      	sub	sp, #8
   12358:	9000      	str	r0, [sp, #0]
   1235a:	9101      	str	r1, [sp, #4]
   1235c:	b002      	add	sp, #8
   1235e:	4770      	bx	lr

00012360 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
   12360:	b580      	push	{r7, lr}
   12362:	b086      	sub	sp, #24
   12364:	9003      	str	r0, [sp, #12]
   12366:	9104      	str	r1, [sp, #16]
   12368:	9205      	str	r2, [sp, #20]
   1236a:	9002      	str	r0, [sp, #8]
   1236c:	4610      	mov	r0, r2
   1236e:	9a02      	ldr	r2, [sp, #8]
   12370:	9101      	str	r1, [sp, #4]
   12372:	4611      	mov	r1, r2
   12374:	9a01      	ldr	r2, [sp, #4]
   12376:	f000 f846 	bl	12406 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
   1237a:	9000      	str	r0, [sp, #0]
   1237c:	e7ff      	b.n	1237e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
   1237e:	9800      	ldr	r0, [sp, #0]
   12380:	b006      	add	sp, #24
   12382:	bd80      	pop	{r7, pc}

00012384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
   12384:	b084      	sub	sp, #16
   12386:	9002      	str	r0, [sp, #8]
   12388:	9103      	str	r1, [sp, #12]
   1238a:	9000      	str	r0, [sp, #0]
   1238c:	9101      	str	r1, [sp, #4]
   1238e:	9801      	ldr	r0, [sp, #4]
   12390:	b004      	add	sp, #16
   12392:	4770      	bx	lr

00012394 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
   12394:	b082      	sub	sp, #8
   12396:	9000      	str	r0, [sp, #0]
   12398:	9101      	str	r1, [sp, #4]
   1239a:	b002      	add	sp, #8
   1239c:	4770      	bx	lr

0001239e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
   1239e:	b081      	sub	sp, #4
   123a0:	9000      	str	r0, [sp, #0]
   123a2:	b001      	add	sp, #4
   123a4:	4770      	bx	lr

000123a6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
   123a6:	b580      	push	{r7, lr}
   123a8:	b082      	sub	sp, #8
   123aa:	9001      	str	r0, [sp, #4]
   123ac:	f7ff fff7 	bl	1239e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
   123b0:	9000      	str	r0, [sp, #0]
   123b2:	e7ff      	b.n	123b4 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
   123b4:	9800      	ldr	r0, [sp, #0]
   123b6:	b002      	add	sp, #8
   123b8:	bd80      	pop	{r7, pc}

000123ba <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
   123ba:	b580      	push	{r7, lr}
   123bc:	b084      	sub	sp, #16
   123be:	9003      	str	r0, [sp, #12]
   123c0:	f7ff fff1 	bl	123a6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
   123c4:	9001      	str	r0, [sp, #4]
   123c6:	e7ff      	b.n	123c8 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
   123c8:	9801      	ldr	r0, [sp, #4]
   123ca:	9002      	str	r0, [sp, #8]
   123cc:	9802      	ldr	r0, [sp, #8]
   123ce:	b004      	add	sp, #16
   123d0:	bd80      	pop	{r7, pc}

000123d2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
   123d2:	b082      	sub	sp, #8
   123d4:	9000      	str	r0, [sp, #0]
   123d6:	9101      	str	r1, [sp, #4]
   123d8:	b002      	add	sp, #8
   123da:	4770      	bx	lr

000123dc <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
   123dc:	b580      	push	{r7, lr}
   123de:	b086      	sub	sp, #24
   123e0:	9003      	str	r0, [sp, #12]
   123e2:	9104      	str	r1, [sp, #16]
   123e4:	9205      	str	r2, [sp, #20]
   123e6:	9002      	str	r0, [sp, #8]
   123e8:	4608      	mov	r0, r1
   123ea:	4611      	mov	r1, r2
   123ec:	f7ff ffd2 	bl	12394 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   123f0:	9001      	str	r0, [sp, #4]
   123f2:	e7ff      	b.n	123f4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
   123f4:	9801      	ldr	r0, [sp, #4]
   123f6:	9902      	ldr	r1, [sp, #8]
   123f8:	f7ff ff4a 	bl	12290 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
   123fc:	9000      	str	r0, [sp, #0]
   123fe:	e7ff      	b.n	12400 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
   12400:	9800      	ldr	r0, [sp, #0]
   12402:	b006      	add	sp, #24
   12404:	bd80      	pop	{r7, pc}

00012406 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
   12406:	b580      	push	{r7, lr}
   12408:	b086      	sub	sp, #24
   1240a:	9003      	str	r0, [sp, #12]
   1240c:	9104      	str	r1, [sp, #16]
   1240e:	9205      	str	r2, [sp, #20]
   12410:	9002      	str	r0, [sp, #8]
   12412:	4608      	mov	r0, r1
   12414:	4611      	mov	r1, r2
   12416:	f7ff ff9e 	bl	12356 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   1241a:	9001      	str	r0, [sp, #4]
   1241c:	e7ff      	b.n	1241e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
   1241e:	9801      	ldr	r0, [sp, #4]
   12420:	9902      	ldr	r1, [sp, #8]
   12422:	f7ff ff1f 	bl	12264 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   12426:	9000      	str	r0, [sp, #0]
   12428:	e7ff      	b.n	1242a <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
   1242a:	9800      	ldr	r0, [sp, #0]
   1242c:	b006      	add	sp, #24
   1242e:	bd80      	pop	{r7, pc}

00012430 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   12430:	b081      	sub	sp, #4
   12432:	b001      	add	sp, #4
   12434:	4770      	bx	lr

00012436 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
   12436:	b580      	push	{r7, lr}
   12438:	b086      	sub	sp, #24
   1243a:	f8dd c020 	ldr.w	ip, [sp, #32]
   1243e:	9102      	str	r1, [sp, #8]
   12440:	9203      	str	r2, [sp, #12]
   12442:	9304      	str	r3, [sp, #16]
   12444:	f8cd c014 	str.w	ip, [sp, #20]
   12448:	f04f 0e00 	mov.w	lr, #0
   1244c:	f8cd e004 	str.w	lr, [sp, #4]
   12450:	f8cd e000 	str.w	lr, [sp]
   12454:	f8cd e000 	str.w	lr, [sp]
   12458:	6001      	str	r1, [r0, #0]
   1245a:	6042      	str	r2, [r0, #4]
   1245c:	9900      	ldr	r1, [sp, #0]
   1245e:	9a01      	ldr	r2, [sp, #4]
   12460:	6081      	str	r1, [r0, #8]
   12462:	60c2      	str	r2, [r0, #12]
   12464:	6103      	str	r3, [r0, #16]
   12466:	f8c0 c014 	str.w	ip, [r0, #20]
   1246a:	b006      	add	sp, #24
   1246c:	bd80      	pop	{r7, pc}

0001246e <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
   1246e:	b580      	push	{r7, lr}
   12470:	b084      	sub	sp, #16
   12472:	9101      	str	r1, [sp, #4]
   12474:	9202      	str	r2, [sp, #8]
   12476:	9901      	ldr	r1, [sp, #4]
   12478:	9a02      	ldr	r2, [sp, #8]
   1247a:	f000 fa94 	bl	129a6 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
   1247e:	e7ff      	b.n	12480 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
   12480:	b004      	add	sp, #16
   12482:	bd80      	pop	{r7, pc}

00012484 <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
   12484:	b081      	sub	sp, #4
   12486:	9000      	str	r0, [sp, #0]
   12488:	b001      	add	sp, #4
   1248a:	4770      	bx	lr

0001248c <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
   1248c:	b081      	sub	sp, #4
   1248e:	9000      	str	r0, [sp, #0]
   12490:	b001      	add	sp, #4
   12492:	4770      	bx	lr

00012494 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
   12494:	b580      	push	{r7, lr}
   12496:	b086      	sub	sp, #24
   12498:	460a      	mov	r2, r1
   1249a:	9004      	str	r0, [sp, #16]
   1249c:	f88d 1017 	strb.w	r1, [sp, #23]
   124a0:	9203      	str	r2, [sp, #12]
   124a2:	f7ff fff3 	bl	1248c <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   124a6:	9002      	str	r0, [sp, #8]
   124a8:	e7ff      	b.n	124aa <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
   124aa:	9802      	ldr	r0, [sp, #8]
   124ac:	9903      	ldr	r1, [sp, #12]
   124ae:	f000 f805 	bl	124bc <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   124b2:	9001      	str	r0, [sp, #4]
   124b4:	e7ff      	b.n	124b6 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
   124b6:	9801      	ldr	r0, [sp, #4]
   124b8:	b006      	add	sp, #24
   124ba:	bd80      	pop	{r7, pc}

000124bc <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
   124bc:	b086      	sub	sp, #24
   124be:	460a      	mov	r2, r1
   124c0:	f88d 100f 	strb.w	r1, [sp, #15]
   124c4:	9005      	str	r0, [sp, #20]
   124c6:	f89d 100f 	ldrb.w	r1, [sp, #15]
   124ca:	9002      	str	r0, [sp, #8]
   124cc:	9101      	str	r1, [sp, #4]
   124ce:	9901      	ldr	r1, [sp, #4]
   124d0:	e8df f001 	tbb	[pc, r1]
   124d4:	03102317 	.word	0x03102317
   124d8:	001c      	.short	0x001c
   124da:	f245 007d 	movw	r0, #20605	; 0x507d
   124de:	f2c0 0002 	movt	r0, #2
   124e2:	f245 02f8 	movw	r2, #20728	; 0x50f8
   124e6:	f2c0 0202 	movt	r2, #2
   124ea:	2131      	movs	r1, #49	; 0x31
   124ec:	f003 fc48 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   124f0:	defe      	udf	#254	; 0xfe
   124f2:	defe      	udf	#254	; 0xfe
   124f4:	9802      	ldr	r0, [sp, #8]
   124f6:	6801      	ldr	r1, [r0, #0]
   124f8:	f3bf 8f5f 	dmb	sy
   124fc:	9104      	str	r1, [sp, #16]
   124fe:	e7ff      	b.n	12500 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
   12500:	e017      	b.n	12532 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   12502:	9802      	ldr	r0, [sp, #8]
   12504:	6801      	ldr	r1, [r0, #0]
   12506:	9104      	str	r1, [sp, #16]
   12508:	e7ff      	b.n	1250a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
   1250a:	e012      	b.n	12532 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   1250c:	9802      	ldr	r0, [sp, #8]
   1250e:	6801      	ldr	r1, [r0, #0]
   12510:	f3bf 8f5f 	dmb	sy
   12514:	9104      	str	r1, [sp, #16]
   12516:	e7ff      	b.n	12518 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
   12518:	e00b      	b.n	12532 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   1251a:	f245 1008 	movw	r0, #20744	; 0x5108
   1251e:	f2c0 0002 	movt	r0, #2
   12522:	f245 02f8 	movw	r2, #20728	; 0x50f8
   12526:	f2c0 0202 	movt	r2, #2
   1252a:	2128      	movs	r1, #40	; 0x28
   1252c:	f003 fc28 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12530:	defe      	udf	#254	; 0xfe
   12532:	9804      	ldr	r0, [sp, #16]
   12534:	b006      	add	sp, #24
   12536:	4770      	bx	lr

00012538 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
   12538:	b081      	sub	sp, #4
   1253a:	9000      	str	r0, [sp, #0]
   1253c:	6800      	ldr	r0, [r0, #0]
   1253e:	b001      	add	sp, #4
   12540:	4770      	bx	lr

00012542 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
   12542:	b082      	sub	sp, #8
   12544:	9001      	str	r0, [sp, #4]
   12546:	6801      	ldr	r1, [r0, #0]
   12548:	6840      	ldr	r0, [r0, #4]
   1254a:	9000      	str	r0, [sp, #0]
   1254c:	4608      	mov	r0, r1
   1254e:	9900      	ldr	r1, [sp, #0]
   12550:	b002      	add	sp, #8
   12552:	4770      	bx	lr

00012554 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
   12554:	b580      	push	{r7, lr}
   12556:	b08c      	sub	sp, #48	; 0x30
   12558:	9101      	str	r1, [sp, #4]
   1255a:	9202      	str	r2, [sp, #8]
   1255c:	2100      	movs	r1, #0
   1255e:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   12562:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   12566:	2101      	movs	r1, #1
   12568:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   1256c:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   12570:	9901      	ldr	r1, [sp, #4]
   12572:	2900      	cmp	r1, #0
   12574:	460a      	mov	r2, r1
   12576:	bf18      	it	ne
   12578:	2201      	movne	r2, #1
   1257a:	2900      	cmp	r1, #0
   1257c:	9000      	str	r0, [sp, #0]
   1257e:	d001      	beq.n	12584 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
   12580:	e7ff      	b.n	12582 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
   12582:	e008      	b.n	12596 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
   12584:	2000      	movs	r0, #0
   12586:	9900      	ldr	r1, [sp, #0]
   12588:	6088      	str	r0, [r1, #8]
   1258a:	6048      	str	r0, [r1, #4]
   1258c:	6008      	str	r0, [r1, #0]
   1258e:	2002      	movs	r0, #2
   12590:	6008      	str	r0, [r1, #0]
   12592:	e021      	b.n	125d8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   12594:	defe      	udf	#254	; 0xfe
   12596:	2000      	movs	r0, #0
   12598:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   1259c:	9901      	ldr	r1, [sp, #4]
   1259e:	9a02      	ldr	r2, [sp, #8]
   125a0:	910a      	str	r1, [sp, #40]	; 0x28
   125a2:	920b      	str	r2, [sp, #44]	; 0x2c
   125a4:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   125a8:	9106      	str	r1, [sp, #24]
   125aa:	9207      	str	r2, [sp, #28]
   125ac:	9906      	ldr	r1, [sp, #24]
   125ae:	9a07      	ldr	r2, [sp, #28]
   125b0:	a803      	add	r0, sp, #12
   125b2:	f7ff ff5c 	bl	1246e <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
   125b6:	e7ff      	b.n	125b8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
   125b8:	9803      	ldr	r0, [sp, #12]
   125ba:	9904      	ldr	r1, [sp, #16]
   125bc:	9a05      	ldr	r2, [sp, #20]
   125be:	9b00      	ldr	r3, [sp, #0]
   125c0:	609a      	str	r2, [r3, #8]
   125c2:	6059      	str	r1, [r3, #4]
   125c4:	6018      	str	r0, [r3, #0]
   125c6:	e007      	b.n	125d8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   125c8:	9801      	ldr	r0, [sp, #4]
   125ca:	2800      	cmp	r0, #0
   125cc:	d10c      	bne.n	125e8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
   125ce:	e015      	b.n	125fc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
   125d0:	2000      	movs	r0, #0
   125d2:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   125d6:	e7f7      	b.n	125c8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   125d8:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   125dc:	07c0      	lsls	r0, r0, #31
   125de:	2800      	cmp	r0, #0
   125e0:	d1f6      	bne.n	125d0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
   125e2:	e7f1      	b.n	125c8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   125e4:	b00c      	add	sp, #48	; 0x30
   125e6:	bd80      	pop	{r7, pc}
   125e8:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   125ec:	07c0      	lsls	r0, r0, #31
   125ee:	2800      	cmp	r0, #0
   125f0:	d0f8      	beq.n	125e4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   125f2:	e7ff      	b.n	125f4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
   125f4:	2000      	movs	r0, #0
   125f6:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   125fa:	e7f3      	b.n	125e4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   125fc:	e7f2      	b.n	125e4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

000125fe <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>:
   125fe:	b081      	sub	sp, #4
   12600:	b001      	add	sp, #4
   12602:	4770      	bx	lr

00012604 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
   12604:	b5b0      	push	{r4, r5, r7, lr}
   12606:	b081      	sub	sp, #4
   12608:	9100      	str	r1, [sp, #0]
   1260a:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   1260e:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   12612:	b001      	add	sp, #4
   12614:	bdb0      	pop	{r4, r5, r7, pc}

00012616 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
   12616:	b580      	push	{r7, lr}
   12618:	b088      	sub	sp, #32
   1261a:	9106      	str	r1, [sp, #24]
   1261c:	680a      	ldr	r2, [r1, #0]
   1261e:	1e93      	subs	r3, r2, #2
   12620:	bf18      	it	ne
   12622:	2301      	movne	r3, #1
   12624:	2a02      	cmp	r2, #2
   12626:	9102      	str	r1, [sp, #8]
   12628:	9001      	str	r0, [sp, #4]
   1262a:	d001      	beq.n	12630 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
   1262c:	e7ff      	b.n	1262e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
   1262e:	e008      	b.n	12642 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
   12630:	2000      	movs	r0, #0
   12632:	9901      	ldr	r1, [sp, #4]
   12634:	6088      	str	r0, [r1, #8]
   12636:	6048      	str	r0, [r1, #4]
   12638:	6008      	str	r0, [r1, #0]
   1263a:	2002      	movs	r0, #2
   1263c:	6008      	str	r0, [r1, #0]
   1263e:	e00f      	b.n	12660 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   12640:	defe      	udf	#254	; 0xfe
   12642:	9802      	ldr	r0, [sp, #8]
   12644:	9007      	str	r0, [sp, #28]
   12646:	a803      	add	r0, sp, #12
   12648:	9902      	ldr	r1, [sp, #8]
   1264a:	f000 f9b5 	bl	129b8 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
   1264e:	e7ff      	b.n	12650 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
   12650:	9803      	ldr	r0, [sp, #12]
   12652:	9904      	ldr	r1, [sp, #16]
   12654:	9a05      	ldr	r2, [sp, #20]
   12656:	9b01      	ldr	r3, [sp, #4]
   12658:	609a      	str	r2, [r3, #8]
   1265a:	6059      	str	r1, [r3, #4]
   1265c:	6018      	str	r0, [r3, #0]
   1265e:	e7ff      	b.n	12660 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   12660:	b008      	add	sp, #32
   12662:	bd80      	pop	{r7, pc}

00012664 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
   12664:	b580      	push	{r7, lr}
   12666:	b086      	sub	sp, #24
   12668:	9004      	str	r0, [sp, #16]
   1266a:	6801      	ldr	r1, [r0, #0]
   1266c:	2900      	cmp	r1, #0
   1266e:	9001      	str	r0, [sp, #4]
   12670:	d001      	beq.n	12676 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
   12672:	e7ff      	b.n	12674 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
   12674:	e003      	b.n	1267e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
   12676:	2000      	movs	r0, #0
   12678:	9002      	str	r0, [sp, #8]
   1267a:	e00d      	b.n	12698 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   1267c:	defe      	udf	#254	; 0xfe
   1267e:	9801      	ldr	r0, [sp, #4]
   12680:	1d01      	adds	r1, r0, #4
   12682:	9105      	str	r1, [sp, #20]
   12684:	4608      	mov	r0, r1
   12686:	f7ff ff57 	bl	12538 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
   1268a:	9000      	str	r0, [sp, #0]
   1268c:	e7ff      	b.n	1268e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
   1268e:	9800      	ldr	r0, [sp, #0]
   12690:	9003      	str	r0, [sp, #12]
   12692:	2101      	movs	r1, #1
   12694:	9102      	str	r1, [sp, #8]
   12696:	e7ff      	b.n	12698 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   12698:	9802      	ldr	r0, [sp, #8]
   1269a:	9903      	ldr	r1, [sp, #12]
   1269c:	b006      	add	sp, #24
   1269e:	bd80      	pop	{r7, pc}

000126a0 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
   126a0:	b081      	sub	sp, #4
   126a2:	9000      	str	r0, [sp, #0]
        *self
   126a4:	6800      	ldr	r0, [r0, #0]
    }
   126a6:	b001      	add	sp, #4
   126a8:	4770      	bx	lr

000126aa <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
   126aa:	b580      	push	{r7, lr}
        RecordBuilder::new()
   126ac:	f000 f802 	bl	126b4 <_ZN3log13RecordBuilder3new17haca8312579858419E>
   126b0:	e7ff      	b.n	126b2 <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
   126b2:	bd80      	pop	{r7, pc}

000126b4 <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
   126b4:	b570      	push	{r4, r5, r6, lr}
   126b6:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
   126b8:	f245 1148 	movw	r1, #20808	; 0x5148
   126bc:	f2c0 0102 	movt	r1, #2
   126c0:	6809      	ldr	r1, [r1, #0]
   126c2:	466a      	mov	r2, sp
   126c4:	2300      	movs	r3, #0
   126c6:	6013      	str	r3, [r2, #0]
   126c8:	aa16      	add	r2, sp, #88	; 0x58
   126ca:	9004      	str	r0, [sp, #16]
   126cc:	4610      	mov	r0, r2
   126ce:	9103      	str	r1, [sp, #12]
   126d0:	461a      	mov	r2, r3
   126d2:	9b03      	ldr	r3, [sp, #12]
   126d4:	f7ff feaf 	bl	12436 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
   126d8:	e7ff      	b.n	126da <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
   126da:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
   126dc:	f000 f891 	bl	12802 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
   126e0:	e7ff      	b.n	126e2 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
   126e2:	a81c      	add	r0, sp, #112	; 0x70
   126e4:	a91f      	add	r1, sp, #124	; 0x7c
   126e6:	f000 f8a5 	bl	12834 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
   126ea:	e7ff      	b.n	126ec <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
   126ec:	2000      	movs	r0, #0
                module_path: None,
   126ee:	9024      	str	r0, [sp, #144]	; 0x90
   126f0:	9023      	str	r0, [sp, #140]	; 0x8c
   126f2:	9022      	str	r0, [sp, #136]	; 0x88
   126f4:	2102      	movs	r1, #2
   126f6:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
   126f8:	9027      	str	r0, [sp, #156]	; 0x9c
   126fa:	9026      	str	r0, [sp, #152]	; 0x98
   126fc:	9025      	str	r0, [sp, #148]	; 0x94
   126fe:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
   12700:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
   12702:	981c      	ldr	r0, [sp, #112]	; 0x70
   12704:	991d      	ldr	r1, [sp, #116]	; 0x74
   12706:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   12708:	9207      	str	r2, [sp, #28]
   1270a:	9106      	str	r1, [sp, #24]
   1270c:	9005      	str	r0, [sp, #20]
   1270e:	a805      	add	r0, sp, #20
   12710:	f100 010c 	add.w	r1, r0, #12
   12714:	aa16      	add	r2, sp, #88	; 0x58
   12716:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   1271a:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   1271e:	9922      	ldr	r1, [sp, #136]	; 0x88
   12720:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   12722:	9b24      	ldr	r3, [sp, #144]	; 0x90
   12724:	9310      	str	r3, [sp, #64]	; 0x40
   12726:	920f      	str	r2, [sp, #60]	; 0x3c
   12728:	910e      	str	r1, [sp, #56]	; 0x38
   1272a:	9925      	ldr	r1, [sp, #148]	; 0x94
   1272c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1272e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   12730:	9313      	str	r3, [sp, #76]	; 0x4c
   12732:	9212      	str	r2, [sp, #72]	; 0x48
   12734:	9111      	str	r1, [sp, #68]	; 0x44
   12736:	9928      	ldr	r1, [sp, #160]	; 0xa0
   12738:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1273a:	9114      	str	r1, [sp, #80]	; 0x50
   1273c:	9215      	str	r2, [sp, #84]	; 0x54
   1273e:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
   12740:	9904      	ldr	r1, [sp, #16]
   12742:	9002      	str	r0, [sp, #8]
   12744:	4608      	mov	r0, r1
   12746:	9902      	ldr	r1, [sp, #8]
   12748:	f009 fe26 	bl	1c398 <__aeabi_memcpy>
    }
   1274c:	b02a      	add	sp, #168	; 0xa8
   1274e:	bd70      	pop	{r4, r5, r6, pc}

00012750 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
   12750:	b5f0      	push	{r4, r5, r6, r7, lr}
   12752:	b087      	sub	sp, #28
   12754:	9006      	str	r0, [sp, #24]
   12756:	466a      	mov	r2, sp
        self.record.args = args;
   12758:	4613      	mov	r3, r2
   1275a:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
   1275e:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
   12762:	f100 010c 	add.w	r1, r0, #12
   12766:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   1276a:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
   1276e:	b007      	add	sp, #28
   12770:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012772 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
   12772:	b082      	sub	sp, #8
   12774:	9000      	str	r0, [sp, #0]
   12776:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
   12778:	6001      	str	r1, [r0, #0]
    }
   1277a:	b002      	add	sp, #8
   1277c:	4770      	bx	lr

0001277e <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
   1277e:	b083      	sub	sp, #12
   12780:	9000      	str	r0, [sp, #0]
   12782:	9101      	str	r1, [sp, #4]
   12784:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
   12786:	6041      	str	r1, [r0, #4]
   12788:	6082      	str	r2, [r0, #8]
    }
   1278a:	b003      	add	sp, #12
   1278c:	4770      	bx	lr

0001278e <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
   1278e:	b580      	push	{r7, lr}
   12790:	b088      	sub	sp, #32
   12792:	9005      	str	r0, [sp, #20]
   12794:	9106      	str	r1, [sp, #24]
   12796:	9207      	str	r2, [sp, #28]
   12798:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
   1279a:	9001      	str	r0, [sp, #4]
   1279c:	4618      	mov	r0, r3
   1279e:	f7ff fed9 	bl	12554 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   127a2:	e7ff      	b.n	127a4 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
   127a4:	9802      	ldr	r0, [sp, #8]
   127a6:	9903      	ldr	r1, [sp, #12]
   127a8:	9a04      	ldr	r2, [sp, #16]
   127aa:	9b01      	ldr	r3, [sp, #4]
   127ac:	62da      	str	r2, [r3, #44]	; 0x2c
   127ae:	6299      	str	r1, [r3, #40]	; 0x28
   127b0:	6258      	str	r0, [r3, #36]	; 0x24
    }
   127b2:	4618      	mov	r0, r3
   127b4:	b008      	add	sp, #32
   127b6:	bd80      	pop	{r7, pc}

000127b8 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
   127b8:	b580      	push	{r7, lr}
   127ba:	b088      	sub	sp, #32
   127bc:	9005      	str	r0, [sp, #20]
   127be:	9106      	str	r1, [sp, #24]
   127c0:	9207      	str	r2, [sp, #28]
   127c2:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
   127c4:	9001      	str	r0, [sp, #4]
   127c6:	4618      	mov	r0, r3
   127c8:	f7ff fec4 	bl	12554 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   127cc:	e7ff      	b.n	127ce <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
   127ce:	9802      	ldr	r0, [sp, #8]
   127d0:	9903      	ldr	r1, [sp, #12]
   127d2:	9a04      	ldr	r2, [sp, #16]
   127d4:	9b01      	ldr	r3, [sp, #4]
   127d6:	639a      	str	r2, [r3, #56]	; 0x38
   127d8:	6359      	str	r1, [r3, #52]	; 0x34
   127da:	6318      	str	r0, [r3, #48]	; 0x30
    }
   127dc:	4618      	mov	r0, r3
   127de:	b008      	add	sp, #32
   127e0:	bd80      	pop	{r7, pc}

000127e2 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
   127e2:	b083      	sub	sp, #12
   127e4:	9000      	str	r0, [sp, #0]
   127e6:	9101      	str	r1, [sp, #4]
   127e8:	9202      	str	r2, [sp, #8]
        self.record.line = line;
   127ea:	63c1      	str	r1, [r0, #60]	; 0x3c
   127ec:	6402      	str	r2, [r0, #64]	; 0x40
    }
   127ee:	b003      	add	sp, #12
   127f0:	4770      	bx	lr

000127f2 <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
   127f2:	b580      	push	{r7, lr}
   127f4:	b082      	sub	sp, #8
   127f6:	9101      	str	r1, [sp, #4]
        self.record.clone()
   127f8:	f000 f8e8 	bl	129cc <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
   127fc:	e7ff      	b.n	127fe <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
   127fe:	b002      	add	sp, #8
   12800:	bd80      	pop	{r7, pc}

00012802 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
   12802:	b580      	push	{r7, lr}
        MetadataBuilder::new()
   12804:	f000 f802 	bl	1280c <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
   12808:	e7ff      	b.n	1280a <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
   1280a:	bd80      	pop	{r7, pc}

0001280c <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
   1280c:	b084      	sub	sp, #16
   1280e:	2103      	movs	r1, #3
                level: Level::Info,
   12810:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
   12812:	9903      	ldr	r1, [sp, #12]
   12814:	9100      	str	r1, [sp, #0]
   12816:	f245 1130 	movw	r1, #20784	; 0x5130
   1281a:	f2c0 0102 	movt	r1, #2
   1281e:	9101      	str	r1, [sp, #4]
   12820:	2100      	movs	r1, #0
   12822:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
   12824:	9900      	ldr	r1, [sp, #0]
   12826:	9a01      	ldr	r2, [sp, #4]
   12828:	9b02      	ldr	r3, [sp, #8]
   1282a:	6083      	str	r3, [r0, #8]
   1282c:	6042      	str	r2, [r0, #4]
   1282e:	6001      	str	r1, [r0, #0]
    }
   12830:	b004      	add	sp, #16
   12832:	4770      	bx	lr

00012834 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
   12834:	b580      	push	{r7, lr}
   12836:	b082      	sub	sp, #8
   12838:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
   1283a:	f000 f91c 	bl	12a76 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   1283e:	e7ff      	b.n	12840 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
   12840:	b002      	add	sp, #8
   12842:	bd80      	pop	{r7, pc}

00012844 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
   12844:	b082      	sub	sp, #8
   12846:	9000      	str	r0, [sp, #0]
   12848:	9101      	str	r1, [sp, #4]
   1284a:	2000      	movs	r0, #0
    }
   1284c:	b002      	add	sp, #8
   1284e:	4770      	bx	lr

00012850 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
   12850:	b082      	sub	sp, #8
   12852:	9000      	str	r0, [sp, #0]
   12854:	9101      	str	r1, [sp, #4]
   12856:	b002      	add	sp, #8
   12858:	4770      	bx	lr

0001285a <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
   1285a:	b081      	sub	sp, #4
   1285c:	9000      	str	r0, [sp, #0]
   1285e:	b001      	add	sp, #4
   12860:	4770      	bx	lr

00012862 <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
   12862:	b580      	push	{r7, lr}
   12864:	b084      	sub	sp, #16
   12866:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   12868:	f88d 000f 	strb.w	r0, [sp, #15]
   1286c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   12870:	f644 2068 	movw	r0, #19048	; 0x4a68
   12874:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12878:	f7ff fe0c 	bl	12494 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
   1287c:	9000      	str	r0, [sp, #0]
   1287e:	e7ff      	b.n	12880 <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
   12880:	9800      	ldr	r0, [sp, #0]
   12882:	2802      	cmp	r0, #2
   12884:	d109      	bne.n	1289a <_ZN3log6logger17hf609e7cc1c031552E+0x38>
   12886:	e7ff      	b.n	12888 <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
   12888:	f240 00f0 	movw	r0, #240	; 0xf0
   1288c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12890:	6801      	ldr	r1, [r0, #0]
   12892:	6840      	ldr	r0, [r0, #4]
   12894:	9101      	str	r1, [sp, #4]
   12896:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   12898:	e00a      	b.n	128b0 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
   1289a:	f245 1064 	movw	r0, #20836	; 0x5164
   1289e:	f2c0 0002 	movt	r0, #2
   128a2:	9001      	str	r0, [sp, #4]
   128a4:	f245 104c 	movw	r0, #20812	; 0x514c
   128a8:	f2c0 0002 	movt	r0, #2
   128ac:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   128ae:	e7ff      	b.n	128b0 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
   128b0:	9801      	ldr	r0, [sp, #4]
   128b2:	9902      	ldr	r1, [sp, #8]
        }
    }
}
   128b4:	b004      	add	sp, #16
   128b6:	bd80      	pop	{r7, pc}

000128b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
   128b8:	b570      	push	{r4, r5, r6, lr}
   128ba:	b0ca      	sub	sp, #296	; 0x128
   128bc:	9141      	str	r1, [sp, #260]	; 0x104
   128be:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
   128c0:	6813      	ldr	r3, [r2, #0]
   128c2:	f8d2 c004 	ldr.w	ip, [r2, #4]
   128c6:	9343      	str	r3, [sp, #268]	; 0x10c
   128c8:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
   128cc:	f8d2 e008 	ldr.w	lr, [r2, #8]
   128d0:	68d4      	ldr	r4, [r2, #12]
   128d2:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
   128d6:	9446      	str	r4, [sp, #280]	; 0x118
   128d8:	6915      	ldr	r5, [r2, #16]
   128da:	6956      	ldr	r6, [r2, #20]
   128dc:	9547      	str	r5, [sp, #284]	; 0x11c
   128de:	9648      	str	r6, [sp, #288]	; 0x120
   128e0:	6992      	ldr	r2, [r2, #24]
   128e2:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
   128e4:	9112      	str	r1, [sp, #72]	; 0x48
   128e6:	9011      	str	r0, [sp, #68]	; 0x44
   128e8:	9310      	str	r3, [sp, #64]	; 0x40
   128ea:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   128ee:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   128f2:	940d      	str	r4, [sp, #52]	; 0x34
   128f4:	950c      	str	r5, [sp, #48]	; 0x30
   128f6:	960b      	str	r6, [sp, #44]	; 0x2c
   128f8:	920a      	str	r2, [sp, #40]	; 0x28
   128fa:	f7ff ffb2 	bl	12862 <_ZN3log6logger17hf609e7cc1c031552E>
   128fe:	9009      	str	r0, [sp, #36]	; 0x24
   12900:	9108      	str	r1, [sp, #32]
   12902:	e7ff      	b.n	12904 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
   12904:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
   12906:	f7ff fed0 	bl	126aa <_ZN3log6Record7builder17hde62ab0132265febE>
   1290a:	e7ff      	b.n	1290c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
   1290c:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
   1290e:	4601      	mov	r1, r0
   12910:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12912:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   12916:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   1291a:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
   1291c:	9007      	str	r0, [sp, #28]
   1291e:	4608      	mov	r0, r1
   12920:	9907      	ldr	r1, [sp, #28]
   12922:	f7ff ff15 	bl	12750 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
   12926:	9006      	str	r0, [sp, #24]
   12928:	e7ff      	b.n	1292a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
   1292a:	9806      	ldr	r0, [sp, #24]
   1292c:	9912      	ldr	r1, [sp, #72]	; 0x48
   1292e:	f7ff ff20 	bl	12772 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
   12932:	9005      	str	r0, [sp, #20]
   12934:	e7ff      	b.n	12936 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
   12936:	9805      	ldr	r0, [sp, #20]
   12938:	9910      	ldr	r1, [sp, #64]	; 0x40
   1293a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1293c:	f7ff ff1f 	bl	1277e <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
   12940:	9004      	str	r0, [sp, #16]
   12942:	e7ff      	b.n	12944 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
   12944:	980e      	ldr	r0, [sp, #56]	; 0x38
   12946:	903b      	str	r0, [sp, #236]	; 0xec
   12948:	990d      	ldr	r1, [sp, #52]	; 0x34
   1294a:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
   1294c:	993b      	ldr	r1, [sp, #236]	; 0xec
   1294e:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   12950:	9804      	ldr	r0, [sp, #16]
   12952:	f7ff ff1c 	bl	1278e <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
   12956:	9003      	str	r0, [sp, #12]
   12958:	e7ff      	b.n	1295a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
   1295a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1295c:	903d      	str	r0, [sp, #244]	; 0xf4
   1295e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12960:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
   12962:	993d      	ldr	r1, [sp, #244]	; 0xf4
   12964:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
   12966:	9803      	ldr	r0, [sp, #12]
   12968:	f7ff ff26 	bl	127b8 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
   1296c:	9002      	str	r0, [sp, #8]
   1296e:	e7ff      	b.n	12970 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
   12970:	980a      	ldr	r0, [sp, #40]	; 0x28
   12972:	9040      	str	r0, [sp, #256]	; 0x100
   12974:	2101      	movs	r1, #1
   12976:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
   12978:	993f      	ldr	r1, [sp, #252]	; 0xfc
   1297a:	9a40      	ldr	r2, [sp, #256]	; 0x100
   1297c:	9802      	ldr	r0, [sp, #8]
   1297e:	f7ff ff30 	bl	127e2 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
   12982:	9001      	str	r0, [sp, #4]
   12984:	e7ff      	b.n	12986 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
   12986:	a813      	add	r0, sp, #76	; 0x4c
   12988:	9901      	ldr	r1, [sp, #4]
   1298a:	f7ff ff32 	bl	127f2 <_ZN3log13RecordBuilder5build17h83529556a009112eE>
   1298e:	e7ff      	b.n	12990 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
   12990:	9808      	ldr	r0, [sp, #32]
   12992:	6901      	ldr	r1, [r0, #16]
   12994:	aa13      	add	r2, sp, #76	; 0x4c
   12996:	9809      	ldr	r0, [sp, #36]	; 0x24
   12998:	9100      	str	r1, [sp, #0]
   1299a:	4611      	mov	r1, r2
   1299c:	9a00      	ldr	r2, [sp, #0]
   1299e:	4790      	blx	r2
   129a0:	e7ff      	b.n	129a2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
   129a2:	b04a      	add	sp, #296	; 0x128
   129a4:	bd70      	pop	{r4, r5, r6, pc}

000129a6 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
   129a6:	b082      	sub	sp, #8
   129a8:	9100      	str	r1, [sp, #0]
   129aa:	9201      	str	r2, [sp, #4]
   129ac:	6041      	str	r1, [r0, #4]
   129ae:	6082      	str	r2, [r0, #8]
   129b0:	2100      	movs	r1, #0
   129b2:	6001      	str	r1, [r0, #0]
   129b4:	b002      	add	sp, #8
   129b6:	4770      	bx	lr

000129b8 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   129b8:	b081      	sub	sp, #4
   129ba:	9100      	str	r1, [sp, #0]
   129bc:	680a      	ldr	r2, [r1, #0]
   129be:	684b      	ldr	r3, [r1, #4]
   129c0:	6889      	ldr	r1, [r1, #8]
   129c2:	6081      	str	r1, [r0, #8]
   129c4:	6043      	str	r3, [r0, #4]
   129c6:	6002      	str	r2, [r0, #0]
   129c8:	b001      	add	sp, #4
   129ca:	4770      	bx	lr

000129cc <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
   129cc:	b570      	push	{r4, r5, r6, lr}
   129ce:	b09c      	sub	sp, #112	; 0x70
   129d0:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
   129d2:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
   129d4:	f101 020c 	add.w	r2, r1, #12
   129d8:	4613      	mov	r3, r2
   129da:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
   129dc:	f101 0224 	add.w	r2, r1, #36	; 0x24
   129e0:	4694      	mov	ip, r2
   129e2:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
   129e4:	f101 0230 	add.w	r2, r1, #48	; 0x30
   129e8:	4696      	mov	lr, r2
   129ea:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
   129ec:	f101 023c 	add.w	r2, r1, #60	; 0x3c
   129f0:	4614      	mov	r4, r2
   129f2:	921b      	str	r2, [sp, #108]	; 0x6c
   129f4:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
   129f6:	9006      	str	r0, [sp, #24]
   129f8:	4610      	mov	r0, r2
   129fa:	9305      	str	r3, [sp, #20]
   129fc:	f8cd c010 	str.w	ip, [sp, #16]
   12a00:	f8cd e00c 	str.w	lr, [sp, #12]
   12a04:	9402      	str	r4, [sp, #8]
   12a06:	f000 f836 	bl	12a76 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   12a0a:	e7ff      	b.n	12a0c <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
   12a0c:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
   12a0e:	9905      	ldr	r1, [sp, #20]
   12a10:	f7ff fdf8 	bl	12604 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
   12a14:	e7ff      	b.n	12a16 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
   12a16:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
   12a18:	9904      	ldr	r1, [sp, #16]
   12a1a:	f7ff fdfc 	bl	12616 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   12a1e:	e7ff      	b.n	12a20 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
   12a20:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
   12a22:	9903      	ldr	r1, [sp, #12]
   12a24:	f7ff fdf7 	bl	12616 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   12a28:	e7ff      	b.n	12a2a <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
   12a2a:	9802      	ldr	r0, [sp, #8]
   12a2c:	f7ff fe1a 	bl	12664 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
   12a30:	9001      	str	r0, [sp, #4]
   12a32:	9100      	str	r1, [sp, #0]
   12a34:	e7ff      	b.n	12a36 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
   12a36:	9807      	ldr	r0, [sp, #28]
   12a38:	9908      	ldr	r1, [sp, #32]
   12a3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12a3c:	9b06      	ldr	r3, [sp, #24]
   12a3e:	609a      	str	r2, [r3, #8]
   12a40:	6059      	str	r1, [r3, #4]
   12a42:	6018      	str	r0, [r3, #0]
   12a44:	f103 000c 	add.w	r0, r3, #12
   12a48:	a90a      	add	r1, sp, #40	; 0x28
   12a4a:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
   12a4e:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
   12a52:	9810      	ldr	r0, [sp, #64]	; 0x40
   12a54:	9911      	ldr	r1, [sp, #68]	; 0x44
   12a56:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12a58:	62da      	str	r2, [r3, #44]	; 0x2c
   12a5a:	6299      	str	r1, [r3, #40]	; 0x28
   12a5c:	6258      	str	r0, [r3, #36]	; 0x24
   12a5e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12a60:	9914      	ldr	r1, [sp, #80]	; 0x50
   12a62:	9a15      	ldr	r2, [sp, #84]	; 0x54
   12a64:	639a      	str	r2, [r3, #56]	; 0x38
   12a66:	6359      	str	r1, [r3, #52]	; 0x34
   12a68:	6318      	str	r0, [r3, #48]	; 0x30
   12a6a:	9801      	ldr	r0, [sp, #4]
   12a6c:	63d8      	str	r0, [r3, #60]	; 0x3c
   12a6e:	9900      	ldr	r1, [sp, #0]
   12a70:	6419      	str	r1, [r3, #64]	; 0x40
   12a72:	b01c      	add	sp, #112	; 0x70
   12a74:	bd70      	pop	{r4, r5, r6, pc}

00012a76 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   12a76:	b580      	push	{r7, lr}
   12a78:	b088      	sub	sp, #32
   12a7a:	9105      	str	r1, [sp, #20]
    level: Level,
   12a7c:	9106      	str	r1, [sp, #24]
    target: &'a str,
   12a7e:	1d0a      	adds	r2, r1, #4
   12a80:	4613      	mov	r3, r2
   12a82:	9207      	str	r2, [sp, #28]
    level: Level,
   12a84:	9004      	str	r0, [sp, #16]
   12a86:	4608      	mov	r0, r1
   12a88:	9303      	str	r3, [sp, #12]
   12a8a:	f7ff fe09 	bl	126a0 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
   12a8e:	9002      	str	r0, [sp, #8]
   12a90:	e7ff      	b.n	12a92 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
   12a92:	9803      	ldr	r0, [sp, #12]
   12a94:	f7ff fd55 	bl	12542 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
   12a98:	9001      	str	r0, [sp, #4]
   12a9a:	9100      	str	r1, [sp, #0]
   12a9c:	e7ff      	b.n	12a9e <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   12a9e:	9802      	ldr	r0, [sp, #8]
   12aa0:	9904      	ldr	r1, [sp, #16]
   12aa2:	6008      	str	r0, [r1, #0]
   12aa4:	9a01      	ldr	r2, [sp, #4]
   12aa6:	604a      	str	r2, [r1, #4]
   12aa8:	9b00      	ldr	r3, [sp, #0]
   12aaa:	608b      	str	r3, [r1, #8]
   12aac:	b008      	add	sp, #32
   12aae:	bd80      	pop	{r7, pc}

00012ab0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   12ab0:	b580      	push	{r7, lr}
   12ab2:	b084      	sub	sp, #16
   12ab4:	9002      	str	r0, [sp, #8]
   12ab6:	9103      	str	r1, [sp, #12]
   12ab8:	6800      	ldr	r0, [r0, #0]
   12aba:	f000 f81c 	bl	12af6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   12abe:	9001      	str	r0, [sp, #4]
   12ac0:	e7ff      	b.n	12ac2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   12ac2:	9801      	ldr	r0, [sp, #4]
   12ac4:	f000 0001 	and.w	r0, r0, #1
   12ac8:	b004      	add	sp, #16
   12aca:	bd80      	pop	{r7, pc}

00012acc <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   12acc:	b089      	sub	sp, #36	; 0x24
   12ace:	9005      	str	r0, [sp, #20]
   12ad0:	9106      	str	r1, [sp, #24]
   12ad2:	9107      	str	r1, [sp, #28]
   12ad4:	9907      	ldr	r1, [sp, #28]
   12ad6:	9002      	str	r0, [sp, #8]
   12ad8:	9101      	str	r1, [sp, #4]
   12ada:	e7ff      	b.n	12adc <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   12adc:	9802      	ldr	r0, [sp, #8]
   12ade:	9008      	str	r0, [sp, #32]
   12ae0:	9908      	ldr	r1, [sp, #32]
   12ae2:	9100      	str	r1, [sp, #0]
   12ae4:	e7ff      	b.n	12ae6 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   12ae6:	9800      	ldr	r0, [sp, #0]
   12ae8:	9003      	str	r0, [sp, #12]
   12aea:	9901      	ldr	r1, [sp, #4]
   12aec:	9104      	str	r1, [sp, #16]
   12aee:	9803      	ldr	r0, [sp, #12]
   12af0:	9904      	ldr	r1, [sp, #16]
   12af2:	b009      	add	sp, #36	; 0x24
   12af4:	4770      	bx	lr

00012af6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   12af6:	b580      	push	{r7, lr}
   12af8:	b088      	sub	sp, #32
   12afa:	9006      	str	r0, [sp, #24]
   12afc:	9107      	str	r1, [sp, #28]
   12afe:	9004      	str	r0, [sp, #16]
   12b00:	4608      	mov	r0, r1
   12b02:	9103      	str	r1, [sp, #12]
   12b04:	f003 ffdd 	bl	16ac2 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12b08:	9002      	str	r0, [sp, #8]
   12b0a:	e7ff      	b.n	12b0c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   12b0c:	9802      	ldr	r0, [sp, #8]
   12b0e:	07c1      	lsls	r1, r0, #31
   12b10:	2900      	cmp	r1, #0
   12b12:	d105      	bne.n	12b20 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   12b14:	e7ff      	b.n	12b16 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   12b16:	9803      	ldr	r0, [sp, #12]
   12b18:	f003 ffd7 	bl	16aca <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12b1c:	9001      	str	r0, [sp, #4]
   12b1e:	e007      	b.n	12b30 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   12b20:	9804      	ldr	r0, [sp, #16]
   12b22:	9903      	ldr	r1, [sp, #12]
   12b24:	f004 fd98 	bl	17658 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12b28:	f88d 0017 	strb.w	r0, [sp, #23]
   12b2c:	e7ff      	b.n	12b2e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   12b2e:	e015      	b.n	12b5c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   12b30:	9801      	ldr	r0, [sp, #4]
   12b32:	07c1      	lsls	r1, r0, #31
   12b34:	2900      	cmp	r1, #0
   12b36:	d107      	bne.n	12b48 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   12b38:	e7ff      	b.n	12b3a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   12b3a:	9804      	ldr	r0, [sp, #16]
   12b3c:	9903      	ldr	r1, [sp, #12]
   12b3e:	f004 ff18 	bl	17972 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   12b42:	f88d 0017 	strb.w	r0, [sp, #23]
   12b46:	e007      	b.n	12b58 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   12b48:	9804      	ldr	r0, [sp, #16]
   12b4a:	9903      	ldr	r1, [sp, #12]
   12b4c:	f004 fdef 	bl	1772e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   12b50:	f88d 0017 	strb.w	r0, [sp, #23]
   12b54:	e7ff      	b.n	12b56 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   12b56:	e000      	b.n	12b5a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   12b58:	e7ff      	b.n	12b5a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   12b5a:	e7ff      	b.n	12b5c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   12b5c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12b60:	b008      	add	sp, #32
   12b62:	bd80      	pop	{r7, pc}

00012b64 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   12b64:	b086      	sub	sp, #24
   12b66:	9004      	str	r0, [sp, #16]
   12b68:	9105      	str	r1, [sp, #20]
   12b6a:	9002      	str	r0, [sp, #8]
   12b6c:	9103      	str	r1, [sp, #12]
   12b6e:	9802      	ldr	r0, [sp, #8]
   12b70:	9903      	ldr	r1, [sp, #12]
   12b72:	9000      	str	r0, [sp, #0]
   12b74:	9101      	str	r1, [sp, #4]
   12b76:	9800      	ldr	r0, [sp, #0]
   12b78:	9901      	ldr	r1, [sp, #4]
   12b7a:	b006      	add	sp, #24
   12b7c:	4770      	bx	lr

00012b7e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   12b7e:	b580      	push	{r7, lr}
   12b80:	b084      	sub	sp, #16
   12b82:	9002      	str	r0, [sp, #8]
   12b84:	9103      	str	r1, [sp, #12]
   12b86:	f000 f805 	bl	12b94 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   12b8a:	9001      	str	r0, [sp, #4]
   12b8c:	e7ff      	b.n	12b8e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   12b8e:	9801      	ldr	r0, [sp, #4]
   12b90:	b004      	add	sp, #16
   12b92:	bd80      	pop	{r7, pc}

00012b94 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   12b94:	b084      	sub	sp, #16
   12b96:	9001      	str	r0, [sp, #4]
   12b98:	9102      	str	r1, [sp, #8]
   12b9a:	4408      	add	r0, r1
   12b9c:	9003      	str	r0, [sp, #12]
   12b9e:	9803      	ldr	r0, [sp, #12]
   12ba0:	9000      	str	r0, [sp, #0]
   12ba2:	e7ff      	b.n	12ba4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   12ba4:	9800      	ldr	r0, [sp, #0]
   12ba6:	b004      	add	sp, #16
   12ba8:	4770      	bx	lr

00012baa <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   12baa:	b580      	push	{r7, lr}
   12bac:	b084      	sub	sp, #16
   12bae:	9002      	str	r0, [sp, #8]
   12bb0:	9103      	str	r1, [sp, #12]
   12bb2:	f7ff ffd7 	bl	12b64 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   12bb6:	9001      	str	r0, [sp, #4]
   12bb8:	9100      	str	r1, [sp, #0]
   12bba:	e7ff      	b.n	12bbc <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   12bbc:	9801      	ldr	r0, [sp, #4]
   12bbe:	9900      	ldr	r1, [sp, #0]
   12bc0:	b004      	add	sp, #16
   12bc2:	bd80      	pop	{r7, pc}

00012bc4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   12bc4:	b084      	sub	sp, #16
   12bc6:	9002      	str	r0, [sp, #8]
   12bc8:	9103      	str	r1, [sp, #12]
   12bca:	9000      	str	r0, [sp, #0]
   12bcc:	9101      	str	r1, [sp, #4]
   12bce:	9801      	ldr	r0, [sp, #4]
   12bd0:	b004      	add	sp, #16
   12bd2:	4770      	bx	lr

00012bd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   12bd4:	b082      	sub	sp, #8
   12bd6:	9000      	str	r0, [sp, #0]
   12bd8:	9101      	str	r1, [sp, #4]
   12bda:	b002      	add	sp, #8
   12bdc:	4770      	bx	lr

00012bde <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
   12bde:	b083      	sub	sp, #12
   12be0:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
   12be2:	9002      	str	r0, [sp, #8]
   12be4:	9802      	ldr	r0, [sp, #8]
   12be6:	9000      	str	r0, [sp, #0]
   12be8:	e7ff      	b.n	12bea <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
   12bea:	9800      	ldr	r0, [sp, #0]
   12bec:	b003      	add	sp, #12
   12bee:	4770      	bx	lr

00012bf0 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
   12bf0:	b081      	sub	sp, #4
   12bf2:	f06f 000c 	mvn.w	r0, #12
        }
   12bf6:	b001      	add	sp, #4
   12bf8:	4770      	bx	lr

00012bfa <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
   12bfa:	b082      	sub	sp, #8
   12bfc:	9000      	str	r0, [sp, #0]
   12bfe:	9101      	str	r1, [sp, #4]
   12c00:	2000      	movs	r0, #0
        }
   12c02:	b002      	add	sp, #8
   12c04:	4770      	bx	lr

00012c06 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   12c06:	b082      	sub	sp, #8
   12c08:	9000      	str	r0, [sp, #0]
   12c0a:	9101      	str	r1, [sp, #4]
   12c0c:	7800      	ldrb	r0, [r0, #0]
   12c0e:	7809      	ldrb	r1, [r1, #0]
   12c10:	1a40      	subs	r0, r0, r1
   12c12:	fab0 f080 	clz	r0, r0
   12c16:	0940      	lsrs	r0, r0, #5
   12c18:	b002      	add	sp, #8
   12c1a:	4770      	bx	lr

00012c1c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
   12c1c:	b580      	push	{r7, lr}
   12c1e:	b084      	sub	sp, #16
   12c20:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   12c22:	f002 fd1e 	bl	15662 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>
   12c26:	9002      	str	r0, [sp, #8]
   12c28:	9101      	str	r1, [sp, #4]
   12c2a:	e7ff      	b.n	12c2c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E+0x10>
    }
   12c2c:	9802      	ldr	r0, [sp, #8]
   12c2e:	9901      	ldr	r1, [sp, #4]
   12c30:	b004      	add	sp, #16
   12c32:	bd80      	pop	{r7, pc}

00012c34 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   12c34:	b580      	push	{r7, lr}
   12c36:	b084      	sub	sp, #16
   12c38:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   12c3a:	f002 fd27 	bl	1568c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   12c3e:	9002      	str	r0, [sp, #8]
   12c40:	9101      	str	r1, [sp, #4]
   12c42:	e7ff      	b.n	12c44 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   12c44:	9802      	ldr	r0, [sp, #8]
   12c46:	9901      	ldr	r1, [sp, #4]
   12c48:	b004      	add	sp, #16
   12c4a:	bd80      	pop	{r7, pc}

00012c4c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   12c4c:	b580      	push	{r7, lr}
   12c4e:	b084      	sub	sp, #16
   12c50:	9001      	str	r0, [sp, #4]
   12c52:	9102      	str	r1, [sp, #8]
   12c54:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   12c56:	f002 fc66 	bl	15526 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>
   12c5a:	9000      	str	r0, [sp, #0]
   12c5c:	e7ff      	b.n	12c5e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E+0x12>
    }
   12c5e:	9800      	ldr	r0, [sp, #0]
   12c60:	f000 0001 	and.w	r0, r0, #1
   12c64:	b004      	add	sp, #16
   12c66:	bd80      	pop	{r7, pc}

00012c68 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   12c68:	b580      	push	{r7, lr}
   12c6a:	b086      	sub	sp, #24
   12c6c:	460a      	mov	r2, r1
   12c6e:	9004      	str	r0, [sp, #16]
   12c70:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   12c74:	9203      	str	r2, [sp, #12]
   12c76:	f002 fcb9 	bl	155ec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   12c7a:	9002      	str	r0, [sp, #8]
   12c7c:	9101      	str	r1, [sp, #4]
   12c7e:	e7ff      	b.n	12c80 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   12c80:	9802      	ldr	r0, [sp, #8]
   12c82:	f000 0001 	and.w	r0, r0, #1
   12c86:	9901      	ldr	r1, [sp, #4]
   12c88:	b006      	add	sp, #24
   12c8a:	bd80      	pop	{r7, pc}

00012c8c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   12c8c:	b580      	push	{r7, lr}
   12c8e:	b082      	sub	sp, #8
   12c90:	9001      	str	r0, [sp, #4]
        self.0.clear()
   12c92:	f002 fcd4 	bl	1563e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   12c96:	e7ff      	b.n	12c98 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   12c98:	b002      	add	sp, #8
   12c9a:	bd80      	pop	{r7, pc}

00012c9c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>:
    pub fn clear(&mut self) {
   12c9c:	b580      	push	{r7, lr}
   12c9e:	b082      	sub	sp, #8
   12ca0:	9001      	str	r0, [sp, #4]
        self.0.clear()
   12ca2:	f002 fcd5 	bl	15650 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>
   12ca6:	e7ff      	b.n	12ca8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E+0xc>
    }
   12ca8:	b002      	add	sp, #8
   12caa:	bd80      	pop	{r7, pc}

00012cac <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>:
    pub fn capacity(&self) -> usize {
   12cac:	b580      	push	{r7, lr}
   12cae:	b082      	sub	sp, #8
   12cb0:	9001      	str	r0, [sp, #4]
        self.0.capacity()
   12cb2:	f002 fd0a 	bl	156ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   12cb6:	9000      	str	r0, [sp, #0]
   12cb8:	e7ff      	b.n	12cba <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E+0xe>
    }
   12cba:	9800      	ldr	r0, [sp, #0]
   12cbc:	b002      	add	sp, #8
   12cbe:	bd80      	pop	{r7, pc}

00012cc0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
   12cc0:	b081      	sub	sp, #4
   12cc2:	9000      	str	r0, [sp, #0]
   12cc4:	b001      	add	sp, #4
   12cc6:	4770      	bx	lr

00012cc8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   12cc8:	b580      	push	{r7, lr}
   12cca:	b088      	sub	sp, #32
   12ccc:	9006      	str	r0, [sp, #24]
   12cce:	9107      	str	r1, [sp, #28]
   12cd0:	9004      	str	r0, [sp, #16]
   12cd2:	4608      	mov	r0, r1
   12cd4:	9103      	str	r1, [sp, #12]
   12cd6:	f003 fef4 	bl	16ac2 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12cda:	9002      	str	r0, [sp, #8]
   12cdc:	e7ff      	b.n	12cde <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   12cde:	9802      	ldr	r0, [sp, #8]
   12ce0:	07c1      	lsls	r1, r0, #31
   12ce2:	2900      	cmp	r1, #0
   12ce4:	d105      	bne.n	12cf2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   12ce6:	e7ff      	b.n	12ce8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   12ce8:	9803      	ldr	r0, [sp, #12]
   12cea:	f003 feee 	bl	16aca <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12cee:	9001      	str	r0, [sp, #4]
   12cf0:	e007      	b.n	12d02 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   12cf2:	9804      	ldr	r0, [sp, #16]
   12cf4:	9903      	ldr	r1, [sp, #12]
   12cf6:	f004 fbf2 	bl	174de <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   12cfa:	f88d 0017 	strb.w	r0, [sp, #23]
   12cfe:	e7ff      	b.n	12d00 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   12d00:	e015      	b.n	12d2e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   12d02:	9801      	ldr	r0, [sp, #4]
   12d04:	07c1      	lsls	r1, r0, #31
   12d06:	2900      	cmp	r1, #0
   12d08:	d107      	bne.n	12d1a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   12d0a:	e7ff      	b.n	12d0c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   12d0c:	9804      	ldr	r0, [sp, #16]
   12d0e:	9903      	ldr	r1, [sp, #12]
   12d10:	f004 fd78 	bl	17804 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   12d14:	f88d 0017 	strb.w	r0, [sp, #23]
   12d18:	e007      	b.n	12d2a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   12d1a:	9804      	ldr	r0, [sp, #16]
   12d1c:	9903      	ldr	r1, [sp, #12]
   12d1e:	f004 fc0d 	bl	1753c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   12d22:	f88d 0017 	strb.w	r0, [sp, #23]
   12d26:	e7ff      	b.n	12d28 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   12d28:	e000      	b.n	12d2c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   12d2a:	e7ff      	b.n	12d2c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   12d2c:	e7ff      	b.n	12d2e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   12d2e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12d32:	b008      	add	sp, #32
   12d34:	bd80      	pop	{r7, pc}

00012d36 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   12d36:	b580      	push	{r7, lr}
   12d38:	b088      	sub	sp, #32
   12d3a:	9006      	str	r0, [sp, #24]
   12d3c:	9107      	str	r1, [sp, #28]
   12d3e:	9004      	str	r0, [sp, #16]
   12d40:	4608      	mov	r0, r1
   12d42:	9103      	str	r1, [sp, #12]
   12d44:	f003 febd 	bl	16ac2 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12d48:	9002      	str	r0, [sp, #8]
   12d4a:	e7ff      	b.n	12d4c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   12d4c:	9802      	ldr	r0, [sp, #8]
   12d4e:	07c1      	lsls	r1, r0, #31
   12d50:	2900      	cmp	r1, #0
   12d52:	d105      	bne.n	12d60 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   12d54:	e7ff      	b.n	12d56 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   12d56:	9803      	ldr	r0, [sp, #12]
   12d58:	f003 feb7 	bl	16aca <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12d5c:	9001      	str	r0, [sp, #4]
   12d5e:	e007      	b.n	12d70 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   12d60:	9804      	ldr	r0, [sp, #16]
   12d62:	9903      	ldr	r1, [sp, #12]
   12d64:	f004 fc78 	bl	17658 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12d68:	f88d 0017 	strb.w	r0, [sp, #23]
   12d6c:	e7ff      	b.n	12d6e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   12d6e:	e015      	b.n	12d9c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   12d70:	9801      	ldr	r0, [sp, #4]
   12d72:	07c1      	lsls	r1, r0, #31
   12d74:	2900      	cmp	r1, #0
   12d76:	d107      	bne.n	12d88 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   12d78:	e7ff      	b.n	12d7a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   12d7a:	9804      	ldr	r0, [sp, #16]
   12d7c:	9903      	ldr	r1, [sp, #12]
   12d7e:	f004 fd7e 	bl	1787e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   12d82:	f88d 0017 	strb.w	r0, [sp, #23]
   12d86:	e007      	b.n	12d98 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   12d88:	9804      	ldr	r0, [sp, #16]
   12d8a:	9903      	ldr	r1, [sp, #12]
   12d8c:	f004 fccf 	bl	1772e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   12d90:	f88d 0017 	strb.w	r0, [sp, #23]
   12d94:	e7ff      	b.n	12d96 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   12d96:	e000      	b.n	12d9a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   12d98:	e7ff      	b.n	12d9a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   12d9a:	e7ff      	b.n	12d9c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   12d9c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12da0:	b008      	add	sp, #32
   12da2:	bd80      	pop	{r7, pc}

00012da4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   12da4:	b580      	push	{r7, lr}
   12da6:	b088      	sub	sp, #32
   12da8:	9006      	str	r0, [sp, #24]
   12daa:	9107      	str	r1, [sp, #28]
   12dac:	9004      	str	r0, [sp, #16]
   12dae:	4608      	mov	r0, r1
   12db0:	9103      	str	r1, [sp, #12]
   12db2:	f003 fe86 	bl	16ac2 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12db6:	9002      	str	r0, [sp, #8]
   12db8:	e7ff      	b.n	12dba <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   12dba:	9802      	ldr	r0, [sp, #8]
   12dbc:	07c1      	lsls	r1, r0, #31
   12dbe:	2900      	cmp	r1, #0
   12dc0:	d105      	bne.n	12dce <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   12dc2:	e7ff      	b.n	12dc4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   12dc4:	9803      	ldr	r0, [sp, #12]
   12dc6:	f003 fe80 	bl	16aca <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12dca:	9001      	str	r0, [sp, #4]
   12dcc:	e007      	b.n	12dde <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   12dce:	9804      	ldr	r0, [sp, #16]
   12dd0:	9903      	ldr	r1, [sp, #12]
   12dd2:	f004 fc41 	bl	17658 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12dd6:	f88d 0017 	strb.w	r0, [sp, #23]
   12dda:	e7ff      	b.n	12ddc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   12ddc:	e015      	b.n	12e0a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   12dde:	9801      	ldr	r0, [sp, #4]
   12de0:	07c1      	lsls	r1, r0, #31
   12de2:	2900      	cmp	r1, #0
   12de4:	d107      	bne.n	12df6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   12de6:	e7ff      	b.n	12de8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   12de8:	9804      	ldr	r0, [sp, #16]
   12dea:	9903      	ldr	r1, [sp, #12]
   12dec:	f004 fdc1 	bl	17972 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   12df0:	f88d 0017 	strb.w	r0, [sp, #23]
   12df4:	e007      	b.n	12e06 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   12df6:	9804      	ldr	r0, [sp, #16]
   12df8:	9903      	ldr	r1, [sp, #12]
   12dfa:	f004 fc98 	bl	1772e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   12dfe:	f88d 0017 	strb.w	r0, [sp, #23]
   12e02:	e7ff      	b.n	12e04 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   12e04:	e000      	b.n	12e08 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   12e06:	e7ff      	b.n	12e08 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   12e08:	e7ff      	b.n	12e0a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   12e0a:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12e0e:	b008      	add	sp, #32
   12e10:	bd80      	pop	{r7, pc}

00012e12 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   12e12:	b580      	push	{r7, lr}
   12e14:	b084      	sub	sp, #16
   12e16:	9002      	str	r0, [sp, #8]
   12e18:	9103      	str	r1, [sp, #12]
   12e1a:	6800      	ldr	r0, [r0, #0]
   12e1c:	6809      	ldr	r1, [r1, #0]
   12e1e:	f7ff fef2 	bl	12c06 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   12e22:	9001      	str	r0, [sp, #4]
   12e24:	e7ff      	b.n	12e26 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   12e26:	9801      	ldr	r0, [sp, #4]
   12e28:	f000 0001 	and.w	r0, r0, #1
   12e2c:	b004      	add	sp, #16
   12e2e:	bd80      	pop	{r7, pc}

00012e30 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   12e30:	b5b0      	push	{r4, r5, r7, lr}
   12e32:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   12e36:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   12e38:	f005 fc7c 	bl	18734 <hal_spi_disable>
   12e3c:	e7ff      	b.n	12e3e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   12e3e:	f240 01f8 	movw	r1, #248	; 0xf8
   12e42:	f2c2 0100 	movt	r1, #8192	; 0x2000
   12e46:	2000      	movs	r0, #0
   12e48:	f005 fc32 	bl	186b0 <hal_spi_config>
   12e4c:	906a      	str	r0, [sp, #424]	; 0x1a8
   12e4e:	e7ff      	b.n	12e50 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   12e50:	f245 1068 	movw	r0, #20840	; 0x5168
   12e54:	f2c0 0002 	movt	r0, #2
   12e58:	6800      	ldr	r0, [r0, #0]
   12e5a:	a96a      	add	r1, sp, #424	; 0x1a8
   12e5c:	916b      	str	r1, [sp, #428]	; 0x1ac
   12e5e:	906c      	str	r0, [sp, #432]	; 0x1b0
   12e60:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   12e62:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   12e66:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   12e68:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   12e6c:	6802      	ldr	r2, [r0, #0]
   12e6e:	680b      	ldr	r3, [r1, #0]
   12e70:	429a      	cmp	r2, r3
   12e72:	9068      	str	r0, [sp, #416]	; 0x1a0
   12e74:	9167      	str	r1, [sp, #412]	; 0x19c
   12e76:	d10c      	bne.n	12e92 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   12e78:	e7ff      	b.n	12e7a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   12e7a:	f646 7004 	movw	r0, #28420	; 0x6f04
   12e7e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12e82:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   12e86:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   12e8a:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   12e8e:	9066      	str	r0, [sp, #408]	; 0x198
   12e90:	e075      	b.n	12f7e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   12e92:	f245 10c0 	movw	r0, #20928	; 0x51c0
   12e96:	f2c0 0002 	movt	r0, #2
   12e9a:	6801      	ldr	r1, [r0, #0]
   12e9c:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   12e9e:	907c      	str	r0, [sp, #496]	; 0x1f0
   12ea0:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   12ea2:	927d      	str	r2, [sp, #500]	; 0x1f4
   12ea4:	f245 13dc 	movw	r3, #20956	; 0x51dc
   12ea8:	f2c0 0302 	movt	r3, #2
   12eac:	681b      	ldr	r3, [r3, #0]
   12eae:	f245 1ce0 	movw	ip, #20960	; 0x51e0
   12eb2:	f2c0 0c02 	movt	ip, #2
   12eb6:	f8dc c000 	ldr.w	ip, [ip]
   12eba:	46ee      	mov	lr, sp
   12ebc:	2400      	movs	r4, #0
   12ebe:	f8ce 4000 	str.w	r4, [lr]
   12ec2:	a87e      	add	r0, sp, #504	; 0x1f8
   12ec4:	2201      	movs	r2, #1
   12ec6:	9165      	str	r1, [sp, #404]	; 0x194
   12ec8:	4619      	mov	r1, r3
   12eca:	4663      	mov	r3, ip
   12ecc:	f7f5 fe6a 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12ed0:	e7ff      	b.n	12ed2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   12ed2:	a87c      	add	r0, sp, #496	; 0x1f0
   12ed4:	9079      	str	r0, [sp, #484]	; 0x1e4
   12ed6:	a87d      	add	r0, sp, #500	; 0x1f4
   12ed8:	907a      	str	r0, [sp, #488]	; 0x1e8
   12eda:	a87e      	add	r0, sp, #504	; 0x1f8
   12edc:	907b      	str	r0, [sp, #492]	; 0x1ec
   12ede:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   12ee0:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   12ee4:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   12ee6:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   12eea:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   12eec:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   12ef0:	f249 33f3 	movw	r3, #37875	; 0x93f3
   12ef4:	f2c0 0300 	movt	r3, #0
   12ef8:	9164      	str	r1, [sp, #400]	; 0x190
   12efa:	4619      	mov	r1, r3
   12efc:	9263      	str	r2, [sp, #396]	; 0x18c
   12efe:	f7f6 fab0 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12f02:	9062      	str	r0, [sp, #392]	; 0x188
   12f04:	9161      	str	r1, [sp, #388]	; 0x184
   12f06:	e7ff      	b.n	12f08 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   12f08:	f249 31f3 	movw	r1, #37875	; 0x93f3
   12f0c:	f2c0 0100 	movt	r1, #0
   12f10:	9864      	ldr	r0, [sp, #400]	; 0x190
   12f12:	f7f6 faa6 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12f16:	9060      	str	r0, [sp, #384]	; 0x180
   12f18:	915f      	str	r1, [sp, #380]	; 0x17c
   12f1a:	e7ff      	b.n	12f1c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   12f1c:	f246 314f 	movw	r1, #25423	; 0x634f
   12f20:	f2c0 0101 	movt	r1, #1
   12f24:	9863      	ldr	r0, [sp, #396]	; 0x18c
   12f26:	f7f6 fadb 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12f2a:	905e      	str	r0, [sp, #376]	; 0x178
   12f2c:	915d      	str	r1, [sp, #372]	; 0x174
   12f2e:	e7ff      	b.n	12f30 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   12f30:	9862      	ldr	r0, [sp, #392]	; 0x188
   12f32:	9073      	str	r0, [sp, #460]	; 0x1cc
   12f34:	9961      	ldr	r1, [sp, #388]	; 0x184
   12f36:	9174      	str	r1, [sp, #464]	; 0x1d0
   12f38:	9a60      	ldr	r2, [sp, #384]	; 0x180
   12f3a:	9275      	str	r2, [sp, #468]	; 0x1d4
   12f3c:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   12f3e:	9376      	str	r3, [sp, #472]	; 0x1d8
   12f40:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   12f44:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   12f48:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   12f4c:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   12f50:	466c      	mov	r4, sp
   12f52:	2503      	movs	r5, #3
   12f54:	6025      	str	r5, [r4, #0]
   12f56:	a86d      	add	r0, sp, #436	; 0x1b4
   12f58:	ab73      	add	r3, sp, #460	; 0x1cc
   12f5a:	9965      	ldr	r1, [sp, #404]	; 0x194
   12f5c:	462a      	mov	r2, r5
   12f5e:	f7f5 fe21 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12f62:	e7ff      	b.n	12f64 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   12f64:	f245 10fc 	movw	r0, #20988	; 0x51fc
   12f68:	f2c0 0002 	movt	r0, #2
   12f6c:	f002 ff01 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12f70:	905c      	str	r0, [sp, #368]	; 0x170
   12f72:	e7ff      	b.n	12f74 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   12f74:	a86d      	add	r0, sp, #436	; 0x1b4
   12f76:	995c      	ldr	r1, [sp, #368]	; 0x170
   12f78:	f002 ff38 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12f7c:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   12f7e:	f244 30cb 	movw	r0, #17355	; 0x43cb
   12f82:	f2c0 0001 	movt	r0, #1
   12f86:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   12f88:	9985      	ldr	r1, [sp, #532]	; 0x214
   12f8a:	2000      	movs	r0, #0
   12f8c:	9a66      	ldr	r2, [sp, #408]	; 0x198
   12f8e:	f005 fc35 	bl	187fc <hal_spi_set_txrx_cb>
   12f92:	9084      	str	r0, [sp, #528]	; 0x210
   12f94:	e7ff      	b.n	12f96 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   12f96:	f245 1068 	movw	r0, #20840	; 0x5168
   12f9a:	f2c0 0002 	movt	r0, #2
   12f9e:	6800      	ldr	r0, [r0, #0]
   12fa0:	a984      	add	r1, sp, #528	; 0x210
   12fa2:	9186      	str	r1, [sp, #536]	; 0x218
   12fa4:	9087      	str	r0, [sp, #540]	; 0x21c
   12fa6:	9886      	ldr	r0, [sp, #536]	; 0x218
   12fa8:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   12fac:	9987      	ldr	r1, [sp, #540]	; 0x21c
   12fae:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   12fb2:	6802      	ldr	r2, [r0, #0]
   12fb4:	680b      	ldr	r3, [r1, #0]
   12fb6:	429a      	cmp	r2, r3
   12fb8:	905b      	str	r0, [sp, #364]	; 0x16c
   12fba:	915a      	str	r1, [sp, #360]	; 0x168
   12fbc:	d105      	bne.n	12fca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   12fbe:	e7ff      	b.n	12fc0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   12fc0:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12fc2:	f005 fb91 	bl	186e8 <hal_spi_enable>
   12fc6:	909f      	str	r0, [sp, #636]	; 0x27c
   12fc8:	e075      	b.n	130b6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   12fca:	f245 10c0 	movw	r0, #20928	; 0x51c0
   12fce:	f2c0 0002 	movt	r0, #2
   12fd2:	6801      	ldr	r1, [r0, #0]
   12fd4:	985b      	ldr	r0, [sp, #364]	; 0x16c
   12fd6:	9097      	str	r0, [sp, #604]	; 0x25c
   12fd8:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   12fda:	9298      	str	r2, [sp, #608]	; 0x260
   12fdc:	f245 2320 	movw	r3, #21024	; 0x5220
   12fe0:	f2c0 0302 	movt	r3, #2
   12fe4:	681b      	ldr	r3, [r3, #0]
   12fe6:	f245 1ce0 	movw	ip, #20960	; 0x51e0
   12fea:	f2c0 0c02 	movt	ip, #2
   12fee:	f8dc c000 	ldr.w	ip, [ip]
   12ff2:	46ee      	mov	lr, sp
   12ff4:	2400      	movs	r4, #0
   12ff6:	f8ce 4000 	str.w	r4, [lr]
   12ffa:	a899      	add	r0, sp, #612	; 0x264
   12ffc:	2201      	movs	r2, #1
   12ffe:	9159      	str	r1, [sp, #356]	; 0x164
   13000:	4619      	mov	r1, r3
   13002:	4663      	mov	r3, ip
   13004:	f7f5 fdce 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13008:	e7ff      	b.n	1300a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   1300a:	a897      	add	r0, sp, #604	; 0x25c
   1300c:	9094      	str	r0, [sp, #592]	; 0x250
   1300e:	a898      	add	r0, sp, #608	; 0x260
   13010:	9095      	str	r0, [sp, #596]	; 0x254
   13012:	a899      	add	r0, sp, #612	; 0x264
   13014:	9096      	str	r0, [sp, #600]	; 0x258
   13016:	9894      	ldr	r0, [sp, #592]	; 0x250
   13018:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   1301c:	9995      	ldr	r1, [sp, #596]	; 0x254
   1301e:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   13022:	9a96      	ldr	r2, [sp, #600]	; 0x258
   13024:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   13028:	f249 33f3 	movw	r3, #37875	; 0x93f3
   1302c:	f2c0 0300 	movt	r3, #0
   13030:	9158      	str	r1, [sp, #352]	; 0x160
   13032:	4619      	mov	r1, r3
   13034:	9257      	str	r2, [sp, #348]	; 0x15c
   13036:	f7f6 fa14 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1303a:	9056      	str	r0, [sp, #344]	; 0x158
   1303c:	9155      	str	r1, [sp, #340]	; 0x154
   1303e:	e7ff      	b.n	13040 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   13040:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13044:	f2c0 0100 	movt	r1, #0
   13048:	9858      	ldr	r0, [sp, #352]	; 0x160
   1304a:	f7f6 fa0a 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1304e:	9054      	str	r0, [sp, #336]	; 0x150
   13050:	9153      	str	r1, [sp, #332]	; 0x14c
   13052:	e7ff      	b.n	13054 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   13054:	f246 314f 	movw	r1, #25423	; 0x634f
   13058:	f2c0 0101 	movt	r1, #1
   1305c:	9857      	ldr	r0, [sp, #348]	; 0x15c
   1305e:	f7f6 fa3f 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13062:	9052      	str	r0, [sp, #328]	; 0x148
   13064:	9151      	str	r1, [sp, #324]	; 0x144
   13066:	e7ff      	b.n	13068 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   13068:	9856      	ldr	r0, [sp, #344]	; 0x158
   1306a:	908e      	str	r0, [sp, #568]	; 0x238
   1306c:	9955      	ldr	r1, [sp, #340]	; 0x154
   1306e:	918f      	str	r1, [sp, #572]	; 0x23c
   13070:	9a54      	ldr	r2, [sp, #336]	; 0x150
   13072:	9290      	str	r2, [sp, #576]	; 0x240
   13074:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   13076:	9391      	str	r3, [sp, #580]	; 0x244
   13078:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   1307c:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   13080:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   13084:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   13088:	466c      	mov	r4, sp
   1308a:	2503      	movs	r5, #3
   1308c:	6025      	str	r5, [r4, #0]
   1308e:	a888      	add	r0, sp, #544	; 0x220
   13090:	ab8e      	add	r3, sp, #568	; 0x238
   13092:	9959      	ldr	r1, [sp, #356]	; 0x164
   13094:	462a      	mov	r2, r5
   13096:	f7f5 fd85 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1309a:	e7ff      	b.n	1309c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   1309c:	f245 2024 	movw	r0, #21028	; 0x5224
   130a0:	f2c0 0002 	movt	r0, #2
   130a4:	f002 fe65 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   130a8:	9050      	str	r0, [sp, #320]	; 0x140
   130aa:	e7ff      	b.n	130ac <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   130ac:	a888      	add	r0, sp, #544	; 0x220
   130ae:	9950      	ldr	r1, [sp, #320]	; 0x140
   130b0:	f002 fe9c 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   130b4:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   130b6:	f245 1068 	movw	r0, #20840	; 0x5168
   130ba:	f2c0 0002 	movt	r0, #2
   130be:	6800      	ldr	r0, [r0, #0]
   130c0:	a99f      	add	r1, sp, #636	; 0x27c
   130c2:	91a0      	str	r1, [sp, #640]	; 0x280
   130c4:	90a1      	str	r0, [sp, #644]	; 0x284
   130c6:	98a0      	ldr	r0, [sp, #640]	; 0x280
   130c8:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   130cc:	99a1      	ldr	r1, [sp, #644]	; 0x284
   130ce:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   130d2:	6802      	ldr	r2, [r0, #0]
   130d4:	680b      	ldr	r3, [r1, #0]
   130d6:	429a      	cmp	r2, r3
   130d8:	904f      	str	r0, [sp, #316]	; 0x13c
   130da:	914e      	str	r1, [sp, #312]	; 0x138
   130dc:	d106      	bne.n	130ec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   130de:	e7ff      	b.n	130e0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   130e0:	2019      	movs	r0, #25
   130e2:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   130e4:	f004 fed6 	bl	17e94 <hal_gpio_init_out>
   130e8:	90b9      	str	r0, [sp, #740]	; 0x2e4
   130ea:	e075      	b.n	131d8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   130ec:	f245 10c0 	movw	r0, #20928	; 0x51c0
   130f0:	f2c0 0002 	movt	r0, #2
   130f4:	6801      	ldr	r1, [r0, #0]
   130f6:	984f      	ldr	r0, [sp, #316]	; 0x13c
   130f8:	90b1      	str	r0, [sp, #708]	; 0x2c4
   130fa:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   130fc:	92b2      	str	r2, [sp, #712]	; 0x2c8
   130fe:	f245 234c 	movw	r3, #21068	; 0x524c
   13102:	f2c0 0302 	movt	r3, #2
   13106:	681b      	ldr	r3, [r3, #0]
   13108:	f245 1ce0 	movw	ip, #20960	; 0x51e0
   1310c:	f2c0 0c02 	movt	ip, #2
   13110:	f8dc c000 	ldr.w	ip, [ip]
   13114:	46ee      	mov	lr, sp
   13116:	2400      	movs	r4, #0
   13118:	f8ce 4000 	str.w	r4, [lr]
   1311c:	a8b3      	add	r0, sp, #716	; 0x2cc
   1311e:	2201      	movs	r2, #1
   13120:	914d      	str	r1, [sp, #308]	; 0x134
   13122:	4619      	mov	r1, r3
   13124:	4663      	mov	r3, ip
   13126:	f7f5 fd3d 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1312a:	e7ff      	b.n	1312c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   1312c:	a8b1      	add	r0, sp, #708	; 0x2c4
   1312e:	90ae      	str	r0, [sp, #696]	; 0x2b8
   13130:	a8b2      	add	r0, sp, #712	; 0x2c8
   13132:	90af      	str	r0, [sp, #700]	; 0x2bc
   13134:	a8b3      	add	r0, sp, #716	; 0x2cc
   13136:	90b0      	str	r0, [sp, #704]	; 0x2c0
   13138:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   1313a:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   1313e:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   13140:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   13144:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   13146:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   1314a:	f249 33f3 	movw	r3, #37875	; 0x93f3
   1314e:	f2c0 0300 	movt	r3, #0
   13152:	914c      	str	r1, [sp, #304]	; 0x130
   13154:	4619      	mov	r1, r3
   13156:	924b      	str	r2, [sp, #300]	; 0x12c
   13158:	f7f6 f983 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1315c:	904a      	str	r0, [sp, #296]	; 0x128
   1315e:	9149      	str	r1, [sp, #292]	; 0x124
   13160:	e7ff      	b.n	13162 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   13162:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13166:	f2c0 0100 	movt	r1, #0
   1316a:	984c      	ldr	r0, [sp, #304]	; 0x130
   1316c:	f7f6 f979 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13170:	9048      	str	r0, [sp, #288]	; 0x120
   13172:	9147      	str	r1, [sp, #284]	; 0x11c
   13174:	e7ff      	b.n	13176 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   13176:	f246 314f 	movw	r1, #25423	; 0x634f
   1317a:	f2c0 0101 	movt	r1, #1
   1317e:	984b      	ldr	r0, [sp, #300]	; 0x12c
   13180:	f7f6 f9ae 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13184:	9046      	str	r0, [sp, #280]	; 0x118
   13186:	9145      	str	r1, [sp, #276]	; 0x114
   13188:	e7ff      	b.n	1318a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   1318a:	984a      	ldr	r0, [sp, #296]	; 0x128
   1318c:	90a8      	str	r0, [sp, #672]	; 0x2a0
   1318e:	9949      	ldr	r1, [sp, #292]	; 0x124
   13190:	91a9      	str	r1, [sp, #676]	; 0x2a4
   13192:	9a48      	ldr	r2, [sp, #288]	; 0x120
   13194:	92aa      	str	r2, [sp, #680]	; 0x2a8
   13196:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   13198:	93ab      	str	r3, [sp, #684]	; 0x2ac
   1319a:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   1319e:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   131a2:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   131a6:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   131aa:	466c      	mov	r4, sp
   131ac:	2503      	movs	r5, #3
   131ae:	6025      	str	r5, [r4, #0]
   131b0:	a8a2      	add	r0, sp, #648	; 0x288
   131b2:	aba8      	add	r3, sp, #672	; 0x2a0
   131b4:	994d      	ldr	r1, [sp, #308]	; 0x134
   131b6:	462a      	mov	r2, r5
   131b8:	f7f5 fcf4 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   131bc:	e7ff      	b.n	131be <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   131be:	f245 2050 	movw	r0, #21072	; 0x5250
   131c2:	f2c0 0002 	movt	r0, #2
   131c6:	f002 fdd4 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   131ca:	9044      	str	r0, [sp, #272]	; 0x110
   131cc:	e7ff      	b.n	131ce <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   131ce:	a8a2      	add	r0, sp, #648	; 0x288
   131d0:	9944      	ldr	r1, [sp, #272]	; 0x110
   131d2:	f002 fe0b 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   131d6:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   131d8:	f245 1068 	movw	r0, #20840	; 0x5168
   131dc:	f2c0 0002 	movt	r0, #2
   131e0:	6800      	ldr	r0, [r0, #0]
   131e2:	a9b9      	add	r1, sp, #740	; 0x2e4
   131e4:	91ba      	str	r1, [sp, #744]	; 0x2e8
   131e6:	90bb      	str	r0, [sp, #748]	; 0x2ec
   131e8:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   131ea:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   131ee:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   131f0:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   131f4:	6802      	ldr	r2, [r0, #0]
   131f6:	680b      	ldr	r3, [r1, #0]
   131f8:	429a      	cmp	r2, r3
   131fa:	9043      	str	r0, [sp, #268]	; 0x10c
   131fc:	9142      	str	r1, [sp, #264]	; 0x108
   131fe:	d106      	bne.n	1320e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   13200:	e7ff      	b.n	13202 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   13202:	2012      	movs	r0, #18
   13204:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13206:	f004 fe45 	bl	17e94 <hal_gpio_init_out>
   1320a:	90d3      	str	r0, [sp, #844]	; 0x34c
   1320c:	e075      	b.n	132fa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1320e:	f245 10c0 	movw	r0, #20928	; 0x51c0
   13212:	f2c0 0002 	movt	r0, #2
   13216:	6801      	ldr	r1, [r0, #0]
   13218:	9843      	ldr	r0, [sp, #268]	; 0x10c
   1321a:	90cb      	str	r0, [sp, #812]	; 0x32c
   1321c:	9a42      	ldr	r2, [sp, #264]	; 0x108
   1321e:	92cc      	str	r2, [sp, #816]	; 0x330
   13220:	f245 2374 	movw	r3, #21108	; 0x5274
   13224:	f2c0 0302 	movt	r3, #2
   13228:	681b      	ldr	r3, [r3, #0]
   1322a:	f245 1ce0 	movw	ip, #20960	; 0x51e0
   1322e:	f2c0 0c02 	movt	ip, #2
   13232:	f8dc c000 	ldr.w	ip, [ip]
   13236:	46ee      	mov	lr, sp
   13238:	2400      	movs	r4, #0
   1323a:	f8ce 4000 	str.w	r4, [lr]
   1323e:	a8cd      	add	r0, sp, #820	; 0x334
   13240:	2201      	movs	r2, #1
   13242:	9141      	str	r1, [sp, #260]	; 0x104
   13244:	4619      	mov	r1, r3
   13246:	4663      	mov	r3, ip
   13248:	f7f5 fcac 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1324c:	e7ff      	b.n	1324e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   1324e:	a8cb      	add	r0, sp, #812	; 0x32c
   13250:	90c8      	str	r0, [sp, #800]	; 0x320
   13252:	a8cc      	add	r0, sp, #816	; 0x330
   13254:	90c9      	str	r0, [sp, #804]	; 0x324
   13256:	a8cd      	add	r0, sp, #820	; 0x334
   13258:	90ca      	str	r0, [sp, #808]	; 0x328
   1325a:	98c8      	ldr	r0, [sp, #800]	; 0x320
   1325c:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   13260:	99c9      	ldr	r1, [sp, #804]	; 0x324
   13262:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   13266:	9aca      	ldr	r2, [sp, #808]	; 0x328
   13268:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   1326c:	f249 33f3 	movw	r3, #37875	; 0x93f3
   13270:	f2c0 0300 	movt	r3, #0
   13274:	9140      	str	r1, [sp, #256]	; 0x100
   13276:	4619      	mov	r1, r3
   13278:	923f      	str	r2, [sp, #252]	; 0xfc
   1327a:	f7f6 f8f2 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1327e:	903e      	str	r0, [sp, #248]	; 0xf8
   13280:	913d      	str	r1, [sp, #244]	; 0xf4
   13282:	e7ff      	b.n	13284 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   13284:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13288:	f2c0 0100 	movt	r1, #0
   1328c:	9840      	ldr	r0, [sp, #256]	; 0x100
   1328e:	f7f6 f8e8 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13292:	903c      	str	r0, [sp, #240]	; 0xf0
   13294:	913b      	str	r1, [sp, #236]	; 0xec
   13296:	e7ff      	b.n	13298 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   13298:	f246 314f 	movw	r1, #25423	; 0x634f
   1329c:	f2c0 0101 	movt	r1, #1
   132a0:	983f      	ldr	r0, [sp, #252]	; 0xfc
   132a2:	f7f6 f91d 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   132a6:	903a      	str	r0, [sp, #232]	; 0xe8
   132a8:	9139      	str	r1, [sp, #228]	; 0xe4
   132aa:	e7ff      	b.n	132ac <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   132ac:	983e      	ldr	r0, [sp, #248]	; 0xf8
   132ae:	90c2      	str	r0, [sp, #776]	; 0x308
   132b0:	993d      	ldr	r1, [sp, #244]	; 0xf4
   132b2:	91c3      	str	r1, [sp, #780]	; 0x30c
   132b4:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   132b6:	92c4      	str	r2, [sp, #784]	; 0x310
   132b8:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   132ba:	93c5      	str	r3, [sp, #788]	; 0x314
   132bc:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   132c0:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   132c4:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   132c8:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   132cc:	466c      	mov	r4, sp
   132ce:	2503      	movs	r5, #3
   132d0:	6025      	str	r5, [r4, #0]
   132d2:	a8bc      	add	r0, sp, #752	; 0x2f0
   132d4:	abc2      	add	r3, sp, #776	; 0x308
   132d6:	9941      	ldr	r1, [sp, #260]	; 0x104
   132d8:	462a      	mov	r2, r5
   132da:	f7f5 fc63 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   132de:	e7ff      	b.n	132e0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   132e0:	f245 2078 	movw	r0, #21112	; 0x5278
   132e4:	f2c0 0002 	movt	r0, #2
   132e8:	f002 fd43 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   132ec:	9038      	str	r0, [sp, #224]	; 0xe0
   132ee:	e7ff      	b.n	132f0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   132f0:	a8bc      	add	r0, sp, #752	; 0x2f0
   132f2:	9938      	ldr	r1, [sp, #224]	; 0xe0
   132f4:	f002 fd7a 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   132f8:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   132fa:	f245 1068 	movw	r0, #20840	; 0x5168
   132fe:	f2c0 0002 	movt	r0, #2
   13302:	6800      	ldr	r0, [r0, #0]
   13304:	a9d3      	add	r1, sp, #844	; 0x34c
   13306:	91d4      	str	r1, [sp, #848]	; 0x350
   13308:	90d5      	str	r0, [sp, #852]	; 0x354
   1330a:	98d4      	ldr	r0, [sp, #848]	; 0x350
   1330c:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   13310:	99d5      	ldr	r1, [sp, #852]	; 0x354
   13312:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   13316:	6802      	ldr	r2, [r0, #0]
   13318:	680b      	ldr	r3, [r1, #0]
   1331a:	429a      	cmp	r2, r3
   1331c:	9037      	str	r0, [sp, #220]	; 0xdc
   1331e:	9136      	str	r1, [sp, #216]	; 0xd8
   13320:	d107      	bne.n	13332 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   13322:	e7ff      	b.n	13324 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   13324:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   13328:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1332c:	f005 febc 	bl	190a8 <os_eventq_init>
   13330:	e075      	b.n	1341e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13332:	f245 10c0 	movw	r0, #20928	; 0x51c0
   13336:	f2c0 0002 	movt	r0, #2
   1333a:	6801      	ldr	r1, [r0, #0]
   1333c:	9837      	ldr	r0, [sp, #220]	; 0xdc
   1333e:	90e5      	str	r0, [sp, #916]	; 0x394
   13340:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   13342:	92e6      	str	r2, [sp, #920]	; 0x398
   13344:	f245 2374 	movw	r3, #21108	; 0x5274
   13348:	f2c0 0302 	movt	r3, #2
   1334c:	681b      	ldr	r3, [r3, #0]
   1334e:	f245 1ce0 	movw	ip, #20960	; 0x51e0
   13352:	f2c0 0c02 	movt	ip, #2
   13356:	f8dc c000 	ldr.w	ip, [ip]
   1335a:	46ee      	mov	lr, sp
   1335c:	2400      	movs	r4, #0
   1335e:	f8ce 4000 	str.w	r4, [lr]
   13362:	a8e7      	add	r0, sp, #924	; 0x39c
   13364:	2201      	movs	r2, #1
   13366:	9135      	str	r1, [sp, #212]	; 0xd4
   13368:	4619      	mov	r1, r3
   1336a:	4663      	mov	r3, ip
   1336c:	f7f5 fc1a 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13370:	e7ff      	b.n	13372 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   13372:	a8e5      	add	r0, sp, #916	; 0x394
   13374:	90e2      	str	r0, [sp, #904]	; 0x388
   13376:	a8e6      	add	r0, sp, #920	; 0x398
   13378:	90e3      	str	r0, [sp, #908]	; 0x38c
   1337a:	a8e7      	add	r0, sp, #924	; 0x39c
   1337c:	90e4      	str	r0, [sp, #912]	; 0x390
   1337e:	98e2      	ldr	r0, [sp, #904]	; 0x388
   13380:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   13384:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   13386:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   1338a:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   1338c:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   13390:	f249 33f3 	movw	r3, #37875	; 0x93f3
   13394:	f2c0 0300 	movt	r3, #0
   13398:	9134      	str	r1, [sp, #208]	; 0xd0
   1339a:	4619      	mov	r1, r3
   1339c:	9233      	str	r2, [sp, #204]	; 0xcc
   1339e:	f7f6 f860 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   133a2:	9032      	str	r0, [sp, #200]	; 0xc8
   133a4:	9131      	str	r1, [sp, #196]	; 0xc4
   133a6:	e7ff      	b.n	133a8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   133a8:	f249 31f3 	movw	r1, #37875	; 0x93f3
   133ac:	f2c0 0100 	movt	r1, #0
   133b0:	9834      	ldr	r0, [sp, #208]	; 0xd0
   133b2:	f7f6 f856 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   133b6:	9030      	str	r0, [sp, #192]	; 0xc0
   133b8:	912f      	str	r1, [sp, #188]	; 0xbc
   133ba:	e7ff      	b.n	133bc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   133bc:	f246 314f 	movw	r1, #25423	; 0x634f
   133c0:	f2c0 0101 	movt	r1, #1
   133c4:	9833      	ldr	r0, [sp, #204]	; 0xcc
   133c6:	f7f6 f88b 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   133ca:	902e      	str	r0, [sp, #184]	; 0xb8
   133cc:	912d      	str	r1, [sp, #180]	; 0xb4
   133ce:	e7ff      	b.n	133d0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   133d0:	9832      	ldr	r0, [sp, #200]	; 0xc8
   133d2:	90dc      	str	r0, [sp, #880]	; 0x370
   133d4:	9931      	ldr	r1, [sp, #196]	; 0xc4
   133d6:	91dd      	str	r1, [sp, #884]	; 0x374
   133d8:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   133da:	92de      	str	r2, [sp, #888]	; 0x378
   133dc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   133de:	93df      	str	r3, [sp, #892]	; 0x37c
   133e0:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   133e4:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   133e8:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   133ec:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   133f0:	466c      	mov	r4, sp
   133f2:	2503      	movs	r5, #3
   133f4:	6025      	str	r5, [r4, #0]
   133f6:	a8d6      	add	r0, sp, #856	; 0x358
   133f8:	abdc      	add	r3, sp, #880	; 0x370
   133fa:	9935      	ldr	r1, [sp, #212]	; 0xd4
   133fc:	462a      	mov	r2, r5
   133fe:	f7f5 fbd1 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13402:	e7ff      	b.n	13404 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   13404:	f245 2088 	movw	r0, #21128	; 0x5288
   13408:	f2c0 0002 	movt	r0, #2
   1340c:	f002 fcb1 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13410:	902c      	str	r0, [sp, #176]	; 0xb0
   13412:	e7ff      	b.n	13414 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   13414:	a8d6      	add	r0, sp, #856	; 0x358
   13416:	992c      	ldr	r1, [sp, #176]	; 0xb0
   13418:	f002 fce8 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1341c:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   1341e:	f643 50ad 	movw	r0, #15789	; 0x3dad
   13422:	f2c0 0001 	movt	r0, #1
   13426:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   13428:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   1342a:	f646 208c 	movw	r0, #27276	; 0x6a8c
   1342e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13432:	2200      	movs	r2, #0
   13434:	f005 fee6 	bl	19204 <os_mqueue_init>
   13438:	90ed      	str	r0, [sp, #948]	; 0x3b4
   1343a:	e7ff      	b.n	1343c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   1343c:	f245 1068 	movw	r0, #20840	; 0x5168
   13440:	f2c0 0002 	movt	r0, #2
   13444:	6800      	ldr	r0, [r0, #0]
   13446:	a9ed      	add	r1, sp, #948	; 0x3b4
   13448:	91ef      	str	r1, [sp, #956]	; 0x3bc
   1344a:	90f0      	str	r0, [sp, #960]	; 0x3c0
   1344c:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   1344e:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   13452:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   13454:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   13458:	6802      	ldr	r2, [r0, #0]
   1345a:	680b      	ldr	r3, [r1, #0]
   1345c:	429a      	cmp	r2, r3
   1345e:	902b      	str	r0, [sp, #172]	; 0xac
   13460:	912a      	str	r1, [sp, #168]	; 0xa8
   13462:	d10a      	bne.n	1347a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   13464:	e7ff      	b.n	13466 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   13466:	f646 207c 	movw	r0, #27260	; 0x6a7c
   1346a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1346e:	2100      	movs	r1, #0
   13470:	f006 fbc2 	bl	19bf8 <os_sem_init>
   13474:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   13478:	e07b      	b.n	13572 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   1347a:	f245 10c0 	movw	r0, #20928	; 0x51c0
   1347e:	f2c0 0002 	movt	r0, #2
   13482:	6801      	ldr	r1, [r0, #0]
   13484:	982b      	ldr	r0, [sp, #172]	; 0xac
   13486:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   1348a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   1348c:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   13490:	f245 23ac 	movw	r3, #21164	; 0x52ac
   13494:	f2c0 0302 	movt	r3, #2
   13498:	681b      	ldr	r3, [r3, #0]
   1349a:	f245 1ce0 	movw	ip, #20960	; 0x51e0
   1349e:	f2c0 0c02 	movt	ip, #2
   134a2:	f8dc c000 	ldr.w	ip, [ip]
   134a6:	46ee      	mov	lr, sp
   134a8:	2400      	movs	r4, #0
   134aa:	f8ce 4000 	str.w	r4, [lr]
   134ae:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   134b2:	2201      	movs	r2, #1
   134b4:	9129      	str	r1, [sp, #164]	; 0xa4
   134b6:	4619      	mov	r1, r3
   134b8:	4663      	mov	r3, ip
   134ba:	f7f5 fb73 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   134be:	e7ff      	b.n	134c0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   134c0:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   134c4:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   134c6:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   134ca:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   134cc:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   134d0:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   134d2:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   134d4:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   134d8:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   134da:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   134de:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   134e0:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   134e4:	f249 33f3 	movw	r3, #37875	; 0x93f3
   134e8:	f2c0 0300 	movt	r3, #0
   134ec:	9128      	str	r1, [sp, #160]	; 0xa0
   134ee:	4619      	mov	r1, r3
   134f0:	9227      	str	r2, [sp, #156]	; 0x9c
   134f2:	f7f5 ffb6 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   134f6:	9026      	str	r0, [sp, #152]	; 0x98
   134f8:	9125      	str	r1, [sp, #148]	; 0x94
   134fa:	e7ff      	b.n	134fc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   134fc:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13500:	f2c0 0100 	movt	r1, #0
   13504:	9828      	ldr	r0, [sp, #160]	; 0xa0
   13506:	f7f5 ffac 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1350a:	9024      	str	r0, [sp, #144]	; 0x90
   1350c:	9123      	str	r1, [sp, #140]	; 0x8c
   1350e:	e7ff      	b.n	13510 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   13510:	f246 314f 	movw	r1, #25423	; 0x634f
   13514:	f2c0 0101 	movt	r1, #1
   13518:	9827      	ldr	r0, [sp, #156]	; 0x9c
   1351a:	f7f5 ffe1 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1351e:	9022      	str	r0, [sp, #136]	; 0x88
   13520:	9121      	str	r1, [sp, #132]	; 0x84
   13522:	e7ff      	b.n	13524 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   13524:	9826      	ldr	r0, [sp, #152]	; 0x98
   13526:	90f7      	str	r0, [sp, #988]	; 0x3dc
   13528:	9925      	ldr	r1, [sp, #148]	; 0x94
   1352a:	91f8      	str	r1, [sp, #992]	; 0x3e0
   1352c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1352e:	92f9      	str	r2, [sp, #996]	; 0x3e4
   13530:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13532:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   13534:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   13538:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   1353c:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   13540:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   13544:	466c      	mov	r4, sp
   13546:	2503      	movs	r5, #3
   13548:	6025      	str	r5, [r4, #0]
   1354a:	a8f1      	add	r0, sp, #964	; 0x3c4
   1354c:	abf7      	add	r3, sp, #988	; 0x3dc
   1354e:	9929      	ldr	r1, [sp, #164]	; 0xa4
   13550:	462a      	mov	r2, r5
   13552:	f7f5 fb27 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13556:	e7ff      	b.n	13558 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   13558:	f245 20b0 	movw	r0, #21168	; 0x52b0
   1355c:	f2c0 0002 	movt	r0, #2
   13560:	f002 fc07 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13564:	9020      	str	r0, [sp, #128]	; 0x80
   13566:	e7ff      	b.n	13568 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   13568:	a8f1      	add	r0, sp, #964	; 0x3c4
   1356a:	9920      	ldr	r1, [sp, #128]	; 0x80
   1356c:	f002 fc3e 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13570:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13572:	f245 1068 	movw	r0, #20840	; 0x5168
   13576:	f2c0 0002 	movt	r0, #2
   1357a:	6800      	ldr	r0, [r0, #0]
   1357c:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   13580:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   13584:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   13588:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   1358c:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   13590:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   13594:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   13598:	6802      	ldr	r2, [r0, #0]
   1359a:	680b      	ldr	r3, [r1, #0]
   1359c:	429a      	cmp	r2, r3
   1359e:	901f      	str	r0, [sp, #124]	; 0x7c
   135a0:	911e      	str	r1, [sp, #120]	; 0x78
   135a2:	d10a      	bne.n	135ba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   135a4:	e7ff      	b.n	135a6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   135a6:	f646 2084 	movw	r0, #27268	; 0x6a84
   135aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
   135ae:	2102      	movs	r1, #2
   135b0:	f006 fb22 	bl	19bf8 <os_sem_init>
   135b4:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   135b8:	e088      	b.n	136cc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   135ba:	f245 10c0 	movw	r0, #20928	; 0x51c0
   135be:	f2c0 0002 	movt	r0, #2
   135c2:	6801      	ldr	r1, [r0, #0]
   135c4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   135c6:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   135ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   135cc:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   135d0:	f245 23d8 	movw	r3, #21208	; 0x52d8
   135d4:	f2c0 0302 	movt	r3, #2
   135d8:	681b      	ldr	r3, [r3, #0]
   135da:	f245 1ce0 	movw	ip, #20960	; 0x51e0
   135de:	f2c0 0c02 	movt	ip, #2
   135e2:	f8dc c000 	ldr.w	ip, [ip]
   135e6:	46ee      	mov	lr, sp
   135e8:	2400      	movs	r4, #0
   135ea:	f8ce 4000 	str.w	r4, [lr]
   135ee:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   135f2:	2201      	movs	r2, #1
   135f4:	911d      	str	r1, [sp, #116]	; 0x74
   135f6:	4619      	mov	r1, r3
   135f8:	4663      	mov	r3, ip
   135fa:	f7f5 fad3 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   135fe:	e7ff      	b.n	13600 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   13600:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   13604:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   13608:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   1360c:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   13610:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   13614:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   13618:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   1361c:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   13620:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   13624:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   13628:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   1362c:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   13630:	f249 4347 	movw	r3, #37959	; 0x9447
   13634:	f2c0 0300 	movt	r3, #0
   13638:	911c      	str	r1, [sp, #112]	; 0x70
   1363a:	4619      	mov	r1, r3
   1363c:	921b      	str	r2, [sp, #108]	; 0x6c
   1363e:	f7f5 ff3a 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13642:	901a      	str	r0, [sp, #104]	; 0x68
   13644:	9119      	str	r1, [sp, #100]	; 0x64
   13646:	e7ff      	b.n	13648 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   13648:	f249 4147 	movw	r1, #37959	; 0x9447
   1364c:	f2c0 0100 	movt	r1, #0
   13650:	981c      	ldr	r0, [sp, #112]	; 0x70
   13652:	f7f5 ff30 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13656:	9018      	str	r0, [sp, #96]	; 0x60
   13658:	9117      	str	r1, [sp, #92]	; 0x5c
   1365a:	e7ff      	b.n	1365c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   1365c:	f246 314f 	movw	r1, #25423	; 0x634f
   13660:	f2c0 0101 	movt	r1, #1
   13664:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13666:	f7f5 ff3b 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1366a:	9016      	str	r0, [sp, #88]	; 0x58
   1366c:	9115      	str	r1, [sp, #84]	; 0x54
   1366e:	e7ff      	b.n	13670 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   13670:	981a      	ldr	r0, [sp, #104]	; 0x68
   13672:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   13676:	9919      	ldr	r1, [sp, #100]	; 0x64
   13678:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   1367c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1367e:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   13682:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13684:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   13688:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   1368c:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   13690:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   13694:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   13698:	466c      	mov	r4, sp
   1369a:	2503      	movs	r5, #3
   1369c:	6025      	str	r5, [r4, #0]
   1369e:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   136a2:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   136a6:	991d      	ldr	r1, [sp, #116]	; 0x74
   136a8:	462a      	mov	r2, r5
   136aa:	f7f5 fa7b 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   136ae:	e7ff      	b.n	136b0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   136b0:	f245 20dc 	movw	r0, #21212	; 0x52dc
   136b4:	f2c0 0002 	movt	r0, #2
   136b8:	f002 fb5b 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   136bc:	9014      	str	r0, [sp, #80]	; 0x50
   136be:	e7ff      	b.n	136c0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   136c0:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   136c4:	9914      	ldr	r1, [sp, #80]	; 0x50
   136c6:	f002 fb91 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   136ca:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   136cc:	f245 1068 	movw	r0, #20840	; 0x5168
   136d0:	f2c0 0002 	movt	r0, #2
   136d4:	6800      	ldr	r0, [r0, #0]
   136d6:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   136da:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   136de:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   136e2:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   136e6:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   136ea:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   136ee:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   136f2:	6802      	ldr	r2, [r0, #0]
   136f4:	680b      	ldr	r3, [r1, #0]
   136f6:	429a      	cmp	r2, r3
   136f8:	9013      	str	r0, [sp, #76]	; 0x4c
   136fa:	9112      	str	r1, [sp, #72]	; 0x48
   136fc:	d125      	bne.n	1374a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   136fe:	e7ff      	b.n	13700 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   13700:	f245 3008 	movw	r0, #21256	; 0x5308
   13704:	f2c0 0002 	movt	r0, #2
   13708:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   1370a:	f643 00ab 	movw	r0, #14507	; 0x38ab
   1370e:	f2c0 0001 	movt	r0, #1
   13712:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   13716:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   1371a:	4668      	mov	r0, sp
   1371c:	f44f 7380 	mov.w	r3, #256	; 0x100
   13720:	6103      	str	r3, [r0, #16]
   13722:	60c3      	str	r3, [r0, #12]
   13724:	f646 3304 	movw	r3, #27396	; 0x6b04
   13728:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1372c:	6083      	str	r3, [r0, #8]
   1372e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13732:	6043      	str	r3, [r0, #4]
   13734:	230a      	movs	r3, #10
   13736:	6003      	str	r3, [r0, #0]
   13738:	f646 20b4 	movw	r0, #27316	; 0x6ab4
   1373c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13740:	2300      	movs	r3, #0
   13742:	f7f5 fb29 	bl	8d98 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   13746:	9011      	str	r0, [sp, #68]	; 0x44
   13748:	e088      	b.n	1385c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   1374a:	f245 10c0 	movw	r0, #20928	; 0x51c0
   1374e:	f2c0 0002 	movt	r0, #2
   13752:	6801      	ldr	r1, [r0, #0]
   13754:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13756:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   1375a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1375c:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   13760:	f245 23d8 	movw	r3, #21208	; 0x52d8
   13764:	f2c0 0302 	movt	r3, #2
   13768:	681b      	ldr	r3, [r3, #0]
   1376a:	f245 1ce0 	movw	ip, #20960	; 0x51e0
   1376e:	f2c0 0c02 	movt	ip, #2
   13772:	f8dc c000 	ldr.w	ip, [ip]
   13776:	46ee      	mov	lr, sp
   13778:	2400      	movs	r4, #0
   1377a:	f8ce 4000 	str.w	r4, [lr]
   1377e:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13782:	2201      	movs	r2, #1
   13784:	9110      	str	r1, [sp, #64]	; 0x40
   13786:	4619      	mov	r1, r3
   13788:	4663      	mov	r3, ip
   1378a:	f7f5 fa0b 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1378e:	e7ff      	b.n	13790 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   13790:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   13794:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   13798:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   1379c:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   137a0:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   137a4:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   137a8:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   137ac:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   137b0:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   137b4:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   137b8:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   137bc:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   137c0:	f249 4347 	movw	r3, #37959	; 0x9447
   137c4:	f2c0 0300 	movt	r3, #0
   137c8:	910f      	str	r1, [sp, #60]	; 0x3c
   137ca:	4619      	mov	r1, r3
   137cc:	920e      	str	r2, [sp, #56]	; 0x38
   137ce:	f7f5 fe72 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   137d2:	900d      	str	r0, [sp, #52]	; 0x34
   137d4:	910c      	str	r1, [sp, #48]	; 0x30
   137d6:	e7ff      	b.n	137d8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   137d8:	f249 4147 	movw	r1, #37959	; 0x9447
   137dc:	f2c0 0100 	movt	r1, #0
   137e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
   137e2:	f7f5 fe68 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   137e6:	900b      	str	r0, [sp, #44]	; 0x2c
   137e8:	910a      	str	r1, [sp, #40]	; 0x28
   137ea:	e7ff      	b.n	137ec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   137ec:	f246 314f 	movw	r1, #25423	; 0x634f
   137f0:	f2c0 0101 	movt	r1, #1
   137f4:	980e      	ldr	r0, [sp, #56]	; 0x38
   137f6:	f7f5 fe73 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   137fa:	9009      	str	r0, [sp, #36]	; 0x24
   137fc:	9108      	str	r1, [sp, #32]
   137fe:	e7ff      	b.n	13800 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   13800:	980d      	ldr	r0, [sp, #52]	; 0x34
   13802:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   13806:	990c      	ldr	r1, [sp, #48]	; 0x30
   13808:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   1380c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1380e:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   13812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13814:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   13818:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   1381c:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   13820:	f8dd e020 	ldr.w	lr, [sp, #32]
   13824:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   13828:	466c      	mov	r4, sp
   1382a:	2503      	movs	r5, #3
   1382c:	6025      	str	r5, [r4, #0]
   1382e:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13832:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   13836:	9910      	ldr	r1, [sp, #64]	; 0x40
   13838:	462a      	mov	r2, r5
   1383a:	f7f5 f9b3 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1383e:	e7ff      	b.n	13840 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   13840:	f245 20ec 	movw	r0, #21228	; 0x52ec
   13844:	f2c0 0002 	movt	r0, #2
   13848:	f002 fa93 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1384c:	9007      	str	r0, [sp, #28]
   1384e:	e7ff      	b.n	13850 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   13850:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13854:	9907      	ldr	r1, [sp, #28]
   13856:	f002 fac9 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1385a:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   1385c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1385e:	f7f5 fa0f 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   13862:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   13866:	e7ff      	b.n	13868 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   13868:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   1386c:	1e41      	subs	r1, r0, #1
   1386e:	bf18      	it	ne
   13870:	2101      	movne	r1, #1
   13872:	2801      	cmp	r0, #1
   13874:	d001      	beq.n	1387a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   13876:	e7ff      	b.n	13878 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   13878:	e005      	b.n	13886 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   1387a:	2000      	movs	r0, #0
    Ok(())
   1387c:	9069      	str	r0, [sp, #420]	; 0x1a4
   1387e:	2001      	movs	r0, #1
   13880:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   13882:	e008      	b.n	13896 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   13884:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   13886:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   1388a:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   1388e:	f7ff fa17 	bl	12cc0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13892:	9006      	str	r0, [sp, #24]
   13894:	e003      	b.n	1389e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   13896:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   13898:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   1389c:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   1389e:	9806      	ldr	r0, [sp, #24]
   138a0:	f7f5 f9e2 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   138a4:	9069      	str	r0, [sp, #420]	; 0x1a4
   138a6:	e7ff      	b.n	138a8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   138a8:	e7f5      	b.n	13896 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

000138aa <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   138aa:	b580      	push	{r7, lr}
   138ac:	b082      	sub	sp, #8
   138ae:	9001      	str	r0, [sp, #4]
    loop {
   138b0:	e7ff      	b.n	138b2 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   138b2:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   138b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   138ba:	f7f5 fa54 	bl	8d66 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   138be:	9000      	str	r0, [sp, #0]
   138c0:	e7ff      	b.n	138c2 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   138c2:	f245 310c 	movw	r1, #21260	; 0x530c
   138c6:	f2c0 0102 	movt	r1, #2
   138ca:	f245 3318 	movw	r3, #21272	; 0x5318
   138ce:	f2c0 0302 	movt	r3, #2
   138d2:	220b      	movs	r2, #11
   138d4:	9800      	ldr	r0, [sp, #0]
   138d6:	f7f5 f994 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   138da:	e7ff      	b.n	138dc <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   138dc:	f005 f8c6 	bl	18a6c <hal_watchdog_tickle>
   138e0:	e7ff      	b.n	138e2 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   138e2:	e7e6      	b.n	138b2 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

000138e4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   138e4:	b580      	push	{r7, lr}
   138e6:	b08c      	sub	sp, #48	; 0x30
   138e8:	4601      	mov	r1, r0
   138ea:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   138ee:	9104      	str	r1, [sp, #16]
   138f0:	f000 f8d4 	bl	13a9c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   138f4:	9003      	str	r0, [sp, #12]
   138f6:	e7ff      	b.n	138f8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   138f8:	9803      	ldr	r0, [sp, #12]
   138fa:	f7f5 f9c1 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   138fe:	9006      	str	r0, [sp, #24]
   13900:	e7ff      	b.n	13902 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   13902:	9806      	ldr	r0, [sp, #24]
   13904:	1e41      	subs	r1, r0, #1
   13906:	bf18      	it	ne
   13908:	2101      	movne	r1, #1
   1390a:	2801      	cmp	r0, #1
   1390c:	d001      	beq.n	13912 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   1390e:	e7ff      	b.n	13910 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   13910:	e00c      	b.n	1392c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   13912:	f644 2070 	movw	r0, #19056	; 0x4a70
   13916:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1391a:	9904      	ldr	r1, [sp, #16]
   1391c:	f7ff f9a4 	bl	12c68 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   13920:	f88d 101d 	strb.w	r1, [sp, #29]
   13924:	f88d 001c 	strb.w	r0, [sp, #28]
   13928:	e00f      	b.n	1394a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   1392a:	defe      	udf	#254	; 0xfe
   1392c:	9806      	ldr	r0, [sp, #24]
   1392e:	900b      	str	r0, [sp, #44]	; 0x2c
   13930:	f7ff f9c6 	bl	12cc0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13934:	9002      	str	r0, [sp, #8]
   13936:	e002      	b.n	1393e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   13938:	9805      	ldr	r0, [sp, #20]
   1393a:	b00c      	add	sp, #48	; 0x30
   1393c:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   1393e:	9802      	ldr	r0, [sp, #8]
   13940:	f7f5 f992 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13944:	9005      	str	r0, [sp, #20]
   13946:	e7ff      	b.n	13948 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   13948:	e7f6      	b.n	13938 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   1394a:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   1394c:	f7f5 f980 	bl	8c50 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   13950:	9001      	str	r0, [sp, #4]
   13952:	e7ff      	b.n	13954 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   13954:	9801      	ldr	r0, [sp, #4]
   13956:	07c1      	lsls	r1, r0, #31
   13958:	2900      	cmp	r1, #0
   1395a:	d105      	bne.n	13968 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   1395c:	e7ff      	b.n	1395e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   1395e:	2000      	movs	r0, #0
    Ok(())
   13960:	9005      	str	r0, [sp, #20]
   13962:	2001      	movs	r0, #1
   13964:	9005      	str	r0, [sp, #20]
}
   13966:	e7e7      	b.n	13938 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   13968:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   1396c:	9008      	str	r0, [sp, #32]
   1396e:	9808      	ldr	r0, [sp, #32]
   13970:	9005      	str	r0, [sp, #20]
   13972:	e7e1      	b.n	13938 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

00013974 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   13974:	b580      	push	{r7, lr}
   13976:	b094      	sub	sp, #80	; 0x50
   13978:	9010      	str	r0, [sp, #64]	; 0x40
   1397a:	9111      	str	r1, [sp, #68]	; 0x44
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   1397c:	f644 2270 	movw	r2, #19056	; 0x4a70
   13980:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13984:	900d      	str	r0, [sp, #52]	; 0x34
   13986:	4610      	mov	r0, r2
   13988:	910c      	str	r1, [sp, #48]	; 0x30
   1398a:	f7ff f953 	bl	12c34 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   1398e:	900b      	str	r0, [sp, #44]	; 0x2c
   13990:	910a      	str	r1, [sp, #40]	; 0x28
   13992:	e7ff      	b.n	13994 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   13994:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13996:	990a      	ldr	r1, [sp, #40]	; 0x28
   13998:	f7fe fcf4 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1399c:	9009      	str	r0, [sp, #36]	; 0x24
   1399e:	e7ff      	b.n	139a0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   139a0:	9809      	ldr	r0, [sp, #36]	; 0x24
   139a2:	2800      	cmp	r0, #0
   139a4:	d009      	beq.n	139ba <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x46>
   139a6:	e7ff      	b.n	139a8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  if unsafe { PENDING_DATA.len() + data.len() > PENDING_DATA.capacity() } { cortex_m::asm::bkpt(); } ////
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   139a8:	f644 2078 	movw	r0, #19064	; 0x4a78
   139ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
   139b0:	f7ff f934 	bl	12c1c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   139b4:	9008      	str	r0, [sp, #32]
   139b6:	9107      	str	r1, [sp, #28]
   139b8:	e00b      	b.n	139d2 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x5e>
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   139ba:	f245 3028 	movw	r0, #21288	; 0x5328
   139be:	f2c0 0002 	movt	r0, #2
   139c2:	f245 3234 	movw	r2, #21300	; 0x5334
   139c6:	f2c0 0202 	movt	r2, #2
   139ca:	210b      	movs	r1, #11
   139cc:	f002 f9d8 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   139d0:	defe      	udf	#254	; 0xfe
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   139d2:	9808      	ldr	r0, [sp, #32]
   139d4:	9907      	ldr	r1, [sp, #28]
   139d6:	f7fe fcd5 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   139da:	9006      	str	r0, [sp, #24]
   139dc:	e7ff      	b.n	139de <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x6a>
   139de:	980d      	ldr	r0, [sp, #52]	; 0x34
   139e0:	990c      	ldr	r1, [sp, #48]	; 0x30
   139e2:	f7fe fccf 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   139e6:	9005      	str	r0, [sp, #20]
   139e8:	e7ff      	b.n	139ea <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x76>
   139ea:	9806      	ldr	r0, [sp, #24]
   139ec:	9905      	ldr	r1, [sp, #20]
   139ee:	1842      	adds	r2, r0, r1
   139f0:	4613      	mov	r3, r2
   139f2:	4282      	cmp	r2, r0
   139f4:	9304      	str	r3, [sp, #16]
   139f6:	d345      	bcc.n	13a84 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x110>
   139f8:	e7ff      	b.n	139fa <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x86>
   139fa:	f644 2078 	movw	r0, #19064	; 0x4a78
   139fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13a02:	f7ff f953 	bl	12cac <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>
   13a06:	9003      	str	r0, [sp, #12]
   13a08:	e7ff      	b.n	13a0a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x96>
   13a0a:	9804      	ldr	r0, [sp, #16]
   13a0c:	9903      	ldr	r1, [sp, #12]
   13a0e:	4288      	cmp	r0, r1
   13a10:	d80a      	bhi.n	13a28 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xb4>
   13a12:	e7ff      	b.n	13a14 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa0>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13a14:	f644 2078 	movw	r0, #19064	; 0x4a78
   13a18:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13a1c:	990d      	ldr	r1, [sp, #52]	; 0x34
   13a1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13a20:	f7ff f914 	bl	12c4c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>
   13a24:	9002      	str	r0, [sp, #8]
   13a26:	e00b      	b.n	13a40 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xcc>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   13a28:	f245 307c 	movw	r0, #21372	; 0x537c
   13a2c:	f2c0 0002 	movt	r0, #2
   13a30:	f245 3288 	movw	r2, #21384	; 0x5388
   13a34:	f2c0 0202 	movt	r2, #2
   13a38:	210c      	movs	r1, #12
   13a3a:	f002 f9a1 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13a3e:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13a40:	9802      	ldr	r0, [sp, #8]
   13a42:	f000 0001 	and.w	r0, r0, #1
   13a46:	f7f5 f915 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   13a4a:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   13a4e:	e7ff      	b.n	13a50 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xdc>
   13a50:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   13a54:	07c1      	lsls	r1, r0, #31
   13a56:	2900      	cmp	r1, #0
   13a58:	d001      	beq.n	13a5e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xea>
   13a5a:	e7ff      	b.n	13a5c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xe8>
   13a5c:	e005      	b.n	13a6a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xf6>
   13a5e:	2000      	movs	r0, #0
    Ok(())
   13a60:	900e      	str	r0, [sp, #56]	; 0x38
   13a62:	2001      	movs	r0, #1
   13a64:	900e      	str	r0, [sp, #56]	; 0x38
}
   13a66:	e004      	b.n	13a72 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13a68:	defe      	udf	#254	; 0xfe
   13a6a:	f7ff f8c1 	bl	12bf0 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   13a6e:	9001      	str	r0, [sp, #4]
   13a70:	e002      	b.n	13a78 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x104>
}
   13a72:	980e      	ldr	r0, [sp, #56]	; 0x38
   13a74:	b014      	add	sp, #80	; 0x50
   13a76:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13a78:	9801      	ldr	r0, [sp, #4]
   13a7a:	f7f5 f8f5 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13a7e:	900e      	str	r0, [sp, #56]	; 0x38
   13a80:	e7ff      	b.n	13a82 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x10e>
   13a82:	e7f6      	b.n	13a72 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   13a84:	f245 3060 	movw	r0, #21344	; 0x5360
   13a88:	f2c0 0002 	movt	r0, #2
   13a8c:	f245 3244 	movw	r2, #21316	; 0x5344
   13a90:	f2c0 0202 	movt	r2, #2
   13a94:	211c      	movs	r1, #28
   13a96:	f002 f973 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13a9a:	defe      	udf	#254	; 0xfe

00013a9c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   13a9c:	b580      	push	{r7, lr}
   13a9e:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   13aa0:	f644 2070 	movw	r0, #19056	; 0x4a70
   13aa4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13aa8:	f7ff f8c4 	bl	12c34 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   13aac:	900b      	str	r0, [sp, #44]	; 0x2c
   13aae:	910a      	str	r1, [sp, #40]	; 0x28
   13ab0:	e016      	b.n	13ae0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   13ab2:	2001      	movs	r0, #1
   13ab4:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   13ab8:	e00c      	b.n	13ad4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   13aba:	2000      	movs	r0, #0
   13abc:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   13ac0:	e008      	b.n	13ad4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   13ac2:	f644 2078 	movw	r0, #19064	; 0x4a78
   13ac6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13aca:	f7ff f8a7 	bl	12c1c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   13ace:	9009      	str	r0, [sp, #36]	; 0x24
   13ad0:	9108      	str	r1, [sp, #32]
   13ad2:	e00f      	b.n	13af4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   13ad4:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   13ad8:	07c0      	lsls	r0, r0, #31
   13ada:	2800      	cmp	r0, #0
   13adc:	d11d      	bne.n	13b1a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   13ade:	e013      	b.n	13b08 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   13ae0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13ae2:	990a      	ldr	r1, [sp, #40]	; 0x28
   13ae4:	f7fe fc4e 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13ae8:	9007      	str	r0, [sp, #28]
   13aea:	e7ff      	b.n	13aec <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   13aec:	9807      	ldr	r0, [sp, #28]
   13aee:	2800      	cmp	r0, #0
   13af0:	d0e7      	beq.n	13ac2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   13af2:	e7e2      	b.n	13aba <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   13af4:	9809      	ldr	r0, [sp, #36]	; 0x24
   13af6:	9908      	ldr	r1, [sp, #32]
   13af8:	f7fe fc44 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13afc:	9006      	str	r0, [sp, #24]
   13afe:	e7ff      	b.n	13b00 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   13b00:	9806      	ldr	r0, [sp, #24]
   13b02:	2800      	cmp	r0, #0
   13b04:	d0d5      	beq.n	13ab2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   13b06:	e7d8      	b.n	13aba <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   13b08:	f644 2070 	movw	r0, #19056	; 0x4a70
   13b0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13b10:	f7ff f890 	bl	12c34 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   13b14:	9005      	str	r0, [sp, #20]
   13b16:	9104      	str	r1, [sp, #16]
   13b18:	e007      	b.n	13b2a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   13b1a:	2000      	movs	r0, #0
        return Ok(());
   13b1c:	900c      	str	r0, [sp, #48]	; 0x30
   13b1e:	2001      	movs	r0, #1
   13b20:	900c      	str	r0, [sp, #48]	; 0x30
   13b22:	e7ff      	b.n	13b24 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   13b24:	980c      	ldr	r0, [sp, #48]	; 0x30
   13b26:	b010      	add	sp, #64	; 0x40
   13b28:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   13b2a:	9804      	ldr	r0, [sp, #16]
   13b2c:	2800      	cmp	r0, #0
   13b2e:	d03f      	beq.n	13bb0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   13b30:	e7ff      	b.n	13b32 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   13b32:	9805      	ldr	r0, [sp, #20]
   13b34:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   13b36:	f644 2078 	movw	r0, #19064	; 0x4a78
   13b3a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13b3e:	9103      	str	r1, [sp, #12]
   13b40:	f7ff f86c 	bl	12c1c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   13b44:	9002      	str	r0, [sp, #8]
   13b46:	9101      	str	r1, [sp, #4]
   13b48:	e7ff      	b.n	13b4a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   13b4a:	9803      	ldr	r0, [sp, #12]
   13b4c:	9902      	ldr	r1, [sp, #8]
   13b4e:	9a01      	ldr	r2, [sp, #4]
   13b50:	f000 f837 	bl	13bc2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   13b54:	900e      	str	r0, [sp, #56]	; 0x38
   13b56:	e7ff      	b.n	13b58 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   13b58:	980e      	ldr	r0, [sp, #56]	; 0x38
   13b5a:	2801      	cmp	r0, #1
   13b5c:	d107      	bne.n	13b6e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   13b5e:	e7ff      	b.n	13b60 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   13b60:	f644 2070 	movw	r0, #19056	; 0x4a70
   13b64:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13b68:	f7ff f890 	bl	12c8c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   13b6c:	e014      	b.n	13b98 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   13b6e:	980e      	ldr	r0, [sp, #56]	; 0x38
   13b70:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   13b72:	f644 2170 	movw	r1, #19056	; 0x4a70
   13b76:	f2c2 0100 	movt	r1, #8192	; 0x2000
   13b7a:	9000      	str	r0, [sp, #0]
   13b7c:	4608      	mov	r0, r1
   13b7e:	f7ff f885 	bl	12c8c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   13b82:	e7ff      	b.n	13b84 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   13b84:	f644 2078 	movw	r0, #19064	; 0x4a78
   13b88:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13b8c:	f7ff f886 	bl	12c9c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   13b90:	e7ff      	b.n	13b92 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   13b92:	9800      	ldr	r0, [sp, #0]
   13b94:	900c      	str	r0, [sp, #48]	; 0x30
   13b96:	e7c5      	b.n	13b24 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   13b98:	f644 2078 	movw	r0, #19064	; 0x4a78
   13b9c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13ba0:	f7ff f87c 	bl	12c9c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   13ba4:	e7ff      	b.n	13ba6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   13ba6:	2000      	movs	r0, #0
    Ok(())
   13ba8:	900c      	str	r0, [sp, #48]	; 0x30
   13baa:	2001      	movs	r0, #1
   13bac:	900c      	str	r0, [sp, #48]	; 0x30
}
   13bae:	e7b9      	b.n	13b24 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   13bb0:	f245 3098 	movw	r0, #21400	; 0x5398
   13bb4:	f2c0 0002 	movt	r0, #2
   13bb8:	2100      	movs	r1, #0
   13bba:	9a04      	ldr	r2, [sp, #16]
   13bbc:	f002 f8f6 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   13bc0:	defe      	udf	#254	; 0xfe

00013bc2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   13bc2:	b580      	push	{r7, lr}
   13bc4:	b0a0      	sub	sp, #128	; 0x80
   13bc6:	4603      	mov	r3, r0
   13bc8:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   13bcc:	9116      	str	r1, [sp, #88]	; 0x58
   13bce:	9217      	str	r2, [sp, #92]	; 0x5c
   13bd0:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   13bd4:	9018      	str	r0, [sp, #96]	; 0x60
   13bd6:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13bda:	fba0 0c0c 	umull	r0, ip, r0, ip
   13bde:	f1bc 0f00 	cmp.w	ip, #0
   13be2:	920f      	str	r2, [sp, #60]	; 0x3c
   13be4:	910e      	str	r1, [sp, #56]	; 0x38
   13be6:	900d      	str	r0, [sp, #52]	; 0x34
   13be8:	f040 80c8 	bne.w	13d7c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   13bec:	e7ff      	b.n	13bee <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   13bee:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13bf2:	f2c1 0062 	movt	r0, #4194	; 0x1062
   13bf6:	990d      	ldr	r1, [sp, #52]	; 0x34
   13bf8:	fba1 0200 	umull	r0, r2, r1, r0
   13bfc:	0991      	lsrs	r1, r2, #6
   13bfe:	f646 2284 	movw	r2, #27268	; 0x6a84
   13c02:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13c06:	900c      	str	r0, [sp, #48]	; 0x30
   13c08:	4610      	mov	r0, r2
   13c0a:	f006 f82f 	bl	19c6c <os_sem_pend>
   13c0e:	e7ff      	b.n	13c10 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   13c10:	980e      	ldr	r0, [sp, #56]	; 0x38
   13c12:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13c14:	f7fe fbb6 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13c18:	900b      	str	r0, [sp, #44]	; 0x2c
   13c1a:	e7ff      	b.n	13c1c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   13c1c:	2001      	movs	r0, #1
   13c1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13c20:	fa10 f081 	uxtah	r0, r0, r1
   13c24:	b282      	uxth	r2, r0
   13c26:	4603      	mov	r3, r0
   13c28:	4282      	cmp	r2, r0
   13c2a:	930a      	str	r3, [sp, #40]	; 0x28
   13c2c:	f040 80b2 	bne.w	13d94 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   13c30:	e7ff      	b.n	13c32 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   13c32:	980a      	ldr	r0, [sp, #40]	; 0x28
   13c34:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   13c38:	b280      	uxth	r0, r0
   13c3a:	2100      	movs	r1, #0
   13c3c:	f005 fd24 	bl	19688 <os_msys_get_pkthdr>
   13c40:	4601      	mov	r1, r0
   13c42:	901a      	str	r0, [sp, #104]	; 0x68
   13c44:	9109      	str	r1, [sp, #36]	; 0x24
   13c46:	e7ff      	b.n	13c48 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   13c48:	9809      	ldr	r0, [sp, #36]	; 0x24
   13c4a:	f000 ff17 	bl	14a7c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   13c4e:	9008      	str	r0, [sp, #32]
   13c50:	e7ff      	b.n	13c52 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   13c52:	9808      	ldr	r0, [sp, #32]
   13c54:	07c1      	lsls	r1, r0, #31
   13c56:	2900      	cmp	r1, #0
   13c58:	d106      	bne.n	13c68 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   13c5a:	e7ff      	b.n	13c5c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   13c5c:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   13c60:	901b      	str	r0, [sp, #108]	; 0x6c
   13c62:	991b      	ldr	r1, [sp, #108]	; 0x6c
   13c64:	9107      	str	r1, [sp, #28]
   13c66:	e010      	b.n	13c8a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13c68:	f646 2084 	movw	r0, #27268	; 0x6a84
   13c6c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13c70:	f005 ffca 	bl	19c08 <os_sem_release>
   13c74:	e7ff      	b.n	13c76 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   13c76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   13c7a:	9012      	str	r0, [sp, #72]	; 0x48
   13c7c:	9812      	ldr	r0, [sp, #72]	; 0x48
   13c7e:	9011      	str	r0, [sp, #68]	; 0x44
   13c80:	e002      	b.n	13c88 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   13c82:	9811      	ldr	r0, [sp, #68]	; 0x44
   13c84:	b020      	add	sp, #128	; 0x80
   13c86:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   13c88:	e7fb      	b.n	13c82 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   13c8a:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   13c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
   13c8e:	9907      	ldr	r1, [sp, #28]
   13c90:	f005 fb52 	bl	19338 <os_mbuf_append>
   13c94:	4601      	mov	r1, r0
   13c96:	901c      	str	r0, [sp, #112]	; 0x70
   13c98:	9106      	str	r1, [sp, #24]
   13c9a:	e7ff      	b.n	13c9c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   13c9c:	9806      	ldr	r0, [sp, #24]
   13c9e:	2800      	cmp	r0, #0
   13ca0:	d106      	bne.n	13cb0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   13ca2:	e7ff      	b.n	13ca4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   13ca4:	980e      	ldr	r0, [sp, #56]	; 0x38
   13ca6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13ca8:	f7fe fb74 	bl	12394 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   13cac:	9005      	str	r0, [sp, #20]
   13cae:	e011      	b.n	13cd4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   13cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
   13cb2:	f005 fb25 	bl	19300 <os_mbuf_free_chain>
   13cb6:	e7ff      	b.n	13cb8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13cb8:	f646 2084 	movw	r0, #27268	; 0x6a84
   13cbc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13cc0:	f005 ffa2 	bl	19c08 <os_sem_release>
   13cc4:	e7ff      	b.n	13cc6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   13cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   13cca:	9013      	str	r0, [sp, #76]	; 0x4c
   13ccc:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13cce:	9011      	str	r0, [sp, #68]	; 0x44
   13cd0:	e7ff      	b.n	13cd2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   13cd2:	e7d9      	b.n	13c88 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   13cd4:	9805      	ldr	r0, [sp, #20]
   13cd6:	901d      	str	r0, [sp, #116]	; 0x74
   13cd8:	991d      	ldr	r1, [sp, #116]	; 0x74
   13cda:	9104      	str	r1, [sp, #16]
   13cdc:	e7ff      	b.n	13cde <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   13cde:	980e      	ldr	r0, [sp, #56]	; 0x38
   13ce0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13ce2:	f7fe fb4f 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13ce6:	9003      	str	r0, [sp, #12]
   13ce8:	e7ff      	b.n	13cea <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   13cea:	9803      	ldr	r0, [sp, #12]
   13cec:	b282      	uxth	r2, r0
   13cee:	9809      	ldr	r0, [sp, #36]	; 0x24
   13cf0:	9904      	ldr	r1, [sp, #16]
   13cf2:	f005 fb21 	bl	19338 <os_mbuf_append>
   13cf6:	4601      	mov	r1, r0
   13cf8:	901e      	str	r0, [sp, #120]	; 0x78
   13cfa:	9102      	str	r1, [sp, #8]
   13cfc:	e7ff      	b.n	13cfe <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   13cfe:	9802      	ldr	r0, [sp, #8]
   13d00:	2800      	cmp	r0, #0
   13d02:	d10f      	bne.n	13d24 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   13d04:	e7ff      	b.n	13d06 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   13d06:	f646 208c 	movw	r0, #27276	; 0x6a8c
   13d0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13d0e:	f646 21a4 	movw	r1, #27300	; 0x6aa4
   13d12:	f2c2 0100 	movt	r1, #8192	; 0x2000
   13d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13d18:	f005 fa90 	bl	1923c <os_mqueue_put>
   13d1c:	4601      	mov	r1, r0
   13d1e:	901f      	str	r0, [sp, #124]	; 0x7c
   13d20:	9101      	str	r1, [sp, #4]
   13d22:	e011      	b.n	13d48 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   13d24:	9809      	ldr	r0, [sp, #36]	; 0x24
   13d26:	f005 faeb 	bl	19300 <os_mbuf_free_chain>
   13d2a:	e7ff      	b.n	13d2c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13d2c:	f646 2084 	movw	r0, #27268	; 0x6a84
   13d30:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13d34:	f005 ff68 	bl	19c08 <os_sem_release>
   13d38:	e7ff      	b.n	13d3a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   13d3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   13d3e:	9014      	str	r0, [sp, #80]	; 0x50
   13d40:	9814      	ldr	r0, [sp, #80]	; 0x50
   13d42:	9011      	str	r0, [sp, #68]	; 0x44
   13d44:	e7ff      	b.n	13d46 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   13d46:	e7c4      	b.n	13cd2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   13d48:	9801      	ldr	r0, [sp, #4]
   13d4a:	2800      	cmp	r0, #0
   13d4c:	d105      	bne.n	13d5a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   13d4e:	e7ff      	b.n	13d50 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   13d50:	2000      	movs	r0, #0
    Ok(())
   13d52:	9011      	str	r0, [sp, #68]	; 0x44
   13d54:	2001      	movs	r0, #1
   13d56:	9011      	str	r0, [sp, #68]	; 0x44
}
   13d58:	e793      	b.n	13c82 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   13d5a:	9809      	ldr	r0, [sp, #36]	; 0x24
   13d5c:	f005 fad0 	bl	19300 <os_mbuf_free_chain>
   13d60:	e7ff      	b.n	13d62 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13d62:	f646 2084 	movw	r0, #27268	; 0x6a84
   13d66:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13d6a:	f005 ff4d 	bl	19c08 <os_sem_release>
   13d6e:	e7ff      	b.n	13d70 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   13d70:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   13d74:	9015      	str	r0, [sp, #84]	; 0x54
   13d76:	9815      	ldr	r0, [sp, #84]	; 0x54
   13d78:	9011      	str	r0, [sp, #68]	; 0x44
   13d7a:	e7e4      	b.n	13d46 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13d7c:	f245 30c0 	movw	r0, #21440	; 0x53c0
   13d80:	f2c0 0002 	movt	r0, #2
   13d84:	f245 32a8 	movw	r2, #21416	; 0x53a8
   13d88:	f2c0 0202 	movt	r2, #2
   13d8c:	2121      	movs	r1, #33	; 0x21
   13d8e:	f001 fff7 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13d92:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   13d94:	f245 3060 	movw	r0, #21344	; 0x5360
   13d98:	f2c0 0002 	movt	r0, #2
   13d9c:	f245 32e4 	movw	r2, #21476	; 0x53e4
   13da0:	f2c0 0202 	movt	r2, #2
   13da4:	211c      	movs	r1, #28
   13da6:	f001 ffeb 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13daa:	defe      	udf	#254	; 0xfe

00013dac <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   13dac:	b5b0      	push	{r4, r5, r7, lr}
   13dae:	b0c4      	sub	sp, #272	; 0x110
   13db0:	9038      	str	r0, [sp, #224]	; 0xe0
   13db2:	e7ff      	b.n	13db4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   13db4:	f646 208c 	movw	r0, #27276	; 0x6a8c
   13db8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13dbc:	f005 fa2b 	bl	19216 <os_mqueue_get>
   13dc0:	4601      	mov	r1, r0
   13dc2:	9039      	str	r0, [sp, #228]	; 0xe4
   13dc4:	911b      	str	r1, [sp, #108]	; 0x6c
   13dc6:	e7ff      	b.n	13dc8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   13dc8:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13dca:	f000 fe57 	bl	14a7c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   13dce:	901a      	str	r0, [sp, #104]	; 0x68
   13dd0:	e7ff      	b.n	13dd2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   13dd2:	981a      	ldr	r0, [sp, #104]	; 0x68
   13dd4:	07c1      	lsls	r1, r0, #31
   13dd6:	2900      	cmp	r1, #0
   13dd8:	d106      	bne.n	13de8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   13dda:	e7ff      	b.n	13ddc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   13ddc:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13dde:	901c      	str	r0, [sp, #112]	; 0x70
   13de0:	2101      	movs	r1, #1
        let mut first_byte = true;
   13de2:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   13de6:	e001      	b.n	13dec <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   13de8:	b044      	add	sp, #272	; 0x110
   13dea:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   13dec:	981c      	ldr	r0, [sp, #112]	; 0x70
   13dee:	f000 fe45 	bl	14a7c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   13df2:	9019      	str	r0, [sp, #100]	; 0x64
   13df4:	e7ff      	b.n	13df6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   13df6:	9819      	ldr	r0, [sp, #100]	; 0x64
   13df8:	07c1      	lsls	r1, r0, #31
   13dfa:	2900      	cmp	r1, #0
   13dfc:	d004      	beq.n	13e08 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   13dfe:	e7ff      	b.n	13e00 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   13e00:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13e02:	f005 fa7d 	bl	19300 <os_mbuf_free_chain>
   13e06:	e0aa      	b.n	13f5e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   13e08:	981c      	ldr	r0, [sp, #112]	; 0x70
   13e0a:	6800      	ldr	r0, [r0, #0]
   13e0c:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   13e0e:	991c      	ldr	r1, [sp, #112]	; 0x70
   13e10:	88c9      	ldrh	r1, [r1, #6]
   13e12:	460a      	mov	r2, r1
   13e14:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13e18:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   13e1c:	07c9      	lsls	r1, r1, #31
   13e1e:	2900      	cmp	r1, #0
   13e20:	9018      	str	r0, [sp, #96]	; 0x60
   13e22:	9217      	str	r2, [sp, #92]	; 0x5c
   13e24:	d105      	bne.n	13e32 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   13e26:	e7ff      	b.n	13e28 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   13e28:	9818      	ldr	r0, [sp, #96]	; 0x60
   13e2a:	903e      	str	r0, [sp, #248]	; 0xf8
   13e2c:	983e      	ldr	r0, [sp, #248]	; 0xf8
   13e2e:	9016      	str	r0, [sp, #88]	; 0x58
   13e30:	e07b      	b.n	13f2a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   13e32:	2000      	movs	r0, #0
                first_byte = false;
   13e34:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   13e38:	9818      	ldr	r0, [sp, #96]	; 0x60
   13e3a:	903c      	str	r0, [sp, #240]	; 0xf0
   13e3c:	983c      	ldr	r0, [sp, #240]	; 0xf0
   13e3e:	9015      	str	r0, [sp, #84]	; 0x54
   13e40:	e7ff      	b.n	13e42 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   13e42:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   13e44:	9915      	ldr	r1, [sp, #84]	; 0x54
   13e46:	9014      	str	r0, [sp, #80]	; 0x50
   13e48:	4608      	mov	r0, r1
   13e4a:	9914      	ldr	r1, [sp, #80]	; 0x50
   13e4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13e4e:	f000 f921 	bl	14094 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13e52:	9013      	str	r0, [sp, #76]	; 0x4c
   13e54:	e7ff      	b.n	13e56 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   13e56:	f245 31f4 	movw	r1, #21492	; 0x53f4
   13e5a:	f2c0 0102 	movt	r1, #2
   13e5e:	f245 4300 	movw	r3, #21504	; 0x5400
   13e62:	f2c0 0302 	movt	r3, #2
   13e66:	220c      	movs	r2, #12
   13e68:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13e6a:	f7f4 feca 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13e6e:	e7ff      	b.n	13e70 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   13e70:	9818      	ldr	r0, [sp, #96]	; 0x60
   13e72:	7801      	ldrb	r1, [r0, #0]
   13e74:	2901      	cmp	r1, #1
   13e76:	d013      	beq.n	13ea0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   13e78:	e01a      	b.n	13eb0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   13e7a:	2001      	movs	r0, #1
   13e7c:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   13e80:	e008      	b.n	13e94 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   13e82:	2000      	movs	r0, #0
   13e84:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   13e88:	e004      	b.n	13e94 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   13e8a:	9818      	ldr	r0, [sp, #96]	; 0x60
   13e8c:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   13e8e:	2929      	cmp	r1, #41	; 0x29
   13e90:	d0f3      	beq.n	13e7a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   13e92:	e7f6      	b.n	13e82 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   13e94:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   13e98:	07c0      	lsls	r0, r0, #31
   13e9a:	2800      	cmp	r0, #0
   13e9c:	d113      	bne.n	13ec6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   13e9e:	e017      	b.n	13ed0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   13ea0:	2001      	movs	r0, #1
   13ea2:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   13ea6:	e008      	b.n	13eba <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   13ea8:	2000      	movs	r0, #0
   13eaa:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   13eae:	e004      	b.n	13eba <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   13eb0:	9818      	ldr	r0, [sp, #96]	; 0x60
   13eb2:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   13eb4:	2911      	cmp	r1, #17
   13eb6:	d0f3      	beq.n	13ea0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   13eb8:	e7f6      	b.n	13ea8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   13eba:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   13ebe:	07c0      	lsls	r0, r0, #31
   13ec0:	2800      	cmp	r0, #0
   13ec2:	d1da      	bne.n	13e7a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   13ec4:	e7e1      	b.n	13e8a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   13ec6:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   13ec8:	f000 fb13 	bl	144f2 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   13ecc:	e7ff      	b.n	13ece <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   13ece:	e7ff      	b.n	13ed0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   13ed0:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   13ed2:	9818      	ldr	r0, [sp, #96]	; 0x60
   13ed4:	f7fe f9c6 	bl	12264 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   13ed8:	9012      	str	r0, [sp, #72]	; 0x48
   13eda:	e7ff      	b.n	13edc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   13edc:	9812      	ldr	r0, [sp, #72]	; 0x48
   13ede:	903d      	str	r0, [sp, #244]	; 0xf4
   13ee0:	983d      	ldr	r0, [sp, #244]	; 0xf4
   13ee2:	9011      	str	r0, [sp, #68]	; 0x44
   13ee4:	e7ff      	b.n	13ee6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   13ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   13eea:	9917      	ldr	r1, [sp, #92]	; 0x5c
   13eec:	fa10 f081 	uxtah	r0, r0, r1
   13ef0:	b282      	uxth	r2, r0
   13ef2:	4603      	mov	r3, r0
   13ef4:	4282      	cmp	r2, r0
   13ef6:	9310      	str	r3, [sp, #64]	; 0x40
   13ef8:	f040 80c0 	bne.w	1407c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   13efc:	e7ff      	b.n	13efe <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   13efe:	9810      	ldr	r0, [sp, #64]	; 0x40
   13f00:	b281      	uxth	r1, r0
   13f02:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13f04:	9811      	ldr	r0, [sp, #68]	; 0x44
   13f06:	f000 f8c5 	bl	14094 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13f0a:	900f      	str	r0, [sp, #60]	; 0x3c
   13f0c:	e7ff      	b.n	13f0e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   13f0e:	f245 31f4 	movw	r1, #21492	; 0x53f4
   13f12:	f2c0 0102 	movt	r1, #2
   13f16:	f245 4344 	movw	r3, #21572	; 0x5444
   13f1a:	f2c0 0302 	movt	r3, #2
   13f1e:	220c      	movs	r2, #12
   13f20:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13f22:	f7f4 fe6e 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13f26:	e7ff      	b.n	13f28 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13f28:	e015      	b.n	13f56 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   13f2a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   13f2c:	b281      	uxth	r1, r0
   13f2e:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13f30:	9816      	ldr	r0, [sp, #88]	; 0x58
   13f32:	f000 f8af 	bl	14094 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13f36:	900e      	str	r0, [sp, #56]	; 0x38
   13f38:	e7ff      	b.n	13f3a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   13f3a:	f245 31f4 	movw	r1, #21492	; 0x53f4
   13f3e:	f2c0 0102 	movt	r1, #2
   13f42:	f245 4354 	movw	r3, #21588	; 0x5454
   13f46:	f2c0 0302 	movt	r3, #2
   13f4a:	220c      	movs	r2, #12
   13f4c:	980e      	ldr	r0, [sp, #56]	; 0x38
   13f4e:	f7f4 fe58 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13f52:	e7ff      	b.n	13f54 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13f54:	e7ff      	b.n	13f56 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   13f56:	981c      	ldr	r0, [sp, #112]	; 0x70
   13f58:	68c0      	ldr	r0, [r0, #12]
   13f5a:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   13f5c:	e746      	b.n	13dec <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   13f5e:	f646 2084 	movw	r0, #27268	; 0x6a84
   13f62:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13f66:	f005 fe4f 	bl	19c08 <os_sem_release>
   13f6a:	901e      	str	r0, [sp, #120]	; 0x78
   13f6c:	e7ff      	b.n	13f6e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   13f6e:	f245 1068 	movw	r0, #20840	; 0x5168
   13f72:	f2c0 0002 	movt	r0, #2
   13f76:	6800      	ldr	r0, [r0, #0]
   13f78:	a91e      	add	r1, sp, #120	; 0x78
   13f7a:	911f      	str	r1, [sp, #124]	; 0x7c
   13f7c:	9020      	str	r0, [sp, #128]	; 0x80
   13f7e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13f80:	903f      	str	r0, [sp, #252]	; 0xfc
   13f82:	9920      	ldr	r1, [sp, #128]	; 0x80
   13f84:	9140      	str	r1, [sp, #256]	; 0x100
   13f86:	6802      	ldr	r2, [r0, #0]
   13f88:	680b      	ldr	r3, [r1, #0]
   13f8a:	429a      	cmp	r2, r3
   13f8c:	900d      	str	r0, [sp, #52]	; 0x34
   13f8e:	910c      	str	r1, [sp, #48]	; 0x30
   13f90:	d101      	bne.n	13f96 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   13f92:	e7ff      	b.n	13f94 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   13f94:	e70e      	b.n	13db4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   13f96:	f245 10c0 	movw	r0, #20928	; 0x51c0
   13f9a:	f2c0 0002 	movt	r0, #2
   13f9e:	6801      	ldr	r1, [r0, #0]
   13fa0:	980d      	ldr	r0, [sp, #52]	; 0x34
   13fa2:	9030      	str	r0, [sp, #192]	; 0xc0
   13fa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13fa6:	9231      	str	r2, [sp, #196]	; 0xc4
   13fa8:	f245 23d8 	movw	r3, #21208	; 0x52d8
   13fac:	f2c0 0302 	movt	r3, #2
   13fb0:	681b      	ldr	r3, [r3, #0]
   13fb2:	f245 1ce0 	movw	ip, #20960	; 0x51e0
   13fb6:	f2c0 0c02 	movt	ip, #2
   13fba:	f8dc c000 	ldr.w	ip, [ip]
   13fbe:	46ee      	mov	lr, sp
   13fc0:	2400      	movs	r4, #0
   13fc2:	f8ce 4000 	str.w	r4, [lr]
   13fc6:	a832      	add	r0, sp, #200	; 0xc8
   13fc8:	2201      	movs	r2, #1
   13fca:	910b      	str	r1, [sp, #44]	; 0x2c
   13fcc:	4619      	mov	r1, r3
   13fce:	4663      	mov	r3, ip
   13fd0:	f7f4 fde8 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13fd4:	e7ff      	b.n	13fd6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   13fd6:	a830      	add	r0, sp, #192	; 0xc0
   13fd8:	902d      	str	r0, [sp, #180]	; 0xb4
   13fda:	a831      	add	r0, sp, #196	; 0xc4
   13fdc:	902e      	str	r0, [sp, #184]	; 0xb8
   13fde:	a832      	add	r0, sp, #200	; 0xc8
   13fe0:	902f      	str	r0, [sp, #188]	; 0xbc
   13fe2:	982d      	ldr	r0, [sp, #180]	; 0xb4
   13fe4:	9041      	str	r0, [sp, #260]	; 0x104
   13fe6:	992e      	ldr	r1, [sp, #184]	; 0xb8
   13fe8:	9142      	str	r1, [sp, #264]	; 0x108
   13fea:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   13fec:	9243      	str	r2, [sp, #268]	; 0x10c
   13fee:	f249 4347 	movw	r3, #37959	; 0x9447
   13ff2:	f2c0 0300 	movt	r3, #0
   13ff6:	910a      	str	r1, [sp, #40]	; 0x28
   13ff8:	4619      	mov	r1, r3
   13ffa:	9209      	str	r2, [sp, #36]	; 0x24
   13ffc:	f7f5 fa5b 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14000:	9008      	str	r0, [sp, #32]
   14002:	9107      	str	r1, [sp, #28]
   14004:	e7ff      	b.n	14006 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   14006:	f249 4147 	movw	r1, #37959	; 0x9447
   1400a:	f2c0 0100 	movt	r1, #0
   1400e:	980a      	ldr	r0, [sp, #40]	; 0x28
   14010:	f7f5 fa51 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14014:	9006      	str	r0, [sp, #24]
   14016:	9105      	str	r1, [sp, #20]
   14018:	e7ff      	b.n	1401a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   1401a:	f246 314f 	movw	r1, #25423	; 0x634f
   1401e:	f2c0 0101 	movt	r1, #1
   14022:	9809      	ldr	r0, [sp, #36]	; 0x24
   14024:	f7f5 fa5c 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14028:	9004      	str	r0, [sp, #16]
   1402a:	9103      	str	r1, [sp, #12]
   1402c:	e7ff      	b.n	1402e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   1402e:	9808      	ldr	r0, [sp, #32]
   14030:	9027      	str	r0, [sp, #156]	; 0x9c
   14032:	9907      	ldr	r1, [sp, #28]
   14034:	9128      	str	r1, [sp, #160]	; 0xa0
   14036:	9a06      	ldr	r2, [sp, #24]
   14038:	9229      	str	r2, [sp, #164]	; 0xa4
   1403a:	9b05      	ldr	r3, [sp, #20]
   1403c:	932a      	str	r3, [sp, #168]	; 0xa8
   1403e:	f8dd c010 	ldr.w	ip, [sp, #16]
   14042:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   14046:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1404a:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   1404e:	466c      	mov	r4, sp
   14050:	2503      	movs	r5, #3
   14052:	6025      	str	r5, [r4, #0]
   14054:	a821      	add	r0, sp, #132	; 0x84
   14056:	ab27      	add	r3, sp, #156	; 0x9c
   14058:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1405a:	462a      	mov	r2, r5
   1405c:	f7f4 fda2 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14060:	e7ff      	b.n	14062 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   14062:	f245 4064 	movw	r0, #21604	; 0x5464
   14066:	f2c0 0002 	movt	r0, #2
   1406a:	f001 fe82 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1406e:	9002      	str	r0, [sp, #8]
   14070:	e7ff      	b.n	14072 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   14072:	a821      	add	r0, sp, #132	; 0x84
   14074:	9902      	ldr	r1, [sp, #8]
   14076:	f001 feb9 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1407a:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   1407c:	f245 4020 	movw	r0, #21536	; 0x5420
   14080:	f2c0 0002 	movt	r0, #2
   14084:	f245 4210 	movw	r2, #21520	; 0x5410
   14088:	f2c0 0202 	movt	r2, #2
   1408c:	2121      	movs	r1, #33	; 0x21
   1408e:	f001 fe77 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14092:	defe      	udf	#254	; 0xfe

00014094 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   14094:	b5b0      	push	{r4, r5, r7, lr}
   14096:	b0e8      	sub	sp, #416	; 0x1a0
   14098:	4613      	mov	r3, r2
   1409a:	9058      	str	r0, [sp, #352]	; 0x160
   1409c:	9159      	str	r1, [sp, #356]	; 0x164
   1409e:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   140a2:	2900      	cmp	r1, #0
   140a4:	9121      	str	r1, [sp, #132]	; 0x84
   140a6:	9020      	str	r0, [sp, #128]	; 0x80
   140a8:	931f      	str	r3, [sp, #124]	; 0x7c
   140aa:	d004      	beq.n	140b6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   140ac:	e7ff      	b.n	140ae <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   140ae:	9821      	ldr	r0, [sp, #132]	; 0x84
   140b0:	2801      	cmp	r0, #1
   140b2:	db0d      	blt.n	140d0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   140b4:	e007      	b.n	140c6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   140b6:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   140b8:	9022      	str	r0, [sp, #136]	; 0x88
   140ba:	2001      	movs	r0, #1
   140bc:	9022      	str	r0, [sp, #136]	; 0x88
   140be:	e7ff      	b.n	140c0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   140c0:	9822      	ldr	r0, [sp, #136]	; 0x88
   140c2:	b068      	add	sp, #416	; 0x1a0
   140c4:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   140c6:	981f      	ldr	r0, [sp, #124]	; 0x7c
   140c8:	07c1      	lsls	r1, r0, #31
   140ca:	2900      	cmp	r1, #0
   140cc:	d10f      	bne.n	140ee <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   140ce:	e00b      	b.n	140e8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   140d0:	f245 4074 	movw	r0, #21620	; 0x5474
   140d4:	f2c0 0002 	movt	r0, #2
   140d8:	f245 4280 	movw	r2, #21632	; 0x5480
   140dc:	f2c0 0202 	movt	r2, #2
   140e0:	210b      	movs	r1, #11
   140e2:	f001 fe4d 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   140e6:	defe      	udf	#254	; 0xfe
   140e8:	2001      	movs	r0, #1
        else { 1 }
   140ea:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   140ec:	e002      	b.n	140f4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   140ee:	2000      	movs	r0, #0
   140f0:	9023      	str	r0, [sp, #140]	; 0x8c
   140f2:	e7ff      	b.n	140f4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   140f4:	9923      	ldr	r1, [sp, #140]	; 0x8c
   140f6:	2012      	movs	r0, #18
   140f8:	f003 fee8 	bl	17ecc <hal_gpio_write>
   140fc:	e7ff      	b.n	140fe <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   140fe:	2019      	movs	r0, #25
   14100:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   14102:	f003 fee3 	bl	17ecc <hal_gpio_write>
   14106:	e7ff      	b.n	14108 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   14108:	9821      	ldr	r0, [sp, #132]	; 0x84
   1410a:	2801      	cmp	r0, #1
   1410c:	d005      	beq.n	1411a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   1410e:	e7ff      	b.n	14110 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   14110:	9820      	ldr	r0, [sp, #128]	; 0x80
   14112:	9061      	str	r0, [sp, #388]	; 0x184
   14114:	9961      	ldr	r1, [sp, #388]	; 0x184
   14116:	911e      	str	r1, [sp, #120]	; 0x78
   14118:	e094      	b.n	14244 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   1411a:	9820      	ldr	r0, [sp, #128]	; 0x80
   1411c:	905b      	str	r0, [sp, #364]	; 0x16c
   1411e:	995b      	ldr	r1, [sp, #364]	; 0x16c
   14120:	911d      	str	r1, [sp, #116]	; 0x74
   14122:	e7ff      	b.n	14124 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   14124:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   14126:	901c      	str	r0, [sp, #112]	; 0x70
   14128:	991d      	ldr	r1, [sp, #116]	; 0x74
   1412a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1412c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1412e:	f004 fb7b 	bl	18828 <hal_spi_txrx>
   14132:	9024      	str	r0, [sp, #144]	; 0x90
   14134:	e7ff      	b.n	14136 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14136:	f245 1068 	movw	r0, #20840	; 0x5168
   1413a:	f2c0 0002 	movt	r0, #2
   1413e:	6800      	ldr	r0, [r0, #0]
   14140:	a924      	add	r1, sp, #144	; 0x90
   14142:	9125      	str	r1, [sp, #148]	; 0x94
   14144:	9026      	str	r0, [sp, #152]	; 0x98
   14146:	9825      	ldr	r0, [sp, #148]	; 0x94
   14148:	905c      	str	r0, [sp, #368]	; 0x170
   1414a:	9926      	ldr	r1, [sp, #152]	; 0x98
   1414c:	915d      	str	r1, [sp, #372]	; 0x174
   1414e:	6802      	ldr	r2, [r0, #0]
   14150:	680b      	ldr	r3, [r1, #0]
   14152:	429a      	cmp	r2, r3
   14154:	901b      	str	r0, [sp, #108]	; 0x6c
   14156:	911a      	str	r1, [sp, #104]	; 0x68
   14158:	d101      	bne.n	1415e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   1415a:	e7ff      	b.n	1415c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   1415c:	e11f      	b.n	1439e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   1415e:	f245 10c0 	movw	r0, #20928	; 0x51c0
   14162:	f2c0 0002 	movt	r0, #2
   14166:	6801      	ldr	r1, [r0, #0]
   14168:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1416a:	9036      	str	r0, [sp, #216]	; 0xd8
   1416c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1416e:	9237      	str	r2, [sp, #220]	; 0xdc
   14170:	f245 4398 	movw	r3, #21656	; 0x5498
   14174:	f2c0 0302 	movt	r3, #2
   14178:	681b      	ldr	r3, [r3, #0]
   1417a:	f245 1ce0 	movw	ip, #20960	; 0x51e0
   1417e:	f2c0 0c02 	movt	ip, #2
   14182:	f8dc c000 	ldr.w	ip, [ip]
   14186:	46ee      	mov	lr, sp
   14188:	2400      	movs	r4, #0
   1418a:	f8ce 4000 	str.w	r4, [lr]
   1418e:	a838      	add	r0, sp, #224	; 0xe0
   14190:	2201      	movs	r2, #1
   14192:	9119      	str	r1, [sp, #100]	; 0x64
   14194:	4619      	mov	r1, r3
   14196:	4663      	mov	r3, ip
   14198:	f7f4 fd04 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1419c:	e7ff      	b.n	1419e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   1419e:	a836      	add	r0, sp, #216	; 0xd8
   141a0:	9033      	str	r0, [sp, #204]	; 0xcc
   141a2:	a837      	add	r0, sp, #220	; 0xdc
   141a4:	9034      	str	r0, [sp, #208]	; 0xd0
   141a6:	a838      	add	r0, sp, #224	; 0xe0
   141a8:	9035      	str	r0, [sp, #212]	; 0xd4
   141aa:	9833      	ldr	r0, [sp, #204]	; 0xcc
   141ac:	905e      	str	r0, [sp, #376]	; 0x178
   141ae:	9934      	ldr	r1, [sp, #208]	; 0xd0
   141b0:	915f      	str	r1, [sp, #380]	; 0x17c
   141b2:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   141b4:	9260      	str	r2, [sp, #384]	; 0x180
   141b6:	f249 33f3 	movw	r3, #37875	; 0x93f3
   141ba:	f2c0 0300 	movt	r3, #0
   141be:	9118      	str	r1, [sp, #96]	; 0x60
   141c0:	4619      	mov	r1, r3
   141c2:	9217      	str	r2, [sp, #92]	; 0x5c
   141c4:	f7f5 f94d 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   141c8:	9016      	str	r0, [sp, #88]	; 0x58
   141ca:	9115      	str	r1, [sp, #84]	; 0x54
   141cc:	e7ff      	b.n	141ce <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   141ce:	f249 31f3 	movw	r1, #37875	; 0x93f3
   141d2:	f2c0 0100 	movt	r1, #0
   141d6:	9818      	ldr	r0, [sp, #96]	; 0x60
   141d8:	f7f5 f943 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   141dc:	9014      	str	r0, [sp, #80]	; 0x50
   141de:	9113      	str	r1, [sp, #76]	; 0x4c
   141e0:	e7ff      	b.n	141e2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   141e2:	f246 314f 	movw	r1, #25423	; 0x634f
   141e6:	f2c0 0101 	movt	r1, #1
   141ea:	9817      	ldr	r0, [sp, #92]	; 0x5c
   141ec:	f7f5 f978 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   141f0:	9012      	str	r0, [sp, #72]	; 0x48
   141f2:	9111      	str	r1, [sp, #68]	; 0x44
   141f4:	e7ff      	b.n	141f6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   141f6:	9816      	ldr	r0, [sp, #88]	; 0x58
   141f8:	902d      	str	r0, [sp, #180]	; 0xb4
   141fa:	9915      	ldr	r1, [sp, #84]	; 0x54
   141fc:	912e      	str	r1, [sp, #184]	; 0xb8
   141fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14200:	922f      	str	r2, [sp, #188]	; 0xbc
   14202:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14204:	9330      	str	r3, [sp, #192]	; 0xc0
   14206:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   1420a:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   1420e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   14212:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   14216:	466c      	mov	r4, sp
   14218:	2503      	movs	r5, #3
   1421a:	6025      	str	r5, [r4, #0]
   1421c:	a827      	add	r0, sp, #156	; 0x9c
   1421e:	ab2d      	add	r3, sp, #180	; 0xb4
   14220:	9919      	ldr	r1, [sp, #100]	; 0x64
   14222:	462a      	mov	r2, r5
   14224:	f7f4 fcbe 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14228:	e7ff      	b.n	1422a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   1422a:	f245 409c 	movw	r0, #21660	; 0x549c
   1422e:	f2c0 0002 	movt	r0, #2
   14232:	f001 fd9e 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14236:	9010      	str	r0, [sp, #64]	; 0x40
   14238:	e7ff      	b.n	1423a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   1423a:	a827      	add	r0, sp, #156	; 0x9c
   1423c:	9910      	ldr	r1, [sp, #64]	; 0x40
   1423e:	f001 fdd5 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14242:	defe      	udf	#254	; 0xfe
   14244:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   14246:	900f      	str	r0, [sp, #60]	; 0x3c
   14248:	991e      	ldr	r1, [sp, #120]	; 0x78
   1424a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1424c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1424e:	f004 fb41 	bl	188d4 <hal_spi_txrx_noblock>
   14252:	903e      	str	r0, [sp, #248]	; 0xf8
   14254:	e7ff      	b.n	14256 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14256:	f245 1068 	movw	r0, #20840	; 0x5168
   1425a:	f2c0 0002 	movt	r0, #2
   1425e:	6800      	ldr	r0, [r0, #0]
   14260:	a93e      	add	r1, sp, #248	; 0xf8
   14262:	913f      	str	r1, [sp, #252]	; 0xfc
   14264:	9040      	str	r0, [sp, #256]	; 0x100
   14266:	983f      	ldr	r0, [sp, #252]	; 0xfc
   14268:	9062      	str	r0, [sp, #392]	; 0x188
   1426a:	9940      	ldr	r1, [sp, #256]	; 0x100
   1426c:	9163      	str	r1, [sp, #396]	; 0x18c
   1426e:	6802      	ldr	r2, [r0, #0]
   14270:	680b      	ldr	r3, [r1, #0]
   14272:	429a      	cmp	r2, r3
   14274:	900e      	str	r0, [sp, #56]	; 0x38
   14276:	910d      	str	r1, [sp, #52]	; 0x34
   14278:	d10c      	bne.n	14294 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   1427a:	e7ff      	b.n	1427c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   1427c:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   14280:	9067      	str	r0, [sp, #412]	; 0x19c
   14282:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   14286:	fba0 0101 	umull	r0, r1, r0, r1
   1428a:	2900      	cmp	r1, #0
   1428c:	900c      	str	r0, [sp, #48]	; 0x30
   1428e:	f040 8090 	bne.w	143b2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   14292:	e072      	b.n	1437a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14294:	f245 10c0 	movw	r0, #20928	; 0x51c0
   14298:	f2c0 0002 	movt	r0, #2
   1429c:	6801      	ldr	r1, [r0, #0]
   1429e:	980e      	ldr	r0, [sp, #56]	; 0x38
   142a0:	9050      	str	r0, [sp, #320]	; 0x140
   142a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   142a4:	9251      	str	r2, [sp, #324]	; 0x144
   142a6:	f245 4398 	movw	r3, #21656	; 0x5498
   142aa:	f2c0 0302 	movt	r3, #2
   142ae:	681b      	ldr	r3, [r3, #0]
   142b0:	f245 1ce0 	movw	ip, #20960	; 0x51e0
   142b4:	f2c0 0c02 	movt	ip, #2
   142b8:	f8dc c000 	ldr.w	ip, [ip]
   142bc:	46ee      	mov	lr, sp
   142be:	2400      	movs	r4, #0
   142c0:	f8ce 4000 	str.w	r4, [lr]
   142c4:	a852      	add	r0, sp, #328	; 0x148
   142c6:	2201      	movs	r2, #1
   142c8:	910b      	str	r1, [sp, #44]	; 0x2c
   142ca:	4619      	mov	r1, r3
   142cc:	4663      	mov	r3, ip
   142ce:	f7f4 fc69 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   142d2:	e7ff      	b.n	142d4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   142d4:	a850      	add	r0, sp, #320	; 0x140
   142d6:	904d      	str	r0, [sp, #308]	; 0x134
   142d8:	a851      	add	r0, sp, #324	; 0x144
   142da:	904e      	str	r0, [sp, #312]	; 0x138
   142dc:	a852      	add	r0, sp, #328	; 0x148
   142de:	904f      	str	r0, [sp, #316]	; 0x13c
   142e0:	984d      	ldr	r0, [sp, #308]	; 0x134
   142e2:	9064      	str	r0, [sp, #400]	; 0x190
   142e4:	994e      	ldr	r1, [sp, #312]	; 0x138
   142e6:	9165      	str	r1, [sp, #404]	; 0x194
   142e8:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   142ea:	9266      	str	r2, [sp, #408]	; 0x198
   142ec:	f249 33f3 	movw	r3, #37875	; 0x93f3
   142f0:	f2c0 0300 	movt	r3, #0
   142f4:	910a      	str	r1, [sp, #40]	; 0x28
   142f6:	4619      	mov	r1, r3
   142f8:	9209      	str	r2, [sp, #36]	; 0x24
   142fa:	f7f5 f8b2 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   142fe:	9008      	str	r0, [sp, #32]
   14300:	9107      	str	r1, [sp, #28]
   14302:	e7ff      	b.n	14304 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   14304:	f249 31f3 	movw	r1, #37875	; 0x93f3
   14308:	f2c0 0100 	movt	r1, #0
   1430c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1430e:	f7f5 f8a8 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14312:	9006      	str	r0, [sp, #24]
   14314:	9105      	str	r1, [sp, #20]
   14316:	e7ff      	b.n	14318 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   14318:	f246 314f 	movw	r1, #25423	; 0x634f
   1431c:	f2c0 0101 	movt	r1, #1
   14320:	9809      	ldr	r0, [sp, #36]	; 0x24
   14322:	f7f5 f8dd 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14326:	9004      	str	r0, [sp, #16]
   14328:	9103      	str	r1, [sp, #12]
   1432a:	e7ff      	b.n	1432c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   1432c:	9808      	ldr	r0, [sp, #32]
   1432e:	9047      	str	r0, [sp, #284]	; 0x11c
   14330:	9907      	ldr	r1, [sp, #28]
   14332:	9148      	str	r1, [sp, #288]	; 0x120
   14334:	9a06      	ldr	r2, [sp, #24]
   14336:	9249      	str	r2, [sp, #292]	; 0x124
   14338:	9b05      	ldr	r3, [sp, #20]
   1433a:	934a      	str	r3, [sp, #296]	; 0x128
   1433c:	f8dd c010 	ldr.w	ip, [sp, #16]
   14340:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   14344:	f8dd e00c 	ldr.w	lr, [sp, #12]
   14348:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   1434c:	466c      	mov	r4, sp
   1434e:	2503      	movs	r5, #3
   14350:	6025      	str	r5, [r4, #0]
   14352:	a841      	add	r0, sp, #260	; 0x104
   14354:	ab47      	add	r3, sp, #284	; 0x11c
   14356:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14358:	462a      	mov	r2, r5
   1435a:	f7f4 fc23 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1435e:	e7ff      	b.n	14360 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   14360:	f245 40ac 	movw	r0, #21676	; 0x54ac
   14364:	f2c0 0002 	movt	r0, #2
   14368:	f001 fd03 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1436c:	9002      	str	r0, [sp, #8]
   1436e:	e7ff      	b.n	14370 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   14370:	a841      	add	r0, sp, #260	; 0x104
   14372:	9902      	ldr	r1, [sp, #8]
   14374:	f001 fd3a 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14378:	defe      	udf	#254	; 0xfe
   1437a:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   1437e:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   14382:	990c      	ldr	r1, [sp, #48]	; 0x30
   14384:	fba1 0200 	umull	r0, r2, r1, r0
   14388:	0991      	lsrs	r1, r2, #6
   1438a:	f646 227c 	movw	r2, #27260	; 0x6a7c
   1438e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14392:	9001      	str	r0, [sp, #4]
   14394:	4610      	mov	r0, r2
   14396:	f005 fc69 	bl	19c6c <os_sem_pend>
   1439a:	e7ff      	b.n	1439c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   1439c:	e7ff      	b.n	1439e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   1439e:	2019      	movs	r0, #25
   143a0:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   143a2:	f003 fd93 	bl	17ecc <hal_gpio_write>
   143a6:	e7ff      	b.n	143a8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   143a8:	2000      	movs	r0, #0
    Ok(())
   143aa:	9022      	str	r0, [sp, #136]	; 0x88
   143ac:	2001      	movs	r0, #1
   143ae:	9022      	str	r0, [sp, #136]	; 0x88
}
   143b0:	e686      	b.n	140c0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   143b2:	f245 30c0 	movw	r0, #21440	; 0x53c0
   143b6:	f2c0 0002 	movt	r0, #2
   143ba:	f245 42bc 	movw	r2, #21692	; 0x54bc
   143be:	f2c0 0202 	movt	r2, #2
   143c2:	2121      	movs	r1, #33	; 0x21
   143c4:	f001 fcdc 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   143c8:	defe      	udf	#254	; 0xfe

000143ca <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   143ca:	b5b0      	push	{r4, r5, r7, lr}
   143cc:	b0ae      	sub	sp, #184	; 0xb8
   143ce:	9027      	str	r0, [sp, #156]	; 0x9c
   143d0:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   143d2:	f646 207c 	movw	r0, #27260	; 0x6a7c
   143d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   143da:	f005 fc15 	bl	19c08 <os_sem_release>
   143de:	900d      	str	r0, [sp, #52]	; 0x34
   143e0:	e7ff      	b.n	143e2 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   143e2:	f245 1068 	movw	r0, #20840	; 0x5168
   143e6:	f2c0 0002 	movt	r0, #2
   143ea:	6800      	ldr	r0, [r0, #0]
   143ec:	a90d      	add	r1, sp, #52	; 0x34
   143ee:	910e      	str	r1, [sp, #56]	; 0x38
   143f0:	900f      	str	r0, [sp, #60]	; 0x3c
   143f2:	980e      	ldr	r0, [sp, #56]	; 0x38
   143f4:	9029      	str	r0, [sp, #164]	; 0xa4
   143f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   143f8:	912a      	str	r1, [sp, #168]	; 0xa8
   143fa:	6802      	ldr	r2, [r0, #0]
   143fc:	680b      	ldr	r3, [r1, #0]
   143fe:	429a      	cmp	r2, r3
   14400:	900c      	str	r0, [sp, #48]	; 0x30
   14402:	910b      	str	r1, [sp, #44]	; 0x2c
   14404:	d102      	bne.n	1440c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   14406:	e7ff      	b.n	14408 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   14408:	b02e      	add	sp, #184	; 0xb8
   1440a:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   1440c:	f245 10c0 	movw	r0, #20928	; 0x51c0
   14410:	f2c0 0002 	movt	r0, #2
   14414:	6801      	ldr	r1, [r0, #0]
   14416:	980c      	ldr	r0, [sp, #48]	; 0x30
   14418:	901f      	str	r0, [sp, #124]	; 0x7c
   1441a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1441c:	9220      	str	r2, [sp, #128]	; 0x80
   1441e:	f245 23d8 	movw	r3, #21208	; 0x52d8
   14422:	f2c0 0302 	movt	r3, #2
   14426:	681b      	ldr	r3, [r3, #0]
   14428:	f245 1ce0 	movw	ip, #20960	; 0x51e0
   1442c:	f2c0 0c02 	movt	ip, #2
   14430:	f8dc c000 	ldr.w	ip, [ip]
   14434:	46ee      	mov	lr, sp
   14436:	2400      	movs	r4, #0
   14438:	f8ce 4000 	str.w	r4, [lr]
   1443c:	a821      	add	r0, sp, #132	; 0x84
   1443e:	2201      	movs	r2, #1
   14440:	910a      	str	r1, [sp, #40]	; 0x28
   14442:	4619      	mov	r1, r3
   14444:	4663      	mov	r3, ip
   14446:	f7f4 fbad 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1444a:	e7ff      	b.n	1444c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   1444c:	a81f      	add	r0, sp, #124	; 0x7c
   1444e:	901c      	str	r0, [sp, #112]	; 0x70
   14450:	a820      	add	r0, sp, #128	; 0x80
   14452:	901d      	str	r0, [sp, #116]	; 0x74
   14454:	a821      	add	r0, sp, #132	; 0x84
   14456:	901e      	str	r0, [sp, #120]	; 0x78
   14458:	981c      	ldr	r0, [sp, #112]	; 0x70
   1445a:	902b      	str	r0, [sp, #172]	; 0xac
   1445c:	991d      	ldr	r1, [sp, #116]	; 0x74
   1445e:	912c      	str	r1, [sp, #176]	; 0xb0
   14460:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14462:	922d      	str	r2, [sp, #180]	; 0xb4
   14464:	f249 4347 	movw	r3, #37959	; 0x9447
   14468:	f2c0 0300 	movt	r3, #0
   1446c:	9109      	str	r1, [sp, #36]	; 0x24
   1446e:	4619      	mov	r1, r3
   14470:	9208      	str	r2, [sp, #32]
   14472:	f7f5 f820 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14476:	9007      	str	r0, [sp, #28]
   14478:	9106      	str	r1, [sp, #24]
   1447a:	e7ff      	b.n	1447c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   1447c:	f249 4147 	movw	r1, #37959	; 0x9447
   14480:	f2c0 0100 	movt	r1, #0
   14484:	9809      	ldr	r0, [sp, #36]	; 0x24
   14486:	f7f5 f816 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   1448a:	9005      	str	r0, [sp, #20]
   1448c:	9104      	str	r1, [sp, #16]
   1448e:	e7ff      	b.n	14490 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   14490:	f246 314f 	movw	r1, #25423	; 0x634f
   14494:	f2c0 0101 	movt	r1, #1
   14498:	9808      	ldr	r0, [sp, #32]
   1449a:	f7f5 f821 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1449e:	9003      	str	r0, [sp, #12]
   144a0:	9102      	str	r1, [sp, #8]
   144a2:	e7ff      	b.n	144a4 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   144a4:	9807      	ldr	r0, [sp, #28]
   144a6:	9016      	str	r0, [sp, #88]	; 0x58
   144a8:	9906      	ldr	r1, [sp, #24]
   144aa:	9117      	str	r1, [sp, #92]	; 0x5c
   144ac:	9a05      	ldr	r2, [sp, #20]
   144ae:	9218      	str	r2, [sp, #96]	; 0x60
   144b0:	9b04      	ldr	r3, [sp, #16]
   144b2:	9319      	str	r3, [sp, #100]	; 0x64
   144b4:	f8dd c00c 	ldr.w	ip, [sp, #12]
   144b8:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   144bc:	f8dd e008 	ldr.w	lr, [sp, #8]
   144c0:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   144c4:	466c      	mov	r4, sp
   144c6:	2503      	movs	r5, #3
   144c8:	6025      	str	r5, [r4, #0]
   144ca:	a810      	add	r0, sp, #64	; 0x40
   144cc:	ab16      	add	r3, sp, #88	; 0x58
   144ce:	990a      	ldr	r1, [sp, #40]	; 0x28
   144d0:	462a      	mov	r2, r5
   144d2:	f7f4 fb67 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   144d6:	e7ff      	b.n	144d8 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   144d8:	f245 40cc 	movw	r0, #21708	; 0x54cc
   144dc:	f2c0 0002 	movt	r0, #2
   144e0:	f001 fc47 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   144e4:	9001      	str	r0, [sp, #4]
   144e6:	e7ff      	b.n	144e8 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   144e8:	a810      	add	r0, sp, #64	; 0x40
   144ea:	9901      	ldr	r1, [sp, #4]
   144ec:	f001 fc7e 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   144f0:	defe      	udf	#254	; 0xfe

000144f2 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   144f2:	b580      	push	{r7, lr}
   144f4:	b084      	sub	sp, #16
   144f6:	4601      	mov	r1, r0
   144f8:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   144fc:	b2c0      	uxtb	r0, r0
   144fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14502:	fba0 0202 	umull	r0, r2, r0, r2
   14506:	2a00      	cmp	r2, #0
   14508:	9001      	str	r0, [sp, #4]
   1450a:	d110      	bne.n	1452e <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   1450c:	e7ff      	b.n	1450e <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   1450e:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14512:	f2c1 0062 	movt	r0, #4194	; 0x1062
   14516:	9901      	ldr	r1, [sp, #4]
   14518:	fba1 0200 	umull	r0, r2, r1, r0
   1451c:	0992      	lsrs	r2, r2, #6
   1451e:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   14520:	9000      	str	r0, [sp, #0]
   14522:	4610      	mov	r0, r2
   14524:	f005 fcf0 	bl	19f08 <os_time_delay>
   14528:	e7ff      	b.n	1452a <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   1452a:	b004      	add	sp, #16
   1452c:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   1452e:	f245 30c0 	movw	r0, #21440	; 0x53c0
   14532:	f2c0 0002 	movt	r0, #2
   14536:	f245 42dc 	movw	r2, #21724	; 0x54dc
   1453a:	f2c0 0202 	movt	r2, #2
   1453e:	2121      	movs	r1, #33	; 0x21
   14540:	f001 fc1e 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14544:	defe      	udf	#254	; 0xfe

00014546 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
   14546:	b082      	sub	sp, #8
   14548:	2000      	movs	r0, #0
        SPI {
   1454a:	9000      	str	r0, [sp, #0]
   1454c:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
   1454e:	9800      	ldr	r0, [sp, #0]
   14550:	9901      	ldr	r1, [sp, #4]
   14552:	b002      	add	sp, #8
   14554:	4770      	bx	lr

00014556 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
   14556:	b5b0      	push	{r4, r5, r7, lr}
   14558:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
   1455c:	9077      	str	r0, [sp, #476]	; 0x1dc
   1455e:	9178      	str	r1, [sp, #480]	; 0x1e0
   14560:	9279      	str	r2, [sp, #484]	; 0x1e4
   14562:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
   14564:	9028      	str	r0, [sp, #160]	; 0xa0
   14566:	4608      	mov	r0, r1
   14568:	9127      	str	r1, [sp, #156]	; 0x9c
   1456a:	4619      	mov	r1, r3
   1456c:	9226      	str	r2, [sp, #152]	; 0x98
   1456e:	f004 f89f 	bl	186b0 <hal_spi_config>
   14572:	9029      	str	r0, [sp, #164]	; 0xa4
   14574:	e7ff      	b.n	14576 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
   14576:	f245 40ec 	movw	r0, #21740	; 0x54ec
   1457a:	f2c0 0002 	movt	r0, #2
   1457e:	6800      	ldr	r0, [r0, #0]
   14580:	a929      	add	r1, sp, #164	; 0xa4
   14582:	912a      	str	r1, [sp, #168]	; 0xa8
   14584:	902b      	str	r0, [sp, #172]	; 0xac
   14586:	982a      	ldr	r0, [sp, #168]	; 0xa8
   14588:	907b      	str	r0, [sp, #492]	; 0x1ec
   1458a:	992b      	ldr	r1, [sp, #172]	; 0xac
   1458c:	917c      	str	r1, [sp, #496]	; 0x1f0
   1458e:	6802      	ldr	r2, [r0, #0]
   14590:	680b      	ldr	r3, [r1, #0]
   14592:	429a      	cmp	r2, r3
   14594:	9025      	str	r0, [sp, #148]	; 0x94
   14596:	9124      	str	r1, [sp, #144]	; 0x90
   14598:	d105      	bne.n	145a6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
   1459a:	e7ff      	b.n	1459c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
   1459c:	9827      	ldr	r0, [sp, #156]	; 0x9c
   1459e:	f004 f8a3 	bl	186e8 <hal_spi_enable>
   145a2:	9043      	str	r0, [sp, #268]	; 0x10c
   145a4:	e072      	b.n	1468c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
   145a6:	f245 5044 	movw	r0, #21828	; 0x5544
   145aa:	f2c0 0002 	movt	r0, #2
   145ae:	6801      	ldr	r1, [r0, #0]
   145b0:	9825      	ldr	r0, [sp, #148]	; 0x94
   145b2:	903b      	str	r0, [sp, #236]	; 0xec
   145b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   145b6:	923c      	str	r2, [sp, #240]	; 0xf0
   145b8:	f245 5360 	movw	r3, #21856	; 0x5560
   145bc:	f2c0 0302 	movt	r3, #2
   145c0:	681b      	ldr	r3, [r3, #0]
   145c2:	f245 5c64 	movw	ip, #21860	; 0x5564
   145c6:	f2c0 0c02 	movt	ip, #2
   145ca:	f8dc c000 	ldr.w	ip, [ip]
   145ce:	46ee      	mov	lr, sp
   145d0:	2400      	movs	r4, #0
   145d2:	f8ce 4000 	str.w	r4, [lr]
   145d6:	a83d      	add	r0, sp, #244	; 0xf4
   145d8:	2201      	movs	r2, #1
   145da:	9123      	str	r1, [sp, #140]	; 0x8c
   145dc:	4619      	mov	r1, r3
   145de:	4663      	mov	r3, ip
   145e0:	f7f4 fae0 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   145e4:	e7ff      	b.n	145e6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
   145e6:	a83b      	add	r0, sp, #236	; 0xec
   145e8:	9038      	str	r0, [sp, #224]	; 0xe0
   145ea:	a83c      	add	r0, sp, #240	; 0xf0
   145ec:	9039      	str	r0, [sp, #228]	; 0xe4
   145ee:	a83d      	add	r0, sp, #244	; 0xf4
   145f0:	903a      	str	r0, [sp, #232]	; 0xe8
   145f2:	9838      	ldr	r0, [sp, #224]	; 0xe0
   145f4:	907d      	str	r0, [sp, #500]	; 0x1f4
   145f6:	9939      	ldr	r1, [sp, #228]	; 0xe4
   145f8:	917e      	str	r1, [sp, #504]	; 0x1f8
   145fa:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   145fc:	927f      	str	r2, [sp, #508]	; 0x1fc
   145fe:	f249 33f3 	movw	r3, #37875	; 0x93f3
   14602:	f2c0 0300 	movt	r3, #0
   14606:	9122      	str	r1, [sp, #136]	; 0x88
   14608:	4619      	mov	r1, r3
   1460a:	9221      	str	r2, [sp, #132]	; 0x84
   1460c:	f7f4 ff29 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14610:	9020      	str	r0, [sp, #128]	; 0x80
   14612:	911f      	str	r1, [sp, #124]	; 0x7c
   14614:	e7ff      	b.n	14616 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
   14616:	f249 31f3 	movw	r1, #37875	; 0x93f3
   1461a:	f2c0 0100 	movt	r1, #0
   1461e:	9822      	ldr	r0, [sp, #136]	; 0x88
   14620:	f7f4 ff1f 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14624:	901e      	str	r0, [sp, #120]	; 0x78
   14626:	911d      	str	r1, [sp, #116]	; 0x74
   14628:	e7ff      	b.n	1462a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
   1462a:	f246 314f 	movw	r1, #25423	; 0x634f
   1462e:	f2c0 0101 	movt	r1, #1
   14632:	9821      	ldr	r0, [sp, #132]	; 0x84
   14634:	f7f4 ff54 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14638:	901c      	str	r0, [sp, #112]	; 0x70
   1463a:	911b      	str	r1, [sp, #108]	; 0x6c
   1463c:	e7ff      	b.n	1463e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
   1463e:	9820      	ldr	r0, [sp, #128]	; 0x80
   14640:	9032      	str	r0, [sp, #200]	; 0xc8
   14642:	991f      	ldr	r1, [sp, #124]	; 0x7c
   14644:	9133      	str	r1, [sp, #204]	; 0xcc
   14646:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14648:	9234      	str	r2, [sp, #208]	; 0xd0
   1464a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1464c:	9335      	str	r3, [sp, #212]	; 0xd4
   1464e:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
   14652:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
   14656:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
   1465a:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
   1465e:	466c      	mov	r4, sp
   14660:	2503      	movs	r5, #3
   14662:	6025      	str	r5, [r4, #0]
   14664:	a82c      	add	r0, sp, #176	; 0xb0
   14666:	ab32      	add	r3, sp, #200	; 0xc8
   14668:	9923      	ldr	r1, [sp, #140]	; 0x8c
   1466a:	462a      	mov	r2, r5
   1466c:	f7f4 fa9a 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14670:	e7ff      	b.n	14672 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
   14672:	f245 5080 	movw	r0, #21888	; 0x5580
   14676:	f2c0 0002 	movt	r0, #2
   1467a:	f001 fb7a 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1467e:	901a      	str	r0, [sp, #104]	; 0x68
   14680:	e7ff      	b.n	14682 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
   14682:	a82c      	add	r0, sp, #176	; 0xb0
   14684:	991a      	ldr	r1, [sp, #104]	; 0x68
   14686:	f001 fbb1 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1468a:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
   1468c:	f245 40ec 	movw	r0, #21740	; 0x54ec
   14690:	f2c0 0002 	movt	r0, #2
   14694:	6800      	ldr	r0, [r0, #0]
   14696:	a943      	add	r1, sp, #268	; 0x10c
   14698:	9144      	str	r1, [sp, #272]	; 0x110
   1469a:	9045      	str	r0, [sp, #276]	; 0x114
   1469c:	9844      	ldr	r0, [sp, #272]	; 0x110
   1469e:	9080      	str	r0, [sp, #512]	; 0x200
   146a0:	9945      	ldr	r1, [sp, #276]	; 0x114
   146a2:	9181      	str	r1, [sp, #516]	; 0x204
   146a4:	6802      	ldr	r2, [r0, #0]
   146a6:	680b      	ldr	r3, [r1, #0]
   146a8:	429a      	cmp	r2, r3
   146aa:	9019      	str	r0, [sp, #100]	; 0x64
   146ac:	9118      	str	r1, [sp, #96]	; 0x60
   146ae:	d106      	bne.n	146be <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
   146b0:	e7ff      	b.n	146b2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
   146b2:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
   146b4:	9826      	ldr	r0, [sp, #152]	; 0x98
   146b6:	f003 fbed 	bl	17e94 <hal_gpio_init_out>
   146ba:	905d      	str	r0, [sp, #372]	; 0x174
   146bc:	e072      	b.n	147a4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
   146be:	f245 5044 	movw	r0, #21828	; 0x5544
   146c2:	f2c0 0002 	movt	r0, #2
   146c6:	6801      	ldr	r1, [r0, #0]
   146c8:	9819      	ldr	r0, [sp, #100]	; 0x64
   146ca:	9055      	str	r0, [sp, #340]	; 0x154
   146cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   146ce:	9256      	str	r2, [sp, #344]	; 0x158
   146d0:	f245 53a8 	movw	r3, #21928	; 0x55a8
   146d4:	f2c0 0302 	movt	r3, #2
   146d8:	681b      	ldr	r3, [r3, #0]
   146da:	f245 5c64 	movw	ip, #21860	; 0x5564
   146de:	f2c0 0c02 	movt	ip, #2
   146e2:	f8dc c000 	ldr.w	ip, [ip]
   146e6:	46ee      	mov	lr, sp
   146e8:	2400      	movs	r4, #0
   146ea:	f8ce 4000 	str.w	r4, [lr]
   146ee:	a857      	add	r0, sp, #348	; 0x15c
   146f0:	2201      	movs	r2, #1
   146f2:	9117      	str	r1, [sp, #92]	; 0x5c
   146f4:	4619      	mov	r1, r3
   146f6:	4663      	mov	r3, ip
   146f8:	f7f4 fa54 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   146fc:	e7ff      	b.n	146fe <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
   146fe:	a855      	add	r0, sp, #340	; 0x154
   14700:	9052      	str	r0, [sp, #328]	; 0x148
   14702:	a856      	add	r0, sp, #344	; 0x158
   14704:	9053      	str	r0, [sp, #332]	; 0x14c
   14706:	a857      	add	r0, sp, #348	; 0x15c
   14708:	9054      	str	r0, [sp, #336]	; 0x150
   1470a:	9852      	ldr	r0, [sp, #328]	; 0x148
   1470c:	9082      	str	r0, [sp, #520]	; 0x208
   1470e:	9953      	ldr	r1, [sp, #332]	; 0x14c
   14710:	9183      	str	r1, [sp, #524]	; 0x20c
   14712:	9a54      	ldr	r2, [sp, #336]	; 0x150
   14714:	9284      	str	r2, [sp, #528]	; 0x210
   14716:	f249 33f3 	movw	r3, #37875	; 0x93f3
   1471a:	f2c0 0300 	movt	r3, #0
   1471e:	9116      	str	r1, [sp, #88]	; 0x58
   14720:	4619      	mov	r1, r3
   14722:	9215      	str	r2, [sp, #84]	; 0x54
   14724:	f7f4 fe9d 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14728:	9014      	str	r0, [sp, #80]	; 0x50
   1472a:	9113      	str	r1, [sp, #76]	; 0x4c
   1472c:	e7ff      	b.n	1472e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
   1472e:	f249 31f3 	movw	r1, #37875	; 0x93f3
   14732:	f2c0 0100 	movt	r1, #0
   14736:	9816      	ldr	r0, [sp, #88]	; 0x58
   14738:	f7f4 fe93 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1473c:	9012      	str	r0, [sp, #72]	; 0x48
   1473e:	9111      	str	r1, [sp, #68]	; 0x44
   14740:	e7ff      	b.n	14742 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
   14742:	f246 314f 	movw	r1, #25423	; 0x634f
   14746:	f2c0 0101 	movt	r1, #1
   1474a:	9815      	ldr	r0, [sp, #84]	; 0x54
   1474c:	f7f4 fec8 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14750:	9010      	str	r0, [sp, #64]	; 0x40
   14752:	910f      	str	r1, [sp, #60]	; 0x3c
   14754:	e7ff      	b.n	14756 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
   14756:	9814      	ldr	r0, [sp, #80]	; 0x50
   14758:	904c      	str	r0, [sp, #304]	; 0x130
   1475a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1475c:	914d      	str	r1, [sp, #308]	; 0x134
   1475e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14760:	924e      	str	r2, [sp, #312]	; 0x138
   14762:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14764:	934f      	str	r3, [sp, #316]	; 0x13c
   14766:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   1476a:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
   1476e:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   14772:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
   14776:	466c      	mov	r4, sp
   14778:	2503      	movs	r5, #3
   1477a:	6025      	str	r5, [r4, #0]
   1477c:	a846      	add	r0, sp, #280	; 0x118
   1477e:	ab4c      	add	r3, sp, #304	; 0x130
   14780:	9917      	ldr	r1, [sp, #92]	; 0x5c
   14782:	462a      	mov	r2, r5
   14784:	f7f4 fa0e 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14788:	e7ff      	b.n	1478a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
   1478a:	f245 50ac 	movw	r0, #21932	; 0x55ac
   1478e:	f2c0 0002 	movt	r0, #2
   14792:	f001 faee 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14796:	900e      	str	r0, [sp, #56]	; 0x38
   14798:	e7ff      	b.n	1479a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
   1479a:	a846      	add	r0, sp, #280	; 0x118
   1479c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1479e:	f001 fb25 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   147a2:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
   147a4:	f245 40ec 	movw	r0, #21740	; 0x54ec
   147a8:	f2c0 0002 	movt	r0, #2
   147ac:	6800      	ldr	r0, [r0, #0]
   147ae:	a95d      	add	r1, sp, #372	; 0x174
   147b0:	915e      	str	r1, [sp, #376]	; 0x178
   147b2:	905f      	str	r0, [sp, #380]	; 0x17c
   147b4:	985e      	ldr	r0, [sp, #376]	; 0x178
   147b6:	9085      	str	r0, [sp, #532]	; 0x214
   147b8:	995f      	ldr	r1, [sp, #380]	; 0x17c
   147ba:	9186      	str	r1, [sp, #536]	; 0x218
   147bc:	6802      	ldr	r2, [r0, #0]
   147be:	680b      	ldr	r3, [r1, #0]
   147c0:	429a      	cmp	r2, r3
   147c2:	900d      	str	r0, [sp, #52]	; 0x34
   147c4:	910c      	str	r1, [sp, #48]	; 0x30
   147c6:	d109      	bne.n	147dc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
   147c8:	e7ff      	b.n	147ca <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
   147ca:	9827      	ldr	r0, [sp, #156]	; 0x9c
   147cc:	9928      	ldr	r1, [sp, #160]	; 0xa0
   147ce:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
   147d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   147d2:	604a      	str	r2, [r1, #4]
   147d4:	2001      	movs	r0, #1
        Ok(())
    }
   147d6:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
   147da:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
   147dc:	f245 5044 	movw	r0, #21828	; 0x5544
   147e0:	f2c0 0002 	movt	r0, #2
   147e4:	6801      	ldr	r1, [r0, #0]
   147e6:	980d      	ldr	r0, [sp, #52]	; 0x34
   147e8:	906f      	str	r0, [sp, #444]	; 0x1bc
   147ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   147ec:	9270      	str	r2, [sp, #448]	; 0x1c0
   147ee:	f245 53d4 	movw	r3, #21972	; 0x55d4
   147f2:	f2c0 0302 	movt	r3, #2
   147f6:	681b      	ldr	r3, [r3, #0]
   147f8:	f245 5c64 	movw	ip, #21860	; 0x5564
   147fc:	f2c0 0c02 	movt	ip, #2
   14800:	f8dc c000 	ldr.w	ip, [ip]
   14804:	46ee      	mov	lr, sp
   14806:	2400      	movs	r4, #0
   14808:	f8ce 4000 	str.w	r4, [lr]
   1480c:	a871      	add	r0, sp, #452	; 0x1c4
   1480e:	2201      	movs	r2, #1
   14810:	910b      	str	r1, [sp, #44]	; 0x2c
   14812:	4619      	mov	r1, r3
   14814:	4663      	mov	r3, ip
   14816:	f7f4 f9c5 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1481a:	e7ff      	b.n	1481c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
   1481c:	a86f      	add	r0, sp, #444	; 0x1bc
   1481e:	906c      	str	r0, [sp, #432]	; 0x1b0
   14820:	a870      	add	r0, sp, #448	; 0x1c0
   14822:	906d      	str	r0, [sp, #436]	; 0x1b4
   14824:	a871      	add	r0, sp, #452	; 0x1c4
   14826:	906e      	str	r0, [sp, #440]	; 0x1b8
   14828:	986c      	ldr	r0, [sp, #432]	; 0x1b0
   1482a:	9087      	str	r0, [sp, #540]	; 0x21c
   1482c:	996d      	ldr	r1, [sp, #436]	; 0x1b4
   1482e:	9188      	str	r1, [sp, #544]	; 0x220
   14830:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
   14832:	9289      	str	r2, [sp, #548]	; 0x224
   14834:	f249 33f3 	movw	r3, #37875	; 0x93f3
   14838:	f2c0 0300 	movt	r3, #0
   1483c:	910a      	str	r1, [sp, #40]	; 0x28
   1483e:	4619      	mov	r1, r3
   14840:	9209      	str	r2, [sp, #36]	; 0x24
   14842:	f7f4 fe0e 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14846:	9008      	str	r0, [sp, #32]
   14848:	9107      	str	r1, [sp, #28]
   1484a:	e7ff      	b.n	1484c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
   1484c:	f249 31f3 	movw	r1, #37875	; 0x93f3
   14850:	f2c0 0100 	movt	r1, #0
   14854:	980a      	ldr	r0, [sp, #40]	; 0x28
   14856:	f7f4 fe04 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1485a:	9006      	str	r0, [sp, #24]
   1485c:	9105      	str	r1, [sp, #20]
   1485e:	e7ff      	b.n	14860 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
   14860:	f246 314f 	movw	r1, #25423	; 0x634f
   14864:	f2c0 0101 	movt	r1, #1
   14868:	9809      	ldr	r0, [sp, #36]	; 0x24
   1486a:	f7f4 fe39 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1486e:	9004      	str	r0, [sp, #16]
   14870:	9103      	str	r1, [sp, #12]
   14872:	e7ff      	b.n	14874 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
   14874:	9808      	ldr	r0, [sp, #32]
   14876:	9066      	str	r0, [sp, #408]	; 0x198
   14878:	9907      	ldr	r1, [sp, #28]
   1487a:	9167      	str	r1, [sp, #412]	; 0x19c
   1487c:	9a06      	ldr	r2, [sp, #24]
   1487e:	9268      	str	r2, [sp, #416]	; 0x1a0
   14880:	9b05      	ldr	r3, [sp, #20]
   14882:	9369      	str	r3, [sp, #420]	; 0x1a4
   14884:	f8dd c010 	ldr.w	ip, [sp, #16]
   14888:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
   1488c:	f8dd e00c 	ldr.w	lr, [sp, #12]
   14890:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
   14894:	466c      	mov	r4, sp
   14896:	2503      	movs	r5, #3
   14898:	6025      	str	r5, [r4, #0]
   1489a:	a860      	add	r0, sp, #384	; 0x180
   1489c:	ab66      	add	r3, sp, #408	; 0x198
   1489e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   148a0:	462a      	mov	r2, r5
   148a2:	f7f4 f97f 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   148a6:	e7ff      	b.n	148a8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
   148a8:	f245 50d8 	movw	r0, #21976	; 0x55d8
   148ac:	f2c0 0002 	movt	r0, #2
   148b0:	f001 fa5f 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   148b4:	9002      	str	r0, [sp, #8]
   148b6:	e7ff      	b.n	148b8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
   148b8:	a860      	add	r0, sp, #384	; 0x180
   148ba:	9902      	ldr	r1, [sp, #8]
   148bc:	f001 fa96 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   148c0:	defe      	udf	#254	; 0xfe

000148c2 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
   148c2:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
   148c4:	4770      	bx	lr

000148c6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
   148c6:	b5b0      	push	{r4, r5, r7, lr}
   148c8:	b0b0      	sub	sp, #192	; 0xc0
   148ca:	9029      	str	r0, [sp, #164]	; 0xa4
   148cc:	912a      	str	r1, [sp, #168]	; 0xa8
   148ce:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
   148d0:	900e      	str	r0, [sp, #56]	; 0x38
   148d2:	4608      	mov	r0, r1
   148d4:	910d      	str	r1, [sp, #52]	; 0x34
   148d6:	4611      	mov	r1, r2
   148d8:	f003 fadc 	bl	17e94 <hal_gpio_init_out>
   148dc:	900f      	str	r0, [sp, #60]	; 0x3c
   148de:	e7ff      	b.n	148e0 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
   148e0:	f245 40ec 	movw	r0, #21740	; 0x54ec
   148e4:	f2c0 0002 	movt	r0, #2
   148e8:	6800      	ldr	r0, [r0, #0]
   148ea:	a90f      	add	r1, sp, #60	; 0x3c
   148ec:	9110      	str	r1, [sp, #64]	; 0x40
   148ee:	9011      	str	r0, [sp, #68]	; 0x44
   148f0:	9810      	ldr	r0, [sp, #64]	; 0x40
   148f2:	902b      	str	r0, [sp, #172]	; 0xac
   148f4:	9911      	ldr	r1, [sp, #68]	; 0x44
   148f6:	912c      	str	r1, [sp, #176]	; 0xb0
   148f8:	6802      	ldr	r2, [r0, #0]
   148fa:	680b      	ldr	r3, [r1, #0]
   148fc:	429a      	cmp	r2, r3
   148fe:	900c      	str	r0, [sp, #48]	; 0x30
   14900:	910b      	str	r1, [sp, #44]	; 0x2c
   14902:	d106      	bne.n	14912 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
   14904:	e7ff      	b.n	14906 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
   14906:	980d      	ldr	r0, [sp, #52]	; 0x34
   14908:	990e      	ldr	r1, [sp, #56]	; 0x38
   1490a:	6008      	str	r0, [r1, #0]
   1490c:	2001      	movs	r0, #1
        Ok(())
    }
   1490e:	b030      	add	sp, #192	; 0xc0
   14910:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
   14912:	f245 5044 	movw	r0, #21828	; 0x5544
   14916:	f2c0 0002 	movt	r0, #2
   1491a:	6801      	ldr	r1, [r0, #0]
   1491c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1491e:	9021      	str	r0, [sp, #132]	; 0x84
   14920:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14922:	9222      	str	r2, [sp, #136]	; 0x88
   14924:	f245 53fc 	movw	r3, #22012	; 0x55fc
   14928:	f2c0 0302 	movt	r3, #2
   1492c:	681b      	ldr	r3, [r3, #0]
   1492e:	f245 5c64 	movw	ip, #21860	; 0x5564
   14932:	f2c0 0c02 	movt	ip, #2
   14936:	f8dc c000 	ldr.w	ip, [ip]
   1493a:	46ee      	mov	lr, sp
   1493c:	2400      	movs	r4, #0
   1493e:	f8ce 4000 	str.w	r4, [lr]
   14942:	a823      	add	r0, sp, #140	; 0x8c
   14944:	2201      	movs	r2, #1
   14946:	910a      	str	r1, [sp, #40]	; 0x28
   14948:	4619      	mov	r1, r3
   1494a:	4663      	mov	r3, ip
   1494c:	f7f4 f92a 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14950:	e7ff      	b.n	14952 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
   14952:	a821      	add	r0, sp, #132	; 0x84
   14954:	901e      	str	r0, [sp, #120]	; 0x78
   14956:	a822      	add	r0, sp, #136	; 0x88
   14958:	901f      	str	r0, [sp, #124]	; 0x7c
   1495a:	a823      	add	r0, sp, #140	; 0x8c
   1495c:	9020      	str	r0, [sp, #128]	; 0x80
   1495e:	981e      	ldr	r0, [sp, #120]	; 0x78
   14960:	902d      	str	r0, [sp, #180]	; 0xb4
   14962:	991f      	ldr	r1, [sp, #124]	; 0x7c
   14964:	912e      	str	r1, [sp, #184]	; 0xb8
   14966:	9a20      	ldr	r2, [sp, #128]	; 0x80
   14968:	922f      	str	r2, [sp, #188]	; 0xbc
   1496a:	f249 33f3 	movw	r3, #37875	; 0x93f3
   1496e:	f2c0 0300 	movt	r3, #0
   14972:	9109      	str	r1, [sp, #36]	; 0x24
   14974:	4619      	mov	r1, r3
   14976:	9208      	str	r2, [sp, #32]
   14978:	f7f4 fd73 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1497c:	9007      	str	r0, [sp, #28]
   1497e:	9106      	str	r1, [sp, #24]
   14980:	e7ff      	b.n	14982 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
   14982:	f249 31f3 	movw	r1, #37875	; 0x93f3
   14986:	f2c0 0100 	movt	r1, #0
   1498a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1498c:	f7f4 fd69 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14990:	9005      	str	r0, [sp, #20]
   14992:	9104      	str	r1, [sp, #16]
   14994:	e7ff      	b.n	14996 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
   14996:	f246 314f 	movw	r1, #25423	; 0x634f
   1499a:	f2c0 0101 	movt	r1, #1
   1499e:	9808      	ldr	r0, [sp, #32]
   149a0:	f7f4 fd9e 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   149a4:	9003      	str	r0, [sp, #12]
   149a6:	9102      	str	r1, [sp, #8]
   149a8:	e7ff      	b.n	149aa <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
   149aa:	9807      	ldr	r0, [sp, #28]
   149ac:	9018      	str	r0, [sp, #96]	; 0x60
   149ae:	9906      	ldr	r1, [sp, #24]
   149b0:	9119      	str	r1, [sp, #100]	; 0x64
   149b2:	9a05      	ldr	r2, [sp, #20]
   149b4:	921a      	str	r2, [sp, #104]	; 0x68
   149b6:	9b04      	ldr	r3, [sp, #16]
   149b8:	931b      	str	r3, [sp, #108]	; 0x6c
   149ba:	f8dd c00c 	ldr.w	ip, [sp, #12]
   149be:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
   149c2:	f8dd e008 	ldr.w	lr, [sp, #8]
   149c6:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
   149ca:	466c      	mov	r4, sp
   149cc:	2503      	movs	r5, #3
   149ce:	6025      	str	r5, [r4, #0]
   149d0:	a812      	add	r0, sp, #72	; 0x48
   149d2:	ab18      	add	r3, sp, #96	; 0x60
   149d4:	990a      	ldr	r1, [sp, #40]	; 0x28
   149d6:	462a      	mov	r2, r5
   149d8:	f7f4 f8e4 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   149dc:	e7ff      	b.n	149de <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
   149de:	f245 6000 	movw	r0, #22016	; 0x5600
   149e2:	f2c0 0002 	movt	r0, #2
   149e6:	f001 f9c4 	bl	15d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   149ea:	9001      	str	r0, [sp, #4]
   149ec:	e7ff      	b.n	149ee <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
   149ee:	a812      	add	r0, sp, #72	; 0x48
   149f0:	9901      	ldr	r1, [sp, #4]
   149f2:	f001 f9fb 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   149f6:	defe      	udf	#254	; 0xfe

000149f8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
   149f8:	b580      	push	{r7, lr}
   149fa:	b082      	sub	sp, #8
   149fc:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
   149fe:	6800      	ldr	r0, [r0, #0]
   14a00:	2100      	movs	r1, #0
   14a02:	f003 fa63 	bl	17ecc <hal_gpio_write>
   14a06:	e7ff      	b.n	14a08 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
   14a08:	2001      	movs	r0, #1
        Ok(())
    }
   14a0a:	b002      	add	sp, #8
   14a0c:	bd80      	pop	{r7, pc}

00014a0e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
   14a0e:	b580      	push	{r7, lr}
   14a10:	b082      	sub	sp, #8
   14a12:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
   14a14:	6800      	ldr	r0, [r0, #0]
   14a16:	2101      	movs	r1, #1
   14a18:	f003 fa58 	bl	17ecc <hal_gpio_write>
   14a1c:	e7ff      	b.n	14a1e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
   14a1e:	2001      	movs	r0, #1
        Ok(())
    }
   14a20:	b002      	add	sp, #8
   14a22:	bd80      	pop	{r7, pc}

00014a24 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
   14a24:	4770      	bx	lr

00014a26 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
   14a26:	b580      	push	{r7, lr}
   14a28:	b086      	sub	sp, #24
   14a2a:	460a      	mov	r2, r1
   14a2c:	9003      	str	r0, [sp, #12]
   14a2e:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14a32:	b2c8      	uxtb	r0, r1
   14a34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   14a38:	fba0 0101 	umull	r0, r1, r0, r1
   14a3c:	2900      	cmp	r1, #0
   14a3e:	9002      	str	r0, [sp, #8]
   14a40:	d110      	bne.n	14a64 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
   14a42:	e7ff      	b.n	14a44 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
   14a44:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14a48:	f2c1 0062 	movt	r0, #4194	; 0x1062
   14a4c:	9902      	ldr	r1, [sp, #8]
   14a4e:	fba1 0200 	umull	r0, r2, r1, r0
   14a52:	0992      	lsrs	r2, r2, #6
   14a54:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
   14a56:	9001      	str	r0, [sp, #4]
   14a58:	4610      	mov	r0, r2
   14a5a:	f005 fa55 	bl	19f08 <os_time_delay>
   14a5e:	e7ff      	b.n	14a60 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
   14a60:	b006      	add	sp, #24
   14a62:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14a64:	f245 6020 	movw	r0, #22048	; 0x5620
   14a68:	f2c0 0002 	movt	r0, #2
   14a6c:	f245 6210 	movw	r2, #22032	; 0x5610
   14a70:	f2c0 0202 	movt	r2, #2
   14a74:	2121      	movs	r1, #33	; 0x21
   14a76:	f001 f983 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14a7a:	defe      	udf	#254	; 0xfe

00014a7c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   14a7c:	b082      	sub	sp, #8
   14a7e:	9001      	str	r0, [sp, #4]
   14a80:	9000      	str	r0, [sp, #0]
   14a82:	e7ff      	b.n	14a84 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   14a84:	9800      	ldr	r0, [sp, #0]
   14a86:	fab0 f180 	clz	r1, r0
   14a8a:	0948      	lsrs	r0, r1, #5
   14a8c:	b002      	add	sp, #8
   14a8e:	4770      	bx	lr

00014a90 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   14a90:	b081      	sub	sp, #4
   14a92:	b001      	add	sp, #4
   14a94:	4770      	bx	lr

00014a96 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   14a96:	b08a      	sub	sp, #40	; 0x28
   14a98:	9005      	str	r0, [sp, #20]
   14a9a:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   14a9c:	9107      	str	r1, [sp, #28]
   14a9e:	21ff      	movs	r1, #255	; 0xff
   14aa0:	9106      	str	r1, [sp, #24]
   14aa2:	2108      	movs	r1, #8
   14aa4:	9108      	str	r1, [sp, #32]
   14aa6:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14aa8:	9003      	str	r0, [sp, #12]
   14aaa:	9102      	str	r1, [sp, #8]
   14aac:	e016      	b.n	14adc <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   14aae:	2001      	movs	r0, #1
   14ab0:	f88d 0013 	strb.w	r0, [sp, #19]
   14ab4:	e00c      	b.n	14ad0 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14ab6:	2000      	movs	r0, #0
   14ab8:	f88d 0013 	strb.w	r0, [sp, #19]
   14abc:	e008      	b.n	14ad0 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14abe:	9803      	ldr	r0, [sp, #12]
   14ac0:	6801      	ldr	r1, [r0, #0]
   14ac2:	6842      	ldr	r2, [r0, #4]
   14ac4:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   14ac8:	f172 0200 	sbcs.w	r2, r2, #0
   14acc:	d3ef      	bcc.n	14aae <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   14ace:	e7f2      	b.n	14ab6 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   14ad0:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14ad4:	07c0      	lsls	r0, r0, #31
   14ad6:	2800      	cmp	r0, #0
   14ad8:	d10e      	bne.n	14af8 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   14ada:	e009      	b.n	14af0 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   14adc:	2001      	movs	r0, #1
   14ade:	9009      	str	r0, [sp, #36]	; 0x24
   14ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
   14ae2:	9001      	str	r0, [sp, #4]
   14ae4:	e7ff      	b.n	14ae6 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   14ae6:	9802      	ldr	r0, [sp, #8]
   14ae8:	9901      	ldr	r1, [sp, #4]
   14aea:	4288      	cmp	r0, r1
   14aec:	d9df      	bls.n	14aae <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   14aee:	e7e6      	b.n	14abe <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   14af0:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   14af2:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14af6:	e007      	b.n	14b08 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   14af8:	9803      	ldr	r0, [sp, #12]
   14afa:	7801      	ldrb	r1, [r0, #0]
   14afc:	f88d 1011 	strb.w	r1, [sp, #17]
   14b00:	2101      	movs	r1, #1
   14b02:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14b06:	e7ff      	b.n	14b08 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   14b08:	f89d 0010 	ldrb.w	r0, [sp, #16]
   14b0c:	f89d 1011 	ldrb.w	r1, [sp, #17]
   14b10:	b00a      	add	sp, #40	; 0x28
   14b12:	4770      	bx	lr

00014b14 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   14b14:	b084      	sub	sp, #16
   14b16:	9002      	str	r0, [sp, #8]
   14b18:	6801      	ldr	r1, [r0, #0]
   14b1a:	2900      	cmp	r1, #0
   14b1c:	9000      	str	r0, [sp, #0]
   14b1e:	d001      	beq.n	14b24 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   14b20:	e7ff      	b.n	14b22 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   14b22:	e003      	b.n	14b2c <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   14b24:	2000      	movs	r0, #0
   14b26:	9001      	str	r0, [sp, #4]
   14b28:	e006      	b.n	14b38 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   14b2a:	defe      	udf	#254	; 0xfe
   14b2c:	9800      	ldr	r0, [sp, #0]
   14b2e:	f100 0108 	add.w	r1, r0, #8
   14b32:	9103      	str	r1, [sp, #12]
   14b34:	9101      	str	r1, [sp, #4]
   14b36:	e7ff      	b.n	14b38 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   14b38:	9801      	ldr	r0, [sp, #4]
   14b3a:	b004      	add	sp, #16
   14b3c:	4770      	bx	lr

00014b3e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   14b3e:	b084      	sub	sp, #16
   14b40:	460b      	mov	r3, r1
   14b42:	4684      	mov	ip, r0
   14b44:	f88d 000c 	strb.w	r0, [sp, #12]
   14b48:	f88d 100d 	strb.w	r1, [sp, #13]
   14b4c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14b50:	07c1      	lsls	r1, r0, #31
   14b52:	2900      	cmp	r1, #0
   14b54:	9202      	str	r2, [sp, #8]
   14b56:	d001      	beq.n	14b5c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   14b58:	e7ff      	b.n	14b5a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   14b5a:	e009      	b.n	14b70 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   14b5c:	f245 6041 	movw	r0, #22081	; 0x5641
   14b60:	f2c0 0002 	movt	r0, #2
   14b64:	212b      	movs	r1, #43	; 0x2b
   14b66:	9a02      	ldr	r2, [sp, #8]
   14b68:	f001 f90a 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14b6c:	defe      	udf	#254	; 0xfe
   14b6e:	defe      	udf	#254	; 0xfe
   14b70:	f89d 000d 	ldrb.w	r0, [sp, #13]
   14b74:	4601      	mov	r1, r0
   14b76:	f88d 000f 	strb.w	r0, [sp, #15]
   14b7a:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14b7e:	07c0      	lsls	r0, r0, #31
   14b80:	2800      	cmp	r0, #0
   14b82:	9101      	str	r1, [sp, #4]
   14b84:	d003      	beq.n	14b8e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   14b86:	e7ff      	b.n	14b88 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   14b88:	9801      	ldr	r0, [sp, #4]
   14b8a:	b004      	add	sp, #16
   14b8c:	4770      	bx	lr
   14b8e:	e7fb      	b.n	14b88 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

00014b90 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   14b90:	b088      	sub	sp, #32
   14b92:	9004      	str	r0, [sp, #16]
   14b94:	9105      	str	r1, [sp, #20]
   14b96:	9804      	ldr	r0, [sp, #16]
   14b98:	2800      	cmp	r0, #0
   14b9a:	4601      	mov	r1, r0
   14b9c:	bf18      	it	ne
   14b9e:	2101      	movne	r1, #1
   14ba0:	2800      	cmp	r0, #0
   14ba2:	9203      	str	r2, [sp, #12]
   14ba4:	d001      	beq.n	14baa <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   14ba6:	e7ff      	b.n	14ba8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   14ba8:	e009      	b.n	14bbe <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   14baa:	f245 6041 	movw	r0, #22081	; 0x5641
   14bae:	f2c0 0002 	movt	r0, #2
   14bb2:	212b      	movs	r1, #43	; 0x2b
   14bb4:	9a03      	ldr	r2, [sp, #12]
   14bb6:	f001 f8e3 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14bba:	defe      	udf	#254	; 0xfe
   14bbc:	defe      	udf	#254	; 0xfe
   14bbe:	9804      	ldr	r0, [sp, #16]
   14bc0:	9905      	ldr	r1, [sp, #20]
   14bc2:	9006      	str	r0, [sp, #24]
   14bc4:	9107      	str	r1, [sp, #28]
   14bc6:	9a04      	ldr	r2, [sp, #16]
   14bc8:	2a00      	cmp	r2, #0
   14bca:	9002      	str	r0, [sp, #8]
   14bcc:	9101      	str	r1, [sp, #4]
   14bce:	d004      	beq.n	14bda <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   14bd0:	e7ff      	b.n	14bd2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   14bd2:	9802      	ldr	r0, [sp, #8]
   14bd4:	9901      	ldr	r1, [sp, #4]
   14bd6:	b008      	add	sp, #32
   14bd8:	4770      	bx	lr
   14bda:	e7fa      	b.n	14bd2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

00014bdc <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   14bdc:	b082      	sub	sp, #8
   14bde:	9001      	str	r0, [sp, #4]
   14be0:	6800      	ldr	r0, [r0, #0]
   14be2:	2800      	cmp	r0, #0
   14be4:	d104      	bne.n	14bf0 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   14be6:	e7ff      	b.n	14be8 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   14be8:	2000      	movs	r0, #0
   14bea:	f88d 0003 	strb.w	r0, [sp, #3]
   14bee:	e003      	b.n	14bf8 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14bf0:	2001      	movs	r0, #1
   14bf2:	f88d 0003 	strb.w	r0, [sp, #3]
   14bf6:	e7ff      	b.n	14bf8 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14bf8:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14bfc:	b002      	add	sp, #8
   14bfe:	4770      	bx	lr

00014c00 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   14c00:	b580      	push	{r7, lr}
   14c02:	b086      	sub	sp, #24
   14c04:	9000      	str	r0, [sp, #0]
   14c06:	2000      	movs	r0, #0
   14c08:	f88d 000f 	strb.w	r0, [sp, #15]
   14c0c:	f88d 000e 	strb.w	r0, [sp, #14]
   14c10:	2001      	movs	r0, #1
   14c12:	f88d 000f 	strb.w	r0, [sp, #15]
   14c16:	f88d 000e 	strb.w	r0, [sp, #14]
   14c1a:	9800      	ldr	r0, [sp, #0]
   14c1c:	2800      	cmp	r0, #0
   14c1e:	4601      	mov	r1, r0
   14c20:	bf18      	it	ne
   14c22:	2101      	movne	r1, #1
   14c24:	2800      	cmp	r0, #0
   14c26:	d001      	beq.n	14c2c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   14c28:	e7ff      	b.n	14c2a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   14c2a:	e004      	b.n	14c36 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   14c2c:	2000      	movs	r0, #0
   14c2e:	f88d 0004 	strb.w	r0, [sp, #4]
   14c32:	e019      	b.n	14c68 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14c34:	defe      	udf	#254	; 0xfe
   14c36:	2000      	movs	r0, #0
   14c38:	f88d 000f 	strb.w	r0, [sp, #15]
   14c3c:	9900      	ldr	r1, [sp, #0]
   14c3e:	9105      	str	r1, [sp, #20]
   14c40:	f88d 000e 	strb.w	r0, [sp, #14]
   14c44:	9102      	str	r1, [sp, #8]
   14c46:	9802      	ldr	r0, [sp, #8]
   14c48:	f7f5 fc94 	bl	a574 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   14c4c:	f88d 1005 	strb.w	r1, [sp, #5]
   14c50:	f88d 0004 	strb.w	r0, [sp, #4]
   14c54:	e7ff      	b.n	14c56 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   14c56:	e007      	b.n	14c68 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14c58:	9800      	ldr	r0, [sp, #0]
   14c5a:	2800      	cmp	r0, #0
   14c5c:	d110      	bne.n	14c80 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   14c5e:	e019      	b.n	14c94 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   14c60:	2000      	movs	r0, #0
   14c62:	f88d 000e 	strb.w	r0, [sp, #14]
   14c66:	e7f7      	b.n	14c58 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14c68:	f89d 000e 	ldrb.w	r0, [sp, #14]
   14c6c:	07c0      	lsls	r0, r0, #31
   14c6e:	2800      	cmp	r0, #0
   14c70:	d1f6      	bne.n	14c60 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   14c72:	e7f1      	b.n	14c58 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14c74:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14c78:	f89d 1005 	ldrb.w	r1, [sp, #5]
   14c7c:	b006      	add	sp, #24
   14c7e:	bd80      	pop	{r7, pc}
   14c80:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14c84:	07c0      	lsls	r0, r0, #31
   14c86:	2800      	cmp	r0, #0
   14c88:	d0f4      	beq.n	14c74 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   14c8a:	e7ff      	b.n	14c8c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   14c8c:	2000      	movs	r0, #0
   14c8e:	f88d 000f 	strb.w	r0, [sp, #15]
   14c92:	e7ef      	b.n	14c74 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   14c94:	e7ee      	b.n	14c74 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

00014c96 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   14c96:	b580      	push	{r7, lr}
   14c98:	b084      	sub	sp, #16
   14c9a:	9002      	str	r0, [sp, #8]
   14c9c:	9103      	str	r1, [sp, #12]
   14c9e:	f245 606c 	movw	r0, #22124	; 0x566c
   14ca2:	f2c0 0002 	movt	r0, #2
   14ca6:	2202      	movs	r2, #2
   14ca8:	9001      	str	r0, [sp, #4]
   14caa:	4608      	mov	r0, r1
   14cac:	9901      	ldr	r1, [sp, #4]
   14cae:	f001 fd87 	bl	167c0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   14cb2:	9000      	str	r0, [sp, #0]
   14cb4:	e7ff      	b.n	14cb6 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   14cb6:	9800      	ldr	r0, [sp, #0]
   14cb8:	f000 0001 	and.w	r0, r0, #1
   14cbc:	b004      	add	sp, #16
   14cbe:	bd80      	pop	{r7, pc}

00014cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   14cc0:	b580      	push	{r7, lr}
   14cc2:	b08a      	sub	sp, #40	; 0x28
   14cc4:	4684      	mov	ip, r0
   14cc6:	f88d 0017 	strb.w	r0, [sp, #23]
   14cca:	9107      	str	r1, [sp, #28]
   14ccc:	9208      	str	r2, [sp, #32]
   14cce:	f89d 0017 	ldrb.w	r0, [sp, #23]
   14cd2:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   14cd6:	f1be 0f00 	cmp.w	lr, #0
   14cda:	9304      	str	r3, [sp, #16]
   14cdc:	9203      	str	r2, [sp, #12]
   14cde:	9102      	str	r1, [sp, #8]
   14ce0:	d00e      	beq.n	14d00 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   14ce2:	e7ff      	b.n	14ce4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   14ce4:	4668      	mov	r0, sp
   14ce6:	9904      	ldr	r1, [sp, #16]
   14ce8:	6001      	str	r1, [r0, #0]
   14cea:	f245 6370 	movw	r3, #22128	; 0x5670
   14cee:	f2c0 0302 	movt	r3, #2
   14cf2:	aa06      	add	r2, sp, #24
   14cf4:	9802      	ldr	r0, [sp, #8]
   14cf6:	9903      	ldr	r1, [sp, #12]
   14cf8:	f001 f814 	bl	15d24 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   14cfc:	defe      	udf	#254	; 0xfe
   14cfe:	defe      	udf	#254	; 0xfe
   14d00:	f89d 0017 	ldrb.w	r0, [sp, #23]
   14d04:	07c0      	lsls	r0, r0, #31
   14d06:	2800      	cmp	r0, #0
   14d08:	d102      	bne.n	14d10 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   14d0a:	e7ff      	b.n	14d0c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   14d0c:	b00a      	add	sp, #40	; 0x28
   14d0e:	bd80      	pop	{r7, pc}
   14d10:	e7fc      	b.n	14d0c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

00014d12 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   14d12:	b580      	push	{r7, lr}
   14d14:	b088      	sub	sp, #32
   14d16:	9001      	str	r0, [sp, #4]
   14d18:	2000      	movs	r0, #0
   14d1a:	f88d 0013 	strb.w	r0, [sp, #19]
   14d1e:	f88d 0011 	strb.w	r0, [sp, #17]
   14d22:	f88d 0012 	strb.w	r0, [sp, #18]
   14d26:	2001      	movs	r0, #1
   14d28:	f88d 0012 	strb.w	r0, [sp, #18]
   14d2c:	f88d 0013 	strb.w	r0, [sp, #19]
   14d30:	f88d 0011 	strb.w	r0, [sp, #17]
   14d34:	9801      	ldr	r0, [sp, #4]
   14d36:	1e41      	subs	r1, r0, #1
   14d38:	bf18      	it	ne
   14d3a:	2101      	movne	r1, #1
   14d3c:	2801      	cmp	r0, #1
   14d3e:	d00d      	beq.n	14d5c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   14d40:	e7ff      	b.n	14d42 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   14d42:	2000      	movs	r0, #0
   14d44:	f88d 0013 	strb.w	r0, [sp, #19]
   14d48:	9901      	ldr	r1, [sp, #4]
   14d4a:	9107      	str	r1, [sp, #28]
   14d4c:	f88d 0011 	strb.w	r0, [sp, #17]
   14d50:	9103      	str	r1, [sp, #12]
   14d52:	9803      	ldr	r0, [sp, #12]
   14d54:	f7f4 fdce 	bl	98f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   14d58:	e006      	b.n	14d68 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   14d5a:	defe      	udf	#254	; 0xfe
   14d5c:	2000      	movs	r0, #0
   14d5e:	f88d 0012 	strb.w	r0, [sp, #18]
   14d62:	f88d 000b 	strb.w	r0, [sp, #11]
   14d66:	e003      	b.n	14d70 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   14d68:	2001      	movs	r0, #1
   14d6a:	f88d 000b 	strb.w	r0, [sp, #11]
   14d6e:	e7ff      	b.n	14d70 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   14d70:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14d74:	07c0      	lsls	r0, r0, #31
   14d76:	2800      	cmp	r0, #0
   14d78:	d104      	bne.n	14d84 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   14d7a:	e7ff      	b.n	14d7c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   14d7c:	9801      	ldr	r0, [sp, #4]
   14d7e:	2801      	cmp	r0, #1
   14d80:	d008      	beq.n	14d94 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   14d82:	e011      	b.n	14da8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   14d84:	2000      	movs	r0, #0
   14d86:	f88d 0011 	strb.w	r0, [sp, #17]
   14d8a:	e7f7      	b.n	14d7c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   14d8c:	f89d 000b 	ldrb.w	r0, [sp, #11]
   14d90:	b008      	add	sp, #32
   14d92:	bd80      	pop	{r7, pc}
   14d94:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14d98:	07c0      	lsls	r0, r0, #31
   14d9a:	2800      	cmp	r0, #0
   14d9c:	d0f6      	beq.n	14d8c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   14d9e:	e7ff      	b.n	14da0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   14da0:	2000      	movs	r0, #0
   14da2:	f88d 0012 	strb.w	r0, [sp, #18]
   14da6:	e7f1      	b.n	14d8c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   14da8:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14dac:	07c0      	lsls	r0, r0, #31
   14dae:	2800      	cmp	r0, #0
   14db0:	d0ec      	beq.n	14d8c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   14db2:	e7ff      	b.n	14db4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   14db4:	2000      	movs	r0, #0
   14db6:	f88d 0013 	strb.w	r0, [sp, #19]
   14dba:	e7e7      	b.n	14d8c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

00014dbc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   14dbc:	b580      	push	{r7, lr}
   14dbe:	b088      	sub	sp, #32
   14dc0:	9001      	str	r0, [sp, #4]
   14dc2:	2000      	movs	r0, #0
   14dc4:	f88d 0013 	strb.w	r0, [sp, #19]
   14dc8:	f88d 0011 	strb.w	r0, [sp, #17]
   14dcc:	f88d 0012 	strb.w	r0, [sp, #18]
   14dd0:	2001      	movs	r0, #1
   14dd2:	f88d 0012 	strb.w	r0, [sp, #18]
   14dd6:	f88d 0013 	strb.w	r0, [sp, #19]
   14dda:	f88d 0011 	strb.w	r0, [sp, #17]
   14dde:	9801      	ldr	r0, [sp, #4]
   14de0:	1e41      	subs	r1, r0, #1
   14de2:	bf18      	it	ne
   14de4:	2101      	movne	r1, #1
   14de6:	2801      	cmp	r0, #1
   14de8:	d00d      	beq.n	14e06 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   14dea:	e7ff      	b.n	14dec <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   14dec:	2000      	movs	r0, #0
   14dee:	f88d 0013 	strb.w	r0, [sp, #19]
   14df2:	9901      	ldr	r1, [sp, #4]
   14df4:	9107      	str	r1, [sp, #28]
   14df6:	f88d 0011 	strb.w	r0, [sp, #17]
   14dfa:	9103      	str	r1, [sp, #12]
   14dfc:	9803      	ldr	r0, [sp, #12]
   14dfe:	f7f4 fd6f 	bl	98e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   14e02:	e006      	b.n	14e12 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   14e04:	defe      	udf	#254	; 0xfe
   14e06:	2000      	movs	r0, #0
   14e08:	f88d 0012 	strb.w	r0, [sp, #18]
   14e0c:	f88d 000b 	strb.w	r0, [sp, #11]
   14e10:	e003      	b.n	14e1a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   14e12:	2001      	movs	r0, #1
   14e14:	f88d 000b 	strb.w	r0, [sp, #11]
   14e18:	e7ff      	b.n	14e1a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   14e1a:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14e1e:	07c0      	lsls	r0, r0, #31
   14e20:	2800      	cmp	r0, #0
   14e22:	d104      	bne.n	14e2e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   14e24:	e7ff      	b.n	14e26 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   14e26:	9801      	ldr	r0, [sp, #4]
   14e28:	2801      	cmp	r0, #1
   14e2a:	d008      	beq.n	14e3e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   14e2c:	e011      	b.n	14e52 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   14e2e:	2000      	movs	r0, #0
   14e30:	f88d 0011 	strb.w	r0, [sp, #17]
   14e34:	e7f7      	b.n	14e26 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   14e36:	f89d 000b 	ldrb.w	r0, [sp, #11]
   14e3a:	b008      	add	sp, #32
   14e3c:	bd80      	pop	{r7, pc}
   14e3e:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14e42:	07c0      	lsls	r0, r0, #31
   14e44:	2800      	cmp	r0, #0
   14e46:	d0f6      	beq.n	14e36 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   14e48:	e7ff      	b.n	14e4a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   14e4a:	2000      	movs	r0, #0
   14e4c:	f88d 0012 	strb.w	r0, [sp, #18]
   14e50:	e7f1      	b.n	14e36 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   14e52:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14e56:	07c0      	lsls	r0, r0, #31
   14e58:	2800      	cmp	r0, #0
   14e5a:	d0ec      	beq.n	14e36 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   14e5c:	e7ff      	b.n	14e5e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   14e5e:	2000      	movs	r0, #0
   14e60:	f88d 0013 	strb.w	r0, [sp, #19]
   14e64:	e7e7      	b.n	14e36 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

00014e66 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   14e66:	b580      	push	{r7, lr}
   14e68:	b088      	sub	sp, #32
   14e6a:	9001      	str	r0, [sp, #4]
   14e6c:	2000      	movs	r0, #0
   14e6e:	f88d 0013 	strb.w	r0, [sp, #19]
   14e72:	f88d 0011 	strb.w	r0, [sp, #17]
   14e76:	f88d 0012 	strb.w	r0, [sp, #18]
   14e7a:	2001      	movs	r0, #1
   14e7c:	f88d 0012 	strb.w	r0, [sp, #18]
   14e80:	f88d 0013 	strb.w	r0, [sp, #19]
   14e84:	f88d 0011 	strb.w	r0, [sp, #17]
   14e88:	9801      	ldr	r0, [sp, #4]
   14e8a:	1e41      	subs	r1, r0, #1
   14e8c:	bf18      	it	ne
   14e8e:	2101      	movne	r1, #1
   14e90:	2801      	cmp	r0, #1
   14e92:	d00d      	beq.n	14eb0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   14e94:	e7ff      	b.n	14e96 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   14e96:	2000      	movs	r0, #0
   14e98:	f88d 0013 	strb.w	r0, [sp, #19]
   14e9c:	9901      	ldr	r1, [sp, #4]
   14e9e:	9107      	str	r1, [sp, #28]
   14ea0:	f88d 0011 	strb.w	r0, [sp, #17]
   14ea4:	9103      	str	r1, [sp, #12]
   14ea6:	9803      	ldr	r0, [sp, #12]
   14ea8:	f7f4 fd1f 	bl	98ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   14eac:	e006      	b.n	14ebc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   14eae:	defe      	udf	#254	; 0xfe
   14eb0:	2000      	movs	r0, #0
   14eb2:	f88d 0012 	strb.w	r0, [sp, #18]
   14eb6:	f88d 000b 	strb.w	r0, [sp, #11]
   14eba:	e003      	b.n	14ec4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   14ebc:	2001      	movs	r0, #1
   14ebe:	f88d 000b 	strb.w	r0, [sp, #11]
   14ec2:	e7ff      	b.n	14ec4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   14ec4:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14ec8:	07c0      	lsls	r0, r0, #31
   14eca:	2800      	cmp	r0, #0
   14ecc:	d104      	bne.n	14ed8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   14ece:	e7ff      	b.n	14ed0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   14ed0:	9801      	ldr	r0, [sp, #4]
   14ed2:	2801      	cmp	r0, #1
   14ed4:	d008      	beq.n	14ee8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   14ed6:	e011      	b.n	14efc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   14ed8:	2000      	movs	r0, #0
   14eda:	f88d 0011 	strb.w	r0, [sp, #17]
   14ede:	e7f7      	b.n	14ed0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   14ee0:	f89d 000b 	ldrb.w	r0, [sp, #11]
   14ee4:	b008      	add	sp, #32
   14ee6:	bd80      	pop	{r7, pc}
   14ee8:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14eec:	07c0      	lsls	r0, r0, #31
   14eee:	2800      	cmp	r0, #0
   14ef0:	d0f6      	beq.n	14ee0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   14ef2:	e7ff      	b.n	14ef4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   14ef4:	2000      	movs	r0, #0
   14ef6:	f88d 0012 	strb.w	r0, [sp, #18]
   14efa:	e7f1      	b.n	14ee0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   14efc:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14f00:	07c0      	lsls	r0, r0, #31
   14f02:	2800      	cmp	r0, #0
   14f04:	d0ec      	beq.n	14ee0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   14f06:	e7ff      	b.n	14f08 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   14f08:	2000      	movs	r0, #0
   14f0a:	f88d 0013 	strb.w	r0, [sp, #19]
   14f0e:	e7e7      	b.n	14ee0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

00014f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   14f10:	b082      	sub	sp, #8
   14f12:	2001      	movs	r0, #1
   14f14:	f88d 0003 	strb.w	r0, [sp, #3]
   14f18:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14f1c:	b002      	add	sp, #8
   14f1e:	4770      	bx	lr

00014f20 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
        self.style.stroke_width = width;

        self
    }

    fn fill(mut self, color: Option<C>) -> Self {
   14f20:	b5b0      	push	{r4, r5, r7, lr}
   14f22:	b081      	sub	sp, #4
   14f24:	469c      	mov	ip, r3
   14f26:	4696      	mov	lr, r2
   14f28:	f8ad 2000 	strh.w	r2, [sp]
   14f2c:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   14f30:	820a      	strh	r2, [r1, #16]
   14f32:	824b      	strh	r3, [r1, #18]

        self
   14f34:	c91c      	ldmia	r1!, {r2, r3, r4}
   14f36:	c01c      	stmia	r0!, {r2, r3, r4}
   14f38:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   14f3c:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   14f40:	b001      	add	sp, #4
   14f42:	bdb0      	pop	{r4, r5, r7, pc}

00014f44 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   14f44:	b510      	push	{r4, lr}
   14f46:	b08c      	sub	sp, #48	; 0x30
   14f48:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   14f4c:	9108      	str	r1, [sp, #32]
   14f4e:	9209      	str	r2, [sp, #36]	; 0x24
   14f50:	930a      	str	r3, [sp, #40]	; 0x28
   14f52:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   14f56:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   14f5a:	9004      	str	r0, [sp, #16]
   14f5c:	4670      	mov	r0, lr
   14f5e:	9303      	str	r3, [sp, #12]
   14f60:	9202      	str	r2, [sp, #8]
   14f62:	9101      	str	r1, [sp, #4]
   14f64:	f8cd c000 	str.w	ip, [sp]
   14f68:	f000 f818 	bl	14f9c <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   14f6c:	e7ff      	b.n	14f6e <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   14f6e:	9801      	ldr	r0, [sp, #4]
   14f70:	9904      	ldr	r1, [sp, #16]
   14f72:	6008      	str	r0, [r1, #0]
   14f74:	9a02      	ldr	r2, [sp, #8]
   14f76:	604a      	str	r2, [r1, #4]
   14f78:	9b03      	ldr	r3, [sp, #12]
   14f7a:	608b      	str	r3, [r1, #8]
   14f7c:	f8dd c000 	ldr.w	ip, [sp]
   14f80:	f8c1 c00c 	str.w	ip, [r1, #12]
   14f84:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   14f88:	f8a1 e018 	strh.w	lr, [r1, #24]
   14f8c:	f8dd e014 	ldr.w	lr, [sp, #20]
   14f90:	9c06      	ldr	r4, [sp, #24]
   14f92:	614c      	str	r4, [r1, #20]
   14f94:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   14f98:	b00c      	add	sp, #48	; 0x30
   14f9a:	bd10      	pop	{r4, pc}

00014f9c <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   14f9c:	b082      	sub	sp, #8
   14f9e:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   14fa0:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   14fa4:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   14fa8:	f8bd 1000 	ldrh.w	r1, [sp]
   14fac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14fb0:	8001      	strh	r1, [r0, #0]
   14fb2:	8042      	strh	r2, [r0, #2]
   14fb4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   14fb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   14fbc:	8081      	strh	r1, [r0, #4]
   14fbe:	80c2      	strh	r2, [r0, #6]
   14fc0:	2101      	movs	r1, #1
   14fc2:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   14fc4:	b002      	add	sp, #8
   14fc6:	4770      	bx	lr

00014fc8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
   14fc8:	b084      	sub	sp, #16
   14fca:	460a      	mov	r2, r1
   14fcc:	4603      	mov	r3, r0
   14fce:	9103      	str	r1, [sp, #12]
   14fd0:	9002      	str	r0, [sp, #8]
   14fd2:	b004      	add	sp, #16
   14fd4:	4770      	bx	lr

00014fd6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
   14fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
   14fd8:	b091      	sub	sp, #68	; 0x44
   14fda:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
   14fde:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
   14fe2:	461c      	mov	r4, r3
   14fe4:	4615      	mov	r5, r2
   14fe6:	460e      	mov	r6, r1
   14fe8:	900a      	str	r0, [sp, #40]	; 0x28
   14fea:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
   14fee:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
   14ff2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   14ff6:	f8ad e032 	strh.w	lr, [sp, #50]	; 0x32
   14ffa:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
   14ffc:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
   15000:	2701      	movs	r7, #1
   15002:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
   15006:	466f      	mov	r7, sp
   15008:	f8c7 e000 	str.w	lr, [r7]
   1500c:	9008      	str	r0, [sp, #32]
   1500e:	f8cd c01c 	str.w	ip, [sp, #28]
   15012:	9406      	str	r4, [sp, #24]
   15014:	9505      	str	r5, [sp, #20]
   15016:	9604      	str	r6, [sp, #16]
   15018:	f7f4 fd9b 	bl	9b52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
   1501c:	9003      	str	r0, [sp, #12]
   1501e:	e7ff      	b.n	15020 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x4a>
   15020:	9803      	ldr	r0, [sp, #12]
   15022:	f000 0001 	and.w	r0, r0, #1
   15026:	f7f3 fe25 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1502a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   1502e:	e7ff      	b.n	15030 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x5a>
   15030:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
   15034:	07c1      	lsls	r1, r0, #31
   15036:	2900      	cmp	r1, #0
   15038:	d001      	beq.n	1503e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x68>
   1503a:	e7ff      	b.n	1503c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x66>
   1503c:	e009      	b.n	15052 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x7c>
   1503e:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
   15040:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   15044:	9808      	ldr	r0, [sp, #32]
   15046:	9907      	ldr	r1, [sp, #28]
   15048:	f000 f848 	bl	150dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E>
   1504c:	9002      	str	r0, [sp, #8]
   1504e:	e00d      	b.n	1506c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x96>
        self.set_address_window(sx, sy, ex, ey)?;
   15050:	defe      	udf	#254	; 0xfe
   15052:	f7fd fad4 	bl	125fe <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   15056:	e003      	b.n	15060 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x8a>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
   15058:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   1505c:	b011      	add	sp, #68	; 0x44
   1505e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
   15060:	f7ff ff56 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   15064:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   15068:	e7ff      	b.n	1506a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x94>
   1506a:	e031      	b.n	150d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xfa>
        self.write_pixels(colors) ? ;
   1506c:	9802      	ldr	r0, [sp, #8]
   1506e:	f000 0001 	and.w	r0, r0, #1
   15072:	f7f3 fdff 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   15076:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
   1507a:	e7ff      	b.n	1507c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xa6>
   1507c:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   15080:	07c1      	lsls	r1, r0, #31
   15082:	2900      	cmp	r1, #0
   15084:	d001      	beq.n	1508a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xb4>
   15086:	e7ff      	b.n	15088 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xb2>
   15088:	e004      	b.n	15094 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xbe>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   1508a:	f7fe fd07 	bl	13a9c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   1508e:	9001      	str	r0, [sp, #4]
   15090:	e009      	b.n	150a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xd0>
        self.write_pixels(colors) ? ;
   15092:	defe      	udf	#254	; 0xfe
   15094:	f7fd fab3 	bl	125fe <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   15098:	e7ff      	b.n	1509a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xc4>
   1509a:	f7ff ff39 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1509e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   150a2:	e7ff      	b.n	150a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xce>
   150a4:	e014      	b.n	150d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xfa>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   150a6:	f245 6180 	movw	r1, #22144	; 0x5680
   150aa:	f2c0 0102 	movt	r1, #2
   150ae:	f245 63dc 	movw	r3, #22236	; 0x56dc
   150b2:	f2c0 0302 	movt	r3, #2
   150b6:	220e      	movs	r2, #14
   150b8:	9801      	ldr	r0, [sp, #4]
   150ba:	f7f3 fda2 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   150be:	e7ff      	b.n	150c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xea>
   150c0:	2000      	movs	r0, #0
        Ok(())
   150c2:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    }
   150c6:	e7c7      	b.n	15058 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x82>
   150c8:	2000      	movs	r0, #0
   150ca:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   150ce:	e7c3      	b.n	15058 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x82>
   150d0:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   150d4:	07c0      	lsls	r0, r0, #31
   150d6:	2800      	cmp	r0, #0
   150d8:	d1f6      	bne.n	150c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xf2>
   150da:	e7bd      	b.n	15058 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x82>

000150dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
   150dc:	b580      	push	{r7, lr}
   150de:	b094      	sub	sp, #80	; 0x50
   150e0:	900d      	str	r0, [sp, #52]	; 0x34
   150e2:	910e      	str	r1, [sp, #56]	; 0x38
   150e4:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
   150e6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   150ea:	2301      	movs	r3, #1
   150ec:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   150f0:	232c      	movs	r3, #44	; 0x2c
   150f2:	f88d 301f 	strb.w	r3, [sp, #31]
   150f6:	9209      	str	r2, [sp, #36]	; 0x24
   150f8:	9208      	str	r2, [sp, #32]
   150fa:	9208      	str	r2, [sp, #32]
   150fc:	9a08      	ldr	r2, [sp, #32]
   150fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15100:	f89d c01f 	ldrb.w	ip, [sp, #31]
   15104:	9006      	str	r0, [sp, #24]
   15106:	9105      	str	r1, [sp, #20]
   15108:	4661      	mov	r1, ip
   1510a:	f7f4 fc31 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1510e:	9004      	str	r0, [sp, #16]
   15110:	e7ff      	b.n	15112 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x36>
   15112:	9804      	ldr	r0, [sp, #16]
   15114:	f000 0001 	and.w	r0, r0, #1
   15118:	f7f3 fdac 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1511c:	f88d 001e 	strb.w	r0, [sp, #30]
   15120:	e7ff      	b.n	15122 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x46>
   15122:	f89d 001e 	ldrb.w	r0, [sp, #30]
   15126:	07c1      	lsls	r1, r0, #31
   15128:	2900      	cmp	r1, #0
   1512a:	d001      	beq.n	15130 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x54>
   1512c:	e7ff      	b.n	1512e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x52>
   1512e:	e008      	b.n	15142 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x66>
   15130:	2000      	movs	r0, #0
        for color in colors {
   15132:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   15136:	9805      	ldr	r0, [sp, #20]
   15138:	f000 f8ee 	bl	15318 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h48c974e346f24094E>
   1513c:	9003      	str	r0, [sp, #12]
   1513e:	e00d      	b.n	1515c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x80>
        self.write_command(Instruction::RAMWR, None)?;
   15140:	defe      	udf	#254	; 0xfe
   15142:	f7fd fa5c 	bl	125fe <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   15146:	e003      	b.n	15150 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x74>
    }
   15148:	f89d 001d 	ldrb.w	r0, [sp, #29]
   1514c:	b014      	add	sp, #80	; 0x50
   1514e:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
   15150:	f7ff fede 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   15154:	f88d 001d 	strb.w	r0, [sp, #29]
   15158:	e7ff      	b.n	1515a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x7e>
   1515a:	e057      	b.n	1520c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x130>
        for color in colors {
   1515c:	9803      	ldr	r0, [sp, #12]
   1515e:	900a      	str	r0, [sp, #40]	; 0x28
   15160:	e7ff      	b.n	15162 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x86>
   15162:	a80a      	add	r0, sp, #40	; 0x28
   15164:	f000 f8dc 	bl	15320 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3601a500030acd5E>
   15168:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
   1516c:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   15170:	e7ff      	b.n	15172 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x96>
   15172:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
   15176:	4601      	mov	r1, r0
   15178:	2800      	cmp	r0, #0
   1517a:	d001      	beq.n	15180 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xa4>
   1517c:	e7ff      	b.n	1517e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xa2>
   1517e:	e001      	b.n	15184 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xa8>
        }
   15180:	e02b      	b.n	151da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xfe>
        for color in colors {
   15182:	defe      	udf	#254	; 0xfe
   15184:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
   15188:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
   1518c:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
   15190:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
            self.write_word(color)?;
   15194:	9906      	ldr	r1, [sp, #24]
   15196:	9002      	str	r0, [sp, #8]
   15198:	4608      	mov	r0, r1
   1519a:	9902      	ldr	r1, [sp, #8]
   1519c:	f7f4 fbca 	bl	9934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   151a0:	9001      	str	r0, [sp, #4]
   151a2:	e7ff      	b.n	151a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xc8>
   151a4:	9801      	ldr	r0, [sp, #4]
   151a6:	f000 0001 	and.w	r0, r0, #1
   151aa:	f7f3 fd63 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   151ae:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   151b2:	e7ff      	b.n	151b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xd8>
   151b4:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
   151b8:	07c1      	lsls	r1, r0, #31
   151ba:	2900      	cmp	r1, #0
   151bc:	d001      	beq.n	151c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xe6>
   151be:	e7ff      	b.n	151c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xe4>
   151c0:	e001      	b.n	151c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xea>
        for color in colors {
   151c2:	e7ce      	b.n	15162 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x86>
            self.write_word(color)?;
   151c4:	defe      	udf	#254	; 0xfe
   151c6:	f7fd fa1a 	bl	125fe <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   151ca:	e7ff      	b.n	151cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xf0>
   151cc:	f7ff fea0 	bl	14f10 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   151d0:	f88d 001d 	strb.w	r0, [sp, #29]
   151d4:	e7ff      	b.n	151d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xfa>
        }
   151d6:	e7ff      	b.n	151d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xfc>
    }
   151d8:	e018      	b.n	1520c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x130>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   151da:	f7fe fc5f 	bl	13a9c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   151de:	9000      	str	r0, [sp, #0]
   151e0:	e7ff      	b.n	151e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x106>
   151e2:	f245 6180 	movw	r1, #22144	; 0x5680
   151e6:	f2c0 0102 	movt	r1, #2
   151ea:	f245 63ec 	movw	r3, #22252	; 0x56ec
   151ee:	f2c0 0302 	movt	r3, #2
   151f2:	220e      	movs	r2, #14
   151f4:	9800      	ldr	r0, [sp, #0]
   151f6:	f7f3 fd04 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   151fa:	e7ff      	b.n	151fc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x120>
   151fc:	2000      	movs	r0, #0
        Ok(())
   151fe:	f88d 001d 	strb.w	r0, [sp, #29]
    }
   15202:	e7a1      	b.n	15148 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x6c>
   15204:	2000      	movs	r0, #0
   15206:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   1520a:	e79d      	b.n	15148 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x6c>
   1520c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   15210:	07c0      	lsls	r0, r0, #31
   15212:	2800      	cmp	r0, #0
   15214:	d1f6      	bne.n	15204 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x128>
   15216:	e797      	b.n	15148 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x6c>

00015218 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE>:
   15218:	b083      	sub	sp, #12
   1521a:	9002      	str	r0, [sp, #8]
   1521c:	9000      	str	r0, [sp, #0]
   1521e:	e7ff      	b.n	15220 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x8>
   15220:	9800      	ldr	r0, [sp, #0]
   15222:	28ff      	cmp	r0, #255	; 0xff
   15224:	d807      	bhi.n	15236 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x1e>
   15226:	e7ff      	b.n	15228 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x10>
   15228:	9800      	ldr	r0, [sp, #0]
   1522a:	f88d 0005 	strb.w	r0, [sp, #5]
   1522e:	2100      	movs	r1, #0
   15230:	f88d 1004 	strb.w	r1, [sp, #4]
   15234:	e003      	b.n	1523e <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x26>
   15236:	2001      	movs	r0, #1
   15238:	f88d 0004 	strb.w	r0, [sp, #4]
   1523c:	e7ff      	b.n	1523e <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x26>
   1523e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   15242:	f89d 1005 	ldrb.w	r1, [sp, #5]
   15246:	b003      	add	sp, #12
   15248:	4770      	bx	lr

0001524a <_ZN4core3cmp3Ord3min17hc89b724701767be9E>:
   1524a:	b580      	push	{r7, lr}
   1524c:	b084      	sub	sp, #16
   1524e:	460a      	mov	r2, r1
   15250:	4603      	mov	r3, r0
   15252:	f88d 000e 	strb.w	r0, [sp, #14]
   15256:	f88d 100f 	strb.w	r1, [sp, #15]
   1525a:	9202      	str	r2, [sp, #8]
   1525c:	9301      	str	r3, [sp, #4]
   1525e:	f000 f805 	bl	1526c <_ZN4core3cmp6min_by17hbd80813895a56a69E>
   15262:	9000      	str	r0, [sp, #0]
   15264:	e7ff      	b.n	15266 <_ZN4core3cmp3Ord3min17hc89b724701767be9E+0x1c>
   15266:	9800      	ldr	r0, [sp, #0]
   15268:	b004      	add	sp, #16
   1526a:	bd80      	pop	{r7, pc}

0001526c <_ZN4core3cmp6min_by17hbd80813895a56a69E>:
   1526c:	b580      	push	{r7, lr}
   1526e:	b088      	sub	sp, #32
   15270:	460a      	mov	r2, r1
   15272:	4603      	mov	r3, r0
   15274:	f88d 000c 	strb.w	r0, [sp, #12]
   15278:	f88d 100d 	strb.w	r1, [sp, #13]
   1527c:	2000      	movs	r0, #0
   1527e:	f88d 001b 	strb.w	r0, [sp, #27]
   15282:	f88d 001a 	strb.w	r0, [sp, #26]
   15286:	2001      	movs	r0, #1
   15288:	f88d 001b 	strb.w	r0, [sp, #27]
   1528c:	f88d 001a 	strb.w	r0, [sp, #26]
   15290:	a803      	add	r0, sp, #12
   15292:	9004      	str	r0, [sp, #16]
   15294:	f10d 000d 	add.w	r0, sp, #13
   15298:	9005      	str	r0, [sp, #20]
   1529a:	9804      	ldr	r0, [sp, #16]
   1529c:	9905      	ldr	r1, [sp, #20]
   1529e:	9202      	str	r2, [sp, #8]
   152a0:	9301      	str	r3, [sp, #4]
   152a2:	f7fc fbb7 	bl	11a14 <_ZN4core3ops8function6FnOnce9call_once17h59e116d6918016e9E>
   152a6:	f88d 000f 	strb.w	r0, [sp, #15]
   152aa:	e7ff      	b.n	152ac <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x40>
   152ac:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   152b0:	1c41      	adds	r1, r0, #1
   152b2:	2902      	cmp	r1, #2
   152b4:	d309      	bcc.n	152ca <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x5e>
   152b6:	e7ff      	b.n	152b8 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x4c>
   152b8:	2000      	movs	r0, #0
   152ba:	f88d 001a 	strb.w	r0, [sp, #26]
   152be:	f89d 000d 	ldrb.w	r0, [sp, #13]
   152c2:	f88d 000e 	strb.w	r0, [sp, #14]
   152c6:	e008      	b.n	152da <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x6e>
   152c8:	defe      	udf	#254	; 0xfe
   152ca:	2000      	movs	r0, #0
   152cc:	f88d 001b 	strb.w	r0, [sp, #27]
   152d0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   152d4:	f88d 000e 	strb.w	r0, [sp, #14]
   152d8:	e7ff      	b.n	152da <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x6e>
   152da:	f89d 001a 	ldrb.w	r0, [sp, #26]
   152de:	07c0      	lsls	r0, r0, #31
   152e0:	2800      	cmp	r0, #0
   152e2:	d10a      	bne.n	152fa <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x8e>
   152e4:	e7ff      	b.n	152e6 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x7a>
   152e6:	f89d 001b 	ldrb.w	r0, [sp, #27]
   152ea:	07c0      	lsls	r0, r0, #31
   152ec:	2800      	cmp	r0, #0
   152ee:	d108      	bne.n	15302 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x96>
   152f0:	e7ff      	b.n	152f2 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x86>
   152f2:	f89d 000e 	ldrb.w	r0, [sp, #14]
   152f6:	b008      	add	sp, #32
   152f8:	bd80      	pop	{r7, pc}
   152fa:	2000      	movs	r0, #0
   152fc:	f88d 001a 	strb.w	r0, [sp, #26]
   15300:	e7f1      	b.n	152e6 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x7a>
   15302:	2000      	movs	r0, #0
   15304:	f88d 001b 	strb.w	r0, [sp, #27]
   15308:	e7f3      	b.n	152f2 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x86>

0001530a <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h8e5f04233c93701aE>:
   1530a:	b081      	sub	sp, #4
   1530c:	4601      	mov	r1, r0
   1530e:	f88d 0003 	strb.w	r0, [sp, #3]
   15312:	b2c0      	uxtb	r0, r0
   15314:	b001      	add	sp, #4
   15316:	4770      	bx	lr

00015318 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h48c974e346f24094E>:
   15318:	b081      	sub	sp, #4
   1531a:	9000      	str	r0, [sp, #0]
   1531c:	b001      	add	sp, #4
   1531e:	4770      	bx	lr

00015320 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3601a500030acd5E>:
   15320:	b580      	push	{r7, lr}
   15322:	b084      	sub	sp, #16
   15324:	9003      	str	r0, [sp, #12]
   15326:	6800      	ldr	r0, [r0, #0]
   15328:	f7fa feab 	bl	10082 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE>
   1532c:	9002      	str	r0, [sp, #8]
   1532e:	9101      	str	r1, [sp, #4]
   15330:	e7ff      	b.n	15332 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3601a500030acd5E+0x12>
   15332:	9802      	ldr	r0, [sp, #8]
   15334:	9901      	ldr	r1, [sp, #4]
   15336:	b004      	add	sp, #16
   15338:	bd80      	pop	{r7, pc}

0001533a <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E>:
   1533a:	b580      	push	{r7, lr}
   1533c:	b08c      	sub	sp, #48	; 0x30
   1533e:	9005      	str	r0, [sp, #20]
   15340:	9106      	str	r1, [sp, #24]
   15342:	9207      	str	r2, [sp, #28]
   15344:	9008      	str	r0, [sp, #32]
   15346:	9109      	str	r1, [sp, #36]	; 0x24
   15348:	2301      	movs	r3, #1
   1534a:	930b      	str	r3, [sp, #44]	; 0x2c
   1534c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1534e:	9204      	str	r2, [sp, #16]
   15350:	9103      	str	r1, [sp, #12]
   15352:	9002      	str	r0, [sp, #8]
   15354:	9301      	str	r3, [sp, #4]
   15356:	e7ff      	b.n	15358 <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E+0x1e>
   15358:	9801      	ldr	r0, [sp, #4]
   1535a:	9904      	ldr	r1, [sp, #16]
   1535c:	fb00 f201 	mul.w	r2, r0, r1
   15360:	920a      	str	r2, [sp, #40]	; 0x28
   15362:	9802      	ldr	r0, [sp, #8]
   15364:	9903      	ldr	r1, [sp, #12]
   15366:	f000 fb87 	bl	15a78 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E>
   1536a:	e7ff      	b.n	1536c <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E+0x32>
   1536c:	b00c      	add	sp, #48	; 0x30
   1536e:	bd80      	pop	{r7, pc}

00015370 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E>:
   15370:	b580      	push	{r7, lr}
   15372:	b088      	sub	sp, #32
   15374:	9004      	str	r0, [sp, #16]
   15376:	9105      	str	r1, [sp, #20]
   15378:	2201      	movs	r2, #1
   1537a:	9207      	str	r2, [sp, #28]
   1537c:	9a07      	ldr	r2, [sp, #28]
   1537e:	9103      	str	r1, [sp, #12]
   15380:	9002      	str	r0, [sp, #8]
   15382:	9201      	str	r2, [sp, #4]
   15384:	e7ff      	b.n	15386 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x16>
   15386:	9801      	ldr	r0, [sp, #4]
   15388:	2820      	cmp	r0, #32
   1538a:	d306      	bcc.n	1539a <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x2a>
   1538c:	e7ff      	b.n	1538e <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x1e>
   1538e:	2201      	movs	r2, #1
   15390:	9802      	ldr	r0, [sp, #8]
   15392:	9903      	ldr	r1, [sp, #12]
   15394:	f7ff ffd1 	bl	1533a <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E>
   15398:	e013      	b.n	153c2 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x52>
   1539a:	9802      	ldr	r0, [sp, #8]
   1539c:	f000 f814 	bl	153c8 <_ZN4core3ptr4read17h9c6a8e2989f962ccE>
   153a0:	4601      	mov	r1, r0
   153a2:	f88d 001b 	strb.w	r0, [sp, #27]
   153a6:	9100      	str	r1, [sp, #0]
   153a8:	e7ff      	b.n	153aa <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x3a>
   153aa:	2201      	movs	r2, #1
   153ac:	9803      	ldr	r0, [sp, #12]
   153ae:	9902      	ldr	r1, [sp, #8]
   153b0:	f7fc fdf4 	bl	11f9c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   153b4:	e7ff      	b.n	153b6 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x46>
   153b6:	9803      	ldr	r0, [sp, #12]
   153b8:	9900      	ldr	r1, [sp, #0]
   153ba:	f7f3 fef5 	bl	91a8 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   153be:	e7ff      	b.n	153c0 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x50>
   153c0:	e000      	b.n	153c4 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x54>
   153c2:	e7ff      	b.n	153c4 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x54>
   153c4:	b008      	add	sp, #32
   153c6:	bd80      	pop	{r7, pc}

000153c8 <_ZN4core3ptr4read17h9c6a8e2989f962ccE>:
   153c8:	b580      	push	{r7, lr}
   153ca:	b088      	sub	sp, #32
   153cc:	9004      	str	r0, [sp, #16]
   153ce:	f89d 1015 	ldrb.w	r1, [sp, #21]
   153d2:	f88d 100f 	strb.w	r1, [sp, #15]
   153d6:	9002      	str	r0, [sp, #8]
   153d8:	e7ff      	b.n	153da <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x12>
   153da:	f10d 000f 	add.w	r0, sp, #15
   153de:	9006      	str	r0, [sp, #24]
   153e0:	9007      	str	r0, [sp, #28]
   153e2:	e7ff      	b.n	153e4 <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x1c>
   153e4:	f10d 010f 	add.w	r1, sp, #15
   153e8:	2201      	movs	r2, #1
   153ea:	9802      	ldr	r0, [sp, #8]
   153ec:	f7fc fdd6 	bl	11f9c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   153f0:	e7ff      	b.n	153f2 <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x2a>
   153f2:	f89d 000f 	ldrb.w	r0, [sp, #15]
   153f6:	4601      	mov	r1, r0
   153f8:	f88d 0016 	strb.w	r0, [sp, #22]
   153fc:	f88d 0017 	strb.w	r0, [sp, #23]
   15400:	9101      	str	r1, [sp, #4]
   15402:	e7ff      	b.n	15404 <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x3c>
   15404:	9801      	ldr	r0, [sp, #4]
   15406:	b008      	add	sp, #32
   15408:	bd80      	pop	{r7, pc}

0001540a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   1540a:	b580      	push	{r7, lr}
   1540c:	b088      	sub	sp, #32
   1540e:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   15410:	1d01      	adds	r1, r0, #4
   15412:	9106      	str	r1, [sp, #24]
   15414:	9107      	str	r1, [sp, #28]
   15416:	9004      	str	r0, [sp, #16]
   15418:	9103      	str	r1, [sp, #12]
   1541a:	e7ff      	b.n	1541c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   1541c:	9804      	ldr	r0, [sp, #16]
   1541e:	6801      	ldr	r1, [r0, #0]
   15420:	9803      	ldr	r0, [sp, #12]
   15422:	f7f3 fd1b 	bl	8e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   15426:	9002      	str	r0, [sp, #8]
   15428:	9101      	str	r1, [sp, #4]
   1542a:	e7ff      	b.n	1542c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   1542c:	9802      	ldr	r0, [sp, #8]
   1542e:	9901      	ldr	r1, [sp, #4]
   15430:	b008      	add	sp, #32
   15432:	bd80      	pop	{r7, pc}

00015434 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   15434:	b580      	push	{r7, lr}
   15436:	b088      	sub	sp, #32
   15438:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   1543a:	1d01      	adds	r1, r0, #4
   1543c:	9106      	str	r1, [sp, #24]
   1543e:	9107      	str	r1, [sp, #28]
   15440:	9004      	str	r0, [sp, #16]
   15442:	9103      	str	r1, [sp, #12]
   15444:	e7ff      	b.n	15446 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x12>
   15446:	9804      	ldr	r0, [sp, #16]
   15448:	6801      	ldr	r1, [r0, #0]
   1544a:	9803      	ldr	r0, [sp, #12]
   1544c:	f7f3 fd06 	bl	8e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   15450:	9002      	str	r0, [sp, #8]
   15452:	9101      	str	r1, [sp, #4]
   15454:	e7ff      	b.n	15456 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x22>
    }
   15456:	9802      	ldr	r0, [sp, #8]
   15458:	9901      	ldr	r1, [sp, #4]
   1545a:	b008      	add	sp, #32
   1545c:	bd80      	pop	{r7, pc}

0001545e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   1545e:	b580      	push	{r7, lr}
   15460:	b08a      	sub	sp, #40	; 0x28
   15462:	460a      	mov	r2, r1
   15464:	9006      	str	r0, [sp, #24]
   15466:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   1546a:	1d01      	adds	r1, r0, #4
   1546c:	9108      	str	r1, [sp, #32]
   1546e:	9109      	str	r1, [sp, #36]	; 0x24
   15470:	9005      	str	r0, [sp, #20]
   15472:	9204      	str	r2, [sp, #16]
   15474:	9103      	str	r1, [sp, #12]
   15476:	e7ff      	b.n	15478 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   15478:	9805      	ldr	r0, [sp, #20]
   1547a:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   1547c:	9803      	ldr	r0, [sp, #12]
   1547e:	f7fc fef1 	bl	12264 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   15482:	9002      	str	r0, [sp, #8]
   15484:	e7ff      	b.n	15486 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   15486:	9802      	ldr	r0, [sp, #8]
   15488:	9904      	ldr	r1, [sp, #16]
   1548a:	f000 f994 	bl	157b6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   1548e:	e7ff      	b.n	15490 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   15490:	9805      	ldr	r0, [sp, #20]
   15492:	6801      	ldr	r1, [r0, #0]
   15494:	1c4a      	adds	r2, r1, #1
   15496:	4613      	mov	r3, r2
   15498:	428a      	cmp	r2, r1
   1549a:	9301      	str	r3, [sp, #4]
   1549c:	d305      	bcc.n	154aa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   1549e:	e7ff      	b.n	154a0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   154a0:	9801      	ldr	r0, [sp, #4]
   154a2:	9905      	ldr	r1, [sp, #20]
   154a4:	6008      	str	r0, [r1, #0]
    }
   154a6:	b00a      	add	sp, #40	; 0x28
   154a8:	bd80      	pop	{r7, pc}
        self.len += 1;
   154aa:	f245 7070 	movw	r0, #22384	; 0x5770
   154ae:	f2c0 0002 	movt	r0, #2
   154b2:	f245 7254 	movw	r2, #22356	; 0x5754
   154b6:	f2c0 0202 	movt	r2, #2
   154ba:	211c      	movs	r1, #28
   154bc:	f000 fc60 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   154c0:	defe      	udf	#254	; 0xfe

000154c2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   154c2:	b580      	push	{r7, lr}
   154c4:	b08a      	sub	sp, #40	; 0x28
   154c6:	460a      	mov	r2, r1
   154c8:	9006      	str	r0, [sp, #24]
   154ca:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   154ce:	1d01      	adds	r1, r0, #4
   154d0:	9108      	str	r1, [sp, #32]
   154d2:	9109      	str	r1, [sp, #36]	; 0x24
   154d4:	9005      	str	r0, [sp, #20]
   154d6:	9204      	str	r2, [sp, #16]
   154d8:	9103      	str	r1, [sp, #12]
   154da:	e7ff      	b.n	154dc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x1a>
            .add(self.len)
   154dc:	9805      	ldr	r0, [sp, #20]
   154de:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   154e0:	9803      	ldr	r0, [sp, #12]
   154e2:	f7fc febf 	bl	12264 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   154e6:	9002      	str	r0, [sp, #8]
   154e8:	e7ff      	b.n	154ea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x28>
   154ea:	9802      	ldr	r0, [sp, #8]
   154ec:	9904      	ldr	r1, [sp, #16]
   154ee:	f000 f962 	bl	157b6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   154f2:	e7ff      	b.n	154f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x32>
        self.len += 1;
   154f4:	9805      	ldr	r0, [sp, #20]
   154f6:	6801      	ldr	r1, [r0, #0]
   154f8:	1c4a      	adds	r2, r1, #1
   154fa:	4613      	mov	r3, r2
   154fc:	428a      	cmp	r2, r1
   154fe:	9301      	str	r3, [sp, #4]
   15500:	d305      	bcc.n	1550e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x4c>
   15502:	e7ff      	b.n	15504 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x42>
   15504:	9801      	ldr	r0, [sp, #4]
   15506:	9905      	ldr	r1, [sp, #20]
   15508:	6008      	str	r0, [r1, #0]
    }
   1550a:	b00a      	add	sp, #40	; 0x28
   1550c:	bd80      	pop	{r7, pc}
        self.len += 1;
   1550e:	f245 7070 	movw	r0, #22384	; 0x5770
   15512:	f2c0 0002 	movt	r0, #2
   15516:	f245 7254 	movw	r2, #22356	; 0x5754
   1551a:	f2c0 0202 	movt	r2, #2
   1551e:	211c      	movs	r1, #28
   15520:	f000 fc2e 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15524:	defe      	udf	#254	; 0xfe

00015526 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   15526:	b580      	push	{r7, lr}
   15528:	b094      	sub	sp, #80	; 0x50
   1552a:	900e      	str	r0, [sp, #56]	; 0x38
   1552c:	910f      	str	r1, [sp, #60]	; 0x3c
   1552e:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   15530:	6803      	ldr	r3, [r0, #0]
   15532:	9009      	str	r0, [sp, #36]	; 0x24
   15534:	4608      	mov	r0, r1
   15536:	9108      	str	r1, [sp, #32]
   15538:	4611      	mov	r1, r2
   1553a:	9207      	str	r2, [sp, #28]
   1553c:	9306      	str	r3, [sp, #24]
   1553e:	f7fc ff21 	bl	12384 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   15542:	9005      	str	r0, [sp, #20]
   15544:	e7ff      	b.n	15546 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x20>
   15546:	9806      	ldr	r0, [sp, #24]
   15548:	9905      	ldr	r1, [sp, #20]
   1554a:	1842      	adds	r2, r0, r1
   1554c:	4613      	mov	r3, r2
   1554e:	4282      	cmp	r2, r0
   15550:	9304      	str	r3, [sp, #16]
   15552:	d33f      	bcc.n	155d4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xae>
   15554:	e7ff      	b.n	15556 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x30>
   15556:	9809      	ldr	r0, [sp, #36]	; 0x24
   15558:	f000 f8b7 	bl	156ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   1555c:	9003      	str	r0, [sp, #12]
   1555e:	e7ff      	b.n	15560 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x3a>
   15560:	9804      	ldr	r0, [sp, #16]
   15562:	9903      	ldr	r1, [sp, #12]
   15564:	4288      	cmp	r0, r1
   15566:	d807      	bhi.n	15578 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x52>
   15568:	e7ff      	b.n	1556a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x44>
            for elem in other {
   1556a:	9808      	ldr	r0, [sp, #32]
   1556c:	9907      	ldr	r1, [sp, #28]
   1556e:	f7f3 fd93 	bl	9098 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   15572:	9002      	str	r0, [sp, #8]
   15574:	9101      	str	r1, [sp, #4]
   15576:	e003      	b.n	15580 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x5a>
   15578:	2001      	movs	r0, #1
            Err(())
   1557a:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   1557e:	e025      	b.n	155cc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   15580:	9802      	ldr	r0, [sp, #8]
   15582:	900b      	str	r0, [sp, #44]	; 0x2c
   15584:	9901      	ldr	r1, [sp, #4]
   15586:	910c      	str	r1, [sp, #48]	; 0x30
   15588:	e7ff      	b.n	1558a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
   1558a:	a80b      	add	r0, sp, #44	; 0x2c
   1558c:	f7fc fbf5 	bl	11d7a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   15590:	900d      	str	r0, [sp, #52]	; 0x34
   15592:	e7ff      	b.n	15594 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x6e>
   15594:	980d      	ldr	r0, [sp, #52]	; 0x34
   15596:	2800      	cmp	r0, #0
   15598:	4601      	mov	r1, r0
   1559a:	bf18      	it	ne
   1559c:	2101      	movne	r1, #1
   1559e:	2800      	cmp	r0, #0
   155a0:	d001      	beq.n	155a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x80>
   155a2:	e7ff      	b.n	155a4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x7e>
   155a4:	e004      	b.n	155b0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x8a>
   155a6:	2000      	movs	r0, #0
            Ok(())
   155a8:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   155ac:	e00e      	b.n	155cc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   155ae:	defe      	udf	#254	; 0xfe
   155b0:	980d      	ldr	r0, [sp, #52]	; 0x34
   155b2:	9011      	str	r0, [sp, #68]	; 0x44
   155b4:	9012      	str	r0, [sp, #72]	; 0x48
   155b6:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   155b8:	f000 f909 	bl	157ce <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   155bc:	9000      	str	r0, [sp, #0]
   155be:	e7ff      	b.n	155c0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x9a>
   155c0:	9809      	ldr	r0, [sp, #36]	; 0x24
   155c2:	9900      	ldr	r1, [sp, #0]
   155c4:	f7ff ff7d 	bl	154c2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>
   155c8:	e7ff      	b.n	155ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa4>
            for elem in other {
   155ca:	e7de      	b.n	1558a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
    }
   155cc:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   155d0:	b014      	add	sp, #80	; 0x50
   155d2:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   155d4:	f245 7070 	movw	r0, #22384	; 0x5770
   155d8:	f2c0 0002 	movt	r0, #2
   155dc:	f245 728c 	movw	r2, #22412	; 0x578c
   155e0:	f2c0 0202 	movt	r2, #2
   155e4:	211c      	movs	r1, #28
   155e6:	f000 fbcb 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   155ea:	defe      	udf	#254	; 0xfe

000155ec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   155ec:	b580      	push	{r7, lr}
   155ee:	b088      	sub	sp, #32
   155f0:	460a      	mov	r2, r1
   155f2:	9006      	str	r0, [sp, #24]
   155f4:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   155f8:	6801      	ldr	r1, [r0, #0]
   155fa:	9004      	str	r0, [sp, #16]
   155fc:	9203      	str	r2, [sp, #12]
   155fe:	9102      	str	r1, [sp, #8]
   15600:	f000 f859 	bl	156b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   15604:	9001      	str	r0, [sp, #4]
   15606:	e7ff      	b.n	15608 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   15608:	9802      	ldr	r0, [sp, #8]
   1560a:	9901      	ldr	r1, [sp, #4]
   1560c:	4288      	cmp	r0, r1
   1560e:	d307      	bcc.n	15620 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   15610:	e7ff      	b.n	15612 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   15612:	9803      	ldr	r0, [sp, #12]
   15614:	f88d 0015 	strb.w	r0, [sp, #21]
   15618:	2101      	movs	r1, #1
   1561a:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   1561e:	e008      	b.n	15632 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   15620:	9804      	ldr	r0, [sp, #16]
   15622:	9903      	ldr	r1, [sp, #12]
   15624:	f7ff ff1b 	bl	1545e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   15628:	e7ff      	b.n	1562a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   1562a:	2000      	movs	r0, #0
            Ok(())
   1562c:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   15630:	e7ff      	b.n	15632 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   15632:	f89d 0014 	ldrb.w	r0, [sp, #20]
   15636:	f89d 1015 	ldrb.w	r1, [sp, #21]
   1563a:	b008      	add	sp, #32
   1563c:	bd80      	pop	{r7, pc}

0001563e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   1563e:	b580      	push	{r7, lr}
   15640:	b082      	sub	sp, #8
   15642:	9001      	str	r0, [sp, #4]
   15644:	2100      	movs	r1, #0
        self.truncate(0);
   15646:	f000 f880 	bl	1574a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   1564a:	e7ff      	b.n	1564c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   1564c:	b002      	add	sp, #8
   1564e:	bd80      	pop	{r7, pc}

00015650 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>:
    pub(crate) fn clear(&mut self) {
   15650:	b580      	push	{r7, lr}
   15652:	b082      	sub	sp, #8
   15654:	9001      	str	r0, [sp, #4]
   15656:	2100      	movs	r1, #0
        self.truncate(0);
   15658:	f000 f841 	bl	156de <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>
   1565c:	e7ff      	b.n	1565e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E+0xe>
    }
   1565e:	b002      	add	sp, #8
   15660:	bd80      	pop	{r7, pc}

00015662 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   15662:	b580      	push	{r7, lr}
   15664:	b088      	sub	sp, #32
   15666:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   15668:	1d01      	adds	r1, r0, #4
   1566a:	9106      	str	r1, [sp, #24]
   1566c:	9107      	str	r1, [sp, #28]
   1566e:	9004      	str	r0, [sp, #16]
   15670:	9103      	str	r1, [sp, #12]
   15672:	e7ff      	b.n	15674 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x12>
   15674:	9804      	ldr	r0, [sp, #16]
   15676:	6801      	ldr	r1, [r0, #0]
   15678:	9803      	ldr	r0, [sp, #12]
   1567a:	f7fd fa96 	bl	12baa <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   1567e:	9002      	str	r0, [sp, #8]
   15680:	9101      	str	r1, [sp, #4]
   15682:	e7ff      	b.n	15684 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x22>
    }
   15684:	9802      	ldr	r0, [sp, #8]
   15686:	9901      	ldr	r1, [sp, #4]
   15688:	b008      	add	sp, #32
   1568a:	bd80      	pop	{r7, pc}

0001568c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   1568c:	b580      	push	{r7, lr}
   1568e:	b088      	sub	sp, #32
   15690:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   15692:	1d01      	adds	r1, r0, #4
   15694:	9106      	str	r1, [sp, #24]
   15696:	9107      	str	r1, [sp, #28]
   15698:	9004      	str	r0, [sp, #16]
   1569a:	9103      	str	r1, [sp, #12]
   1569c:	e7ff      	b.n	1569e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   1569e:	9804      	ldr	r0, [sp, #16]
   156a0:	6801      	ldr	r1, [r0, #0]
   156a2:	9803      	ldr	r0, [sp, #12]
   156a4:	f7fd fa81 	bl	12baa <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   156a8:	9002      	str	r0, [sp, #8]
   156aa:	9101      	str	r1, [sp, #4]
   156ac:	e7ff      	b.n	156ae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   156ae:	9802      	ldr	r0, [sp, #8]
   156b0:	9901      	ldr	r1, [sp, #4]
   156b2:	b008      	add	sp, #32
   156b4:	bd80      	pop	{r7, pc}

000156b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   156b6:	b580      	push	{r7, lr}
   156b8:	b082      	sub	sp, #8
   156ba:	9001      	str	r0, [sp, #4]
        N::to_usize()
   156bc:	f000 f964 	bl	15988 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   156c0:	9000      	str	r0, [sp, #0]
   156c2:	e7ff      	b.n	156c4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   156c4:	9800      	ldr	r0, [sp, #0]
   156c6:	b002      	add	sp, #8
   156c8:	bd80      	pop	{r7, pc}

000156ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>:
    pub(crate) fn capacity(&self) -> usize {
   156ca:	b580      	push	{r7, lr}
   156cc:	b082      	sub	sp, #8
   156ce:	9001      	str	r0, [sp, #4]
        N::to_usize()
   156d0:	f000 f8b2 	bl	15838 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>
   156d4:	9000      	str	r0, [sp, #0]
   156d6:	e7ff      	b.n	156d8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE+0xe>
    }
   156d8:	9800      	ldr	r0, [sp, #0]
   156da:	b002      	add	sp, #8
   156dc:	bd80      	pop	{r7, pc}

000156de <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   156de:	b580      	push	{r7, lr}
   156e0:	b08a      	sub	sp, #40	; 0x28
   156e2:	9007      	str	r0, [sp, #28]
   156e4:	9108      	str	r1, [sp, #32]
   156e6:	9106      	str	r1, [sp, #24]
   156e8:	9005      	str	r0, [sp, #20]
   156ea:	e7ff      	b.n	156ec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
            while len < self.len {
   156ec:	9805      	ldr	r0, [sp, #20]
   156ee:	6801      	ldr	r1, [r0, #0]
   156f0:	9a06      	ldr	r2, [sp, #24]
   156f2:	428a      	cmp	r2, r1
   156f4:	d302      	bcc.n	156fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1e>
   156f6:	e7ff      	b.n	156f8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1a>
    }
   156f8:	b00a      	add	sp, #40	; 0x28
   156fa:	bd80      	pop	{r7, pc}
                self.len -= 1;
   156fc:	9805      	ldr	r0, [sp, #20]
   156fe:	6801      	ldr	r1, [r0, #0]
   15700:	1e4a      	subs	r2, r1, #1
   15702:	2901      	cmp	r1, #1
   15704:	9204      	str	r2, [sp, #16]
   15706:	d314      	bcc.n	15732 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x54>
   15708:	e7ff      	b.n	1570a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x2c>
   1570a:	9804      	ldr	r0, [sp, #16]
   1570c:	9905      	ldr	r1, [sp, #20]
   1570e:	6008      	str	r0, [r1, #0]
                let len = self.len;
   15710:	680a      	ldr	r2, [r1, #0]
   15712:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   15714:	4608      	mov	r0, r1
   15716:	9203      	str	r2, [sp, #12]
   15718:	f7ff fe8c 	bl	15434 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>
   1571c:	9002      	str	r0, [sp, #8]
   1571e:	9101      	str	r1, [sp, #4]
   15720:	e7ff      	b.n	15722 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x44>
   15722:	9802      	ldr	r0, [sp, #8]
   15724:	9901      	ldr	r1, [sp, #4]
   15726:	9a03      	ldr	r2, [sp, #12]
   15728:	f7fc fe1a 	bl	12360 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   1572c:	e7ff      	b.n	1572e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x50>
   1572e:	e7ff      	b.n	15730 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x52>
            while len < self.len {
   15730:	e7dc      	b.n	156ec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
                self.len -= 1;
   15732:	f245 70b0 	movw	r0, #22448	; 0x57b0
   15736:	f2c0 0002 	movt	r0, #2
   1573a:	f245 729c 	movw	r2, #22428	; 0x579c
   1573e:	f2c0 0202 	movt	r2, #2
   15742:	2121      	movs	r1, #33	; 0x21
   15744:	f000 fb1c 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15748:	defe      	udf	#254	; 0xfe

0001574a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   1574a:	b580      	push	{r7, lr}
   1574c:	b08a      	sub	sp, #40	; 0x28
   1574e:	9007      	str	r0, [sp, #28]
   15750:	9108      	str	r1, [sp, #32]
   15752:	9106      	str	r1, [sp, #24]
   15754:	9005      	str	r0, [sp, #20]
   15756:	e7ff      	b.n	15758 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   15758:	9805      	ldr	r0, [sp, #20]
   1575a:	6801      	ldr	r1, [r0, #0]
   1575c:	9a06      	ldr	r2, [sp, #24]
   1575e:	428a      	cmp	r2, r1
   15760:	d302      	bcc.n	15768 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   15762:	e7ff      	b.n	15764 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   15764:	b00a      	add	sp, #40	; 0x28
   15766:	bd80      	pop	{r7, pc}
                self.len -= 1;
   15768:	9805      	ldr	r0, [sp, #20]
   1576a:	6801      	ldr	r1, [r0, #0]
   1576c:	1e4a      	subs	r2, r1, #1
   1576e:	2901      	cmp	r1, #1
   15770:	9204      	str	r2, [sp, #16]
   15772:	d314      	bcc.n	1579e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   15774:	e7ff      	b.n	15776 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   15776:	9804      	ldr	r0, [sp, #16]
   15778:	9905      	ldr	r1, [sp, #20]
   1577a:	6008      	str	r0, [r1, #0]
                let len = self.len;
   1577c:	680a      	ldr	r2, [r1, #0]
   1577e:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   15780:	4608      	mov	r0, r1
   15782:	9203      	str	r2, [sp, #12]
   15784:	f7ff fe41 	bl	1540a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   15788:	9002      	str	r0, [sp, #8]
   1578a:	9101      	str	r1, [sp, #4]
   1578c:	e7ff      	b.n	1578e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   1578e:	9802      	ldr	r0, [sp, #8]
   15790:	9901      	ldr	r1, [sp, #4]
   15792:	9a03      	ldr	r2, [sp, #12]
   15794:	f7fc fde4 	bl	12360 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   15798:	e7ff      	b.n	1579a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   1579a:	e7ff      	b.n	1579c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   1579c:	e7dc      	b.n	15758 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   1579e:	f245 70b0 	movw	r0, #22448	; 0x57b0
   157a2:	f2c0 0002 	movt	r0, #2
   157a6:	f245 729c 	movw	r2, #22428	; 0x579c
   157aa:	f2c0 0202 	movt	r2, #2
   157ae:	2121      	movs	r1, #33	; 0x21
   157b0:	f000 fae6 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   157b4:	defe      	udf	#254	; 0xfe

000157b6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   157b6:	b580      	push	{r7, lr}
   157b8:	b084      	sub	sp, #16
   157ba:	460a      	mov	r2, r1
   157bc:	9002      	str	r0, [sp, #8]
   157be:	f88d 100f 	strb.w	r1, [sp, #15]
   157c2:	9201      	str	r2, [sp, #4]
   157c4:	f7f3 fcf0 	bl	91a8 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   157c8:	e7ff      	b.n	157ca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   157ca:	b004      	add	sp, #16
   157cc:	bd80      	pop	{r7, pc}

000157ce <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   157ce:	b081      	sub	sp, #4
   157d0:	9000      	str	r0, [sp, #0]
   157d2:	7800      	ldrb	r0, [r0, #0]
   157d4:	b001      	add	sp, #4
   157d6:	4770      	bx	lr

000157d8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   157d8:	b580      	push	{r7, lr}
   157da:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   157dc:	f000 f9da 	bl	15b94 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   157e0:	9003      	str	r0, [sp, #12]
   157e2:	e7ff      	b.n	157e4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   157e4:	9803      	ldr	r0, [sp, #12]
   157e6:	f000 f9db 	bl	15ba0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   157ea:	9002      	str	r0, [sp, #8]
   157ec:	e7ff      	b.n	157ee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   157ee:	f000 f8cb 	bl	15988 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   157f2:	9001      	str	r0, [sp, #4]
   157f4:	e7ff      	b.n	157f6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   157f6:	9801      	ldr	r0, [sp, #4]
   157f8:	0041      	lsls	r1, r0, #1
   157fa:	9100      	str	r1, [sp, #0]
   157fc:	e7ff      	b.n	157fe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   157fe:	9802      	ldr	r0, [sp, #8]
   15800:	9900      	ldr	r1, [sp, #0]
   15802:	4308      	orrs	r0, r1
    }
   15804:	b004      	add	sp, #16
   15806:	bd80      	pop	{r7, pc}

00015808 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   15808:	b580      	push	{r7, lr}
   1580a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1580c:	f000 f9c2 	bl	15b94 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15810:	9003      	str	r0, [sp, #12]
   15812:	e7ff      	b.n	15814 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   15814:	9803      	ldr	r0, [sp, #12]
   15816:	f000 f9c3 	bl	15ba0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1581a:	9002      	str	r0, [sp, #8]
   1581c:	e7ff      	b.n	1581e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   1581e:	f000 f86b 	bl	158f8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   15822:	9001      	str	r0, [sp, #4]
   15824:	e7ff      	b.n	15826 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   15826:	9801      	ldr	r0, [sp, #4]
   15828:	0041      	lsls	r1, r0, #1
   1582a:	9100      	str	r1, [sp, #0]
   1582c:	e7ff      	b.n	1582e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   1582e:	9802      	ldr	r0, [sp, #8]
   15830:	9900      	ldr	r1, [sp, #0]
   15832:	4308      	orrs	r0, r1
    }
   15834:	b004      	add	sp, #16
   15836:	bd80      	pop	{r7, pc}

00015838 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>:
    fn to_usize() -> usize {
   15838:	b580      	push	{r7, lr}
   1583a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1583c:	f000 f9aa 	bl	15b94 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15840:	9003      	str	r0, [sp, #12]
   15842:	e7ff      	b.n	15844 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0xc>
   15844:	9803      	ldr	r0, [sp, #12]
   15846:	f000 f9ab 	bl	15ba0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1584a:	9002      	str	r0, [sp, #8]
   1584c:	e7ff      	b.n	1584e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x16>
   1584e:	f000 f8fb 	bl	15a48 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>
   15852:	9001      	str	r0, [sp, #4]
   15854:	e7ff      	b.n	15856 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x1e>
   15856:	9801      	ldr	r0, [sp, #4]
   15858:	0041      	lsls	r1, r0, #1
   1585a:	9100      	str	r1, [sp, #0]
   1585c:	e7ff      	b.n	1585e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x26>
   1585e:	9802      	ldr	r0, [sp, #8]
   15860:	9900      	ldr	r1, [sp, #0]
   15862:	4308      	orrs	r0, r1
    }
   15864:	b004      	add	sp, #16
   15866:	bd80      	pop	{r7, pc}

00015868 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   15868:	b580      	push	{r7, lr}
   1586a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1586c:	f000 f992 	bl	15b94 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15870:	9003      	str	r0, [sp, #12]
   15872:	e7ff      	b.n	15874 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   15874:	9803      	ldr	r0, [sp, #12]
   15876:	f000 f993 	bl	15ba0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1587a:	9002      	str	r0, [sp, #8]
   1587c:	e7ff      	b.n	1587e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   1587e:	f000 f80b 	bl	15898 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   15882:	9001      	str	r0, [sp, #4]
   15884:	e7ff      	b.n	15886 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   15886:	9801      	ldr	r0, [sp, #4]
   15888:	0041      	lsls	r1, r0, #1
   1588a:	9100      	str	r1, [sp, #0]
   1588c:	e7ff      	b.n	1588e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   1588e:	9802      	ldr	r0, [sp, #8]
   15890:	9900      	ldr	r1, [sp, #0]
   15892:	4308      	orrs	r0, r1
    }
   15894:	b004      	add	sp, #16
   15896:	bd80      	pop	{r7, pc}

00015898 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   15898:	b580      	push	{r7, lr}
   1589a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1589c:	f000 f97a 	bl	15b94 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   158a0:	9003      	str	r0, [sp, #12]
   158a2:	e7ff      	b.n	158a4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   158a4:	9803      	ldr	r0, [sp, #12]
   158a6:	f000 f97b 	bl	15ba0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   158aa:	9002      	str	r0, [sp, #8]
   158ac:	e7ff      	b.n	158ae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   158ae:	f000 f89b 	bl	159e8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   158b2:	9001      	str	r0, [sp, #4]
   158b4:	e7ff      	b.n	158b6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   158b6:	9801      	ldr	r0, [sp, #4]
   158b8:	0041      	lsls	r1, r0, #1
   158ba:	9100      	str	r1, [sp, #0]
   158bc:	e7ff      	b.n	158be <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   158be:	9802      	ldr	r0, [sp, #8]
   158c0:	9900      	ldr	r1, [sp, #0]
   158c2:	4308      	orrs	r0, r1
    }
   158c4:	b004      	add	sp, #16
   158c6:	bd80      	pop	{r7, pc}

000158c8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   158c8:	b580      	push	{r7, lr}
   158ca:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   158cc:	f000 f962 	bl	15b94 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   158d0:	9003      	str	r0, [sp, #12]
   158d2:	e7ff      	b.n	158d4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   158d4:	9803      	ldr	r0, [sp, #12]
   158d6:	f000 f963 	bl	15ba0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   158da:	9002      	str	r0, [sp, #8]
   158dc:	e7ff      	b.n	158de <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   158de:	f7ff ff7b 	bl	157d8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   158e2:	9001      	str	r0, [sp, #4]
   158e4:	e7ff      	b.n	158e6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   158e6:	9801      	ldr	r0, [sp, #4]
   158e8:	0041      	lsls	r1, r0, #1
   158ea:	9100      	str	r1, [sp, #0]
   158ec:	e7ff      	b.n	158ee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   158ee:	9802      	ldr	r0, [sp, #8]
   158f0:	9900      	ldr	r1, [sp, #0]
   158f2:	4308      	orrs	r0, r1
    }
   158f4:	b004      	add	sp, #16
   158f6:	bd80      	pop	{r7, pc}

000158f8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   158f8:	b580      	push	{r7, lr}
   158fa:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   158fc:	f000 f94a 	bl	15b94 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15900:	9003      	str	r0, [sp, #12]
   15902:	e7ff      	b.n	15904 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   15904:	9803      	ldr	r0, [sp, #12]
   15906:	f000 f94b 	bl	15ba0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1590a:	9002      	str	r0, [sp, #8]
   1590c:	e7ff      	b.n	1590e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   1590e:	f000 f823 	bl	15958 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   15912:	9001      	str	r0, [sp, #4]
   15914:	e7ff      	b.n	15916 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   15916:	9801      	ldr	r0, [sp, #4]
   15918:	0041      	lsls	r1, r0, #1
   1591a:	9100      	str	r1, [sp, #0]
   1591c:	e7ff      	b.n	1591e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   1591e:	9802      	ldr	r0, [sp, #8]
   15920:	9900      	ldr	r1, [sp, #0]
   15922:	4308      	orrs	r0, r1
    }
   15924:	b004      	add	sp, #16
   15926:	bd80      	pop	{r7, pc}

00015928 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   15928:	b580      	push	{r7, lr}
   1592a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1592c:	f000 f932 	bl	15b94 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15930:	9003      	str	r0, [sp, #12]
   15932:	e7ff      	b.n	15934 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   15934:	9803      	ldr	r0, [sp, #12]
   15936:	f000 f933 	bl	15ba0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1593a:	9002      	str	r0, [sp, #8]
   1593c:	e7ff      	b.n	1593e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   1593e:	f000 f86b 	bl	15a18 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   15942:	9001      	str	r0, [sp, #4]
   15944:	e7ff      	b.n	15946 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   15946:	9801      	ldr	r0, [sp, #4]
   15948:	0041      	lsls	r1, r0, #1
   1594a:	9100      	str	r1, [sp, #0]
   1594c:	e7ff      	b.n	1594e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   1594e:	9802      	ldr	r0, [sp, #8]
   15950:	9900      	ldr	r1, [sp, #0]
   15952:	4308      	orrs	r0, r1
    }
   15954:	b004      	add	sp, #16
   15956:	bd80      	pop	{r7, pc}

00015958 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   15958:	b580      	push	{r7, lr}
   1595a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1595c:	f000 f91a 	bl	15b94 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15960:	9003      	str	r0, [sp, #12]
   15962:	e7ff      	b.n	15964 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   15964:	9803      	ldr	r0, [sp, #12]
   15966:	f000 f91b 	bl	15ba0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1596a:	9002      	str	r0, [sp, #8]
   1596c:	e7ff      	b.n	1596e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   1596e:	f000 f823 	bl	159b8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   15972:	9001      	str	r0, [sp, #4]
   15974:	e7ff      	b.n	15976 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   15976:	9801      	ldr	r0, [sp, #4]
   15978:	0041      	lsls	r1, r0, #1
   1597a:	9100      	str	r1, [sp, #0]
   1597c:	e7ff      	b.n	1597e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   1597e:	9802      	ldr	r0, [sp, #8]
   15980:	9900      	ldr	r1, [sp, #0]
   15982:	4308      	orrs	r0, r1
    }
   15984:	b004      	add	sp, #16
   15986:	bd80      	pop	{r7, pc}

00015988 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   15988:	b580      	push	{r7, lr}
   1598a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1598c:	f000 f904 	bl	15b98 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   15990:	9003      	str	r0, [sp, #12]
   15992:	e7ff      	b.n	15994 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   15994:	9803      	ldr	r0, [sp, #12]
   15996:	f000 f903 	bl	15ba0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1599a:	9002      	str	r0, [sp, #8]
   1599c:	e7ff      	b.n	1599e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   1599e:	f000 f8fd 	bl	15b9c <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   159a2:	9001      	str	r0, [sp, #4]
   159a4:	e7ff      	b.n	159a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   159a6:	9801      	ldr	r0, [sp, #4]
   159a8:	0041      	lsls	r1, r0, #1
   159aa:	9100      	str	r1, [sp, #0]
   159ac:	e7ff      	b.n	159ae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   159ae:	9802      	ldr	r0, [sp, #8]
   159b0:	9900      	ldr	r1, [sp, #0]
   159b2:	4308      	orrs	r0, r1
    }
   159b4:	b004      	add	sp, #16
   159b6:	bd80      	pop	{r7, pc}

000159b8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   159b8:	b580      	push	{r7, lr}
   159ba:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   159bc:	f000 f8ea 	bl	15b94 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   159c0:	9003      	str	r0, [sp, #12]
   159c2:	e7ff      	b.n	159c4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   159c4:	9803      	ldr	r0, [sp, #12]
   159c6:	f000 f8eb 	bl	15ba0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   159ca:	9002      	str	r0, [sp, #8]
   159cc:	e7ff      	b.n	159ce <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   159ce:	f7ff ff7b 	bl	158c8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   159d2:	9001      	str	r0, [sp, #4]
   159d4:	e7ff      	b.n	159d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   159d6:	9801      	ldr	r0, [sp, #4]
   159d8:	0041      	lsls	r1, r0, #1
   159da:	9100      	str	r1, [sp, #0]
   159dc:	e7ff      	b.n	159de <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   159de:	9802      	ldr	r0, [sp, #8]
   159e0:	9900      	ldr	r1, [sp, #0]
   159e2:	4308      	orrs	r0, r1
    }
   159e4:	b004      	add	sp, #16
   159e6:	bd80      	pop	{r7, pc}

000159e8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   159e8:	b580      	push	{r7, lr}
   159ea:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   159ec:	f000 f8d2 	bl	15b94 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   159f0:	9003      	str	r0, [sp, #12]
   159f2:	e7ff      	b.n	159f4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   159f4:	9803      	ldr	r0, [sp, #12]
   159f6:	f000 f8d3 	bl	15ba0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   159fa:	9002      	str	r0, [sp, #8]
   159fc:	e7ff      	b.n	159fe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   159fe:	f7ff ff03 	bl	15808 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   15a02:	9001      	str	r0, [sp, #4]
   15a04:	e7ff      	b.n	15a06 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   15a06:	9801      	ldr	r0, [sp, #4]
   15a08:	0041      	lsls	r1, r0, #1
   15a0a:	9100      	str	r1, [sp, #0]
   15a0c:	e7ff      	b.n	15a0e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   15a0e:	9802      	ldr	r0, [sp, #8]
   15a10:	9900      	ldr	r1, [sp, #0]
   15a12:	4308      	orrs	r0, r1
    }
   15a14:	b004      	add	sp, #16
   15a16:	bd80      	pop	{r7, pc}

00015a18 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   15a18:	b580      	push	{r7, lr}
   15a1a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15a1c:	f000 f8ba 	bl	15b94 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15a20:	9003      	str	r0, [sp, #12]
   15a22:	e7ff      	b.n	15a24 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   15a24:	9803      	ldr	r0, [sp, #12]
   15a26:	f000 f8bb 	bl	15ba0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   15a2a:	9002      	str	r0, [sp, #8]
   15a2c:	e7ff      	b.n	15a2e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   15a2e:	f7ff ff1b 	bl	15868 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   15a32:	9001      	str	r0, [sp, #4]
   15a34:	e7ff      	b.n	15a36 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   15a36:	9801      	ldr	r0, [sp, #4]
   15a38:	0041      	lsls	r1, r0, #1
   15a3a:	9100      	str	r1, [sp, #0]
   15a3c:	e7ff      	b.n	15a3e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   15a3e:	9802      	ldr	r0, [sp, #8]
   15a40:	9900      	ldr	r1, [sp, #0]
   15a42:	4308      	orrs	r0, r1
    }
   15a44:	b004      	add	sp, #16
   15a46:	bd80      	pop	{r7, pc}

00015a48 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>:
    fn to_usize() -> usize {
   15a48:	b580      	push	{r7, lr}
   15a4a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15a4c:	f000 f8a2 	bl	15b94 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15a50:	9003      	str	r0, [sp, #12]
   15a52:	e7ff      	b.n	15a54 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0xc>
   15a54:	9803      	ldr	r0, [sp, #12]
   15a56:	f000 f8a3 	bl	15ba0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   15a5a:	9002      	str	r0, [sp, #8]
   15a5c:	e7ff      	b.n	15a5e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x16>
   15a5e:	f7ff ff63 	bl	15928 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   15a62:	9001      	str	r0, [sp, #4]
   15a64:	e7ff      	b.n	15a66 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x1e>
   15a66:	9801      	ldr	r0, [sp, #4]
   15a68:	0041      	lsls	r1, r0, #1
   15a6a:	9100      	str	r1, [sp, #0]
   15a6c:	e7ff      	b.n	15a6e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x26>
   15a6e:	9802      	ldr	r0, [sp, #8]
   15a70:	9900      	ldr	r1, [sp, #0]
   15a72:	4308      	orrs	r0, r1
    }
   15a74:	b004      	add	sp, #16
   15a76:	bd80      	pop	{r7, pc}

00015a78 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E>:
   15a78:	b5d0      	push	{r4, r6, r7, lr}
   15a7a:	af02      	add	r7, sp, #8
   15a7c:	b0b4      	sub	sp, #208	; 0xd0
   15a7e:	466c      	mov	r4, sp
   15a80:	f36f 0404 	bfc	r4, #0, #5
   15a84:	46a5      	mov	sp, r4
   15a86:	9024      	str	r0, [sp, #144]	; 0x90
   15a88:	9125      	str	r1, [sp, #148]	; 0x94
   15a8a:	9226      	str	r2, [sp, #152]	; 0x98
   15a8c:	2320      	movs	r3, #32
   15a8e:	932f      	str	r3, [sp, #188]	; 0xbc
   15a90:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   15a92:	9327      	str	r3, [sp, #156]	; 0x9c
   15a94:	920e      	str	r2, [sp, #56]	; 0x38
   15a96:	910d      	str	r1, [sp, #52]	; 0x34
   15a98:	900c      	str	r0, [sp, #48]	; 0x30
   15a9a:	930b      	str	r3, [sp, #44]	; 0x2c
   15a9c:	e7ff      	b.n	15a9e <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x26>
   15a9e:	2000      	movs	r0, #0
   15aa0:	900f      	str	r0, [sp, #60]	; 0x3c
   15aa2:	e7ff      	b.n	15aa4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x2c>
   15aa4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15aa6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15aa8:	4408      	add	r0, r1
   15aaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15aac:	4290      	cmp	r0, r2
   15aae:	d905      	bls.n	15abc <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x44>
   15ab0:	e7ff      	b.n	15ab2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x3a>
   15ab2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15ab4:	990e      	ldr	r1, [sp, #56]	; 0x38
   15ab6:	4288      	cmp	r0, r1
   15ab8:	d334      	bcc.n	15b24 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xac>
   15aba:	e067      	b.n	15b8c <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x114>
   15abc:	e7ff      	b.n	15abe <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x46>
   15abe:	a810      	add	r0, sp, #64	; 0x40
   15ac0:	9032      	str	r0, [sp, #200]	; 0xc8
   15ac2:	9033      	str	r0, [sp, #204]	; 0xcc
   15ac4:	e7ff      	b.n	15ac6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x4e>
   15ac6:	a810      	add	r0, sp, #64	; 0x40
   15ac8:	4601      	mov	r1, r0
   15aca:	9028      	str	r0, [sp, #160]	; 0xa0
   15acc:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15ace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15ad0:	900a      	str	r0, [sp, #40]	; 0x28
   15ad2:	4610      	mov	r0, r2
   15ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15ad6:	9109      	str	r1, [sp, #36]	; 0x24
   15ad8:	4619      	mov	r1, r3
   15ada:	f7fc fbc3 	bl	12264 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   15ade:	4601      	mov	r1, r0
   15ae0:	9029      	str	r0, [sp, #164]	; 0xa4
   15ae2:	9108      	str	r1, [sp, #32]
   15ae4:	e7ff      	b.n	15ae6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x6e>
   15ae6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   15ae8:	980d      	ldr	r0, [sp, #52]	; 0x34
   15aea:	f7fc fbbb 	bl	12264 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   15aee:	4601      	mov	r1, r0
   15af0:	902a      	str	r0, [sp, #168]	; 0xa8
   15af2:	9107      	str	r1, [sp, #28]
   15af4:	e7ff      	b.n	15af6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x7e>
   15af6:	9808      	ldr	r0, [sp, #32]
   15af8:	9909      	ldr	r1, [sp, #36]	; 0x24
   15afa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15afc:	f7fc fa4e 	bl	11f9c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15b00:	e7ff      	b.n	15b02 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x8a>
   15b02:	9807      	ldr	r0, [sp, #28]
   15b04:	9908      	ldr	r1, [sp, #32]
   15b06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15b08:	f7fc fa48 	bl	11f9c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15b0c:	e7ff      	b.n	15b0e <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x96>
   15b0e:	9809      	ldr	r0, [sp, #36]	; 0x24
   15b10:	9907      	ldr	r1, [sp, #28]
   15b12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15b14:	f7fc fa42 	bl	11f9c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15b18:	e7ff      	b.n	15b1a <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xa2>
   15b1a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15b1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15b1e:	4408      	add	r0, r1
   15b20:	900f      	str	r0, [sp, #60]	; 0x3c
   15b22:	e7bf      	b.n	15aa4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x2c>
   15b24:	e7ff      	b.n	15b26 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xae>
   15b26:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15b28:	990e      	ldr	r1, [sp, #56]	; 0x38
   15b2a:	1a08      	subs	r0, r1, r0
   15b2c:	4602      	mov	r2, r0
   15b2e:	902b      	str	r0, [sp, #172]	; 0xac
   15b30:	a81c      	add	r0, sp, #112	; 0x70
   15b32:	9030      	str	r0, [sp, #192]	; 0xc0
   15b34:	9031      	str	r0, [sp, #196]	; 0xc4
   15b36:	9206      	str	r2, [sp, #24]
   15b38:	9005      	str	r0, [sp, #20]
   15b3a:	e7ff      	b.n	15b3c <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xc4>
   15b3c:	9805      	ldr	r0, [sp, #20]
   15b3e:	9905      	ldr	r1, [sp, #20]
   15b40:	912c      	str	r1, [sp, #176]	; 0xb0
   15b42:	990f      	ldr	r1, [sp, #60]	; 0x3c
   15b44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15b46:	9004      	str	r0, [sp, #16]
   15b48:	4610      	mov	r0, r2
   15b4a:	f7fc fb8b 	bl	12264 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   15b4e:	4601      	mov	r1, r0
   15b50:	902d      	str	r0, [sp, #180]	; 0xb4
   15b52:	9103      	str	r1, [sp, #12]
   15b54:	e7ff      	b.n	15b56 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xde>
   15b56:	990f      	ldr	r1, [sp, #60]	; 0x3c
   15b58:	980d      	ldr	r0, [sp, #52]	; 0x34
   15b5a:	f7fc fb83 	bl	12264 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   15b5e:	4601      	mov	r1, r0
   15b60:	902e      	str	r0, [sp, #184]	; 0xb8
   15b62:	9102      	str	r1, [sp, #8]
   15b64:	e7ff      	b.n	15b66 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xee>
   15b66:	9803      	ldr	r0, [sp, #12]
   15b68:	9904      	ldr	r1, [sp, #16]
   15b6a:	9a06      	ldr	r2, [sp, #24]
   15b6c:	f7fc fa16 	bl	11f9c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15b70:	e7ff      	b.n	15b72 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xfa>
   15b72:	9802      	ldr	r0, [sp, #8]
   15b74:	9903      	ldr	r1, [sp, #12]
   15b76:	9a06      	ldr	r2, [sp, #24]
   15b78:	f7fc fa10 	bl	11f9c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15b7c:	e7ff      	b.n	15b7e <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x106>
   15b7e:	9804      	ldr	r0, [sp, #16]
   15b80:	9902      	ldr	r1, [sp, #8]
   15b82:	9a06      	ldr	r2, [sp, #24]
   15b84:	f7fc fa0a 	bl	11f9c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15b88:	e7ff      	b.n	15b8a <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x112>
   15b8a:	e7ff      	b.n	15b8c <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x114>
   15b8c:	f1a7 0408 	sub.w	r4, r7, #8
   15b90:	46a5      	mov	sp, r4
   15b92:	bdd0      	pop	{r4, r6, r7, pc}

00015b94 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   15b94:	2000      	movs	r0, #0
        0
    }
   15b96:	4770      	bx	lr

00015b98 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   15b98:	2001      	movs	r0, #1
        1
    }
   15b9a:	4770      	bx	lr

00015b9c <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   15b9c:	2000      	movs	r0, #0
    }
   15b9e:	4770      	bx	lr

00015ba0 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   15ba0:	b081      	sub	sp, #4
   15ba2:	4601      	mov	r1, r0
   15ba4:	f88d 0003 	strb.w	r0, [sp, #3]
   15ba8:	b2c0      	uxtb	r0, r0
   15baa:	b001      	add	sp, #4
   15bac:	4770      	bx	lr

00015bae <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   15bae:	4770      	bx	lr

00015bb0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   15bb0:	b5b0      	push	{r4, r5, r7, lr}
   15bb2:	b086      	sub	sp, #24
   15bb4:	460c      	mov	r4, r1
   15bb6:	4605      	mov	r5, r0
   15bb8:	f001 fb6b 	bl	17292 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   15bbc:	b9a8      	cbnz	r0, 15bea <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   15bbe:	f245 73d4 	movw	r3, #22484	; 0x57d4
   15bc2:	2200      	movs	r2, #0
   15bc4:	f2c0 0302 	movt	r3, #2
   15bc8:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   15bcc:	9205      	str	r2, [sp, #20]
   15bce:	9304      	str	r3, [sp, #16]
   15bd0:	e9cd 2202 	strd	r2, r2, [sp, #8]
   15bd4:	2201      	movs	r2, #1
   15bd6:	9201      	str	r2, [sp, #4]
   15bd8:	f645 0298 	movw	r2, #22680	; 0x5898
   15bdc:	f2c0 0202 	movt	r2, #2
   15be0:	9200      	str	r2, [sp, #0]
   15be2:	466a      	mov	r2, sp
   15be4:	f000 fbc4 	bl	16370 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   15be8:	b110      	cbz	r0, 15bf0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   15bea:	2001      	movs	r0, #1
   15bec:	b006      	add	sp, #24
   15bee:	bdb0      	pop	{r4, r5, r7, pc}
   15bf0:	1d28      	adds	r0, r5, #4
   15bf2:	4621      	mov	r1, r4
   15bf4:	b006      	add	sp, #24
   15bf6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   15bfa:	f001 bb4a 	b.w	17292 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

00015bfe <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   15bfe:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   15c02:	f243 6134 	movw	r1, #13876	; 0x3634
   15c06:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   15c0a:	f6cd 0131 	movt	r1, #55345	; 0xd831
   15c0e:	4770      	bx	lr

00015c10 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   15c10:	b570      	push	{r4, r5, r6, lr}
   15c12:	460e      	mov	r6, r1
   15c14:	3909      	subs	r1, #9
   15c16:	4604      	mov	r4, r0
   15c18:	291e      	cmp	r1, #30
   15c1a:	d818      	bhi.n	15c4e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   15c1c:	2002      	movs	r0, #2
   15c1e:	2574      	movs	r5, #116	; 0x74
   15c20:	e8df f001 	tbb	[pc, r1]
   15c24:	1c1c1019 	.word	0x1c1c1019
   15c28:	1c1c1c29 	.word	0x1c1c1c29
   15c2c:	1c1c1c1c 	.word	0x1c1c1c1c
   15c30:	1c1c1c1c 	.word	0x1c1c1c1c
   15c34:	1c1c1c1c 	.word	0x1c1c1c1c
   15c38:	1c1c1c1c 	.word	0x1c1c1c1c
   15c3c:	1c1c171c 	.word	0x1c1c171c
   15c40:	00171c1c 	.word	0x00171c1c
   15c44:	2002      	movs	r0, #2
   15c46:	256e      	movs	r5, #110	; 0x6e
   15c48:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   15c4c:	bd70      	pop	{r4, r5, r6, pc}
   15c4e:	2e5c      	cmp	r6, #92	; 0x5c
   15c50:	d104      	bne.n	15c5c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   15c52:	2002      	movs	r0, #2
   15c54:	4635      	mov	r5, r6
   15c56:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   15c5a:	bd70      	pop	{r4, r5, r6, pc}
   15c5c:	2a00      	cmp	r2, #0
   15c5e:	d040      	beq.n	15ce2 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   15c60:	f3c6 1083 	ubfx	r0, r6, #6, #4
   15c64:	0ab1      	lsrs	r1, r6, #10
   15c66:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   15c6a:	d309      	bcc.n	15c80 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   15c6c:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   15c70:	d137      	bne.n	15ce2 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   15c72:	211e      	movs	r1, #30
   15c74:	e00b      	b.n	15c8e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   15c76:	2002      	movs	r0, #2
   15c78:	2572      	movs	r5, #114	; 0x72
   15c7a:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   15c7e:	bd70      	pop	{r4, r5, r6, pc}
   15c80:	f246 3204 	movw	r2, #25348	; 0x6304
   15c84:	f2c0 0202 	movt	r2, #2
   15c88:	5c51      	ldrb	r1, [r2, r1]
   15c8a:	291e      	cmp	r1, #30
   15c8c:	d842      	bhi.n	15d14 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   15c8e:	f246 327f 	movw	r2, #25471	; 0x637f
   15c92:	f2c0 0202 	movt	r2, #2
   15c96:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   15c9a:	5c09      	ldrb	r1, [r1, r0]
   15c9c:	298b      	cmp	r1, #139	; 0x8b
   15c9e:	d231      	bcs.n	15d04 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   15ca0:	f246 5070 	movw	r0, #25968	; 0x6570
   15ca4:	2301      	movs	r3, #1
   15ca6:	f2c0 0002 	movt	r0, #2
   15caa:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   15cae:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   15cb2:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   15cb6:	f8d2 c004 	ldr.w	ip, [r2, #4]
   15cba:	fa03 f501 	lsl.w	r5, r3, r1
   15cbe:	f1b1 0220 	subs.w	r2, r1, #32
   15cc2:	f1c1 0120 	rsb	r1, r1, #32
   15cc6:	bf58      	it	pl
   15cc8:	2500      	movpl	r5, #0
   15cca:	2a00      	cmp	r2, #0
   15ccc:	ea00 0005 	and.w	r0, r0, r5
   15cd0:	fa23 f101 	lsr.w	r1, r3, r1
   15cd4:	bf58      	it	pl
   15cd6:	fa03 f102 	lslpl.w	r1, r3, r2
   15cda:	ea01 010c 	and.w	r1, r1, ip
   15cde:	4308      	orrs	r0, r1
   15ce0:	d105      	bne.n	15cee <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   15ce2:	4630      	mov	r0, r6
   15ce4:	f001 f989 	bl	16ffa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   15ce8:	b108      	cbz	r0, 15cee <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   15cea:	2001      	movs	r0, #1
   15cec:	e7b2      	b.n	15c54 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   15cee:	f046 0001 	orr.w	r0, r6, #1
   15cf2:	2107      	movs	r1, #7
   15cf4:	fab0 f080 	clz	r0, r0
   15cf8:	f04f 0e05 	mov.w	lr, #5
   15cfc:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   15d00:	2003      	movs	r0, #3
   15d02:	e7a7      	b.n	15c54 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   15d04:	f246 20f4 	movw	r0, #25332	; 0x62f4
   15d08:	228b      	movs	r2, #139	; 0x8b
   15d0a:	f2c0 0002 	movt	r0, #2
   15d0e:	f000 f84d 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   15d12:	defe      	udf	#254	; 0xfe
   15d14:	f246 20e4 	movw	r0, #25316	; 0x62e4
   15d18:	221f      	movs	r2, #31
   15d1a:	f2c0 0002 	movt	r0, #2
   15d1e:	f000 f845 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   15d22:	defe      	udf	#254	; 0xfe

00015d24 <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   15d24:	b08e      	sub	sp, #56	; 0x38
   15d26:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   15d2a:	2002      	movs	r0, #2
   15d2c:	a90a      	add	r1, sp, #40	; 0x28
   15d2e:	9009      	str	r0, [sp, #36]	; 0x24
   15d30:	9108      	str	r1, [sp, #32]
   15d32:	2100      	movs	r1, #0
   15d34:	9107      	str	r1, [sp, #28]
   15d36:	e9cd 0105 	strd	r0, r1, [sp, #20]
   15d3a:	f645 10a0 	movw	r0, #22944	; 0x59a0
   15d3e:	f2c0 0002 	movt	r0, #2
   15d42:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   15d46:	9004      	str	r0, [sp, #16]
   15d48:	f647 2057 	movw	r0, #31319	; 0x7a57
   15d4c:	f2c0 0001 	movt	r0, #1
   15d50:	900d      	str	r0, [sp, #52]	; 0x34
   15d52:	a802      	add	r0, sp, #8
   15d54:	900c      	str	r0, [sp, #48]	; 0x30
   15d56:	f647 2061 	movw	r0, #31329	; 0x7a61
   15d5a:	f2c0 0001 	movt	r0, #1
   15d5e:	4661      	mov	r1, ip
   15d60:	900b      	str	r0, [sp, #44]	; 0x2c
   15d62:	4668      	mov	r0, sp
   15d64:	900a      	str	r0, [sp, #40]	; 0x28
   15d66:	a804      	add	r0, sp, #16
   15d68:	f000 f840 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   15d6c:	defe      	udf	#254	; 0xfe

00015d6e <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   15d6e:	68c0      	ldr	r0, [r0, #12]
   15d70:	4770      	bx	lr

00015d72 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   15d72:	4770      	bx	lr

00015d74 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   15d74:	e9d0 2100 	ldrd	r2, r1, [r0]
   15d78:	4610      	mov	r0, r2
   15d7a:	4770      	bx	lr

00015d7c <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   15d7c:	6880      	ldr	r0, [r0, #8]
   15d7e:	4770      	bx	lr

00015d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   15d80:	b088      	sub	sp, #32
   15d82:	4694      	mov	ip, r2
   15d84:	f245 72d4 	movw	r2, #22484	; 0x57d4
   15d88:	2300      	movs	r3, #0
   15d8a:	f2c0 0202 	movt	r2, #2
   15d8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   15d92:	4668      	mov	r0, sp
   15d94:	9305      	str	r3, [sp, #20]
   15d96:	4661      	mov	r1, ip
   15d98:	9204      	str	r2, [sp, #16]
   15d9a:	2201      	movs	r2, #1
   15d9c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   15da0:	9201      	str	r2, [sp, #4]
   15da2:	aa06      	add	r2, sp, #24
   15da4:	9200      	str	r2, [sp, #0]
   15da6:	f000 f821 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   15daa:	defe      	udf	#254	; 0xfe

00015dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   15dac:	b08c      	sub	sp, #48	; 0x30
   15dae:	4603      	mov	r3, r0
   15db0:	e9cd 1200 	strd	r1, r2, [sp]
   15db4:	2002      	movs	r0, #2
   15db6:	a908      	add	r1, sp, #32
   15db8:	9007      	str	r0, [sp, #28]
   15dba:	9106      	str	r1, [sp, #24]
   15dbc:	2100      	movs	r1, #0
   15dbe:	9105      	str	r1, [sp, #20]
   15dc0:	e9cd 0103 	strd	r0, r1, [sp, #12]
   15dc4:	f645 10d4 	movw	r0, #22996	; 0x59d4
   15dc8:	f2c0 0002 	movt	r0, #2
   15dcc:	4669      	mov	r1, sp
   15dce:	9002      	str	r0, [sp, #8]
   15dd0:	f647 1073 	movw	r0, #31091	; 0x7973
   15dd4:	f2c0 0001 	movt	r0, #1
   15dd8:	900b      	str	r0, [sp, #44]	; 0x2c
   15dda:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   15dde:	a801      	add	r0, sp, #4
   15de0:	9008      	str	r0, [sp, #32]
   15de2:	a802      	add	r0, sp, #8
   15de4:	4619      	mov	r1, r3
   15de6:	f000 f801 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   15dea:	defe      	udf	#254	; 0xfe

00015dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   15dec:	b084      	sub	sp, #16
   15dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
   15df2:	f645 10b0 	movw	r0, #22960	; 0x59b0
   15df6:	f2c0 0002 	movt	r0, #2
   15dfa:	9001      	str	r0, [sp, #4]
   15dfc:	f245 70d4 	movw	r0, #22484	; 0x57d4
   15e00:	f2c0 0002 	movt	r0, #2
   15e04:	9000      	str	r0, [sp, #0]
   15e06:	4668      	mov	r0, sp
   15e08:	f7f2 fc62 	bl	86d0 <rust_begin_unwind>
   15e0c:	defe      	udf	#254	; 0xfe

00015e0e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   15e0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e12:	b081      	sub	sp, #4
   15e14:	2a00      	cmp	r2, #0
   15e16:	f000 80fe 	beq.w	16016 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   15e1a:	4690      	mov	r8, r2
   15e1c:	468a      	mov	sl, r1
   15e1e:	4681      	mov	r9, r0
   15e20:	f8d9 0008 	ldr.w	r0, [r9, #8]
   15e24:	7800      	ldrb	r0, [r0, #0]
   15e26:	b948      	cbnz	r0, 15e3c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   15e28:	e014      	b.n	15e54 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   15e2a:	44da      	add	sl, fp
   15e2c:	2c00      	cmp	r4, #0
   15e2e:	46a0      	mov	r8, r4
   15e30:	f000 80f1 	beq.w	16016 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   15e34:	f8d9 0008 	ldr.w	r0, [r9, #8]
   15e38:	7800      	ldrb	r0, [r0, #0]
   15e3a:	b158      	cbz	r0, 15e54 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   15e3c:	e9d9 0100 	ldrd	r0, r1, [r9]
   15e40:	2204      	movs	r2, #4
   15e42:	68cb      	ldr	r3, [r1, #12]
   15e44:	f645 01f4 	movw	r1, #22772	; 0x58f4
   15e48:	f2c0 0102 	movt	r1, #2
   15e4c:	4798      	blx	r3
   15e4e:	2800      	cmp	r0, #0
   15e50:	f040 80e5 	bne.w	1601e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   15e54:	f04f 0b00 	mov.w	fp, #0
   15e58:	4641      	mov	r1, r8
   15e5a:	e008      	b.n	15e6e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   15e5c:	ebb8 010b 	subs.w	r1, r8, fp
   15e60:	f04f 0000 	mov.w	r0, #0
   15e64:	bf38      	it	cc
   15e66:	4601      	movcc	r1, r0
   15e68:	45c3      	cmp	fp, r8
   15e6a:	f200 80a5 	bhi.w	15fb8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   15e6e:	eb0a 0e0b 	add.w	lr, sl, fp
   15e72:	2000      	movs	r0, #0
   15e74:	f01e 0203 	ands.w	r2, lr, #3
   15e78:	bf18      	it	ne
   15e7a:	f1d2 0c04 	rsbsne	ip, r2, #4
   15e7e:	d120      	bne.n	15ec2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   15e80:	2908      	cmp	r1, #8
   15e82:	d357      	bcc.n	15f34 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   15e84:	f1a1 0208 	sub.w	r2, r1, #8
   15e88:	4290      	cmp	r0, r2
   15e8a:	d853      	bhi.n	15f34 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   15e8c:	f85e 3000 	ldr.w	r3, [lr, r0]
   15e90:	eb0e 0700 	add.w	r7, lr, r0
   15e94:	687f      	ldr	r7, [r7, #4]
   15e96:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   15e9a:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   15e9e:	ea26 0303 	bic.w	r3, r6, r3
   15ea2:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   15ea6:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   15eaa:	ea26 0707 	bic.w	r7, r6, r7
   15eae:	433b      	orrs	r3, r7
   15eb0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   15eb4:	d102      	bne.n	15ebc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   15eb6:	3008      	adds	r0, #8
   15eb8:	4290      	cmp	r0, r2
   15eba:	d9e7      	bls.n	15e8c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   15ebc:	4288      	cmp	r0, r1
   15ebe:	d939      	bls.n	15f34 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   15ec0:	e0b1      	b.n	16026 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   15ec2:	458c      	cmp	ip, r1
   15ec4:	bf88      	it	hi
   15ec6:	468c      	movhi	ip, r1
   15ec8:	eb0e 060c 	add.w	r6, lr, ip
   15ecc:	2000      	movs	r0, #0
   15ece:	4663      	mov	r3, ip
   15ed0:	4677      	mov	r7, lr
   15ed2:	b363      	cbz	r3, 15f2e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   15ed4:	463a      	mov	r2, r7
   15ed6:	f812 4b01 	ldrb.w	r4, [r2], #1
   15eda:	f1b4 050a 	subs.w	r5, r4, #10
   15ede:	bf18      	it	ne
   15ee0:	2501      	movne	r5, #1
   15ee2:	4428      	add	r0, r5
   15ee4:	2c0a      	cmp	r4, #10
   15ee6:	d059      	beq.n	15f9c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   15ee8:	42b2      	cmp	r2, r6
   15eea:	d020      	beq.n	15f2e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   15eec:	787a      	ldrb	r2, [r7, #1]
   15eee:	f1b2 040a 	subs.w	r4, r2, #10
   15ef2:	bf18      	it	ne
   15ef4:	2401      	movne	r4, #1
   15ef6:	4420      	add	r0, r4
   15ef8:	2a0a      	cmp	r2, #10
   15efa:	d04f      	beq.n	15f9c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   15efc:	1cba      	adds	r2, r7, #2
   15efe:	42b2      	cmp	r2, r6
   15f00:	d015      	beq.n	15f2e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   15f02:	78ba      	ldrb	r2, [r7, #2]
   15f04:	f1b2 040a 	subs.w	r4, r2, #10
   15f08:	bf18      	it	ne
   15f0a:	2401      	movne	r4, #1
   15f0c:	4420      	add	r0, r4
   15f0e:	2a0a      	cmp	r2, #10
   15f10:	d044      	beq.n	15f9c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   15f12:	1cfa      	adds	r2, r7, #3
   15f14:	42b2      	cmp	r2, r6
   15f16:	d00a      	beq.n	15f2e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   15f18:	78fa      	ldrb	r2, [r7, #3]
   15f1a:	3b04      	subs	r3, #4
   15f1c:	3704      	adds	r7, #4
   15f1e:	f1b2 040a 	subs.w	r4, r2, #10
   15f22:	bf18      	it	ne
   15f24:	2401      	movne	r4, #1
   15f26:	4420      	add	r0, r4
   15f28:	2a0a      	cmp	r2, #10
   15f2a:	d1d2      	bne.n	15ed2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   15f2c:	e036      	b.n	15f9c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   15f2e:	4660      	mov	r0, ip
   15f30:	2908      	cmp	r1, #8
   15f32:	d2a7      	bcs.n	15e84 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   15f34:	eb0e 0700 	add.w	r7, lr, r0
   15f38:	eb0e 0201 	add.w	r2, lr, r1
   15f3c:	1a0e      	subs	r6, r1, r0
   15f3e:	2100      	movs	r1, #0
   15f40:	b3ce      	cbz	r6, 15fb6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   15f42:	463b      	mov	r3, r7
   15f44:	f813 5b01 	ldrb.w	r5, [r3], #1
   15f48:	f1b5 040a 	subs.w	r4, r5, #10
   15f4c:	bf18      	it	ne
   15f4e:	2401      	movne	r4, #1
   15f50:	4421      	add	r1, r4
   15f52:	2d0a      	cmp	r5, #10
   15f54:	d021      	beq.n	15f9a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   15f56:	4293      	cmp	r3, r2
   15f58:	d02d      	beq.n	15fb6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   15f5a:	787b      	ldrb	r3, [r7, #1]
   15f5c:	f1b3 050a 	subs.w	r5, r3, #10
   15f60:	bf18      	it	ne
   15f62:	2501      	movne	r5, #1
   15f64:	4429      	add	r1, r5
   15f66:	2b0a      	cmp	r3, #10
   15f68:	d017      	beq.n	15f9a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   15f6a:	1cbb      	adds	r3, r7, #2
   15f6c:	4293      	cmp	r3, r2
   15f6e:	d022      	beq.n	15fb6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   15f70:	78bb      	ldrb	r3, [r7, #2]
   15f72:	f1b3 050a 	subs.w	r5, r3, #10
   15f76:	bf18      	it	ne
   15f78:	2501      	movne	r5, #1
   15f7a:	4429      	add	r1, r5
   15f7c:	2b0a      	cmp	r3, #10
   15f7e:	d00c      	beq.n	15f9a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   15f80:	1cfb      	adds	r3, r7, #3
   15f82:	4293      	cmp	r3, r2
   15f84:	d017      	beq.n	15fb6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   15f86:	78fb      	ldrb	r3, [r7, #3]
   15f88:	3e04      	subs	r6, #4
   15f8a:	3704      	adds	r7, #4
   15f8c:	f1b3 050a 	subs.w	r5, r3, #10
   15f90:	bf18      	it	ne
   15f92:	2501      	movne	r5, #1
   15f94:	4429      	add	r1, r5
   15f96:	2b0a      	cmp	r3, #10
   15f98:	d1d2      	bne.n	15f40 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   15f9a:	4408      	add	r0, r1
   15f9c:	4458      	add	r0, fp
   15f9e:	f100 0b01 	add.w	fp, r0, #1
   15fa2:	4540      	cmp	r0, r8
   15fa4:	f4bf af5a 	bcs.w	15e5c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   15fa8:	f81a 0000 	ldrb.w	r0, [sl, r0]
   15fac:	280a      	cmp	r0, #10
   15fae:	f47f af55 	bne.w	15e5c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   15fb2:	2001      	movs	r0, #1
   15fb4:	e001      	b.n	15fba <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   15fb6:	2000      	movs	r0, #0
   15fb8:	46c3      	mov	fp, r8
   15fba:	f8d9 1008 	ldr.w	r1, [r9, #8]
   15fbe:	eba8 040b 	sub.w	r4, r8, fp
   15fc2:	7008      	strb	r0, [r1, #0]
   15fc4:	fab4 f084 	clz	r0, r4
   15fc8:	0942      	lsrs	r2, r0, #5
   15fca:	fabb f08b 	clz	r0, fp
   15fce:	0943      	lsrs	r3, r0, #5
   15fd0:	e9d9 0100 	ldrd	r0, r1, [r9]
   15fd4:	ea53 0602 	orrs.w	r6, r3, r2
   15fd8:	d106      	bne.n	15fe8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   15fda:	45d8      	cmp	r8, fp
   15fdc:	d926      	bls.n	1602c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   15fde:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   15fe2:	f112 0f41 	cmn.w	r2, #65	; 0x41
   15fe6:	dd21      	ble.n	1602c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   15fe8:	68cb      	ldr	r3, [r1, #12]
   15fea:	4651      	mov	r1, sl
   15fec:	465a      	mov	r2, fp
   15fee:	4798      	blx	r3
   15ff0:	b9a8      	cbnz	r0, 1601e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   15ff2:	2e00      	cmp	r6, #0
   15ff4:	f47f af19 	bne.w	15e2a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   15ff8:	45d8      	cmp	r8, fp
   15ffa:	d905      	bls.n	16008 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   15ffc:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   16000:	f110 0f41 	cmn.w	r0, #65	; 0x41
   16004:	f73f af11 	bgt.w	15e2a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   16008:	4650      	mov	r0, sl
   1600a:	4641      	mov	r1, r8
   1600c:	465a      	mov	r2, fp
   1600e:	4643      	mov	r3, r8
   16010:	f000 fe4d 	bl	16cae <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   16014:	defe      	udf	#254	; 0xfe
   16016:	2000      	movs	r0, #0
   16018:	b001      	add	sp, #4
   1601a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1601e:	2001      	movs	r0, #1
   16020:	b001      	add	sp, #4
   16022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16026:	f000 fe20 	bl	16c6a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1602a:	defe      	udf	#254	; 0xfe
   1602c:	4650      	mov	r0, sl
   1602e:	4641      	mov	r1, r8
   16030:	2200      	movs	r2, #0
   16032:	465b      	mov	r3, fp
   16034:	f000 fe3b 	bl	16cae <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   16038:	defe      	udf	#254	; 0xfe

0001603a <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   1603a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1603c:	b08d      	sub	sp, #52	; 0x34
   1603e:	4604      	mov	r4, r0
   16040:	7a00      	ldrb	r0, [r0, #8]
   16042:	b138      	cbz	r0, 16054 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   16044:	2001      	movs	r0, #1
   16046:	6861      	ldr	r1, [r4, #4]
   16048:	7220      	strb	r0, [r4, #8]
   1604a:	1c48      	adds	r0, r1, #1
   1604c:	6060      	str	r0, [r4, #4]
   1604e:	4620      	mov	r0, r4
   16050:	b00d      	add	sp, #52	; 0x34
   16052:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16054:	4616      	mov	r6, r2
   16056:	460d      	mov	r5, r1
   16058:	e9d4 1200 	ldrd	r1, r2, [r4]
   1605c:	7808      	ldrb	r0, [r1, #0]
   1605e:	0740      	lsls	r0, r0, #29
   16060:	d419      	bmi.n	16096 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   16062:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   16066:	f645 11fe 	movw	r1, #23038	; 0x59fe
   1606a:	f645 2c02 	movw	ip, #23042	; 0x5a02
   1606e:	f2c0 0102 	movt	r1, #2
   16072:	2a00      	cmp	r2, #0
   16074:	f2c0 0c02 	movt	ip, #2
   16078:	bf08      	it	eq
   1607a:	4661      	moveq	r1, ip
   1607c:	68db      	ldr	r3, [r3, #12]
   1607e:	f04f 0202 	mov.w	r2, #2
   16082:	bf08      	it	eq
   16084:	2201      	moveq	r2, #1
   16086:	4798      	blx	r3
   16088:	2800      	cmp	r0, #0
   1608a:	d1db      	bne.n	16044 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   1608c:	68f2      	ldr	r2, [r6, #12]
   1608e:	4628      	mov	r0, r5
   16090:	6821      	ldr	r1, [r4, #0]
   16092:	4790      	blx	r2
   16094:	e7d7      	b.n	16046 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   16096:	b95a      	cbnz	r2, 160b0 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   16098:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1609c:	2202      	movs	r2, #2
   1609e:	68cb      	ldr	r3, [r1, #12]
   160a0:	f645 2100 	movw	r1, #23040	; 0x5a00
   160a4:	f2c0 0102 	movt	r1, #2
   160a8:	4798      	blx	r3
   160aa:	2800      	cmp	r0, #0
   160ac:	d1ca      	bne.n	16044 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   160ae:	6821      	ldr	r1, [r4, #0]
   160b0:	2001      	movs	r0, #1
   160b2:	f10d 030f 	add.w	r3, sp, #15
   160b6:	f88d 000f 	strb.w	r0, [sp, #15]
   160ba:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   160be:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   160c2:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   160c6:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   160ca:	f891 1020 	ldrb.w	r1, [r1, #32]
   160ce:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   160d2:	a904      	add	r1, sp, #16
   160d4:	e9cd 0204 	strd	r0, r2, [sp, #16]
   160d8:	f645 10e4 	movw	r0, #23012	; 0x59e4
   160dc:	f2c0 0002 	movt	r0, #2
   160e0:	68f2      	ldr	r2, [r6, #12]
   160e2:	900b      	str	r0, [sp, #44]	; 0x2c
   160e4:	4668      	mov	r0, sp
   160e6:	900a      	str	r0, [sp, #40]	; 0x28
   160e8:	4628      	mov	r0, r5
   160ea:	e9cd 3708 	strd	r3, r7, [sp, #32]
   160ee:	e9cd ce06 	strd	ip, lr, [sp, #24]
   160f2:	4790      	blx	r2
   160f4:	2800      	cmp	r0, #0
   160f6:	d1a5      	bne.n	16044 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   160f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   160fc:	2202      	movs	r2, #2
   160fe:	68cb      	ldr	r3, [r1, #12]
   16100:	f645 11fc 	movw	r1, #23036	; 0x59fc
   16104:	f2c0 0102 	movt	r1, #2
   16108:	4798      	blx	r3
   1610a:	e79c      	b.n	16046 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

0001610c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   1610c:	b5b0      	push	{r4, r5, r7, lr}
   1610e:	4604      	mov	r4, r0
   16110:	7a05      	ldrb	r5, [r0, #8]
   16112:	6840      	ldr	r0, [r0, #4]
   16114:	b308      	cbz	r0, 1615a <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   16116:	b10d      	cbz	r5, 1611c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   16118:	2501      	movs	r5, #1
   1611a:	e01d      	b.n	16158 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   1611c:	2801      	cmp	r0, #1
   1611e:	d110      	bne.n	16142 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   16120:	7a60      	ldrb	r0, [r4, #9]
   16122:	b170      	cbz	r0, 16142 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   16124:	6821      	ldr	r1, [r4, #0]
   16126:	7808      	ldrb	r0, [r1, #0]
   16128:	0740      	lsls	r0, r0, #29
   1612a:	d40a      	bmi.n	16142 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   1612c:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16130:	2201      	movs	r2, #1
   16132:	68cb      	ldr	r3, [r1, #12]
   16134:	f645 2103 	movw	r1, #23043	; 0x5a03
   16138:	f2c0 0102 	movt	r1, #2
   1613c:	2501      	movs	r5, #1
   1613e:	4798      	blx	r3
   16140:	b950      	cbnz	r0, 16158 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   16142:	6821      	ldr	r1, [r4, #0]
   16144:	2201      	movs	r2, #1
   16146:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1614a:	68cb      	ldr	r3, [r1, #12]
   1614c:	f645 2104 	movw	r1, #23044	; 0x5a04
   16150:	f2c0 0102 	movt	r1, #2
   16154:	4798      	blx	r3
   16156:	4605      	mov	r5, r0
   16158:	7225      	strb	r5, [r4, #8]
   1615a:	2d00      	cmp	r5, #0
   1615c:	bf18      	it	ne
   1615e:	2501      	movne	r5, #1
   16160:	4628      	mov	r0, r5
   16162:	bdb0      	pop	{r4, r5, r7, pc}

00016164 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   16164:	b580      	push	{r7, lr}
   16166:	b082      	sub	sp, #8
   16168:	468c      	mov	ip, r1
   1616a:	2100      	movs	r1, #0
   1616c:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   16170:	9101      	str	r1, [sp, #4]
   16172:	d207      	bcs.n	16184 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   16174:	f88d c004 	strb.w	ip, [sp, #4]
   16178:	a901      	add	r1, sp, #4
   1617a:	2201      	movs	r2, #1
   1617c:	f7ff fe47 	bl	15e0e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16180:	b002      	add	sp, #8
   16182:	bd80      	pop	{r7, pc}
   16184:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   16188:	d210      	bcs.n	161ac <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   1618a:	ea4f 119c 	mov.w	r1, ip, lsr #6
   1618e:	2306      	movs	r3, #6
   16190:	2202      	movs	r2, #2
   16192:	f363 115f 	bfi	r1, r3, #5, #27
   16196:	f362 1c9f 	bfi	ip, r2, #6, #26
   1619a:	f88d c005 	strb.w	ip, [sp, #5]
   1619e:	f88d 1004 	strb.w	r1, [sp, #4]
   161a2:	a901      	add	r1, sp, #4
   161a4:	f7ff fe33 	bl	15e0e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   161a8:	b002      	add	sp, #8
   161aa:	bd80      	pop	{r7, pc}
   161ac:	2202      	movs	r2, #2
   161ae:	4663      	mov	r3, ip
   161b0:	a901      	add	r1, sp, #4
   161b2:	f362 139f 	bfi	r3, r2, #6, #26
   161b6:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   161ba:	d213      	bcs.n	161e4 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   161bc:	f88d 3006 	strb.w	r3, [sp, #6]
   161c0:	ea4f 139c 	mov.w	r3, ip, lsr #6
   161c4:	f362 139f 	bfi	r3, r2, #6, #26
   161c8:	f88d 3005 	strb.w	r3, [sp, #5]
   161cc:	ea4f 321c 	mov.w	r2, ip, lsr #12
   161d0:	230e      	movs	r3, #14
   161d2:	f363 121f 	bfi	r2, r3, #4, #28
   161d6:	f88d 2004 	strb.w	r2, [sp, #4]
   161da:	2203      	movs	r2, #3
   161dc:	f7ff fe17 	bl	15e0e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   161e0:	b002      	add	sp, #8
   161e2:	bd80      	pop	{r7, pc}
   161e4:	f88d 3007 	strb.w	r3, [sp, #7]
   161e8:	ea4f 139c 	mov.w	r3, ip, lsr #6
   161ec:	f362 139f 	bfi	r3, r2, #6, #26
   161f0:	f88d 3006 	strb.w	r3, [sp, #6]
   161f4:	ea4f 331c 	mov.w	r3, ip, lsr #12
   161f8:	f362 139f 	bfi	r3, r2, #6, #26
   161fc:	22f0      	movs	r2, #240	; 0xf0
   161fe:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   16202:	f88d 3005 	strb.w	r3, [sp, #5]
   16206:	f88d 2004 	strb.w	r2, [sp, #4]
   1620a:	2204      	movs	r2, #4
   1620c:	f7ff fdff 	bl	15e0e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16210:	b002      	add	sp, #8
   16212:	bd80      	pop	{r7, pc}

00016214 <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   16214:	b570      	push	{r4, r5, r6, lr}
   16216:	b088      	sub	sp, #32
   16218:	9001      	str	r0, [sp, #4]
   1621a:	aa02      	add	r2, sp, #8
   1621c:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   16220:	f645 21d0 	movw	r1, #23248	; 0x5ad0
   16224:	4610      	mov	r0, r2
   16226:	f2c0 0102 	movt	r1, #2
   1622a:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   1622e:	a801      	add	r0, sp, #4
   16230:	f000 f89e 	bl	16370 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   16234:	b008      	add	sp, #32
   16236:	bd70      	pop	{r4, r5, r6, pc}

00016238 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   16238:	6800      	ldr	r0, [r0, #0]
   1623a:	f7ff bde8 	b.w	15e0e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

0001623e <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   1623e:	6800      	ldr	r0, [r0, #0]
   16240:	f7ff bf90 	b.w	16164 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

00016244 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   16244:	b570      	push	{r4, r5, r6, lr}
   16246:	b088      	sub	sp, #32
   16248:	6800      	ldr	r0, [r0, #0]
   1624a:	aa02      	add	r2, sp, #8
   1624c:	9001      	str	r0, [sp, #4]
   1624e:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   16252:	4610      	mov	r0, r2
   16254:	f645 21d0 	movw	r1, #23248	; 0x5ad0
   16258:	f2c0 0102 	movt	r1, #2
   1625c:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   16260:	a801      	add	r0, sp, #4
   16262:	f000 f885 	bl	16370 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   16266:	b008      	add	sp, #32
   16268:	bd70      	pop	{r4, r5, r6, pc}

0001626a <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   1626a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1626e:	b08d      	sub	sp, #52	; 0x34
   16270:	468c      	mov	ip, r1
   16272:	6801      	ldr	r1, [r0, #0]
   16274:	f248 5e1f 	movw	lr, #34079	; 0x851f
   16278:	f645 2007 	movw	r0, #23047	; 0x5a07
   1627c:	f242 7810 	movw	r8, #10000	; 0x2710
   16280:	4541      	cmp	r1, r8
   16282:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   16286:	f2c0 0002 	movt	r0, #2
   1628a:	d337      	bcc.n	162fc <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   1628c:	f241 7959 	movw	r9, #5977	; 0x1759
   16290:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   16294:	f10d 0b0c 	add.w	fp, sp, #12
   16298:	2300      	movs	r3, #0
   1629a:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   1629e:	f04f 0a64 	mov.w	sl, #100	; 0x64
   162a2:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   162a6:	fba1 2409 	umull	r2, r4, r1, r9
   162aa:	42b9      	cmp	r1, r7
   162ac:	ea4f 3254 	mov.w	r2, r4, lsr #13
   162b0:	fb02 1418 	mls	r4, r2, r8, r1
   162b4:	4611      	mov	r1, r2
   162b6:	b2a5      	uxth	r5, r4
   162b8:	fba5 560e 	umull	r5, r6, r5, lr
   162bc:	ea4f 1556 	mov.w	r5, r6, lsr #5
   162c0:	eb0b 0603 	add.w	r6, fp, r3
   162c4:	fb05 441a 	mls	r4, r5, sl, r4
   162c8:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   162cc:	f1a3 0304 	sub.w	r3, r3, #4
   162d0:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   162d4:	b2a4      	uxth	r4, r4
   162d6:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   162da:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   162de:	d8e2      	bhi.n	162a6 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   162e0:	f103 0427 	add.w	r4, r3, #39	; 0x27
   162e4:	4611      	mov	r1, r2
   162e6:	2963      	cmp	r1, #99	; 0x63
   162e8:	dc0b      	bgt.n	16302 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   162ea:	460b      	mov	r3, r1
   162ec:	2b0a      	cmp	r3, #10
   162ee:	db17      	blt.n	16320 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   162f0:	1ea1      	subs	r1, r4, #2
   162f2:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   162f6:	aa03      	add	r2, sp, #12
   162f8:	5250      	strh	r0, [r2, r1]
   162fa:	e016      	b.n	1632a <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   162fc:	2427      	movs	r4, #39	; 0x27
   162fe:	2963      	cmp	r1, #99	; 0x63
   16300:	ddf3      	ble.n	162ea <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   16302:	b28a      	uxth	r2, r1
   16304:	3c02      	subs	r4, #2
   16306:	fba2 230e 	umull	r2, r3, r2, lr
   1630a:	2264      	movs	r2, #100	; 0x64
   1630c:	095b      	lsrs	r3, r3, #5
   1630e:	fb03 1112 	mls	r1, r3, r2, r1
   16312:	aa03      	add	r2, sp, #12
   16314:	b289      	uxth	r1, r1
   16316:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   1631a:	5311      	strh	r1, [r2, r4]
   1631c:	2b0a      	cmp	r3, #10
   1631e:	dae7      	bge.n	162f0 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   16320:	1e61      	subs	r1, r4, #1
   16322:	aa03      	add	r2, sp, #12
   16324:	f103 0030 	add.w	r0, r3, #48	; 0x30
   16328:	5450      	strb	r0, [r2, r1]
   1632a:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   1632e:	aa03      	add	r2, sp, #12
   16330:	4411      	add	r1, r2
   16332:	f245 72d4 	movw	r2, #22484	; 0x57d4
   16336:	e9cd 1000 	strd	r1, r0, [sp]
   1633a:	f2c0 0202 	movt	r2, #2
   1633e:	4660      	mov	r0, ip
   16340:	2101      	movs	r1, #1
   16342:	2300      	movs	r3, #0
   16344:	f000 f8f4 	bl	16530 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16348:	b00d      	add	sp, #52	; 0x34
   1634a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001634e <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   1634e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16352:	b086      	sub	sp, #24
   16354:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   16358:	466a      	mov	r2, sp
   1635a:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   1635e:	4613      	mov	r3, r2
   16360:	4660      	mov	r0, ip
   16362:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   16366:	f000 f803 	bl	16370 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   1636a:	b006      	add	sp, #24
   1636c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016370 <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   16370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16374:	b08b      	sub	sp, #44	; 0x2c
   16376:	2303      	movs	r3, #3
   16378:	6897      	ldr	r7, [r2, #8]
   1637a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1637e:	2320      	movs	r3, #32
   16380:	9303      	str	r3, [sp, #12]
   16382:	2300      	movs	r3, #0
   16384:	2f00      	cmp	r7, #0
   16386:	9302      	str	r3, [sp, #8]
   16388:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1638c:	9306      	str	r3, [sp, #24]
   1638e:	9304      	str	r3, [sp, #16]
   16390:	d07c      	beq.n	1648c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   16392:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   16396:	e9d2 9400 	ldrd	r9, r4, [r2]
   1639a:	45a3      	cmp	fp, r4
   1639c:	bf88      	it	hi
   1639e:	46a3      	movhi	fp, r4
   163a0:	f1bb 0f00 	cmp.w	fp, #0
   163a4:	f000 809b 	beq.w	164de <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   163a8:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   163ac:	68cd      	ldr	r5, [r1, #12]
   163ae:	9201      	str	r2, [sp, #4]
   163b0:	e9d9 3200 	ldrd	r3, r2, [r9]
   163b4:	4619      	mov	r1, r3
   163b6:	47a8      	blx	r5
   163b8:	2800      	cmp	r0, #0
   163ba:	f040 809e 	bne.w	164fa <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   163be:	464d      	mov	r5, r9
   163c0:	f04f 0a01 	mov.w	sl, #1
   163c4:	f04f 0800 	mov.w	r8, #0
   163c8:	f04f 0910 	mov.w	r9, #16
   163cc:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   163d0:	6841      	ldr	r1, [r0, #4]
   163d2:	9103      	str	r1, [sp, #12]
   163d4:	7f01      	ldrb	r1, [r0, #28]
   163d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   163da:	6881      	ldr	r1, [r0, #8]
   163dc:	9102      	str	r1, [sp, #8]
   163de:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   163e2:	b18a      	cbz	r2, 16408 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   163e4:	2a02      	cmp	r2, #2
   163e6:	d011      	beq.n	1640c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   163e8:	9a01      	ldr	r2, [sp, #4]
   163ea:	4291      	cmp	r1, r2
   163ec:	f080 8098 	bcs.w	16520 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   163f0:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   163f4:	f246 236b 	movw	r3, #25195	; 0x626b
   163f8:	f2c0 0301 	movt	r3, #1
   163fc:	6852      	ldr	r2, [r2, #4]
   163fe:	429a      	cmp	r2, r3
   16400:	d104      	bne.n	1640c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   16402:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   16406:	6809      	ldr	r1, [r1, #0]
   16408:	2201      	movs	r2, #1
   1640a:	e000      	b.n	1640e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   1640c:	2200      	movs	r2, #0
   1640e:	e9cd 2104 	strd	r2, r1, [sp, #16]
   16412:	f857 1009 	ldr.w	r1, [r7, r9]
   16416:	68c0      	ldr	r0, [r0, #12]
   16418:	b180      	cbz	r0, 1643c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   1641a:	2802      	cmp	r0, #2
   1641c:	d010      	beq.n	16440 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   1641e:	9801      	ldr	r0, [sp, #4]
   16420:	4281      	cmp	r1, r0
   16422:	d27d      	bcs.n	16520 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   16424:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   16428:	f246 226b 	movw	r2, #25195	; 0x626b
   1642c:	f2c0 0201 	movt	r2, #1
   16430:	6840      	ldr	r0, [r0, #4]
   16432:	4290      	cmp	r0, r2
   16434:	d104      	bne.n	16440 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   16436:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   1643a:	6801      	ldr	r1, [r0, #0]
   1643c:	2001      	movs	r0, #1
   1643e:	e000      	b.n	16442 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   16440:	2000      	movs	r0, #0
   16442:	eb07 0209 	add.w	r2, r7, r9
   16446:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1644a:	9801      	ldr	r0, [sp, #4]
   1644c:	f852 1c10 	ldr.w	r1, [r2, #-16]
   16450:	4281      	cmp	r1, r0
   16452:	d25d      	bcs.n	16510 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   16454:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   16458:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   1645c:	684a      	ldr	r2, [r1, #4]
   1645e:	a902      	add	r1, sp, #8
   16460:	4790      	blx	r2
   16462:	2800      	cmp	r0, #0
   16464:	d149      	bne.n	164fa <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   16466:	45da      	cmp	sl, fp
   16468:	d24b      	bcs.n	16502 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   1646a:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   1646e:	eb05 0208 	add.w	r2, r5, r8
   16472:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   16476:	68db      	ldr	r3, [r3, #12]
   16478:	4798      	blx	r3
   1647a:	f109 0920 	add.w	r9, r9, #32
   1647e:	f108 0808 	add.w	r8, r8, #8
   16482:	f10a 0a01 	add.w	sl, sl, #1
   16486:	2800      	cmp	r0, #0
   16488:	d0a0      	beq.n	163cc <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   1648a:	e036      	b.n	164fa <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1648c:	6956      	ldr	r6, [r2, #20]
   1648e:	e9d2 9400 	ldrd	r9, r4, [r2]
   16492:	42a6      	cmp	r6, r4
   16494:	bf88      	it	hi
   16496:	4626      	movhi	r6, r4
   16498:	b30e      	cbz	r6, 164de <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   1649a:	6917      	ldr	r7, [r2, #16]
   1649c:	e9d9 3200 	ldrd	r3, r2, [r9]
   164a0:	68cd      	ldr	r5, [r1, #12]
   164a2:	4619      	mov	r1, r3
   164a4:	47a8      	blx	r5
   164a6:	bb40      	cbnz	r0, 164fa <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   164a8:	f10d 0808 	add.w	r8, sp, #8
   164ac:	2500      	movs	r5, #0
   164ae:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   164b2:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   164b6:	684a      	ldr	r2, [r1, #4]
   164b8:	4641      	mov	r1, r8
   164ba:	4790      	blx	r2
   164bc:	b9e8      	cbnz	r0, 164fa <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   164be:	f105 0a01 	add.w	sl, r5, #1
   164c2:	45b2      	cmp	sl, r6
   164c4:	d20d      	bcs.n	164e2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   164c6:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   164ca:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   164ce:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   164d2:	68db      	ldr	r3, [r3, #12]
   164d4:	4798      	blx	r3
   164d6:	2800      	cmp	r0, #0
   164d8:	4655      	mov	r5, sl
   164da:	d0e8      	beq.n	164ae <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   164dc:	e00d      	b.n	164fa <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   164de:	f04f 0a00 	mov.w	sl, #0
   164e2:	4554      	cmp	r4, sl
   164e4:	d910      	bls.n	16508 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   164e6:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   164ea:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   164ee:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   164f2:	6852      	ldr	r2, [r2, #4]
   164f4:	68db      	ldr	r3, [r3, #12]
   164f6:	4798      	blx	r3
   164f8:	b130      	cbz	r0, 16508 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   164fa:	2001      	movs	r0, #1
   164fc:	b00b      	add	sp, #44	; 0x2c
   164fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16502:	46a9      	mov	r9, r5
   16504:	4554      	cmp	r4, sl
   16506:	d8ee      	bhi.n	164e6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   16508:	2000      	movs	r0, #0
   1650a:	b00b      	add	sp, #44	; 0x2c
   1650c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16510:	f645 3000 	movw	r0, #23296	; 0x5b00
   16514:	f2c0 0002 	movt	r0, #2
   16518:	9a01      	ldr	r2, [sp, #4]
   1651a:	f7ff fc47 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1651e:	defe      	udf	#254	; 0xfe
   16520:	f645 3010 	movw	r0, #23312	; 0x5b10
   16524:	f2c0 0002 	movt	r0, #2
   16528:	9a01      	ldr	r2, [sp, #4]
   1652a:	f7ff fc3f 	bl	15dac <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1652e:	defe      	udf	#254	; 0xfe

00016530 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   16530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16534:	b083      	sub	sp, #12
   16536:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   1653a:	469a      	mov	sl, r3
   1653c:	4604      	mov	r4, r0
   1653e:	b1e1      	cbz	r1, 1657a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   16540:	f8d4 e000 	ldr.w	lr, [r4]
   16544:	f04f 082b 	mov.w	r8, #43	; 0x2b
   16548:	f01e 0101 	ands.w	r1, lr, #1
   1654c:	bf08      	it	eq
   1654e:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   16552:	eb01 0907 	add.w	r9, r1, r7
   16556:	ea5f 714e 	movs.w	r1, lr, lsl #29
   1655a:	d517      	bpl.n	1658c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   1655c:	f1ba 0f00 	cmp.w	sl, #0
   16560:	d033      	beq.n	165ca <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   16562:	f1aa 0101 	sub.w	r1, sl, #1
   16566:	f00a 0c03 	and.w	ip, sl, #3
   1656a:	2903      	cmp	r1, #3
   1656c:	d22f      	bcs.n	165ce <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   1656e:	2100      	movs	r1, #0
   16570:	4613      	mov	r3, r2
   16572:	f1bc 0f00 	cmp.w	ip, #0
   16576:	d152      	bne.n	1661e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   16578:	e069      	b.n	1664e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   1657a:	f8d4 e000 	ldr.w	lr, [r4]
   1657e:	f107 0901 	add.w	r9, r7, #1
   16582:	f04f 082d 	mov.w	r8, #45	; 0x2d
   16586:	ea5f 714e 	movs.w	r1, lr, lsl #29
   1658a:	d4e7      	bmi.n	1655c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   1658c:	f04f 0a00 	mov.w	sl, #0
   16590:	2200      	movs	r2, #0
   16592:	68a0      	ldr	r0, [r4, #8]
   16594:	2801      	cmp	r0, #1
   16596:	d161      	bne.n	1665c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   16598:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   1659c:	45cb      	cmp	fp, r9
   1659e:	d95d      	bls.n	1665c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   165a0:	ea5f 700e 	movs.w	r0, lr, lsl #28
   165a4:	d46e      	bmi.n	16684 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   165a6:	9202      	str	r2, [sp, #8]
   165a8:	ebab 0109 	sub.w	r1, fp, r9
   165ac:	f894 2020 	ldrb.w	r2, [r4, #32]
   165b0:	2000      	movs	r0, #0
   165b2:	46a9      	mov	r9, r5
   165b4:	460e      	mov	r6, r1
   165b6:	2a03      	cmp	r2, #3
   165b8:	bf08      	it	eq
   165ba:	2201      	moveq	r2, #1
   165bc:	e8df f002 	tbb	[pc, r2]
   165c0:	02840287 	.word	0x02840287
   165c4:	2600      	movs	r6, #0
   165c6:	4608      	mov	r0, r1
   165c8:	e081      	b.n	166ce <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   165ca:	2100      	movs	r1, #0
   165cc:	e03f      	b.n	1664e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   165ce:	ebac 060a 	sub.w	r6, ip, sl
   165d2:	2100      	movs	r1, #0
   165d4:	4693      	mov	fp, r2
   165d6:	4613      	mov	r3, r2
   165d8:	e9cd 7501 	strd	r7, r5, [sp, #4]
   165dc:	781a      	ldrb	r2, [r3, #0]
   165de:	785d      	ldrb	r5, [r3, #1]
   165e0:	7898      	ldrb	r0, [r3, #2]
   165e2:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   165e6:	78df      	ldrb	r7, [r3, #3]
   165e8:	2a80      	cmp	r2, #128	; 0x80
   165ea:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   165ee:	bf08      	it	eq
   165f0:	3101      	addeq	r1, #1
   165f2:	2a80      	cmp	r2, #128	; 0x80
   165f4:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   165f8:	bf08      	it	eq
   165fa:	3101      	addeq	r1, #1
   165fc:	2880      	cmp	r0, #128	; 0x80
   165fe:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   16602:	bf08      	it	eq
   16604:	3101      	addeq	r1, #1
   16606:	2880      	cmp	r0, #128	; 0x80
   16608:	bf08      	it	eq
   1660a:	3101      	addeq	r1, #1
   1660c:	3304      	adds	r3, #4
   1660e:	3604      	adds	r6, #4
   16610:	d1e4      	bne.n	165dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   16612:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   16616:	465a      	mov	r2, fp
   16618:	f1bc 0f00 	cmp.w	ip, #0
   1661c:	d017      	beq.n	1664e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   1661e:	7818      	ldrb	r0, [r3, #0]
   16620:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   16624:	2880      	cmp	r0, #128	; 0x80
   16626:	bf08      	it	eq
   16628:	3101      	addeq	r1, #1
   1662a:	f1bc 0f01 	cmp.w	ip, #1
   1662e:	d00e      	beq.n	1664e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   16630:	7858      	ldrb	r0, [r3, #1]
   16632:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   16636:	2880      	cmp	r0, #128	; 0x80
   16638:	bf08      	it	eq
   1663a:	3101      	addeq	r1, #1
   1663c:	f1bc 0f02 	cmp.w	ip, #2
   16640:	d005      	beq.n	1664e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   16642:	7898      	ldrb	r0, [r3, #2]
   16644:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   16648:	2880      	cmp	r0, #128	; 0x80
   1664a:	bf08      	it	eq
   1664c:	3101      	addeq	r1, #1
   1664e:	eb09 000a 	add.w	r0, r9, sl
   16652:	eba0 0901 	sub.w	r9, r0, r1
   16656:	68a0      	ldr	r0, [r4, #8]
   16658:	2801      	cmp	r0, #1
   1665a:	d09d      	beq.n	16598 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   1665c:	4620      	mov	r0, r4
   1665e:	4641      	mov	r1, r8
   16660:	4653      	mov	r3, sl
   16662:	f000 f893 	bl	1678c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   16666:	b120      	cbz	r0, 16672 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   16668:	2601      	movs	r6, #1
   1666a:	4630      	mov	r0, r6
   1666c:	b003      	add	sp, #12
   1666e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16672:	69e1      	ldr	r1, [r4, #28]
   16674:	463a      	mov	r2, r7
   16676:	69a0      	ldr	r0, [r4, #24]
   16678:	68cb      	ldr	r3, [r1, #12]
   1667a:	4629      	mov	r1, r5
   1667c:	b003      	add	sp, #12
   1667e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16682:	4718      	bx	r3
   16684:	6860      	ldr	r0, [r4, #4]
   16686:	2601      	movs	r6, #1
   16688:	9002      	str	r0, [sp, #8]
   1668a:	2030      	movs	r0, #48	; 0x30
   1668c:	f894 1020 	ldrb.w	r1, [r4, #32]
   16690:	4653      	mov	r3, sl
   16692:	6060      	str	r0, [r4, #4]
   16694:	4620      	mov	r0, r4
   16696:	9101      	str	r1, [sp, #4]
   16698:	4641      	mov	r1, r8
   1669a:	f884 6020 	strb.w	r6, [r4, #32]
   1669e:	f000 f875 	bl	1678c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   166a2:	2800      	cmp	r0, #0
   166a4:	d1e1      	bne.n	1666a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   166a6:	f894 2020 	ldrb.w	r2, [r4, #32]
   166aa:	ebab 0109 	sub.w	r1, fp, r9
   166ae:	2000      	movs	r0, #0
   166b0:	46a9      	mov	r9, r5
   166b2:	2a03      	cmp	r2, #3
   166b4:	bf08      	it	eq
   166b6:	2201      	moveq	r2, #1
   166b8:	460e      	mov	r6, r1
   166ba:	e8df f002 	tbb	[pc, r2]
   166be:	0235      	.short	0x0235
   166c0:	0232      	.short	0x0232
   166c2:	2600      	movs	r6, #0
   166c4:	4608      	mov	r0, r1
   166c6:	e02f      	b.n	16728 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   166c8:	0848      	lsrs	r0, r1, #1
   166ca:	3101      	adds	r1, #1
   166cc:	084e      	lsrs	r6, r1, #1
   166ce:	1c45      	adds	r5, r0, #1
   166d0:	3d01      	subs	r5, #1
   166d2:	d007      	beq.n	166e4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   166d4:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   166d8:	6861      	ldr	r1, [r4, #4]
   166da:	6912      	ldr	r2, [r2, #16]
   166dc:	4790      	blx	r2
   166de:	2800      	cmp	r0, #0
   166e0:	d0f6      	beq.n	166d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   166e2:	e7c1      	b.n	16668 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   166e4:	9a02      	ldr	r2, [sp, #8]
   166e6:	4620      	mov	r0, r4
   166e8:	4641      	mov	r1, r8
   166ea:	4653      	mov	r3, sl
   166ec:	f8d4 b004 	ldr.w	fp, [r4, #4]
   166f0:	f000 f84c 	bl	1678c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   166f4:	2800      	cmp	r0, #0
   166f6:	d1b7      	bne.n	16668 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   166f8:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   166fc:	463a      	mov	r2, r7
   166fe:	68cb      	ldr	r3, [r1, #12]
   16700:	4649      	mov	r1, r9
   16702:	4798      	blx	r3
   16704:	2800      	cmp	r0, #0
   16706:	d1af      	bne.n	16668 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   16708:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   1670c:	1c77      	adds	r7, r6, #1
   1670e:	2601      	movs	r6, #1
   16710:	3f01      	subs	r7, #1
   16712:	d02c      	beq.n	1676e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   16714:	6922      	ldr	r2, [r4, #16]
   16716:	4628      	mov	r0, r5
   16718:	4659      	mov	r1, fp
   1671a:	4790      	blx	r2
   1671c:	2800      	cmp	r0, #0
   1671e:	d0f7      	beq.n	16710 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   16720:	e7a3      	b.n	1666a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   16722:	0848      	lsrs	r0, r1, #1
   16724:	3101      	adds	r1, #1
   16726:	084e      	lsrs	r6, r1, #1
   16728:	1c45      	adds	r5, r0, #1
   1672a:	3d01      	subs	r5, #1
   1672c:	d007      	beq.n	1673e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   1672e:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   16732:	6861      	ldr	r1, [r4, #4]
   16734:	6912      	ldr	r2, [r2, #16]
   16736:	4790      	blx	r2
   16738:	2800      	cmp	r0, #0
   1673a:	d0f6      	beq.n	1672a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   1673c:	e794      	b.n	16668 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   1673e:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   16742:	463a      	mov	r2, r7
   16744:	68cb      	ldr	r3, [r1, #12]
   16746:	4649      	mov	r1, r9
   16748:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1674c:	4798      	blx	r3
   1674e:	2800      	cmp	r0, #0
   16750:	f47f af8a 	bne.w	16668 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   16754:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   16758:	1c77      	adds	r7, r6, #1
   1675a:	2601      	movs	r6, #1
   1675c:	3f01      	subs	r7, #1
   1675e:	d00b      	beq.n	16778 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   16760:	692a      	ldr	r2, [r5, #16]
   16762:	4648      	mov	r0, r9
   16764:	4641      	mov	r1, r8
   16766:	4790      	blx	r2
   16768:	2800      	cmp	r0, #0
   1676a:	d0f7      	beq.n	1675c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   1676c:	e77d      	b.n	1666a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   1676e:	2600      	movs	r6, #0
   16770:	4630      	mov	r0, r6
   16772:	b003      	add	sp, #12
   16774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16778:	9801      	ldr	r0, [sp, #4]
   1677a:	2600      	movs	r6, #0
   1677c:	f884 0020 	strb.w	r0, [r4, #32]
   16780:	9802      	ldr	r0, [sp, #8]
   16782:	6060      	str	r0, [r4, #4]
   16784:	4630      	mov	r0, r6
   16786:	b003      	add	sp, #12
   16788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001678c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   1678c:	b570      	push	{r4, r5, r6, lr}
   1678e:	461c      	mov	r4, r3
   16790:	4615      	mov	r5, r2
   16792:	4606      	mov	r6, r0
   16794:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   16798:	d006      	beq.n	167a8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   1679a:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   1679e:	6912      	ldr	r2, [r2, #16]
   167a0:	4790      	blx	r2
   167a2:	b108      	cbz	r0, 167a8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   167a4:	2001      	movs	r0, #1
   167a6:	bd70      	pop	{r4, r5, r6, pc}
   167a8:	b13d      	cbz	r5, 167ba <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   167aa:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   167ae:	4622      	mov	r2, r4
   167b0:	68cb      	ldr	r3, [r1, #12]
   167b2:	4629      	mov	r1, r5
   167b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   167b8:	4718      	bx	r3
   167ba:	2000      	movs	r0, #0
   167bc:	bd70      	pop	{r4, r5, r6, pc}
	...

000167c0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   167c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167c4:	b081      	sub	sp, #4
   167c6:	f8d0 e008 	ldr.w	lr, [r0, #8]
   167ca:	4682      	mov	sl, r0
   167cc:	6900      	ldr	r0, [r0, #16]
   167ce:	4691      	mov	r9, r2
   167d0:	4688      	mov	r8, r1
   167d2:	f1be 0f01 	cmp.w	lr, #1
   167d6:	d111      	bne.n	167fc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   167d8:	2801      	cmp	r0, #1
   167da:	d012      	beq.n	16802 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   167dc:	f1b9 0f00 	cmp.w	r9, #0
   167e0:	f000 80c5 	beq.w	1696e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   167e4:	f1a9 0101 	sub.w	r1, r9, #1
   167e8:	f009 0003 	and.w	r0, r9, #3
   167ec:	2903      	cmp	r1, #3
   167ee:	d267      	bcs.n	168c0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   167f0:	2100      	movs	r1, #0
   167f2:	4642      	mov	r2, r8
   167f4:	2800      	cmp	r0, #0
   167f6:	f040 8083 	bne.w	16900 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   167fa:	e097      	b.n	1692c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   167fc:	2801      	cmp	r0, #1
   167fe:	f040 80bd 	bne.w	1697c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   16802:	f1b9 0f00 	cmp.w	r9, #0
   16806:	d054      	beq.n	168b2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   16808:	f8da 0014 	ldr.w	r0, [sl, #20]
   1680c:	eb08 0109 	add.w	r1, r8, r9
   16810:	2200      	movs	r2, #0
   16812:	4647      	mov	r7, r8
   16814:	1c43      	adds	r3, r0, #1
   16816:	4646      	mov	r6, r8
   16818:	463c      	mov	r4, r7
   1681a:	f914 5b01 	ldrsb.w	r5, [r4], #1
   1681e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   16822:	b2e8      	uxtb	r0, r5
   16824:	dc2e      	bgt.n	16884 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   16826:	428c      	cmp	r4, r1
   16828:	d01a      	beq.n	16860 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   1682a:	787d      	ldrb	r5, [r7, #1]
   1682c:	1cbc      	adds	r4, r7, #2
   1682e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   16832:	4627      	mov	r7, r4
   16834:	f000 0b1f 	and.w	fp, r0, #31
   16838:	28df      	cmp	r0, #223	; 0xdf
   1683a:	d917      	bls.n	1686c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   1683c:	428f      	cmp	r7, r1
   1683e:	d018      	beq.n	16872 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   16840:	f817 4b01 	ldrb.w	r4, [r7], #1
   16844:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   16848:	463c      	mov	r4, r7
   1684a:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   1684e:	28f0      	cmp	r0, #240	; 0xf0
   16850:	d316      	bcc.n	16880 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   16852:	428f      	cmp	r7, r1
   16854:	d020      	beq.n	16898 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   16856:	f817 0b01 	ldrb.w	r0, [r7], #1
   1685a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1685e:	e01d      	b.n	1689c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   16860:	2500      	movs	r5, #0
   16862:	460f      	mov	r7, r1
   16864:	f000 0b1f 	and.w	fp, r0, #31
   16868:	28df      	cmp	r0, #223	; 0xdf
   1686a:	d8e7      	bhi.n	1683c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   1686c:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   16870:	e008      	b.n	16884 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   16872:	f04f 0c00 	mov.w	ip, #0
   16876:	460f      	mov	r7, r1
   16878:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   1687c:	28f0      	cmp	r0, #240	; 0xf0
   1687e:	d2e8      	bcs.n	16852 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   16880:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   16884:	4627      	mov	r7, r4
   16886:	3b01      	subs	r3, #1
   16888:	d065      	beq.n	16956 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   1688a:	1b90      	subs	r0, r2, r6
   1688c:	42b9      	cmp	r1, r7
   1688e:	eb00 0207 	add.w	r2, r0, r7
   16892:	463e      	mov	r6, r7
   16894:	d1c0      	bne.n	16818 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   16896:	e061      	b.n	1695c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   16898:	2000      	movs	r0, #0
   1689a:	4627      	mov	r7, r4
   1689c:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   168a0:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   168a4:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   168a8:	4428      	add	r0, r5
   168aa:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   168ae:	d1ea      	bne.n	16886 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   168b0:	e054      	b.n	1695c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   168b2:	2200      	movs	r2, #0
   168b4:	f1be 0f01 	cmp.w	lr, #1
   168b8:	d054      	beq.n	16964 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   168ba:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   168be:	e062      	b.n	16986 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   168c0:	eba0 0309 	sub.w	r3, r0, r9
   168c4:	2100      	movs	r1, #0
   168c6:	4642      	mov	r2, r8
   168c8:	7817      	ldrb	r7, [r2, #0]
   168ca:	7856      	ldrb	r6, [r2, #1]
   168cc:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   168d0:	7895      	ldrb	r5, [r2, #2]
   168d2:	78d4      	ldrb	r4, [r2, #3]
   168d4:	2f80      	cmp	r7, #128	; 0x80
   168d6:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   168da:	bf08      	it	eq
   168dc:	3101      	addeq	r1, #1
   168de:	2f80      	cmp	r7, #128	; 0x80
   168e0:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   168e4:	bf08      	it	eq
   168e6:	3101      	addeq	r1, #1
   168e8:	2f80      	cmp	r7, #128	; 0x80
   168ea:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   168ee:	bf08      	it	eq
   168f0:	3101      	addeq	r1, #1
   168f2:	2f80      	cmp	r7, #128	; 0x80
   168f4:	bf08      	it	eq
   168f6:	3101      	addeq	r1, #1
   168f8:	3204      	adds	r2, #4
   168fa:	3304      	adds	r3, #4
   168fc:	d1e4      	bne.n	168c8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   168fe:	b1a8      	cbz	r0, 1692c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   16900:	7813      	ldrb	r3, [r2, #0]
   16902:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16906:	2b80      	cmp	r3, #128	; 0x80
   16908:	bf08      	it	eq
   1690a:	3101      	addeq	r1, #1
   1690c:	2801      	cmp	r0, #1
   1690e:	d00d      	beq.n	1692c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   16910:	7853      	ldrb	r3, [r2, #1]
   16912:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16916:	2b80      	cmp	r3, #128	; 0x80
   16918:	bf08      	it	eq
   1691a:	3101      	addeq	r1, #1
   1691c:	2802      	cmp	r0, #2
   1691e:	d005      	beq.n	1692c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   16920:	7890      	ldrb	r0, [r2, #2]
   16922:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   16926:	2880      	cmp	r0, #128	; 0x80
   16928:	bf08      	it	eq
   1692a:	3101      	addeq	r1, #1
   1692c:	f8da 000c 	ldr.w	r0, [sl, #12]
   16930:	eba9 0101 	sub.w	r1, r9, r1
   16934:	4281      	cmp	r1, r0
   16936:	d221      	bcs.n	1697c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   16938:	f1b9 0f00 	cmp.w	r9, #0
   1693c:	d029      	beq.n	16992 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   1693e:	f1a9 0101 	sub.w	r1, r9, #1
   16942:	f009 0c03 	and.w	ip, r9, #3
   16946:	2903      	cmp	r1, #3
   16948:	d225      	bcs.n	16996 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   1694a:	2100      	movs	r1, #0
   1694c:	4643      	mov	r3, r8
   1694e:	f1bc 0f00 	cmp.w	ip, #0
   16952:	d142      	bne.n	169da <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   16954:	e059      	b.n	16a0a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   16956:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   1695a:	d167      	bne.n	16a2c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   1695c:	464a      	mov	r2, r9
   1695e:	f1be 0f01 	cmp.w	lr, #1
   16962:	d1aa      	bne.n	168ba <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   16964:	4691      	mov	r9, r2
   16966:	f1b9 0f00 	cmp.w	r9, #0
   1696a:	f47f af3b 	bne.w	167e4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   1696e:	2100      	movs	r1, #0
   16970:	f8da 000c 	ldr.w	r0, [sl, #12]
   16974:	eba9 0101 	sub.w	r1, r9, r1
   16978:	4281      	cmp	r1, r0
   1697a:	d3dd      	bcc.n	16938 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   1697c:	f8da 101c 	ldr.w	r1, [sl, #28]
   16980:	464a      	mov	r2, r9
   16982:	f8da 0018 	ldr.w	r0, [sl, #24]
   16986:	68cb      	ldr	r3, [r1, #12]
   16988:	4641      	mov	r1, r8
   1698a:	b001      	add	sp, #4
   1698c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16990:	4718      	bx	r3
   16992:	2100      	movs	r1, #0
   16994:	e039      	b.n	16a0a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   16996:	ebac 0709 	sub.w	r7, ip, r9
   1699a:	2100      	movs	r1, #0
   1699c:	4643      	mov	r3, r8
   1699e:	781e      	ldrb	r6, [r3, #0]
   169a0:	785d      	ldrb	r5, [r3, #1]
   169a2:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   169a6:	789c      	ldrb	r4, [r3, #2]
   169a8:	78da      	ldrb	r2, [r3, #3]
   169aa:	2e80      	cmp	r6, #128	; 0x80
   169ac:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   169b0:	bf08      	it	eq
   169b2:	3101      	addeq	r1, #1
   169b4:	2e80      	cmp	r6, #128	; 0x80
   169b6:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   169ba:	bf08      	it	eq
   169bc:	3101      	addeq	r1, #1
   169be:	2e80      	cmp	r6, #128	; 0x80
   169c0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   169c4:	bf08      	it	eq
   169c6:	3101      	addeq	r1, #1
   169c8:	2a80      	cmp	r2, #128	; 0x80
   169ca:	bf08      	it	eq
   169cc:	3101      	addeq	r1, #1
   169ce:	3304      	adds	r3, #4
   169d0:	3704      	adds	r7, #4
   169d2:	d1e4      	bne.n	1699e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   169d4:	f1bc 0f00 	cmp.w	ip, #0
   169d8:	d017      	beq.n	16a0a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   169da:	781a      	ldrb	r2, [r3, #0]
   169dc:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   169e0:	2a80      	cmp	r2, #128	; 0x80
   169e2:	bf08      	it	eq
   169e4:	3101      	addeq	r1, #1
   169e6:	f1bc 0f01 	cmp.w	ip, #1
   169ea:	d00e      	beq.n	16a0a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   169ec:	785a      	ldrb	r2, [r3, #1]
   169ee:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   169f2:	2a80      	cmp	r2, #128	; 0x80
   169f4:	bf08      	it	eq
   169f6:	3101      	addeq	r1, #1
   169f8:	f1bc 0f02 	cmp.w	ip, #2
   169fc:	d005      	beq.n	16a0a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   169fe:	789a      	ldrb	r2, [r3, #2]
   16a00:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   16a04:	2a80      	cmp	r2, #128	; 0x80
   16a06:	bf08      	it	eq
   16a08:	3101      	addeq	r1, #1
   16a0a:	f89a 3020 	ldrb.w	r3, [sl, #32]
   16a0e:	eba1 0109 	sub.w	r1, r1, r9
   16a12:	4401      	add	r1, r0
   16a14:	2000      	movs	r0, #0
   16a16:	1eda      	subs	r2, r3, #3
   16a18:	bf18      	it	ne
   16a1a:	461a      	movne	r2, r3
   16a1c:	460e      	mov	r6, r1
   16a1e:	e8df f002 	tbb	[pc, r2]
   16a22:	0216      	.short	0x0216
   16a24:	0213      	.short	0x0213
   16a26:	2600      	movs	r6, #0
   16a28:	4608      	mov	r0, r1
   16a2a:	e010      	b.n	16a4e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   16a2c:	2a00      	cmp	r2, #0
   16a2e:	bf18      	it	ne
   16a30:	454a      	cmpne	r2, r9
   16a32:	d134      	bne.n	16a9e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   16a34:	4640      	mov	r0, r8
   16a36:	2800      	cmp	r0, #0
   16a38:	bf0c      	ite	eq
   16a3a:	464a      	moveq	r2, r9
   16a3c:	4680      	movne	r8, r0
   16a3e:	f1be 0f01 	cmp.w	lr, #1
   16a42:	f43f af8f 	beq.w	16964 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   16a46:	e738      	b.n	168ba <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   16a48:	0848      	lsrs	r0, r1, #1
   16a4a:	3101      	adds	r1, #1
   16a4c:	084e      	lsrs	r6, r1, #1
   16a4e:	1c44      	adds	r4, r0, #1
   16a50:	3c01      	subs	r4, #1
   16a52:	d008      	beq.n	16a66 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   16a54:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   16a58:	f8da 1004 	ldr.w	r1, [sl, #4]
   16a5c:	6912      	ldr	r2, [r2, #16]
   16a5e:	4790      	blx	r2
   16a60:	2800      	cmp	r0, #0
   16a62:	d0f5      	beq.n	16a50 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   16a64:	e013      	b.n	16a8e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   16a66:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   16a6a:	464a      	mov	r2, r9
   16a6c:	68cb      	ldr	r3, [r1, #12]
   16a6e:	4641      	mov	r1, r8
   16a70:	f8da 7004 	ldr.w	r7, [sl, #4]
   16a74:	4798      	blx	r3
   16a76:	b950      	cbnz	r0, 16a8e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   16a78:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   16a7c:	3601      	adds	r6, #1
   16a7e:	3e01      	subs	r6, #1
   16a80:	d009      	beq.n	16a96 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   16a82:	692a      	ldr	r2, [r5, #16]
   16a84:	4620      	mov	r0, r4
   16a86:	4639      	mov	r1, r7
   16a88:	4790      	blx	r2
   16a8a:	2800      	cmp	r0, #0
   16a8c:	d0f7      	beq.n	16a7e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   16a8e:	2001      	movs	r0, #1
   16a90:	b001      	add	sp, #4
   16a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a96:	2000      	movs	r0, #0
   16a98:	b001      	add	sp, #4
   16a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a9e:	454a      	cmp	r2, r9
   16aa0:	d204      	bcs.n	16aac <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   16aa2:	f918 0002 	ldrsb.w	r0, [r8, r2]
   16aa6:	f110 0f40 	cmn.w	r0, #64	; 0x40
   16aaa:	dac3      	bge.n	16a34 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   16aac:	2000      	movs	r0, #0
   16aae:	2200      	movs	r2, #0
   16ab0:	2800      	cmp	r0, #0
   16ab2:	bf0c      	ite	eq
   16ab4:	464a      	moveq	r2, r9
   16ab6:	4680      	movne	r8, r0
   16ab8:	f1be 0f01 	cmp.w	lr, #1
   16abc:	f43f af52 	beq.w	16964 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   16ac0:	e6fb      	b.n	168ba <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

00016ac2 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   16ac2:	7800      	ldrb	r0, [r0, #0]
   16ac4:	f3c0 1000 	ubfx	r0, r0, #4, #1
   16ac8:	4770      	bx	lr

00016aca <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   16aca:	7800      	ldrb	r0, [r0, #0]
   16acc:	f3c0 1040 	ubfx	r0, r0, #5, #1
   16ad0:	4770      	bx	lr

00016ad2 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   16ad2:	b570      	push	{r4, r5, r6, lr}
   16ad4:	460d      	mov	r5, r1
   16ad6:	4606      	mov	r6, r0
   16ad8:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16adc:	461c      	mov	r4, r3
   16ade:	68cb      	ldr	r3, [r1, #12]
   16ae0:	4611      	mov	r1, r2
   16ae2:	4622      	mov	r2, r4
   16ae4:	4798      	blx	r3
   16ae6:	7230      	strb	r0, [r6, #8]
   16ae8:	fab4 f084 	clz	r0, r4
   16aec:	0940      	lsrs	r0, r0, #5
   16aee:	7270      	strb	r0, [r6, #9]
   16af0:	2000      	movs	r0, #0
   16af2:	e9c6 5000 	strd	r5, r0, [r6]
   16af6:	bd70      	pop	{r4, r5, r6, pc}

00016af8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   16af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16afc:	b085      	sub	sp, #20
   16afe:	460c      	mov	r4, r1
   16b00:	4605      	mov	r5, r0
   16b02:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16b06:	690a      	ldr	r2, [r1, #16]
   16b08:	2127      	movs	r1, #39	; 0x27
   16b0a:	4790      	blx	r2
   16b0c:	b118      	cbz	r0, 16b16 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   16b0e:	2001      	movs	r0, #1
   16b10:	b005      	add	sp, #20
   16b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16b16:	6829      	ldr	r1, [r5, #0]
   16b18:	a801      	add	r0, sp, #4
   16b1a:	2201      	movs	r2, #1
   16b1c:	f7ff f878 	bl	15c10 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   16b20:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   16b24:	f04f 091c 	mov.w	r9, #28
   16b28:	f8dd 800c 	ldr.w	r8, [sp, #12]
   16b2c:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   16b30:	f89d 6010 	ldrb.w	r6, [sp, #16]
   16b34:	d139      	bne.n	16baa <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   16b36:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   16b3a:	2f02      	cmp	r7, #2
   16b3c:	f0c0 806b 	bcc.w	16c16 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   16b40:	d00c      	beq.n	16b5c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   16b42:	b2f0      	uxtb	r0, r6
   16b44:	2604      	movs	r6, #4
   16b46:	2703      	movs	r7, #3
   16b48:	215c      	movs	r1, #92	; 0x5c
   16b4a:	e8df f000 	tbb	[pc, r0]
   16b4e:	0364      	.short	0x0364
   16b50:	09242010 	.word	0x09242010
   16b54:	2600      	movs	r6, #0
   16b56:	2703      	movs	r7, #3
   16b58:	217d      	movs	r1, #125	; 0x7d
   16b5a:	e001      	b.n	16b60 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   16b5c:	2701      	movs	r7, #1
   16b5e:	215c      	movs	r1, #92	; 0x5c
   16b60:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   16b64:	6912      	ldr	r2, [r2, #16]
   16b66:	4790      	blx	r2
   16b68:	2800      	cmp	r0, #0
   16b6a:	d0e6      	beq.n	16b3a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   16b6c:	e7cf      	b.n	16b0e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   16b6e:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   16b72:	2602      	movs	r6, #2
   16b74:	2703      	movs	r7, #3
   16b76:	f1b8 0f00 	cmp.w	r8, #0
   16b7a:	fa25 f100 	lsr.w	r1, r5, r0
   16b7e:	bf08      	it	eq
   16b80:	2601      	moveq	r6, #1
   16b82:	bf18      	it	ne
   16b84:	f1a8 0801 	subne.w	r8, r8, #1
   16b88:	f367 111f 	bfi	r1, r7, #4, #28
   16b8c:	e7e8      	b.n	16b60 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   16b8e:	2602      	movs	r6, #2
   16b90:	2703      	movs	r7, #3
   16b92:	217b      	movs	r1, #123	; 0x7b
   16b94:	e7e4      	b.n	16b60 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   16b96:	2703      	movs	r7, #3
   16b98:	2175      	movs	r1, #117	; 0x75
   16b9a:	2603      	movs	r6, #3
   16b9c:	e7e0      	b.n	16b60 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   16b9e:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   16ba2:	6912      	ldr	r2, [r2, #16]
   16ba4:	4790      	blx	r2
   16ba6:	2800      	cmp	r0, #0
   16ba8:	d1b1      	bne.n	16b0e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   16baa:	4638      	mov	r0, r7
   16bac:	2701      	movs	r7, #1
   16bae:	215c      	movs	r1, #92	; 0x5c
   16bb0:	e8df f000 	tbb	[pc, r0]
   16bb4:	06020331 	.word	0x06020331
   16bb8:	e7f1      	b.n	16b9e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16bba:	2700      	movs	r7, #0
   16bbc:	4629      	mov	r1, r5
   16bbe:	e7ee      	b.n	16b9e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16bc0:	b2f0      	uxtb	r0, r6
   16bc2:	2604      	movs	r6, #4
   16bc4:	2703      	movs	r7, #3
   16bc6:	215c      	movs	r1, #92	; 0x5c
   16bc8:	e8df f000 	tbb	[pc, r0]
   16bcc:	1d080425 	.word	0x1d080425
   16bd0:	0321      	.short	0x0321
   16bd2:	e7e4      	b.n	16b9e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16bd4:	2600      	movs	r6, #0
   16bd6:	2703      	movs	r7, #3
   16bd8:	217d      	movs	r1, #125	; 0x7d
   16bda:	e7e0      	b.n	16b9e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16bdc:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   16be0:	2602      	movs	r6, #2
   16be2:	2703      	movs	r7, #3
   16be4:	fa25 f000 	lsr.w	r0, r5, r0
   16be8:	f000 000f 	and.w	r0, r0, #15
   16bec:	f100 0157 	add.w	r1, r0, #87	; 0x57
   16bf0:	280a      	cmp	r0, #10
   16bf2:	bf38      	it	cc
   16bf4:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   16bf8:	f1b8 0f00 	cmp.w	r8, #0
   16bfc:	bf0c      	ite	eq
   16bfe:	2601      	moveq	r6, #1
   16c00:	f1a8 0801 	subne.w	r8, r8, #1
   16c04:	e7cb      	b.n	16b9e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16c06:	2602      	movs	r6, #2
   16c08:	2703      	movs	r7, #3
   16c0a:	217b      	movs	r1, #123	; 0x7b
   16c0c:	e7c7      	b.n	16b9e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16c0e:	2703      	movs	r7, #3
   16c10:	2175      	movs	r1, #117	; 0x75
   16c12:	2603      	movs	r6, #3
   16c14:	e7c3      	b.n	16b9e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16c16:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   16c1a:	690a      	ldr	r2, [r1, #16]
   16c1c:	2127      	movs	r1, #39	; 0x27
   16c1e:	b005      	add	sp, #20
   16c20:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16c24:	4710      	bx	r2

00016c26 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   16c26:	b08c      	sub	sp, #48	; 0x30
   16c28:	e9cd 0100 	strd	r0, r1, [sp]
   16c2c:	2002      	movs	r0, #2
   16c2e:	a908      	add	r1, sp, #32
   16c30:	9007      	str	r0, [sp, #28]
   16c32:	9106      	str	r1, [sp, #24]
   16c34:	2100      	movs	r1, #0
   16c36:	9105      	str	r1, [sp, #20]
   16c38:	e9cd 0103 	strd	r0, r1, [sp, #12]
   16c3c:	f645 3060 	movw	r0, #23392	; 0x5b60
   16c40:	f2c0 0002 	movt	r0, #2
   16c44:	a901      	add	r1, sp, #4
   16c46:	9002      	str	r0, [sp, #8]
   16c48:	f647 1073 	movw	r0, #31091	; 0x7973
   16c4c:	f2c0 0001 	movt	r0, #1
   16c50:	900b      	str	r0, [sp, #44]	; 0x2c
   16c52:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   16c56:	4668      	mov	r0, sp
   16c58:	f645 3170 	movw	r1, #23408	; 0x5b70
   16c5c:	9008      	str	r0, [sp, #32]
   16c5e:	a802      	add	r0, sp, #8
   16c60:	f2c0 0102 	movt	r1, #2
   16c64:	f7ff f8c2 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16c68:	defe      	udf	#254	; 0xfe

00016c6a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   16c6a:	b08c      	sub	sp, #48	; 0x30
   16c6c:	e9cd 0100 	strd	r0, r1, [sp]
   16c70:	2002      	movs	r0, #2
   16c72:	a908      	add	r1, sp, #32
   16c74:	9007      	str	r0, [sp, #28]
   16c76:	9106      	str	r1, [sp, #24]
   16c78:	2100      	movs	r1, #0
   16c7a:	9105      	str	r1, [sp, #20]
   16c7c:	e9cd 0103 	strd	r0, r1, [sp, #12]
   16c80:	f645 30a4 	movw	r0, #23460	; 0x5ba4
   16c84:	f2c0 0002 	movt	r0, #2
   16c88:	a901      	add	r1, sp, #4
   16c8a:	9002      	str	r0, [sp, #8]
   16c8c:	f647 1073 	movw	r0, #31091	; 0x7973
   16c90:	f2c0 0001 	movt	r0, #1
   16c94:	900b      	str	r0, [sp, #44]	; 0x2c
   16c96:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   16c9a:	4668      	mov	r0, sp
   16c9c:	f645 31b4 	movw	r1, #23476	; 0x5bb4
   16ca0:	9008      	str	r0, [sp, #32]
   16ca2:	a802      	add	r0, sp, #8
   16ca4:	f2c0 0102 	movt	r1, #2
   16ca8:	f7ff f8a0 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16cac:	defe      	udf	#254	; 0xfe

00016cae <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   16cae:	b09a      	sub	sp, #104	; 0x68
   16cb0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   16cb4:	e9cd 2300 	strd	r2, r3, [sp]
   16cb8:	d802      	bhi.n	16cc0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   16cba:	2501      	movs	r5, #1
   16cbc:	468c      	mov	ip, r1
   16cbe:	e03e      	b.n	16d3e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   16cc0:	f1c1 0e00 	rsb	lr, r1, #0
   16cc4:	f44f 7c80 	mov.w	ip, #256	; 0x100
   16cc8:	458c      	cmp	ip, r1
   16cca:	d205      	bcs.n	16cd8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   16ccc:	f910 400c 	ldrsb.w	r4, [r0, ip]
   16cd0:	f114 0f41 	cmn.w	r4, #65	; 0x41
   16cd4:	f300 8108 	bgt.w	16ee8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   16cd8:	eb0e 040c 	add.w	r4, lr, ip
   16cdc:	f1ac 0601 	sub.w	r6, ip, #1
   16ce0:	2c01      	cmp	r4, #1
   16ce2:	d02a      	beq.n	16d3a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16ce4:	428e      	cmp	r6, r1
   16ce6:	d206      	bcs.n	16cf6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   16ce8:	eb00 050c 	add.w	r5, r0, ip
   16cec:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   16cf0:	f115 0f41 	cmn.w	r5, #65	; 0x41
   16cf4:	dc21      	bgt.n	16d3a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16cf6:	f1ac 0602 	sub.w	r6, ip, #2
   16cfa:	2c02      	cmp	r4, #2
   16cfc:	d01d      	beq.n	16d3a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16cfe:	428e      	cmp	r6, r1
   16d00:	d206      	bcs.n	16d10 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   16d02:	eb00 050c 	add.w	r5, r0, ip
   16d06:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   16d0a:	f115 0f41 	cmn.w	r5, #65	; 0x41
   16d0e:	dc14      	bgt.n	16d3a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16d10:	f1ac 0603 	sub.w	r6, ip, #3
   16d14:	2c03      	cmp	r4, #3
   16d16:	d010      	beq.n	16d3a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16d18:	428e      	cmp	r6, r1
   16d1a:	d206      	bcs.n	16d2a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   16d1c:	eb00 050c 	add.w	r5, r0, ip
   16d20:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   16d24:	f115 0f41 	cmn.w	r5, #65	; 0x41
   16d28:	dc07      	bgt.n	16d3a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16d2a:	f1bc 0c04 	subs.w	ip, ip, #4
   16d2e:	f04f 0500 	mov.w	r5, #0
   16d32:	d004      	beq.n	16d3e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   16d34:	2c04      	cmp	r4, #4
   16d36:	d1c7      	bne.n	16cc8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   16d38:	e001      	b.n	16d3e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   16d3a:	2500      	movs	r5, #0
   16d3c:	46b4      	mov	ip, r6
   16d3e:	2605      	movs	r6, #5
   16d40:	2d00      	cmp	r5, #0
   16d42:	f645 4582 	movw	r5, #23682	; 0x5c82
   16d46:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   16d4a:	bf18      	it	ne
   16d4c:	2600      	movne	r6, #0
   16d4e:	9605      	str	r6, [sp, #20]
   16d50:	f245 76d4 	movw	r6, #22484	; 0x57d4
   16d54:	f2c0 0502 	movt	r5, #2
   16d58:	f2c0 0602 	movt	r6, #2
   16d5c:	bf18      	it	ne
   16d5e:	4635      	movne	r5, r6
   16d60:	428a      	cmp	r2, r1
   16d62:	9504      	str	r5, [sp, #16]
   16d64:	bf98      	it	ls
   16d66:	428b      	cmpls	r3, r1
   16d68:	d92a      	bls.n	16dc0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   16d6a:	428a      	cmp	r2, r1
   16d6c:	f04f 0003 	mov.w	r0, #3
   16d70:	a910      	add	r1, sp, #64	; 0x40
   16d72:	bf88      	it	hi
   16d74:	4613      	movhi	r3, r2
   16d76:	900f      	str	r0, [sp, #60]	; 0x3c
   16d78:	910e      	str	r1, [sp, #56]	; 0x38
   16d7a:	2100      	movs	r1, #0
   16d7c:	910d      	str	r1, [sp, #52]	; 0x34
   16d7e:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   16d82:	f645 40a8 	movw	r0, #23720	; 0x5ca8
   16d86:	f2c0 0002 	movt	r0, #2
   16d8a:	a904      	add	r1, sp, #16
   16d8c:	900a      	str	r0, [sp, #40]	; 0x28
   16d8e:	f647 2061 	movw	r0, #31329	; 0x7a61
   16d92:	f2c0 0001 	movt	r0, #1
   16d96:	9308      	str	r3, [sp, #32]
   16d98:	9015      	str	r0, [sp, #84]	; 0x54
   16d9a:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   16d9e:	a802      	add	r0, sp, #8
   16da0:	f645 41c0 	movw	r1, #23744	; 0x5cc0
   16da4:	9012      	str	r0, [sp, #72]	; 0x48
   16da6:	f647 1073 	movw	r0, #31091	; 0x7973
   16daa:	f2c0 0102 	movt	r1, #2
   16dae:	f2c0 0001 	movt	r0, #1
   16db2:	9011      	str	r0, [sp, #68]	; 0x44
   16db4:	a808      	add	r0, sp, #32
   16db6:	9010      	str	r0, [sp, #64]	; 0x40
   16db8:	a80a      	add	r0, sp, #40	; 0x28
   16dba:	f7ff f817 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16dbe:	defe      	udf	#254	; 0xfe
   16dc0:	429a      	cmp	r2, r3
   16dc2:	f200 80f1 	bhi.w	16fa8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   16dc6:	2a00      	cmp	r2, #0
   16dc8:	bf18      	it	ne
   16dca:	4291      	cmpne	r1, r2
   16dcc:	d109      	bne.n	16de2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   16dce:	461a      	mov	r2, r3
   16dd0:	2a00      	cmp	r2, #0
   16dd2:	9206      	str	r2, [sp, #24]
   16dd4:	bf18      	it	ne
   16dd6:	428a      	cmpne	r2, r1
   16dd8:	d10e      	bne.n	16df8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   16dda:	4613      	mov	r3, r2
   16ddc:	428b      	cmp	r3, r1
   16dde:	d047      	beq.n	16e70 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   16de0:	e052      	b.n	16e88 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   16de2:	d9f5      	bls.n	16dd0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   16de4:	5686      	ldrsb	r6, [r0, r2]
   16de6:	f116 0f40 	cmn.w	r6, #64	; 0x40
   16dea:	bfa8      	it	ge
   16dec:	461a      	movge	r2, r3
   16dee:	2a00      	cmp	r2, #0
   16df0:	9206      	str	r2, [sp, #24]
   16df2:	bf18      	it	ne
   16df4:	428a      	cmpne	r2, r1
   16df6:	d0f0      	beq.n	16dda <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   16df8:	f1a0 0c01 	sub.w	ip, r0, #1
   16dfc:	f101 0e02 	add.w	lr, r1, #2
   16e00:	1ccc      	adds	r4, r1, #3
   16e02:	1c4d      	adds	r5, r1, #1
   16e04:	1d0e      	adds	r6, r1, #4
   16e06:	428a      	cmp	r2, r1
   16e08:	d206      	bcs.n	16e18 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   16e0a:	eb0c 0302 	add.w	r3, ip, r2
   16e0e:	f993 3001 	ldrsb.w	r3, [r3, #1]
   16e12:	f113 0f41 	cmn.w	r3, #65	; 0x41
   16e16:	dce0      	bgt.n	16dda <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   16e18:	1e53      	subs	r3, r2, #1
   16e1a:	bf18      	it	ne
   16e1c:	4295      	cmpne	r5, r2
   16e1e:	d025      	beq.n	16e6c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16e20:	428b      	cmp	r3, r1
   16e22:	d204      	bcs.n	16e2e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   16e24:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   16e28:	f117 0f41 	cmn.w	r7, #65	; 0x41
   16e2c:	dc1e      	bgt.n	16e6c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16e2e:	1e93      	subs	r3, r2, #2
   16e30:	bf18      	it	ne
   16e32:	4596      	cmpne	lr, r2
   16e34:	d01a      	beq.n	16e6c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16e36:	428b      	cmp	r3, r1
   16e38:	d206      	bcs.n	16e48 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   16e3a:	eb0c 0702 	add.w	r7, ip, r2
   16e3e:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   16e42:	f117 0f41 	cmn.w	r7, #65	; 0x41
   16e46:	dc11      	bgt.n	16e6c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16e48:	1ed3      	subs	r3, r2, #3
   16e4a:	bf18      	it	ne
   16e4c:	4294      	cmpne	r4, r2
   16e4e:	d00d      	beq.n	16e6c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16e50:	428b      	cmp	r3, r1
   16e52:	d206      	bcs.n	16e62 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   16e54:	eb0c 0702 	add.w	r7, ip, r2
   16e58:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   16e5c:	f117 0f41 	cmn.w	r7, #65	; 0x41
   16e60:	dc04      	bgt.n	16e6c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16e62:	1f13      	subs	r3, r2, #4
   16e64:	d002      	beq.n	16e6c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16e66:	4296      	cmp	r6, r2
   16e68:	461a      	mov	r2, r3
   16e6a:	d1cc      	bne.n	16e06 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   16e6c:	428b      	cmp	r3, r1
   16e6e:	d10b      	bne.n	16e88 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   16e70:	f645 1070 	movw	r0, #22896	; 0x5970
   16e74:	f645 5210 	movw	r2, #23824	; 0x5d10
   16e78:	f2c0 0002 	movt	r0, #2
   16e7c:	f2c0 0202 	movt	r2, #2
   16e80:	212b      	movs	r1, #43	; 0x2b
   16e82:	f7fe ff7d 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16e86:	defe      	udf	#254	; 0xfe
   16e88:	18c5      	adds	r5, r0, r3
   16e8a:	462e      	mov	r6, r5
   16e8c:	f916 4b01 	ldrsb.w	r4, [r6], #1
   16e90:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   16e94:	b2e2      	uxtb	r2, r4
   16e96:	dd02      	ble.n	16e9e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   16e98:	9207      	str	r2, [sp, #28]
   16e9a:	2101      	movs	r1, #1
   16e9c:	e04d      	b.n	16f3a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   16e9e:	4408      	add	r0, r1
   16ea0:	4286      	cmp	r6, r0
   16ea2:	d10b      	bne.n	16ebc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   16ea4:	2500      	movs	r5, #0
   16ea6:	4606      	mov	r6, r0
   16ea8:	f002 011f 	and.w	r1, r2, #31
   16eac:	2adf      	cmp	r2, #223	; 0xdf
   16eae:	d80d      	bhi.n	16ecc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   16eb0:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   16eb4:	2880      	cmp	r0, #128	; 0x80
   16eb6:	9007      	str	r0, [sp, #28]
   16eb8:	d333      	bcc.n	16f22 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   16eba:	e034      	b.n	16f26 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   16ebc:	7869      	ldrb	r1, [r5, #1]
   16ebe:	1cae      	adds	r6, r5, #2
   16ec0:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   16ec4:	f002 011f 	and.w	r1, r2, #31
   16ec8:	2adf      	cmp	r2, #223	; 0xdf
   16eca:	d9f1      	bls.n	16eb0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   16ecc:	4286      	cmp	r6, r0
   16ece:	d10d      	bne.n	16eec <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   16ed0:	2400      	movs	r4, #0
   16ed2:	4606      	mov	r6, r0
   16ed4:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   16ed8:	2af0      	cmp	r2, #240	; 0xf0
   16eda:	d20f      	bcs.n	16efc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   16edc:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   16ee0:	2880      	cmp	r0, #128	; 0x80
   16ee2:	9007      	str	r0, [sp, #28]
   16ee4:	d31d      	bcc.n	16f22 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   16ee6:	e01e      	b.n	16f26 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   16ee8:	2500      	movs	r5, #0
   16eea:	e728      	b.n	16d3e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   16eec:	f816 4b01 	ldrb.w	r4, [r6], #1
   16ef0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   16ef4:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   16ef8:	2af0      	cmp	r2, #240	; 0xf0
   16efa:	d3ef      	bcc.n	16edc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   16efc:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   16f00:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   16f04:	4286      	cmp	r6, r0
   16f06:	bf1a      	itte	ne
   16f08:	7830      	ldrbne	r0, [r6, #0]
   16f0a:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   16f0e:	2000      	moveq	r0, #0
   16f10:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   16f14:	4408      	add	r0, r1
   16f16:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   16f1a:	d0a9      	beq.n	16e70 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   16f1c:	2880      	cmp	r0, #128	; 0x80
   16f1e:	9007      	str	r0, [sp, #28]
   16f20:	d201      	bcs.n	16f26 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   16f22:	2101      	movs	r1, #1
   16f24:	e009      	b.n	16f3a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   16f26:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   16f2a:	d201      	bcs.n	16f30 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   16f2c:	2102      	movs	r1, #2
   16f2e:	e004      	b.n	16f3a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   16f30:	2104      	movs	r1, #4
   16f32:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   16f36:	bf38      	it	cc
   16f38:	2103      	movcc	r1, #3
   16f3a:	4419      	add	r1, r3
   16f3c:	aa10      	add	r2, sp, #64	; 0x40
   16f3e:	a808      	add	r0, sp, #32
   16f40:	e9cd 3108 	strd	r3, r1, [sp, #32]
   16f44:	2105      	movs	r1, #5
   16f46:	910f      	str	r1, [sp, #60]	; 0x3c
   16f48:	920e      	str	r2, [sp, #56]	; 0x38
   16f4a:	2200      	movs	r2, #0
   16f4c:	920d      	str	r2, [sp, #52]	; 0x34
   16f4e:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   16f52:	f645 514c 	movw	r1, #23884	; 0x5d4c
   16f56:	f2c0 0102 	movt	r1, #2
   16f5a:	aa04      	add	r2, sp, #16
   16f5c:	910a      	str	r1, [sp, #40]	; 0x28
   16f5e:	f647 2161 	movw	r1, #31329	; 0x7a61
   16f62:	f2c0 0101 	movt	r1, #1
   16f66:	9119      	str	r1, [sp, #100]	; 0x64
   16f68:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   16f6c:	a902      	add	r1, sp, #8
   16f6e:	9116      	str	r1, [sp, #88]	; 0x58
   16f70:	f645 31b1 	movw	r1, #23473	; 0x5bb1
   16f74:	f2c0 0101 	movt	r1, #1
   16f78:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   16f7c:	f646 20f9 	movw	r0, #27385	; 0x6af9
   16f80:	f2c0 0001 	movt	r0, #1
   16f84:	f645 5174 	movw	r1, #23924	; 0x5d74
   16f88:	9013      	str	r0, [sp, #76]	; 0x4c
   16f8a:	a807      	add	r0, sp, #28
   16f8c:	9012      	str	r0, [sp, #72]	; 0x48
   16f8e:	f647 1073 	movw	r0, #31091	; 0x7973
   16f92:	f2c0 0001 	movt	r0, #1
   16f96:	f2c0 0102 	movt	r1, #2
   16f9a:	9011      	str	r0, [sp, #68]	; 0x44
   16f9c:	a806      	add	r0, sp, #24
   16f9e:	9010      	str	r0, [sp, #64]	; 0x40
   16fa0:	a80a      	add	r0, sp, #40	; 0x28
   16fa2:	f7fe ff23 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16fa6:	defe      	udf	#254	; 0xfe
   16fa8:	2004      	movs	r0, #4
   16faa:	a910      	add	r1, sp, #64	; 0x40
   16fac:	900f      	str	r0, [sp, #60]	; 0x3c
   16fae:	910e      	str	r1, [sp, #56]	; 0x38
   16fb0:	2100      	movs	r1, #0
   16fb2:	910d      	str	r1, [sp, #52]	; 0x34
   16fb4:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   16fb8:	f645 40e0 	movw	r0, #23776	; 0x5ce0
   16fbc:	f2c0 0002 	movt	r0, #2
   16fc0:	a904      	add	r1, sp, #16
   16fc2:	900a      	str	r0, [sp, #40]	; 0x28
   16fc4:	f647 2061 	movw	r0, #31329	; 0x7a61
   16fc8:	f2c0 0001 	movt	r0, #1
   16fcc:	9017      	str	r0, [sp, #92]	; 0x5c
   16fce:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   16fd2:	a802      	add	r0, sp, #8
   16fd4:	9014      	str	r0, [sp, #80]	; 0x50
   16fd6:	f647 1073 	movw	r0, #31091	; 0x7973
   16fda:	a901      	add	r1, sp, #4
   16fdc:	f2c0 0001 	movt	r0, #1
   16fe0:	9013      	str	r0, [sp, #76]	; 0x4c
   16fe2:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   16fe6:	f645 5100 	movw	r1, #23808	; 0x5d00
   16fea:	4668      	mov	r0, sp
   16fec:	f2c0 0102 	movt	r1, #2
   16ff0:	9010      	str	r0, [sp, #64]	; 0x40
   16ff2:	a80a      	add	r0, sp, #40	; 0x28
   16ff4:	f7fe fefa 	bl	15dec <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16ff8:	defe      	udf	#254	; 0xfe

00016ffa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   16ffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ffe:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   17002:	d270      	bcs.n	170e6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   17004:	f645 5e94 	movw	lr, #23956	; 0x5d94
   17008:	f645 58e6 	movw	r8, #24038	; 0x5de6
   1700c:	fa1f f980 	uxth.w	r9, r0
   17010:	f2c0 0e02 	movt	lr, #2
   17014:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   17018:	f04f 0a00 	mov.w	sl, #0
   1701c:	f2c0 0802 	movt	r8, #2
   17020:	4675      	mov	r5, lr
   17022:	786e      	ldrb	r6, [r5, #1]
   17024:	4652      	mov	r2, sl
   17026:	782b      	ldrb	r3, [r5, #0]
   17028:	3502      	adds	r5, #2
   1702a:	44b2      	add	sl, r6
   1702c:	4563      	cmp	r3, ip
   1702e:	d129      	bne.n	17084 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   17030:	4592      	cmp	sl, r2
   17032:	f0c0 8112 	bcc.w	1725a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   17036:	ea4f 035a 	mov.w	r3, sl, lsr #1
   1703a:	2b92      	cmp	r3, #146	; 0x92
   1703c:	f200 8112 	bhi.w	17264 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   17040:	eb08 0302 	add.w	r3, r8, r2
   17044:	199a      	adds	r2, r3, r6
   17046:	b31e      	cbz	r6, 17090 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17048:	461f      	mov	r7, r3
   1704a:	b2c4      	uxtb	r4, r0
   1704c:	f817 1b01 	ldrb.w	r1, [r7], #1
   17050:	42a1      	cmp	r1, r4
   17052:	f000 80b6 	beq.w	171c2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17056:	4297      	cmp	r7, r2
   17058:	d01a      	beq.n	17090 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   1705a:	7859      	ldrb	r1, [r3, #1]
   1705c:	42a1      	cmp	r1, r4
   1705e:	f000 80b0 	beq.w	171c2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17062:	1c99      	adds	r1, r3, #2
   17064:	4291      	cmp	r1, r2
   17066:	d013      	beq.n	17090 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17068:	7899      	ldrb	r1, [r3, #2]
   1706a:	42a1      	cmp	r1, r4
   1706c:	f000 80a9 	beq.w	171c2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17070:	1cd9      	adds	r1, r3, #3
   17072:	4291      	cmp	r1, r2
   17074:	d00c      	beq.n	17090 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17076:	1d19      	adds	r1, r3, #4
   17078:	78db      	ldrb	r3, [r3, #3]
   1707a:	3e04      	subs	r6, #4
   1707c:	42a3      	cmp	r3, r4
   1707e:	460b      	mov	r3, r1
   17080:	d1e1      	bne.n	17046 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   17082:	e09e      	b.n	171c2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17084:	d808      	bhi.n	17098 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   17086:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   1708a:	4295      	cmp	r5, r2
   1708c:	d1c9      	bne.n	17022 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   1708e:	e003      	b.n	17098 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   17090:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   17094:	428d      	cmp	r5, r1
   17096:	d1c4      	bne.n	17022 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   17098:	f645 750b 	movw	r5, #24331	; 0x5f0b
   1709c:	2101      	movs	r1, #1
   1709e:	f2c0 0502 	movt	r5, #2
   170a2:	4628      	mov	r0, r5
   170a4:	4602      	mov	r2, r0
   170a6:	f812 7b01 	ldrb.w	r7, [r2], #1
   170aa:	b27e      	sxtb	r6, r7
   170ac:	2e00      	cmp	r6, #0
   170ae:	d404      	bmi.n	170ba <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   170b0:	4610      	mov	r0, r2
   170b2:	ebb9 0907 	subs.w	r9, r9, r7
   170b6:	d50f      	bpl.n	170d8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   170b8:	e0bd      	b.n	17236 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   170ba:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   170be:	429a      	cmp	r2, r3
   170c0:	f000 80db 	beq.w	1727a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   170c4:	7842      	ldrb	r2, [r0, #1]
   170c6:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   170ca:	3002      	adds	r0, #2
   170cc:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   170d0:	ebb9 0907 	subs.w	r9, r9, r7
   170d4:	f100 80af 	bmi.w	17236 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   170d8:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   170dc:	f081 0101 	eor.w	r1, r1, #1
   170e0:	4290      	cmp	r0, r2
   170e2:	d1df      	bne.n	170a4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   170e4:	e0a7      	b.n	17236 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   170e6:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   170ea:	d26f      	bcs.n	171cc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   170ec:	f246 0e45 	movw	lr, #24645	; 0x6045
   170f0:	f246 088b 	movw	r8, #24715	; 0x608b
   170f4:	fa1f f980 	uxth.w	r9, r0
   170f8:	f2c0 0e02 	movt	lr, #2
   170fc:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   17100:	f04f 0a00 	mov.w	sl, #0
   17104:	f2c0 0802 	movt	r8, #2
   17108:	4675      	mov	r5, lr
   1710a:	786e      	ldrb	r6, [r5, #1]
   1710c:	4652      	mov	r2, sl
   1710e:	782b      	ldrb	r3, [r5, #0]
   17110:	3502      	adds	r5, #2
   17112:	44b2      	add	sl, r6
   17114:	4563      	cmp	r3, ip
   17116:	d125      	bne.n	17164 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   17118:	4592      	cmp	sl, r2
   1711a:	f0c0 809e 	bcc.w	1725a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   1711e:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   17122:	f200 80a5 	bhi.w	17270 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   17126:	eb08 0302 	add.w	r3, r8, r2
   1712a:	199a      	adds	r2, r3, r6
   1712c:	b306      	cbz	r6, 17170 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   1712e:	461f      	mov	r7, r3
   17130:	b2c4      	uxtb	r4, r0
   17132:	f817 1b01 	ldrb.w	r1, [r7], #1
   17136:	42a1      	cmp	r1, r4
   17138:	d043      	beq.n	171c2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   1713a:	4297      	cmp	r7, r2
   1713c:	d018      	beq.n	17170 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   1713e:	7859      	ldrb	r1, [r3, #1]
   17140:	42a1      	cmp	r1, r4
   17142:	d03e      	beq.n	171c2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17144:	1c99      	adds	r1, r3, #2
   17146:	4291      	cmp	r1, r2
   17148:	d012      	beq.n	17170 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   1714a:	7899      	ldrb	r1, [r3, #2]
   1714c:	42a1      	cmp	r1, r4
   1714e:	d038      	beq.n	171c2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17150:	1cd9      	adds	r1, r3, #3
   17152:	4291      	cmp	r1, r2
   17154:	d00c      	beq.n	17170 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17156:	1d19      	adds	r1, r3, #4
   17158:	78db      	ldrb	r3, [r3, #3]
   1715a:	3e04      	subs	r6, #4
   1715c:	42a3      	cmp	r3, r4
   1715e:	460b      	mov	r3, r1
   17160:	d1e4      	bne.n	1712c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   17162:	e02e      	b.n	171c2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17164:	d808      	bhi.n	17178 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   17166:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   1716a:	4295      	cmp	r5, r2
   1716c:	d1cd      	bne.n	1710a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   1716e:	e003      	b.n	17178 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   17170:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   17174:	428d      	cmp	r5, r1
   17176:	d1c8      	bne.n	1710a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   17178:	f246 1531 	movw	r5, #24881	; 0x6131
   1717c:	2101      	movs	r1, #1
   1717e:	f2c0 0502 	movt	r5, #2
   17182:	4628      	mov	r0, r5
   17184:	4602      	mov	r2, r0
   17186:	f812 7b01 	ldrb.w	r7, [r2], #1
   1718a:	b27e      	sxtb	r6, r7
   1718c:	2e00      	cmp	r6, #0
   1718e:	d40a      	bmi.n	171a6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   17190:	4610      	mov	r0, r2
   17192:	ebb9 0907 	subs.w	r9, r9, r7
   17196:	d44e      	bmi.n	17236 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17198:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   1719c:	f081 0101 	eor.w	r1, r1, #1
   171a0:	4290      	cmp	r0, r2
   171a2:	d1ef      	bne.n	17184 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   171a4:	e047      	b.n	17236 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   171a6:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   171aa:	429a      	cmp	r2, r3
   171ac:	d065      	beq.n	1727a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   171ae:	7842      	ldrb	r2, [r0, #1]
   171b0:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   171b4:	3002      	adds	r0, #2
   171b6:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   171ba:	ebb9 0907 	subs.w	r9, r9, r7
   171be:	d5eb      	bpl.n	17198 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   171c0:	e039      	b.n	17236 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   171c2:	2100      	movs	r1, #0
   171c4:	f001 0001 	and.w	r0, r1, #1
   171c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   171cc:	f240 51e2 	movw	r1, #1506	; 0x5e2
   171d0:	f240 63e2 	movw	r3, #1762	; 0x6e2
   171d4:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   171d8:	1842      	adds	r2, r0, r1
   171da:	f2c0 030b 	movt	r3, #11
   171de:	2100      	movs	r1, #0
   171e0:	429a      	cmp	r2, r3
   171e2:	d328      	bcc.n	17236 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   171e4:	f241 421f 	movw	r2, #5151	; 0x141f
   171e8:	f640 431f 	movw	r3, #3103	; 0xc1f
   171ec:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   171f0:	4402      	add	r2, r0
   171f2:	429a      	cmp	r2, r3
   171f4:	bf21      	itttt	cs
   171f6:	f243 125e 	movwcs	r2, #12638	; 0x315e
   171fa:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   171fe:	4402      	addcs	r2, r0
   17200:	2a0e      	cmpcs	r2, #14
   17202:	d318      	bcc.n	17236 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17204:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   17208:	f64b 031e 	movw	r3, #47134	; 0xb81e
   1720c:	f2c0 021f 	movt	r2, #31
   17210:	f2c0 0302 	movt	r3, #2
   17214:	4002      	ands	r2, r0
   17216:	429a      	cmp	r2, r3
   17218:	d00d      	beq.n	17236 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   1721a:	f645 1229 	movw	r2, #22825	; 0x5929
   1721e:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   17222:	4402      	add	r2, r0
   17224:	2a29      	cmp	r2, #41	; 0x29
   17226:	bf21      	itttt	cs
   17228:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   1722c:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   17230:	4402      	addcs	r2, r0
   17232:	2a0b      	cmpcs	r2, #11
   17234:	d203      	bcs.n	1723e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   17236:	f001 0001 	and.w	r0, r1, #1
   1723a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1723e:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   17242:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   17246:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   1724a:	2000      	movs	r0, #0
   1724c:	f2c0 0202 	movt	r2, #2
   17250:	4291      	cmp	r1, r2
   17252:	bf88      	it	hi
   17254:	2001      	movhi	r0, #1
   17256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1725a:	4610      	mov	r0, r2
   1725c:	4651      	mov	r1, sl
   1725e:	f7ff fd04 	bl	16c6a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   17262:	defe      	udf	#254	; 0xfe
   17264:	4650      	mov	r0, sl
   17266:	f240 1125 	movw	r1, #293	; 0x125
   1726a:	f7ff fcdc 	bl	16c26 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   1726e:	defe      	udf	#254	; 0xfe
   17270:	4650      	mov	r0, sl
   17272:	21a6      	movs	r1, #166	; 0xa6
   17274:	f7ff fcd7 	bl	16c26 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   17278:	defe      	udf	#254	; 0xfe
   1727a:	f645 1070 	movw	r0, #22896	; 0x5970
   1727e:	f645 5284 	movw	r2, #23940	; 0x5d84
   17282:	f2c0 0002 	movt	r0, #2
   17286:	f2c0 0202 	movt	r2, #2
   1728a:	212b      	movs	r1, #43	; 0x2b
   1728c:	f7fe fd78 	bl	15d80 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17290:	defe      	udf	#254	; 0xfe

00017292 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   17292:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17296:	b0a3      	sub	sp, #140	; 0x8c
   17298:	468c      	mov	ip, r1
   1729a:	6809      	ldr	r1, [r1, #0]
   1729c:	06ca      	lsls	r2, r1, #27
   1729e:	d44a      	bmi.n	17336 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   172a0:	6804      	ldr	r4, [r0, #0]
   172a2:	0688      	lsls	r0, r1, #26
   172a4:	f100 8089 	bmi.w	173ba <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   172a8:	f248 5e1f 	movw	lr, #34079	; 0x851f
   172ac:	f645 2207 	movw	r2, #23047	; 0x5a07
   172b0:	f242 7810 	movw	r8, #10000	; 0x2710
   172b4:	4544      	cmp	r4, r8
   172b6:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   172ba:	f2c0 0202 	movt	r2, #2
   172be:	f0c0 80e3 	bcc.w	17488 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   172c2:	f241 7959 	movw	r9, #5977	; 0x1759
   172c6:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   172ca:	f10d 0b0c 	add.w	fp, sp, #12
   172ce:	2300      	movs	r3, #0
   172d0:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   172d4:	f04f 0a64 	mov.w	sl, #100	; 0x64
   172d8:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   172dc:	fba4 0109 	umull	r0, r1, r4, r9
   172e0:	42bc      	cmp	r4, r7
   172e2:	ea4f 3051 	mov.w	r0, r1, lsr #13
   172e6:	fb00 4118 	mls	r1, r0, r8, r4
   172ea:	4604      	mov	r4, r0
   172ec:	b28d      	uxth	r5, r1
   172ee:	fba5 560e 	umull	r5, r6, r5, lr
   172f2:	ea4f 1556 	mov.w	r5, r6, lsr #5
   172f6:	eb0b 0603 	add.w	r6, fp, r3
   172fa:	fb05 111a 	mls	r1, r5, sl, r1
   172fe:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   17302:	f1a3 0304 	sub.w	r3, r3, #4
   17306:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   1730a:	b289      	uxth	r1, r1
   1730c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   17310:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   17314:	d8e2      	bhi.n	172dc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   17316:	f103 0127 	add.w	r1, r3, #39	; 0x27
   1731a:	4604      	mov	r4, r0
   1731c:	2c63      	cmp	r4, #99	; 0x63
   1731e:	f300 80b7 	bgt.w	17490 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   17322:	4623      	mov	r3, r4
   17324:	2b0a      	cmp	r3, #10
   17326:	f2c0 80c3 	blt.w	174b0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   1732a:	1e88      	subs	r0, r1, #2
   1732c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   17330:	aa03      	add	r2, sp, #12
   17332:	5211      	strh	r1, [r2, r0]
   17334:	e0c1      	b.n	174ba <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   17336:	6800      	ldr	r0, [r0, #0]
   17338:	f10d 0e0c 	add.w	lr, sp, #12
   1733c:	2381      	movs	r3, #129	; 0x81
   1733e:	2100      	movs	r1, #0
   17340:	f000 020f 	and.w	r2, r0, #15
   17344:	f102 0457 	add.w	r4, r2, #87	; 0x57
   17348:	2a0a      	cmp	r2, #10
   1734a:	bf38      	it	cc
   1734c:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   17350:	eb0e 0203 	add.w	r2, lr, r3
   17354:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   17358:	f802 4c02 	strb.w	r4, [r2, #-2]
   1735c:	d071      	beq.n	17442 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   1735e:	0904      	lsrs	r4, r0, #4
   17360:	f004 040f 	and.w	r4, r4, #15
   17364:	f104 0557 	add.w	r5, r4, #87	; 0x57
   17368:	2c0a      	cmp	r4, #10
   1736a:	bf38      	it	cc
   1736c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   17370:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   17374:	f802 5c03 	strb.w	r5, [r2, #-3]
   17378:	d079      	beq.n	1746e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   1737a:	0a04      	lsrs	r4, r0, #8
   1737c:	f004 040f 	and.w	r4, r4, #15
   17380:	f104 0557 	add.w	r5, r4, #87	; 0x57
   17384:	2c0a      	cmp	r4, #10
   17386:	bf38      	it	cc
   17388:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1738c:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   17390:	f802 5c04 	strb.w	r5, [r2, #-4]
   17394:	d073      	beq.n	1747e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   17396:	0b04      	lsrs	r4, r0, #12
   17398:	3b04      	subs	r3, #4
   1739a:	f004 040f 	and.w	r4, r4, #15
   1739e:	f104 0557 	add.w	r5, r4, #87	; 0x57
   173a2:	2c0a      	cmp	r4, #10
   173a4:	bf38      	it	cc
   173a6:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   173aa:	f802 5c05 	strb.w	r5, [r2, #-5]
   173ae:	0c02      	lsrs	r2, r0, #16
   173b0:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   173b4:	4610      	mov	r0, r2
   173b6:	d1c3      	bne.n	17340 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   173b8:	e03f      	b.n	1743a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   173ba:	f10d 0e0c 	add.w	lr, sp, #12
   173be:	2381      	movs	r3, #129	; 0x81
   173c0:	2100      	movs	r1, #0
   173c2:	f004 000f 	and.w	r0, r4, #15
   173c6:	eb0e 0203 	add.w	r2, lr, r3
   173ca:	f100 0537 	add.w	r5, r0, #55	; 0x37
   173ce:	280a      	cmp	r0, #10
   173d0:	bf38      	it	cc
   173d2:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   173d6:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   173da:	f802 5c02 	strb.w	r5, [r2, #-2]
   173de:	d030      	beq.n	17442 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   173e0:	0920      	lsrs	r0, r4, #4
   173e2:	f000 000f 	and.w	r0, r0, #15
   173e6:	f100 0537 	add.w	r5, r0, #55	; 0x37
   173ea:	280a      	cmp	r0, #10
   173ec:	bf38      	it	cc
   173ee:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   173f2:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   173f6:	f802 5c03 	strb.w	r5, [r2, #-3]
   173fa:	d038      	beq.n	1746e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   173fc:	0a20      	lsrs	r0, r4, #8
   173fe:	f000 000f 	and.w	r0, r0, #15
   17402:	f100 0537 	add.w	r5, r0, #55	; 0x37
   17406:	280a      	cmp	r0, #10
   17408:	bf38      	it	cc
   1740a:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   1740e:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   17412:	f802 5c04 	strb.w	r5, [r2, #-4]
   17416:	d032      	beq.n	1747e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   17418:	0b20      	lsrs	r0, r4, #12
   1741a:	3b04      	subs	r3, #4
   1741c:	f000 000f 	and.w	r0, r0, #15
   17420:	f100 0537 	add.w	r5, r0, #55	; 0x37
   17424:	280a      	cmp	r0, #10
   17426:	bf38      	it	cc
   17428:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   1742c:	0c20      	lsrs	r0, r4, #16
   1742e:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   17432:	4604      	mov	r4, r0
   17434:	f802 5c05 	strb.w	r5, [r2, #-5]
   17438:	d1c3      	bne.n	173c2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   1743a:	1e58      	subs	r0, r3, #1
   1743c:	2881      	cmp	r0, #129	; 0x81
   1743e:	d305      	bcc.n	1744c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   17440:	e019      	b.n	17476 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   17442:	1e59      	subs	r1, r3, #1
   17444:	1e98      	subs	r0, r3, #2
   17446:	460b      	mov	r3, r1
   17448:	2881      	cmp	r0, #129	; 0x81
   1744a:	d214      	bcs.n	17476 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   1744c:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   17450:	f645 2205 	movw	r2, #23045	; 0x5a05
   17454:	4470      	add	r0, lr
   17456:	f2c0 0202 	movt	r2, #2
   1745a:	e9cd 0100 	strd	r0, r1, [sp]
   1745e:	4660      	mov	r0, ip
   17460:	2101      	movs	r1, #1
   17462:	2302      	movs	r3, #2
   17464:	f7ff f864 	bl	16530 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   17468:	b023      	add	sp, #140	; 0x8c
   1746a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1746e:	1ed8      	subs	r0, r3, #3
   17470:	3b02      	subs	r3, #2
   17472:	2881      	cmp	r0, #129	; 0x81
   17474:	d3ea      	bcc.n	1744c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   17476:	2180      	movs	r1, #128	; 0x80
   17478:	f7ff fbf7 	bl	16c6a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1747c:	defe      	udf	#254	; 0xfe
   1747e:	1f18      	subs	r0, r3, #4
   17480:	3b03      	subs	r3, #3
   17482:	2881      	cmp	r0, #129	; 0x81
   17484:	d3e2      	bcc.n	1744c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   17486:	e7f6      	b.n	17476 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   17488:	2127      	movs	r1, #39	; 0x27
   1748a:	2c63      	cmp	r4, #99	; 0x63
   1748c:	f77f af49 	ble.w	17322 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   17490:	b2a0      	uxth	r0, r4
   17492:	3902      	subs	r1, #2
   17494:	fba0 030e 	umull	r0, r3, r0, lr
   17498:	af03      	add	r7, sp, #12
   1749a:	2064      	movs	r0, #100	; 0x64
   1749c:	095b      	lsrs	r3, r3, #5
   1749e:	fb03 4010 	mls	r0, r3, r0, r4
   174a2:	b280      	uxth	r0, r0
   174a4:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   174a8:	5278      	strh	r0, [r7, r1]
   174aa:	2b0a      	cmp	r3, #10
   174ac:	f6bf af3d 	bge.w	1732a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   174b0:	1e48      	subs	r0, r1, #1
   174b2:	aa03      	add	r2, sp, #12
   174b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
   174b8:	5411      	strb	r1, [r2, r0]
   174ba:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   174be:	aa03      	add	r2, sp, #12
   174c0:	4410      	add	r0, r2
   174c2:	f245 72d4 	movw	r2, #22484	; 0x57d4
   174c6:	e9cd 0100 	strd	r0, r1, [sp]
   174ca:	f2c0 0202 	movt	r2, #2
   174ce:	4660      	mov	r0, ip
   174d0:	2101      	movs	r1, #1
   174d2:	2300      	movs	r3, #0
   174d4:	f7ff f82c 	bl	16530 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   174d8:	b023      	add	sp, #140	; 0x8c
   174da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000174de <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   174de:	b580      	push	{r7, lr}
   174e0:	b0a2      	sub	sp, #136	; 0x88
   174e2:	7802      	ldrb	r2, [r0, #0]
   174e4:	468c      	mov	ip, r1
   174e6:	f002 030f 	and.w	r3, r2, #15
   174ea:	f103 0057 	add.w	r0, r3, #87	; 0x57
   174ee:	2b0a      	cmp	r3, #10
   174f0:	bf38      	it	cc
   174f2:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   174f6:	2300      	movs	r3, #0
   174f8:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   174fc:	d00b      	beq.n	17516 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   174fe:	0913      	lsrs	r3, r2, #4
   17500:	f103 0157 	add.w	r1, r3, #87	; 0x57
   17504:	2aa0      	cmp	r2, #160	; 0xa0
   17506:	bf38      	it	cc
   17508:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   1750c:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   17510:	227e      	movs	r2, #126	; 0x7e
   17512:	2302      	movs	r3, #2
   17514:	e001      	b.n	1751a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   17516:	227f      	movs	r2, #127	; 0x7f
   17518:	2301      	movs	r3, #1
   1751a:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   1751e:	a802      	add	r0, sp, #8
   17520:	4410      	add	r0, r2
   17522:	f645 2205 	movw	r2, #23045	; 0x5a05
   17526:	e9cd 0300 	strd	r0, r3, [sp]
   1752a:	f2c0 0202 	movt	r2, #2
   1752e:	4660      	mov	r0, ip
   17530:	2101      	movs	r1, #1
   17532:	2302      	movs	r3, #2
   17534:	f7fe fffc 	bl	16530 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   17538:	b022      	add	sp, #136	; 0x88
   1753a:	bd80      	pop	{r7, pc}

0001753c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   1753c:	b580      	push	{r7, lr}
   1753e:	b0a2      	sub	sp, #136	; 0x88
   17540:	7802      	ldrb	r2, [r0, #0]
   17542:	468c      	mov	ip, r1
   17544:	f002 030f 	and.w	r3, r2, #15
   17548:	f103 0037 	add.w	r0, r3, #55	; 0x37
   1754c:	2b0a      	cmp	r3, #10
   1754e:	bf38      	it	cc
   17550:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   17554:	2300      	movs	r3, #0
   17556:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   1755a:	d00b      	beq.n	17574 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   1755c:	0913      	lsrs	r3, r2, #4
   1755e:	f103 0137 	add.w	r1, r3, #55	; 0x37
   17562:	2aa0      	cmp	r2, #160	; 0xa0
   17564:	bf38      	it	cc
   17566:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   1756a:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   1756e:	227e      	movs	r2, #126	; 0x7e
   17570:	2302      	movs	r3, #2
   17572:	e001      	b.n	17578 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   17574:	227f      	movs	r2, #127	; 0x7f
   17576:	2301      	movs	r3, #1
   17578:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   1757c:	a802      	add	r0, sp, #8
   1757e:	4410      	add	r0, r2
   17580:	f645 2205 	movw	r2, #23045	; 0x5a05
   17584:	e9cd 0300 	strd	r0, r3, [sp]
   17588:	f2c0 0202 	movt	r2, #2
   1758c:	4660      	mov	r0, ip
   1758e:	2101      	movs	r1, #1
   17590:	2302      	movs	r3, #2
   17592:	f7fe ffcd 	bl	16530 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   17596:	b022      	add	sp, #136	; 0x88
   17598:	bd80      	pop	{r7, pc}

0001759a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   1759a:	b580      	push	{r7, lr}
   1759c:	b0a2      	sub	sp, #136	; 0x88
   1759e:	8800      	ldrh	r0, [r0, #0]
   175a0:	468c      	mov	ip, r1
   175a2:	f000 020f 	and.w	r2, r0, #15
   175a6:	f102 0357 	add.w	r3, r2, #87	; 0x57
   175aa:	2a0a      	cmp	r2, #10
   175ac:	bf38      	it	cc
   175ae:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   175b2:	2200      	movs	r2, #0
   175b4:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   175b8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   175bc:	d02a      	beq.n	17614 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   175be:	0903      	lsrs	r3, r0, #4
   175c0:	f003 030f 	and.w	r3, r3, #15
   175c4:	f103 0157 	add.w	r1, r3, #87	; 0x57
   175c8:	2b0a      	cmp	r3, #10
   175ca:	bf38      	it	cc
   175cc:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   175d0:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   175d4:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   175d8:	d031      	beq.n	1763e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   175da:	0a01      	lsrs	r1, r0, #8
   175dc:	f001 010f 	and.w	r1, r1, #15
   175e0:	f101 0257 	add.w	r2, r1, #87	; 0x57
   175e4:	290a      	cmp	r1, #10
   175e6:	bf38      	it	cc
   175e8:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   175ec:	2100      	movs	r1, #0
   175ee:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   175f2:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   175f6:	d027      	beq.n	17648 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   175f8:	0b00      	lsrs	r0, r0, #12
   175fa:	f100 0157 	add.w	r1, r0, #87	; 0x57
   175fe:	280a      	cmp	r0, #10
   17600:	bf38      	it	cc
   17602:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   17606:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   1760a:	227d      	movs	r2, #125	; 0x7d
   1760c:	207c      	movs	r0, #124	; 0x7c
   1760e:	2881      	cmp	r0, #129	; 0x81
   17610:	d304      	bcc.n	1761c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   17612:	e01d      	b.n	17650 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   17614:	2280      	movs	r2, #128	; 0x80
   17616:	207f      	movs	r0, #127	; 0x7f
   17618:	2881      	cmp	r0, #129	; 0x81
   1761a:	d219      	bcs.n	17650 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   1761c:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   17620:	ab02      	add	r3, sp, #8
   17622:	4418      	add	r0, r3
   17624:	2101      	movs	r1, #1
   17626:	e9cd 0200 	strd	r0, r2, [sp]
   1762a:	f645 2205 	movw	r2, #23045	; 0x5a05
   1762e:	f2c0 0202 	movt	r2, #2
   17632:	4660      	mov	r0, ip
   17634:	2302      	movs	r3, #2
   17636:	f7fe ff7b 	bl	16530 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1763a:	b022      	add	sp, #136	; 0x88
   1763c:	bd80      	pop	{r7, pc}
   1763e:	207e      	movs	r0, #126	; 0x7e
   17640:	227f      	movs	r2, #127	; 0x7f
   17642:	2881      	cmp	r0, #129	; 0x81
   17644:	d3ea      	bcc.n	1761c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   17646:	e003      	b.n	17650 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   17648:	207d      	movs	r0, #125	; 0x7d
   1764a:	227e      	movs	r2, #126	; 0x7e
   1764c:	2881      	cmp	r0, #129	; 0x81
   1764e:	d3e5      	bcc.n	1761c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   17650:	2180      	movs	r1, #128	; 0x80
   17652:	f7ff fb0a 	bl	16c6a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   17656:	defe      	udf	#254	; 0xfe

00017658 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   17658:	b5b0      	push	{r4, r5, r7, lr}
   1765a:	b0a2      	sub	sp, #136	; 0x88
   1765c:	6800      	ldr	r0, [r0, #0]
   1765e:	f10d 0e08 	add.w	lr, sp, #8
   17662:	468c      	mov	ip, r1
   17664:	2381      	movs	r3, #129	; 0x81
   17666:	2100      	movs	r1, #0
   17668:	f000 020f 	and.w	r2, r0, #15
   1766c:	f102 0457 	add.w	r4, r2, #87	; 0x57
   17670:	2a0a      	cmp	r2, #10
   17672:	bf38      	it	cc
   17674:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   17678:	eb0e 0203 	add.w	r2, lr, r3
   1767c:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   17680:	f802 4c02 	strb.w	r4, [r2, #-2]
   17684:	d030      	beq.n	176e8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   17686:	0904      	lsrs	r4, r0, #4
   17688:	f004 040f 	and.w	r4, r4, #15
   1768c:	f104 0557 	add.w	r5, r4, #87	; 0x57
   17690:	2c0a      	cmp	r4, #10
   17692:	bf38      	it	cc
   17694:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   17698:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   1769c:	f802 5c03 	strb.w	r5, [r2, #-3]
   176a0:	d028      	beq.n	176f4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   176a2:	0a04      	lsrs	r4, r0, #8
   176a4:	f004 040f 	and.w	r4, r4, #15
   176a8:	f104 0557 	add.w	r5, r4, #87	; 0x57
   176ac:	2c0a      	cmp	r4, #10
   176ae:	bf38      	it	cc
   176b0:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   176b4:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   176b8:	f802 5c04 	strb.w	r5, [r2, #-4]
   176bc:	d01f      	beq.n	176fe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   176be:	0b04      	lsrs	r4, r0, #12
   176c0:	3b04      	subs	r3, #4
   176c2:	f004 040f 	and.w	r4, r4, #15
   176c6:	f104 0557 	add.w	r5, r4, #87	; 0x57
   176ca:	2c0a      	cmp	r4, #10
   176cc:	bf38      	it	cc
   176ce:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   176d2:	f802 5c05 	strb.w	r5, [r2, #-5]
   176d6:	0c02      	lsrs	r2, r0, #16
   176d8:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   176dc:	4610      	mov	r0, r2
   176de:	d1c3      	bne.n	17668 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   176e0:	1e58      	subs	r0, r3, #1
   176e2:	2881      	cmp	r0, #129	; 0x81
   176e4:	d30f      	bcc.n	17706 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   176e6:	e01e      	b.n	17726 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   176e8:	1e59      	subs	r1, r3, #1
   176ea:	1e98      	subs	r0, r3, #2
   176ec:	460b      	mov	r3, r1
   176ee:	2881      	cmp	r0, #129	; 0x81
   176f0:	d309      	bcc.n	17706 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   176f2:	e018      	b.n	17726 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   176f4:	1ed8      	subs	r0, r3, #3
   176f6:	3b02      	subs	r3, #2
   176f8:	2881      	cmp	r0, #129	; 0x81
   176fa:	d304      	bcc.n	17706 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   176fc:	e013      	b.n	17726 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   176fe:	1f18      	subs	r0, r3, #4
   17700:	3b03      	subs	r3, #3
   17702:	2881      	cmp	r0, #129	; 0x81
   17704:	d20f      	bcs.n	17726 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   17706:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   1770a:	f645 2205 	movw	r2, #23045	; 0x5a05
   1770e:	4470      	add	r0, lr
   17710:	f2c0 0202 	movt	r2, #2
   17714:	e9cd 0100 	strd	r0, r1, [sp]
   17718:	4660      	mov	r0, ip
   1771a:	2101      	movs	r1, #1
   1771c:	2302      	movs	r3, #2
   1771e:	f7fe ff07 	bl	16530 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   17722:	b022      	add	sp, #136	; 0x88
   17724:	bdb0      	pop	{r4, r5, r7, pc}
   17726:	2180      	movs	r1, #128	; 0x80
   17728:	f7ff fa9f 	bl	16c6a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1772c:	defe      	udf	#254	; 0xfe

0001772e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   1772e:	b5b0      	push	{r4, r5, r7, lr}
   17730:	b0a2      	sub	sp, #136	; 0x88
   17732:	6800      	ldr	r0, [r0, #0]
   17734:	f10d 0e08 	add.w	lr, sp, #8
   17738:	468c      	mov	ip, r1
   1773a:	2381      	movs	r3, #129	; 0x81
   1773c:	2100      	movs	r1, #0
   1773e:	f000 020f 	and.w	r2, r0, #15
   17742:	f102 0437 	add.w	r4, r2, #55	; 0x37
   17746:	2a0a      	cmp	r2, #10
   17748:	bf38      	it	cc
   1774a:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   1774e:	eb0e 0203 	add.w	r2, lr, r3
   17752:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   17756:	f802 4c02 	strb.w	r4, [r2, #-2]
   1775a:	d030      	beq.n	177be <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   1775c:	0904      	lsrs	r4, r0, #4
   1775e:	f004 040f 	and.w	r4, r4, #15
   17762:	f104 0537 	add.w	r5, r4, #55	; 0x37
   17766:	2c0a      	cmp	r4, #10
   17768:	bf38      	it	cc
   1776a:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1776e:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   17772:	f802 5c03 	strb.w	r5, [r2, #-3]
   17776:	d028      	beq.n	177ca <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   17778:	0a04      	lsrs	r4, r0, #8
   1777a:	f004 040f 	and.w	r4, r4, #15
   1777e:	f104 0537 	add.w	r5, r4, #55	; 0x37
   17782:	2c0a      	cmp	r4, #10
   17784:	bf38      	it	cc
   17786:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1778a:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   1778e:	f802 5c04 	strb.w	r5, [r2, #-4]
   17792:	d01f      	beq.n	177d4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   17794:	0b04      	lsrs	r4, r0, #12
   17796:	3b04      	subs	r3, #4
   17798:	f004 040f 	and.w	r4, r4, #15
   1779c:	f104 0537 	add.w	r5, r4, #55	; 0x37
   177a0:	2c0a      	cmp	r4, #10
   177a2:	bf38      	it	cc
   177a4:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   177a8:	f802 5c05 	strb.w	r5, [r2, #-5]
   177ac:	0c02      	lsrs	r2, r0, #16
   177ae:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   177b2:	4610      	mov	r0, r2
   177b4:	d1c3      	bne.n	1773e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   177b6:	1e58      	subs	r0, r3, #1
   177b8:	2881      	cmp	r0, #129	; 0x81
   177ba:	d30f      	bcc.n	177dc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   177bc:	e01e      	b.n	177fc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   177be:	1e59      	subs	r1, r3, #1
   177c0:	1e98      	subs	r0, r3, #2
   177c2:	460b      	mov	r3, r1
   177c4:	2881      	cmp	r0, #129	; 0x81
   177c6:	d309      	bcc.n	177dc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   177c8:	e018      	b.n	177fc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   177ca:	1ed8      	subs	r0, r3, #3
   177cc:	3b02      	subs	r3, #2
   177ce:	2881      	cmp	r0, #129	; 0x81
   177d0:	d304      	bcc.n	177dc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   177d2:	e013      	b.n	177fc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   177d4:	1f18      	subs	r0, r3, #4
   177d6:	3b03      	subs	r3, #3
   177d8:	2881      	cmp	r0, #129	; 0x81
   177da:	d20f      	bcs.n	177fc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   177dc:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   177e0:	f645 2205 	movw	r2, #23045	; 0x5a05
   177e4:	4470      	add	r0, lr
   177e6:	f2c0 0202 	movt	r2, #2
   177ea:	e9cd 0100 	strd	r0, r1, [sp]
   177ee:	4660      	mov	r0, ip
   177f0:	2101      	movs	r1, #1
   177f2:	2302      	movs	r3, #2
   177f4:	f7fe fe9c 	bl	16530 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   177f8:	b022      	add	sp, #136	; 0x88
   177fa:	bdb0      	pop	{r4, r5, r7, pc}
   177fc:	2180      	movs	r1, #128	; 0x80
   177fe:	f7ff fa34 	bl	16c6a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   17802:	defe      	udf	#254	; 0xfe

00017804 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   17804:	b580      	push	{r7, lr}
   17806:	b08c      	sub	sp, #48	; 0x30
   17808:	7802      	ldrb	r2, [r0, #0]
   1780a:	2a64      	cmp	r2, #100	; 0x64
   1780c:	d314      	bcc.n	17838 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   1780e:	f248 501f 	movw	r0, #34079	; 0x851f
   17812:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   17816:	fba2 0300 	umull	r0, r3, r2, r0
   1781a:	2064      	movs	r0, #100	; 0x64
   1781c:	095b      	lsrs	r3, r3, #5
   1781e:	fb03 2010 	mls	r0, r3, r0, r2
   17822:	f645 2207 	movw	r2, #23047	; 0x5a07
   17826:	f2c0 0202 	movt	r2, #2
   1782a:	b2c0      	uxtb	r0, r0
   1782c:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   17830:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   17834:	2024      	movs	r0, #36	; 0x24
   17836:	e003      	b.n	17840 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   17838:	2a0a      	cmp	r2, #10
   1783a:	d206      	bcs.n	1784a <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   1783c:	2026      	movs	r0, #38	; 0x26
   1783e:	4613      	mov	r3, r2
   17840:	f103 0230 	add.w	r2, r3, #48	; 0x30
   17844:	ab02      	add	r3, sp, #8
   17846:	541a      	strb	r2, [r3, r0]
   17848:	e008      	b.n	1785c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   1784a:	f645 2007 	movw	r0, #23047	; 0x5a07
   1784e:	f2c0 0002 	movt	r0, #2
   17852:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   17856:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1785a:	2025      	movs	r0, #37	; 0x25
   1785c:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   17860:	ab02      	add	r3, sp, #8
   17862:	4418      	add	r0, r3
   17864:	2300      	movs	r3, #0
   17866:	e9cd 0200 	strd	r0, r2, [sp]
   1786a:	f245 72d4 	movw	r2, #22484	; 0x57d4
   1786e:	4608      	mov	r0, r1
   17870:	f2c0 0202 	movt	r2, #2
   17874:	2101      	movs	r1, #1
   17876:	f7fe fe5b 	bl	16530 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1787a:	b00c      	add	sp, #48	; 0x30
   1787c:	bd80      	pop	{r7, pc}

0001787e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   1787e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17882:	b08f      	sub	sp, #60	; 0x3c
   17884:	6805      	ldr	r5, [r0, #0]
   17886:	f248 581f 	movw	r8, #34079	; 0x851f
   1788a:	460e      	mov	r6, r1
   1788c:	f645 2107 	movw	r1, #23047	; 0x5a07
   17890:	2d00      	cmp	r5, #0
   17892:	f242 7910 	movw	r9, #10000	; 0x2710
   17896:	462b      	mov	r3, r5
   17898:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   1789c:	bf48      	it	mi
   1789e:	426b      	negmi	r3, r5
   178a0:	454b      	cmp	r3, r9
   178a2:	f2c0 0102 	movt	r1, #2
   178a6:	d33a      	bcc.n	1791e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   178a8:	f241 7a59 	movw	sl, #5977	; 0x1759
   178ac:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   178b0:	f10d 0e14 	add.w	lr, sp, #20
   178b4:	2400      	movs	r4, #0
   178b6:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   178ba:	f04f 0b64 	mov.w	fp, #100	; 0x64
   178be:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   178c2:	e9cd 5603 	strd	r5, r6, [sp, #12]
   178c6:	fba3 250a 	umull	r2, r5, r3, sl
   178ca:	eb0e 0704 	add.w	r7, lr, r4
   178ce:	3c04      	subs	r4, #4
   178d0:	4283      	cmp	r3, r0
   178d2:	ea4f 3255 	mov.w	r2, r5, lsr #13
   178d6:	fb02 3519 	mls	r5, r2, r9, r3
   178da:	4613      	mov	r3, r2
   178dc:	b2ae      	uxth	r6, r5
   178de:	fba6 6c08 	umull	r6, ip, r6, r8
   178e2:	ea4f 165c 	mov.w	r6, ip, lsr #5
   178e6:	fb06 551b 	mls	r5, r6, fp, r5
   178ea:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   178ee:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   178f2:	b2ad      	uxth	r5, r5
   178f4:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   178f8:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   178fc:	d8e3      	bhi.n	178c6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   178fe:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   17902:	f104 0027 	add.w	r0, r4, #39	; 0x27
   17906:	4613      	mov	r3, r2
   17908:	2b63      	cmp	r3, #99	; 0x63
   1790a:	dc0b      	bgt.n	17924 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   1790c:	461a      	mov	r2, r3
   1790e:	2a0a      	cmp	r2, #10
   17910:	db17      	blt.n	17942 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   17912:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   17916:	3802      	subs	r0, #2
   17918:	aa05      	add	r2, sp, #20
   1791a:	5211      	strh	r1, [r2, r0]
   1791c:	e016      	b.n	1794c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   1791e:	2027      	movs	r0, #39	; 0x27
   17920:	2b63      	cmp	r3, #99	; 0x63
   17922:	ddf3      	ble.n	1790c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   17924:	b29a      	uxth	r2, r3
   17926:	3802      	subs	r0, #2
   17928:	fba2 2708 	umull	r2, r7, r2, r8
   1792c:	097a      	lsrs	r2, r7, #5
   1792e:	2764      	movs	r7, #100	; 0x64
   17930:	fb02 3317 	mls	r3, r2, r7, r3
   17934:	af05      	add	r7, sp, #20
   17936:	b29b      	uxth	r3, r3
   17938:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1793c:	523b      	strh	r3, [r7, r0]
   1793e:	2a0a      	cmp	r2, #10
   17940:	dae7      	bge.n	17912 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   17942:	3801      	subs	r0, #1
   17944:	f102 0130 	add.w	r1, r2, #48	; 0x30
   17948:	aa05      	add	r2, sp, #20
   1794a:	5411      	strb	r1, [r2, r0]
   1794c:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   17950:	aa05      	add	r2, sp, #20
   17952:	4410      	add	r0, r2
   17954:	f245 72d4 	movw	r2, #22484	; 0x57d4
   17958:	e9cd 0100 	strd	r0, r1, [sp]
   1795c:	43e8      	mvns	r0, r5
   1795e:	0fc1      	lsrs	r1, r0, #31
   17960:	f2c0 0202 	movt	r2, #2
   17964:	4630      	mov	r0, r6
   17966:	2300      	movs	r3, #0
   17968:	f7fe fde2 	bl	16530 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1796c:	b00f      	add	sp, #60	; 0x3c
   1796e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017972 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   17972:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17976:	b08d      	sub	sp, #52	; 0x34
   17978:	468c      	mov	ip, r1
   1797a:	6801      	ldr	r1, [r0, #0]
   1797c:	f248 5e1f 	movw	lr, #34079	; 0x851f
   17980:	f645 2007 	movw	r0, #23047	; 0x5a07
   17984:	f242 7810 	movw	r8, #10000	; 0x2710
   17988:	4541      	cmp	r1, r8
   1798a:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   1798e:	f2c0 0002 	movt	r0, #2
   17992:	d337      	bcc.n	17a04 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   17994:	f241 7959 	movw	r9, #5977	; 0x1759
   17998:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   1799c:	f10d 0b0c 	add.w	fp, sp, #12
   179a0:	2300      	movs	r3, #0
   179a2:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   179a6:	f04f 0a64 	mov.w	sl, #100	; 0x64
   179aa:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   179ae:	fba1 2409 	umull	r2, r4, r1, r9
   179b2:	42b9      	cmp	r1, r7
   179b4:	ea4f 3254 	mov.w	r2, r4, lsr #13
   179b8:	fb02 1418 	mls	r4, r2, r8, r1
   179bc:	4611      	mov	r1, r2
   179be:	b2a5      	uxth	r5, r4
   179c0:	fba5 560e 	umull	r5, r6, r5, lr
   179c4:	ea4f 1556 	mov.w	r5, r6, lsr #5
   179c8:	eb0b 0603 	add.w	r6, fp, r3
   179cc:	fb05 441a 	mls	r4, r5, sl, r4
   179d0:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   179d4:	f1a3 0304 	sub.w	r3, r3, #4
   179d8:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   179dc:	b2a4      	uxth	r4, r4
   179de:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   179e2:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   179e6:	d8e2      	bhi.n	179ae <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   179e8:	f103 0427 	add.w	r4, r3, #39	; 0x27
   179ec:	4611      	mov	r1, r2
   179ee:	2963      	cmp	r1, #99	; 0x63
   179f0:	dc0b      	bgt.n	17a0a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   179f2:	460b      	mov	r3, r1
   179f4:	2b0a      	cmp	r3, #10
   179f6:	db17      	blt.n	17a28 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   179f8:	1ea1      	subs	r1, r4, #2
   179fa:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   179fe:	aa03      	add	r2, sp, #12
   17a00:	5250      	strh	r0, [r2, r1]
   17a02:	e016      	b.n	17a32 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   17a04:	2427      	movs	r4, #39	; 0x27
   17a06:	2963      	cmp	r1, #99	; 0x63
   17a08:	ddf3      	ble.n	179f2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   17a0a:	b28a      	uxth	r2, r1
   17a0c:	3c02      	subs	r4, #2
   17a0e:	fba2 230e 	umull	r2, r3, r2, lr
   17a12:	2264      	movs	r2, #100	; 0x64
   17a14:	095b      	lsrs	r3, r3, #5
   17a16:	fb03 1112 	mls	r1, r3, r2, r1
   17a1a:	aa03      	add	r2, sp, #12
   17a1c:	b289      	uxth	r1, r1
   17a1e:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   17a22:	5311      	strh	r1, [r2, r4]
   17a24:	2b0a      	cmp	r3, #10
   17a26:	dae7      	bge.n	179f8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   17a28:	1e61      	subs	r1, r4, #1
   17a2a:	aa03      	add	r2, sp, #12
   17a2c:	f103 0030 	add.w	r0, r3, #48	; 0x30
   17a30:	5450      	strb	r0, [r2, r1]
   17a32:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   17a36:	aa03      	add	r2, sp, #12
   17a38:	4411      	add	r1, r2
   17a3a:	f245 72d4 	movw	r2, #22484	; 0x57d4
   17a3e:	e9cd 1000 	strd	r1, r0, [sp]
   17a42:	f2c0 0202 	movt	r2, #2
   17a46:	4660      	mov	r0, ip
   17a48:	2101      	movs	r1, #1
   17a4a:	2300      	movs	r3, #0
   17a4c:	f7fe fd70 	bl	16530 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   17a50:	b00d      	add	sp, #52	; 0x34
   17a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017a56 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   17a56:	e9d0 2000 	ldrd	r2, r0, [r0]
   17a5a:	68c3      	ldr	r3, [r0, #12]
   17a5c:	4610      	mov	r0, r2
   17a5e:	4718      	bx	r3

00017a60 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   17a60:	460b      	mov	r3, r1
   17a62:	e9d0 1200 	ldrd	r1, r2, [r0]
   17a66:	4618      	mov	r0, r3
   17a68:	f7fe beaa 	b.w	167c0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>

00017a6c <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   17a6c:	4b07      	ldr	r3, [pc, #28]	; (17a8c <__semihost+0x20>)
   17a6e:	781b      	ldrb	r3, [r3, #0]
   17a70:	b14b      	cbz	r3, 17a86 <__semihost+0x1a>
static int __semihost(int command, void* message) {
   17a72:	b410      	push	{r4}
   17a74:	4602      	mov	r2, r0
   17a76:	460c      	mov	r4, r1
    __asm( 
   17a78:	4610      	mov	r0, r2
   17a7a:	4621      	mov	r1, r4
   17a7c:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   17a7e:	2000      	movs	r0, #0
}
   17a80:	f85d 4b04 	ldr.w	r4, [sp], #4
   17a84:	4770      	bx	lr
    if (!log_enabled) return -1;
   17a86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   17a8a:	4770      	bx	lr
   17a8c:	20000100 	.word	0x20000100

00017a90 <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   17a90:	4b02      	ldr	r3, [pc, #8]	; (17a9c <debugger_connected+0xc>)
   17a92:	6818      	ldr	r0, [r3, #0]
}
   17a94:	f000 0001 	and.w	r0, r0, #1
   17a98:	4770      	bx	lr
   17a9a:	bf00      	nop
   17a9c:	e000edf0 	.word	0xe000edf0

00017aa0 <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   17aa0:	b570      	push	{r4, r5, r6, lr}
   17aa2:	b084      	sub	sp, #16
   17aa4:	4606      	mov	r6, r0
   17aa6:	460d      	mov	r5, r1
   17aa8:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   17aaa:	f7ff fff1 	bl	17a90 <debugger_connected>
   17aae:	4603      	mov	r3, r0
   17ab0:	b108      	cbz	r0, 17ab6 <semihost_write+0x16>
    if (length == 0) { return 0; }
   17ab2:	b91c      	cbnz	r4, 17abc <semihost_write+0x1c>
   17ab4:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   17ab6:	4618      	mov	r0, r3
   17ab8:	b004      	add	sp, #16
   17aba:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   17abc:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   17abe:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   17ac0:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   17ac2:	a901      	add	r1, sp, #4
   17ac4:	2005      	movs	r0, #5
   17ac6:	f7ff ffd1 	bl	17a6c <__semihost>
   17aca:	4603      	mov	r3, r0
   17acc:	e7f3      	b.n	17ab6 <semihost_write+0x16>
	...

00017ad0 <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   17ad0:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   17ad2:	4b0e      	ldr	r3, [pc, #56]	; (17b0c <console_flush+0x3c>)
   17ad4:	781b      	ldrb	r3, [r3, #0]
   17ad6:	b1bb      	cbz	r3, 17b08 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   17ad8:	4b0d      	ldr	r3, [pc, #52]	; (17b10 <console_flush+0x40>)
   17ada:	681d      	ldr	r5, [r3, #0]
   17adc:	b1a5      	cbz	r5, 17b08 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   17ade:	4b0d      	ldr	r3, [pc, #52]	; (17b14 <console_flush+0x44>)
   17ae0:	685b      	ldr	r3, [r3, #4]
   17ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   17ae6:	b97b      	cbnz	r3, 17b08 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   17ae8:	4b09      	ldr	r3, [pc, #36]	; (17b10 <console_flush+0x40>)
   17aea:	2200      	movs	r2, #0
   17aec:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   17aee:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   17af0:	e005      	b.n	17afe <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   17af2:	88e2      	ldrh	r2, [r4, #6]
   17af4:	6821      	ldr	r1, [r4, #0]
   17af6:	2002      	movs	r0, #2
   17af8:	f7ff ffd2 	bl	17aa0 <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   17afc:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   17afe:	2c00      	cmp	r4, #0
   17b00:	d1f7      	bne.n	17af2 <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   17b02:	4628      	mov	r0, r5
   17b04:	f001 fbfc 	bl	19300 <os_mbuf_free_chain>
}
   17b08:	bd38      	pop	{r3, r4, r5, pc}
   17b0a:	bf00      	nop
   17b0c:	20000100 	.word	0x20000100
   17b10:	20006f04 	.word	0x20006f04
   17b14:	e000ed00 	.word	0xe000ed00

00017b18 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   17b18:	b508      	push	{r3, lr}
   17b1a:	f7ff ffd9 	bl	17ad0 <console_flush>
   17b1e:	bd08      	pop	{r3, pc}

00017b20 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   17b20:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   17b22:	4b12      	ldr	r3, [pc, #72]	; (17b6c <console_buffer+0x4c>)
   17b24:	781b      	ldrb	r3, [r3, #0]
   17b26:	b903      	cbnz	r3, 17b2a <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   17b28:	bd38      	pop	{r3, r4, r5, pc}
   17b2a:	460d      	mov	r5, r1
   17b2c:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   17b2e:	f7ff ffaf 	bl	17a90 <debugger_connected>
   17b32:	2800      	cmp	r0, #0
   17b34:	d0f8      	beq.n	17b28 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   17b36:	4b0e      	ldr	r3, [pc, #56]	; (17b70 <console_buffer+0x50>)
   17b38:	681b      	ldr	r3, [r3, #0]
   17b3a:	b173      	cbz	r3, 17b5a <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   17b3c:	4b0c      	ldr	r3, [pc, #48]	; (17b70 <console_buffer+0x50>)
   17b3e:	6818      	ldr	r0, [r3, #0]
   17b40:	f001 fbf0 	bl	19324 <os_mbuf_len>
   17b44:	4428      	add	r0, r5
   17b46:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   17b4a:	d2ed      	bcs.n	17b28 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   17b4c:	b2aa      	uxth	r2, r5
   17b4e:	4621      	mov	r1, r4
   17b50:	4b07      	ldr	r3, [pc, #28]	; (17b70 <console_buffer+0x50>)
   17b52:	6818      	ldr	r0, [r3, #0]
   17b54:	f001 fbf0 	bl	19338 <os_mbuf_append>
   17b58:	e7e6      	b.n	17b28 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   17b5a:	2100      	movs	r1, #0
   17b5c:	b2a8      	uxth	r0, r5
   17b5e:	f001 fd93 	bl	19688 <os_msys_get_pkthdr>
   17b62:	4b03      	ldr	r3, [pc, #12]	; (17b70 <console_buffer+0x50>)
   17b64:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   17b66:	2800      	cmp	r0, #0
   17b68:	d1e8      	bne.n	17b3c <console_buffer+0x1c>
   17b6a:	e7dd      	b.n	17b28 <console_buffer+0x8>
   17b6c:	20000100 	.word	0x20000100
   17b70:	20006f04 	.word	0x20006f04

00017b74 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   17b74:	b500      	push	{lr}
   17b76:	b083      	sub	sp, #12
   17b78:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   17b7c:	280d      	cmp	r0, #13
   17b7e:	d004      	beq.n	17b8a <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   17b80:	2101      	movs	r1, #1
   17b82:	f10d 0007 	add.w	r0, sp, #7
   17b86:	f7ff ffcb 	bl	17b20 <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   17b8a:	b003      	add	sp, #12
   17b8c:	f85d fb04 	ldr.w	pc, [sp], #4

00017b90 <console_printhex>:
void console_printhex(uint8_t v) {
   17b90:	b510      	push	{r4, lr}
   17b92:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   17b94:	2310      	movs	r3, #16
    int length = 0;
   17b96:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   17b98:	e005      	b.n	17ba6 <console_printhex+0x16>
        v = v % divisor;
   17b9a:	fbb0 f1f3 	udiv	r1, r0, r3
   17b9e:	fb03 0011 	mls	r0, r3, r1, r0
   17ba2:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   17ba4:	091b      	lsrs	r3, r3, #4
   17ba6:	b18b      	cbz	r3, 17bcc <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   17ba8:	fbb0 f4f3 	udiv	r4, r0, r3
   17bac:	f104 0130 	add.w	r1, r4, #48	; 0x30
   17bb0:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   17bb2:	2939      	cmp	r1, #57	; 0x39
   17bb4:	d902      	bls.n	17bbc <console_printhex+0x2c>
   17bb6:	f104 0157 	add.w	r1, r4, #87	; 0x57
   17bba:	b2c9      	uxtb	r1, r1
            if (length < size) {
   17bbc:	2a02      	cmp	r2, #2
   17bbe:	dcec      	bgt.n	17b9a <console_printhex+0xa>
                buffer[length++] = digit;
   17bc0:	ac02      	add	r4, sp, #8
   17bc2:	4414      	add	r4, r2
   17bc4:	f804 1c04 	strb.w	r1, [r4, #-4]
   17bc8:	3201      	adds	r2, #1
   17bca:	e7e6      	b.n	17b9a <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   17bcc:	b92a      	cbnz	r2, 17bda <console_printhex+0x4a>
   17bce:	ab02      	add	r3, sp, #8
   17bd0:	4413      	add	r3, r2
   17bd2:	2130      	movs	r1, #48	; 0x30
   17bd4:	f803 1c04 	strb.w	r1, [r3, #-4]
   17bd8:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   17bda:	2a02      	cmp	r2, #2
   17bdc:	dc04      	bgt.n	17be8 <console_printhex+0x58>
   17bde:	ab02      	add	r3, sp, #8
   17be0:	441a      	add	r2, r3
   17be2:	2300      	movs	r3, #0
   17be4:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   17be8:	2300      	movs	r3, #0
   17bea:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   17bee:	a801      	add	r0, sp, #4
   17bf0:	f002 fb73 	bl	1a2da <strlen>
   17bf4:	4601      	mov	r1, r0
   17bf6:	a801      	add	r0, sp, #4
   17bf8:	f7ff ff92 	bl	17b20 <console_buffer>
}
   17bfc:	b002      	add	sp, #8
   17bfe:	bd10      	pop	{r4, pc}

00017c00 <console_printint>:
void console_printint(int i) {
   17c00:	b508      	push	{r3, lr}
    console_printf("%d", i);
   17c02:	4601      	mov	r1, r0
   17c04:	4801      	ldr	r0, [pc, #4]	; (17c0c <console_printint+0xc>)
   17c06:	f000 f873 	bl	17cf0 <console_printf>
}
   17c0a:	bd08      	pop	{r3, pc}
   17c0c:	000269cc 	.word	0x000269cc

00017c10 <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   17c10:	b180      	cbz	r0, 17c34 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   17c12:	b570      	push	{r4, r5, r6, lr}
   17c14:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   17c16:	b161      	cbz	r1, 17c32 <console_dump+0x22>
   17c18:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   17c1a:	2400      	movs	r4, #0
   17c1c:	e007      	b.n	17c2e <console_dump+0x1e>
   17c1e:	5d30      	ldrb	r0, [r6, r4]
   17c20:	f7ff ffb6 	bl	17b90 <console_printhex>
   17c24:	2101      	movs	r1, #1
   17c26:	4804      	ldr	r0, [pc, #16]	; (17c38 <console_dump+0x28>)
   17c28:	f7ff ff7a 	bl	17b20 <console_buffer>
   17c2c:	3401      	adds	r4, #1
   17c2e:	42ac      	cmp	r4, r5
   17c30:	d3f5      	bcc.n	17c1e <console_dump+0xe>
}
   17c32:	bd70      	pop	{r4, r5, r6, pc}
   17c34:	4770      	bx	lr
   17c36:	bf00      	nop
   17c38:	000269c8 	.word	0x000269c8

00017c3c <console_out_nolock>:

int console_out_nolock(int character) {
   17c3c:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   17c3e:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   17c40:	4b0b      	ldr	r3, [pc, #44]	; (17c70 <console_out_nolock+0x34>)
   17c42:	781b      	ldrb	r3, [r3, #0]
   17c44:	b953      	cbnz	r3, 17c5c <console_out_nolock+0x20>
   17c46:	4604      	mov	r4, r0
    if ('\n' == c) {
   17c48:	2d0a      	cmp	r5, #10
   17c4a:	d009      	beq.n	17c60 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   17c4c:	4b09      	ldr	r3, [pc, #36]	; (17c74 <console_out_nolock+0x38>)
   17c4e:	2201      	movs	r2, #1
   17c50:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   17c52:	4628      	mov	r0, r5
   17c54:	f7ff ff8e 	bl	17b74 <semihosting_console_write_ch>
    return character;
   17c58:	4620      	mov	r0, r4
}
   17c5a:	bd38      	pop	{r3, r4, r5, pc}
   17c5c:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   17c5e:	e7fc      	b.n	17c5a <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   17c60:	200d      	movs	r0, #13
   17c62:	f7ff ff87 	bl	17b74 <semihosting_console_write_ch>
        console_is_midline = 0;
   17c66:	4b03      	ldr	r3, [pc, #12]	; (17c74 <console_out_nolock+0x38>)
   17c68:	2200      	movs	r2, #0
   17c6a:	601a      	str	r2, [r3, #0]
   17c6c:	e7f1      	b.n	17c52 <console_out_nolock+0x16>
   17c6e:	bf00      	nop
   17c70:	2000ddb4 	.word	0x2000ddb4
   17c74:	2000ddb8 	.word	0x2000ddb8

00017c78 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   17c78:	2000      	movs	r0, #0
   17c7a:	4770      	bx	lr

00017c7c <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   17c7c:	b570      	push	{r4, r5, r6, lr}
   17c7e:	4606      	mov	r6, r0
   17c80:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   17c82:	2400      	movs	r4, #0
   17c84:	42ac      	cmp	r4, r5
   17c86:	da07      	bge.n	17c98 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   17c88:	5d30      	ldrb	r0, [r6, r4]
   17c8a:	f7ff ffd7 	bl	17c3c <console_out_nolock>
   17c8e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17c92:	d001      	beq.n	17c98 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   17c94:	3401      	adds	r4, #1
   17c96:	e7f5      	b.n	17c84 <console_write+0x8>
    }
}
   17c98:	bd70      	pop	{r4, r5, r6, pc}

00017c9a <console_blocking_mode>:

void console_blocking_mode(void) {
   17c9a:	b508      	push	{r3, lr}
    disable_buffer();
   17c9c:	f7ff ff3c 	bl	17b18 <disable_buffer>
}
   17ca0:	bd08      	pop	{r3, pc}
	...

00017ca4 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   17ca4:	b510      	push	{r4, lr}
   17ca6:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   17ca8:	4b0d      	ldr	r3, [pc, #52]	; (17ce0 <console_pkg_init+0x3c>)
   17caa:	781b      	ldrb	r3, [r3, #0]
   17cac:	b193      	cbz	r3, 17cd4 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   17cae:	480d      	ldr	r0, [pc, #52]	; (17ce4 <console_pkg_init+0x40>)
   17cb0:	f001 f9fa 	bl	190a8 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   17cb4:	480c      	ldr	r0, [pc, #48]	; (17ce8 <console_pkg_init+0x44>)
   17cb6:	f001 fd15 	bl	196e4 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   17cba:	f7ff ffdd 	bl	17c78 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   17cbe:	b138      	cbz	r0, 17cd0 <console_pkg_init+0x2c>
   17cc0:	2000      	movs	r0, #0
   17cc2:	9000      	str	r0, [sp, #0]
   17cc4:	4b09      	ldr	r3, [pc, #36]	; (17cec <console_pkg_init+0x48>)
   17cc6:	681c      	ldr	r4, [r3, #0]
   17cc8:	4603      	mov	r3, r0
   17cca:	4602      	mov	r2, r0
   17ccc:	4601      	mov	r1, r0
   17cce:	47a0      	blx	r4
}
   17cd0:	b002      	add	sp, #8
   17cd2:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   17cd4:	461a      	mov	r2, r3
   17cd6:	4619      	mov	r1, r3
   17cd8:	4618      	mov	r0, r3
   17cda:	f000 fed1 	bl	18a80 <__assert_func>
   17cde:	bf00      	nop
   17ce0:	2000ddbc 	.word	0x2000ddbc
   17ce4:	20006f08 	.word	0x20006f08
   17ce8:	20006f18 	.word	0x20006f18
   17cec:	20000104 	.word	0x20000104

00017cf0 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   17cf0:	b40f      	push	{r0, r1, r2, r3}
   17cf2:	b510      	push	{r4, lr}
   17cf4:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   17cf6:	f000 f81f 	bl	17d38 <console_get_ticks>
   17cfa:	b160      	cbz	r0, 17d16 <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   17cfc:	4b0c      	ldr	r3, [pc, #48]	; (17d30 <console_printf+0x40>)
   17cfe:	681b      	ldr	r3, [r3, #0]
   17d00:	b10b      	cbz	r3, 17d06 <console_printf+0x16>
    num_chars = 0;
   17d02:	2400      	movs	r4, #0
   17d04:	e008      	b.n	17d18 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   17d06:	f002 f8d9 	bl	19ebc <os_time_get>
   17d0a:	4601      	mov	r1, r0
   17d0c:	4809      	ldr	r0, [pc, #36]	; (17d34 <console_printf+0x44>)
   17d0e:	f002 fd97 	bl	1a840 <printf>
   17d12:	4604      	mov	r4, r0
   17d14:	e000      	b.n	17d18 <console_printf+0x28>
    num_chars = 0;
   17d16:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   17d18:	a905      	add	r1, sp, #20
   17d1a:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   17d1c:	9804      	ldr	r0, [sp, #16]
   17d1e:	f002 fdbf 	bl	1a8a0 <vprintf>
    va_end(args);

    return num_chars;
}
   17d22:	4420      	add	r0, r4
   17d24:	b002      	add	sp, #8
   17d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17d2a:	b004      	add	sp, #16
   17d2c:	4770      	bx	lr
   17d2e:	bf00      	nop
   17d30:	2000ddb8 	.word	0x2000ddb8
   17d34:	000269d0 	.word	0x000269d0

00017d38 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   17d38:	4b01      	ldr	r3, [pc, #4]	; (17d40 <console_get_ticks+0x8>)
   17d3a:	7818      	ldrb	r0, [r3, #0]
   17d3c:	4770      	bx	lr
   17d3e:	bf00      	nop
   17d40:	20006f24 	.word	0x20006f24

00017d44 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   17d44:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   17d46:	f000 fe9b 	bl	18a80 <__assert_func>
	...

00017d4c <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   17d4c:	4b01      	ldr	r3, [pc, #4]	; (17d54 <sysinit_start+0x8>)
   17d4e:	2201      	movs	r2, #1
   17d50:	701a      	strb	r2, [r3, #0]
}
   17d52:	4770      	bx	lr
   17d54:	2000ddbc 	.word	0x2000ddbc

00017d58 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   17d58:	4b01      	ldr	r3, [pc, #4]	; (17d60 <sysinit_end+0x8>)
   17d5a:	2200      	movs	r2, #0
   17d5c:	701a      	strb	r2, [r3, #0]
}
   17d5e:	4770      	bx	lr
   17d60:	2000ddbc 	.word	0x2000ddbc

00017d64 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   17d64:	4a09      	ldr	r2, [pc, #36]	; (17d8c <NVIC_Relocate+0x28>)
   17d66:	4b0a      	ldr	r3, [pc, #40]	; (17d90 <NVIC_Relocate+0x2c>)
   17d68:	429a      	cmp	r2, r3
   17d6a:	d00a      	beq.n	17d82 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   17d6c:	2300      	movs	r3, #0
   17d6e:	e006      	b.n	17d7e <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   17d70:	4a07      	ldr	r2, [pc, #28]	; (17d90 <NVIC_Relocate+0x2c>)
   17d72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   17d76:	4a05      	ldr	r2, [pc, #20]	; (17d8c <NVIC_Relocate+0x28>)
   17d78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   17d7c:	3301      	adds	r3, #1
   17d7e:	2b35      	cmp	r3, #53	; 0x35
   17d80:	ddf6      	ble.n	17d70 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   17d82:	4a02      	ldr	r2, [pc, #8]	; (17d8c <NVIC_Relocate+0x28>)
   17d84:	4b03      	ldr	r3, [pc, #12]	; (17d94 <NVIC_Relocate+0x30>)
   17d86:	609a      	str	r2, [r3, #8]
#endif
}
   17d88:	4770      	bx	lr
   17d8a:	bf00      	nop
   17d8c:	20000000 	.word	0x20000000
   17d90:	00008020 	.word	0x00008020
   17d94:	e000ed00 	.word	0xe000ed00

00017d98 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   17d98:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   17d9a:	2400      	movs	r4, #0
   17d9c:	e000      	b.n	17da0 <hal_gpio_irq_handler+0x8>
   17d9e:	3401      	adds	r4, #1
   17da0:	2c07      	cmp	r4, #7
   17da2:	dc1c      	bgt.n	17dde <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   17da4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   17da8:	4a0d      	ldr	r2, [pc, #52]	; (17de0 <hal_gpio_irq_handler+0x48>)
   17daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17dae:	2b00      	cmp	r3, #0
   17db0:	d0f5      	beq.n	17d9e <hal_gpio_irq_handler+0x6>
   17db2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   17db6:	2301      	movs	r3, #1
   17db8:	40a3      	lsls	r3, r4
   17dba:	421a      	tst	r2, r3
   17dbc:	d0ef      	beq.n	17d9e <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   17dbe:	f104 0340 	add.w	r3, r4, #64	; 0x40
   17dc2:	4a07      	ldr	r2, [pc, #28]	; (17de0 <hal_gpio_irq_handler+0x48>)
   17dc4:	2100      	movs	r1, #0
   17dc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   17dca:	4b06      	ldr	r3, [pc, #24]	; (17de4 <hal_gpio_irq_handler+0x4c>)
   17dcc:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   17dd0:	2a00      	cmp	r2, #0
   17dd2:	d0e4      	beq.n	17d9e <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   17dd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   17dd8:	6858      	ldr	r0, [r3, #4]
   17dda:	4790      	blx	r2
   17ddc:	e7df      	b.n	17d9e <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   17dde:	bd10      	pop	{r4, pc}
   17de0:	40006000 	.word	0x40006000
   17de4:	20006f28 	.word	0x20006f28

00017de8 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   17de8:	4b06      	ldr	r3, [pc, #24]	; (17e04 <hal_gpio_irq_setup+0x1c>)
   17dea:	781b      	ldrb	r3, [r3, #0]
   17dec:	b94b      	cbnz	r3, 17e02 <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   17dee:	4b06      	ldr	r3, [pc, #24]	; (17e08 <hal_gpio_irq_setup+0x20>)
   17df0:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   17df2:	4a06      	ldr	r2, [pc, #24]	; (17e0c <hal_gpio_irq_setup+0x24>)
   17df4:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17df6:	4b06      	ldr	r3, [pc, #24]	; (17e10 <hal_gpio_irq_setup+0x28>)
   17df8:	2240      	movs	r2, #64	; 0x40
   17dfa:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   17dfc:	4b01      	ldr	r3, [pc, #4]	; (17e04 <hal_gpio_irq_setup+0x1c>)
   17dfe:	2201      	movs	r2, #1
   17e00:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   17e02:	4770      	bx	lr
   17e04:	20006f68 	.word	0x20006f68
   17e08:	e000ed00 	.word	0xe000ed00
   17e0c:	00017d99 	.word	0x00017d99
   17e10:	e000e100 	.word	0xe000e100

00017e14 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   17e14:	2000      	movs	r0, #0
   17e16:	2807      	cmp	r0, #7
   17e18:	dc05      	bgt.n	17e26 <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   17e1a:	4b04      	ldr	r3, [pc, #16]	; (17e2c <hal_gpio_find_empty_slot+0x18>)
   17e1c:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   17e20:	b11b      	cbz	r3, 17e2a <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   17e22:	3001      	adds	r0, #1
   17e24:	e7f7      	b.n	17e16 <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   17e26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   17e2a:	4770      	bx	lr
   17e2c:	20006f28 	.word	0x20006f28

00017e30 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   17e30:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   17e32:	2000      	movs	r0, #0
   17e34:	e000      	b.n	17e38 <hal_gpio_find_pin+0x8>
   17e36:	3001      	adds	r0, #1
   17e38:	2807      	cmp	r0, #7
   17e3a:	dc0e      	bgt.n	17e5a <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   17e3c:	4b08      	ldr	r3, [pc, #32]	; (17e60 <hal_gpio_find_pin+0x30>)
   17e3e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   17e42:	2b00      	cmp	r3, #0
   17e44:	d0f7      	beq.n	17e36 <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   17e46:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   17e4a:	4a06      	ldr	r2, [pc, #24]	; (17e64 <hal_gpio_find_pin+0x34>)
   17e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e50:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   17e54:	428b      	cmp	r3, r1
   17e56:	d1ee      	bne.n	17e36 <hal_gpio_find_pin+0x6>
   17e58:	e001      	b.n	17e5e <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   17e5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   17e5e:	4770      	bx	lr
   17e60:	20006f28 	.word	0x20006f28
   17e64:	40006000 	.word	0x40006000

00017e68 <hal_gpio_init_in>:
    switch (pull) {
   17e68:	2901      	cmp	r1, #1
   17e6a:	d003      	beq.n	17e74 <hal_gpio_init_in+0xc>
   17e6c:	2902      	cmp	r1, #2
   17e6e:	d00f      	beq.n	17e90 <hal_gpio_init_in+0x28>
        conf = 0;
   17e70:	2100      	movs	r1, #0
        break;
   17e72:	e000      	b.n	17e76 <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   17e74:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   17e76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   17e7a:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   17e7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   17e82:	2301      	movs	r3, #1
   17e84:	fa03 f000 	lsl.w	r0, r3, r0
   17e88:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   17e8c:	2000      	movs	r0, #0
   17e8e:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   17e90:	2104      	movs	r1, #4
   17e92:	e7f0      	b.n	17e76 <hal_gpio_init_in+0xe>

00017e94 <hal_gpio_init_out>:
    if (val) {
   17e94:	b999      	cbnz	r1, 17ebe <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   17e96:	2301      	movs	r3, #1
   17e98:	4083      	lsls	r3, r0
   17e9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   17e9e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   17ea2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   17ea6:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   17eaa:	2103      	movs	r1, #3
   17eac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   17eb0:	2301      	movs	r3, #1
   17eb2:	fa03 f000 	lsl.w	r0, r3, r0
   17eb6:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   17eba:	2000      	movs	r0, #0
   17ebc:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   17ebe:	2301      	movs	r3, #1
   17ec0:	4083      	lsls	r3, r0
   17ec2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   17ec6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   17eca:	e7ea      	b.n	17ea2 <hal_gpio_init_out+0xe>

00017ecc <hal_gpio_write>:
    if (val) {
   17ecc:	b939      	cbnz	r1, 17ede <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   17ece:	2301      	movs	r3, #1
   17ed0:	fa03 f000 	lsl.w	r0, r3, r0
   17ed4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17ed8:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   17edc:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   17ede:	2301      	movs	r3, #1
   17ee0:	fa03 f000 	lsl.w	r0, r3, r0
   17ee4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17ee8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   17eec:	4770      	bx	lr

00017eee <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   17eee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17ef2:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   17ef6:	2301      	movs	r3, #1
   17ef8:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   17efa:	421a      	tst	r2, r3
   17efc:	d108      	bne.n	17f10 <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   17efe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17f02:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   17f06:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   17f0a:	f000 0001 	and.w	r0, r0, #1
}
   17f0e:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   17f10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17f14:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   17f18:	fa23 f000 	lsr.w	r0, r3, r0
   17f1c:	f000 0001 	and.w	r0, r0, #1
   17f20:	4770      	bx	lr
	...

00017f24 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   17f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17f28:	4680      	mov	r8, r0
   17f2a:	460f      	mov	r7, r1
   17f2c:	4616      	mov	r6, r2
   17f2e:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   17f30:	f7ff ff5a 	bl	17de8 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   17f34:	f7ff ff6e 	bl	17e14 <hal_gpio_find_empty_slot>
    if (i < 0) {
   17f38:	1e05      	subs	r5, r0, #0
   17f3a:	db27      	blt.n	17f8c <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   17f3c:	f89d 1018 	ldrb.w	r1, [sp, #24]
   17f40:	4640      	mov	r0, r8
   17f42:	f7ff ff91 	bl	17e68 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   17f46:	2c02      	cmp	r4, #2
   17f48:	d01d      	beq.n	17f86 <hal_gpio_irq_init+0x62>
   17f4a:	2c03      	cmp	r4, #3
   17f4c:	d018      	beq.n	17f80 <hal_gpio_irq_init+0x5c>
   17f4e:	2c01      	cmp	r4, #1
   17f50:	d002      	beq.n	17f58 <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   17f52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17f56:	e011      	b.n	17f7c <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   17f58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   17f5c:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   17f60:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   17f64:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   17f68:	4b0a      	ldr	r3, [pc, #40]	; (17f94 <hal_gpio_irq_init+0x70>)
   17f6a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   17f6e:	4b0a      	ldr	r3, [pc, #40]	; (17f98 <hal_gpio_irq_init+0x74>)
   17f70:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   17f74:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   17f78:	605e      	str	r6, [r3, #4]

    return 0;
   17f7a:	2000      	movs	r0, #0
}
   17f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   17f80:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   17f84:	e7ea      	b.n	17f5c <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   17f86:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   17f8a:	e7e7      	b.n	17f5c <hal_gpio_irq_init+0x38>
        return -1;
   17f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17f90:	e7f4      	b.n	17f7c <hal_gpio_irq_init+0x58>
   17f92:	bf00      	nop
   17f94:	40006000 	.word	0x40006000
   17f98:	20006f28 	.word	0x20006f28

00017f9c <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   17f9c:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   17f9e:	f7ff ff47 	bl	17e30 <hal_gpio_find_pin>
    if (i < 0) {
   17fa2:	2800      	cmp	r0, #0
   17fa4:	db0a      	blt.n	17fbc <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   17fa6:	4a06      	ldr	r2, [pc, #24]	; (17fc0 <hal_gpio_irq_enable+0x24>)
   17fa8:	f100 0340 	add.w	r3, r0, #64	; 0x40
   17fac:	2100      	movs	r1, #0
   17fae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   17fb2:	2301      	movs	r3, #1
   17fb4:	fa03 f000 	lsl.w	r0, r3, r0
   17fb8:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   17fbc:	bd08      	pop	{r3, pc}
   17fbe:	bf00      	nop
   17fc0:	40006000 	.word	0x40006000

00017fc4 <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   17fc4:	3801      	subs	r0, #1
   17fc6:	bf00      	nop
   17fc8:	bf00      	nop
   17fca:	bf00      	nop
   17fcc:	bf00      	nop
   17fce:	bf00      	nop
   17fd0:	bf00      	nop
   17fd2:	bf00      	nop
   17fd4:	bf00      	nop
   17fd6:	bf00      	nop
   17fd8:	bf00      	nop
   17fda:	bf00      	nop
   17fdc:	bf00      	nop
   17fde:	bf00      	nop
   17fe0:	bf00      	nop
   17fe2:	bf00      	nop
   17fe4:	bf00      	nop
   17fe6:	bf00      	nop
   17fe8:	bf00      	nop
   17fea:	bf00      	nop
   17fec:	bf00      	nop
   17fee:	bf00      	nop
   17ff0:	bf00      	nop
   17ff2:	bf00      	nop
   17ff4:	bf00      	nop
   17ff6:	bf00      	nop
   17ff8:	bf00      	nop
   17ffa:	bf00      	nop
   17ffc:	bf00      	nop
   17ffe:	bf00      	nop
   18000:	bf00      	nop
   18002:	bf00      	nop
   18004:	bf00      	nop
   18006:	bf00      	nop
   18008:	bf00      	nop
   1800a:	bf00      	nop
   1800c:	bf00      	nop
   1800e:	bf00      	nop
   18010:	bf00      	nop
   18012:	bf00      	nop
   18014:	bf00      	nop
   18016:	bf00      	nop
   18018:	bf00      	nop
   1801a:	bf00      	nop
   1801c:	bf00      	nop
   1801e:	bf00      	nop
   18020:	bf00      	nop
   18022:	bf00      	nop
   18024:	bf00      	nop
   18026:	bf00      	nop
   18028:	bf00      	nop
   1802a:	bf00      	nop
   1802c:	bf00      	nop
   1802e:	bf00      	nop
   18030:	bf00      	nop
   18032:	bf00      	nop
   18034:	bf00      	nop
   18036:	bf00      	nop
   18038:	bf00      	nop
   1803a:	d1c3      	bne.n	17fc4 <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   1803c:	4770      	bx	lr
	...

00018040 <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   18040:	2801      	cmp	r0, #1
   18042:	d806      	bhi.n	18052 <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   18044:	4b06      	ldr	r3, [pc, #24]	; (18060 <hal_i2c_resolve+0x20>)
   18046:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1804a:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   1804c:	b12b      	cbz	r3, 1805a <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   1804e:	2000      	movs	r0, #0
}
   18050:	4770      	bx	lr
        *out_i2c = NULL;
   18052:	2300      	movs	r3, #0
   18054:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   18056:	2002      	movs	r0, #2
   18058:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   1805a:	2002      	movs	r0, #2
   1805c:	4770      	bx	lr
   1805e:	bf00      	nop
   18060:	000269d8 	.word	0x000269d8

00018064 <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   18064:	b148      	cbz	r0, 1807a <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   18066:	f010 0f04 	tst.w	r0, #4
   1806a:	d107      	bne.n	1807c <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   1806c:	f010 0f02 	tst.w	r0, #2
   18070:	d101      	bne.n	18076 <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   18072:	2001      	movs	r0, #1
    }
}
   18074:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   18076:	2004      	movs	r0, #4
   18078:	4770      	bx	lr
   1807a:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   1807c:	2005      	movs	r0, #5
   1807e:	4770      	bx	lr

00018080 <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   18080:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18084:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   18088:	fa23 f000 	lsr.w	r0, r3, r0
}
   1808c:	f000 0001 	and.w	r0, r0, #1
   18090:	4770      	bx	lr

00018092 <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   18092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18096:	4605      	mov	r5, r0
   18098:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   1809a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1809e:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   180a2:	f240 630c 	movw	r3, #1548	; 0x60c
   180a6:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   180aa:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   180ae:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   180b2:	2101      	movs	r1, #1
   180b4:	f7ff ff0a 	bl	17ecc <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   180b8:	2101      	movs	r1, #1
   180ba:	4630      	mov	r0, r6
   180bc:	f7ff ff06 	bl	17ecc <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   180c0:	f240 630d 	movw	r3, #1549	; 0x60d
   180c4:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   180c8:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   180cc:	2004      	movs	r0, #4
   180ce:	f7ff ff79 	bl	17fc4 <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   180d2:	2400      	movs	r4, #0
   180d4:	2c08      	cmp	r4, #8
   180d6:	dc14      	bgt.n	18102 <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   180d8:	4630      	mov	r0, r6
   180da:	f7ff ffd1 	bl	18080 <read_gpio_inbuffer>
   180de:	b978      	cbnz	r0, 18100 <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   180e0:	2100      	movs	r1, #0
   180e2:	4628      	mov	r0, r5
   180e4:	f7ff fef2 	bl	17ecc <hal_gpio_write>
        hal_i2c_delay_us(4);
   180e8:	2004      	movs	r0, #4
   180ea:	f7ff ff6b 	bl	17fc4 <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   180ee:	2101      	movs	r1, #1
   180f0:	4628      	mov	r0, r5
   180f2:	f7ff feeb 	bl	17ecc <hal_gpio_write>
        hal_i2c_delay_us(4);
   180f6:	2004      	movs	r0, #4
   180f8:	f7ff ff64 	bl	17fc4 <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   180fc:	3401      	adds	r4, #1
   180fe:	e7e9      	b.n	180d4 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   18100:	b154      	cbz	r4, 18118 <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   18102:	2100      	movs	r1, #0
   18104:	4630      	mov	r0, r6
   18106:	f7ff fee1 	bl	17ecc <hal_gpio_write>
    hal_i2c_delay_us(4);
   1810a:	2004      	movs	r0, #4
   1810c:	f7ff ff5a 	bl	17fc4 <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   18110:	2101      	movs	r1, #1
   18112:	4630      	mov	r0, r6
   18114:	f7ff feda 	bl	17ecc <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   18118:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1811c:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   18120:	f240 620c 	movw	r2, #1548	; 0x60c
   18124:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   18128:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1812c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   18130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018134 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   18134:	b5f0      	push	{r4, r5, r6, r7, lr}
   18136:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   18138:	b1a1      	cbz	r1, 18164 <hal_i2c_init+0x30>
   1813a:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1813c:	a901      	add	r1, sp, #4
   1813e:	f7ff ff7f 	bl	18040 <hal_i2c_resolve>
    if (rc != 0) {
   18142:	4606      	mov	r6, r0
   18144:	bba8      	cbnz	r0, 181b2 <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   18146:	9b01      	ldr	r3, [sp, #4]
   18148:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   1814a:	68a3      	ldr	r3, [r4, #8]
   1814c:	2bfa      	cmp	r3, #250	; 0xfa
   1814e:	d035      	beq.n	181bc <hal_i2c_init+0x88>
   18150:	d90e      	bls.n	18170 <hal_i2c_init+0x3c>
   18152:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   18156:	d02f      	beq.n	181b8 <hal_i2c_init+0x84>
   18158:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   1815c:	d131      	bne.n	181c2 <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   1815e:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   18162:	e009      	b.n	18178 <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   18164:	2300      	movs	r3, #0
   18166:	461a      	mov	r2, r3
   18168:	4619      	mov	r1, r3
   1816a:	4618      	mov	r0, r3
   1816c:	f000 fc88 	bl	18a80 <__assert_func>
    switch (cfg->i2c_frequency) {
   18170:	2b64      	cmp	r3, #100	; 0x64
   18172:	d126      	bne.n	181c2 <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   18174:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   18178:	6861      	ldr	r1, [r4, #4]
   1817a:	6820      	ldr	r0, [r4, #0]
   1817c:	f7ff ff89 	bl	18092 <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   18180:	6823      	ldr	r3, [r4, #0]
   18182:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18186:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1818a:	f240 610c 	movw	r1, #1548	; 0x60c
   1818e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   18192:	6863      	ldr	r3, [r4, #4]
   18194:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   18198:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   1819c:	6823      	ldr	r3, [r4, #0]
   1819e:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   181a2:	6863      	ldr	r3, [r4, #4]
   181a4:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   181a8:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   181ac:	2305      	movs	r3, #5
   181ae:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   181b2:	4630      	mov	r0, r6
   181b4:	b003      	add	sp, #12
   181b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   181b8:	4f03      	ldr	r7, [pc, #12]	; (181c8 <hal_i2c_init+0x94>)
        break;
   181ba:	e7dd      	b.n	18178 <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   181bc:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   181c0:	e7da      	b.n	18178 <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   181c2:	2602      	movs	r6, #2
   181c4:	e7f5      	b.n	181b2 <hal_i2c_init+0x7e>
   181c6:	bf00      	nop
   181c8:	06147ae9 	.word	0x06147ae9

000181cc <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   181cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181d0:	b083      	sub	sp, #12
   181d2:	4688      	mov	r8, r1
   181d4:	4615      	mov	r5, r2
   181d6:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   181d8:	a901      	add	r1, sp, #4
   181da:	f7ff ff31 	bl	18040 <hal_i2c_resolve>
    if (rc != 0) {
   181de:	4681      	mov	r9, r0
   181e0:	b118      	cbz	r0, 181ea <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   181e2:	4648      	mov	r0, r9
   181e4:	b003      	add	sp, #12
   181e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   181ea:	9b01      	ldr	r3, [sp, #4]
   181ec:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   181ee:	f898 3000 	ldrb.w	r3, [r8]
   181f2:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   181f6:	2300      	movs	r3, #0
   181f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   181fc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   18200:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   18204:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   18208:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   1820c:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   18210:	2300      	movs	r3, #0
   18212:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   18216:	2301      	movs	r3, #1
   18218:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   1821a:	f000 fe61 	bl	18ee0 <os_cputime_get32>
   1821e:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   18222:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   18226:	f7ff fe62 	bl	17eee <hal_gpio_read>
   1822a:	b1b0      	cbz	r0, 1825a <hal_i2c_master_write+0x8e>
   1822c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   18230:	b99b      	cbnz	r3, 1825a <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   18232:	f000 fe55 	bl	18ee0 <os_cputime_get32>
   18236:	1b80      	subs	r0, r0, r6
   18238:	2800      	cmp	r0, #0
   1823a:	dbf2      	blt.n	18222 <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   1823c:	2300      	movs	r3, #0
   1823e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   18242:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   18246:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   1824a:	f7ff ff22 	bl	18092 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1824e:	2305      	movs	r3, #5
   18250:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   18254:	f1bb 0b01 	subs.w	fp, fp, #1
   18258:	d1da      	bne.n	18210 <hal_i2c_master_write+0x44>
    start = os_time_get();
   1825a:	f001 fe2f 	bl	19ebc <os_time_get>
   1825e:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   18260:	464f      	mov	r7, r9
   18262:	e003      	b.n	1826c <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   18264:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18268:	b9db      	cbnz	r3, 182a2 <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   1826a:	3701      	adds	r7, #1
   1826c:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   18270:	42bb      	cmp	r3, r7
   18272:	dd24      	ble.n	182be <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   18274:	2300      	movs	r3, #0
   18276:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   1827a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1827e:	5ddb      	ldrb	r3, [r3, r7]
   18280:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   18284:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   18288:	2b00      	cmp	r3, #0
   1828a:	d1eb      	bne.n	18264 <hal_i2c_master_write+0x98>
   1828c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18290:	2b00      	cmp	r3, #0
   18292:	d1e7      	bne.n	18264 <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   18294:	f001 fe12 	bl	19ebc <os_time_get>
   18298:	1b80      	subs	r0, r0, r6
   1829a:	42a8      	cmp	r0, r5
   1829c:	d9f2      	bls.n	18284 <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   1829e:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   182a2:	2301      	movs	r3, #1
   182a4:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   182a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   182aa:	2b00      	cmp	r3, #0
   182ac:	d099      	beq.n	181e2 <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   182ae:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   182b2:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   182b6:	f7ff fed5 	bl	18064 <hal_i2c_convert_status>
   182ba:	4681      	mov	r9, r0
   182bc:	e791      	b.n	181e2 <hal_i2c_master_write+0x16>
    if (last_op) {
   182be:	f1ba 0f00 	cmp.w	sl, #0
   182c2:	d08e      	beq.n	181e2 <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   182c4:	2300      	movs	r3, #0
   182c6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   182ca:	2301      	movs	r3, #1
   182cc:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   182ce:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   182d2:	b953      	cbnz	r3, 182ea <hal_i2c_master_write+0x11e>
   182d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   182d8:	b93b      	cbnz	r3, 182ea <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   182da:	f001 fdef 	bl	19ebc <os_time_get>
   182de:	1b80      	subs	r0, r0, r6
   182e0:	42a8      	cmp	r0, r5
   182e2:	d9f4      	bls.n	182ce <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   182e4:	f04f 0903 	mov.w	r9, #3
   182e8:	e7db      	b.n	182a2 <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   182ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   182ee:	2b00      	cmp	r3, #0
   182f0:	d1d7      	bne.n	182a2 <hal_i2c_master_write+0xd6>
   182f2:	e776      	b.n	181e2 <hal_i2c_master_write+0x16>

000182f4 <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   182f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182f8:	b085      	sub	sp, #20
   182fa:	460f      	mov	r7, r1
   182fc:	4615      	mov	r5, r2
   182fe:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   18300:	a903      	add	r1, sp, #12
   18302:	f7ff fe9d 	bl	18040 <hal_i2c_resolve>
    if (rc != 0) {
   18306:	4681      	mov	r9, r0
   18308:	b118      	cbz	r0, 18312 <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   1830a:	4648      	mov	r0, r9
   1830c:	b005      	add	sp, #20
   1830e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   18312:	9b03      	ldr	r3, [sp, #12]
   18314:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   18316:	f001 fdd1 	bl	19ebc <os_time_get>
   1831a:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   1831c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18320:	b11b      	cbz	r3, 1832a <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   18322:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   18326:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   1832a:	2300      	movs	r3, #0
   1832c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   18330:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   18334:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   18338:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   1833c:	783b      	ldrb	r3, [r7, #0]
   1833e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   18342:	887b      	ldrh	r3, [r7, #2]
   18344:	2b01      	cmp	r3, #1
   18346:	d02e      	beq.n	183a6 <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   18348:	2301      	movs	r3, #1
   1834a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   1834e:	46a2      	mov	sl, r4
    int retry = 2;
   18350:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   18354:	2300      	movs	r3, #0
   18356:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   1835a:	2301      	movs	r3, #1
   1835c:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   18360:	f000 fdbe 	bl	18ee0 <os_cputime_get32>
   18364:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   18368:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1836c:	f7ff fdbf 	bl	17eee <hal_gpio_read>
   18370:	b1b8      	cbz	r0, 183a2 <hal_i2c_master_read+0xae>
   18372:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   18376:	b9a3      	cbnz	r3, 183a2 <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   18378:	f000 fdb2 	bl	18ee0 <os_cputime_get32>
   1837c:	eba0 0008 	sub.w	r0, r0, r8
   18380:	2800      	cmp	r0, #0
   18382:	dbf1      	blt.n	18368 <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   18384:	2300      	movs	r3, #0
   18386:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1838a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1838e:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   18392:	f7ff fe7e 	bl	18092 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   18396:	2305      	movs	r3, #5
   18398:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   1839c:	f1bb 0b01 	subs.w	fp, fp, #1
   183a0:	d1d8      	bne.n	18354 <hal_i2c_master_read+0x60>
    int retry = 2;
   183a2:	46c8      	mov	r8, r9
   183a4:	e017      	b.n	183d6 <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   183a6:	9b01      	ldr	r3, [sp, #4]
   183a8:	2b00      	cmp	r3, #0
   183aa:	d0cd      	beq.n	18348 <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   183ac:	2302      	movs	r3, #2
   183ae:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   183b2:	e7cc      	b.n	1834e <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   183b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   183b8:	bb0b      	cbnz	r3, 183fe <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   183ba:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   183be:	687b      	ldr	r3, [r7, #4]
   183c0:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   183c4:	887b      	ldrh	r3, [r7, #2]
   183c6:	3b02      	subs	r3, #2
   183c8:	4543      	cmp	r3, r8
   183ca:	d02a      	beq.n	18422 <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   183cc:	2300      	movs	r3, #0
   183ce:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   183d2:	f108 0801 	add.w	r8, r8, #1
   183d6:	887b      	ldrh	r3, [r7, #2]
   183d8:	4543      	cmp	r3, r8
   183da:	dd96      	ble.n	1830a <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   183dc:	2301      	movs	r3, #1
   183de:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   183e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   183e4:	2b00      	cmp	r3, #0
   183e6:	d1e5      	bne.n	183b4 <hal_i2c_master_read+0xc0>
   183e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   183ec:	2b00      	cmp	r3, #0
   183ee:	d1e1      	bne.n	183b4 <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   183f0:	f001 fd64 	bl	19ebc <os_time_get>
   183f4:	1b80      	subs	r0, r0, r6
   183f6:	42a8      	cmp	r0, r5
   183f8:	d9f2      	bls.n	183e0 <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   183fa:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   183fe:	2301      	movs	r3, #1
   18400:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   18402:	2300      	movs	r3, #0
   18404:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   18408:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1840c:	2b00      	cmp	r3, #0
   1840e:	f43f af7c 	beq.w	1830a <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   18412:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   18416:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   1841a:	f7ff fe23 	bl	18064 <hal_i2c_convert_status>
   1841e:	4681      	mov	r9, r0
   18420:	e773      	b.n	1830a <hal_i2c_master_read+0x16>
            if (last_op) {
   18422:	9b01      	ldr	r3, [sp, #4]
   18424:	2b00      	cmp	r3, #0
   18426:	d0d1      	beq.n	183cc <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   18428:	2302      	movs	r3, #2
   1842a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1842e:	e7cd      	b.n	183cc <hal_i2c_master_read+0xd8>

00018430 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   18430:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   18432:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   18434:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   18438:	b32b      	cbz	r3, 18486 <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   1843a:	2300      	movs	r3, #0
   1843c:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   18440:	7843      	ldrb	r3, [r0, #1]
   18442:	b303      	cbz	r3, 18486 <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   18444:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   18448:	88c3      	ldrh	r3, [r0, #6]
   1844a:	fa13 f382 	uxtah	r3, r3, r2
   1844e:	b29b      	uxth	r3, r3
   18450:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   18452:	8881      	ldrh	r1, [r0, #4]
   18454:	428b      	cmp	r3, r1
   18456:	d217      	bcs.n	18488 <nrf52_irqm_handler+0x58>
   18458:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   1845a:	6984      	ldr	r4, [r0, #24]
   1845c:	4414      	add	r4, r2
   1845e:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   18460:	1acb      	subs	r3, r1, r3
   18462:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   18464:	2bff      	cmp	r3, #255	; 0xff
   18466:	bf28      	it	cs
   18468:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   1846a:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   1846e:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   18472:	69c1      	ldr	r1, [r0, #28]
   18474:	b129      	cbz	r1, 18482 <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   18476:	440a      	add	r2, r1
   18478:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   1847a:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   1847e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   18482:	2301      	movs	r3, #1
   18484:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   18486:	bd38      	pop	{r3, r4, r5, pc}
   18488:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   1848a:	6a03      	ldr	r3, [r0, #32]
   1848c:	b10b      	cbz	r3, 18492 <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   1848e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   18490:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   18492:	2300      	movs	r3, #0
   18494:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   18496:	2340      	movs	r3, #64	; 0x40
   18498:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1849c:	e7f3      	b.n	18486 <nrf52_irqm_handler+0x56>
	...

000184a0 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   184a0:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   184a2:	4b04      	ldr	r3, [pc, #16]	; (184b4 <nrf52_spi0_irq_handler+0x14>)
   184a4:	781b      	ldrb	r3, [r3, #0]
   184a6:	b103      	cbz	r3, 184aa <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   184a8:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   184aa:	4802      	ldr	r0, [pc, #8]	; (184b4 <nrf52_spi0_irq_handler+0x14>)
   184ac:	f7ff ffc0 	bl	18430 <nrf52_irqm_handler>
}
   184b0:	e7fa      	b.n	184a8 <nrf52_spi0_irq_handler+0x8>
   184b2:	bf00      	nop
   184b4:	2000ddc0 	.word	0x2000ddc0

000184b8 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   184b8:	2301      	movs	r3, #1
   184ba:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   184bc:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   184c0:	2b00      	cmp	r3, #0
   184c2:	d0fb      	beq.n	184bc <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   184c4:	2300      	movs	r3, #0
   184c6:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   184ca:	4770      	bx	lr

000184cc <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   184cc:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   184ce:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   184d0:	780b      	ldrb	r3, [r1, #0]
   184d2:	2b03      	cmp	r3, #3
   184d4:	d80c      	bhi.n	184f0 <hal_spi_config_slave+0x24>
   184d6:	e8df f003 	tbb	[pc, r3]
   184da:	0e02      	.short	0x0e02
   184dc:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   184de:	2300      	movs	r3, #0
    rc = 0;
   184e0:	4618      	mov	r0, r3
   184e2:	e00a      	b.n	184fa <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   184e4:	2304      	movs	r3, #4
    rc = 0;
   184e6:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   184e8:	e007      	b.n	184fa <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   184ea:	2306      	movs	r3, #6
    rc = 0;
   184ec:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   184ee:	e004      	b.n	184fa <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   184f0:	2300      	movs	r3, #0
            rc = EINVAL;
   184f2:	2016      	movs	r0, #22
            break;
   184f4:	e001      	b.n	184fa <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   184f6:	2302      	movs	r3, #2
    rc = 0;
   184f8:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   184fa:	784c      	ldrb	r4, [r1, #1]
   184fc:	2c01      	cmp	r4, #1
   184fe:	d006      	beq.n	1850e <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   18500:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   18504:	788b      	ldrb	r3, [r1, #2]
   18506:	b92b      	cbnz	r3, 18514 <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   18508:	f85d 4b04 	ldr.w	r4, [sp], #4
   1850c:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   1850e:	f043 0301 	orr.w	r3, r3, #1
   18512:	e7f5      	b.n	18500 <hal_spi_config_slave+0x34>
            rc = EINVAL;
   18514:	2016      	movs	r0, #22
    return rc;
   18516:	e7f7      	b.n	18508 <hal_spi_config_slave+0x3c>

00018518 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   18518:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   1851a:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   1851c:	2501      	movs	r5, #1
   1851e:	409d      	lsls	r5, r3
   18520:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   18524:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   18528:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1852c:	2503      	movs	r5, #3
   1852e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   18532:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   18534:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   18538:	2500      	movs	r5, #0
   1853a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   1853e:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   18540:	780c      	ldrb	r4, [r1, #0]
   18542:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   18546:	784c      	ldrb	r4, [r1, #1]
   18548:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   1854c:	7889      	ldrb	r1, [r1, #2]
   1854e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   18552:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18556:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1855a:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1855e:	4919      	ldr	r1, [pc, #100]	; (185c4 <hal_spi_init_master+0xac>)
   18560:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18562:	3310      	adds	r3, #16
   18564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   18568:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1856c:	42ab      	cmp	r3, r5
   1856e:	db22      	blt.n	185b6 <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18570:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   18574:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   18578:	22e0      	movs	r2, #224	; 0xe0
   1857a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   1857e:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   18582:	2b00      	cmp	r3, #0
   18584:	db08      	blt.n	18598 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18586:	f003 011f 	and.w	r1, r3, #31
   1858a:	095b      	lsrs	r3, r3, #5
   1858c:	2201      	movs	r2, #1
   1858e:	408a      	lsls	r2, r1
   18590:	3360      	adds	r3, #96	; 0x60
   18592:	490d      	ldr	r1, [pc, #52]	; (185c8 <hal_spi_init_master+0xb0>)
   18594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   18598:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1859c:	2b00      	cmp	r3, #0
   1859e:	db07      	blt.n	185b0 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   185a0:	f003 011f 	and.w	r1, r3, #31
   185a4:	095b      	lsrs	r3, r3, #5
   185a6:	2201      	movs	r2, #1
   185a8:	408a      	lsls	r2, r1
   185aa:	4907      	ldr	r1, [pc, #28]	; (185c8 <hal_spi_init_master+0xb0>)
   185ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   185b0:	2000      	movs	r0, #0
   185b2:	bc30      	pop	{r4, r5}
   185b4:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   185b6:	f003 030f 	and.w	r3, r3, #15
   185ba:	4a04      	ldr	r2, [pc, #16]	; (185cc <hal_spi_init_master+0xb4>)
   185bc:	441a      	add	r2, r3
   185be:	23e0      	movs	r3, #224	; 0xe0
   185c0:	7613      	strb	r3, [r2, #24]
   185c2:	e7dc      	b.n	1857e <hal_spi_init_master+0x66>
   185c4:	e000ed00 	.word	0xe000ed00
   185c8:	e000e100 	.word	0xe000e100
   185cc:	e000ecfc 	.word	0xe000ecfc

000185d0 <hal_spi_config_master>:
{
   185d0:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   185d2:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   185d4:	680c      	ldr	r4, [r1, #0]
   185d6:	684b      	ldr	r3, [r1, #4]
   185d8:	6084      	str	r4, [r0, #8]
   185da:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   185dc:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   185e0:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   185e4:	7808      	ldrb	r0, [r1, #0]
   185e6:	2801      	cmp	r0, #1
   185e8:	d916      	bls.n	18618 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   185ea:	2001      	movs	r0, #1
   185ec:	4098      	lsls	r0, r3
   185ee:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   185f2:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   185f6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   185fa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   185fe:	2403      	movs	r4, #3
   18600:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   18604:	788b      	ldrb	r3, [r1, #2]
   18606:	b973      	cbnz	r3, 18626 <hal_spi_config_master+0x56>
    rc = 0;
   18608:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   1860a:	780b      	ldrb	r3, [r1, #0]
   1860c:	2b03      	cmp	r3, #3
   1860e:	d812      	bhi.n	18636 <hal_spi_config_master+0x66>
   18610:	e8df f003 	tbb	[pc, r3]
   18614:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   18618:	2001      	movs	r0, #1
   1861a:	4098      	lsls	r0, r3
   1861c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   18620:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   18624:	e7e7      	b.n	185f6 <hal_spi_config_master+0x26>
            rc = EINVAL;
   18626:	2016      	movs	r0, #22
   18628:	e7ef      	b.n	1860a <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1862a:	2300      	movs	r3, #0
   1862c:	e007      	b.n	1863e <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1862e:	2304      	movs	r3, #4
            break;
   18630:	e005      	b.n	1863e <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   18632:	2306      	movs	r3, #6
            break;
   18634:	e003      	b.n	1863e <hal_spi_config_master+0x6e>
            nrf_config = 0;
   18636:	2300      	movs	r3, #0
            rc = EINVAL;
   18638:	2016      	movs	r0, #22
            break;
   1863a:	e000      	b.n	1863e <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1863c:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1863e:	784c      	ldrb	r4, [r1, #1]
   18640:	2c01      	cmp	r4, #1
   18642:	d010      	beq.n	18666 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   18644:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   18648:	684b      	ldr	r3, [r1, #4]
   1864a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1864e:	d023      	beq.n	18698 <hal_spi_config_master+0xc8>
   18650:	d80c      	bhi.n	1866c <hal_spi_config_master+0x9c>
   18652:	2bfa      	cmp	r3, #250	; 0xfa
   18654:	d029      	beq.n	186aa <hal_spi_config_master+0xda>
   18656:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1865a:	d01a      	beq.n	18692 <hal_spi_config_master+0xc2>
   1865c:	2b7d      	cmp	r3, #125	; 0x7d
   1865e:	d011      	beq.n	18684 <hal_spi_config_master+0xb4>
            frequency = 0;
   18660:	2300      	movs	r3, #0
            rc = EINVAL;
   18662:	2016      	movs	r0, #22
            break;
   18664:	e010      	b.n	18688 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   18666:	f043 0301 	orr.w	r3, r3, #1
   1866a:	e7eb      	b.n	18644 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   1866c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   18670:	d015      	beq.n	1869e <hal_spi_config_master+0xce>
   18672:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   18676:	d015      	beq.n	186a4 <hal_spi_config_master+0xd4>
   18678:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   1867c:	d1f0      	bne.n	18660 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   1867e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   18682:	e001      	b.n	18688 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   18684:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   18688:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   1868c:	f85d 4b04 	ldr.w	r4, [sp], #4
   18690:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   18692:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   18696:	e7f7      	b.n	18688 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   18698:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   1869c:	e7f4      	b.n	18688 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   1869e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   186a2:	e7f1      	b.n	18688 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   186a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   186a8:	e7ee      	b.n	18688 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   186aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   186ae:	e7eb      	b.n	18688 <hal_spi_config_master+0xb8>

000186b0 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   186b0:	2802      	cmp	r0, #2
   186b2:	dc10      	bgt.n	186d6 <hal_spi_config+0x26>
{
   186b4:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   186b6:	4b0b      	ldr	r3, [pc, #44]	; (186e4 <hal_spi_config+0x34>)
   186b8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   186bc:	b168      	cbz	r0, 186da <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   186be:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   186c0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   186c4:	b95b      	cbnz	r3, 186de <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   186c6:	7803      	ldrb	r3, [r0, #0]
   186c8:	b113      	cbz	r3, 186d0 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   186ca:	f7ff feff 	bl	184cc <hal_spi_config_slave>
    }

err:
    return (rc);
}
   186ce:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   186d0:	f7ff ff7e 	bl	185d0 <hal_spi_config_master>
   186d4:	e7fb      	b.n	186ce <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   186d6:	2016      	movs	r0, #22
}
   186d8:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   186da:	2016      	movs	r0, #22
   186dc:	e7f7      	b.n	186ce <hal_spi_config+0x1e>
        return -1;
   186de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   186e2:	e7f4      	b.n	186ce <hal_spi_config+0x1e>
   186e4:	000269e0 	.word	0x000269e0

000186e8 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   186e8:	2802      	cmp	r0, #2
   186ea:	dc1b      	bgt.n	18724 <hal_spi_enable+0x3c>
   186ec:	4b10      	ldr	r3, [pc, #64]	; (18730 <hal_spi_enable+0x48>)
   186ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   186f2:	b1cb      	cbz	r3, 18728 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   186f4:	781a      	ldrb	r2, [r3, #0]
   186f6:	b17a      	cbz	r2, 18718 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   186f8:	6a1a      	ldr	r2, [r3, #32]
   186fa:	b1ba      	cbz	r2, 1872c <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   186fc:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   186fe:	2000      	movs	r0, #0
   18700:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   18704:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   18708:	f240 4202 	movw	r2, #1026	; 0x402
   1870c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   18710:	2202      	movs	r2, #2
   18712:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   18716:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   18718:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1871a:	2201      	movs	r2, #1
   1871c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   18720:	2000      	movs	r0, #0
   18722:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18724:	2016      	movs	r0, #22
   18726:	4770      	bx	lr
   18728:	2016      	movs	r0, #22
   1872a:	4770      	bx	lr
            rc = EINVAL;
   1872c:	2016      	movs	r0, #22

err:
    return rc;
}
   1872e:	4770      	bx	lr
   18730:	000269e0 	.word	0x000269e0

00018734 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18734:	2802      	cmp	r0, #2
   18736:	dc2a      	bgt.n	1878e <hal_spi_disable+0x5a>
{
   18738:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1873a:	4b17      	ldr	r3, [pc, #92]	; (18798 <hal_spi_disable+0x64>)
   1873c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   18740:	b33c      	cbz	r4, 18792 <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   18742:	7823      	ldrb	r3, [r4, #0]
   18744:	b9ab      	cbnz	r3, 18772 <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   18746:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   18748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1874c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   18750:	7863      	ldrb	r3, [r4, #1]
   18752:	b943      	cbnz	r3, 18766 <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   18754:	2300      	movs	r3, #0
   18756:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   1875a:	2000      	movs	r0, #0
   1875c:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   1875e:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   18760:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   18762:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   18764:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   18766:	4628      	mov	r0, r5
   18768:	f7ff fea6 	bl	184b8 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   1876c:	2300      	movs	r3, #0
   1876e:	7063      	strb	r3, [r4, #1]
   18770:	e7f0      	b.n	18754 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   18772:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   18774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18778:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   1877c:	2300      	movs	r3, #0
   1877e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   18782:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   18786:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   1878a:	70e3      	strb	r3, [r4, #3]
   1878c:	e7e5      	b.n	1875a <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1878e:	2016      	movs	r0, #22
}
   18790:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18792:	2016      	movs	r0, #22
    return rc;
   18794:	e7e6      	b.n	18764 <hal_spi_disable+0x30>
   18796:	bf00      	nop
   18798:	000269e0 	.word	0x000269e0

0001879c <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1879c:	2802      	cmp	r0, #2
   1879e:	dc1d      	bgt.n	187dc <hal_spi_init+0x40>
{
   187a0:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   187a2:	4b13      	ldr	r3, [pc, #76]	; (187f0 <hal_spi_init+0x54>)
   187a4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   187a8:	b1d4      	cbz	r4, 187e0 <hal_spi_init+0x44>
    if (cfg == NULL) {
   187aa:	b1d9      	cbz	r1, 187e4 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   187ac:	2a01      	cmp	r2, #1
   187ae:	d81b      	bhi.n	187e8 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   187b0:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   187b2:	b9d8      	cbnz	r0, 187ec <hal_spi_init+0x50>
   187b4:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   187b6:	2303      	movs	r3, #3
   187b8:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   187ba:	b94a      	cbnz	r2, 187d0 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   187bc:	4b0d      	ldr	r3, [pc, #52]	; (187f4 <hal_spi_init+0x58>)
   187be:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   187c0:	f7ff ffb8 	bl	18734 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   187c4:	4a0c      	ldr	r2, [pc, #48]	; (187f8 <hal_spi_init+0x5c>)
   187c6:	4629      	mov	r1, r5
   187c8:	4620      	mov	r0, r4
   187ca:	f7ff fea5 	bl	18518 <hal_spi_init_master>
   187ce:	e00c      	b.n	187ea <hal_spi_init+0x4e>
            assert(0);
   187d0:	2300      	movs	r3, #0
   187d2:	461a      	mov	r2, r3
   187d4:	4619      	mov	r1, r3
   187d6:	4618      	mov	r0, r3
   187d8:	f000 f952 	bl	18a80 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   187dc:	2016      	movs	r0, #22
}
   187de:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   187e0:	2016      	movs	r0, #22
   187e2:	e002      	b.n	187ea <hal_spi_init+0x4e>
    rc = EINVAL;
   187e4:	2016      	movs	r0, #22
   187e6:	e000      	b.n	187ea <hal_spi_init+0x4e>
   187e8:	2016      	movs	r0, #22
}
   187ea:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   187ec:	2016      	movs	r0, #22
    return (rc);
   187ee:	e7fc      	b.n	187ea <hal_spi_init+0x4e>
   187f0:	000269e0 	.word	0x000269e0
   187f4:	40003000 	.word	0x40003000
   187f8:	000184a1 	.word	0x000184a1

000187fc <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   187fc:	2802      	cmp	r0, #2
   187fe:	dc0a      	bgt.n	18816 <hal_spi_set_txrx_cb+0x1a>
   18800:	4b08      	ldr	r3, [pc, #32]	; (18824 <hal_spi_set_txrx_cb+0x28>)
   18802:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18806:	b143      	cbz	r3, 1881a <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   18808:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   1880a:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   1880e:	b930      	cbnz	r0, 1881e <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   18810:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   18812:	625a      	str	r2, [r3, #36]	; 0x24
   18814:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18816:	2016      	movs	r0, #22
   18818:	4770      	bx	lr
   1881a:	2016      	movs	r0, #22
   1881c:	4770      	bx	lr
        rc = -1;
   1881e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   18822:	4770      	bx	lr
   18824:	000269e0 	.word	0x000269e0

00018828 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   18828:	2b00      	cmp	r3, #0
   1882a:	d046      	beq.n	188ba <hal_spi_txrx+0x92>
{
   1882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1882e:	460d      	mov	r5, r1
   18830:	4617      	mov	r7, r2
   18832:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   18834:	2802      	cmp	r0, #2
   18836:	dc42      	bgt.n	188be <hal_spi_txrx+0x96>
   18838:	4b25      	ldr	r3, [pc, #148]	; (188d0 <hal_spi_txrx+0xa8>)
   1883a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1883e:	2b00      	cmp	r3, #0
   18840:	d03f      	beq.n	188c2 <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   18842:	781a      	ldrb	r2, [r3, #0]
   18844:	2a00      	cmp	r2, #0
   18846:	d13e      	bne.n	188c6 <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   18848:	2900      	cmp	r1, #0
   1884a:	d03e      	beq.n	188ca <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   1884c:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   1884e:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   18852:	2b07      	cmp	r3, #7
   18854:	d004      	beq.n	18860 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   18856:	b95b      	cbnz	r3, 18870 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   18858:	2301      	movs	r3, #1
   1885a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1885e:	e007      	b.n	18870 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   18860:	f7ff ff68 	bl	18734 <hal_spi_disable>
   18864:	e7f8      	b.n	18858 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   18866:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   1886a:	2300      	movs	r3, #0
   1886c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   18870:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18874:	2b00      	cmp	r3, #0
   18876:	d1f6      	bne.n	18866 <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   18878:	782b      	ldrb	r3, [r5, #0]
   1887a:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   1887e:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   18880:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   18882:	2200      	movs	r2, #0
   18884:	e00d      	b.n	188a2 <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   18886:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1888a:	2b00      	cmp	r3, #0
   1888c:	d0fb      	beq.n	18886 <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   1888e:	2300      	movs	r3, #0
   18890:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   18894:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   18898:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   1889a:	b10f      	cbz	r7, 188a0 <hal_spi_txrx+0x78>
                *rxd = rxval;
   1889c:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   188a0:	3201      	adds	r2, #1
   188a2:	42b2      	cmp	r2, r6
   188a4:	da07      	bge.n	188b6 <hal_spi_txrx+0x8e>
            if (txcnt) {
   188a6:	2900      	cmp	r1, #0
   188a8:	d0ed      	beq.n	18886 <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   188aa:	786b      	ldrb	r3, [r5, #1]
   188ac:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   188b0:	3901      	subs	r1, #1
                ++txd;
   188b2:	3501      	adds	r5, #1
   188b4:	e7e7      	b.n	18886 <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   188b6:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   188b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   188ba:	2016      	movs	r0, #22
}
   188bc:	4770      	bx	lr
    return rc;
   188be:	2016      	movs	r0, #22
   188c0:	e7fa      	b.n	188b8 <hal_spi_txrx+0x90>
   188c2:	2016      	movs	r0, #22
   188c4:	e7f8      	b.n	188b8 <hal_spi_txrx+0x90>
   188c6:	2016      	movs	r0, #22
   188c8:	e7f6      	b.n	188b8 <hal_spi_txrx+0x90>
   188ca:	2016      	movs	r0, #22
   188cc:	e7f4      	b.n	188b8 <hal_spi_txrx+0x90>
   188ce:	bf00      	nop
   188d0:	000269e0 	.word	0x000269e0

000188d4 <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   188d4:	2802      	cmp	r0, #2
   188d6:	dc57      	bgt.n	18988 <hal_spi_txrx_noblock+0xb4>
{
   188d8:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   188da:	4c35      	ldr	r4, [pc, #212]	; (189b0 <hal_spi_txrx_noblock+0xdc>)
   188dc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   188e0:	2800      	cmp	r0, #0
   188e2:	d053      	beq.n	1898c <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   188e4:	6a04      	ldr	r4, [r0, #32]
   188e6:	2c00      	cmp	r4, #0
   188e8:	d052      	beq.n	18990 <hal_spi_txrx_noblock+0xbc>
   188ea:	2b00      	cmp	r3, #0
   188ec:	d052      	beq.n	18994 <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   188ee:	7804      	ldrb	r4, [r0, #0]
   188f0:	2c00      	cmp	r4, #0
   188f2:	d137      	bne.n	18964 <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   188f4:	2900      	cmp	r1, #0
   188f6:	d050      	beq.n	1899a <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   188f8:	7844      	ldrb	r4, [r0, #1]
   188fa:	2c00      	cmp	r4, #0
   188fc:	d14f      	bne.n	1899e <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   188fe:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   18900:	2540      	movs	r5, #64	; 0x40
   18902:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   18906:	2501      	movs	r5, #1
   18908:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   1890a:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   1890e:	2d07      	cmp	r5, #7
   18910:	d005      	beq.n	1891e <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   18912:	2500      	movs	r5, #0
   18914:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   18918:	2507      	movs	r5, #7
   1891a:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   1891e:	2500      	movs	r5, #0
   18920:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   18922:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   18924:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   18926:	2bff      	cmp	r3, #255	; 0xff
   18928:	bfa8      	it	ge
   1892a:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   1892c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   18930:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   18934:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   18936:	b172      	cbz	r2, 18956 <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   18938:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   1893c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   18940:	2000      	movs	r0, #0
   18942:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   18946:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   1894a:	2301      	movs	r3, #1
   1894c:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   1894e:	2340      	movs	r3, #64	; 0x40
   18950:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   18954:	e01f      	b.n	18996 <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   18956:	3002      	adds	r0, #2
   18958:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   1895c:	2301      	movs	r3, #1
   1895e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   18962:	e7ed      	b.n	18940 <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   18964:	b161      	cbz	r1, 18980 <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   18966:	2bff      	cmp	r3, #255	; 0xff
   18968:	dc1c      	bgt.n	189a4 <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   1896a:	78c4      	ldrb	r4, [r0, #3]
   1896c:	b9e4      	cbnz	r4, 189a8 <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   1896e:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   18970:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   18972:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   18974:	2301      	movs	r3, #1
   18976:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   18978:	6902      	ldr	r2, [r0, #16]
   1897a:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   1897c:	2000      	movs	r0, #0
   1897e:	e00a      	b.n	18996 <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   18980:	2a00      	cmp	r2, #0
   18982:	d1f0      	bne.n	18966 <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   18984:	2016      	movs	r0, #22
   18986:	e006      	b.n	18996 <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18988:	2016      	movs	r0, #22

err:
    return rc;
}
   1898a:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1898c:	2016      	movs	r0, #22
   1898e:	e002      	b.n	18996 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   18990:	2016      	movs	r0, #22
   18992:	e000      	b.n	18996 <hal_spi_txrx_noblock+0xc2>
   18994:	2016      	movs	r0, #22
}
   18996:	bc30      	pop	{r4, r5}
   18998:	4770      	bx	lr
    rc = EINVAL;
   1899a:	2016      	movs	r0, #22
   1899c:	e7fb      	b.n	18996 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1899e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   189a2:	e7f8      	b.n	18996 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   189a4:	2016      	movs	r0, #22
   189a6:	e7f6      	b.n	18996 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   189a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   189ac:	e7f3      	b.n	18996 <hal_spi_txrx_noblock+0xc2>
   189ae:	bf00      	nop
   189b0:	000269e0 	.word	0x000269e0

000189b4 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   189b4:	b508      	push	{r3, lr}
    assert(0);
   189b6:	2300      	movs	r3, #0
   189b8:	461a      	mov	r2, r3
   189ba:	4619      	mov	r1, r3
   189bc:	4618      	mov	r0, r3
   189be:	f000 f85f 	bl	18a80 <__assert_func>
	...

000189c4 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   189c4:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   189c6:	4b06      	ldr	r3, [pc, #24]	; (189e0 <nrf52_wdt_irq_handler+0x1c>)
   189c8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   189cc:	f013 0f01 	tst.w	r3, #1
   189d0:	d100      	bne.n	189d4 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   189d2:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   189d4:	4b02      	ldr	r3, [pc, #8]	; (189e0 <nrf52_wdt_irq_handler+0x1c>)
   189d6:	2200      	movs	r2, #0
   189d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   189dc:	f7ff ffea 	bl	189b4 <nrf52_hal_wdt_default_handler>
   189e0:	40010000 	.word	0x40010000

000189e4 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   189e4:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   189e6:	4b17      	ldr	r3, [pc, #92]	; (18a44 <hal_watchdog_init+0x60>)
   189e8:	2201      	movs	r2, #1
   189ea:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   189ee:	4b16      	ldr	r3, [pc, #88]	; (18a48 <hal_watchdog_init+0x64>)
   189f0:	4298      	cmp	r0, r3
   189f2:	d821      	bhi.n	18a38 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   189f4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   189f8:	0153      	lsls	r3, r2, #5
   189fa:	4a14      	ldr	r2, [pc, #80]	; (18a4c <hal_watchdog_init+0x68>)
   189fc:	fba2 2303 	umull	r2, r3, r2, r3
   18a00:	08db      	lsrs	r3, r3, #3
   18a02:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   18a06:	4b0f      	ldr	r3, [pc, #60]	; (18a44 <hal_watchdog_init+0x60>)
   18a08:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18a0c:	4a10      	ldr	r2, [pc, #64]	; (18a50 <hal_watchdog_init+0x6c>)
   18a0e:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18a10:	4910      	ldr	r1, [pc, #64]	; (18a54 <hal_watchdog_init+0x70>)
   18a12:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18a16:	4a10      	ldr	r2, [pc, #64]	; (18a58 <hal_watchdog_init+0x74>)
   18a18:	21e0      	movs	r1, #224	; 0xe0
   18a1a:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18a1e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   18a22:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18a26:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   18a28:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   18a2c:	f042 0201 	orr.w	r2, r2, #1
   18a30:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   18a34:	2000      	movs	r0, #0
   18a36:	bd08      	pop	{r3, pc}
        assert(0);
   18a38:	2300      	movs	r3, #0
   18a3a:	461a      	mov	r2, r3
   18a3c:	4619      	mov	r1, r3
   18a3e:	4618      	mov	r0, r3
   18a40:	f000 f81e 	bl	18a80 <__assert_func>
   18a44:	40010000 	.word	0x40010000
   18a48:	02aaaaaa 	.word	0x02aaaaaa
   18a4c:	10624dd3 	.word	0x10624dd3
   18a50:	e000ed00 	.word	0xe000ed00
   18a54:	000189c5 	.word	0x000189c5
   18a58:	e000e100 	.word	0xe000e100

00018a5c <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   18a5c:	4b02      	ldr	r3, [pc, #8]	; (18a68 <hal_watchdog_enable+0xc>)
   18a5e:	2201      	movs	r2, #1
   18a60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   18a64:	601a      	str	r2, [r3, #0]
}
   18a66:	4770      	bx	lr
   18a68:	40010000 	.word	0x40010000

00018a6c <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   18a6c:	4b02      	ldr	r3, [pc, #8]	; (18a78 <hal_watchdog_tickle+0xc>)
   18a6e:	4a03      	ldr	r2, [pc, #12]	; (18a7c <hal_watchdog_tickle+0x10>)
   18a70:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   18a74:	4770      	bx	lr
   18a76:	bf00      	nop
   18a78:	40010000 	.word	0x40010000
   18a7c:	6e524635 	.word	0x6e524635

00018a80 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   18a80:	b508      	push	{r3, lr}
   18a82:	4675      	mov	r5, lr
   18a84:	4604      	mov	r4, r0
   18a86:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   18a88:	f001 fa90 	bl	19fac <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   18a8c:	f7ff f905 	bl	17c9a <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   18a90:	b18c      	cbz	r4, 18ab6 <__assert_func+0x36>
   18a92:	4633      	mov	r3, r6
   18a94:	4622      	mov	r2, r4
   18a96:	4629      	mov	r1, r5
   18a98:	4809      	ldr	r0, [pc, #36]	; (18ac0 <__assert_func+0x40>)
   18a9a:	f7ff f929 	bl	17cf0 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   18a9e:	f7ef fb71 	bl	8184 <hal_debugger_connected>
   18aa2:	b100      	cbz	r0, 18aa6 <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   18aa4:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   18aa6:	4b07      	ldr	r3, [pc, #28]	; (18ac4 <__assert_func+0x44>)
   18aa8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   18aac:	605a      	str	r2, [r3, #4]
    asm("isb");
   18aae:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   18ab2:	f7ef fb6f 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   18ab6:	4629      	mov	r1, r5
   18ab8:	4803      	ldr	r0, [pc, #12]	; (18ac8 <__assert_func+0x48>)
   18aba:	f7ff f919 	bl	17cf0 <console_printf>
   18abe:	e7ee      	b.n	18a9e <__assert_func+0x1e>
   18ac0:	000269fc 	.word	0x000269fc
   18ac4:	e000ed00 	.word	0xe000ed00
   18ac8:	000269ec 	.word	0x000269ec

00018acc <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   18acc:	b500      	push	{lr}
   18ace:	b083      	sub	sp, #12
   18ad0:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   18ad2:	f7ff f8e2 	bl	17c9a <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   18ad6:	4d1b      	ldr	r5, [pc, #108]	; (18b44 <os_default_irq+0x78>)
   18ad8:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   18ada:	6822      	ldr	r2, [r4, #0]
   18adc:	f3c1 0108 	ubfx	r1, r1, #0, #9
   18ae0:	4819      	ldr	r0, [pc, #100]	; (18b48 <os_default_irq+0x7c>)
   18ae2:	f7ff f905 	bl	17cf0 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   18ae6:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   18ae8:	6883      	ldr	r3, [r0, #8]
   18aea:	6842      	ldr	r2, [r0, #4]
   18aec:	6801      	ldr	r1, [r0, #0]
   18aee:	68c0      	ldr	r0, [r0, #12]
   18af0:	9000      	str	r0, [sp, #0]
   18af2:	4816      	ldr	r0, [pc, #88]	; (18b4c <os_default_irq+0x80>)
   18af4:	f7ff f8fc 	bl	17cf0 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   18af8:	6923      	ldr	r3, [r4, #16]
   18afa:	9300      	str	r3, [sp, #0]
   18afc:	68e3      	ldr	r3, [r4, #12]
   18afe:	68a2      	ldr	r2, [r4, #8]
   18b00:	6861      	ldr	r1, [r4, #4]
   18b02:	4813      	ldr	r0, [pc, #76]	; (18b50 <os_default_irq+0x84>)
   18b04:	f7ff f8f4 	bl	17cf0 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   18b08:	6a23      	ldr	r3, [r4, #32]
   18b0a:	9300      	str	r3, [sp, #0]
   18b0c:	69e3      	ldr	r3, [r4, #28]
   18b0e:	69a2      	ldr	r2, [r4, #24]
   18b10:	6961      	ldr	r1, [r4, #20]
   18b12:	4810      	ldr	r0, [pc, #64]	; (18b54 <os_default_irq+0x88>)
   18b14:	f7ff f8ec 	bl	17cf0 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   18b18:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   18b1a:	6983      	ldr	r3, [r0, #24]
   18b1c:	6942      	ldr	r2, [r0, #20]
   18b1e:	6901      	ldr	r1, [r0, #16]
   18b20:	69c0      	ldr	r0, [r0, #28]
   18b22:	9000      	str	r0, [sp, #0]
   18b24:	480c      	ldr	r0, [pc, #48]	; (18b58 <os_default_irq+0x8c>)
   18b26:	f7ff f8e3 	bl	17cf0 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   18b2a:	6869      	ldr	r1, [r5, #4]
   18b2c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   18b2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   18b30:	480a      	ldr	r0, [pc, #40]	; (18b5c <os_default_irq+0x90>)
   18b32:	f7ff f8dd 	bl	17cf0 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   18b36:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   18b38:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   18b3a:	4809      	ldr	r0, [pc, #36]	; (18b60 <os_default_irq+0x94>)
   18b3c:	f7ff f8d8 	bl	17cf0 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   18b40:	f7ef fb28 	bl	8194 <hal_system_reset>
   18b44:	e000ed00 	.word	0xe000ed00
   18b48:	00026a14 	.word	0x00026a14
   18b4c:	00026a48 	.word	0x00026a48
   18b50:	00026a7c 	.word	0x00026a7c
   18b54:	00026ab0 	.word	0x00026ab0
   18b58:	00026ae4 	.word	0x00026ae4
   18b5c:	00026b18 	.word	0x00026b18
   18b60:	00026b40 	.word	0x00026b40

00018b64 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   18b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   18b66:	f7ff ff81 	bl	18a6c <hal_watchdog_tickle>
    sanity_last = 0;
   18b6a:	2500      	movs	r5, #0
   18b6c:	e00b      	b.n	18b86 <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   18b6e:	f000 fec7 	bl	19900 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   18b72:	f7ff ff7b 	bl	18a6c <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   18b76:	4625      	mov	r5, r4
   18b78:	e011      	b.n	18b9e <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   18b7a:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   18b7c:	f002 f842 	bl	1ac04 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   18b80:	4638      	mov	r0, r7
   18b82:	f001 fa19 	bl	19fb8 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   18b86:	4a14      	ldr	r2, [pc, #80]	; (18bd8 <os_idle_task+0x74>)
   18b88:	6813      	ldr	r3, [r2, #0]
   18b8a:	3301      	adds	r3, #1
   18b8c:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   18b8e:	f001 f995 	bl	19ebc <os_time_get>
   18b92:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   18b94:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   18b98:	1ac3      	subs	r3, r0, r3
   18b9a:	2b00      	cmp	r3, #0
   18b9c:	dce7      	bgt.n	18b6e <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   18b9e:	f001 fa05 	bl	19fac <os_arch_save_sr>
   18ba2:	4607      	mov	r7, r0
        now = os_time_get();
   18ba4:	f001 f98a 	bl	19ebc <os_time_get>
   18ba8:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   18baa:	f000 ffd7 	bl	19b5c <os_sched_wakeup_ticks>
   18bae:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   18bb0:	4630      	mov	r0, r6
   18bb2:	f000 f975 	bl	18ea0 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   18bb6:	42a0      	cmp	r0, r4
   18bb8:	bf28      	it	cs
   18bba:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   18bbc:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   18bc0:	1b9b      	subs	r3, r3, r6
   18bc2:	4298      	cmp	r0, r3
   18bc4:	bf28      	it	cs
   18bc6:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   18bc8:	280b      	cmp	r0, #11
   18bca:	d9d6      	bls.n	18b7a <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   18bcc:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   18bd0:	d9d4      	bls.n	18b7c <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   18bd2:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   18bd6:	e7d1      	b.n	18b7c <os_idle_task+0x18>
   18bd8:	2000de8c 	.word	0x2000de8c

00018bdc <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   18bdc:	b508      	push	{r3, lr}
   18bde:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   18be0:	2100      	movs	r1, #0
   18be2:	4608      	mov	r0, r1
   18be4:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   18be6:	2300      	movs	r3, #0
   18be8:	461a      	mov	r2, r3
   18bea:	4619      	mov	r1, r3
   18bec:	4618      	mov	r0, r3
   18bee:	f7ff ff47 	bl	18a80 <__assert_func>
	...

00018bf4 <os_started>:
}
   18bf4:	4b01      	ldr	r3, [pc, #4]	; (18bfc <os_started+0x8>)
   18bf6:	6818      	ldr	r0, [r3, #0]
   18bf8:	4770      	bx	lr
   18bfa:	bf00      	nop
   18bfc:	2000de88 	.word	0x2000de88

00018c00 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   18c00:	b500      	push	{lr}
   18c02:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   18c04:	2340      	movs	r3, #64	; 0x40
   18c06:	9303      	str	r3, [sp, #12]
   18c08:	4b15      	ldr	r3, [pc, #84]	; (18c60 <os_init_idle_task+0x60>)
   18c0a:	9302      	str	r3, [sp, #8]
   18c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18c10:	9301      	str	r3, [sp, #4]
   18c12:	23ff      	movs	r3, #255	; 0xff
   18c14:	9300      	str	r3, [sp, #0]
   18c16:	2300      	movs	r3, #0
   18c18:	4a12      	ldr	r2, [pc, #72]	; (18c64 <os_init_idle_task+0x64>)
   18c1a:	4913      	ldr	r1, [pc, #76]	; (18c68 <os_init_idle_task+0x68>)
   18c1c:	4813      	ldr	r0, [pc, #76]	; (18c6c <os_init_idle_task+0x6c>)
   18c1e:	f001 f88d 	bl	19d3c <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   18c22:	b950      	cbnz	r0, 18c3a <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   18c24:	f000 fea2 	bl	1996c <os_sanity_init>
    assert(rc == 0);
   18c28:	b968      	cbnz	r0, 18c46 <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   18c2a:	f247 5030 	movw	r0, #30000	; 0x7530
   18c2e:	f7ff fed9 	bl	189e4 <hal_watchdog_init>
    assert(rc == 0);
   18c32:	b970      	cbnz	r0, 18c52 <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   18c34:	b005      	add	sp, #20
   18c36:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   18c3a:	2300      	movs	r3, #0
   18c3c:	461a      	mov	r2, r3
   18c3e:	4619      	mov	r1, r3
   18c40:	4618      	mov	r0, r3
   18c42:	f7ff ff1d 	bl	18a80 <__assert_func>
    assert(rc == 0);
   18c46:	2300      	movs	r3, #0
   18c48:	461a      	mov	r2, r3
   18c4a:	4619      	mov	r1, r3
   18c4c:	4618      	mov	r0, r3
   18c4e:	f7ff ff17 	bl	18a80 <__assert_func>
    assert(rc == 0);
   18c52:	2300      	movs	r3, #0
   18c54:	461a      	mov	r2, r3
   18c56:	4619      	mov	r1, r3
   18c58:	4618      	mov	r0, r3
   18c5a:	f7ff ff11 	bl	18a80 <__assert_func>
   18c5e:	bf00      	nop
   18c60:	20006f70 	.word	0x20006f70
   18c64:	00018b65 	.word	0x00018b65
   18c68:	00026b64 	.word	0x00026b64
   18c6c:	2000dde8 	.word	0x2000dde8

00018c70 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   18c70:	b510      	push	{r4, lr}
   18c72:	b084      	sub	sp, #16
   18c74:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   18c76:	4b24      	ldr	r3, [pc, #144]	; (18d08 <os_init+0x98>)
   18c78:	2200      	movs	r2, #0
   18c7a:	601a      	str	r2, [r3, #0]
   18c7c:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   18c7e:	4b23      	ldr	r3, [pc, #140]	; (18d0c <os_init+0x9c>)
   18c80:	601a      	str	r2, [r3, #0]
   18c82:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   18c84:	f000 faba 	bl	191fc <os_eventq_dflt_get>
   18c88:	f000 fa0e 	bl	190a8 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   18c8c:	f000 fa04 	bl	19098 <os_dev_reset>

    err = os_arch_os_init();
   18c90:	f001 f9c6 	bl	1a020 <os_arch_os_init>
    assert(err == OS_OK);
   18c94:	bb00      	cbnz	r0, 18cd8 <os_init+0x68>

    if (main_fn) {
   18c96:	b18c      	cbz	r4, 18cbc <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   18c98:	f44f 6300 	mov.w	r3, #2048	; 0x800
   18c9c:	9303      	str	r3, [sp, #12]
   18c9e:	4b1c      	ldr	r3, [pc, #112]	; (18d10 <os_init+0xa0>)
   18ca0:	9302      	str	r3, [sp, #8]
   18ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18ca6:	9301      	str	r3, [sp, #4]
   18ca8:	237f      	movs	r3, #127	; 0x7f
   18caa:	9300      	str	r3, [sp, #0]
   18cac:	4623      	mov	r3, r4
   18cae:	4a19      	ldr	r2, [pc, #100]	; (18d14 <os_init+0xa4>)
   18cb0:	4919      	ldr	r1, [pc, #100]	; (18d18 <os_init+0xa8>)
   18cb2:	481a      	ldr	r0, [pc, #104]	; (18d1c <os_init+0xac>)
   18cb4:	f001 f842 	bl	19d3c <os_task_init>
   18cb8:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   18cba:	b998      	cbnz	r0, 18ce4 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   18cbc:	f001 fe72 	bl	1a9a4 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   18cc0:	2001      	movs	r0, #1
   18cc2:	f000 f985 	bl	18fd0 <os_dev_initialize_all>
   18cc6:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   18cc8:	b990      	cbnz	r0, 18cf0 <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   18cca:	2002      	movs	r0, #2
   18ccc:	f000 f980 	bl	18fd0 <os_dev_initialize_all>
   18cd0:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   18cd2:	b998      	cbnz	r0, 18cfc <os_init+0x8c>
}
   18cd4:	b004      	add	sp, #16
   18cd6:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   18cd8:	2300      	movs	r3, #0
   18cda:	461a      	mov	r2, r3
   18cdc:	4619      	mov	r1, r3
   18cde:	4618      	mov	r0, r3
   18ce0:	f7ff fece 	bl	18a80 <__assert_func>
        assert(err == 0);
   18ce4:	2300      	movs	r3, #0
   18ce6:	461a      	mov	r2, r3
   18ce8:	4619      	mov	r1, r3
   18cea:	4618      	mov	r0, r3
   18cec:	f7ff fec8 	bl	18a80 <__assert_func>
    assert(err == OS_OK);
   18cf0:	2300      	movs	r3, #0
   18cf2:	461a      	mov	r2, r3
   18cf4:	4619      	mov	r1, r3
   18cf6:	4618      	mov	r0, r3
   18cf8:	f7ff fec2 	bl	18a80 <__assert_func>
    assert(err == OS_OK);
   18cfc:	2300      	movs	r3, #0
   18cfe:	461a      	mov	r2, r3
   18d00:	4619      	mov	r1, r3
   18d02:	4618      	mov	r0, r3
   18d04:	f7ff febc 	bl	18a80 <__assert_func>
   18d08:	2000de90 	.word	0x2000de90
   18d0c:	2000deb8 	.word	0x2000deb8
   18d10:	20007070 	.word	0x20007070
   18d14:	00018bdd 	.word	0x00018bdd
   18d18:	00026b5c 	.word	0x00026b5c
   18d1c:	2000de38 	.word	0x2000de38

00018d20 <os_start>:

void
os_start(void)
{
   18d20:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   18d22:	f7ff fe9b 	bl	18a5c <hal_watchdog_enable>

    err = os_arch_os_start();
   18d26:	f001 f9db 	bl	1a0e0 <os_arch_os_start>
    assert(err == OS_OK);
   18d2a:	b900      	cbnz	r0, 18d2e <os_start+0xe>
#else
    assert(0);
#endif
}
   18d2c:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   18d2e:	2300      	movs	r3, #0
   18d30:	461a      	mov	r2, r3
   18d32:	4619      	mov	r1, r3
   18d34:	4618      	mov	r0, r3
   18d36:	f7ff fea3 	bl	18a80 <__assert_func>
	...

00018d3c <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   18d3c:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   18d3e:	4b0c      	ldr	r3, [pc, #48]	; (18d70 <os_pkg_init+0x34>)
   18d40:	781b      	ldrb	r3, [r3, #0]
   18d42:	b14b      	cbz	r3, 18d58 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   18d44:	2003      	movs	r0, #3
   18d46:	f000 f943 	bl	18fd0 <os_dev_initialize_all>
   18d4a:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   18d4c:	b948      	cbnz	r0, 18d62 <os_pkg_init+0x26>

    os_mempool_module_init();
   18d4e:	f000 fc25 	bl	1959c <os_mempool_module_init>
    os_msys_init();
   18d52:	f000 fcad 	bl	196b0 <os_msys_init>
}
   18d56:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   18d58:	461a      	mov	r2, r3
   18d5a:	4619      	mov	r1, r3
   18d5c:	4618      	mov	r0, r3
   18d5e:	f7ff fe8f 	bl	18a80 <__assert_func>
    assert(err == OS_OK);
   18d62:	2300      	movs	r3, #0
   18d64:	461a      	mov	r2, r3
   18d66:	4619      	mov	r1, r3
   18d68:	4618      	mov	r0, r3
   18d6a:	f7ff fe89 	bl	18a80 <__assert_func>
   18d6e:	bf00      	nop
   18d70:	2000ddbc 	.word	0x2000ddbc

00018d74 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   18d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d76:	4604      	mov	r4, r0
   18d78:	460d      	mov	r5, r1
   18d7a:	4617      	mov	r7, r2
   18d7c:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   18d7e:	2220      	movs	r2, #32
   18d80:	2100      	movs	r1, #0
   18d82:	f001 fa80 	bl	1a286 <memset>
    c->c_ev.ev_cb = ev_cb;
   18d86:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   18d88:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   18d8a:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   18d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00018d90 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   18d90:	b538      	push	{r3, r4, r5, lr}
   18d92:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   18d94:	f001 f90a 	bl	19fac <os_arch_save_sr>
   18d98:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   18d9a:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   18d9c:	b13b      	cbz	r3, 18dae <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   18d9e:	69a2      	ldr	r2, [r4, #24]
   18da0:	b172      	cbz	r2, 18dc0 <os_callout_stop+0x30>
   18da2:	61d3      	str	r3, [r2, #28]
   18da4:	69e3      	ldr	r3, [r4, #28]
   18da6:	69a2      	ldr	r2, [r4, #24]
   18da8:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   18daa:	2300      	movs	r3, #0
   18dac:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   18dae:	6920      	ldr	r0, [r4, #16]
   18db0:	b110      	cbz	r0, 18db8 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   18db2:	4621      	mov	r1, r4
   18db4:	f000 fa02 	bl	191bc <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   18db8:	4628      	mov	r0, r5
   18dba:	f001 f8fd 	bl	19fb8 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   18dbe:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   18dc0:	4a01      	ldr	r2, [pc, #4]	; (18dc8 <os_callout_stop+0x38>)
   18dc2:	6053      	str	r3, [r2, #4]
   18dc4:	e7ee      	b.n	18da4 <os_callout_stop+0x14>
   18dc6:	bf00      	nop
   18dc8:	2000de90 	.word	0x2000de90

00018dcc <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   18dcc:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   18dce:	6903      	ldr	r3, [r0, #16]
   18dd0:	b1c3      	cbz	r3, 18e04 <os_callout_reset+0x38>
   18dd2:	4605      	mov	r5, r0
   18dd4:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   18dd6:	2900      	cmp	r1, #0
   18dd8:	db2f      	blt.n	18e3a <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   18dda:	f001 f8e7 	bl	19fac <os_arch_save_sr>
   18dde:	4606      	mov	r6, r0

    os_callout_stop(c);
   18de0:	4628      	mov	r0, r5
   18de2:	f7ff ffd5 	bl	18d90 <os_callout_stop>

    if (ticks == 0) {
   18de6:	b904      	cbnz	r4, 18dea <os_callout_reset+0x1e>
        ticks = 1;
   18de8:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   18dea:	f001 f867 	bl	19ebc <os_time_get>
   18dee:	4420      	add	r0, r4
   18df0:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   18df2:	4b13      	ldr	r3, [pc, #76]	; (18e40 <os_callout_reset+0x74>)
   18df4:	681b      	ldr	r3, [r3, #0]
   18df6:	b153      	cbz	r3, 18e0e <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   18df8:	695a      	ldr	r2, [r3, #20]
   18dfa:	1a82      	subs	r2, r0, r2
   18dfc:	2a00      	cmp	r2, #0
   18dfe:	db06      	blt.n	18e0e <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   18e00:	699b      	ldr	r3, [r3, #24]
   18e02:	e7f8      	b.n	18df6 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   18e04:	461a      	mov	r2, r3
   18e06:	4619      	mov	r1, r3
   18e08:	4618      	mov	r0, r3
   18e0a:	f7ff fe39 	bl	18a80 <__assert_func>
            break;
        }
    }

    if (entry) {
   18e0e:	b15b      	cbz	r3, 18e28 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   18e10:	69da      	ldr	r2, [r3, #28]
   18e12:	61ea      	str	r2, [r5, #28]
   18e14:	61ab      	str	r3, [r5, #24]
   18e16:	69da      	ldr	r2, [r3, #28]
   18e18:	6015      	str	r5, [r2, #0]
   18e1a:	3518      	adds	r5, #24
   18e1c:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   18e1e:	4630      	mov	r0, r6
   18e20:	f001 f8ca 	bl	19fb8 <os_arch_restore_sr>

    ret = OS_OK;
   18e24:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   18e26:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   18e28:	2300      	movs	r3, #0
   18e2a:	61ab      	str	r3, [r5, #24]
   18e2c:	4b04      	ldr	r3, [pc, #16]	; (18e40 <os_callout_reset+0x74>)
   18e2e:	685a      	ldr	r2, [r3, #4]
   18e30:	61ea      	str	r2, [r5, #28]
   18e32:	6015      	str	r5, [r2, #0]
   18e34:	3518      	adds	r5, #24
   18e36:	605d      	str	r5, [r3, #4]
   18e38:	e7f1      	b.n	18e1e <os_callout_reset+0x52>
        ret = OS_EINVAL;
   18e3a:	2002      	movs	r0, #2
    return ret;
   18e3c:	e7f3      	b.n	18e26 <os_callout_reset+0x5a>
   18e3e:	bf00      	nop
   18e40:	2000de90 	.word	0x2000de90

00018e44 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   18e44:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   18e46:	f001 f839 	bl	19ebc <os_time_get>
   18e4a:	4605      	mov	r5, r0
   18e4c:	e00f      	b.n	18e6e <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   18e4e:	69e2      	ldr	r2, [r4, #28]
   18e50:	4b12      	ldr	r3, [pc, #72]	; (18e9c <os_callout_tick+0x58>)
   18e52:	605a      	str	r2, [r3, #4]
   18e54:	69e3      	ldr	r3, [r4, #28]
   18e56:	69a2      	ldr	r2, [r4, #24]
   18e58:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   18e5a:	2300      	movs	r3, #0
   18e5c:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   18e5e:	f001 f8ab 	bl	19fb8 <os_arch_restore_sr>

        if (c) {
   18e62:	b1d4      	cbz	r4, 18e9a <os_callout_tick+0x56>
            if (c->c_evq) {
   18e64:	6920      	ldr	r0, [r4, #16]
   18e66:	b9a0      	cbnz	r0, 18e92 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   18e68:	6863      	ldr	r3, [r4, #4]
   18e6a:	4620      	mov	r0, r4
   18e6c:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   18e6e:	f001 f89d 	bl	19fac <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   18e72:	4b0a      	ldr	r3, [pc, #40]	; (18e9c <os_callout_tick+0x58>)
   18e74:	681c      	ldr	r4, [r3, #0]
        if (c) {
   18e76:	2c00      	cmp	r4, #0
   18e78:	d0f1      	beq.n	18e5e <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   18e7a:	6963      	ldr	r3, [r4, #20]
   18e7c:	1aeb      	subs	r3, r5, r3
   18e7e:	2b00      	cmp	r3, #0
   18e80:	db05      	blt.n	18e8e <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   18e82:	69a3      	ldr	r3, [r4, #24]
   18e84:	2b00      	cmp	r3, #0
   18e86:	d0e2      	beq.n	18e4e <os_callout_tick+0xa>
   18e88:	69e2      	ldr	r2, [r4, #28]
   18e8a:	61da      	str	r2, [r3, #28]
   18e8c:	e7e2      	b.n	18e54 <os_callout_tick+0x10>
                c = NULL;
   18e8e:	2400      	movs	r4, #0
   18e90:	e7e5      	b.n	18e5e <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   18e92:	4621      	mov	r1, r4
   18e94:	f000 f915 	bl	190c2 <os_eventq_put>
   18e98:	e7e9      	b.n	18e6e <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   18e9a:	bd38      	pop	{r3, r4, r5, pc}
   18e9c:	2000de90 	.word	0x2000de90

00018ea0 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   18ea0:	b510      	push	{r4, lr}
   18ea2:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   18ea4:	f001 f88b 	bl	19fbe <os_arch_in_critical>
   18ea8:	b130      	cbz	r0, 18eb8 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   18eaa:	4b09      	ldr	r3, [pc, #36]	; (18ed0 <os_callout_wakeup_ticks+0x30>)
   18eac:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   18eae:	b15b      	cbz	r3, 18ec8 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   18eb0:	6958      	ldr	r0, [r3, #20]
   18eb2:	1b00      	subs	r0, r0, r4
   18eb4:	d406      	bmi.n	18ec4 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   18eb6:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   18eb8:	2300      	movs	r3, #0
   18eba:	461a      	mov	r2, r3
   18ebc:	4619      	mov	r1, r3
   18ebe:	4618      	mov	r0, r3
   18ec0:	f7ff fdde 	bl	18a80 <__assert_func>
            rt = 0;     /* callout time is in the past */
   18ec4:	2000      	movs	r0, #0
   18ec6:	e7f6      	b.n	18eb6 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   18ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   18ecc:	e7f3      	b.n	18eb6 <os_callout_wakeup_ticks+0x16>
   18ece:	bf00      	nop
   18ed0:	2000de90 	.word	0x2000de90

00018ed4 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   18ed4:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   18ed6:	4601      	mov	r1, r0
   18ed8:	2000      	movs	r0, #0
   18eda:	f002 f84d 	bl	1af78 <hal_timer_config>
    return rc;
}
   18ede:	bd08      	pop	{r3, pc}

00018ee0 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   18ee0:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   18ee2:	2000      	movs	r0, #0
   18ee4:	f002 f8c4 	bl	1b070 <hal_timer_read>
    return cpu_time;
}
   18ee8:	bd08      	pop	{r3, pc}
	...

00018eec <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   18eec:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   18eee:	4b15      	ldr	r3, [pc, #84]	; (18f44 <os_dev_add+0x58>)
   18ef0:	681d      	ldr	r5, [r3, #0]
   18ef2:	b115      	cbz	r5, 18efa <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   18ef4:	462b      	mov	r3, r5
    prev_dev = NULL;
   18ef6:	2400      	movs	r4, #0
   18ef8:	e008      	b.n	18f0c <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   18efa:	4603      	mov	r3, r0
   18efc:	f843 5f20 	str.w	r5, [r3, #32]!
   18f00:	4a10      	ldr	r2, [pc, #64]	; (18f44 <os_dev_add+0x58>)
   18f02:	6053      	str	r3, [r2, #4]
   18f04:	6010      	str	r0, [r2, #0]
        return (0);
   18f06:	e010      	b.n	18f2a <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   18f08:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   18f0a:	6a1b      	ldr	r3, [r3, #32]
   18f0c:	b143      	cbz	r3, 18f20 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   18f0e:	7e01      	ldrb	r1, [r0, #24]
   18f10:	7e1a      	ldrb	r2, [r3, #24]
   18f12:	4291      	cmp	r1, r2
   18f14:	d304      	bcc.n	18f20 <os_dev_add+0x34>
   18f16:	d1f7      	bne.n	18f08 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   18f18:	7e41      	ldrb	r1, [r0, #25]
   18f1a:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   18f1c:	4291      	cmp	r1, r2
   18f1e:	d2f3      	bcs.n	18f08 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   18f20:	b15c      	cbz	r4, 18f3a <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   18f22:	6a23      	ldr	r3, [r4, #32]
   18f24:	6203      	str	r3, [r0, #32]
   18f26:	b11b      	cbz	r3, 18f30 <os_dev_add+0x44>
   18f28:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   18f2a:	2000      	movs	r0, #0
   18f2c:	bc30      	pop	{r4, r5}
   18f2e:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   18f30:	f100 0320 	add.w	r3, r0, #32
   18f34:	4a03      	ldr	r2, [pc, #12]	; (18f44 <os_dev_add+0x58>)
   18f36:	6053      	str	r3, [r2, #4]
   18f38:	e7f6      	b.n	18f28 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   18f3a:	6205      	str	r5, [r0, #32]
   18f3c:	4b01      	ldr	r3, [pc, #4]	; (18f44 <os_dev_add+0x58>)
   18f3e:	6018      	str	r0, [r3, #0]
   18f40:	e7f3      	b.n	18f2a <os_dev_add+0x3e>
   18f42:	bf00      	nop
   18f44:	20009070 	.word	0x20009070

00018f48 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   18f48:	b510      	push	{r4, lr}
   18f4a:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   18f4c:	6903      	ldr	r3, [r0, #16]
   18f4e:	6941      	ldr	r1, [r0, #20]
   18f50:	4798      	blx	r3
    if (rc != 0) {
   18f52:	4603      	mov	r3, r0
   18f54:	b128      	cbz	r0, 18f62 <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   18f56:	7ee2      	ldrb	r2, [r4, #27]
   18f58:	f012 0f08 	tst.w	r2, #8
   18f5c:	d105      	bne.n	18f6a <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   18f5e:	2300      	movs	r3, #0
   18f60:	e003      	b.n	18f6a <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   18f62:	7ee2      	ldrb	r2, [r4, #27]
   18f64:	f042 0201 	orr.w	r2, r2, #1
   18f68:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   18f6a:	4618      	mov	r0, r3
   18f6c:	bd10      	pop	{r4, pc}

00018f6e <os_dev_init>:
    dev->od_name = name;
   18f6e:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   18f70:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   18f72:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   18f74:	2300      	movs	r3, #0
   18f76:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   18f78:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   18f7a:	9a00      	ldr	r2, [sp, #0]
   18f7c:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   18f7e:	9a01      	ldr	r2, [sp, #4]
   18f80:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   18f82:	6003      	str	r3, [r0, #0]
   18f84:	6043      	str	r3, [r0, #4]
   18f86:	6083      	str	r3, [r0, #8]
   18f88:	60c3      	str	r3, [r0, #12]
}
   18f8a:	4618      	mov	r0, r3
   18f8c:	4770      	bx	lr
	...

00018f90 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   18f90:	b530      	push	{r4, r5, lr}
   18f92:	b083      	sub	sp, #12
   18f94:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   18f96:	9c07      	ldr	r4, [sp, #28]
   18f98:	9401      	str	r4, [sp, #4]
   18f9a:	9c06      	ldr	r4, [sp, #24]
   18f9c:	9400      	str	r4, [sp, #0]
   18f9e:	f7ff ffe6 	bl	18f6e <os_dev_init>
    if (rc != 0) {
   18fa2:	4603      	mov	r3, r0
   18fa4:	b110      	cbz	r0, 18fac <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   18fa6:	4618      	mov	r0, r3
   18fa8:	b003      	add	sp, #12
   18faa:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   18fac:	4628      	mov	r0, r5
   18fae:	f7ff ff9d 	bl	18eec <os_dev_add>
    if (rc != 0) {
   18fb2:	4603      	mov	r3, r0
   18fb4:	2800      	cmp	r0, #0
   18fb6:	d1f6      	bne.n	18fa6 <os_dev_create+0x16>
    if (g_os_started) {
   18fb8:	4a04      	ldr	r2, [pc, #16]	; (18fcc <os_dev_create+0x3c>)
   18fba:	6812      	ldr	r2, [r2, #0]
   18fbc:	2a00      	cmp	r2, #0
   18fbe:	d0f2      	beq.n	18fa6 <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   18fc0:	4628      	mov	r0, r5
   18fc2:	f7ff ffc1 	bl	18f48 <os_dev_initialize>
   18fc6:	4603      	mov	r3, r0
    return (rc);
   18fc8:	e7ed      	b.n	18fa6 <os_dev_create+0x16>
   18fca:	bf00      	nop
   18fcc:	2000de88 	.word	0x2000de88

00018fd0 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   18fd0:	b538      	push	{r3, r4, r5, lr}
   18fd2:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   18fd4:	4b08      	ldr	r3, [pc, #32]	; (18ff8 <os_dev_initialize_all+0x28>)
   18fd6:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   18fd8:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   18fda:	e000      	b.n	18fde <os_dev_initialize_all+0xe>
   18fdc:	6a24      	ldr	r4, [r4, #32]
   18fde:	b144      	cbz	r4, 18ff2 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   18fe0:	7e23      	ldrb	r3, [r4, #24]
   18fe2:	42ab      	cmp	r3, r5
   18fe4:	d1fa      	bne.n	18fdc <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   18fe6:	4620      	mov	r0, r4
   18fe8:	f7ff ffae 	bl	18f48 <os_dev_initialize>
            if (rc) {
   18fec:	4602      	mov	r2, r0
   18fee:	2800      	cmp	r0, #0
   18ff0:	d0f4      	beq.n	18fdc <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   18ff2:	4610      	mov	r0, r2
   18ff4:	bd38      	pop	{r3, r4, r5, pc}
   18ff6:	bf00      	nop
   18ff8:	20009070 	.word	0x20009070

00018ffc <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   18ffc:	b538      	push	{r3, r4, r5, lr}
   18ffe:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19000:	4b05      	ldr	r3, [pc, #20]	; (19018 <os_dev_lookup+0x1c>)
   19002:	681c      	ldr	r4, [r3, #0]
   19004:	b134      	cbz	r4, 19014 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   19006:	4629      	mov	r1, r5
   19008:	69e0      	ldr	r0, [r4, #28]
   1900a:	f001 f958 	bl	1a2be <strcmp>
   1900e:	b108      	cbz	r0, 19014 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19010:	6a24      	ldr	r4, [r4, #32]
   19012:	e7f7      	b.n	19004 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   19014:	4620      	mov	r0, r4
   19016:	bd38      	pop	{r3, r4, r5, pc}
   19018:	20009070 	.word	0x20009070

0001901c <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   1901c:	b570      	push	{r4, r5, r6, lr}
   1901e:	460d      	mov	r5, r1
   19020:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   19022:	f7ff ffeb 	bl	18ffc <os_dev_lookup>
    if (dev == NULL) {
   19026:	4604      	mov	r4, r0
   19028:	b1a0      	cbz	r0, 19054 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   1902a:	7ec3      	ldrb	r3, [r0, #27]
   1902c:	f013 0f01 	tst.w	r3, #1
   19030:	d012      	beq.n	19058 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   19032:	6803      	ldr	r3, [r0, #0]
   19034:	b11b      	cbz	r3, 1903e <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   19036:	4632      	mov	r2, r6
   19038:	4629      	mov	r1, r5
   1903a:	4798      	blx	r3
        if (rc != 0) {
   1903c:	b970      	cbnz	r0, 1905c <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1903e:	f000 ffb5 	bl	19fac <os_arch_save_sr>
    ++dev->od_open_ref;
   19042:	7ea3      	ldrb	r3, [r4, #26]
   19044:	3301      	adds	r3, #1
   19046:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   19048:	7ee3      	ldrb	r3, [r4, #27]
   1904a:	f043 0302 	orr.w	r3, r3, #2
   1904e:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   19050:	f000 ffb2 	bl	19fb8 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   19054:	4620      	mov	r0, r4
   19056:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   19058:	2400      	movs	r4, #0
   1905a:	e7fb      	b.n	19054 <os_dev_open+0x38>
    return (NULL);
   1905c:	2400      	movs	r4, #0
   1905e:	e7f9      	b.n	19054 <os_dev_open+0x38>

00019060 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   19060:	b1b0      	cbz	r0, 19090 <os_dev_close+0x30>
{
   19062:	b510      	push	{r4, lr}
   19064:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   19066:	68c3      	ldr	r3, [r0, #12]
   19068:	b113      	cbz	r3, 19070 <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   1906a:	4798      	blx	r3
        if (rc != 0) {
   1906c:	4603      	mov	r3, r0
   1906e:	b968      	cbnz	r0, 1908c <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   19070:	f000 ff9c 	bl	19fac <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   19074:	7ea3      	ldrb	r3, [r4, #26]
   19076:	3b01      	subs	r3, #1
   19078:	b2db      	uxtb	r3, r3
   1907a:	76a3      	strb	r3, [r4, #26]
   1907c:	b91b      	cbnz	r3, 19086 <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   1907e:	7ee3      	ldrb	r3, [r4, #27]
   19080:	f023 0306 	bic.w	r3, r3, #6
   19084:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   19086:	f000 ff97 	bl	19fb8 <os_arch_restore_sr>

    return (0);
   1908a:	2300      	movs	r3, #0
err:
    return (rc);
}
   1908c:	4618      	mov	r0, r3
   1908e:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   19090:	2302      	movs	r3, #2
}
   19092:	4618      	mov	r0, r3
   19094:	4770      	bx	lr
	...

00019098 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   19098:	4b02      	ldr	r3, [pc, #8]	; (190a4 <os_dev_reset+0xc>)
   1909a:	2200      	movs	r2, #0
   1909c:	601a      	str	r2, [r3, #0]
   1909e:	605b      	str	r3, [r3, #4]
}
   190a0:	4770      	bx	lr
   190a2:	bf00      	nop
   190a4:	20009070 	.word	0x20009070

000190a8 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   190a8:	2200      	movs	r2, #0
   190aa:	6002      	str	r2, [r0, #0]
   190ac:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   190ae:	4603      	mov	r3, r0
   190b0:	f843 2f08 	str.w	r2, [r3, #8]!
   190b4:	60c3      	str	r3, [r0, #12]
}
   190b6:	4770      	bx	lr

000190b8 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   190b8:	68c0      	ldr	r0, [r0, #12]
}
   190ba:	3000      	adds	r0, #0
   190bc:	bf18      	it	ne
   190be:	2001      	movne	r0, #1
   190c0:	4770      	bx	lr

000190c2 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   190c2:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   190c4:	b1f0      	cbz	r0, 19104 <os_eventq_put+0x42>
   190c6:	460c      	mov	r4, r1
   190c8:	4605      	mov	r5, r0
   190ca:	f7ff fff5 	bl	190b8 <os_eventq_inited>
   190ce:	b1c8      	cbz	r0, 19104 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   190d0:	f000 ff6c 	bl	19fac <os_arch_save_sr>
   190d4:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   190d6:	7823      	ldrb	r3, [r4, #0]
   190d8:	b9d3      	cbnz	r3, 19110 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   190da:	2301      	movs	r3, #1
   190dc:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   190de:	2300      	movs	r3, #0
   190e0:	60e3      	str	r3, [r4, #12]
   190e2:	68eb      	ldr	r3, [r5, #12]
   190e4:	601c      	str	r4, [r3, #0]
   190e6:	340c      	adds	r4, #12
   190e8:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   190ea:	6868      	ldr	r0, [r5, #4]
   190ec:	b1b8      	cbz	r0, 1911e <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   190ee:	7b03      	ldrb	r3, [r0, #12]
   190f0:	2b02      	cmp	r3, #2
   190f2:	d010      	beq.n	19116 <os_eventq_put+0x54>
    resched = 0;
   190f4:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   190f6:	2300      	movs	r3, #0
   190f8:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   190fa:	4630      	mov	r0, r6
   190fc:	f000 ff5c 	bl	19fb8 <os_arch_restore_sr>

    if (resched) {
   19100:	b97c      	cbnz	r4, 19122 <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   19102:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   19104:	2300      	movs	r3, #0
   19106:	461a      	mov	r2, r3
   19108:	4619      	mov	r1, r3
   1910a:	4618      	mov	r0, r3
   1910c:	f7ff fcb8 	bl	18a80 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   19110:	f000 ff52 	bl	19fb8 <os_arch_restore_sr>
   19114:	e7f5      	b.n	19102 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   19116:	f000 fcc7 	bl	19aa8 <os_sched_wakeup>
            resched = 1;
   1911a:	2401      	movs	r4, #1
   1911c:	e7eb      	b.n	190f6 <os_eventq_put+0x34>
    resched = 0;
   1911e:	2400      	movs	r4, #0
   19120:	e7eb      	b.n	190fa <os_eventq_put+0x38>
        os_sched(NULL);
   19122:	2000      	movs	r0, #0
   19124:	f000 fd40 	bl	19ba8 <os_sched>
   19128:	e7eb      	b.n	19102 <os_eventq_put+0x40>

0001912a <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   1912a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1912c:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   1912e:	f000 fc67 	bl	19a00 <os_sched_get_current_task>
   19132:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   19134:	682b      	ldr	r3, [r5, #0]
   19136:	4283      	cmp	r3, r0
   19138:	d001      	beq.n	1913e <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   1913a:	b9db      	cbnz	r3, 19174 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   1913c:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   1913e:	f000 ff35 	bl	19fac <os_arch_save_sr>
   19142:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   19144:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   19146:	b9de      	cbnz	r6, 19180 <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   19148:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   1914a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1914e:	4620      	mov	r0, r4
   19150:	f000 fc62 	bl	19a18 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   19154:	7b63      	ldrb	r3, [r4, #13]
   19156:	f043 0308 	orr.w	r3, r3, #8
   1915a:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   1915c:	4638      	mov	r0, r7
   1915e:	f000 ff2b 	bl	19fb8 <os_arch_restore_sr>

        os_sched(NULL);
   19162:	2000      	movs	r0, #0
   19164:	f000 fd20 	bl	19ba8 <os_sched>

        OS_ENTER_CRITICAL(sr);
   19168:	f000 ff20 	bl	19fac <os_arch_save_sr>
   1916c:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   1916e:	2300      	movs	r3, #0
   19170:	606b      	str	r3, [r5, #4]
        goto pull_one;
   19172:	e7e7      	b.n	19144 <os_eventq_get+0x1a>
            assert(0);
   19174:	2300      	movs	r3, #0
   19176:	461a      	mov	r2, r3
   19178:	4619      	mov	r1, r3
   1917a:	4618      	mov	r0, r3
   1917c:	f7ff fc80 	bl	18a80 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   19180:	68f3      	ldr	r3, [r6, #12]
   19182:	60ab      	str	r3, [r5, #8]
   19184:	b153      	cbz	r3, 1919c <os_eventq_get+0x72>
        ev->ev_queued = 0;
   19186:	2300      	movs	r3, #0
   19188:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   1918a:	7b63      	ldrb	r3, [r4, #13]
   1918c:	f023 0308 	bic.w	r3, r3, #8
   19190:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   19192:	4638      	mov	r0, r7
   19194:	f000 ff10 	bl	19fb8 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   19198:	4630      	mov	r0, r6
   1919a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1919c:	f105 0308 	add.w	r3, r5, #8
   191a0:	60eb      	str	r3, [r5, #12]
   191a2:	e7f0      	b.n	19186 <os_eventq_get+0x5c>

000191a4 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   191a4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   191a6:	f7ff ffc0 	bl	1912a <os_eventq_get>
    assert(ev->ev_cb != NULL);
   191aa:	6843      	ldr	r3, [r0, #4]
   191ac:	b10b      	cbz	r3, 191b2 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   191ae:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   191b0:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   191b2:	461a      	mov	r2, r3
   191b4:	4619      	mov	r1, r3
   191b6:	4618      	mov	r0, r3
   191b8:	f7ff fc62 	bl	18a80 <__assert_func>

000191bc <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   191bc:	b538      	push	{r3, r4, r5, lr}
   191be:	4605      	mov	r5, r0
   191c0:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   191c2:	f000 fef3 	bl	19fac <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   191c6:	7823      	ldrb	r3, [r4, #0]
   191c8:	b183      	cbz	r3, 191ec <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   191ca:	68aa      	ldr	r2, [r5, #8]
   191cc:	42a2      	cmp	r2, r4
   191ce:	d107      	bne.n	191e0 <os_eventq_remove+0x24>
   191d0:	68d3      	ldr	r3, [r2, #12]
   191d2:	60ab      	str	r3, [r5, #8]
   191d4:	b953      	cbnz	r3, 191ec <os_eventq_remove+0x30>
   191d6:	f105 0308 	add.w	r3, r5, #8
   191da:	60eb      	str	r3, [r5, #12]
   191dc:	e006      	b.n	191ec <os_eventq_remove+0x30>
   191de:	461a      	mov	r2, r3
   191e0:	68d3      	ldr	r3, [r2, #12]
   191e2:	42a3      	cmp	r3, r4
   191e4:	d1fb      	bne.n	191de <os_eventq_remove+0x22>
   191e6:	68db      	ldr	r3, [r3, #12]
   191e8:	60d3      	str	r3, [r2, #12]
   191ea:	b123      	cbz	r3, 191f6 <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   191ec:	2300      	movs	r3, #0
   191ee:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   191f0:	f000 fee2 	bl	19fb8 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   191f4:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   191f6:	320c      	adds	r2, #12
   191f8:	60ea      	str	r2, [r5, #12]
   191fa:	e7f7      	b.n	191ec <os_eventq_remove+0x30>

000191fc <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   191fc:	4800      	ldr	r0, [pc, #0]	; (19200 <os_eventq_dflt_get+0x4>)
   191fe:	4770      	bx	lr
   19200:	20009078 	.word	0x20009078

00019204 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   19204:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   19206:	2000      	movs	r0, #0
   19208:	6018      	str	r0, [r3, #0]
   1920a:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   1920c:	6098      	str	r0, [r3, #8]
   1920e:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   19210:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   19212:	611a      	str	r2, [r3, #16]

    return (0);
}
   19214:	4770      	bx	lr

00019216 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   19216:	b538      	push	{r3, r4, r5, lr}
   19218:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1921a:	f000 fec7 	bl	19fac <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   1921e:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   19220:	b114      	cbz	r4, 19228 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   19222:	6863      	ldr	r3, [r4, #4]
   19224:	602b      	str	r3, [r5, #0]
   19226:	b12b      	cbz	r3, 19234 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   19228:	f000 fec6 	bl	19fb8 <os_arch_restore_sr>

    if (mp) {
   1922c:	b124      	cbz	r4, 19238 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   1922e:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   19232:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   19234:	606d      	str	r5, [r5, #4]
   19236:	e7f7      	b.n	19228 <os_mqueue_get+0x12>
        m = NULL;
   19238:	2000      	movs	r0, #0
    return (m);
   1923a:	e7fa      	b.n	19232 <os_mqueue_get+0x1c>

0001923c <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   1923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   1923e:	7953      	ldrb	r3, [r2, #5]
   19240:	2b07      	cmp	r3, #7
   19242:	d916      	bls.n	19272 <os_mqueue_put+0x36>
   19244:	4614      	mov	r4, r2
   19246:	460e      	mov	r6, r1
   19248:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   1924a:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   1924e:	f000 fead 	bl	19fac <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   19252:	2300      	movs	r3, #0
   19254:	f844 3f14 	str.w	r3, [r4, #20]!
   19258:	686b      	ldr	r3, [r5, #4]
   1925a:	601f      	str	r7, [r3, #0]
   1925c:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   1925e:	f000 feab 	bl	19fb8 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   19262:	b146      	cbz	r6, 19276 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   19264:	f105 0108 	add.w	r1, r5, #8
   19268:	4630      	mov	r0, r6
   1926a:	f7ff ff2a 	bl	190c2 <os_eventq_put>
    }

    return (0);
   1926e:	2000      	movs	r0, #0
   19270:	e000      	b.n	19274 <os_mqueue_put+0x38>
err:
    return (rc);
   19272:	2002      	movs	r0, #2
}
   19274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   19276:	2000      	movs	r0, #0
   19278:	e7fc      	b.n	19274 <os_mqueue_put+0x38>

0001927a <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   1927a:	3a10      	subs	r2, #16
   1927c:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   1927e:	6041      	str	r1, [r0, #4]

    return (0);
}
   19280:	2000      	movs	r0, #0
   19282:	4770      	bx	lr

00019284 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   19284:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   19286:	8803      	ldrh	r3, [r0, #0]
   19288:	428b      	cmp	r3, r1
   1928a:	d312      	bcc.n	192b2 <os_mbuf_get+0x2e>
   1928c:	460d      	mov	r5, r1
   1928e:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   19290:	6840      	ldr	r0, [r0, #4]
   19292:	f000 f947 	bl	19524 <os_memblock_get>
    if (!om) {
   19296:	4603      	mov	r3, r0
   19298:	b148      	cbz	r0, 192ae <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   1929a:	2200      	movs	r2, #0
   1929c:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   1929e:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   192a0:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   192a2:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   192a4:	f100 0110 	add.w	r1, r0, #16
   192a8:	4429      	add	r1, r5
   192aa:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   192ac:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   192ae:	4618      	mov	r0, r3
   192b0:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   192b2:	2300      	movs	r3, #0
    return om;
   192b4:	e7fb      	b.n	192ae <os_mbuf_get+0x2a>

000192b6 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   192b6:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   192b8:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   192bc:	8803      	ldrh	r3, [r0, #0]
   192be:	42ab      	cmp	r3, r5
   192c0:	d310      	bcc.n	192e4 <os_mbuf_get_pkthdr+0x2e>
   192c2:	2dff      	cmp	r5, #255	; 0xff
   192c4:	d810      	bhi.n	192e8 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   192c6:	2100      	movs	r1, #0
   192c8:	f7ff ffdc 	bl	19284 <os_mbuf_get>
    if (om) {
   192cc:	4603      	mov	r3, r0
   192ce:	b138      	cbz	r0, 192e0 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   192d0:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   192d2:	6802      	ldr	r2, [r0, #0]
   192d4:	4415      	add	r5, r2
   192d6:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   192d8:	2200      	movs	r2, #0
   192da:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   192dc:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   192de:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   192e0:	4618      	mov	r0, r3
   192e2:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   192e4:	2300      	movs	r3, #0
   192e6:	e7fb      	b.n	192e0 <os_mbuf_get_pkthdr+0x2a>
   192e8:	2300      	movs	r3, #0
    return om;
   192ea:	e7f9      	b.n	192e0 <os_mbuf_get_pkthdr+0x2a>

000192ec <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   192ec:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   192ee:	6883      	ldr	r3, [r0, #8]
   192f0:	b123      	cbz	r3, 192fc <os_mbuf_free+0x10>
   192f2:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   192f4:	6858      	ldr	r0, [r3, #4]
   192f6:	f000 f93d 	bl	19574 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   192fa:	bd08      	pop	{r3, pc}
    rc = 0;
   192fc:	2000      	movs	r0, #0
    return (rc);
   192fe:	e7fc      	b.n	192fa <os_mbuf_free+0xe>

00019300 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   19300:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   19302:	b160      	cbz	r0, 1931e <os_mbuf_free_chain+0x1e>
{
   19304:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   19306:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   19308:	4618      	mov	r0, r3
   1930a:	f7ff ffef 	bl	192ec <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   1930e:	4623      	mov	r3, r4
        if (rc != 0) {
   19310:	4602      	mov	r2, r0
   19312:	b910      	cbnz	r0, 1931a <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   19314:	2c00      	cmp	r4, #0
   19316:	d1f6      	bne.n	19306 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   19318:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   1931a:	4610      	mov	r0, r2
   1931c:	bd10      	pop	{r4, pc}
    rc = 0;
   1931e:	2200      	movs	r2, #0
}
   19320:	4610      	mov	r0, r2
   19322:	4770      	bx	lr

00019324 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   19324:	2300      	movs	r3, #0
    while (om != NULL) {
   19326:	e003      	b.n	19330 <os_mbuf_len+0xc>
        len += om->om_len;
   19328:	88c2      	ldrh	r2, [r0, #6]
   1932a:	4413      	add	r3, r2
   1932c:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   1932e:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   19330:	2800      	cmp	r0, #0
   19332:	d1f9      	bne.n	19328 <os_mbuf_len+0x4>
    }

    return len;
}
   19334:	4618      	mov	r0, r3
   19336:	4770      	bx	lr

00019338 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   19338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   1933c:	2800      	cmp	r0, #0
   1933e:	d04d      	beq.n	193dc <os_mbuf_append+0xa4>
   19340:	460f      	mov	r7, r1
   19342:	4691      	mov	r9, r2
   19344:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   19346:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   1934a:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   1934c:	e000      	b.n	19350 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   1934e:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   19350:	68eb      	ldr	r3, [r5, #12]
   19352:	2b00      	cmp	r3, #0
   19354:	d1fb      	bne.n	1934e <os_mbuf_append+0x16>
    }

    remainder = len;
   19356:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   19358:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1935a:	f105 0410 	add.w	r4, r5, #16
   1935e:	881b      	ldrh	r3, [r3, #0]
   19360:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   19362:	6828      	ldr	r0, [r5, #0]
   19364:	88eb      	ldrh	r3, [r5, #6]
   19366:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   19368:	1a24      	subs	r4, r4, r0
   1936a:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   1936c:	b164      	cbz	r4, 19388 <os_mbuf_append+0x50>
        if (space > remainder) {
   1936e:	454c      	cmp	r4, r9
   19370:	dd00      	ble.n	19374 <os_mbuf_append+0x3c>
            space = remainder;
   19372:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   19374:	4622      	mov	r2, r4
   19376:	4639      	mov	r1, r7
   19378:	f000 ff78 	bl	1a26c <memcpy>

        last->om_len += space;
   1937c:	88eb      	ldrh	r3, [r5, #6]
   1937e:	4423      	add	r3, r4
   19380:	80eb      	strh	r3, [r5, #6]
        data += space;
   19382:	4427      	add	r7, r4
        remainder -= space;
   19384:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   19388:	2e00      	cmp	r6, #0
   1938a:	dd16      	ble.n	193ba <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   1938c:	2100      	movs	r1, #0
   1938e:	4640      	mov	r0, r8
   19390:	f7ff ff78 	bl	19284 <os_mbuf_get>
        if (!new) {
   19394:	4604      	mov	r4, r0
   19396:	b180      	cbz	r0, 193ba <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   19398:	f8b8 2000 	ldrh.w	r2, [r8]
   1939c:	42b2      	cmp	r2, r6
   1939e:	bfa8      	it	ge
   193a0:	4632      	movge	r2, r6
   193a2:	b292      	uxth	r2, r2
   193a4:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   193a6:	4639      	mov	r1, r7
   193a8:	6800      	ldr	r0, [r0, #0]
   193aa:	f000 ff5f 	bl	1a26c <memcpy>
        data += new->om_len;
   193ae:	88e3      	ldrh	r3, [r4, #6]
   193b0:	441f      	add	r7, r3
        remainder -= new->om_len;
   193b2:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   193b4:	60ec      	str	r4, [r5, #12]
        last = new;
   193b6:	4625      	mov	r5, r4
   193b8:	e7e6      	b.n	19388 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   193ba:	f89a 3005 	ldrb.w	r3, [sl, #5]
   193be:	2b07      	cmp	r3, #7
   193c0:	d907      	bls.n	193d2 <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   193c2:	eba9 0906 	sub.w	r9, r9, r6
   193c6:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   193ca:	fa13 f989 	uxtah	r9, r3, r9
   193ce:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   193d2:	b106      	cbz	r6, 193d6 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   193d4:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   193d6:	4630      	mov	r0, r6
   193d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   193dc:	2602      	movs	r6, #2
   193de:	e7fa      	b.n	193d6 <os_mbuf_append+0x9e>

000193e0 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   193e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   193e4:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   193e6:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   193ea:	2700      	movs	r7, #0
    head = NULL;
   193ec:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   193ee:	e017      	b.n	19420 <os_mbuf_dup+0x40>
    startoff = 0;
   193f0:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   193f2:	4623      	mov	r3, r4
   193f4:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   193f8:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   193fa:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   193fc:	b299      	uxth	r1, r3
   193fe:	4640      	mov	r0, r8
   19400:	f7ff ff40 	bl	19284 <os_mbuf_get>
   19404:	4605      	mov	r5, r0
   19406:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   19408:	b188      	cbz	r0, 1942e <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   1940a:	7923      	ldrb	r3, [r4, #4]
   1940c:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   1940e:	88e3      	ldrh	r3, [r4, #6]
   19410:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   19412:	88e2      	ldrh	r2, [r4, #6]
   19414:	6821      	ldr	r1, [r4, #0]
   19416:	6828      	ldr	r0, [r5, #0]
   19418:	f000 ff28 	bl	1a26c <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1941c:	68e4      	ldr	r4, [r4, #12]
   1941e:	462f      	mov	r7, r5
   19420:	b14c      	cbz	r4, 19436 <os_mbuf_dup+0x56>
        if (head) {
   19422:	b15e      	cbz	r6, 1943c <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   19424:	7963      	ldrb	r3, [r4, #5]
   19426:	2b07      	cmp	r3, #7
   19428:	d9e2      	bls.n	193f0 <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   1942a:	b299      	uxth	r1, r3
   1942c:	e7e1      	b.n	193f2 <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   1942e:	4630      	mov	r0, r6
   19430:	f7ff ff66 	bl	19300 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   19434:	462e      	mov	r6, r5
}
   19436:	4630      	mov	r0, r6
   19438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   1943c:	7963      	ldrb	r3, [r4, #5]
   1943e:	2b07      	cmp	r3, #7
   19440:	d911      	bls.n	19466 <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   19442:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   19444:	4623      	mov	r3, r4
   19446:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1944a:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1944c:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1944e:	b299      	uxth	r1, r3
   19450:	4640      	mov	r0, r8
   19452:	f7ff ff17 	bl	19284 <os_mbuf_get>
            if (!head) {
   19456:	4606      	mov	r6, r0
   19458:	2800      	cmp	r0, #0
   1945a:	d0ec      	beq.n	19436 <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   1945c:	7963      	ldrb	r3, [r4, #5]
   1945e:	2b07      	cmp	r3, #7
   19460:	d803      	bhi.n	1946a <os_mbuf_dup+0x8a>
            copy = head;
   19462:	4605      	mov	r5, r0
   19464:	e7d1      	b.n	1940a <os_mbuf_dup+0x2a>
    startoff = 0;
   19466:	2100      	movs	r1, #0
   19468:	e7ec      	b.n	19444 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   1946a:	88c3      	ldrh	r3, [r0, #6]
   1946c:	b973      	cbnz	r3, 1948c <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1946e:	f100 0510 	add.w	r5, r0, #16
   19472:	7962      	ldrb	r2, [r4, #5]
   19474:	f104 0110 	add.w	r1, r4, #16
   19478:	4628      	mov	r0, r5
   1947a:	f000 fef7 	bl	1a26c <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   1947e:	7963      	ldrb	r3, [r4, #5]
   19480:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   19482:	7963      	ldrb	r3, [r4, #5]
   19484:	441d      	add	r5, r3
   19486:	6035      	str	r5, [r6, #0]
            copy = head;
   19488:	4635      	mov	r5, r6
   1948a:	e7be      	b.n	1940a <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   1948c:	2300      	movs	r3, #0
   1948e:	461a      	mov	r2, r3
   19490:	4619      	mov	r1, r3
   19492:	4618      	mov	r0, r3
   19494:	f7ff faf4 	bl	18a80 <__assert_func>

00019498 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   19498:	2800      	cmp	r0, #0
   1949a:	d031      	beq.n	19500 <os_mempool_init_internal+0x68>
{
   1949c:	b430      	push	{r4, r5}
   1949e:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   194a0:	2a00      	cmp	r2, #0
   194a2:	d02f      	beq.n	19504 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   194a4:	b1bb      	cbz	r3, 194d6 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   194a6:	b113      	cbz	r3, 194ae <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   194a8:	f013 0f03 	tst.w	r3, #3
   194ac:	d12c      	bne.n	19508 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   194ae:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   194b0:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   194b2:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   194b4:	f89d 000c 	ldrb.w	r0, [sp, #12]
   194b8:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   194ba:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   194bc:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   194be:	9802      	ldr	r0, [sp, #8]
   194c0:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   194c2:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   194c4:	b199      	cbz	r1, 194ee <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   194c6:	f012 0f03 	tst.w	r2, #3
   194ca:	d002      	beq.n	194d2 <os_mempool_init_internal+0x3a>
   194cc:	f022 0203 	bic.w	r2, r2, #3
   194d0:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   194d2:	2001      	movs	r0, #1
   194d4:	e007      	b.n	194e6 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   194d6:	2900      	cmp	r1, #0
   194d8:	d0e5      	beq.n	194a6 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   194da:	2003      	movs	r0, #3
   194dc:	e00e      	b.n	194fc <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   194de:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   194e0:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   194e2:	3001      	adds	r0, #1
            block_addr += true_block_size;
   194e4:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   194e6:	4281      	cmp	r1, r0
   194e8:	dcf9      	bgt.n	194de <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   194ea:	2200      	movs	r2, #0
   194ec:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   194ee:	2000      	movs	r0, #0
   194f0:	6120      	str	r0, [r4, #16]
   194f2:	4b06      	ldr	r3, [pc, #24]	; (1950c <os_mempool_init_internal+0x74>)
   194f4:	685a      	ldr	r2, [r3, #4]
   194f6:	6014      	str	r4, [r2, #0]
   194f8:	3410      	adds	r4, #16
   194fa:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   194fc:	bc30      	pop	{r4, r5}
   194fe:	4770      	bx	lr
        return OS_INVALID_PARM;
   19500:	2003      	movs	r0, #3
}
   19502:	4770      	bx	lr
        return OS_INVALID_PARM;
   19504:	2003      	movs	r0, #3
   19506:	e7f9      	b.n	194fc <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   19508:	2004      	movs	r0, #4
   1950a:	e7f7      	b.n	194fc <os_mempool_init_internal+0x64>
   1950c:	2000de98 	.word	0x2000de98

00019510 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   19510:	b510      	push	{r4, lr}
   19512:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   19514:	2400      	movs	r4, #0
   19516:	9401      	str	r4, [sp, #4]
   19518:	9c04      	ldr	r4, [sp, #16]
   1951a:	9400      	str	r4, [sp, #0]
   1951c:	f7ff ffbc 	bl	19498 <os_mempool_init_internal>
}
   19520:	b002      	add	sp, #8
   19522:	bd10      	pop	{r4, pc}

00019524 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   19524:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   19526:	b1a0      	cbz	r0, 19552 <os_memblock_get+0x2e>
   19528:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1952a:	f000 fd3f 	bl	19fac <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   1952e:	88e3      	ldrh	r3, [r4, #6]
   19530:	b153      	cbz	r3, 19548 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   19532:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   19534:	682a      	ldr	r2, [r5, #0]
   19536:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   19538:	3b01      	subs	r3, #1
   1953a:	b29b      	uxth	r3, r3
   1953c:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   1953e:	8922      	ldrh	r2, [r4, #8]
   19540:	4293      	cmp	r3, r2
   19542:	d202      	bcs.n	1954a <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   19544:	8123      	strh	r3, [r4, #8]
   19546:	e000      	b.n	1954a <os_memblock_get+0x26>
    block = NULL;
   19548:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   1954a:	f000 fd35 	bl	19fb8 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   1954e:	4628      	mov	r0, r5
   19550:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   19552:	2500      	movs	r5, #0
    return (void *)block;
   19554:	e7fb      	b.n	1954e <os_memblock_get+0x2a>

00019556 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   19556:	b538      	push	{r3, r4, r5, lr}
   19558:	4604      	mov	r4, r0
   1955a:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   1955c:	f000 fd26 	bl	19fac <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   19560:	6963      	ldr	r3, [r4, #20]
   19562:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   19564:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   19566:	88e3      	ldrh	r3, [r4, #6]
   19568:	3301      	adds	r3, #1
   1956a:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   1956c:	f000 fd24 	bl	19fb8 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   19570:	2000      	movs	r0, #0
   19572:	bd38      	pop	{r3, r4, r5, pc}

00019574 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   19574:	b168      	cbz	r0, 19592 <os_memblock_put+0x1e>
{
   19576:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   19578:	b169      	cbz	r1, 19596 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   1957a:	7a83      	ldrb	r3, [r0, #10]
   1957c:	f013 0f01 	tst.w	r3, #1
   19580:	d004      	beq.n	1958c <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   19582:	69c3      	ldr	r3, [r0, #28]
   19584:	b113      	cbz	r3, 1958c <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   19586:	6a02      	ldr	r2, [r0, #32]
   19588:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   1958a:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   1958c:	f7ff ffe3 	bl	19556 <os_memblock_put_from_cb>
   19590:	e7fb      	b.n	1958a <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   19592:	2003      	movs	r0, #3
}
   19594:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   19596:	2003      	movs	r0, #3
   19598:	e7f7      	b.n	1958a <os_memblock_put+0x16>
	...

0001959c <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   1959c:	4b02      	ldr	r3, [pc, #8]	; (195a8 <os_mempool_module_init+0xc>)
   1959e:	2200      	movs	r2, #0
   195a0:	601a      	str	r2, [r3, #0]
   195a2:	605b      	str	r3, [r3, #4]
}
   195a4:	4770      	bx	lr
   195a6:	bf00      	nop
   195a8:	2000de98 	.word	0x2000de98

000195ac <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   195ac:	4b02      	ldr	r3, [pc, #8]	; (195b8 <os_msys_find_biggest_pool+0xc>)
   195ae:	6818      	ldr	r0, [r3, #0]
   195b0:	b108      	cbz	r0, 195b6 <os_msys_find_biggest_pool+0xa>
   195b2:	6858      	ldr	r0, [r3, #4]
   195b4:	3808      	subs	r0, #8
}
   195b6:	4770      	bx	lr
   195b8:	2000010c 	.word	0x2000010c

000195bc <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   195bc:	4b09      	ldr	r3, [pc, #36]	; (195e4 <os_msys_find_pool+0x28>)
   195be:	6819      	ldr	r1, [r3, #0]
   195c0:	460b      	mov	r3, r1
   195c2:	b123      	cbz	r3, 195ce <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   195c4:	881a      	ldrh	r2, [r3, #0]
   195c6:	4282      	cmp	r2, r0
   195c8:	d201      	bcs.n	195ce <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   195ca:	689b      	ldr	r3, [r3, #8]
   195cc:	e7f9      	b.n	195c2 <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   195ce:	b10b      	cbz	r3, 195d4 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   195d0:	4618      	mov	r0, r3
   195d2:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   195d4:	b119      	cbz	r1, 195de <os_msys_find_pool+0x22>
   195d6:	4b03      	ldr	r3, [pc, #12]	; (195e4 <os_msys_find_pool+0x28>)
   195d8:	685b      	ldr	r3, [r3, #4]
   195da:	3b08      	subs	r3, #8
   195dc:	e7f8      	b.n	195d0 <os_msys_find_pool+0x14>
   195de:	460b      	mov	r3, r1
    return (pool);
   195e0:	e7f6      	b.n	195d0 <os_msys_find_pool+0x14>
   195e2:	bf00      	nop
   195e4:	2000010c 	.word	0x2000010c

000195e8 <os_msys_register>:
{
   195e8:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   195ea:	4b11      	ldr	r3, [pc, #68]	; (19630 <os_msys_register+0x48>)
   195ec:	681d      	ldr	r5, [r3, #0]
   195ee:	462b      	mov	r3, r5
    prev = NULL;
   195f0:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   195f2:	b133      	cbz	r3, 19602 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   195f4:	8801      	ldrh	r1, [r0, #0]
   195f6:	881a      	ldrh	r2, [r3, #0]
   195f8:	4291      	cmp	r1, r2
   195fa:	d302      	bcc.n	19602 <os_msys_register+0x1a>
        prev = pool;
   195fc:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   195fe:	689b      	ldr	r3, [r3, #8]
   19600:	e7f7      	b.n	195f2 <os_msys_register+0xa>
    if (prev) {
   19602:	b15c      	cbz	r4, 1961c <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   19604:	68a3      	ldr	r3, [r4, #8]
   19606:	6083      	str	r3, [r0, #8]
   19608:	b11b      	cbz	r3, 19612 <os_msys_register+0x2a>
   1960a:	60a0      	str	r0, [r4, #8]
}
   1960c:	2000      	movs	r0, #0
   1960e:	bc30      	pop	{r4, r5}
   19610:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   19612:	f100 0308 	add.w	r3, r0, #8
   19616:	4a06      	ldr	r2, [pc, #24]	; (19630 <os_msys_register+0x48>)
   19618:	6053      	str	r3, [r2, #4]
   1961a:	e7f6      	b.n	1960a <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   1961c:	6085      	str	r5, [r0, #8]
   1961e:	b115      	cbz	r5, 19626 <os_msys_register+0x3e>
   19620:	4b03      	ldr	r3, [pc, #12]	; (19630 <os_msys_register+0x48>)
   19622:	6018      	str	r0, [r3, #0]
   19624:	e7f2      	b.n	1960c <os_msys_register+0x24>
   19626:	f100 0308 	add.w	r3, r0, #8
   1962a:	4a01      	ldr	r2, [pc, #4]	; (19630 <os_msys_register+0x48>)
   1962c:	6053      	str	r3, [r2, #4]
   1962e:	e7f7      	b.n	19620 <os_msys_register+0x38>
   19630:	2000010c 	.word	0x2000010c

00019634 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   19634:	b530      	push	{r4, r5, lr}
   19636:	b083      	sub	sp, #12
   19638:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1963a:	9d07      	ldr	r5, [sp, #28]
   1963c:	9501      	str	r5, [sp, #4]
   1963e:	9d06      	ldr	r5, [sp, #24]
   19640:	9500      	str	r5, [sp, #0]
   19642:	f001 f96d 	bl	1a920 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   19646:	b138      	cbz	r0, 19658 <os_msys_init_once+0x24>
   19648:	2000      	movs	r0, #0
   1964a:	9000      	str	r0, [sp, #0]
   1964c:	4b09      	ldr	r3, [pc, #36]	; (19674 <os_msys_init_once+0x40>)
   1964e:	681d      	ldr	r5, [r3, #0]
   19650:	4603      	mov	r3, r0
   19652:	4602      	mov	r2, r0
   19654:	4601      	mov	r1, r0
   19656:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   19658:	4620      	mov	r0, r4
   1965a:	f7ff ffc5 	bl	195e8 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1965e:	b138      	cbz	r0, 19670 <os_msys_init_once+0x3c>
   19660:	2000      	movs	r0, #0
   19662:	9000      	str	r0, [sp, #0]
   19664:	4b03      	ldr	r3, [pc, #12]	; (19674 <os_msys_init_once+0x40>)
   19666:	681c      	ldr	r4, [r3, #0]
   19668:	4603      	mov	r3, r0
   1966a:	4602      	mov	r2, r0
   1966c:	4601      	mov	r1, r0
   1966e:	47a0      	blx	r4
}
   19670:	b003      	add	sp, #12
   19672:	bd30      	pop	{r4, r5, pc}
   19674:	20000104 	.word	0x20000104

00019678 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   19678:	4b02      	ldr	r3, [pc, #8]	; (19684 <os_msys_reset+0xc>)
   1967a:	2200      	movs	r2, #0
   1967c:	601a      	str	r2, [r3, #0]
   1967e:	605b      	str	r3, [r3, #4]
}
   19680:	4770      	bx	lr
   19682:	bf00      	nop
   19684:	2000010c 	.word	0x2000010c

00019688 <os_msys_get_pkthdr>:
{
   19688:	b510      	push	{r4, lr}
   1968a:	460c      	mov	r4, r1
    if (dsize == 0) {
   1968c:	b930      	cbnz	r0, 1969c <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   1968e:	f7ff ff8d 	bl	195ac <os_msys_find_biggest_pool>
    if (!pool) {
   19692:	b158      	cbz	r0, 196ac <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   19694:	b2e1      	uxtb	r1, r4
   19696:	f7ff fe0e 	bl	192b6 <os_mbuf_get_pkthdr>
}
   1969a:	bd10      	pop	{r4, pc}
   1969c:	f101 0308 	add.w	r3, r1, #8
   196a0:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   196a2:	4403      	add	r3, r0
   196a4:	b298      	uxth	r0, r3
   196a6:	f7ff ff89 	bl	195bc <os_msys_find_pool>
   196aa:	e7f2      	b.n	19692 <os_msys_get_pkthdr+0xa>
    return (NULL);
   196ac:	2000      	movs	r0, #0
   196ae:	e7f4      	b.n	1969a <os_msys_get_pkthdr+0x12>

000196b0 <os_msys_init>:

void
os_msys_init(void)
{
   196b0:	b500      	push	{lr}
   196b2:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   196b4:	f7ff ffe0 	bl	19678 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   196b8:	4b06      	ldr	r3, [pc, #24]	; (196d4 <os_msys_init+0x24>)
   196ba:	9301      	str	r3, [sp, #4]
   196bc:	f44f 7392 	mov.w	r3, #292	; 0x124
   196c0:	9300      	str	r3, [sp, #0]
   196c2:	2340      	movs	r3, #64	; 0x40
   196c4:	4a04      	ldr	r2, [pc, #16]	; (196d8 <os_msys_init+0x28>)
   196c6:	4905      	ldr	r1, [pc, #20]	; (196dc <os_msys_init+0x2c>)
   196c8:	4805      	ldr	r0, [pc, #20]	; (196e0 <os_msys_init+0x30>)
   196ca:	f7ff ffb3 	bl	19634 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   196ce:	b003      	add	sp, #12
   196d0:	f85d fb04 	ldr.w	pc, [sp], #4
   196d4:	00026b6c 	.word	0x00026b6c
   196d8:	2000d988 	.word	0x2000d988
   196dc:	2000d994 	.word	0x2000d994
   196e0:	20009088 	.word	0x20009088

000196e4 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   196e4:	4603      	mov	r3, r0
   196e6:	b128      	cbz	r0, 196f4 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   196e8:	2000      	movs	r0, #0
   196ea:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   196ec:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   196ee:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   196f0:	6018      	str	r0, [r3, #0]
   196f2:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   196f4:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   196f6:	4770      	bx	lr

000196f8 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   196f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   196fa:	4b2c      	ldr	r3, [pc, #176]	; (197ac <os_mutex_release+0xb4>)
   196fc:	681b      	ldr	r3, [r3, #0]
   196fe:	2b00      	cmp	r3, #0
   19700:	d04d      	beq.n	1979e <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   19702:	2800      	cmp	r0, #0
   19704:	d04d      	beq.n	197a2 <os_mutex_release+0xaa>
   19706:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   19708:	f000 f97a 	bl	19a00 <os_sched_get_current_task>
   1970c:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1970e:	88e3      	ldrh	r3, [r4, #6]
   19710:	2b00      	cmp	r3, #0
   19712:	d048      	beq.n	197a6 <os_mutex_release+0xae>
   19714:	68a2      	ldr	r2, [r4, #8]
   19716:	4282      	cmp	r2, r0
   19718:	d001      	beq.n	1971e <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   1971a:	2005      	movs	r0, #5
   1971c:	e040      	b.n	197a0 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1971e:	2b01      	cmp	r3, #1
   19720:	d003      	beq.n	1972a <os_mutex_release+0x32>
        --mu->mu_level;
   19722:	3b01      	subs	r3, #1
   19724:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   19726:	2000      	movs	r0, #0
        goto done;
   19728:	e03a      	b.n	197a0 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   1972a:	f000 fc3f 	bl	19fac <os_arch_save_sr>
   1972e:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   19730:	88e3      	ldrh	r3, [r4, #6]
   19732:	3b01      	subs	r3, #1
   19734:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   19736:	7aea      	ldrb	r2, [r5, #11]
   19738:	7963      	ldrb	r3, [r4, #5]
   1973a:	429a      	cmp	r2, r3
   1973c:	d11e      	bne.n	1977c <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1973e:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   19740:	b146      	cbz	r6, 19754 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   19742:	69f3      	ldr	r3, [r6, #28]
   19744:	b1fb      	cbz	r3, 19786 <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   19746:	4630      	mov	r0, r6
   19748:	f000 f9ae 	bl	19aa8 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1974c:	2301      	movs	r3, #1
   1974e:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   19750:	7af3      	ldrb	r3, [r6, #11]
   19752:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   19754:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   19756:	b116      	cbz	r6, 1975e <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   19758:	7bb3      	ldrb	r3, [r6, #14]
   1975a:	3301      	adds	r3, #1
   1975c:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1975e:	7bab      	ldrb	r3, [r5, #14]
   19760:	3b01      	subs	r3, #1
   19762:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   19764:	f000 fa1a 	bl	19b9c <os_sched_next_task>
   19768:	4604      	mov	r4, r0
    if (rdy != current) {
   1976a:	4285      	cmp	r5, r0
   1976c:	d010      	beq.n	19790 <os_mutex_release+0x98>
        resched = 1;
   1976e:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   19770:	4638      	mov	r0, r7
   19772:	f000 fc21 	bl	19fb8 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   19776:	b96d      	cbnz	r5, 19794 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   19778:	2000      	movs	r0, #0
   1977a:	e011      	b.n	197a0 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   1977c:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   1977e:	4628      	mov	r0, r5
   19780:	f000 fa24 	bl	19bcc <os_sched_resort>
   19784:	e7db      	b.n	1973e <os_mutex_release+0x46>
        assert(rdy->t_obj);
   19786:	461a      	mov	r2, r3
   19788:	4619      	mov	r1, r3
   1978a:	4618      	mov	r0, r3
   1978c:	f7ff f978 	bl	18a80 <__assert_func>
    resched = 0;
   19790:	2500      	movs	r5, #0
   19792:	e7ed      	b.n	19770 <os_mutex_release+0x78>
        os_sched(rdy);
   19794:	4620      	mov	r0, r4
   19796:	f000 fa07 	bl	19ba8 <os_sched>
    ret = OS_OK;
   1979a:	2000      	movs	r0, #0
   1979c:	e000      	b.n	197a0 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   1979e:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   197a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   197a2:	2003      	movs	r0, #3
   197a4:	e7fc      	b.n	197a0 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   197a6:	2005      	movs	r0, #5
   197a8:	e7fa      	b.n	197a0 <os_mutex_release+0xa8>
   197aa:	bf00      	nop
   197ac:	2000de88 	.word	0x2000de88

000197b0 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   197b0:	4b36      	ldr	r3, [pc, #216]	; (1988c <os_mutex_pend+0xdc>)
   197b2:	681b      	ldr	r3, [r3, #0]
   197b4:	2b00      	cmp	r3, #0
   197b6:	d065      	beq.n	19884 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   197b8:	2800      	cmp	r0, #0
   197ba:	d065      	beq.n	19888 <os_mutex_pend+0xd8>
{
   197bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   197c0:	460f      	mov	r7, r1
   197c2:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   197c4:	f000 fbf2 	bl	19fac <os_arch_save_sr>
   197c8:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   197ca:	f000 f919 	bl	19a00 <os_sched_get_current_task>
   197ce:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   197d0:	88e3      	ldrh	r3, [r4, #6]
   197d2:	b19b      	cbz	r3, 197fc <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   197d4:	68a2      	ldr	r2, [r4, #8]
   197d6:	4282      	cmp	r2, r0
   197d8:	d01e      	beq.n	19818 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   197da:	b327      	cbz	r7, 19826 <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   197dc:	7ad1      	ldrb	r1, [r2, #11]
   197de:	7ac3      	ldrb	r3, [r0, #11]
   197e0:	4299      	cmp	r1, r3
   197e2:	d825      	bhi.n	19830 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   197e4:	6821      	ldr	r1, [r4, #0]
   197e6:	b369      	cbz	r1, 19844 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   197e8:	460b      	mov	r3, r1
    last = NULL;
   197ea:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   197ec:	b32b      	cbz	r3, 1983a <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   197ee:	7ae8      	ldrb	r0, [r5, #11]
   197f0:	7ada      	ldrb	r2, [r3, #11]
   197f2:	4290      	cmp	r0, r2
   197f4:	d321      	bcc.n	1983a <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   197f6:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   197f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   197fa:	e7f7      	b.n	197ec <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   197fc:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   197fe:	7ac3      	ldrb	r3, [r0, #11]
   19800:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   19802:	7b83      	ldrb	r3, [r0, #14]
   19804:	3301      	adds	r3, #1
   19806:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   19808:	2301      	movs	r3, #1
   1980a:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1980c:	4640      	mov	r0, r8
   1980e:	f000 fbd3 	bl	19fb8 <os_arch_restore_sr>
        ret = OS_OK;
   19812:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   19814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   19818:	3301      	adds	r3, #1
   1981a:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1981c:	4640      	mov	r0, r8
   1981e:	f000 fbcb 	bl	19fb8 <os_arch_restore_sr>
        ret = OS_OK;
   19822:	2000      	movs	r0, #0
        goto done;
   19824:	e7f6      	b.n	19814 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   19826:	4640      	mov	r0, r8
   19828:	f000 fbc6 	bl	19fb8 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   1982c:	2006      	movs	r0, #6
        goto done;
   1982e:	e7f1      	b.n	19814 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   19830:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   19832:	68a0      	ldr	r0, [r4, #8]
   19834:	f000 f9ca 	bl	19bcc <os_sched_resort>
   19838:	e7d4      	b.n	197e4 <os_mutex_pend+0x34>
    if (last) {
   1983a:	b11e      	cbz	r6, 19844 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   1983c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   1983e:	64eb      	str	r3, [r5, #76]	; 0x4c
   19840:	64f5      	str	r5, [r6, #76]	; 0x4c
   19842:	e001      	b.n	19848 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   19844:	64e9      	str	r1, [r5, #76]	; 0x4c
   19846:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   19848:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   1984a:	7b6b      	ldrb	r3, [r5, #13]
   1984c:	f043 0304 	orr.w	r3, r3, #4
   19850:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   19852:	4639      	mov	r1, r7
   19854:	4628      	mov	r0, r5
   19856:	f000 f8df 	bl	19a18 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   1985a:	4640      	mov	r0, r8
   1985c:	f000 fbac 	bl	19fb8 <os_arch_restore_sr>
    os_sched(NULL);
   19860:	2000      	movs	r0, #0
   19862:	f000 f9a1 	bl	19ba8 <os_sched>
    OS_ENTER_CRITICAL(sr);
   19866:	f000 fba1 	bl	19fac <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   1986a:	7b6b      	ldrb	r3, [r5, #13]
   1986c:	f023 0304 	bic.w	r3, r3, #4
   19870:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   19872:	f000 fba1 	bl	19fb8 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   19876:	68a3      	ldr	r3, [r4, #8]
   19878:	42ab      	cmp	r3, r5
   1987a:	d001      	beq.n	19880 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   1987c:	2006      	movs	r0, #6
   1987e:	e7c9      	b.n	19814 <os_mutex_pend+0x64>
        ret = OS_OK;
   19880:	2000      	movs	r0, #0
   19882:	e7c7      	b.n	19814 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   19884:	2009      	movs	r0, #9
   19886:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   19888:	2003      	movs	r0, #3
}
   1988a:	4770      	bx	lr
   1988c:	2000de88 	.word	0x2000de88

00019890 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   19890:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   19892:	4b05      	ldr	r3, [pc, #20]	; (198a8 <os_sanity_check_list_lock+0x18>)
   19894:	6818      	ldr	r0, [r3, #0]
   19896:	b900      	cbnz	r0, 1989a <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   19898:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   1989a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1989e:	4803      	ldr	r0, [pc, #12]	; (198ac <os_sanity_check_list_lock+0x1c>)
   198a0:	f7ff ff86 	bl	197b0 <os_mutex_pend>
err:
   198a4:	e7f8      	b.n	19898 <os_sanity_check_list_lock+0x8>
   198a6:	bf00      	nop
   198a8:	2000de88 	.word	0x2000de88
   198ac:	2000dea0 	.word	0x2000dea0

000198b0 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   198b0:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   198b2:	4b04      	ldr	r3, [pc, #16]	; (198c4 <os_sanity_check_list_unlock+0x14>)
   198b4:	6818      	ldr	r0, [r3, #0]
   198b6:	b900      	cbnz	r0, 198ba <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   198b8:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   198ba:	4803      	ldr	r0, [pc, #12]	; (198c8 <os_sanity_check_list_unlock+0x18>)
   198bc:	f7ff ff1c 	bl	196f8 <os_mutex_release>
err:
   198c0:	e7fa      	b.n	198b8 <os_sanity_check_list_unlock+0x8>
   198c2:	bf00      	nop
   198c4:	2000de88 	.word	0x2000de88
   198c8:	2000dea0 	.word	0x2000dea0

000198cc <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   198cc:	2300      	movs	r3, #0
   198ce:	6003      	str	r3, [r0, #0]
   198d0:	6043      	str	r3, [r0, #4]
   198d2:	6083      	str	r3, [r0, #8]
   198d4:	60c3      	str	r3, [r0, #12]
   198d6:	6103      	str	r3, [r0, #16]
}
   198d8:	4618      	mov	r0, r3
   198da:	4770      	bx	lr

000198dc <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   198dc:	b510      	push	{r4, lr}
   198de:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   198e0:	f7ff ffd6 	bl	19890 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   198e4:	4603      	mov	r3, r0
   198e6:	b108      	cbz	r0, 198ec <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   198e8:	4618      	mov	r0, r3
   198ea:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   198ec:	4b03      	ldr	r3, [pc, #12]	; (198fc <os_sanity_check_register+0x20>)
   198ee:	681a      	ldr	r2, [r3, #0]
   198f0:	6122      	str	r2, [r4, #16]
   198f2:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   198f4:	f7ff ffdc 	bl	198b0 <os_sanity_check_list_unlock>
   198f8:	4603      	mov	r3, r0
err:
   198fa:	e7f5      	b.n	198e8 <os_sanity_check_register+0xc>
   198fc:	2000d9b0 	.word	0x2000d9b0

00019900 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   19900:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   19902:	f7ff ffc5 	bl	19890 <os_sanity_check_list_lock>
    if (rc != 0) {
   19906:	b910      	cbnz	r0, 1990e <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   19908:	4b17      	ldr	r3, [pc, #92]	; (19968 <os_sanity_run+0x68>)
   1990a:	681c      	ldr	r4, [r3, #0]
   1990c:	e00e      	b.n	1992c <os_sanity_run+0x2c>
        assert(0);
   1990e:	2300      	movs	r3, #0
   19910:	461a      	mov	r2, r3
   19912:	4619      	mov	r1, r3
   19914:	4618      	mov	r0, r3
   19916:	f7ff f8b3 	bl	18a80 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1991a:	f000 facf 	bl	19ebc <os_time_get>
   1991e:	6823      	ldr	r3, [r4, #0]
   19920:	6862      	ldr	r2, [r4, #4]
   19922:	4413      	add	r3, r2
   19924:	1ac3      	subs	r3, r0, r3
   19926:	2b00      	cmp	r3, #0
   19928:	dc0d      	bgt.n	19946 <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1992a:	6924      	ldr	r4, [r4, #16]
   1992c:	b18c      	cbz	r4, 19952 <os_sanity_run+0x52>
        if (sc->sc_func) {
   1992e:	68a3      	ldr	r3, [r4, #8]
   19930:	2b00      	cmp	r3, #0
   19932:	d0f2      	beq.n	1991a <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   19934:	68e1      	ldr	r1, [r4, #12]
   19936:	4620      	mov	r0, r4
   19938:	4798      	blx	r3
            if (rc == OS_OK) {
   1993a:	2800      	cmp	r0, #0
   1993c:	d1ed      	bne.n	1991a <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   1993e:	f000 fabd 	bl	19ebc <os_time_get>
   19942:	6020      	str	r0, [r4, #0]
                continue;
   19944:	e7f1      	b.n	1992a <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   19946:	2300      	movs	r3, #0
   19948:	461a      	mov	r2, r3
   1994a:	4619      	mov	r1, r3
   1994c:	4618      	mov	r0, r3
   1994e:	f7ff f897 	bl	18a80 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   19952:	f7ff ffad 	bl	198b0 <os_sanity_check_list_unlock>
    if (rc != 0) {
   19956:	b900      	cbnz	r0, 1995a <os_sanity_run+0x5a>
        assert(0);
    }
}
   19958:	bd10      	pop	{r4, pc}
        assert(0);
   1995a:	2300      	movs	r3, #0
   1995c:	461a      	mov	r2, r3
   1995e:	4619      	mov	r1, r3
   19960:	4618      	mov	r0, r3
   19962:	f7ff f88d 	bl	18a80 <__assert_func>
   19966:	bf00      	nop
   19968:	2000d9b0 	.word	0x2000d9b0

0001996c <os_sanity_init>:

int
os_sanity_init(void)
{
   1996c:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   1996e:	4802      	ldr	r0, [pc, #8]	; (19978 <os_sanity_init+0xc>)
   19970:	f7ff feb8 	bl	196e4 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   19974:	bd08      	pop	{r3, pc}
   19976:	bf00      	nop
   19978:	2000dea0 	.word	0x2000dea0

0001997c <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   1997c:	7b03      	ldrb	r3, [r0, #12]
   1997e:	2b01      	cmp	r3, #1
   19980:	d001      	beq.n	19986 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   19982:	2002      	movs	r0, #2
}
   19984:	4770      	bx	lr
{
   19986:	b510      	push	{r4, lr}
   19988:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1998a:	f000 fb0f 	bl	19fac <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1998e:	4b0f      	ldr	r3, [pc, #60]	; (199cc <os_sched_insert+0x50>)
   19990:	681b      	ldr	r3, [r3, #0]
   19992:	b12b      	cbz	r3, 199a0 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   19994:	7ae1      	ldrb	r1, [r4, #11]
   19996:	7ada      	ldrb	r2, [r3, #11]
   19998:	4291      	cmp	r1, r2
   1999a:	d301      	bcc.n	199a0 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1999c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1999e:	e7f8      	b.n	19992 <os_sched_insert+0x16>
    if (entry) {
   199a0:	b153      	cbz	r3, 199b8 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   199a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   199a4:	64a2      	str	r2, [r4, #72]	; 0x48
   199a6:	6463      	str	r3, [r4, #68]	; 0x44
   199a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   199aa:	6014      	str	r4, [r2, #0]
   199ac:	3444      	adds	r4, #68	; 0x44
   199ae:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   199b0:	f000 fb02 	bl	19fb8 <os_arch_restore_sr>
    return (0);
   199b4:	2000      	movs	r0, #0
}
   199b6:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   199b8:	2300      	movs	r3, #0
   199ba:	6463      	str	r3, [r4, #68]	; 0x44
   199bc:	4b03      	ldr	r3, [pc, #12]	; (199cc <os_sched_insert+0x50>)
   199be:	685a      	ldr	r2, [r3, #4]
   199c0:	64a2      	str	r2, [r4, #72]	; 0x48
   199c2:	6014      	str	r4, [r2, #0]
   199c4:	3444      	adds	r4, #68	; 0x44
   199c6:	605c      	str	r4, [r3, #4]
   199c8:	e7f2      	b.n	199b0 <os_sched_insert+0x34>
   199ca:	bf00      	nop
   199cc:	20000114 	.word	0x20000114

000199d0 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   199d0:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   199d2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   199d4:	3301      	adds	r3, #1
   199d6:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   199d8:	4b06      	ldr	r3, [pc, #24]	; (199f4 <os_sched_ctx_sw_hook+0x24>)
   199da:	681c      	ldr	r4, [r3, #0]
   199dc:	4b06      	ldr	r3, [pc, #24]	; (199f8 <os_sched_ctx_sw_hook+0x28>)
   199de:	6818      	ldr	r0, [r3, #0]
   199e0:	4906      	ldr	r1, [pc, #24]	; (199fc <os_sched_ctx_sw_hook+0x2c>)
   199e2:	680b      	ldr	r3, [r1, #0]
   199e4:	1ac2      	subs	r2, r0, r3
   199e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   199e8:	4413      	add	r3, r2
   199ea:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   199ec:	6008      	str	r0, [r1, #0]
}
   199ee:	f85d 4b04 	ldr.w	r4, [sp], #4
   199f2:	4770      	bx	lr
   199f4:	2000deb0 	.word	0x2000deb0
   199f8:	2000dec0 	.word	0x2000dec0
   199fc:	2000deac 	.word	0x2000deac

00019a00 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   19a00:	4b01      	ldr	r3, [pc, #4]	; (19a08 <os_sched_get_current_task+0x8>)
   19a02:	6818      	ldr	r0, [r3, #0]
   19a04:	4770      	bx	lr
   19a06:	bf00      	nop
   19a08:	2000deb0 	.word	0x2000deb0

00019a0c <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   19a0c:	4b01      	ldr	r3, [pc, #4]	; (19a14 <os_sched_set_current_task+0x8>)
   19a0e:	6018      	str	r0, [r3, #0]
}
   19a10:	4770      	bx	lr
   19a12:	bf00      	nop
   19a14:	2000deb0 	.word	0x2000deb0

00019a18 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   19a18:	b538      	push	{r3, r4, r5, lr}
   19a1a:	4604      	mov	r4, r0
   19a1c:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   19a1e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   19a20:	b1d3      	cbz	r3, 19a58 <os_sched_sleep+0x40>
   19a22:	6c82      	ldr	r2, [r0, #72]	; 0x48
   19a24:	649a      	str	r2, [r3, #72]	; 0x48
   19a26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   19a28:	6c62      	ldr	r2, [r4, #68]	; 0x44
   19a2a:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   19a2c:	2302      	movs	r3, #2
   19a2e:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   19a30:	f000 fa44 	bl	19ebc <os_time_get>
   19a34:	4428      	add	r0, r5
   19a36:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   19a38:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   19a3c:	d010      	beq.n	19a60 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   19a3e:	4b18      	ldr	r3, [pc, #96]	; (19aa0 <os_sched_sleep+0x88>)
   19a40:	681b      	ldr	r3, [r3, #0]
   19a42:	b1d3      	cbz	r3, 19a7a <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   19a44:	7b5a      	ldrb	r2, [r3, #13]
   19a46:	f012 0f01 	tst.w	r2, #1
   19a4a:	d116      	bne.n	19a7a <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   19a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   19a4e:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   19a50:	2a00      	cmp	r2, #0
   19a52:	dc12      	bgt.n	19a7a <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   19a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   19a56:	e7f4      	b.n	19a42 <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   19a58:	6c82      	ldr	r2, [r0, #72]	; 0x48
   19a5a:	4b12      	ldr	r3, [pc, #72]	; (19aa4 <os_sched_sleep+0x8c>)
   19a5c:	605a      	str	r2, [r3, #4]
   19a5e:	e7e2      	b.n	19a26 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   19a60:	7b63      	ldrb	r3, [r4, #13]
   19a62:	f043 0301 	orr.w	r3, r3, #1
   19a66:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   19a68:	2300      	movs	r3, #0
   19a6a:	6463      	str	r3, [r4, #68]	; 0x44
   19a6c:	4b0c      	ldr	r3, [pc, #48]	; (19aa0 <os_sched_sleep+0x88>)
   19a6e:	685a      	ldr	r2, [r3, #4]
   19a70:	64a2      	str	r2, [r4, #72]	; 0x48
   19a72:	6014      	str	r4, [r2, #0]
   19a74:	3444      	adds	r4, #68	; 0x44
   19a76:	605c      	str	r4, [r3, #4]
   19a78:	e007      	b.n	19a8a <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   19a7a:	b143      	cbz	r3, 19a8e <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   19a7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   19a7e:	64a2      	str	r2, [r4, #72]	; 0x48
   19a80:	6463      	str	r3, [r4, #68]	; 0x44
   19a82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   19a84:	6014      	str	r4, [r2, #0]
   19a86:	3444      	adds	r4, #68	; 0x44
   19a88:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   19a8a:	2000      	movs	r0, #0
   19a8c:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   19a8e:	2300      	movs	r3, #0
   19a90:	6463      	str	r3, [r4, #68]	; 0x44
   19a92:	4b03      	ldr	r3, [pc, #12]	; (19aa0 <os_sched_sleep+0x88>)
   19a94:	685a      	ldr	r2, [r3, #4]
   19a96:	64a2      	str	r2, [r4, #72]	; 0x48
   19a98:	6014      	str	r4, [r2, #0]
   19a9a:	3444      	adds	r4, #68	; 0x44
   19a9c:	605c      	str	r4, [r3, #4]
   19a9e:	e7f4      	b.n	19a8a <os_sched_sleep+0x72>
   19aa0:	2000011c 	.word	0x2000011c
   19aa4:	20000114 	.word	0x20000114

00019aa8 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   19aa8:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   19aaa:	7b03      	ldrb	r3, [r0, #12]
   19aac:	2b02      	cmp	r3, #2
   19aae:	d108      	bne.n	19ac2 <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   19ab0:	69c3      	ldr	r3, [r0, #28]
   19ab2:	b1db      	cbz	r3, 19aec <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   19ab4:	681a      	ldr	r2, [r3, #0]
   19ab6:	b152      	cbz	r2, 19ace <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   19ab8:	4282      	cmp	r2, r0
   19aba:	d10f      	bne.n	19adc <os_sched_wakeup+0x34>
   19abc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   19abe:	601a      	str	r2, [r3, #0]
   19ac0:	e011      	b.n	19ae6 <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   19ac2:	2300      	movs	r3, #0
   19ac4:	461a      	mov	r2, r3
   19ac6:	4619      	mov	r1, r3
   19ac8:	4618      	mov	r0, r3
   19aca:	f7fe ffd9 	bl	18a80 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   19ace:	2300      	movs	r3, #0
   19ad0:	461a      	mov	r2, r3
   19ad2:	4619      	mov	r1, r3
   19ad4:	4618      	mov	r0, r3
   19ad6:	f7fe ffd3 	bl	18a80 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   19ada:	461a      	mov	r2, r3
   19adc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   19ade:	4283      	cmp	r3, r0
   19ae0:	d1fb      	bne.n	19ada <os_sched_wakeup+0x32>
   19ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   19ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   19ae6:	2300      	movs	r3, #0
   19ae8:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   19aea:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   19aec:	2301      	movs	r3, #1
   19aee:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   19af0:	2300      	movs	r3, #0
   19af2:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   19af4:	7b43      	ldrb	r3, [r0, #13]
   19af6:	f023 0301 	bic.w	r3, r3, #1
   19afa:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   19afc:	6c43      	ldr	r3, [r0, #68]	; 0x44
   19afe:	b143      	cbz	r3, 19b12 <os_sched_wakeup+0x6a>
   19b00:	6c82      	ldr	r2, [r0, #72]	; 0x48
   19b02:	649a      	str	r2, [r3, #72]	; 0x48
   19b04:	6c83      	ldr	r3, [r0, #72]	; 0x48
   19b06:	6c42      	ldr	r2, [r0, #68]	; 0x44
   19b08:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   19b0a:	f7ff ff37 	bl	1997c <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   19b0e:	2000      	movs	r0, #0
   19b10:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   19b12:	6c82      	ldr	r2, [r0, #72]	; 0x48
   19b14:	4b01      	ldr	r3, [pc, #4]	; (19b1c <os_sched_wakeup+0x74>)
   19b16:	605a      	str	r2, [r3, #4]
   19b18:	e7f4      	b.n	19b04 <os_sched_wakeup+0x5c>
   19b1a:	bf00      	nop
   19b1c:	2000011c 	.word	0x2000011c

00019b20 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   19b20:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   19b22:	f000 f9cb 	bl	19ebc <os_time_get>
   19b26:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   19b28:	f000 fa40 	bl	19fac <os_arch_save_sr>
   19b2c:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   19b2e:	4b0a      	ldr	r3, [pc, #40]	; (19b58 <os_sched_os_timer_exp+0x38>)
   19b30:	6818      	ldr	r0, [r3, #0]
    while (t) {
   19b32:	b160      	cbz	r0, 19b4e <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   19b34:	7b43      	ldrb	r3, [r0, #13]
   19b36:	f013 0f01 	tst.w	r3, #1
   19b3a:	d108      	bne.n	19b4e <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   19b3c:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   19b3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   19b40:	1aeb      	subs	r3, r5, r3
   19b42:	2b00      	cmp	r3, #0
   19b44:	db03      	blt.n	19b4e <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   19b46:	f7ff ffaf 	bl	19aa8 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   19b4a:	4620      	mov	r0, r4
   19b4c:	e7f1      	b.n	19b32 <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   19b4e:	4630      	mov	r0, r6
   19b50:	f000 fa32 	bl	19fb8 <os_arch_restore_sr>
}
   19b54:	bd70      	pop	{r4, r5, r6, pc}
   19b56:	bf00      	nop
   19b58:	2000011c 	.word	0x2000011c

00019b5c <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   19b5c:	b510      	push	{r4, lr}
   19b5e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   19b60:	f000 fa2d 	bl	19fbe <os_arch_in_critical>
   19b64:	b150      	cbz	r0, 19b7c <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   19b66:	4b0c      	ldr	r3, [pc, #48]	; (19b98 <os_sched_wakeup_ticks+0x3c>)
   19b68:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   19b6a:	b17b      	cbz	r3, 19b8c <os_sched_wakeup_ticks+0x30>
   19b6c:	7b5a      	ldrb	r2, [r3, #13]
   19b6e:	f012 0f01 	tst.w	r2, #1
   19b72:	d10e      	bne.n	19b92 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   19b74:	6b58      	ldr	r0, [r3, #52]	; 0x34
   19b76:	1b00      	subs	r0, r0, r4
   19b78:	d406      	bmi.n	19b88 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   19b7a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   19b7c:	2300      	movs	r3, #0
   19b7e:	461a      	mov	r2, r3
   19b80:	4619      	mov	r1, r3
   19b82:	4618      	mov	r0, r3
   19b84:	f7fe ff7c 	bl	18a80 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   19b88:	2000      	movs	r0, #0
   19b8a:	e7f6      	b.n	19b7a <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   19b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19b90:	e7f3      	b.n	19b7a <os_sched_wakeup_ticks+0x1e>
   19b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   19b96:	e7f0      	b.n	19b7a <os_sched_wakeup_ticks+0x1e>
   19b98:	2000011c 	.word	0x2000011c

00019b9c <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   19b9c:	4b01      	ldr	r3, [pc, #4]	; (19ba4 <os_sched_next_task+0x8>)
   19b9e:	6818      	ldr	r0, [r3, #0]
   19ba0:	4770      	bx	lr
   19ba2:	bf00      	nop
   19ba4:	20000114 	.word	0x20000114

00019ba8 <os_sched>:
{
   19ba8:	b538      	push	{r3, r4, r5, lr}
   19baa:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   19bac:	f000 f9fe 	bl	19fac <os_arch_save_sr>
   19bb0:	4605      	mov	r5, r0
    if (!next_t) {
   19bb2:	b134      	cbz	r4, 19bc2 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   19bb4:	4620      	mov	r0, r4
   19bb6:	f000 f9ef 	bl	19f98 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   19bba:	4628      	mov	r0, r5
   19bbc:	f000 f9fc 	bl	19fb8 <os_arch_restore_sr>
}
   19bc0:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   19bc2:	f7ff ffeb 	bl	19b9c <os_sched_next_task>
   19bc6:	4604      	mov	r4, r0
   19bc8:	e7f4      	b.n	19bb4 <os_sched+0xc>
	...

00019bcc <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   19bcc:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   19bce:	7b03      	ldrb	r3, [r0, #12]
   19bd0:	2b01      	cmp	r3, #1
   19bd2:	d000      	beq.n	19bd6 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   19bd4:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   19bd6:	6c43      	ldr	r3, [r0, #68]	; 0x44
   19bd8:	b13b      	cbz	r3, 19bea <os_sched_resort+0x1e>
   19bda:	6c82      	ldr	r2, [r0, #72]	; 0x48
   19bdc:	649a      	str	r2, [r3, #72]	; 0x48
   19bde:	6c83      	ldr	r3, [r0, #72]	; 0x48
   19be0:	6c42      	ldr	r2, [r0, #68]	; 0x44
   19be2:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   19be4:	f7ff feca 	bl	1997c <os_sched_insert>
}
   19be8:	e7f4      	b.n	19bd4 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   19bea:	6c82      	ldr	r2, [r0, #72]	; 0x48
   19bec:	4b01      	ldr	r3, [pc, #4]	; (19bf4 <os_sched_resort+0x28>)
   19bee:	605a      	str	r2, [r3, #4]
   19bf0:	e7f5      	b.n	19bde <os_sched_resort+0x12>
   19bf2:	bf00      	nop
   19bf4:	20000114 	.word	0x20000114

00019bf8 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   19bf8:	4603      	mov	r3, r0
   19bfa:	b118      	cbz	r0, 19c04 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   19bfc:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   19bfe:	2000      	movs	r0, #0
   19c00:	6018      	str	r0, [r3, #0]
   19c02:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   19c04:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   19c06:	4770      	bx	lr

00019c08 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   19c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   19c0a:	4b17      	ldr	r3, [pc, #92]	; (19c68 <os_sem_release+0x60>)
   19c0c:	681b      	ldr	r3, [r3, #0]
   19c0e:	b33b      	cbz	r3, 19c60 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   19c10:	b340      	cbz	r0, 19c64 <os_sem_release+0x5c>
   19c12:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   19c14:	f7ff fef4 	bl	19a00 <os_sched_get_current_task>
   19c18:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   19c1a:	f000 f9c7 	bl	19fac <os_arch_save_sr>
   19c1e:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   19c20:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   19c22:	b165      	cbz	r5, 19c3e <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   19c24:	7b6b      	ldrb	r3, [r5, #13]
   19c26:	f023 0302 	bic.w	r3, r3, #2
   19c2a:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   19c2c:	4628      	mov	r0, r5
   19c2e:	f7ff ff3b 	bl	19aa8 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   19c32:	7afa      	ldrb	r2, [r7, #11]
   19c34:	7aeb      	ldrb	r3, [r5, #11]
   19c36:	429a      	cmp	r2, r3
   19c38:	d80b      	bhi.n	19c52 <os_sem_release+0x4a>
    resched = 0;
   19c3a:	2400      	movs	r4, #0
   19c3c:	e003      	b.n	19c46 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   19c3e:	88e3      	ldrh	r3, [r4, #6]
   19c40:	3301      	adds	r3, #1
   19c42:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   19c44:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   19c46:	4630      	mov	r0, r6
   19c48:	f000 f9b6 	bl	19fb8 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   19c4c:	b91c      	cbnz	r4, 19c56 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   19c4e:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   19c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   19c52:	2401      	movs	r4, #1
   19c54:	e7f7      	b.n	19c46 <os_sem_release+0x3e>
        os_sched(rdy);
   19c56:	4628      	mov	r0, r5
   19c58:	f7ff ffa6 	bl	19ba8 <os_sched>
    ret = OS_OK;
   19c5c:	2000      	movs	r0, #0
   19c5e:	e7f7      	b.n	19c50 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   19c60:	2009      	movs	r0, #9
   19c62:	e7f5      	b.n	19c50 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   19c64:	2003      	movs	r0, #3
   19c66:	e7f3      	b.n	19c50 <os_sem_release+0x48>
   19c68:	2000de88 	.word	0x2000de88

00019c6c <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   19c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   19c6e:	4b2c      	ldr	r3, [pc, #176]	; (19d20 <os_sem_pend+0xb4>)
   19c70:	681b      	ldr	r3, [r3, #0]
   19c72:	2b00      	cmp	r3, #0
   19c74:	d04f      	beq.n	19d16 <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   19c76:	2800      	cmp	r0, #0
   19c78:	d04f      	beq.n	19d1a <os_sem_pend+0xae>
   19c7a:	460d      	mov	r5, r1
   19c7c:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   19c7e:	f7ff febf 	bl	19a00 <os_sched_get_current_task>
   19c82:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   19c84:	f000 f992 	bl	19fac <os_arch_save_sr>
   19c88:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   19c8a:	88e3      	ldrh	r3, [r4, #6]
   19c8c:	b14b      	cbz	r3, 19ca2 <os_sem_pend+0x36>
        sem->sem_tokens--;
   19c8e:	3b01      	subs	r3, #1
   19c90:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   19c92:	2400      	movs	r4, #0
    sched = 0;
   19c94:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   19c96:	4638      	mov	r0, r7
   19c98:	f000 f98e 	bl	19fb8 <os_arch_restore_sr>

    if (sched) {
   19c9c:	bb45      	cbnz	r5, 19cf0 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   19c9e:	4620      	mov	r0, r4
   19ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   19ca2:	b315      	cbz	r5, 19cea <os_sem_pend+0x7e>
        current->t_obj = sem;
   19ca4:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   19ca6:	7b73      	ldrb	r3, [r6, #13]
   19ca8:	f043 0302 	orr.w	r3, r3, #2
   19cac:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   19cae:	f8d4 c000 	ldr.w	ip, [r4]
   19cb2:	f1bc 0f00 	cmp.w	ip, #0
   19cb6:	d00e      	beq.n	19cd6 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   19cb8:	4663      	mov	r3, ip
        last = NULL;
   19cba:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   19cbc:	b133      	cbz	r3, 19ccc <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   19cbe:	7af1      	ldrb	r1, [r6, #11]
   19cc0:	7ada      	ldrb	r2, [r3, #11]
   19cc2:	4291      	cmp	r1, r2
   19cc4:	d302      	bcc.n	19ccc <os_sem_pend+0x60>
                last = entry;
   19cc6:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   19cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   19cca:	e7f7      	b.n	19cbc <os_sem_pend+0x50>
        if (last) {
   19ccc:	b118      	cbz	r0, 19cd6 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   19cce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   19cd0:	64f3      	str	r3, [r6, #76]	; 0x4c
   19cd2:	64c6      	str	r6, [r0, #76]	; 0x4c
   19cd4:	e002      	b.n	19cdc <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   19cd6:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   19cda:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   19cdc:	4629      	mov	r1, r5
   19cde:	4630      	mov	r0, r6
   19ce0:	f7ff fe9a 	bl	19a18 <os_sched_sleep>
        ret = OS_OK;
   19ce4:	2400      	movs	r4, #0
        sched = 1;
   19ce6:	2501      	movs	r5, #1
   19ce8:	e7d5      	b.n	19c96 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   19cea:	2406      	movs	r4, #6
    sched = 0;
   19cec:	2500      	movs	r5, #0
   19cee:	e7d2      	b.n	19c96 <os_sem_pend+0x2a>
        os_sched(NULL);
   19cf0:	2000      	movs	r0, #0
   19cf2:	f7ff ff59 	bl	19ba8 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   19cf6:	7b73      	ldrb	r3, [r6, #13]
   19cf8:	f013 0f02 	tst.w	r3, #2
   19cfc:	d101      	bne.n	19d02 <os_sem_pend+0x96>
            ret = OS_OK;
   19cfe:	2400      	movs	r4, #0
   19d00:	e7cd      	b.n	19c9e <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   19d02:	f000 f953 	bl	19fac <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   19d06:	7b73      	ldrb	r3, [r6, #13]
   19d08:	f023 0302 	bic.w	r3, r3, #2
   19d0c:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   19d0e:	f000 f953 	bl	19fb8 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   19d12:	2406      	movs	r4, #6
   19d14:	e7c3      	b.n	19c9e <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   19d16:	2409      	movs	r4, #9
   19d18:	e7c1      	b.n	19c9e <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   19d1a:	2403      	movs	r4, #3
   19d1c:	e7bf      	b.n	19c9e <os_sem_pend+0x32>
   19d1e:	bf00      	nop
   19d20:	2000de88 	.word	0x2000de88

00019d24 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   19d24:	2300      	movs	r3, #0
   19d26:	e003      	b.n	19d30 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   19d28:	4a03      	ldr	r2, [pc, #12]	; (19d38 <_clear_stack+0x14>)
   19d2a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   19d2e:	3301      	adds	r3, #1
   19d30:	428b      	cmp	r3, r1
   19d32:	dbf9      	blt.n	19d28 <_clear_stack+0x4>
    }
}
   19d34:	4770      	bx	lr
   19d36:	bf00      	nop
   19d38:	deadbeef 	.word	0xdeadbeef

00019d3c <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   19d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d40:	4604      	mov	r4, r0
   19d42:	460f      	mov	r7, r1
   19d44:	4690      	mov	r8, r2
   19d46:	461d      	mov	r5, r3
   19d48:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   19d4c:	2250      	movs	r2, #80	; 0x50
   19d4e:	2100      	movs	r1, #0
   19d50:	f000 fa99 	bl	1a286 <memset>

    t->t_func = func;
   19d54:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   19d58:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   19d5a:	f000 f927 	bl	19fac <os_arch_save_sr>
    rc = g_task_id;
   19d5e:	4b2b      	ldr	r3, [pc, #172]	; (19e0c <os_task_init+0xd0>)
   19d60:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   19d62:	1c6a      	adds	r2, r5, #1
   19d64:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   19d66:	f000 f927 	bl	19fb8 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   19d6a:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   19d6c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   19d70:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   19d72:	2301      	movs	r3, #1
   19d74:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   19d76:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   19d78:	2300      	movs	r3, #0
   19d7a:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   19d7c:	f104 0720 	add.w	r7, r4, #32
   19d80:	4638      	mov	r0, r7
   19d82:	f7ff fda3 	bl	198cc <os_sanity_check_init>
    if (rc != OS_OK) {
   19d86:	4605      	mov	r5, r0
   19d88:	2800      	cmp	r0, #0
   19d8a:	d132      	bne.n	19df2 <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   19d8c:	9b07      	ldr	r3, [sp, #28]
   19d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   19d92:	d005      	beq.n	19da0 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   19d94:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   19d96:	4638      	mov	r0, r7
   19d98:	f7ff fda0 	bl	198dc <os_sanity_check_register>
        if (rc != OS_OK) {
   19d9c:	4605      	mov	r5, r0
   19d9e:	bb40      	cbnz	r0, 19df2 <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   19da0:	4631      	mov	r1, r6
   19da2:	9808      	ldr	r0, [sp, #32]
   19da4:	f7ff ffbe 	bl	19d24 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   19da8:	9b08      	ldr	r3, [sp, #32]
   19daa:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   19dae:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   19db0:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   19db2:	4632      	mov	r2, r6
   19db4:	4620      	mov	r0, r4
   19db6:	f000 f907 	bl	19fc8 <os_arch_task_stack_init>
   19dba:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   19dbc:	4b14      	ldr	r3, [pc, #80]	; (19e10 <os_task_init+0xd4>)
   19dbe:	681b      	ldr	r3, [r3, #0]
   19dc0:	b15b      	cbz	r3, 19dda <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   19dc2:	7ae1      	ldrb	r1, [r4, #11]
   19dc4:	7ada      	ldrb	r2, [r3, #11]
   19dc6:	4291      	cmp	r1, r2
   19dc8:	d001      	beq.n	19dce <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   19dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19dcc:	e7f8      	b.n	19dc0 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   19dce:	2300      	movs	r3, #0
   19dd0:	461a      	mov	r2, r3
   19dd2:	4619      	mov	r1, r3
   19dd4:	4618      	mov	r0, r3
   19dd6:	f7fe fe53 	bl	18a80 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   19dda:	6423      	str	r3, [r4, #64]	; 0x40
   19ddc:	4b0c      	ldr	r3, [pc, #48]	; (19e10 <os_task_init+0xd4>)
   19dde:	685a      	ldr	r2, [r3, #4]
   19de0:	6014      	str	r4, [r2, #0]
   19de2:	f104 0240 	add.w	r2, r4, #64	; 0x40
   19de6:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   19de8:	4620      	mov	r0, r4
   19dea:	f7ff fdc7 	bl	1997c <os_sched_insert>
   19dee:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   19df0:	b110      	cbz	r0, 19df8 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   19df2:	4628      	mov	r0, r5
   19df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   19df8:	f7fe fefc 	bl	18bf4 <os_started>
   19dfc:	b908      	cbnz	r0, 19e02 <os_task_init+0xc6>
    return (0);
   19dfe:	4605      	mov	r5, r0
   19e00:	e7f7      	b.n	19df2 <os_task_init+0xb6>
        os_sched(NULL);
   19e02:	2000      	movs	r0, #0
   19e04:	f7ff fed0 	bl	19ba8 <os_sched>
   19e08:	e7f3      	b.n	19df2 <os_task_init+0xb6>
   19e0a:	bf00      	nop
   19e0c:	2000deb4 	.word	0x2000deb4
   19e10:	2000deb8 	.word	0x2000deb8

00019e14 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   19e14:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   19e18:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   19e1a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   19e1e:	e9d1 4500 	ldrd	r4, r5, [r1]
   19e22:	eb14 0b03 	adds.w	fp, r4, r3
   19e26:	f145 0c00 	adc.w	ip, r5, #0
   19e2a:	e9c2 bc00 	strd	fp, ip, [r2]
   19e2e:	688b      	ldr	r3, [r1, #8]
   19e30:	f641 6184 	movw	r1, #7812	; 0x1e84
   19e34:	fb01 3000 	mla	r0, r1, r0, r3
   19e38:	6090      	str	r0, [r2, #8]
   19e3a:	4b08      	ldr	r3, [pc, #32]	; (19e5c <os_deltatime+0x48>)
   19e3c:	4298      	cmp	r0, r3
   19e3e:	dd0a      	ble.n	19e56 <os_deltatime+0x42>
   19e40:	f11b 0401 	adds.w	r4, fp, #1
   19e44:	f14c 0500 	adc.w	r5, ip, #0
   19e48:	e9c2 4500 	strd	r4, r5, [r2]
   19e4c:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   19e50:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   19e54:	6090      	str	r0, [r2, #8]
}
   19e56:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   19e5a:	4770      	bx	lr
   19e5c:	000f423f 	.word	0x000f423f

00019e60 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   19e60:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   19e62:	1e04      	subs	r4, r0, #0
   19e64:	db0d      	blt.n	19e82 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   19e66:	f000 f8a1 	bl	19fac <os_arch_save_sr>
   19e6a:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   19e6c:	4a11      	ldr	r2, [pc, #68]	; (19eb4 <os_time_tick+0x54>)
   19e6e:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   19e70:	18e0      	adds	r0, r4, r3
   19e72:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   19e74:	ea90 0f03 	teq	r0, r3
   19e78:	d409      	bmi.n	19e8e <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   19e7a:	4628      	mov	r0, r5
   19e7c:	f000 f89c 	bl	19fb8 <os_arch_restore_sr>
}
   19e80:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   19e82:	2300      	movs	r3, #0
   19e84:	461a      	mov	r2, r3
   19e86:	4619      	mov	r1, r3
   19e88:	4618      	mov	r0, r3
   19e8a:	f7fe fdf9 	bl	18a80 <__assert_func>
        delta = g_os_time - basetod.ostime;
   19e8e:	4e0a      	ldr	r6, [pc, #40]	; (19eb8 <os_time_tick+0x58>)
   19e90:	4631      	mov	r1, r6
   19e92:	f851 4b08 	ldr.w	r4, [r1], #8
   19e96:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   19e98:	460a      	mov	r2, r1
   19e9a:	4620      	mov	r0, r4
   19e9c:	f7ff ffba 	bl	19e14 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   19ea0:	f106 0118 	add.w	r1, r6, #24
   19ea4:	460a      	mov	r2, r1
   19ea6:	4620      	mov	r0, r4
   19ea8:	f7ff ffb4 	bl	19e14 <os_deltatime>
        basetod.ostime = g_os_time;
   19eac:	4b01      	ldr	r3, [pc, #4]	; (19eb4 <os_time_tick+0x54>)
   19eae:	681b      	ldr	r3, [r3, #0]
   19eb0:	6033      	str	r3, [r6, #0]
   19eb2:	e7e2      	b.n	19e7a <os_time_tick+0x1a>
   19eb4:	2000dec0 	.word	0x2000dec0
   19eb8:	2000d9b8 	.word	0x2000d9b8

00019ebc <os_time_get>:
}
   19ebc:	4b01      	ldr	r3, [pc, #4]	; (19ec4 <os_time_get+0x8>)
   19ebe:	6818      	ldr	r0, [r3, #0]
   19ec0:	4770      	bx	lr
   19ec2:	bf00      	nop
   19ec4:	2000dec0 	.word	0x2000dec0

00019ec8 <os_time_advance>:

void
os_time_advance(int ticks)
{
   19ec8:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   19eca:	1e04      	subs	r4, r0, #0
   19ecc:	db09      	blt.n	19ee2 <os_time_advance+0x1a>

    if (ticks > 0) {
   19ece:	2c00      	cmp	r4, #0
   19ed0:	dd06      	ble.n	19ee0 <os_time_advance+0x18>
        if (!os_started()) {
   19ed2:	f7fe fe8f 	bl	18bf4 <os_started>
   19ed6:	b950      	cbnz	r0, 19eee <os_time_advance+0x26>
            g_os_time += ticks;
   19ed8:	4a0a      	ldr	r2, [pc, #40]	; (19f04 <os_time_advance+0x3c>)
   19eda:	6813      	ldr	r3, [r2, #0]
   19edc:	441c      	add	r4, r3
   19ede:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   19ee0:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   19ee2:	2300      	movs	r3, #0
   19ee4:	461a      	mov	r2, r3
   19ee6:	4619      	mov	r1, r3
   19ee8:	4618      	mov	r0, r3
   19eea:	f7fe fdc9 	bl	18a80 <__assert_func>
            os_time_tick(ticks);
   19eee:	4620      	mov	r0, r4
   19ef0:	f7ff ffb6 	bl	19e60 <os_time_tick>
            os_callout_tick();
   19ef4:	f7fe ffa6 	bl	18e44 <os_callout_tick>
            os_sched_os_timer_exp();
   19ef8:	f7ff fe12 	bl	19b20 <os_sched_os_timer_exp>
            os_sched(NULL);
   19efc:	2000      	movs	r0, #0
   19efe:	f7ff fe53 	bl	19ba8 <os_sched>
}
   19f02:	e7ed      	b.n	19ee0 <os_time_advance+0x18>
   19f04:	2000dec0 	.word	0x2000dec0

00019f08 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   19f08:	b900      	cbnz	r0, 19f0c <os_time_delay+0x4>
   19f0a:	4770      	bx	lr
{
   19f0c:	b538      	push	{r3, r4, r5, lr}
   19f0e:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   19f10:	f000 f84c 	bl	19fac <os_arch_save_sr>
   19f14:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   19f16:	f7ff fd73 	bl	19a00 <os_sched_get_current_task>
   19f1a:	4621      	mov	r1, r4
   19f1c:	f7ff fd7c 	bl	19a18 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   19f20:	4628      	mov	r0, r5
   19f22:	f000 f849 	bl	19fb8 <os_arch_restore_sr>
        os_sched(NULL);
   19f26:	2000      	movs	r0, #0
   19f28:	f7ff fe3e 	bl	19ba8 <os_sched>
    }
}
   19f2c:	bd38      	pop	{r3, r4, r5, pc}
	...

00019f30 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   19f30:	b570      	push	{r4, r5, r6, lr}
   19f32:	4605      	mov	r5, r0
   19f34:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   19f36:	f000 f839 	bl	19fac <os_arch_save_sr>
   19f3a:	4606      	mov	r6, r0
    if (tv != NULL) {
   19f3c:	b145      	cbz	r5, 19f50 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   19f3e:	f7ff ffbd 	bl	19ebc <os_time_get>
   19f42:	4908      	ldr	r1, [pc, #32]	; (19f64 <os_gettimeofday+0x34>)
   19f44:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   19f48:	462a      	mov	r2, r5
   19f4a:	1ac0      	subs	r0, r0, r3
   19f4c:	f7ff ff62 	bl	19e14 <os_deltatime>
    }

    if (tz != NULL) {
   19f50:	b114      	cbz	r4, 19f58 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   19f52:	4b04      	ldr	r3, [pc, #16]	; (19f64 <os_gettimeofday+0x34>)
   19f54:	6a98      	ldr	r0, [r3, #40]	; 0x28
   19f56:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   19f58:	4630      	mov	r0, r6
   19f5a:	f000 f82d 	bl	19fb8 <os_arch_restore_sr>

    return (0);
}
   19f5e:	2000      	movs	r0, #0
   19f60:	bd70      	pop	{r4, r5, r6, pc}
   19f62:	bf00      	nop
   19f64:	2000d9b8 	.word	0x2000d9b8

00019f68 <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   19f68:	b538      	push	{r3, r4, r5, lr}
   19f6a:	4604      	mov	r4, r0
   19f6c:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   19f6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19f72:	2300      	movs	r3, #0
   19f74:	01c0      	lsls	r0, r0, #7
   19f76:	0e61      	lsrs	r1, r4, #25
   19f78:	f002 f88a 	bl	1c090 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   19f7c:	2901      	cmp	r1, #1
   19f7e:	bf08      	it	eq
   19f80:	2800      	cmpeq	r0, #0
   19f82:	d202      	bcs.n	19f8a <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   19f84:	6028      	str	r0, [r5, #0]
    return 0;
   19f86:	2000      	movs	r0, #0
}
   19f88:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   19f8a:	2002      	movs	r0, #2
   19f8c:	e7fc      	b.n	19f88 <os_time_ms_to_ticks+0x20>

00019f8e <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   19f8e:	b508      	push	{r3, lr}
    os_time_advance(1);
   19f90:	2001      	movs	r0, #1
   19f92:	f7ff ff99 	bl	19ec8 <os_time_advance>
}
   19f96:	bd08      	pop	{r3, pc}

00019f98 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   19f98:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   19f9a:	f7ff fd19 	bl	199d0 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   19f9e:	4b02      	ldr	r3, [pc, #8]	; (19fa8 <os_arch_ctx_sw+0x10>)
   19fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19fa4:	605a      	str	r2, [r3, #4]
}
   19fa6:	bd08      	pop	{r3, pc}
   19fa8:	e000ed00 	.word	0xe000ed00

00019fac <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   19fac:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   19fb0:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   19fb2:	f000 0001 	and.w	r0, r0, #1
   19fb6:	4770      	bx	lr

00019fb8 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   19fb8:	b900      	cbnz	r0, 19fbc <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   19fba:	b662      	cpsie	i
        __enable_irq();
    }
}
   19fbc:	4770      	bx	lr

00019fbe <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   19fbe:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   19fc2:	f000 0001 	and.w	r0, r0, #1
   19fc6:	4770      	bx	lr

00019fc8 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   19fc8:	b570      	push	{r4, r5, r6, lr}
   19fca:	4606      	mov	r6, r0
   19fcc:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   19fce:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   19fd2:	2309      	movs	r3, #9
   19fd4:	e003      	b.n	19fde <os_arch_task_stack_init+0x16>
        s[i] = 0;
   19fd6:	2200      	movs	r2, #0
   19fd8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   19fdc:	3301      	adds	r3, #1
   19fde:	2b0d      	cmp	r3, #13
   19fe0:	ddf9      	ble.n	19fd6 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   19fe2:	4620      	mov	r0, r4
   19fe4:	f000 f8b6 	bl	1a154 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   19fe8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   19fec:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   19ff0:	6973      	ldr	r3, [r6, #20]
   19ff2:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   19ff6:	69b3      	ldr	r3, [r6, #24]
   19ff8:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   19ffc:	f06f 0302 	mvn.w	r3, #2
   1a000:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   1a004:	4620      	mov	r0, r4
   1a006:	bd70      	pop	{r4, r5, r6, pc}

0001a008 <os_arch_init>:

void
os_arch_init(void)
{
   1a008:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1a00a:	4a04      	ldr	r2, [pc, #16]	; (1a01c <os_arch_init+0x14>)
   1a00c:	6953      	ldr	r3, [r2, #20]
   1a00e:	f043 0310 	orr.w	r3, r3, #16
   1a012:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   1a014:	f7fe fdf4 	bl	18c00 <os_init_idle_task>
}
   1a018:	bd08      	pop	{r3, pc}
   1a01a:	bf00      	nop
   1a01c:	e000ed00 	.word	0xe000ed00

0001a020 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1a022:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1a026:	b90c      	cbnz	r4, 1a02c <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1a028:	2400      	movs	r4, #0
   1a02a:	e009      	b.n	1a040 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   1a02c:	2007      	movs	r0, #7
   1a02e:	e02e      	b.n	1a08e <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1a030:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1a034:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   1a038:	26ff      	movs	r6, #255	; 0xff
   1a03a:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1a03e:	3401      	adds	r4, #1
   1a040:	2cef      	cmp	r4, #239	; 0xef
   1a042:	d9f5      	bls.n	1a030 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1a044:	f06f 040d 	mvn.w	r4, #13
   1a048:	e007      	b.n	1a05a <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1a04a:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a04c:	4e12      	ldr	r6, [pc, #72]	; (1a098 <os_arch_os_init+0x78>)
   1a04e:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a050:	3510      	adds	r5, #16
   1a052:	4f12      	ldr	r7, [pc, #72]	; (1a09c <os_arch_os_init+0x7c>)
   1a054:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   1a058:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1a05a:	2c25      	cmp	r4, #37	; 0x25
   1a05c:	ddf5      	ble.n	1a04a <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a05e:	4c0e      	ldr	r4, [pc, #56]	; (1a098 <os_arch_os_init+0x78>)
   1a060:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a062:	4e0f      	ldr	r6, [pc, #60]	; (1a0a0 <os_arch_os_init+0x80>)
   1a064:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a066:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a068:	4e0e      	ldr	r6, [pc, #56]	; (1a0a4 <os_arch_os_init+0x84>)
   1a06a:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a06c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a06e:	4e0e      	ldr	r6, [pc, #56]	; (1a0a8 <os_arch_os_init+0x88>)
   1a070:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a072:	25e0      	movs	r5, #224	; 0xe0
   1a074:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   1a078:	2520      	movs	r5, #32
   1a07a:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1a07c:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1a080:	f014 0f01 	tst.w	r4, #1
   1a084:	d004      	beq.n	1a090 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1a086:	f8df c024 	ldr.w	ip, [pc, #36]	; 1a0ac <os_arch_os_init+0x8c>
   1a08a:	df00      	svc	0
        err = OS_OK;
   1a08c:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1a08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1a090:	f7ff ffba 	bl	1a008 <os_arch_init>
        err = OS_OK;
   1a094:	2000      	movs	r0, #0
   1a096:	e7fa      	b.n	1a08e <os_arch_os_init+0x6e>
   1a098:	e000ed00 	.word	0xe000ed00
   1a09c:	0001a1f3 	.word	0x0001a1f3
   1a0a0:	0001a15b 	.word	0x0001a15b
   1a0a4:	0001a1a1 	.word	0x0001a1a1
   1a0a8:	0001a1e7 	.word	0x0001a1e7
   1a0ac:	0001a009 	.word	0x0001a009

0001a0b0 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1a0b0:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1a0b2:	f7ff fd73 	bl	19b9c <os_sched_next_task>
   1a0b6:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   1a0b8:	f7ff fca8 	bl	19a0c <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1a0bc:	6823      	ldr	r3, [r4, #0]
   1a0be:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1a0c0:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   1a0c4:	2106      	movs	r1, #6
   1a0c6:	2080      	movs	r0, #128	; 0x80
   1a0c8:	f000 fde8 	bl	1ac9c <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1a0cc:	4b03      	ldr	r3, [pc, #12]	; (1a0dc <os_arch_start+0x2c>)
   1a0ce:	2201      	movs	r2, #1
   1a0d0:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1a0d2:	4620      	mov	r0, r4
   1a0d4:	f7ff ff60 	bl	19f98 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   1a0d8:	69a0      	ldr	r0, [r4, #24]
   1a0da:	bd10      	pop	{r4, pc}
   1a0dc:	2000de88 	.word	0x2000de88

0001a0e0 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1a0e0:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1a0e2:	4814      	ldr	r0, [pc, #80]	; (1a134 <os_arch_os_start+0x54>)
   1a0e4:	6800      	ldr	r0, [r0, #0]
   1a0e6:	3804      	subs	r0, #4
   1a0e8:	f000 f82a 	bl	1a140 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1a0ec:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1a0f0:	b9d4      	cbnz	r4, 1a128 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1a0f2:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1a0f6:	f004 0403 	and.w	r4, r4, #3
   1a0fa:	2c03      	cmp	r4, #3
   1a0fc:	d808      	bhi.n	1a110 <os_arch_os_start+0x30>
   1a0fe:	e8df f004 	tbb	[pc, r4]
   1a102:	1515      	.short	0x1515
   1a104:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   1a106:	4c0c      	ldr	r4, [pc, #48]	; (1a138 <os_arch_os_start+0x58>)
   1a108:	6824      	ldr	r4, [r4, #0]
   1a10a:	f014 0f01 	tst.w	r4, #1
   1a10e:	d10f      	bne.n	1a130 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   1a110:	f8df c028 	ldr.w	ip, [pc, #40]	; 1a13c <os_arch_os_start+0x5c>
   1a114:	df00      	svc	0
   1a116:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   1a118:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   1a11a:	4c07      	ldr	r4, [pc, #28]	; (1a138 <os_arch_os_start+0x58>)
   1a11c:	6824      	ldr	r4, [r4, #0]
   1a11e:	f014 0f01 	tst.w	r4, #1
   1a122:	d1f5      	bne.n	1a110 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   1a124:	2008      	movs	r0, #8
   1a126:	e7f7      	b.n	1a118 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   1a128:	2007      	movs	r0, #7
   1a12a:	e7f5      	b.n	1a118 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   1a12c:	2008      	movs	r0, #8
   1a12e:	e7f3      	b.n	1a118 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   1a130:	2008      	movs	r0, #8
   1a132:	e7f1      	b.n	1a118 <os_arch_os_start+0x38>
   1a134:	2000dde8 	.word	0x2000dde8
   1a138:	2000d9e8 	.word	0x2000d9e8
   1a13c:	0001a0b1 	.word	0x0001a0b1

0001a140 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   1a140:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   1a144:	4832      	ldr	r0, [pc, #200]	; (1a210 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1a146:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1a148:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1a14a:	f380 8814 	msr	CONTROL, r0
        ISB
   1a14e:	f3bf 8f6f 	isb	sy
        BX      LR
   1a152:	4770      	bx	lr

0001a154 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   1a154:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   1a158:	4770      	bx	lr

0001a15a <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   1a15a:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   1a15e:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   1a160:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   1a164:	b951      	cbnz	r1, 1a17c <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1a166:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1a16a:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   1a16c:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1a16e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   1a172:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   1a176:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   1a17a:	4770      	bx	lr

0001a17c <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1a17c:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   1a17e:	4a25      	ldr	r2, [pc, #148]	; (1a214 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   1a180:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   1a182:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   1a184:	d809      	bhi.n	1a19a <SVC_Done>

        LDR     R4,=SVC_Table-4
   1a186:	4c24      	ldr	r4, [pc, #144]	; (1a218 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   1a188:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1a18c:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   1a190:	47a0      	blx	r4

        MRS     R12,PSP
   1a192:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   1a196:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0001a19a <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1a19a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   1a19e:	4770      	bx	lr

0001a1a0 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1a1a0:	4b1e      	ldr	r3, [pc, #120]	; (1a21c <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   1a1a2:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   1a1a4:	4b1e      	ldr	r3, [pc, #120]	; (1a220 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1a1a6:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   1a1a8:	4291      	cmp	r1, r2
        IT      EQ
   1a1aa:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   1a1ac:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   1a1ae:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   1a1b2:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   1a1b6:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   1a1b8:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   1a1bc:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1a1c0:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1a1c4:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   1a1c6:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   1a1ca:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   1a1ce:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   1a1d2:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   1a1d4:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   1a1d8:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   1a1dc:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   1a1e0:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1a1e4:	4770      	bx	lr

0001a1e6 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1a1e6:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   1a1e8:	f7ff fed1 	bl	19f8e <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1a1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   1a1f0:	4770      	bx	lr

0001a1f2 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1a1f2:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1a1f6:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   1a1f8:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   1a1fc:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   1a200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1a204:	4668      	mov	r0, sp
        BL      os_default_irq
   1a206:	f7fe fc61 	bl	18acc <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   1a20a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   1a20e:	4770      	bx	lr
        LDR     R0,=os_flags
   1a210:	2000d9e8 	.word	0x2000d9e8
        LDR     R2,=SVC_Count
   1a214:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   1a218:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1a21c:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   1a220:	2000deb0 	.word	0x2000deb0

0001a224 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   1a224:	b470      	push	{r4, r5, r6}
   1a226:	f04f 0500 	mov.w	r5, #0
   1a22a:	f022 0603 	bic.w	r6, r2, #3
   1a22e:	e005      	b.n	1a23c <test1>

0001a230 <loop1>:
   1a230:	5943      	ldr	r3, [r0, r5]
   1a232:	594c      	ldr	r4, [r1, r5]
   1a234:	42a3      	cmp	r3, r4
   1a236:	d104      	bne.n	1a242 <res1>
   1a238:	f105 0504 	add.w	r5, r5, #4

0001a23c <test1>:
   1a23c:	42b5      	cmp	r5, r6
   1a23e:	d1f7      	bne.n	1a230 <loop1>
   1a240:	e00d      	b.n	1a25e <test2>

0001a242 <res1>:
   1a242:	ba1b      	rev	r3, r3
   1a244:	ba24      	rev	r4, r4
   1a246:	1b1b      	subs	r3, r3, r4
   1a248:	bf8c      	ite	hi
   1a24a:	2301      	movhi	r3, #1
   1a24c:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   1a250:	e009      	b.n	1a266 <done>

0001a252 <loop2>:
   1a252:	5d43      	ldrb	r3, [r0, r5]
   1a254:	5d4c      	ldrb	r4, [r1, r5]
   1a256:	1b1b      	subs	r3, r3, r4
   1a258:	d105      	bne.n	1a266 <done>
   1a25a:	f105 0501 	add.w	r5, r5, #1

0001a25e <test2>:
   1a25e:	4295      	cmp	r5, r2
   1a260:	d1f7      	bne.n	1a252 <loop2>
   1a262:	f04f 0300 	mov.w	r3, #0

0001a266 <done>:
   1a266:	4618      	mov	r0, r3
   1a268:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1a26a:	4770      	bx	lr

0001a26c <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1a26c:	e001      	b.n	1a272 <test1>

0001a26e <loop1>:
   1a26e:	588b      	ldr	r3, [r1, r2]
   1a270:	5083      	str	r3, [r0, r2]

0001a272 <test1>:
   1a272:	3a04      	subs	r2, #4
   1a274:	d5fb      	bpl.n	1a26e <loop1>
   1a276:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1a27a:	e001      	b.n	1a280 <test2>

0001a27c <loop2>:
   1a27c:	5c8b      	ldrb	r3, [r1, r2]
   1a27e:	5483      	strb	r3, [r0, r2]

0001a280 <test2>:
   1a280:	3a01      	subs	r2, #1
   1a282:	d5fb      	bpl.n	1a27c <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   1a284:	4770      	bx	lr

0001a286 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1a286:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1a288:	4605      	mov	r5, r0
   1a28a:	b2c9      	uxtb	r1, r1
   1a28c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1a290:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1a294:	18ab      	adds	r3, r5, r2
   1a296:	2403      	movs	r4, #3
   1a298:	4023      	ands	r3, r4
   1a29a:	1ad3      	subs	r3, r2, r3
   1a29c:	d40b      	bmi.n	1a2b6 <memset+0x30>
   1a29e:	e001      	b.n	1a2a4 <memset+0x1e>
   1a2a0:	3a01      	subs	r2, #1
   1a2a2:	54a9      	strb	r1, [r5, r2]
   1a2a4:	429a      	cmp	r2, r3
   1a2a6:	d1fb      	bne.n	1a2a0 <memset+0x1a>
   1a2a8:	e000      	b.n	1a2ac <memset+0x26>
   1a2aa:	50a9      	str	r1, [r5, r2]
   1a2ac:	3a04      	subs	r2, #4
   1a2ae:	d5fc      	bpl.n	1a2aa <memset+0x24>
   1a2b0:	3204      	adds	r2, #4
   1a2b2:	e000      	b.n	1a2b6 <memset+0x30>
   1a2b4:	54a9      	strb	r1, [r5, r2]
   1a2b6:	3a01      	subs	r2, #1
   1a2b8:	d5fc      	bpl.n	1a2b4 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1a2ba:	bc30      	pop	{r4, r5}
   1a2bc:	4770      	bx	lr

0001a2be <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1a2be:	b430      	push	{r4, r5}
   1a2c0:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   1a2c2:	1c55      	adds	r5, r2, #1
   1a2c4:	7813      	ldrb	r3, [r2, #0]
   1a2c6:	1c4c      	adds	r4, r1, #1
   1a2c8:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   1a2ca:	1a18      	subs	r0, r3, r0
   1a2cc:	d103      	bne.n	1a2d6 <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   1a2ce:	462a      	mov	r2, r5
   1a2d0:	4621      	mov	r1, r4
		if (d || !ch)
   1a2d2:	2b00      	cmp	r3, #0
   1a2d4:	d1f5      	bne.n	1a2c2 <strcmp+0x4>
			break;
	}

	return d;
}
   1a2d6:	bc30      	pop	{r4, r5}
   1a2d8:	4770      	bx	lr

0001a2da <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1a2da:	4603      	mov	r3, r0
	while (*ss)
   1a2dc:	e000      	b.n	1a2e0 <strlen+0x6>
		ss++;
   1a2de:	3301      	adds	r3, #1
	while (*ss)
   1a2e0:	781a      	ldrb	r2, [r3, #0]
   1a2e2:	2a00      	cmp	r2, #0
   1a2e4:	d1fb      	bne.n	1a2de <strlen+0x4>
	return ss - s;
}
   1a2e6:	1a18      	subs	r0, r3, r0
   1a2e8:	4770      	bx	lr

0001a2ea <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1a2ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a2ee:	b082      	sub	sp, #8
   1a2f0:	e9cd 0100 	strd	r0, r1, [sp]
   1a2f4:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1a2f6:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   1a2fa:	2401      	movs	r4, #1
   1a2fc:	2500      	movs	r5, #0
    while (num / d >= p->base)
   1a2fe:	e004      	b.n	1a30a <ui2a+0x20>
        d *= p->base;
   1a300:	fb06 f305 	mul.w	r3, r6, r5
   1a304:	fba4 4506 	umull	r4, r5, r4, r6
   1a308:	441d      	add	r5, r3
    while (num / d >= p->base)
   1a30a:	4622      	mov	r2, r4
   1a30c:	462b      	mov	r3, r5
   1a30e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a312:	f001 febd 	bl	1c090 <__aeabi_uldivmod>
   1a316:	f899 6003 	ldrb.w	r6, [r9, #3]
   1a31a:	2700      	movs	r7, #0
   1a31c:	42b9      	cmp	r1, r7
   1a31e:	bf08      	it	eq
   1a320:	42b0      	cmpeq	r0, r6
   1a322:	d2ed      	bcs.n	1a300 <ui2a+0x16>
    int n = 0;
   1a324:	f04f 0a00 	mov.w	sl, #0
   1a328:	e007      	b.n	1a33a <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1a32a:	2330      	movs	r3, #48	; 0x30
   1a32c:	441e      	add	r6, r3
   1a32e:	f888 6000 	strb.w	r6, [r8]
            ++n;
   1a332:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1a336:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   1a33a:	ea54 0305 	orrs.w	r3, r4, r5
   1a33e:	d02e      	beq.n	1a39e <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   1a340:	4622      	mov	r2, r4
   1a342:	462b      	mov	r3, r5
   1a344:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a348:	f001 fea2 	bl	1c090 <__aeabi_uldivmod>
   1a34c:	4606      	mov	r6, r0
   1a34e:	460f      	mov	r7, r1
        num %= d;
   1a350:	4622      	mov	r2, r4
   1a352:	462b      	mov	r3, r5
   1a354:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a358:	f001 fe9a 	bl	1c090 <__aeabi_uldivmod>
   1a35c:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   1a360:	f899 2003 	ldrb.w	r2, [r9, #3]
   1a364:	2300      	movs	r3, #0
   1a366:	4620      	mov	r0, r4
   1a368:	4629      	mov	r1, r5
   1a36a:	f001 fe91 	bl	1c090 <__aeabi_uldivmod>
   1a36e:	4604      	mov	r4, r0
   1a370:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   1a372:	f1ba 0f00 	cmp.w	sl, #0
   1a376:	d105      	bne.n	1a384 <ui2a+0x9a>
   1a378:	ea56 0307 	orrs.w	r3, r6, r7
   1a37c:	d102      	bne.n	1a384 <ui2a+0x9a>
   1a37e:	ea54 0305 	orrs.w	r3, r4, r5
   1a382:	d1da      	bne.n	1a33a <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1a384:	2f00      	cmp	r7, #0
   1a386:	bf08      	it	eq
   1a388:	2e0a      	cmpeq	r6, #10
   1a38a:	d3ce      	bcc.n	1a32a <ui2a+0x40>
   1a38c:	f899 3002 	ldrb.w	r3, [r9, #2]
   1a390:	f013 0f04 	tst.w	r3, #4
   1a394:	d001      	beq.n	1a39a <ui2a+0xb0>
   1a396:	2337      	movs	r3, #55	; 0x37
   1a398:	e7c8      	b.n	1a32c <ui2a+0x42>
   1a39a:	2357      	movs	r3, #87	; 0x57
   1a39c:	e7c6      	b.n	1a32c <ui2a+0x42>
        }
    }
    *bf = 0;
   1a39e:	2300      	movs	r3, #0
   1a3a0:	f888 3000 	strb.w	r3, [r8]
}
   1a3a4:	b002      	add	sp, #8
   1a3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001a3aa <i2a>:

static void i2a(long long int num, struct param *p)
{
   1a3aa:	b508      	push	{r3, lr}
    if (num < 0) {
   1a3ac:	2800      	cmp	r0, #0
   1a3ae:	f171 0300 	sbcs.w	r3, r1, #0
   1a3b2:	db02      	blt.n	1a3ba <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1a3b4:	f7ff ff99 	bl	1a2ea <ui2a>
}
   1a3b8:	bd08      	pop	{r3, pc}
        num = -num;
   1a3ba:	4240      	negs	r0, r0
   1a3bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1a3c0:	7893      	ldrb	r3, [r2, #2]
   1a3c2:	f043 0301 	orr.w	r3, r3, #1
   1a3c6:	7093      	strb	r3, [r2, #2]
   1a3c8:	e7f4      	b.n	1a3b4 <i2a+0xa>

0001a3ca <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1a3ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1a3ce:	b2db      	uxtb	r3, r3
   1a3d0:	2b09      	cmp	r3, #9
   1a3d2:	d90b      	bls.n	1a3ec <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1a3d4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1a3d8:	b2db      	uxtb	r3, r3
   1a3da:	2b05      	cmp	r3, #5
   1a3dc:	d908      	bls.n	1a3f0 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1a3de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1a3e2:	b2db      	uxtb	r3, r3
   1a3e4:	2b05      	cmp	r3, #5
   1a3e6:	d805      	bhi.n	1a3f4 <a2d+0x2a>
        return ch - 'A' + 10;
   1a3e8:	3837      	subs	r0, #55	; 0x37
   1a3ea:	4770      	bx	lr
        return ch - '0';
   1a3ec:	3830      	subs	r0, #48	; 0x30
   1a3ee:	4770      	bx	lr
        return ch - 'a' + 10;
   1a3f0:	3857      	subs	r0, #87	; 0x57
   1a3f2:	4770      	bx	lr
    else
        return -1;
   1a3f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1a3f8:	4770      	bx	lr

0001a3fa <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1a3fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a3fe:	4605      	mov	r5, r0
   1a400:	4688      	mov	r8, r1
   1a402:	4617      	mov	r7, r2
   1a404:	4699      	mov	r9, r3
    const char *p = *src;
   1a406:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1a408:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1a40a:	4628      	mov	r0, r5
   1a40c:	f7ff ffdd 	bl	1a3ca <a2d>
   1a410:	2800      	cmp	r0, #0
   1a412:	db06      	blt.n	1a422 <a2i+0x28>
        if (digit > base)
   1a414:	42b8      	cmp	r0, r7
   1a416:	dc04      	bgt.n	1a422 <a2i+0x28>
            break;
        num = num * base + digit;
   1a418:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   1a41c:	7825      	ldrb	r5, [r4, #0]
   1a41e:	3401      	adds	r4, #1
   1a420:	e7f3      	b.n	1a40a <a2i+0x10>
    }
    *src = p;
   1a422:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   1a426:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   1a42a:	4628      	mov	r0, r5
   1a42c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001a430 <putf>:

static int putf(FILE *putp, char c)
{
   1a430:	b500      	push	{lr}
   1a432:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1a434:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1a438:	6803      	ldr	r3, [r0, #0]
   1a43a:	681b      	ldr	r3, [r3, #0]
   1a43c:	b14b      	cbz	r3, 1a452 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1a43e:	2201      	movs	r2, #1
   1a440:	f10d 0107 	add.w	r1, sp, #7
   1a444:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1a446:	2801      	cmp	r0, #1
   1a448:	d005      	beq.n	1a456 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   1a44a:	2000      	movs	r0, #0
    else
        return 1;
}
   1a44c:	b003      	add	sp, #12
   1a44e:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1a452:	2000      	movs	r0, #0
   1a454:	e7fa      	b.n	1a44c <putf+0x1c>
        return 1;
   1a456:	2001      	movs	r0, #1
   1a458:	e7f8      	b.n	1a44c <putf+0x1c>
	...

0001a45c <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1a45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a460:	4606      	mov	r6, r0
   1a462:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1a464:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1a466:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1a468:	e001      	b.n	1a46e <putchw+0x12>
        n--;
   1a46a:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   1a46c:	4613      	mov	r3, r2
   1a46e:	1c5a      	adds	r2, r3, #1
   1a470:	781b      	ldrb	r3, [r3, #0]
   1a472:	b10b      	cbz	r3, 1a478 <putchw+0x1c>
   1a474:	2c00      	cmp	r4, #0
   1a476:	dcf8      	bgt.n	1a46a <putchw+0xe>
    if (p->sign)
   1a478:	78bb      	ldrb	r3, [r7, #2]
   1a47a:	f013 0f01 	tst.w	r3, #1
   1a47e:	d000      	beq.n	1a482 <putchw+0x26>
        n--;
   1a480:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1a482:	887b      	ldrh	r3, [r7, #2]
   1a484:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1a488:	b29b      	uxth	r3, r3
   1a48a:	f241 0202 	movw	r2, #4098	; 0x1002
   1a48e:	4293      	cmp	r3, r2
   1a490:	d01c      	beq.n	1a4cc <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   1a492:	f640 0202 	movw	r2, #2050	; 0x802
   1a496:	4293      	cmp	r3, r2
   1a498:	d01a      	beq.n	1a4d0 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1a49a:	683b      	ldr	r3, [r7, #0]
   1a49c:	4d35      	ldr	r5, [pc, #212]	; (1a574 <putchw+0x118>)
   1a49e:	401d      	ands	r5, r3
   1a4a0:	b1f5      	cbz	r5, 1a4e0 <putchw+0x84>
    unsigned written = 0;
   1a4a2:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1a4a4:	78bb      	ldrb	r3, [r7, #2]
   1a4a6:	f013 0f01 	tst.w	r3, #1
   1a4aa:	d11f      	bne.n	1a4ec <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1a4ac:	887b      	ldrh	r3, [r7, #2]
   1a4ae:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1a4b2:	b29b      	uxth	r3, r3
   1a4b4:	f241 0202 	movw	r2, #4098	; 0x1002
   1a4b8:	4293      	cmp	r3, r2
   1a4ba:	d01d      	beq.n	1a4f8 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1a4bc:	f640 0202 	movw	r2, #2050	; 0x802
   1a4c0:	4293      	cmp	r3, r2
   1a4c2:	d02a      	beq.n	1a51a <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1a4c4:	787b      	ldrb	r3, [r7, #1]
   1a4c6:	bba3      	cbnz	r3, 1a532 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1a4c8:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   1a4ca:	e03d      	b.n	1a548 <putchw+0xec>
        n -= 2;
   1a4cc:	3c02      	subs	r4, #2
   1a4ce:	e7e4      	b.n	1a49a <putchw+0x3e>
        n--;
   1a4d0:	3c01      	subs	r4, #1
   1a4d2:	e7e2      	b.n	1a49a <putchw+0x3e>
            written += putf(putp, ' ');
   1a4d4:	2120      	movs	r1, #32
   1a4d6:	4630      	mov	r0, r6
   1a4d8:	f7ff ffaa 	bl	1a430 <putf>
   1a4dc:	4405      	add	r5, r0
        while (n-- > 0)
   1a4de:	4644      	mov	r4, r8
   1a4e0:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1a4e4:	2c00      	cmp	r4, #0
   1a4e6:	dcf5      	bgt.n	1a4d4 <putchw+0x78>
   1a4e8:	4644      	mov	r4, r8
   1a4ea:	e7db      	b.n	1a4a4 <putchw+0x48>
        written += putf(putp, '-');
   1a4ec:	212d      	movs	r1, #45	; 0x2d
   1a4ee:	4630      	mov	r0, r6
   1a4f0:	f7ff ff9e 	bl	1a430 <putf>
   1a4f4:	4405      	add	r5, r0
   1a4f6:	e7d9      	b.n	1a4ac <putchw+0x50>
        written += putf(putp, '0');
   1a4f8:	2130      	movs	r1, #48	; 0x30
   1a4fa:	4630      	mov	r0, r6
   1a4fc:	f7ff ff98 	bl	1a430 <putf>
   1a500:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1a502:	78bb      	ldrb	r3, [r7, #2]
   1a504:	f013 0f04 	tst.w	r3, #4
   1a508:	d005      	beq.n	1a516 <putchw+0xba>
   1a50a:	2158      	movs	r1, #88	; 0x58
   1a50c:	4630      	mov	r0, r6
   1a50e:	f7ff ff8f 	bl	1a430 <putf>
   1a512:	4405      	add	r5, r0
   1a514:	e7d6      	b.n	1a4c4 <putchw+0x68>
   1a516:	2178      	movs	r1, #120	; 0x78
   1a518:	e7f8      	b.n	1a50c <putchw+0xb0>
        written += putf(putp, '0');
   1a51a:	2130      	movs	r1, #48	; 0x30
   1a51c:	4630      	mov	r0, r6
   1a51e:	f7ff ff87 	bl	1a430 <putf>
   1a522:	4405      	add	r5, r0
   1a524:	e7ce      	b.n	1a4c4 <putchw+0x68>
            written += putf(putp, '0');
   1a526:	2130      	movs	r1, #48	; 0x30
   1a528:	4630      	mov	r0, r6
   1a52a:	f7ff ff81 	bl	1a430 <putf>
   1a52e:	4405      	add	r5, r0
        while (n-- > 0)
   1a530:	4644      	mov	r4, r8
   1a532:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1a536:	2c00      	cmp	r4, #0
   1a538:	dcf5      	bgt.n	1a526 <putchw+0xca>
   1a53a:	4644      	mov	r4, r8
   1a53c:	e7c4      	b.n	1a4c8 <putchw+0x6c>
        written += putf(putp, ch);
   1a53e:	4630      	mov	r0, r6
   1a540:	f7ff ff76 	bl	1a430 <putf>
   1a544:	4405      	add	r5, r0
    while ((ch = *bf++))
   1a546:	4643      	mov	r3, r8
   1a548:	f103 0801 	add.w	r8, r3, #1
   1a54c:	7819      	ldrb	r1, [r3, #0]
   1a54e:	2900      	cmp	r1, #0
   1a550:	d1f5      	bne.n	1a53e <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1a552:	78bb      	ldrb	r3, [r7, #2]
   1a554:	f013 0f08 	tst.w	r3, #8
   1a558:	d106      	bne.n	1a568 <putchw+0x10c>
   1a55a:	e008      	b.n	1a56e <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   1a55c:	2120      	movs	r1, #32
   1a55e:	4630      	mov	r0, r6
   1a560:	f7ff ff66 	bl	1a430 <putf>
   1a564:	4405      	add	r5, r0
        while (n-- > 0)
   1a566:	463c      	mov	r4, r7
   1a568:	1e67      	subs	r7, r4, #1
   1a56a:	2c00      	cmp	r4, #0
   1a56c:	dcf6      	bgt.n	1a55c <putchw+0x100>
    }
    
    return written;
}
   1a56e:	4628      	mov	r0, r5
   1a570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a574:	0008ff00 	.word	0x0008ff00

0001a578 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1a578:	b160      	cbz	r0, 1a594 <intarg+0x1c>
   1a57a:	2801      	cmp	r0, #1
   1a57c:	d017      	beq.n	1a5ae <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1a57e:	bb19      	cbnz	r1, 1a5c8 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   1a580:	6813      	ldr	r3, [r2, #0]
   1a582:	3307      	adds	r3, #7
   1a584:	f023 0307 	bic.w	r3, r3, #7
   1a588:	f103 0108 	add.w	r1, r3, #8
   1a58c:	6011      	str	r1, [r2, #0]
   1a58e:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1a592:	4770      	bx	lr
        if (sign) {
   1a594:	b129      	cbz	r1, 1a5a2 <intarg+0x2a>
            val = va_arg(*va, int);
   1a596:	6813      	ldr	r3, [r2, #0]
   1a598:	1d19      	adds	r1, r3, #4
   1a59a:	6011      	str	r1, [r2, #0]
   1a59c:	6818      	ldr	r0, [r3, #0]
   1a59e:	17c1      	asrs	r1, r0, #31
   1a5a0:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1a5a2:	6813      	ldr	r3, [r2, #0]
   1a5a4:	1d19      	adds	r1, r3, #4
   1a5a6:	6011      	str	r1, [r2, #0]
   1a5a8:	6818      	ldr	r0, [r3, #0]
   1a5aa:	2100      	movs	r1, #0
   1a5ac:	4770      	bx	lr
        if (sign) {
   1a5ae:	b129      	cbz	r1, 1a5bc <intarg+0x44>
            val = va_arg(*va, long);
   1a5b0:	6813      	ldr	r3, [r2, #0]
   1a5b2:	1d19      	adds	r1, r3, #4
   1a5b4:	6011      	str	r1, [r2, #0]
   1a5b6:	6818      	ldr	r0, [r3, #0]
   1a5b8:	17c1      	asrs	r1, r0, #31
   1a5ba:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1a5bc:	6813      	ldr	r3, [r2, #0]
   1a5be:	1d19      	adds	r1, r3, #4
   1a5c0:	6011      	str	r1, [r2, #0]
   1a5c2:	6818      	ldr	r0, [r3, #0]
   1a5c4:	2100      	movs	r1, #0
   1a5c6:	4770      	bx	lr
            val = va_arg(*va, long long);
   1a5c8:	6813      	ldr	r3, [r2, #0]
   1a5ca:	3307      	adds	r3, #7
   1a5cc:	f023 0307 	bic.w	r3, r3, #7
   1a5d0:	f103 0108 	add.w	r1, r3, #8
   1a5d4:	6011      	str	r1, [r2, #0]
   1a5d6:	e9d3 0100 	ldrd	r0, r1, [r3]
   1a5da:	4770      	bx	lr

0001a5dc <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1a5dc:	b570      	push	{r4, r5, r6, lr}
   1a5de:	b08a      	sub	sp, #40	; 0x28
   1a5e0:	4605      	mov	r5, r0
   1a5e2:	9101      	str	r1, [sp, #4]
   1a5e4:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1a5e6:	ab02      	add	r3, sp, #8
   1a5e8:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1a5ea:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   1a5ec:	9b01      	ldr	r3, [sp, #4]
   1a5ee:	1c5a      	adds	r2, r3, #1
   1a5f0:	9201      	str	r2, [sp, #4]
   1a5f2:	7819      	ldrb	r1, [r3, #0]
   1a5f4:	2900      	cmp	r1, #0
   1a5f6:	f000 811c 	beq.w	1a832 <tfp_format+0x256>
        if (ch != '%') {
   1a5fa:	2925      	cmp	r1, #37	; 0x25
   1a5fc:	d004      	beq.n	1a608 <tfp_format+0x2c>
            written += putf(putp, ch);
   1a5fe:	4628      	mov	r0, r5
   1a600:	f7ff ff16 	bl	1a430 <putf>
   1a604:	4404      	add	r4, r0
   1a606:	e7f1      	b.n	1a5ec <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1a608:	2200      	movs	r2, #0
   1a60a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1a60e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   1a612:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   1a616:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   1a61a:	f362 0382 	bfi	r3, r2, #2, #1
   1a61e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   1a622:	9b01      	ldr	r3, [sp, #4]
   1a624:	1c5a      	adds	r2, r3, #1
   1a626:	9201      	str	r2, [sp, #4]
   1a628:	7818      	ldrb	r0, [r3, #0]
   1a62a:	b128      	cbz	r0, 1a638 <tfp_format+0x5c>
                switch (ch) {
   1a62c:	282d      	cmp	r0, #45	; 0x2d
   1a62e:	d04e      	beq.n	1a6ce <tfp_format+0xf2>
   1a630:	2830      	cmp	r0, #48	; 0x30
   1a632:	d03c      	beq.n	1a6ae <tfp_format+0xd2>
   1a634:	2823      	cmp	r0, #35	; 0x23
   1a636:	d043      	beq.n	1a6c0 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1a638:	282a      	cmp	r0, #42	; 0x2a
   1a63a:	d052      	beq.n	1a6e2 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1a63c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1a640:	b2db      	uxtb	r3, r3
   1a642:	2b09      	cmp	r3, #9
   1a644:	d961      	bls.n	1a70a <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1a646:	286c      	cmp	r0, #108	; 0x6c
   1a648:	d065      	beq.n	1a716 <tfp_format+0x13a>
            lng = 0;
   1a64a:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   1a64c:	287a      	cmp	r0, #122	; 0x7a
   1a64e:	d06f      	beq.n	1a730 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   1a650:	2869      	cmp	r0, #105	; 0x69
   1a652:	f000 808e 	beq.w	1a772 <tfp_format+0x196>
   1a656:	d970      	bls.n	1a73a <tfp_format+0x15e>
   1a658:	2873      	cmp	r0, #115	; 0x73
   1a65a:	f000 80dd 	beq.w	1a818 <tfp_format+0x23c>
   1a65e:	f200 8099 	bhi.w	1a794 <tfp_format+0x1b8>
   1a662:	286f      	cmp	r0, #111	; 0x6f
   1a664:	f000 80c7 	beq.w	1a7f6 <tfp_format+0x21a>
   1a668:	2870      	cmp	r0, #112	; 0x70
   1a66a:	d1bf      	bne.n	1a5ec <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   1a66c:	9b00      	ldr	r3, [sp, #0]
   1a66e:	1d1a      	adds	r2, r3, #4
   1a670:	9200      	str	r2, [sp, #0]
   1a672:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   1a674:	2310      	movs	r3, #16
   1a676:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1a67a:	aa08      	add	r2, sp, #32
   1a67c:	2100      	movs	r1, #0
   1a67e:	f7ff fe34 	bl	1a2ea <ui2a>
                p.width = 2 * sizeof(void*);
   1a682:	2308      	movs	r3, #8
   1a684:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1a688:	2301      	movs	r3, #1
   1a68a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   1a68e:	2130      	movs	r1, #48	; 0x30
   1a690:	4628      	mov	r0, r5
   1a692:	f7ff fecd 	bl	1a430 <putf>
   1a696:	4404      	add	r4, r0
                written += putf(putp, 'x');
   1a698:	2178      	movs	r1, #120	; 0x78
   1a69a:	4628      	mov	r0, r5
   1a69c:	f7ff fec8 	bl	1a430 <putf>
   1a6a0:	4404      	add	r4, r0
                written += putchw(putp, &p);
   1a6a2:	a908      	add	r1, sp, #32
   1a6a4:	4628      	mov	r0, r5
   1a6a6:	f7ff fed9 	bl	1a45c <putchw>
   1a6aa:	4404      	add	r4, r0
                break;
   1a6ac:	e79e      	b.n	1a5ec <tfp_format+0x10>
                    if (!p.left) {
   1a6ae:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1a6b2:	f013 0f08 	tst.w	r3, #8
   1a6b6:	d1b4      	bne.n	1a622 <tfp_format+0x46>
                        p.lz = 1;
   1a6b8:	2301      	movs	r3, #1
   1a6ba:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1a6be:	e7b0      	b.n	1a622 <tfp_format+0x46>
                    p.alt = 1;
   1a6c0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1a6c4:	f043 0302 	orr.w	r3, r3, #2
   1a6c8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1a6cc:	e7a9      	b.n	1a622 <tfp_format+0x46>
                    p.left = 1;
   1a6ce:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1a6d2:	f043 0308 	orr.w	r3, r3, #8
   1a6d6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1a6da:	2300      	movs	r3, #0
   1a6dc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1a6e0:	e79f      	b.n	1a622 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1a6e2:	466a      	mov	r2, sp
   1a6e4:	2101      	movs	r1, #1
   1a6e6:	2000      	movs	r0, #0
   1a6e8:	f7ff ff46 	bl	1a578 <intarg>
                if (i > UCHAR_MAX) {
   1a6ec:	28ff      	cmp	r0, #255	; 0xff
   1a6ee:	dd07      	ble.n	1a700 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   1a6f0:	23ff      	movs	r3, #255	; 0xff
   1a6f2:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1a6f6:	9b01      	ldr	r3, [sp, #4]
   1a6f8:	1c5a      	adds	r2, r3, #1
   1a6fa:	9201      	str	r2, [sp, #4]
   1a6fc:	7818      	ldrb	r0, [r3, #0]
   1a6fe:	e7a2      	b.n	1a646 <tfp_format+0x6a>
                } else if (i > 0) {
   1a700:	2800      	cmp	r0, #0
   1a702:	ddf8      	ble.n	1a6f6 <tfp_format+0x11a>
                    p.width = i;
   1a704:	f88d 0020 	strb.w	r0, [sp, #32]
   1a708:	e7f5      	b.n	1a6f6 <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1a70a:	ab08      	add	r3, sp, #32
   1a70c:	220a      	movs	r2, #10
   1a70e:	a901      	add	r1, sp, #4
   1a710:	f7ff fe73 	bl	1a3fa <a2i>
   1a714:	e797      	b.n	1a646 <tfp_format+0x6a>
                ch = *(fmt++);
   1a716:	9b01      	ldr	r3, [sp, #4]
   1a718:	1c5a      	adds	r2, r3, #1
   1a71a:	9201      	str	r2, [sp, #4]
   1a71c:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   1a71e:	286c      	cmp	r0, #108	; 0x6c
   1a720:	d001      	beq.n	1a726 <tfp_format+0x14a>
                lng = 1;
   1a722:	2601      	movs	r6, #1
   1a724:	e792      	b.n	1a64c <tfp_format+0x70>
                    ch = *(fmt++);
   1a726:	1c9a      	adds	r2, r3, #2
   1a728:	9201      	str	r2, [sp, #4]
   1a72a:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   1a72c:	2602      	movs	r6, #2
   1a72e:	e78d      	b.n	1a64c <tfp_format+0x70>
                ch = *(fmt++);
   1a730:	9b01      	ldr	r3, [sp, #4]
   1a732:	1c5a      	adds	r2, r3, #1
   1a734:	9201      	str	r2, [sp, #4]
   1a736:	7818      	ldrb	r0, [r3, #0]
   1a738:	e78a      	b.n	1a650 <tfp_format+0x74>
            switch (ch) {
   1a73a:	2858      	cmp	r0, #88	; 0x58
   1a73c:	d040      	beq.n	1a7c0 <tfp_format+0x1e4>
   1a73e:	d80a      	bhi.n	1a756 <tfp_format+0x17a>
   1a740:	2800      	cmp	r0, #0
   1a742:	d076      	beq.n	1a832 <tfp_format+0x256>
   1a744:	2825      	cmp	r0, #37	; 0x25
   1a746:	f47f af51 	bne.w	1a5ec <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1a74a:	4601      	mov	r1, r0
   1a74c:	4628      	mov	r0, r5
   1a74e:	f7ff fe6f 	bl	1a430 <putf>
   1a752:	4404      	add	r4, r0
                break;
   1a754:	e74a      	b.n	1a5ec <tfp_format+0x10>
            switch (ch) {
   1a756:	2863      	cmp	r0, #99	; 0x63
   1a758:	d108      	bne.n	1a76c <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   1a75a:	9b00      	ldr	r3, [sp, #0]
   1a75c:	1d1a      	adds	r2, r3, #4
   1a75e:	9200      	str	r2, [sp, #0]
   1a760:	7819      	ldrb	r1, [r3, #0]
   1a762:	4628      	mov	r0, r5
   1a764:	f7ff fe64 	bl	1a430 <putf>
   1a768:	4404      	add	r4, r0
                break;
   1a76a:	e73f      	b.n	1a5ec <tfp_format+0x10>
            switch (ch) {
   1a76c:	2864      	cmp	r0, #100	; 0x64
   1a76e:	f47f af3d 	bne.w	1a5ec <tfp_format+0x10>
                p.base = 10;
   1a772:	230a      	movs	r3, #10
   1a774:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1a778:	466a      	mov	r2, sp
   1a77a:	2101      	movs	r1, #1
   1a77c:	4630      	mov	r0, r6
   1a77e:	f7ff fefb 	bl	1a578 <intarg>
   1a782:	aa08      	add	r2, sp, #32
   1a784:	f7ff fe11 	bl	1a3aa <i2a>
                written += putchw(putp, &p);
   1a788:	a908      	add	r1, sp, #32
   1a78a:	4628      	mov	r0, r5
   1a78c:	f7ff fe66 	bl	1a45c <putchw>
   1a790:	4404      	add	r4, r0
                break;
   1a792:	e72b      	b.n	1a5ec <tfp_format+0x10>
            switch (ch) {
   1a794:	2875      	cmp	r0, #117	; 0x75
   1a796:	d110      	bne.n	1a7ba <tfp_format+0x1de>
                p.base = 10;
   1a798:	230a      	movs	r3, #10
   1a79a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1a79e:	466a      	mov	r2, sp
   1a7a0:	2100      	movs	r1, #0
   1a7a2:	4630      	mov	r0, r6
   1a7a4:	f7ff fee8 	bl	1a578 <intarg>
   1a7a8:	aa08      	add	r2, sp, #32
   1a7aa:	f7ff fd9e 	bl	1a2ea <ui2a>
                written += putchw(putp, &p);
   1a7ae:	a908      	add	r1, sp, #32
   1a7b0:	4628      	mov	r0, r5
   1a7b2:	f7ff fe53 	bl	1a45c <putchw>
   1a7b6:	4404      	add	r4, r0
                break;
   1a7b8:	e718      	b.n	1a5ec <tfp_format+0x10>
            switch (ch) {
   1a7ba:	2878      	cmp	r0, #120	; 0x78
   1a7bc:	f47f af16 	bne.w	1a5ec <tfp_format+0x10>
                p.base = 16;
   1a7c0:	2310      	movs	r3, #16
   1a7c2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1a7c6:	2858      	cmp	r0, #88	; 0x58
   1a7c8:	bf14      	ite	ne
   1a7ca:	2300      	movne	r3, #0
   1a7cc:	2301      	moveq	r3, #1
   1a7ce:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1a7d2:	f363 0282 	bfi	r2, r3, #2, #1
   1a7d6:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1a7da:	466a      	mov	r2, sp
   1a7dc:	2100      	movs	r1, #0
   1a7de:	4630      	mov	r0, r6
   1a7e0:	f7ff feca 	bl	1a578 <intarg>
   1a7e4:	aa08      	add	r2, sp, #32
   1a7e6:	f7ff fd80 	bl	1a2ea <ui2a>
                written += putchw(putp, &p);
   1a7ea:	a908      	add	r1, sp, #32
   1a7ec:	4628      	mov	r0, r5
   1a7ee:	f7ff fe35 	bl	1a45c <putchw>
   1a7f2:	4404      	add	r4, r0
                break;
   1a7f4:	e6fa      	b.n	1a5ec <tfp_format+0x10>
                p.base = 8;
   1a7f6:	2308      	movs	r3, #8
   1a7f8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1a7fc:	466a      	mov	r2, sp
   1a7fe:	2100      	movs	r1, #0
   1a800:	4630      	mov	r0, r6
   1a802:	f7ff feb9 	bl	1a578 <intarg>
   1a806:	aa08      	add	r2, sp, #32
   1a808:	f7ff fd6f 	bl	1a2ea <ui2a>
                written += putchw(putp, &p);
   1a80c:	a908      	add	r1, sp, #32
   1a80e:	4628      	mov	r0, r5
   1a810:	f7ff fe24 	bl	1a45c <putchw>
   1a814:	4404      	add	r4, r0
                break;
   1a816:	e6e9      	b.n	1a5ec <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1a818:	9b00      	ldr	r3, [sp, #0]
   1a81a:	1d1a      	adds	r2, r3, #4
   1a81c:	9200      	str	r2, [sp, #0]
   1a81e:	681b      	ldr	r3, [r3, #0]
   1a820:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1a822:	a908      	add	r1, sp, #32
   1a824:	4628      	mov	r0, r5
   1a826:	f7ff fe19 	bl	1a45c <putchw>
   1a82a:	4404      	add	r4, r0
                p.bf = bf;
   1a82c:	ab02      	add	r3, sp, #8
   1a82e:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1a830:	e6dc      	b.n	1a5ec <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1a832:	4620      	mov	r0, r4
   1a834:	b00a      	add	sp, #40	; 0x28
   1a836:	bd70      	pop	{r4, r5, r6, pc}

0001a838 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1a838:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1a83a:	f7ff fecf 	bl	1a5dc <tfp_format>
}
   1a83e:	bd08      	pop	{r3, pc}

0001a840 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   1a840:	b40f      	push	{r0, r1, r2, r3}
   1a842:	b500      	push	{lr}
   1a844:	b083      	sub	sp, #12
   1a846:	aa04      	add	r2, sp, #16
   1a848:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1a84c:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1a84e:	4b04      	ldr	r3, [pc, #16]	; (1a860 <printf+0x20>)
   1a850:	6818      	ldr	r0, [r3, #0]
   1a852:	f7ff fff1 	bl	1a838 <vfprintf>
    va_end(va);
    return rv;
}
   1a856:	b003      	add	sp, #12
   1a858:	f85d eb04 	ldr.w	lr, [sp], #4
   1a85c:	b004      	add	sp, #16
   1a85e:	4770      	bx	lr
   1a860:	00026b7c 	.word	0x00026b7c

0001a864 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   1a864:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a866:	b085      	sub	sp, #20
   1a868:	4605      	mov	r5, r0
   1a86a:	460c      	mov	r4, r1
   1a86c:	4616      	mov	r6, r2
   1a86e:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1a870:	460a      	mov	r2, r1
   1a872:	4601      	mov	r1, r0
   1a874:	4668      	mov	r0, sp
   1a876:	f000 f835 	bl	1a8e4 <fmemopen_w>
    tfp_format(f, fmt, va);
   1a87a:	463a      	mov	r2, r7
   1a87c:	4631      	mov	r1, r6
   1a87e:	f7ff fead 	bl	1a5dc <tfp_format>
    if (size > 0) {
   1a882:	b12c      	cbz	r4, 1a890 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   1a884:	9b02      	ldr	r3, [sp, #8]
   1a886:	42a3      	cmp	r3, r4
   1a888:	d305      	bcc.n	1a896 <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   1a88a:	3c01      	subs	r4, #1
   1a88c:	2300      	movs	r3, #0
   1a88e:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   1a890:	9802      	ldr	r0, [sp, #8]
   1a892:	b005      	add	sp, #20
   1a894:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   1a896:	9b01      	ldr	r3, [sp, #4]
   1a898:	2200      	movs	r2, #0
   1a89a:	701a      	strb	r2, [r3, #0]
   1a89c:	e7f8      	b.n	1a890 <vsnprintf+0x2c>
	...

0001a8a0 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1a8a0:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   1a8a2:	460a      	mov	r2, r1
   1a8a4:	4601      	mov	r1, r0
   1a8a6:	4b02      	ldr	r3, [pc, #8]	; (1a8b0 <vprintf+0x10>)
   1a8a8:	6818      	ldr	r0, [r3, #0]
   1a8aa:	f7ff ffc5 	bl	1a838 <vfprintf>
}
   1a8ae:	bd08      	pop	{r3, pc}
   1a8b0:	00026b7c 	.word	0x00026b7c

0001a8b4 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1a8b4:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1a8b6:	2500      	movs	r5, #0
    
    while (n--)
   1a8b8:	e000      	b.n	1a8bc <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1a8ba:	4622      	mov	r2, r4
    while (n--)
   1a8bc:	1e54      	subs	r4, r2, #1
   1a8be:	b16a      	cbz	r2, 1a8dc <memfile_write+0x28>
        f->bytes_written++;
   1a8c0:	6883      	ldr	r3, [r0, #8]
   1a8c2:	3301      	adds	r3, #1
   1a8c4:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   1a8c6:	68c2      	ldr	r2, [r0, #12]
   1a8c8:	4293      	cmp	r3, r2
   1a8ca:	d8f6      	bhi.n	1a8ba <memfile_write+0x6>
            *f->buffer++ = *bp++;
   1a8cc:	6843      	ldr	r3, [r0, #4]
   1a8ce:	1c5a      	adds	r2, r3, #1
   1a8d0:	6042      	str	r2, [r0, #4]
   1a8d2:	780a      	ldrb	r2, [r1, #0]
   1a8d4:	701a      	strb	r2, [r3, #0]
            i++;
   1a8d6:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   1a8d8:	3101      	adds	r1, #1
   1a8da:	e7ee      	b.n	1a8ba <memfile_write+0x6>
        }
    }
    
    return i;
}
   1a8dc:	4628      	mov	r0, r5
   1a8de:	bc30      	pop	{r4, r5}
   1a8e0:	4770      	bx	lr
	...

0001a8e4 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1a8e4:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1a8e6:	4c04      	ldr	r4, [pc, #16]	; (1a8f8 <fmemopen_w+0x14>)
   1a8e8:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1a8ea:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1a8ec:	2100      	movs	r1, #0
   1a8ee:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1a8f0:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1a8f2:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a8f6:	4770      	bx	lr
   1a8f8:	00026b74 	.word	0x00026b74

0001a8fc <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1a8fc:	2000      	movs	r0, #0
   1a8fe:	4770      	bx	lr

0001a900 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1a900:	b510      	push	{r4, lr}
   1a902:	4608      	mov	r0, r1
   1a904:	4614      	mov	r4, r2
    console_write(bp, n);
   1a906:	4611      	mov	r1, r2
   1a908:	f7fd f9b8 	bl	17c7c <console_write>
    return n;
}
   1a90c:	4620      	mov	r0, r4
   1a90e:	bd10      	pop	{r4, pc}

0001a910 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   1a910:	b508      	push	{r3, lr}
    sysinit();
   1a912:	f7fd fa1b 	bl	17d4c <sysinit_start>
   1a916:	f000 f81b 	bl	1a950 <sysinit_app>
   1a91a:	f7fd fa1d 	bl	17d58 <sysinit_end>
}
   1a91e:	bd08      	pop	{r3, pc}

0001a920 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1a920:	b570      	push	{r4, r5, r6, lr}
   1a922:	b082      	sub	sp, #8
   1a924:	460c      	mov	r4, r1
   1a926:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1a928:	b29d      	uxth	r5, r3
   1a92a:	9b07      	ldr	r3, [sp, #28]
   1a92c:	9300      	str	r3, [sp, #0]
   1a92e:	4603      	mov	r3, r0
   1a930:	9a06      	ldr	r2, [sp, #24]
   1a932:	4629      	mov	r1, r5
   1a934:	4620      	mov	r0, r4
   1a936:	f7fe fdeb 	bl	19510 <os_mempool_init>
    if (rc != 0) {
   1a93a:	b108      	cbz	r0, 1a940 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1a93c:	b002      	add	sp, #8
   1a93e:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1a940:	462b      	mov	r3, r5
   1a942:	9a06      	ldr	r2, [sp, #24]
   1a944:	b292      	uxth	r2, r2
   1a946:	4621      	mov	r1, r4
   1a948:	4630      	mov	r0, r6
   1a94a:	f7fe fc96 	bl	1927a <os_mbuf_pool_init>
   1a94e:	e7f5      	b.n	1a93c <mem_init_mbuf_pool+0x1c>

0001a950 <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   1a950:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1a952:	f7fe f9f3 	bl	18d3c <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1a956:	f001 f985 	bl	1bc64 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1a95a:	f7fd f9a3 	bl	17ca4 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   1a95e:	f001 fac7 	bl	1bef0 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   1a962:	f001 f9b7 	bl	1bcd4 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   1a966:	f001 f8e1 	bl	1bb2c <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   1a96a:	f001 f8f1 	bl	1bb50 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1a96e:	f001 f8f0 	bl	1bb52 <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   1a972:	f001 f8ef 	bl	1bb54 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   1a976:	f001 f8ee 	bl	1bb56 <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   1a97a:	f001 f8ed 	bl	1bb58 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1a97e:	f000 fbd1 	bl	1b124 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   1a982:	f000 fd1f 	bl	1b3c4 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   1a986:	f000 ff3d 	bl	1b804 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   1a98a:	f000 feb3 	bl	1b6f4 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   1a98e:	f000 fe3d 	bl	1b60c <init_sensor_coap>
}
   1a992:	bd08      	pop	{r3, pc}

0001a994 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   1a994:	b908      	cbnz	r0, 1a99a <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   1a996:	4802      	ldr	r0, [pc, #8]	; (1a9a0 <hal_bsp_flash_dev+0xc>)
   1a998:	4770      	bx	lr
    }

    return NULL;
   1a99a:	2000      	movs	r0, #0
}
   1a99c:	4770      	bx	lr
   1a99e:	bf00      	nop
   1a9a0:	00026b80 	.word	0x00026b80

0001a9a4 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   1a9a4:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   1a9a6:	f7ed fc0b 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   1a9aa:	f000 fbb3 	bl	1b114 <nrf52_periph_create>
}
   1a9ae:	bd08      	pop	{r3, pc}

0001a9b0 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1a9b0:	2300      	movs	r3, #0
   1a9b2:	4a07      	ldr	r2, [pc, #28]	; (1a9d0 <nrf52k_flash_wait_ready+0x20>)
   1a9b4:	4293      	cmp	r3, r2
   1a9b6:	dc06      	bgt.n	1a9c6 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1a9b8:	4a06      	ldr	r2, [pc, #24]	; (1a9d4 <nrf52k_flash_wait_ready+0x24>)
   1a9ba:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1a9be:	2a01      	cmp	r2, #1
   1a9c0:	d004      	beq.n	1a9cc <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1a9c2:	3301      	adds	r3, #1
   1a9c4:	e7f5      	b.n	1a9b2 <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1a9c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a9ca:	4770      	bx	lr
            return 0;
   1a9cc:	2000      	movs	r0, #0
}
   1a9ce:	4770      	bx	lr
   1a9d0:	0001869f 	.word	0x0001869f
   1a9d4:	4001e000 	.word	0x4001e000

0001a9d8 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1a9d8:	b538      	push	{r3, r4, r5, lr}
   1a9da:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1a9dc:	f7ff ffe8 	bl	1a9b0 <nrf52k_flash_wait_ready>
   1a9e0:	b9f0      	cbnz	r0, 1aa20 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a9e2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a9e6:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1a9e8:	4b0f      	ldr	r3, [pc, #60]	; (1aa28 <nrf52k_flash_erase_sector+0x50>)
   1a9ea:	2202      	movs	r2, #2
   1a9ec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1a9f0:	f7ff ffde 	bl	1a9b0 <nrf52k_flash_wait_ready>
   1a9f4:	b148      	cbz	r0, 1aa0a <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1a9f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1a9fa:	4a0b      	ldr	r2, [pc, #44]	; (1aa28 <nrf52k_flash_erase_sector+0x50>)
   1a9fc:	2100      	movs	r1, #0
   1a9fe:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1aa02:	b904      	cbnz	r4, 1aa06 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1aa04:	b662      	cpsie	i
    return rc;
}
   1aa06:	4618      	mov	r0, r3
   1aa08:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1aa0a:	4b07      	ldr	r3, [pc, #28]	; (1aa28 <nrf52k_flash_erase_sector+0x50>)
   1aa0c:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1aa10:	f7ff ffce 	bl	1a9b0 <nrf52k_flash_wait_ready>
   1aa14:	4603      	mov	r3, r0
   1aa16:	2800      	cmp	r0, #0
   1aa18:	d0ef      	beq.n	1a9fa <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1aa1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aa1e:	e7ec      	b.n	1a9fa <nrf52k_flash_erase_sector+0x22>
        return -1;
   1aa20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aa24:	e7ef      	b.n	1aa06 <nrf52k_flash_erase_sector+0x2e>
   1aa26:	bf00      	nop
   1aa28:	4001e000 	.word	0x4001e000

0001aa2c <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1aa2c:	2000      	movs	r0, #0
   1aa2e:	4770      	bx	lr

0001aa30 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1aa30:	297f      	cmp	r1, #127	; 0x7f
   1aa32:	dc06      	bgt.n	1aa42 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1aa34:	0309      	lsls	r1, r1, #12
   1aa36:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1aa38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1aa3c:	601a      	str	r2, [r3, #0]
}
   1aa3e:	2000      	movs	r0, #0
   1aa40:	4770      	bx	lr
{
   1aa42:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1aa44:	2300      	movs	r3, #0
   1aa46:	461a      	mov	r2, r3
   1aa48:	4619      	mov	r1, r3
   1aa4a:	4618      	mov	r0, r3
   1aa4c:	f7fe f818 	bl	18a80 <__assert_func>

0001aa50 <nrf52k_flash_write>:
{
   1aa50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aa54:	b082      	sub	sp, #8
   1aa56:	460d      	mov	r5, r1
   1aa58:	4616      	mov	r6, r2
   1aa5a:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1aa5c:	f7ff ffa8 	bl	1a9b0 <nrf52k_flash_wait_ready>
   1aa60:	2800      	cmp	r0, #0
   1aa62:	d158      	bne.n	1ab16 <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1aa64:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1aa68:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1aa6a:	4b2c      	ldr	r3, [pc, #176]	; (1ab1c <nrf52k_flash_write+0xcc>)
   1aa6c:	2201      	movs	r2, #1
   1aa6e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1aa72:	f015 0803 	ands.w	r8, r5, #3
   1aa76:	d10b      	bne.n	1aa90 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1aa78:	2c03      	cmp	r4, #3
   1aa7a:	d925      	bls.n	1aac8 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1aa7c:	f7ff ff98 	bl	1a9b0 <nrf52k_flash_wait_ready>
   1aa80:	2800      	cmp	r0, #0
   1aa82:	d139      	bne.n	1aaf8 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1aa84:	f856 3b04 	ldr.w	r3, [r6], #4
   1aa88:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1aa8c:	3c04      	subs	r4, #4
   1aa8e:	e7f3      	b.n	1aa78 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1aa90:	f7ff ff8e 	bl	1a9b0 <nrf52k_flash_wait_ready>
   1aa94:	bb68      	cbnz	r0, 1aaf2 <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1aa96:	f025 0a03 	bic.w	sl, r5, #3
   1aa9a:	f8da 3000 	ldr.w	r3, [sl]
   1aa9e:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1aaa0:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1aaa4:	45a1      	cmp	r9, r4
   1aaa6:	d900      	bls.n	1aaaa <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1aaa8:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1aaaa:	464a      	mov	r2, r9
   1aaac:	4631      	mov	r1, r6
   1aaae:	ab01      	add	r3, sp, #4
   1aab0:	eb03 0008 	add.w	r0, r3, r8
   1aab4:	f7ff fbda 	bl	1a26c <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1aab8:	9b01      	ldr	r3, [sp, #4]
   1aaba:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1aabe:	444d      	add	r5, r9
        num_bytes -= cnt;
   1aac0:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1aac4:	444e      	add	r6, r9
   1aac6:	e7d7      	b.n	1aa78 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1aac8:	b164      	cbz	r4, 1aae4 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1aaca:	682b      	ldr	r3, [r5, #0]
   1aacc:	a802      	add	r0, sp, #8
   1aace:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1aad2:	4622      	mov	r2, r4
   1aad4:	4631      	mov	r1, r6
   1aad6:	f7ff fbc9 	bl	1a26c <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1aada:	f7ff ff69 	bl	1a9b0 <nrf52k_flash_wait_ready>
   1aade:	b9b8      	cbnz	r0, 1ab10 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1aae0:	9b01      	ldr	r3, [sp, #4]
   1aae2:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1aae4:	f7ff ff64 	bl	1a9b0 <nrf52k_flash_wait_ready>
   1aae8:	4603      	mov	r3, r0
   1aaea:	b138      	cbz	r0, 1aafc <nrf52k_flash_write+0xac>
        rc = -1;
   1aaec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aaf0:	e004      	b.n	1aafc <nrf52k_flash_write+0xac>
    int rc = -1;
   1aaf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aaf6:	e001      	b.n	1aafc <nrf52k_flash_write+0xac>
   1aaf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1aafc:	4a07      	ldr	r2, [pc, #28]	; (1ab1c <nrf52k_flash_write+0xcc>)
   1aafe:	2100      	movs	r1, #0
   1ab00:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1ab04:	b907      	cbnz	r7, 1ab08 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1ab06:	b662      	cpsie	i
}
   1ab08:	4618      	mov	r0, r3
   1ab0a:	b002      	add	sp, #8
   1ab0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1ab10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ab14:	e7f2      	b.n	1aafc <nrf52k_flash_write+0xac>
        return -1;
   1ab16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ab1a:	e7f5      	b.n	1ab08 <nrf52k_flash_write+0xb8>
   1ab1c:	4001e000 	.word	0x4001e000

0001ab20 <nrf52k_flash_read>:
{
   1ab20:	b508      	push	{r3, lr}
   1ab22:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1ab24:	461a      	mov	r2, r3
   1ab26:	f7ff fba1 	bl	1a26c <memcpy>
}
   1ab2a:	2000      	movs	r0, #0
   1ab2c:	bd08      	pop	{r3, pc}
	...

0001ab30 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1ab30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1ab32:	f7ff fa3b 	bl	19fac <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1ab36:	4b31      	ldr	r3, [pc, #196]	; (1abfc <nrf52_timer_handler+0xcc>)
   1ab38:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1ab3c:	4b30      	ldr	r3, [pc, #192]	; (1ac00 <nrf52_timer_handler+0xd0>)
   1ab3e:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1ab40:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1ab44:	d225      	bcs.n	1ab92 <nrf52_timer_handler+0x62>
   1ab46:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1ab48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1ab4c:	d227      	bcs.n	1ab9e <nrf52_timer_handler+0x6e>
    result = x - y;
   1ab4e:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1ab50:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1ab54:	d129      	bne.n	1abaa <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   1ab56:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1ab5a:	4f29      	ldr	r7, [pc, #164]	; (1ac00 <nrf52_timer_handler+0xd0>)
   1ab5c:	683c      	ldr	r4, [r7, #0]
   1ab5e:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1ab62:	4628      	mov	r0, r5
   1ab64:	f7ff f9b0 	bl	19ec8 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1ab68:	4b24      	ldr	r3, [pc, #144]	; (1abfc <nrf52_timer_handler+0xcc>)
   1ab6a:	2200      	movs	r2, #0
   1ab6c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1ab70:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1ab72:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1ab74:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1ab78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1ab7c:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1ab7e:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1ab80:	f7ff fa1d 	bl	19fbe <os_arch_in_critical>
   1ab84:	bb28      	cbnz	r0, 1abd2 <nrf52_timer_handler+0xa2>
   1ab86:	2300      	movs	r3, #0
   1ab88:	461a      	mov	r2, r3
   1ab8a:	4619      	mov	r1, r3
   1ab8c:	4618      	mov	r0, r3
   1ab8e:	f7fd ff77 	bl	18a80 <__assert_func>
    assert(x <= 0xffffff);
   1ab92:	2300      	movs	r3, #0
   1ab94:	461a      	mov	r2, r3
   1ab96:	4619      	mov	r1, r3
   1ab98:	4618      	mov	r0, r3
   1ab9a:	f7fd ff71 	bl	18a80 <__assert_func>
    assert(y <= 0xffffff);
   1ab9e:	2300      	movs	r3, #0
   1aba0:	461a      	mov	r2, r3
   1aba2:	4619      	mov	r1, r3
   1aba4:	4618      	mov	r0, r3
   1aba6:	f7fd ff6b 	bl	18a80 <__assert_func>
        return (result | 0xff800000);
   1abaa:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1abae:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1abb2:	e7d2      	b.n	1ab5a <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1abb4:	2300      	movs	r3, #0
   1abb6:	461a      	mov	r2, r3
   1abb8:	4619      	mov	r1, r3
   1abba:	4618      	mov	r0, r3
   1abbc:	f7fd ff60 	bl	18a80 <__assert_func>
        return (result | 0xff800000);
   1abc0:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1abc4:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1abc8:	2a02      	cmp	r2, #2
   1abca:	dc13      	bgt.n	1abf4 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1abcc:	4a0c      	ldr	r2, [pc, #48]	; (1ac00 <nrf52_timer_handler+0xd0>)
   1abce:	6814      	ldr	r4, [r2, #0]
   1abd0:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1abd2:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1abd6:	4a09      	ldr	r2, [pc, #36]	; (1abfc <nrf52_timer_handler+0xcc>)
   1abd8:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1abdc:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1abe0:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1abe4:	d2e6      	bcs.n	1abb4 <nrf52_timer_handler+0x84>
    result = x - y;
   1abe6:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1abe8:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1abec:	d1e8      	bne.n	1abc0 <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   1abee:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1abf2:	e7e9      	b.n	1abc8 <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   1abf4:	4630      	mov	r0, r6
   1abf6:	f7ff f9df 	bl	19fb8 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1abfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1abfc:	40011000 	.word	0x40011000
   1ac00:	2000dec4 	.word	0x2000dec4

0001ac04 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1ac04:	b538      	push	{r3, r4, r5, lr}
   1ac06:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1ac08:	f7ff f9d9 	bl	19fbe <os_arch_in_critical>
   1ac0c:	b1a0      	cbz	r0, 1ac38 <os_tick_idle+0x34>

    if (ticks > 0) {
   1ac0e:	2d00      	cmp	r5, #0
   1ac10:	d038      	beq.n	1ac84 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1ac12:	4b20      	ldr	r3, [pc, #128]	; (1ac94 <os_tick_idle+0x90>)
   1ac14:	685b      	ldr	r3, [r3, #4]
   1ac16:	42ab      	cmp	r3, r5
   1ac18:	d200      	bcs.n	1ac1c <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1ac1a:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1ac1c:	4b1d      	ldr	r3, [pc, #116]	; (1ac94 <os_tick_idle+0x90>)
   1ac1e:	689c      	ldr	r4, [r3, #8]
   1ac20:	681a      	ldr	r2, [r3, #0]
   1ac22:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1ac26:	f7ff f9ca 	bl	19fbe <os_arch_in_critical>
   1ac2a:	b9d0      	cbnz	r0, 1ac62 <os_tick_idle+0x5e>
   1ac2c:	2300      	movs	r3, #0
   1ac2e:	461a      	mov	r2, r3
   1ac30:	4619      	mov	r1, r3
   1ac32:	4618      	mov	r0, r3
   1ac34:	f7fd ff24 	bl	18a80 <__assert_func>
    OS_ASSERT_CRITICAL();
   1ac38:	2300      	movs	r3, #0
   1ac3a:	461a      	mov	r2, r3
   1ac3c:	4619      	mov	r1, r3
   1ac3e:	4618      	mov	r0, r3
   1ac40:	f7fd ff1e 	bl	18a80 <__assert_func>
    assert(y <= 0xffffff);
   1ac44:	2300      	movs	r3, #0
   1ac46:	461a      	mov	r2, r3
   1ac48:	4619      	mov	r1, r3
   1ac4a:	4618      	mov	r0, r3
   1ac4c:	f7fd ff18 	bl	18a80 <__assert_func>
        return (result | 0xff800000);
   1ac50:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1ac54:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1ac58:	2b02      	cmp	r3, #2
   1ac5a:	dc13      	bgt.n	1ac84 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1ac5c:	4b0d      	ldr	r3, [pc, #52]	; (1ac94 <os_tick_idle+0x90>)
   1ac5e:	681c      	ldr	r4, [r3, #0]
   1ac60:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1ac62:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1ac66:	4b0c      	ldr	r3, [pc, #48]	; (1ac98 <os_tick_idle+0x94>)
   1ac68:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1ac6c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1ac70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1ac74:	d2e6      	bcs.n	1ac44 <os_tick_idle+0x40>
    result = x - y;
   1ac76:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1ac78:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1ac7c:	d1e8      	bne.n	1ac50 <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1ac7e:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1ac82:	e7e9      	b.n	1ac58 <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1ac84:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1ac88:	bf30      	wfi

    if (ticks > 0) {
   1ac8a:	b905      	cbnz	r5, 1ac8e <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1ac8c:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1ac8e:	f7ff ff4f 	bl	1ab30 <nrf52_timer_handler>
}
   1ac92:	e7fb      	b.n	1ac8c <os_tick_idle+0x88>
   1ac94:	2000dec4 	.word	0x2000dec4
   1ac98:	40011000 	.word	0x40011000

0001ac9c <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1ac9c:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1ac9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1aca2:	fbb3 f3f0 	udiv	r3, r3, r0
   1aca6:	fb00 f303 	mul.w	r3, r0, r3
   1acaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1acae:	d136      	bne.n	1ad1e <os_tick_init+0x82>
   1acb0:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1acb2:	4d1e      	ldr	r5, [pc, #120]	; (1ad2c <os_tick_init+0x90>)
   1acb4:	2600      	movs	r6, #0
   1acb6:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1acb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1acbc:	fbb3 f0f0 	udiv	r0, r3, r0
   1acc0:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1acc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1acc6:	fbb3 f0f0 	udiv	r0, r3, r0
   1acca:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1accc:	f7ff f96e 	bl	19fac <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1acd0:	0164      	lsls	r4, r4, #5
   1acd2:	b2e4      	uxtb	r4, r4
   1acd4:	4b16      	ldr	r3, [pc, #88]	; (1ad30 <os_tick_init+0x94>)
   1acd6:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1acda:	4a16      	ldr	r2, [pc, #88]	; (1ad34 <os_tick_init+0x98>)
   1acdc:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1acde:	4916      	ldr	r1, [pc, #88]	; (1ad38 <os_tick_init+0x9c>)
   1ace0:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ace4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1ace8:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1acea:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1acee:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1acf2:	2201      	movs	r2, #1
   1acf4:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1acf6:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1acf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1acfc:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1ad00:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1ad04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1ad08:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1ad0c:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1ad10:	6829      	ldr	r1, [r5, #0]
   1ad12:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1ad16:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1ad18:	f7ff f94e 	bl	19fb8 <os_arch_restore_sr>
}
   1ad1c:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1ad1e:	2300      	movs	r3, #0
   1ad20:	461a      	mov	r2, r3
   1ad22:	4619      	mov	r1, r3
   1ad24:	4618      	mov	r0, r3
   1ad26:	f7fd feab 	bl	18a80 <__assert_func>
   1ad2a:	bf00      	nop
   1ad2c:	2000dec4 	.word	0x2000dec4
   1ad30:	e000e100 	.word	0xe000e100
   1ad34:	e000ed00 	.word	0xe000ed00
   1ad38:	0001ab31 	.word	0x0001ab31

0001ad3c <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1ad3c:	2301      	movs	r3, #1
   1ad3e:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1ad40:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1ad44:	4770      	bx	lr
	...

0001ad48 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1ad48:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1ad4a:	7883      	ldrb	r3, [r0, #2]
   1ad4c:	b393      	cbz	r3, 1adb4 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1ad4e:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1ad50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1ad54:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1ad58:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1ad5a:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1ad5e:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1ad62:	b11d      	cbz	r5, 1ad6c <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1ad64:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1ad68:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1ad6c:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1ad6e:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1ad70:	2b02      	cmp	r3, #2
   1ad72:	dc0e      	bgt.n	1ad92 <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1ad74:	7842      	ldrb	r2, [r0, #1]
   1ad76:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1ad78:	2b00      	cmp	r3, #0
   1ad7a:	db15      	blt.n	1ada8 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ad7c:	f002 021f 	and.w	r2, r2, #31
   1ad80:	095b      	lsrs	r3, r3, #5
   1ad82:	2101      	movs	r1, #1
   1ad84:	fa01 f202 	lsl.w	r2, r1, r2
   1ad88:	3340      	adds	r3, #64	; 0x40
   1ad8a:	491b      	ldr	r1, [pc, #108]	; (1adf8 <nrf_timer_set_ocmp+0xb0>)
   1ad8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1ad90:	e00a      	b.n	1ada8 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1ad92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1ad96:	d208      	bcs.n	1adaa <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1ad98:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1ad9c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1ada0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1ada4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1ada8:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1adaa:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1adae:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1adb2:	e7f5      	b.n	1ada0 <nrf_timer_set_ocmp+0x58>
   1adb4:	460d      	mov	r5, r1
   1adb6:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1adb8:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1adba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1adbe:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1adc2:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1adc6:	2200      	movs	r2, #0
   1adc8:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1adcc:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1add0:	f7ff ffb4 	bl	1ad3c <nrf_read_timer_cntr>
   1add4:	1b40      	subs	r0, r0, r5
   1add6:	2800      	cmp	r0, #0
   1add8:	dbe6      	blt.n	1ada8 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1adda:	7862      	ldrb	r2, [r4, #1]
   1addc:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1adde:	2b00      	cmp	r3, #0
   1ade0:	dbe2      	blt.n	1ada8 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ade2:	f002 021f 	and.w	r2, r2, #31
   1ade6:	095b      	lsrs	r3, r3, #5
   1ade8:	2101      	movs	r1, #1
   1adea:	fa01 f202 	lsl.w	r2, r1, r2
   1adee:	3340      	adds	r3, #64	; 0x40
   1adf0:	4901      	ldr	r1, [pc, #4]	; (1adf8 <nrf_timer_set_ocmp+0xb0>)
   1adf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1adf6:	e7d7      	b.n	1ada8 <nrf_timer_set_ocmp+0x60>
   1adf8:	e000e100 	.word	0xe000e100

0001adfc <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1adfc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1ae00:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1ae04:	4770      	bx	lr

0001ae06 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1ae06:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1ae0a:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1ae0e:	4770      	bx	lr

0001ae10 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1ae10:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1ae12:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1ae14:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1ae18:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1ae1a:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1ae1c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1ae20:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1ae24:	b1ad      	cbz	r5, 1ae52 <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1ae26:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1ae2a:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1ae2c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1ae30:	2500      	movs	r5, #0
   1ae32:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1ae36:	7840      	ldrb	r0, [r0, #1]
   1ae38:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1ae3a:	42aa      	cmp	r2, r5
   1ae3c:	db09      	blt.n	1ae52 <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ae3e:	f000 001f 	and.w	r0, r0, #31
   1ae42:	0952      	lsrs	r2, r2, #5
   1ae44:	2501      	movs	r5, #1
   1ae46:	fa05 f000 	lsl.w	r0, r5, r0
   1ae4a:	3240      	adds	r2, #64	; 0x40
   1ae4c:	4d04      	ldr	r5, [pc, #16]	; (1ae60 <hal_timer_read_bsptimer+0x50>)
   1ae4e:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1ae52:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1ae56:	b904      	cbnz	r4, 1ae5a <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1ae58:	b662      	cpsie	i

    return tcntr;
}
   1ae5a:	bc30      	pop	{r4, r5}
   1ae5c:	4770      	bx	lr
   1ae5e:	bf00      	nop
   1ae60:	e000e100 	.word	0xe000e100

0001ae64 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1ae64:	b570      	push	{r4, r5, r6, lr}
   1ae66:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1ae68:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1ae6c:	b672      	cpsid	i
   1ae6e:	e013      	b.n	1ae98 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1ae70:	6928      	ldr	r0, [r5, #16]
   1ae72:	f7ff ff63 	bl	1ad3c <nrf_read_timer_cntr>
            delta = 0;
   1ae76:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1ae78:	68e3      	ldr	r3, [r4, #12]
   1ae7a:	1ac0      	subs	r0, r0, r3
   1ae7c:	4290      	cmp	r0, r2
   1ae7e:	db19      	blt.n	1aeb4 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1ae80:	6923      	ldr	r3, [r4, #16]
   1ae82:	b1a3      	cbz	r3, 1aeae <hal_timer_chk_queue+0x4a>
   1ae84:	6962      	ldr	r2, [r4, #20]
   1ae86:	615a      	str	r2, [r3, #20]
   1ae88:	6963      	ldr	r3, [r4, #20]
   1ae8a:	6922      	ldr	r2, [r4, #16]
   1ae8c:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1ae8e:	2300      	movs	r3, #0
   1ae90:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1ae92:	6863      	ldr	r3, [r4, #4]
   1ae94:	68a0      	ldr	r0, [r4, #8]
   1ae96:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1ae98:	696c      	ldr	r4, [r5, #20]
   1ae9a:	b15c      	cbz	r4, 1aeb4 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1ae9c:	78ab      	ldrb	r3, [r5, #2]
   1ae9e:	2b00      	cmp	r3, #0
   1aea0:	d0e6      	beq.n	1ae70 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1aea2:	4628      	mov	r0, r5
   1aea4:	f7ff ffb4 	bl	1ae10 <hal_timer_read_bsptimer>
            delta = -3;
   1aea8:	f06f 0202 	mvn.w	r2, #2
   1aeac:	e7e4      	b.n	1ae78 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1aeae:	6963      	ldr	r3, [r4, #20]
   1aeb0:	61ab      	str	r3, [r5, #24]
   1aeb2:	e7e9      	b.n	1ae88 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1aeb4:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1aeb6:	b133      	cbz	r3, 1aec6 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1aeb8:	68d9      	ldr	r1, [r3, #12]
   1aeba:	4628      	mov	r0, r5
   1aebc:	f7ff ff44 	bl	1ad48 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1aec0:	b906      	cbnz	r6, 1aec4 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1aec2:	b662      	cpsie	i
}
   1aec4:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1aec6:	78ab      	ldrb	r3, [r5, #2]
   1aec8:	b11b      	cbz	r3, 1aed2 <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1aeca:	6928      	ldr	r0, [r5, #16]
   1aecc:	f7ff ff9b 	bl	1ae06 <nrf_rtc_disable_ocmp>
   1aed0:	e7f6      	b.n	1aec0 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1aed2:	6928      	ldr	r0, [r5, #16]
   1aed4:	f7ff ff92 	bl	1adfc <nrf_timer_disable_ocmp>
   1aed8:	e7f2      	b.n	1aec0 <hal_timer_chk_queue+0x5c>

0001aeda <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1aeda:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1aedc:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1aede:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1aee2:	b113      	cbz	r3, 1aeea <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1aee4:	2300      	movs	r3, #0
   1aee6:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1aeea:	6883      	ldr	r3, [r0, #8]
   1aeec:	3301      	adds	r3, #1
   1aeee:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1aef0:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1aef4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1aef8:	d100      	bne.n	1aefc <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1aefa:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1aefc:	f7ff ffb2 	bl	1ae64 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1af00:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1af04:	e7f9      	b.n	1aefa <hal_timer_irq_handler+0x20>
	...

0001af08 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1af08:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1af0a:	4802      	ldr	r0, [pc, #8]	; (1af14 <nrf52_timer0_irq_handler+0xc>)
   1af0c:	f7ff ffe5 	bl	1aeda <hal_timer_irq_handler>
}
   1af10:	bd08      	pop	{r3, pc}
   1af12:	bf00      	nop
   1af14:	2000ded0 	.word	0x2000ded0

0001af18 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1af18:	2805      	cmp	r0, #5
   1af1a:	dc1c      	bgt.n	1af56 <hal_timer_init+0x3e>
   1af1c:	4b12      	ldr	r3, [pc, #72]	; (1af68 <hal_timer_init+0x50>)
   1af1e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1af22:	b1d3      	cbz	r3, 1af5a <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1af24:	781a      	ldrb	r2, [r3, #0]
   1af26:	b9d2      	cbnz	r2, 1af5e <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1af28:	b9d8      	cbnz	r0, 1af62 <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1af2a:	4a10      	ldr	r2, [pc, #64]	; (1af6c <hal_timer_init+0x54>)
   1af2c:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1af2e:	2208      	movs	r2, #8
   1af30:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1af32:	4b0f      	ldr	r3, [pc, #60]	; (1af70 <hal_timer_init+0x58>)
   1af34:	f44f 7280 	mov.w	r2, #256	; 0x100
   1af38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1af3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1af40:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1af44:	22e0      	movs	r2, #224	; 0xe0
   1af46:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1af4a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1af4e:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1af50:	4a08      	ldr	r2, [pc, #32]	; (1af74 <hal_timer_init+0x5c>)
   1af52:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1af54:	4770      	bx	lr

err:
    return rc;
   1af56:	2016      	movs	r0, #22
   1af58:	4770      	bx	lr
   1af5a:	2016      	movs	r0, #22
   1af5c:	4770      	bx	lr
   1af5e:	2016      	movs	r0, #22
   1af60:	4770      	bx	lr
   1af62:	2016      	movs	r0, #22
}
   1af64:	4770      	bx	lr
   1af66:	bf00      	nop
   1af68:	00026bb4 	.word	0x00026bb4
   1af6c:	40008000 	.word	0x40008000
   1af70:	e000e100 	.word	0xe000e100
   1af74:	0001af09 	.word	0x0001af09

0001af78 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1af78:	2805      	cmp	r0, #5
   1af7a:	dc65      	bgt.n	1b048 <hal_timer_config+0xd0>
   1af7c:	4b39      	ldr	r3, [pc, #228]	; (1b064 <hal_timer_config+0xec>)
   1af7e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1af82:	2800      	cmp	r0, #0
   1af84:	d062      	beq.n	1b04c <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1af86:	4b38      	ldr	r3, [pc, #224]	; (1b068 <hal_timer_config+0xf0>)
   1af88:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1af8c:	7803      	ldrb	r3, [r0, #0]
   1af8e:	2b00      	cmp	r3, #0
   1af90:	d15e      	bne.n	1b050 <hal_timer_config+0xd8>
   1af92:	2900      	cmp	r1, #0
   1af94:	d05e      	beq.n	1b054 <hal_timer_config+0xdc>
   1af96:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1af9a:	d85d      	bhi.n	1b058 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1af9c:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1af9e:	2a00      	cmp	r2, #0
   1afa0:	d05c      	beq.n	1b05c <hal_timer_config+0xe4>
{
   1afa2:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1afa4:	2901      	cmp	r1, #1
   1afa6:	d013      	beq.n	1afd0 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1afa8:	2301      	movs	r3, #1
   1afaa:	2b09      	cmp	r3, #9
   1afac:	d810      	bhi.n	1afd0 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1afae:	2201      	movs	r2, #1
   1afb0:	409a      	lsls	r2, r3
   1afb2:	428a      	cmp	r2, r1
   1afb4:	d202      	bcs.n	1afbc <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1afb6:	3301      	adds	r3, #1
   1afb8:	b2db      	uxtb	r3, r3
   1afba:	e7f6      	b.n	1afaa <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1afbc:	1e5c      	subs	r4, r3, #1
   1afbe:	2501      	movs	r5, #1
   1afc0:	fa05 f404 	lsl.w	r4, r5, r4
   1afc4:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1afc6:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1afc8:	428c      	cmp	r4, r1
   1afca:	d201      	bcs.n	1afd0 <hal_timer_config+0x58>
                    prescaler -= 1;
   1afcc:	3b01      	subs	r3, #1
   1afce:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1afd0:	4a25      	ldr	r2, [pc, #148]	; (1b068 <hal_timer_config+0xf0>)
   1afd2:	411a      	asrs	r2, r3
   1afd4:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1afd6:	2201      	movs	r2, #1
   1afd8:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1afda:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1afde:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1afe0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1afe4:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1afe8:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1afec:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1aff0:	d00c      	beq.n	1b00c <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1aff2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1aff6:	2100      	movs	r1, #0
   1aff8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1affc:	2101      	movs	r1, #1
   1affe:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1b000:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1b004:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1b008:	2a00      	cmp	r2, #0
   1b00a:	d0f9      	beq.n	1b000 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1b00c:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1b00e:	2101      	movs	r1, #1
   1b010:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1b012:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1b014:	2500      	movs	r5, #0
   1b016:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1b01a:	2503      	movs	r5, #3
   1b01c:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1b020:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1b024:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1b026:	7842      	ldrb	r2, [r0, #1]
   1b028:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1b02a:	2b00      	cmp	r3, #0
   1b02c:	db07      	blt.n	1b03e <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b02e:	f002 021f 	and.w	r2, r2, #31
   1b032:	095b      	lsrs	r3, r3, #5
   1b034:	fa01 f202 	lsl.w	r2, r1, r2
   1b038:	490c      	ldr	r1, [pc, #48]	; (1b06c <hal_timer_config+0xf4>)
   1b03a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1b03e:	b97c      	cbnz	r4, 1b060 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1b040:	b662      	cpsie	i

    return 0;
   1b042:	2000      	movs	r0, #0

err:
    return rc;
}
   1b044:	bc30      	pop	{r4, r5}
   1b046:	4770      	bx	lr
    return rc;
   1b048:	2016      	movs	r0, #22
   1b04a:	4770      	bx	lr
   1b04c:	2016      	movs	r0, #22
   1b04e:	4770      	bx	lr
   1b050:	2016      	movs	r0, #22
   1b052:	4770      	bx	lr
   1b054:	2016      	movs	r0, #22
   1b056:	4770      	bx	lr
   1b058:	2016      	movs	r0, #22
   1b05a:	4770      	bx	lr
   1b05c:	2016      	movs	r0, #22
}
   1b05e:	4770      	bx	lr
    return 0;
   1b060:	2000      	movs	r0, #0
   1b062:	e7ef      	b.n	1b044 <hal_timer_config+0xcc>
   1b064:	00026bb4 	.word	0x00026bb4
   1b068:	00f42400 	.word	0x00f42400
   1b06c:	e000e100 	.word	0xe000e100

0001b070 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1b070:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b072:	2805      	cmp	r0, #5
   1b074:	dc0c      	bgt.n	1b090 <hal_timer_read+0x20>
   1b076:	4b09      	ldr	r3, [pc, #36]	; (1b09c <hal_timer_read+0x2c>)
   1b078:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1b07c:	b140      	cbz	r0, 1b090 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1b07e:	7883      	ldrb	r3, [r0, #2]
   1b080:	b91b      	cbnz	r3, 1b08a <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1b082:	6900      	ldr	r0, [r0, #16]
   1b084:	f7ff fe5a 	bl	1ad3c <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1b088:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1b08a:	f7ff fec1 	bl	1ae10 <hal_timer_read_bsptimer>
   1b08e:	e7fb      	b.n	1b088 <hal_timer_read+0x18>
    assert(0);
   1b090:	2300      	movs	r3, #0
   1b092:	461a      	mov	r2, r3
   1b094:	4619      	mov	r1, r3
   1b096:	4618      	mov	r0, r3
   1b098:	f7fd fcf2 	bl	18a80 <__assert_func>
   1b09c:	00026bb4 	.word	0x00026bb4

0001b0a0 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1b0a0:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1b0a2:	2100      	movs	r1, #0
   1b0a4:	4608      	mov	r0, r1
   1b0a6:	f7ff ff37 	bl	1af18 <hal_timer_init>
    assert(rc == 0);
   1b0aa:	b920      	cbnz	r0, 1b0b6 <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1b0ac:	4808      	ldr	r0, [pc, #32]	; (1b0d0 <nrf52_periph_create_timers+0x30>)
   1b0ae:	f7fd ff11 	bl	18ed4 <os_cputime_init>
    assert(rc == 0);
   1b0b2:	b930      	cbnz	r0, 1b0c2 <nrf52_periph_create_timers+0x22>
#endif
}
   1b0b4:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1b0b6:	2300      	movs	r3, #0
   1b0b8:	461a      	mov	r2, r3
   1b0ba:	4619      	mov	r1, r3
   1b0bc:	4618      	mov	r0, r3
   1b0be:	f7fd fcdf 	bl	18a80 <__assert_func>
    assert(rc == 0);
   1b0c2:	2300      	movs	r3, #0
   1b0c4:	461a      	mov	r2, r3
   1b0c6:	4619      	mov	r1, r3
   1b0c8:	4618      	mov	r0, r3
   1b0ca:	f7fd fcd9 	bl	18a80 <__assert_func>
   1b0ce:	bf00      	nop
   1b0d0:	000f4240 	.word	0x000f4240

0001b0d4 <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1b0d4:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1b0d6:	4906      	ldr	r1, [pc, #24]	; (1b0f0 <nrf52_periph_create_i2c+0x1c>)
   1b0d8:	2001      	movs	r0, #1
   1b0da:	f7fd f82b 	bl	18134 <hal_i2c_init>
    assert(rc == 0);
   1b0de:	b900      	cbnz	r0, 1b0e2 <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1b0e0:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1b0e2:	2300      	movs	r3, #0
   1b0e4:	461a      	mov	r2, r3
   1b0e6:	4619      	mov	r1, r3
   1b0e8:	4618      	mov	r0, r3
   1b0ea:	f7fd fcc9 	bl	18a80 <__assert_func>
   1b0ee:	bf00      	nop
   1b0f0:	00026bcc 	.word	0x00026bcc

0001b0f4 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1b0f4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1b0f6:	2200      	movs	r2, #0
   1b0f8:	4905      	ldr	r1, [pc, #20]	; (1b110 <nrf52_periph_create_spi+0x1c>)
   1b0fa:	4610      	mov	r0, r2
   1b0fc:	f7fd fb4e 	bl	1879c <hal_spi_init>
    assert(rc == 0);
   1b100:	b900      	cbnz	r0, 1b104 <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1b102:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1b104:	2300      	movs	r3, #0
   1b106:	461a      	mov	r2, r3
   1b108:	4619      	mov	r1, r3
   1b10a:	4618      	mov	r0, r3
   1b10c:	f7fd fcb8 	bl	18a80 <__assert_func>
   1b110:	00026bd8 	.word	0x00026bd8

0001b114 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1b114:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1b116:	f7ff ffc3 	bl	1b0a0 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1b11a:	f7ff ffdb 	bl	1b0d4 <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1b11e:	f7ff ffe9 	bl	1b0f4 <nrf52_periph_create_spi>
}
   1b122:	bd08      	pop	{r3, pc}

0001b124 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1b124:	4770      	bx	lr
	...

0001b128 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1b128:	4b08      	ldr	r3, [pc, #32]	; (1b14c <sensor_mgr_remove+0x24>)
   1b12a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1b12c:	4282      	cmp	r2, r0
   1b12e:	d104      	bne.n	1b13a <sensor_mgr_remove+0x12>
   1b130:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1b134:	631a      	str	r2, [r3, #48]	; 0x30
   1b136:	4770      	bx	lr
   1b138:	461a      	mov	r2, r3
   1b13a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1b13e:	4283      	cmp	r3, r0
   1b140:	d1fa      	bne.n	1b138 <sensor_mgr_remove+0x10>
   1b142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1b146:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1b14a:	4770      	bx	lr
   1b14c:	2000def0 	.word	0x2000def0

0001b150 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1b150:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1b152:	6a03      	ldr	r3, [r0, #32]
   1b154:	b993      	cbnz	r3, 1b17c <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b156:	4b15      	ldr	r3, [pc, #84]	; (1b1ac <sensor_mgr_insert+0x5c>)
   1b158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1b15a:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b15c:	e002      	b.n	1b164 <sensor_mgr_insert+0x14>
            prev = cursor;
   1b15e:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1b164:	2b00      	cmp	r3, #0
   1b166:	d1fa      	bne.n	1b15e <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1b168:	b1c9      	cbz	r1, 1b19e <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1b16a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1b16e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1b172:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1b176:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b17a:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b17c:	4b0b      	ldr	r3, [pc, #44]	; (1b1ac <sensor_mgr_insert+0x5c>)
   1b17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1b180:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b182:	2b00      	cmp	r3, #0
   1b184:	d0f0      	beq.n	1b168 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1b186:	6a1a      	ldr	r2, [r3, #32]
   1b188:	2a00      	cmp	r2, #0
   1b18a:	d0ed      	beq.n	1b168 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1b18c:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1b18e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1b190:	1b12      	subs	r2, r2, r4
   1b192:	2a00      	cmp	r2, #0
   1b194:	dbe8      	blt.n	1b168 <sensor_mgr_insert+0x18>
        prev = cursor;
   1b196:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1b19c:	e7f1      	b.n	1b182 <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1b19e:	4b03      	ldr	r3, [pc, #12]	; (1b1ac <sensor_mgr_insert+0x5c>)
   1b1a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1b1a2:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1b1a6:	6318      	str	r0, [r3, #48]	; 0x30
   1b1a8:	e7e5      	b.n	1b176 <sensor_mgr_insert+0x26>
   1b1aa:	bf00      	nop
   1b1ac:	2000def0 	.word	0x2000def0

0001b1b0 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1b1b0:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1b1b2:	fab0 f080 	clz	r0, r0
   1b1b6:	0940      	lsrs	r0, r0, #5
   1b1b8:	4770      	bx	lr
	...

0001b1bc <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1b1bc:	4b01      	ldr	r3, [pc, #4]	; (1b1c4 <sensor_mgr_evq_set+0x8>)
   1b1be:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1b1c0:	4770      	bx	lr
   1b1c2:	bf00      	nop
   1b1c4:	2000def0 	.word	0x2000def0

0001b1c8 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1b1c8:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1b1cc:	e9d1 2300 	ldrd	r2, r3, [r1]
   1b1d0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1b1d4:	ea02 0b04 	and.w	fp, r2, r4
   1b1d8:	ea03 0c05 	and.w	ip, r3, r5
   1b1dc:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1b1e0:	ea0b 0200 	and.w	r2, fp, r0
   1b1e4:	ea0c 0301 	and.w	r3, ip, r1
   1b1e8:	4313      	orrs	r3, r2
}
   1b1ea:	bf14      	ite	ne
   1b1ec:	2001      	movne	r0, #1
   1b1ee:	2000      	moveq	r0, #0
   1b1f0:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1b1f4:	4770      	bx	lr

0001b1f6 <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1b1f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b1fa:	b083      	sub	sp, #12
   1b1fc:	4605      	mov	r5, r0
   1b1fe:	4689      	mov	r9, r1
   1b200:	4690      	mov	r8, r2
   1b202:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1b206:	790b      	ldrb	r3, [r1, #4]
   1b208:	2b01      	cmp	r3, #1
   1b20a:	d013      	beq.n	1b234 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1b20c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1b20e:	e000      	b.n	1b212 <sensor_read_data_func+0x1c>
   1b210:	6924      	ldr	r4, [r4, #16]
   1b212:	b17c      	cbz	r4, 1b234 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1b214:	e9d4 0100 	ldrd	r0, r1, [r4]
   1b218:	ea00 0206 	and.w	r2, r0, r6
   1b21c:	ea01 0307 	and.w	r3, r1, r7
   1b220:	4313      	orrs	r3, r2
   1b222:	d0f5      	beq.n	1b210 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1b224:	68a3      	ldr	r3, [r4, #8]
   1b226:	68e1      	ldr	r1, [r4, #12]
   1b228:	e9cd 6700 	strd	r6, r7, [sp]
   1b22c:	4642      	mov	r2, r8
   1b22e:	4628      	mov	r0, r5
   1b230:	4798      	blx	r3
   1b232:	e7ed      	b.n	1b210 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1b234:	f8d9 3000 	ldr.w	r3, [r9]
   1b238:	b14b      	cbz	r3, 1b24e <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1b23a:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1b23e:	e9cd 6700 	strd	r6, r7, [sp]
   1b242:	4642      	mov	r2, r8
   1b244:	4628      	mov	r0, r5
   1b246:	4798      	blx	r3
    }

    return (0);
}
   1b248:	b003      	add	sp, #12
   1b24a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1b24e:	2000      	movs	r0, #0
   1b250:	e7fa      	b.n	1b248 <sensor_read_data_func+0x52>
	...

0001b254 <sensor_base_ts_update_event>:
{
   1b254:	b530      	push	{r4, r5, lr}
   1b256:	b087      	sub	sp, #28
    ticks = os_time_get();
   1b258:	f7fe fe30 	bl	19ebc <os_time_get>
   1b25c:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1b25e:	a901      	add	r1, sp, #4
   1b260:	a802      	add	r0, sp, #8
   1b262:	f7fe fe65 	bl	19f30 <os_gettimeofday>
    if (rc) {
   1b266:	b138      	cbz	r0, 1b278 <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1b268:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1b26c:	4621      	mov	r1, r4
   1b26e:	4809      	ldr	r0, [pc, #36]	; (1b294 <sensor_base_ts_update_event+0x40>)
   1b270:	f7fd fdac 	bl	18dcc <os_callout_reset>
}
   1b274:	b007      	add	sp, #28
   1b276:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1b278:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1b27c:	4d06      	ldr	r5, [pc, #24]	; (1b298 <sensor_base_ts_update_event+0x44>)
   1b27e:	ab06      	add	r3, sp, #24
   1b280:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1b284:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1b288:	9b01      	ldr	r3, [sp, #4]
   1b28a:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1b28c:	f7fd fe28 	bl	18ee0 <os_cputime_get32>
   1b290:	6168      	str	r0, [r5, #20]
   1b292:	e7eb      	b.n	1b26c <sensor_base_ts_update_event+0x18>
   1b294:	2000df24 	.word	0x2000df24
   1b298:	2000df48 	.word	0x2000df48

0001b29c <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1b29c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1b2a0:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1b2a2:	f7fd fe1d 	bl	18ee0 <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1b2a6:	4a0e      	ldr	r2, [pc, #56]	; (1b2e0 <sensor_up_timestamp+0x44>)
   1b2a8:	6955      	ldr	r5, [r2, #20]
   1b2aa:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1b2ac:	6460      	str	r0, [r4, #68]	; 0x44
   1b2ae:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1b2b0:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1b2b4:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1b2b6:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1b2b8:	4b0a      	ldr	r3, [pc, #40]	; (1b2e4 <sensor_up_timestamp+0x48>)
   1b2ba:	fba3 c305 	umull	ip, r3, r3, r5
   1b2be:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1b2c0:	eb10 0b03 	adds.w	fp, r0, r3
   1b2c4:	f141 0c00 	adc.w	ip, r1, #0
   1b2c8:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1b2cc:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1b2d0:	4905      	ldr	r1, [pc, #20]	; (1b2e8 <sensor_up_timestamp+0x4c>)
   1b2d2:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1b2d6:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1b2d8:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1b2da:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1b2de:	bf00      	nop
   1b2e0:	2000df48 	.word	0x2000df48
   1b2e4:	431bde83 	.word	0x431bde83
   1b2e8:	000f4240 	.word	0x000f4240

0001b2ec <sensor_mgr_lock>:
{
   1b2ec:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1b2ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b2f2:	4804      	ldr	r0, [pc, #16]	; (1b304 <sensor_mgr_lock+0x18>)
   1b2f4:	f7fe fa5c 	bl	197b0 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1b2f8:	b108      	cbz	r0, 1b2fe <sensor_mgr_lock+0x12>
   1b2fa:	2809      	cmp	r0, #9
   1b2fc:	d000      	beq.n	1b300 <sensor_mgr_lock+0x14>
}
   1b2fe:	bd08      	pop	{r3, pc}
        return (0);
   1b300:	2000      	movs	r0, #0
   1b302:	e7fc      	b.n	1b2fe <sensor_mgr_lock+0x12>
   1b304:	2000def0 	.word	0x2000def0

0001b308 <sensor_mgr_unlock>:
{
   1b308:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1b30a:	4802      	ldr	r0, [pc, #8]	; (1b314 <sensor_mgr_unlock+0xc>)
   1b30c:	f7fe f9f4 	bl	196f8 <os_mutex_release>
}
   1b310:	bd08      	pop	{r3, pc}
   1b312:	bf00      	nop
   1b314:	2000def0 	.word	0x2000def0

0001b318 <sensor_mgr_evq_get>:
}
   1b318:	4b01      	ldr	r3, [pc, #4]	; (1b320 <sensor_mgr_evq_get+0x8>)
   1b31a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1b31c:	4770      	bx	lr
   1b31e:	bf00      	nop
   1b320:	2000def0 	.word	0x2000def0

0001b324 <sensor_mgr_init>:
{
   1b324:	b570      	push	{r4, r5, r6, lr}
   1b326:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1b328:	f7fd ff68 	bl	191fc <os_eventq_dflt_get>
   1b32c:	f7ff ff46 	bl	1b1bc <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1b330:	4b1c      	ldr	r3, [pc, #112]	; (1b3a4 <sensor_mgr_init+0x80>)
   1b332:	9300      	str	r3, [sp, #0]
   1b334:	4b1c      	ldr	r3, [pc, #112]	; (1b3a8 <sensor_mgr_init+0x84>)
   1b336:	2218      	movs	r2, #24
   1b338:	2105      	movs	r1, #5
   1b33a:	481c      	ldr	r0, [pc, #112]	; (1b3ac <sensor_mgr_init+0x88>)
   1b33c:	f7fe f8e8 	bl	19510 <os_mempool_init>
    assert(rc == OS_OK);
   1b340:	bb50      	cbnz	r0, 1b398 <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1b342:	f7ff ffe9 	bl	1b318 <sensor_mgr_evq_get>
   1b346:	4e1a      	ldr	r6, [pc, #104]	; (1b3b0 <sensor_mgr_init+0x8c>)
   1b348:	2300      	movs	r3, #0
   1b34a:	4a1a      	ldr	r2, [pc, #104]	; (1b3b4 <sensor_mgr_init+0x90>)
   1b34c:	4601      	mov	r1, r0
   1b34e:	4630      	mov	r0, r6
   1b350:	f7fd fd10 	bl	18d74 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1b354:	ad04      	add	r5, sp, #16
   1b356:	a903      	add	r1, sp, #12
   1b358:	4628      	mov	r0, r5
   1b35a:	f7fe fde9 	bl	19f30 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1b35e:	4c16      	ldr	r4, [pc, #88]	; (1b3b8 <sensor_mgr_init+0x94>)
   1b360:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1b364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1b368:	9b03      	ldr	r3, [sp, #12]
   1b36a:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1b36c:	f7fd fdb8 	bl	18ee0 <os_cputime_get32>
   1b370:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1b372:	f7ff ffd1 	bl	1b318 <sensor_mgr_evq_get>
   1b376:	4c11      	ldr	r4, [pc, #68]	; (1b3bc <sensor_mgr_init+0x98>)
   1b378:	2300      	movs	r3, #0
   1b37a:	4a11      	ldr	r2, [pc, #68]	; (1b3c0 <sensor_mgr_init+0x9c>)
   1b37c:	4601      	mov	r1, r0
   1b37e:	4620      	mov	r0, r4
   1b380:	f7fd fcf8 	bl	18d74 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1b384:	2180      	movs	r1, #128	; 0x80
   1b386:	4620      	mov	r0, r4
   1b388:	f7fd fd20 	bl	18dcc <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1b38c:	f1a6 000c 	sub.w	r0, r6, #12
   1b390:	f7fe f9a8 	bl	196e4 <os_mutex_init>
}
   1b394:	b008      	add	sp, #32
   1b396:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1b398:	2300      	movs	r3, #0
   1b39a:	461a      	mov	r2, r3
   1b39c:	4619      	mov	r1, r3
   1b39e:	4618      	mov	r0, r3
   1b3a0:	f7fd fb6e 	bl	18a80 <__assert_func>
   1b3a4:	00026bdc 	.word	0x00026bdc
   1b3a8:	2000d9ec 	.word	0x2000d9ec
   1b3ac:	2000da64 	.word	0x2000da64
   1b3b0:	2000defc 	.word	0x2000defc
   1b3b4:	0001b591 	.word	0x0001b591
   1b3b8:	2000df48 	.word	0x2000df48
   1b3bc:	2000df24 	.word	0x2000df24
   1b3c0:	0001b255 	.word	0x0001b255

0001b3c4 <sensor_pkg_init>:
{
   1b3c4:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1b3c6:	f7ff ffad 	bl	1b324 <sensor_mgr_init>
}
   1b3ca:	bd08      	pop	{r3, pc}

0001b3cc <sensor_lock>:
{
   1b3cc:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1b3ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b3d2:	3004      	adds	r0, #4
   1b3d4:	f7fe f9ec 	bl	197b0 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1b3d8:	b108      	cbz	r0, 1b3de <sensor_lock+0x12>
   1b3da:	2809      	cmp	r0, #9
   1b3dc:	d000      	beq.n	1b3e0 <sensor_lock+0x14>
}
   1b3de:	bd08      	pop	{r3, pc}
        return (0);
   1b3e0:	2000      	movs	r0, #0
   1b3e2:	e7fc      	b.n	1b3de <sensor_lock+0x12>

0001b3e4 <sensor_unlock>:
{
   1b3e4:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1b3e6:	3004      	adds	r0, #4
   1b3e8:	f7fe f986 	bl	196f8 <os_mutex_release>
}
   1b3ec:	bd08      	pop	{r3, pc}

0001b3ee <sensor_update_nextrun>:
{
   1b3ee:	b530      	push	{r4, r5, lr}
   1b3f0:	b083      	sub	sp, #12
   1b3f2:	4604      	mov	r4, r0
   1b3f4:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1b3f6:	a901      	add	r1, sp, #4
   1b3f8:	6a00      	ldr	r0, [r0, #32]
   1b3fa:	f7fe fdb5 	bl	19f68 <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1b3fe:	4620      	mov	r0, r4
   1b400:	f7ff ffe4 	bl	1b3cc <sensor_lock>
    sensor_mgr_remove(sensor);
   1b404:	4620      	mov	r0, r4
   1b406:	f7ff fe8f 	bl	1b128 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1b40a:	9b01      	ldr	r3, [sp, #4]
   1b40c:	441d      	add	r5, r3
   1b40e:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1b410:	4620      	mov	r0, r4
   1b412:	f7ff fe9d 	bl	1b150 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1b416:	4620      	mov	r0, r4
   1b418:	f7ff ffe4 	bl	1b3e4 <sensor_unlock>
}
   1b41c:	b003      	add	sp, #12
   1b41e:	bd30      	pop	{r4, r5, pc}

0001b420 <sensor_calc_nextrun_delta>:
{
   1b420:	b538      	push	{r3, r4, r5, lr}
   1b422:	4605      	mov	r5, r0
   1b424:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1b426:	f7ff ffd1 	bl	1b3cc <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1b42a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1b42c:	1b0c      	subs	r4, r1, r4
   1b42e:	d404      	bmi.n	1b43a <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1b430:	4628      	mov	r0, r5
   1b432:	f7ff ffd7 	bl	1b3e4 <sensor_unlock>
}
   1b436:	4620      	mov	r0, r4
   1b438:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1b43a:	2400      	movs	r4, #0
   1b43c:	e7f8      	b.n	1b430 <sensor_calc_nextrun_delta+0x10>
	...

0001b440 <sensor_find_min_nextrun_sensor>:
{
   1b440:	b570      	push	{r4, r5, r6, lr}
   1b442:	4606      	mov	r6, r0
   1b444:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1b446:	f7ff ff51 	bl	1b2ec <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1b44a:	4b05      	ldr	r3, [pc, #20]	; (1b460 <sensor_find_min_nextrun_sensor+0x20>)
   1b44c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1b44e:	4631      	mov	r1, r6
   1b450:	4620      	mov	r0, r4
   1b452:	f7ff ffe5 	bl	1b420 <sensor_calc_nextrun_delta>
   1b456:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1b458:	f7ff ff56 	bl	1b308 <sensor_mgr_unlock>
}
   1b45c:	4620      	mov	r0, r4
   1b45e:	bd70      	pop	{r4, r5, r6, pc}
   1b460:	2000def0 	.word	0x2000def0

0001b464 <sensor_mgr_register>:
{
   1b464:	b538      	push	{r3, r4, r5, lr}
   1b466:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1b468:	f7ff ff40 	bl	1b2ec <sensor_mgr_lock>
    if (rc != 0) {
   1b46c:	4604      	mov	r4, r0
   1b46e:	b108      	cbz	r0, 1b474 <sensor_mgr_register+0x10>
}
   1b470:	4620      	mov	r0, r4
   1b472:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1b474:	4628      	mov	r0, r5
   1b476:	f7ff ffa9 	bl	1b3cc <sensor_lock>
    if (rc != 0) {
   1b47a:	4604      	mov	r4, r0
   1b47c:	2800      	cmp	r0, #0
   1b47e:	d1f7      	bne.n	1b470 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1b480:	4628      	mov	r0, r5
   1b482:	f7ff fe65 	bl	1b150 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1b486:	4628      	mov	r0, r5
   1b488:	f7ff ffac 	bl	1b3e4 <sensor_unlock>
    sensor_mgr_unlock();
   1b48c:	f7ff ff3c 	bl	1b308 <sensor_mgr_unlock>
    return (0);
   1b490:	e7ee      	b.n	1b470 <sensor_mgr_register+0xc>

0001b492 <sensor_init>:
{
   1b492:	b538      	push	{r3, r4, r5, lr}
   1b494:	4604      	mov	r4, r0
   1b496:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1b498:	2288      	movs	r2, #136	; 0x88
   1b49a:	2100      	movs	r1, #0
   1b49c:	f7fe fef3 	bl	1a286 <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1b4a0:	1d20      	adds	r0, r4, #4
   1b4a2:	f7fe f91f 	bl	196e4 <os_mutex_init>
    if (rc != 0) {
   1b4a6:	4603      	mov	r3, r0
   1b4a8:	b900      	cbnz	r0, 1b4ac <sensor_init+0x1a>
    sensor->s_dev = dev;
   1b4aa:	6025      	str	r5, [r4, #0]
}
   1b4ac:	4618      	mov	r0, r3
   1b4ae:	bd38      	pop	{r3, r4, r5, pc}

0001b4b0 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1b4b0:	b530      	push	{r4, r5, lr}
   1b4b2:	b089      	sub	sp, #36	; 0x24
   1b4b4:	4604      	mov	r4, r0
   1b4b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1b4ba:	f7ff ff87 	bl	1b3cc <sensor_lock>
    if (rc) {
   1b4be:	4605      	mov	r5, r0
   1b4c0:	b9f8      	cbnz	r0, 1b502 <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1b4c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b4c4:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1b4c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b4c8:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1b4ca:	a904      	add	r1, sp, #16
   1b4cc:	4620      	mov	r0, r4
   1b4ce:	f7ff fe7b 	bl	1b1c8 <sensor_mgr_match_bytype>
   1b4d2:	b1e0      	cbz	r0, 1b50e <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1b4d4:	4620      	mov	r0, r4
   1b4d6:	f7ff fee1 	bl	1b29c <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1b4da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b4dc:	6819      	ldr	r1, [r3, #0]
   1b4de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b4e0:	9302      	str	r3, [sp, #8]
   1b4e2:	ab06      	add	r3, sp, #24
   1b4e4:	9301      	str	r3, [sp, #4]
   1b4e6:	4b0b      	ldr	r3, [pc, #44]	; (1b514 <sensor_read+0x64>)
   1b4e8:	9300      	str	r3, [sp, #0]
   1b4ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b4ee:	4620      	mov	r0, r4
   1b4f0:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1b4f2:	4605      	mov	r5, r0
   1b4f4:	b128      	cbz	r0, 1b502 <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1b4f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1b4f8:	b11b      	cbz	r3, 1b502 <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1b4fa:	4602      	mov	r2, r0
   1b4fc:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1b4fe:	4620      	mov	r0, r4
   1b500:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1b502:	4620      	mov	r0, r4
   1b504:	f7ff ff6e 	bl	1b3e4 <sensor_unlock>
    return (rc);
}
   1b508:	4628      	mov	r0, r5
   1b50a:	b009      	add	sp, #36	; 0x24
   1b50c:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1b50e:	f06f 0503 	mvn.w	r5, #3
   1b512:	e7f6      	b.n	1b502 <sensor_read+0x52>
   1b514:	0001b1f7 	.word	0x0001b1f7

0001b518 <sensor_mgr_poll_bytype>:
{
   1b518:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b51a:	b085      	sub	sp, #20
   1b51c:	4616      	mov	r6, r2
   1b51e:	461f      	mov	r7, r3
   1b520:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1b522:	b10c      	cbz	r4, 1b528 <sensor_mgr_poll_bytype+0x10>
   1b524:	8aa3      	ldrh	r3, [r4, #20]
   1b526:	b9cb      	cbnz	r3, 1b55c <sensor_mgr_poll_bytype+0x44>
   1b528:	4632      	mov	r2, r6
   1b52a:	463b      	mov	r3, r7
   1b52c:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1b52e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b532:	9102      	str	r1, [sp, #8]
   1b534:	2100      	movs	r1, #0
   1b536:	9101      	str	r1, [sp, #4]
   1b538:	9100      	str	r1, [sp, #0]
   1b53a:	f7ff ffb9 	bl	1b4b0 <sensor_read>
        sensor_lock(sensor);
   1b53e:	4628      	mov	r0, r5
   1b540:	f7ff ff44 	bl	1b3cc <sensor_lock>
        if (stt) {
   1b544:	b12c      	cbz	r4, 1b552 <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1b546:	8aa3      	ldrh	r3, [r4, #20]
   1b548:	b91b      	cbnz	r3, 1b552 <sensor_mgr_poll_bytype+0x3a>
   1b54a:	8a63      	ldrh	r3, [r4, #18]
   1b54c:	b10b      	cbz	r3, 1b552 <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1b54e:	3b01      	subs	r3, #1
   1b550:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1b552:	4628      	mov	r0, r5
   1b554:	f7ff ff46 	bl	1b3e4 <sensor_unlock>
}
   1b558:	b005      	add	sp, #20
   1b55a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1b55c:	3b01      	subs	r3, #1
   1b55e:	82a3      	strh	r3, [r4, #20]
}
   1b560:	e7fa      	b.n	1b558 <sensor_mgr_poll_bytype+0x40>

0001b562 <sensor_poll_per_type_trait>:
{
   1b562:	b570      	push	{r4, r5, r6, lr}
   1b564:	b082      	sub	sp, #8
   1b566:	4605      	mov	r5, r0
   1b568:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1b56a:	f7ff ff2f 	bl	1b3cc <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1b56e:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1b570:	e007      	b.n	1b582 <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1b572:	e9d4 2300 	ldrd	r2, r3, [r4]
   1b576:	9601      	str	r6, [sp, #4]
   1b578:	9400      	str	r4, [sp, #0]
   1b57a:	4628      	mov	r0, r5
   1b57c:	f7ff ffcc 	bl	1b518 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1b580:	6a24      	ldr	r4, [r4, #32]
   1b582:	2c00      	cmp	r4, #0
   1b584:	d1f5      	bne.n	1b572 <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1b586:	4628      	mov	r0, r5
   1b588:	f7ff ff2c 	bl	1b3e4 <sensor_unlock>
}
   1b58c:	b002      	add	sp, #8
   1b58e:	bd70      	pop	{r4, r5, r6, pc}

0001b590 <sensor_mgr_wakeup_event>:
{
   1b590:	b570      	push	{r4, r5, r6, lr}
   1b592:	b084      	sub	sp, #16
    now = os_time_get();
   1b594:	f7fe fc92 	bl	19ebc <os_time_get>
   1b598:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1b59a:	f7ff fea7 	bl	1b2ec <sensor_mgr_lock>
   1b59e:	e012      	b.n	1b5c6 <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1b5a0:	4620      	mov	r0, r4
   1b5a2:	f7ff ff1f 	bl	1b3e4 <sensor_unlock>
            sensor_mgr_unlock();
   1b5a6:	f7ff feaf 	bl	1b308 <sensor_mgr_unlock>
}
   1b5aa:	b004      	add	sp, #16
   1b5ac:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1b5ae:	4632      	mov	r2, r6
   1b5b0:	4629      	mov	r1, r5
   1b5b2:	4620      	mov	r0, r4
   1b5b4:	f7ff ffd5 	bl	1b562 <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1b5b8:	4629      	mov	r1, r5
   1b5ba:	4620      	mov	r0, r4
   1b5bc:	f7ff ff17 	bl	1b3ee <sensor_update_nextrun>
        sensor_unlock(cursor);
   1b5c0:	4620      	mov	r0, r4
   1b5c2:	f7ff ff0f 	bl	1b3e4 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1b5c6:	a903      	add	r1, sp, #12
   1b5c8:	4628      	mov	r0, r5
   1b5ca:	f7ff ff39 	bl	1b440 <sensor_find_min_nextrun_sensor>
   1b5ce:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1b5d0:	f7ff fefc 	bl	1b3cc <sensor_lock>
        if (!cursor->s_poll_rate) {
   1b5d4:	6a23      	ldr	r3, [r4, #32]
   1b5d6:	2b00      	cmp	r3, #0
   1b5d8:	d0e2      	beq.n	1b5a0 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1b5da:	9e03      	ldr	r6, [sp, #12]
   1b5dc:	b96e      	cbnz	r6, 1b5fa <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1b5de:	4620      	mov	r0, r4
   1b5e0:	f7ff fde6 	bl	1b1b0 <sensor_type_traits_empty>
   1b5e4:	2800      	cmp	r0, #0
   1b5e6:	d0e2      	beq.n	1b5ae <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1b5e8:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1b5ec:	9501      	str	r5, [sp, #4]
   1b5ee:	2100      	movs	r1, #0
   1b5f0:	9100      	str	r1, [sp, #0]
   1b5f2:	4620      	mov	r0, r4
   1b5f4:	f7ff ff90 	bl	1b518 <sensor_mgr_poll_bytype>
   1b5f8:	e7de      	b.n	1b5b8 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1b5fa:	f7ff fe85 	bl	1b308 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1b5fe:	9903      	ldr	r1, [sp, #12]
   1b600:	4801      	ldr	r0, [pc, #4]	; (1b608 <sensor_mgr_wakeup_event+0x78>)
   1b602:	f7fd fbe3 	bl	18dcc <os_callout_reset>
   1b606:	e7d0      	b.n	1b5aa <sensor_mgr_wakeup_event+0x1a>
   1b608:	2000defc 	.word	0x2000defc

0001b60c <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1b60c:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1b60e:	2101      	movs	r1, #1
   1b610:	4806      	ldr	r0, [pc, #24]	; (1b62c <init_sensor_coap+0x20>)
   1b612:	f7fe faf1 	bl	19bf8 <os_sem_init>
    assert(rc == OS_OK);
   1b616:	b918      	cbnz	r0, 1b620 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1b618:	4b05      	ldr	r3, [pc, #20]	; (1b630 <init_sensor_coap+0x24>)
   1b61a:	2201      	movs	r2, #1
   1b61c:	701a      	strb	r2, [r3, #0]
}
   1b61e:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1b620:	2300      	movs	r3, #0
   1b622:	461a      	mov	r2, r3
   1b624:	4619      	mov	r1, r3
   1b626:	4618      	mov	r0, r3
   1b628:	f7fd fa2a 	bl	18a80 <__assert_func>
   1b62c:	2000da80 	.word	0x2000da80
   1b630:	2000da88 	.word	0x2000da88

0001b634 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1b634:	4b04      	ldr	r3, [pc, #16]	; (1b648 <is_sensor_node+0x14>)
   1b636:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b63a:	4313      	orrs	r3, r2
   1b63c:	d101      	bne.n	1b642 <is_sensor_node+0xe>
    return false;
   1b63e:	2000      	movs	r0, #0
}
   1b640:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1b642:	2001      	movs	r0, #1
   1b644:	4770      	bx	lr
   1b646:	bf00      	nop
   1b648:	2000daa0 	.word	0x2000daa0

0001b64c <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1b64c:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1b64e:	4b16      	ldr	r3, [pc, #88]	; (1b6a8 <get_hardware_id+0x5c>)
   1b650:	681b      	ldr	r3, [r3, #0]
   1b652:	b10b      	cbz	r3, 1b658 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1b654:	4815      	ldr	r0, [pc, #84]	; (1b6ac <get_hardware_id+0x60>)
   1b656:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1b658:	f000 fcee 	bl	1c038 <hal_bsp_hw_id_len>
   1b65c:	4b12      	ldr	r3, [pc, #72]	; (1b6a8 <get_hardware_id+0x5c>)
   1b65e:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1b660:	280b      	cmp	r0, #11
   1b662:	d914      	bls.n	1b68e <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1b664:	210c      	movs	r1, #12
   1b666:	4811      	ldr	r0, [pc, #68]	; (1b6ac <get_hardware_id+0x60>)
   1b668:	f000 fce8 	bl	1c03c <hal_bsp_hw_id>
   1b66c:	4b0e      	ldr	r3, [pc, #56]	; (1b6a8 <get_hardware_id+0x5c>)
   1b66e:	6018      	str	r0, [r3, #0]
   1b670:	2800      	cmp	r0, #0
   1b672:	dd12      	ble.n	1b69a <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1b674:	490e      	ldr	r1, [pc, #56]	; (1b6b0 <get_hardware_id+0x64>)
   1b676:	480f      	ldr	r0, [pc, #60]	; (1b6b4 <get_hardware_id+0x68>)
   1b678:	f7fc fb3a 	bl	17cf0 <console_printf>
   1b67c:	4b0a      	ldr	r3, [pc, #40]	; (1b6a8 <get_hardware_id+0x5c>)
   1b67e:	6819      	ldr	r1, [r3, #0]
   1b680:	480a      	ldr	r0, [pc, #40]	; (1b6ac <get_hardware_id+0x60>)
   1b682:	f7fc fac5 	bl	17c10 <console_dump>
   1b686:	480c      	ldr	r0, [pc, #48]	; (1b6b8 <get_hardware_id+0x6c>)
   1b688:	f7fc fb32 	bl	17cf0 <console_printf>
   1b68c:	e7e2      	b.n	1b654 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1b68e:	2300      	movs	r3, #0
   1b690:	461a      	mov	r2, r3
   1b692:	4619      	mov	r1, r3
   1b694:	4618      	mov	r0, r3
   1b696:	f7fd f9f3 	bl	18a80 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1b69a:	2300      	movs	r3, #0
   1b69c:	461a      	mov	r2, r3
   1b69e:	4619      	mov	r1, r3
   1b6a0:	4618      	mov	r0, r3
   1b6a2:	f7fd f9ed 	bl	18a80 <__assert_func>
   1b6a6:	bf00      	nop
   1b6a8:	2000da98 	.word	0x2000da98
   1b6ac:	2000da8c 	.word	0x2000da8c
   1b6b0:	00026c80 	.word	0x00026c80
   1b6b4:	00026c38 	.word	0x00026c38
   1b6b8:	00026d98 	.word	0x00026d98

0001b6bc <is_collector_node>:
bool is_collector_node(void) {
   1b6bc:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1b6be:	f7ff ffc5 	bl	1b64c <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1b6c2:	220c      	movs	r2, #12
   1b6c4:	4903      	ldr	r1, [pc, #12]	; (1b6d4 <is_collector_node+0x18>)
   1b6c6:	f7fe fdad 	bl	1a224 <memcmp>
   1b6ca:	b108      	cbz	r0, 1b6d0 <is_collector_node+0x14>
    return false; 
   1b6cc:	2000      	movs	r0, #0
}
   1b6ce:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1b6d0:	2001      	movs	r0, #1
   1b6d2:	e7fc      	b.n	1b6ce <is_collector_node+0x12>
   1b6d4:	00026bf0 	.word	0x00026bf0

0001b6d8 <is_standalone_node>:
bool is_standalone_node(void) {
   1b6d8:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1b6da:	f7ff ffef 	bl	1b6bc <is_collector_node>
   1b6de:	b928      	cbnz	r0, 1b6ec <is_standalone_node+0x14>
   1b6e0:	4604      	mov	r4, r0
   1b6e2:	f7ff ffa7 	bl	1b634 <is_sensor_node>
   1b6e6:	b910      	cbnz	r0, 1b6ee <is_standalone_node+0x16>
   1b6e8:	2401      	movs	r4, #1
   1b6ea:	e000      	b.n	1b6ee <is_standalone_node+0x16>
    return false;
   1b6ec:	2400      	movs	r4, #0
}
   1b6ee:	4620      	mov	r0, r4
   1b6f0:	bd10      	pop	{r4, pc}
	...

0001b6f4 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1b6f4:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1b6f6:	2400      	movs	r4, #0
   1b6f8:	2c04      	cmp	r4, #4
   1b6fa:	dc15      	bgt.n	1b728 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1b6fc:	4b23      	ldr	r3, [pc, #140]	; (1b78c <sensor_network_init+0x98>)
   1b6fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1b702:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b706:	4922      	ldr	r1, [pc, #136]	; (1b790 <sensor_network_init+0x9c>)
   1b708:	4822      	ldr	r0, [pc, #136]	; (1b794 <sensor_network_init+0xa0>)
   1b70a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1b70e:	f000 fcaf 	bl	1c070 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1b712:	3001      	adds	r0, #1
   1b714:	280b      	cmp	r0, #11
   1b716:	dc01      	bgt.n	1b71c <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1b718:	3401      	adds	r4, #1
   1b71a:	e7ed      	b.n	1b6f8 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1b71c:	2300      	movs	r3, #0
   1b71e:	461a      	mov	r2, r3
   1b720:	4619      	mov	r1, r3
   1b722:	4618      	mov	r0, r3
   1b724:	f7fd f9ac 	bl	18a80 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1b728:	f7ff ff90 	bl	1b64c <get_hardware_id>
   1b72c:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1b72e:	2400      	movs	r4, #0
   1b730:	2c04      	cmp	r4, #4
   1b732:	dc19      	bgt.n	1b768 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1b734:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b738:	0093      	lsls	r3, r2, #2
   1b73a:	220c      	movs	r2, #12
   1b73c:	4916      	ldr	r1, [pc, #88]	; (1b798 <sensor_network_init+0xa4>)
   1b73e:	4419      	add	r1, r3
   1b740:	4628      	mov	r0, r5
   1b742:	f7fe fd6f 	bl	1a224 <memcmp>
   1b746:	b108      	cbz	r0, 1b74c <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1b748:	3401      	adds	r4, #1
   1b74a:	e7f1      	b.n	1b730 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1b74c:	4b0f      	ldr	r3, [pc, #60]	; (1b78c <sensor_network_init+0x98>)
   1b74e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1b752:	e9d3 0100 	ldrd	r0, r1, [r3]
   1b756:	4b11      	ldr	r3, [pc, #68]	; (1b79c <sensor_network_init+0xa8>)
   1b758:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1b75c:	1c63      	adds	r3, r4, #1
   1b75e:	4a10      	ldr	r2, [pc, #64]	; (1b7a0 <sensor_network_init+0xac>)
   1b760:	4910      	ldr	r1, [pc, #64]	; (1b7a4 <sensor_network_init+0xb0>)
   1b762:	4811      	ldr	r0, [pc, #68]	; (1b7a8 <sensor_network_init+0xb4>)
   1b764:	f7fc fac4 	bl	17cf0 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1b768:	f7ff ffa8 	bl	1b6bc <is_collector_node>
   1b76c:	b940      	cbnz	r0, 1b780 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1b76e:	f7ff ffb3 	bl	1b6d8 <is_standalone_node>
   1b772:	b150      	cbz	r0, 1b78a <sensor_network_init+0x96>
   1b774:	4a0a      	ldr	r2, [pc, #40]	; (1b7a0 <sensor_network_init+0xac>)
   1b776:	490b      	ldr	r1, [pc, #44]	; (1b7a4 <sensor_network_init+0xb0>)
   1b778:	480c      	ldr	r0, [pc, #48]	; (1b7ac <sensor_network_init+0xb8>)
   1b77a:	f7fc fab9 	bl	17cf0 <console_printf>
}
   1b77e:	e004      	b.n	1b78a <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1b780:	4a07      	ldr	r2, [pc, #28]	; (1b7a0 <sensor_network_init+0xac>)
   1b782:	4908      	ldr	r1, [pc, #32]	; (1b7a4 <sensor_network_init+0xb0>)
   1b784:	480a      	ldr	r0, [pc, #40]	; (1b7b0 <sensor_network_init+0xbc>)
   1b786:	f7fc fab3 	bl	17cf0 <console_printf>
}
   1b78a:	bd38      	pop	{r3, r4, r5, pc}
   1b78c:	00026c98 	.word	0x00026c98
   1b790:	00026c40 	.word	0x00026c40
   1b794:	20000130 	.word	0x20000130
   1b798:	00026bfc 	.word	0x00026bfc
   1b79c:	2000daa0 	.word	0x2000daa0
   1b7a0:	00026c48 	.word	0x00026c48
   1b7a4:	00026c80 	.word	0x00026c80
   1b7a8:	00026c50 	.word	0x00026c50
   1b7ac:	00026c70 	.word	0x00026c70
   1b7b0:	00026c60 	.word	0x00026c60

0001b7b4 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1b7b4:	b530      	push	{r4, r5, lr}
   1b7b6:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1b7b8:	2200      	movs	r2, #0
   1b7ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b7be:	4810      	ldr	r0, [pc, #64]	; (1b800 <config_device+0x4c>)
   1b7c0:	f7fd fc2c 	bl	1901c <os_dev_open>
    assert(dev != NULL);
   1b7c4:	b178      	cbz	r0, 1b7e6 <config_device+0x32>
   1b7c6:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1b7c8:	4668      	mov	r0, sp
   1b7ca:	f000 f86c 	bl	1b8a6 <temp_stub_default_cfg>
    assert(rc == 0);
   1b7ce:	b980      	cbnz	r0, 1b7f2 <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1b7d0:	4669      	mov	r1, sp
   1b7d2:	4620      	mov	r0, r4
   1b7d4:	f000 f900 	bl	1b9d8 <temp_stub_config>
   1b7d8:	4605      	mov	r5, r0
    os_dev_close(dev);
   1b7da:	4620      	mov	r0, r4
   1b7dc:	f7fd fc40 	bl	19060 <os_dev_close>
    return rc;
}
   1b7e0:	4628      	mov	r0, r5
   1b7e2:	b003      	add	sp, #12
   1b7e4:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1b7e6:	2300      	movs	r3, #0
   1b7e8:	461a      	mov	r2, r3
   1b7ea:	4619      	mov	r1, r3
   1b7ec:	4618      	mov	r0, r3
   1b7ee:	f7fd f947 	bl	18a80 <__assert_func>
    assert(rc == 0);
   1b7f2:	2300      	movs	r3, #0
   1b7f4:	461a      	mov	r2, r3
   1b7f6:	4619      	mov	r1, r3
   1b7f8:	4618      	mov	r0, r3
   1b7fa:	f7fd f941 	bl	18a80 <__assert_func>
   1b7fe:	bf00      	nop
   1b800:	00026cc0 	.word	0x00026cc0

0001b804 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1b804:	b510      	push	{r4, lr}
   1b806:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1b808:	4c10      	ldr	r4, [pc, #64]	; (1b84c <temp_stub_create+0x48>)
   1b80a:	4621      	mov	r1, r4
   1b80c:	4810      	ldr	r0, [pc, #64]	; (1b850 <temp_stub_create+0x4c>)
   1b80e:	f7fc fa6f 	bl	17cf0 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1b812:	4b10      	ldr	r3, [pc, #64]	; (1b854 <temp_stub_create+0x50>)
   1b814:	9301      	str	r3, [sp, #4]
   1b816:	4b10      	ldr	r3, [pc, #64]	; (1b858 <temp_stub_create+0x54>)
   1b818:	9300      	str	r3, [sp, #0]
   1b81a:	2300      	movs	r3, #0
   1b81c:	2201      	movs	r2, #1
   1b81e:	4621      	mov	r1, r4
   1b820:	480e      	ldr	r0, [pc, #56]	; (1b85c <temp_stub_create+0x58>)
   1b822:	f7fd fbb5 	bl	18f90 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1b826:	b920      	cbnz	r0, 1b832 <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1b828:	f7ff ffc4 	bl	1b7b4 <config_device>
    assert(rc == 0);
   1b82c:	b938      	cbnz	r0, 1b83e <temp_stub_create+0x3a>
}
   1b82e:	b002      	add	sp, #8
   1b830:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1b832:	2300      	movs	r3, #0
   1b834:	461a      	mov	r2, r3
   1b836:	4619      	mov	r1, r3
   1b838:	4618      	mov	r0, r3
   1b83a:	f7fd f921 	bl	18a80 <__assert_func>
    assert(rc == 0);
   1b83e:	2300      	movs	r3, #0
   1b840:	461a      	mov	r2, r3
   1b842:	4619      	mov	r1, r3
   1b844:	4618      	mov	r0, r3
   1b846:	f7fd f91b 	bl	18a80 <__assert_func>
   1b84a:	bf00      	nop
   1b84c:	00026cc0 	.word	0x00026cc0
   1b850:	00026ccc 	.word	0x00026ccc
   1b854:	2000dae0 	.word	0x2000dae0
   1b858:	0001b8b5 	.word	0x0001b8b5
   1b85c:	2000daf8 	.word	0x2000daf8

0001b860 <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1b860:	2000      	movs	r0, #0
   1b862:	4770      	bx	lr

0001b864 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1b864:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1b868:	2100      	movs	r1, #0
   1b86a:	ea50 0301 	orrs.w	r3, r0, r1
   1b86e:	d004      	beq.n	1b87a <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1b870:	9b00      	ldr	r3, [sp, #0]
   1b872:	2201      	movs	r2, #1
   1b874:	701a      	strb	r2, [r3, #0]
    return (0);
   1b876:	2000      	movs	r0, #0
   1b878:	4770      	bx	lr
err:
    return (rc);
   1b87a:	f06f 0001 	mvn.w	r0, #1
}
   1b87e:	4770      	bx	lr

0001b880 <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1b880:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1b882:	b120      	cbz	r0, 1b88e <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1b884:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1b888:	d007      	beq.n	1b89a <temp_stub_open+0x1a>
}
   1b88a:	2000      	movs	r0, #0
   1b88c:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1b88e:	2300      	movs	r3, #0
   1b890:	461a      	mov	r2, r3
   1b892:	4619      	mov	r1, r3
   1b894:	4618      	mov	r0, r3
   1b896:	f7fd f8f3 	bl	18a80 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1b89a:	2300      	movs	r3, #0
   1b89c:	461a      	mov	r2, r3
   1b89e:	4619      	mov	r1, r3
   1b8a0:	4618      	mov	r0, r3
   1b8a2:	f7fd f8ed 	bl	18a80 <__assert_func>

0001b8a6 <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1b8a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b8aa:	2300      	movs	r3, #0
   1b8ac:	e9c0 2300 	strd	r2, r3, [r0]
}
   1b8b0:	2000      	movs	r0, #0
   1b8b2:	4770      	bx	lr

0001b8b4 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1b8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1b8b6:	b379      	cbz	r1, 1b918 <temp_stub_init+0x64>
   1b8b8:	460d      	mov	r5, r1
   1b8ba:	b380      	cbz	r0, 1b91e <temp_stub_init+0x6a>
   1b8bc:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1b8be:	30b0      	adds	r0, #176	; 0xb0
   1b8c0:	f7ff fff1 	bl	1b8a6 <temp_stub_default_cfg>
    if (rc) { goto err; }
   1b8c4:	4603      	mov	r3, r0
   1b8c6:	b108      	cbz	r0, 1b8cc <temp_stub_init+0x18>
}
   1b8c8:	4618      	mov	r0, r3
   1b8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1b8cc:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1b8d0:	4621      	mov	r1, r4
   1b8d2:	4630      	mov	r0, r6
   1b8d4:	f7ff fddd 	bl	1b492 <sensor_init>
    if (rc != 0) { goto err; }
   1b8d8:	4603      	mov	r3, r0
   1b8da:	2800      	cmp	r0, #0
   1b8dc:	d1f4      	bne.n	1b8c8 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1b8de:	4b11      	ldr	r3, [pc, #68]	; (1b924 <temp_stub_init+0x70>)
   1b8e0:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1b8e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1b8e6:	2300      	movs	r3, #0
   1b8e8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1b8ec:	682a      	ldr	r2, [r5, #0]
   1b8ee:	686f      	ldr	r7, [r5, #4]
   1b8f0:	68a8      	ldr	r0, [r5, #8]
   1b8f2:	68e9      	ldr	r1, [r5, #12]
   1b8f4:	6722      	str	r2, [r4, #112]	; 0x70
   1b8f6:	6767      	str	r7, [r4, #116]	; 0x74
   1b8f8:	67a0      	str	r0, [r4, #120]	; 0x78
   1b8fa:	67e1      	str	r1, [r4, #124]	; 0x7c
   1b8fc:	692a      	ldr	r2, [r5, #16]
   1b8fe:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1b902:	4630      	mov	r0, r6
   1b904:	f7ff fdae 	bl	1b464 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1b908:	4603      	mov	r3, r0
   1b90a:	2800      	cmp	r0, #0
   1b90c:	d1dc      	bne.n	1b8c8 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1b90e:	4a06      	ldr	r2, [pc, #24]	; (1b928 <temp_stub_init+0x74>)
   1b910:	6022      	str	r2, [r4, #0]
   1b912:	4a06      	ldr	r2, [pc, #24]	; (1b92c <temp_stub_init+0x78>)
   1b914:	60e2      	str	r2, [r4, #12]
    return (0);
   1b916:	e7d7      	b.n	1b8c8 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1b918:	f06f 0308 	mvn.w	r3, #8
   1b91c:	e7d4      	b.n	1b8c8 <temp_stub_init+0x14>
   1b91e:	f06f 0308 	mvn.w	r3, #8
   1b922:	e7d1      	b.n	1b8c8 <temp_stub_init+0x14>
   1b924:	00026cdc 	.word	0x00026cdc
   1b928:	0001b881 	.word	0x0001b881
   1b92c:	0001b861 	.word	0x0001b861

0001b930 <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1b930:	b538      	push	{r3, r4, r5, lr}
   1b932:	460d      	mov	r5, r1
   1b934:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1b936:	4808      	ldr	r0, [pc, #32]	; (1b958 <temp_stub_get_raw_temperature+0x28>)
   1b938:	f7fc f9da 	bl	17cf0 <console_printf>
    assert(temp_sum);
   1b93c:	b134      	cbz	r4, 1b94c <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1b93e:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1b942:	fb01 f105 	mul.w	r1, r1, r5
   1b946:	6021      	str	r1, [r4, #0]
}
   1b948:	2000      	movs	r0, #0
   1b94a:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1b94c:	2300      	movs	r3, #0
   1b94e:	461a      	mov	r2, r3
   1b950:	4619      	mov	r1, r3
   1b952:	4618      	mov	r0, r3
   1b954:	f7fd f894 	bl	18a80 <__assert_func>
   1b958:	00026d04 	.word	0x00026d04

0001b95c <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1b95c:	b530      	push	{r4, r5, lr}
   1b95e:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1b960:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1b964:	2500      	movs	r5, #0
   1b966:	ea54 0305 	orrs.w	r3, r4, r5
   1b96a:	d032      	beq.n	1b9d2 <temp_stub_sensor_read+0x76>
   1b96c:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1b96e:	6805      	ldr	r5, [r0, #0]
   1b970:	b165      	cbz	r5, 1b98c <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1b972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b976:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1b978:	2200      	movs	r2, #0
   1b97a:	4611      	mov	r1, r2
   1b97c:	4628      	mov	r0, r5
   1b97e:	f7ff ff7f 	bl	1b880 <temp_stub_open>
        if (rc) { goto err; }
   1b982:	4603      	mov	r3, r0
   1b984:	b140      	cbz	r0, 1b998 <temp_stub_sensor_read+0x3c>
}
   1b986:	4618      	mov	r0, r3
   1b988:	b007      	add	sp, #28
   1b98a:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1b98c:	2300      	movs	r3, #0
   1b98e:	461a      	mov	r2, r3
   1b990:	4619      	mov	r1, r3
   1b992:	4618      	mov	r0, r3
   1b994:	f7fd f874 	bl	18a80 <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1b998:	2300      	movs	r3, #0
   1b99a:	aa03      	add	r2, sp, #12
   1b99c:	2101      	movs	r1, #1
   1b99e:	4628      	mov	r0, r5
   1b9a0:	f7ff ffc6 	bl	1b930 <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1b9a4:	4603      	mov	r3, r0
   1b9a6:	2800      	cmp	r0, #0
   1b9a8:	d1ed      	bne.n	1b986 <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1b9aa:	9a03      	ldr	r2, [sp, #12]
   1b9ac:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1b9ae:	2201      	movs	r2, #1
   1b9b0:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1b9b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b9b6:	2a00      	cmp	r2, #0
   1b9b8:	d0e5      	beq.n	1b986 <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1b9ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1b9be:	2300      	movs	r3, #0
   1b9c0:	e9cd 2300 	strd	r2, r3, [sp]
   1b9c4:	aa04      	add	r2, sp, #16
   1b9c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1b9c8:	4620      	mov	r0, r4
   1b9ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b9cc:	4798      	blx	r3
   1b9ce:	4603      	mov	r3, r0
   1b9d0:	e7d9      	b.n	1b986 <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1b9d2:	f06f 0301 	mvn.w	r3, #1
   1b9d6:	e7d6      	b.n	1b986 <temp_stub_sensor_read+0x2a>

0001b9d8 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1b9d8:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1b9da:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1b9de:	d009      	beq.n	1b9f4 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1b9e0:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1b9e4:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1b9e8:	e9d1 2300 	ldrd	r2, r3, [r1]
   1b9ec:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1b9f0:	2000      	movs	r0, #0
   1b9f2:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1b9f4:	2300      	movs	r3, #0
   1b9f6:	461a      	mov	r2, r3
   1b9f8:	4619      	mov	r1, r3
   1b9fa:	4618      	mov	r0, r3
   1b9fc:	f7fd f840 	bl	18a80 <__assert_func>

0001ba00 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1ba00:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1ba02:	e002      	b.n	1ba0a <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1ba04:	4618      	mov	r0, r3
   1ba06:	f000 f85b 	bl	1bac0 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1ba0a:	4808      	ldr	r0, [pc, #32]	; (1ba2c <oc_buffer_tx+0x2c>)
   1ba0c:	f7fd fc03 	bl	19216 <os_mqueue_get>
   1ba10:	4603      	mov	r3, r0
   1ba12:	b148      	cbz	r0, 1ba28 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1ba14:	2200      	movs	r2, #0
   1ba16:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1ba18:	7e1a      	ldrb	r2, [r3, #24]
   1ba1a:	f012 0f08 	tst.w	r2, #8
   1ba1e:	d0f1      	beq.n	1ba04 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1ba20:	4618      	mov	r0, r3
   1ba22:	f000 f85d 	bl	1bae0 <oc_send_multicast_message>
   1ba26:	e7f0      	b.n	1ba0a <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1ba28:	bd08      	pop	{r3, pc}
   1ba2a:	bf00      	nop
   1ba2c:	2000dbd0 	.word	0x2000dbd0

0001ba30 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1ba30:	b500      	push	{lr}
   1ba32:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1ba34:	4808      	ldr	r0, [pc, #32]	; (1ba58 <oc_buffer_rx+0x28>)
   1ba36:	f7fd fbee 	bl	19216 <os_mqueue_get>
   1ba3a:	9001      	str	r0, [sp, #4]
   1ba3c:	b140      	cbz	r0, 1ba50 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1ba3e:	a801      	add	r0, sp, #4
   1ba40:	f000 faa2 	bl	1bf88 <__wrap_coap_receive>
#endif
        if (m) {
   1ba44:	9801      	ldr	r0, [sp, #4]
   1ba46:	2800      	cmp	r0, #0
   1ba48:	d0f4      	beq.n	1ba34 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1ba4a:	f7fd fc59 	bl	19300 <os_mbuf_free_chain>
   1ba4e:	e7f1      	b.n	1ba34 <oc_buffer_rx+0x4>
        }
    }
}
   1ba50:	b003      	add	sp, #12
   1ba52:	f85d fb04 	ldr.w	pc, [sp], #4
   1ba56:	bf00      	nop
   1ba58:	2000dbb8 	.word	0x2000dbb8

0001ba5c <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1ba5c:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1ba5e:	2200      	movs	r2, #0
   1ba60:	4904      	ldr	r1, [pc, #16]	; (1ba74 <oc_buffer_init+0x18>)
   1ba62:	4805      	ldr	r0, [pc, #20]	; (1ba78 <oc_buffer_init+0x1c>)
   1ba64:	f7fd fbce 	bl	19204 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1ba68:	2200      	movs	r2, #0
   1ba6a:	4904      	ldr	r1, [pc, #16]	; (1ba7c <oc_buffer_init+0x20>)
   1ba6c:	4804      	ldr	r0, [pc, #16]	; (1ba80 <oc_buffer_init+0x24>)
   1ba6e:	f7fd fbc9 	bl	19204 <os_mqueue_init>
}
   1ba72:	bd08      	pop	{r3, pc}
   1ba74:	0001ba31 	.word	0x0001ba31
   1ba78:	2000dbb8 	.word	0x2000dbb8
   1ba7c:	0001ba01 	.word	0x0001ba01
   1ba80:	2000dbd0 	.word	0x2000dbd0

0001ba84 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1ba84:	b500      	push	{lr}
   1ba86:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1ba88:	4b07      	ldr	r3, [pc, #28]	; (1baa8 <oc_ri_mem_init+0x24>)
   1ba8a:	9300      	str	r3, [sp, #0]
   1ba8c:	4b07      	ldr	r3, [pc, #28]	; (1baac <oc_ri_mem_init+0x28>)
   1ba8e:	2264      	movs	r2, #100	; 0x64
   1ba90:	2102      	movs	r1, #2
   1ba92:	4807      	ldr	r0, [pc, #28]	; (1bab0 <oc_ri_mem_init+0x2c>)
   1ba94:	f7fd fd3c 	bl	19510 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1ba98:	f000 f860 	bl	1bb5c <oc_rep_init>
#endif
    oc_buffer_init();
   1ba9c:	f7ff ffde 	bl	1ba5c <oc_buffer_init>
}
   1baa0:	b003      	add	sp, #12
   1baa2:	f85d fb04 	ldr.w	pc, [sp], #4
   1baa6:	bf00      	nop
   1baa8:	00026d1c 	.word	0x00026d1c
   1baac:	2000dbe8 	.word	0x2000dbe8
   1bab0:	2000dcb0 	.word	0x2000dcb0

0001bab4 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1bab4:	4b01      	ldr	r3, [pc, #4]	; (1babc <oc_evq_set+0x8>)
   1bab6:	6018      	str	r0, [r3, #0]
}
   1bab8:	4770      	bx	lr
   1baba:	bf00      	nop
   1babc:	2000dccc 	.word	0x2000dccc

0001bac0 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1bac0:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1bac2:	7e03      	ldrb	r3, [r0, #24]
   1bac4:	f003 0307 	and.w	r3, r3, #7
   1bac8:	4a04      	ldr	r2, [pc, #16]	; (1badc <oc_send_buffer+0x1c>)
   1baca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1bace:	b113      	cbz	r3, 1bad6 <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1bad0:	68db      	ldr	r3, [r3, #12]
   1bad2:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1bad4:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1bad6:	f7fd fc13 	bl	19300 <os_mbuf_free_chain>
}
   1bada:	e7fb      	b.n	1bad4 <oc_send_buffer+0x14>
   1badc:	2000df60 	.word	0x2000df60

0001bae0 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1bae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bae4:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1bae6:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1bae8:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1baea:	e002      	b.n	1baf2 <oc_send_multicast_message+0x12>
   1baec:	4635      	mov	r5, r6
   1baee:	3401      	adds	r4, #1
   1baf0:	462e      	mov	r6, r5
   1baf2:	2c07      	cmp	r4, #7
   1baf4:	dc12      	bgt.n	1bb1c <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1baf6:	4b0c      	ldr	r3, [pc, #48]	; (1bb28 <oc_send_multicast_message+0x48>)
   1baf8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1bafc:	2d00      	cmp	r5, #0
   1bafe:	d0f5      	beq.n	1baec <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1bb00:	2e00      	cmp	r6, #0
   1bb02:	d0f4      	beq.n	1baee <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1bb04:	4638      	mov	r0, r7
   1bb06:	f7fd fc6b 	bl	193e0 <os_mbuf_dup>
   1bb0a:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1bb0c:	6933      	ldr	r3, [r6, #16]
   1bb0e:	4638      	mov	r0, r7
   1bb10:	4798      	blx	r3
            if (!n) {
   1bb12:	f1b8 0f00 	cmp.w	r8, #0
   1bb16:	d005      	beq.n	1bb24 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1bb18:	4647      	mov	r7, r8
   1bb1a:	e7e8      	b.n	1baee <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1bb1c:	b116      	cbz	r6, 1bb24 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1bb1e:	6933      	ldr	r3, [r6, #16]
   1bb20:	4638      	mov	r0, r7
   1bb22:	4798      	blx	r3
    }
}
   1bb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bb28:	2000df60 	.word	0x2000df60

0001bb2c <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1bb2c:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1bb2e:	4b07      	ldr	r3, [pc, #28]	; (1bb4c <oc_init+0x20>)
   1bb30:	781b      	ldrb	r3, [r3, #0]
   1bb32:	b133      	cbz	r3, 1bb42 <oc_init+0x16>
    oc_ri_mem_init();
   1bb34:	f7ff ffa6 	bl	1ba84 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1bb38:	f7fd fb60 	bl	191fc <os_eventq_dflt_get>
   1bb3c:	f7ff ffba 	bl	1bab4 <oc_evq_set>
}
   1bb40:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1bb42:	461a      	mov	r2, r3
   1bb44:	4619      	mov	r1, r3
   1bb46:	4618      	mov	r0, r3
   1bb48:	f7fc ff9a 	bl	18a80 <__assert_func>
   1bb4c:	2000ddbc 	.word	0x2000ddbc

0001bb50 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1bb50:	4770      	bx	lr

0001bb52 <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1bb52:	4770      	bx	lr

0001bb54 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1bb54:	4770      	bx	lr

0001bb56 <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1bb56:	4770      	bx	lr

0001bb58 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1bb58:	4770      	bx	lr
	...

0001bb5c <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1bb5c:	b500      	push	{lr}
   1bb5e:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1bb60:	4b05      	ldr	r3, [pc, #20]	; (1bb78 <oc_rep_init+0x1c>)
   1bb62:	9300      	str	r3, [sp, #0]
   1bb64:	4b05      	ldr	r3, [pc, #20]	; (1bb7c <oc_rep_init+0x20>)
   1bb66:	2218      	movs	r2, #24
   1bb68:	2102      	movs	r1, #2
   1bb6a:	4805      	ldr	r0, [pc, #20]	; (1bb80 <oc_rep_init+0x24>)
   1bb6c:	f7fd fcd0 	bl	19510 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1bb70:	b003      	add	sp, #12
   1bb72:	f85d fb04 	ldr.w	pc, [sp], #4
   1bb76:	bf00      	nop
   1bb78:	00026d28 	.word	0x00026d28
   1bb7c:	2000dcec 	.word	0x2000dcec
   1bb80:	2000dcd0 	.word	0x2000dcd0

0001bb84 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1bb84:	b570      	push	{r4, r5, r6, lr}
   1bb86:	b086      	sub	sp, #24
   1bb88:	4605      	mov	r5, r0
   1bb8a:	460e      	mov	r6, r1
   1bb8c:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1bb8e:	2300      	movs	r3, #0
   1bb90:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1bb92:	f000 f9ad 	bl	1bef0 <mfg_init>

    mfg_open(&reader);
   1bb96:	a801      	add	r0, sp, #4
   1bb98:	f000 f9c6 	bl	1bf28 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1bb9c:	6823      	ldr	r3, [r4, #0]
   1bb9e:	42ab      	cmp	r3, r5
   1bba0:	da29      	bge.n	1bbf6 <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1bba2:	2102      	movs	r1, #2
   1bba4:	a801      	add	r0, sp, #4
   1bba6:	f000 f98c 	bl	1bec2 <mfg_seek_next_with_type>
   1bbaa:	4603      	mov	r3, r0
        switch (rc) {
   1bbac:	f110 0f0f 	cmn.w	r0, #15
   1bbb0:	d003      	beq.n	1bbba <flash_map_read_mfg+0x36>
   1bbb2:	b120      	cbz	r0, 1bbbe <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1bbb4:	4618      	mov	r0, r3
   1bbb6:	b006      	add	sp, #24
   1bbb8:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1bbba:	2300      	movs	r3, #0
   1bbbc:	e7fa      	b.n	1bbb4 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1bbbe:	a903      	add	r1, sp, #12
   1bbc0:	a801      	add	r0, sp, #4
   1bbc2:	f000 f98b 	bl	1bedc <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1bbc6:	4603      	mov	r3, r0
   1bbc8:	2800      	cmp	r0, #0
   1bbca:	d1f3      	bne.n	1bbb4 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1bbcc:	6823      	ldr	r3, [r4, #0]
   1bbce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1bbd2:	009a      	lsls	r2, r3, #2
   1bbd4:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1bbd6:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1bbda:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1bbdc:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1bbe0:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1bbe2:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1bbe6:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1bbe8:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1bbec:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1bbee:	6823      	ldr	r3, [r4, #0]
   1bbf0:	3301      	adds	r3, #1
   1bbf2:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1bbf4:	e7d2      	b.n	1bb9c <flash_map_read_mfg+0x18>
            return -1;
   1bbf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bbfa:	e7db      	b.n	1bbb4 <flash_map_read_mfg+0x30>

0001bbfc <flash_area_open>:
{
   1bbfc:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1bbfe:	4b0d      	ldr	r3, [pc, #52]	; (1bc34 <flash_area_open+0x38>)
   1bc00:	681d      	ldr	r5, [r3, #0]
   1bc02:	b1a5      	cbz	r5, 1bc2e <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1bc04:	2300      	movs	r3, #0
   1bc06:	4a0c      	ldr	r2, [pc, #48]	; (1bc38 <flash_area_open+0x3c>)
   1bc08:	6812      	ldr	r2, [r2, #0]
   1bc0a:	429a      	cmp	r2, r3
   1bc0c:	dd0b      	ble.n	1bc26 <flash_area_open+0x2a>
        area = flash_map + i;
   1bc0e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1bc12:	00a2      	lsls	r2, r4, #2
   1bc14:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1bc16:	5caa      	ldrb	r2, [r5, r2]
   1bc18:	4282      	cmp	r2, r0
   1bc1a:	d001      	beq.n	1bc20 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1bc1c:	3301      	adds	r3, #1
   1bc1e:	e7f2      	b.n	1bc06 <flash_area_open+0xa>
            *fap = area;
   1bc20:	600c      	str	r4, [r1, #0]
            return 0;
   1bc22:	2000      	movs	r0, #0
   1bc24:	e001      	b.n	1bc2a <flash_area_open+0x2e>
    return SYS_ENOENT;
   1bc26:	f06f 0003 	mvn.w	r0, #3
}
   1bc2a:	bc30      	pop	{r4, r5}
   1bc2c:	4770      	bx	lr
        return SYS_EACCES;
   1bc2e:	f06f 0006 	mvn.w	r0, #6
   1bc32:	e7fa      	b.n	1bc2a <flash_area_open+0x2e>
   1bc34:	2000df84 	.word	0x2000df84
   1bc38:	2000df80 	.word	0x2000df80

0001bc3c <flash_area_read>:
{
   1bc3c:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1bc3e:	6884      	ldr	r4, [r0, #8]
   1bc40:	428c      	cmp	r4, r1
   1bc42:	d308      	bcc.n	1bc56 <flash_area_read+0x1a>
   1bc44:	18cd      	adds	r5, r1, r3
   1bc46:	42ac      	cmp	r4, r5
   1bc48:	d308      	bcc.n	1bc5c <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1bc4a:	6844      	ldr	r4, [r0, #4]
   1bc4c:	4421      	add	r1, r4
   1bc4e:	7840      	ldrb	r0, [r0, #1]
   1bc50:	f000 f9c8 	bl	1bfe4 <hal_flash_read>
}
   1bc54:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1bc56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bc5a:	e7fb      	b.n	1bc54 <flash_area_read+0x18>
   1bc5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bc60:	e7f8      	b.n	1bc54 <flash_area_read+0x18>
	...

0001bc64 <flash_map_init>:

void
flash_map_init(void)
{
   1bc64:	b510      	push	{r4, lr}
   1bc66:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1bc68:	4b14      	ldr	r3, [pc, #80]	; (1bcbc <flash_map_init+0x58>)
   1bc6a:	781b      	ldrb	r3, [r3, #0]
   1bc6c:	b303      	cbz	r3, 1bcb0 <flash_map_init+0x4c>

    rc = hal_flash_init();
   1bc6e:	f000 f9a5 	bl	1bfbc <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1bc72:	b138      	cbz	r0, 1bc84 <flash_map_init+0x20>
   1bc74:	2000      	movs	r0, #0
   1bc76:	9000      	str	r0, [sp, #0]
   1bc78:	4b11      	ldr	r3, [pc, #68]	; (1bcc0 <flash_map_init+0x5c>)
   1bc7a:	681c      	ldr	r4, [r3, #0]
   1bc7c:	4603      	mov	r3, r0
   1bc7e:	4602      	mov	r2, r0
   1bc80:	4601      	mov	r1, r0
   1bc82:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1bc84:	4b0f      	ldr	r3, [pc, #60]	; (1bcc4 <flash_map_init+0x60>)
   1bc86:	4a10      	ldr	r2, [pc, #64]	; (1bcc8 <flash_map_init+0x64>)
   1bc88:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1bc8a:	4b10      	ldr	r3, [pc, #64]	; (1bccc <flash_map_init+0x68>)
   1bc8c:	2206      	movs	r2, #6
   1bc8e:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1bc90:	aa03      	add	r2, sp, #12
   1bc92:	490f      	ldr	r1, [pc, #60]	; (1bcd0 <flash_map_init+0x6c>)
   1bc94:	200a      	movs	r0, #10
   1bc96:	f7ff ff75 	bl	1bb84 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1bc9a:	b938      	cbnz	r0, 1bcac <flash_map_init+0x48>
   1bc9c:	9b03      	ldr	r3, [sp, #12]
   1bc9e:	2b00      	cmp	r3, #0
   1bca0:	dd04      	ble.n	1bcac <flash_map_init+0x48>
        flash_map = mfg_areas;
   1bca2:	4a08      	ldr	r2, [pc, #32]	; (1bcc4 <flash_map_init+0x60>)
   1bca4:	490a      	ldr	r1, [pc, #40]	; (1bcd0 <flash_map_init+0x6c>)
   1bca6:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1bca8:	4a08      	ldr	r2, [pc, #32]	; (1bccc <flash_map_init+0x68>)
   1bcaa:	6013      	str	r3, [r2, #0]
    }
}
   1bcac:	b004      	add	sp, #16
   1bcae:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1bcb0:	461a      	mov	r2, r3
   1bcb2:	4619      	mov	r1, r3
   1bcb4:	4618      	mov	r0, r3
   1bcb6:	f7fc fee3 	bl	18a80 <__assert_func>
   1bcba:	bf00      	nop
   1bcbc:	2000ddbc 	.word	0x2000ddbc
   1bcc0:	20000104 	.word	0x20000104
   1bcc4:	2000df84 	.word	0x2000df84
   1bcc8:	00026d34 	.word	0x00026d34
   1bccc:	2000df80 	.word	0x2000df80
   1bcd0:	2000dd1c 	.word	0x2000dd1c

0001bcd4 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1bcd4:	4770      	bx	lr
	...

0001bcd8 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1bcd8:	b530      	push	{r4, r5, lr}
   1bcda:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1bcdc:	7885      	ldrb	r5, [r0, #2]
   1bcde:	4b21      	ldr	r3, [pc, #132]	; (1bd64 <mfg_seek_next_aux+0x8c>)
   1bce0:	681b      	ldr	r3, [r3, #0]
   1bce2:	429d      	cmp	r5, r3
   1bce4:	da32      	bge.n	1bd4c <mfg_seek_next_aux+0x74>
   1bce6:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1bce8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1bcec:	0093      	lsls	r3, r2, #2
   1bcee:	a901      	add	r1, sp, #4
   1bcf0:	4a1d      	ldr	r2, [pc, #116]	; (1bd68 <mfg_seek_next_aux+0x90>)
   1bcf2:	5cd0      	ldrb	r0, [r2, r3]
   1bcf4:	f7ff ff82 	bl	1bbfc <flash_area_open>
    if (rc != 0) {
   1bcf8:	bb58      	cbnz	r0, 1bd52 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1bcfa:	6862      	ldr	r2, [r4, #4]
   1bcfc:	b9c2      	cbnz	r2, 1bd30 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1bcfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1bd02:	00aa      	lsls	r2, r5, #2
   1bd04:	4b18      	ldr	r3, [pc, #96]	; (1bd68 <mfg_seek_next_aux+0x90>)
   1bd06:	4413      	add	r3, r2
   1bd08:	685b      	ldr	r3, [r3, #4]
   1bd0a:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1bd0c:	6861      	ldr	r1, [r4, #4]
   1bd0e:	9801      	ldr	r0, [sp, #4]
   1bd10:	6883      	ldr	r3, [r0, #8]
   1bd12:	3b08      	subs	r3, #8
   1bd14:	4299      	cmp	r1, r3
   1bd16:	d310      	bcc.n	1bd3a <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1bd18:	78a3      	ldrb	r3, [r4, #2]
   1bd1a:	1c59      	adds	r1, r3, #1
   1bd1c:	4a11      	ldr	r2, [pc, #68]	; (1bd64 <mfg_seek_next_aux+0x8c>)
   1bd1e:	6812      	ldr	r2, [r2, #0]
   1bd20:	4291      	cmp	r1, r2
   1bd22:	da19      	bge.n	1bd58 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1bd24:	2200      	movs	r2, #0
   1bd26:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1bd28:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1bd2a:	f06f 0305 	mvn.w	r3, #5
   1bd2e:	e015      	b.n	1bd5c <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1bd30:	7863      	ldrb	r3, [r4, #1]
   1bd32:	4413      	add	r3, r2
   1bd34:	3302      	adds	r3, #2
   1bd36:	6063      	str	r3, [r4, #4]
   1bd38:	e7e8      	b.n	1bd0c <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1bd3a:	2302      	movs	r3, #2
   1bd3c:	4622      	mov	r2, r4
   1bd3e:	f7ff ff7d 	bl	1bc3c <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1bd42:	4603      	mov	r3, r0
   1bd44:	b150      	cbz	r0, 1bd5c <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1bd46:	f06f 0304 	mvn.w	r3, #4
   1bd4a:	e007      	b.n	1bd5c <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1bd4c:	f06f 0301 	mvn.w	r3, #1
   1bd50:	e004      	b.n	1bd5c <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1bd52:	f06f 0304 	mvn.w	r3, #4
   1bd56:	e001      	b.n	1bd5c <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1bd58:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1bd5c:	4618      	mov	r0, r3
   1bd5e:	b003      	add	sp, #12
   1bd60:	bd30      	pop	{r4, r5, pc}
   1bd62:	bf00      	nop
   1bd64:	2000ddb0 	.word	0x2000ddb0
   1bd68:	2000dd98 	.word	0x2000dd98

0001bd6c <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1bd6c:	b530      	push	{r4, r5, lr}
   1bd6e:	b085      	sub	sp, #20
   1bd70:	4605      	mov	r5, r0
   1bd72:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1bd74:	a903      	add	r1, sp, #12
   1bd76:	f7ff ff41 	bl	1bbfc <flash_area_open>
    if (rc != 0) {
   1bd7a:	b9e8      	cbnz	r0, 1bdb8 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1bd7c:	9803      	ldr	r0, [sp, #12]
   1bd7e:	6881      	ldr	r1, [r0, #8]
   1bd80:	2308      	movs	r3, #8
   1bd82:	aa01      	add	r2, sp, #4
   1bd84:	3908      	subs	r1, #8
   1bd86:	f7ff ff59 	bl	1bc3c <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1bd8a:	4601      	mov	r1, r0
   1bd8c:	b9b8      	cbnz	r0, 1bdbe <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1bd8e:	9a02      	ldr	r2, [sp, #8]
   1bd90:	4b11      	ldr	r3, [pc, #68]	; (1bdd8 <mfg_read_mmr+0x6c>)
   1bd92:	429a      	cmp	r2, r3
   1bd94:	d116      	bne.n	1bdc4 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1bd96:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1bd9a:	2b02      	cmp	r3, #2
   1bd9c:	d115      	bne.n	1bdca <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1bd9e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1bda2:	9b03      	ldr	r3, [sp, #12]
   1bda4:	689b      	ldr	r3, [r3, #8]
   1bda6:	429a      	cmp	r2, r3
   1bda8:	d812      	bhi.n	1bdd0 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1bdaa:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1bdac:	7025      	strb	r5, [r4, #0]
   1bdae:	6063      	str	r3, [r4, #4]
   1bdb0:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1bdb2:	4608      	mov	r0, r1
   1bdb4:	b005      	add	sp, #20
   1bdb6:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1bdb8:	f06f 0104 	mvn.w	r1, #4
   1bdbc:	e7f9      	b.n	1bdb2 <mfg_read_mmr+0x46>
        return SYS_EIO;
   1bdbe:	f06f 0104 	mvn.w	r1, #4
   1bdc2:	e7f6      	b.n	1bdb2 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1bdc4:	f06f 0108 	mvn.w	r1, #8
   1bdc8:	e7f3      	b.n	1bdb2 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1bdca:	f06f 010b 	mvn.w	r1, #11
   1bdce:	e7f0      	b.n	1bdb2 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1bdd0:	f06f 0108 	mvn.w	r1, #8
   1bdd4:	e7ed      	b.n	1bdb2 <mfg_read_mmr+0x46>
   1bdd6:	bf00      	nop
   1bdd8:	3bb2a269 	.word	0x3bb2a269

0001bddc <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1bddc:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1bdde:	2300      	movs	r3, #0
   1bde0:	4a11      	ldr	r2, [pc, #68]	; (1be28 <mfg_read_next_mmr+0x4c>)
   1bde2:	6812      	ldr	r2, [r2, #0]
   1bde4:	429a      	cmp	r2, r3
   1bde6:	dd08      	ble.n	1bdfa <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1bde8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1bdec:	008a      	lsls	r2, r1, #2
   1bdee:	490f      	ldr	r1, [pc, #60]	; (1be2c <mfg_read_next_mmr+0x50>)
   1bdf0:	5c8a      	ldrb	r2, [r1, r2]
   1bdf2:	4282      	cmp	r2, r0
   1bdf4:	d011      	beq.n	1be1a <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1bdf6:	3301      	adds	r3, #1
   1bdf8:	e7f2      	b.n	1bde0 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1bdfa:	2a01      	cmp	r2, #1
   1bdfc:	dc11      	bgt.n	1be22 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1bdfe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1be02:	0093      	lsls	r3, r2, #2
   1be04:	4909      	ldr	r1, [pc, #36]	; (1be2c <mfg_read_next_mmr+0x50>)
   1be06:	4419      	add	r1, r3
   1be08:	f7ff ffb0 	bl	1bd6c <mfg_read_mmr>
    if (rc != 0) {
   1be0c:	4603      	mov	r3, r0
   1be0e:	b930      	cbnz	r0, 1be1e <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1be10:	4905      	ldr	r1, [pc, #20]	; (1be28 <mfg_read_next_mmr+0x4c>)
   1be12:	680a      	ldr	r2, [r1, #0]
   1be14:	3201      	adds	r2, #1
   1be16:	600a      	str	r2, [r1, #0]
    return 0;
   1be18:	e001      	b.n	1be1e <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1be1a:	f06f 030a 	mvn.w	r3, #10
}
   1be1e:	4618      	mov	r0, r3
   1be20:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1be22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1be26:	e7fa      	b.n	1be1e <mfg_read_next_mmr+0x42>
   1be28:	2000ddb0 	.word	0x2000ddb0
   1be2c:	2000dd98 	.word	0x2000dd98

0001be30 <mfg_open_flash_area>:
{
   1be30:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1be32:	7883      	ldrb	r3, [r0, #2]
   1be34:	4a0b      	ldr	r2, [pc, #44]	; (1be64 <mfg_open_flash_area+0x34>)
   1be36:	6812      	ldr	r2, [r2, #0]
   1be38:	4293      	cmp	r3, r2
   1be3a:	da0a      	bge.n	1be52 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1be3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1be40:	009a      	lsls	r2, r3, #2
   1be42:	4b09      	ldr	r3, [pc, #36]	; (1be68 <mfg_open_flash_area+0x38>)
   1be44:	5c98      	ldrb	r0, [r3, r2]
   1be46:	f7ff fed9 	bl	1bbfc <flash_area_open>
    if (rc != 0) {
   1be4a:	4603      	mov	r3, r0
   1be4c:	b938      	cbnz	r0, 1be5e <mfg_open_flash_area+0x2e>
}
   1be4e:	4618      	mov	r0, r3
   1be50:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1be52:	2300      	movs	r3, #0
   1be54:	461a      	mov	r2, r3
   1be56:	4619      	mov	r1, r3
   1be58:	4618      	mov	r0, r3
   1be5a:	f7fc fe11 	bl	18a80 <__assert_func>
        return SYS_EIO;
   1be5e:	f06f 0304 	mvn.w	r3, #4
   1be62:	e7f4      	b.n	1be4e <mfg_open_flash_area+0x1e>
   1be64:	2000ddb0 	.word	0x2000ddb0
   1be68:	2000dd98 	.word	0x2000dd98

0001be6c <mfg_read_tlv_body>:
{
   1be6c:	b570      	push	{r4, r5, r6, lr}
   1be6e:	b082      	sub	sp, #8
   1be70:	4606      	mov	r6, r0
   1be72:	460c      	mov	r4, r1
   1be74:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1be76:	a901      	add	r1, sp, #4
   1be78:	f7ff ffda 	bl	1be30 <mfg_open_flash_area>
    if (rc != 0) {
   1be7c:	4603      	mov	r3, r0
   1be7e:	b110      	cbz	r0, 1be86 <mfg_read_tlv_body+0x1a>
}
   1be80:	4618      	mov	r0, r3
   1be82:	b002      	add	sp, #8
   1be84:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1be86:	462a      	mov	r2, r5
   1be88:	2100      	movs	r1, #0
   1be8a:	4620      	mov	r0, r4
   1be8c:	f7fe f9fb 	bl	1a286 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1be90:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1be92:	6871      	ldr	r1, [r6, #4]
   1be94:	42ab      	cmp	r3, r5
   1be96:	bfa8      	it	ge
   1be98:	462b      	movge	r3, r5
   1be9a:	4622      	mov	r2, r4
   1be9c:	3102      	adds	r1, #2
   1be9e:	9801      	ldr	r0, [sp, #4]
   1bea0:	f7ff fecc 	bl	1bc3c <flash_area_read>
    if (rc != 0) {
   1bea4:	4603      	mov	r3, r0
   1bea6:	2800      	cmp	r0, #0
   1bea8:	d0ea      	beq.n	1be80 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1beaa:	f06f 0304 	mvn.w	r3, #4
   1beae:	e7e7      	b.n	1be80 <mfg_read_tlv_body+0x14>

0001beb0 <mfg_seek_next>:
{
   1beb0:	b510      	push	{r4, lr}
   1beb2:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1beb4:	4620      	mov	r0, r4
   1beb6:	f7ff ff0f 	bl	1bcd8 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1beba:	f110 0f06 	cmn.w	r0, #6
   1bebe:	d0f9      	beq.n	1beb4 <mfg_seek_next+0x4>
}
   1bec0:	bd10      	pop	{r4, pc}

0001bec2 <mfg_seek_next_with_type>:
{
   1bec2:	b538      	push	{r3, r4, r5, lr}
   1bec4:	4604      	mov	r4, r0
   1bec6:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1bec8:	4620      	mov	r0, r4
   1beca:	f7ff fff1 	bl	1beb0 <mfg_seek_next>
        if (rc != 0) {
   1bece:	4602      	mov	r2, r0
   1bed0:	b910      	cbnz	r0, 1bed8 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1bed2:	7823      	ldrb	r3, [r4, #0]
   1bed4:	42ab      	cmp	r3, r5
   1bed6:	d1f7      	bne.n	1bec8 <mfg_seek_next_with_type+0x6>
}
   1bed8:	4610      	mov	r0, r2
   1beda:	bd38      	pop	{r3, r4, r5, pc}

0001bedc <mfg_read_tlv_flash_area>:
{
   1bedc:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1bede:	220a      	movs	r2, #10
   1bee0:	f7ff ffc4 	bl	1be6c <mfg_read_tlv_body>
}
   1bee4:	bd08      	pop	{r3, pc}

0001bee6 <mfg_read_tlv_mmr_ref>:
{
   1bee6:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1bee8:	2201      	movs	r2, #1
   1beea:	f7ff ffbf 	bl	1be6c <mfg_read_tlv_body>
}
   1beee:	bd08      	pop	{r3, pc}

0001bef0 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1bef0:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1bef2:	4b0b      	ldr	r3, [pc, #44]	; (1bf20 <mfg_init+0x30>)
   1bef4:	781b      	ldrb	r3, [r3, #0]
   1bef6:	b94b      	cbnz	r3, 1bf0c <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1bef8:	4b09      	ldr	r3, [pc, #36]	; (1bf20 <mfg_init+0x30>)
   1befa:	2201      	movs	r2, #1
   1befc:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1befe:	4b09      	ldr	r3, [pc, #36]	; (1bf24 <mfg_init+0x34>)
   1bf00:	781b      	ldrb	r3, [r3, #0]
   1bf02:	b123      	cbz	r3, 1bf0e <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1bf04:	2000      	movs	r0, #0
   1bf06:	f7ff ff69 	bl	1bddc <mfg_read_next_mmr>
    if (rc != 0) {
   1bf0a:	b128      	cbz	r0, 1bf18 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1bf0c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1bf0e:	461a      	mov	r2, r3
   1bf10:	4619      	mov	r1, r3
   1bf12:	4618      	mov	r0, r3
   1bf14:	f7fc fdb4 	bl	18a80 <__assert_func>
    rc = mfg_read_mmr_refs();
   1bf18:	f000 f80e 	bl	1bf38 <mfg_read_mmr_refs>
err:
   1bf1c:	e7f6      	b.n	1bf0c <mfg_init+0x1c>
   1bf1e:	bf00      	nop
   1bf20:	2000dd94 	.word	0x2000dd94
   1bf24:	2000ddbc 	.word	0x2000ddbc

0001bf28 <mfg_open>:
{
   1bf28:	b510      	push	{r4, lr}
   1bf2a:	4604      	mov	r4, r0
    mfg_init();
   1bf2c:	f7ff ffe0 	bl	1bef0 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1bf30:	2300      	movs	r3, #0
   1bf32:	6023      	str	r3, [r4, #0]
   1bf34:	6063      	str	r3, [r4, #4]
}
   1bf36:	bd10      	pop	{r4, pc}

0001bf38 <mfg_read_mmr_refs>:
{
   1bf38:	b500      	push	{lr}
   1bf3a:	b085      	sub	sp, #20
    mfg_open(&reader);
   1bf3c:	a801      	add	r0, sp, #4
   1bf3e:	f7ff fff3 	bl	1bf28 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1bf42:	2104      	movs	r1, #4
   1bf44:	eb0d 0001 	add.w	r0, sp, r1
   1bf48:	f7ff ffbb 	bl	1bec2 <mfg_seek_next_with_type>
   1bf4c:	4603      	mov	r3, r0
        switch (rc) {
   1bf4e:	f110 0f0f 	cmn.w	r0, #15
   1bf52:	d004      	beq.n	1bf5e <mfg_read_mmr_refs+0x26>
   1bf54:	b128      	cbz	r0, 1bf62 <mfg_read_mmr_refs+0x2a>
}
   1bf56:	4618      	mov	r0, r3
   1bf58:	b005      	add	sp, #20
   1bf5a:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1bf5e:	2300      	movs	r3, #0
   1bf60:	e7f9      	b.n	1bf56 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1bf62:	a903      	add	r1, sp, #12
   1bf64:	a801      	add	r0, sp, #4
   1bf66:	f7ff ffbe 	bl	1bee6 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1bf6a:	4603      	mov	r3, r0
   1bf6c:	2800      	cmp	r0, #0
   1bf6e:	d1f2      	bne.n	1bf56 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1bf70:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1bf74:	f7ff ff32 	bl	1bddc <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1bf78:	4603      	mov	r3, r0
   1bf7a:	2800      	cmp	r0, #0
   1bf7c:	d0e1      	beq.n	1bf42 <mfg_read_mmr_refs+0xa>
   1bf7e:	f110 0f0b 	cmn.w	r0, #11
   1bf82:	d0de      	beq.n	1bf42 <mfg_read_mmr_refs+0xa>
   1bf84:	e7e7      	b.n	1bf56 <mfg_read_mmr_refs+0x1e>
	...

0001bf88 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1bf88:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1bf8a:	4803      	ldr	r0, [pc, #12]	; (1bf98 <__wrap_coap_receive+0x10>)
   1bf8c:	f7fb feb0 	bl	17cf0 <console_printf>
    return -1;
}
   1bf90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bf94:	bd08      	pop	{r3, pc}
   1bf96:	bf00      	nop
   1bf98:	00026d7c 	.word	0x00026d7c

0001bf9c <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1bf9c:	4770      	bx	lr

0001bf9e <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1bf9e:	6843      	ldr	r3, [r0, #4]
   1bfa0:	428b      	cmp	r3, r1
   1bfa2:	d808      	bhi.n	1bfb6 <hal_flash_check_addr+0x18>
   1bfa4:	6882      	ldr	r2, [r0, #8]
   1bfa6:	4413      	add	r3, r2
   1bfa8:	428b      	cmp	r3, r1
   1bfaa:	d301      	bcc.n	1bfb0 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1bfac:	2000      	movs	r0, #0
}
   1bfae:	4770      	bx	lr
        return SYS_EINVAL;
   1bfb0:	f06f 0001 	mvn.w	r0, #1
   1bfb4:	4770      	bx	lr
   1bfb6:	f06f 0001 	mvn.w	r0, #1
   1bfba:	4770      	bx	lr

0001bfbc <hal_flash_init>:
{
   1bfbc:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1bfbe:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1bfc0:	462c      	mov	r4, r5
   1bfc2:	e001      	b.n	1bfc8 <hal_flash_init+0xc>
   1bfc4:	3401      	adds	r4, #1
   1bfc6:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1bfc8:	4620      	mov	r0, r4
   1bfca:	f7fe fce3 	bl	1a994 <hal_bsp_flash_dev>
        if (!hf) {
   1bfce:	b138      	cbz	r0, 1bfe0 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1bfd0:	6802      	ldr	r2, [r0, #0]
   1bfd2:	6952      	ldr	r2, [r2, #20]
   1bfd4:	4790      	blx	r2
   1bfd6:	2800      	cmp	r0, #0
   1bfd8:	d0f4      	beq.n	1bfc4 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1bfda:	f06f 0504 	mvn.w	r5, #4
   1bfde:	e7f1      	b.n	1bfc4 <hal_flash_init+0x8>
}
   1bfe0:	4628      	mov	r0, r5
   1bfe2:	bd38      	pop	{r3, r4, r5, pc}

0001bfe4 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1bfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bfe8:	460d      	mov	r5, r1
   1bfea:	4690      	mov	r8, r2
   1bfec:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1bfee:	f7fe fcd1 	bl	1a994 <hal_bsp_flash_dev>
    if (!hf) {
   1bff2:	b1c0      	cbz	r0, 1c026 <hal_flash_read+0x42>
   1bff4:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1bff6:	4629      	mov	r1, r5
   1bff8:	f7ff ffd1 	bl	1bf9e <hal_flash_check_addr>
   1bffc:	b9b0      	cbnz	r0, 1c02c <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1bffe:	19a9      	adds	r1, r5, r6
   1c000:	4620      	mov	r0, r4
   1c002:	f7ff ffcc 	bl	1bf9e <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1c006:	b9a0      	cbnz	r0, 1c032 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1c008:	6823      	ldr	r3, [r4, #0]
   1c00a:	681f      	ldr	r7, [r3, #0]
   1c00c:	4633      	mov	r3, r6
   1c00e:	4642      	mov	r2, r8
   1c010:	4629      	mov	r1, r5
   1c012:	4620      	mov	r0, r4
   1c014:	47b8      	blx	r7
    if (rc != 0) {
   1c016:	4603      	mov	r3, r0
   1c018:	b910      	cbnz	r0, 1c020 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1c01a:	4618      	mov	r0, r3
   1c01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1c020:	f06f 0304 	mvn.w	r3, #4
   1c024:	e7f9      	b.n	1c01a <hal_flash_read+0x36>
        return SYS_EINVAL;
   1c026:	f06f 0301 	mvn.w	r3, #1
   1c02a:	e7f6      	b.n	1c01a <hal_flash_read+0x36>
        return SYS_EINVAL;
   1c02c:	f06f 0301 	mvn.w	r3, #1
   1c030:	e7f3      	b.n	1c01a <hal_flash_read+0x36>
   1c032:	f06f 0301 	mvn.w	r3, #1
   1c036:	e7f0      	b.n	1c01a <hal_flash_read+0x36>

0001c038 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1c038:	2010      	movs	r0, #16
   1c03a:	4770      	bx	lr

0001c03c <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1c03c:	b570      	push	{r4, r5, r6, lr}
   1c03e:	4606      	mov	r6, r0
   1c040:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1c042:	460d      	mov	r5, r1
   1c044:	2908      	cmp	r1, #8
   1c046:	bf28      	it	cs
   1c048:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1c04a:	462a      	mov	r2, r5
   1c04c:	4906      	ldr	r1, [pc, #24]	; (1c068 <hal_bsp_hw_id+0x2c>)
   1c04e:	f7fe f90d 	bl	1a26c <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1c052:	1b64      	subs	r4, r4, r5
   1c054:	2c08      	cmp	r4, #8
   1c056:	bf28      	it	cs
   1c058:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1c05a:	4622      	mov	r2, r4
   1c05c:	4903      	ldr	r1, [pc, #12]	; (1c06c <hal_bsp_hw_id+0x30>)
   1c05e:	1970      	adds	r0, r6, r5
   1c060:	f7fe f904 	bl	1a26c <memcpy>

    return len + cnt;
}
   1c064:	1928      	adds	r0, r5, r4
   1c066:	bd70      	pop	{r4, r5, r6, pc}
   1c068:	10000060 	.word	0x10000060
   1c06c:	100000a4 	.word	0x100000a4

0001c070 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1c070:	b40e      	push	{r1, r2, r3}
   1c072:	b500      	push	{lr}
   1c074:	b082      	sub	sp, #8
   1c076:	ab03      	add	r3, sp, #12
   1c078:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1c07c:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1c07e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c082:	f7fe fbef 	bl	1a864 <vsnprintf>
	va_end(ap);

	return rv;
}
   1c086:	b002      	add	sp, #8
   1c088:	f85d eb04 	ldr.w	lr, [sp], #4
   1c08c:	b003      	add	sp, #12
   1c08e:	4770      	bx	lr

0001c090 <__aeabi_uldivmod>:
   1c090:	b953      	cbnz	r3, 1c0a8 <__aeabi_uldivmod+0x18>
   1c092:	b94a      	cbnz	r2, 1c0a8 <__aeabi_uldivmod+0x18>
   1c094:	2900      	cmp	r1, #0
   1c096:	bf08      	it	eq
   1c098:	2800      	cmpeq	r0, #0
   1c09a:	bf1c      	itt	ne
   1c09c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1c0a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1c0a4:	f000 b972 	b.w	1c38c <__aeabi_idiv0>
   1c0a8:	f1ad 0c08 	sub.w	ip, sp, #8
   1c0ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c0b0:	f000 f806 	bl	1c0c0 <__udivmoddi4>
   1c0b4:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c0b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c0bc:	b004      	add	sp, #16
   1c0be:	4770      	bx	lr

0001c0c0 <__udivmoddi4>:
   1c0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c0c4:	9e08      	ldr	r6, [sp, #32]
   1c0c6:	4604      	mov	r4, r0
   1c0c8:	4688      	mov	r8, r1
   1c0ca:	2b00      	cmp	r3, #0
   1c0cc:	d14b      	bne.n	1c166 <__udivmoddi4+0xa6>
   1c0ce:	428a      	cmp	r2, r1
   1c0d0:	4615      	mov	r5, r2
   1c0d2:	d967      	bls.n	1c1a4 <__udivmoddi4+0xe4>
   1c0d4:	fab2 f282 	clz	r2, r2
   1c0d8:	b14a      	cbz	r2, 1c0ee <__udivmoddi4+0x2e>
   1c0da:	f1c2 0720 	rsb	r7, r2, #32
   1c0de:	fa01 f302 	lsl.w	r3, r1, r2
   1c0e2:	fa20 f707 	lsr.w	r7, r0, r7
   1c0e6:	4095      	lsls	r5, r2
   1c0e8:	ea47 0803 	orr.w	r8, r7, r3
   1c0ec:	4094      	lsls	r4, r2
   1c0ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1c0f2:	0c23      	lsrs	r3, r4, #16
   1c0f4:	fbb8 f7fe 	udiv	r7, r8, lr
   1c0f8:	fa1f fc85 	uxth.w	ip, r5
   1c0fc:	fb0e 8817 	mls	r8, lr, r7, r8
   1c100:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1c104:	fb07 f10c 	mul.w	r1, r7, ip
   1c108:	4299      	cmp	r1, r3
   1c10a:	d909      	bls.n	1c120 <__udivmoddi4+0x60>
   1c10c:	18eb      	adds	r3, r5, r3
   1c10e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1c112:	f080 811b 	bcs.w	1c34c <__udivmoddi4+0x28c>
   1c116:	4299      	cmp	r1, r3
   1c118:	f240 8118 	bls.w	1c34c <__udivmoddi4+0x28c>
   1c11c:	3f02      	subs	r7, #2
   1c11e:	442b      	add	r3, r5
   1c120:	1a5b      	subs	r3, r3, r1
   1c122:	b2a4      	uxth	r4, r4
   1c124:	fbb3 f0fe 	udiv	r0, r3, lr
   1c128:	fb0e 3310 	mls	r3, lr, r0, r3
   1c12c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1c130:	fb00 fc0c 	mul.w	ip, r0, ip
   1c134:	45a4      	cmp	ip, r4
   1c136:	d909      	bls.n	1c14c <__udivmoddi4+0x8c>
   1c138:	192c      	adds	r4, r5, r4
   1c13a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1c13e:	f080 8107 	bcs.w	1c350 <__udivmoddi4+0x290>
   1c142:	45a4      	cmp	ip, r4
   1c144:	f240 8104 	bls.w	1c350 <__udivmoddi4+0x290>
   1c148:	3802      	subs	r0, #2
   1c14a:	442c      	add	r4, r5
   1c14c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1c150:	eba4 040c 	sub.w	r4, r4, ip
   1c154:	2700      	movs	r7, #0
   1c156:	b11e      	cbz	r6, 1c160 <__udivmoddi4+0xa0>
   1c158:	40d4      	lsrs	r4, r2
   1c15a:	2300      	movs	r3, #0
   1c15c:	e9c6 4300 	strd	r4, r3, [r6]
   1c160:	4639      	mov	r1, r7
   1c162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c166:	428b      	cmp	r3, r1
   1c168:	d909      	bls.n	1c17e <__udivmoddi4+0xbe>
   1c16a:	2e00      	cmp	r6, #0
   1c16c:	f000 80eb 	beq.w	1c346 <__udivmoddi4+0x286>
   1c170:	2700      	movs	r7, #0
   1c172:	e9c6 0100 	strd	r0, r1, [r6]
   1c176:	4638      	mov	r0, r7
   1c178:	4639      	mov	r1, r7
   1c17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c17e:	fab3 f783 	clz	r7, r3
   1c182:	2f00      	cmp	r7, #0
   1c184:	d147      	bne.n	1c216 <__udivmoddi4+0x156>
   1c186:	428b      	cmp	r3, r1
   1c188:	d302      	bcc.n	1c190 <__udivmoddi4+0xd0>
   1c18a:	4282      	cmp	r2, r0
   1c18c:	f200 80fa 	bhi.w	1c384 <__udivmoddi4+0x2c4>
   1c190:	1a84      	subs	r4, r0, r2
   1c192:	eb61 0303 	sbc.w	r3, r1, r3
   1c196:	2001      	movs	r0, #1
   1c198:	4698      	mov	r8, r3
   1c19a:	2e00      	cmp	r6, #0
   1c19c:	d0e0      	beq.n	1c160 <__udivmoddi4+0xa0>
   1c19e:	e9c6 4800 	strd	r4, r8, [r6]
   1c1a2:	e7dd      	b.n	1c160 <__udivmoddi4+0xa0>
   1c1a4:	b902      	cbnz	r2, 1c1a8 <__udivmoddi4+0xe8>
   1c1a6:	deff      	udf	#255	; 0xff
   1c1a8:	fab2 f282 	clz	r2, r2
   1c1ac:	2a00      	cmp	r2, #0
   1c1ae:	f040 808f 	bne.w	1c2d0 <__udivmoddi4+0x210>
   1c1b2:	1b49      	subs	r1, r1, r5
   1c1b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1c1b8:	fa1f f885 	uxth.w	r8, r5
   1c1bc:	2701      	movs	r7, #1
   1c1be:	fbb1 fcfe 	udiv	ip, r1, lr
   1c1c2:	0c23      	lsrs	r3, r4, #16
   1c1c4:	fb0e 111c 	mls	r1, lr, ip, r1
   1c1c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1c1cc:	fb08 f10c 	mul.w	r1, r8, ip
   1c1d0:	4299      	cmp	r1, r3
   1c1d2:	d907      	bls.n	1c1e4 <__udivmoddi4+0x124>
   1c1d4:	18eb      	adds	r3, r5, r3
   1c1d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1c1da:	d202      	bcs.n	1c1e2 <__udivmoddi4+0x122>
   1c1dc:	4299      	cmp	r1, r3
   1c1de:	f200 80cd 	bhi.w	1c37c <__udivmoddi4+0x2bc>
   1c1e2:	4684      	mov	ip, r0
   1c1e4:	1a59      	subs	r1, r3, r1
   1c1e6:	b2a3      	uxth	r3, r4
   1c1e8:	fbb1 f0fe 	udiv	r0, r1, lr
   1c1ec:	fb0e 1410 	mls	r4, lr, r0, r1
   1c1f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1c1f4:	fb08 f800 	mul.w	r8, r8, r0
   1c1f8:	45a0      	cmp	r8, r4
   1c1fa:	d907      	bls.n	1c20c <__udivmoddi4+0x14c>
   1c1fc:	192c      	adds	r4, r5, r4
   1c1fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1c202:	d202      	bcs.n	1c20a <__udivmoddi4+0x14a>
   1c204:	45a0      	cmp	r8, r4
   1c206:	f200 80b6 	bhi.w	1c376 <__udivmoddi4+0x2b6>
   1c20a:	4618      	mov	r0, r3
   1c20c:	eba4 0408 	sub.w	r4, r4, r8
   1c210:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1c214:	e79f      	b.n	1c156 <__udivmoddi4+0x96>
   1c216:	f1c7 0c20 	rsb	ip, r7, #32
   1c21a:	40bb      	lsls	r3, r7
   1c21c:	fa22 fe0c 	lsr.w	lr, r2, ip
   1c220:	ea4e 0e03 	orr.w	lr, lr, r3
   1c224:	fa01 f407 	lsl.w	r4, r1, r7
   1c228:	fa20 f50c 	lsr.w	r5, r0, ip
   1c22c:	fa21 f30c 	lsr.w	r3, r1, ip
   1c230:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1c234:	4325      	orrs	r5, r4
   1c236:	fbb3 f9f8 	udiv	r9, r3, r8
   1c23a:	0c2c      	lsrs	r4, r5, #16
   1c23c:	fb08 3319 	mls	r3, r8, r9, r3
   1c240:	fa1f fa8e 	uxth.w	sl, lr
   1c244:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1c248:	fb09 f40a 	mul.w	r4, r9, sl
   1c24c:	429c      	cmp	r4, r3
   1c24e:	fa02 f207 	lsl.w	r2, r2, r7
   1c252:	fa00 f107 	lsl.w	r1, r0, r7
   1c256:	d90b      	bls.n	1c270 <__udivmoddi4+0x1b0>
   1c258:	eb1e 0303 	adds.w	r3, lr, r3
   1c25c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1c260:	f080 8087 	bcs.w	1c372 <__udivmoddi4+0x2b2>
   1c264:	429c      	cmp	r4, r3
   1c266:	f240 8084 	bls.w	1c372 <__udivmoddi4+0x2b2>
   1c26a:	f1a9 0902 	sub.w	r9, r9, #2
   1c26e:	4473      	add	r3, lr
   1c270:	1b1b      	subs	r3, r3, r4
   1c272:	b2ad      	uxth	r5, r5
   1c274:	fbb3 f0f8 	udiv	r0, r3, r8
   1c278:	fb08 3310 	mls	r3, r8, r0, r3
   1c27c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1c280:	fb00 fa0a 	mul.w	sl, r0, sl
   1c284:	45a2      	cmp	sl, r4
   1c286:	d908      	bls.n	1c29a <__udivmoddi4+0x1da>
   1c288:	eb1e 0404 	adds.w	r4, lr, r4
   1c28c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1c290:	d26b      	bcs.n	1c36a <__udivmoddi4+0x2aa>
   1c292:	45a2      	cmp	sl, r4
   1c294:	d969      	bls.n	1c36a <__udivmoddi4+0x2aa>
   1c296:	3802      	subs	r0, #2
   1c298:	4474      	add	r4, lr
   1c29a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1c29e:	fba0 8902 	umull	r8, r9, r0, r2
   1c2a2:	eba4 040a 	sub.w	r4, r4, sl
   1c2a6:	454c      	cmp	r4, r9
   1c2a8:	46c2      	mov	sl, r8
   1c2aa:	464b      	mov	r3, r9
   1c2ac:	d354      	bcc.n	1c358 <__udivmoddi4+0x298>
   1c2ae:	d051      	beq.n	1c354 <__udivmoddi4+0x294>
   1c2b0:	2e00      	cmp	r6, #0
   1c2b2:	d069      	beq.n	1c388 <__udivmoddi4+0x2c8>
   1c2b4:	ebb1 050a 	subs.w	r5, r1, sl
   1c2b8:	eb64 0403 	sbc.w	r4, r4, r3
   1c2bc:	fa04 fc0c 	lsl.w	ip, r4, ip
   1c2c0:	40fd      	lsrs	r5, r7
   1c2c2:	40fc      	lsrs	r4, r7
   1c2c4:	ea4c 0505 	orr.w	r5, ip, r5
   1c2c8:	e9c6 5400 	strd	r5, r4, [r6]
   1c2cc:	2700      	movs	r7, #0
   1c2ce:	e747      	b.n	1c160 <__udivmoddi4+0xa0>
   1c2d0:	f1c2 0320 	rsb	r3, r2, #32
   1c2d4:	fa20 f703 	lsr.w	r7, r0, r3
   1c2d8:	4095      	lsls	r5, r2
   1c2da:	fa01 f002 	lsl.w	r0, r1, r2
   1c2de:	fa21 f303 	lsr.w	r3, r1, r3
   1c2e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1c2e6:	4338      	orrs	r0, r7
   1c2e8:	0c01      	lsrs	r1, r0, #16
   1c2ea:	fbb3 f7fe 	udiv	r7, r3, lr
   1c2ee:	fa1f f885 	uxth.w	r8, r5
   1c2f2:	fb0e 3317 	mls	r3, lr, r7, r3
   1c2f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1c2fa:	fb07 f308 	mul.w	r3, r7, r8
   1c2fe:	428b      	cmp	r3, r1
   1c300:	fa04 f402 	lsl.w	r4, r4, r2
   1c304:	d907      	bls.n	1c316 <__udivmoddi4+0x256>
   1c306:	1869      	adds	r1, r5, r1
   1c308:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1c30c:	d22f      	bcs.n	1c36e <__udivmoddi4+0x2ae>
   1c30e:	428b      	cmp	r3, r1
   1c310:	d92d      	bls.n	1c36e <__udivmoddi4+0x2ae>
   1c312:	3f02      	subs	r7, #2
   1c314:	4429      	add	r1, r5
   1c316:	1acb      	subs	r3, r1, r3
   1c318:	b281      	uxth	r1, r0
   1c31a:	fbb3 f0fe 	udiv	r0, r3, lr
   1c31e:	fb0e 3310 	mls	r3, lr, r0, r3
   1c322:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1c326:	fb00 f308 	mul.w	r3, r0, r8
   1c32a:	428b      	cmp	r3, r1
   1c32c:	d907      	bls.n	1c33e <__udivmoddi4+0x27e>
   1c32e:	1869      	adds	r1, r5, r1
   1c330:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1c334:	d217      	bcs.n	1c366 <__udivmoddi4+0x2a6>
   1c336:	428b      	cmp	r3, r1
   1c338:	d915      	bls.n	1c366 <__udivmoddi4+0x2a6>
   1c33a:	3802      	subs	r0, #2
   1c33c:	4429      	add	r1, r5
   1c33e:	1ac9      	subs	r1, r1, r3
   1c340:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1c344:	e73b      	b.n	1c1be <__udivmoddi4+0xfe>
   1c346:	4637      	mov	r7, r6
   1c348:	4630      	mov	r0, r6
   1c34a:	e709      	b.n	1c160 <__udivmoddi4+0xa0>
   1c34c:	4607      	mov	r7, r0
   1c34e:	e6e7      	b.n	1c120 <__udivmoddi4+0x60>
   1c350:	4618      	mov	r0, r3
   1c352:	e6fb      	b.n	1c14c <__udivmoddi4+0x8c>
   1c354:	4541      	cmp	r1, r8
   1c356:	d2ab      	bcs.n	1c2b0 <__udivmoddi4+0x1f0>
   1c358:	ebb8 0a02 	subs.w	sl, r8, r2
   1c35c:	eb69 020e 	sbc.w	r2, r9, lr
   1c360:	3801      	subs	r0, #1
   1c362:	4613      	mov	r3, r2
   1c364:	e7a4      	b.n	1c2b0 <__udivmoddi4+0x1f0>
   1c366:	4660      	mov	r0, ip
   1c368:	e7e9      	b.n	1c33e <__udivmoddi4+0x27e>
   1c36a:	4618      	mov	r0, r3
   1c36c:	e795      	b.n	1c29a <__udivmoddi4+0x1da>
   1c36e:	4667      	mov	r7, ip
   1c370:	e7d1      	b.n	1c316 <__udivmoddi4+0x256>
   1c372:	4681      	mov	r9, r0
   1c374:	e77c      	b.n	1c270 <__udivmoddi4+0x1b0>
   1c376:	3802      	subs	r0, #2
   1c378:	442c      	add	r4, r5
   1c37a:	e747      	b.n	1c20c <__udivmoddi4+0x14c>
   1c37c:	f1ac 0c02 	sub.w	ip, ip, #2
   1c380:	442b      	add	r3, r5
   1c382:	e72f      	b.n	1c1e4 <__udivmoddi4+0x124>
   1c384:	4638      	mov	r0, r7
   1c386:	e708      	b.n	1c19a <__udivmoddi4+0xda>
   1c388:	4637      	mov	r7, r6
   1c38a:	e6e9      	b.n	1c160 <__udivmoddi4+0xa0>

0001c38c <__aeabi_idiv0>:
   1c38c:	4770      	bx	lr
   1c38e:	bf00      	nop

0001c390 <__aeabi_memclr>:
   1c390:	2200      	movs	r2, #0
   1c392:	f000 b803 	b.w	1c39c <__aeabi_memset>
   1c396:	bf00      	nop

0001c398 <__aeabi_memcpy>:
   1c398:	f7fd bf68 	b.w	1a26c <memcpy>

0001c39c <__aeabi_memset>:
   1c39c:	b470      	push	{r4, r5, r6}
   1c39e:	0784      	lsls	r4, r0, #30
   1c3a0:	d046      	beq.n	1c430 <__aeabi_memset+0x94>
   1c3a2:	1e4c      	subs	r4, r1, #1
   1c3a4:	2900      	cmp	r1, #0
   1c3a6:	d041      	beq.n	1c42c <__aeabi_memset+0x90>
   1c3a8:	b2d5      	uxtb	r5, r2
   1c3aa:	4603      	mov	r3, r0
   1c3ac:	e002      	b.n	1c3b4 <__aeabi_memset+0x18>
   1c3ae:	1e61      	subs	r1, r4, #1
   1c3b0:	b3e4      	cbz	r4, 1c42c <__aeabi_memset+0x90>
   1c3b2:	460c      	mov	r4, r1
   1c3b4:	f803 5b01 	strb.w	r5, [r3], #1
   1c3b8:	0799      	lsls	r1, r3, #30
   1c3ba:	d1f8      	bne.n	1c3ae <__aeabi_memset+0x12>
   1c3bc:	2c03      	cmp	r4, #3
   1c3be:	d92e      	bls.n	1c41e <__aeabi_memset+0x82>
   1c3c0:	b2d5      	uxtb	r5, r2
   1c3c2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1c3c6:	2c0f      	cmp	r4, #15
   1c3c8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1c3cc:	d919      	bls.n	1c402 <__aeabi_memset+0x66>
   1c3ce:	4626      	mov	r6, r4
   1c3d0:	f103 0110 	add.w	r1, r3, #16
   1c3d4:	3e10      	subs	r6, #16
   1c3d6:	2e0f      	cmp	r6, #15
   1c3d8:	f841 5c10 	str.w	r5, [r1, #-16]
   1c3dc:	f841 5c0c 	str.w	r5, [r1, #-12]
   1c3e0:	f841 5c08 	str.w	r5, [r1, #-8]
   1c3e4:	f841 5c04 	str.w	r5, [r1, #-4]
   1c3e8:	f101 0110 	add.w	r1, r1, #16
   1c3ec:	d8f2      	bhi.n	1c3d4 <__aeabi_memset+0x38>
   1c3ee:	f1a4 0110 	sub.w	r1, r4, #16
   1c3f2:	f021 010f 	bic.w	r1, r1, #15
   1c3f6:	f004 040f 	and.w	r4, r4, #15
   1c3fa:	3110      	adds	r1, #16
   1c3fc:	2c03      	cmp	r4, #3
   1c3fe:	440b      	add	r3, r1
   1c400:	d90d      	bls.n	1c41e <__aeabi_memset+0x82>
   1c402:	461e      	mov	r6, r3
   1c404:	4621      	mov	r1, r4
   1c406:	3904      	subs	r1, #4
   1c408:	2903      	cmp	r1, #3
   1c40a:	f846 5b04 	str.w	r5, [r6], #4
   1c40e:	d8fa      	bhi.n	1c406 <__aeabi_memset+0x6a>
   1c410:	1f21      	subs	r1, r4, #4
   1c412:	f021 0103 	bic.w	r1, r1, #3
   1c416:	3104      	adds	r1, #4
   1c418:	440b      	add	r3, r1
   1c41a:	f004 0403 	and.w	r4, r4, #3
   1c41e:	b12c      	cbz	r4, 1c42c <__aeabi_memset+0x90>
   1c420:	b2d2      	uxtb	r2, r2
   1c422:	441c      	add	r4, r3
   1c424:	f803 2b01 	strb.w	r2, [r3], #1
   1c428:	42a3      	cmp	r3, r4
   1c42a:	d1fb      	bne.n	1c424 <__aeabi_memset+0x88>
   1c42c:	bc70      	pop	{r4, r5, r6}
   1c42e:	4770      	bx	lr
   1c430:	460c      	mov	r4, r1
   1c432:	4603      	mov	r3, r0
   1c434:	e7c2      	b.n	1c3bc <__aeabi_memset+0x20>
   1c436:	5344      	.short	0x5344
   1c438:	61662050 	.word	0x61662050
   1c43c:	43546c69 	.word	0x43546c69
   1c440:	61662048 	.word	0x61662048
   1c444:	45476c69 	.word	0x45476c69
   1c448:	61662054 	.word	0x61662054
   1c44c:	55526c69 	.word	0x55526c69
   1c450:	6166204e 	.word	0x6166204e
   1c454:	6c69      	.short	0x6c69
   1c456:	7572      	.short	0x7572
   1c458:	612f7473 	.word	0x612f7473
   1c45c:	732f7070 	.word	0x732f7070
   1c460:	6c2f6372 	.word	0x6c2f6372
   1c464:	722e6269 	.word	0x722e6269
   1c468:	00000073 	.word	0x00000073
   1c46c:	0001c456 	.word	0x0001c456
   1c470:	00000013 	.word	0x00000013
   1c474:	0000005c 	.word	0x0000005c
   1c478:	00000005 	.word	0x00000005
   1c47c:	0001c456 	.word	0x0001c456
   1c480:	00000013 	.word	0x00000013
   1c484:	00000065 	.word	0x00000065
   1c488:	00000005 	.word	0x00000005
   1c48c:	50494843 	.word	0x50494843
   1c490:	61662038 	.word	0x61662038
   1c494:	00006c69 	.word	0x00006c69
   1c498:	0001c456 	.word	0x0001c456
   1c49c:	00000013 	.word	0x00000013
   1c4a0:	00000077 	.word	0x00000077
   1c4a4:	00000005 	.word	0x00000005
   1c4a8:	0001c456 	.word	0x0001c456
   1c4ac:	00000013 	.word	0x00000013
   1c4b0:	0000007d 	.word	0x0000007d
   1c4b4:	0000000d 	.word	0x0000000d
   1c4b8:	0001c456 	.word	0x0001c456
   1c4bc:	00000013 	.word	0x00000013
   1c4c0:	0000007c 	.word	0x0000007c
   1c4c4:	00000009 	.word	0x00000009
   1c4c8:	696e6170 	.word	0x696e6170
   1c4cc:	2063      	.short	0x2063
   1c4ce:	6f6e      	.short	0x6f6e
   1c4d0:	636f6c20 	.word	0x636f6c20
   1c4d4:	0a          	.byte	0x0a
   1c4d5:	61          	.byte	0x61
   1c4d6:	2074      	.short	0x2074
   1c4d8:	6e696c20 	.word	0x6e696c20
   1c4dc:	2065      	.short	0x2065
   1c4de:	000a      	.short	0x000a
   1c4e0:	0001c456 	.word	0x0001c456
   1c4e4:	00000013 	.word	0x00000013
   1c4e8:	00000095 	.word	0x00000095
   1c4ec:	00000014 	.word	0x00000014
   1c4f0:	6c6c6163 	.word	0x6c6c6163
   1c4f4:	60206465 	.word	0x60206465
   1c4f8:	6974704f 	.word	0x6974704f
   1c4fc:	3a3a6e6f 	.word	0x3a3a6e6f
   1c500:	72776e75 	.word	0x72776e75
   1c504:	29287061 	.word	0x29287061
   1c508:	6e6f2060 	.word	0x6e6f2060
   1c50c:	60206120 	.word	0x60206120
   1c510:	656e6f4e 	.word	0x656e6f4e
   1c514:	61762060 	.word	0x61762060
   1c518:	756c      	.short	0x756c
   1c51a:	65          	.byte	0x65
   1c51b:	00          	.byte	0x00
   1c51c:	0001c51b 	.word	0x0001c51b
   1c520:	0001c51c 	.word	0x0001c51c
   1c524:	65737361 	.word	0x65737361
   1c528:	6f697472 	.word	0x6f697472
   1c52c:	6166206e 	.word	0x6166206e
   1c530:	64656c69 	.word	0x64656c69
   1c534:	2860203a 	.word	0x2860203a
   1c538:	7466656c 	.word	0x7466656c
   1c53c:	203d3d20 	.word	0x203d3d20
   1c540:	68676972 	.word	0x68676972
   1c544:	0a602974 	.word	0x0a602974
   1c548:	656c2020 	.word	0x656c2020
   1c54c:	203a7466 	.word	0x203a7466
   1c550:	60          	.byte	0x60
   1c551:	60          	.byte	0x60
   1c552:	0a2c      	.short	0x0a2c
   1c554:	67697220 	.word	0x67697220
   1c558:	203a7468 	.word	0x203a7468
   1c55c:	60          	.byte	0x60
   1c55d:	60          	.byte	0x60
   1c55e:	203a      	.short	0x203a
   1c560:	0001c524 	.word	0x0001c524
   1c564:	0000002d 	.word	0x0000002d
   1c568:	0001c551 	.word	0x0001c551
   1c56c:	0000000c 	.word	0x0000000c
   1c570:	0001c55d 	.word	0x0001c55d
   1c574:	00000003 	.word	0x00000003
   1c578:	0001c560 	.word	0x0001c560
   1c57c:	6e206f6e 	.word	0x6e206f6e
   1c580:	006c6c75 	.word	0x006c6c75
   1c584:	0001c57c 	.word	0x0001c57c
   1c588:	00000007 	.word	0x00000007
   1c58c:	0001c584 	.word	0x0001c584
   1c590:	0001c590 	.word	0x0001c590
   1c594:	74737572 	.word	0x74737572
   1c598:	6e796d2f 	.word	0x6e796d2f
   1c59c:	2f747765 	.word	0x2f747765
   1c5a0:	2f637273 	.word	0x2f637273
   1c5a4:	2e62696c 	.word	0x2e62696c
   1c5a8:	00007372 	.word	0x00007372
   1c5ac:	0001c594 	.word	0x0001c594
   1c5b0:	00000016 	.word	0x00000016
   1c5b4:	000000db 	.word	0x000000db
   1c5b8:	00000011 	.word	0x00000011
   1c5bc:	00008e55 	.word	0x00008e55
   1c5c0:	00000004 	.word	0x00000004
   1c5c4:	00000004 	.word	0x00000004
   1c5c8:	00012bfb 	.word	0x00012bfb
   1c5cc:	65737361 	.word	0x65737361
   1c5d0:	6f697472 	.word	0x6f697472
   1c5d4:	6166206e 	.word	0x6166206e
   1c5d8:	64656c69 	.word	0x64656c69
   1c5dc:	2860203a 	.word	0x2860203a
   1c5e0:	7466656c 	.word	0x7466656c
   1c5e4:	203d3d20 	.word	0x203d3d20
   1c5e8:	68676972 	.word	0x68676972
   1c5ec:	0a602974 	.word	0x0a602974
   1c5f0:	656c2020 	.word	0x656c2020
   1c5f4:	203a7466 	.word	0x203a7466
   1c5f8:	60          	.byte	0x60
   1c5f9:	60          	.byte	0x60
   1c5fa:	0a2c      	.short	0x0a2c
   1c5fc:	67697220 	.word	0x67697220
   1c600:	203a7468 	.word	0x203a7468
   1c604:	60          	.byte	0x60
   1c605:	60          	.byte	0x60
   1c606:	203a      	.short	0x203a
   1c608:	0001c5cc 	.word	0x0001c5cc
   1c60c:	0000002d 	.word	0x0000002d
   1c610:	0001c5f9 	.word	0x0001c5f9
   1c614:	0000000c 	.word	0x0000000c
   1c618:	0001c605 	.word	0x0001c605
   1c61c:	00000003 	.word	0x00000003
   1c620:	0001c608 	.word	0x0001c608
   1c624:	74736564 	.word	0x74736564
   1c628:	74616e69 	.word	0x74616e69
   1c62c:	206e6f69 	.word	0x206e6f69
   1c630:	20646e61 	.word	0x20646e61
   1c634:	72756f73 	.word	0x72756f73
   1c638:	73206563 	.word	0x73206563
   1c63c:	6563696c 	.word	0x6563696c
   1c640:	61682073 	.word	0x61682073
   1c644:	64206576 	.word	0x64206576
   1c648:	65666669 	.word	0x65666669
   1c64c:	746e6572 	.word	0x746e6572
   1c650:	6e656c20 	.word	0x6e656c20
   1c654:	73687467 	.word	0x73687467
   1c658:	0001c624 	.word	0x0001c624
   1c65c:	00000034 	.word	0x00000034
   1c660:	0001c658 	.word	0x0001c658
   1c664:	0001c664 	.word	0x0001c664
   1c668:	7375722f 	.word	0x7375722f
   1c66c:	352f6374 	.word	0x352f6374
   1c670:	66613765 	.word	0x66613765
   1c674:	39363634 	.word	0x39363634
   1c678:	65303866 	.word	0x65303866
   1c67c:	38366635 	.word	0x38366635
   1c680:	31343132 	.word	0x31343132
   1c684:	30353066 	.word	0x30353066
   1c688:	61333931 	.word	0x61333931
   1c68c:	39373662 	.word	0x39373662
   1c690:	62646661 	.word	0x62646661
   1c694:	2f316234 	.word	0x2f316234
   1c698:	2f637273 	.word	0x2f637273
   1c69c:	6362696c 	.word	0x6362696c
   1c6a0:	2f65726f 	.word	0x2f65726f
   1c6a4:	7263616d 	.word	0x7263616d
   1c6a8:	6d2f736f 	.word	0x6d2f736f
   1c6ac:	722e646f 	.word	0x722e646f
   1c6b0:	00000073 	.word	0x00000073
   1c6b4:	0001c668 	.word	0x0001c668
   1c6b8:	00000049 	.word	0x00000049
   1c6bc:	00000012 	.word	0x00000012
   1c6c0:	0000000d 	.word	0x0000000d
   1c6c4:	656d6f53 	.word	0x656d6f53
   1c6c8:	656e6f4e 	.word	0x656e6f4e
   1c6cc:	00008e4d 	.word	0x00008e4d
   1c6d0:	00000004 	.word	0x00000004
   1c6d4:	00000004 	.word	0x00000004
   1c6d8:	0000942b 	.word	0x0000942b
   1c6dc:	00000060 	.word	0x00000060
   1c6e0:	0001c6dc 	.word	0x0001c6dc
   1c6e4:	20697073 	.word	0x20697073
   1c6e8:	73756c66 	.word	0x73756c66
   1c6ec:	61662068 	.word	0x61662068
   1c6f0:	6c69      	.short	0x6c69
   1c6f2:	552f      	.short	0x552f
   1c6f4:	73726573 	.word	0x73726573
   1c6f8:	70754c2f 	.word	0x70754c2f
   1c6fc:	502f7970 	.word	0x502f7970
   1c700:	54656e69 	.word	0x54656e69
   1c704:	2f656d69 	.word	0x2f656d69
   1c708:	656e6970 	.word	0x656e6970
   1c70c:	656d6974 	.word	0x656d6974
   1c710:	7375722d 	.word	0x7375722d
   1c714:	796d2d74 	.word	0x796d2d74
   1c718:	7477656e 	.word	0x7477656e
   1c71c:	7375722f 	.word	0x7375722f
   1c720:	74732f74 	.word	0x74732f74
   1c724:	35333737 	.word	0x35333737
   1c728:	64636c2d 	.word	0x64636c2d
   1c72c:	7461622d 	.word	0x7461622d
   1c730:	722d6863 	.word	0x722d6863
   1c734:	72732f73 	.word	0x72732f73
   1c738:	696c2f63 	.word	0x696c2f63
   1c73c:	73722e62 	.word	0x73722e62
   1c740:	20697073 	.word	0x20697073
   1c744:	61746164 	.word	0x61746164
   1c748:	69616620 	.word	0x69616620
   1c74c:	0000006c 	.word	0x0000006c
   1c750:	0001c6f2 	.word	0x0001c6f2
   1c754:	0000004e 	.word	0x0000004e
   1c758:	000000b0 	.word	0x000000b0
   1c75c:	00000009 	.word	0x00000009
   1c760:	0001c6f2 	.word	0x0001c6f2
   1c764:	0000004e 	.word	0x0000004e
   1c768:	00000098 	.word	0x00000098
   1c76c:	0000000d 	.word	0x0000000d
   1c770:	20697073 	.word	0x20697073
   1c774:	20646d63 	.word	0x20646d63
   1c778:	6c696166 	.word	0x6c696166
   1c77c:	0001c6f2 	.word	0x0001c6f2
   1c780:	0000004e 	.word	0x0000004e
   1c784:	00000097 	.word	0x00000097
   1c788:	00000009 	.word	0x00000009
   1c78c:	0001c6f2 	.word	0x0001c6f2
   1c790:	0000004e 	.word	0x0000004e
   1c794:	0000009d 	.word	0x0000009d
   1c798:	00000011 	.word	0x00000011
   1c79c:	0001c6f2 	.word	0x0001c6f2
   1c7a0:	0000004e 	.word	0x0000004e
   1c7a4:	0000009c 	.word	0x0000009c
   1c7a8:	0000000d 	.word	0x0000000d
   1c7ac:	0001c6f2 	.word	0x0001c6f2
   1c7b0:	0000004e 	.word	0x0000004e
   1c7b4:	000000c5 	.word	0x000000c5
   1c7b8:	0000002d 	.word	0x0000002d
   1c7bc:	0001c6f2 	.word	0x0001c6f2
   1c7c0:	0000004e 	.word	0x0000004e
   1c7c4:	000000c9 	.word	0x000000c9
   1c7c8:	0000002d 	.word	0x0000002d
   1c7cc:	0001c6f2 	.word	0x0001c6f2
   1c7d0:	0000004e 	.word	0x0000004e
   1c7d4:	000000d8 	.word	0x000000d8
   1c7d8:	00000019 	.word	0x00000019
   1c7dc:	00000000 	.word	0x00000000

0001c7e0 <str.0>:
   1c7e0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1c7f0:	20687469 7265766f 776f6c66 0001c6f2     ith overflow....
   1c800:	0000004e 000000d9 00000019 0001c6f2     N...............
   1c810:	0000004e 000000db 00000019 0001c6f2     N...............
   1c820:	0000004e 000000dc 00000019 20697073     N...........spi 
   1c830:	74696e69 69616620 0000006c 0001c6f2     init fail.......
   1c840:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1c850:	0001c84c 012d2c01 00002d2c 0001c854     L....,-.,-..T...
   1c860:	00000007 0001c860 008402a2 0001c868     ....`.......h...
   1c870:	000000c5 0001c870 0000000a 0001c878     ....p.......x...
   1c880:	00002a8a 0001c880 0000ee8a 0001c888     .*..............
   1c890:	0000000e 0001c890 00000000 0001c898     ................
   1c8a0:	00000008 0001c8a0 00000005 0001c8a8     ................
   1c8b0:	0001c6f2 0000004e 00000088 00000009     ....N...........
   1c8c0:	6573552f 4c2f7372 79707075 61632e2f     /Users/Luppy/.ca
   1c8d0:	2f6f6772 69676572 79727473 6372732f     rgo/registry/src
   1c8e0:	7469672f 2e627568 2d6d6f63 63636531     /github.com-1ecc
   1c8f0:	39393236 65396264 33323863 62696c2f     6299db9ec823/lib
   1c900:	70696863 2e302d38 2f322e31 2f637273     chip8-0.1.2/src/
   1c910:	2e62696c 00007372 0001c8c0 00000056     lib.rs......V...
   1c920:	0000009d 00000014 0001c8c0 00000056     ............V...
   1c930:	000000d4 00000011 0001c8c0 00000056     ............V...
   1c940:	000000d5 0000001a 00000000 00000000     ................

0001c950 <str.0>:
   1c950:	65747461 2074706d 61206f74 77206464     attempt to add w
   1c960:	20687469 7265766f 776f6c66 0001c8c0     ith overflow....
   1c970:	00000056 000000d5 00000011 00000005     V...............
   1c980:	0001c97c 4c205d5b 78562044 495b202c     |...[] LD Vx, [I
   1c990:	0000005d 0001c984 00000001 0001c985     ]...............
   1c9a0:	0000000c 0001c994 00000000 00000020     ............ ...
   1c9b0:	00000008 00000002 00000000 00000000     ................
   1c9c0:	00000004 00000003 0001c9a8 6362696c     ............libc
   1c9d0:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1c9e0:	6e6e6e20 00000040 00000020 0001c9cc      nnn@... .......
   1c9f0:	00000008 0001c9cc 00000008 0001c8c0     ................
   1ca00:	00000056 000001a1 0001c9ec 0001c8c0     V...............
   1ca10:	00000056 000001a3 0000001d 0001c8c0     V...............
   1ca20:	00000056 000001a4 0000002a 0001c8c0     V.......*.......
   1ca30:	00000056 000001a4 00000021 0001c8c0     V.......!.......
   1ca40:	00000056 000001a4 00000015 444c205d     V...........] LD
   1ca50:	5d495b20 7856202c 0001c984 00000001      [I], Vx........
   1ca60:	0001ca4c 0000000c 0001ca58 0001c9cc     L.......X.......
   1ca70:	00000008 0001c9cc 00000008 0001c8c0     ................
   1ca80:	00000056 0000019a 0001ca6c 0001c8c0     V.......l.......
   1ca90:	00000056 0000019c 0000001d 0001c8c0     V...............
   1caa0:	00000056 0000019d 00000035 0001c8c0     V.......5.......
   1cab0:	00000056 0000019d 0000001e 0001c8c0     V...............
   1cac0:	00000056 0000019d 00000015 444c205d     V...........] LD
   1cad0:	202c4220 00007856 0001c984 00000001      B, Vx..........
   1cae0:	0001cacc 0000000a 0001cad8 0001c9cc     ................
   1caf0:	00000008 0001c9cc 00000008 0001c8c0     ................
   1cb00:	00000056 00000193 0001caec 0001c8c0     V...............
   1cb10:	00000056 00000194 0000001b 0001c8c0     V...............
   1cb20:	00000056 00000195 00000011 0001c8c0     V...............
   1cb30:	00000056 00000196 0000001a 0001c8c0     V...............
   1cb40:	00000056 00000196 00000011 0001c8c0     V...............
   1cb50:	00000056 00000197 0000001a 0001c8c0     V...............
   1cb60:	00000056 00000197 00000011 444c205d     V...........] LD
   1cb70:	202c4620 00007856 0001c984 00000001      F, Vx..........
   1cb80:	0001cb6c 0000000a 0001cb78 0001c9cc     l.......x.......
   1cb90:	00000008 0001c9cc 00000008 0001c8c0     ................
   1cba0:	00000056 0000018f 0001cb8c 0001c8c0     V...............
   1cbb0:	00000056 00000190 0000001b 0001c8c0     V...............
   1cbc0:	00000056 00000190 0000001a 00000000     V...............

0001cbd0 <str.1>:
   1cbd0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1cbe0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1cbf0:	41205d77 49204444 7856202c 0001c984     w] ADD I, Vx....
   1cc00:	00000001 0001cbf1 0000000b 0001cbfc     ................
   1cc10:	0001c9cc 00000008 0001c9cc 00000008     ................
   1cc20:	0001c8c0 00000056 0000018b 0001cc10     ....V...........
   1cc30:	0001c8c0 00000056 0000018c 0000002e     ....V...........
   1cc40:	444c205d 2c545320 00785620 0001c984     ] LD ST, Vx.....
   1cc50:	00000001 0001cc40 0000000b 0001cc4c     ....@.......L...
   1cc60:	0001c9cc 00000008 0001c9cc 00000008     ................
   1cc70:	0001c8c0 00000056 00000187 0001cc60     ....V.......`...
   1cc80:	0001c8c0 00000056 00000188 0000001b     ....V...........
   1cc90:	444c205d 2c544420 00785620 0001c984     ] LD DT, Vx.....
   1cca0:	00000001 0001cc90 0000000b 0001cc9c     ................
   1ccb0:	0001c9cc 00000008 0001c9cc 00000008     ................
   1ccc0:	0001c8c0 00000056 00000183 0001ccb0     ....V...........
   1ccd0:	0001c8c0 00000056 00000184 0000001b     ....V...........
   1cce0:	444c205d 2c785620 00004b20 0001c984     ] LD Vx, K......
   1ccf0:	00000001 0001cce0 0000000a 0001ccec     ................
   1cd00:	0001c9cc 00000008 0001c9cc 00000008     ................
   1cd10:	0001c8c0 00000056 0000017f 0001cd00     ....V...........
   1cd20:	0001c8c0 00000056 00000180 00000011     ....V...........
   1cd30:	444c205d 2c785620 00544420 0001c984     ] LD Vx, DT.....
   1cd40:	00000001 0001cd30 0000000b 0001cd3c     ....0.......<...
   1cd50:	0001c9cc 00000008 0001c9cc 00000008     ................
   1cd60:	0001c8c0 00000056 0000017b 0001cd50     ....V...{...P...
   1cd70:	0001c8c0 00000056 0000017c 00000011     ....V...|.......
   1cd80:	4b53205d 5620504e 00000078 0001c984     ] SKNP Vx.......
   1cd90:	00000001 0001cd80 00000009 0001cd8c     ................
   1cda0:	0001c9cc 00000008 0001c9cc 00000008     ................
   1cdb0:	0001c8c0 00000056 00000175 0001cda0     ....V...u.......
   1cdc0:	0001c8c0 00000056 00000176 00000021     ....V...v...!...
   1cdd0:	0001c984 00000001 0001c9d4 00000008     ................
   1cde0:	0001cdd0 0001c9cc 00000008 0001c9cc     ................
   1cdf0:	00000008 0001c8c0 00000056 0000016f     ........V...o...
   1ce00:	0001cde4 0001c8c0 00000056 00000170     ........V...p...
   1ce10:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1ce20:	006e202c 0001c984 00000001 0001ce14     , n.............
   1ce30:	0000000f 0001ce24 0001c9cc 00000008     ....$...........
   1ce40:	0001c9cc 00000008 0001c8c0 00000056     ............V...
   1ce50:	00000156 0001ce38 0001c8c0 00000056     V...8.......V...
   1ce60:	00000157 0000001d 0001c8c0 00000056     W...........V...
   1ce70:	00000158 0000001d 0001c8c0 00000056     X...........V...
   1ce80:	0000015e 00000026 0001c8c0 00000056     ^...&.......V...
   1ce90:	0000015e 0000001d 0001c8c0 00000056     ^...........V...
   1cea0:	00000160 00000021 00000000 00000000     `...!...........

0001ceb0 <str.2>:
   1ceb0:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1cec0:	6574616c 65687420 6d657220 646e6961     late the remaind
   1ced0:	77207265 20687469 69642061 6f736976     er with a diviso
   1cee0:	666f2072 72657a20 0000006f 0001c8c0     r of zero.......
   1cef0:	00000056 00000163 00000025 0001c8c0     V...c...%.......
   1cf00:	00000056 00000165 0000002d 00000000     V...e...-.......

0001cf10 <str.3>:
   1cf10:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1cf20:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1cf30:	00000077 0001c8c0 00000056 00000165     w.......V...e...
   1cf40:	00000028 00000000 00000000 00000000     (...............

0001cf50 <str.4>:
   1cf50:	65747461 2074706d 73206f74 74666968     attempt to shift
   1cf60:	66656c20 69772074 6f206874 66726576      left with overf
   1cf70:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1cf80:	0001c984 00000001 0001cf73 0000000c     ........s.......
   1cf90:	0001cf80 0001c9cc 00000008 0001c9cc     ................
   1cfa0:	00000008 0001c8c0 00000056 00000152     ........V...R...
   1cfb0:	0001cf94 0001c8c0 00000056 00000153     ........V...S...
   1cfc0:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1cfd0:	0001c984 00000001 0001cfc4 0000000c     ................
   1cfe0:	0001cfd0 0001c9cc 00000008 0001c9cc     ................
   1cff0:	00000008 0001c8c0 00000056 0000014e     ........V...N...
   1d000:	0001cfe4 444c205d 202c4920 006e6e6e     ....] LD I, nnn.
   1d010:	0001c984 00000001 0001d004 0000000b     ................
   1d020:	0001d010 0001c9cc 00000008 0001c9cc     ................
   1d030:	00000008 0001c8c0 00000056 0000014a     ........V...J...
   1d040:	0001d024 4e53205d 78562045 7956202c     $...] SNE Vx, Vy
   1d050:	0001c984 00000001 0001d044 0000000c     ........D.......
   1d060:	0001d050 0001c9cc 00000008 0001c9cc     P...............
   1d070:	00000008 0001c8c0 00000056 00000144     ........V...D...
   1d080:	0001d064 0001c8c0 00000056 00000145     d.......V...E...
   1d090:	00000014 0001c8c0 00000056 00000145     ........V...E...
   1d0a0:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1d0b0:	0001c984 00000001 0001d0a4 0000000c     ................
   1d0c0:	0001d0b0 0001c9cc 00000008 0001c9cc     ................
   1d0d0:	00000008 0001c8c0 00000056 0000013f     ........V...?...
   1d0e0:	0001d0c4 0001c8c0 00000056 00000140     ........V...@...
   1d0f0:	00000020 0001c8c0 00000056 00000141      .......V...A...
   1d100:	0000001d 0001c8c0 00000056 00000141     ........V...A...
   1d110:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   1d120:	00000079 0001c984 00000001 0001d114     y...............
   1d130:	0000000d 0001d124 0001c9cc 00000008     ....$...........
   1d140:	0001c9cc 00000008 0001c8c0 00000056     ............V...
   1d150:	00000139 0001d138 0001c8c0 00000056     9...8.......V...
   1d160:	0000013a 0000001e 0001c8c0 00000056     :...........V...
   1d170:	0000013a 00000038 0001c8c0 00000056     :...8.......V...
   1d180:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   1d190:	7956202c 0001c984 00000001 0001d188     , Vy............
   1d1a0:	0000000c 0001d194 0001c9cc 00000008     ................
   1d1b0:	0001c9cc 00000008 0001c8c0 00000056     ............V...
   1d1c0:	00000134 0001d1a8 0001c8c0 00000056     4...........V...
   1d1d0:	00000135 0000001f 0001c8c0 00000056     5...........V...
   1d1e0:	00000136 0000001d 0001c8c0 00000056     6...........V...
   1d1f0:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   1d200:	7956202c 0001c984 00000001 0001d1f8     , Vy............
   1d210:	0000000c 0001d204 0001c9cc 00000008     ................
   1d220:	0001c9cc 00000008 0001c8c0 00000056     ............V...
   1d230:	0000012e 0001d218 0001c8c0 00000056     ............V...
   1d240:	0000012f 0000001e 0001c8c0 00000056     /...........V...
   1d250:	0000012f 00000038 0001c8c0 00000056     /...8.......V...
   1d260:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   1d270:	7956202c 0001c984 00000001 0001d268     , Vy........h...
   1d280:	0000000c 0001d274 0001c9cc 00000008     ....t...........
   1d290:	0001c9cc 00000008 0001c8c0 00000056     ............V...
   1d2a0:	00000128 0001d288 0001c8c0 00000056     (...........V...
   1d2b0:	00000129 0000001e 0001c8c0 00000056     )...........V...
   1d2c0:	00000129 00000038 0001c8c0 00000056     )...8.......V...
   1d2d0:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   1d2e0:	7956202c 0001c984 00000001 0001d2d8     , Vy............
   1d2f0:	0000000c 0001d2e4 0001c9cc 00000008     ................
   1d300:	0001c9cc 00000008 0001c8c0 00000056     ............V...
   1d310:	00000124 0001d2f8 0001c8c0 00000056     $...........V...
   1d320:	00000125 0000001e 0001c8c0 00000056     %...........V...
   1d330:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   1d340:	7956202c 0001c984 00000001 0001d338     , Vy........8...
   1d350:	0000000c 0001d344 0001c9cc 00000008     ....D...........
   1d360:	0001c9cc 00000008 0001c8c0 00000056     ............V...
   1d370:	00000120 0001d358 0001c8c0 00000056      ...X.......V...
   1d380:	00000121 0000001e 0001c8c0 00000056     !...........V...
   1d390:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   1d3a0:	00795620 0001c984 00000001 0001d398      Vy.............
   1d3b0:	0000000b 0001d3a4 0001c9cc 00000008     ................
   1d3c0:	0001c9cc 00000008 0001c8c0 00000056     ............V...
   1d3d0:	0000011c 0001d3b8 0001c8c0 00000056     ............V...
   1d3e0:	0000011d 0000001e 0001c8c0 00000056     ............V...
   1d3f0:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   1d400:	00795620 0001c984 00000001 0001d3f8      Vy.............
   1d410:	0000000b 0001d404 0001c9cc 00000008     ................
   1d420:	0001c9cc 00000008 0001c8c0 00000056     ............V...
   1d430:	00000118 0001d418 0001c8c0 00000056     ............V...
   1d440:	00000119 0000001d 0001c8c0 00000056     ............V...
   1d450:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   1d460:	6b6b202c 0001c984 00000001 0001d458     , kk........X...
   1d470:	0000000c 0001d464 0001c9cc 00000008     ....d...........
   1d480:	0001c9cc 00000008 0001c8c0 00000056     ............V...
   1d490:	00000114 0001d478 0001c8c0 00000056     ....x.......V...
   1d4a0:	00000115 0000001d 0001c8c0 00000056     ............V...
   1d4b0:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   1d4c0:	006b6b20 0001c984 00000001 0001d4b8      kk.............
   1d4d0:	0000000b 0001d4c4 0001c9cc 00000008     ................
   1d4e0:	0001c9cc 00000008 0001c8c0 00000056     ............V...
   1d4f0:	00000110 0001d4d8 0001c8c0 00000056     ............V...
   1d500:	00000111 00000011 6e49205d 696c6176     ........] Invali
   1d510:	706f2064 0000203a 0001c984 00000001     d op: ..........
   1d520:	0001d508 0000000e 0001d518 00000000     ................
   1d530:	00000020 00000008 00000002 00000000      ...............
   1d540:	00000000 00000004 00000003 00000001     ................
   1d550:	00000020 00000008 00000002 00000000      ...............
   1d560:	00000000 00000004 00000003 0001d52c     ............,...
   1d570:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   1d580:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   1d590:	0001d570 0000001e 00000005 00000032     p...........2...
   1d5a0:	4553205d 2c785620 00795620 0001c984     ] SE Vx, Vy.....
   1d5b0:	00000001 0001d5a0 0000000b 0001d5ac     ................
   1d5c0:	0001c9cc 00000008 0001c9cc 00000008     ................
   1d5d0:	0001c8c0 00000056 0000010a 0001d5c0     ....V...........
   1d5e0:	0001c8c0 00000056 0000010b 00000014     ....V...........
   1d5f0:	0001c8c0 00000056 0000010b 00000021     ....V.......!...
   1d600:	4e53205d 78562045 6b6b202c 0001c984     ] SNE Vx, kk....
   1d610:	00000001 0001d600 0000000c 0001d60c     ................
   1d620:	0001c9cc 00000008 0001c9cc 00000008     ................
   1d630:	0001c8c0 00000056 00000104 0001d620     ....V....... ...
   1d640:	0001c8c0 00000056 00000105 00000014     ....V...........
   1d650:	4553205d 20785620 00006b6b 0001c984     ] SE Vx kk......
   1d660:	00000001 0001d650 0000000a 0001d65c     ....P.......\...
   1d670:	0001c9cc 00000008 0001c9cc 00000008     ................
   1d680:	0001c8c0 00000056 000000fe 0001d670     ....V.......p...
   1d690:	0001c8c0 00000056 000000ff 00000014     ....V...........
   1d6a0:	4143205d 6e204c4c 00006e6e 0001c984     ] CALL nnn......
   1d6b0:	00000001 0001d6a0 0000000a 0001d6ac     ................
   1d6c0:	0001c9cc 00000008 0001c9cc 00000008     ................
   1d6d0:	0001c8c0 00000056 000000f9 0001d6c0     ....V...........
   1d6e0:	0001c984 00000001 0001c9dc 00000008     ................
   1d6f0:	0001d6e0 0001c9cc 00000008 0001c9cc     ................
   1d700:	00000008 0001c8c0 00000056 000000f5     ........V.......
   1d710:	0001d6f4 5953205d 6e6e2053 0000006e     ....] SYS nnn...
   1d720:	0001c984 00000001 0001d714 00000009     ................
   1d730:	0001d720 0001c9cc 00000008 0001c9cc      ...............
   1d740:	00000008 0001c8c0 00000056 000000f1     ........V.......
   1d750:	0001d734 20746f6e 6c706d69 6e656d65     4...not implemen
   1d760:	00646574 0001d570 0000001e 00000002     ted.p...........
   1d770:	00000002 4552205d 00000054 0001c984     ....] RET.......
   1d780:	00000001 0001d774 00000005 0001d77c     ....t.......|...
   1d790:	0001c9cc 00000008 0001c9cc 00000008     ................
   1d7a0:	0001c8c0 00000056 000000ec 0001d790     ....V...........
   1d7b0:	4c43205d 00000053 0001c984 00000001     ] CLS...........
   1d7c0:	0001d7b0 00000005 0001d7b8 0001c9cc     ................
   1d7d0:	00000008 0001c9cc 00000008 0001c8c0     ................
   1d7e0:	00000056 000000e5 0001d7cc 0001c8c0     V...............
   1d7f0:	00000056 00000093 0000001b 0001c8c0     V...............
   1d800:	00000056 00000097 00000009 0001c8c0     V...............
   1d810:	00000056 000000bb 0000000d 0001c8c0     V...............
   1d820:	00000056 000000be 0000000d 00011a2f     V.........../...
   1d830:	00000004 00000004 00012bfb 74737552     .........+..Rust
   1d840:	49484320 630a3850 38706968 00000000      CHIP8.chip8....
   1d850:	00000000 0001d847 00000006 0001d850     ....G.......P...
   1d860:	50494843 74732038 65747261 1a120a64     CHIP8 started...
   1d870:	30302e32 202e4320 62656745 20677265     2.00 C. Egeberg 
   1d880:	382f3831 3139272d 13810380 55f1c8a8     18/8-'91.......U
   1d890:	cca80560 738755f0 72276386 9427e000     `....U.s.c'r..'.
   1d8a0:	e287406e e187276e 0c691a68 006b386a     n@..n'..h.i.j8k.
   1d8b0:	1a6d026c eda85027 d4dcb4da 003ed023     l.m.'P......#.>.
   1d8c0:	cca87c12 008565f0 5284ffc4 ffc4f624     .|...e.....R$...
   1d8d0:	1e265284 a1e00160 f736d627 608e4e12     .R&.`...'.6..N.`
   1d8e0:	646e7a28 d6277a28 07f02a12 10130040     (znd(z'..*..@...
   1d8f0:	06808080 0681a081 00401580 01409a12     ..........@...@.
   1d900:	ff409a12 c8129a12 06809080 0681b081     ..@.............
   1d910:	00401580 0140b212 ff40b212 c812b212     ..@...@...@.....
   1d920:	b4daeda8 006b386a f36eb4da 046ee287     ....j8k...n...n.
   1d930:	326ee187 80807a28 c0810680 15800681     ..n2(z..........
   1d940:	e0120040 e0120140 e012ff40 90805412     @...@...@....T..
   1d950:	d0810680 15800681 f8120040 f8120140     ........@...@...
   1d960:	f812ff40 eda85412 026cd4dc d4dc1a6d     @....T....l.m...
   1d970:	e287cf6e e187206e 7a28196e 3f605412     n...n ..n.(z.T`?
   1d980:	5027a828 b4daeda8 406ed4dc 7080e387     (.'P......n@...p
   1d990:	0030e280 608e3212 8a287a28 1166e000     ..0..2.`(z(...f.
   1d9a0:	caa80a67 1166e627 c8a81067 0064e627     g...'.f.g...'.d.
   1d9b0:	00660865 19ab0f67 22ab69d4 036069d5     e.f.g....i.".i`.
   1d9c0:	003ea828 19abc613 22ab69d4 027469d5     (.>......i.".it.
   1d9d0:	30340275 19ab4813 22ab69d4 036069d5     u.40.H...i.".i`.
   1d9e0:	003ea828 19abc613 22ab69d4 027669d5     (.>......i.".iv.
   1d9f0:	68131636 69d419ab 69d522ab a8280360     6..h...i.".i`.(.
   1da00:	c613003e 69d419ab 69d522ab fe75fe74     >......i.".it.u.
   1da10:	86130034 69d419ab 69d522ab a8280360     4......i.".i`.(.
   1da20:	c613003e 69d419ab 69d522ab 0036fe76     >......i.".iv.6.
   1da30:	4813a613 69d522ab 69d52bab 70831a12     ...H.".i.+.i...p
   1da40:	e283036e 90858084 a1ee066e 036e3214     n.......n....2n.
   1da50:	4a14a1ee a1ee086e 076e6214 7a14a1ee     ...Jn....bn....z
   1da60:	02750343 fe750043 02740243 fe740143     C.u.C.u.C.t.C.t.
   1da70:	50814080 0082ba27 e280086e 92140030     .@.P'...n...0...
   1da80:	2080076e 0542e282 06429a14 0742b214     n.. ..B...B...B.
   1da90:	5027ec14 e287fc6e 40883187 50175089     ..'Pn....1.@.P.P
   1daa0:	50814080 ba270271 086e0082 0030e280     .@.Pq.'...n...0.
   1dab0:	0363f213 0e140275 50814080 ba27fe71     ..c.u....@.Pq.'.
   1dac0:	086e0082 0030e280 0063f213 0e14fe75     ..n...0...c.u...
   1dad0:	50814080 ba270270 086e0082 0030e280     .@.Pp.'...n...0.
   1dae0:	0263f213 0e140274 50814080 ba27fe70     ..c.t....@.Pp.'.
   1daf0:	086e0082 0030e280 0163f213 0e14fe74     ..n...0...c.t...
   1db00:	94d85027 ee00f08e e280f06e 55f03180     'P......n....1.U
   1db10:	54d4f1a8 05610176 004007f0 241418f1     ...Tv.a...@....$
   1db20:	e280f06e 55f03180 54d4f5a8 a0800476     n....1.U...Tv...
   1db30:	ba27b081 e280f06e d2140030 e3870c6e     ..'.n...0...n...
   1db40:	d081c080 f06eba27 0030e280 306ee414     ....'.n...0...n0
   1db50:	ff60e387 15f018f0 01432414 02433a64     ..`......$C.d:C.
   1db60:	24140064 70837082 e2820c6e b081a080     d..$.p.pn.......
   1db70:	eda8ba27 e280f06e 24150030 0c42b4da     '...n...0..$..B.
   1db80:	0042027b 0842fe7b 0442027a b4dafe7a     {.B.{.B.z.B.z...
   1db90:	806eee00 003107f1 0034d415 0081d415     ..n...1...4.....
   1dba0:	003f0e83 90835615 004fb583 00338c15     ..?..V....O...3.
   1dbb0:	e3877415 a5838083 bc15004f a4150033     .t......O...3...
   1dbc0:	d415e387 a5838083 bc15004f a4150033     ........O...3...
   1dbd0:	9083e387 004fb583 00338c15 e3877415     ......O...3..t..
   1dbe0:	4063d415 00413281 b4dad415 b4da027b     ..c@.2A.....{...
   1dbf0:	e287f36e 21870c62 1063ee00 00413281     n...b..!..c..2A.
   1dc00:	b4dad415 b4dafe7b e287f36e 21870062     ....{...n...b..!
   1dc10:	2063ee00 00413281 b4dad415 b4da027a     ..c .2A.....z...
   1dc20:	e287f36e 21870862 8063ee00 00413281     n...b..!..c..2A.
   1dc30:	b4dad415 b4dafe7a e287f36e 21870462     ....z...n...b..!
   1dc40:	f0c1ee00 00301280 0c6ee415 e382e387     ......0...n.....
   1dc50:	b4da0e15 004f0e80 0462f215 1416fe7a     ......O...b.z...
   1dc60:	004f0e80 0c62fe15 1416027b 004f0e80     ..O...b.{.....O.
   1dc70:	08620a16 1416027a 004f0e80 0062dc15     ..b.z.....O...b.
   1dc80:	b4dafe7b e287f36e ee002187 70837082     {...n....!...p.p
   1dc90:	e282306e d081c080 eda8ba27 e280f06e     n0......'...n...
   1dca0:	4c160030 3042d4dc 0042027d 2042fe7d     0..L..B0}.B.}.B 
   1dcb0:	1042027c d4dcfe7c 806eee00 003107f1     |.B.|.....n...1.
   1dcc0:	00340417 00810417 004f0e83 90837e16     ..4.......O..~..
   1dcd0:	004fd583 0033b616 e3879c16 c5838083     ..O...3.........
   1dce0:	ea16004f d0160033 0417e387 c5838083     O...3...........
   1dcf0:	ea16004f d0160033 9083e387 004fd583     O...3.........O.
   1dd00:	0033b616 e3879c16 40630417 00413281     ..3.......c@.2A.
   1dd10:	d4dc0417 d4dc027d cf6ee387 3062e287     ....}.....n...b0
   1dd20:	ee002187 32811063 04170041 fe7dd4dc     .!..c..2A.....}.
   1dd30:	e387d4dc e287cf6e 21870062 2063ee00     ....n...b..!..c 
   1dd40:	00413281 d4dc0417 d4dc027c cf6ee387     .2A.....|.....n.
   1dd50:	2062e287 ee002187 32818063 04170041     ..b .!..c..2A...
   1dd60:	fe7cd4dc e387d4dc e287cf6e 21871062     ..|.....n...b..!
   1dd70:	f0c1ee00 00301280 e3871617 e387306e     ......0.....n0..
   1dd80:	3616e382 0e80d4dc 2417004f fe7c9062     ...6....O..$b.|.
   1dd90:	0e804617 3017004f 027d3062 0e804617     .F..O..0b0}..F..
   1dda0:	3c17004f 027ca062 0e804617 0c17004f     O..<b.|..F..O...
   1ddb0:	fe7d0062 4f6ed4dc 2187e287 7080ee00     b.}...nO...!...p
   1ddc0:	e280036e 80810e80 026e9481 0041e281     n.........n...A.
   1ddd0:	0e800170 cda80e80 94d81ef0 ee00f08e     p...............
   1dde0:	19a9006e 1efe1efe 1efe1efe 34ab65f3     n............e.4
   1ddf0:	1efe1efe 1efe1efe 017e55f3 7417803e     .........U~.>..t
   1de00:	2382ee00 0f6e3383 30812080 e280be27     ...#.3n.. .0'...
   1de10:	f9a80e80 32d21ef0 40320272 23829a17     .......2r.2@...#
   1de20:	20430273 9a17ee00 02710270 06810680     s.C ....p.q.....
   1de30:	0e810e81 0e810e81 1ef134ab 1ef01ef1     .........4......
   1de40:	ee0065f0 65f0cca8 55f00680 a1e00160     .e.....e...U`...
   1de50:	ee00e017 016e65f1 00824384 10651083     .....en..C....e.
   1de60:	004f5583 004fe582 27650c18 004f5582     .UO...O...e'.UO.
   1de70:	20800c18 e4843081 29f4f017 067675d6     ... .0.....).uv.
   1de80:	00824384 e8651083 004f5583 004fe582     .C....e..UO...O.
   1de90:	03653418 004f5582 20803418 e4843081     .4e..UO..4. .0..
   1dea0:	29f41818 067675d6 00824384 64651083     ...).uv..C....ed
   1deb0:	004f5583 004fe582 20805418 e4843081     .UO...O..T. .0..
   1dec0:	29f44018 067675d6 00824384 0a651083     .@.).uv..C....e.
   1ded0:	004f5583 30816e18 6018e484 75d629f4     .UO..n.0...`.).u
   1dee0:	29f10676 ee0075d6 65f1c8a8 003fe481     v..).u.....e..?.
   1def0:	c8a80170 ee0055f1 65f3c8a8 258e008e     p....U.....e...%
   1df00:	ee00004f a218003e 358e108e ee00004f     O...>......5O...
   1df10:	55f1caa8 e38eee00 ff630f62 a1e21061     ...U....b.c.a...
   1df20:	3481c418 b0180031 34801061 b0180030     ...41...a..40...
   1df30:	016eee00 0000ee00 00050000 00207050     ..n.........Pp .
   1df40:	00207050 00603060 00603060 00306030     Pp .`0`.`0`.0`0.
   1df50:	00306030 00507020 00507020 00707020     0`0. pP. pP. pp.
   1df60:	00002000 00000000 00000000 00000000     . ..............
   1df70:	00008000 c0000000 80000000 c0000080     ................
   1df80:	c0808080 0c008000 08080808 08080808     ................
   1df90:	08080808 0c0d0808 08080808 08080808     ................
   1dfa0:	08080808 0a0d0808 05050565 0505e505     ........e.......
   1dfb0:	050505e5 0a0ac505 05050565 0505e505     ........e.......
   1dfc0:	050505e5 0a0ac505 08080c05 0d0c050f     ................
   1dfd0:	08080805 0f0e050d 08080c05 0d0c050f     ................
   1dfe0:	08080805 0a0a050d 06650a05 0a0a9505     ..........e.....
   1dff0:	c5050535 0505350a 05650a95 0a0a9505     5....5....e.....
   1e000:	c5060535 0a0a050a 08050f05 08080808     5...............
   1e010:	050f080c 08080808 08050f08 08080c08     ................
   1e020:	050f0808 0a0a050f 05b50575 c5050505     ........u.......
   1e030:	b505650a 0505e505 05b505e5 05650ac5     .e............e.
   1e040:	b5050505 0a0ad505 08080c05 050d0808     ................
   1e050:	080c050f 0f08050f 0d080805 0c050f05     ................
   1e060:	08080808 0f0a050d 05650f05 350ac505     ..........e....5
   1e070:	650a95e5 0505b005 0ac505b5 0a95e535     ...e........5...
   1e080:	c5050565 070f050f 08d50574 0f0e050f     e.......t.......
   1e090:	050f0805 0808080c 08050d08 0f08050f     ................
   1e0a0:	750f0805 0a07d405 05350a05 0505f505     ...u......5.....
   1e0b0:	d50505b5 0c0d0808 05750f08 0505b505     ..........u.....
   1e0c0:	950505f5 0a0a050a 08080805 080c050d     ................
   1e0d0:	350d0808 0a0ac505 0c950565 0d080808     ...5....e.......
   1e0e0:	08080c05 0a0a050f c5060575 0808050a     ........u.......
   1e0f0:	08080808 0f08050f 08080805 0f080808     ................
   1e100:	06650a05 0a0ad505 050d0c05 0505350a     ..e..........5..
   1e110:	05e50505 0505f505 e50505f5 05050505     ................
   1e120:	0c050a95 0a0a050d 050f0805 08080808     ................
   1e130:	0c050f08 0f08050d 050d0c05 08080808     ................
   1e140:	08050f08 0a0a050f b5050535 05050505     ........5.......
   1e150:	0a950505 0505350a 350a0a95 05050505     .....5.....5....
   1e160:	05b50505 080a9505 08080808 08080808     ................
   1e170:	0f080808 08080808 08080f08 08080808     ................
   1e180:	08080808 3c0f0808 42999942 0f10013c     .......<B..B<...
   1e190:	32328478 10007884 fefc78e0 007884fe     x.22.x...x....x.
   1e1a0:	4843e010 20385049 656e6f64 4948430a     ..CHIP8 done.CHI
   1e1b0:	73203850 6c756f68 6f6e2064 6e652074     P8 should not en
   1e1c0:	73757264 70612f74 72732f70 68632f63     drust/app/src/ch
   1e1d0:	2e387069 00007372 0001e1c1 00000015     ip8.rs..........
   1e1e0:	0000005f 00000005 0a79656b 766f2078     _.......key.x ov
   1e1f0:	6c667265 0000776f 0001e1c1 00000015     erflow..........
   1e200:	000000aa 00000009 766f2079 6c667265     ........y overfl
   1e210:	0000776f 0001e1c1 00000015 000000ab     ow..............
   1e220:	00000009 0001e1c1 00000015 000000ac     ................
   1e230:	00000015 00000000 00000000 00000000     ................

0001e240 <str.0>:
   1e240:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1e250:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1e260:	00000077 0001e1c1 00000015 000000ac     w...............
   1e270:	00000011 00000000 00000000 00000000     ................

0001e280 <str.1>:
   1e280:	65747461 2074706d 61206f74 77206464     attempt to add w
   1e290:	20687469 7265766f 776f6c66 0001e1c1     ith overflow....
   1e2a0:	00000015 000000ad 00000012 0001e1c1     ................
   1e2b0:	00000015 000000c9 00000009 0001e1c1     ................
   1e2c0:	00000015 000000ca 00000009 0001e1c1     ................
   1e2d0:	00000015 000000cb 00000015 0001e1c1     ................
   1e2e0:	00000015 000000cb 00000011 0001e1c1     ................
   1e2f0:	00000015 000000cc 00000012 20646162     ............bad 
   1e300:	657a6973 73746573 20657a69 7265766f     sizesetsize over
   1e310:	776f6c66 666f5f78 74657366 666f5f79     flowx_offsety_of
   1e320:	74657366 0001e1c1 00000015 000000d2     fset............
   1e330:	00000009 000a202c 0001e1c1 00000015     ...., ..........
   1e340:	000000dd 00000012 0001e1c1 00000015     ................
   1e350:	0000010f 00000011 00000000 00000000     ................

0001e360 <str.2>:
   1e360:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1e370:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1e380:	00000077 0001e1c1 00000015 00000110     w...............
   1e390:	00000012 0001e1c1 00000015 00000112     ................
   1e3a0:	00000008 0001e1c1 00000015 00000119     ................
   1e3b0:	0000001f 0001e1c1 00000015 0000011a     ................
   1e3c0:	00000020 0001e1c1 00000015 0000011f      ...............
   1e3d0:	0000000d 0001e1c1 00000015 00000122     ............"...
   1e3e0:	00000011 20746573 65786970 6620736c     ....set pixels f
   1e3f0:	656c6961 00000064 0001e1c1 00000015     ailed...........
   1e400:	00000133 00000005 0001e1c1 00000015     3...............
   1e410:	00000195 00000009 0001e1c1 00000015     ................
   1e420:	000001a0 00000023 0001e1c1 00000015     ....#...........
   1e430:	000001a0 00000011 0001e1c1 00000015     ................
   1e440:	000001a1 0000002c 0001e1c1 00000015     ....,...........
   1e450:	000001a3 00000036 0001e1c1 00000015     ....6...........
   1e460:	000001a3 00000016 0001e1c1 00000015     ................
   1e470:	000001de 00000009 0001e1c1 00000015     ................
   1e480:	000001df 00000009 0001e1c1 00000015     ................
   1e490:	000001e6 0000000d 0001e1c1 00000015     ................
   1e4a0:	000001f3 00000009 0001e1c1 00000015     ................
   1e4b0:	000001f7 0000000d 0001e1c1 00000015     ................
   1e4c0:	00000203 00000024 0001e1c1 00000015     ....$...........
   1e4d0:	00000203 00000036 0001e1c1 00000015     ....6...........
   1e4e0:	0000020b 00000016 50494843 6f742038     ........CHIP8 to
   1e4f0:	20686375 20746f6e 646e6168 0a64656c     uch not handled.
   1e500:	0001e1c1 00000015 00000231 00000015     ........1.......
   1e510:	0001e1c1 00000015 00000232 00000015     ........2.......
   1e520:	0001e1c1 00000015 00000234 00000015     ........4.......
   1e530:	0001e1c1 00000015 00000235 00000015     ........5.......
   1e540:	0001e1c1 00000015 00000238 00000015     ........8.......
   1e550:	0001e1c1 00000015 00000239 00000015     ........9.......
   1e560:	0001e1c1 00000015 0000023b 00000015     ........;.......
   1e570:	0001e1c1 00000015 0000023c 00000015     ........<.......
   1e580:	0001e1c1 00000015 0000024f 00000015     ........O.......
   1e590:	0001e1c1 00000015 00000250 00000015     ........P.......
   1e5a0:	0001e1c1 00000015 00000252 00000015     ........R.......
   1e5b0:	0001e1c1 00000015 00000253 00000015     ........S.......
   1e5c0:	0001e1c1 00000015 00000256 00000015     ........V.......
   1e5d0:	0001e1c1 00000015 00000257 00000015     ........W.......
   1e5e0:	0001e1c1 00000015 00000259 00000015     ........Y.......
   1e5f0:	0001e1c1 00000015 0000025a 00000015     ........Z.......
   1e600:	0001e1c1 00000015 0000025c 00000015     ........\.......
   1e610:	0001e1c1 00000015 0000025d 00000015     ........].......
   1e620:	0001e1c1 00000015 0000025f 00000015     ........_.......
   1e630:	0001e1c1 00000015 00000260 00000015     ........`.......
   1e640:	0001e1c1 00000015 00000268 00000019     ........h.......
   1e650:	0001e1c1 00000015 00000270 00000018     ........p.......
	...
   1e668:	00010000 00010001 00020001 00020002     ................
   1e678:	00030002 00030003 00040003 00040004     ................
   1e688:	00050004 00050005 00060005 00060006     ................
   1e698:	00070006 00070007 00080007 00080008     ................
   1e6a8:	00090009 00090009 000a000a 000a000a     ................
   1e6b8:	000b000b 000c000b 000c000c 000d000c     ................
   1e6c8:	000d000d 000e000e 000e000e 000f000f     ................
   1e6d8:	0010000f 00100010 00110011 00110011     ................
   1e6e8:	00120012 00130012 00130013 00140014     ................
   1e6f8:	00140014 00150015 00160015 00160016     ................
   1e708:	00170017 00170017 00180018 00190018     ................
   1e718:	00190019 001a0019 001a001a 001b001b     ................
   1e728:	001c001b 001c001c 001d001c 001d001d     ................
   1e738:	001e001e 001f001e 001f001f 0020001f     .............. .
   1e748:	00200020 00200020 00000000 00000000      . . . .........
   1e758:	00010000 00010001 00020001 00020002     ................
   1e768:	00030002 00030003 00040003 00040004     ................
   1e778:	00050004 00050005 00060005 00060006     ................
   1e788:	00070006 00070007 00080007 00080008     ................
   1e798:	00090009 00090009 000a000a 000a000a     ................
   1e7a8:	000b000b 000b000b 000c000c 000d000c     ................
   1e7b8:	000d000d 000e000d 000e000e 000f000e     ................
   1e7c8:	000f000f 00100010 00100010 00110011     ................
   1e7d8:	00120011 00120012 00130012 00130013     ................
   1e7e8:	00140013 00140014 00150015 00160015     ................
   1e7f8:	00160016 00170016 00170017 00180018     ................
   1e808:	00190018 00190019 001a001a 001b001a     ................
   1e818:	001b001b 001c001c 001d001c 001d001d     ................
   1e828:	001e001e 001e001e 001f001f 0020001f     .............. .
   1e838:	00200020 00200020 00000000 00000000      . . . .........
   1e848:	00010000 00010001 00020001 00020002     ................
   1e858:	00030002 00030003 00040003 00040004     ................
   1e868:	00050004 00050005 00060005 00060006     ................
   1e878:	00070006 00070007 00080007 00080008     ................
   1e888:	00090009 00090009 000a000a 000a000a     ................
   1e898:	000b000b 000b000b 000c000c 000d000c     ................
   1e8a8:	000d000d 000e000d 000e000e 000f000f     ................
   1e8b8:	000f000f 00100010 00100010 00110011     ................
   1e8c8:	00120011 00120012 00130012 00130013     ................
   1e8d8:	00140013 00140014 00150015 00160015     ................
   1e8e8:	00160016 00170016 00170017 00180018     ................
   1e8f8:	00190018 00190019 001a001a 001b001a     ................
   1e908:	001b001b 001c001c 001d001c 001d001d     ................
   1e918:	001e001e 001e001e 001f001f 0020001f     .............. .
   1e928:	00200020 00200020 00000000 00000000      . . . .........
   1e938:	00010000 00010001 00020001 00020002     ................
   1e948:	00030002 00030003 00040003 00040004     ................
   1e958:	00050004 00050005 00060005 00060006     ................
   1e968:	00070006 00070007 00080008 00080008     ................
   1e978:	00090009 00090009 000a000a 000a000a     ................
   1e988:	000b000b 000b000b 000c000c 000d000c     ................
   1e998:	000d000d 000e000d 000e000e 000f000f     ................
   1e9a8:	000f000f 00100010 00100010 00110011     ................
   1e9b8:	00120011 00120012 00130012 00130013     ................
   1e9c8:	00140014 00140014 00150015 00160015     ................
   1e9d8:	00160016 00170017 00170017 00180018     ................
   1e9e8:	00190018 00190019 001a001a 001b001a     ................
   1e9f8:	001b001b 001c001c 001d001c 001d001d     ................
   1ea08:	001e001e 001e001e 001f001f 0020001f     .............. .
   1ea18:	00200020 00200020 00000000 00000000      . . . .........
   1ea28:	00010000 00010001 00020001 00020002     ................
   1ea38:	00030002 00030003 00040003 00040004     ................
   1ea48:	00050004 00050005 00060005 00060006     ................
   1ea58:	00070006 00070007 00080008 00080008     ................
   1ea68:	00090009 00090009 000a000a 000a000a     ................
   1ea78:	000b000b 000b000b 000c000c 000d000c     ................
   1ea88:	000d000d 000e000d 000e000e 000f000f     ................
   1ea98:	000f000f 00100010 00100010 00110011     ................
   1eaa8:	00120011 00120012 00130012 00130013     ................
   1eab8:	00140014 00140014 00150015 00160015     ................
   1eac8:	00160016 00170017 00170017 00180018     ................
   1ead8:	00190018 00190019 001a001a 001b001a     ................
   1eae8:	001b001b 001c001c 001d001c 001d001d     ................
   1eaf8:	001e001e 001f001e 001f001f 0020001f     .............. .
   1eb08:	00200020 00200020 00000000 00000000      . . . .........
   1eb18:	00010000 00010001 00020001 00020002     ................
   1eb28:	00030002 00030003 00040003 00040004     ................
   1eb38:	00050004 00050005 00060005 00060006     ................
   1eb48:	00070006 00070007 00080008 00080008     ................
   1eb58:	00090009 00090009 000a000a 000a000a     ................
   1eb68:	000b000b 000c000b 000c000c 000d000c     ................
   1eb78:	000d000d 000e000d 000e000e 000f000f     ................
   1eb88:	000f000f 00100010 00110010 00110011     ................
   1eb98:	00120011 00120012 00130012 00130013     ................
   1eba8:	00140014 00140014 00150015 00160015     ................
   1ebb8:	00160016 00170017 00170017 00180018     ................
   1ebc8:	00190018 00190019 001a001a 001b001a     ................
   1ebd8:	001b001b 011c001c 011d011c 011d011d     ................
   1ebe8:	011e011e 011f011e 011f011f 0120011f     .............. .
   1ebf8:	01200120 01200120 00000000 00000000      . . . .........
   1ec08:	00010000 00010001 00020001 00020002     ................
   1ec18:	00030002 00030003 00040003 00040004     ................
   1ec28:	00050004 00050005 00060005 00060006     ................
   1ec38:	00070007 00070007 00080008 00080008     ................
   1ec48:	00090009 00090009 000a000a 000a000a     ................
   1ec58:	000b000b 000c000b 000c000c 000d000c     ................
   1ec68:	000d000d 000e000d 000e000e 000f000f     ................
   1ec78:	000f000f 00100010 00110010 00110011     ................
   1ec88:	00120011 00120012 00130012 00130013     ................
   1ec98:	00140014 00140014 00150015 00160015     ................
   1eca8:	01160116 01170117 01180117 01180118     ................
   1ecb8:	01190118 01190119 011a011a 011b011a     ................
   1ecc8:	011b011b 011c011c 011d011c 011d011d     ................
   1ecd8:	011e011e 011f011e 011f011f 0120011f     .............. .
   1ece8:	01200120 01200120 01000100 01000100      . . . .........
   1ecf8:	01010100 01010101 01020101 01020102     ................
   1ed08:	01030102 01030103 01040103 01040104     ................
   1ed18:	01050104 01050105 01060105 01060106     ................
   1ed28:	01070107 01070107 01080108 01080108     ................
   1ed38:	01090109 01090109 010a010a 010a010a     ................
   1ed48:	010b010b 010c010b 010c010c 010d010c     ................
   1ed58:	010d010d 010e010d 010e010e 010f010f     ................
   1ed68:	010f010f 01100110 01110110 01110111     ................
   1ed78:	01120111 01120112 01130112 01130113     ................
   1ed88:	01140114 01140114 01150115 01160115     ................
   1ed98:	01160116 01170117 01180117 01180118     ................
   1eda8:	01190118 01190119 011a011a 011b011a     ................
   1edb8:	011b011b 011c011c 011d011c 011d011d     ................
   1edc8:	011e011e 011f011e 011f011f 01200120     ............ . .
   1edd8:	01200120 01200120 01000100 01000100      . . . .........
   1ede8:	01010100 01010101 01020101 01020102     ................
   1edf8:	01030102 01030103 01040103 01040104     ................
   1ee08:	01050104 01050105 01060105 01060106     ................
   1ee18:	01070107 01070107 01080108 01080108     ................
   1ee28:	01090109 01090109 010a010a 010a010a     ................
   1ee38:	010b010b 010c010b 010c010c 010d010c     ................
   1ee48:	010d010d 010e010e 010e010e 010f010f     ................
   1ee58:	010f010f 01100110 01110110 01110111     ................
   1ee68:	01120111 01120112 01130113 01130113     ................
   1ee78:	01140114 01140114 01150115 01160115     ................
   1ee88:	01160116 01170117 01180117 01180118     ................
   1ee98:	01190119 01190119 011a011a 011b011a     ................
   1eea8:	011b011b 011c011c 011d011c 011d011d     ................
   1eeb8:	011e011e 011f011e 011f011f 01200120     ............ . .
   1eec8:	01200120 01200120 01000100 01000100      . . . .........
   1eed8:	01010100 01010101 01020101 01020102     ................
   1eee8:	01030102 01030103 01040103 01040104     ................
   1eef8:	01050104 01050105 01060106 01060106     ................
   1ef08:	01070107 01070107 01080108 01080108     ................
   1ef18:	01090109 01090109 010a010a 010a010a     ................
   1ef28:	010b010b 010c010b 010c010c 010d010c     ................
   1ef38:	010d010d 010e010e 010e010e 010f010f     ................
   1ef48:	010f010f 01100110 01110110 01110111     ................
   1ef58:	01120111 01120112 01130113 01130113     ................
   1ef68:	01140114 01140114 01150115 01160115     ................
   1ef78:	01160116 01170117 01180117 01180118     ................
   1ef88:	01190119 01190119 011a011a 011b011a     ................
   1ef98:	011b011b 011c011c 011d011c 011d011d     ................
   1efa8:	011e011e 011f011e 011f011f 01200120     ............ . .
   1efb8:	01200120 01200120 01000100 01000100      . . . .........
   1efc8:	01010100 01010101 01020101 01020102     ................
   1efd8:	01030102 01030103 01040103 01040104     ................
   1efe8:	01050104 01050105 01060106 01060106     ................
   1eff8:	01070107 01070107 01080108 01080108     ................
   1f008:	01090109 01090109 010a010a 010a010a     ................
   1f018:	010b010b 010c010b 010c010c 010d010c     ................
   1f028:	010d010d 010e010e 010e010e 010f010f     ................
   1f038:	010f010f 01100110 01110110 01110111     ................
   1f048:	01120111 01120112 01130113 01130113     ................
   1f058:	01140114 01150114 01150115 01160115     ................
   1f068:	01160116 01170117 01180117 01180118     ................
   1f078:	01190119 011a0119 011a011a 011b011a     ................
   1f088:	021b021b 021c021c 021d021c 021d021d     ................
   1f098:	021e021e 021f021e 021f021f 02200220     ............ . .
   1f0a8:	02200220 02200220 01000100 01000100      . . . .........
   1f0b8:	01010100 01010101 01020101 01020102     ................
   1f0c8:	01030102 01030103 01040103 01040104     ................
   1f0d8:	01050104 01050105 01060106 01060106     ................
   1f0e8:	01070107 01070107 01080108 01080108     ................
   1f0f8:	01090109 01090109 010a010a 010b010a     ................
   1f108:	010b010b 010c010b 010c010c 010d010c     ................
   1f118:	010d010d 010e010e 010e010e 010f010f     ................
   1f128:	0110010f 01100110 01110110 01110111     ................
   1f138:	01120111 01120112 01130113 01130113     ................
   1f148:	01140114 01150114 01150115 01160115     ................
   1f158:	01160116 02170117 02180217 02180218     ................
   1f168:	02190219 021a0219 021a021a 021b021a     ................
   1f178:	021b021b 021c021c 021d021c 021d021d     ................
   1f188:	021e021e 021f021e 021f021f 02200220     ............ . .
   1f198:	02200220 02200220 01000100 01000100      . . . .........
   1f1a8:	01010100 01010101 01020101 01020102     ................
   1f1b8:	01030102 01030103 01040103 01040104     ................
   1f1c8:	01050104 01050105 01060106 01060106     ................
   1f1d8:	01070107 01070107 01080108 01080108     ................
   1f1e8:	01090109 01090109 010a010a 010b010a     ................
   1f1f8:	010b010b 010c010b 010c010c 010d010c     ................
   1f208:	020d010d 020e020e 020e020e 020f020f     ................
   1f218:	0210020f 02100210 02110210 02110211     ................
   1f228:	02120211 02120212 02130213 02130213     ................
   1f238:	02140214 02150214 02150215 02160215     ................
   1f248:	02160216 02170217 02180217 02180218     ................
   1f258:	02190219 021a0219 021a021a 021b021a     ................
   1f268:	021b021b 021c021c 021d021c 021d021d     ................
   1f278:	021e021e 021f021e 021f021f 02200220     ............ . .
   1f288:	02200220 02200220 02000200 02000200      . . . .........
   1f298:	02010200 02010201 02020201 02020202     ................
   1f2a8:	02030202 02030203 02040203 02040204     ................
   1f2b8:	02050204 02050205 02060206 02060206     ................
   1f2c8:	02070207 02070207 02080208 02080208     ................
   1f2d8:	02090209 02090209 020a020a 020b020a     ................
   1f2e8:	020b020b 020c020b 020c020c 020d020c     ................
   1f2f8:	020d020d 020e020e 020e020e 020f020f     ................
   1f308:	0210020f 02100210 02110210 02110211     ................
   1f318:	02120211 02120212 02130213 02130213     ................
   1f328:	02140214 02150214 02150215 02160215     ................
   1f338:	02160216 02170217 02180217 02180218     ................
   1f348:	02190219 021a0219 021a021a 021b021b     ................
   1f358:	021b021b 021c021c 021d021c 021d021d     ................
   1f368:	021e021e 021f021e 021f021f 02200220     ............ . .
   1f378:	02200220 02200220 02000200 02000200      . . . .........
   1f388:	02010200 02010201 02020201 02020202     ................
   1f398:	02030202 02030203 02040203 02040204     ................
   1f3a8:	02050204 02050205 02060206 02060206     ................
   1f3b8:	02070207 02070207 02080208 02080208     ................
   1f3c8:	02090209 02090209 020a020a 020b020a     ................
   1f3d8:	020b020b 020c020b 020c020c 020d020c     ................
   1f3e8:	020d020d 020e020e 020e020e 020f020f     ................
   1f3f8:	0210020f 02100210 02110210 02110211     ................
   1f408:	02120212 02120212 02130213 02130213     ................
   1f418:	02140214 02150214 02150215 02160215     ................
   1f428:	02160216 02170217 02180217 02180218     ................
   1f438:	02190219 021a0219 021a021a 021b021b     ................
   1f448:	021b021b 021c021c 021d021c 021d021d     ................
   1f458:	021e021e 031f021e 031f031f 03200320     ............ . .
   1f468:	03200320 02200320 02000200 02000200      . . . .........
   1f478:	02010200 02010201 02020201 02020202     ................
   1f488:	02030202 02030203 02040203 02040204     ................
   1f498:	02050205 02050205 02060206 02060206     ................
   1f4a8:	02070207 02070207 02080208 02080208     ................
   1f4b8:	02090209 020a0209 020a020a 020b020a     ................
   1f4c8:	020b020b 020c020b 020c020c 020d020d     ................
   1f4d8:	020d020d 020e020e 020e020e 020f020f     ................
   1f4e8:	0210020f 02100210 02110210 02110211     ................
   1f4f8:	02120212 02120212 02130213 02130213     ................
   1f508:	02140214 02150214 02150215 02160216     ................
   1f518:	02160216 02170217 02180217 02180218     ................
   1f528:	02190219 021a0219 021a021a 031b021b     ................
   1f538:	031b031b 031c031c 031d031c 031d031d     ................
   1f548:	031e031e 031f031e 031f031f 03200320     ............ . .
   1f558:	03200320 03200320 02000200 02000200      . . . .........
   1f568:	02010200 02010201 02020201 02020202     ................
   1f578:	02030202 02030203 02040203 02040204     ................
   1f588:	02050205 02050205 02060206 02060206     ................
   1f598:	02070207 02070207 02080208 02080208     ................
   1f5a8:	02090209 020a0209 020a020a 020b020a     ................
   1f5b8:	020b020b 020c020b 020c020c 020d020d     ................
   1f5c8:	020d020d 020e020e 020e020e 020f020f     ................
   1f5d8:	0210020f 02100210 02110210 02110211     ................
   1f5e8:	02120212 02120212 02130213 02130213     ................
   1f5f8:	02140214 02150214 02150215 02160216     ................
   1f608:	02160216 02170217 03180217 03180318     ................
   1f618:	03190319 031a0319 031a031a 031b031b     ................
   1f628:	031c031b 031c031c 031d031c 031d031d     ................
   1f638:	031e031e 031f031e 031f031f 03200320     ............ . .
   1f648:	03200320 03200320 02000200 02000200      . . . .........
   1f658:	02010200 02010201 02020201 02020202     ................
   1f668:	02030202 02030203 02040203 02040204     ................
   1f678:	02050205 02050205 02060206 02060206     ................
   1f688:	02070207 02070207 02080208 02080208     ................
   1f698:	02090209 020a0209 020a020a 020b020a     ................
   1f6a8:	020b020b 020c020b 020c020c 020d020d     ................
   1f6b8:	020d020d 020e020e 020e020e 020f020f     ................
   1f6c8:	0210020f 02100210 02110210 02110211     ................
   1f6d8:	02120212 02120212 02130213 02140213     ................
   1f6e8:	02140214 03150314 03150315 03160316     ................
   1f6f8:	03160316 03170317 03180317 03180318     ................
   1f708:	03190319 031a0319 031a031a 031b031b     ................
   1f718:	031c031b 031c031c 031d031c 031d031d     ................
   1f728:	031e031e 031f031e 031f031f 03200320     ............ . .
   1f738:	03200320 03200320 02000200 02000200      . . . .........
   1f748:	02010200 02010201 02020201 02020202     ................
   1f758:	02030202 02030203 02040203 02040204     ................
   1f768:	02050205 02050205 02060206 02060206     ................
   1f778:	02070207 02070207 02080208 02080208     ................
   1f788:	02090209 020a0209 020a020a 020b020a     ................
   1f798:	020b020b 020c020b 020c020c 020d020d     ................
   1f7a8:	030d030d 030e030e 030f030e 030f030f     ................
   1f7b8:	0310030f 03100310 03110310 03110311     ................
   1f7c8:	03120312 03120312 03130313 03140313     ................
   1f7d8:	03140314 03150314 03150315 03160316     ................
   1f7e8:	03160316 03170317 03180317 03180318     ................
   1f7f8:	03190319 031a0319 031a031a 031b031b     ................
   1f808:	031c031b 031c031c 031d031c 031d031d     ................
   1f818:	031e031e 031f031e 031f031f 03200320     ............ . .
   1f828:	03200320 03200320 02000200 02000200      . . . .........
   1f838:	03010200 03010301 03020301 03020302     ................
   1f848:	03030302 03030303 03040303 03040304     ................
   1f858:	03050305 03050305 03060306 03060306     ................
   1f868:	03070307 03070307 03080308 03090308     ................
   1f878:	03090309 030a0309 030a030a 030b030a     ................
   1f888:	030b030b 030c030b 030c030c 030d030d     ................
   1f898:	030d030d 030e030e 030f030e 030f030f     ................
   1f8a8:	0310030f 03100310 03110310 03110311     ................
   1f8b8:	03120312 03120312 03130313 03140313     ................
   1f8c8:	03140314 03150314 03150315 03160316     ................
   1f8d8:	03170316 03170317 03180317 03180318     ................
   1f8e8:	03190319 031a0319 031a031a 031b031b     ................
   1f8f8:	031c031b 031c031c 031d031d 031d031d     ................
   1f908:	041e041e 041f041e 041f041f 04200420     ............ . .
   1f918:	04200420 04200420 03000300 03000300      . . . .........
   1f928:	03010300 03010301 03020301 03020302     ................
   1f938:	03030302 03030303 03040303 03040304     ................
   1f948:	03050305 03050305 03060306 03060306     ................
   1f958:	03070307 03070307 03080308 03090308     ................
   1f968:	03090309 030a0309 030a030a 030b030a     ................
   1f978:	030b030b 030c030b 030c030c 030d030d     ................
   1f988:	030d030d 030e030e 030f030e 030f030f     ................
   1f998:	0310030f 03100310 03110311 03110311     ................
   1f9a8:	03120312 03120312 03130313 03140313     ................
   1f9b8:	03140314 03150314 03150315 03160316     ................
   1f9c8:	03170316 03170317 03180317 03180318     ................
   1f9d8:	03190319 031a0319 031a031a 041b031b     ................
   1f9e8:	041c041b 041c041c 041d041d 041d041d     ................
   1f9f8:	041e041e 041f041e 041f041f 04200420     ............ . .
   1fa08:	04200420 04200420 03000300 03000300      . . . .........
   1fa18:	03010300 03010301 03020301 03020302     ................
   1fa28:	03030302 03030303 03040303 03040304     ................
   1fa38:	03050305 03050305 03060306 03060306     ................
   1fa48:	03070307 03070307 03080308 03090308     ................
   1fa58:	03090309 030a0309 030a030a 030b030a     ................
   1fa68:	030b030b 030c030c 030c030c 030d030d     ................
   1fa78:	030d030d 030e030e 030f030e 030f030f     ................
   1fa88:	0310030f 03100310 03110311 03110311     ................
   1fa98:	03120312 03120312 03130313 03140313     ................
   1faa8:	03140314 03150314 03150315 03160316     ................
   1fab8:	03170316 03170317 03180318 04180418     ................
   1fac8:	04190419 041a0419 041a041a 041b041b     ................
   1fad8:	041c041b 041c041c 041d041d 041e041d     ................
   1fae8:	041e041e 041f041e 041f041f 04200420     ............ . .
   1faf8:	04200420 04200420 03000300 03000300      . . . .........
   1fb08:	03010300 03010301 03020301 03020302     ................
   1fb18:	03030302 03030303 03040303 03040304     ................
   1fb28:	03050305 03050305 03060306 03060306     ................
   1fb38:	03070307 03070307 03080308 03090308     ................
   1fb48:	03090309 030a0309 030a030a 030b030a     ................
   1fb58:	030b030b 030c030c 030c030c 030d030d     ................
   1fb68:	030d030d 030e030e 030f030e 030f030f     ................
   1fb78:	0310030f 03100310 03110311 03110311     ................
   1fb88:	03120312 03120312 03130313 03140313     ................
   1fb98:	03140314 03150314 03150315 04160316     ................
   1fba8:	04170416 04170417 04180418 04190418     ................
   1fbb8:	04190419 041a0419 041a041a 041b041b     ................
   1fbc8:	041c041b 041c041c 041d041d 041e041d     ................
   1fbd8:	041e041e 041f041e 041f041f 04200420     ............ . .
   1fbe8:	04200420 04200420 03000300 03000300      . . . .........
   1fbf8:	03010300 03010301 03020301 03020302     ................
   1fc08:	03030302 03030303 03040303 03040304     ................
   1fc18:	03050305 03050305 03060306 03060306     ................
   1fc28:	03070307 03070307 03080308 03090308     ................
   1fc38:	03090309 030a0309 030a030a 030b030a     ................
   1fc48:	030b030b 030c030c 030c030c 030d030d     ................
   1fc58:	030d030d 030e030e 030f030e 030f030f     ................
   1fc68:	0310030f 03100310 03110311 03110311     ................
   1fc78:	04120412 04130412 04130413 04140413     ................
   1fc88:	04140414 04150414 04150415 04160416     ................
   1fc98:	04170416 04170417 04180418 04190418     ................
   1fca8:	04190419 041a041a 041a041a 041b041b     ................
   1fcb8:	041c041b 041c041c 041d041d 041e041d     ................
   1fcc8:	041e041e 041f041e 041f041f 04200420     ............ . .
   1fcd8:	04200420 04200420 03000300 03000300      . . . .........
   1fce8:	03010300 03010301 03020301 03020302     ................
   1fcf8:	03030302 03030303 03040304 03040304     ................
   1fd08:	03050305 03050305 03060306 03060306     ................
   1fd18:	03070307 03080307 03080308 03090308     ................
   1fd28:	03090309 030a0309 030a030a 030b030a     ................
   1fd38:	030b030b 030c030c 030c030c 030d030d     ................
   1fd48:	040e040d 040e040e 040f040e 040f040f     ................
   1fd58:	0410040f 04100410 04110411 04110411     ................
   1fd68:	04120412 04130412 04130413 04140413     ................
   1fd78:	04140414 04150414 04150415 04160416     ................
   1fd88:	04170416 04170417 04180418 04190418     ................
   1fd98:	04190419 041a041a 041b041a 041b041b     ................
   1fda8:	041c041b 041c041c 041d041d 051e051d     ................
   1fdb8:	051e051e 051f051f 051f051f 05200520     ............ . .
   1fdc8:	05200520 05200520 03000300 03000300      . . . .........
   1fdd8:	03010300 03010301 03020301 03020302     ................
   1fde8:	03030302 03030303 03040304 03040304     ................
   1fdf8:	03050305 03050305 04060306 04060406     ................
   1fe08:	04070407 04080407 04080408 04090408     ................
   1fe18:	04090409 040a0409 040a040a 040b040a     ................
   1fe28:	040b040b 040c040c 040c040c 040d040d     ................
   1fe38:	040e040d 040e040e 040f040e 040f040f     ................
   1fe48:	0410040f 04100410 04110411 04110411     ................
   1fe58:	04120412 04130412 04130413 04140413     ................
   1fe68:	04140414 04150415 04150415 04160416     ................
   1fe78:	04170416 04170417 04180418 04190418     ................
   1fe88:	04190419 041a041a 041b041a 051b051b     ................
   1fe98:	051c051c 051c051c 051d051d 051e051d     ................
   1fea8:	051e051e 051f051f 051f051f 05200520     ............ . .
   1feb8:	05200520 05200520 04000400 04000400      . . . .........
   1fec8:	04010400 04010401 04020401 04020402     ................
   1fed8:	04030402 04030403 04040404 04040404     ................
   1fee8:	04050405 04050405 04060406 04060406     ................
   1fef8:	04070407 04080407 04080408 04090408     ................
   1ff08:	04090409 040a0409 040a040a 040b040a     ................
   1ff18:	040b040b 040c040c 040c040c 040d040d     ................
   1ff28:	040e040d 040e040e 040f040e 040f040f     ................
   1ff38:	04100410 04100410 04110411 04110411     ................
   1ff48:	04120412 04130412 04130413 04140413     ................
   1ff58:	04140414 04150415 04150415 04160416     ................
   1ff68:	04170416 04170417 04180418 05190418     ................
   1ff78:	05190519 051a051a 051b051a 051b051b     ................
   1ff88:	051c051c 051c051c 051d051d 051e051d     ................
   1ff98:	051e051e 051f051f 0520051f 05200520     .......... . . .
   1ffa8:	05200520 05200520 04000400 04000400      . . . .........
   1ffb8:	04010400 04010401 04020401 04020402     ................
   1ffc8:	04030402 04030403 04040404 04040404     ................
   1ffd8:	04050405 04050405 04060406 04060406     ................
   1ffe8:	04070407 04080407 04080408 04090408     ................
   1fff8:	04090409 040a0409 040a040a 040b040b     ................
   20008:	040b040b 040c040c 040c040c 040d040d     ................
   20018:	040e040d 040e040e 040f040e 040f040f     ................
   20028:	04100410 04100410 04110411 04110411     ................
   20038:	04120412 04130412 04130413 04140413     ................
   20048:	04140414 04150415 04150415 04160416     ................
   20058:	05170516 05170517 05180518 05190518     ................
   20068:	05190519 051a051a 051b051a 051b051b     ................
   20078:	051c051c 051d051c 051d051d 051e051d     ................
   20088:	051e051e 051f051f 0520051f 05200520     .......... . . .
   20098:	05200520 05200520 04000400 04000400      . . . .........
   200a8:	04010400 04010401 04020401 04020402     ................
   200b8:	04030402 04030403 04040404 04040404     ................
   200c8:	04050405 04050405 04060406 04060406     ................
   200d8:	04070407 04080407 04080408 04090408     ................
   200e8:	04090409 040a0409 040a040a 040b040b     ................
   200f8:	040b040b 040c040c 040c040c 040d040d     ................
   20108:	040e040d 040e040e 040f040e 040f040f     ................
   20118:	04100410 04100410 04110411 04120411     ................
   20128:	04120412 04130412 04130413 04140413     ................
   20138:	05140414 05150515 05150515 05160516     ................
   20148:	05170516 05170517 05180518 05190518     ................
   20158:	05190519 051a051a 051b051a 051b051b     ................
   20168:	051c051c 051d051c 051d051d 051e051e     ................
   20178:	051e051e 051f051f 0520061f 05200520     .......... . . .
   20188:	05200520 05200520 04000400 04000400      . . . .........
   20198:	04010400 04010401 04020401 04020402     ................
   201a8:	04030402 04030403 04040404 04040404     ................
   201b8:	04050405 04050405 04060406 04070406     ................
   201c8:	04070407 04080407 04080408 04090408     ................
   201d8:	04090409 040a0409 040a040a 040b040b     ................
   201e8:	040b040b 040c040c 040d040c 040d040d     ................
   201f8:	040e040d 040e040e 040f040e 040f040f     ................
   20208:	04100410 04100410 04110411 05120511     ................
   20218:	05120512 05130512 05130513 05140513     ................
   20228:	05140514 05150515 05160515 05160516     ................
   20238:	05170517 05180517 05180518 05190519     ................
   20248:	051a0519 051a051a 051b051a 051b051b     ................
   20258:	051c051c 051d051c 061d061d 061e061e     ................
   20268:	061f061e 061f061f 06200620 06200620     ........ . . . .
   20278:	05200620 05200520 04000400 04000400      . . . .........
   20288:	04010400 04010401 04020401 04020402     ................
   20298:	04030402 04030403 04040404 04040404     ................
   202a8:	04050405 04050405 04060406 04070406     ................
   202b8:	04070407 04080407 04080408 04090408     ................
   202c8:	04090409 040a0409 040a040a 040b040b     ................
   202d8:	040b040b 040c040c 040d040c 040d040d     ................
   202e8:	050e040d 050e050e 050f050f 050f050f     ................
   202f8:	05100510 05100510 05110511 05120511     ................
   20308:	05120512 05130512 05130513 05140514     ................
   20318:	05140514 05150515 05160515 05160516     ................
   20328:	05170517 05180517 05180518 05190519     ................
   20338:	051a0519 051a051a 061b051b 061b061b     ................
   20348:	061c061c 061d061c 061d061d 061e061e     ................
   20358:	061f061e 061f061f 06200620 06200620     ........ . . . .
   20368:	06200620 06200620 04000400 04000400      . . . .........
   20378:	04010400 04010401 04020401 04020402     ................
   20388:	04030402 04030403 04040404 04040404     ................
   20398:	04050405 04050405 04060406 04070406     ................
   203a8:	04070407 04080407 04080408 04090408     ................
   203b8:	04090409 050a0509 050a050a 050b050b     ................
   203c8:	050b050b 050c050c 050d050c 050d050d     ................
   203d8:	050e050d 050e050e 050f050f 050f050f     ................
   203e8:	05100510 05110510 05110511 05120511     ................
   203f8:	05120512 05130512 05130513 05140514     ................
   20408:	05140514 05150515 05160515 05160516     ................
   20418:	05170517 05180517 05180518 06190519     ................
   20428:	061a0619 061a061a 061b061b 061c061b     ................
   20438:	061c061c 061d061d 061d061d 061e061e     ................
   20448:	061f061e 061f061f 06200620 06200620     ........ . . . .
   20458:	06200620 06200620 05000500 05000500      . . . .........
   20468:	05010500 05010501 05020501 05020502     ................
   20478:	05030502 05030503 05040504 05040504     ................
   20488:	05050505 05050505 05060506 05070506     ................
   20498:	05070507 05080507 05080508 05090508     ................
   204a8:	05090509 050a0509 050a050a 050b050b     ................
   204b8:	050b050b 050c050c 050d050c 050d050d     ................
   204c8:	050e050d 050e050e 050f050f 050f050f     ................
   204d8:	05100510 05110510 05110511 05120511     ................
   204e8:	05120512 05130512 05130513 05140514     ................
   204f8:	05140514 05150515 05160515 05160516     ................
   20508:	06170517 06180617 06180618 06190619     ................
   20518:	061a0619 061a061a 061b061b 061c061b     ................
   20528:	061c061c 061d061d 061e061d 061e061e     ................
   20538:	061f061f 0620061f 06200620 06200620     ...... . . . . .
   20548:	06200620 06200620 05000500 05000500      . . . .........
   20558:	05010500 05010501 05020501 05020502     ................
   20568:	05030503 05030503 05040504 05040504     ................
   20578:	05050505 05050505 05060506 05070506     ................
   20588:	05070507 05080507 05080508 05090508     ................
   20598:	05090509 050a050a 050a050a 050b050b     ................
   205a8:	050b050b 050c050c 050d050c 050d050d     ................
   205b8:	050e050d 050e050e 050f050f 050f050f     ................
   205c8:	05100510 05110510 05110511 05120511     ................
   205d8:	05120512 05130513 05130513 05140514     ................
   205e8:	05140514 05150515 06160515 06160616     ................
   205f8:	06170617 06180617 06180618 06190619     ................
   20608:	061a0619 061a061a 061b061b 061c061b     ................
   20618:	061c061c 061d061d 061e061d 061e061e     ................
   20628:	061f061f 0720071f 06200620 06200620     ...... . . . . .
   20638:	06200620 06200620 05000500 05000500      . . . .........
   20648:	05010500 05010501 05020501 05020502     ................
   20658:	05030503 05030503 05040504 05040504     ................
   20668:	05050505 05060505 05060506 05070506     ................
   20678:	05070507 05080507 05080508 05090508     ................
   20688:	05090509 050a050a 050a050a 050b050b     ................
   20698:	050c050b 050c050c 050d050c 050d050d     ................
   206a8:	050e050e 050e050e 050f050f 050f050f     ................
   206b8:	05100510 05110510 05110511 05120511     ................
   206c8:	05120512 05130513 05130513 05140514     ................
   206d8:	06150514 06150615 06160616 06170616     ................
   206e8:	06170617 06180618 06190618 06190619     ................
   206f8:	061a061a 061b061a 061b061b 061c061b     ................
   20708:	061c061c 071d061d 071e071d 071e071e     ................
   20718:	071f071f 0720071f 07200720 06200720     ...... . . . . .
   20728:	06200620 06200620 05000500 05000500      . . . .........
   20738:	05010500 05010501 05020501 05020502     ................
   20748:	05030503 05030503 05040504 05040504     ................
   20758:	05050505 05060505 05060506 05070506     ................
   20768:	05070507 05080507 05080508 05090509     ................
   20778:	05090509 050a050a 050a050a 050b050b     ................
   20788:	050c050b 050c050c 050d050c 050d050d     ................
   20798:	050e050e 050e050e 050f050f 0510050f     ................
   207a8:	05100510 05110510 05110511 06120511     ................
   207b8:	06120612 06130613 06130613 06140614     ................
   207c8:	06150614 06150615 06160616 06170616     ................
   207d8:	06170617 06180618 06190618 06190619     ................
   207e8:	061a061a 061b061a 071b071b 071c071c     ................
   207f8:	071d071c 071d071d 071e071e 071f071e     ................
   20808:	071f071f 0720071f 07200720 07200720     ...... . . . . .
   20818:	07200720 06200720 05000500 05000500      . . . .........
   20828:	05010500 05010501 05020501 05020502     ................
   20838:	05030503 05030503 05040504 05040504     ................
   20848:	05050505 05060505 05060506 05070506     ................
   20858:	05070507 05080507 05080508 05090509     ................
   20868:	05090509 050a050a 050a050a 050b050b     ................
   20878:	050c050b 050c050c 050d050c 050d050d     ................
   20888:	050e050e 060e060e 060f060f 0610060f     ................
   20898:	06100610 06110610 06110611 06120612     ................
   208a8:	06120612 06130613 06140613 06140614     ................
   208b8:	06150614 06150615 06160616 06170616     ................
   208c8:	06170617 06180618 06190618 07190619     ................
   208d8:	071a071a 071b071a 071b071b 071c071c     ................
   208e8:	071d071c 071d071d 071e071e 071f071e     ................
   208f8:	071f071f 07200720 07200720 07200720     .... . . . . . .
   20908:	07200720 07200720 05000500 05000500      . . . .........
   20918:	05010500 05010501 05020501 05020502     ................
   20928:	05030503 05030503 05040504 05040504     ................
   20938:	05050505 05060505 05060506 05070506     ................
   20948:	05070507 05080507 05080508 05090509     ................
   20958:	06090509 060a060a 060a060a 060b060b     ................
   20968:	060c060b 060c060c 060d060c 060d060d     ................
   20978:	060e060e 060e060e 060f060f 0610060f     ................
   20988:	06100610 06110610 06110611 06120612     ................
   20998:	06120612 06130613 06140613 06140614     ................
   209a8:	06150614 06150615 06160616 06170616     ................
   209b8:	06170617 07180618 07190718 07190719     ................
   209c8:	071a071a 071b071a 071b071b 071c071c     ................
   209d8:	071d071c 071d071d 071e071e 071f071e     ................
   209e8:	071f071f 07200720 07200720 07200720     .... . . . . . .
   209f8:	07200720 07200720 06000600 06000600      . . . .........
   20a08:	06010600 06010601 06020601 06020602     ................
   20a18:	06030603 06030603 06040604 06040604     ................
   20a28:	06050605 06060605 06060606 06070606     ................
   20a38:	06070607 06080607 06080608 06090609     ................
   20a48:	06090609 060a060a 060b060a 060b060b     ................
   20a58:	060c060b 060c060c 060d060d 060d060d     ................
   20a68:	060e060e 060e060e 060f060f 0610060f     ................
   20a78:	06100610 06110610 06110611 06120612     ................
   20a88:	06120612 06130613 06140613 06140614     ................
   20a98:	06150615 06150615 06160616 06170616     ................
   20aa8:	07170717 07180718 07190719 071a0719     ................
   20ab8:	071a071a 071b071b 071c071b 071c071c     ................
   20ac8:	071d071d 071e071d 071e071e 071f071e     ................
   20ad8:	081f081f 07200820 07200720 07200720     .... . . . . . .
   20ae8:	07200720 07200720 06000600 06000600      . . . .........
   20af8:	06010600 06010601 06020601 06020602     ................
   20b08:	06030603 06030603 06040604 06040604     ................
   20b18:	06050605 06060605 06060606 06070606     ................
   20b28:	06070607 06080608 06080608 06090609     ................
   20b38:	06090609 060a060a 060b060a 060b060b     ................
   20b48:	060c060b 060c060c 060d060d 060d060d     ................
   20b58:	060e060e 060f060e 060f060f 0610060f     ................
   20b68:	06100610 06110611 06110611 06120612     ................
   20b78:	06130612 06130613 06140613 06140614     ................
   20b88:	06150615 06160615 07160616 07170717     ................
   20b98:	07180717 07180718 07190719 071a0719     ................
   20ba8:	071a071a 071b071b 071c071b 071c071c     ................
   20bb8:	081d071d 081e081d 081e081e 081f081f     ................
   20bc8:	0820081f 08200820 08200820 07200720     .. . . . . . . .
   20bd8:	07200720 07200720 06000600 06000600      . . . .........
   20be8:	06010600 06010601 06020601 06020602     ................
   20bf8:	06030603 06030603 06040604 06050604     ................
   20c08:	06050605 06060605 06060606 06070606     ................
   20c18:	06070607 06080608 06080608 06090609     ................
   20c28:	06090609 060a060a 060b060a 060b060b     ................
   20c38:	060c060b 060c060c 060d060d 060d060d     ................
   20c48:	060e060e 060f060e 060f060f 0610060f     ................
   20c58:	06100610 06110611 06110611 06120612     ................
   20c68:	06130612 06130613 06140613 06140614     ................
   20c78:	07150615 07160715 07160716 07170717     ................
   20c88:	07180717 07180718 07190719 071a0719     ................
   20c98:	071a071a 071b071b 081c081b 081c081c     ................
   20ca8:	081d081d 081e081d 081e081e 081f081f     ................
   20cb8:	0820081f 08200820 08200820 08200820     .. . . . . . . .
   20cc8:	07200820 07200720 06000600 06000600      . . . .........
   20cd8:	06010600 06010601 06020601 06020602     ................
   20ce8:	06030603 06030603 06040604 06050604     ................
   20cf8:	06050605 06060605 06060606 06070606     ................
   20d08:	06070607 06080608 06080608 06090609     ................
   20d18:	060a0609 060a060a 060b060a 060b060b     ................
   20d28:	060c060b 060c060c 060d060d 060d060d     ................
   20d38:	060e060e 060f060e 060f060f 0610060f     ................
   20d48:	06100610 06110611 06110611 06120612     ................
   20d58:	06130612 07130713 07140713 07140714     ................
   20d68:	07150715 07160715 07160716 07170717     ................
   20d78:	07180717 07180718 07190719 071a0719     ................
   20d88:	081a071a 081b081b 081c081b 081c081c     ................
   20d98:	081d081d 081e081d 081e081e 081f081f     ................
   20da8:	0820081f 08200820 08200820 08200820     .. . . . . . . .
   20db8:	08200820 08200820 06000600 06000600      . . . .........
   20dc8:	06010600 06010601 06020601 06020602     ................
   20dd8:	06030603 06030603 06040604 06050604     ................
   20de8:	06050605 06060605 06060606 06070606     ................
   20df8:	06070607 06080608 06080608 06090609     ................
   20e08:	060a0609 060a060a 060b060a 060b060b     ................
   20e18:	060c060c 060c060c 060d060d 060e060d     ................
   20e28:	060e060e 060f060e 070f060f 07100710     ................
   20e38:	07100710 07110711 07120711 07120712     ................
   20e48:	07130712 07130713 07140714 07140714     ................
   20e58:	07150715 07160715 07160716 07170717     ................
   20e68:	07180717 07180718 08190719 081a0819     ................
   20e78:	081b081a 081b081b 081c081c 081d081c     ................
   20e88:	081d081d 081e081e 081f081e 081f081f     ................
   20e98:	08200820 08200820 08200820 08200820      . . . . . . . .
   20ea8:	08200820 08200820 06000600 06000600      . . . .........
   20eb8:	06010600 06010601 06020601 06020602     ................
   20ec8:	06030603 06030603 06040604 06050604     ................
   20ed8:	06050605 06060605 06060606 06070607     ................
   20ee8:	06070607 06080608 07080608 07090709     ................
   20ef8:	070a0709 070a070a 070b070a 070b070b     ................
   20f08:	070c070c 070c070c 070d070d 070e070d     ................
   20f18:	070e070e 070f070e 070f070f 07100710     ................
   20f28:	07100710 07110711 07120711 07120712     ................
   20f38:	07130712 07130713 07140714 07150714     ................
   20f48:	07150715 07160715 07160716 07170717     ................
   20f58:	07180717 08190818 08190819 081a081a     ................
   20f68:	081b081a 081b081b 081c081c 081d081c     ................
   20f78:	081d081d 081e081e 091f081e 091f091f     ................
   20f88:	09200920 08200820 08200820 08200820      . . . . . . . .
   20f98:	08200820 08200820 06000600 06000600      . . . .........
   20fa8:	07010600 07010701 07020701 07020702     ................
   20fb8:	07030703 07030703 07040704 07050704     ................
   20fc8:	07050705 07060705 07060706 07070707     ................
   20fd8:	07070707 07080708 07090708 07090709     ................
   20fe8:	070a0709 070a070a 070b070a 070b070b     ................
   20ff8:	070c070c 070c070c 070d070d 070e070d     ................
   21008:	070e070e 070f070e 070f070f 07100710     ................
   21018:	07100710 07110711 07120711 07120712     ................
   21028:	07130712 07130713 07140714 07150714     ................
   21038:	07150715 07160716 07170716 08170717     ................
   21048:	08180818 08190818 08190819 081a081a     ................
   21058:	081b081a 081b081b 081c081c 081d081c     ................
   21068:	091d081d 091e091e 091f091e 091f091f     ................
   21078:	09200920 09200920 08200920 08200820      . . . . . . . .
   21088:	08200820 08200820 07000700 07000700      . . . .........
   21098:	07010700 07010701 07020702 07020702     ................
   210a8:	07030703 07030703 07040704 07050704     ................
   210b8:	07050705 07060705 07060706 07070707     ................
   210c8:	07070707 07080708 07090708 07090709     ................
   210d8:	070a0709 070a070a 070b070b 070b070b     ................
   210e8:	070c070c 070d070c 070d070d 070e070d     ................
   210f8:	070e070e 070f070f 070f070f 07100710     ................
   21108:	07110710 07110711 07120711 07120712     ................
   21118:	07130713 07130713 07140714 07150714     ................
   21128:	07150715 07160716 08170716 08170817     ................
   21138:	08180818 08190818 08190819 081a081a     ................
   21148:	081b081a 081b081b 091c081c 091d091c     ................
   21158:	091e091d 091e091e 091f091f 0920091f     .............. .
   21168:	09200920 09200920 09200920 09200920      . . . . . . . .
   21178:	08200820 08200820 07000700 07000700      . . . .........
   21188:	07010700 07010701 07020702 07020702     ................
   21198:	07030703 07030703 07040704 07050704     ................
   211a8:	07050705 07060705 07060706 07070707     ................
   211b8:	07070707 07080708 07090708 07090709     ................
   211c8:	070a0709 070a070a 070b070b 070b070b     ................
   211d8:	070c070c 070d070c 070d070d 070e070d     ................
   211e8:	070e070e 070f070f 070f070f 07100710     ................
   211f8:	07110710 07110711 07120711 07120712     ................
   21208:	07130713 07130713 07140714 07150714     ................
   21218:	08150715 08160816 08170816 08170817     ................
   21228:	08180818 08190818 08190819 081a081a     ................
   21238:	081b081b 091c091b 091c091c 091d091d     ................
   21248:	091e091d 091e091e 091f091f 0920091f     .............. .
   21258:	09200920 09200920 09200920 09200920      . . . . . . . .
   21268:	09200920 08200920 07000700 07000700      . . . .........
   21278:	07010700 07010701 07020702 07020702     ................
   21288:	07030703 07040703 07040704 07050704     ................
   21298:	07050705 07060705 07060706 07070707     ................
   212a8:	07070707 07080708 07090708 07090709     ................
   212b8:	070a0709 070a070a 070b070b 070b070b     ................
   212c8:	070c070c 070d070c 070d070d 070e070d     ................
   212d8:	070e070e 070f070f 070f070f 07100710     ................
   212e8:	07110710 07110711 07120711 07120712     ................
   212f8:	07130713 07140713 08140814 08150814     ................
   21308:	08150815 08160816 08170816 08170817     ................
   21318:	08180818 08190818 081a0819 091a081a     ................
   21328:	091b091b 091c091b 091c091c 091d091d     ................
   21338:	091e091d 091e091e 091f091f 0920091f     .............. .
   21348:	09200920 09200920 09200920 09200920      . . . . . . . .
   21358:	09200920 09200920 07000700 07000700      . . . .........
   21368:	07010700 07010701 07020702 07020702     ................
   21378:	07030703 07040703 07040704 07050704     ................
   21388:	07050705 07060706 07060706 07070707     ................
   21398:	07070707 07080708 07090708 07090709     ................
   213a8:	070a0709 070a070a 070b070b 070b070b     ................
   213b8:	070c070c 070d070c 070d070d 070e070d     ................
   213c8:	070e070e 070f070f 0710070f 07100710     ................
   213d8:	08110810 08110811 08120812 08120812     ................
   213e8:	08130813 08140813 08140814 08150814     ................
   213f8:	08150815 08160816 08170816 08170817     ................
   21408:	08180818 08190819 091a0919 091a091a     ................
   21418:	091b091b 091c091b 091c091c 091d091d     ................
   21428:	091e091d 091e091e 0a1f0a1f 0a200a1f     .............. .
   21438:	09200920 09200920 09200920 09200920      . . . . . . . .
   21448:	09200920 09200920 07000700 07000700      . . . .........
   21458:	07010700 07010701 07020702 07020702     ................
   21468:	07030703 07040703 07040704 07050704     ................
   21478:	07050705 07060706 07060706 07070707     ................
   21488:	07080707 08080808 08090808 08090809     ................
   21498:	080a080a 080a080a 080b080b 080c080b     ................
   214a8:	080c080c 080d080c 080d080d 080e080e     ................
   214b8:	080e080e 080f080f 0810080f 08100810     ................
   214c8:	08110810 08110811 08120812 08120812     ................
   214d8:	08130813 08140813 08140814 08150815     ................
   214e8:	08150815 08160816 08170816 08180817     ................
   214f8:	09180818 09190919 091a0919 091a091a     ................
   21508:	091b091b 091c091b 091d091c 091d091d     ................
   21518:	0a1e0a1e 0a1f0a1e 0a1f0a1f 0a200a20     ............ . .
   21528:	0a200a20 0a200a20 09200920 09200920      . . . . . . . .
   21538:	09200920 09200920 07000700 07000700      . . . .........
   21548:	07010700 07010701 08020802 08020802     ................
   21558:	08030803 08040803 08040804 08050804     ................
   21568:	08050805 08060806 08060806 08070807     ................
   21578:	08080807 08080808 08090808 08090809     ................
   21588:	080a080a 080a080a 080b080b 080c080b     ................
   21598:	080c080c 080d080c 080d080d 080e080e     ................
   215a8:	080e080e 080f080f 0810080f 08100810     ................
   215b8:	08110810 08110811 08120812 08120812     ................
   215c8:	08130813 08140813 08140814 08150815     ................
   215d8:	08160815 08160816 08170817 09180817     ................
   215e8:	09180918 09190919 091a0919 091b091a     ................
   215f8:	091b091b 091c091c 0a1d091c 0a1d0a1d     ................
   21608:	0a1e0a1e 0a1f0a1e 0a1f0a1f 0a200a20     ............ . .
   21618:	0a200a20 0a200a20 0a200a20 09200a20      . . . . . . . .
   21628:	09200920 09200920 08000800 08000800      . . . .........
   21638:	08010800 08010801 08020802 08020802     ................
   21648:	08030803 08040803 08040804 08050804     ................
   21658:	08050805 08060806 08060806 08070807     ................
   21668:	08080807 08080808 08090808 08090809     ................
   21678:	080a080a 080a080a 080b080b 080c080b     ................
   21688:	080c080c 080d080c 080d080d 080e080e     ................
   21698:	080e080e 080f080f 0810080f 08100810     ................
   216a8:	08110810 08110811 08120812 08130812     ................
   216b8:	08130813 08140813 08140814 08150815     ................
   216c8:	08160815 08160816 09170917 09180917     ................
   216d8:	09180918 09190919 091a091a 091b091a     ................
   216e8:	091b091b 0a1c0a1c 0a1d0a1c 0a1d0a1d     ................
   216f8:	0a1e0a1e 0a1f0a1e 0a1f0a1f 0a200a20     ............ . .
   21708:	0a200a20 0a200a20 0a200a20 0a200a20      . . . . . . . .
   21718:	0a200a20 09200920 08000800 08000800      . . . .........
   21728:	08010800 08010801 08020802 08020802     ................
   21738:	08030803 08040803 08040804 08050804     ................
   21748:	08050805 08060806 08060806 08070807     ................
   21758:	08080807 08080808 08090808 08090809     ................
   21768:	080a080a 080a080a 080b080b 080c080b     ................
   21778:	080c080c 080d080c 080d080d 080e080e     ................
   21788:	080f080e 080f080f 0810080f 08100810     ................
   21798:	08110811 08110811 08120812 08130812     ................
   217a8:	08130813 08140813 08140814 08150815     ................
   217b8:	08160815 09160916 09170917 09180917     ................
   217c8:	09190918 09190919 091a091a 0a1b091a     ................
   217d8:	0a1b0a1b 0a1c0a1c 0a1d0a1c 0a1e0a1d     ................
   217e8:	0a1e0a1e 0a1f0a1f 0a200a1f 0a200a20     .......... . . .
   217f8:	0a200a20 0a200a20 0a200a20 0a200a20      . . . . . . . .
   21808:	0a200a20 0a200a20 08000800 08000800      . . . .........
   21818:	08010800 08010801 08020802 08020802     ................
   21828:	08030803 08040803 08040804 08050804     ................
   21838:	08050805 08060806 08060806 08070807     ................
   21848:	08080807 08080808 08090808 08090809     ................
   21858:	080a080a 080b080a 080b080b 080c080b     ................
   21868:	080c080c 080d080d 080d080d 080e080e     ................
   21878:	080f080e 080f080f 0810080f 08100810     ................
   21888:	08110811 08110811 08120812 08130812     ................
   21898:	08130813 08140813 08140814 09150915     ................
   218a8:	09160915 09160916 09170917 09180917     ................
   218b8:	09190918 09190919 0a1a091a 0a1b0a1a     ................
   218c8:	0a1c0a1b 0a1c0a1c 0a1d0a1d 0a1e0a1d     ................
   218d8:	0a1e0a1e 0b1f0a1f 0b200b1f 0a200a20     .......... . . .
   218e8:	0a200a20 0a200a20 0a200a20 0a200a20      . . . . . . . .
   218f8:	0a200a20 0a200a20 08000800 08000800      . . . .........
   21908:	08010800 08010801 08020802 08020802     ................
   21918:	08030803 08040803 08040804 08050804     ................
   21928:	08050805 08060806 08070806 08070807     ................
   21938:	08080807 08080808 08090809 08090809     ................
   21948:	080a080a 080b080a 080b080b 080c080b     ................
   21958:	080c080c 080d080d 080d080d 080e080e     ................
   21968:	080f080e 080f080f 0810080f 08100810     ................
   21978:	08110811 08110811 09120812 09130912     ................
   21988:	09130913 09140914 09140914 09150915     ................
   21998:	09160915 09160916 09170917 09180918     ................
   219a8:	09190918 0a190a19 0a1a0a1a 0a1b0a1b     ................
   219b8:	0a1c0a1b 0a1c0a1c 0a1d0a1d 0a1e0a1d     ................
   219c8:	0b1e0b1e 0b1f0b1f 0b200b20 0b200b20     ........ . . . .
   219d8:	0a200b20 0a200a20 0a200a20 0a200a20      . . . . . . . .
   219e8:	0a200a20 0a200a20 08000800 08000800      . . . .........
   219f8:	08010800 08010801 08020802 08020802     ................
   21a08:	08030803 08040803 08040804 08050804     ................
   21a18:	08050805 08060806 08070806 08070807     ................
   21a28:	09080807 09080908 09090909 09090909     ................
   21a38:	090a090a 090b090a 090b090b 090c090b     ................
   21a48:	090c090c 090d090d 090e090d 090e090e     ................
   21a58:	090f090e 090f090f 09100910 09100910     ................
   21a68:	09110911 09120911 09120912 09130912     ................
   21a78:	09130913 09140914 09150914 09150915     ................
   21a88:	09160915 09170916 09170917 09180918     ................
   21a98:	0a190a18 0a1a0a19 0a1a0a1a 0a1b0a1b     ................
   21aa8:	0a1c0a1b 0a1c0a1c 0b1d0a1d 0b1e0b1e     ................
   21ab8:	0b1f0b1e 0b1f0b1f 0b200b20 0b200b20     ........ . . . .
   21ac8:	0b200b20 0a200b20 0a200a20 0a200a20      . . . . . . . .
   21ad8:	0a200a20 0a200a20 08000800 08000800      . . . .........
   21ae8:	08010800 08010801 08020802 09020902     ................
   21af8:	09030903 09040903 09040904 09050905     ................
   21b08:	09050905 09060906 09070906 09070907     ................
   21b18:	09080907 09080908 09090909 09090909     ................
   21b28:	090a090a 090b090a 090b090b 090c090b     ................
   21b38:	090c090c 090d090d 090e090d 090e090e     ................
   21b48:	090f090e 090f090f 09100910 09100910     ................
   21b58:	09110911 09120911 09120912 09130912     ................
   21b68:	09130913 09140914 09150914 09150915     ................
   21b78:	09160916 09170916 09170917 0a180a18     ................
   21b88:	0a190a19 0a1a0a19 0a1a0a1a 0a1b0a1b     ................
   21b98:	0a1c0a1b 0b1d0b1c 0b1d0b1d 0b1e0b1e     ................
   21ba8:	0b1f0b1e 0b200b1f 0b200b20 0b200b20     ...... . . . . .
   21bb8:	0b200b20 0b200b20 0a200b20 0a200a20      . . . . . . . .
   21bc8:	0a200a20 0a200a20 09000900 09000900      . . . .........
   21bd8:	09010900 09010901 09020902 09020902     ................
   21be8:	09030903 09040903 09040904 09050905     ................
   21bf8:	09050905 09060906 09070906 09070907     ................
   21c08:	09080907 09080908 09090909 09090909     ................
   21c18:	090a090a 090b090a 090b090b 090c090c     ................
   21c28:	090c090c 090d090d 090e090d 090e090e     ................
   21c38:	090f090e 090f090f 09100910 09110910     ................
   21c48:	09110911 09120911 09120912 09130913     ................
   21c58:	09130913 09140914 09150914 09150915     ................
   21c68:	09160916 09170916 0a170a17 0a180a18     ................
   21c78:	0a190a19 0a1a0a19 0a1a0a1a 0b1b0a1b     ................
   21c88:	0b1c0b1c 0b1d0b1c 0b1d0b1d 0b1e0b1e     ................
   21c98:	0b1f0b1f 0b200b1f 0b200b20 0b200b20     ...... . . . . .
   21ca8:	0b200b20 0b200b20 0b200b20 0b200b20      . . . . . . . .
   21cb8:	0a200a20 0a200a20 09000900 09000900      . . . .........
   21cc8:	09010900 09010901 09020902 09020902     ................
   21cd8:	09030903 09040903 09040904 09050905     ................
   21ce8:	09050905 09060906 09070906 09070907     ................
   21cf8:	09080907 09080908 09090909 090a0909     ................
   21d08:	090a090a 090b090a 090b090b 090c090c     ................
   21d18:	090c090c 090d090d 090e090d 090e090e     ................
   21d28:	090f090f 090f090f 09100910 09110910     ................
   21d38:	09110911 09120911 09120912 09130913     ................
   21d48:	09130913 09140914 09150914 09150915     ................
   21d58:	09160916 0a170a16 0a180a17 0a180a18     ................
   21d68:	0a190a19 0a1a0a19 0b1b0a1a 0b1b0b1b     ................
   21d78:	0b1c0b1c 0b1d0b1c 0b1e0b1d 0b1e0b1e     ................
   21d88:	0c1f0b1f 0c200c1f 0b200c20 0b200b20     ...... . . . . .
   21d98:	0b200b20 0b200b20 0b200b20 0b200b20      . . . . . . . .
   21da8:	0b200b20 0a200a20 09000900 09000900      . . . .........
   21db8:	09010900 09010901 09020902 09020902     ................
   21dc8:	09030903 09040903 09040904 09050905     ................
   21dd8:	09050905 09060906 09070906 09070907     ................
   21de8:	09080908 09080908 09090909 090a0909     ................
   21df8:	090a090a 090b090a 090b090b 090c090c     ................
   21e08:	090d090c 090d090d 090e090d 090e090e     ................
   21e18:	090f090f 090f090f 09100910 09110910     ................
   21e28:	09110911 09120911 09120912 09130913     ................
   21e38:	09130913 09140914 09150914 09150915     ................
   21e48:	0a160a16 0a170a16 0a180a17 0a180a18     ................
   21e58:	0a190a19 0b1a0b1a 0b1b0b1a 0b1b0b1b     ................
   21e68:	0b1c0b1c 0b1d0b1d 0b1e0b1d 0c1e0c1e     ................
   21e78:	0c1f0c1f 0c200c20 0c200c20 0b200c20     .... . . . . . .
   21e88:	0b200b20 0b200b20 0b200b20 0b200b20      . . . . . . . .
   21e98:	0b200b20 0b200b20 09000900 09000900      . . . .........
   21ea8:	09010900 09010901 09020902 09020902     ................
   21eb8:	09030903 09040903 09040904 09050905     ................
   21ec8:	09050905 09060906 09070906 09070907     ................
   21ed8:	09080908 09080908 09090909 090a0909     ................
   21ee8:	090a090a 090b090a 090b090b 090c090c     ................
   21ef8:	090d090c 090d090d 090e090d 090e090e     ................
   21f08:	090f090f 0a100a0f 0a100a10 0a110a10     ................
   21f18:	0a110a11 0a120a12 09120912 09130913     ................
   21f28:	09140913 09140914 0a150a14 0a150a15     ................
   21f38:	0a160a16 0a170a17 0a180a17 0a190a18     ................
   21f48:	0b190b19 0b1a0b1a 0b1b0b1a 0b1c0b1b     ................
   21f58:	0b1c0b1c 0c1d0b1d 0c1e0c1e 0c1f0c1e     ................
   21f68:	0c1f0c1f 0c200c20 0c200c20 0c200c20     .... . . . . . .
   21f78:	0b200c20 0b200b20 0b200b20 0b200b20      . . . . . . . .
   21f88:	0b200b20 0b200b20 09000900 09000900      . . . .........
   21f98:	09010900 09010901 09020902 09030902     ................
   21fa8:	09030903 09040903 09040904 09050905     ................
   21fb8:	09060905 09060906 09070906 0a070907     ................
   21fc8:	0a080a08 0a080a08 0a090a09 0a0a0a09     ................
   21fd8:	0a0a0a0a 0a0b0a0b 0a0b0a0b 0a0c0a0c     ................
   21fe8:	0a0d0a0c 0a0d0a0d 0a0e0a0e 0a0e0a0e     ................
   21ff8:	0a0f0a0f 0a100a0f 0a100a10 0a110a10     ................
   22008:	0a110a11 0a120a12 0a120a12 0a130a13     ................
   22018:	0a140a13 0a140a14 0a150a14 0a150a15     ................
   22028:	0a160a16 0a170a17 0a180a17 0b190b18     ................
   22038:	0b190b19 0b1a0b1a 0b1b0b1b 0b1c0b1b     ................
   22048:	0c1d0b1c 0c1d0c1d 0c1e0c1e 0c1f0c1e     ................
   22058:	0c200c1f 0c200c20 0c200c20 0c200c20     .. . . . . . . .
   22068:	0c200c20 0c200c20 0b200b20 0b200b20      . . . . . . . .
   22078:	0b200b20 0b200b20 09000900 09000900      . . . .........
   22088:	09010900 09010901 09020902 0a030902     ................
   22098:	0a030a03 0a040a03 0a040a04 0a050a05     ................
   220a8:	0a060a05 0a060a06 0a070a06 0a070a07     ................
   220b8:	0a080a08 0a080a08 0a090a09 0a0a0a09     ................
   220c8:	0a0a0a0a 0a0b0a0b 0a0b0a0b 0a0c0a0c     ................
   220d8:	0a0d0a0c 0a0d0a0d 0a0e0a0e 0a0f0a0e     ................
   220e8:	0a0f0a0f 0a100a0f 0a100a10 0a110a11     ................
   220f8:	0a110a11 0a120a12 0a130a12 0a130a13     ................
   22108:	0a140a13 0a140a14 0a150a14 0a160a15     ................
   22118:	0a160a16 0a170a17 0b180b18 0b190b18     ................
   22128:	0b1a0b19 0b1a0b1a 0b1b0b1b 0c1c0c1b     ................
   22138:	0c1d0c1c 0c1d0c1d 0c1e0c1e 0c1f0c1f     ................
   22148:	0c200c1f 0c200c20 0c200c20 0c200c20     .. . . . . . . .
   22158:	0c200c20 0c200c20 0c200c20 0b200b20      . . . . . . . .
   22168:	0b200b20 0b200b20 0a000a00 0a000a00      . . . .........
   22178:	0a010a00 0a010a01 0a020a02 0a030a02     ................
   22188:	0a030a03 0a040a03 0a040a04 0a050a05     ................
   22198:	0a060a05 0a060a06 0a070a06 0a070a07     ................
   221a8:	0a080a08 0a090a08 0a090a09 0a0a0a09     ................
   221b8:	0a0a0a0a 0a0b0a0b 0a0c0a0b 0a0c0a0c     ................
   221c8:	0a0d0a0c 0a0d0a0d 0a0e0a0e 0a0f0a0e     ................
   221d8:	0a0f0a0f 0a100a0f 0a100a10 0a110a11     ................
   221e8:	0a110a11 0a120a12 0a130a12 0a130a13     ................
   221f8:	0a140a13 0a140a14 0a150a15 0a160a15     ................
   22208:	0a160a16 0b170b17 0b180b18 0b190b18     ................
   22218:	0b1a0b19 0b1a0b1a 0c1b0c1b 0c1c0c1c     ................
   22228:	0c1d0c1c 0c1e0c1d 0c1e0c1e 0d1f0d1f     ................
   22238:	0d200d20 0c200d20 0c200c20 0c200c20      . . . . . . . .
   22248:	0c200c20 0c200c20 0c200c20 0c200c20      . . . . . . . .
   22258:	0b200b20 0b200b20 0a000a00 0a000a00      . . . .........
   22268:	0a010a00 0a010a01 0a020a02 0a030a02     ................
   22278:	0a030a03 0a040a03 0a040a04 0a050a05     ................
   22288:	0a060a05 0a060a06 0a070a06 0a070a07     ................
   22298:	0a080a08 0a090a08 0a090a09 0a0a0a09     ................
   222a8:	0a0a0a0a 0a0b0a0b 0a0c0a0b 0a0c0a0c     ................
   222b8:	0a0d0a0d 0a0d0a0d 0a0e0a0e 0a0f0a0e     ................
   222c8:	0a0f0a0f 0a100a10 0a100a10 0a110a11     ................
   222d8:	0a120a11 0a120a12 0a130a12 0a130a13     ................
   222e8:	0a140a14 0a140a14 0a150a15 0a160a15     ................
   222f8:	0b170a16 0b170b17 0b180b18 0b190b19     ................
   22308:	0b1a0b19 0c1b0c1a 0c1b0c1b 0c1c0c1c     ................
   22318:	0c1d0c1d 0c1e0c1d 0d1f0d1e 0d1f0d1f     ................
   22328:	0d200d20 0d200d20 0d200d20 0c200c20      . . . . . . . .
   22338:	0c200c20 0c200c20 0c200c20 0c200c20      . . . . . . . .
   22348:	0c200c20 0b200c20 0a000a00 0a000a00      . . . .........
   22358:	0a010a00 0a010a01 0a020a02 0a030a02     ................
   22368:	0a030a03 0a040a03 0a040a04 0a050a05     ................
   22378:	0a060a05 0a060a06 0a070a07 0a070a07     ................
   22388:	0a080a08 0a090a08 0a090a09 0a0a0a09     ................
   22398:	0a0a0a0a 0a0b0a0b 0a0c0a0b 0a0c0a0c     ................
   223a8:	0a0d0a0d 0a0e0a0d 0a0e0a0e 0a0f0a0e     ................
   223b8:	0a0f0a0f 0a100a10 0a110a10 0a110a11     ................
   223c8:	0a120a11 0a120a12 0a130a12 0a130a13     ................
   223d8:	0a140a14 0a140a14 0a150a15 0b160a15     ................
   223e8:	0b170b16 0b170b17 0b180b18 0b190b19     ................
   223f8:	0c1a0c1a 0c1b0c1a 0c1c0c1b 0c1c0c1c     ................
   22408:	0d1d0c1d 0d1e0d1e 0d1f0d1e 0d200d1f     .............. .
   22418:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   22428:	0c200c20 0c200c20 0c200c20 0c200c20      . . . . . . . .
   22438:	0c200c20 0c200c20 0a000a00 0a000a00      . . . .........
   22448:	0a010a00 0a010a01 0a020a02 0a030a02     ................
   22458:	0a030a03 0a040a04 0a040a04 0a050a05     ................
   22468:	0a060a05 0a060a06 0a070a07 0a070a07     ................
   22478:	0a080a08 0a090a08 0a090a09 0a0a0a0a     ................
   22488:	0a0a0a0a 0b0b0b0b 0b0c0b0b 0b0c0b0c     ................
   22498:	0b0d0b0d 0b0e0b0d 0b0e0b0e 0b0f0b0f     ................
   224a8:	0b0f0b0f 0b100b10 0b110b10 0b110b11     ................
   224b8:	0b120b11 0b120b12 0b130b13 0b130b13     ................
   224c8:	0b140b14 0b150b14 0b150b15 0b160b16     ................
   224d8:	0b170b16 0b180b17 0c180b18 0c190c19     ................
   224e8:	0c1a0c1a 0c1b0c1a 0c1c0c1b 0d1c0c1c     ................
   224f8:	0d1d0d1d 0d1e0d1e 0d1f0d1e 0d200d1f     .............. .
   22508:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   22518:	0d200d20 0c200c20 0c200c20 0c200c20      . . . . . . . .
   22528:	0c200c20 0c200c20 0a000a00 0a000a00      . . . .........
   22538:	0a010a00 0a010a01 0a020a02 0a030a02     ................
   22548:	0a030a03 0a040a04 0a040a04 0a050a05     ................
   22558:	0a060a05 0b060b06 0b070b07 0b080b07     ................
   22568:	0b080b08 0b090b08 0b090b09 0b0a0b0a     ................
   22578:	0b0b0b0a 0b0b0b0b 0b0c0b0c 0b0c0b0c     ................
   22588:	0b0d0b0d 0b0e0b0d 0b0e0b0e 0b0f0b0f     ................
   22598:	0b100b0f 0b100b10 0b110b10 0b110b11     ................
   225a8:	0b120b12 0b120b12 0b130b13 0b140b13     ................
   225b8:	0b140b14 0b150b14 0b150b15 0b160b16     ................
   225c8:	0b170b17 0c180b17 0c190c18 0c190c19     ................
   225d8:	0c1a0c1a 0c1b0c1b 0d1c0c1b 0d1d0d1c     ................
   225e8:	0d1d0d1d 0d1e0d1e 0d1f0d1f 0d200e1f     .............. .
   225f8:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   22608:	0d200d20 0d200d20 0c200c20 0c200c20      . . . . . . . .
   22618:	0c200c20 0c200c20 0a000a00 0a000a00      . . . .........
   22628:	0a010a00 0a010a01 0b020a02 0b030b02     ................
   22638:	0b030b03 0b040b04 0b040b04 0b050b05     ................
   22648:	0b060b05 0b060b06 0b070b07 0b080b07     ................
   22658:	0b080b08 0b090b08 0b090b09 0b0a0b0a     ................
   22668:	0b0b0b0a 0b0b0b0b 0b0c0b0c 0b0d0b0c     ................
   22678:	0b0d0b0d 0b0e0b0d 0b0e0b0e 0b0f0b0f     ................
   22688:	0b100b0f 0b100b10 0b110b11 0b110b11     ................
   22698:	0b120b12 0b130b12 0b130b13 0b140b13     ................
   226a8:	0b140b14 0b150b15 0b160b15 0b160b16     ................
   226b8:	0c170b17 0c180c18 0c190c18 0c1a0c19     ................
   226c8:	0c1a0c1a 0d1b0d1b 0d1c0d1c 0d1d0d1c     ................
   226d8:	0d1e0d1d 0d1e0d1e 0e1f0e1f 0e200e20     ............ . .
   226e8:	0e200e20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   226f8:	0d200d20 0d200d20 0d200d20 0c200d20      . . . . . . . .
   22708:	0c200c20 0c200c20 0b000b00 0b000b00      . . . .........
   22718:	0b010b00 0b010b01 0b020b02 0b030b02     ................
   22728:	0b030b03 0b040b04 0b050b04 0b050b05     ................
   22738:	0b060b05 0b060b06 0b070b07 0b080b07     ................
   22748:	0b080b08 0b090b09 0b090b09 0b0a0b0a     ................
   22758:	0b0b0b0a 0b0b0b0b 0b0c0b0c 0b0d0b0c     ................
   22768:	0b0d0b0d 0b0e0b0e 0b0e0b0e 0b0f0b0f     ................
   22778:	0b100b0f 0b100b10 0b110b11 0b110b11     ................
   22788:	0b120b12 0b130b12 0b130b13 0b140b13     ................
   22798:	0b140b14 0b150b15 0b160b15 0c170c16     ................
   227a8:	0c170c17 0c180c18 0c190c19 0c1a0c19     ................
   227b8:	0d1b0d1a 0d1b0d1b 0d1c0d1c 0d1d0d1d     ................
   227c8:	0e1e0d1d 0e1f0e1e 0e1f0e1f 0e200e20     ............ . .
   227d8:	0e200e20 0e200e20 0d200d20 0d200d20      . . . . . . . .
   227e8:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   227f8:	0c200d20 0c200c20 0b000b00 0b000b00      . . . .........
   22808:	0b010b00 0b010b01 0b020b02 0b030b02     ................
   22818:	0b030b03 0b040b04 0b050b04 0b050b05     ................
   22828:	0b060b05 0b060b06 0b070b07 0b080b07     ................
   22838:	0b080b08 0b090b09 0b0a0b09 0b0a0b0a     ................
   22848:	0b0b0b0a 0b0b0b0b 0b0c0b0c 0b0d0b0c     ................
   22858:	0b0d0b0d 0b0e0b0e 0b0f0b0e 0b0f0b0f     ................
   22868:	0b100b10 0b100b10 0b110b11 0b120b11     ................
   22878:	0b120b12 0b130b12 0b130b13 0b140b14     ................
   22888:	0c150b14 0c150c15 0c160c16 0c170c16     ................
   22898:	0c180c17 0c180c18 0d190c19 0d1a0d1a     ................
   228a8:	0d1b0d1a 0d1c0d1b 0d1c0d1c 0e1d0d1d     ................
   228b8:	0e1e0e1e 0e1f0e1e 0e200e1f 0e200e20     .......... . . .
   228c8:	0e200e20 0e200e20 0e200e20 0d200d20      . . . . . . . .
   228d8:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   228e8:	0d200d20 0c200d20 0b000b00 0b000b00      . . . .........
   228f8:	0b010b00 0b010b01 0b020b02 0b030b02     ................
   22908:	0b030b03 0b040b04 0b050b04 0b050b05     ................
   22918:	0b060b06 0b060b06 0b070b07 0b080b07     ................
   22928:	0b080b08 0b090b09 0b0a0b09 0b0a0b0a     ................
   22938:	0b0b0b0b 0c0c0b0b 0c0c0c0c 0c0d0c0c     ................
   22948:	0c0d0c0d 0c0e0c0e 0c0f0c0e 0c0f0c0f     ................
   22958:	0c100c10 0c110c10 0c110c11 0c120c11     ................
   22968:	0c120c12 0c130c13 0c130c13 0c140c14     ................
   22978:	0c150c14 0c150c15 0c160c16 0c170c17     ................
   22988:	0c180c17 0d190c18 0d190d19 0d1a0d1a     ................
   22998:	0d1b0d1b 0d1c0d1b 0e1d0e1c 0e1d0e1d     ................
   229a8:	0e1e0e1e 0e1f0e1f 0e200e1f 0e200e20     .......... . . .
   229b8:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   229c8:	0d200e20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   229d8:	0d200d20 0d200d20 0b000b00 0b000b00      . . . .........
   229e8:	0b010b00 0b010b01 0b020b02 0b030b02     ................
   229f8:	0b030b03 0b040b04 0b050b04 0b050b05     ................
   22a08:	0b060b06 0b070b06 0b070b07 0b080b07     ................
   22a18:	0c080b08 0c090c09 0c0a0c09 0c0a0c0a     ................
   22a28:	0c0b0c0b 0c0c0c0b 0c0c0c0c 0c0d0c0d     ................
   22a38:	0c0e0c0d 0c0e0c0e 0c0f0c0e 0c0f0c0f     ................
   22a48:	0c100c10 0c110c10 0c110c11 0c120c12     ................
   22a58:	0c120c12 0c130c13 0c140c13 0c140c14     ................
   22a68:	0c150c15 0c160c15 0c160c16 0c170c17     ................
   22a78:	0d180d18 0d190d18 0d1a0d19 0d1a0d1a     ................
   22a88:	0d1b0d1b 0e1c0e1c 0e1d0e1c 0e1e0e1d     ................
   22a98:	0e1e0e1e 0f1f0e1f 0f200f20 0e200e20     ........ . . . .
   22aa8:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   22ab8:	0e200e20 0d200e20 0d200d20 0d200d20      . . . . . . . .
   22ac8:	0d200d20 0d200d20 0b000b00 0b000b00      . . . .........
   22ad8:	0b010b01 0b010b01 0b020b02 0b030b02     ................
   22ae8:	0b030b03 0c040c04 0c050c04 0c050c05     ................
   22af8:	0c060c06 0c070c06 0c070c07 0c080c08     ................
   22b08:	0c080c08 0c090c09 0c0a0c09 0c0a0c0a     ................
   22b18:	0c0b0c0b 0c0c0c0b 0c0c0c0c 0c0d0c0d     ................
   22b28:	0c0e0c0d 0c0e0c0e 0c0f0c0f 0c100c0f     ................
   22b38:	0c100c10 0c110c10 0c110c11 0c120c12     ................
   22b48:	0c130c12 0c130c13 0c140c13 0c140c14     ................
   22b58:	0c150c15 0c160c15 0d170c16 0d170d17     ................
   22b68:	0d180d18 0d190d19 0d1a0d19 0e1b0d1a     ................
   22b78:	0e1b0e1b 0e1c0e1c 0e1d0e1d 0e1e0e1d     ................
   22b88:	0f1f0e1e 0f1f0f1f 0f200f20 0f200f20     ........ . . . .
   22b98:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   22ba8:	0e200e20 0e200e20 0d200e20 0d200d20      . . . . . . . .
   22bb8:	0d200d20 0d200d20 0c000c00 0c000c00      . . . .........
   22bc8:	0c010c01 0c010c01 0c020c02 0c030c02     ................
   22bd8:	0c030c03 0c040c04 0c050c04 0c050c05     ................
   22be8:	0c060c06 0c070c06 0c070c07 0c080c08     ................
   22bf8:	0c090c08 0c090c09 0c0a0c09 0c0a0c0a     ................
   22c08:	0c0b0c0b 0c0c0c0b 0c0c0c0c 0c0d0c0d     ................
   22c18:	0c0e0c0d 0c0e0c0e 0c0f0c0f 0c100c0f     ................
   22c28:	0c100c10 0c110c11 0c110c11 0c120c12     ................
   22c38:	0c130c12 0c130c13 0c140c14 0c150c14     ................
   22c48:	0d150c15 0d160d16 0d170d16 0d180d17     ................
   22c58:	0d180d18 0d190d19 0e1a0e19 0e1b0e1a     ................
   22c68:	0e1b0e1b 0e1c0e1c 0e1d0e1d 0f1e0f1d     ................
   22c78:	0f1f0f1e 0f1f0f1f 0f200f20 0f200f20     ........ . . . .
   22c88:	0f200f20 0e200f20 0e200e20 0e200e20      . . . . . . . .
   22c98:	0e200e20 0e200e20 0e200e20 0d200e20      . . . . . . . .
   22ca8:	0d200d20 0d200d20 0c000c00 0c000c00      . . . .........
   22cb8:	0c010c01 0c020c01 0c020c02 0c030c02     ................
   22cc8:	0c030c03 0c040c04 0c050c04 0c050c05     ................
   22cd8:	0c060c06 0c070c06 0c070c07 0c080c08     ................
   22ce8:	0c090c08 0c090c09 0c0a0c0a 0c0b0c0a     ................
   22cf8:	0c0b0c0b 0c0c0c0c 0c0d0c0c 0c0d0c0d     ................
   22d08:	0c0e0c0e 0c0e0c0e 0c0f0c0f 0c100c0f     ................
   22d18:	0d100c10 0d110d11 0d120d11 0d120d12     ................
   22d28:	0d130d13 0d130d13 0d140d14 0d150d14     ................
   22d38:	0d150d15 0d160d16 0d170d17 0d180d17     ................
   22d48:	0d180d18 0e190e19 0e1a0e1a 0e1b0e1a     ................
   22d58:	0e1c0e1b 0e1c0e1c 0f1d0f1d 0f1e0f1e     ................
   22d68:	0f1f0f1e 0f200f1f 0f200f20 0f200f20     ...... . . . . .
   22d78:	0f200f20 0f200f20 0e200f20 0e200e20      . . . . . . . .
   22d88:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   22d98:	0e200e20 0d200d20 0c000c00 0c000c00      . . . .........
   22da8:	0c010c01 0c020c01 0c020c02 0c030c02     ................
   22db8:	0c030c03 0c040c04 0c050c04 0c050c05     ................
   22dc8:	0c060c06 0c070c06 0c070c07 0c080c08     ................
   22dd8:	0c090c08 0c090c09 0c0a0c0a 0c0b0c0a     ................
   22de8:	0c0b0c0b 0c0c0c0c 0d0d0d0c 0d0d0d0d     ................
   22df8:	0d0e0d0e 0d0f0d0e 0d0f0d0f 0d100d10     ................
   22e08:	0d100d10 0d110d11 0d120d11 0d120d12     ................
   22e18:	0d130d13 0d140d13 0d140d14 0d150d15     ................
   22e28:	0d160d15 0d160d16 0d170d17 0e180d17     ................
   22e38:	0e190e18 0e190e19 0e1a0e1a 0e1b0e1b     ................
   22e48:	0f1c0e1b 0f1d0f1c 0f1d0f1d 0f1e0f1e     ................
   22e58:	0f1f0f1f 0f200f1f 0f200f20 0f200f20     ...... . . . . .
   22e68:	0f200f20 0f200f20 0f200f20 0e200f20      . . . . . . . .
   22e78:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   22e88:	0e200e20 0e200e20 0c000c00 0c000c00      . . . .........
   22e98:	0c010c01 0c020c01 0c020c02 0c030c03     ................
   22ea8:	0c040c03 0c040c04 0c050c04 0c050c05     ................
   22eb8:	0c060c06 0c070c06 0c070c07 0c080c08     ................
   22ec8:	0c090c08 0c090c09 0d0a0d0a 0d0b0d0a     ................
   22ed8:	0d0b0d0b 0d0c0d0c 0d0d0d0c 0d0d0d0d     ................
   22ee8:	0d0e0d0e 0d0f0d0e 0d0f0d0f 0d100d10     ................
   22ef8:	0d110d10 0d110d11 0d120d12 0d120d12     ................
   22f08:	0d130d13 0d140d13 0d140d14 0d150d15     ................
   22f18:	0d160d15 0d160d16 0e170e17 0e180e18     ................
   22f28:	0e190e18 0e1a0e19 0e1a0e1a 0f1b0f1b     ................
   22f38:	0f1c0f1c 0f1d0f1c 0f1e0f1d 0f1e0f1e     ................
   22f48:	101f101f 1020101f 0f200f20 0f200f20     ...... . . . . .
   22f58:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   22f68:	0e200f20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   22f78:	0e200e20 0e200e20 0c000c00 0c000c00      . . . .........
   22f88:	0c010c01 0c020c01 0c020c02 0c030c03     ................
   22f98:	0c040c03 0c040c04 0c050c05 0d060c05     ................
   22fa8:	0d060d06 0d070d06 0d070d07 0d080d08     ................
   22fb8:	0d090d08 0d090d09 0d0a0d0a 0d0b0d0a     ................
   22fc8:	0d0b0d0b 0d0c0d0c 0d0d0d0c 0d0d0d0d     ................
   22fd8:	0d0e0d0e 0d0f0d0e 0d0f0d0f 0d100d10     ................
   22fe8:	0d110d10 0d110d11 0d120d12 0d130d12     ................
   22ff8:	0d130d13 0d140d14 0d150d14 0d150d15     ................
   23008:	0e160d16 0e170e16 0e170e17 0e180e18     ................
   23018:	0e190e19 0e1a0e19 0f1b0f1a 0f1b0f1b     ................
   23028:	0f1c0f1c 0f1d0f1d 0f1e0f1d 101e101e     ................
   23038:	101f101f 1020101f 10201020 0f201020     ...... . . . . .
   23048:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   23058:	0f200f20 0f200f20 0e200e20 0e200e20      . . . . . . . .
   23068:	0e200e20 0e200e20 0c000c00 0d000c00      . . . .........
   23078:	0d010d01 0d020d01 0d020d02 0d030d03     ................
   23088:	0d040d03 0d040d04 0d050d05 0d060d05     ................
   23098:	0d060d06 0d070d07 0d080d07 0d080d08     ................
   230a8:	0d090d08 0d090d09 0d0a0d0a 0d0b0d0a     ................
   230b8:	0d0b0d0b 0d0c0d0c 0d0d0d0d 0d0e0d0d     ................
   230c8:	0d0e0d0e 0d0f0d0f 0d100d0f 0d100d10     ................
   230d8:	0d110d11 0d110d11 0d120d12 0d130d12     ................
   230e8:	0d130d13 0d140d14 0e150e14 0e150e15     ................
   230f8:	0e160e16 0e170e16 0e180e17 0e180e18     ................
   23108:	0f190e19 0f1a0f1a 0f1b0f1a 0f1c0f1b     ................
   23118:	0f1c0f1c 101d0f1d 101e101d 101e101e     ................
   23128:	101f101f 101f101f 10201020 10201020     ........ . . . .
   23138:	0f201020 0f200f20 0f200f20 0f200f20      . . . . . . . .
   23148:	0f200f20 0f200f20 0f200f20 0e200e20      . . . . . . . .
   23158:	0e200e20 0e200e20 0d000d00 0d000d00      . . . .........
   23168:	0d010d01 0d020d01 0d020d02 0d030d03     ................
   23178:	0d040d03 0d040d04 0d050d05 0d060d05     ................
   23188:	0d060d06 0d070d07 0d080d07 0d080d08     ................
   23198:	0d090d09 0d0a0d09 0d0a0d0a 0d0b0d0b     ................
   231a8:	0d0c0d0b 0d0c0d0c 0d0d0d0d 0d0e0d0d     ................
   231b8:	0d0e0d0e 0d0f0d0f 0d100d0f 0e100e10     ................
   231c8:	0e110e11 0e120e11 0e120e12 0e130e13     ................
   231d8:	0e140e13 0e140e14 0e150e14 0e160e15     ................
   231e8:	0e160e16 0e170e17 0e180e17 0f190f18     ................
   231f8:	0f190f19 0f1a0f1a 0f1b0f1b 0f1c0f1b     ................
   23208:	101c101c 101d101d 101e101d 101e101e     ................
   23218:	101f101e 101f101f 10201020 10201020     ........ . . . .
   23228:	10201020 0f201020 0f200f20 0f200f20      . . . . . . . .
   23238:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   23248:	0e200e20 0e200e20 0d000d00 0d000d00      . . . .........
   23258:	0d010d01 0d020d01 0d020d02 0d030d03     ................
   23268:	0d040d03 0d040d04 0d050d05 0d060d05     ................
   23278:	0d060d06 0d070d07 0d080d07 0d080d08     ................
   23288:	0d090d09 0d0a0d09 0d0a0d0a 0d0b0d0b     ................
   23298:	0d0c0d0b 0d0c0d0c 0e0d0d0d 0e0e0e0d     ................
   232a8:	0e0e0e0e 0e0f0e0f 0e100e0f 0e100e10     ................
   232b8:	0e110e11 0e120e11 0e120e12 0e130e13     ................
   232c8:	0e140e13 0e140e14 0e150e15 0e160e15     ................
   232d8:	0e160e16 0f170e17 0f180f18 0f190f18     ................
   232e8:	0f1a0f19 0f1a0f1a 101b0f1b 101c101b     ................
   232f8:	101c101c 101d101d 101e101d 101e101e     ................
   23308:	101f101e 101f101f 10201020 10201020     ........ . . . .
   23318:	10201020 10201020 10201020 0f200f20      . . . . . . . .
   23328:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   23338:	0f200f20 0e200e20 0d000d00 0d000d00      . . . .........
   23348:	0d010d01 0d020d01 0d020d02 0d030d03     ................
   23358:	0d040d03 0d040d04 0d050d05 0d060d05     ................
   23368:	0d060d06 0d070d07 0d080d07 0d080d08     ................
   23378:	0d090d09 0d0a0d09 0d0a0d0a 0e0b0d0b     ................
   23388:	0e0c0e0b 0e0c0e0c 0e0d0e0d 0e0e0e0d     ................
   23398:	0e0e0e0e 0e0f0e0f 0e100e0f 0e110e10     ................
   233a8:	0e110e11 0e120e12 0e120e12 0e130e13     ................
   233b8:	0e140e13 0e140e14 0e150e15 0e160e15     ................
   233c8:	0f170e16 0f170f17 0f180f18 0f190f19     ................
   233d8:	0f1a0f19 101b0f1a 101b101b 101c101b     ................
   233e8:	101c101c 101d101d 101d101d 101e101e     ................
   233f8:	101f101e 101f101f 1020101f 10201020     .......... . . .
   23408:	10201020 10201020 10201020 10201020      . . . . . . . .
   23418:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   23428:	0f200f20 0f200f20 0d000d00 0d000d00      . . . .........
   23438:	0d010d01 0d020d01 0d020d02 0d030d03     ................
   23448:	0d040d03 0d040d04 0d050d05 0d060d05     ................
   23458:	0d060d06 0e070d07 0e080e07 0e080e08     ................
   23468:	0e090e09 0e0a0e09 0e0a0e0a 0e0b0e0b     ................
   23478:	0e0c0e0b 0e0c0e0c 0e0d0e0d 0e0e0e0e     ................
   23488:	0e0f0e0e 0e0f0e0f 0e100e10 0e110e10     ................
   23498:	0e110e11 0e120e12 0e130e12 0e130e13     ................
   234a8:	0e140e14 0e150e14 0f150e15 0f160f16     ................
   234b8:	0f170f16 0f180f17 0f180f18 0f190f19     ................
   234c8:	101a101a 101a101a 101b101b 101c101b     ................
   234d8:	101c101c 101d101c 101d101d 101e101e     ................
   234e8:	101e101e 101f101f 1020101f 10201020     .......... . . .
   234f8:	10201020 10201020 10201020 10201020      . . . . . . . .
   23508:	10201020 0f200f20 0f200f20 0f200f20      . . . . . . . .
   23518:	0f200f20 0f200f20 0d000d00 0d000d00      . . . .........
   23528:	0d010d01 0e020d01 0e020e02 0e030e03     ................
   23538:	0e040e03 0e040e04 0e050e05 0e060e05     ................
   23548:	0e060e06 0e070e07 0e080e07 0e080e08     ................
   23558:	0e090e09 0e0a0e09 0e0a0e0a 0e0b0e0b     ................
   23568:	0e0c0e0b 0e0d0e0c 0e0d0e0d 0e0e0e0e     ................
   23578:	0e0f0e0e 0e0f0e0f 0e100e10 0e110e10     ................
   23588:	0e110e11 0e120e12 0f130e12 0f130f13     ................
   23598:	0f140f14 0f150f14 0f150f15 0f160f16     ................
   235a8:	0f170f17 0f180f17 10190f18 10191019     ................
   235b8:	101a1019 101a101a 101b101b 101b101b     ................
   235c8:	101c101c 101d101c 101d101d 101e101d     ................
   235d8:	101e101e 101f101f 1020101f 10201020     .......... . . .
   235e8:	10201020 10201020 10201020 10201020      . . . . . . . .
   235f8:	10201020 10201020 0f200f20 0f200f20      . . . . . . . .
   23608:	0f200f20 0f200f20 0e000e00 0e000e00      . . . .........
   23618:	0e010e01 0e020e01 0e020e02 0e030e03     ................
   23628:	0e040e03 0e040e04 0e050e05 0e060e05     ................
   23638:	0e060e06 0e070e07 0e080e07 0e090e08     ................
   23648:	0e090e09 0e0a0e0a 0e0b0e0a 0e0b0e0b     ................
   23658:	0e0c0e0c 0e0d0e0c 0e0d0e0d 0e0e0e0e     ................
   23668:	0e0f0e0e 0e0f0e0f 0f100e10 0f110f10     ................
   23678:	0f110f11 0f120f12 0f130f13 0f140f13     ................
   23688:	0f140f14 0f150f15 0f160f15 0f160f16     ................
   23698:	0f170f17 10180f18 10181018 10191019     ................
   236a8:	101a1019 101a101a 101b101a 101b101b     ................
   236b8:	101c101c 101d101c 101d101d 101e101d     ................
   236c8:	101e101e 101f101f 101f101f 10201020     ............ . .
   236d8:	10201020 10201020 10201020 10201020      . . . . . . . .
   236e8:	10201020 10201020 10201020 0f201020      . . . . . . . .
   236f8:	0f200f20 0f200f20 0e000e00 0e000e00      . . . .........
   23708:	0e010e01 0e020e01 0e020e02 0e030e03     ................
   23718:	0e040e03 0e040e04 0e050e05 0e060e05     ................
   23728:	0e070e06 0e070e07 0e080e08 0e090e08     ................
   23738:	0e090e09 0e0a0e0a 0e0b0e0a 0e0b0e0b     ................
   23748:	0e0c0e0c 0e0d0e0c 0e0d0e0d 0f0e0e0e     ................
   23758:	0f0f0f0e 0f100f0f 0f100f10 0f110f11     ................
   23768:	0f120f11 0f120f12 0f130f13 0f140f13     ................
   23778:	0f140f14 0f150f15 0f160f15 0f170f16     ................
   23788:	10171017 10181017 10181018 10191019     ................
   23798:	10191019 101a101a 101b101a 101b101b     ................
   237a8:	101c101c 101c101c 101d101d 101e101d     ................
   237b8:	101e101e 101f101e 101f101f 10201020     ............ . .
   237c8:	10201020 10201020 10201020 10201020      . . . . . . . .
   237d8:	10201020 10201020 10201020 10201020      . . . . . . . .
   237e8:	0f201020 0f200f20 0e000e00 0e000e00      . . . .........
   237f8:	0e010e01 0e020e01 0e020e02 0e030e03     ................
   23808:	0e040e03 0e040e04 0e050e05 0e060e06     ................
   23818:	0e070e06 0e070e07 0e080e08 0e090e08     ................
   23828:	0e090e09 0e0a0e0a 0e0b0e0a 0e0b0e0b     ................
   23838:	0f0c0f0c 0f0d0f0c 0f0d0f0d 0f0e0f0e     ................
   23848:	0f0f0f0f 0f100f0f 0f100f10 0f110f11     ................
   23858:	0f120f11 0f120f12 0f130f13 0f140f13     ................
   23868:	0f140f14 0f150f15 10160f16 10161016     ................
   23878:	10171017 10181017 10181018 10191019     ................
   23888:	10191019 101a101a 101b101a 101b101b     ................
   23898:	101c101b 101c101c 101d101d 101d101d     ................
   238a8:	101e101e 101f101e 101f101f 1020101f     .............. .
   238b8:	10201020 10201020 10201020 10201020      . . . . . . . .
   238c8:	10201020 10201020 10201020 10201020      . . . . . . . .
   238d8:	10201020 0f201020 0e000e00 0e000e00      . . . .........
   238e8:	0e010e01 0e020e01 0e020e02 0e030e03     ................
   238f8:	0e040e03 0e040e04 0e050e05 0e060e06     ................
   23908:	0e070e06 0e070e07 0e080e08 0e090e08     ................
   23918:	0f090f09 0f0a0f0a 0f0b0f0a 0f0b0f0b     ................
   23928:	0f0c0f0c 0f0d0f0c 0f0e0f0d 0f0e0f0e     ................
   23938:	0f0f0f0f 0f100f0f 0f100f10 0f110f11     ................
   23948:	0f120f11 0f120f12 0f130f13 0f140f14     ................
   23958:	0f150f14 10151015 10161016 10161016     ................
   23968:	10171017 10181017 10181018 10191018     ................
   23978:	10191019 101a101a 101a101a 101b101b     ................
   23988:	101c101b 101c101c 101d101c 101d101d     ................
   23998:	101e101e 101f101e 101f101f 1020101f     .............. .
   239a8:	10201020 10201020 10201020 10201020      . . . . . . . .
   239b8:	10201020 10201020 10201020 10201020      . . . . . . . .
   239c8:	10201020 10201020 0e000e00 0e000e00      . . . .........
   239d8:	0e010e01 0e020e01 0e020e02 0f030e03     ................
   239e8:	0f040f03 0f050f04 0f050f05 0f060f06     ................
   239f8:	0f070f06 0f070f07 0f080f08 0f090f08     ................
   23a08:	0f090f09 0f0a0f0a 0f0b0f0a 0f0c0f0b     ................
   23a18:	0f0c0f0c 0f0d0f0d 0f0e0f0d 0f0e0f0e     ................
   23a28:	0f0f0f0f 0f100f0f 0f100f10 0f110f11     ................
   23a38:	0f120f11 0f130f12 10131013 10141014     ................
   23a48:	10151014 10151015 10161015 10161016     ................
   23a58:	10171017 10171017 10181018 10191018     ................
   23a68:	10191019 101a1019 101a101a 101b101b     ................
   23a78:	101c101b 101c101c 101d101c 101d101d     ................
   23a88:	101e101e 101e101e 101f101f 1020101f     .............. .
   23a98:	10201020 10201020 10201020 10201020      . . . . . . . .
   23aa8:	10201020 10201020 10201020 10201020      . . . . . . . .
   23ab8:	10201020 10201020 0f000f00 0f000f00      . . . .........
   23ac8:	0f010f01 0f020f01 0f020f02 0f030f03     ................
   23ad8:	0f040f03 0f050f04 0f050f05 0f060f06     ................
   23ae8:	0f070f06 0f070f07 0f080f08 0f090f08     ................
   23af8:	0f090f09 0f0a0f0a 0f0b0f0b 0f0c0f0b     ................
   23b08:	0f0c0f0c 0f0d0f0d 0f0e0f0d 0f0e0f0e     ................
   23b18:	0f0f0f0f 0f100f0f 0f110f10 10111011     ................
   23b28:	10121012 10131012 10131013 10141014     ................
   23b38:	10141014 10151015 10161015 10161016     ................
   23b48:	10171016 10171017 10181018 10181018     ................
   23b58:	10191019 101a1019 101a101a 101b101b     ................
   23b68:	101b101b 101c101c 101d101c 101d101d     ................
   23b78:	101e101d 101e101e 101f101f 101f101f     ................
   23b88:	10201020 10201020 10201020 10201020      . . . . . . . .
   23b98:	10201020 10201020 10201020 10201020      . . . . . . . .
   23ba8:	10201020 10201020 0f000f00 0f000f00      . . . .........
   23bb8:	0f010f01 0f020f01 0f020f02 0f030f03     ................
   23bc8:	0f040f03 0f050f04 0f050f05 0f060f06     ................
   23bd8:	0f070f06 0f070f07 0f080f08 0f090f08     ................
   23be8:	0f0a0f09 0f0a0f0a 0f0b0f0b 0f0c0f0b     ................
   23bf8:	0f0c0f0c 0f0d0f0d 0f0e0f0d 0f0e0f0e     ................
   23c08:	100f100f 1010100f 10101010 10111011     ................
   23c18:	10121011 10121012 10131013 10141013     ................
   23c28:	10141014 10151015 10151015 10161016     ................
   23c38:	10171016 10171017 10181018 10181018     ................
   23c48:	10191019 101a1019 101a101a 101b101a     ................
   23c58:	101b101b 101c101c 101c101c 101d101d     ................
   23c68:	101e101d 101e101e 101f101e 101f101f     ................
   23c78:	10201020 10201020 10201020 10201020      . . . . . . . .
   23c88:	10201020 10201020 10201020 10201020      . . . . . . . .
   23c98:	10201020 10201020 0f000f00 0f000f00      . . . .........
   23ca8:	0f010f01 0f020f01 0f020f02 0f030f03     ................
   23cb8:	0f040f03 0f050f04 0f050f05 0f060f06     ................
   23cc8:	0f070f06 0f070f07 0f080f08 0f090f09     ................
   23cd8:	0f0a0f09 0f0a0f0a 0f0b0f0b 0f0c0f0b     ................
   23ce8:	0f0c0f0c 100d100d 100e100d 100e100e     ................
   23cf8:	100f100f 1010100f 10101010 10111011     ................
   23d08:	10121011 10121012 10131013 10141013     ................
   23d18:	10141014 10151015 10151015 10161016     ................
   23d28:	10171016 10171017 10181017 10181018     ................
   23d38:	10191019 10191019 101a101a 101b101a     ................
   23d48:	101b101b 101c101b 101c101c 101d101d     ................
   23d58:	101e101d 101e101e 101f101e 101f101f     ................
   23d68:	10201020 10201020 10201020 10201020      . . . . . . . .
   23d78:	10201020 10201020 10201020 10201020      . . . . . . . .
   23d88:	10201020 10201020 0f000f00 0f000f00      . . . .........
   23d98:	0f010f01 0f020f01 0f020f02 0f030f03     ................
   23da8:	0f040f03 0f050f04 0f050f05 0f060f06     ................
   23db8:	0f070f06 0f070f07 0f080f08 0f090f09     ................
   23dc8:	0f0a0f09 0f0a0f0a 100b100b 100c100b     ................
   23dd8:	100c100c 100d100d 100e100d 100e100e     ................
   23de8:	100f100f 1010100f 10101010 10111011     ................
   23df8:	10121011 10121012 10131013 10141013     ................
   23e08:	10141014 10151015 10151015 10161016     ................
   23e18:	10161016 10171017 10181017 10181018     ................
   23e28:	10191018 10191019 101a101a 101a101a     ................
   23e38:	101b101b 101c101b 101c101c 101d101d     ................
   23e48:	101d101d 101e101e 101f101e 101f101f     ................
   23e58:	1020101f 10201020 10201020 10201020     .. . . . . . . .
   23e68:	10201020 10201020 10201020 10201020      . . . . . . . .
   23e78:	10201020 10201020 0f000f00 0f000f00      . . . .........
   23e88:	0f010f01 0f020f01 0f020f02 0f030f03     ................
   23e98:	0f040f03 0f050f04 10051005 10061006     ................
   23ea8:	10071006 10071007 10081008 10091009     ................
   23eb8:	100a1009 100a100a 100b100b 100c100b     ................
   23ec8:	100c100c 100d100d 100e100d 100e100e     ................
   23ed8:	100f100f 1010100f 10101010 10111011     ................
   23ee8:	10121011 10121012 10131013 10141013     ................
   23ef8:	10141014 10151015 10151015 10161015     ................
   23f08:	10161016 10171017 10171017 10181018     ................
   23f18:	10191018 10191019 101a101a 101a101a     ................
   23f28:	101b101b 101c101b 101c101c 101d101c     ................
   23f38:	101d101d 101e101e 101e101e 101f101f     ................
   23f48:	1020101f 10201020 10201020 10201020     .. . . . . . . .
   23f58:	10201020 10201020 10201020 10201020      . . . . . . . .
   23f68:	10201020 10201020 10001000 10001000      . . . .........
   23f78:	10011001 10021001 10021002 10031003     ................
   23f88:	10041003 10051004 10051005 10061006     ................
   23f98:	10071006 10071007 10081008 10091009     ................
   23fa8:	100a1009 100a100a 100b100b 100c100b     ................
   23fb8:	100c100c 100d100d 100e100d 100e100e     ................
   23fc8:	100f100f 1010100f 10101010 10111011     ................
   23fd8:	10121011 10121012 10131013 10141013     ................
   23fe8:	10141014 10151015 10151015 10161015     ................
   23ff8:	10161016 10171017 10171017 10181018     ................
   24008:	10191018 10191019 101a1019 101a101a     ................
   24018:	101b101b 101b101b 101c101c 101d101c     ................
   24028:	101d101d 101e101d 101e101e 101f101f     ................
   24038:	1020101f 10201020 10201020 10201020     .. . . . . . . .
   24048:	10201020 10201020 10201020 10201020      . . . . . . . .
   24058:	10201020 10201020 10001000 10001000      . . . .........
   24068:	10011001 10021001 10021002 10031003     ................
   24078:	10041003 10051004 10051005 10061006     ................
   24088:	10071006 10071007 10081008 10091009     ................
   24098:	100a1009 100a100a 100b100b 100c100b     ................
   240a8:	100c100c 100d100d 100e100d 100e100e     ................
   240b8:	100f100f 1010100f 10101010 10111011     ................
   240c8:	10121011 10121012 10131013 10141013     ................
   240d8:	10141014 10151015 10151015 10161015     ................
   240e8:	10161016 10171016 10171017 10181018     ................
   240f8:	10181018 10191019 101a1019 101a101a     ................
   24108:	101b101a 101b101b 101c101c 101d101c     ................
   24118:	101d101d 101e101d 101e101e 101f101f     ................
   24128:	101f101f 10201020 10201020 10201020     .... . . . . . .
   24138:	10201020 10201020 10201020 10201020      . . . . . . . .
   24148:	10201020 10201020 10001000 10001000      . . . .........
   24158:	10011001 10021001 10021002 10031003     ................
   24168:	10041003 10051004 10051005 10061006     ................
   24178:	10071006 10071007 10081008 10091009     ................
   24188:	100a1009 100a100a 100b100b 100c100b     ................
   24198:	100c100c 100d100c 100d100d 100e100e     ................
   241a8:	100f100e 100f100f 10101010 10111010     ................
   241b8:	10111011 10121012 10131012 10131013     ................
   241c8:	10141014 10151014 10151015 10151015     ................
   241d8:	10161016 10171016 10171017 10181017     ................
   241e8:	10181018 10191019 10191019 101a101a     ................
   241f8:	101b101a 101b101b 101c101c 101c101c     ................
   24208:	101d101d 101e101d 101e101e 101f101e     ................
   24218:	101f101f 10201020 10201020 10201020     .... . . . . . .
   24228:	10201020 10201020 10201020 10201020      . . . . . . . .
   24238:	10201020 10201020 10001000 10001000      . . . .........
   24248:	10011001 10021001 10021002 10031003     ................
   24258:	10041003 10051004 10051005 10061006     ................
   24268:	10071006 10071007 10081008 10091008     ................
   24278:	100a1009 100a100a 100b100a 100b100b     ................
   24288:	100c100c 100d100c 100d100d 100e100e     ................
   24298:	100f100e 100f100f 10101010 10111010     ................
   242a8:	10111011 10121012 10131012 10131013     ................
   242b8:	10141014 10151014 10151015 10151015     ................
   242c8:	10161016 10161016 10171017 10181017     ................
   242d8:	10181018 10191019 10191019 101a101a     ................
   242e8:	101b101a 101b101b 101c101b 101c101c     ................
   242f8:	101d101d 101d101d 101e101e 101f101e     ................
   24308:	101f101f 1020101f 10201020 10201020     ...... . . . . .
   24318:	10201020 10201020 10201020 10201020      . . . . . . . .
   24328:	10201020 10201020 10001000 10001000      . . . .........
   24338:	10011000 10021001 10021002 10031003     ................
   24348:	10041003 10041004 10051005 10061006     ................
   24358:	10071006 10071007 10081008 10091008     ................
   24368:	100a1009 100a100a 100b100a 100b100b     ................
   24378:	100c100c 100d100c 100d100d 100e100e     ................
   24388:	100f100e 100f100f 10101010 10111010     ................
   24398:	10111011 10121012 10131012 10131013     ................
   243a8:	10141014 10151014 10151015 10151015     ................
   243b8:	10161015 10161016 10171017 10181017     ................
   243c8:	10181018 10191018 10191019 101a101a     ................
   243d8:	101a101a 101b101b 101c101b 101c101c     ................
   243e8:	101d101c 101d101d 101e101e 101f101e     ................
   243f8:	101f101f 1020101f 10201020 10201020     ...... . . . . .
   24408:	10201020 10201020 10201020 10201020      . . . . . . . .
   24418:	10201020 10201020                        . . . .

00024420 <_ZN3app5chip823PHYSICAL_TO_VIRTUAL_MAP17h5b1a7b084f35e873E>:
   24420:	0001e660 06040000 06080005 060c0009     `...............
   24430:	0610000d 06150011 06190016 061d001a     ................
   24440:	0621001d 06240021 06280025 062d002a     ..!.!.$.%.(.*.-.
   24450:	0631002e 06340031 06380035 063c0038     ..1.1.4.5.8.8.<.
   24460:	0640003c 06440040 06470043 064b0047     <.@.@.D.C.G.G.K.
   24470:	064f004a 0652004d 06560051 065a0055     J.O.M.R.Q.V.U.Z.
   24480:	055d0058 0560005c 0563005f 05660063     X.].\.`._.c.c.f.
   24490:	056a0066 056d006a 0470006e 04740071     f.j.j.m.n.p.q.t.
   244a0:	04770074 0c040700 0c080705 0c0c0709     t.w.............
   244b0:	0c10070d 0c150711 0c190716 0c1c0719     ................
   244c0:	0c20071d 0c240721 0c280725 0c2d072a     .. .!.$.%.(.*.-.
   244d0:	0c30072d 0c340731 0c380735 0b3b0738     -.0.1.4.5.8.8.;.
   244e0:	0b40073c 0b430740 0b470744 0b4b0748     <.@.@.C.D.G.H.K.
   244f0:	0b4e074b 0b52074f 0b560752 0b590657     K.N.O.R.R.V.W.Y.
   24500:	0b5c065a 0a60065d 0a630660 0a660663     Z.\.].`.`.c.c.f.
   24510:	0a6a0667 096d056b 0970056e 09730571     g.j.k.m.n.p.q.s.
   24520:	09770574 13040d00 12080d05 120c0d09     t.w.............
   24530:	12100d0d 12150d11 12180d15 121c0d19     ................
   24540:	12200d1d 12240d21 12280d25 122c0d28     .. .!.$.%.(.(.,.
   24550:	12300d2d 12340d31 12370c34 113b0c38     -.0.1.4.4.7.8.;.
   24560:	113f0c3c 11430c40 11470c44 114a0c47     <.?.@.C.D.G.G.J.
   24570:	114e0c4b 11510c4e 10560c52 10590c56     K.N.N.Q.R.V.V.Y.
   24580:	105c0b5a 0f5f0b5d 0f620b60 0f660b63     Z.\.]._.`.b.c.f.
   24590:	0f6a0a66 0e6d0a6b 0e700a6e 0e730a71     f.j.k.m.n.p.q.s.
   245a0:	0d760a74 1a041500 1a081305 1a0c1309     t.v.............
   245b0:	1a10130d 1a131310 1a181315 1a1c1319     ................
   245c0:	1920131d 19231320 19271324 192c1328     .. . .#.$.'.(.,.
   245d0:	1930132d 19331330 19371234 183a1238     -.0.0.3.4.7.8.:.
   245e0:	183f123b 18431240 18461243 174a1247     ;.?.@.C.C.F.G.J.
   245f0:	174d124b 1751114e 17551152 17591156     K.M.N.Q.R.U.V.Y.
   24600:	165c1159 165f105c 15621060 15651063     Y.\.\._.`.b.c.e.
   24610:	156a0f66 136d0f6a 13700f6d 12730f71     f.j.j.m.m.p.q.s.
   24620:	12760e74 20041b00 20081b05 200c1b09     t.v.... ... ... 
   24630:	200f1b0d 20131b10 20181b15 201c1a19     ... ... ... ... 
   24640:	201f1a1c 20231a20 20271a24 1f2c1a28     ...  .# $.' (.,.
   24650:	1f2f1a2c 1f331a30 1f361933 1e3a1937     ,./.0.3.3.6.7.:.
   24660:	1e3f193b 1e42193f 1e461943 1d491846     ;.?.?.B.C.F.F.I.
   24670:	1d4d184a 1d51184e 1c551851 1c581756     J.M.N.Q.Q.U.V.X.
   24680:	1b5b1759 1b5f165c 1a62165f 1a651662     Y.[.\._._.b.b.e.
   24690:	1a691565 196c156a 1970156d 18731370     e.i.j.l.m.p.p.s.
   246a0:	18761374 26042100 26082105 260c2109     t.v..!.&.!.&.!.&
   246b0:	260f210c 26132110 26182115 261b2118     .!.&.!.&.!.&.!.&
   246c0:	261f211c 26232120 26272023 252b2027     .!.& !#&# '&' +%
   246d0:	252f202c 2532202f 25362033 25391f36     , /%/ 2%3 6%6.9%
   246e0:	243d1f3a 24421f3d 24451e42 23491e46     :.=$=.B$B.E$F.I#
   246f0:	234d1e49 23501d4d 22551d51 21581c55     I.M#M.P#Q.U"U.X!
   24700:	215b1c58 205e1c5b 20611b5e 1f641b61     X.[![.^ ^.a a.d.
   24710:	1f671a64 1e6c1a69 1e6f196c 1d72196f     d.g.i.l.l.o.o.r.
   24720:	1d761973 2e042700 2d082705 2d0b2709     s.v..'...'.-.'.-
   24730:	2d0f270c 2d132710 2d172713 2d1b2718     .'.-.'.-.'.-.'.-
   24740:	2d1f271b 2d22271f 2c262623 2c2b2626     .'.-.'"-#&&,&&+,
   24750:	2c2e262b 2c32262e 2c352632 2c392535     +&.,.&2,2&5,5%9,
   24760:	2c3c2539 2b41253d 2b442541 2b482445     9%<,=%A+A%D+E$H+
   24770:	2b4c2448 2a4f244c 2a52234f 28572252     H$L+L$O*O#R*R"W(
   24780:	275a2157 265d215a 2560205d 24632060     W!Z'Z!]&] `%` c$
   24790:	24671f63 236b1f67 236e1e6b 22711e6e     c.g$g.k#k.n#n.q"
   247a0:	22751d71 34042f00 34082e05 330b2e08     q.u"./.4...4...3
   247b0:	330f2e0c 33122e0f 33172e13 331a2e17     ...3...3...3...3
   247c0:	331e2e1b 33222d1e 32252d22 322a2d26     ...3.-"3"-%2&-*2
   247d0:	322d2d2a 32312d2e 32342d31 32382d35     *--2.-121-425-82
   247e0:	323b2c38 32402c3b 31432c40 31472c44     8,;2;,@2@,C1D,G1
   247f0:	314b2b47 314e2b4a 30512a4e 2f552851     G+K1J+N1N*Q0Q(U/
   24800:	2e592755 2d5c2659 2c5f255c 2b62255f     U'Y.Y&\-\%_,_%b+
   24810:	2a652462 28692465 286d2369 2770236c     b$e*e$i(i#m(l#p'
   24820:	27732270 3a043500 3a073505 3a0b3408     p"s'.5.:.5.:.4.:
   24830:	390e340c 3912340f 39163413 391a3417     .4.9.4.9.4.9.4.9
   24840:	391d341a 3821331e 38243321 38283325     .4.9.3!8!3$8%3(8
   24850:	382c3328 3830332d 38333330 38373334     (3,8-30803384378
   24860:	383a3337 383f323b 3842323f 38463243     73:8;2?8?2B8C2F8
   24870:	37493246 374d314a 3650304d 36543050     F2I7J1M7M0P6P0T6
   24880:	34572e54 335a2d57 325e2c5a 31612b5d     T.W4W-Z3Z,^2]+a1
   24890:	30642a60 2f672a64 2e6b2867 2d6e286b     `*d0d*g/g(k.k(n-
   248a0:	2c72276e 41043b00 41073b05 410b3a08     n'r,.;.A.;.A.:.A
   248b0:	400e3a0b 40113a0f 40163a12 40193a16     .:.@.:.@.:.@.:.@
   248c0:	401d3a1a 3f20391d 3f243921 3f273924     .:.@.9 ?!9$?$9'?
   248d0:	3f2c3928 3f2f392c 3f32392f 3f363933     (9,?,9/?/92?396?
   248e0:	3f393936 3d3d393a 3d41393d 3f453842     699?:9===9A=B8E?
   248f0:	3f483845 3f4c3848 3d4f374c 3c52364f     E8H?H8L?L7O=O6R<
   24900:	3b563552 39593356 385c3259 375f315c     R5V;V3Y9Y2\8\1_7
   24910:	3562305f 34662f62 336a2e65 326d2e6a     _0b5b/f4e.j3j.m2
   24920:	31702d6d 47044200 47074205 470a4208     m-p1.B.G.B.G.B.G
   24930:	460e410b 4611410e 46154112 46194116     .A.F.A.F.A.F.A.F
   24940:	451c4019 4520401d 45234020 45264023     .@.E.@ E @#E#@&E
   24950:	442b4027 442e402b 4431402e 44354031     '@+D+@.D.@1D1@5D
   24960:	44383f35 443c3f38 44403f3b 44443f40     5?8D8?<D;?@D@?DD
   24970:	44474044 444b3f47 444e3f4b 43513c4e     D@GDG?KDK?NDN<QC
   24980:	41553b51 40583955 3f5b3857 3c5e375b     Q;UAU9X@W8[?[7^<
   24990:	3b61365e 3a643561 39673464 386b3367     ^6a;a5d:d4g9g3k8
   249a0:	376f326b 4c044800 4c074804 4c0a4708     k2o7.H.L.H.L.G.L
   249b0:	4c0d470b 4b11470e 4b154711 4b184615     .G.L.G.K.G.K.F.K
   249c0:	4b1b4618 4b1f461c 4a22461f 4a254622     .F.K.F.K.F"J"F%J
   249d0:	4a2a4525 492d452a 4930452d 49334530     %E*J*E-I-E0I0E3I
   249e0:	49374533 493a4536 493f453a 4942453d     3E7I6E:I:E?I=EBI
   249f0:	49464542 49494545 484c4549 484f444c     BEFIEEIIIELHLDOH
   24a00:	4752424f 45564052 44593f56 435c3d59     OBRGR@VEV?YDY=\C
   24a10:	415f3b5c 40623a5f 3f653962 3d6a3865     \;_A_:b@b9e?e8j=
   24a20:	3c6d3769 52034d00 51074d04 510a4d07     i7m<.M.R.M.Q.M.Q
   24a30:	510d4d0a 51104c0d 51134c10 50174c15     .M.Q.L.Q.L.Q.L.P
   24a40:	501a4c18 501e4b1b 50214b1e 4f244b21     .L.P.K.P.K!P!K$O
   24a50:	4f274b24 4f2c4a27 4e2f4a2b 4e324a2e     $K'O'J,O+J/N.J2N
   24a60:	4e354a32 4e384a35 4d3c4a38 4d404a3c     2J5N5J8N8J<M<J@M
   24a70:	4d444a40 4d474a43 4d4a4946 4c4d484a     @JDMCJGMFIJMJHML
   24a80:	4b50474d 4a554550 49574554 485a4357     MGPKPEUJTEWIWCZH
   24a90:	465e415a 4560415d 44633f60 43673d63     ZA^F]A`E`?cDc=gC
   24aa0:	416b3c66 58035200 58065204 57095207     f<kA.R.X.R.X.R.W
   24ab0:	570c520a 570f520d 57125210 57175113     .R.W.R.W.R.W.Q.W
   24ac0:	571a5117 561d511a 5620511d 56235020     .Q.W.Q.V.Q V P#V
   24ad0:	56265023 552a4f26 552d4f2a 54304f2d     #P&V&O*U*O-U-O0T
   24ae0:	54334f30 54374e33 523a4e36 523d4e3a     0O3T3N7T6N:R:N=R
   24af0:	52424e3d 52454e41 51484d44 514b4d47     =NBRANERDMHQGMKQ
   24b00:	4f4e4c4b 4e514b4e 4d554951 4c584855     KLNONKQNQIUMUHXL
   24b10:	4b5b4758 4a5f455b 4961445e 47644361     XG[K[E_J^DaIaCdG
   24b20:	46674264 5d035900 5d065904 5d095807     dBgF.Y.].Y.].X.]
   24b30:	5d0c580a 5c0f580d 5c125810 5c165812     .X.].X.\.X.\.X.\
   24b40:	5c195716 5c1c5719 5c1f571c 5b22571f     .W.\.W.\.W.\.W"[
   24b50:	5b255622 5a285625 5a2c5528 5a2f552c     "V%[%V(Z(U,Z,U/Z
   24b60:	5932552f 59355432 58385435 583b5438     /U2Y2T5Y5T8X8T;X
   24b70:	573f543b 5743523f 57465242 56495146     ;T?W?RCWBRFWFQIV
   24b80:	554c5049 544f4f4c 52544d4f 51564d52     IPLULOOTOMTRRMVQ
   24b90:	4f594c56 4e5c4a59 4d5f495c 4c62485f     VLYOYJ\N\I_M_HbL
   24ba0:	4b664662 62035e00 62065e04 62095e07     bFfK.^.b.^.b.^.b
   24bb0:	620c5d0a 620e5d0d 62115d0f 61155d12     .].b.].b.].b.].a
   24bc0:	61185d16 611b5d19 611e5c1b 61215c1e     .].a.].a.\.a.\!a
   24bd0:	60245c21 60275b24 5f2b5b27 5f2e5a2b     !\$`$['`'[+_+Z._
   24be0:	5e305a2e 5e345931 5e375933 5d395937     .Z0^1Y4^3Y7^7Y9]
   24bf0:	5d3d5839 5c41583c 5c445740 5b475743     9X=]<XA\@WD\CWG[
   24c00:	5a4a5546 594d5449 5750524d 56545150     FUJZITMYMRPWPQTV
   24c10:	55575054 545a4f57 525e4d5a 51604d5d     TPWUWOZTZM^R]M`Q
   24c20:	4f634b60                                `KcO

00024c24 <_ZN3app5chip823VIRTUAL_TO_PHYSICAL_MAP17h0c964d4301637332E>:
   24c24:	00024424 74737552 756f7420 73206863     $D..Rust touch s
   24c34:	6f736e65 00000a72 00000000 00024c3c     ensor.......<L..
   24c44:	65737361 6f697472 6166206e 64656c69     assertion failed
   24c54:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   24c64:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   24c74:	67697220 203a7468 203a6060 00024c44      right: ``: DL..
   24c84:	0000002d 00024c71 0000000c 00024c7d     -...qL......}L..
   24c94:	00000003 00024c80 20515249 74696e69     .....L..IRQ init
   24ca4:	69616620 0000006c 00024c9c 0000000d      fail....L......
   24cb4:	00024cac 00024cb8 74737572 7070612f     .L...L..rust/app
   24cc4:	6372732f 756f742f 735f6863 6f736e65     /src/touch_senso
   24cd4:	73722e72 00024cbc 0000001c 0000003f     r.rs.L......?...
   24ce4:	00000005 20633269 72646461 00024cbc     ....i2c addr.L..
   24cf4:	0000001c 0000004b 00000011 63756f74     ....K.......touc
   24d04:	74616468 61662061 00006c69 00024cbc     hdata fail...L..
   24d14:	0000001c 00000056 00000009 00024cbc     ....V........L..
   24d24:	0000001c 0000005a 00000031 64616572     ....Z...1...read
   24d34:	756f7420 61646863 66206174 006c6961      touchdata fail.
   24d44:	00024cbc 0000001c 00000089 00000005     .L..............
   24d54:	00024cbc 0000001c 00000095 00000037     .L..........7...
	...

00024d70 <str.0>:
   24d70:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   24d80:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   24d90:	00000077 00024cbc 0000001c 00000095     w....L..........
   24da0:	00000024 00000000 00000000 00000000     $...............

00024db0 <str.1>:
   24db0:	65747461 2074706d 61206f74 77206464     attempt to add w
   24dc0:	20687469 7265766f 776f6c66 00024cbc     ith overflow.L..
   24dd0:	0000001c 00000095 00000020 00024cbc     ........ ....L..
   24de0:	0000001c 00000099 00000009 00024cbc     .............L..
   24df0:	0000001c 0000009a 00000037 00024cbc     ........7....L..
   24e00:	0000001c 0000009a 00000023 00024cbc     ........#....L..
   24e10:	0000001c 0000009a 0000001f 00024cbc     .............L..
   24e20:	0000001c 0000009b 00000037 00024cbc     ........7....L..
   24e30:	0000001c 0000009b 00000023 00024cbc     ........#....L..
   24e40:	0000001c 0000009b 0000001f 00024cbc     .............L..
   24e50:	0000001c 0000009c 00000009 00024cbc     .............L..
   24e60:	0000001c 0000009e 00000037 00024cbc     ........7....L..
   24e70:	0000001c 0000009e 00000023 00024cbc     ........#....L..
   24e80:	0000001c 0000009e 0000001f 00024cbc     .............L..
   24e90:	0000001c 0000009f 00000037 00024cbc     ........7....L..
   24ea0:	0000001c 0000009f 00000023 00024cbc     ........#....L..
   24eb0:	0000001c 0000009f 0000001f 00024cbc     .............L..
   24ec0:	0000001c 000000a0 00000009 00024cbc     .............L..
   24ed0:	0000001c 000000a4 00000030 00024cbc     ........0....L..
   24ee0:	0000001c 000000a4 0000001a 00024cbc     .............L..
   24ef0:	0000001c 000000a4 00000016 00024cbc     .............L..
   24f00:	0000001c 000000a3 00000009 00024cbc     .............L..
   24f10:	0000001c 000000a6 00000030 00024cbc     ........0....L..
   24f20:	0000001c 000000a6 0000001a 00024cbc     .............L..
   24f30:	0000001c 000000a6 00000016 00024cbc     .............L..
   24f40:	0000001c 000000a5 00000009 00024cbc     .............L..
   24f50:	0000001c 000000aa 0000002d 00024cbc     ........-....L..
   24f60:	0000001c 000000aa 0000001a 00024cbc     .............L..
   24f70:	0000001c 000000aa 00000016 00024cbc     .............L..
   24f80:	0000001c 000000a9 00000009 00024cbc     .............L..
   24f90:	0000001c 000000ac 0000002d 00024cbc     ........-....L..
   24fa0:	0000001c 000000ac 0000001a 00024cbc     .............L..
   24fb0:	0000001c 000000ac 00000016 00024cbc     .............L..
   24fc0:	0000001c 000000ab 00000009 00024cbc     .............L..
   24fd0:	0000001c 000000af 0000000d 00024cbc     .............L..
   24fe0:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   24ff0:	00667562 00024cbc 0000001c 000000f1     buf..L..........
   25000:	00000005 00024cbc 0000001c 000000f2     .....L..........
   25010:	0000000d 00024cbc 0000001c 000000f2     .....L..........
   25020:	00000005 20633269 6c696166               ....i2c fail.

0002502d <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   2502d:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   2503d:	f010f010 10f09090 f080f010 80f0f010     ................
   2504d:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   2505d:	90f0f010 e09090f0 e090e090 808080f0     ................
   2506d:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   2507d:	72656874 73692065 206f6e20 68637573     there is no such
   2508d:	69687420 6120676e 6e612073 71636120      thing as an acq
   2509d:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   250ad:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   250bd:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   250cd:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   250dd:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   250ed:	2f736f72 2e646f6d ae007372 49000250     ros/mod.rs..P..I
   250fd:	0a000000 09000000 74000000 65726568     ...........there
   2510d:	20736920 73206f6e 20686375 6e696874      is no such thin
   2511d:	73612067 72206120 61656c65 6c206573     g as a release l
   2512d:	8564616f 00000124 01000000 45000000     oad.$..........E
   2513d:	51000128 5b000128 30000128 85000251     (..Q(..[(..0Q...
   2514d:	00000124 01000000 45000000 51000128     $..........E(..Q
   2515d:	5b000128                                 (..[(..

00025164 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   25164:	00697073 00024c3c 65737361 6f697472     spi.<L..assertio
   25174:	6166206e 64656c69 2860203a 7466656c     n failed: `(left
   25184:	203d3d20 68676972 0a602974 656c2020      == right)`.  le
   25194:	203a7466 0a2c6060 67697220 203a7468     ft: ``,. right: 
   251a4:	203a6060 0002516c 0000002d 00025199     ``: lQ..-....Q..
   251b4:	0000000c 000251a5 00000003 000251a8     .....Q.......Q..
   251c4:	20697073 666e6f63 66206769 006c6961     spi config fail.
   251d4:	000251c4 0000000f 000251d4 000251e0     .Q.......Q...Q..
   251e4:	74737572 6e796d2f 2f747765 2f637273     rust/mynewt/src/
   251f4:	2e697073 00007372 000251e4 00000016     spi.rs...Q......
   25204:	00000050 0000004a 20697073 66206263     P...J...spi cb f
   25214:	006c6961 0002520c 0000000b 00025218     ail..R.......R..
   25224:	000251e4 00000016 00000057 00000005     .Q......W.......
   25234:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   25244:	00025234 0000000f 00025244 000251e4     4R......DR...Q..
   25254:	00000016 0000005a 00000037 6f697067     ....Z...7...gpio
   25264:	69616620 0000006c 00025260 00000009      fail...`R......
   25274:	0002526c 000251e4 00000016 0000005b     lR...Q......[...
   25284:	00000040 000251e4 00000016 0000005c     @....Q......\...
   25294:	00000040 6575716d 66206575 006c6961     @...mqueue fail.
   252a4:	00025298 0000000b 000252a4 000251e4     .R.......R...Q..
   252b4:	00000016 00000065 00000005 206d6573     ....e.......sem 
   252c4:	6c696166 20697073 6c696166 000252c0     failspi fail.R..
   252d4:	00000008 000252d0 000251e4 00000016     .....R...Q......
   252e4:	00000069 00000005 000251e4 00000016     i........Q......
   252f4:	0000006d 00000005 00000000 00025164     m...........dQ..
   25304:	00000004 000252fc 6e657665 66207174     .....R..eventq f
   25314:	006c6961 000251e4 00000016 00000081     ail..Q..........
   25324:	00000009 63206f6e 6220646d 00657479     ....no cmd byte.
   25334:	000251e4 00000016 00000097 00000005     .Q..............
   25344:	000251e4 00000016 00000099 00000016     .Q..............
	...

00025360 <str.0>:
   25360:	65747461 2074706d 61206f74 77206464     attempt to add w
   25370:	20687469 7265766f 776f6c66 20697073     ith overflowspi 
   25380:	7265766f 776f6c66 000251e4 00000016     overflow.Q......
   25390:	00000099 00000005 000251e4 00000016     .........Q......
   253a0:	000000a8 00000012 000251e4 00000016     .........Q......
   253b0:	000000c1 00000035 00000000 00000000     ....5...........

000253c0 <str.1>:
   253c0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   253d0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   253e0:	00000077 000251e4 00000016 000000c4     w....Q..........
   253f0:	0000000f 20746e69 20697073 6c696166     ....int spi fail
   25400:	000251e4 00000016 00000101 00000011     .Q..............
   25410:	000251e4 00000016 00000111 00000015     .Q..............

00025420 <str.2>:
   25420:	65747461 2074706d 73206f74 72746275     attempt to subtr
   25430:	20746361 68746977 65766f20 6f6c6672     act with overflo
   25440:	00000077 000251e4 00000016 0000010f     w....Q..........
   25450:	00000011 000251e4 00000016 00000117     .....Q..........
   25460:	00000011 000251e4 00000016 00000124     .....Q......$...
   25470:	00000009 20646162 20697073 006e656c     ....bad spi len.
   25480:	000251e4 00000016 0000012b 00000005     .Q......+.......
   25490:	000252c8 00000008 00025490 000251e4     .R.......T...Q..
   254a0:	00000016 00000141 00000009 000251e4     ....A........Q..
   254b0:	00000016 0000014a 00000009 000251e4     ....J........Q..
   254c0:	00000016 0000014e 00000030 000251e4     ....N...0....Q..
   254d0:	00000016 0000015a 00000005 000251e4     ....Z........Q..
   254e0:	00000016 0000015f 00000017 00024c3c     ...._.......<L..
   254f0:	65737361 6f697472 6166206e 64656c69     assertion failed
   25500:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   25510:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   25520:	67697220 203a7468 203a6060 000254f0      right: ``: .T..
   25530:	0000002d 0002551d 0000000c 00025529     -....U......)U..
   25540:	00000003 0002552c 20697073 666e6f63     ....,U..spi conf
   25550:	66206769 006c6961 00025548 0000000f     ig fail.HU......
   25560:	00025558 00025564 74737572 6e796d2f     XU..dU..rust/myn
   25570:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   25580:	00025568 00000016 00000016 00000009     hU..............
   25590:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   255a0:	00025590 0000000f 000255a0 00025568     .U.......U..hU..
   255b0:	00000016 00000019 00000009 20697073     ............spi 
   255c0:	74696e69 69616620 0000006c 000255bc     init fail....U..
   255d0:	0000000d 000255cc 00025568 00000016     .....U..hU......
   255e0:	0000001c 00000009 6f697067 69616620     ........gpio fai
   255f0:	0000006c 000255e8 00000009 000255f4     l....U.......U..
   25600:	00025568 00000016 00000045 00000009     hU......E.......
   25610:	00025568 00000016 0000006c 0000001b     hU......l.......

00025620 <str.0>:
   25620:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   25630:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   25640:	6c616377 2064656c 74704f60 3a6e6f69     wcalled `Option:
   25650:	776e753a 28706172 6f206029 2061206e     :unwrap()` on a 
   25660:	6e6f4e60 76206065 65756c61 00002928     `None` value()..
   25670:	0000a593 00000000 00000001 00014c97     .............L..
   25680:	20697073 73756c66 61662068 552f6c69     spi flush fail/U
   25690:	73726573 70754c2f 502f7970 54656e69     sers/Luppy/PineT
   256a0:	2f656d69 656e6970 656d6974 7375722d     ime/pinetime-rus
   256b0:	796d2d74 7477656e 7375722f 74732f74     t-mynewt/rust/st
   256c0:	35333737 64636c2d 7461622d 722d6863     7735-lcd-batch-r
   256d0:	72732f73 696c2f63 73722e62 0002568e     s/src/lib.rs.V..
   256e0:	0000004e 000000fe 00000009 0002568e     N............V..
   256f0:	0000004e 000000f3 00000009 6573552f     N.........../Use
   25700:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   25710:	69676572 79727473 6372732f 7469672f     registry/src/git
   25720:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   25730:	65396264 33323863 6165682f 73656c70     db9ec823/heaples
   25740:	2e302d73 2f312e35 2f637273 2e636576     s-0.5.1/src/vec.
   25750:	00007372 000256fc 00000056 00000066     rs...V..V...f...
   25760:	00000009 00000000 00000000 00000000     ................

00025770 <str.0>:
   25770:	65747461 2074706d 61206f74 77206464     attempt to add w
   25780:	20687469 7265766f 776f6c66 000256fc     ith overflow.V..
   25790:	00000056 0000003e 0000000c 000256fc     V...>........V..
   257a0:	00000056 0000007e 00000011 00000000     V...~...........

000257b0 <str.1>:
   257b0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   257c0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   257d0:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   257e0:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   257f0:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   25800:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   25810:	20736920 00000000 00000020 00000008      is .... .......
   25820:	00000002 00000000 00000000 00000002     ................
   25830:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   25840:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   25850:	73722e65 00000000 00000020 00000004     e.rs.... .......
   25860:	00000002 00000000 00000002 00000000     ................
   25870:	00000003 00000000 00000020 00000008     ........ .......
   25880:	00000002 00000000 00000001 00000001     ................
   25890:	00000003 002e2e60 00025895 00000002     ....`....X......
   258a0:	65726c61 20796461 72726f62 6465776f     already borrowed
   258b0:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   258c0:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   258d0:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

000258e0 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   258e0:	00010201 00000000 00000000 00000000     ................
   258f0:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   25900:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   25910:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   25920:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   25930:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   25940:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   25950:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   25960:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   25970:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   25980:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   25990:	656e6f4e 61762060 3a65756c 00000020     None` value: ...
   259a0:	000257d4 00000000 0002599b 00000002     .W.......Y......
   259b0:	00015baf 00000000 00000001 00015bff     .[...........[..
   259c0:	74756220 65687420 646e6920 69207865      but the index i
   259d0:	00002073 000257f4 00000020 000259c0     s ...W.. ....Y..
   259e0:	00000012 00015baf 0000000c 00000004     .....[..........
   259f0:	00015e0f 00016165 00016215 202c0a2c     .^..ea...b..,., 
   25a00:	2c280a28 30783029 30313030 30333032     (.(,)0x000102030
   25a10:	30353034 30373036 31393038 31313130     4050607080910111
   25a20:	31333132 31353134 31373136 32393138     2131415161718192
   25a30:	32313230 32333232 32353234 32373236     0212223242526272
   25a40:	33393238 33313330 33333332 33353334     8293031323334353
   25a50:	33373336 34393338 34313430 34333432     6373839404142434
   25a60:	34353434 34373436 35393438 35313530     4454647484950515
   25a70:	35333532 35353534 35373536 36393538     2535455565758596
   25a80:	36313630 36333632 36353634 36373636     0616263646566676
   25a90:	37393638 37313730 37333732 37353734     8697071727374757
   25aa0:	37373736 38393738 38313830 38333832     6777879808182838
   25ab0:	38353834 38373836 39393838 39313930     4858687888990919
   25ac0:	39333932 39353934 39373936 00393938     293949596979899.
   25ad0:	00015baf 00000004 00000004 00016239     .[..........9b..
   25ae0:	0001623f 00016245 2f637273 6362696c     ?b..Eb..src/libc
   25af0:	2f65726f 2f746d66 2e646f6d 00007372     ore/fmt/mod.rs..
   25b00:	00025ae8 00000016 0000043b 00000011     .Z......;.......
   25b10:	00025ae8 00000016 00000445 00000024     .Z......E...$...
   25b20:	2f637273 6362696c 2f65726f 63696c73     src/libcore/slic
   25b30:	6f6d2f65 73722e64 65646e69 6f202078     e/mod.rsindex  o
   25b40:	6f207475 61722066 2065676e 20726f66     ut of range for 
   25b50:	63696c73 666f2065 6e656c20 20687467     slice of length 
   25b60:	00025b38 00000006 00025b3e 00000022     8[......>[.."...
   25b70:	00025b20 00000018 00000a72 00000005      [......r.......
   25b80:	63696c73 6e692065 20786564 72617473     slice index star
   25b90:	61207374 62202074 65207475 2073646e     ts at  but ends 
   25ba0:	00207461 00025b80 00000016 00025b96     at ..[.......[..
   25bb0:	0000000d 00025b20 00000018 00000a78     .... [......x...
   25bc0:	00000005 696e6966 64656873 73796168     ....finishedhays
   25bd0:	6b636174 79622820 20736574 6167654e     tack (bytes Nega
   25be0:	65766974 69736f50 65766974 65746e69     tivePositiveinte
   25bf0:	6c617267 61706e55 64656b63 69666e49     gralUnpackedInfi
   25c00:	6574696e 756e694d 77615273 7265764f     niteMinusRawOver
   25c10:	776f6c66 6b636162 72657469 6f746e49     flowbackiterInto
   25c20:	72657449 61636f6c 6e6f6974 61636f4c     IterlocationLoca
   25c30:	6e6f6974 72616573 72656863 69736f70     tionsearcherposi
   25c40:	6e6f6974 74697263 736f705f 656e694c     tioncrit_posLine
   25c50:	796e4173 57776152 72656b61 6f6c6c41     sAnyRawWakerAllo
   25c60:	72724563 38746e69 745f3478 2f637273     cErrint8x4_tsrc/
   25c70:	6362696c 2f65726f 2f727473 2e646f6d     libcore/str/mod.
   25c80:	2e5b7372 625d2e2e 20657479 65646e69     rs[...]byte inde
   25c90:	69202078 756f2073 666f2074 756f6220     x  is out of bou
   25ca0:	2073646e 6020666f 00025c87 0000000b     nds of `.\......
   25cb0:	00025c92 00000016 00025894 00000001     .\.......X......
   25cc0:	00025c6c 00000016 00000853 00000009     l\......S.......
   25cd0:	69676562 3d3c206e 646e6520 00002820     begin <= end (..
   25ce0:	00025cd0 0000000e 00025904 00000004     .\.......Y......
   25cf0:	000258b0 00000010 00025894 00000001     .X.......X......
   25d00:	00025c6c 00000016 00000857 00000005     l\......W.......
   25d10:	00025c6c 00000016 00000868 0000000e     l\......h.......
   25d20:	20736920 20746f6e 68632061 62207261      is not a char b
   25d30:	646e756f 3b797261 20746920 69207369     oundary; it is i
   25d40:	6469736e 20292065 6020666f 00025c87     nside ) of `.\..
   25d50:	0000000b 00025d20 00000026 00025bd4     .... ]..&....[..
   25d60:	00000008 00025d46 00000006 00025894     ....F].......X..
   25d70:	00000001 00025c6c 00000016 0000086a     ....l\......j...
   25d80:	00000005 00025834 00000020 0000001a     ....4X.. .......
   25d90:	00000028 05030100 03060605 08080607     (...............
   25da0:	1c0a1109 140c190b 0d0e120d 0310040f     ................
   25db0:	09131212 05170116 03190218 021c071a     ................
   25dc0:	161f011d 042b0320 0b2d022c 0330012e     .... .+.,.-...0.
   25dd0:	01320231 02a902a7 08ab04aa 05fb02fa     1.2.............
   25de0:	03fe04fd 78ad09ff a28d8b79 8b585730     .......xy...0WX.
   25df0:	1d1c908c 4b0f0edd 2efcfb4c 5d5c3f2f     .......KL.../?\]
   25e00:	84e2b55f 92918e8d bbbab1a9 cac9c6c5     _...............
   25e10:	ffe5e4de 12110400 37343129 493d3b3a     ........)147:;=I
   25e20:	8e845d4a b4b1a992 cac6bbba e5e4cfce     J]..............
   25e30:	0e0d0400 31291211 453b3a34 5e4a4946     ......)14:;EFIJ^
   25e40:	91846564 cec99d9b 29110dcf 64574945     de.........)EIWd
   25e50:	a9918d65 c5bbbab4 e5e4dfc9 110d04f0     e...............
   25e60:	65644945 b2848180 d5bfbebc 83f1f0d7     EIde............
   25e70:	a6a48b85 c7c5bfbe dbdacfce cdbd9848     ............H...
   25e80:	49cfcec6 59574f4e 8e895f5e b7b6b18f     ...INOWY^_......
   25e90:	c7c6c1bf 171611d7 f7f65c5b 0d80fffe     ........[\......
   25ea0:	dfde716d 6e1f0f0e 5f1d1c6f afae7e7d     mq.....no.._}~..
   25eb0:	16fabcbb 461f1e17 584f4e47 7e5e5c5a     .......FGNOXZ\^~
   25ec0:	d4c5b57f f1f0dcd5 8f7372f5 97967574     .........rs.tu..
   25ed0:	2e265f2f b7afa72f d7cfc7bf 97409adf     /_&./.........@.
   25ee0:	1f8f3098 ffcec1c0 5b5a4f4e 100f0807     .0......NOZ[....
   25ef0:	efee2f27 3d376f6e 9045423f 53fffe91     '/..no7=?BE....S
   25f00:	c9c87567 d9d8d1d0 00fffee7 82225f20     gu.......... _".
   25f10:	448204df 06041b08 0eac8111 1e35ab80     ...D..........5.
   25f20:	03e08015 04010819 0434042f 07010307     ......../.4.....
   25f30:	0a110706 07120f50 04020855 03090a1c     ....P...U.......
   25f40:	03070308 03030302 0305040c 0e01060b     ................
   25f50:	033a0515 05060711 07570710 0d150702     ..:.......W.....
   25f60:	03430450 0401032d 0c0f0611 251d043a     P.C.-.......:..%
   25f70:	046d205f c880256a 03b08205 fd82061a     _ m.j%..........
   25f80:	15075903 1409170b 6a0c140c 1a060a06     .Y.........j....
   25f90:	2b075906 2c0a4605 01040c04 2c0b3103     .Y.+.F.,.....1.,
   25fa0:	0b061a04 06ac8003 411f060a 032d044c     ...........AL.-.
   25fb0:	033c0874 073c030f 052b0838 1811ff82     t.<...<.8.+.....
   25fc0:	2d112f08 21102003 048c800f 0b199782     ./.-. .!........
   25fd0:	05948815 073b052f 09180e02 7430b080     ..../.;.......0t
   25fe0:	1ad6800c ff80050c 05b68005 c69b0c24     ............$...
   25ff0:	1030d20a 37038d84 145c8109 8008b880     ..0....7..\.....
   26000:	043530c7 0838060a 060c0846 031e0b74     .05...8.F...t...
   26010:	0959045a 1c188380 4809160a 068a8008     Z.Y........H....
   26020:	170ca4ab 04a13104 0726da81 8005050c     .....1....&.....
   26030:	6d8111a5 2a287810 80044c06 be80048d     ...m.x(*.L......
   26040:	0f031b03 0106000d 04010301 09080802     ................
   26050:	0b050a02 11011002 13051204 15021411     ................
   26060:	19021702 1d051c04 6a012408 bc026b03     .........$.j.k..
   26070:	d402d102 d609d50c da02d702 e105e001     ................
   26080:	ee02e802 f904f020 0c02fa06 4e3e3b27     .... .......';>N
   26090:	9e9e8f4f 0907069f 563e3d36 04d1d0f3     O.......6=>V....
   260a0:	37361814 35bd5756 12e0cfce 9e8e8987     ..67VW.5........
   260b0:	110e0d04 34312912 4946453a 644f4e4a     .....)14:EFIJNOd
   260c0:	b65c5a65 a81c1bb7 09d9d8a9 a8919037     eZ\.........7...
   260d0:	3e3b0a07 928f6966 efee5f6f 9b9a625a     ..;>fi..o_..Zb..
   260e0:	9d552827 a4a3a1a0 baada8a7 0b06c4bc     '(U.............
   260f0:	3a1d150c a651453f a0cdcca7 221a1907     ...:?EQ........"
   26100:	c53f3e25 232004c6 33282625 4a483a38     %>?... #%&(38:HJ
   26110:	5553504c 5c5a5856 6563605e 78736b66     LPSUVXZ\^`cefksx
   26120:	a48a7f7d c0b0afaa a3720cd0 6ecccba4     }.........r....n
   26130:	7b225e6f 2d040305 01046503 82802e2f     o^"{...-.e../...
   26140:	0f31031d 0924041c 052b051e 2a0e0444     ..1...$...+.D..*
   26150:	2406aa80 28042404 010b3408 37819080     ...$.$.(.4.....7
   26160:	080a1609 03399880 30090863 03210516     ......9.c..0..!.
   26170:	4001051b 054b0438 070a042f 20400709     ...@8.K./.....@ 
   26180:	090c0427 053a0336 0c04071a 37495007     '...6.:......PI7
   26190:	07330d33 810a082e 81801f26 802a0828     3.3.....&...(.*.
   261a0:	4e091786 430f1e04 0a07190e 27094706     ...N...C.....G.'
   261b0:	3f0b7509 3b062a41 51060a05 10050106     .u.?A*.;...Q....
   261c0:	8b800503 08482060 5ea6800a 0a0b4522     ....` H....^"E..
   261d0:	39130d06 2c360a07 c0801004 0c53643c     ...9..6,....<dS.
   261e0:	45a08001 5308481b 0781391d 031d0a46     ...E.H.S.9..F...
   261f0:	03374947 060a080e 810a0739 c7801936     GI7.....9...6...
   26200:	9b830d32 800b7566 84bc8ac4 82d18f2f     2...fu....../...
   26210:	82b9a147 042a0739 0a266002 05280a46     G...9.*..`&.F.(.
   26220:	5bb08213 39044b65 04401107 08f8971c     ...[eK.9..@.....
   26230:	0da5f382 03311f81 81080411 6b04898c     ......1........k
   26240:	09030d05 60931007 730af680 46176e08     .......`...s.n.F
   26250:	0c149a80 80190957 03478187 150f4285     ....W.....G..B..
   26260:	802b5085 1a032dd5 70810204 8501053a     .P+..-.....p:...
   26270:	29d78000 040a044c 44118302 c2803d4c     ...)L......DL=..
   26280:	0401063c 341b0555 2c0e8102 560c6404     <...U..4...,.d.V
   26290:	5d030d0a 1d393d03 09042c0d 060e0207     ...].=9..,......
   262a0:	d6839a80 0b030d0a 590c7405 0c140c07     .........t.Y....
   262b0:	0a083804 1e082806 31037752 0ca68003     .8...(..Rw.1....
   262c0:	05030414 85060d03 6372736a 62696c2f     ........jsrc/lib
   262d0:	65726f63 696e752f 65646f63 646f6d2f     core/unicode/mod
   262e0:	0073722e 000262c9 0000001a 00000038     .rs..b......8...
   262f0:	0000000f 000262c9 0000001a 00000039     .....b......9...
   26300:	00000010                                ....

00026304 <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   26304:	1b150f04 17120319 0e000011 00000016     ................
	...
   2632c:	00130600 00000000 00000000 00000000     ................
   2633c:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   2635c:	01050000 00000000 00000000 00000000     ................
   2636c:	00000000 10000000 00000000 0009000b     ................
   2637c:	                                         ...

0002637f <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   2639b:	00120f00 00000000 00000000 00000000     ................
   263ab:	0000001f 00000000 00000000 00000000     ................
   263bb:	1d664649 00000000 00000000 00000000     IFf.............
   263cb:	00003e8a 00000000 00000000 4b000000     .>.............K
   263db:	00000053 00000000 00000000 42236700     S............g#B
	...
   263f7:	0000003d 00230000 00000000 00000000     =.....#.........
   26407:	2d000075 00000000 00000000 00000000     u..-............
   26417:	003c4e82 00000000 00000000 63000000     .N<............c
   26427:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   26437:	00000300 00000000 00000000 0000002f     ............/...
   26447:	00000000 00001000 13000000 00000800     ................
	...
   2645f:	43000000 89007200 00000000 00000000     ...C.r..........
   2646f:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   2647f:	00210000 00000000 00000000 00000000     ..!.............
   2648f:	4100000a 00000000 00000000 00000000     ...A............
   2649f:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   264af:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   264bf:	00000031 00000053 3a000000 00000000     1...S......:....
   264cf:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   264df:	0017003b 00000000 00000000 00000000     ;...............
   264ef:	57000055 83000000 00000000 00000000     U..W............
   264ff:	00000059 26000000 00161b6e 00000000     Y......&n.......
   2650f:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   2651f:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   2652f:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   2653f:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   2654f:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   2655f:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

00026570 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   26578:	00000001 00000000 0000000d 00000000     ................
   26588:	0000001c 00000000 00000040 00000000     ........@.......
   26598:	000000b6 00000000 000000bf 00000000     ................
   265a8:	000003f8 00000000 000007f0 00000000     ................
   265b8:	000007ff 00000000 00001000 00000000     ................
   265c8:	00001e00 00000000 00003800 00000000     .........8......
   265d8:	00003f00 00000000 00007f80 00000000     .?..............
   265e8:	00008000 00000000 0001ffc0 00000000     ................
   265f8:	0003ff80 00000000 00078000 00000000     ................
   26608:	007f0000 00000000 00802001 00000000     ......... ......
   26618:	00a30000 00000000 037ffc00 00000000     ................
   26628:	06000000 00000000 07ff0000 00000000     ................
   26638:	09800000 00000000 0e000000 00000000     ................
   26648:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   26658:	200ffe40 00000000 30000001 00000000     @.. .......0....
   26668:	40000000 00000000 4000005c 00000000     ...@....\..@....
   26678:	60000000 00000000 805c8400 00000000     ...`......\.....
   26688:	c0000000 00000000 e0000000 00000000     ................
   26698:	00000000 00000001 0cf00000 00000001     ................
   266a8:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   266b8:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   266c8:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   266d8:	00000000 00000060 00000844 00000060     ....`...D...`...
   266e8:	00000000 000000f0 00000060 00000200     ........`.......
   266f8:	f9ffff7f 000007db 80000000 000007f8     ................
   26708:	e0000000 00000fbc 00000000 00002120     ............ !..
   26718:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   26728:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   26738:	00000000 00003fc0 00000000 0000f000     .....?..........
   26748:	00000000 0000fc00 f8000010 0000fffe     ................
   26758:	0000ffff 0000ffff ffffffff 0000ffff     ................
   26768:	fffff800 00010000 00000000 0001ffc0     ................
   26778:	ffff0000 0001ffff 00000000 00030000     ................
   26788:	00000000 00038000 00000000 0003a340     ............@...
   26798:	00000000 00080000 000c0000 000c0000     ................
   267a8:	00000004 000ff800 00000000 00180000     ................
   267b8:	001c0000 001c0000 c3000000 001e0001     ................
   267c8:	00000000 001f0000 00800001 001f1fc0     ................
   267d8:	00000007 001fef80 ffffffff 00201fff     .............. .
   267e8:	00023986 00230000 00000002 00403000     .9....#......0@.
   267f8:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   26808:	00000000 007f0000 00000000 00bf2800     .............(..
   26818:	00000000 00cff000 03000000 02a00000     ................
   26828:	fff70000 031021fd 00000003 06780000     .....!........x.
   26838:	00000000 06ff8000 00000000 07c00000     ................
   26848:	00000000 07f20000 00000000 0e040187     ................
   26858:	00000006 10000000 00001008 10000000     ................
   26868:	00000007 14000000 0000000f 17f00000     ................
   26878:	00000000 1ff20000 feffe0df 1fffffff     ................
   26888:	00000000 20000000 00000000 200ff800     ....... ....... 
   26898:	00000007 33c80000 00000000 3fb00000     .......3.......?
   268a8:	00000000 3ff78000 00000004 40000000     .......?.......@
   268b8:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   268c8:	00000002 50000000 00000003 58000000     .......P.......X
   268d8:	00000000 66fde000 000007fe 79f80000     .......f.......y
   268e8:	00000003 7fc00000 00000000 7ffe0000     ................
   268f8:	00000000 7fff0000 00000000 80000000     ................
   26908:	0000007f 80000000 00000030 8003ffff     ........0.......
   26918:	0000f06e 87000000 00000002 90000000     n...............
   26928:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   26938:	00000000 a7f80000 00000000 b03c8000     ..............<.
   26948:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   26958:	fffe0000 bfffffff 00000011 c0000000     ................
   26968:	00000000 c19d0000 00000002 d0000000     ................
   26978:	00000000 f807c3a0 ffffffff f87fffff     ................
   26988:	ffffffff fbffffff 000021be fc00000c     .........!......
   26998:	00000000 ff000000 00000002 ff000000     ................
   269a8:	00020000 ffff0000 fff80000 fffffffb     ................
   269b8:	00000000 ffffffff ffffffff ffffffff     ................
   269c8:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

000269d8 <nrf52_hal_i2cs>:
   269d8:	00000000 20000108                       ....... 

000269e0 <nrf52_hal_spis>:
   269e0:	2000ddc0 00000000 00000000 65737341     ... ........Asse
   269f0:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   26a00:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   26a10:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   26a20:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   26a30:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   26a40:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   26a50:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   26a60:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   26a70:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   26a80:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   26a90:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   26aa0:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   26ab0:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   26ac0:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   26ad0:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   26ae0:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   26af0:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   26b00:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   26b10:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   26b20:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   26b30:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   26b40:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   26b50:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   26b60:	00000000 656c6469 00000000 7379736d     ....idle....msys
   26b70:	0000315f                                _1..

00026b74 <MemFile_methods>:
   26b74:	0001a8b5 00000000                       ........

00026b7c <stdout>:
   26b7c:	20000124                                $.. 

00026b80 <nrf52k_flash_dev>:
   26b80:	00026b98 00000000 00080000 00000080     .k..............
   26b90:	00000001 000000ff                       ........

00026b98 <nrf52k_flash_funcs>:
   26b98:	0001ab21 0001aa51 0001a9d9 0001aa31     !...Q.......1...
   26ba8:	00000000 0001aa2d 00000000              ....-.......

00026bb4 <nrf52_hal_timers>:
   26bb4:	2000ded0 00000000 00000000 00000000     ... ............
	...

00026bcc <hal_i2c1_cfg>:
   26bcc:	00000007 00000006 00000064              ........d...

00026bd8 <os_bsp_spi0m_cfg>:
   26bd8:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   26be8:	7476655f 00000073                       _evts...

00026bf0 <COLLECTOR_NODE_HW_ID>:
   26bf0:	066aff57 50547878 67242949              W.j.xxTPI)$g

00026bfc <SENSOR_NODE_HW_IDS>:
   26bfc:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   26c0c:	08070605 020b0a09 04030201 08070605     ................
   26c1c:	030b0a09 04030201 08070605 040b0a09     ................
   26c2c:	04030201 08070605 050b0a09 77687325     ............%shw
   26c3c:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   26c4c:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   26c5c:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   26c6c:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   26c7c:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   26c8c:	0a732520 00000000 00000000               %s.........

00026c98 <sensor_node_addresses>:
   26c98:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   26ca8:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   26cb8:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   26cc8:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   26cd8:	00000a73                                s...

00026cdc <g_temp_stub_sensor_driver>:
   26cdc:	0001b95d 0001b865 00000000 00000000     ]...e...........
	...
   26d04:	20425453 64616572 6d657420 65732070     STB read temp se
   26d14:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   26d24:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

00026d34 <sysflash_map_dflt>:
	...
   26d3c:	00004000 00000001 00008000 00073c00     .@...........<..
   26d4c:	00000002 0007bc00 00000400 00000003     ................
   26d5c:	0007c000 00001000 00000010 00004000     .............@..
   26d6c:	00004000 00000011 0007d000 00003000     .@...........0..
   26d7c:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   26d8c:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 126356	    108	  57144	 183608	  2cd38	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
