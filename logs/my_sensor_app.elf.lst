
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x00021e34 vaddr 0x00021e34 paddr 0x00021e34 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00021e4c memsz 0x00021e4c flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x00021e4c align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00030148 vaddr 0x20000148 paddr 0x00021eb8 align 2**16
         filesz 0x00000000 memsz 0x0000c640 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              00019e14  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00021e34  00021e34  00030144  2**0  CONTENTS
  3 .ARM.exidx         00000018  00021e34  00021e34  00021e34  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00030144  2**0  CONTENTS
  6 .data              0000006c  200000d8  00021e4c  000300d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00030144  2**0  CONTENTS
  8 .bss               0000c640  20000148  00021eb8  00030148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000c788  2000c788  00030148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000302f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00030333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000303b2  2**0  CONTENTS, READONLY
 13 .debug_line        0004ace3  00000000  00000000  000303b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        0008b62c  00000000  00000000  0007b099  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000f097  00000000  00000000  001066c5  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005f98  00000000  00000000  00115760  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         00061c4f  00000000  00000000  0011b6f8  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         000135cd  00000000  00000000  0017d347  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      0001a338  00000000  00000000  00190914  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000f6f0  00000000  00000000  001aac4c  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000067  00000000  00000000  001ba33c  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    0001a371  00000000  00000000  001ba3a3  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    0003b01c  00000000  00000000  001d4714  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
00021e34 l    d  .ARM.extab	00000000 .ARM.extab
00021e34 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000c788 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 3592ao74dt466zwu
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
000211cc l       .debug_str	00000000 
000347ee l       .debug_str	00000000 
0005a47a l       .debug_str	00000000 
0005abe1 l       .debug_str	00000000 
00059eae l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0003481b l       .debug_str	00000000 
0003480d l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0005d0d3 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
0005bf5c l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
0000569e l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
000347da l       .debug_str	00000000 
0005fb94 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039894 l       .debug_str	00000000 
0005cf7d l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005abef l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cz1tg82iqprprj5
00001118 l       .debug_str	00000000 
0000126a l       .debug_str	00000000 
000012aa l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001868a l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00001f97 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000429b2 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f86f l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005a2b4 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
000034dc l       .debug_str	00000000 
000606aa l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
00006f33 l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0005dbf9 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 40zocxwjz4ckzrhd
000019bc l       .debug_str	00000000 
00001c41 l       .debug_str	00000000 
00001c71 l       .debug_str	00000000 
00001d4a l       .debug_str	00000000 
00001d7a l       .debug_str	00000000 
00002fe0 l       .debug_str	00000000 
00002ac1 l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00001dd5 l       .debug_str	00000000 
00001eb3 l       .debug_str	00000000 
00001f82 l       .debug_str	00000000 
00001fa3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00001f97 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7d8 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
00001414 l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
0000155a l       .debug_str	00000000 
000015aa l       .debug_str	00000000 
00001607 l       .debug_str	00000000 
0000165b l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
000017d1 l       .debug_str	00000000 
0000186f l       .debug_str	00000000 
0000191a l       .debug_str	00000000 
00001a80 l       .debug_str	00000000 
00001b61 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
0001293f l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00002927 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 457xxol86znd5t7g
00002349 l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
000022d5 l       .debug_str	00000000 
000022dc l       .debug_str	00000000 
000023bb l       .debug_str	00000000 
0000247b l       .debug_str	00000000 
00002486 l       .debug_str	00000000 
000024d0 l       .debug_str	00000000 
00002598 l       .debug_str	00000000 
000025d3 l       .debug_str	00000000 
0000268d l       .debug_str	00000000 
0000270e l       .debug_str	00000000 
00002fe0 l       .debug_str	00000000 
00002ac1 l       .debug_str	00000000 
000027ce l       .debug_str	00000000 
0000284c l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00002907 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00002913 l       .debug_str	00000000 
000029e2 l       .debug_str	00000000 
00002aad l       .debug_str	00000000 
0002108b l       .debug_str	00000000 
00002b81 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7d8 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
00001414 l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
0000155a l       .debug_str	00000000 
000015aa l       .debug_str	00000000 
00001607 l       .debug_str	00000000 
0000165b l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
000017d1 l       .debug_str	00000000 
0000186f l       .debug_str	00000000 
0000191a l       .debug_str	00000000 
000019bc l       .debug_str	00000000 
00001a80 l       .debug_str	00000000 
00001b61 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
0001293f l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00002927 l       .debug_str	00000000 
00002080 l       .debug_str	00000000 
000020e8 l       .debug_str	00000000 
000021a3 l       .debug_str	00000000 
0000220e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000022ca l       .debug_str	00000000 
0001dc50 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 5k460cii92qewjl
000012f5 l       .debug_str	00000000 
00002bee l       .debug_str	00000000 
00002c2a l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
00002c33 l       .debug_str	00000000 
0001c26a l       .debug_str	00000000 
00002c5e l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
000347da l       .debug_str	00000000 
00002cbc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
00011e34 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00002b86 l       .debug_str	00000000 
00002bcd l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00021140 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00002be0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039894 l       .debug_str	00000000 
0005cf7d l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005abef l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
000211cc l       .debug_str	00000000 
00002e16 l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
0005d3aa l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
00002fda l       .debug_str	00000000 
000054d1 l       .debug_str	00000000 
000615a8 l       .debug_str	00000000 
00002fde l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00060293 l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00061267 l       .debug_str	00000000 
00002ce9 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
000177ae l       .debug_str	00000000 
00002cf1 l       .debug_str	00000000 
00002f97 l       .debug_str	00000000 
00002cf9 l       .debug_str	00000000 
00002d7e l       .debug_str	00000000 
00002d94 l       .debug_str	00000000 
0005d0dc l       .debug_str	00000000 
00002dbb l       .debug_str	00000000 
0003fcb8 l       .debug_str	00000000 
00002de3 l       .debug_str	00000000 
00002e11 l       .debug_str	00000000 
00002e1b l       .debug_str	00000000 
00002e46 l       .debug_str	00000000 
00002e4d l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00002e75 l       .debug_str	00000000 
00061628 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
00002ea2 l       .debug_str	00000000 
00002ece l       .debug_str	00000000 
00002ed6 l       .debug_str	00000000 
00002f06 l       .debug_str	00000000 
00002f11 l       .debug_str	00000000 
00002f3e l       .debug_str	00000000 
00002f47 l       .debug_str	00000000 
00002f7d l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00002f8e l       .debug_str	00000000 
00002e15 l       .debug_str	00000000 
00059ffb l       .debug_str	00000000 
00002f9c l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00002fc4 l       .debug_str	00000000 
00002fb5 l       .debug_str	00000000 
00002fa5 l       .debug_str	00000000 
00002faf l       .debug_str	00000000 
00002fb4 l       .debug_str	00000000 
00002fd0 l       .debug_str	00000000 
00002fd5 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00001f97 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00002fe5 l       .debug_str	00000000 
0005c421 l       .debug_str	00000000 
0000306a l       .debug_str	00000000 
000030d7 l       .debug_str	00000000 
00003149 l       .debug_str	00000000 
0005b1fd l       .debug_str	00000000 
0005ed81 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000031a7 l       .debug_str	00000000 
0004edd8 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
000031c4 l       .debug_str	00000000 
000031f6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00039894 l       .debug_str	00000000 
0005cf7d l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005abef l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
000048f3 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
00004e0c l       .debug_str	00000000 
00004e4c l       .debug_str	00000000 
00004e9a l       .debug_str	00000000 
00004eda l       .debug_str	00000000 
00004f01 l       .debug_str	00000000 
00004f41 l       .debug_str	00000000 
00004f4f l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
00004fe9 l       .debug_str	00000000 
00005059 l       .debug_str	00000000 
0000506c l       .debug_str	00000000 
000050dc l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00005108 l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001868a l       .debug_str	00000000 
00005a83 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00001f97 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
00005117 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
0005afa1 l       .debug_str	00000000 
00004d42 l       .debug_str	00000000 
000031fd l       .debug_str	00000000 
0000354b l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000429b2 l       .debug_str	00000000 
00003206 l       .debug_str	00000000 
00003212 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
0000321a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00003274 l       .debug_str	00000000 
000032d6 l       .debug_str	00000000 
000032e1 l       .debug_str	00000000 
00003328 l       .debug_str	00000000 
00003377 l       .debug_str	00000000 
00003381 l       .debug_str	00000000 
000033be l       .debug_str	00000000 
00003403 l       .debug_str	00000000 
0000340c l       .debug_str	00000000 
0000341c l       .debug_str	00000000 
00003424 l       .debug_str	00000000 
00003479 l       .debug_str	00000000 
000034d6 l       .debug_str	00000000 
000034e2 l       .debug_str	00000000 
000034eb l       .debug_str	00000000 
000034f7 l       .debug_str	00000000 
00003503 l       .debug_str	00000000 
0000350c l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00003514 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000351c l       .debug_str	00000000 
0000354a l       .debug_str	00000000 
00003531 l       .debug_str	00000000 
00003551 l       .debug_str	00000000 
00003558 l       .debug_str	00000000 
00003560 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f86f l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
0005a2b4 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
000034dc l       .debug_str	00000000 
000606aa l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
00006f33 l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
0000356a l       .debug_str	00000000 
0004f957 l       .debug_str	00000000 
00003581 l       .debug_str	00000000 
00003589 l       .debug_str	00000000 
00003592 l       .debug_str	00000000 
00004996 l       .debug_str	00000000 
0000359b l       .debug_str	00000000 
0000bfc2 l       .debug_str	00000000 
0006035d l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035af l       .debug_str	00000000 
000035ba l       .debug_str	00000000 
000035c2 l       .debug_str	00000000 
0000b658 l       .debug_str	00000000 
0000bb83 l       .debug_str	00000000 
000035ca l       .debug_str	00000000 
000036c6 l       .debug_str	00000000 
000037ca l       .debug_str	00000000 
000037d8 l       .debug_str	00000000 
000037e3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00003810 l       .debug_str	00000000 
000037ed l       .debug_str	00000000 
0000381b l       .debug_str	00000000 
00003896 l       .debug_str	00000000 
00003919 l       .debug_str	00000000 
00003927 l       .debug_str	00000000 
00003986 l       .debug_str	00000000 
000039ed l       .debug_str	00000000 
00003a03 l       .debug_str	00000000 
00003a13 l       .debug_str	00000000 
0005eb93 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00003a22 l       .debug_str	00000000 
000264a8 l       .debug_str	00000000 
00003a28 l       .debug_str	00000000 
00003a2e l       .debug_str	00000000 
00003a34 l       .debug_str	00000000 
00003a40 l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
00003a48 l       .debug_str	00000000 
00003a50 l       .debug_str	00000000 
00003a56 l       .debug_str	00000000 
00003a9c l       .debug_str	00000000 
00003a79 l       .debug_str	00000000 
00003aac l       .debug_str	00000000 
00003aec l       .debug_str	00000000 
0005e720 l       .debug_str	00000000 
00003b34 l       .debug_str	00000000 
00003b3a l       .debug_str	00000000 
00003b40 l       .debug_str	00000000 
00003b69 l       .debug_str	00000000 
00003b46 l       .debug_str	00000000 
00003b7b l       .debug_str	00000000 
00003bbd l       .debug_str	00000000 
0005e609 l       .debug_str	00000000 
00003c07 l       .debug_str	00000000 
00003c0d l       .debug_str	00000000 
00003c13 l       .debug_str	00000000 
00003c3c l       .debug_str	00000000 
00003c19 l       .debug_str	00000000 
00003c4e l       .debug_str	00000000 
00003c90 l       .debug_str	00000000 
0005dacd l       .debug_str	00000000 
00003cda l       .debug_str	00000000 
00003ce0 l       .debug_str	00000000 
00003ce6 l       .debug_str	00000000 
00003cec l       .debug_str	00000000 
00003d15 l       .debug_str	00000000 
00003cf2 l       .debug_str	00000000 
00003d26 l       .debug_str	00000000 
00003d67 l       .debug_str	00000000 
00003db0 l       .debug_str	00000000 
00003db5 l       .debug_str	00000000 
0005e957 l       .debug_str	00000000 
00003dba l       .debug_str	00000000 
00003dc0 l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003def l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00003e00 l       .debug_str	00000000 
00003e41 l       .debug_str	00000000 
0005db85 l       .debug_str	00000000 
00003e8a l       .debug_str	00000000 
00003eb6 l       .debug_str	00000000 
00003e93 l       .debug_str	00000000 
00003ec7 l       .debug_str	00000000 
00003f08 l       .debug_str	00000000 
00003f51 l       .debug_str	00000000 
0005eb2b l       .debug_str	00000000 
00003f56 l       .debug_str	00000000 
00003f5f l       .debug_str	00000000 
00003f66 l       .debug_str	00000000 
00003f91 l       .debug_str	00000000 
00003f6e l       .debug_str	00000000 
00003fa3 l       .debug_str	00000000 
00003fe5 l       .debug_str	00000000 
0005e7f3 l       .debug_str	00000000 
0000402f l       .debug_str	00000000 
00004035 l       .debug_str	00000000 
0000403b l       .debug_str	00000000 
00004041 l       .debug_str	00000000 
00004047 l       .debug_str	00000000 
0000404f l       .debug_str	00000000 
0000405d l       .debug_str	00000000 
0000406c l       .debug_str	00000000 
0000407d l       .debug_str	00000000 
00004088 l       .debug_str	00000000 
00004093 l       .debug_str	00000000 
0000409e l       .debug_str	00000000 
000040a5 l       .debug_str	00000000 
000040eb l       .debug_str	00000000 
000040c8 l       .debug_str	00000000 
000040fd l       .debug_str	00000000 
0000413f l       .debug_str	00000000 
0005dc88 l       .debug_str	00000000 
00004189 l       .debug_str	00000000 
000041b6 l       .debug_str	00000000 
00004193 l       .debug_str	00000000 
000041c8 l       .debug_str	00000000 
0000420a l       .debug_str	00000000 
00004254 l       .debug_str	00000000 
00004259 l       .debug_str	00000000 
00004286 l       .debug_str	00000000 
00004263 l       .debug_str	00000000 
00004298 l       .debug_str	00000000 
000042da l       .debug_str	00000000 
00004324 l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
000043a3 l       .debug_str	00000000 
00004338 l       .debug_str	00000000 
00004348 l       .debug_str	00000000 
00004351 l       .debug_str	00000000 
0000435c l       .debug_str	00000000 
0000436b l       .debug_str	00000000 
00004380 l       .debug_str	00000000 
000043b1 l       .debug_str	00000000 
0000444e l       .debug_str	00000000 
000044f3 l       .debug_str	00000000 
000044fe l       .debug_str	00000000 
00004507 l       .debug_str	00000000 
0000454b l       .debug_str	00000000 
00004528 l       .debug_str	00000000 
0000455e l       .debug_str	00000000 
000045e1 l       .debug_str	00000000 
0000466c l       .debug_str	00000000 
00004688 l       .debug_str	00000000 
000046d4 l       .debug_str	00000000 
00004728 l       .debug_str	00000000 
00004745 l       .debug_str	00000000 
00004759 l       .debug_str	00000000 
000047a5 l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
0000480f l       .debug_str	00000000 
00004823 l       .debug_str	00000000 
0000486a l       .debug_str	00000000 
000048b9 l       .debug_str	00000000 
000048e5 l       .debug_str	00000000 
000048c2 l       .debug_str	00000000 
000048f9 l       .debug_str	00000000 
00004901 l       .debug_str	00000000 
00004908 l       .debug_str	00000000 
00005581 l       .debug_str	00000000 
00004910 l       .debug_str	00000000 
00004918 l       .debug_str	00000000 
000342d9 l       .debug_str	00000000 
00004927 l       .debug_str	00000000 
000055b3 l       .debug_str	00000000 
00004932 l       .debug_str	00000000 
0000493d l       .debug_str	00000000 
0000494e l       .debug_str	00000000 
00004954 l       .debug_str	00000000 
0000495c l       .debug_str	00000000 
00004963 l       .debug_str	00000000 
0000496d l       .debug_str	00000000 
00004975 l       .debug_str	00000000 
0000497d l       .debug_str	00000000 
0000499f l       .debug_str	00000000 
000049aa l       .debug_str	00000000 
000049b6 l       .debug_str	00000000 
000049be l       .debug_str	00000000 
000049c7 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000049d2 l       .debug_str	00000000 
000049dd l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005dbf9 l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000049f8 l       .debug_str	00000000 
00004a08 l       .debug_str	00000000 
00004a17 l       .debug_str	00000000 
00004a1f l       .debug_str	00000000 
00004a26 l       .debug_str	00000000 
00004a2e l       .debug_str	00000000 
00004a6f l       .debug_str	00000000 
00004a4c l       .debug_str	00000000 
00004a7f l       .debug_str	00000000 
00004a94 l       .debug_str	00000000 
00004a9d l       .debug_str	00000000 
00004afa l       .debug_str	00000000 
00004b5f l       .debug_str	00000000 
00004b69 l       .debug_str	00000000 
00004b79 l       .debug_str	00000000 
00004b8e l       .debug_str	00000000 
00004b96 l       .debug_str	00000000 
00004bfa l       .debug_str	00000000 
00004c66 l       .debug_str	00000000 
00004c6d l       .debug_str	00000000 
00004c75 l       .debug_str	00000000 
00004cb6 l       .debug_str	00000000 
00004c93 l       .debug_str	00000000 
00004cc6 l       .debug_str	00000000 
00004cdb l       .debug_str	00000000 
00004cee l       .debug_str	00000000 
00004d03 l       .debug_str	00000000 
00004d0a l       .debug_str	00000000 
00004d1f l       .debug_str	00000000 
00004d49 l       .debug_str	00000000 
00004d98 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00004dc0 l       .debug_str	00000000 
00004dff l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
00005300 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005d3aa l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
00002fda l       .debug_str	00000000 
000054d1 l       .debug_str	00000000 
00024264 l       .debug_str	00000000 
00005275 l       .debug_str	00000000 
000052d8 l       .debug_str	00000000 
0000537e l       .debug_str	00000000 
0000540e l       .debug_str	00000000 
00005424 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000054ab l       .debug_str	00000000 
000054ba l       .debug_str	00000000 
0005aa62 l       .debug_str	00000000 
000054dc l       .debug_str	00000000 
00017f11 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00005126 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
00004557 l       .debug_str	00000000 
0000512c l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005134 l       .debug_str	00000000 
000051be l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
000051cc l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
000051d6 l       .debug_str	00000000 
0000526b l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000211f6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
000061ab l       .debug_str	00000000 
000061d8 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
000061e3 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000061f3 l       .debug_str	00000000 
00006227 l       .debug_str	00000000 
0000620e l       .debug_str	00000000 
0000622f l       .debug_str	00000000 
00006245 l       .debug_str	00000000 
000062ad l       .debug_str	00000000 
00006325 l       .debug_str	00000000 
00006352 l       .debug_str	00000000 
0000636a l       .debug_str	00000000 
000063d4 l       .debug_str	00000000 
000063dc l       .debug_str	00000000 
000063e2 l       .debug_str	00000000 
000063ec l       .debug_str	00000000 
00006466 l       .debug_str	00000000 
000064d2 l       .debug_str	00000000 
0000654b l       .debug_str	00000000 
000065c4 l       .debug_str	00000000 
0000662f l       .debug_str	00000000 
0000669e l       .debug_str	00000000 
000066a5 l       .debug_str	00000000 
000066b0 l       .debug_str	00000000 
000066d8 l       .debug_str	00000000 
0000674d l       .debug_str	00000000 
000067ca l       .debug_str	00000000 
000066c9 l       .debug_str	00000000 
000067d6 l       .debug_str	00000000 
0000356a l       .debug_str	00000000 
0000684d l       .debug_str	00000000 
00003558 l       .debug_str	00000000 
0004f957 l       .debug_str	00000000 
00003581 l       .debug_str	00000000 
00003589 l       .debug_str	00000000 
00003592 l       .debug_str	00000000 
00004996 l       .debug_str	00000000 
000068b6 l       .debug_str	00000000 
00006934 l       .debug_str	00000000 
000069a4 l       .debug_str	00000000 
00006a1e l       .debug_str	00000000 
00006a38 l       .debug_str	00000000 
00006aa4 l       .debug_str	00000000 
00006aad l       .debug_str	00000000 
00006ab9 l       .debug_str	00000000 
00006b2f l       .debug_str	00000000 
00006ba5 l       .debug_str	00000000 
00006c1b l       .debug_str	00000000 
00006c83 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00006cf2 l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
00006d5f l       .debug_str	00000000 
00006dd4 l       .debug_str	00000000 
00006de9 l       .debug_str	00000000 
00006e50 l       .debug_str	00000000 
00006e59 l       .debug_str	00000000 
00006e64 l       .debug_str	00000000 
00006e6b l       .debug_str	00000000 
0005bf64 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00004d98 l       .debug_str	00000000 
00006ea0 l       .debug_str	00000000 
0005b99d l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
00006eda l       .debug_str	00000000 
0005b844 l       .debug_str	00000000 
00060cdb l       .debug_str	00000000 
00006f0d l       .debug_str	00000000 
00002fd0 l       .debug_str	00000000 
00006f1a l       .debug_str	00000000 
00002fd5 l       .debug_str	00000000 
00061267 l       .debug_str	00000000 
00002ce9 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
000177ae l       .debug_str	00000000 
00002cf1 l       .debug_str	00000000 
00002f97 l       .debug_str	00000000 
00002f8e l       .debug_str	00000000 
00006f3b l       .debug_str	00000000 
00006f40 l       .debug_str	00000000 
00006f45 l       .debug_str	00000000 
00006f4a l       .debug_str	00000000 
00006f4f l       .debug_str	00000000 
00006f54 l       .debug_str	00000000 
00006f5f l       .debug_str	00000000 
00006f6a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00001f97 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000429b2 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000054e6 l       .debug_str	00000000 
00015334 l       .debug_str	00000000 
0000555a l       .debug_str	00000000 
00004901 l       .debug_str	00000000 
0000bfc2 l       .debug_str	00000000 
00004908 l       .debug_str	00000000 
00005581 l       .debug_str	00000000 
00005566 l       .debug_str	00000000 
0000558c l       .debug_str	00000000 
00004918 l       .debug_str	00000000 
000342d9 l       .debug_str	00000000 
00004927 l       .debug_str	00000000 
000055b3 l       .debug_str	00000000 
00005598 l       .debug_str	00000000 
000055bf l       .debug_str	00000000 
000055ca l       .debug_str	00000000 
000055d5 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
0000568f l       .debug_str	00000000 
000055e6 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000566d l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00005674 l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
000056a3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005700 l       .debug_str	00000000 
00005765 l       .debug_str	00000000 
0000576d l       .debug_str	00000000 
0000578f l       .debug_str	00000000 
00005776 l       .debug_str	00000000 
000057a7 l       .debug_str	00000000 
000057cd l       .debug_str	00000000 
00005845 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005dbf9 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000058bc l       .debug_str	00000000 
00005925 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f86f l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005a2b4 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
000034dc l       .debug_str	00000000 
000606aa l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
00006f33 l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
00005a07 l       .debug_str	00000000 
00005a80 l       .debug_str	00000000 
00060cd9 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
00005a85 l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
00005aab l       .debug_str	00000000 
00005a92 l       .debug_str	00000000 
00005a8d l       .debug_str	00000000 
00005ab6 l       .debug_str	00000000 
00005acf l       .debug_str	00000000 
00005b3a l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
00005baa l       .debug_str	00000000 
00005bba l       .debug_str	00000000 
00005c32 l       .debug_str	00000000 
0005b4f4 l       .debug_str	00000000 
0005b24e l       .debug_str	00000000 
00005c3c l       .debug_str	00000000 
00005c43 l       .debug_str	00000000 
00005c66 l       .debug_str	00000000 
00005c4d l       .debug_str	00000000 
00005c48 l       .debug_str	00000000 
00005c70 l       .debug_str	00000000 
00005c88 l       .debug_str	00000000 
00005cf2 l       .debug_str	00000000 
00003206 l       .debug_str	00000000 
00003212 l       .debug_str	00000000 
0000321a l       .debug_str	00000000 
00003274 l       .debug_str	00000000 
000032d6 l       .debug_str	00000000 
000032e1 l       .debug_str	00000000 
00003328 l       .debug_str	00000000 
00003377 l       .debug_str	00000000 
00003381 l       .debug_str	00000000 
000033be l       .debug_str	00000000 
00003403 l       .debug_str	00000000 
0000340c l       .debug_str	00000000 
0000341c l       .debug_str	00000000 
00003424 l       .debug_str	00000000 
00003479 l       .debug_str	00000000 
000034d6 l       .debug_str	00000000 
000034e2 l       .debug_str	00000000 
000034eb l       .debug_str	00000000 
000034f7 l       .debug_str	00000000 
00003503 l       .debug_str	00000000 
0000350c l       .debug_str	00000000 
00003514 l       .debug_str	00000000 
0000354a l       .debug_str	00000000 
00003531 l       .debug_str	00000000 
0000351c l       .debug_str	00000000 
00005d67 l       .debug_str	00000000 
00005dce l       .debug_str	00000000 
00005e49 l       .debug_str	00000000 
00005e59 l       .debug_str	00000000 
00005e62 l       .debug_str	00000000 
00005e70 l       .debug_str	00000000 
00005e7e l       .debug_str	00000000 
00005e8a l       .debug_str	00000000 
00006098 l       .debug_str	00000000 
00005e96 l       .debug_str	00000000 
00005ea5 l       .debug_str	00000000 
00005ead l       .debug_str	00000000 
00005ec6 l       .debug_str	00000000 
00003560 l       .debug_str	00000000 
00005ed7 l       .debug_str	00000000 
00005edf l       .debug_str	00000000 
00005f12 l       .debug_str	00000000 
00005ef9 l       .debug_str	00000000 
00005f1e l       .debug_str	00000000 
0000350f l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00005f50 l       .debug_str	00000000 
00005f37 l       .debug_str	00000000 
00005f5b l       .debug_str	00000000 
00005f7d l       .debug_str	00000000 
00005f64 l       .debug_str	00000000 
00005f8a l       .debug_str	00000000 
00005fa5 l       .debug_str	00000000 
00006012 l       .debug_str	00000000 
0000608f l       .debug_str	00000000 
00006097 l       .debug_str	00000000 
00006343 l       .debug_str	00000000 
0000632a l       .debug_str	00000000 
000060a1 l       .debug_str	00000000 
000060be l       .debug_str	00000000 
0000612d l       .debug_str	00000000 
000061a3 l       .debug_str	00000000 
000061b4 l       .debug_str	00000000 
000061c2 l       .debug_str	00000000 
000061c9 l       .debug_str	00000000 
000061d0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
0000983c l       .debug_str	00000000 
0000a830 l       .debug_str	00000000 
0000a87e l       .debug_str	00000000 
0000a8e9 l       .debug_str	00000000 
00031c93 l       .debug_str	00000000 
00023447 l       .debug_str	00000000 
0000a953 l       .debug_str	00000000 
0000a983 l       .debug_str	00000000 
0000a9e6 l       .debug_str	00000000 
00001d7a l       .debug_str	00000000 
0000aa16 l       .debug_str	00000000 
0000ac1c l       .debug_str	00000000 
0000ac26 l       .debug_str	00000000 
00001f82 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00001f97 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7d8 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00006f6f l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
000061e3 l       .debug_str	00000000 
00006f8b l       .debug_str	00000000 
00006fd0 l       .debug_str	00000000 
0000703e l       .debug_str	00000000 
000070d5 l       .debug_str	00000000 
00007195 l       .debug_str	00000000 
0000727e l       .debug_str	00000000 
00007390 l       .debug_str	00000000 
000074cb l       .debug_str	00000000 
0000762f l       .debug_str	00000000 
000077bc l       .debug_str	00000000 
00007972 l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
00007b51 l       .debug_str	00000000 
00007b54 l       .debug_str	00000000 
00007ba4 l       .debug_str	00000000 
00007c01 l       .debug_str	00000000 
00007c55 l       .debug_str	00000000 
00007ccc l       .debug_str	00000000 
00007d50 l       .debug_str	00000000 
00007dcb l       .debug_str	00000000 
00007e69 l       .debug_str	00000000 
00007f14 l       .debug_str	00000000 
00007fb6 l       .debug_str	00000000 
0000807b l       .debug_str	00000000 
0000814d l       .debug_str	00000000 
00008216 l       .debug_str	00000000 
00008302 l       .debug_str	00000000 
000083fb l       .debug_str	00000000 
000084eb l       .debug_str	00000000 
000085fe l       .debug_str	00000000 
0000871e l       .debug_str	00000000 
00008835 l       .debug_str	00000000 
0000896f l       .debug_str	00000000 
00008ab6 l       .debug_str	00000000 
00008bf4 l       .debug_str	00000000 
00008d55 l       .debug_str	00000000 
00008ec3 l       .debug_str	00000000 
00009028 l       .debug_str	00000000 
000091b0 l       .debug_str	00000000 
00009345 l       .debug_str	00000000 
000094d1 l       .debug_str	00000000 
00009680 l       .debug_str	00000000 
000099ef l       .debug_str	00000000 
00009bc5 l       .debug_str	00000000 
00009da8 l       .debug_str	00000000 
00009f82 l       .debug_str	00000000 
0000a17d l       .debug_str	00000000 
0000a395 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
00031d07 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023241 l       .debug_str	00000000 
0000a5ac l       .debug_str	00000000 
0000a5dc l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0000ac21 l       .debug_str	00000000 
0000a7ec l       .debug_str	00000000 
0000a81c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005abef l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
000211cc l       .debug_str	00000000 
0005aa33 l       .debug_str	00000000 
0005b1fd l       .debug_str	00000000 
0000b087 l       .debug_str	00000000 
000615a8 l       .debug_str	00000000 
0000b091 l       .debug_str	00000000 
0000b09a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00005126 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000ac7f l       .debug_str	00000000 
0000b5a3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
000051cc l       .debug_str	00000000 
0000acb6 l       .debug_str	00000000 
0000ad09 l       .debug_str	00000000 
00024264 l       .debug_str	00000000 
0000ad1d l       .debug_str	00000000 
0000ad63 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00002fc4 l       .debug_str	00000000 
0000ad71 l       .debug_str	00000000 
0000adb8 l       .debug_str	00000000 
0000adc1 l       .debug_str	00000000 
0000ae0a l       .debug_str	00000000 
00006f54 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
000054dc l       .debug_str	00000000 
0000ae16 l       .debug_str	00000000 
0000ae92 l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
00002fda l       .debug_str	00000000 
000054ab l       .debug_str	00000000 
0000aebc l       .debug_str	00000000 
0000af38 l       .debug_str	00000000 
0000af67 l       .debug_str	00000000 
0000afed l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000affb l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00035b33 l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
0000b004 l       .debug_str	00000000 
00015324 l       .debug_str	00000000 
0000b015 l       .debug_str	00000000 
0000b077 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
00002f9c l       .debug_str	00000000 
00017dec l       .debug_str	00000000 
00002fa5 l       .debug_str	00000000 
00002faf l       .debug_str	00000000 
0000b07f l       .debug_str	00000000 
00002fd0 l       .debug_str	00000000 
00002fd5 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039894 l       .debug_str	00000000 
0005cf7d l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
0005d3bf l       .debug_str	00000000 
0000b2ad l       .debug_str	00000000 
00059f75 l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
000619ed l       .debug_str	00000000 
000619ec l       .debug_str	00000000 
00061267 l       .debug_str	00000000 
00002ce9 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
000177ae l       .debug_str	00000000 
00002cf1 l       .debug_str	00000000 
00002f97 l       .debug_str	00000000 
00002f8e l       .debug_str	00000000 
00005a83 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
000264a8 l       .debug_str	00000000 
000264ad l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000b0a1 l       .debug_str	00000000 
00059e98 l       .debug_str	00000000 
0000b0a5 l       .debug_str	00000000 
0000b0d6 l       .debug_str	00000000 
0000b0dc l       .debug_str	00000000 
0000b11d l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
0000b132 l       .debug_str	00000000 
0000b169 l       .debug_str	00000000 
0000b174 l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
0000b1a6 l       .debug_str	00000000 
00059fdc l       .debug_str	00000000 
0000b1da l       .debug_str	00000000 
00059fcb l       .debug_str	00000000 
0000b20e l       .debug_str	00000000 
00059f83 l       .debug_str	00000000 
0000b245 l       .debug_str	00000000 
0005a015 l       .debug_str	00000000 
0000b27d l       .debug_str	00000000 
00059e46 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
000055b3 l       .debug_str	00000000 
0000b5f4 l       .debug_str	00000000 
0000b61b l       .debug_str	00000000 
0000b626 l       .debug_str	00000000 
0000b64d l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000b658 l       .debug_str	00000000 
0000b657 l       .debug_str	00000000 
0002108b l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
0005af84 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00003b44 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00006f54 l       .debug_str	00000000 
0005ded4 l       .debug_str	00000000 
0005b1de l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000b2de l       .debug_str	00000000 
0000b307 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
0000b314 l       .debug_str	00000000 
0000b326 l       .debug_str	00000000 
0000b337 l       .debug_str	00000000 
0000b383 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
0000b38f l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005afa1 l       .debug_str	00000000 
00004d42 l       .debug_str	00000000 
000031fd l       .debug_str	00000000 
0000354b l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000429b2 l       .debug_str	00000000 
00003206 l       .debug_str	00000000 
00003212 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
0000321a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003274 l       .debug_str	00000000 
000032d6 l       .debug_str	00000000 
000032e1 l       .debug_str	00000000 
00003328 l       .debug_str	00000000 
00003377 l       .debug_str	00000000 
00003381 l       .debug_str	00000000 
000033be l       .debug_str	00000000 
00003403 l       .debug_str	00000000 
0000340c l       .debug_str	00000000 
0000341c l       .debug_str	00000000 
00003424 l       .debug_str	00000000 
00003479 l       .debug_str	00000000 
000034d6 l       .debug_str	00000000 
000034e2 l       .debug_str	00000000 
000034eb l       .debug_str	00000000 
000034f7 l       .debug_str	00000000 
00003503 l       .debug_str	00000000 
0000350c l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00003514 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000351c l       .debug_str	00000000 
0000354a l       .debug_str	00000000 
00003531 l       .debug_str	00000000 
00003551 l       .debug_str	00000000 
00003558 l       .debug_str	00000000 
00003560 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f86f l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
0005a2b4 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
000034dc l       .debug_str	00000000 
000606aa l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
00006f33 l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
0000356a l       .debug_str	00000000 
0004f957 l       .debug_str	00000000 
00003581 l       .debug_str	00000000 
00003589 l       .debug_str	00000000 
00003592 l       .debug_str	00000000 
00004996 l       .debug_str	00000000 
0000359b l       .debug_str	00000000 
0000bfc2 l       .debug_str	00000000 
0006035d l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035af l       .debug_str	00000000 
000035ba l       .debug_str	00000000 
000035c2 l       .debug_str	00000000 
0000b393 l       .debug_str	00000000 
0000bb83 l       .debug_str	00000000 
000035ca l       .debug_str	00000000 
000036c6 l       .debug_str	00000000 
000037ca l       .debug_str	00000000 
000037d8 l       .debug_str	00000000 
000037e3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00003810 l       .debug_str	00000000 
000037ed l       .debug_str	00000000 
0000381b l       .debug_str	00000000 
00003896 l       .debug_str	00000000 
00003919 l       .debug_str	00000000 
00003927 l       .debug_str	00000000 
00003986 l       .debug_str	00000000 
000039ed l       .debug_str	00000000 
00003a03 l       .debug_str	00000000 
00003a13 l       .debug_str	00000000 
0005eb93 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00003a22 l       .debug_str	00000000 
000264a8 l       .debug_str	00000000 
00003a28 l       .debug_str	00000000 
00003a2e l       .debug_str	00000000 
00003a34 l       .debug_str	00000000 
00003a40 l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
00003a48 l       .debug_str	00000000 
00003a50 l       .debug_str	00000000 
00003a56 l       .debug_str	00000000 
00003a9c l       .debug_str	00000000 
00003a79 l       .debug_str	00000000 
00003aac l       .debug_str	00000000 
00003aec l       .debug_str	00000000 
0005e720 l       .debug_str	00000000 
00003b34 l       .debug_str	00000000 
00003b3a l       .debug_str	00000000 
00003b40 l       .debug_str	00000000 
00003b69 l       .debug_str	00000000 
00003b46 l       .debug_str	00000000 
00003b7b l       .debug_str	00000000 
00003bbd l       .debug_str	00000000 
0005e609 l       .debug_str	00000000 
00003c07 l       .debug_str	00000000 
00003c0d l       .debug_str	00000000 
00003c13 l       .debug_str	00000000 
00003c3c l       .debug_str	00000000 
00003c19 l       .debug_str	00000000 
00003c4e l       .debug_str	00000000 
00003c90 l       .debug_str	00000000 
0005dacd l       .debug_str	00000000 
00003cda l       .debug_str	00000000 
00003ce0 l       .debug_str	00000000 
00003ce6 l       .debug_str	00000000 
00003cec l       .debug_str	00000000 
00003d15 l       .debug_str	00000000 
00003cf2 l       .debug_str	00000000 
00003d26 l       .debug_str	00000000 
00003d67 l       .debug_str	00000000 
00003db0 l       .debug_str	00000000 
00003db5 l       .debug_str	00000000 
0005e957 l       .debug_str	00000000 
00003dba l       .debug_str	00000000 
00003dc0 l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003def l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00003e00 l       .debug_str	00000000 
00003e41 l       .debug_str	00000000 
0005db85 l       .debug_str	00000000 
00003e8a l       .debug_str	00000000 
00003eb6 l       .debug_str	00000000 
00003e93 l       .debug_str	00000000 
00003ec7 l       .debug_str	00000000 
00003f08 l       .debug_str	00000000 
00003f51 l       .debug_str	00000000 
0005eb2b l       .debug_str	00000000 
00003f56 l       .debug_str	00000000 
00003f5f l       .debug_str	00000000 
00003f66 l       .debug_str	00000000 
00003f91 l       .debug_str	00000000 
00003f6e l       .debug_str	00000000 
00003fa3 l       .debug_str	00000000 
00003fe5 l       .debug_str	00000000 
0005e7f3 l       .debug_str	00000000 
0000402f l       .debug_str	00000000 
00004035 l       .debug_str	00000000 
0000403b l       .debug_str	00000000 
00004041 l       .debug_str	00000000 
00004047 l       .debug_str	00000000 
0000404f l       .debug_str	00000000 
0000405d l       .debug_str	00000000 
0000406c l       .debug_str	00000000 
0000407d l       .debug_str	00000000 
00004088 l       .debug_str	00000000 
00004093 l       .debug_str	00000000 
0000409e l       .debug_str	00000000 
000040a5 l       .debug_str	00000000 
000040eb l       .debug_str	00000000 
000040c8 l       .debug_str	00000000 
000040fd l       .debug_str	00000000 
0000413f l       .debug_str	00000000 
0005dc88 l       .debug_str	00000000 
00004189 l       .debug_str	00000000 
000041b6 l       .debug_str	00000000 
00004193 l       .debug_str	00000000 
000041c8 l       .debug_str	00000000 
0000420a l       .debug_str	00000000 
00004254 l       .debug_str	00000000 
00004259 l       .debug_str	00000000 
00004286 l       .debug_str	00000000 
00004263 l       .debug_str	00000000 
00004298 l       .debug_str	00000000 
000042da l       .debug_str	00000000 
00004324 l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
000043a3 l       .debug_str	00000000 
00004338 l       .debug_str	00000000 
00004348 l       .debug_str	00000000 
00004351 l       .debug_str	00000000 
0000435c l       .debug_str	00000000 
0000436b l       .debug_str	00000000 
00004380 l       .debug_str	00000000 
000043b1 l       .debug_str	00000000 
0000444e l       .debug_str	00000000 
000044f3 l       .debug_str	00000000 
000044fe l       .debug_str	00000000 
00004507 l       .debug_str	00000000 
0000454b l       .debug_str	00000000 
00004528 l       .debug_str	00000000 
0000455e l       .debug_str	00000000 
000045e1 l       .debug_str	00000000 
0000466c l       .debug_str	00000000 
00004688 l       .debug_str	00000000 
000046d4 l       .debug_str	00000000 
00004728 l       .debug_str	00000000 
00004745 l       .debug_str	00000000 
00004759 l       .debug_str	00000000 
000047a5 l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
0000480f l       .debug_str	00000000 
00004823 l       .debug_str	00000000 
0000486a l       .debug_str	00000000 
000048b9 l       .debug_str	00000000 
000048e5 l       .debug_str	00000000 
000048c2 l       .debug_str	00000000 
000048f3 l       .debug_str	00000000 
000048f9 l       .debug_str	00000000 
00004901 l       .debug_str	00000000 
00004908 l       .debug_str	00000000 
00005581 l       .debug_str	00000000 
00004910 l       .debug_str	00000000 
00004918 l       .debug_str	00000000 
000342d9 l       .debug_str	00000000 
00004927 l       .debug_str	00000000 
00004932 l       .debug_str	00000000 
0000493d l       .debug_str	00000000 
0000494e l       .debug_str	00000000 
00004954 l       .debug_str	00000000 
0000495c l       .debug_str	00000000 
00004963 l       .debug_str	00000000 
0000496d l       .debug_str	00000000 
00004975 l       .debug_str	00000000 
0000497d l       .debug_str	00000000 
0000499f l       .debug_str	00000000 
000049aa l       .debug_str	00000000 
000049b6 l       .debug_str	00000000 
000049be l       .debug_str	00000000 
000049c7 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000049d2 l       .debug_str	00000000 
000049dd l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005dbf9 l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000049f8 l       .debug_str	00000000 
00004a08 l       .debug_str	00000000 
00004a17 l       .debug_str	00000000 
00004a1f l       .debug_str	00000000 
00004a26 l       .debug_str	00000000 
00004a2e l       .debug_str	00000000 
00004a6f l       .debug_str	00000000 
00004a4c l       .debug_str	00000000 
00004a7f l       .debug_str	00000000 
00004a94 l       .debug_str	00000000 
00004a9d l       .debug_str	00000000 
00004afa l       .debug_str	00000000 
00004b5f l       .debug_str	00000000 
00004b69 l       .debug_str	00000000 
00004b79 l       .debug_str	00000000 
00004b8e l       .debug_str	00000000 
00004b96 l       .debug_str	00000000 
00004bfa l       .debug_str	00000000 
00004c66 l       .debug_str	00000000 
00004c6d l       .debug_str	00000000 
00004c75 l       .debug_str	00000000 
00004cb6 l       .debug_str	00000000 
00004c93 l       .debug_str	00000000 
00004cc6 l       .debug_str	00000000 
00004cdb l       .debug_str	00000000 
00004cee l       .debug_str	00000000 
00004d03 l       .debug_str	00000000 
00004d0a l       .debug_str	00000000 
00004d1f l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000c676 l       .debug_str	00000000 
0005ad01 l       .debug_str	00000000 
0000b3a0 l       .debug_str	00000000 
0000b458 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
0000b4bc l       .debug_str	00000000 
0000b4f2 l       .debug_str	00000000 
0000b50b l       .debug_str	00000000 
0000b545 l       .debug_str	00000000 
0000b562 l       .debug_str	00000000 
0000b59d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
0000b5ba l       .debug_str	00000000 
0000b5c4 l       .debug_str	00000000 
0000b5ea l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
0005fa2d l       .debug_str	00000000 
0000b71e l       .debug_str	00000000 
0000b75a l       .debug_str	00000000 
00002e46 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b715 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
00004910 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0005b1fd l       .debug_str	00000000 
00005a83 l       .debug_str	00000000 
0000bb38 l       .debug_str	00000000 
0000bb4c l       .debug_str	00000000 
00018010 l       .debug_str	00000000 
0000bb55 l       .debug_str	00000000 
0000bb60 l       .debug_str	00000000 
0000bb6b l       .debug_str	00000000 
0000bb74 l       .debug_str	00000000 
0002108b l       .debug_str	00000000 
0000bc07 l       .debug_str	00000000 
0000bc11 l       .debug_str	00000000 
0000bc17 l       .debug_str	00000000 
0000b657 l       .debug_str	00000000 
0000bc22 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0000ac21 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
00002fc4 l       .debug_str	00000000 
0000b799 l       .debug_str	00000000 
0000b7e1 l       .debug_str	00000000 
0000b087 l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
0000b800 l       .debug_str	00000000 
0000b83b l       .debug_str	00000000 
0000b860 l       .debug_str	00000000 
0000b887 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
0000b8f0 l       .debug_str	00000000 
0000b95b l       .debug_str	00000000 
0000b96b l       .debug_str	00000000 
0000b9d7 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005afa1 l       .debug_str	00000000 
00004d42 l       .debug_str	00000000 
000031fd l       .debug_str	00000000 
0000354b l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000429b2 l       .debug_str	00000000 
00003206 l       .debug_str	00000000 
00003212 l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
0000321a l       .debug_str	00000000 
00003274 l       .debug_str	00000000 
000032d6 l       .debug_str	00000000 
000032e1 l       .debug_str	00000000 
00003328 l       .debug_str	00000000 
00003377 l       .debug_str	00000000 
00003381 l       .debug_str	00000000 
000033be l       .debug_str	00000000 
00003403 l       .debug_str	00000000 
0000340c l       .debug_str	00000000 
0000341c l       .debug_str	00000000 
00003424 l       .debug_str	00000000 
00003479 l       .debug_str	00000000 
000034d6 l       .debug_str	00000000 
000034e2 l       .debug_str	00000000 
000034eb l       .debug_str	00000000 
000034f7 l       .debug_str	00000000 
00003503 l       .debug_str	00000000 
0000350c l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00003514 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000351c l       .debug_str	00000000 
0000354a l       .debug_str	00000000 
00003531 l       .debug_str	00000000 
00003551 l       .debug_str	00000000 
00003558 l       .debug_str	00000000 
00003560 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f86f l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
0005a2b4 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
000034dc l       .debug_str	00000000 
000606aa l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
00006f33 l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
0000356a l       .debug_str	00000000 
0004f957 l       .debug_str	00000000 
00003581 l       .debug_str	00000000 
00003589 l       .debug_str	00000000 
00003592 l       .debug_str	00000000 
00004996 l       .debug_str	00000000 
0000359b l       .debug_str	00000000 
0000bfc2 l       .debug_str	00000000 
0006035d l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035af l       .debug_str	00000000 
000035ba l       .debug_str	00000000 
000035c2 l       .debug_str	00000000 
0000bb83 l       .debug_str	00000000 
000035ca l       .debug_str	00000000 
000036c6 l       .debug_str	00000000 
000037ca l       .debug_str	00000000 
000037d8 l       .debug_str	00000000 
000037e3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00003810 l       .debug_str	00000000 
000037ed l       .debug_str	00000000 
0000381b l       .debug_str	00000000 
00003896 l       .debug_str	00000000 
00003919 l       .debug_str	00000000 
00003927 l       .debug_str	00000000 
00003986 l       .debug_str	00000000 
000039ed l       .debug_str	00000000 
00003a03 l       .debug_str	00000000 
00003a13 l       .debug_str	00000000 
0005eb93 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00003a22 l       .debug_str	00000000 
000264a8 l       .debug_str	00000000 
00003a28 l       .debug_str	00000000 
00003a2e l       .debug_str	00000000 
00003a34 l       .debug_str	00000000 
00003a40 l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
00003a48 l       .debug_str	00000000 
00003a50 l       .debug_str	00000000 
00003a56 l       .debug_str	00000000 
00003a9c l       .debug_str	00000000 
00003a79 l       .debug_str	00000000 
00003aac l       .debug_str	00000000 
00003aec l       .debug_str	00000000 
0005e720 l       .debug_str	00000000 
00003b34 l       .debug_str	00000000 
00003b3a l       .debug_str	00000000 
00003b40 l       .debug_str	00000000 
00003b69 l       .debug_str	00000000 
00003b46 l       .debug_str	00000000 
00003b7b l       .debug_str	00000000 
00003bbd l       .debug_str	00000000 
0005e609 l       .debug_str	00000000 
00003c07 l       .debug_str	00000000 
00003c0d l       .debug_str	00000000 
00003c13 l       .debug_str	00000000 
00003c3c l       .debug_str	00000000 
00003c19 l       .debug_str	00000000 
00003c4e l       .debug_str	00000000 
00003c90 l       .debug_str	00000000 
0005dacd l       .debug_str	00000000 
00003cda l       .debug_str	00000000 
00003ce0 l       .debug_str	00000000 
00003ce6 l       .debug_str	00000000 
00003cec l       .debug_str	00000000 
00003d15 l       .debug_str	00000000 
00003cf2 l       .debug_str	00000000 
00003d26 l       .debug_str	00000000 
00003d67 l       .debug_str	00000000 
00003db0 l       .debug_str	00000000 
00003db5 l       .debug_str	00000000 
0005e957 l       .debug_str	00000000 
00003dba l       .debug_str	00000000 
00003dc0 l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003def l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00003e00 l       .debug_str	00000000 
00003e41 l       .debug_str	00000000 
0005db85 l       .debug_str	00000000 
00003e8a l       .debug_str	00000000 
00003eb6 l       .debug_str	00000000 
00003e93 l       .debug_str	00000000 
00003ec7 l       .debug_str	00000000 
00003f08 l       .debug_str	00000000 
00003f51 l       .debug_str	00000000 
0005eb2b l       .debug_str	00000000 
00003f56 l       .debug_str	00000000 
00003f5f l       .debug_str	00000000 
00003f66 l       .debug_str	00000000 
00003f91 l       .debug_str	00000000 
00003f6e l       .debug_str	00000000 
00003fa3 l       .debug_str	00000000 
00003fe5 l       .debug_str	00000000 
0005e7f3 l       .debug_str	00000000 
0000402f l       .debug_str	00000000 
00004035 l       .debug_str	00000000 
0000403b l       .debug_str	00000000 
00004041 l       .debug_str	00000000 
00004047 l       .debug_str	00000000 
0000404f l       .debug_str	00000000 
0000405d l       .debug_str	00000000 
0000406c l       .debug_str	00000000 
0000407d l       .debug_str	00000000 
00004088 l       .debug_str	00000000 
00004093 l       .debug_str	00000000 
0000409e l       .debug_str	00000000 
000040a5 l       .debug_str	00000000 
000040eb l       .debug_str	00000000 
000040c8 l       .debug_str	00000000 
000040fd l       .debug_str	00000000 
0000413f l       .debug_str	00000000 
0005dc88 l       .debug_str	00000000 
00004189 l       .debug_str	00000000 
000041b6 l       .debug_str	00000000 
00004193 l       .debug_str	00000000 
000041c8 l       .debug_str	00000000 
0000420a l       .debug_str	00000000 
00004254 l       .debug_str	00000000 
00004259 l       .debug_str	00000000 
00004286 l       .debug_str	00000000 
00004263 l       .debug_str	00000000 
00004298 l       .debug_str	00000000 
000042da l       .debug_str	00000000 
00004324 l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
000043a3 l       .debug_str	00000000 
00004338 l       .debug_str	00000000 
00004348 l       .debug_str	00000000 
00004351 l       .debug_str	00000000 
0000435c l       .debug_str	00000000 
0000436b l       .debug_str	00000000 
00004380 l       .debug_str	00000000 
000043b1 l       .debug_str	00000000 
0000444e l       .debug_str	00000000 
000044f3 l       .debug_str	00000000 
000044fe l       .debug_str	00000000 
00004507 l       .debug_str	00000000 
0000454b l       .debug_str	00000000 
00004528 l       .debug_str	00000000 
0000455e l       .debug_str	00000000 
000045e1 l       .debug_str	00000000 
0000466c l       .debug_str	00000000 
00004688 l       .debug_str	00000000 
000046d4 l       .debug_str	00000000 
00004728 l       .debug_str	00000000 
00004745 l       .debug_str	00000000 
00004759 l       .debug_str	00000000 
000047a5 l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
0000480f l       .debug_str	00000000 
00004823 l       .debug_str	00000000 
0000486a l       .debug_str	00000000 
000048b9 l       .debug_str	00000000 
000048e5 l       .debug_str	00000000 
000048c2 l       .debug_str	00000000 
000048f3 l       .debug_str	00000000 
000048f9 l       .debug_str	00000000 
00004901 l       .debug_str	00000000 
00004908 l       .debug_str	00000000 
00005581 l       .debug_str	00000000 
00004918 l       .debug_str	00000000 
000342d9 l       .debug_str	00000000 
00004927 l       .debug_str	00000000 
000055b3 l       .debug_str	00000000 
00004932 l       .debug_str	00000000 
0000493d l       .debug_str	00000000 
0000494e l       .debug_str	00000000 
00004954 l       .debug_str	00000000 
0000495c l       .debug_str	00000000 
00004963 l       .debug_str	00000000 
0000496d l       .debug_str	00000000 
00004975 l       .debug_str	00000000 
0000497d l       .debug_str	00000000 
0000499f l       .debug_str	00000000 
000049aa l       .debug_str	00000000 
000049b6 l       .debug_str	00000000 
000049be l       .debug_str	00000000 
000049c7 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000049d2 l       .debug_str	00000000 
000049dd l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005dbf9 l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000049f8 l       .debug_str	00000000 
00004a08 l       .debug_str	00000000 
00004a17 l       .debug_str	00000000 
00004a1f l       .debug_str	00000000 
00004a26 l       .debug_str	00000000 
00004a2e l       .debug_str	00000000 
00004a6f l       .debug_str	00000000 
00004a4c l       .debug_str	00000000 
00004a7f l       .debug_str	00000000 
00004a94 l       .debug_str	00000000 
00004a9d l       .debug_str	00000000 
00004afa l       .debug_str	00000000 
00004b5f l       .debug_str	00000000 
00004b69 l       .debug_str	00000000 
00004b79 l       .debug_str	00000000 
00004b8e l       .debug_str	00000000 
00004b96 l       .debug_str	00000000 
00004bfa l       .debug_str	00000000 
00004c66 l       .debug_str	00000000 
00004c6d l       .debug_str	00000000 
00004c75 l       .debug_str	00000000 
00004cb6 l       .debug_str	00000000 
00004c93 l       .debug_str	00000000 
00004cc6 l       .debug_str	00000000 
00004cdb l       .debug_str	00000000 
00004cee l       .debug_str	00000000 
00004d03 l       .debug_str	00000000 
00004d0a l       .debug_str	00000000 
00004d1f l       .debug_str	00000000 
0000b658 l       .debug_str	00000000 
0000b9ea l       .debug_str	00000000 
0000ba4d l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
0000bacd l       .debug_str	00000000 
0000bb30 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00002fb5 l       .debug_str	00000000 
00002fb4 l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
0000bec7 l       .debug_str	00000000 
0000bef8 l       .debug_str	00000000 
0000c18b l       .debug_str	00000000 
0000bf12 l       .debug_str	00000000 
0000bf43 l       .debug_str	00000000 
0000bfc1 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0000bfa4 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bfae l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
0000ac21 l       .debug_str	00000000 
0000bfb4 l       .debug_str	00000000 
0000bfba l       .debug_str	00000000 
0000bfc0 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
0000bfc6 l       .debug_str	00000000 
0000c018 l       .debug_str	00000000 
00002fb4 l       .debug_str	00000000 
0000c06b l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
000211cc l       .debug_str	00000000 
0000c127 l       .debug_str	00000000 
0000c18a l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000c22f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00060293 l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000e2c l       .debug_str	00000000 
0000bc2c l       .debug_str	00000000 
0000c1ac l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
0000bc3b l       .debug_str	00000000 
0000bc83 l       .debug_str	00000000 
0000bc8c l       .debug_str	00000000 
0000bcd4 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0000bcdc l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
0000bd24 l       .debug_str	00000000 
0000bd6c l       .debug_str	00000000 
0000bfc2 l       .debug_str	00000000 
0000bd75 l       .debug_str	00000000 
0000bdbd l       .debug_str	00000000 
0000bdc6 l       .debug_str	00000000 
0000bdf7 l       .debug_str	00000000 
0001a8d6 l       .debug_str	00000000 
0000be00 l       .debug_str	00000000 
0000be31 l       .debug_str	00000000 
00002fc4 l       .debug_str	00000000 
00002fb5 l       .debug_str	00000000 
0000be3b l       .debug_str	00000000 
0000be6c l       .debug_str	00000000 
0001a8ea l       .debug_str	00000000 
0000be8c l       .debug_str	00000000 
0000bebd l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039894 l       .debug_str	00000000 
0005cf7d l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005abef l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
0000c3d6 l       .debug_str	00000000 
0000c2d3 l       .debug_str	00000000 
0000c31c l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
0000c32c l       .debug_str	00000000 
0000c338 l       .debug_str	00000000 
0000c37f l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
0000c38b l       .debug_str	00000000 
0000c3e6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000c3f4 l       .debug_str	00000000 
0005cf6b l       .debug_str	00000000 
0000403f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005ed81 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0000c282 l       .debug_str	00000000 
0000c2c7 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000211f6 l       .debug_str	00000000 
00009606 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 1gec8qpvo4ti2nbg
0001e0f1 l       .debug_str	00000000 
0000c544 l       .debug_str	00000000 
0000c550 l       .debug_str	00000000 
0000c5a6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bc11 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0005af84 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000c42d l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000c437 l       .debug_str	00000000 
0000c489 l       .debug_str	00000000 
000022ca l       .debug_str	00000000 
0000c492 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000c4ef l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
0000c82c l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c848 l       .debug_str	00000000 
0000c84e l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c859 l       .debug_str	00000000 
0000c864 l       .debug_str	00000000 
0001a99a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00026ccf l       .debug_str	00000000 
0000c86b l       .debug_str	00000000 
0000c878 l       .debug_str	00000000 
00034e39 l       .debug_str	00000000 
00030155 l       .debug_str	00000000 
0000c885 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
0000c88b l       .debug_str	00000000 
0001aa89 l       .debug_str	00000000 
0000c895 l       .debug_str	00000000 
0000c676 l       .debug_str	00000000 
0001aac4 l       .debug_str	00000000 
0000c8d5 l       .debug_str	00000000 
0000c944 l       .debug_str	00000000 
00002faf l       .debug_str	00000000 
0001a8e0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c5b3 l       .debug_str	00000000 
000180f7 l       .debug_str	00000000 
0000c5ca l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005afa1 l       .debug_str	00000000 
0000c5d7 l       .debug_str	00000000 
0000c5db l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c5e5 l       .debug_str	00000000 
0000c5f0 l       .debug_str	00000000 
0000c5fa l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
0002427c l       .debug_str	00000000 
0000c603 l       .debug_str	00000000 
0000c649 l       .debug_str	00000000 
0000c651 l       .debug_str	00000000 
0005d98e l       .debug_str	00000000 
0000c65c l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
00004966 l       .debug_str	00000000 
00024262 l       .debug_str	00000000 
0000c664 l       .debug_str	00000000 
0005adc1 l       .debug_str	00000000 
000242a5 l       .debug_str	00000000 
00060869 l       .debug_str	00000000 
0000c668 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
0000c66c l       .debug_str	00000000 
00002fdb l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
0005fca5 l       .debug_str	00000000 
0000c675 l       .debug_str	00000000 
0005f2fd l       .debug_str	00000000 
0000ee9c l       .debug_str	00000000 
0000c678 l       .debug_str	00000000 
0000c6b8 l       .debug_str	00000000 
0000c6c7 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00001f97 l       .debug_str	00000000 
0000c70f l       .debug_str	00000000 
0000c756 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00004d98 l       .debug_str	00000000 
0000c764 l       .debug_str	00000000 
0000c7a8 l       .debug_str	00000000 
0000c7b3 l       .debug_str	00000000 
0000c7bc l       .debug_str	00000000 
0000c7c4 l       .debug_str	00000000 
0005cba6 l       .debug_str	00000000 
0000ef03 l       .debug_str	00000000 
0005b1fd l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
0000c7cd l       .debug_str	00000000 
0000c7d3 l       .debug_str	00000000 
0000c7dc l       .debug_str	00000000 
0000c7e9 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c7ec l       .debug_str	00000000 
0000c803 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
00010ca3 l       .debug_str	00000000 
0000c819 l       .debug_str	00000000 
0000c81f l       .debug_str	00000000 
0000c5b8 l       .debug_str	00000000 
0000c826 l       .debug_str	00000000 
00018008 l       .debug_str	00000000 
0000efdb l       .debug_str	00000000 
0000c839 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
0001a94f l       .debug_str	00000000 
00060126 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
200000e8 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000160 l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 3cgt5uexdtuxl7pe
0000cc4b l       .debug_str	00000000 
0000cb51 l       .debug_str	00000000 
0000cb6e l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cbd7 l       .debug_str	00000000 
0000cbf2 l       .debug_str	00000000 
0000cc2d l       .debug_str	00000000 
0000cc56 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000cc7c l       .debug_str	00000000 
0000cca2 l       .debug_str	00000000 
0000ccbc l       .debug_str	00000000 
0000cce3 l       .debug_str	00000000 
0000ccee l       .debug_str	00000000 
0000cd15 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
0000cd30 l       .debug_str	00000000 
0000cd49 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005ded4 l       .debug_str	00000000 
0005b1de l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000c94b l       .debug_str	00000000 
0000c95d l       .debug_str	00000000 
0000c96e l       .debug_str	00000000 
0000c9ba l       .debug_str	00000000 
0000c9c6 l       .debug_str	00000000 
0005ee45 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
000264ad l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
0000cb4b l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
0000c9ee l       .debug_str	00000000 
0000ca0f l       .debug_str	00000000 
0000ca5b l       .debug_str	00000000 
0000ca77 l       .debug_str	00000000 
0000caae l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000022ca l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0000cac8 l       .debug_str	00000000 
0000cad5 l       .debug_str	00000000 
0000cb0c l       .debug_str	00000000 
0000cb36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0000eb0a l       .debug_str	00000000 
0000ea6e l       .debug_str	00000000 
0000eab4 l       .debug_str	00000000 
0000eb53 l       .debug_str	00000000 
0000eb99 l       .debug_str	00000000 
0000ef03 l       .debug_str	00000000 
00011e9a l       .debug_str	00000000 
0000ebd3 l       .debug_str	00000000 
0000ec1a l       .debug_str	00000000 
0000ec68 l       .debug_str	00000000 
0000ecb4 l       .debug_str	00000000 
0000c5b8 l       .debug_str	00000000 
0000c826 l       .debug_str	00000000 
0000c82c l       .debug_str	00000000 
00018008 l       .debug_str	00000000 
0000efdb l       .debug_str	00000000 
0000c839 l       .debug_str	00000000 
0001a94f l       .debug_str	00000000 
00060126 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c848 l       .debug_str	00000000 
0000c84e l       .debug_str	00000000 
0000c859 l       .debug_str	00000000 
0000c864 l       .debug_str	00000000 
0001a99a l       .debug_str	00000000 
00026ccf l       .debug_str	00000000 
0000c86b l       .debug_str	00000000 
0000c878 l       .debug_str	00000000 
00030155 l       .debug_str	00000000 
0000c885 l       .debug_str	00000000 
0000c88b l       .debug_str	00000000 
0001aa89 l       .debug_str	00000000 
0000c895 l       .debug_str	00000000 
0000c676 l       .debug_str	00000000 
0001aac4 l       .debug_str	00000000 
0000c8d5 l       .debug_str	00000000 
0000ecf4 l       .debug_str	00000000 
0000eda0 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000ee72 l       .debug_str	00000000 
0000ee8b l       .debug_str	00000000 
0005b1fd l       .debug_str	00000000 
00021114 l       .debug_str	00000000 
00013166 l       .debug_str	00000000 
0001ec03 l       .debug_str	00000000 
0000eedb l       .debug_str	00000000 
000410ef l       .debug_str	00000000 
0001bb74 l       .debug_str	00000000 
0003dc9f l       .debug_str	00000000 
00013098 l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
000185e9 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
00002fe0 l       .debug_str	00000000 
00029166 l       .debug_str	00000000 
000615a8 l       .debug_str	00000000 
00002fde l       .debug_str	00000000 
0000c872 l       .debug_str	00000000 
00023d7e l       .debug_str	00000000 
0000eede l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00026d14 l       .debug_str	00000000 
0000eee5 l       .debug_str	00000000 
0005d98f l       .debug_str	00000000 
0000c665 l       .debug_str	00000000 
000180f7 l       .debug_str	00000000 
0005cba6 l       .debug_str	00000000 
0000eef1 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
0000ef09 l       .debug_str	00000000 
0000ef15 l       .debug_str	00000000 
0000ef21 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000ef2e l       .debug_str	00000000 
00061b15 l       .debug_str	00000000 
0000ef3b l       .debug_str	00000000 
0000efb2 l       .debug_str	00000000 
0000efbb l       .debug_str	00000000 
0000efc9 l       .debug_str	00000000 
0001aa00 l       .debug_str	00000000 
0000efe1 l       .debug_str	00000000 
0000f016 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c651 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000cd52 l       .debug_str	00000000 
0000cd5b l       .debug_str	00000000 
0000cd65 l       .debug_str	00000000 
0000cd75 l       .debug_str	00000000 
0000ee7f l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00001f97 l       .debug_str	00000000 
0000cd86 l       .debug_str	00000000 
0000cd92 l       .debug_str	00000000 
0000cd96 l       .debug_str	00000000 
0000cd9e l       .debug_str	00000000 
0000cda4 l       .debug_str	00000000 
0000cdaa l       .debug_str	00000000 
0000cdb0 l       .debug_str	00000000 
0000cdb7 l       .debug_str	00000000 
0000cdbd l       .debug_str	00000000 
0000cdc3 l       .debug_str	00000000 
0000cdca l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000cdd8 l       .debug_str	00000000 
0000cddf l       .debug_str	00000000 
0000cde5 l       .debug_str	00000000 
0000cdeb l       .debug_str	00000000 
0000cdf1 l       .debug_str	00000000 
0000cdf7 l       .debug_str	00000000 
0000cdfd l       .debug_str	00000000 
0000ce04 l       .debug_str	00000000 
0000ce0b l       .debug_str	00000000 
0000ce13 l       .debug_str	00000000 
0000ce1b l       .debug_str	00000000 
0000ce23 l       .debug_str	00000000 
0000ce2a l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ce39 l       .debug_str	00000000 
0000ce40 l       .debug_str	00000000 
0000ce47 l       .debug_str	00000000 
0000ce4e l       .debug_str	00000000 
0000ce55 l       .debug_str	00000000 
0000ce5c l       .debug_str	00000000 
0000ce62 l       .debug_str	00000000 
0000ce68 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000ce74 l       .debug_str	00000000 
0000ce7b l       .debug_str	00000000 
0000ce83 l       .debug_str	00000000 
0000f0a4 l       .debug_str	00000000 
0000ce8b l       .debug_str	00000000 
0005f202 l       .debug_str	00000000 
0000ce96 l       .debug_str	00000000 
0005d98e l       .debug_str	00000000 
0000c5d7 l       .debug_str	00000000 
0000c65c l       .debug_str	00000000 
00004966 l       .debug_str	00000000 
00024262 l       .debug_str	00000000 
0000c664 l       .debug_str	00000000 
0005adc1 l       .debug_str	00000000 
000242a5 l       .debug_str	00000000 
00060869 l       .debug_str	00000000 
0000c668 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
0000c66c l       .debug_str	00000000 
00002fdb l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
0005fca5 l       .debug_str	00000000 
0000c675 l       .debug_str	00000000 
0005f2fd l       .debug_str	00000000 
0000ee9c l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0000cea2 l       .debug_str	00000000 
0000cead l       .debug_str	00000000 
0000ceb2 l       .debug_str	00000000 
0000ceee l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000f169 l       .debug_str	00000000 
0000cf0d l       .debug_str	00000000 
0000cf5b l       .debug_str	00000000 
0000cf9c l       .debug_str	00000000 
0000d008 l       .debug_str	00000000 
0000d04a l       .debug_str	00000000 
0000d0b6 l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7d8 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
0000d122 l       .debug_str	00000000 
0000d133 l       .debug_str	00000000 
0000d1a3 l       .debug_str	00000000 
0000d23d l       .debug_str	00000000 
0000d300 l       .debug_str	00000000 
0000d3ed l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
0000155a l       .debug_str	00000000 
000015aa l       .debug_str	00000000 
00001607 l       .debug_str	00000000 
00007b51 l       .debug_str	00000000 
0000d504 l       .debug_str	00000000 
0000d57b l       .debug_str	00000000 
0000d5ff l       .debug_str	00000000 
0000d67a l       .debug_str	00000000 
0000d718 l       .debug_str	00000000 
0000d7c3 l       .debug_str	00000000 
0000d865 l       .debug_str	00000000 
0000d92a l       .debug_str	00000000 
0000d9fc l       .debug_str	00000000 
0000dac5 l       .debug_str	00000000 
0000dbb1 l       .debug_str	00000000 
0000dcaa l       .debug_str	00000000 
0000dd9a l       .debug_str	00000000 
0000dead l       .debug_str	00000000 
0000dfcd l       .debug_str	00000000 
0000e0e4 l       .debug_str	00000000 
0000e21d l       .debug_str	00000000 
0000e373 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
0002d180 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00029022 l       .debug_str	00000000 
00034e39 l       .debug_str	00000000 
0000e4c8 l       .debug_str	00000000 
0000e516 l       .debug_str	00000000 
0000e696 l       .debug_str	00000000 
0000e6e4 l       .debug_str	00000000 
0000e725 l       .debug_str	00000000 
0000e773 l       .debug_str	00000000 
0000e7b4 l       .debug_str	00000000 
0000e804 l       .debug_str	00000000 
0000e986 l       .debug_str	00000000 
0000e9d7 l       .debug_str	00000000 
0000ea1b l       .debug_str	00000000 
0001df50 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0000ce96 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000f169 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000f08a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c651 l       .debug_str	00000000 
0000cd86 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000cd92 l       .debug_str	00000000 
0000cd96 l       .debug_str	00000000 
0000cd9e l       .debug_str	00000000 
0000cda4 l       .debug_str	00000000 
0000cdaa l       .debug_str	00000000 
0000cdb0 l       .debug_str	00000000 
0000cdb7 l       .debug_str	00000000 
0000cdbd l       .debug_str	00000000 
0000cdc3 l       .debug_str	00000000 
0000cdca l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000cdd8 l       .debug_str	00000000 
0000cddf l       .debug_str	00000000 
0000cde5 l       .debug_str	00000000 
0000cdeb l       .debug_str	00000000 
0000cdf1 l       .debug_str	00000000 
0000cdf7 l       .debug_str	00000000 
0000cdfd l       .debug_str	00000000 
0000ce04 l       .debug_str	00000000 
0000ce0b l       .debug_str	00000000 
0000ce13 l       .debug_str	00000000 
0000ce1b l       .debug_str	00000000 
0000ce23 l       .debug_str	00000000 
0000ce2a l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ce39 l       .debug_str	00000000 
0000ce40 l       .debug_str	00000000 
0000ce47 l       .debug_str	00000000 
0000ce4e l       .debug_str	00000000 
0000ce55 l       .debug_str	00000000 
0000ce5c l       .debug_str	00000000 
0000ce62 l       .debug_str	00000000 
0000ce68 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000ce74 l       .debug_str	00000000 
0000ce7b l       .debug_str	00000000 
0000ce83 l       .debug_str	00000000 
0000f0a4 l       .debug_str	00000000 
0000ce8b l       .debug_str	00000000 
0005f202 l       .debug_str	00000000 
0000cead l       .debug_str	00000000 
0000f022 l       .debug_str	00000000 
0000f05e l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0000f0ff l       .debug_str	00000000 
0000f0f4 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
0000f13d l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005ed81 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0000f0b0 l       .debug_str	00000000 
0000a950 l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0000fba2 l       .debug_str	00000000 
000101c6 l       .debug_str	00000000 
00010319 l       .debug_str	00000000 
00010349 l       .debug_str	00000000 
0000c7d3 l       .debug_str	00000000 
0000c7dc l       .debug_str	00000000 
0000c7e9 l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c7ec l       .debug_str	00000000 
0000c803 l       .debug_str	00000000 
00010ca3 l       .debug_str	00000000 
00010c86 l       .debug_str	00000000 
00010470 l       .debug_str	00000000 
000104a0 l       .debug_str	00000000 
00010d2a l       .debug_str	00000000 
00010ccc l       .debug_str	00000000 
000104e2 l       .debug_str	00000000 
00010512 l       .debug_str	00000000 
00010561 l       .debug_str	00000000 
00010591 l       .debug_str	00000000 
000105a3 l       .debug_str	00000000 
000105d3 l       .debug_str	00000000 
0000cd49 l       .debug_str	00000000 
0001060c l       .debug_str	00000000 
00010639 l       .debug_str	00000000 
0001067c l       .debug_str	00000000 
00010692 l       .debug_str	00000000 
000107d6 l       .debug_str	00000000 
00010872 l       .debug_str	00000000 
0000cd30 l       .debug_str	00000000 
0001093c l       .debug_str	00000000 
00010a1b l       .debug_str	00000000 
00010b64 l       .debug_str	00000000 
00010c81 l       .debug_str	00000000 
00010cb9 l       .debug_str	00000000 
00010cfe l       .debug_str	00000000 
00010d06 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000f143 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000f169 l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
0000f14a l       .debug_str	00000000 
0000f14f l       .debug_str	00000000 
0000cead l       .debug_str	00000000 
0000f174 l       .debug_str	00000000 
0000f17b l       .debug_str	00000000 
0000f180 l       .debug_str	00000000 
0000f1bb l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
0000f1f2 l       .debug_str	00000000 
0000f222 l       .debug_str	00000000 
0000c5b3 l       .debug_str	00000000 
0000f235 l       .debug_str	00000000 
0000f23b l       .debug_str	00000000 
0000f242 l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
00013098 l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7d8 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
0000d122 l       .debug_str	00000000 
0000d133 l       .debug_str	00000000 
0000d1a3 l       .debug_str	00000000 
0000d23d l       .debug_str	00000000 
0000d300 l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
0000155a l       .debug_str	00000000 
000015aa l       .debug_str	00000000 
00001607 l       .debug_str	00000000 
00007b51 l       .debug_str	00000000 
0000d504 l       .debug_str	00000000 
0000d57b l       .debug_str	00000000 
0000d5ff l       .debug_str	00000000 
0000d67a l       .debug_str	00000000 
0000d718 l       .debug_str	00000000 
0000d7c3 l       .debug_str	00000000 
0000d865 l       .debug_str	00000000 
0000d92a l       .debug_str	00000000 
0000d9fc l       .debug_str	00000000 
0000dac5 l       .debug_str	00000000 
0000dbb1 l       .debug_str	00000000 
0000dcaa l       .debug_str	00000000 
0000f24a l       .debug_str	00000000 
0000f35c l       .debug_str	00000000 
0000f48b l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
0002d048 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00028f05 l       .debug_str	00000000 
00010630 l       .debug_str	00000000 
0000f5b9 l       .debug_str	00000000 
0000f5e9 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
0001064c l       .debug_str	00000000 
0000f620 l       .debug_str	00000000 
0000f650 l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00017a14 l       .debug_str	00000000 
0000f69d l       .debug_str	00000000 
0000f6cd l       .debug_str	00000000 
0000d3ed l       .debug_str	00000000 
0000dd9a l       .debug_str	00000000 
0000dead l       .debug_str	00000000 
0000dfcd l       .debug_str	00000000 
0000e0e4 l       .debug_str	00000000 
0000e21d l       .debug_str	00000000 
0000e373 l       .debug_str	00000000 
0002d180 l       .debug_str	00000000 
00029022 l       .debug_str	00000000 
0000f6ed l       .debug_str	00000000 
0000f71d l       .debug_str	00000000 
0000f01b l       .debug_str	00000000 
0000c5b8 l       .debug_str	00000000 
0000f86b l       .debug_str	00000000 
0000f876 l       .debug_str	00000000 
0000f880 l       .debug_str	00000000 
0000efdb l       .debug_str	00000000 
0000c839 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
0001a94f l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
0000c848 l       .debug_str	00000000 
0000c84e l       .debug_str	00000000 
0000c859 l       .debug_str	00000000 
0000c864 l       .debug_str	00000000 
0001a99a l       .debug_str	00000000 
00026ccf l       .debug_str	00000000 
0000c86b l       .debug_str	00000000 
0000c878 l       .debug_str	00000000 
00034e39 l       .debug_str	00000000 
00030155 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
0000c676 l       .debug_str	00000000 
000300e9 l       .debug_str	00000000 
0000f896 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
0002f506 l       .debug_str	00000000 
0000f8a2 l       .debug_str	00000000 
0000f8d2 l       .debug_str	00000000 
0000f978 l       .debug_str	00000000 
0000f97d l       .debug_str	00000000 
0000f983 l       .debug_str	00000000 
0000f98c l       .debug_str	00000000 
0005d607 l       .debug_str	00000000 
0002f5ad l       .debug_str	00000000 
0000f996 l       .debug_str	00000000 
0000f9c6 l       .debug_str	00000000 
0000c9c6 l       .debug_str	00000000 
0005ee45 l       .debug_str	00000000 
000264ad l       .debug_str	00000000 
0000cb4b l       .debug_str	00000000 
0000fa9a l       .debug_str	00000000 
0000faca l       .debug_str	00000000 
0000faed l       .debug_str	00000000 
0000fb1a l       .debug_str	00000000 
0000fb3b l       .debug_str	00000000 
0000fc42 l       .debug_str	00000000 
00007b54 l       .debug_str	00000000 
00007ba4 l       .debug_str	00000000 
00007c01 l       .debug_str	00000000 
0000fd1c l       .debug_str	00000000 
0000fd93 l       .debug_str	00000000 
0000fe17 l       .debug_str	00000000 
0000fe92 l       .debug_str	00000000 
0000ff30 l       .debug_str	00000000 
0000ffdb l       .debug_str	00000000 
0002a571 l       .debug_str	00000000 
00029ca8 l       .debug_str	00000000 
00029fdf l       .debug_str	00000000 
0002cf4e l       .debug_str	00000000 
00028bcd l       .debug_str	00000000 
0001007d l       .debug_str	00000000 
000100ad l       .debug_str	00000000 
00002fe0 l       .debug_str	00000000 
00029166 l       .debug_str	00000000 
00010196 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
0005ab66 l       .debug_str	00000000 
00010d35 l       .debug_str	00000000 
00010d66 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
0001a8e0 l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
00010d6f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n9jsiq8blzioqfk
00011237 l       .debug_str	00000000 
0001117b l       .debug_str	00000000 
00011198 l       .debug_str	00000000 
000111a1 l       .debug_str	00000000 
000111e7 l       .debug_str	00000000 
000111f0 l       .debug_str	00000000 
0001147d l       .debug_str	00000000 
00011280 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
000054dc l       .debug_str	00000000 
0001128c l       .debug_str	00000000 
00011308 l       .debug_str	00000000 
0005d3aa l       .debug_str	00000000 
00002fda l       .debug_str	00000000 
00011333 l       .debug_str	00000000 
00011344 l       .debug_str	00000000 
000113c0 l       .debug_str	00000000 
000113f2 l       .debug_str	00000000 
00011478 l       .debug_str	00000000 
00011487 l       .debug_str	00000000 
000114f8 l       .debug_str	00000000 
0001150f l       .debug_str	00000000 
00011583 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001158d l       .debug_str	00000000 
0001159a l       .debug_str	00000000 
00011611 l       .debug_str	00000000 
0001162b l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
0005aa33 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00005126 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00010dc1 l       .debug_str	00000000 
00010dea l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000affb l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
000022ca l       .debug_str	00000000 
00010df7 l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
0001a8e0 l       .debug_str	00000000 
00010e04 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e16 l       .debug_str	00000000 
00010e58 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00010e6c l       .debug_str	00000000 
0005f9fa l       .debug_str	00000000 
0000bc11 l       .debug_str	00000000 
0004b287 l       .debug_str	00000000 
0000cd49 l       .debug_str	00000000 
0000c9c6 l       .debug_str	00000000 
0005ee45 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
000264ad l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
0000cb4b l       .debug_str	00000000 
00010e88 l       .debug_str	00000000 
00010eb1 l       .debug_str	00000000 
0000cb36 l       .debug_str	00000000 
00010ece l       .debug_str	00000000 
0000cd30 l       .debug_str	00000000 
00010eeb l       .debug_str	00000000 
00010f04 l       .debug_str	00000000 
00010fa5 l       .debug_str	00000000 
00010f2a l       .debug_str	00000000 
00010f6f l       .debug_str	00000000 
00010f93 l       .debug_str	00000000 
00010fc2 l       .debug_str	00000000 
0000cab4 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
000022d5 l       .debug_str	00000000 
00010ff5 l       .debug_str	00000000 
0000cb12 l       .debug_str	00000000 
00011028 l       .debug_str	00000000 
0001103f l       .debug_str	00000000 
0000cbaf l       .debug_str	00000000 
00011076 l       .debug_str	00000000 
00011091 l       .debug_str	00000000 
0000cc33 l       .debug_str	00000000 
0000247b l       .debug_str	00000000 
000110c8 l       .debug_str	00000000 
00011116 l       .debug_str	00000000 
00024264 l       .debug_str	00000000 
00011126 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z4uczzv8d994j8w
000012f5 l       .debug_str	00000000 
00011743 l       .debug_str	00000000 
0000c5a6 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
0005af84 l       .debug_str	00000000 
0000bc11 l       .debug_str	00000000 
000615a8 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001164c l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00011654 l       .debug_str	00000000 
0000c489 l       .debug_str	00000000 
0000cd49 l       .debug_str	00000000 
000116a2 l       .debug_str	00000000 
0000cce3 l       .debug_str	00000000 
000116f2 l       .debug_str	00000000 
0000c544 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 vnkfcw75uydipan
000118a4 l       .debug_str	00000000 
0000cb4b l       .debug_str	00000000 
0000cb36 l       .debug_str	00000000 
00010ece l       .debug_str	00000000 
00011795 l       .debug_str	00000000 
000117e0 l       .debug_str	00000000 
000117f3 l       .debug_str	00000000 
0001183e l       .debug_str	00000000 
00011861 l       .debug_str	00000000 
0000cd30 l       .debug_str	00000000 
000118c0 l       .debug_str	00000000 
00011280 l       .debug_str	00000000 
0000cd49 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000affb l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
000022ca l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00010df7 l       .debug_str	00000000 
0000c9c6 l       .debug_str	00000000 
0005ee45 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
000264ad l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
00015064 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bfc2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011a15 l       .debug_str	00000000 
00011a21 l       .debug_str	00000000 
00011ae2 l       .debug_str	00000000 
00026cb4 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000f08a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00011903 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c651 l       .debug_str	00000000 
0000cd86 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000cd92 l       .debug_str	00000000 
0000cd96 l       .debug_str	00000000 
0000cd9e l       .debug_str	00000000 
0000cda4 l       .debug_str	00000000 
0000cdaa l       .debug_str	00000000 
0000cdb0 l       .debug_str	00000000 
0000cdb7 l       .debug_str	00000000 
0000cdbd l       .debug_str	00000000 
0000cdc3 l       .debug_str	00000000 
0000cdca l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000cdd8 l       .debug_str	00000000 
0000cddf l       .debug_str	00000000 
0000cde5 l       .debug_str	00000000 
0000cdeb l       .debug_str	00000000 
0000cdf1 l       .debug_str	00000000 
0000cdf7 l       .debug_str	00000000 
0000cdfd l       .debug_str	00000000 
0000ce04 l       .debug_str	00000000 
0000ce0b l       .debug_str	00000000 
0000ce13 l       .debug_str	00000000 
0000ce1b l       .debug_str	00000000 
0000ce23 l       .debug_str	00000000 
0000ce2a l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ce39 l       .debug_str	00000000 
0000ce40 l       .debug_str	00000000 
0000ce47 l       .debug_str	00000000 
0000ce4e l       .debug_str	00000000 
0000ce55 l       .debug_str	00000000 
0000ce5c l       .debug_str	00000000 
0000ce62 l       .debug_str	00000000 
0000ce68 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000ce74 l       .debug_str	00000000 
0000ce7b l       .debug_str	00000000 
0000ce83 l       .debug_str	00000000 
0000f0a4 l       .debug_str	00000000 
00011927 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0001194d l       .debug_str	00000000 
00011a0e l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
00026cb4 l       .debug_str	00000000 
00011ae2 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000ee72 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00011903 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c651 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000cd52 l       .debug_str	00000000 
0000cd5b l       .debug_str	00000000 
0000cd65 l       .debug_str	00000000 
0000cd75 l       .debug_str	00000000 
0000ee7f l       .debug_str	00000000 
00011ae9 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00011b0f l       .debug_str	00000000 
00011a0e l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bfc2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011a15 l       .debug_str	00000000 
00011bb6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
000012f5 l       .debug_str	00000000 
00011cad l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00011903 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bfc2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011a15 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
0000c651 l       .debug_str	00000000 
0000cd86 l       .debug_str	00000000 
00011927 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00011ae2 l       .debug_str	00000000 
00013166 l       .debug_str	00000000 
0005faf0 l       .debug_str	00000000 
00011c5d l       .debug_str	00000000 
00011c96 l       .debug_str	00000000 
00026cb4 l       .debug_str	00000000 
00011ae9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
00003b38 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00011903 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c651 l       .debug_str	00000000 
0000cd86 l       .debug_str	00000000 
00011927 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0000bfc2 l       .debug_str	00000000 
00011ae2 l       .debug_str	00000000 
00011ce6 l       .debug_str	00000000 
00011dc5 l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
00013166 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1ai0eloc31rxz52x
00011e46 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00011dd1 l       .debug_str	00000000 
00034067 l       .debug_str	00000000 
0000f14a l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
00011e34 l       .debug_str	00000000 
00011e28 l       .debug_str	00000000 
0002108b l       .debug_str	00000000 
00011e3b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1v17h907p30pylh6
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
000211cc l       .debug_str	00000000 
000603cb l       .debug_str	00000000 
0005d886 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f86f l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
0005a2b4 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
000034dc l       .debug_str	00000000 
000606aa l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
00006f33 l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
0005e9d6 l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
0005d3aa l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
00002fda l       .debug_str	00000000 
00017f11 l       .debug_str	00000000 
000615a8 l       .debug_str	00000000 
00002fde l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
000121ea l       .debug_str	00000000 
00012211 l       .debug_str	00000000 
00012219 l       .debug_str	00000000 
00012220 l       .debug_str	00000000 
00012226 l       .debug_str	00000000 
0001222d l       .debug_str	00000000 
0005d3c0 l       .debug_str	00000000 
00012233 l       .debug_str	00000000 
00012242 l       .debug_str	00000000 
000051cc l       .debug_str	00000000 
00012250 l       .debug_str	00000000 
00012255 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005d0d3 l       .debug_str	00000000 
00012091 l       .debug_str	00000000 
00011e51 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000c5d7 l       .debug_str	00000000 
0005adc1 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
000242a5 l       .debug_str	00000000 
00011e5d l       .debug_str	00000000 
00011e94 l       .debug_str	00000000 
0000ef03 l       .debug_str	00000000 
00011ea0 l       .debug_str	00000000 
00011ed7 l       .debug_str	00000000 
00011ee2 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
00011eea l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00011ef1 l       .debug_str	00000000 
00011ef8 l       .debug_str	00000000 
00060748 l       .debug_str	00000000 
00011f01 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005af84 l       .debug_str	00000000 
00011f0b l       .debug_str	00000000 
00012202 l       .debug_str	00000000 
00011f15 l       .debug_str	00000000 
0001bd4d l       .debug_str	00000000 
00011f4b l       .debug_str	00000000 
00011f79 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000429b2 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005dbf9 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
00011f85 l       .debug_str	00000000 
00011fbc l       .debug_str	00000000 
0005afa1 l       .debug_str	00000000 
0006027c l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00011fc5 l       .debug_str	00000000 
00011fd9 l       .debug_str	00000000 
0001200c l       .debug_str	00000000 
00012017 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00001f97 l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001204d l       .debug_str	00000000 
0001208b l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
00004d98 l       .debug_str	00000000 
0001209e l       .debug_str	00000000 
000120e1 l       .debug_str	00000000 
000120f9 l       .debug_str	00000000 
00012139 l       .debug_str	00000000 
0001214e l       .debug_str	00000000 
00012188 l       .debug_str	00000000 
00012197 l       .debug_str	00000000 
000121d6 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0005b1fd l       .debug_str	00000000 
00002f9c l       .debug_str	00000000 
0001a8d6 l       .debug_str	00000000 
00002fa5 l       .debug_str	00000000 
00002faf l       .debug_str	00000000 
0000bfae l       .debug_str	00000000 
00002fd0 l       .debug_str	00000000 
00002fd5 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039894 l       .debug_str	00000000 
0005cf7d l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005abef l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
20000214 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h8c3d62e53c42ce39E
20000168 l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h1dd6b74134f2575dE
20000168 l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h6bb1c96a489889baE
200001fc l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17hb169e5084280c5b1E
20000164 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17h950734ac5f86de57E
0000b758 l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E
0000beaa l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E
0000b61e l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E
0000b5d2 l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE
200001ba l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h9edf4dcfe692b5b1E
2000020c l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17hb66b2debc1d16188E
0001e170 l     O .text	00000021 str.0
0001e1b0 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 1yoikry7qn8ql4zf
000024d0 l       .debug_str	00000000 
000022d5 l       .debug_str	00000000 
000127ec l       .debug_str	00000000 
0001286e l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001292d l       .debug_str	00000000 
00002b81 l       .debug_str	00000000 
0002108b l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
00005126 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000affb l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00010df7 l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
0001a8e0 l       .debug_str	00000000 
00010e04 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
000615a8 l       .debug_str	00000000 
00002fde l       .debug_str	00000000 
00012a17 l       .debug_str	00000000 
00012a1c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
00001414 l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
0000155a l       .debug_str	00000000 
000015aa l       .debug_str	00000000 
00001607 l       .debug_str	00000000 
0000165b l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
000017d1 l       .debug_str	00000000 
0000186f l       .debug_str	00000000 
0000191a l       .debug_str	00000000 
000019bc l       .debug_str	00000000 
00001a80 l       .debug_str	00000000 
00001b61 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
0001293f l       .debug_str	00000000 
00012259 l       .debug_str	00000000 
000122af l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00012387 l       .debug_str	00000000 
0001240e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000022ca l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
0000247b l       .debug_str	00000000 
000124d1 l       .debug_str	00000000 
0001255a l       .debug_str	00000000 
0001261f l       .debug_str	00000000 
000126ab l       .debug_str	00000000 
0001272d l       .debug_str	00000000 
0001e4a0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 25jm3tkgfnhczjfh
0001305e l       .debug_str	00000000 
00034e39 l       .debug_str	00000000 
00030155 l       .debug_str	00000000 
0000c676 l       .debug_str	00000000 
0003007e l       .debug_str	00000000 
0005b1fd l       .debug_str	00000000 
000603ca l       .debug_str	00000000 
00013055 l       .debug_str	00000000 
00005a83 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0001471d l       .debug_str	00000000 
00013061 l       .debug_str	00000000 
0004d02a l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
0005ba3c l       .debug_str	00000000 
00060355 l       .debug_str	00000000 
00026cb4 l       .debug_str	00000000 
00013064 l       .debug_str	00000000 
0005afa1 l       .debug_str	00000000 
00013089 l       .debug_str	00000000 
00014088 l       .debug_str	00000000 
0005c422 l       .debug_str	00000000 
0001306c l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00013078 l       .debug_str	00000000 
0003dc9d l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
00011e39 l       .debug_str	00000000 
00013092 l       .debug_str	00000000 
0001309f l       .debug_str	00000000 
00013098 l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7d8 l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
00001414 l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
0000155a l       .debug_str	00000000 
000015aa l       .debug_str	00000000 
00001607 l       .debug_str	00000000 
0000165b l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
000017d1 l       .debug_str	00000000 
0000186f l       .debug_str	00000000 
0000191a l       .debug_str	00000000 
000019bc l       .debug_str	00000000 
00001a80 l       .debug_str	00000000 
00001b61 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
0001293f l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00002927 l       .debug_str	00000000 
000130aa l       .debug_str	00000000 
000130b3 l       .debug_str	00000000 
00046bd8 l       .debug_str	00000000 
00003b37 l       .debug_str	00000000 
00003b3d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005d0d3 l       .debug_str	00000000 
00013058 l       .debug_str	00000000 
00012b02 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000429b2 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f86f l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005a2b4 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
000034dc l       .debug_str	00000000 
000606aa l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
00006f33 l       .debug_str	00000000 
00012b0d l       .debug_str	00000000 
00012b3b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00012b4c l       .debug_str	00000000 
00012b80 l       .debug_str	00000000 
00012b8e l       .debug_str	00000000 
00012bbf l       .debug_str	00000000 
00012bc8 l       .debug_str	00000000 
00012bf3 l       .debug_str	00000000 
00012bfd l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00001f97 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00012c29 l       .debug_str	00000000 
00012c54 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00004d98 l       .debug_str	00000000 
00012c5d l       .debug_str	00000000 
00023d24 l       .debug_str	00000000 
00012c89 l       .debug_str	00000000 
0005ac80 l       .debug_str	00000000 
00012ce3 l       .debug_str	00000000 
0003dc9e l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
00012d3c l       .debug_str	00000000 
00012d9a l       .debug_str	00000000 
00012da3 l       .debug_str	00000000 
00012e01 l       .debug_str	00000000 
00012e0a l       .debug_str	00000000 
00012e6d l       .debug_str	00000000 
00012e7a l       .debug_str	00000000 
00012ed9 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00012ee3 l       .debug_str	00000000 
00012ef2 l       .debug_str	00000000 
00012f4d l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
00012f53 l       .debug_str	00000000 
00012fad l       .debug_str	00000000 
00012fb2 l       .debug_str	00000000 
0005bf43 l       .debug_str	00000000 
0001300d l       .debug_str	00000000 
0001303d l       .debug_str	00000000 
0001304a l       .debug_str	00000000 
0000c5b8 l       .debug_str	00000000 
0000f86b l       .debug_str	00000000 
0000f876 l       .debug_str	00000000 
0000f880 l       .debug_str	00000000 
0000efdb l       .debug_str	00000000 
0000c839 l       .debug_str	00000000 
0001a94f l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
0000c848 l       .debug_str	00000000 
0000c84e l       .debug_str	00000000 
0000c859 l       .debug_str	00000000 
0000c864 l       .debug_str	00000000 
0001a99a l       .debug_str	00000000 
00026ccf l       .debug_str	00000000 
0000c86b l       .debug_str	00000000 
0000c878 l       .debug_str	00000000 
20000218 l     O .bss	00000050 _ZN3app5chip810CHIP8_TASK17hdc3e015a60662be5E
20004268 l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17hf6360141ad32453fE
20000268 l     O .bss	00004000 _ZN3app5chip816CHIP8_TASK_STACK17hb31f2a0cca07481dE
0001ea58 l     O .text	0000001e _ZN3app5chip88PIXEL_ON17hd77974d73295a467E
0001ea76 l     O .text	0000001e _ZN3app5chip89PIXEL_OFF17h40a5f2316b800b23E
0000c32a l     F .text	00000094 _ZN3app5chip89task_func17h385831a0096277b5E
0001eae0 l     O .text	00000021 str.0
0001eb20 l     O .text	0000001c str.1
0001ebc0 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 2c6bdy6rt6z3zh1y
000132bc l       .debug_str	00000000 
0000b087 l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
00013281 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00013325 l       .debug_str	00000000 
00013390 l       .debug_str	00000000 
000133cc l       .debug_str	00000000 
00013419 l       .debug_str	00000000 
00013455 l       .debug_str	00000000 
00013463 l       .debug_str	00000000 
000134ce l       .debug_str	00000000 
000134e9 l       .debug_str	00000000 
00013555 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
0005b1fd l       .debug_str	00000000 
00005a83 l       .debug_str	00000000 
000135ac l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
000130bc l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
0005d3aa l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
00002fda l       .debug_str	00000000 
00017f11 l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
00013055 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00005587 l       .debug_str	00000000 
00011dc5 l       .debug_str	00000000 
00013166 l       .debug_str	00000000 
00024264 l       .debug_str	00000000 
0005faf0 l       .debug_str	00000000 
000130e0 l       .debug_str	00000000 
000130c5 l       .debug_str	00000000 
0001310f l       .debug_str	00000000 
000135bf l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00021140 l       .debug_str	00000000 
00002be0 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00017dec l       .debug_str	00000000 
00013161 l       .debug_str	00000000 
00013170 l       .debug_str	00000000 
000131a9 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00012ee3 l       .debug_str	00000000 
00013208 l       .debug_str	00000000 
00013241 l       .debug_str	00000000 
0001326a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xbkmlpi4vyn2qbv
0005fa2d l       .debug_str	00000000 
0001360c l       .debug_str	00000000 
00013658 l       .debug_str	00000000 
0000eedb l       .debug_str	00000000 
000410ef l       .debug_str	00000000 
0001bb74 l       .debug_str	00000000 
0003dc9f l       .debug_str	00000000 
00013098 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c5b3 l       .debug_str	00000000 
000180f7 l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7d8 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
00001414 l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
0000155a l       .debug_str	00000000 
000015aa l       .debug_str	00000000 
00001607 l       .debug_str	00000000 
0000165b l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
000017d1 l       .debug_str	00000000 
0000186f l       .debug_str	00000000 
0000191a l       .debug_str	00000000 
000019bc l       .debug_str	00000000 
00001a80 l       .debug_str	00000000 
00001b61 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
0001293f l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00002927 l       .debug_str	00000000 
00034e39 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 36ol61x1a5do2305
0005af07 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000ee8b l       .debug_str	00000000 
0000eedb l       .debug_str	00000000 
000410ef l       .debug_str	00000000 
0001bb74 l       .debug_str	00000000 
0003dc9f l       .debug_str	00000000 
0005b1fd l       .debug_str	00000000 
00013098 l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
00002fe0 l       .debug_str	00000000 
00002ac1 l       .debug_str	00000000 
000615a8 l       .debug_str	00000000 
00002fde l       .debug_str	00000000 
0000c872 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c651 l       .debug_str	00000000 
0005d98e l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000c5d7 l       .debug_str	00000000 
0000c65c l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
00004966 l       .debug_str	00000000 
00024262 l       .debug_str	00000000 
0000c664 l       .debug_str	00000000 
0005adc1 l       .debug_str	00000000 
000242a5 l       .debug_str	00000000 
00060869 l       .debug_str	00000000 
0000c668 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
0000c66c l       .debug_str	00000000 
00002fdb l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
0005fca5 l       .debug_str	00000000 
0000c675 l       .debug_str	00000000 
0005f2fd l       .debug_str	00000000 
0000ee9c l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7d8 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
00001414 l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
0000155a l       .debug_str	00000000 
000015aa l       .debug_str	00000000 
00001607 l       .debug_str	00000000 
0000165b l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
000017d1 l       .debug_str	00000000 
0000186f l       .debug_str	00000000 
0000191a l       .debug_str	00000000 
000019bc l       .debug_str	00000000 
00001a80 l       .debug_str	00000000 
00001b61 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0001293f l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00002927 l       .debug_str	00000000 
00034e39 l       .debug_str	00000000 
00013736 l       .debug_str	00000000 
00013784 l       .debug_str	00000000 
0001388f l       .debug_str	00000000 
000138df l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4vqyywb7xxbk2fnk
00013ed2 l       .debug_str	00000000 
000135bf l       .debug_str	00000000 
000140b5 l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
000140ad l       .debug_str	00000000 
00003c0b l       .debug_str	00000000 
000140a9 l       .debug_str	00000000 
000140a4 l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c422 l       .debug_str	00000000 
00014079 l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
00002fda l       .debug_str	00000000 
00017f11 l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
00024264 l       .debug_str	00000000 
000130e0 l       .debug_str	00000000 
00013adc l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00012ee3 l       .debug_str	00000000 
00013b68 l       .debug_str	00000000 
00013b9d l       .debug_str	00000000 
00013bb7 l       .debug_str	00000000 
00013bec l       .debug_str	00000000 
00013c06 l       .debug_str	00000000 
00013c3b l       .debug_str	00000000 
00013c55 l       .debug_str	00000000 
00013c8b l       .debug_str	00000000 
00013ca6 l       .debug_str	00000000 
00013cfa l       .debug_str	00000000 
00013d1c l       .debug_str	00000000 
00013d8e l       .debug_str	00000000 
00013dc4 l       .debug_str	00000000 
00013ddf l       .debug_str	00000000 
00013e15 l       .debug_str	00000000 
0005abef l       .debug_str	00000000 
00013161 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001405a l       .debug_str	00000000 
00013e30 l       .debug_str	00000000 
00014020 l       .debug_str	00000000 
00014002 l       .debug_str	00000000 
00013fc9 l       .debug_str	00000000 
00013e66 l       .debug_str	00000000 
00013fad l       .debug_str	00000000 
00013f76 l       .debug_str	00000000 
00013e81 l       .debug_str	00000000 
00013f5a l       .debug_str	00000000 
00013f23 l       .debug_str	00000000 
00013f08 l       .debug_str	00000000 
00013eb7 l       .debug_str	00000000 
00014d9d l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00002b81 l       .debug_str	00000000 
000140e7 l       .debug_str	00000000 
0005b1de l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00059eda l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
000139ec l       .debug_str	00000000 
00017a14 l       .debug_str	00000000 
000139f0 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
000347a6 l       .debug_str	00000000 
000139f5 l       .debug_str	00000000 
00021322 l       .debug_str	00000000 
00021177 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
000337b9 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00013055 l       .debug_str	00000000 
00005a83 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
0001305e l       .debug_str	00000000 
0001471d l       .debug_str	00000000 
00013061 l       .debug_str	00000000 
0004d02a l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
0005ba3c l       .debug_str	00000000 
00060355 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000140e1 l       .debug_str	00000000 
000140db l       .debug_str	00000000 
000140d5 l       .debug_str	00000000 
000140cf l       .debug_str	00000000 
0000403f l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005d3c0 l       .debug_str	00000000 
00002fde l       .debug_str	00000000 
000615a8 l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
00002fd0 l       .debug_str	00000000 
0001a8e0 l       .debug_str	00000000 
00002faf l       .debug_str	00000000 
000140cc l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00026cb4 l       .debug_str	00000000 
00013064 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
0005afa1 l       .debug_str	00000000 
0005d0d3 l       .debug_str	00000000 
00013058 l       .debug_str	00000000 
00013089 l       .debug_str	00000000 
00014088 l       .debug_str	00000000 
0005aa62 l       .debug_str	00000000 
000139fb l       .debug_str	00000000 
00013a21 l       .debug_str	00000000 
00005587 l       .debug_str	00000000 
00011dc5 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00013a2b l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
00017dec l       .debug_str	00000000 
00013166 l       .debug_str	00000000 
0005faf0 l       .debug_str	00000000 
00013a33 l       .debug_str	00000000 
00013abf l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
000130bc l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
0005d3aa l       .debug_str	00000000 
000140c8 l       .debug_str	00000000 
0005bb74 l       .debug_str	00000000 
00014578 l       .debug_str	00000000 
000145ea l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
000140bf l       .debug_str	00000000 
0001edd0 l     O .text	0000001c str.0
0001f050 l     O .text	00000021 str.1
0001f330 l     O .text	00000039 str.2
0001f390 l     O .text	00000021 str.3
0001f3d0 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 53nui5ao3x14l5p9
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
000140eb l       .debug_str	00000000 
000337b9 l       .debug_str	00000000 
0001a8e0 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000140f1 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5amxpeuxwufgc2g7
00014304 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00012ee3 l       .debug_str	00000000 
0001326a l       .debug_str	00000000 
00014270 l       .debug_str	00000000 
0001434d l       .debug_str	00000000 
00014397 l       .debug_str	00000000 
000143ea l       .debug_str	00000000 
00014479 l       .debug_str	00000000 
000144dc l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00014554 l       .debug_str	00000000 
000145c6 l       .debug_str	00000000 
00014684 l       .debug_str	00000000 
0005b1fd l       .debug_str	00000000 
0000b087 l       .debug_str	00000000 
000130c5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
000130bc l       .debug_str	00000000 
000140ad l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
0005d3aa l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
00002fda l       .debug_str	00000000 
00017f11 l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
00013055 l       .debug_str	00000000 
00005587 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00017dec l       .debug_str	00000000 
00013166 l       .debug_str	00000000 
00024264 l       .debug_str	00000000 
0005faf0 l       .debug_str	00000000 
000130e0 l       .debug_str	00000000 
000140b5 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00011dc5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000135bf l       .debug_str	00000000 
000140bf l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
000145ea l       .debug_str	00000000 
00014578 l       .debug_str	00000000 
00004557 l       .debug_str	00000000 
0000512c l       .debug_str	00000000 
00014156 l       .debug_str	00000000 
000141e0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5eukf9ymd90dvsi0
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00014688 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000146e1 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00014690 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5fcitodfeuns782f
00014760 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
000146ee l       .debug_str	00000000 
000146f3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000146fa l       .debug_str	00000000 
00014702 l       .debug_str	00000000 
0000c5ea l       .debug_str	00000000 
0001470a l       .debug_str	00000000 
00014712 l       .debug_str	00000000 
00014719 l       .debug_str	00000000 
000182ec l       .debug_str	00000000 
00005a83 l       .debug_str	00000000 
00014720 l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002120f l       .debug_str	00000000 
00014775 l       .debug_str	00000000 
00014725 l       .debug_str	00000000 
0003414d l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 tdisvxegs4w5usn
0001488a l       .debug_str	00000000 
000140bf l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
000145ea l       .debug_str	00000000 
00014578 l       .debug_str	00000000 
0001481b l       .debug_str	00000000 
0001485c l       .debug_str	00000000 
000148cb l       .debug_str	00000000 
0001492e l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0001497e l       .debug_str	00000000 
000149fe l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00012ee3 l       .debug_str	00000000 
00014a72 l       .debug_str	00000000 
00014af2 l       .debug_str	00000000 
0001326a l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000130c5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
00004557 l       .debug_str	00000000 
00014781 l       .debug_str	00000000 
000369ad l       .debug_str	00000000 
000130bc l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
0005d3aa l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
00002fda l       .debug_str	00000000 
00017f11 l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
00013055 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00005587 l       .debug_str	00000000 
00011dc5 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00013166 l       .debug_str	00000000 
00024264 l       .debug_str	00000000 
0005faf0 l       .debug_str	00000000 
000130e0 l       .debug_str	00000000 
00017dec l       .debug_str	00000000 
0000512c l       .debug_str	00000000 
0000cead l       .debug_str	00000000 
0001478a l       .debug_str	00000000 
000147cd l       .debug_str	00000000 
000140ad l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
000140b5 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000135bf l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 u3mfxzl87iwp64s
00014bce l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
00017dec l       .debug_str	00000000 
00014c0d l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00012ee3 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
00014cbf l       .debug_str	00000000 
00014d9d l       .debug_str	00000000 
00014cfc l       .debug_str	00000000 
00014d5f l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00014d86 l       .debug_str	00000000 
0005aa62 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00004557 l       .debug_str	00000000 
00014781 l       .debug_str	00000000 
000369ad l       .debug_str	00000000 
0000512c l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
00014b30 l       .debug_str	00000000 
00014bc5 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000f169 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005d3aa l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
00002fda l       .debug_str	00000000 
00017f11 l       .debug_str	00000000 
0000cead l       .debug_str	00000000 
000130bc l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
00013055 l       .debug_str	00000000 
00005587 l       .debug_str	00000000 
00011dc5 l       .debug_str	00000000 
00013166 l       .debug_str	00000000 
00024264 l       .debug_str	00000000 
0005faf0 l       .debug_str	00000000 
000130e0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 yz3sc57ybxznzy
00017d4c l       .debug_str	00000000 
00014e1f l       .debug_str	00000000 
00014ec4 l       .debug_str	00000000 
00014f3c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
0000155a l       .debug_str	00000000 
000015aa l       .debug_str	00000000 
00001607 l       .debug_str	00000000 
0000165b l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
00014da7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
00016600 l       .debug_str	00000000 
000155f1 l       .debug_str	00000000 
0001561b l       .debug_str	00000000 
00015669 l       .debug_str	00000000 
00015671 l       .debug_str	00000000 
0000c387 l       .debug_str	00000000 
000156be l       .debug_str	00000000 
00015718 l       .debug_str	00000000 
00015726 l       .debug_str	00000000 
00015779 l       .debug_str	00000000 
00015781 l       .debug_str	00000000 
000157d6 l       .debug_str	00000000 
000157e0 l       .debug_str	00000000 
0001581e l       .debug_str	00000000 
00015839 l       .debug_str	00000000 
00015898 l       .debug_str	00000000 
00014685 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
000158fd l       .debug_str	00000000 
0001592e l       .debug_str	00000000 
00015939 l       .debug_str	00000000 
000031f6 l       .debug_str	00000000 
0001596b l       .debug_str	00000000 
00015999 l       .debug_str	00000000 
000159ab l       .debug_str	00000000 
000159d1 l       .debug_str	00000000 
000159dd l       .debug_str	00000000 
0000c2c7 l       .debug_str	00000000 
00015a24 l       .debug_str	00000000 
0000c31c l       .debug_str	00000000 
0000c3e6 l       .debug_str	00000000 
00015a6f l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
00015a75 l       .debug_str	00000000 
00015b01 l       .debug_str	00000000 
00015b1c l       .debug_str	00000000 
00015b4c l       .debug_str	00000000 
00015b81 l       .debug_str	00000000 
00015bb1 l       .debug_str	00000000 
00015bc7 l       .debug_str	00000000 
00015bfd l       .debug_str	00000000 
00015c18 l       .debug_str	00000000 
00015c52 l       .debug_str	00000000 
00015c71 l       .debug_str	00000000 
00015cad l       .debug_str	00000000 
00015cd3 l       .debug_str	00000000 
00015cdf l       .debug_str	00000000 
00015d06 l       .debug_str	00000000 
00015d13 l       .debug_str	00000000 
00015f20 l       .debug_str	00000000 
00015d61 l       .debug_str	00000000 
00015f90 l       .debug_str	00000000 
00015db2 l       .debug_str	00000000 
00015e04 l       .debug_str	00000000 
00015e10 l       .debug_str	00000000 
00015e5b l       .debug_str	00000000 
00015e6d l       .debug_str	00000000 
00015eb0 l       .debug_str	00000000 
00015ebb l       .debug_str	00000000 
00015f17 l       .debug_str	00000000 
00015f28 l       .debug_str	00000000 
00015f87 l       .debug_str	00000000 
00015f9b l       .debug_str	00000000 
00015ff1 l       .debug_str	00000000 
00016086 l       .debug_str	00000000 
00016092 l       .debug_str	00000000 
0001612c l       .debug_str	00000000 
0001613d l       .debug_str	00000000 
00016162 l       .debug_str	00000000 
0001620b l       .debug_str	00000000 
0000cead l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0001621c l       .debug_str	00000000 
000162a4 l       .debug_str	00000000 
0001625b l       .debug_str	00000000 
0001629f l       .debug_str	00000000 
000162e9 l       .debug_str	00000000 
0001632a l       .debug_str	00000000 
0001634f l       .debug_str	00000000 
000163a0 l       .debug_str	00000000 
000163e5 l       .debug_str	00000000 
00016438 l       .debug_str	00000000 
00016499 l       .debug_str	00000000 
00016500 l       .debug_str	00000000 
0000aff2 l       .debug_str	00000000 
00016547 l       .debug_str	00000000 
00016592 l       .debug_str	00000000 
0001659f l       .debug_str	00000000 
00016679 l       .debug_str	00000000 
00016671 l       .debug_str	00000000 
00016681 l       .debug_str	00000000 
000054ab l       .debug_str	00000000 
0001669d l       .debug_str	00000000 
00016712 l       .debug_str	00000000 
0001673d l       .debug_str	00000000 
000167b6 l       .debug_str	00000000 
000167c0 l       .debug_str	00000000 
000167e6 l       .debug_str	00000000 
0001681f l       .debug_str	00000000 
00013161 l       .debug_str	00000000 
00016837 l       .debug_str	00000000 
00016870 l       .debug_str	00000000 
000168a8 l       .debug_str	00000000 
0000b087 l       .debug_str	00000000 
000168e1 l       .debug_str	00000000 
0001691c l       .debug_str	00000000 
00016960 l       .debug_str	00000000 
000169a6 l       .debug_str	00000000 
000169e2 l       .debug_str	00000000 
00016a0a l       .debug_str	00000000 
00016a46 l       .debug_str	00000000 
00016a6a l       .debug_str	00000000 
00016ac7 l       .debug_str	00000000 
00016adb l       .debug_str	00000000 
00016b2c l       .debug_str	00000000 
00017a14 l       .debug_str	00000000 
00016b38 l       .debug_str	00000000 
00016b89 l       .debug_str	00000000 
00016ba0 l       .debug_str	00000000 
00016bf1 l       .debug_str	00000000 
00016c0f l       .debug_str	00000000 
00016c60 l       .debug_str	00000000 
00016c72 l       .debug_str	00000000 
00016cca l       .debug_str	00000000 
00016ce0 l       .debug_str	00000000 
00016d43 l       .debug_str	00000000 
00016d6e l       .debug_str	00000000 
00016dd1 l       .debug_str	00000000 
00016e46 l       .debug_str	00000000 
00016eaa l       .debug_str	00000000 
00016eb4 l       .debug_str	00000000 
00016f1f l       .debug_str	00000000 
00016f2e l       .debug_str	00000000 
00016f9a l       .debug_str	00000000 
00016fcc l       .debug_str	00000000 
00016ff2 l       .debug_str	00000000 
00017061 l       .debug_str	00000000 
00017081 l       .debug_str	00000000 
000170f1 l       .debug_str	00000000 
00017112 l       .debug_str	00000000 
00014bc5 l       .debug_str	00000000 
00017186 l       .debug_str	00000000 
00017206 l       .debug_str	00000000 
0001724c l       .debug_str	00000000 
00017275 l       .debug_str	00000000 
0001727c l       .debug_str	00000000 
000172b4 l       .debug_str	00000000 
000172f3 l       .debug_str	00000000 
000172fa l       .debug_str	00000000 
00017373 l       .debug_str	00000000 
00011dc5 l       .debug_str	00000000 
0001740a l       .debug_str	00000000 
00017488 l       .debug_str	00000000 
00017492 l       .debug_str	00000000 
00017520 l       .debug_str	00000000 
000175cc l       .debug_str	00000000 
00017613 l       .debug_str	00000000 
00017620 l       .debug_str	00000000 
0001766d l       .debug_str	00000000 
00017680 l       .debug_str	00000000 
000176d2 l       .debug_str	00000000 
00017742 l       .debug_str	00000000 
00015334 l       .debug_str	00000000 
000177a2 l       .debug_str	00000000 
000177b3 l       .debug_str	00000000 
00017818 l       .debug_str	00000000 
00017848 l       .debug_str	00000000 
00017851 l       .debug_str	00000000 
0001788d l       .debug_str	00000000 
000178a1 l       .debug_str	00000000 
000178dc l       .debug_str	00000000 
00017922 l       .debug_str	00000000 
00017940 l       .debug_str	00000000 
00017970 l       .debug_str	00000000 
00017979 l       .debug_str	00000000 
000179b3 l       .debug_str	00000000 
000179c5 l       .debug_str	00000000 
000179f3 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000179fa l       .debug_str	00000000 
00017a06 l       .debug_str	00000000 
00017a10 l       .debug_str	00000000 
00017a1a l       .debug_str	00000000 
00017a3d l       .debug_str	00000000 
00034067 l       .debug_str	00000000 
00017a92 l       .debug_str	00000000 
00017af2 l       .debug_str	00000000 
00017afe l       .debug_str	00000000 
00017b4e l       .debug_str	00000000 
00017bb1 l       .debug_str	00000000 
00017c18 l       .debug_str	00000000 
00017c87 l       .debug_str	00000000 
0005b1fd l       .debug_str	00000000 
00014684 l       .debug_str	00000000 
00017d17 l       .debug_str	00000000 
0005c29a l       .debug_str	00000000 
000507f9 l       .debug_str	00000000 
0000c5ea l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
0002108b l       .debug_str	00000000 
0005aa62 l       .debug_str	00000000 
00017d3e l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00017d45 l       .debug_str	00000000 
0005b1de l       .debug_str	00000000 
00017d52 l       .debug_str	00000000 
0005af84 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00017d5d l       .debug_str	00000000 
000615a8 l       .debug_str	00000000 
00017db1 l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
0000c3f4 l       .debug_str	00000000 
0005cf6b l       .debug_str	00000000 
0000403f l       .debug_str	00000000 
00017dbc l       .debug_str	00000000 
00017de7 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00003b44 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00017df3 l       .debug_str	00000000 
00017e2d l       .debug_str	00000000 
00017e66 l       .debug_str	00000000 
00017e75 l       .debug_str	00000000 
00017eb8 l       .debug_str	00000000 
0005c4af l       .debug_str	00000000 
00038e3a l       .debug_str	00000000 
0005ded4 l       .debug_str	00000000 
00017efa l       .debug_str	00000000 
00017f1e l       .debug_str	00000000 
0001748d l       .debug_str	00000000 
0005aa33 l       .debug_str	00000000 
00005a83 l       .debug_str	00000000 
00017f3e l       .debug_str	00000000 
00046bd8 l       .debug_str	00000000 
00017f79 l       .debug_str	00000000 
00017f80 l       .debug_str	00000000 
000377d4 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00017fc1 l       .debug_str	00000000 
00018008 l       .debug_str	00000000 
00002fde l       .debug_str	00000000 
0002156f l       .debug_str	00000000 
00017fe2 l       .debug_str	00000000 
00002faf l       .debug_str	00000000 
000185e9 l       .debug_str	00000000 
00018004 l       .debug_str	00000000 
0000bb38 l       .debug_str	00000000 
0000bb4c l       .debug_str	00000000 
0001800c l       .debug_str	00000000 
00018017 l       .debug_str	00000000 
00011e46 l       .debug_str	00000000 
00018010 l       .debug_str	00000000 
0000bb55 l       .debug_str	00000000 
0000bb60 l       .debug_str	00000000 
0000bb6b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00014fba l       .debug_str	00000000 
00015012 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001505f l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00015069 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00015075 l       .debug_str	00000000 
00017dcd l       .debug_str	00000000 
00017dc1 l       .debug_str	00000000 
00017dec l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005eb65 l       .debug_str	00000000 
00035b59 l       .debug_str	00000000 
00015086 l       .debug_str	00000000 
0001508b l       .debug_str	00000000 
00015091 l       .debug_str	00000000 
000182ec l       .debug_str	00000000 
00005126 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
000130bc l       .debug_str	00000000 
000140ad l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00015099 l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
0001509f l       .debug_str	00000000 
000337b9 l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039894 l       .debug_str	00000000 
0005cf7d l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005abef l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
0005ed81 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000150aa l       .debug_str	00000000 
000150d3 l       .debug_str	00000000 
000150e2 l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
000150fc l       .debug_str	00000000 
00015100 l       .debug_str	00000000 
00017e6f l       .debug_str	00000000 
00015104 l       .debug_str	00000000 
0001512d l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00015162 l       .debug_str	00000000 
00015176 l       .debug_str	00000000 
00015189 l       .debug_str	00000000 
000151d5 l       .debug_str	00000000 
0001164c l       .debug_str	00000000 
0000affb l       .debug_str	00000000 
00035b33 l       .debug_str	00000000 
0000c42d l       .debug_str	00000000 
00004557 l       .debug_str	00000000 
00014781 l       .debug_str	00000000 
000369ad l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0000b004 l       .debug_str	00000000 
00015324 l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
00013166 l       .debug_str	00000000 
00024264 l       .debug_str	00000000 
0005faf0 l       .debug_str	00000000 
00017f9b l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
000140b5 l       .debug_str	00000000 
000151e3 l       .debug_str	00000000 
0005d3aa l       .debug_str	00000000 
00002fda l       .debug_str	00000000 
00017f11 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
000167d8 l       .debug_str	00000000 
00017f51 l       .debug_str	00000000 
000140bf l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00017cab l       .debug_str	00000000 
00017c3c l       .debug_str	00000000 
000140eb l       .debug_str	00000000 
000151e9 l       .debug_str	00000000 
00015212 l       .debug_str	00000000 
00002fc4 l       .debug_str	00000000 
000167c1 l       .debug_str	00000000 
0001521e l       .debug_str	00000000 
00014688 l       .debug_str	00000000 
0001524b l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
00015256 l       .debug_str	00000000 
0000512c l       .debug_str	00000000 
0001527f l       .debug_str	00000000 
00015286 l       .debug_str	00000000 
000152b0 l       .debug_str	00000000 
0002227e l       .debug_str	00000000 
000152b4 l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
000152bd l       .debug_str	00000000 
000152ff l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00015312 l       .debug_str	00000000 
0005f9fa l       .debug_str	00000000 
0000bc11 l       .debug_str	00000000 
0004b287 l       .debug_str	00000000 
0001532d l       .debug_str	00000000 
00002fe0 l       .debug_str	00000000 
0001533c l       .debug_str	00000000 
00015346 l       .debug_str	00000000 
00017fee l       .debug_str	00000000 
000177ae l       .debug_str	00000000 
0001534b l       .debug_str	00000000 
000153d1 l       .debug_str	00000000 
000153db l       .debug_str	00000000 
0001546d l       .debug_str	00000000 
0000f169 l       .debug_str	00000000 
000154b3 l       .debug_str	00000000 
00015547 l       .debug_str	00000000 
000155a9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
000189e1 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005ed81 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039894 l       .debug_str	00000000 
0005cf7d l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005abef l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
0000f143 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000c5b8 l       .debug_str	00000000 
0000efdb l       .debug_str	00000000 
0000c839 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
0001a94f l       .debug_str	00000000 
0000c826 l       .debug_str	00000000 
0000c88b l       .debug_str	00000000 
000180d8 l       .debug_str	00000000 
000180e1 l       .debug_str	00000000 
000180e9 l       .debug_str	00000000 
000180f2 l       .debug_str	00000000 
00034e39 l       .debug_str	00000000 
000180ff l       .debug_str	00000000 
0001810f l       .debug_str	00000000 
00018120 l       .debug_str	00000000 
0000c859 l       .debug_str	00000000 
0000c864 l       .debug_str	00000000 
0001a99a l       .debug_str	00000000 
0000f86b l       .debug_str	00000000 
00018131 l       .debug_str	00000000 
0000efbb l       .debug_str	00000000 
0000efc9 l       .debug_str	00000000 
0001aa00 l       .debug_str	00000000 
0001813a l       .debug_str	00000000 
00018140 l       .debug_str	00000000 
0001814b l       .debug_str	00000000 
00018155 l       .debug_str	00000000 
0001815f l       .debug_str	00000000 
0000bc83 l       .debug_str	00000000 
000181a7 l       .debug_str	00000000 
0000bd6c l       .debug_str	00000000 
000181ef l       .debug_str	00000000 
00018237 l       .debug_str	00000000 
0000cead l       .debug_str	00000000 
00018240 l       .debug_str	00000000 
00018269 l       .debug_str	00000000 
00018272 l       .debug_str	00000000 
000182cf l       .debug_str	00000000 
0005faf0 l       .debug_str	00000000 
000182f5 l       .debug_str	00000000 
0001831d l       .debug_str	00000000 
0001834f l       .debug_str	00000000 
0001592e l       .debug_str	00000000 
00018380 l       .debug_str	00000000 
000183dd l       .debug_str	00000000 
0001843a l       .debug_str	00000000 
00018497 l       .debug_str	00000000 
000031f6 l       .debug_str	00000000 
000184c9 l       .debug_str	00000000 
0001850e l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
0001851a l       .debug_str	00000000 
00059ffa l       .debug_str	00000000 
00018556 l       .debug_str	00000000 
0000f0f4 l       .debug_str	00000000 
0001859a l       .debug_str	00000000 
000185e1 l       .debug_str	00000000 
000185ef l       .debug_str	00000000 
00018636 l       .debug_str	00000000 
00018644 l       .debug_str	00000000 
00018684 l       .debug_str	00000000 
0001868c l       .debug_str	00000000 
0000f17b l       .debug_str	00000000 
00018699 l       .debug_str	00000000 
000186d4 l       .debug_str	00000000 
00018712 l       .debug_str	00000000 
00018742 l       .debug_str	00000000 
00018756 l       .debug_str	00000000 
00018786 l       .debug_str	00000000 
0001879a l       .debug_str	00000000 
000187ca l       .debug_str	00000000 
000187de l       .debug_str	00000000 
0003fcb8 l       .debug_str	00000000 
00018829 l       .debug_str	00000000 
00018880 l       .debug_str	00000000 
0001888f l       .debug_str	00000000 
000188da l       .debug_str	00000000 
0000c2cf l       .debug_str	00000000 
00018951 l       .debug_str	00000000 
000189d6 l       .debug_str	00000000 
0000c387 l       .debug_str	00000000 
00018a58 l       .debug_str	00000000 
00018add l       .debug_str	00000000 
00018ae8 l       .debug_str	00000000 
0005aa33 l       .debug_str	00000000 
00018b71 l       .debug_str	00000000 
000219dd l       .debug_str	00000000 
00018be8 l       .debug_str	00000000 
0005c421 l       .debug_str	00000000 
00018c7d l       .debug_str	00000000 
00018d14 l       .debug_str	00000000 
00018daf l       .debug_str	00000000 
00018e44 l       .debug_str	00000000 
00018edb l       .debug_str	00000000 
00018f76 l       .debug_str	00000000 
0001903e l       .debug_str	00000000 
00019049 l       .debug_str	00000000 
00019115 l       .debug_str	00000000 
000191a5 l       .debug_str	00000000 
000191b1 l       .debug_str	00000000 
00019257 l       .debug_str	00000000 
00019263 l       .debug_str	00000000 
00019307 l       .debug_str	00000000 
000193a9 l       .debug_str	00000000 
0001944d l       .debug_str	00000000 
000194a1 l       .debug_str	00000000 
000194f6 l       .debug_str	00000000 
0001954b l       .debug_str	00000000 
00015334 l       .debug_str	00000000 
000195ce l       .debug_str	00000000 
00019652 l       .debug_str	00000000 
000196d6 l       .debug_str	00000000 
00004033 l       .debug_str	00000000 
0001971d l       .debug_str	00000000 
00004039 l       .debug_str	00000000 
00019764 l       .debug_str	00000000 
0000403f l       .debug_str	00000000 
000197ab l       .debug_str	00000000 
00019829 l       .debug_str	00000000 
000198a8 l       .debug_str	00000000 
00019943 l       .debug_str	00000000 
000199d7 l       .debug_str	00000000 
00019a24 l       .debug_str	00000000 
00019a30 l       .debug_str	00000000 
00019a93 l       .debug_str	00000000 
00019adb l       .debug_str	00000000 
000150fc l       .debug_str	00000000 
00019ae3 l       .debug_str	00000000 
00019b77 l       .debug_str	00000000 
00019bdd l       .debug_str	00000000 
00019c6e l       .debug_str	00000000 
00019d0d l       .debug_str	00000000 
00019d9e l       .debug_str	00000000 
00019e3d l       .debug_str	00000000 
00019edf l       .debug_str	00000000 
00019f70 l       .debug_str	00000000 
0001a01e l       .debug_str	00000000 
0001a0ce l       .debug_str	00000000 
0001a182 l       .debug_str	00000000 
0001a275 l       .debug_str	00000000 
0001a280 l       .debug_str	00000000 
0001a377 l       .debug_str	00000000 
0001a423 l       .debug_str	00000000 
0001a42d l       .debug_str	00000000 
0001a49f l       .debug_str	00000000 
0001a514 l       .debug_str	00000000 
0001a587 l       .debug_str	00000000 
0001a5f8 l       .debug_str	00000000 
0001a66b l       .debug_str	00000000 
0001a6e2 l       .debug_str	00000000 
0001a757 l       .debug_str	00000000 
0001a7cc l       .debug_str	00000000 
0001a83c l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bfae l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
0000bfba l       .debug_str	00000000 
0001a8c8 l       .debug_str	00000000 
0002108b l       .debug_str	00000000 
0001a8ce l       .debug_str	00000000 
00015669 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00017dec l       .debug_str	00000000 
00017d5d l       .debug_str	00000000 
000185e9 l       .debug_str	00000000 
0001a8d1 l       .debug_str	00000000 
0001a8db l       .debug_str	00000000 
0001a8e5 l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
0001a8ef l       .debug_str	00000000 
0001a920 l       .debug_str	00000000 
00061b15 l       .debug_str	00000000 
00002faf l       .debug_str	00000000 
0001a955 l       .debug_str	00000000 
0001a95f l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0001a969 l       .debug_str	00000000 
0001a972 l       .debug_str	00000000 
0001a9a1 l       .debug_str	00000000 
0001a9ae l       .debug_str	00000000 
0001a9b1 l       .debug_str	00000000 
0001a9b4 l       .debug_str	00000000 
0001a9b7 l       .debug_str	00000000 
0001a9ba l       .debug_str	00000000 
0001a9bd l       .debug_str	00000000 
0001a9c0 l       .debug_str	00000000 
0001aa0e l       .debug_str	00000000 
0000bb38 l       .debug_str	00000000 
0000bb4c l       .debug_str	00000000 
00018010 l       .debug_str	00000000 
0000bb55 l       .debug_str	00000000 
0000bb60 l       .debug_str	00000000 
00011e46 l       .debug_str	00000000 
0001aa58 l       .debug_str	00000000 
0001aa89 l       .debug_str	00000000 
0001aa63 l       .debug_str	00000000 
0001aabc l       .debug_str	00000000 
0001aa97 l       .debug_str	00000000 
0001aaed l       .debug_str	00000000 
0001aac9 l       .debug_str	00000000 
0001ab1e l       .debug_str	00000000 
0001aaf9 l       .debug_str	00000000 
0001ab52 l       .debug_str	00000000 
0001ab2b l       .debug_str	00000000 
0001ab87 l       .debug_str	00000000 
0001ab61 l       .debug_str	00000000 
0001abbb l       .debug_str	00000000 
0001ab95 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00018023 l       .debug_str	00000000 
00018083 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
0001a8d6 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
0001a8e0 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
0001a8ea l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005eb65 l       .debug_str	00000000 
00035b59 l       .debug_str	00000000 
00015086 l       .debug_str	00000000 
0001508b l       .debug_str	00000000 
00015091 l       .debug_str	00000000 
000182ec l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00038a4a l       .debug_str	00000000 
000337b9 l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
0001156e l     F .text	00000044 _ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE
00011662 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
000116d0 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE
00011708 l     F .text	0000001a _ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
00016c60 l       .debug_str	00000000 
0001b0a3 l       .debug_str	00000000 
0000c31c l       .debug_str	00000000 
0000c3e6 l       .debug_str	00000000 
0001b0ee l       .debug_str	00000000 
00015bfd l       .debug_str	00000000 
0001b124 l       .debug_str	00000000 
00015c52 l       .debug_str	00000000 
0001b15e l       .debug_str	00000000 
0001b19a l       .debug_str	00000000 
00015cd3 l       .debug_str	00000000 
0001b1c0 l       .debug_str	00000000 
00015d06 l       .debug_str	00000000 
0001b1e7 l       .debug_str	00000000 
00015f20 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0001b235 l       .debug_str	00000000 
00015f90 l       .debug_str	00000000 
0001b286 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0001b2d8 l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
0001b32d l       .debug_str	00000000 
00016086 l       .debug_str	00000000 
0001b3c2 l       .debug_str	00000000 
0001b410 l       .debug_str	00000000 
00024264 l       .debug_str	00000000 
0001b41f l       .debug_str	00000000 
0001b470 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0001b488 l       .debug_str	00000000 
0001b4dd l       .debug_str	00000000 
0001b4f9 l       .debug_str	00000000 
0001b501 l       .debug_str	00000000 
0001b547 l       .debug_str	00000000 
0001b54f l       .debug_str	00000000 
00015eb0 l       .debug_str	00000000 
0001b598 l       .debug_str	00000000 
0005c421 l       .debug_str	00000000 
0001b607 l       .debug_str	00000000 
00016b2c l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
0001b658 l       .debug_str	00000000 
0001b6a9 l       .debug_str	00000000 
00016cca l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
0001524b l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
00015256 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005d3aa l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
00002fda l       .debug_str	00000000 
00017f11 l       .debug_str	00000000 
0001b701 l       .debug_str	00000000 
0001b764 l       .debug_str	00000000 
0001b78e l       .debug_str	00000000 
0001b7f1 l       .debug_str	00000000 
0001b7fa l       .debug_str	00000000 
0001b867 l       .debug_str	00000000 
0001b879 l       .debug_str	00000000 
0000540e l       .debug_str	00000000 
0001b8ea l       .debug_str	00000000 
00015334 l       .debug_str	00000000 
0001b94a l       .debug_str	00000000 
0001b97d l       .debug_str	00000000 
0001b9e7 l       .debug_str	00000000 
0001ba1a l       .debug_str	00000000 
0001ba1f l       .debug_str	00000000 
0001ba83 l       .debug_str	00000000 
0005ecda l       .debug_str	00000000 
0001bade l       .debug_str	00000000 
0001bb1a l       .debug_str	00000000 
0001bb28 l       .debug_str	00000000 
0001bb57 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00017dec l       .debug_str	00000000 
0005aa62 l       .debug_str	00000000 
00017d3e l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005b1de l       .debug_str	00000000 
0005af84 l       .debug_str	00000000 
00017d45 l       .debug_str	00000000 
00017d52 l       .debug_str	00000000 
0002108b l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00017db1 l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
0000c3f4 l       .debug_str	00000000 
0005cf6b l       .debug_str	00000000 
0000403f l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00003b44 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00017df3 l       .debug_str	00000000 
00017e2d l       .debug_str	00000000 
00017e66 l       .debug_str	00000000 
00017e75 l       .debug_str	00000000 
00017eb8 l       .debug_str	00000000 
0005c4af l       .debug_str	00000000 
00038e3a l       .debug_str	00000000 
0005ded4 l       .debug_str	00000000 
0000bc11 l       .debug_str	00000000 
00017efa l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
000051cc l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
000360cc l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
0001bb5f l       .debug_str	00000000 
0001bb77 l       .debug_str	00000000 
000615a8 l       .debug_str	00000000 
00002fde l       .debug_str	00000000 
0001bb94 l       .debug_str	00000000 
0001bb22 l       .debug_str	00000000 
0001bbad l       .debug_str	00000000 
0001bbc9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001abc9 l       .debug_str	00000000 
0001ac1e l       .debug_str	00000000 
0001ac68 l       .debug_str	00000000 
0001ac6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00011e4e l       .debug_str	00000000 
0001aa60 l       .debug_str	00000000 
000213c0 l       .debug_str	00000000 
000213cb l       .debug_str	00000000 
0001bb71 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0001509f l       .debug_str	00000000 
0005eb65 l       .debug_str	00000000 
000337b9 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
0005ed81 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001ac77 l       .debug_str	00000000 
000150d3 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000150e2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
000150fc l       .debug_str	00000000 
00015100 l       .debug_str	00000000 
00017e6f l       .debug_str	00000000 
0001aca0 l       .debug_str	00000000 
0001512d l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00015162 l       .debug_str	00000000 
00015176 l       .debug_str	00000000 
0001acc9 l       .debug_str	00000000 
000151d5 l       .debug_str	00000000 
0001164c l       .debug_str	00000000 
0000c42d l       .debug_str	00000000 
00005126 l       .debug_str	00000000 
00014688 l       .debug_str	00000000 
00004557 l       .debug_str	00000000 
0000512c l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
0001ad15 l       .debug_str	00000000 
0000b307 l       .debug_str	00000000 
0001ad3e l       .debug_str	00000000 
0001ad48 l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
000185e9 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
0005aa33 l       .debug_str	00000000 
0001ad4c l       .debug_str	00000000 
0005af58 l       .debug_str	00000000 
0001bbc3 l       .debug_str	00000000 
0001bb8d l       .debug_str	00000000 
0001ad56 l       .debug_str	00000000 
000157d6 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
0001adab l       .debug_str	00000000 
0001ade9 l       .debug_str	00000000 
0001ae01 l       .debug_str	00000000 
0001581e l       .debug_str	00000000 
0001ae3f l       .debug_str	00000000 
00014685 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
0001aea4 l       .debug_str	00000000 
0001aed4 l       .debug_str	00000000 
0001aefb l       .debug_str	00000000 
000159d1 l       .debug_str	00000000 
0001af21 l       .debug_str	00000000 
0001af66 l       .debug_str	00000000 
0001af72 l       .debug_str	00000000 
0001afb8 l       .debug_str	00000000 
0001afc5 l       .debug_str	00000000 
0001b00b l       .debug_str	00000000 
0001b018 l       .debug_str	00000000 
0001b056 l       .debug_str	00000000 
0001b05c l       .debug_str	00000000 
0000c2c7 l       .debug_str	00000000 
000118b8 l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
00011922 l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
0001194c l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
0001198a l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
00011a5a l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
0001bc4d l       .debug_str	00000000 
0001bc4b l       .debug_str	00000000 
0001bc9e l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001bbd2 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00014688 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001bbf1 l       .debug_str	00000000 
0001bc42 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
0001de1c l       .debug_str	00000000 
0001470a l       .debug_str	00000000 
00014712 l       .debug_str	00000000 
00014719 l       .debug_str	00000000 
000139ec l       .debug_str	00000000 
00021322 l       .debug_str	00000000 
000130bc l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0001bfc6 l       .debug_str	00000000 
00005126 l       .debug_str	00000000 
0001bfca l       .debug_str	00000000 
0001b547 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000affb l       .debug_str	00000000 
00035b33 l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0000b004 l       .debug_str	00000000 
00015324 l       .debug_str	00000000 
0001c048 l       .debug_str	00000000 
0005d3aa l       .debug_str	00000000 
00046bd8 l       .debug_str	00000000 
0006047e l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
0001c05f l       .debug_str	00000000 
00015212 l       .debug_str	00000000 
0001c088 l       .debug_str	00000000 
0001c0ba l       .debug_str	00000000 
0001509f l       .debug_str	00000000 
00038a4a l       .debug_str	00000000 
000337b9 l       .debug_str	00000000 
0005ed81 l       .debug_str	00000000 
0000f143 l       .debug_str	00000000 
0001c0cc l       .debug_str	00000000 
0001c0f5 l       .debug_str	00000000 
000150e2 l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
000150fc l       .debug_str	00000000 
00015100 l       .debug_str	00000000 
00017e6f l       .debug_str	00000000 
0001c11a l       .debug_str	00000000 
0001512d l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
0001c143 l       .debug_str	00000000 
0001c16d l       .debug_str	00000000 
0001c196 l       .debug_str	00000000 
0001c1e2 l       .debug_str	00000000 
0001164c l       .debug_str	00000000 
0001c206 l       .debug_str	00000000 
0000c42d l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b715 l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
0000c676 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0001c214 l       .debug_str	00000000 
00004557 l       .debug_str	00000000 
00014781 l       .debug_str	00000000 
000369ad l       .debug_str	00000000 
0005bd49 l       .debug_str	00000000 
0004ed9c l       .debug_str	00000000 
0005caae l       .debug_str	00000000 
0005e3c7 l       .debug_str	00000000 
00024264 l       .debug_str	00000000 
00020f7c l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
00039654 l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
0002128c l       .debug_str	00000000 
00021234 l       .debug_str	00000000 
0001c229 l       .debug_str	00000000 
0001c233 l       .debug_str	00000000 
00021114 l       .debug_str	00000000 
00034e39 l       .debug_str	00000000 
00020eec l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
0001ec03 l       .debug_str	00000000 
0005faf0 l       .debug_str	00000000 
000212c5 l       .debug_str	00000000 
0005cf6b l       .debug_str	00000000 
000212a4 l       .debug_str	00000000 
0000403f l       .debug_str	00000000 
0005aa33 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00020f3d l       .debug_str	00000000 
000140eb l       .debug_str	00000000 
0001c23c l       .debug_str	00000000 
0001c265 l       .debug_str	00000000 
0001c273 l       .debug_str	00000000 
0001c280 l       .debug_str	00000000 
0001c293 l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
0001c2ac l       .debug_str	00000000 
00014688 l       .debug_str	00000000 
0000512c l       .debug_str	00000000 
0001c2c1 l       .debug_str	00000000 
0001c33d l       .debug_str	00000000 
0001c2d4 l       .debug_str	00000000 
0001c316 l       .debug_str	00000000 
0001c32b l       .debug_str	00000000 
0005f9fa l       .debug_str	00000000 
0000bc11 l       .debug_str	00000000 
0004b287 l       .debug_str	00000000 
0001c348 l       .debug_str	00000000 
0001c352 l       .debug_str	00000000 
0001c384 l       .debug_str	00000000 
0001c398 l       .debug_str	00000000 
0001c3ad l       .debug_str	00000000 
000204e7 l       .debug_str	00000000 
000206f0 l       .debug_str	00000000 
0001c3b4 l       .debug_str	00000000 
0001c3bf l       .debug_str	00000000 
0001c443 l       .debug_str	00000000 
0001c471 l       .debug_str	00000000 
0001c4f7 l       .debug_str	00000000 
00042e36 l       .debug_str	00000000 
0001c51f l       .debug_str	00000000 
0001c530 l       .debug_str	00000000 
0001c5ba l       .debug_str	00000000 
0001c5d8 l       .debug_str	00000000 
0001c666 l       .debug_str	00000000 
0001c68d l       .debug_str	00000000 
0001c71c l       .debug_str	00000000 
0001c764 l       .debug_str	00000000 
0001c793 l       .debug_str	00000000 
0001c7db l       .debug_str	00000000 
0001c7fa l       .debug_str	00000000 
0001c842 l       .debug_str	00000000 
0001c852 l       .debug_str	00000000 
0001c89a l       .debug_str	00000000 
0001c8ab l       .debug_str	00000000 
0001c8f3 l       .debug_str	00000000 
0001c8fb l       .debug_str	00000000 
0001c943 l       .debug_str	00000000 
0001c94d l       .debug_str	00000000 
0001c995 l       .debug_str	00000000 
0001c9af l       .debug_str	00000000 
0001c9f7 l       .debug_str	00000000 
0001ca10 l       .debug_str	00000000 
0001ca58 l       .debug_str	00000000 
0001ca6b l       .debug_str	00000000 
0001cab3 l       .debug_str	00000000 
0001cabc l       .debug_str	00000000 
0000bd6c l       .debug_str	00000000 
0001cb04 l       .debug_str	00000000 
0001cb4e l       .debug_str	00000000 
0001cb99 l       .debug_str	00000000 
0001cbd7 l       .debug_str	00000000 
0001cc08 l       .debug_str	00000000 
0001ade9 l       .debug_str	00000000 
0000cead l       .debug_str	00000000 
0001cc46 l       .debug_str	00000000 
0001cc6f l       .debug_str	00000000 
0001cc7a l       .debug_str	00000000 
0001cc9f l       .debug_str	00000000 
0001ccfe l       .debug_str	00000000 
00034067 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
00017dec l       .debug_str	00000000 
0001cd65 l       .debug_str	00000000 
0001cd8f l       .debug_str	00000000 
0001cdb7 l       .debug_str	00000000 
0001cdef l       .debug_str	00000000 
0001ce20 l       .debug_str	00000000 
0001ce2a l       .debug_str	00000000 
0001ce87 l       .debug_str	00000000 
000031f6 l       .debug_str	00000000 
0001ceb9 l       .debug_str	00000000 
0001cedf l       .debug_str	00000000 
0001cf01 l       .debug_str	00000000 
0001cf27 l       .debug_str	00000000 
0001cf49 l       .debug_str	00000000 
0001cf72 l       .debug_str	00000000 
0001cf97 l       .debug_str	00000000 
0001cfdf l       .debug_str	00000000 
0001cfec l       .debug_str	00000000 
0001cff5 l       .debug_str	00000000 
0001d07f l       .debug_str	00000000 
00013a2b l       .debug_str	00000000 
0001d09c l       .debug_str	00000000 
0001d128 l       .debug_str	00000000 
0001d145 l       .debug_str	00000000 
0001d165 l       .debug_str	00000000 
0000f17b l       .debug_str	00000000 
0001d16c l       .debug_str	00000000 
0001d1a7 l       .debug_str	00000000 
0001d1d9 l       .debug_str	00000000 
0001d1ea l       .debug_str	00000000 
0001d225 l       .debug_str	00000000 
0001d26b l       .debug_str	00000000 
000187ca l       .debug_str	00000000 
0001d29b l       .debug_str	00000000 
0001d2cb l       .debug_str	00000000 
0001d2e9 l       .debug_str	00000000 
0001d319 l       .debug_str	00000000 
0001d32c l       .debug_str	00000000 
0001d35c l       .debug_str	00000000 
0001d371 l       .debug_str	00000000 
0001d3a1 l       .debug_str	00000000 
0001d3bd l       .debug_str	00000000 
0001d3ed l       .debug_str	00000000 
0001d40b l       .debug_str	00000000 
0001d43b l       .debug_str	00000000 
0001d456 l       .debug_str	00000000 
0001d486 l       .debug_str	00000000 
0001d4aa l       .debug_str	00000000 
0001d4da l       .debug_str	00000000 
0001d514 l       .debug_str	00000000 
0001d544 l       .debug_str	00000000 
0001d569 l       .debug_str	00000000 
0001d599 l       .debug_str	00000000 
0001d5c3 l       .debug_str	00000000 
0001d5f9 l       .debug_str	00000000 
0001d62a l       .debug_str	00000000 
0001d664 l       .debug_str	00000000 
0001d699 l       .debug_str	00000000 
0001d6d5 l       .debug_str	00000000 
0001d6fb l       .debug_str	00000000 
0001d71d l       .debug_str	00000000 
0001d744 l       .debug_str	00000000 
0001d767 l       .debug_str	00000000 
00015f20 l       .debug_str	00000000 
0001d7b5 l       .debug_str	00000000 
00015f90 l       .debug_str	00000000 
0001d806 l       .debug_str	00000000 
0001d857 l       .debug_str	00000000 
0001d864 l       .debug_str	00000000 
0001d8b6 l       .debug_str	00000000 
0001d8c4 l       .debug_str	00000000 
00015e5b l       .debug_str	00000000 
0001d90f l       .debug_str	00000000 
0001d95a l       .debug_str	00000000 
0001d96e l       .debug_str	00000000 
0001d9b1 l       .debug_str	00000000 
0001d9be l       .debug_str	00000000 
00015eb0 l       .debug_str	00000000 
0001da01 l       .debug_str	00000000 
00015f17 l       .debug_str	00000000 
0001da5d l       .debug_str	00000000 
00015f87 l       .debug_str	00000000 
0001dabc l       .debug_str	00000000 
0001db0e l       .debug_str	00000000 
0001db60 l       .debug_str	00000000 
0001db6a l       .debug_str	00000000 
0001dbbf l       .debug_str	00000000 
0001dc14 l       .debug_str	00000000 
0001dc6a l       .debug_str	00000000 
00015e04 l       .debug_str	00000000 
0001dcc0 l       .debug_str	00000000 
0001dcfc l       .debug_str	00000000 
000185e9 l       .debug_str	00000000 
0001dd3a l       .debug_str	00000000 
0001dd75 l       .debug_str	00000000 
00017d52 l       .debug_str	00000000 
0001dd80 l       .debug_str	00000000 
0001ddc7 l       .debug_str	00000000 
00013166 l       .debug_str	00000000 
0001dddd l       .debug_str	00000000 
0001de6e l       .debug_str	00000000 
0001de84 l       .debug_str	00000000 
0001dec9 l       .debug_str	00000000 
0001dee3 l       .debug_str	00000000 
0001df46 l       .debug_str	00000000 
0001df66 l       .debug_str	00000000 
0001dfa5 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
0001e006 l       .debug_str	00000000 
0001e045 l       .debug_str	00000000 
0002110f l       .debug_str	00000000 
0001e06c l       .debug_str	00000000 
0001e0ac l       .debug_str	00000000 
0001e0df l       .debug_str	00000000 
0001e0f6 l       .debug_str	00000000 
0001e13c l       .debug_str	00000000 
0001e158 l       .debug_str	00000000 
0001e1bc l       .debug_str	00000000 
0001e1de l       .debug_str	00000000 
0001e220 l       .debug_str	00000000 
0001e241 l       .debug_str	00000000 
0001e283 l       .debug_str	00000000 
0005d607 l       .debug_str	00000000 
0001e2b3 l       .debug_str	00000000 
0001e2f7 l       .debug_str	00000000 
0001e34c l       .debug_str	00000000 
0001e390 l       .debug_str	00000000 
0001e3e6 l       .debug_str	00000000 
0001e42a l       .debug_str	00000000 
0001e4a2 l       .debug_str	00000000 
0001e4e6 l       .debug_str	00000000 
0001e526 l       .debug_str	00000000 
0001e541 l       .debug_str	00000000 
0001e582 l       .debug_str	00000000 
0001e5d8 l       .debug_str	00000000 
0001e61c l       .debug_str	00000000 
0001e649 l       .debug_str	00000000 
0001e68e l       .debug_str	00000000 
0001e6d6 l       .debug_str	00000000 
0001e6e7 l       .debug_str	00000000 
0001e72f l       .debug_str	00000000 
0001e740 l       .debug_str	00000000 
0003414d l       .debug_str	00000000 
0001e77b l       .debug_str	00000000 
0001e7b7 l       .debug_str	00000000 
0001e7bd l       .debug_str	00000000 
0001e7f3 l       .debug_str	00000000 
0001e806 l       .debug_str	00000000 
0001e83d l       .debug_str	00000000 
0001e851 l       .debug_str	00000000 
0001e893 l       .debug_str	00000000 
0001e8b2 l       .debug_str	00000000 
0001e8f7 l       .debug_str	00000000 
0001e912 l       .debug_str	00000000 
0001e977 l       .debug_str	00000000 
0001e9de l       .debug_str	00000000 
0001e9e9 l       .debug_str	00000000 
0001ea2f l       .debug_str	00000000 
0001ea75 l       .debug_str	00000000 
0001ea7f l       .debug_str	00000000 
0001eac6 l       .debug_str	00000000 
0001ead1 l       .debug_str	00000000 
0000aff2 l       .debug_str	00000000 
0001eb18 l       .debug_str	00000000 
0001eb61 l       .debug_str	00000000 
0001ebaa l       .debug_str	00000000 
0001ebe3 l       .debug_str	00000000 
0001ebfe l       .debug_str	00000000 
0001ec0d l       .debug_str	00000000 
0001ec46 l       .debug_str	00000000 
0001ec6b l       .debug_str	00000000 
0001eca4 l       .debug_str	00000000 
0001ecdd l       .debug_str	00000000 
0001ed03 l       .debug_str	00000000 
0001ed3c l       .debug_str	00000000 
0001ed7a l       .debug_str	00000000 
0001edb4 l       .debug_str	00000000 
0001edc0 l       .debug_str	00000000 
0001edfc l       .debug_str	00000000 
0001ee0f l       .debug_str	00000000 
0001ee4b l       .debug_str	00000000 
0001ee64 l       .debug_str	00000000 
0001eea1 l       .debug_str	00000000 
0001eeb2 l       .debug_str	00000000 
00016b2c l       .debug_str	00000000 
0001ef03 l       .debug_str	00000000 
0001bc42 l       .debug_str	00000000 
0001ef54 l       .debug_str	00000000 
0001efaf l       .debug_str	00000000 
0001f012 l       .debug_str	00000000 
0001f02e l       .debug_str	00000000 
0001f08e l       .debug_str	00000000 
0001f0ee l       .debug_str	00000000 
0001f152 l       .debug_str	00000000 
0001f16d l       .debug_str	00000000 
0001f1d1 l       .debug_str	00000000 
0001f1dc l       .debug_str	00000000 
0001f246 l       .debug_str	00000000 
0001f255 l       .debug_str	00000000 
0001f2c4 l       .debug_str	00000000 
0001f2dc l       .debug_str	00000000 
0001f34c l       .debug_str	00000000 
0001f365 l       .debug_str	00000000 
0001f3d0 l       .debug_str	00000000 
0001f3e5 l       .debug_str	00000000 
0001f455 l       .debug_str	00000000 
0001f46a l       .debug_str	00000000 
0001f4da l       .debug_str	00000000 
0001f4ec l       .debug_str	00000000 
00005059 l       .debug_str	00000000 
0001f55d l       .debug_str	00000000 
0001f5ce l       .debug_str	00000000 
0001f5e4 l       .debug_str	00000000 
0001f5f6 l       .debug_str	00000000 
0001f662 l       .debug_str	00000000 
0001f674 l       .debug_str	00000000 
0001f6e0 l       .debug_str	00000000 
0001f6ef l       .debug_str	00000000 
0001f757 l       .debug_str	00000000 
0001f761 l       .debug_str	00000000 
0001f7d5 l       .debug_str	00000000 
00002be0 l       .debug_str	00000000 
0001f7e0 l       .debug_str	00000000 
0001f858 l       .debug_str	00000000 
0001f871 l       .debug_str	00000000 
0001f8e9 l       .debug_str	00000000 
0001f97f l       .debug_str	00000000 
0001f99b l       .debug_str	00000000 
0001fa31 l       .debug_str	00000000 
0001fac7 l       .debug_str	00000000 
0001fb5d l       .debug_str	00000000 
00016086 l       .debug_str	00000000 
0001fbd2 l       .debug_str	00000000 
0001fc46 l       .debug_str	00000000 
0001fcbf l       .debug_str	00000000 
0001fd3e l       .debug_str	00000000 
0001fd4f l       .debug_str	00000000 
0001fdcf l       .debug_str	00000000 
0001fe31 l       .debug_str	00000000 
0002138f l       .debug_str	00000000 
0001fe82 l       .debug_str	00000000 
0001fea4 l       .debug_str	00000000 
0001fed1 l       .debug_str	00000000 
0001ff00 l       .debug_str	00000000 
0001ff22 l       .debug_str	00000000 
0001ff49 l       .debug_str	00000000 
0001ff72 l       .debug_str	00000000 
0001ffa4 l       .debug_str	00000000 
00011dc5 l       .debug_str	00000000 
0001fff4 l       .debug_str	00000000 
0002003a l       .debug_str	00000000 
0002004d l       .debug_str	00000000 
000200a1 l       .debug_str	00000000 
00020113 l       .debug_str	00000000 
00020185 l       .debug_str	00000000 
000201f7 l       .debug_str	00000000 
00020246 l       .debug_str	00000000 
00020274 l       .debug_str	00000000 
0002027f l       .debug_str	00000000 
000202d9 l       .debug_str	00000000 
00020351 l       .debug_str	00000000 
000203c9 l       .debug_str	00000000 
0002041e l       .debug_str	00000000 
00020453 l       .debug_str	00000000 
0000bb44 l       .debug_str	00000000 
0002047e l       .debug_str	00000000 
0003fcb8 l       .debug_str	00000000 
000204ad l       .debug_str	00000000 
000204dd l       .debug_str	00000000 
000204f5 l       .debug_str	00000000 
00020526 l       .debug_str	00000000 
00020558 l       .debug_str	00000000 
00020597 l       .debug_str	00000000 
000205aa l       .debug_str	00000000 
000205e2 l       .debug_str	00000000 
000205ee l       .debug_str	00000000 
0002061e l       .debug_str	00000000 
0002064f l       .debug_str	00000000 
00020655 l       .debug_str	00000000 
00020682 l       .debug_str	00000000 
000206b3 l       .debug_str	00000000 
000206e6 l       .debug_str	00000000 
00020700 l       .debug_str	00000000 
00020734 l       .debug_str	00000000 
00020767 l       .debug_str	00000000 
00059f92 l       .debug_str	00000000 
000207b4 l       .debug_str	00000000 
000207fd l       .debug_str	00000000 
00059f75 l       .debug_str	00000000 
00020848 l       .debug_str	00000000 
00020870 l       .debug_str	00000000 
000208b6 l       .debug_str	00000000 
000208bc l       .debug_str	00000000 
000208ea l       .debug_str	00000000 
00020906 l       .debug_str	00000000 
00020933 l       .debug_str	00000000 
00020943 l       .debug_str	00000000 
0002099b l       .debug_str	00000000 
000209f4 l       .debug_str	00000000 
00020a17 l       .debug_str	00000000 
00020a46 l       .debug_str	00000000 
00020a58 l       .debug_str	00000000 
00020a8b l       .debug_str	00000000 
00020aa1 l       .debug_str	00000000 
00020aee l       .debug_str	00000000 
00020b41 l       .debug_str	00000000 
00020b74 l       .debug_str	00000000 
00020b84 l       .debug_str	00000000 
00020bda l       .debug_str	00000000 
00020c34 l       .debug_str	00000000 
00020c82 l       .debug_str	00000000 
00020cd4 l       .debug_str	00000000 
00020d29 l       .debug_str	00000000 
00020d79 l       .debug_str	00000000 
00020dcd l       .debug_str	00000000 
00020e24 l       .debug_str	00000000 
00020e7a l       .debug_str	00000000 
00020ed1 l       .debug_str	00000000 
00020f1d l       .debug_str	00000000 
00020f65 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00020f9a l       .debug_str	00000000 
00020fc6 l       .debug_str	00000000 
00020fe2 l       .debug_str	00000000 
00020fef l       .debug_str	00000000 
00020ffd l       .debug_str	00000000 
00021002 l       .debug_str	00000000 
00021009 l       .debug_str	00000000 
00021020 l       .debug_str	00000000 
00021036 l       .debug_str	00000000 
0000bfba l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00021046 l       .debug_str	00000000 
0005b1de l       .debug_str	00000000 
00021069 l       .debug_str	00000000 
0005af84 l       .debug_str	00000000 
0002108b l       .debug_str	00000000 
0001a8ce l       .debug_str	00000000 
0002108a l       .debug_str	00000000 
00015669 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00021091 l       .debug_str	00000000 
000210e4 l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
00021105 l       .debug_str	00000000 
0000c3f4 l       .debug_str	00000000 
0002110a l       .debug_str	00000000 
0001a8e5 l       .debug_str	00000000 
0002111e l       .debug_str	00000000 
00021132 l       .debug_str	00000000 
0002113b l       .debug_str	00000000 
00021146 l       .debug_str	00000000 
00021158 l       .debug_str	00000000 
0002116c l       .debug_str	00000000 
0002117d l       .debug_str	00000000 
00021197 l       .debug_str	00000000 
000211c7 l       .debug_str	00000000 
000211e2 l       .debug_str	00000000 
00003b44 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00017df3 l       .debug_str	00000000 
00017e2d l       .debug_str	00000000 
00017e66 l       .debug_str	00000000 
00017e75 l       .debug_str	00000000 
00017eb8 l       .debug_str	00000000 
0005c4af l       .debug_str	00000000 
00038e3a l       .debug_str	00000000 
0005ded4 l       .debug_str	00000000 
00021202 l       .debug_str	00000000 
00021221 l       .debug_str	00000000 
00060404 l       .debug_str	00000000 
00021244 l       .debug_str	00000000 
0005b1fd l       .debug_str	00000000 
00014760 l       .debug_str	00000000 
0002124a l       .debug_str	00000000 
0000c5ea l       .debug_str	00000000 
00021252 l       .debug_str	00000000 
0005bdb6 l       .debug_str	00000000 
000615a8 l       .debug_str	00000000 
00017d45 l       .debug_str	00000000 
0005c825 l       .debug_str	00000000 
0000bb38 l       .debug_str	00000000 
0000bb4c l       .debug_str	00000000 
00018010 l       .debug_str	00000000 
0000bb55 l       .debug_str	00000000 
0000bb60 l       .debug_str	00000000 
0000bb6b l       .debug_str	00000000 
0002125a l       .debug_str	00000000 
0000bc07 l       .debug_str	00000000 
0000bc17 l       .debug_str	00000000 
0000bc22 l       .debug_str	00000000 
0005aa62 l       .debug_str	00000000 
00021279 l       .debug_str	00000000 
00021298 l       .debug_str	00000000 
000212aa l       .debug_str	00000000 
0001868a l       .debug_str	00000000 
00013161 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0000350f l       .debug_str	00000000 
00061b15 l       .debug_str	00000000 
0005c6d0 l       .debug_str	00000000 
000377d4 l       .debug_str	00000000 
0002131c l       .debug_str	00000000 
0001bfb7 l       .debug_str	00000000 
0002132e l       .debug_str	00000000 
000603cb l       .debug_str	00000000 
00021342 l       .debug_str	00000000 
00021358 l       .debug_str	00000000 
00021368 l       .debug_str	00000000 
00002faf l       .debug_str	00000000 
0002137a l       .debug_str	00000000 
00021374 l       .debug_str	00000000 
00021389 l       .debug_str	00000000 
000213a0 l       .debug_str	00000000 
0002139f l       .debug_str	00000000 
0001800c l       .debug_str	00000000 
00018017 l       .debug_str	00000000 
00011e46 l       .debug_str	00000000 
0001aa58 l       .debug_str	00000000 
000213b8 l       .debug_str	00000000 
000213c3 l       .debug_str	00000000 
000213ce l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001bd7a l       .debug_str	00000000 
0001bdcc l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00059eda l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
0001be13 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001be1a l       .debug_str	00000000 
0001d156 l       .debug_str	00000000 
00021182 l       .debug_str	00000000 
0001a8ea l       .debug_str	00000000 
0001be23 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
000208b7 l       .debug_str	00000000 
0001be2a l       .debug_str	00000000 
0001be4d l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
000146ee l       .debug_str	00000000 
000146f3 l       .debug_str	00000000 
00005a83 l       .debug_str	00000000 
00014720 l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002120f l       .debug_str	00000000 
00014775 l       .debug_str	00000000 
0001be53 l       .debug_str	00000000 
0001be75 l       .debug_str	00000000 
0001be8a l       .debug_str	00000000 
0001bebc l       .debug_str	00000000 
0001becc l       .debug_str	00000000 
0001bef9 l       .debug_str	00000000 
0001bf0a l       .debug_str	00000000 
0001bf38 l       .debug_str	00000000 
0001bf4a l       .debug_str	00000000 
00021128 l       .debug_str	00000000 
0002136d l       .debug_str	00000000 
0000cd92 l       .debug_str	00000000 
0001bf79 l       .debug_str	00000000 
00021140 l       .debug_str	00000000 
0000358c l       .debug_str	00000000 
00017a14 l       .debug_str	00000000 
000139f0 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
000347a6 l       .debug_str	00000000 
000139f5 l       .debug_str	00000000 
00021177 l       .debug_str	00000000 
0001bfa0 l       .debug_str	00000000 
00021163 l       .debug_str	00000000 
0002115d l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00039894 l       .debug_str	00000000 
0005cf7d l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005abef l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
000211cc l       .debug_str	00000000 
000211ab l       .debug_str	00000000 
0002119c l       .debug_str	00000000 
000211f6 l       .debug_str	00000000 
000211e7 l       .debug_str	00000000 
0001bfa7 l       .debug_str	00000000 
0001bfb0 l       .debug_str	00000000 
0005abe1 l       .debug_str	00000000 
00059eae l       .debug_str	00000000 
00021151 l       .debug_str	00000000 
0002114b l       .debug_str	00000000 
00021171 l       .debug_str	00000000 
00021137 l       .debug_str	00000000 
0005eb65 l       .debug_str	00000000 
00035b59 l       .debug_str	00000000 
00015086 l       .debug_str	00000000 
0001508b l       .debug_str	00000000 
00015091 l       .debug_str	00000000 
000182ec l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
00033e59 l       .debug_str	00000000 
0005f0ad l       .debug_str	00000000 
0001bfbc l       .debug_str	00000000 
000146fa l       .debug_str	00000000 
00014702 l       .debug_str	00000000 
00012108 l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
000120de l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
00012004 l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
000120a0 l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
00012132 l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
00012142 l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
000120c2 l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
000120ce l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
000122f6 l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
0001215c l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
00012184 l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
20004a68 l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000f0 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
00011ffa l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
0001fe74 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
00012152 l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
00011ff0 l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
00011d86 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
00011dbe l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
00011dd4 l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
00011de4 l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
00011e88 l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
0001231c l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
000123c6 l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
00012308 l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
00011f54 l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
00021a2c l       .debug_str	00000000 
0001527f l       .debug_str	00000000 
0001a969 l       .debug_str	00000000 
00021478 l       .debug_str	00000000 
000214ad l       .debug_str	00000000 
0000403f l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
00013166 l       .debug_str	00000000 
0005faf0 l       .debug_str	00000000 
000214b9 l       .debug_str	00000000 
000214f1 l       .debug_str	00000000 
0002150b l       .debug_str	00000000 
00021515 l       .debug_str	00000000 
0002151d l       .debug_str	00000000 
00021525 l       .debug_str	00000000 
00021561 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00021574 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
0002157c l       .debug_str	00000000 
000215b4 l       .debug_str	00000000 
000150fc l       .debug_str	00000000 
000215bc l       .debug_str	00000000 
000215f4 l       .debug_str	00000000 
000215fc l       .debug_str	00000000 
00021634 l       .debug_str	00000000 
0002164e l       .debug_str	00000000 
00021657 l       .debug_str	00000000 
0002168f l       .debug_str	00000000 
00021698 l       .debug_str	00000000 
000216d0 l       .debug_str	00000000 
000153d1 l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
00021758 l       .debug_str	00000000 
000217a0 l       .debug_str	00000000 
000217ab l       .debug_str	00000000 
0001ade9 l       .debug_str	00000000 
0000cead l       .debug_str	00000000 
000217e9 l       .debug_str	00000000 
0001cc6f l       .debug_str	00000000 
00021812 l       .debug_str	00000000 
00021837 l       .debug_str	00000000 
00017dec l       .debug_str	00000000 
0001cd65 l       .debug_str	00000000 
00021896 l       .debug_str	00000000 
0001cdb7 l       .debug_str	00000000 
000218be l       .debug_str	00000000 
000218ef l       .debug_str	00000000 
000218fb l       .debug_str	00000000 
0002195a l       .debug_str	00000000 
000031f6 l       .debug_str	00000000 
0002198c l       .debug_str	00000000 
000219d4 l       .debug_str	00000000 
0000bc11 l       .debug_str	00000000 
000219e1 l       .debug_str	00000000 
00021a3c l       .debug_str	00000000 
00021a4a l       .debug_str	00000000 
0001cfdf l       .debug_str	00000000 
0001d1d9 l       .debug_str	00000000 
0000f17b l       .debug_str	00000000 
00021a92 l       .debug_str	00000000 
0001d225 l       .debug_str	00000000 
00021acd l       .debug_str	00000000 
00021b04 l       .debug_str	00000000 
00021b1d l       .debug_str	00000000 
00021b29 l       .debug_str	00000000 
00015f20 l       .debug_str	00000000 
00021b7b l       .debug_str	00000000 
00015f90 l       .debug_str	00000000 
00021bd0 l       .debug_str	00000000 
00021b0a l       .debug_str	00000000 
00021c03 l       .debug_str	00000000 
0001b547 l       .debug_str	00000000 
00021c49 l       .debug_str	00000000 
00015eb0 l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
0005d3aa l       .debug_str	00000000 
00002fda l       .debug_str	00000000 
00011333 l       .debug_str	00000000 
00024264 l       .debug_str	00000000 
00021c92 l       .debug_str	00000000 
00021d07 l       .debug_str	00000000 
00021d34 l       .debug_str	00000000 
0001b867 l       .debug_str	00000000 
00021dc0 l       .debug_str	00000000 
00021e43 l       .debug_str	00000000 
00021e72 l       .debug_str	00000000 
00011dc5 l       .debug_str	00000000 
00021ebf l       .debug_str	00000000 
00021eef l       .debug_str	00000000 
00021f3d l       .debug_str	00000000 
00021f6d l       .debug_str	00000000 
00021fbb l       .debug_str	00000000 
00021feb l       .debug_str	00000000 
00022039 l       .debug_str	00000000 
0002206a l       .debug_str	00000000 
000220b9 l       .debug_str	00000000 
000220ea l       .debug_str	00000000 
00022139 l       .debug_str	00000000 
00022169 l       .debug_str	00000000 
00022171 l       .debug_str	00000000 
000221a1 l       .debug_str	00000000 
000221a9 l       .debug_str	00000000 
000221e7 l       .debug_str	00000000 
000221fc l       .debug_str	00000000 
0000c387 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000b07f l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005b1de l       .debug_str	00000000 
0005af84 l       .debug_str	00000000 
0002108b l       .debug_str	00000000 
0001a8ce l       .debug_str	00000000 
00015669 l       .debug_str	00000000 
00022228 l       .debug_str	00000000 
0000c3f4 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
0005aa33 l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
00017f11 l       .debug_str	00000000 
0002227e l       .debug_str	00000000 
000152b4 l       .debug_str	00000000 
0002227d l       .debug_str	00000000 
00022281 l       .debug_str	00000000 
0002228b l       .debug_str	00000000 
00002f9c l       .debug_str	00000000 
00002fa5 l       .debug_str	00000000 
0005cf6b l       .debug_str	00000000 
00002faf l       .debug_str	00000000 
00002fd0 l       .debug_str	00000000 
00022291 l       .debug_str	00000000 
00022295 l       .debug_str	00000000 
0002156f l       .debug_str	00000000 
0002229a l       .debug_str	00000000 
00022299 l       .debug_str	00000000 
0002229d l       .debug_str	00000000 
000222a1 l       .debug_str	00000000 
000222a6 l       .debug_str	00000000 
000222a5 l       .debug_str	00000000 
000222a9 l       .debug_str	00000000 
000222ad l       .debug_str	00000000 
0005aa62 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000213d9 l       .debug_str	00000000 
0002142e l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005eb65 l       .debug_str	00000000 
00035b59 l       .debug_str	00000000 
00015086 l       .debug_str	00000000 
0001508b l       .debug_str	00000000 
00015091 l       .debug_str	00000000 
000182ec l       .debug_str	00000000 
00005126 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0001509f l       .debug_str	00000000 
00038a4a l       .debug_str	00000000 
000337b9 l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005ed81 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039894 l       .debug_str	00000000 
0005cf7d l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005abef l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
0000f143 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000c42d l       .debug_str	00000000 
00012446 l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
0002108b l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
0001a8ea l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005eb65 l       .debug_str	00000000 
000337b9 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000222b1 l       .debug_str	00000000 
00034067 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
00022312 l       .debug_str	00000000 
00014685 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
00022375 l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
000228da l       .debug_str	00000000 
00022945 l       .debug_str	00000000 
0002298b l       .debug_str	00000000 
000229fd l       .debug_str	00000000 
000051cc l       .debug_str	00000000 
00022bf4 l       .debug_str	00000000 
00022c66 l       .debug_str	00000000 
00022cb0 l       .debug_str	00000000 
00022cfa l       .debug_str	00000000 
00022ef9 l       .debug_str	00000000 
00022f35 l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
00005117 l       .debug_str	00000000 
00022f7a l       .debug_str	00000000 
00022fb7 l       .debug_str	00000000 
000231aa l       .debug_str	00000000 
000231e7 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002322d l       .debug_str	00000000 
00023433 l       .debug_str	00000000 
0002348c l       .debug_str	00000000 
0002368e l       .debug_str	00000000 
0002108b l       .debug_str	00000000 
00002b81 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7d8 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00006f6f l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
000061e3 l       .debug_str	00000000 
00006f8b l       .debug_str	00000000 
00006fd0 l       .debug_str	00000000 
0000703e l       .debug_str	00000000 
000070d5 l       .debug_str	00000000 
00007195 l       .debug_str	00000000 
0000727e l       .debug_str	00000000 
00007390 l       .debug_str	00000000 
000074cb l       .debug_str	00000000 
0000762f l       .debug_str	00000000 
000077bc l       .debug_str	00000000 
00007972 l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
00007b51 l       .debug_str	00000000 
00007b54 l       .debug_str	00000000 
00007ba4 l       .debug_str	00000000 
00007c01 l       .debug_str	00000000 
00007c55 l       .debug_str	00000000 
00007ccc l       .debug_str	00000000 
00007d50 l       .debug_str	00000000 
00007dcb l       .debug_str	00000000 
00007e69 l       .debug_str	00000000 
00007f14 l       .debug_str	00000000 
00007fb6 l       .debug_str	00000000 
0000807b l       .debug_str	00000000 
0000814d l       .debug_str	00000000 
00008216 l       .debug_str	00000000 
00008302 l       .debug_str	00000000 
000083fb l       .debug_str	00000000 
000084eb l       .debug_str	00000000 
000085fe l       .debug_str	00000000 
0000871e l       .debug_str	00000000 
00008835 l       .debug_str	00000000 
0000896f l       .debug_str	00000000 
00008ab6 l       .debug_str	00000000 
00008bf4 l       .debug_str	00000000 
00008d55 l       .debug_str	00000000 
00008ec3 l       .debug_str	00000000 
00009028 l       .debug_str	00000000 
000091b0 l       .debug_str	00000000 
00009345 l       .debug_str	00000000 
000094d1 l       .debug_str	00000000 
00009680 l       .debug_str	00000000 
0000983c l       .debug_str	00000000 
000099ef l       .debug_str	00000000 
00009bc5 l       .debug_str	00000000 
00009da8 l       .debug_str	00000000 
00009f82 l       .debug_str	00000000 
0000a17d l       .debug_str	00000000 
0000a395 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
00031d07 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023241 l       .debug_str	00000000 
0000a830 l       .debug_str	00000000 
0000a87e l       .debug_str	00000000 
0000a8e9 l       .debug_str	00000000 
00031c93 l       .debug_str	00000000 
00023447 l       .debug_str	00000000 
000223dd l       .debug_str	00000000 
000225cf l       .debug_str	00000000 
00022637 l       .debug_str	00000000 
0002267c l       .debug_str	00000000 
000226e7 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
00023734 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00001f97 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00014688 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000236e3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
0001a8d6 l       .debug_str	00000000 
0000bfc2 l       .debug_str	00000000 
0000bfc1 l       .debug_str	00000000 
0001a8ea l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ed81 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00023756 l       .debug_str	00000000 
000237b2 l       .debug_str	00000000 
0002380f l       .debug_str	00000000 
0002386c l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
00021140 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002108b l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0000ac21 l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
00023a36 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005eb65 l       .debug_str	00000000 
000337b9 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00035b59 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
000238c9 l       .debug_str	00000000 
0002393a l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00023946 l       .debug_str	00000000 
000167b6 l       .debug_str	00000000 
000239b7 l       .debug_str	00000000 
00023a28 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
00023ef4 l       .debug_str	00000000 
00023e99 l       .debug_str	00000000 
00023eac l       .debug_str	00000000 
00023eeb l       .debug_str	00000000 
00023f06 l       .debug_str	00000000 
00023f3e l       .debug_str	00000000 
00023f52 l       .debug_str	00000000 
00023f7e l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
00002f9c l       .debug_str	00000000 
0001a8d6 l       .debug_str	00000000 
00002fa5 l       .debug_str	00000000 
000603cb l       .debug_str	00000000 
00002faf l       .debug_str	00000000 
0000bfae l       .debug_str	00000000 
00002fd0 l       .debug_str	00000000 
00002fd5 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039894 l       .debug_str	00000000 
0005cf7d l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005abef l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
000211cc l       .debug_str	00000000 
0001a8ea l       .debug_str	00000000 
0000bfba l       .debug_str	00000000 
0005b1fd l       .debug_str	00000000 
000603ca l       .debug_str	00000000 
00023f87 l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
0001868a l       .debug_str	00000000 
00023f8b l       .debug_str	00000000 
0005f8f8 l       .debug_str	00000000 
000061a3 l       .debug_str	00000000 
000061ab l       .debug_str	00000000 
000061b4 l       .debug_str	00000000 
000061c2 l       .debug_str	00000000 
000061c9 l       .debug_str	00000000 
00005e49 l       .debug_str	00000000 
00005e59 l       .debug_str	00000000 
00005e62 l       .debug_str	00000000 
00005e70 l       .debug_str	00000000 
00005e7e l       .debug_str	00000000 
00005e8a l       .debug_str	00000000 
00006098 l       .debug_str	00000000 
00005e96 l       .debug_str	00000000 
00005ea5 l       .debug_str	00000000 
00005ead l       .debug_str	00000000 
00005ec6 l       .debug_str	00000000 
00005ed7 l       .debug_str	00000000 
00005edf l       .debug_str	00000000 
00005f12 l       .debug_str	00000000 
00005ef9 l       .debug_str	00000000 
00005f1e l       .debug_str	00000000 
0000350f l       .debug_str	00000000 
00005f50 l       .debug_str	00000000 
00005f37 l       .debug_str	00000000 
00005f8a l       .debug_str	00000000 
00005f7d l       .debug_str	00000000 
00005f64 l       .debug_str	00000000 
000061d0 l       .debug_str	00000000 
0000622f l       .debug_str	00000000 
000061d8 l       .debug_str	00000000 
000061f3 l       .debug_str	00000000 
00006227 l       .debug_str	00000000 
0000620e l       .debug_str	00000000 
0005e9d6 l       .debug_str	00000000 
0004d023 l       .debug_str	00000000 
00024b32 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
0005c1e8 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
00023f93 l       .debug_str	00000000 
0005fa2c l       .debug_str	00000000 
0005dd6c l       .debug_str	00000000 
0005bc5e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005d98f l       .debug_str	00000000 
0000c5ca l       .debug_str	00000000 
0005afa1 l       .debug_str	00000000 
0000c5d7 l       .debug_str	00000000 
0000c5db l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c5e5 l       .debug_str	00000000 
0000c5f0 l       .debug_str	00000000 
0000c5fa l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
0002427c l       .debug_str	00000000 
00023a3d l       .debug_str	00000000 
00023a6e l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7d8 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00006f6f l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
0000a830 l       .debug_str	00000000 
0000a87e l       .debug_str	00000000 
0000a8e9 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
00031c93 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023447 l       .debug_str	00000000 
00023a7a l       .debug_str	00000000 
00023aaa l       .debug_str	00000000 
000061e3 l       .debug_str	00000000 
00006f8b l       .debug_str	00000000 
00006fd0 l       .debug_str	00000000 
0000703e l       .debug_str	00000000 
000070d5 l       .debug_str	00000000 
00007195 l       .debug_str	00000000 
0000727e l       .debug_str	00000000 
00007390 l       .debug_str	00000000 
000074cb l       .debug_str	00000000 
0000762f l       .debug_str	00000000 
000077bc l       .debug_str	00000000 
00007972 l       .debug_str	00000000 
00007b51 l       .debug_str	00000000 
00007b54 l       .debug_str	00000000 
00007ba4 l       .debug_str	00000000 
00007c01 l       .debug_str	00000000 
00007c55 l       .debug_str	00000000 
00007ccc l       .debug_str	00000000 
00007d50 l       .debug_str	00000000 
00007dcb l       .debug_str	00000000 
00007e69 l       .debug_str	00000000 
00007f14 l       .debug_str	00000000 
00007fb6 l       .debug_str	00000000 
0000807b l       .debug_str	00000000 
0000814d l       .debug_str	00000000 
00008216 l       .debug_str	00000000 
00008302 l       .debug_str	00000000 
000083fb l       .debug_str	00000000 
000084eb l       .debug_str	00000000 
000085fe l       .debug_str	00000000 
0000871e l       .debug_str	00000000 
00008835 l       .debug_str	00000000 
0000896f l       .debug_str	00000000 
00008ab6 l       .debug_str	00000000 
00008bf4 l       .debug_str	00000000 
00008d55 l       .debug_str	00000000 
00008ec3 l       .debug_str	00000000 
00009028 l       .debug_str	00000000 
000091b0 l       .debug_str	00000000 
00009345 l       .debug_str	00000000 
000094d1 l       .debug_str	00000000 
00009680 l       .debug_str	00000000 
0000983c l       .debug_str	00000000 
000099ef l       .debug_str	00000000 
00009bc5 l       .debug_str	00000000 
00009da8 l       .debug_str	00000000 
00009f82 l       .debug_str	00000000 
0000a17d l       .debug_str	00000000 
0000a395 l       .debug_str	00000000 
00031d07 l       .debug_str	00000000 
00023241 l       .debug_str	00000000 
00023ab7 l       .debug_str	00000000 
00023ae8 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000429b2 l       .debug_str	00000000 
00006e50 l       .debug_str	00000000 
00003560 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f86f l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005a2b4 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
000034dc l       .debug_str	00000000 
000606aa l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
00006f33 l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00006dd4 l       .debug_str	00000000 
0004f957 l       .debug_str	00000000 
00006e59 l       .debug_str	00000000 
00006e64 l       .debug_str	00000000 
00023af0 l       .debug_str	00000000 
00023b1b l       .debug_str	00000000 
00023b2c l       .debug_str	00000000 
00023b61 l       .debug_str	00000000 
000063d4 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0000608f l       .debug_str	00000000 
00006097 l       .debug_str	00000000 
00005f5b l       .debug_str	00000000 
000060a1 l       .debug_str	00000000 
00006343 l       .debug_str	00000000 
0000632a l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00006325 l       .debug_str	00000000 
00006352 l       .debug_str	00000000 
000063dc l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005dbf9 l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000063e2 l       .debug_str	00000000 
00023b70 l       .debug_str	00000000 
00023ba3 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
00023bb3 l       .debug_str	00000000 
00023be7 l       .debug_str	00000000 
00023bf0 l       .debug_str	00000000 
00023c1c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00023c2b l       .debug_str	00000000 
00023c5e l       .debug_str	00000000 
00023c6b l       .debug_str	00000000 
00023c77 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00001f97 l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00023ca8 l       .debug_str	00000000 
00023cdd l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
00004d98 l       .debug_str	00000000 
00023cee l       .debug_str	00000000 
00023d20 l       .debug_str	00000000 
00023d2e l       .debug_str	00000000 
00023d6c l       .debug_str	00000000 
00023d86 l       .debug_str	00000000 
00023dc1 l       .debug_str	00000000 
00023dd8 l       .debug_str	00000000 
00023e14 l       .debug_str	00000000 
00023e2c l       .debug_str	00000000 
00023e62 l       .debug_str	00000000 
20004a70 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20004a78 l     O .bss	00000804 _ZN6mynewt3spi12PENDING_DATA17h17892bfe7f609123E
20005704 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
000131be l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
2000528c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
20005304 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
200052a4 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20005284 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
00013452 l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
0001363c l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
00013c5a l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
00013924 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
2000527c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
200052b4 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
00013d82 l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
000200a0 l     O .text	00000021 str.0
000200e0 l     O .text	0000001c str.1
00020130 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
00039894 l       .debug_str	00000000 
0005cf7d l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005abef l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
000211cc l       .debug_str	00000000 
0002428d l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
00024293 l       .debug_str	00000000 
0000eef1 l       .debug_str	00000000 
0005dd6c l       .debug_str	00000000 
0005bc5e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00001f97 l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c5d7 l       .debug_str	00000000 
0000c65c l       .debug_str	00000000 
00004966 l       .debug_str	00000000 
00024262 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0005adc1 l       .debug_str	00000000 
000242a5 l       .debug_str	00000000 
0000ef03 l       .debug_str	00000000 
00023f9e l       .debug_str	00000000 
0003fcb8 l       .debug_str	00000000 
00023fc9 l       .debug_str	00000000 
00060404 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
00004d98 l       .debug_str	00000000 
00023ff5 l       .debug_str	00000000 
00061700 l       .debug_str	00000000 
00024066 l       .debug_str	00000000 
00024092 l       .debug_str	00000000 
000240bf l       .debug_str	00000000 
0002412b l       .debug_str	00000000 
00024133 l       .debug_str	00000000 
000241a0 l       .debug_str	00000000 
000241a9 l       .debug_str	00000000 
000241d6 l       .debug_str	00000000 
00023f7e l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00024250 l       .debug_str	00000000 
00024280 l       .debug_str	00000000 
0005afa1 l       .debug_str	00000000 
0000c5db l       .debug_str	00000000 
0000c5e5 l       .debug_str	00000000 
0000c5f0 l       .debug_str	00000000 
0000c5fa l       .debug_str	00000000 
0002427c l       .debug_str	00000000 
00024266 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
00002f9c l       .debug_str	00000000 
0001a8d6 l       .debug_str	00000000 
00002fa5 l       .debug_str	00000000 
00002faf l       .debug_str	00000000 
0000bfae l       .debug_str	00000000 
00002fd0 l       .debug_str	00000000 
00002fd5 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00020330 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
000061d8 l       .debug_str	00000000 
000061f3 l       .debug_str	00000000 
00006227 l       .debug_str	00000000 
000242aa l       .debug_str	00000000 
000242fc l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001164c l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000429b2 l       .debug_str	00000000 
000061a3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
000061ab l       .debug_str	00000000 
000061b4 l       .debug_str	00000000 
000061c2 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
000061c9 l       .debug_str	00000000 
00005e49 l       .debug_str	00000000 
00005e59 l       .debug_str	00000000 
00005e62 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00005e70 l       .debug_str	00000000 
00005e7e l       .debug_str	00000000 
00005e8a l       .debug_str	00000000 
00006098 l       .debug_str	00000000 
00005e96 l       .debug_str	00000000 
00005ea5 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00005ead l       .debug_str	00000000 
00005ec6 l       .debug_str	00000000 
00003560 l       .debug_str	00000000 
00005ed7 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00005edf l       .debug_str	00000000 
00005f12 l       .debug_str	00000000 
00005ef9 l       .debug_str	00000000 
00005f1e l       .debug_str	00000000 
0000350f l       .debug_str	00000000 
00005f50 l       .debug_str	00000000 
00005f37 l       .debug_str	00000000 
00005f5b l       .debug_str	00000000 
00005f8a l       .debug_str	00000000 
00005f7d l       .debug_str	00000000 
00005f64 l       .debug_str	00000000 
000061d0 l       .debug_str	00000000 
0000620e l       .debug_str	00000000 
0000622f l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000061e3 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
0002564c l       .debug_str	00000000 
0002486d l       .debug_str	00000000 
00015eb0 l       .debug_str	00000000 
000248b0 l       .debug_str	00000000 
00015f17 l       .debug_str	00000000 
0002490c l       .debug_str	00000000 
00015f87 l       .debug_str	00000000 
0002496b l       .debug_str	00000000 
00015f20 l       .debug_str	00000000 
000249bd l       .debug_str	00000000 
00024a12 l       .debug_str	00000000 
00024a68 l       .debug_str	00000000 
00024a96 l       .debug_str	00000000 
00024aa2 l       .debug_str	00000000 
00024ad4 l       .debug_str	00000000 
00024afb l       .debug_str	00000000 
00024b2d l       .debug_str	00000000 
00024b3d l       .debug_str	00000000 
00024b72 l       .debug_str	00000000 
00024b85 l       .debug_str	00000000 
00024bbb l       .debug_str	00000000 
00024bcf l       .debug_str	00000000 
00024c19 l       .debug_str	00000000 
00024c2a l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00024c66 l       .debug_str	00000000 
0005a2e0 l       .debug_str	00000000 
0005faf0 l       .debug_str	00000000 
00024ca4 l       .debug_str	00000000 
00024ce2 l       .debug_str	00000000 
00015346 l       .debug_str	00000000 
00024cef l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
00024cfd l       .debug_str	00000000 
00024d25 l       .debug_str	00000000 
00002e46 l       .debug_str	00000000 
00024d64 l       .debug_str	00000000 
00024d92 l       .debug_str	00000000 
00024d99 l       .debug_str	00000000 
00024e3c l       .debug_str	00000000 
00024e4a l       .debug_str	00000000 
000411c1 l       .debug_str	00000000 
00024ee2 l       .debug_str	00000000 
00024f7c l       .debug_str	00000000 
00011dc5 l       .debug_str	00000000 
00025034 l       .debug_str	00000000 
00034067 l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
00002fda l       .debug_str	00000000 
00011333 l       .debug_str	00000000 
00025097 l       .debug_str	00000000 
00025109 l       .debug_str	00000000 
00025133 l       .debug_str	00000000 
00025171 l       .debug_str	00000000 
00025184 l       .debug_str	00000000 
000251cf l       .debug_str	00000000 
0000cead l       .debug_str	00000000 
000251d8 l       .debug_str	00000000 
0002521a l       .debug_str	00000000 
000264db l       .debug_str	00000000 
00025254 l       .debug_str	00000000 
00025299 l       .debug_str	00000000 
000252b5 l       .debug_str	00000000 
000252f8 l       .debug_str	00000000 
0002530e l       .debug_str	00000000 
00025373 l       .debug_str	00000000 
000253d8 l       .debug_str	00000000 
00025413 l       .debug_str	00000000 
00025420 l       .debug_str	00000000 
00021b0a l       .debug_str	00000000 
00025453 l       .debug_str	00000000 
0000ad63 l       .debug_str	00000000 
00025499 l       .debug_str	00000000 
0001b547 l       .debug_str	00000000 
000254df l       .debug_str	00000000 
0000aff2 l       .debug_str	00000000 
00025526 l       .debug_str	00000000 
0002556f l       .debug_str	00000000 
000167b6 l       .debug_str	00000000 
00021140 l       .debug_str	00000000 
00017dec l       .debug_str	00000000 
000150fc l       .debug_str	00000000 
00013166 l       .debug_str	00000000 
000255e8 l       .debug_str	00000000 
0002562d l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00025685 l       .debug_str	00000000 
0000b087 l       .debug_str	00000000 
0002569d l       .debug_str	00000000 
000256d8 l       .debug_str	00000000 
000256fc l       .debug_str	00000000 
00025722 l       .debug_str	00000000 
0002575d l       .debug_str	00000000 
00025780 l       .debug_str	00000000 
000257a5 l       .debug_str	00000000 
000257e2 l       .debug_str	00000000 
000257f9 l       .debug_str	00000000 
00025836 l       .debug_str	00000000 
0002584d l       .debug_str	00000000 
00016bf1 l       .debug_str	00000000 
0002589e l       .debug_str	00000000 
000189d6 l       .debug_str	00000000 
000258f9 l       .debug_str	00000000 
0002595c l       .debug_str	00000000 
0002599e l       .debug_str	00000000 
00016eaa l       .debug_str	00000000 
00025a02 l       .debug_str	00000000 
0001b867 l       .debug_str	00000000 
00025a6f l       .debug_str	00000000 
0000b077 l       .debug_str	00000000 
00025ad1 l       .debug_str	00000000 
00025adf l       .debug_str	00000000 
00025b4a l       .debug_str	00000000 
00025b64 l       .debug_str	00000000 
00025b7a l       .debug_str	00000000 
00025be5 l       .debug_str	00000000 
00025bf5 l       .debug_str	00000000 
00025c61 l       .debug_str	00000000 
00025c73 l       .debug_str	00000000 
00025cdf l       .debug_str	00000000 
00025cf0 l       .debug_str	00000000 
00025d57 l       .debug_str	00000000 
00025d8f l       .debug_str	00000000 
00025df9 l       .debug_str	00000000 
00025e81 l       .debug_str	00000000 
00014bc5 l       .debug_str	00000000 
00025ef5 l       .debug_str	00000000 
00025f77 l       .debug_str	00000000 
00025f8e l       .debug_str	00000000 
00025fcc l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
000342d9 l       .debug_str	00000000 
00035b59 l       .debug_str	00000000 
00025fdf l       .debug_str	00000000 
00025fee l       .debug_str	00000000 
0002602c l       .debug_str	00000000 
0002603f l       .debug_str	00000000 
0002606b l       .debug_str	00000000 
00026074 l       .debug_str	00000000 
000260a0 l       .debug_str	00000000 
000260a9 l       .debug_str	00000000 
00026109 l       .debug_str	00000000 
00033d1a l       .debug_str	00000000 
0002615a l       .debug_str	00000000 
000261ab l       .debug_str	00000000 
00026208 l       .debug_str	00000000 
00026266 l       .debug_str	00000000 
0002654b l       .debug_str	00000000 
000262b7 l       .debug_str	00000000 
000262e0 l       .debug_str	00000000 
00026343 l       .debug_str	00000000 
00026354 l       .debug_str	00000000 
00026361 l       .debug_str	00000000 
00026376 l       .debug_str	00000000 
000263c7 l       .debug_str	00000000 
000263f0 l       .debug_str	00000000 
00026453 l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0002108b l       .debug_str	00000000 
00023a36 l       .debug_str	00000000 
000615a8 l       .debug_str	00000000 
0000c3f4 l       .debug_str	00000000 
00026470 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00039654 l       .debug_str	00000000 
0002156f l       .debug_str	00000000 
000185e9 l       .debug_str	00000000 
0005b1fd l       .debug_str	00000000 
00059fb4 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00060404 l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
00003b44 l       .debug_str	00000000 
00026491 l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
00005a83 l       .debug_str	00000000 
0000403f l       .debug_str	00000000 
00026495 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00024502 l       .debug_str	00000000 
000264a7 l       .debug_str	00000000 
000264ac l       .debug_str	00000000 
000264b1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00017db1 l       .debug_str	00000000 
000264d6 l       .debug_str	00000000 
00026512 l       .debug_str	00000000 
0005cf6b l       .debug_str	00000000 
0003e080 l       .debug_str	00000000 
00026528 l       .debug_str	00000000 
00026531 l       .debug_str	00000000 
00037685 l       .debug_str	00000000 
0005b050 l       .debug_str	00000000 
0004d297 l       .debug_str	00000000 
0002653a l       .debug_str	00000000 
0002653e l       .debug_str	00000000 
0003794b l       .debug_str	00000000 
0000bb38 l       .debug_str	00000000 
0000bb4c l       .debug_str	00000000 
00018010 l       .debug_str	00000000 
0000bb55 l       .debug_str	00000000 
0000bb60 l       .debug_str	00000000 
0001800c l       .debug_str	00000000 
00018017 l       .debug_str	00000000 
00011e46 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00026560 l       .debug_str	00000000 
0002655b l       .debug_str	00000000 
0005add1 l       .debug_str	00000000 
00026564 l       .debug_str	00000000 
00039422 l       .debug_str	00000000 
0002656d l       .debug_str	00000000 
00002fde l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0003bedc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00024321 l       .debug_str	00000000 
0002437b l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000ce8b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00033f84 l       .debug_str	00000000 
000243ca l       .debug_str	00000000 
00026482 l       .debug_str	00000000 
00026475 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ed81 l       .debug_str	00000000 
000243d2 l       .debug_str	00000000 
000243df l       .debug_str	00000000 
000243e8 l       .debug_str	00000000 
00059ece l       .debug_str	00000000 
00034350 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00015099 l       .debug_str	00000000 
0005eb65 l       .debug_str	00000000 
000337b9 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001164c l       .debug_str	00000000 
0000affb l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00035b33 l       .debug_str	00000000 
0000c42d l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b715 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
00005126 l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0000b004 l       .debug_str	00000000 
00015324 l       .debug_str	00000000 
00026522 l       .debug_str	00000000 
00004557 l       .debug_str	00000000 
0005aa33 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00014688 l       .debug_str	00000000 
0005cff9 l       .debug_str	00000000 
00014781 l       .debug_str	00000000 
000369ad l       .debug_str	00000000 
000130bc l       .debug_str	00000000 
0005af84 l       .debug_str	00000000 
00024264 l       .debug_str	00000000 
000264f6 l       .debug_str	00000000 
000140eb l       .debug_str	00000000 
000243f2 l       .debug_str	00000000 
00024430 l       .debug_str	00000000 
0001c048 l       .debug_str	00000000 
0005d3aa l       .debug_str	00000000 
00046bd8 l       .debug_str	00000000 
0006047e l       .debug_str	00000000 
0002443f l       .debug_str	00000000 
00015212 l       .debug_str	00000000 
00024468 l       .debug_str	00000000 
0001c0ba l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001c273 l       .debug_str	00000000 
000211f6 l       .debug_str	00000000 
0000ef2e l       .debug_str	00000000 
00002fc4 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
0002449a l       .debug_str	00000000 
000264c0 l       .debug_str	00000000 
0000512c l       .debug_str	00000000 
00002fe0 l       .debug_str	00000000 
000244a8 l       .debug_str	00000000 
000152ff l       .debug_str	00000000 
00015312 l       .debug_str	00000000 
0005f9fa l       .debug_str	00000000 
0000bc11 l       .debug_str	00000000 
0004b287 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005a069 l       .debug_str	00000000 
000244ea l       .debug_str	00000000 
000244ee l       .debug_str	00000000 
000244f9 l       .debug_str	00000000 
00024508 l       .debug_str	00000000 
00024550 l       .debug_str	00000000 
00024570 l       .debug_str	00000000 
0003a16e l       .debug_str	00000000 
000264a8 l       .debug_str	00000000 
000245bb l       .debug_str	00000000 
000264ad l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
00024606 l       .debug_str	00000000 
00023a28 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
00024677 l       .debug_str	00000000 
00015999 l       .debug_str	00000000 
000246a5 l       .debug_str	00000000 
0001cfdf l       .debug_str	00000000 
000246ed l       .debug_str	00000000 
0002471d l       .debug_str	00000000 
00024748 l       .debug_str	00000000 
00021b04 l       .debug_str	00000000 
00021b1d l       .debug_str	00000000 
0002477f l       .debug_str	00000000 
00015f90 l       .debug_str	00000000 
000247d0 l       .debug_str	00000000 
00015e04 l       .debug_str	00000000 
00024822 l       .debug_str	00000000 
00015e5b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0000f14a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00026579 l       .debug_str	00000000 
000265a2 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00026633 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000265af l       .debug_str	00000000 
00015212 l       .debug_str	00000000 
0000ce8b l       .debug_str	00000000 
0005f202 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000265d8 l       .debug_str	00000000 
0002662d l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000f169 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
000269a8 l       .debug_str	00000000 
00026810 l       .debug_str	00000000 
0002684c l       .debug_str	00000000 
00026868 l       .debug_str	00000000 
000268a4 l       .debug_str	00000000 
000268da l       .debug_str	00000000 
00026916 l       .debug_str	00000000 
00026921 l       .debug_str	00000000 
0002695d l       .debug_str	00000000 
0002696b l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
000269df l       .debug_str	00000000 
00026a1c l       .debug_str	00000000 
00026a2b l       .debug_str	00000000 
00026a68 l       .debug_str	00000000 
00026aab l       .debug_str	00000000 
00026ae8 l       .debug_str	00000000 
0000f14f l       .debug_str	00000000 
00026b1f l       .debug_str	00000000 
00026b5d l       .debug_str	00000000 
00026b94 l       .debug_str	00000000 
00026bd3 l       .debug_str	00000000 
00026c0c l       .debug_str	00000000 
00026c70 l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00026ca5 l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00026cc0 l       .debug_str	00000000 
00026d05 l       .debug_str	00000000 
00026d22 l       .debug_str	00000000 
00015334 l       .debug_str	00000000 
0001a972 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
000150fc l       .debug_str	00000000 
0000c5b8 l       .debug_str	00000000 
0000c859 l       .debug_str	00000000 
0000c864 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
0001a99a l       .debug_str	00000000 
00026637 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00026d31 l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
00026cb4 l       .debug_str	00000000 
0000c9c6 l       .debug_str	00000000 
0005ee45 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
000264ad l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
0000cb4b l       .debug_str	00000000 
00026671 l       .debug_str	00000000 
00026ccf l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000f169 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
00026d14 l       .debug_str	00000000 
0000f14a l       .debug_str	00000000 
0002668d l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0000efb2 l       .debug_str	00000000 
0000efbb l       .debug_str	00000000 
0000efc9 l       .debug_str	00000000 
0001aa00 l       .debug_str	00000000 
0000c676 l       .debug_str	00000000 
0000efe1 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
0000f86b l       .debug_str	00000000 
0000f876 l       .debug_str	00000000 
00002fe0 l       .debug_str	00000000 
00013166 l       .debug_str	00000000 
0005faf0 l       .debug_str	00000000 
0002669a l       .debug_str	00000000 
000266d3 l       .debug_str	00000000 
0002676e l       .debug_str	00000000 
000267c8 l       .debug_str	00000000 
00026804 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1i10ukgv8hgyc1v7
0005ed0e l       .debug_str	00000000 
000022ca l       .debug_str	00000000 
000022d5 l       .debug_str	00000000 
00027789 l       .debug_str	00000000 
000277f4 l       .debug_str	00000000 
00027925 l       .debug_str	00000000 
00027992 l       .debug_str	00000000 
00027a04 l       .debug_str	00000000 
0000247b l       .debug_str	00000000 
00027b12 l       .debug_str	00000000 
00027b84 l       .debug_str	00000000 
00027cb9 l       .debug_str	00000000 
00027d2b l       .debug_str	00000000 
00011076 l       .debug_str	00000000 
00027dfb l       .debug_str	00000000 
00027e45 l       .debug_str	00000000 
00027f82 l       .debug_str	00000000 
00027fbd l       .debug_str	00000000 
000280c5 l       .debug_str	00000000 
00028100 l       .debug_str	00000000 
0002822f l       .debug_str	00000000 
0002826a l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00026671 l       .debug_str	00000000 
00028334 l       .debug_str	00000000 
00028370 l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
0002843b l       .debug_str	00000000 
0002845b l       .debug_str	00000000 
00028497 l       .debug_str	00000000 
0002e3a2 l       .debug_str	00000000 
000285a0 l       .debug_str	00000000 
000285dd l       .debug_str	00000000 
000286e7 l       .debug_str	00000000 
00028724 l       .debug_str	00000000 
00028855 l       .debug_str	00000000 
000288d6 l       .debug_str	00000000 
00002fe0 l       .debug_str	00000000 
00029166 l       .debug_str	00000000 
00028a0b l       .debug_str	00000000 
00028a89 l       .debug_str	00000000 
00002907 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00028bb9 l       .debug_str	00000000 
00028c98 l       .debug_str	00000000 
00028db1 l       .debug_str	00000000 
00028ef1 l       .debug_str	00000000 
0002900e l       .debug_str	00000000 
00029152 l       .debug_str	00000000 
0002108b l       .debug_str	00000000 
00002b81 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7d8 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
0000d122 l       .debug_str	00000000 
0000d133 l       .debug_str	00000000 
0000d1a3 l       .debug_str	00000000 
0000d23d l       .debug_str	00000000 
0000d300 l       .debug_str	00000000 
0000d3ed l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
0000155a l       .debug_str	00000000 
000015aa l       .debug_str	00000000 
00001607 l       .debug_str	00000000 
00007b51 l       .debug_str	00000000 
0000d504 l       .debug_str	00000000 
0000d57b l       .debug_str	00000000 
0000d5ff l       .debug_str	00000000 
0000d67a l       .debug_str	00000000 
0000d718 l       .debug_str	00000000 
0000d7c3 l       .debug_str	00000000 
0000d865 l       .debug_str	00000000 
0000d92a l       .debug_str	00000000 
0000d9fc l       .debug_str	00000000 
0000dac5 l       .debug_str	00000000 
0000dbb1 l       .debug_str	00000000 
0000dcaa l       .debug_str	00000000 
0000dd9a l       .debug_str	00000000 
0000dead l       .debug_str	00000000 
0000dfcd l       .debug_str	00000000 
0000e0e4 l       .debug_str	00000000 
0000e21d l       .debug_str	00000000 
0000e373 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
0002d180 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00029022 l       .debug_str	00000000 
0000f24a l       .debug_str	00000000 
0000f35c l       .debug_str	00000000 
0000f48b l       .debug_str	00000000 
0002d048 l       .debug_str	00000000 
00028f05 l       .debug_str	00000000 
0000c9c6 l       .debug_str	00000000 
0005ee45 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
000264ad l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
0000cb4b l       .debug_str	00000000 
0000faed l       .debug_str	00000000 
0000fb1a l       .debug_str	00000000 
0000fb3b l       .debug_str	00000000 
0000fba2 l       .debug_str	00000000 
0000fc42 l       .debug_str	00000000 
00007b54 l       .debug_str	00000000 
00007ba4 l       .debug_str	00000000 
00007c01 l       .debug_str	00000000 
0000fd1c l       .debug_str	00000000 
0000fd93 l       .debug_str	00000000 
0000fe17 l       .debug_str	00000000 
0000fe92 l       .debug_str	00000000 
0000ff30 l       .debug_str	00000000 
0000ffdb l       .debug_str	00000000 
0002a571 l       .debug_str	00000000 
00029ca8 l       .debug_str	00000000 
00029fdf l       .debug_str	00000000 
0002cf4e l       .debug_str	00000000 
00028bcd l       .debug_str	00000000 
00026d73 l       .debug_str	00000000 
00026e01 l       .debug_str	00000000 
00005126 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000affb l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0000cb36 l       .debug_str	00000000 
00010ece l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
0000cd30 l       .debug_str	00000000 
00010eeb l       .debug_str	00000000 
00010f04 l       .debug_str	00000000 
00010fa5 l       .debug_str	00000000 
00026ed1 l       .debug_str	00000000 
00026f37 l       .debug_str	00000000 
00027041 l       .debug_str	00000000 
000270a7 l       .debug_str	00000000 
000271d8 l       .debug_str	00000000 
00027240 l       .debug_str	00000000 
0002730b l       .debug_str	00000000 
00027373 l       .debug_str	00000000 
0002747c l       .debug_str	00000000 
000274e4 l       .debug_str	00000000 
00027614 l       .debug_str	00000000 
0002767f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000203f0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
0002929b l       .debug_str	00000000 
000292e6 l       .debug_str	00000000 
000031f6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00021137 l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00039894 l       .debug_str	00000000 
0005cf7d l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005abef l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 24fd677mu7rr1lzm
00027e45 l       .debug_str	00000000 
0002b5a2 l       .debug_str	00000000 
0002b62b l       .debug_str	00000000 
0002b765 l       .debug_str	00000000 
0002b7ee l       .debug_str	00000000 
0002b901 l       .debug_str	00000000 
0002b98d l       .debug_str	00000000 
0002ba19 l       .debug_str	00000000 
0002bb2f l       .debug_str	00000000 
0002bbbb l       .debug_str	00000000 
0002bca9 l       .debug_str	00000000 
00028370 l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
0002843b l       .debug_str	00000000 
0002bd27 l       .debug_str	00000000 
00028497 l       .debug_str	00000000 
0002e3a2 l       .debug_str	00000000 
0002bda5 l       .debug_str	00000000 
000285dd l       .debug_str	00000000 
0002be24 l       .debug_str	00000000 
00028724 l       .debug_str	00000000 
0002bea3 l       .debug_str	00000000 
00026f37 l       .debug_str	00000000 
0002bf22 l       .debug_str	00000000 
000270a7 l       .debug_str	00000000 
0002bfa1 l       .debug_str	00000000 
0002c023 l       .debug_str	00000000 
000022d5 l       .debug_str	00000000 
0002c130 l       .debug_str	00000000 
0002c1b2 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
0002c297 l       .debug_str	00000000 
0002c319 l       .debug_str	00000000 
00011028 l       .debug_str	00000000 
0002c3e8 l       .debug_str	00000000 
0002c46a l       .debug_str	00000000 
0002c59e l       .debug_str	00000000 
0002c620 l       .debug_str	00000000 
0002c705 l       .debug_str	00000000 
0002c787 l       .debug_str	00000000 
0002c894 l       .debug_str	00000000 
0002c916 l       .debug_str	00000000 
0002ca4a l       .debug_str	00000000 
0002cacc l       .debug_str	00000000 
0002cb9b l       .debug_str	00000000 
0002cc1d l       .debug_str	00000000 
0002cd51 l       .debug_str	00000000 
0002cdd3 l       .debug_str	00000000 
0002cee0 l       .debug_str	00000000 
0002cf3c l       .debug_str	00000000 
0002d036 l       .debug_str	00000000 
0002d16e l       .debug_str	00000000 
00002b81 l       .debug_str	00000000 
0002d2cd l       .debug_str	00000000 
0002108b l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
00005126 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000affb l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00010df7 l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
0001a8e0 l       .debug_str	00000000 
00010e04 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
000615a8 l       .debug_str	00000000 
00002fde l       .debug_str	00000000 
00012a17 l       .debug_str	00000000 
00035b33 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0000b004 l       .debug_str	00000000 
00015324 l       .debug_str	00000000 
0002d3dd l       .debug_str	00000000 
0003fcb8 l       .debug_str	00000000 
0002d511 l       .debug_str	00000000 
0002d66c l       .debug_str	00000000 
0002d778 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00006f6f l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
000061e3 l       .debug_str	00000000 
00006f8b l       .debug_str	00000000 
00029318 l       .debug_str	00000000 
00029385 l       .debug_str	00000000 
0002941b l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
00007b51 l       .debug_str	00000000 
00007b54 l       .debug_str	00000000 
00007ba4 l       .debug_str	00000000 
00007c01 l       .debug_str	00000000 
0000fd1c l       .debug_str	00000000 
0000fd93 l       .debug_str	00000000 
0000fe17 l       .debug_str	00000000 
0000fe92 l       .debug_str	00000000 
0000ff30 l       .debug_str	00000000 
0000ffdb l       .debug_str	00000000 
000294da l       .debug_str	00000000 
0002959f l       .debug_str	00000000 
00029671 l       .debug_str	00000000 
0002973a l       .debug_str	00000000 
00029824 l       .debug_str	00000000 
0002992b l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
0002d2df l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
0000d122 l       .debug_str	00000000 
0000d133 l       .debug_str	00000000 
0000d1a3 l       .debug_str	00000000 
0000d23d l       .debug_str	00000000 
0000d300 l       .debug_str	00000000 
0000d3ed l       .debug_str	00000000 
0000155a l       .debug_str	00000000 
000015aa l       .debug_str	00000000 
00001607 l       .debug_str	00000000 
0000d504 l       .debug_str	00000000 
0000d57b l       .debug_str	00000000 
0000d5ff l       .debug_str	00000000 
0000d67a l       .debug_str	00000000 
0000d718 l       .debug_str	00000000 
0000d7c3 l       .debug_str	00000000 
0000d865 l       .debug_str	00000000 
0000d92a l       .debug_str	00000000 
0000d9fc l       .debug_str	00000000 
0000dac5 l       .debug_str	00000000 
0000dbb1 l       .debug_str	00000000 
0000dcaa l       .debug_str	00000000 
0000dd9a l       .debug_str	00000000 
0000dead l       .debug_str	00000000 
0000dfcd l       .debug_str	00000000 
0000e0e4 l       .debug_str	00000000 
0000e21d l       .debug_str	00000000 
0000e373 l       .debug_str	00000000 
0002d180 l       .debug_str	00000000 
0000f24a l       .debug_str	00000000 
0000f35c l       .debug_str	00000000 
0000f48b l       .debug_str	00000000 
0002d048 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0000c9c6 l       .debug_str	00000000 
0005ee45 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
000264ad l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
0000cb4b l       .debug_str	00000000 
0000faed l       .debug_str	00000000 
0000fb1a l       .debug_str	00000000 
0000fb3b l       .debug_str	00000000 
0000fba2 l       .debug_str	00000000 
0000fc42 l       .debug_str	00000000 
0002a571 l       .debug_str	00000000 
00029a31 l       .debug_str	00000000 
00029ab3 l       .debug_str	00000000 
00029ba1 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00029ca8 l       .debug_str	00000000 
00029c89 l       .debug_str	00000000 
00029fdf l       .debug_str	00000000 
00029d99 l       .debug_str	00000000 
00029dea l       .debug_str	00000000 
00029ed9 l       .debug_str	00000000 
00029fc1 l       .debug_str	00000000 
0002cf4e l       .debug_str	00000000 
0002a0cf l       .debug_str	00000000 
0002a14a l       .debug_str	00000000 
0002a234 l       .debug_str	00000000 
0002a318 l       .debug_str	00000000 
0002a424 l       .debug_str	00000000 
0002a470 l       .debug_str	00000000 
0002a55b l       .debug_str	00000000 
0002a645 l       .debug_str	00000000 
0000c7d8 l       .debug_str	00000000 
0002a74f l       .debug_str	00000000 
0002a850 l       .debug_str	00000000 
0002a8a6 l       .debug_str	00000000 
0002a9a4 l       .debug_str	00000000 
0002a9fa l       .debug_str	00000000 
0002ab47 l       .debug_str	00000000 
0002ab9d l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002acc3 l       .debug_str	00000000 
0002ad4a l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0000cb36 l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00011076 l       .debug_str	00000000 
0002ae1d l       .debug_str	00000000 
0002aea4 l       .debug_str	00000000 
000022ca l       .debug_str	00000000 
0000247b l       .debug_str	00000000 
0002afb5 l       .debug_str	00000000 
0002b03c l       .debug_str	00000000 
0002b174 l       .debug_str	00000000 
0002b1fc l       .debug_str	00000000 
0002b2d0 l       .debug_str	00000000 
0002b359 l       .debug_str	00000000 
0002b42e l       .debug_str	00000000 
0002b4b7 l       .debug_str	00000000 
00020470 l     O .text	00000021 str.0
000204b0 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 25lz0dio8kzdubcg
00017d4c l       .debug_str	00000000 
0005af84 l       .debug_str	00000000 
0000cb36 l       .debug_str	00000000 
0000cd30 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0001509f l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d86e l       .debug_str	00000000 
0002d8ac l       .debug_str	00000000 
0000c9c6 l       .debug_str	00000000 
0005ee45 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
000264ad l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
0000cb4b l       .debug_str	00000000 
0002d8c5 l       .debug_str	00000000 
0002d903 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000022ca l       .debug_str	00000000 
0005b1de l       .debug_str	00000000 
0000cd49 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
0001e0f1 l       .debug_str	00000000 
0002dc31 l       .debug_str	00000000 
0002dc3e l       .debug_str	00000000 
0002dc7e l       .debug_str	00000000 
0002dd7b l       .debug_str	00000000 
0002ddbb l       .debug_str	00000000 
0002ddca l       .debug_str	00000000 
0002de0a l       .debug_str	00000000 
0002de29 l       .debug_str	00000000 
0002de69 l       .debug_str	00000000 
0002de85 l       .debug_str	00000000 
0002dec5 l       .debug_str	00000000 
0002ded3 l       .debug_str	00000000 
0002df13 l       .debug_str	00000000 
0005faf0 l       .debug_str	00000000 
0000c651 l       .debug_str	00000000 
0000cea2 l       .debug_str	00000000 
0001ec03 l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
0002df21 l       .debug_str	00000000 
0002df62 l       .debug_str	00000000 
0000c7dc l       .debug_str	00000000 
0002df97 l       .debug_str	00000000 
00013166 l       .debug_str	00000000 
0002dfa1 l       .debug_str	00000000 
0002dfe2 l       .debug_str	00000000 
00021114 l       .debug_str	00000000 
0002e02f l       .debug_str	00000000 
0002e070 l       .debug_str	00000000 
0002e0a5 l       .debug_str	00000000 
0002e0b0 l       .debug_str	00000000 
0002e0f1 l       .debug_str	00000000 
0002e13e l       .debug_str	00000000 
0002e17f l       .debug_str	00000000 
0002e1b4 l       .debug_str	00000000 
0002e223 l       .debug_str	00000000 
0002e324 l       .debug_str	00000000 
0001f4da l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002e393 l       .debug_str	00000000 
0002e3b2 l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001868a l       .debug_str	00000000 
0005ae3c l       .debug_str	00000000 
00005a83 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
0000c9c6 l       .debug_str	00000000 
0005ee45 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
000264ad l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
0000cb4b l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00017a14 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00001f97 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
0002e3a2 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
00060ea7 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000c7d8 l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00006f6f l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
000061e3 l       .debug_str	00000000 
00006f8b l       .debug_str	00000000 
00029318 l       .debug_str	00000000 
00029385 l       .debug_str	00000000 
0002941b l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
00007b51 l       .debug_str	00000000 
00007b54 l       .debug_str	00000000 
00007ba4 l       .debug_str	00000000 
00007c01 l       .debug_str	00000000 
0000fd1c l       .debug_str	00000000 
0000fd93 l       .debug_str	00000000 
0000fe17 l       .debug_str	00000000 
0000fe92 l       .debug_str	00000000 
0000ff30 l       .debug_str	00000000 
0000ffdb l       .debug_str	00000000 
000294da l       .debug_str	00000000 
0002959f l       .debug_str	00000000 
00029671 l       .debug_str	00000000 
0002973a l       .debug_str	00000000 
00029824 l       .debug_str	00000000 
0002992b l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
0002d2df l       .debug_str	00000000 
0002a74f l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002d92c l       .debug_str	00000000 
0002da0c l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
0002843b l       .debug_str	00000000 
00004d98 l       .debug_str	00000000 
0000c7d3 l       .debug_str	00000000 
0002db0a l       .debug_str	00000000 
0002db11 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002db19 l       .debug_str	00000000 
0002db2d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0002db5f l       .debug_str	00000000 
0002db73 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0002dba5 l       .debug_str	00000000 
0002dbe4 l       .debug_str	00000000 
0002dbf2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2nk42jtdlqpdrpvo
0000fd1c l       .debug_str	00000000 
0002e53e l       .debug_str	00000000 
0000dac5 l       .debug_str	00000000 
0000dbb1 l       .debug_str	00000000 
0000dcaa l       .debug_str	00000000 
0002e631 l       .debug_str	00000000 
0002e6a9 l       .debug_str	00000000 
0002e7c3 l       .debug_str	00000000 
0002e83b l       .debug_str	00000000 
0000fd93 l       .debug_str	00000000 
0000fe17 l       .debug_str	00000000 
0000fe92 l       .debug_str	00000000 
0000ff30 l       .debug_str	00000000 
0000ffdb l       .debug_str	00000000 
0002e907 l       .debug_str	00000000 
0002e97f l       .debug_str	00000000 
0002ea4b l       .debug_str	00000000 
0002eac3 l       .debug_str	00000000 
0002eb68 l       .debug_str	00000000 
0002ebe0 l       .debug_str	00000000 
0002ec5e l       .debug_str	00000000 
0002ecd6 l       .debug_str	00000000 
0002ed2d l       .debug_str	00000000 
0002eda5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
00007b51 l       .debug_str	00000000 
00007b54 l       .debug_str	00000000 
00007ba4 l       .debug_str	00000000 
00007c01 l       .debug_str	00000000 
0002e3d0 l       .debug_str	00000000 
0002e448 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0000155a l       .debug_str	00000000 
000015aa l       .debug_str	00000000 
00001607 l       .debug_str	00000000 
0000d504 l       .debug_str	00000000 
0000d57b l       .debug_str	00000000 
0000d5ff l       .debug_str	00000000 
0000d67a l       .debug_str	00000000 
0000d718 l       .debug_str	00000000 
0000d7c3 l       .debug_str	00000000 
0000d865 l       .debug_str	00000000 
0000d92a l       .debug_str	00000000 
0000d9fc l       .debug_str	00000000 
0002e4c6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2tupw4qr6cy3al7x
00000c36 l       .debug_str	00000000 
00026ccf l       .debug_str	00000000 
0000c86b l       .debug_str	00000000 
0000c878 l       .debug_str	00000000 
00034e39 l       .debug_str	00000000 
00030155 l       .debug_str	00000000 
0000c676 l       .debug_str	00000000 
0003007e l       .debug_str	00000000 
0002ee4a l       .debug_str	00000000 
0002ee93 l       .debug_str	00000000 
00002b81 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c5b3 l       .debug_str	00000000 
000180f7 l       .debug_str	00000000 
0000c5b8 l       .debug_str	00000000 
0000f86b l       .debug_str	00000000 
0000f876 l       .debug_str	00000000 
0000f880 l       .debug_str	00000000 
0000efdb l       .debug_str	00000000 
0000c839 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
0001a94f l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
0000c848 l       .debug_str	00000000 
0000c84e l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c859 l       .debug_str	00000000 
0000c864 l       .debug_str	00000000 
0001a99a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 32m5mr5zne5f73k7
0000c675 l       .debug_str	00000000 
0000c651 l       .debug_str	00000000 
0005d98e l       .debug_str	00000000 
0000c664 l       .debug_str	00000000 
00060869 l       .debug_str	00000000 
0000c668 l       .debug_str	00000000 
0000c66c l       .debug_str	00000000 
00002fdb l       .debug_str	00000000 
0005fca5 l       .debug_str	00000000 
0000ee9c l       .debug_str	00000000 
0000ee8b l       .debug_str	00000000 
0005c34c l       .debug_str	00000000 
00002fde l       .debug_str	00000000 
000615a8 l       .debug_str	00000000 
0005b1fd l       .debug_str	00000000 
0000f016 l       .debug_str	00000000 
0002f4e2 l       .debug_str	00000000 
0002f57e l       .debug_str	00000000 
0000efb2 l       .debug_str	00000000 
0000efbb l       .debug_str	00000000 
0000efc9 l       .debug_str	00000000 
0001aa00 l       .debug_str	00000000 
0000efe1 l       .debug_str	00000000 
0002676e l       .debug_str	00000000 
0000f992 l       .debug_str	00000000 
0000c872 l       .debug_str	00000000 
0002f589 l       .debug_str	00000000 
0002f653 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
00004557 l       .debug_str	00000000 
0000512c l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0000c5b3 l       .debug_str	00000000 
0000f235 l       .debug_str	00000000 
0000f978 l       .debug_str	00000000 
0000f01b l       .debug_str	00000000 
0000c5b8 l       .debug_str	00000000 
0000f86b l       .debug_str	00000000 
0000f876 l       .debug_str	00000000 
0000f880 l       .debug_str	00000000 
0000efdb l       .debug_str	00000000 
0000c839 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
0001a94f l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
0000c848 l       .debug_str	00000000 
0000c84e l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c859 l       .debug_str	00000000 
0000c864 l       .debug_str	00000000 
0001a99a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00026ccf l       .debug_str	00000000 
0000c86b l       .debug_str	00000000 
0000c878 l       .debug_str	00000000 
00034e39 l       .debug_str	00000000 
00030155 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
0000c676 l       .debug_str	00000000 
000300e9 l       .debug_str	00000000 
0000f23b l       .debug_str	00000000 
0000f242 l       .debug_str	00000000 
00013098 l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7d8 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
0000d122 l       .debug_str	00000000 
0000d133 l       .debug_str	00000000 
0000d1a3 l       .debug_str	00000000 
0000d23d l       .debug_str	00000000 
0000d300 l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
0000155a l       .debug_str	00000000 
000015aa l       .debug_str	00000000 
00001607 l       .debug_str	00000000 
00007b51 l       .debug_str	00000000 
0000d504 l       .debug_str	00000000 
0000d57b l       .debug_str	00000000 
0000d5ff l       .debug_str	00000000 
0000d67a l       .debug_str	00000000 
0000d718 l       .debug_str	00000000 
0000d7c3 l       .debug_str	00000000 
0000d865 l       .debug_str	00000000 
0000d92a l       .debug_str	00000000 
0000d9fc l       .debug_str	00000000 
0000dac5 l       .debug_str	00000000 
0000dbb1 l       .debug_str	00000000 
0000dcaa l       .debug_str	00000000 
0000f24a l       .debug_str	00000000 
0000f35c l       .debug_str	00000000 
0000f48b l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
0002d048 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00028f05 l       .debug_str	00000000 
0000f896 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
0002f506 l       .debug_str	00000000 
0000f97d l       .debug_str	00000000 
0000f983 l       .debug_str	00000000 
0000d3ed l       .debug_str	00000000 
0000dd9a l       .debug_str	00000000 
0000dead l       .debug_str	00000000 
0000dfcd l       .debug_str	00000000 
0000e0e4 l       .debug_str	00000000 
0000e21d l       .debug_str	00000000 
0000e373 l       .debug_str	00000000 
0002d180 l       .debug_str	00000000 
00029022 l       .debug_str	00000000 
0000f98c l       .debug_str	00000000 
0005d607 l       .debug_str	00000000 
0002f5ad l       .debug_str	00000000 
00024264 l       .debug_str	00000000 
0002ef07 l       .debug_str	00000000 
0002ef6a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000c5d7 l       .debug_str	00000000 
0000c65c l       .debug_str	00000000 
00004966 l       .debug_str	00000000 
00024262 l       .debug_str	00000000 
0005adc1 l       .debug_str	00000000 
000242a5 l       .debug_str	00000000 
0005f2fd l       .debug_str	00000000 
0003007e l       .debug_str	00000000 
0002f03a l       .debug_str	00000000 
0002f07d l       .debug_str	00000000 
0002f122 l       .debug_str	00000000 
0002f160 l       .debug_str	00000000 
0002f1d4 l       .debug_str	00000000 
0002f214 l       .debug_str	00000000 
0002f2b6 l       .debug_str	00000000 
0002f344 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00010630 l       .debug_str	00000000 
0001064c l       .debug_str	00000000 
0002f3b5 l       .debug_str	00000000 
0002f445 l       .debug_str	00000000 
00010d2a l       .debug_str	00000000 
00010ccc l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000180f7 l       .debug_str	00000000 
00020600 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3ulq1z5tkxz9njop
000012f5 l       .debug_str	00000000 
0002f725 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0001a8ea l       .debug_str	00000000 
0001a8e0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
000140eb l       .debug_str	00000000 
000337b9 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0002f65c l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002f6c0 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4f0czol4b3uljl4v
00000d05 l       .debug_str	00000000 
0002f8a3 l       .debug_str	00000000 
0000cb36 l       .debug_str	00000000 
00011076 l       .debug_str	00000000 
0002f8c2 l       .debug_str	00000000 
0002f940 l       .debug_str	00000000 
000114f8 l       .debug_str	00000000 
0002f9d0 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
0005d3aa l       .debug_str	00000000 
00002fda l       .debug_str	00000000 
00011333 l       .debug_str	00000000 
000054dc l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
00017f11 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00005126 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002f78a l       .debug_str	00000000 
0002f816 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000022ca l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0000247b l       .debug_str	00000000 
0000c9c6 l       .debug_str	00000000 
0005ee45 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
000264ad l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
0000cb4b l       .debug_str	00000000 
0002f825 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
0002ffd0 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
0000efb2 l       .debug_str	00000000 
0000efbb l       .debug_str	00000000 
0000efc9 l       .debug_str	00000000 
0001aa00 l       .debug_str	00000000 
0000efe1 l       .debug_str	00000000 
0002676e l       .debug_str	00000000 
0002fe4c l       .debug_str	00000000 
0002ff09 l       .debug_str	00000000 
0002ff44 l       .debug_str	00000000 
0002ff9d l       .debug_str	00000000 
00026c70 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00030053 l       .debug_str	00000000 
000300b7 l       .debug_str	00000000 
0000c872 l       .debug_str	00000000 
000300ba l       .debug_str	00000000 
0000f89c l       .debug_str	00000000 
000150fc l       .debug_str	00000000 
00026637 l       .debug_str	00000000 
00026d31 l       .debug_str	00000000 
0005a1df l       .debug_str	00000000 
00061aff l       .debug_str	00000000 
0003012a l       .debug_str	00000000 
0003012d l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00013166 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00011e46 l       .debug_str	00000000 
0001a8ef l       .debug_str	00000000 
0001aa58 l       .debug_str	00000000 
000213b8 l       .debug_str	00000000 
0003013a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c5b8 l       .debug_str	00000000 
0000f86b l       .debug_str	00000000 
0000f876 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00002fe0 l       .debug_str	00000000 
0000f880 l       .debug_str	00000000 
0000efdb l       .debug_str	00000000 
0000c839 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
0001a94f l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
0000c848 l       .debug_str	00000000 
0000c84e l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c859 l       .debug_str	00000000 
0000c864 l       .debug_str	00000000 
0001a99a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00026ccf l       .debug_str	00000000 
0000c86b l       .debug_str	00000000 
0000c878 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00034e39 l       .debug_str	00000000 
00030155 l       .debug_str	00000000 
0000c676 l       .debug_str	00000000 
0003007e l       .debug_str	00000000 
0002fa57 l       .debug_str	00000000 
0002faf4 l       .debug_str	00000000 
0002fb2d l       .debug_str	00000000 
0002fbcc l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
000300e9 l       .debug_str	00000000 
0002fc05 l       .debug_str	00000000 
0002fca2 l       .debug_str	00000000 
0002fcd6 l       .debug_str	00000000 
0002fd79 l       .debug_str	00000000 
0002fe18 l       .debug_str	00000000 
000206e0 l     O .text	0000001c str.0
00020710 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
0003013a l       .debug_str	00000000 
00030155 l       .debug_str	00000000 
000301f9 l       .debug_str	00000000 
0003026e l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00011e46 l       .debug_str	00000000 
00026cc0 l       .debug_str	00000000 
0001aa58 l       .debug_str	00000000 
000213b8 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c5b8 l       .debug_str	00000000 
0000c848 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0000c859 l       .debug_str	00000000 
0000c864 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
0001a99a l       .debug_str	00000000 
00034e39 l       .debug_str	00000000 
0003018a l       .debug_str	00000000 
00026c70 l       .debug_str	00000000 
0000c84e l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00026ccf l       .debug_str	00000000 
0000c86b l       .debug_str	00000000 
0000c878 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
0000bfc2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00011903 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c651 l       .debug_str	00000000 
00011ae9 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00011ae2 l       .debug_str	00000000 
000302a5 l       .debug_str	00000000 
00011dc5 l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
00013166 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1d7thnxtm1658vov
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
0003036a l       .debug_str	00000000 
000303a7 l       .debug_str	00000000 
000303b8 l       .debug_str	00000000 
000031f6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00039894 l       .debug_str	00000000 
0005cf7d l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005abef l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1mpt8t9sy9fl5s1y
000305af l       .debug_str	00000000 
0000f169 l       .debug_str	00000000 
0003042e l       .debug_str	00000000 
0001afb8 l       .debug_str	00000000 
00030473 l       .debug_str	00000000 
000304b8 l       .debug_str	00000000 
000304c5 l       .debug_str	00000000 
0003050a l       .debug_str	00000000 
00030517 l       .debug_str	00000000 
0001cfdf l       .debug_str	00000000 
0003055c l       .debug_str	00000000 
0000c31c l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
000305a4 l       .debug_str	00000000 
0000c3d6 l       .debug_str	00000000 
000305f7 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
0003063d l       .debug_str	00000000 
00030683 l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000c3f4 l       .debug_str	00000000 
0005cf6b l       .debug_str	00000000 
0000403f l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005ed81 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000303ea l       .debug_str	00000000 
0000c2c7 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1yr11byuhnx447wf
0002108b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00059eda l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00017a14 l       .debug_str	00000000 
000139f0 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0002131c l       .debug_str	00000000 
000347a6 l       .debug_str	00000000 
000139f5 l       .debug_str	00000000 
00021177 l       .debug_str	00000000 
000139ec l       .debug_str	00000000 
00021322 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000306c9 l       .debug_str	00000000 
0001b059 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00021171 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2c4l9zx47vkj1m82
00017d4c l       .debug_str	00000000 
000307a1 l       .debug_str	00000000 
000360cc l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00014688 l       .debug_str	00000000 
0005ed81 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00030732 l       .debug_str	00000000 
0005c421 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2zdnjadro4igct6r
0001b4f9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00030812 l       .debug_str	00000000 
00030838 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3j9b715n9ffmspvs
0002662d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00030841 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3w7pruxfhz9uhnv5
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00005126 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005aa33 l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
0005d3aa l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
00002fda l       .debug_str	00000000 
00017f11 l       .debug_str	00000000 
00024264 l       .debug_str	00000000 
000308a1 l       .debug_str	00000000 
0003091d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
000051cc l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4wduwt141qumn59z
0000ac22 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005eb65 l       .debug_str	00000000 
000337b9 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0002108b l       .debug_str	00000000 
0003094a l       .debug_str	00000000 
00014685 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 pcinnba97cylogg
00017d4c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000309ac l       .debug_str	00000000 
00017d3e l       .debug_str	00000000 
000157d6 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000f169 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0005aa62 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
00022cfa l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
00005117 l       .debug_str	00000000 
000311ba l       .debug_str	00000000 
000231e7 l       .debug_str	00000000 
00031239 l       .debug_str	00000000 
00022fb7 l       .debug_str	00000000 
000312b8 l       .debug_str	00000000 
0003133a l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
00031530 l       .debug_str	00000000 
000315b2 l       .debug_str	00000000 
000315fb l       .debug_str	00000000 
0003167d l       .debug_str	00000000 
00031873 l       .debug_str	00000000 
000318f5 l       .debug_str	00000000 
0003193e l       .debug_str	00000000 
000319c0 l       .debug_str	00000000 
00031bb6 l       .debug_str	00000000 
00031c38 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00031c81 l       .debug_str	00000000 
00031cf5 l       .debug_str	00000000 
00002b81 l       .debug_str	00000000 
0002108b l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
00005126 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000affb l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00035b33 l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0000b004 l       .debug_str	00000000 
00015324 l       .debug_str	00000000 
000615a8 l       .debug_str	00000000 
00002fde l       .debug_str	00000000 
00012a17 l       .debug_str	00000000 
00031f16 l       .debug_str	00000000 
00032133 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000604f5 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00006f6f l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
0000a830 l       .debug_str	00000000 
0000a87e l       .debug_str	00000000 
0000a8e9 l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
00031c93 l       .debug_str	00000000 
000061e3 l       .debug_str	00000000 
00006f8b l       .debug_str	00000000 
00006fd0 l       .debug_str	00000000 
0000703e l       .debug_str	00000000 
000070d5 l       .debug_str	00000000 
00007195 l       .debug_str	00000000 
0000727e l       .debug_str	00000000 
00007390 l       .debug_str	00000000 
000074cb l       .debug_str	00000000 
0000762f l       .debug_str	00000000 
000077bc l       .debug_str	00000000 
00007972 l       .debug_str	00000000 
00007b51 l       .debug_str	00000000 
00007b54 l       .debug_str	00000000 
00007ba4 l       .debug_str	00000000 
00007c01 l       .debug_str	00000000 
00007c55 l       .debug_str	00000000 
00007ccc l       .debug_str	00000000 
00007d50 l       .debug_str	00000000 
00007dcb l       .debug_str	00000000 
00007e69 l       .debug_str	00000000 
00007f14 l       .debug_str	00000000 
00007fb6 l       .debug_str	00000000 
0000807b l       .debug_str	00000000 
0000814d l       .debug_str	00000000 
00008216 l       .debug_str	00000000 
00008302 l       .debug_str	00000000 
000083fb l       .debug_str	00000000 
000084eb l       .debug_str	00000000 
000085fe l       .debug_str	00000000 
0000871e l       .debug_str	00000000 
00008835 l       .debug_str	00000000 
0000896f l       .debug_str	00000000 
00008ab6 l       .debug_str	00000000 
00008bf4 l       .debug_str	00000000 
00008d55 l       .debug_str	00000000 
00008ec3 l       .debug_str	00000000 
00009028 l       .debug_str	00000000 
000091b0 l       .debug_str	00000000 
00009345 l       .debug_str	00000000 
000094d1 l       .debug_str	00000000 
00009680 l       .debug_str	00000000 
0000983c l       .debug_str	00000000 
000099ef l       .debug_str	00000000 
00009bc5 l       .debug_str	00000000 
00009da8 l       .debug_str	00000000 
00009f82 l       .debug_str	00000000 
0000a17d l       .debug_str	00000000 
0000a395 l       .debug_str	00000000 
00031d07 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000309fe l       .debug_str	00000000 
00030a85 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
000051cc l       .debug_str	00000000 
00030ad2 l       .debug_str	00000000 
00030b59 l       .debug_str	00000000 
00030d53 l       .debug_str	00000000 
00030ddc l       .debug_str	00000000 
00030fd8 l       .debug_str	00000000 
00031061 l       .debug_str	00000000 
000310b0 l       .debug_str	00000000 
0003113c l       .debug_str	00000000 
00022f35 l       .debug_str	00000000 
00020800 l     O .text	0000001c str.0
00020840 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001164c l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000615a8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000321a3 l       .debug_str	00000000 
0000b64d l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
000140eb l       .debug_str	00000000 
000337b9 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000321f3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
0003289f l       .debug_str	00000000 
00008ab6 l       .debug_str	00000000 
00008bf4 l       .debug_str	00000000 
00008d55 l       .debug_str	00000000 
00008ec3 l       .debug_str	00000000 
000324b8 l       .debug_str	00000000 
00032530 l       .debug_str	00000000 
000326bf l       .debug_str	00000000 
00032737 l       .debug_str	00000000 
00032917 l       .debug_str	00000000 
00032995 l       .debug_str	00000000 
00032a0d l       .debug_str	00000000 
00009028 l       .debug_str	00000000 
000091b0 l       .debug_str	00000000 
00009345 l       .debug_str	00000000 
000094d1 l       .debug_str	00000000 
00009680 l       .debug_str	00000000 
0000983c l       .debug_str	00000000 
00032b00 l       .debug_str	00000000 
00032b78 l       .debug_str	00000000 
00032d55 l       .debug_str	00000000 
00032dcd l       .debug_str	00000000 
00032e99 l       .debug_str	00000000 
00032f11 l       .debug_str	00000000 
00032f41 l       .debug_str	00000000 
00032fb9 l       .debug_str	00000000 
0003305e l       .debug_str	00000000 
000330d6 l       .debug_str	00000000 
00033217 l       .debug_str	00000000 
0003328f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
000014cb l       .debug_str	00000000 
000014ce l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
0000152d l       .debug_str	00000000 
00007b51 l       .debug_str	00000000 
00032257 l       .debug_str	00000000 
000322cf l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00007b54 l       .debug_str	00000000 
00007ba4 l       .debug_str	00000000 
00007c01 l       .debug_str	00000000 
00007c55 l       .debug_str	00000000 
00007ccc l       .debug_str	00000000 
00007d50 l       .debug_str	00000000 
00007dcb l       .debug_str	00000000 
00007e69 l       .debug_str	00000000 
00007f14 l       .debug_str	00000000 
00007fb6 l       .debug_str	00000000 
0000807b l       .debug_str	00000000 
0000814d l       .debug_str	00000000 
00008216 l       .debug_str	00000000 
00008302 l       .debug_str	00000000 
000083fb l       .debug_str	00000000 
00032326 l       .debug_str	00000000 
0003239e l       .debug_str	00000000 
000084eb l       .debug_str	00000000 
000085fe l       .debug_str	00000000 
0000871e l       .debug_str	00000000 
00008835 l       .debug_str	00000000 
0000896f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16gyyaet005v3lvf
0002662d l       .debug_str	00000000 
00033445 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000334a5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 28buxl9xaffr9rke
0005ab66 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ed81 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00033505 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
0001a8e0 l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2leljxexqh8ze7wz
000360cc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c3f8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00014688 l       .debug_str	00000000 
0005ed81 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00033562 l       .debug_str	00000000 
0005c421 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 26y0fjfhtczgcip1
0005af84 l       .debug_str	00000000 
000336fc l       .debug_str	00000000 
00033718 l       .debug_str	00000000 
0003373e l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00003b44 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005ded4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000335d3 l       .debug_str	00000000 
00015212 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
000335fc l       .debug_str	00000000 
0003360d l       .debug_str	00000000 
0003361d l       .debug_str	00000000 
00033669 l       .debug_str	00000000 
00033674 l       .debug_str	00000000 
000336aa l       .debug_str	00000000 
000336c2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3529eu2hb2fyibnd
00017df3 l       .debug_str	00000000 
00017e2d l       .debug_str	00000000 
00017e66 l       .debug_str	00000000 
00017e75 l       .debug_str	00000000 
00017eb8 l       .debug_str	00000000 
0005c4af l       .debug_str	00000000 
00038e3a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000150e2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
000150fc l       .debug_str	00000000 
00015100 l       .debug_str	00000000 
00017e6f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00033747 l       .debug_str	00000000 
0001512d l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00033770 l       .debug_str	00000000 
00003b38 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00003b3e l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cyvbl47c30y60eb
0005c6d0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00014688 l       .debug_str	00000000 
0005ed81 l       .debug_str	00000000 
000337ac l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000337bf l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
0003384b l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
00033854 l       .debug_str	00000000 
0003e9c8 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00033864 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
0002662d l       .debug_str	00000000 
0003388b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000338eb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
00035ced l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
000339b7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000014ac l       .debug_str	00000000 
000014b4 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
0003394b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
000360cc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cc5 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
00014688 l       .debug_str	00000000 
0005ed81 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000339c0 l       .debug_str	00000000 
0005c421 l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
00033a31 l       .debug_str	00000000 
00033a44 l       .debug_str	00000000 
00015064 l       .debug_str	00000000 
0005ed81 l       .debug_str	00000000 
00033a75 l       .debug_str	00000000 
00033a7d l       .debug_str	00000000 
00033a86 l       .debug_str	00000000 
00033acf l       .debug_str	00000000 
00006749 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00033a8d l       .debug_str	00000000 
00033acc l       .debug_str	00000000 
00033ad5 l       .debug_str	00000000 
00033b17 l       .debug_str	00000000 
00033b21 l       .debug_str	00000000 
00033b64 l       .debug_str	00000000 
00033b6e l       .debug_str	00000000 
00033bb1 l       .debug_str	00000000 
00033bbb l       .debug_str	00000000 
00033bfe l       .debug_str	00000000 
00033c09 l       .debug_str	00000000 
00033c4e l       .debug_str	00000000 
00033c59 l       .debug_str	00000000 
00033c9e l       .debug_str	00000000 
00033ca4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000f14b l       .debug_str	00000000 
000014c7 l       .debug_str	00000000 
000342d9 l       .debug_str	00000000 
000150fc l       .debug_str	00000000 
00033cb1 l       .debug_str	00000000 
00033cc1 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000140c3 l       .debug_str	00000000 
000130bc l       .debug_str	00000000 
000140ad l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00005126 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000affb l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00035b33 l       .debug_str	00000000 
0006169d l       .debug_str	00000000 
000014b9 l       .debug_str	00000000 
000014ba l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0000b004 l       .debug_str	00000000 
00015324 l       .debug_str	00000000 
00026522 l       .debug_str	00000000 
00003501 l       .debug_str	00000000 
00033d07 l       .debug_str	00000000 
00024264 l       .debug_str	00000000 
0005faf0 l       .debug_str	00000000 
000346dd l       .debug_str	00000000 
000140b5 l       .debug_str	00000000 
0005f702 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005af58 l       .debug_str	00000000 
00033d19 l       .debug_str	00000000 
00033d1e l       .debug_str	00000000 
00061078 l       .debug_str	00000000 
00033d29 l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
00033d33 l       .debug_str	00000000 
000343a7 l       .debug_str	00000000 
00033d3d l       .debug_str	00000000 
00017d4c l       .debug_str	00000000 
000343e7 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00034720 l       .debug_str	00000000 
000140bf l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00033d4b l       .debug_str	00000000 
00033dbf l       .debug_str	00000000 
00034601 l       .debug_str	00000000 
00033dd1 l       .debug_str	00000000 
000343ed l       .debug_str	00000000 
000343c7 l       .debug_str	00000000 
000167d8 l       .debug_str	00000000 
00034644 l       .debug_str	00000000 
00033dd6 l       .debug_str	00000000 
00033e4a l       .debug_str	00000000 
00034759 l       .debug_str	00000000 
000347a0 l       .debug_str	00000000 
000346a6 l       .debug_str	00000000 
00033e62 l       .debug_str	00000000 
00043f35 l       .debug_str	00000000 
00039654 l       .debug_str	00000000 
0005af07 l       .debug_str	00000000 
000347bb l       .debug_str	00000000 
00034675 l       .debug_str	00000000 
00033eda l       .debug_str	00000000 
00005a83 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005ed0e l       .debug_str	00000000 
00023a37 l       .debug_str	00000000 
00033f32 l       .debug_str	00000000 
00033f37 l       .debug_str	00000000 
00033f49 l       .debug_str	00000000 
0001e0f1 l       .debug_str	00000000 
00034e39 l       .debug_str	00000000 
00033f52 l       .debug_str	00000000 
0001c229 l       .debug_str	00000000 
00033f7a l       .debug_str	00000000 
00033f8a l       .debug_str	00000000 
0005d3aa l       .debug_str	00000000 
00033fe3 l       .debug_str	00000000 
00033feb l       .debug_str	00000000 
000152b4 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00011ef1 l       .debug_str	00000000 
00033ff3 l       .debug_str	00000000 
00017f79 l       .debug_str	00000000 
00033fff l       .debug_str	00000000 
00034009 l       .debug_str	00000000 
00034016 l       .debug_str	00000000 
00034023 l       .debug_str	00000000 
00034038 l       .debug_str	00000000 
0003404c l       .debug_str	00000000 
00034062 l       .debug_str	00000000 
0003406a l       .debug_str	00000000 
00034077 l       .debug_str	00000000 
00034084 l       .debug_str	00000000 
0003498d l       .debug_str	00000000 
0000c676 l       .debug_str	00000000 
00034091 l       .debug_str	00000000 
000340be l       .debug_str	00000000 
000340ed l       .debug_str	00000000 
00034114 l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
00034133 l       .debug_str	00000000 
00034148 l       .debug_str	00000000 
0001bc4b l       .debug_str	00000000 
0004edd9 l       .debug_str	00000000 
0000bb4c l       .debug_str	00000000 
0005ab66 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00034152 l       .debug_str	00000000 
00034177 l       .debug_str	00000000 
0003415d l       .debug_str	00000000 
000341f6 l       .debug_str	00000000 
00034187 l       .debug_str	00000000 
0003418d l       .debug_str	00000000 
0003419c l       .debug_str	00000000 
000341a7 l       .debug_str	00000000 
000341dc l       .debug_str	00000000 
00034201 l       .debug_str	00000000 
00034211 l       .debug_str	00000000 
0005b770 l       .debug_str	00000000 
00034243 l       .debug_str	00000000 
00034248 l       .debug_str	00000000 
0005c613 l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
00035aa6 l       .debug_str	00000000 
000140eb l       .debug_str	00000000 
00035ad4 l       .debug_str	00000000 
00035b08 l       .debug_str	00000000 
0003424e l       .debug_str	00000000 
0000131d l       .debug_str	00000000 
0003428c l       .debug_str	00000000 
00035ab1 l       .debug_str	00000000 
00035afe l       .debug_str	00000000 
0003426d l       .debug_str	00000000 
0003425a l       .debug_str	00000000 
00034273 l       .debug_str	00000000 
00023a36 l       .debug_str	00000000 
0000bfc2 l       .debug_str	00000000 
0000bfc1 l       .debug_str	00000000 
0003429b l       .debug_str	00000000 
000342a3 l       .debug_str	00000000 
0003f76c l       .debug_str	00000000 
000342a9 l       .debug_str	00000000 
0004d297 l       .debug_str	00000000 
000342d0 l       .debug_str	00000000 
000342b4 l       .debug_str	00000000 
0000f14a l       .debug_str	00000000 
000342d8 l       .debug_str	00000000 
00033f84 l       .debug_str	00000000 
000243ca l       .debug_str	00000000 
00026482 l       .debug_str	00000000 
000342dd l       .debug_str	00000000 
00034301 l       .debug_str	00000000 
00034307 l       .debug_str	00000000 
0003430f l       .debug_str	00000000 
0004f902 l       .debug_str	00000000 
0003f368 l       .debug_str	00000000 
00034314 l       .debug_str	00000000 
0003433c l       .debug_str	00000000 
0003431e l       .debug_str	00000000 
000022d1 l       .debug_str	00000000 
0001a8e0 l       .debug_str	00000000 
00017dec l       .debug_str	00000000 
00021137 l       .debug_str	00000000 
000243d2 l       .debug_str	00000000 
000243df l       .debug_str	00000000 
000243e8 l       .debug_str	00000000 
00059ece l       .debug_str	00000000 
00034350 l       .debug_str	00000000 
00034344 l       .debug_str	00000000 
00014688 l       .debug_str	00000000 
0003435d l       .debug_str	00000000 
00034369 l       .debug_str	00000000 
0003438c l       .debug_str	00000000 
00034376 l       .debug_str	00000000 
0003439a l       .debug_str	00000000 
000343ba l       .debug_str	00000000 
000343da l       .debug_str	00000000 
000343f5 l       .debug_str	00000000 
00034410 l       .debug_str	00000000 
00034416 l       .debug_str	00000000 
0003441a l       .debug_str	00000000 
0003442b l       .debug_str	00000000 
0003441e l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00034440 l       .debug_str	00000000 
0003443b l       .debug_str	00000000 
00034453 l       .debug_str	00000000 
0003449f l       .debug_str	00000000 
00034478 l       .debug_str	00000000 
0003448f l       .debug_str	00000000 
000344b9 l       .debug_str	00000000 
000344aa l       .debug_str	00000000 
00034501 l       .debug_str	00000000 
000344e1 l       .debug_str	00000000 
0003455a l       .debug_str	00000000 
0003453a l       .debug_str	00000000 
00059ec0 l       .debug_str	00000000 
000345b1 l       .debug_str	00000000 
000345b6 l       .debug_str	00000000 
000345bc l       .debug_str	00000000 
000345df l       .debug_str	00000000 
000345c1 l       .debug_str	00000000 
000345ea l       .debug_str	00000000 
00034635 l       .debug_str	00000000 
00034666 l       .debug_str	00000000 
00034697 l       .debug_str	00000000 
000346c6 l       .debug_str	00000000 
00034711 l       .debug_str	00000000 
00034742 l       .debug_str	00000000 
0001c048 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039d7e l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00039894 l       .debug_str	00000000 
0005cf7d l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
000615b7 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005abef l       .debug_str	00000000 
0005aaf0 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005b138 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0002105b l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
000211cc l       .debug_str	00000000 
00021009 l       .debug_str	00000000 
00034793 l       .debug_str	00000000 
000347ac l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000347da l       .debug_str	00000000 
000347d9 l       .debug_str	00000000 
000347ee l       .debug_str	00000000 
000347df l       .debug_str	00000000 
0005abe1 l       .debug_str	00000000 
00059eae l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0003481b l       .debug_str	00000000 
0003480d l       .debug_str	00000000 
0003480c l       .debug_str	00000000 
00021140 l       .debug_str	00000000 
0001a8ea l       .debug_str	00000000 
000619ed l       .debug_str	00000000 
00034824 l       .debug_str	00000000 
00034828 l       .debug_str	00000000 
0003482b l       .debug_str	00000000 
000604dd l       .debug_str	00000000 
0001a8ce l       .debug_str	00000000 
0003482e l       .debug_str	00000000 
0001bbc3 l       .debug_str	00000000 
00034832 l       .debug_str	00000000 
00034831 l       .debug_str	00000000 
00034837 l       .debug_str	00000000 
00034909 l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
00034855 l       .debug_str	00000000 
00034843 l       .debug_str	00000000 
0003487a l       .debug_str	00000000 
00034942 l       .debug_str	00000000 
00034898 l       .debug_str	00000000 
00034886 l       .debug_str	00000000 
000348bd l       .debug_str	00000000 
000348d6 l       .debug_str	00000000 
000348c4 l       .debug_str	00000000 
000348e2 l       .debug_str	00000000 
000348fa l       .debug_str	00000000 
00034933 l       .debug_str	00000000 
0001bbc9 l       .debug_str	00000000 
0003496c l       .debug_str	00000000 
00034979 l       .debug_str	00000000 
00034978 l       .debug_str	00000000 
00034981 l       .debug_str	00000000 
000349ae l       .debug_str	00000000 
00034999 l       .debug_str	00000000 
000349cb l       .debug_str	00000000 
000349d7 l       .debug_str	00000000 
00034a81 l       .debug_str	00000000 
000349e3 l       .debug_str	00000000 
000349ea l       .debug_str	00000000 
000349f3 l       .debug_str	00000000 
00034a01 l       .debug_str	00000000 
00034a08 l       .debug_str	00000000 
00034a10 l       .debug_str	00000000 
00034a17 l       .debug_str	00000000 
00034a5d l       .debug_str	00000000 
00034a38 l       .debug_str	00000000 
00034a23 l       .debug_str	00000000 
00034a48 l       .debug_str	00000000 
00034a6c l       .debug_str	00000000 
0000f169 l       .debug_str	00000000 
00034a8d l       .debug_str	00000000 
00026495 l       .debug_str	00000000 
0005e3c7 l       .debug_str	00000000 
00020f7c l       .debug_str	00000000 
00020f65 l       .debug_str	00000000 
00034aa7 l       .debug_str	00000000 
00034aca l       .debug_str	00000000 
00034ab3 l       .debug_str	00000000 
00034b14 l       .debug_str	00000000 
00034b08 l       .debug_str	00000000 
00033f7f l       .debug_str	00000000 
00034b31 l       .debug_str	00000000 
00034b1a l       .debug_str	00000000 
00034b7a l       .debug_str	00000000 
00034ba2 l       .debug_str	00000000 
00034b8b l       .debug_str	00000000 
0005cf6b l       .debug_str	00000000 
0000403f l       .debug_str	00000000 
0005aff6 l       .debug_str	00000000 
00034c51 l       .debug_str	00000000 
00034c33 l       .debug_str	00000000 
00034d47 l       .debug_str	00000000 
00034d27 l       .debug_str	00000000 
00034dba l       .debug_str	00000000 
00034d9a l       .debug_str	00000000 
0004b3c0 l       .debug_str	00000000 
00034e0d l       .debug_str	00000000 
00034e1a l       .debug_str	00000000 
00034e25 l       .debug_str	00000000 
00034e3b l       .debug_str	00000000 
00034e45 l       .debug_str	00000000 
00034e9b l       .debug_str	00000000 
00034ead l       .debug_str	00000000 
00034eff l       .debug_str	00000000 
00034f13 l       .debug_str	00000000 
00034f67 l       .debug_str	00000000 
00034f6e l       .debug_str	00000000 
00034fb4 l       .debug_str	00000000 
00034fc3 l       .debug_str	00000000 
0003501d l       .debug_str	00000000 
00035073 l       .debug_str	00000000 
000350cb l       .debug_str	00000000 
00035115 l       .debug_str	00000000 
0003511b l       .debug_str	00000000 
0003516b l       .debug_str	00000000 
000351b7 l       .debug_str	00000000 
00035205 l       .debug_str	00000000 
0002653b l       .debug_str	00000000 
00035245 l       .debug_str	00000000 
00035292 l       .debug_str	00000000 
000352db l       .debug_str	00000000 
00035326 l       .debug_str	00000000 
00035363 l       .debug_str	00000000 
00035373 l       .debug_str	00000000 
000353ce l       .debug_str	00000000 
00035425 l       .debug_str	00000000 
0003547e l       .debug_str	00000000 
00042754 l       .debug_str	00000000 
000354c9 l       .debug_str	00000000 
0003551d l       .debug_str	00000000 
0003556d l       .debug_str	00000000 
000355bf l       .debug_str	00000000 
0005aa62 l       .debug_str	00000000 
00035603 l       .debug_str	00000000 
0003564f l       .debug_str	00000000 
00035697 l       .debug_str	00000000 
000356e1 l       .debug_str	00000000 
0004258a l       .debug_str	00000000 
0003571d l       .debug_str	00000000 
00035771 l       .debug_str	00000000 
000357c1 l       .debug_str	00000000 
00035813 l       .debug_str	00000000 
00035857 l       .debug_str	00000000 
00035863 l       .debug_str	00000000 
000358ba l       .debug_str	00000000 
0003590d l       .debug_str	00000000 
00035962 l       .debug_str	00000000 
000359a9 l       .debug_str	00000000 
000359b5 l       .debug_str	00000000 
000359cc l       .debug_str	00000000 
000359c5 l       .debug_str	00000000 
000359de l       .debug_str	00000000 
000359f3 l       .debug_str	00000000 
00035a44 l       .debug_str	00000000 
00035a54 l       .debug_str	00000000 
00035aa5 l       .debug_str	00000000 
00035ab0 l       .debug_str	00000000 
00035ad3 l       .debug_str	00000000 
00035b07 l       .debug_str	00000000 
00035b1d l       .debug_str	00000000 
00035b4b l       .debug_str	00000000 
00035b3f l       .debug_str	00000000 
00035b59 l       .debug_str	00000000 
00035b58 l       .debug_str	00000000 
00003324 l       .debug_str	00000000 
0001a8d6 l       .debug_str	00000000 
000264a8 l       .debug_str	00000000 
000264a7 l       .debug_str	00000000 
000264ad l       .debug_str	00000000 
000264ac l       .debug_str	00000000 
00035b5c l       .debug_str	00000000 
00035b9c l       .debug_str	00000000 
00035ba4 l       .debug_str	00000000 
00035be4 l       .debug_str	00000000 
00035bee l       .debug_str	00000000 
00059ffa l       .debug_str	00000000 
0005eb65 l       .debug_str	00000000 
00035c2a l       .debug_str	00000000 
0001cdb7 l       .debug_str	00000000 
00038a4a l       .debug_str	00000000 
00035c52 l       .debug_str	00000000 
0001cc6f l       .debug_str	00000000 
00035c7b l       .debug_str	00000000 
00035ca0 l       .debug_str	00000000 
00046bd8 l       .debug_str	00000000 
0005b050 l       .debug_str	00000000 
00035ca7 l       .debug_str	00000000 
00035cb0 l       .debug_str	00000000 
00035ce9 l       .debug_str	00000000 
000121e4 l       .debug_str	00000000 
00035cf1 l       .debug_str	00000000 
00016086 l       .debug_str	00000000 
00035d86 l       .debug_str	00000000 
0000c31c l       .debug_str	00000000 
00035dd1 l       .debug_str	00000000 
0000c2c7 l       .debug_str	00000000 
00035e18 l       .debug_str	00000000 
000157d6 l       .debug_str	00000000 
00035e6d l       .debug_str	00000000 
00035eaa l       .debug_str	00000000 
0000c42d l       .debug_str	00000000 
00035eb5 l       .debug_str	00000000 
00015f90 l       .debug_str	00000000 
00035f0a l       .debug_str	00000000 
00015f20 l       .debug_str	00000000 
00035f5c l       .debug_str	00000000 
0000aff2 l       .debug_str	00000000 
00035fa3 l       .debug_str	00000000 
0000afed l       .debug_str	00000000 
00004557 l       .debug_str	00000000 
00014781 l       .debug_str	00000000 
000369ad l       .debug_str	00000000 
00036029 l       .debug_str	00000000 
0003606a l       .debug_str	00000000 
0003608d l       .debug_str	00000000 
000360c8 l       .debug_str	00000000 
000360d2 l       .debug_str	00000000 
0003615c l       .debug_str	00000000 
0003618e l       .debug_str	00000000 
00014bc5 l       .debug_str	00000000 
0001164c l       .debug_str	00000000 
00036202 l       .debug_str	00000000 
00036253 l       .debug_str	00000000 
000152ff l       .debug_str	00000000 
00036295 l       .debug_str	00000000 
0003631c l       .debug_str	00000000 
0003632b l       .debug_str	00000000 
000363b5 l       .debug_str	00000000 
00036431 l       .debug_str	00000000 
00036461 l       .debug_str	00000000 
0003649c l       .debug_str	00000000 
000364a6 l       .debug_str	00000000 
0000526b l       .debug_str	00000000 
0003651d l       .debug_str	00000000 
00036572 l       .debug_str	00000000 
0003657b l       .debug_str	00000000 
000365cc l       .debug_str	00000000 
00006f54 l       .debug_str	00000000 
000365d8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
000365e5 l       .debug_str	00000000 
000365ee l       .debug_str	00000000 
00036604 l       .debug_str	00000000 
00036611 l       .debug_str	00000000 
00036656 l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
000366bf l       .debug_str	00000000 
000366c8 l       .debug_str	00000000 
0004d877 l       .debug_str	00000000 
00036700 l       .debug_str	00000000 
0003673d l       .debug_str	00000000 
00036748 l       .debug_str	00000000 
000367cb l       .debug_str	00000000 
000367d6 l       .debug_str	00000000 
0003685c l       .debug_str	00000000 
000368d1 l       .debug_str	00000000 
000368fd l       .debug_str	00000000 
00036986 l       .debug_str	00000000 
00036995 l       .debug_str	00000000 
000369a2 l       .debug_str	00000000 
000369b6 l       .debug_str	00000000 
00036a0c l       .debug_str	00000000 
00036a7b l       .debug_str	00000000 
00036afb l       .debug_str	00000000 
00036b69 l       .debug_str	00000000 
00036bf4 l       .debug_str	00000000 
00036c69 l       .debug_str	00000000 
00036ca9 l       .debug_str	00000000 
00036d2c l       .debug_str	00000000 
00036d6d l       .debug_str	00000000 
0004b282 l       .debug_str	00000000 
0004ed9c l       .debug_str	00000000 
00036dd2 l       .debug_str	00000000 
00036e81 l       .debug_str	00000000 
00036ecc l       .debug_str	00000000 
0001620b l       .debug_str	00000000 
00036f75 l       .debug_str	00000000 
00036ff1 l       .debug_str	00000000 
00015099 l       .debug_str	00000000 
00037016 l       .debug_str	00000000 
0000c387 l       .debug_str	00000000 
00037063 l       .debug_str	00000000 
00015779 l       .debug_str	00000000 
000370b6 l       .debug_str	00000000 
000370f1 l       .debug_str	00000000 
000370fc l       .debug_str	00000000 
0001b867 l       .debug_str	00000000 
00037188 l       .debug_str	00000000 
000153d1 l       .debug_str	00000000 
0003720b l       .debug_str	00000000 
00037293 l       .debug_str	00000000 
00021d07 l       .debug_str	00000000 
00037308 l       .debug_str	00000000 
0003738e l       .debug_str	00000000 
00016712 l       .debug_str	00000000 
00037403 l       .debug_str	00000000 
0000bb30 l       .debug_str	00000000 
00037466 l       .debug_str	00000000 
0000b077 l       .debug_str	00000000 
000374c8 l       .debug_str	00000000 
0000ad63 l       .debug_str	00000000 
0003750e l       .debug_str	00000000 
00037556 l       .debug_str	00000000 
00037560 l       .debug_str	00000000 
000375a1 l       .debug_str	00000000 
000375bb l       .debug_str	00000000 
00026560 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
000375c1 l       .debug_str	00000000 
000375ca l       .debug_str	00000000 
0003762f l       .debug_str	00000000 
0003763e l       .debug_str	00000000 
00037680 l       .debug_str	00000000 
0003768a l       .debug_str	00000000 
000376ef l       .debug_str	00000000 
00037731 l       .debug_str	00000000 
0003777b l       .debug_str	00000000 
0003778a l       .debug_str	00000000 
000377c0 l       .debug_str	00000000 
000377c9 l       .debug_str	00000000 
0001868a l       .debug_str	00000000 
000377d3 l       .debug_str	00000000 
000377d6 l       .debug_str	00000000 
0003780e l       .debug_str	00000000 
00037818 l       .debug_str	00000000 
0003785c l       .debug_str	00000000 
00037872 l       .debug_str	00000000 
000378bb l       .debug_str	00000000 
00015346 l       .debug_str	00000000 
0002654b l       .debug_str	00000000 
00037900 l       .debug_str	00000000 
00037949 l       .debug_str	00000000 
00037957 l       .debug_str	00000000 
0003799f l       .debug_str	00000000 
00024c19 l       .debug_str	00000000 
000379e9 l       .debug_str	00000000 
000411c1 l       .debug_str	00000000 
00037a81 l       .debug_str	00000000 
0005aa33 l       .debug_str	00000000 
00037b1b l       .debug_str	00000000 
00025109 l       .debug_str	00000000 
00037b8d l       .debug_str	00000000 
00024e3c l       .debug_str	00000000 
00037c30 l       .debug_str	00000000 
000031f6 l       .debug_str	00000000 
00037c62 l       .debug_str	00000000 
00037ca9 l       .debug_str	00000000 
00037cb7 l       .debug_str	00000000 
00037cc1 l       .debug_str	00000000 
00037d0f l       .debug_str	00000000 
00037d1f l       .debug_str	00000000 
00037d6a l       .debug_str	00000000 
00037d78 l       .debug_str	00000000 
00037e06 l       .debug_str	00000000 
00037e15 l       .debug_str	00000000 
0000c3d6 l       .debug_str	00000000 
00037e5e l       .debug_str	00000000 
0000c37f l       .debug_str	00000000 
00037ea3 l       .debug_str	00000000 
00037edd l       .debug_str	00000000 
00037ee6 l       .debug_str	00000000 
00037f32 l       .debug_str	00000000 
00037f4a l       .debug_str	00000000 
00037fac l       .debug_str	00000000 
0000c2cf l       .debug_str	00000000 
00037fe1 l       .debug_str	00000000 
00038009 l       .debug_str	00000000 
00038041 l       .debug_str	00000000 
0003806a l       .debug_str	00000000 
00038075 l       .debug_str	00000000 
0001bfc6 l       .debug_str	00000000 
0003809a l       .debug_str	00000000 
00038129 l       .debug_str	00000000 
00038160 l       .debug_str	00000000 
000381e6 l       .debug_str	00000000 
00038234 l       .debug_str	00000000 
0003823d l       .debug_str	00000000 
000382c3 l       .debug_str	00000000 
000382d6 l       .debug_str	00000000 
0003835f l       .debug_str	00000000 
000383bb l       .debug_str	00000000 
000383fd l       .debug_str	00000000 
000384af l       .debug_str	00000000 
000384ee l       .debug_str	00000000 
00038593 l       .debug_str	00000000 
00038627 l       .debug_str	00000000 
0003864d l       .debug_str	00000000 
000386c9 l       .debug_str	00000000 
00038704 l       .debug_str	00000000 
00038711 l       .debug_str	00000000 
0003874a l       .debug_str	00000000 
00038762 l       .debug_str	00000000 
000387a2 l       .debug_str	00000000 
000337b9 l       .debug_str	00000000 
000387ae l       .debug_str	00000000 
0003880b l       .debug_str	00000000 
00038868 l       .debug_str	00000000 
00038915 l       .debug_str	00000000 
00038972 l       .debug_str	00000000 
00017af2 l       .debug_str	00000000 
000389df l       .debug_str	00000000 
00038a43 l       .debug_str	00000000 
00038a4e l       .debug_str	00000000 
00038a7e l       .debug_str	00000000 
00038aaa l       .debug_str	00000000 
00038b16 l       .debug_str	00000000 
00038b46 l       .debug_str	00000000 
00038b82 l       .debug_str	00000000 
00038bcc l       .debug_str	00000000 
00038bdc l       .debug_str	00000000 
00038c11 l       .debug_str	00000000 
00038c56 l       .debug_str	00000000 
00038c61 l       .debug_str	00000000 
00038ca1 l       .debug_str	00000000 
00038caf l       .debug_str	00000000 
00038d3b l       .debug_str	00000000 
00038db7 l       .debug_str	00000000 
00038dd7 l       .debug_str	00000000 
00038e31 l       .debug_str	00000000 
00038e3e l       .debug_str	00000000 
00038e77 l       .debug_str	00000000 
00038e7f l       .debug_str	00000000 
00038ed4 l       .debug_str	00000000 
00038f26 l       .debug_str	00000000 
00037e0b l       .debug_str	00000000 
00038f6d l       .debug_str	00000000 
00038fe1 l       .debug_str	00000000 
00039025 l       .debug_str	00000000 
00039071 l       .debug_str	00000000 
000390b0 l       .debug_str	00000000 
000390d6 l       .debug_str	00000000 
000390e8 l       .debug_str	00000000 
000390f2 l       .debug_str	00000000 
00039134 l       .debug_str	00000000 
000051be l       .debug_str	00000000 
000391bb l       .debug_str	00000000 
0003091d l       .debug_str	00000000 
00039237 l       .debug_str	00000000 
000392ae l       .debug_str	00000000 
000392fc l       .debug_str	00000000 
0000540e l       .debug_str	00000000 
0003938c l       .debug_str	00000000 
000393c8 l       .debug_str	00000000 
000393d5 l       .debug_str	00000000 
0003941b l       .debug_str	00000000 
00039428 l       .debug_str	00000000 
0003a16e l       .debug_str	00000000 
0003945a l       .debug_str	00000000 
000394aa l       .debug_str	00000000 
000394c1 l       .debug_str	00000000 
0003954b l       .debug_str	00000000 
0000af38 l       .debug_str	00000000 
000395c7 l       .debug_str	00000000 
000395db l       .debug_str	00000000 
00039638 l       .debug_str	00000000 
00039647 l       .debug_str	00000000 
00039658 l       .debug_str	00000000 
000396b2 l       .debug_str	00000000 
000396c1 l       .debug_str	00000000 
0003974a l       .debug_str	00000000 
00039758 l       .debug_str	00000000 
000397ae l       .debug_str	00000000 
00039802 l       .debug_str	00000000 
0003987b l       .debug_str	00000000 
00039893 l       .debug_str	00000000 
0003989d l       .debug_str	00000000 
00039934 l       .debug_str	00000000 
0003994e l       .debug_str	00000000 
0001ebe3 l       .debug_str	00000000 
00039987 l       .debug_str	00000000 
00014685 l       .debug_str	00000000 
000399ec l       .debug_str	00000000 
00039a83 l       .debug_str	00000000 
00039a87 l       .debug_str	00000000 
00039d7c l       .debug_str	00000000 
00039a8c l       .debug_str	00000000 
0005fa2d l       .debug_str	00000000 
0001509f l       .debug_str	00000000 
00039abe l       .debug_str	00000000 
0001ade9 l       .debug_str	00000000 
00039afc l       .debug_str	00000000 
0000ad09 l       .debug_str	00000000 
00039b4f l       .debug_str	00000000 
00039bdb l       .debug_str	00000000 
00039c57 l       .debug_str	00000000 
00039c76 l       .debug_str	00000000 
00039cc1 l       .debug_str	00000000 
00039cce l       .debug_str	00000000 
00039d42 l       .debug_str	00000000 
0003e080 l       .debug_str	00000000 
0004f7bb l       .debug_str	00000000 
00039d61 l       .debug_str	00000000 
00039d81 l       .debug_str	00000000 
00039d9d l       .debug_str	00000000 
00039da7 l       .debug_str	00000000 
00039e33 l       .debug_str	00000000 
00039eaf l       .debug_str	00000000 
00039ee0 l       .debug_str	00000000 
00039f63 l       .debug_str	00000000 
00039f83 l       .debug_str	00000000 
0003a009 l       .debug_str	00000000 
0003a07e l       .debug_str	00000000 
00033854 l       .debug_str	00000000 
0005cff9 l       .debug_str	00000000 
0003a0bf l       .debug_str	00000000 
000251cf l       .debug_str	00000000 
0003a10a l       .debug_str	00000000 
0003a166 l       .debug_str	00000000 
0003a172 l       .debug_str	00000000 
0003a1bb l       .debug_str	00000000 
0003a1cb l       .debug_str	00000000 
0003a210 l       .debug_str	00000000 
0003a259 l       .debug_str	00000000 
0003a29e l       .debug_str	00000000 
0003a2fa l       .debug_str	00000000 
0003a345 l       .debug_str	00000000 
0003a38c l       .debug_str	00000000 
0003a3ea l       .debug_str	00000000 
0003a435 l       .debug_str	00000000 
0003a47c l       .debug_str	00000000 
0003a4da l       .debug_str	00000000 
0003a525 l       .debug_str	00000000 
0003a56c l       .debug_str	00000000 
0003a5ca l       .debug_str	00000000 
0003a613 l       .debug_str	00000000 
0003a658 l       .debug_str	00000000 
0003a6b4 l       .debug_str	00000000 
0003a6fd l       .debug_str	00000000 
0003a742 l       .debug_str	00000000 
0003a79e l       .debug_str	00000000 
0003a7e8 l       .debug_str	00000000 
0003a82e l       .debug_str	00000000 
0003a88b l       .debug_str	00000000 
0003a8d5 l       .debug_str	00000000 
0003a91b l       .debug_str	00000000 
0003a978 l       .debug_str	00000000 
0003a9d3 l       .debug_str	00000000 
0003aa1b l       .debug_str	00000000 
0003aa5f l       .debug_str	00000000 
0003aaa7 l       .debug_str	00000000 
0003aaeb l       .debug_str	00000000 
0003ab46 l       .debug_str	00000000 
0003ab8f l       .debug_str	00000000 
0003abd4 l       .debug_str	00000000 
0003ac30 l       .debug_str	00000000 
0003ac79 l       .debug_str	00000000 
0003acbe l       .debug_str	00000000 
0003ad1a l       .debug_str	00000000 
0003ad63 l       .debug_str	00000000 
0003ada8 l       .debug_str	00000000 
0003ae04 l       .debug_str	00000000 
0003ae4e l       .debug_str	00000000 
0003ae94 l       .debug_str	00000000 
0003aef1 l       .debug_str	00000000 
0003af3b l       .debug_str	00000000 
0003af81 l       .debug_str	00000000 
0003afde l       .debug_str	00000000 
0003b028 l       .debug_str	00000000 
0003b06e l       .debug_str	00000000 
0003b0cb l       .debug_str	00000000 
0003b126 l       .debug_str	00000000 
0003b16e l       .debug_str	00000000 
0003b1b2 l       .debug_str	00000000 
0003b1fa l       .debug_str	00000000 
0003b23e l       .debug_str	00000000 
0003b299 l       .debug_str	00000000 
0003b2f4 l       .debug_str	00000000 
0003b33c l       .debug_str	00000000 
0003b380 l       .debug_str	00000000 
0003b3c9 l       .debug_str	00000000 
0003b40e l       .debug_str	00000000 
0003b46a l       .debug_str	00000000 
0003b4c6 l       .debug_str	00000000 
0003b50f l       .debug_str	00000000 
0003b554 l       .debug_str	00000000 
0003b5b0 l       .debug_str	00000000 
0003b5f9 l       .debug_str	00000000 
0003b63e l       .debug_str	00000000 
0003b69a l       .debug_str	00000000 
0003b6e3 l       .debug_str	00000000 
0003b728 l       .debug_str	00000000 
00024cef l       .debug_str	00000000 
0003b784 l       .debug_str	00000000 
0003b7c3 l       .debug_str	00000000 
0003b7f8 l       .debug_str	00000000 
0000132a l       .debug_str	00000000 
000151e3 l       .debug_str	00000000 
0001532d l       .debug_str	00000000 
0003b802 l       .debug_str	00000000 
000172f3 l       .debug_str	00000000 
00002fe0 l       .debug_str	00000000 
0003b83c l       .debug_str	00000000 
00011dc5 l       .debug_str	00000000 
0003b8ce l       .debug_str	00000000 
0001681f l       .debug_str	00000000 
0003b907 l       .debug_str	00000000 
00015d06 l       .debug_str	00000000 
0003b92e l       .debug_str	00000000 
00015c52 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
0003b968 l       .debug_str	00000000 
000159d1 l       .debug_str	00000000 
0003b98e l       .debug_str	00000000 
00015718 l       .debug_str	00000000 
0003b9e8 l       .debug_str	00000000 
0001612c l       .debug_str	00000000 
0003ba82 l       .debug_str	00000000 
0001533c l       .debug_str	00000000 
0003bb0b l       .debug_str	00000000 
0003bbb2 l       .debug_str	00000000 
0003bbeb l       .debug_str	00000000 
0003bc60 l       .debug_str	00000000 
0003bc89 l       .debug_str	00000000 
0002df97 l       .debug_str	00000000 
0003bcbe l       .debug_str	00000000 
0003bcfa l       .debug_str	00000000 
0003bd0b l       .debug_str	00000000 
0003bd44 l       .debug_str	00000000 
00014720 l       .debug_str	00000000 
0003bd51 l       .debug_str	00000000 
0003bd60 l       .debug_str	00000000 
00037637 l       .debug_str	00000000 
0003bda9 l       .debug_str	00000000 
0003bddc l       .debug_str	00000000 
0003bde9 l       .debug_str	00000000 
00060cec l       .debug_str	00000000 
0003be34 l       .debug_str	00000000 
0003be8c l       .debug_str	00000000 
0003bea1 l       .debug_str	00000000 
0003bed7 l       .debug_str	00000000 
0003bee2 l       .debug_str	00000000 
0002e0a5 l       .debug_str	00000000 
0003bf41 l       .debug_str	00000000 
0003bfb4 l       .debug_str	00000000 
0003c01b l       .debug_str	00000000 
0003c03b l       .debug_str	00000000 
0003c07a l       .debug_str	00000000 
0003c099 l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
0003c10c l       .debug_str	00000000 
0003c189 l       .debug_str	00000000 
0003c1ee l       .debug_str	00000000 
0003c24e l       .debug_str	00000000 
0003c2c1 l       .debug_str	00000000 
0003c33e l       .debug_str	00000000 
00017488 l       .debug_str	00000000 
0003c3b6 l       .debug_str	00000000 
0003c42b l       .debug_str	00000000 
0003c4a5 l       .debug_str	00000000 
0001800c l       .debug_str	00000000 
00018017 l       .debug_str	00000000 
0003c505 l       .debug_str	00000000 
0005ecda l       .debug_str	00000000 
0003c543 l       .debug_str	00000000 
0003c585 l       .debug_str	00000000 
0003c5b0 l       .debug_str	00000000 
0003c5f1 l       .debug_str	00000000 
0003c5fb l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
0005fb94 l       .debug_str	00000000 
0005a47a l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
0003c657 l       .debug_str	00000000 
00002c2a l       .debug_str	00000000 
0003c693 l       .debug_str	00000000 
00002bcd l       .debug_str	00000000 
0003c6da l       .debug_str	00000000 
0003c738 l       .debug_str	00000000 
00034067 l       .debug_str	00000000 
0003c78f l       .debug_str	00000000 
0003c7e9 l       .debug_str	00000000 
0003c7f3 l       .debug_str	00000000 
000146ee l       .debug_str	00000000 
000146f3 l       .debug_str	00000000 
0003c836 l       .debug_str	00000000 
0003c86c l       .debug_str	00000000 
0003c87c l       .debug_str	00000000 
0003c88b l       .debug_str	00000000 
0003c896 l       .debug_str	00000000 
0003414d l       .debug_str	00000000 
0003c8d0 l       .debug_str	00000000 
0003c919 l       .debug_str	00000000 
00026d14 l       .debug_str	00000000 
0003c960 l       .debug_str	00000000 
0003c99b l       .debug_str	00000000 
0003c9c0 l       .debug_str	00000000 
0003ca2c l       .debug_str	00000000 
0003ca3f l       .debug_str	00000000 
0003cab6 l       .debug_str	00000000 
0003cac1 l       .debug_str	00000000 
0003cafe l       .debug_str	00000000 
0003cb09 l       .debug_str	00000000 
0003cb8a l       .debug_str	00000000 
0003cbd0 l       .debug_str	00000000 
0003cbf7 l       .debug_str	00000000 
0003cc26 l       .debug_str	00000000 
0003cc37 l       .debug_str	00000000 
0001527f l       .debug_str	00000000 
0003cc93 l       .debug_str	00000000 
0003ccc4 l       .debug_str	00000000 
0001cfdf l       .debug_str	00000000 
0003cd0c l       .debug_str	00000000 
00021561 l       .debug_str	00000000 
0003cd4a l       .debug_str	00000000 
0003cd8e l       .debug_str	00000000 
0003cde1 l       .debug_str	00000000 
0003987c l       .debug_str	00000000 
0003ce59 l       .debug_str	00000000 
0003cea8 l       .debug_str	00000000 
0003cf3e l       .debug_str	00000000 
0003cf82 l       .debug_str	00000000 
00040cc0 l       .debug_str	00000000 
0003cffa l       .debug_str	00000000 
0003d049 l       .debug_str	00000000 
0003d0df l       .debug_str	00000000 
0003d0f9 l       .debug_str	00000000 
0003d148 l       .debug_str	00000000 
0003d181 l       .debug_str	00000000 
0003d19c l       .debug_str	00000000 
00016eaa l       .debug_str	00000000 
0003d200 l       .debug_str	00000000 
000167b6 l       .debug_str	00000000 
0003d279 l       .debug_str	00000000 
00023a28 l       .debug_str	00000000 
0003d2ea l       .debug_str	00000000 
0003d380 l       .debug_str	00000000 
0003d418 l       .debug_str	00000000 
0003d48a l       .debug_str	00000000 
0003d4b2 l       .debug_str	00000000 
0001c273 l       .debug_str	00000000 
0003d56a l       .debug_str	00000000 
0002562d l       .debug_str	00000000 
0003d5af l       .debug_str	00000000 
0003d665 l       .debug_str	00000000 
0003d6aa l       .debug_str	00000000 
00004332 l       .debug_str	00000000 
0003d6ec l       .debug_str	00000000 
0003d747 l       .debug_str	00000000 
0003d74c l       .debug_str	00000000 
0003d7a5 l       .debug_str	00000000 
0003d7d9 l       .debug_str	00000000 
0003d7ed l       .debug_str	00000000 
0003d828 l       .debug_str	00000000 
0003d86a l       .debug_str	00000000 
0003d880 l       .debug_str	00000000 
0003d8ec l       .debug_str	00000000 
00018010 l       .debug_str	00000000 
0000bb55 l       .debug_str	00000000 
0000bb60 l       .debug_str	00000000 
0003d92e l       .debug_str	00000000 
0003d96e l       .debug_str	00000000 
0003d9c8 l       .debug_str	00000000 
0003da0a l       .debug_str	00000000 
0003da65 l       .debug_str	00000000 
0003daa7 l       .debug_str	00000000 
0003dab2 l       .debug_str	00000000 
0003daf2 l       .debug_str	00000000 
0003daf8 l       .debug_str	00000000 
0003db52 l       .debug_str	00000000 
0003db5b l       .debug_str	00000000 
0003db9d l       .debug_str	00000000 
0003dbf5 l       .debug_str	00000000 
0003dc37 l       .debug_str	00000000 
0003dc90 l       .debug_str	00000000 
0003dc9a l       .debug_str	00000000 
0003dca2 l       .debug_str	00000000 
0003dcab l       .debug_str	00000000 
0003dc9e l       .debug_str	00000000 
0003dced l       .debug_str	00000000 
0003dd42 l       .debug_str	00000000 
0003dd7f l       .debug_str	00000000 
0003ddc1 l       .debug_str	00000000 
0003de18 l       .debug_str	00000000 
0003de5a l       .debug_str	00000000 
0003deb2 l       .debug_str	00000000 
0003deea l       .debug_str	00000000 
0003def6 l       .debug_str	00000000 
0003df33 l       .debug_str	00000000 
0003df95 l       .debug_str	00000000 
0003dfd6 l       .debug_str	00000000 
0003dfdf l       .debug_str	00000000 
0003e03d l       .debug_str	00000000 
0003e076 l       .debug_str	00000000 
0003e085 l       .debug_str	00000000 
0003e0c4 l       .debug_str	00000000 
0003e0d9 l       .debug_str	00000000 
0003e11f l       .debug_str	00000000 
0003e12c l       .debug_str	00000000 
0003e132 l       .debug_str	00000000 
0003e16b l       .debug_str	00000000 
0003e1f7 l       .debug_str	00000000 
0003e233 l       .debug_str	00000000 
0005a069 l       .debug_str	00000000 
0003e245 l       .debug_str	00000000 
0003e27d l       .debug_str	00000000 
0003e289 l       .debug_str	00000000 
0003e2c6 l       .debug_str	00000000 
0003e328 l       .debug_str	00000000 
0003e369 l       .debug_str	00000000 
0003e3c7 l       .debug_str	00000000 
0003e401 l       .debug_str	00000000 
0003e45b l       .debug_str	00000000 
0003e4a4 l       .debug_str	00000000 
0003e4b4 l       .debug_str	00000000 
0003e4ed l       .debug_str	00000000 
0003e56f l       .debug_str	00000000 
0003e5a9 l       .debug_str	00000000 
0003e603 l       .debug_str	00000000 
0003e63e l       .debug_str	00000000 
0003e69e l       .debug_str	00000000 
0003e6d9 l       .debug_str	00000000 
0003e739 l       .debug_str	00000000 
0003e777 l       .debug_str	00000000 
0003e7d5 l       .debug_str	00000000 
0003e813 l       .debug_str	00000000 
0003e871 l       .debug_str	00000000 
0003e8bc l       .debug_str	00000000 
0003e8c5 l       .debug_str	00000000 
0003e914 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0003e920 l       .debug_str	00000000 
0003e951 l       .debug_str	00000000 
0003e97c l       .debug_str	00000000 
0003e9ca l       .debug_str	00000000 
000152b0 l       .debug_str	00000000 
0003e9d1 l       .debug_str	00000000 
0003ea36 l       .debug_str	00000000 
0003ea67 l       .debug_str	00000000 
0003ea6f l       .debug_str	00000000 
0001592e l       .debug_str	00000000 
0003eaa0 l       .debug_str	00000000 
0003eaf9 l       .debug_str	00000000 
0003eb87 l       .debug_str	00000000 
0003ebd3 l       .debug_str	00000000 
0003ebf8 l       .debug_str	00000000 
0003ec15 l       .debug_str	00000000 
0003ec3f l       .debug_str	00000000 
0001c206 l       .debug_str	00000000 
0001c2c1 l       .debug_str	00000000 
0001c33d l       .debug_str	00000000 
0003ec61 l       .debug_str	00000000 
0003ecae l       .debug_str	00000000 
0003ecf3 l       .debug_str	00000000 
0003ed32 l       .debug_str	00000000 
0003ed7e l       .debug_str	00000000 
0003ee0d l       .debug_str	00000000 
0003ee5a l       .debug_str	00000000 
0003eee0 l       .debug_str	00000000 
0005bf6b l       .debug_str	00000000 
0003ef05 l       .debug_str	00000000 
0003ef2f l       .debug_str	00000000 
0003ef38 l       .debug_str	00000000 
0003ef6e l       .debug_str	00000000 
0003ef77 l       .debug_str	00000000 
0003f005 l       .debug_str	00000000 
0003f04b l       .debug_str	00000000 
0003f06a l       .debug_str	00000000 
0003f081 l       .debug_str	00000000 
0003f0a5 l       .debug_str	00000000 
0003f0c1 l       .debug_str	00000000 
0003f108 l       .debug_str	00000000 
0003f14d l       .debug_str	00000000 
0003f18c l       .debug_str	00000000 
0003f1d2 l       .debug_str	00000000 
0003f261 l       .debug_str	00000000 
0003f2a8 l       .debug_str	00000000 
0003f32e l       .debug_str	00000000 
0003f363 l       .debug_str	00000000 
0003f36d l       .debug_str	00000000 
0005af84 l       .debug_str	00000000 
0003f3d8 l       .debug_str	00000000 
0003f40d l       .debug_str	00000000 
0003f417 l       .debug_str	00000000 
0003f44a l       .debug_str	00000000 
0003f452 l       .debug_str	00000000 
0003f486 l       .debug_str	00000000 
0003f498 l       .debug_str	00000000 
0003f4d2 l       .debug_str	00000000 
0003f4f0 l       .debug_str	00000000 
0003f516 l       .debug_str	00000000 
0003f521 l       .debug_str	00000000 
0003f54a l       .debug_str	00000000 
0003f558 l       .debug_str	00000000 
0003f592 l       .debug_str	00000000 
0003f5c8 l       .debug_str	00000000 
0003f5ee l       .debug_str	00000000 
0003f611 l       .debug_str	00000000 
0003f63a l       .debug_str	00000000 
0003f660 l       .debug_str	00000000 
0003f69e l       .debug_str	00000000 
0003f6b8 l       .debug_str	00000000 
0003f6f6 l       .debug_str	00000000 
0003f728 l       .debug_str	00000000 
0003f734 l       .debug_str	00000000 
00061700 l       .debug_str	00000000 
0003f768 l       .debug_str	00000000 
0003f775 l       .debug_str	00000000 
00024ad4 l       .debug_str	00000000 
0003f7a7 l       .debug_str	00000000 
0003f811 l       .debug_str	00000000 
0003f881 l       .debug_str	00000000 
0003f8e8 l       .debug_str	00000000 
0003f905 l       .debug_str	00000000 
0003f944 l       .debug_str	00000000 
0003f960 l       .debug_str	00000000 
00024a96 l       .debug_str	00000000 
0003f98e l       .debug_str	00000000 
00024b72 l       .debug_str	00000000 
0003f9c3 l       .debug_str	00000000 
0003f9ff l       .debug_str	00000000 
0003fa25 l       .debug_str	00000000 
0003fa64 l       .debug_str	00000000 
0003fa74 l       .debug_str	00000000 
0003fad8 l       .debug_str	00000000 
0003fb0f l       .debug_str	00000000 
0003fb25 l       .debug_str	00000000 
0003fb74 l       .debug_str	00000000 
0003fb80 l       .debug_str	00000000 
0003fc52 l       .debug_str	00000000 
0003fbc7 l       .debug_str	00000000 
0003fc4d l       .debug_str	00000000 
0003fc71 l       .debug_str	00000000 
0003fcac l       .debug_str	00000000 
0003fcbc l       .debug_str	00000000 
00061628 l       .debug_str	00000000 
0003fcfd l       .debug_str	00000000 
0003fd37 l       .debug_str	00000000 
0003fd46 l       .debug_str	00000000 
0003fd7f l       .debug_str	00000000 
0003fd8d l       .debug_str	00000000 
0003fdc6 l       .debug_str	00000000 
0003fdd4 l       .debug_str	00000000 
0003fe24 l       .debug_str	00000000 
0003fe31 l       .debug_str	00000000 
0003fea7 l       .debug_str	00000000 
0003feb2 l       .debug_str	00000000 
0003fec4 l       .debug_str	00000000 
0003ff10 l       .debug_str	00000000 
0003ff2d l       .debug_str	00000000 
0003ffc1 l       .debug_str	00000000 
00040057 l       .debug_str	00000000 
000400c9 l       .debug_str	00000000 
000400ef l       .debug_str	00000000 
0004018e l       .debug_str	00000000 
000401ff l       .debug_str	00000000 
0000512c l       .debug_str	00000000 
00040244 l       .debug_str	00000000 
000402a7 l       .debug_str	00000000 
000402ca l       .debug_str	00000000 
0004031e l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
0002662d l       .debug_str	00000000 
00040382 l       .debug_str	00000000 
0004038f l       .debug_str	00000000 
000403ca l       .debug_str	00000000 
000403f2 l       .debug_str	00000000 
00040454 l       .debug_str	00000000 
0003bedc l       .debug_str	00000000 
000404bd l       .debug_str	00000000 
00042ceb l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
000335fc l       .debug_str	00000000 
0003360d l       .debug_str	00000000 
0004050a l       .debug_str	00000000 
0000b64d l       .debug_str	00000000 
00040555 l       .debug_str	00000000 
000405d8 l       .debug_str	00000000 
00040608 l       .debug_str	00000000 
00040690 l       .debug_str	00000000 
00040705 l       .debug_str	00000000 
00040758 l       .debug_str	00000000 
000407e4 l       .debug_str	00000000 
0004081c l       .debug_str	00000000 
00040871 l       .debug_str	00000000 
000408a2 l       .debug_str	00000000 
000408f4 l       .debug_str	00000000 
00040922 l       .debug_str	00000000 
00040976 l       .debug_str	00000000 
0004099c l       .debug_str	00000000 
000214ad l       .debug_str	00000000 
000409d3 l       .debug_str	00000000 
00040a1e l       .debug_str	00000000 
00040a3a l       .debug_str	00000000 
00040a90 l       .debug_str	00000000 
000215f4 l       .debug_str	00000000 
00040b09 l       .debug_str	00000000 
00040b59 l       .debug_str	00000000 
00040bf0 l       .debug_str	00000000 
00040c46 l       .debug_str	00000000 
00040cbf l       .debug_str	00000000 
00040cd7 l       .debug_str	00000000 
00040d6e l       .debug_str	00000000 
00040da7 l       .debug_str	00000000 
00040fd7 l       .debug_str	00000000 
00040df0 l       .debug_str	00000000 
0003fcb8 l       .debug_str	00000000 
00040e2d l       .debug_str	00000000 
00040e71 l       .debug_str	00000000 
00040ebc l       .debug_str	00000000 
00040efc l       .debug_str	00000000 
00040f26 l       .debug_str	00000000 
00040f6f l       .debug_str	00000000 
00040f7e l       .debug_str	00000000 
00040fcf l       .debug_str	00000000 
00040fe6 l       .debug_str	00000000 
0004b286 l       .debug_str	00000000 
0005c825 l       .debug_str	00000000 
0004104d l       .debug_str	00000000 
000410ae l       .debug_str	00000000 
000410cd l       .debug_str	00000000 
000410d6 l       .debug_str	00000000 
000410e2 l       .debug_str	00000000 
000185e9 l       .debug_str	00000000 
000410e8 l       .debug_str	00000000 
000410f2 l       .debug_str	00000000 
00041124 l       .debug_str	00000000 
00041134 l       .debug_str	00000000 
000411bc l       .debug_str	00000000 
000411c5 l       .debug_str	00000000 
00002fc4 l       .debug_str	00000000 
00041232 l       .debug_str	00000000 
00041271 l       .debug_str	00000000 
000179fa l       .debug_str	00000000 
00017a06 l       .debug_str	00000000 
00017a10 l       .debug_str	00000000 
00041280 l       .debug_str	00000000 
000412f0 l       .debug_str	00000000 
00041315 l       .debug_str	00000000 
00041384 l       .debug_str	00000000 
000413aa l       .debug_str	00000000 
00041419 l       .debug_str	00000000 
00041443 l       .debug_str	00000000 
0004147a l       .debug_str	00000000 
00041485 l       .debug_str	00000000 
000414c1 l       .debug_str	00000000 
000414e0 l       .debug_str	00000000 
0004151a l       .debug_str	00000000 
00041555 l       .debug_str	00000000 
00041591 l       .debug_str	00000000 
0000ef2e l       .debug_str	00000000 
000415ab l       .debug_str	00000000 
000415e7 l       .debug_str	00000000 
000415f4 l       .debug_str	00000000 
0005a2e0 l       .debug_str	00000000 
00041632 l       .debug_str	00000000 
00041678 l       .debug_str	00000000 
00041700 l       .debug_str	00000000 
00041719 l       .debug_str	00000000 
00041773 l       .debug_str	00000000 
000417b9 l       .debug_str	00000000 
000417d1 l       .debug_str	00000000 
00041851 l       .debug_str	00000000 
00041d25 l       .debug_str	00000000 
00041861 l       .debug_str	00000000 
000418a0 l       .debug_str	00000000 
000418e0 l       .debug_str	00000000 
0004196a l       .debug_str	00000000 
00041981 l       .debug_str	00000000 
000419d2 l       .debug_str	00000000 
000419e0 l       .debug_str	00000000 
000419e5 l       .debug_str	00000000 
00041a40 l       .debug_str	00000000 
000423fa l       .debug_str	00000000 
00041a97 l       .debug_str	00000000 
00041aca l       .debug_str	00000000 
00041b11 l       .debug_str	00000000 
00041b4b l       .debug_str	00000000 
00041b7a l       .debug_str	00000000 
00041bf8 l       .debug_str	00000000 
00041c7c l       .debug_str	00000000 
00041d09 l       .debug_str	00000000 
00041d1e l       .debug_str	00000000 
00041d2e l       .debug_str	00000000 
00041d7a l       .debug_str	00000000 
00041dbf l       .debug_str	00000000 
00041e56 l       .debug_str	00000000 
00041e72 l       .debug_str	00000000 
00041eb9 l       .debug_str	00000000 
00041ee7 l       .debug_str	00000000 
00041f20 l       .debug_str	00000000 
00041f42 l       .debug_str	00000000 
0001b547 l       .debug_str	00000000 
00041fc0 l       .debug_str	00000000 
00042040 l       .debug_str	00000000 
0004207f l       .debug_str	00000000 
00042109 l       .debug_str	00000000 
00042155 l       .debug_str	00000000 
00042173 l       .debug_str	00000000 
0004217e l       .debug_str	00000000 
000421e0 l       .debug_str	00000000 
00042237 l       .debug_str	00000000 
000422c4 l       .debug_str	00000000 
00042310 l       .debug_str	00000000 
000423a7 l       .debug_str	00000000 
000423f1 l       .debug_str	00000000 
0004240d l       .debug_str	00000000 
00042467 l       .debug_str	00000000 
00042470 l       .debug_str	00000000 
000424cf l       .debug_str	00000000 
00042526 l       .debug_str	00000000 
0004257f l       .debug_str	00000000 
00042594 l       .debug_str	00000000 
000425e1 l       .debug_str	00000000 
0004262c l       .debug_str	00000000 
0004263f l       .debug_str	00000000 
0002003a l       .debug_str	00000000 
0001b4f9 l       .debug_str	00000000 
0004268a l       .debug_str	00000000 
0004269f l       .debug_str	00000000 
000426ab l       .debug_str	00000000 
000426f0 l       .debug_str	00000000 
00042749 l       .debug_str	00000000 
0004275e l       .debug_str	00000000 
000427ab l       .debug_str	00000000 
000427f6 l       .debug_str	00000000 
00042809 l       .debug_str	00000000 
00042854 l       .debug_str	00000000 
00042867 l       .debug_str	00000000 
000428cb l       .debug_str	00000000 
00042904 l       .debug_str	00000000 
00042930 l       .debug_str	00000000 
00060355 l       .debug_str	00000000 
0005b71a l       .debug_str	00000000 
000429af l       .debug_str	00000000 
000429b5 l       .debug_str	00000000 
000429be l       .debug_str	00000000 
000429f6 l       .debug_str	00000000 
00042a13 l       .debug_str	00000000 
00042a4f l       .debug_str	00000000 
00042a6c l       .debug_str	00000000 
00042ac8 l       .debug_str	00000000 
00042b00 l       .debug_str	00000000 
00042b5c l       .debug_str	00000000 
00026cb4 l       .debug_str	00000000 
00042b94 l       .debug_str	00000000 
00042bd2 l       .debug_str	00000000 
00042bee l       .debug_str	00000000 
00042c44 l       .debug_str	00000000 
00042cab l       .debug_str	00000000 
00042ce3 l       .debug_str	00000000 
00042cef l       .debug_str	00000000 
00042d56 l       .debug_str	00000000 
00042d95 l       .debug_str	00000000 
00042da6 l       .debug_str	00000000 
00042ddf l       .debug_str	00000000 
00050d87 l       .debug_str	00000000 
00042dfa l       .debug_str	00000000 
00042e36 l       .debug_str	00000000 
00042e2f l       .debug_str	00000000 
00042e3f l       .debug_str	00000000 
00042e51 l       .debug_str	00000000 
00042e9c l       .debug_str	00000000 
00042eb4 l       .debug_str	00000000 
00042ebe l       .debug_str	00000000 
00042ed5 l       .debug_str	00000000 
00042ee4 l       .debug_str	00000000 
00042f26 l       .debug_str	00000000 
00042f3f l       .debug_str	00000000 
00042fb3 l       .debug_str	00000000 
00042fc2 l       .debug_str	00000000 
00042ffb l       .debug_str	00000000 
00043011 l       .debug_str	00000000 
00043051 l       .debug_str	00000000 
0004305c l       .debug_str	00000000 
000430db l       .debug_str	00000000 
0005ae93 l       .debug_str	00000000 
000430fa l       .debug_str	00000000 
0004310f l       .debug_str	00000000 
00043119 l       .debug_str	00000000 
0001bb74 l       .debug_str	00000000 
0004311e l       .debug_str	00000000 
0004314f l       .debug_str	00000000 
00043162 l       .debug_str	00000000 
0004316c l       .debug_str	00000000 
00043189 l       .debug_str	00000000 
000431c4 l       .debug_str	00000000 
000431f9 l       .debug_str	00000000 
0004322a l       .debug_str	00000000 
0004323e l       .debug_str	00000000 
00043249 l       .debug_str	00000000 
00043267 l       .debug_str	00000000 
000432a2 l       .debug_str	00000000 
000432d8 l       .debug_str	00000000 
00043309 l       .debug_str	00000000 
0004331d l       .debug_str	00000000 
00043328 l       .debug_str	00000000 
00043346 l       .debug_str	00000000 
00043381 l       .debug_str	00000000 
000433b7 l       .debug_str	00000000 
000433e8 l       .debug_str	00000000 
000433fc l       .debug_str	00000000 
00043407 l       .debug_str	00000000 
00043425 l       .debug_str	00000000 
00043460 l       .debug_str	00000000 
00043496 l       .debug_str	00000000 
000434c7 l       .debug_str	00000000 
00047d14 l       .debug_str	00000000 
000434dc l       .debug_str	00000000 
000434e8 l       .debug_str	00000000 
00043507 l       .debug_str	00000000 
00043542 l       .debug_str	00000000 
00043579 l       .debug_str	00000000 
000435aa l       .debug_str	00000000 
000435bd l       .debug_str	00000000 
000435c7 l       .debug_str	00000000 
000435e4 l       .debug_str	00000000 
0004361f l       .debug_str	00000000 
00043654 l       .debug_str	00000000 
00043685 l       .debug_str	00000000 
00043699 l       .debug_str	00000000 
000436a4 l       .debug_str	00000000 
000436c2 l       .debug_str	00000000 
000436fd l       .debug_str	00000000 
00043733 l       .debug_str	00000000 
00043764 l       .debug_str	00000000 
00043778 l       .debug_str	00000000 
000437e7 l       .debug_str	00000000 
00043822 l       .debug_str	00000000 
0004386b l       .debug_str	00000000 
000438b0 l       .debug_str	00000000 
0004390c l       .debug_str	00000000 
00043955 l       .debug_str	00000000 
0004399a l       .debug_str	00000000 
000439f6 l       .debug_str	00000000 
00043a3f l       .debug_str	00000000 
00043a84 l       .debug_str	00000000 
00043ae0 l       .debug_str	00000000 
00043aeb l       .debug_str	00000000 
00043b09 l       .debug_str	00000000 
00043b44 l       .debug_str	00000000 
00043b7a l       .debug_str	00000000 
00043bab l       .debug_str	00000000 
00043bbf l       .debug_str	00000000 
00043bca l       .debug_str	00000000 
00043be8 l       .debug_str	00000000 
00043c23 l       .debug_str	00000000 
00043c59 l       .debug_str	00000000 
00043cc8 l       .debug_str	00000000 
00043d03 l       .debug_str	00000000 
00043d34 l       .debug_str	00000000 
00043d49 l       .debug_str	00000000 
00043d4e l       .debug_str	00000000 
00043d5a l       .debug_str	00000000 
00043d79 l       .debug_str	00000000 
00043db4 l       .debug_str	00000000 
00043deb l       .debug_str	00000000 
00043e5a l       .debug_str	00000000 
00043e96 l       .debug_str	00000000 
0000ae0a l       .debug_str	00000000 
00043edf l       .debug_str	00000000 
00043eea l       .debug_str	00000000 
00043f31 l       .debug_str	00000000 
00043f3b l       .debug_str	00000000 
00043fbd l       .debug_str	00000000 
00043fda l       .debug_str	00000000 
000189d6 l       .debug_str	00000000 
00044035 l       .debug_str	00000000 
0004408f l       .debug_str	00000000 
0004409c l       .debug_str	00000000 
0004410e l       .debug_str	00000000 
00044172 l       .debug_str	00000000 
0004417d l       .debug_str	00000000 
000441f6 l       .debug_str	00000000 
00044202 l       .debug_str	00000000 
0004427e l       .debug_str	00000000 
00044284 l       .debug_str	00000000 
0004428b l       .debug_str	00000000 
000442c7 l       .debug_str	00000000 
00015eb0 l       .debug_str	00000000 
00044310 l       .debug_str	00000000 
00044354 l       .debug_str	00000000 
0004439f l       .debug_str	00000000 
000443de l       .debug_str	00000000 
00044403 l       .debug_str	00000000 
00044459 l       .debug_str	00000000 
000444c7 l       .debug_str	00000000 
00044547 l       .debug_str	00000000 
000445b4 l       .debug_str	00000000 
0004463f l       .debug_str	00000000 
000446b3 l       .debug_str	00000000 
000446f3 l       .debug_str	00000000 
00044774 l       .debug_str	00000000 
000447b5 l       .debug_str	00000000 
00044819 l       .debug_str	00000000 
000448c8 l       .debug_str	00000000 
00044912 l       .debug_str	00000000 
0004495f l       .debug_str	00000000 
000449a5 l       .debug_str	00000000 
000449af l       .debug_str	00000000 
000449e8 l       .debug_str	00000000 
00044a17 l       .debug_str	00000000 
00044a78 l       .debug_str	00000000 
00044aa7 l       .debug_str	00000000 
00044ae4 l       .debug_str	00000000 
00044b73 l       .debug_str	00000000 
00044ba8 l       .debug_str	00000000 
00044c2e l       .debug_str	00000000 
00044cb4 l       .debug_str	00000000 
00044d08 l       .debug_str	00000000 
00044d91 l       .debug_str	00000000 
0001b410 l       .debug_str	00000000 
00044ddf l       .debug_str	00000000 
00044e6d l       .debug_str	00000000 
00044ec1 l       .debug_str	00000000 
00044f00 l       .debug_str	00000000 
00044f4b l       .debug_str	00000000 
00044fcd l       .debug_str	00000000 
00044fe9 l       .debug_str	00000000 
00045042 l       .debug_str	00000000 
0004509b l       .debug_str	00000000 
000450d8 l       .debug_str	00000000 
00045119 l       .debug_str	00000000 
0004517a l       .debug_str	00000000 
000451eb l       .debug_str	00000000 
0004521b l       .debug_str	00000000 
00045261 l       .debug_str	00000000 
000452d3 l       .debug_str	00000000 
00045367 l       .debug_str	00000000 
0004538b l       .debug_str	00000000 
00045407 l       .debug_str	00000000 
00045441 l       .debug_str	00000000 
00045483 l       .debug_str	00000000 
00045533 l       .debug_str	00000000 
00045572 l       .debug_str	00000000 
00045615 l       .debug_str	00000000 
00045671 l       .debug_str	00000000 
000456ce l       .debug_str	00000000 
00045779 l       .debug_str	00000000 
000457b2 l       .debug_str	00000000 
0004582e l       .debug_str	00000000 
00045866 l       .debug_str	00000000 
00045872 l       .debug_str	00000000 
000458af l       .debug_str	00000000 
00045907 l       .debug_str	00000000 
00045927 l       .debug_str	00000000 
00045980 l       .debug_str	00000000 
000459d9 l       .debug_str	00000000 
00045a32 l       .debug_str	00000000 
00045a8c l       .debug_str	00000000 
00045ac2 l       .debug_str	00000000 
00045ad2 l       .debug_str	00000000 
00045ae1 l       .debug_str	00000000 
00045aea l       .debug_str	00000000 
00045b21 l       .debug_str	00000000 
00045b5d l       .debug_str	00000000 
00045b6d l       .debug_str	00000000 
00045bc9 l       .debug_str	00000000 
00045c2b l       .debug_str	00000000 
00038e3a l       .debug_str	00000000 
00045c75 l       .debug_str	00000000 
00045cb0 l       .debug_str	00000000 
00045cd5 l       .debug_str	00000000 
00045d34 l       .debug_str	00000000 
00045d7e l       .debug_str	00000000 
00045db9 l       .debug_str	00000000 
00045dde l       .debug_str	00000000 
00045e3d l       .debug_str	00000000 
00045ea6 l       .debug_str	00000000 
00045eaf l       .debug_str	00000000 
00045ee6 l       .debug_str	00000000 
00045f42 l       .debug_str	00000000 
00045fa4 l       .debug_str	00000000 
00046003 l       .debug_str	00000000 
00046062 l       .debug_str	00000000 
00046098 l       .debug_str	00000000 
000460a9 l       .debug_str	00000000 
000460b9 l       .debug_str	00000000 
000460c3 l       .debug_str	00000000 
000460fb l       .debug_str	00000000 
00046158 l       .debug_str	00000000 
000461bb l       .debug_str	00000000 
00046206 l       .debug_str	00000000 
00046241 l       .debug_str	00000000 
00046267 l       .debug_str	00000000 
000462c7 l       .debug_str	00000000 
00046312 l       .debug_str	00000000 
0004634d l       .debug_str	00000000 
00046373 l       .debug_str	00000000 
000463d3 l       .debug_str	00000000 
00046409 l       .debug_str	00000000 
0004641a l       .debug_str	00000000 
0004642a l       .debug_str	00000000 
00046434 l       .debug_str	00000000 
0004646c l       .debug_str	00000000 
000464c9 l       .debug_str	00000000 
0004652c l       .debug_str	00000000 
0004658c l       .debug_str	00000000 
000465ec l       .debug_str	00000000 
00046622 l       .debug_str	00000000 
00046633 l       .debug_str	00000000 
00046643 l       .debug_str	00000000 
0004664d l       .debug_str	00000000 
00046685 l       .debug_str	00000000 
000466e2 l       .debug_str	00000000 
00046745 l       .debug_str	00000000 
00046790 l       .debug_str	00000000 
000467cb l       .debug_str	00000000 
000467f1 l       .debug_str	00000000 
00046851 l       .debug_str	00000000 
0004689c l       .debug_str	00000000 
000468d7 l       .debug_str	00000000 
000468fd l       .debug_str	00000000 
0004695d l       .debug_str	00000000 
00046993 l       .debug_str	00000000 
000469a4 l       .debug_str	00000000 
000469b4 l       .debug_str	00000000 
000469be l       .debug_str	00000000 
000469f6 l       .debug_str	00000000 
00046a53 l       .debug_str	00000000 
00046ab6 l       .debug_str	00000000 
00046b16 l       .debug_str	00000000 
00046b76 l       .debug_str	00000000 
00046bac l       .debug_str	00000000 
0000bc11 l       .debug_str	00000000 
00046bbf l       .debug_str	00000000 
00046bd1 l       .debug_str	00000000 
00046bdd l       .debug_str	00000000 
00046c18 l       .debug_str	00000000 
00046c77 l       .debug_str	00000000 
00046cdc l       .debug_str	00000000 
00046d3e l       .debug_str	00000000 
00046d79 l       .debug_str	00000000 
00046da1 l       .debug_str	00000000 
00046e03 l       .debug_str	00000000 
0001e7f3 l       .debug_str	00000000 
0002120f l       .debug_str	00000000 
00014775 l       .debug_str	00000000 
00046e39 l       .debug_str	00000000 
00046e74 l       .debug_str	00000000 
00046eb4 l       .debug_str	00000000 
00046ed1 l       .debug_str	00000000 
00046f15 l       .debug_str	00000000 
00046f36 l       .debug_str	00000000 
00046f76 l       .debug_str	00000000 
00046f93 l       .debug_str	00000000 
00046fd7 l       .debug_str	00000000 
00046ff8 l       .debug_str	00000000 
0004705a l       .debug_str	00000000 
000470c1 l       .debug_str	00000000 
000470fc l       .debug_str	00000000 
0004711f l       .debug_str	00000000 
00047185 l       .debug_str	00000000 
000471c0 l       .debug_str	00000000 
000471e2 l       .debug_str	00000000 
0004721d l       .debug_str	00000000 
00047241 l       .debug_str	00000000 
0004727c l       .debug_str	00000000 
0004729f l       .debug_str	00000000 
000472da l       .debug_str	00000000 
000472fe l       .debug_str	00000000 
00047339 l       .debug_str	00000000 
0004735c l       .debug_str	00000000 
00047397 l       .debug_str	00000000 
000473bb l       .debug_str	00000000 
00047406 l       .debug_str	00000000 
00047468 l       .debug_str	00000000 
000474a3 l       .debug_str	00000000 
000474c6 l       .debug_str	00000000 
00047511 l       .debug_str	00000000 
0004754c l       .debug_str	00000000 
00047572 l       .debug_str	00000000 
000475ad l       .debug_str	00000000 
000475d3 l       .debug_str	00000000 
00047624 l       .debug_str	00000000 
00047672 l       .debug_str	00000000 
000476bd l       .debug_str	00000000 
000476f0 l       .debug_str	00000000 
0004772b l       .debug_str	00000000 
00047750 l       .debug_str	00000000 
000477dc l       .debug_str	00000000 
00047810 l       .debug_str	00000000 
0004788c l       .debug_str	00000000 
000478d1 l       .debug_str	00000000 
0004791d l       .debug_str	00000000 
00047980 l       .debug_str	00000000 
000479bb l       .debug_str	00000000 
000479df l       .debug_str	00000000 
00047a1a l       .debug_str	00000000 
00047a41 l       .debug_str	00000000 
00047a8d l       .debug_str	00000000 
00047ac8 l       .debug_str	00000000 
00047aef l       .debug_str	00000000 
00047b3a l       .debug_str	00000000 
00047b86 l       .debug_str	00000000 
00047bd2 l       .debug_str	00000000 
00047c03 l       .debug_str	00000000 
00047c0b l       .debug_str	00000000 
00011ae2 l       .debug_str	00000000 
00047c57 l       .debug_str	00000000 
00047c8c l       .debug_str	00000000 
00047cba l       .debug_str	00000000 
00047cc3 l       .debug_str	00000000 
00047d11 l       .debug_str	00000000 
00047d19 l       .debug_str	00000000 
00047d7e l       .debug_str	00000000 
00047dd1 l       .debug_str	00000000 
00047e31 l       .debug_str	00000000 
00047e50 l       .debug_str	00000000 
00047eb3 l       .debug_str	00000000 
00047ed5 l       .debug_str	00000000 
00047f20 l       .debug_str	00000000 
00047f85 l       .debug_str	00000000 
00047fa7 l       .debug_str	00000000 
00048010 l       .debug_str	00000000 
0004804d l       .debug_str	00000000 
000480b6 l       .debug_str	00000000 
00048146 l       .debug_str	00000000 
0000bcd4 l       .debug_str	00000000 
000481a6 l       .debug_str	00000000 
00048209 l       .debug_str	00000000 
00048272 l       .debug_str	00000000 
000482a5 l       .debug_str	00000000 
000482ed l       .debug_str	00000000 
00048367 l       .debug_str	00000000 
000483b8 l       .debug_str	00000000 
0004840f l       .debug_str	00000000 
0001c995 l       .debug_str	00000000 
00048457 l       .debug_str	00000000 
000484b5 l       .debug_str	00000000 
000484d2 l       .debug_str	00000000 
0004853e l       .debug_str	00000000 
00048583 l       .debug_str	00000000 
000485d1 l       .debug_str	00000000 
00048619 l       .debug_str	00000000 
00048623 l       .debug_str	00000000 
00048691 l       .debug_str	00000000 
000486cd l       .debug_str	00000000 
000486f0 l       .debug_str	00000000 
00048760 l       .debug_str	00000000 
000487a8 l       .debug_str	00000000 
000487b1 l       .debug_str	00000000 
0004880e l       .debug_str	00000000 
00048871 l       .debug_str	00000000 
000488d1 l       .debug_str	00000000 
00048931 l       .debug_str	00000000 
0004898d l       .debug_str	00000000 
000489ec l       .debug_str	00000000 
00048a4c l       .debug_str	00000000 
00048a67 l       .debug_str	00000000 
0001c8f3 l       .debug_str	00000000 
00048abb l       .debug_str	00000000 
00048b39 l       .debug_str	00000000 
00048b63 l       .debug_str	00000000 
00048bc5 l       .debug_str	00000000 
00048c26 l       .debug_str	00000000 
00048c80 l       .debug_str	00000000 
00048ce5 l       .debug_str	00000000 
00048d37 l       .debug_str	00000000 
00048d7f l       .debug_str	00000000 
00048d9a l       .debug_str	00000000 
00048e14 l       .debug_str	00000000 
00048e61 l       .debug_str	00000000 
00048edb l       .debug_str	00000000 
00048f28 l       .debug_str	00000000 
00048f7c l       .debug_str	00000000 
00048fce l       .debug_str	00000000 
00049036 l       .debug_str	00000000 
00049096 l       .debug_str	00000000 
000490f0 l       .debug_str	00000000 
0004914f l       .debug_str	00000000 
000491a9 l       .debug_str	00000000 
00049206 l       .debug_str	00000000 
00024430 l       .debug_str	00000000 
00049244 l       .debug_str	00000000 
00025413 l       .debug_str	00000000 
0004927f l       .debug_str	00000000 
000492f1 l       .debug_str	00000000 
000493c4 l       .debug_str	00000000 
0001cab3 l       .debug_str	00000000 
0004940c l       .debug_str	00000000 
0004945a l       .debug_str	00000000 
00049464 l       .debug_str	00000000 
000494ac l       .debug_str	00000000 
000494b8 l       .debug_str	00000000 
0004952c l       .debug_str	00000000 
00049537 l       .debug_str	00000000 
00049573 l       .debug_str	00000000 
0004959a l       .debug_str	00000000 
000495eb l       .debug_str	00000000 
000495f8 l       .debug_str	00000000 
00049606 l       .debug_str	00000000 
00049619 l       .debug_str	00000000 
00049624 l       .debug_str	00000000 
00049666 l       .debug_str	00000000 
0004967b l       .debug_str	00000000 
000496e5 l       .debug_str	00000000 
00049742 l       .debug_str	00000000 
000497a2 l       .debug_str	00000000 
00049802 l       .debug_str	00000000 
00049874 l       .debug_str	00000000 
000498c1 l       .debug_str	00000000 
00049920 l       .debug_str	00000000 
0004997a l       .debug_str	00000000 
000499ed l       .debug_str	00000000 
000499fa l       .debug_str	00000000 
00049a5a l       .debug_str	00000000 
00049a79 l       .debug_str	00000000 
00049ae1 l       .debug_str	00000000 
00049afc l       .debug_str	00000000 
00049b54 l       .debug_str	00000000 
00049b9e l       .debug_str	00000000 
00049c02 l       .debug_str	00000000 
00049c21 l       .debug_str	00000000 
00049c83 l       .debug_str	00000000 
00049ce9 l       .debug_str	00000000 
00049d69 l       .debug_str	00000000 
00049db8 l       .debug_str	00000000 
00049e2e l       .debug_str	00000000 
00049ea4 l       .debug_str	00000000 
00049f79 l       .debug_str	00000000 
00049fd6 l       .debug_str	00000000 
0004a034 l       .debug_str	00000000 
0004a0b4 l       .debug_str	00000000 
0004a123 l       .debug_str	00000000 
0004a1a1 l       .debug_str	00000000 
0004a1f4 l       .debug_str	00000000 
0004a259 l       .debug_str	00000000 
0004a2b9 l       .debug_str	00000000 
0004a327 l       .debug_str	00000000 
0004a3bf l       .debug_str	00000000 
0004a44e l       .debug_str	00000000 
0004a4dc l       .debug_str	00000000 
0004a56a l       .debug_str	00000000 
0004a67a l       .debug_str	00000000 
0004a6ee l       .debug_str	00000000 
0004a730 l       .debug_str	00000000 
0004a779 l       .debug_str	00000000 
0004a7d3 l       .debug_str	00000000 
0004a84c l       .debug_str	00000000 
0004a859 l       .debug_str	00000000 
0004a85e l       .debug_str	00000000 
0004a8ca l       .debug_str	00000000 
0004a911 l       .debug_str	00000000 
0004a99b l       .debug_str	00000000 
0004a9ba l       .debug_str	00000000 
0004aa44 l       .debug_str	00000000 
0004aa68 l       .debug_str	00000000 
0004aaac l       .debug_str	00000000 
0004ab10 l       .debug_str	00000000 
0004ab54 l       .debug_str	00000000 
0004abc6 l       .debug_str	00000000 
0004ac84 l       .debug_str	00000000 
0004ace6 l       .debug_str	00000000 
0004ad7e l       .debug_str	00000000 
0004ae2d l       .debug_str	00000000 
0004aec3 l       .debug_str	00000000 
0004af56 l       .debug_str	00000000 
0004af9a l       .debug_str	00000000 
0004afed l       .debug_str	00000000 
0004b071 l       .debug_str	00000000 
0004b0ff l       .debug_str	00000000 
0004b153 l       .debug_str	00000000 
0004b164 l       .debug_str	00000000 
0004b1e9 l       .debug_str	00000000 
0004b275 l       .debug_str	00000000 
0004b27e l       .debug_str	00000000 
0004b28b l       .debug_str	00000000 
0004b2e2 l       .debug_str	00000000 
0004b367 l       .debug_str	00000000 
0004b3b9 l       .debug_str	00000000 
0004b3c8 l       .debug_str	00000000 
0004b40f l       .debug_str	00000000 
0004b473 l       .debug_str	00000000 
0004b494 l       .debug_str	00000000 
0004b514 l       .debug_str	00000000 
0004b57f l       .debug_str	00000000 
0004b5fd l       .debug_str	00000000 
0004b64c l       .debug_str	00000000 
0004b6ab l       .debug_str	00000000 
0004b743 l       .debug_str	00000000 
0004b7e9 l       .debug_str	00000000 
0004b87f l       .debug_str	00000000 
0004b909 l       .debug_str	00000000 
0004b97f l       .debug_str	00000000 
0004b9c8 l       .debug_str	00000000 
0004ba24 l       .debug_str	00000000 
0004ba9f l       .debug_str	00000000 
0004bb0b l       .debug_str	00000000 
0004bb95 l       .debug_str	00000000 
0004bbd9 l       .debug_str	00000000 
0004bc3a l       .debug_str	00000000 
0004bc7e l       .debug_str	00000000 
0004bd02 l       .debug_str	00000000 
0004bd8c l       .debug_str	00000000 
0004bdde l       .debug_str	00000000 
0004be5c l       .debug_str	00000000 
0004bee1 l       .debug_str	00000000 
0004bf38 l       .debug_str	00000000 
0004bfb9 l       .debug_str	00000000 
0004c077 l       .debug_str	00000000 
0004c0d6 l       .debug_str	00000000 
0004c139 l       .debug_str	00000000 
0004c15e l       .debug_str	00000000 
0004c1c2 l       .debug_str	00000000 
0004c1e3 l       .debug_str	00000000 
0004c263 l       .debug_str	00000000 
0004c2ce l       .debug_str	00000000 
0004c34c l       .debug_str	00000000 
0004c39b l       .debug_str	00000000 
0004c3fa l       .debug_str	00000000 
0004c492 l       .debug_str	00000000 
0004c538 l       .debug_str	00000000 
0004c5ce l       .debug_str	00000000 
0004c658 l       .debug_str	00000000 
0004c6ce l       .debug_str	00000000 
0004c717 l       .debug_str	00000000 
0004c773 l       .debug_str	00000000 
0004c7ee l       .debug_str	00000000 
0004c85a l       .debug_str	00000000 
0004c8e4 l       .debug_str	00000000 
0004c928 l       .debug_str	00000000 
0004c989 l       .debug_str	00000000 
0004c9cd l       .debug_str	00000000 
0004ca51 l       .debug_str	00000000 
0004cadb l       .debug_str	00000000 
0004cb59 l       .debug_str	00000000 
0004cbde l       .debug_str	00000000 
0004cc35 l       .debug_str	00000000 
0004ccb6 l       .debug_str	00000000 
0004cd74 l       .debug_str	00000000 
0004cdd3 l       .debug_str	00000000 
0004ce06 l       .debug_str	00000000 
0004ce39 l       .debug_str	00000000 
0004ce6c l       .debug_str	00000000 
0004ce9f l       .debug_str	00000000 
0004ced2 l       .debug_str	00000000 
0004cf05 l       .debug_str	00000000 
0004cf38 l       .debug_str	00000000 
0004cf8c l       .debug_str	00000000 
0004cfba l       .debug_str	00000000 
0004d00e l       .debug_str	00000000 
0005f9eb l       .debug_str	00000000 
00012246 l       .debug_str	00000000 
0004d021 l       .debug_str	00000000 
0004d025 l       .debug_str	00000000 
0004d029 l       .debug_str	00000000 
0004d02d l       .debug_str	00000000 
0004d034 l       .debug_str	00000000 
0004d039 l       .debug_str	00000000 
0004d069 l       .debug_str	00000000 
0004d0bb l       .debug_str	00000000 
0004d0fc l       .debug_str	00000000 
0004d109 l       .debug_str	00000000 
0004d148 l       .debug_str	00000000 
0004d153 l       .debug_str	00000000 
0004d18f l       .debug_str	00000000 
0004d19d l       .debug_str	00000000 
0004d1d1 l       .debug_str	00000000 
0004d20c l       .debug_str	00000000 
0004d24a l       .debug_str	00000000 
0004d258 l       .debug_str	00000000 
0004d291 l       .debug_str	00000000 
0004d29b l       .debug_str	00000000 
0004d2d7 l       .debug_str	00000000 
0004d333 l       .debug_str	00000000 
0004d33a l       .debug_str	00000000 
0004d398 l       .debug_str	00000000 
0004d3a1 l       .debug_str	00000000 
0004d408 l       .debug_str	00000000 
0004d419 l       .debug_str	00000000 
0004d476 l       .debug_str	00000000 
0004d4d5 l       .debug_str	00000000 
0004d531 l       .debug_str	00000000 
0004d58f l       .debug_str	00000000 
0004d5f6 l       .debug_str	00000000 
0004d653 l       .debug_str	00000000 
0004d6b2 l       .debug_str	00000000 
0004d6eb l       .debug_str	00000000 
0004d6f5 l       .debug_str	00000000 
0004d75d l       .debug_str	00000000 
0004d790 l       .debug_str	00000000 
0004d79a l       .debug_str	00000000 
0004d7d0 l       .debug_str	00000000 
0004d7dc l       .debug_str	00000000 
0004d813 l       .debug_str	00000000 
0004d820 l       .debug_str	00000000 
0004d864 l       .debug_str	00000000 
0004d87e l       .debug_str	00000000 
0004d8ef l       .debug_str	00000000 
0004d902 l       .debug_str	00000000 
0004d973 l       .debug_str	00000000 
0004d9b6 l       .debug_str	00000000 
0004d9c0 l       .debug_str	00000000 
0004da0a l       .debug_str	00000000 
0004da51 l       .debug_str	00000000 
0004da9e l       .debug_str	00000000 
0004dae8 l       .debug_str	00000000 
0004db1a l       .debug_str	00000000 
0004db23 l       .debug_str	00000000 
0004db57 l       .debug_str	00000000 
0004db90 l       .debug_str	00000000 
0004dbcc l       .debug_str	00000000 
0004dbde l       .debug_str	00000000 
0004dc1f l       .debug_str	00000000 
0004dc7e l       .debug_str	00000000 
0004dcaf l       .debug_str	00000000 
0004dcc5 l       .debug_str	00000000 
0004dcfa l       .debug_str	00000000 
0004dd57 l       .debug_str	00000000 
0004ddbb l       .debug_str	00000000 
0004de1a l       .debug_str	00000000 
0004de7a l       .debug_str	00000000 
0004ded8 l       .debug_str	00000000 
000217a0 l       .debug_str	00000000 
0004df3d l       .debug_str	00000000 
0004df83 l       .debug_str	00000000 
0004dfc3 l       .debug_str	00000000 
0004e04b l       .debug_str	00000000 
0005c421 l       .debug_str	00000000 
0004e0d2 l       .debug_str	00000000 
0004e105 l       .debug_str	00000000 
0004e179 l       .debug_str	00000000 
0004e1f2 l       .debug_str	00000000 
0004e266 l       .debug_str	00000000 
0004e2c5 l       .debug_str	00000000 
0004e322 l       .debug_str	00000000 
0004e37c l       .debug_str	00000000 
0004e3d8 l       .debug_str	00000000 
0004e435 l       .debug_str	00000000 
0004e494 l       .debug_str	00000000 
0004e4fc l       .debug_str	00000000 
0004e566 l       .debug_str	00000000 
0004e5cf l       .debug_str	00000000 
0004e62d l       .debug_str	00000000 
0004e69f l       .debug_str	00000000 
0004e6a3 l       .debug_str	00000000 
0004e716 l       .debug_str	00000000 
0004e774 l       .debug_str	00000000 
0004e7d0 l       .debug_str	00000000 
0004e841 l       .debug_str	00000000 
0004e8b7 l       .debug_str	00000000 
0004e8ee l       .debug_str	00000000 
0004e94a l       .debug_str	00000000 
0004e99e l       .debug_str	00000000 
0004e9fc l       .debug_str	00000000 
0004ea68 l       .debug_str	00000000 
0004eabd l       .debug_str	00000000 
0004eaf0 l       .debug_str	00000000 
0004eafe l       .debug_str	00000000 
0004eb36 l       .debug_str	00000000 
0004eb49 l       .debug_str	00000000 
0004eb7e l       .debug_str	00000000 
0004ebb4 l       .debug_str	00000000 
0004ec0f l       .debug_str	00000000 
0004ec42 l       .debug_str	00000000 
0004ec49 l       .debug_str	00000000 
0004ec8b l       .debug_str	00000000 
0004ecbc l       .debug_str	00000000 
0004eced l       .debug_str	00000000 
0004ed20 l       .debug_str	00000000 
0004ed27 l       .debug_str	00000000 
0004ed54 l       .debug_str	00000000 
0004ed8f l       .debug_str	00000000 
0004eda2 l       .debug_str	00000000 
0004edd3 l       .debug_str	00000000 
0004eddd l       .debug_str	00000000 
0004ee3e l       .debug_str	00000000 
0004eea6 l       .debug_str	00000000 
0004eee3 l       .debug_str	00000000 
0004ef31 l       .debug_str	00000000 
0004ef6d l       .debug_str	00000000 
0004efa9 l       .debug_str	00000000 
0004efe2 l       .debug_str	00000000 
0004f01c l       .debug_str	00000000 
0004f055 l       .debug_str	00000000 
0004f08c l       .debug_str	00000000 
0004f0c5 l       .debug_str	00000000 
0004f0ff l       .debug_str	00000000 
0004f145 l       .debug_str	00000000 
0004f168 l       .debug_str	00000000 
0004f1ae l       .debug_str	00000000 
0004f1d1 l       .debug_str	00000000 
0004f21a l       .debug_str	00000000 
0004f240 l       .debug_str	00000000 
0004f289 l       .debug_str	00000000 
0004f2af l       .debug_str	00000000 
0004f2f9 l       .debug_str	00000000 
0004f320 l       .debug_str	00000000 
0004f36a l       .debug_str	00000000 
0004f391 l       .debug_str	00000000 
0004f3de l       .debug_str	00000000 
0004f408 l       .debug_str	00000000 
0004f455 l       .debug_str	00000000 
0004f47f l       .debug_str	00000000 
0004f4b2 l       .debug_str	00000000 
0004f4de l       .debug_str	00000000 
0004f534 l       .debug_str	00000000 
0004f55f l       .debug_str	00000000 
0004f5b7 l       .debug_str	00000000 
0004f60d l       .debug_str	00000000 
0004f646 l       .debug_str	00000000 
0004f651 l       .debug_str	00000000 
00020274 l       .debug_str	00000000 
0004f68a l       .debug_str	00000000 
0004f6b1 l       .debug_str	00000000 
0004f6ea l       .debug_str	00000000 
0004f731 l       .debug_str	00000000 
0004f73e l       .debug_str	00000000 
0004f958 l       .debug_str	00000000 
0004f76d l       .debug_str	00000000 
0004f7ad l       .debug_str	00000000 
0004f7c1 l       .debug_str	00000000 
0004f803 l       .debug_str	00000000 
0004f834 l       .debug_str	00000000 
0004f864 l       .debug_str	00000000 
0004f895 l       .debug_str	00000000 
0004f8c6 l       .debug_str	00000000 
0004f8fd l       .debug_str	00000000 
0004f908 l       .debug_str	00000000 
0004f948 l       .debug_str	00000000 
0004f95c l       .debug_str	00000000 
0004f998 l       .debug_str	00000000 
0004f9a8 l       .debug_str	00000000 
0004f9dd l       .debug_str	00000000 
0004f9e7 l       .debug_str	00000000 
0004fa1c l       .debug_str	00000000 
0004fa26 l       .debug_str	00000000 
0004fa7b l       .debug_str	00000000 
0004fac3 l       .debug_str	00000000 
0004fb09 l       .debug_str	00000000 
0004fb50 l       .debug_str	00000000 
0004fb99 l       .debug_str	00000000 
0004fbeb l       .debug_str	00000000 
0004fc3d l       .debug_str	00000000 
0004fcdb l       .debug_str	00000000 
0004fd0d l       .debug_str	00000000 
0004fd46 l       .debug_str	00000000 
0004fd5b l       .debug_str	00000000 
0004fd96 l       .debug_str	00000000 
0004fdad l       .debug_str	00000000 
0004fdeb l       .debug_str	00000000 
0004fe05 l       .debug_str	00000000 
0004fe67 l       .debug_str	00000000 
0004fe8c l       .debug_str	00000000 
0004fee7 l       .debug_str	00000000 
0004fef6 l       .debug_str	00000000 
0004ff6b l       .debug_str	00000000 
0004ff88 l       .debug_str	00000000 
0004ffc2 l       .debug_str	00000000 
0004ffff l       .debug_str	00000000 
0005000a l       .debug_str	00000000 
00050042 l       .debug_str	00000000 
00050049 l       .debug_str	00000000 
000500c8 l       .debug_str	00000000 
00050128 l       .debug_str	00000000 
00050186 l       .debug_str	00000000 
000501e4 l       .debug_str	00000000 
0005021c l       .debug_str	00000000 
00050251 l       .debug_str	00000000 
0005027c l       .debug_str	00000000 
00050286 l       .debug_str	00000000 
000502b6 l       .debug_str	00000000 
000502c4 l       .debug_str	00000000 
0005031d l       .debug_str	00000000 
00050370 l       .debug_str	00000000 
000503ec l       .debug_str	00000000 
00050450 l       .debug_str	00000000 
000504b4 l       .debug_str	00000000 
000504ea l       .debug_str	00000000 
000504fe l       .debug_str	00000000 
0005053f l       .debug_str	00000000 
00050557 l       .debug_str	00000000 
0005060b l       .debug_str	00000000 
0005063e l       .debug_str	00000000 
0005064f l       .debug_str	00000000 
00050695 l       .debug_str	00000000 
000506a2 l       .debug_str	00000000 
000506df l       .debug_str	00000000 
00050723 l       .debug_str	00000000 
00050764 l       .debug_str	00000000 
000507a6 l       .debug_str	00000000 
000507b0 l       .debug_str	00000000 
000507f4 l       .debug_str	00000000 
000507ff l       .debug_str	00000000 
0005084d l       .debug_str	00000000 
0005089b l       .debug_str	00000000 
000508e1 l       .debug_str	00000000 
00050929 l       .debug_str	00000000 
00050971 l       .debug_str	00000000 
00015334 l       .debug_str	00000000 
000509d8 l       .debug_str	00000000 
00050a31 l       .debug_str	00000000 
00050a9b l       .debug_str	00000000 
00018add l       .debug_str	00000000 
00050b05 l       .debug_str	00000000 
00050b80 l       .debug_str	00000000 
00050bf5 l       .debug_str	00000000 
00050c00 l       .debug_str	00000000 
00050c75 l       .debug_str	00000000 
00050c80 l       .debug_str	00000000 
00050cd7 l       .debug_str	00000000 
00050d3b l       .debug_str	00000000 
00050d47 l       .debug_str	00000000 
00050d84 l       .debug_str	00000000 
00050d91 l       .debug_str	00000000 
00050dc5 l       .debug_str	00000000 
00050e00 l       .debug_str	00000000 
00050e5c l       .debug_str	00000000 
00050eb7 l       .debug_str	00000000 
00050f11 l       .debug_str	00000000 
0003794b l       .debug_str	00000000 
00050f57 l       .debug_str	00000000 
00050fbd l       .debug_str	00000000 
00050ff4 l       .debug_str	00000000 
00050ffc l       .debug_str	00000000 
00051034 l       .debug_str	00000000 
0005103d l       .debug_str	00000000 
00051075 l       .debug_str	00000000 
0005107e l       .debug_str	00000000 
000510b5 l       .debug_str	00000000 
000510bd l       .debug_str	00000000 
000510f5 l       .debug_str	00000000 
000510fe l       .debug_str	00000000 
00051136 l       .debug_str	00000000 
0005113f l       .debug_str	00000000 
00051176 l       .debug_str	00000000 
0005117e l       .debug_str	00000000 
000511f8 l       .debug_str	00000000 
00051272 l       .debug_str	00000000 
000512ec l       .debug_str	00000000 
00051368 l       .debug_str	00000000 
0001c233 l       .debug_str	00000000 
000513c6 l       .debug_str	00000000 
00051425 l       .debug_str	00000000 
00051484 l       .debug_str	00000000 
000514e3 l       .debug_str	00000000 
00051543 l       .debug_str	00000000 
000515a1 l       .debug_str	00000000 
00051600 l       .debug_str	00000000 
0005165f l       .debug_str	00000000 
000516be l       .debug_str	00000000 
0005171e l       .debug_str	00000000 
00051773 l       .debug_str	00000000 
000517c8 l       .debug_str	00000000 
00051822 l       .debug_str	00000000 
0005187c l       .debug_str	00000000 
000518b6 l       .debug_str	00000000 
000518bf l       .debug_str	00000000 
000518f9 l       .debug_str	00000000 
00051902 l       .debug_str	00000000 
0005193f l       .debug_str	00000000 
00038e36 l       .debug_str	00000000 
00051978 l       .debug_str	00000000 
000519d9 l       .debug_str	00000000 
00051a37 l       .debug_str	00000000 
00051a78 l       .debug_str	00000000 
00051ab6 l       .debug_str	00000000 
00051aef l       .debug_str	00000000 
00051b2e l       .debug_str	00000000 
00051b6c l       .debug_str	00000000 
00051baa l       .debug_str	00000000 
00051beb l       .debug_str	00000000 
00051c2f l       .debug_str	00000000 
00051c6c l       .debug_str	00000000 
00051cd2 l       .debug_str	00000000 
00051d39 l       .debug_str	00000000 
00051d9c l       .debug_str	00000000 
00051dfe l       .debug_str	00000000 
00051e63 l       .debug_str	00000000 
00051ecc l       .debug_str	00000000 
00051f32 l       .debug_str	00000000 
00051f98 l       .debug_str	00000000 
00051ff3 l       .debug_str	00000000 
0005205a l       .debug_str	00000000 
000520c5 l       .debug_str	00000000 
00052120 l       .debug_str	00000000 
0005217b l       .debug_str	00000000 
000244f9 l       .debug_str	00000000 
000521c2 l       .debug_str	00000000 
0005220a l       .debug_str	00000000 
00052252 l       .debug_str	00000000 
0005229a l       .debug_str	00000000 
000522e3 l       .debug_str	00000000 
0005232d l       .debug_str	00000000 
00052374 l       .debug_str	00000000 
000523c7 l       .debug_str	00000000 
000523e2 l       .debug_str	00000000 
0005242a l       .debug_str	00000000 
0005247e l       .debug_str	00000000 
000524c6 l       .debug_str	00000000 
0005251a l       .debug_str	00000000 
00052562 l       .debug_str	00000000 
000525b6 l       .debug_str	00000000 
000525ff l       .debug_str	00000000 
00052654 l       .debug_str	00000000 
0005269e l       .debug_str	00000000 
000526f6 l       .debug_str	00000000 
00052758 l       .debug_str	00000000 
000527b7 l       .debug_str	00000000 
00052817 l       .debug_str	00000000 
00052877 l       .debug_str	00000000 
000528d7 l       .debug_str	00000000 
00052938 l       .debug_str	00000000 
00052997 l       .debug_str	00000000 
000529f7 l       .debug_str	00000000 
00052a57 l       .debug_str	00000000 
00052ab7 l       .debug_str	00000000 
00052b18 l       .debug_str	00000000 
00052b75 l       .debug_str	00000000 
00052bd0 l       .debug_str	00000000 
00052c26 l       .debug_str	00000000 
00052c84 l       .debug_str	00000000 
00052cd8 l       .debug_str	00000000 
00052d39 l       .debug_str	00000000 
00052d9f l       .debug_str	00000000 
00052e07 l       .debug_str	00000000 
00052e6e l       .debug_str	00000000 
00052eca l       .debug_str	00000000 
00052f2b l       .debug_str	00000000 
00052f85 l       .debug_str	00000000 
00052fdf l       .debug_str	00000000 
0005303d l       .debug_str	00000000 
00053091 l       .debug_str	00000000 
0005310d l       .debug_str	00000000 
00053176 l       .debug_str	00000000 
000531f2 l       .debug_str	00000000 
0005326e l       .debug_str	00000000 
000532d7 l       .debug_str	00000000 
00053353 l       .debug_str	00000000 
000533c0 l       .debug_str	00000000 
0005341a l       .debug_str	00000000 
00053473 l       .debug_str	00000000 
000534cb l       .debug_str	00000000 
0005352a l       .debug_str	00000000 
00053589 l       .debug_str	00000000 
000535e8 l       .debug_str	00000000 
00053648 l       .debug_str	00000000 
000536a8 l       .debug_str	00000000 
00053708 l       .debug_str	00000000 
00053768 l       .debug_str	00000000 
000537ca l       .debug_str	00000000 
0005382c l       .debug_str	00000000 
0005388d l       .debug_str	00000000 
000538ef l       .debug_str	00000000 
00053951 l       .debug_str	00000000 
000539b2 l       .debug_str	00000000 
00053a14 l       .debug_str	00000000 
00053a76 l       .debug_str	00000000 
00038e7a l       .debug_str	00000000 
00053abf l       .debug_str	00000000 
00053b0b l       .debug_str	00000000 
00053b13 l       .debug_str	00000000 
00053b5d l       .debug_str	00000000 
00053ba8 l       .debug_str	00000000 
00053baf l       .debug_str	00000000 
00053bfa l       .debug_str	00000000 
00053c45 l       .debug_str	00000000 
00053c91 l       .debug_str	00000000 
00053cdb l       .debug_str	00000000 
00053d28 l       .debug_str	00000000 
00053d73 l       .debug_str	00000000 
00053dbf l       .debug_str	00000000 
00053e0b l       .debug_str	00000000 
00053e57 l       .debug_str	00000000 
00053ea4 l       .debug_str	00000000 
00053eee l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00053f86 l       .debug_str	00000000 
00053fd2 l       .debug_str	00000000 
0005401e l       .debug_str	00000000 
0005406a l       .debug_str	00000000 
000540b7 l       .debug_str	00000000 
00054101 l       .debug_str	00000000 
0005414e l       .debug_str	00000000 
00054199 l       .debug_str	00000000 
000541e5 l       .debug_str	00000000 
00054231 l       .debug_str	00000000 
0005427d l       .debug_str	00000000 
000542ca l       .debug_str	00000000 
00054315 l       .debug_str	00000000 
00054363 l       .debug_str	00000000 
000543af l       .debug_str	00000000 
000543fc l       .debug_str	00000000 
00054449 l       .debug_str	00000000 
00054496 l       .debug_str	00000000 
000544e4 l       .debug_str	00000000 
0005452f l       .debug_str	00000000 
0005457a l       .debug_str	00000000 
000545c6 l       .debug_str	00000000 
00054612 l       .debug_str	00000000 
0005465f l       .debug_str	00000000 
000546ab l       .debug_str	00000000 
000546f8 l       .debug_str	00000000 
00054745 l       .debug_str	00000000 
000547a4 l       .debug_str	00000000 
00054801 l       .debug_str	00000000 
0005485d l       .debug_str	00000000 
000548bb l       .debug_str	00000000 
00054918 l       .debug_str	00000000 
00054976 l       .debug_str	00000000 
000549d3 l       .debug_str	00000000 
00054a31 l       .debug_str	00000000 
00054a8e l       .debug_str	00000000 
00054aed l       .debug_str	00000000 
00054b4b l       .debug_str	00000000 
00054bac l       .debug_str	00000000 
00054c0d l       .debug_str	00000000 
00054c70 l       .debug_str	00000000 
00054ca1 l       .debug_str	00000000 
00054ca9 l       .debug_str	00000000 
00054d0c l       .debug_str	00000000 
00054d6f l       .debug_str	00000000 
00054dd3 l       .debug_str	00000000 
00054e37 l       .debug_str	00000000 
00054e9b l       .debug_str	00000000 
00054eff l       .debug_str	00000000 
00054f62 l       .debug_str	00000000 
00054fc5 l       .debug_str	00000000 
00055029 l       .debug_str	00000000 
0005508d l       .debug_str	00000000 
000550f1 l       .debug_str	00000000 
00055155 l       .debug_str	00000000 
00055186 l       .debug_str	00000000 
0005518e l       .debug_str	00000000 
000551f2 l       .debug_str	00000000 
00055256 l       .debug_str	00000000 
000552ba l       .debug_str	00000000 
0005531e l       .debug_str	00000000 
0005537e l       .debug_str	00000000 
000553de l       .debug_str	00000000 
0005540c l       .debug_str	00000000 
00055415 l       .debug_str	00000000 
00055476 l       .debug_str	00000000 
000554d7 l       .debug_str	00000000 
00055538 l       .debug_str	00000000 
00055599 l       .debug_str	00000000 
000555f0 l       .debug_str	00000000 
00055643 l       .debug_str	00000000 
0005568b l       .debug_str	00000000 
000556b3 l       .debug_str	00000000 
000556fb l       .debug_str	00000000 
00055711 l       .debug_str	00000000 
00055759 l       .debug_str	00000000 
0005578e l       .debug_str	00000000 
000557d6 l       .debug_str	00000000 
00055811 l       .debug_str	00000000 
00055859 l       .debug_str	00000000 
000558a1 l       .debug_str	00000000 
000558c2 l       .debug_str	00000000 
0005590a l       .debug_str	00000000 
00055915 l       .debug_str	00000000 
0005595d l       .debug_str	00000000 
0005599a l       .debug_str	00000000 
000559e2 l       .debug_str	00000000 
00055a3b l       .debug_str	00000000 
00055a83 l       .debug_str	00000000 
00055a9f l       .debug_str	00000000 
00055ae7 l       .debug_str	00000000 
00055b93 l       .debug_str	00000000 
00055bdb l       .debug_str	00000000 
00055bf9 l       .debug_str	00000000 
00055c41 l       .debug_str	00000000 
00055c4b l       .debug_str	00000000 
00055c93 l       .debug_str	00000000 
00055cce l       .debug_str	00000000 
00055d16 l       .debug_str	00000000 
00055d65 l       .debug_str	00000000 
00055dad l       .debug_str	00000000 
00055dd4 l       .debug_str	00000000 
00055e1c l       .debug_str	00000000 
00055e46 l       .debug_str	00000000 
00055e8e l       .debug_str	00000000 
00055f09 l       .debug_str	00000000 
00055f51 l       .debug_str	00000000 
00055f99 l       .debug_str	00000000 
00055faf l       .debug_str	00000000 
00018237 l       .debug_str	00000000 
00055ff7 l       .debug_str	00000000 
0005603f l       .debug_str	00000000 
00056087 l       .debug_str	00000000 
000560b8 l       .debug_str	00000000 
00056100 l       .debug_str	00000000 
00056164 l       .debug_str	00000000 
000561ac l       .debug_str	00000000 
0000bc83 l       .debug_str	00000000 
000561f4 l       .debug_str	00000000 
0005623c l       .debug_str	00000000 
00056249 l       .debug_str	00000000 
00056291 l       .debug_str	00000000 
0005629b l       .debug_str	00000000 
000562e3 l       .debug_str	00000000 
000562ec l       .debug_str	00000000 
00056334 l       .debug_str	00000000 
0005635c l       .debug_str	00000000 
000563a4 l       .debug_str	00000000 
000563ec l       .debug_str	00000000 
0005640e l       .debug_str	00000000 
00056456 l       .debug_str	00000000 
00056487 l       .debug_str	00000000 
000564cf l       .debug_str	00000000 
00056517 l       .debug_str	00000000 
0005654f l       .debug_str	00000000 
00056597 l       .debug_str	00000000 
000565cc l       .debug_str	00000000 
00056614 l       .debug_str	00000000 
0005663d l       .debug_str	00000000 
00056685 l       .debug_str	00000000 
000566a9 l       .debug_str	00000000 
000566f1 l       .debug_str	00000000 
00056716 l       .debug_str	00000000 
0005675e l       .debug_str	00000000 
0005677b l       .debug_str	00000000 
000567c3 l       .debug_str	00000000 
000567ce l       .debug_str	00000000 
00056816 l       .debug_str	00000000 
0005683e l       .debug_str	00000000 
00056886 l       .debug_str	00000000 
00056895 l       .debug_str	00000000 
000568dd l       .debug_str	00000000 
00056925 l       .debug_str	00000000 
00056941 l       .debug_str	00000000 
00056989 l       .debug_str	00000000 
00056a00 l       .debug_str	00000000 
00056a48 l       .debug_str	00000000 
00056abf l       .debug_str	00000000 
00056b07 l       .debug_str	00000000 
00056b10 l       .debug_str	00000000 
00056b58 l       .debug_str	00000000 
00056b7e l       .debug_str	00000000 
00056bc6 l       .debug_str	00000000 
00056bf9 l       .debug_str	00000000 
00056c41 l       .debug_str	00000000 
00056c5e l       .debug_str	00000000 
00056ca6 l       .debug_str	00000000 
00056caf l       .debug_str	00000000 
00056cf7 l       .debug_str	00000000 
00056d3f l       .debug_str	00000000 
00056d63 l       .debug_str	00000000 
0000bd6c l       .debug_str	00000000 
00056dab l       .debug_str	00000000 
00056df3 l       .debug_str	00000000 
00056e3b l       .debug_str	00000000 
00056f33 l       .debug_str	00000000 
0001c943 l       .debug_str	00000000 
00056f7b l       .debug_str	00000000 
00056fc3 l       .debug_str	00000000 
0005700b l       .debug_str	00000000 
00057038 l       .debug_str	00000000 
0000bdbd l       .debug_str	00000000 
00057080 l       .debug_str	00000000 
000570c8 l       .debug_str	00000000 
00057125 l       .debug_str	00000000 
0005716d l       .debug_str	00000000 
00057176 l       .debug_str	00000000 
000571be l       .debug_str	00000000 
000571db l       .debug_str	00000000 
00057223 l       .debug_str	00000000 
00057259 l       .debug_str	00000000 
000572a1 l       .debug_str	00000000 
000572d6 l       .debug_str	00000000 
0005731e l       .debug_str	00000000 
00057357 l       .debug_str	00000000 
0005739f l       .debug_str	00000000 
000573bb l       .debug_str	00000000 
00057403 l       .debug_str	00000000 
0005740b l       .debug_str	00000000 
00057453 l       .debug_str	00000000 
0005746e l       .debug_str	00000000 
000574b6 l       .debug_str	00000000 
000574de l       .debug_str	00000000 
00057528 l       .debug_str	00000000 
00057572 l       .debug_str	00000000 
000575d1 l       .debug_str	00000000 
0005762e l       .debug_str	00000000 
00057687 l       .debug_str	00000000 
000576e6 l       .debug_str	00000000 
00057745 l       .debug_str	00000000 
000577a6 l       .debug_str	00000000 
00057809 l       .debug_str	00000000 
00057871 l       .debug_str	00000000 
000578d3 l       .debug_str	00000000 
00057939 l       .debug_str	00000000 
0005799b l       .debug_str	00000000 
00057a00 l       .debug_str	00000000 
00057a63 l       .debug_str	00000000 
00057abf l       .debug_str	00000000 
00057b16 l       .debug_str	00000000 
00057b6f l       .debug_str	00000000 
00057bc2 l       .debug_str	00000000 
00057c1e l       .debug_str	00000000 
00057c84 l       .debug_str	00000000 
00057cda l       .debug_str	00000000 
00057d37 l       .debug_str	00000000 
00057d99 l       .debug_str	00000000 
00057df2 l       .debug_str	00000000 
00057e4d l       .debug_str	00000000 
00057ea8 l       .debug_str	00000000 
00057f03 l       .debug_str	00000000 
00057f60 l       .debug_str	00000000 
00057fbd l       .debug_str	00000000 
00058003 l       .debug_str	00000000 
0005804d l       .debug_str	00000000 
0005808d l       .debug_str	00000000 
000580ca l       .debug_str	00000000 
0005810e l       .debug_str	00000000 
0005814a l       .debug_str	00000000 
0005818e l       .debug_str	00000000 
000581d7 l       .debug_str	00000000 
000581e0 l       .debug_str	00000000 
00058229 l       .debug_str	00000000 
00058232 l       .debug_str	00000000 
0005829b l       .debug_str	00000000 
000582f8 l       .debug_str	00000000 
0005835b l       .debug_str	00000000 
000583b1 l       .debug_str	00000000 
00058407 l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
000584b8 l       .debug_str	00000000 
0005851c l       .debug_str	00000000 
000585a2 l       .debug_str	00000000 
000585a8 l       .debug_str	00000000 
0005862e l       .debug_str	00000000 
00058634 l       .debug_str	00000000 
000586b6 l       .debug_str	00000000 
00058738 l       .debug_str	00000000 
000587bb l       .debug_str	00000000 
000587c2 l       .debug_str	00000000 
00058845 l       .debug_str	00000000 
0005884c l       .debug_str	00000000 
000588d2 l       .debug_str	00000000 
00058958 l       .debug_str	00000000 
000589db l       .debug_str	00000000 
00058a5e l       .debug_str	00000000 
00058ae0 l       .debug_str	00000000 
00058b66 l       .debug_str	00000000 
00058bec l       .debug_str	00000000 
00058c76 l       .debug_str	00000000 
00058cfe l       .debug_str	00000000 
00058d86 l       .debug_str	00000000 
00058dee l       .debug_str	00000000 
00058e57 l       .debug_str	00000000 
00058ec1 l       .debug_str	00000000 
00058f2c l       .debug_str	00000000 
00058f8a l       .debug_str	00000000 
00058fe8 l       .debug_str	00000000 
00059046 l       .debug_str	00000000 
000590a5 l       .debug_str	00000000 
00059103 l       .debug_str	00000000 
00059162 l       .debug_str	00000000 
000591c0 l       .debug_str	00000000 
0005921f l       .debug_str	00000000 
0005927e l       .debug_str	00000000 
000592dd l       .debug_str	00000000 
0005933b l       .debug_str	00000000 
0005939a l       .debug_str	00000000 
000593f9 l       .debug_str	00000000 
00059458 l       .debug_str	00000000 
000594b7 l       .debug_str	00000000 
00059516 l       .debug_str	00000000 
00059575 l       .debug_str	00000000 
000595d4 l       .debug_str	00000000 
00059633 l       .debug_str	00000000 
00059692 l       .debug_str	00000000 
000596f1 l       .debug_str	00000000 
00059750 l       .debug_str	00000000 
000597af l       .debug_str	00000000 
0005980e l       .debug_str	00000000 
0005986d l       .debug_str	00000000 
000598cc l       .debug_str	00000000 
0005992b l       .debug_str	00000000 
0005998a l       .debug_str	00000000 
000599e9 l       .debug_str	00000000 
00059a48 l       .debug_str	00000000 
00059aa8 l       .debug_str	00000000 
00059b07 l       .debug_str	00000000 
00059b66 l       .debug_str	00000000 
00059bc5 l       .debug_str	00000000 
00059c25 l       .debug_str	00000000 
00059c84 l       .debug_str	00000000 
00059ce3 l       .debug_str	00000000 
00059d42 l       .debug_str	00000000 
00059da2 l       .debug_str	00000000 
00017112 l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
00019130 l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
0001913a l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
000177b6 l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
000187de l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
000176b0 l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
00017760 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
00017cd8 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
000170c2 l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
00017124 l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
0002139c l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
00021417 l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
00021608 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
00020970 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
0001778a l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
00017790 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
00017784 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
000170c4 l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
00019148 l     F .text	00000024 __semihost
0001916c l     F .text	00000010 debugger_connected
0001917c l     F .text	0000002e semihost_write
00019250 l     F .text	0000001c semihosting_console_write_ch
20005704 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20005708 l     O .bss	00000010 avail_queue
20005718 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20005724 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
00019420 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00019474 l     F .text	00000050 hal_gpio_irq_handler
000194c4 l     F .text	0000002c hal_gpio_irq_setup
000194f0 l     F .text	0000001c hal_gpio_find_empty_slot
0001950c l     F .text	00000038 hal_gpio_find_pin
20005728 l     O .bss	00000040 hal_gpio_irqs
20005768 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
000196a0 l     F .text	0000007a hal_i2c_delay_us
0001971c l     F .text	00000024 hal_i2c_resolve
00019740 l     F .text	0000001c hal_i2c_convert_status
0001975c l     F .text	00000012 read_gpio_inbuffer
0001976e l     F .text	000000a2 hal_i2c_clear_bus
00021a70 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
00019b0c l     F .text	0000006e nrf52_irqm_handler
00019b94 l     F .text	00000014 hal_spi_stop_transfer
00019ba8 l     F .text	0000004c hal_spi_config_slave
00019bf4 l     F .text	000000b8 hal_spi_init_master
00019cac l     F .text	000000e0 hal_spi_config_master
00021a78 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
0001a090 l     F .text	0000000e nrf52_hal_wdt_default_handler
0001a0a0 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
0001a2b8 l     F .text	00000016 os_main
20005870 l     O .bss	00002000 g_os_main_stack
20005770 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
0001a5c8 l     F .text	0000005c os_dev_add
0001a624 l     F .text	00000026 os_dev_initialize
0001a64a l     F .text	00000020 os_dev_init
20007870 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20007878 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
0001ab74 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0001ac88 l     F .text	00000010 os_msys_find_biggest_pool
0001ac98 l     F .text	0000002c os_msys_find_pool
0001ad10 l     F .text	00000044 os_msys_init_once
20007888 l     O .bss	00004900 os_msys_1_data
2000c188 l     O .bss	0000000c os_msys_1_mbuf_pool
2000c194 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0001af6c l     F .text	00000020 os_sanity_check_list_lock
0001af8c l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0001b400 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0001b4f0 l     F .text	0000004c os_deltatime
0001b53c l     F .text	0000005c os_time_tick
2000c1b8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0001b858 l       .text	00000000 SVC_User
0001b876 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0001b918 l       .text	00000000 test1
0001b90c l       .text	00000000 loop1
0001b91e l       .text	00000000 res1
0001b93a l       .text	00000000 test2
0001b942 l       .text	00000000 done
0001b92e l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0001b94e l       .text	00000000 test1
0001b94a l       .text	00000000 loop1
0001b95c l       .text	00000000 test2
0001b958 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001b9c6 l     F .text	000000c0 ui2a
0001ba86 l     F .text	00000020 i2a
0001baa6 l     F .text	00000030 a2d
0001bad6 l     F .text	00000036 a2i
0001bb0c l     F .text	0000002a putf
0001bb38 l     F .text	0000011c putchw
0001bc54 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001bfd8 l     F .text	00000004 stdin_read
0001bfdc l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001c08c l     F .text	00000028 nrf52k_flash_wait_ready
0001c0b4 l     F .text	00000054 nrf52k_flash_erase_sector
0001c108 l     F .text	00000004 nrf52k_flash_init
0001c10c l     F .text	00000020 nrf52k_flash_sector_info
0001c12c l     F .text	000000d0 nrf52k_flash_write
0001c1fc l     F .text	0000000e nrf52k_flash_read
00021c30 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001c20c l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001c418 l     F .text	0000000a nrf_read_timer_cntr
0001c424 l     F .text	000000b4 nrf_timer_set_ocmp
0001c4d8 l     F .text	0000000a nrf_timer_disable_ocmp
0001c4e2 l     F .text	0000000a nrf_rtc_disable_ocmp
0001c4ec l     F .text	00000054 hal_timer_read_bsptimer
0001c540 l     F .text	00000076 hal_timer_chk_queue
0001c5b6 l     F .text	0000002c hal_timer_irq_handler
00021c4c l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001c77c l     F .text	00000034 nrf52_periph_create_timers
0001c7b0 l     F .text	00000020 nrf52_periph_create_i2c
0001c7d0 l     F .text	00000020 nrf52_periph_create_spi
00021c64 l     O .text	0000000c hal_i2c1_cfg
00021c70 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001c804 l     F .text	00000028 sensor_mgr_remove
0001c82c l     F .text	00000060 sensor_mgr_insert
0001c88c l     F .text	0000000a sensor_type_traits_empty
0001c898 l     F .text	0000000c sensor_mgr_evq_set
0001c8d2 l     F .text	0000005c sensor_read_data_func
0001c930 l     F .text	00000048 sensor_base_ts_update_event
0001c978 l     F .text	00000050 sensor_up_timestamp
0001ca00 l     F .text	000000a0 sensor_mgr_init
0001cc6c l     F .text	0000007c sensor_mgr_wakeup_event
0001caca l     F .text	00000032 sensor_update_nextrun
0001cafc l     F .text	0000001e sensor_calc_nextrun_delta
0001cb1c l     F .text	00000024 sensor_find_min_nextrun_sensor
0001cbf4 l     F .text	0000004a sensor_mgr_poll_bytype
0001cc3e l     F .text	0000002e sensor_poll_per_type_trait
2000c1ec l     O .bss	00000078 sensor_notify_evt_area
2000c264 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000c280 l     O .bss	00000008 oc_sem
2000c288 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000c28c l     O .bss	0000000c hw_id
2000c298 l     O .bss	00000004 hw_id_len
2000c2a0 l     O .bss	00000008 sensor_node_address
2000c2a8 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
00021c88 l     O .text	0000000c COLLECTOR_NODE_HW_ID
00021c94 l     O .text	0000003c SENSOR_NODE_HW_IDS
00021d30 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001ce90 l     F .text	00000050 config_device
2000c2e0 l     O .bss	00000014 adc_1_itf_temp_stub
2000c2f8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001cf3c l     F .text	00000004 temp_stub_close
0001cf40 l     F .text	0000001c temp_stub_sensor_get_config
0001cf5c l     F .text	00000026 temp_stub_open
0001d038 l     F .text	0000007c temp_stub_sensor_read
00021d74 l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001d0dc l     F .text	00000030 oc_buffer_tx
0001d10c l     F .text	0000002c oc_buffer_rx
2000c3b8 l     O .bss	00000018 oc_inq
2000c3d0 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000c3e8 l     O .bss	000000c8 oc_client_cb_area
2000c4b0 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000c4cc l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000c4d0 l     O .bss	0000001c oc_rep_objects
2000c4ec l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001d260 l     F .text	00000078 flash_map_read_mfg
2000c51c l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001d3b4 l     F .text	00000094 mfg_seek_next_aux
0001d448 l     F .text	00000070 mfg_read_mmr
0001d4b8 l     F .text	00000054 mfg_read_next_mmr
0001d50c l     F .text	0000003c mfg_open_flash_area
0001d548 l     F .text	00000044 mfg_read_tlv_body
0001d614 l     F .text	0000004e mfg_read_mmr_refs
2000c594 l     O .bss	00000001 mfg_initialized
2000c598 l     O .bss	00000018 mfg_mmrs
2000c5b0 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001d67a l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
0001bca6 l       .debug_str	00000000 
0001bcfd l       .debug_str	00000000 
00013055 l       .debug_str	00000000 
0001bd49 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0001bd51 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
000172c8 g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
000152f4 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE
00008616 g     F .text	000000ba main
00014a04 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE
0000a210 g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
0001a898 g     F .text	00000040 os_eventq_remove
0000a9a6 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE
0001b6e4 g     F .text	00000018 os_arch_init
0001b900 g     F .text	00000048 memcmp
00011e92 g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
00016e0e g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE
00015d32 g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
0001136e g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
000145e8 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E
00012208 g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
00016ba4 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
00016a2c g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
00014320 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE
000142b4 g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
000172f8 g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
0000a988 g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
00009266 g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
000144b4 g     F .text	0000005a _ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE
00018f58 g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000c6d0 g     O .bss	0000001c nrf52_hal_timer0
00014850 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E
0000924c g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
000146c6 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE
0001cac0 g     F .text	0000000a sensor_unlock
0000b0fe g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
000147f4 g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E
00009a98 g     F .text	00000118 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E
000113c2 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
000147d8 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE
0000ad5e g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E
000090b8 g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
00008890 g     F .text	00000030 _ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17he674f1923c1f056eE
0001afb8 g     F .text	00000024 os_sanity_check_register
0001cf90 g     F .text	0000007c temp_stub_init
0001b058 g     F .text	00000054 os_sched_insert
0000cffe g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E
2000c5b4 g     O .bss	00000001 g_silence_console
00014d1e g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E
0001560e g     F .text	0000028a _ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E
00014dd6 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E
00012524 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
0000c3c8 g     F .text	00000010 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h6ab5fe7f9b6adc84E
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001d718 g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
000170b0 g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
000145ac g     F .text	00000018 _ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E
000164d2 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E
00009c22 g     F .text	00000162 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE
0000ab06 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE
00008e24 g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
0001517a g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
00018ba4 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE
00014ec2 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E
00014a68 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE
00014ede g     F .text	00000024 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE
000115b2 g     F .text	00000086 _ZN4core3cmp6max_by17h3c9686db40e0f078E
00008c62 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
00015354 g     F .text	0000004a _ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E
0001d19c g     F .text	00000020 oc_send_buffer
0001b78c g     F .text	00000030 os_arch_start
00015264 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE
0000aa1a g     F .text	0000001a _ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E
0001cdb4 g     F .text	0000001a is_standalone_node
000087d2 g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE
0001a784 g     F .text	00000010 os_eventq_init
000181b6 g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
000125c4 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
0001789a g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
000113ac g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
00008f1a g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
00016d76 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001cce8 g     F .text	00000028 init_sensor_coap
0001d1bc g     F .text	0000004c oc_send_multicast_message
0000ab16 g     F .text	0000008c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE
00011bb4 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
00018172 g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000c6f0 g     O .bss	00000034 sensor_mgr
000192ec g     F .text	0000002c console_dump
0001b184 g     F .text	00000078 os_sched_wakeup
00016f5a g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE
000124b4 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
00018d38 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
00008c9a g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001d678 g     F .text	00000002 _fini
0001a5bc g     F .text	0000000a os_cputime_get32
000111a2 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17he3a44d3ea8f47cacE
00011472 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
00014156 g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000c5b5 g     O .bss	00000001 g_console_input_ignore
0001b674 g     F .text	00000014 os_arch_ctx_sw
0001114c g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E
0000ca96 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E
000124fa g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
00016754 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hc6fa01816813026eE
0000c3be g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hdef6640b381cd2e3E
00014b92 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE
0001b8c2 g     F .text	0000000c SysTick_Handler
0001cd28 g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
00011fb4 g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
000113d8 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
0000959e g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
00008c3a g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
0001b99a g     F .text	0000001c strcmp
0000c1f4 g     F .text	00000136 .hidden _ZN3app5chip88on_start17h473d234c4f7ef3a3E
0000aae2 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE
2000c5e8 g     O .bss	00000050 g_idle_task
0001a774 g     F .text	00000010 os_dev_reset
00009978 g     F .text	00000010 _ZN4core3ptr5write17h147d4643d861e927E
000096a0 g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
00010b9a g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17heb92b408b228e4d7E
0001b2d4 g     F .text	00000010 os_sem_init
00010c46 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17hf7601df6bb546f8dE
000165ec g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E
00012544 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE
0001926c g     F .text	00000070 console_printhex
0000b362 g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E
00008a22 g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE
0000c1e0 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h74d2e0a17f4f0219E
0001434c g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
00021e34 g       .text	00000000 __exidx_start
0001cd98 g     F .text	0000001c is_collector_node
00016e8a g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE
000155be g     F .text	00000050 _ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E
0001b962 g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
00018a88 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
000125b4 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E
000112d4 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h2bffa2f7235b9482E
000191fc g     F .text	00000054 console_buffer
0001a794 g     F .text	0000000a os_eventq_inited
00019434 g     F .text	0000000c sysinit_end
000169da g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
00017270 g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000c788 g       .bss	00000000 __HeapBase
00014d6e g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE
00014cbc g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E
0000954a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
000089f4 g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E
0000a9ec g     F .text	00000012 _ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E
00010f5e g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17h203a3011efe54ce1E
0000883e g     F .text	0000001a _ZN4core3ptr13drop_in_place17hf56ef57525333fd2E
00014288 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
0001130e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h16ab7cdbe914a27fE
00014630 g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001d318 g     F .text	00000026 flash_area_read
000124e4 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001d22e g     F .text	00000002 oc_register_ip4
00009170 g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001d230 g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
0001d698 g     F .text	00000028 hal_flash_init
0001a73c g     F .text	00000036 os_dev_close
00021dcc g     O .text	00000048 sysflash_map_dflt
0000c7de g     F .text	0000005a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E
0001c080 g     F .text	0000000c hal_bsp_init
00008d46 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
00015dde g     F .text	000005e0 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE
00011cb0 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00009e3a g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
00011b76 g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001da74 g     F .text	00000004 __aeabi_memcpy4
0000ac32 g     F .text	000000c6 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE
00019ed8 g     F .text	0000002c hal_spi_set_txrx_cb
0001da6c g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000c5b8 g     O .bss	00000004 console_is_midline
0001da6c g     F .text	00000006 __aeabi_memclr4
0000a9dc g     F .text	00000010 _ZN4core3ptr13drop_in_place17h22ac77b3595708cdE
000080f8 g       .text	00000000 __isr_vector_end
000199d0 g     F .text	0000013c hal_i2c_master_read
00014e56 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E
0001bcb8 g     F .text	0000025c tfp_format
00010f6e g     F .text	0000000a .hidden _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17h830ef09e153bc6fbE
00016d46 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001cb8c g     F .text	00000068 sensor_read
00016642 g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E
00009232 g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
00014860 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E
00015cbe g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE
0001da74 g     F .text	00000004 __aeabi_memcpy
0001da74 g     F .text	00000004 __aeabi_memcpy8
2000c724 g     O .bss	00000020 st_up_osco
0001b7bc g     F .text	0000005c os_arch_os_start
0000cea6 g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hc72815860861018cE
0001cb6e g     F .text	0000001e sensor_init
00017076 g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE
20000000 g       .bss	00000000 _ram_start
0001b5e4 g     F .text	00000026 os_time_delay
00014870 g     F .text	0000002c _ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE
0001d22c g     F .text	00000002 oc_register_gatt
20004a6c g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001d714 g     F .text	00000004 hal_bsp_hw_id_len
0001a57c g     F .text	00000034 os_callout_wakeup_ticks
0001a8f2 g     F .text	00000026 os_mqueue_get
00019810 g     F .text	00000098 hal_i2c_init
0000c84c g     F .text	000000c4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE
0000891c g     F .text	00000032 _ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h75849c4c3d7f7cbaE
00011190 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17had576ea3abe2661aE
00018044 g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
00018a88 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0001fd3c g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
00011734 g     F .text	00000092 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E
000163be g     F .text	00000048 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E
00016d16 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
0001b284 g     F .text	00000022 os_sched
00008e36 g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00011132 g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E
00011638 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h5567184bcc425327E
00011cf6 g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
0000aa6a g     F .text	00000010 _ZN4core3ptr13drop_in_place17hf625580841d3425eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001c8a4 g     F .text	0000002e sensor_mgr_match_bytype
00011bca g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
00014776 g     F .text	00000032 _ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E
0000b280 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
0001adc0 g     F .text	00000014 os_mutex_init
00009124 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
0000a1cc g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
2000c5c0 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
00014f02 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E
00008164  w    F .text	00000002 RTC1_IRQHandler
00011ddc g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
0000c044 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17h62f022ff61df2a71E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
00016c86 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
000093da g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
00009520 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
00008d3e g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
000126b8 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
0001ad64 g     F .text	00000028 os_msys_get_pkthdr
0001d00c g     F .text	0000002c temp_stub_get_raw_temperature
0001b1fc g     F .text	0000003c os_sched_os_timer_exp
0001a66c g     F .text	00000040 os_dev_create
0000a9fe g     F .text	0000001c _ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E
00009902 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
00016acc g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE
0001afa8 g     F .text	00000010 os_sanity_check_init
0001735a g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
0001a5b0 g     F .text	0000000c os_cputime_init
0001a880 g     F .text	00000018 os_eventq_run
00012194 g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
0001ad8c g     F .text	00000034 os_msys_init
0001648a g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
00016a50 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE
000168b0 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
0001b66a g     F .text	0000000a timer_handler
0001153c g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
000170b4 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
000094b0 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
00008d78 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
000147a8 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E
000170ac g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
00017338 g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
0000c932 g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17habca32c74e5cefadE
0001645e g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
00018d38 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
0000ceba g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17heea96aaa2e3c2266E
0001494a g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
0001bf14 g     F .text	00000008 vfprintf
0001430c g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
00011d22 g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
00011d80 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
0001a992 g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
00008878 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbb99c21890343ba7E
00016ce6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
00018546 g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
00015d56 g     F .text	00000088 _ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE
000172cc g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
0001b69a g     F .text	0000000a os_arch_in_critical
00014dc2 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E
0001b048 g     F .text	00000010 os_sanity_init
000111b4 g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcc80626d7c50dc19E
0001121a g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E
0000ad52 g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE
00014974 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE
00018d38 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
00016782 g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE
00014812 g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE
0000cfa8 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17h70e7cf8d6b1182e4E
0001a15c g     F .text	0000004c __assert_func
00016ab8 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
000150d0 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00014992 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE
0001ac32 g     F .text	0000001e os_memblock_put_from_cb
0000c3d8 g     F .text	00000336 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E
0001b81c g     F .text	00000014 os_set_env
2000c6ac g     O .bss	00000004 g_os_last_ctx_sw_time
00008c4c g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
000193cc g     F .text	00000048 console_printf
0001252e g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
0000b1d0 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
00011bf6 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
00012400 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
00016c26 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
0001b830 g     F .text	00000006 os_arch_init_task_stack
0001d604 g     F .text	00000010 mfg_open
00018d38 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
0001679a g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE
0001d160 g     F .text	00000030 oc_ri_mem_init
00009988 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
0001c070 g     F .text	00000010 hal_bsp_flash_dev
0001d340 g     F .text	00000070 flash_map_init
2000c6c0 g     O .bss	00000004 g_os_time
0001475e g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E
0000cb7c g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E
00015898 g     F .text	00000392 _ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E
000112e8 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h6d8406b1bb96c52eE
0001b8ce g     F .text	0000001e os_default_irq_asm
0001a1a8 g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
00019e10 g     F .text	00000068 hal_spi_disable
0000ac08 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E
00009204 g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001d232 g     F .text	00000002 oc_register_lora
00018ba4 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hc265973c39f711faE
0001aa14 g     F .text	000000a8 os_mbuf_append
0001cee0 g     F .text	0000005c temp_stub_create
00011174 g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17h1299c8c4daf1c93cE
0001d6c0 g     F .text	00000054 hal_flash_read
00010f78 g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf0fe5cd21a17e0a6E
000191ac g     F .text	00000048 console_flush
00009674 g     F .text	00000018 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE
000147c0 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E
0001a3fc g     F .text	0000001a os_start
0001c5f4 g     F .text	00000060 hal_timer_init
000113ec g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
0000c062 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h9e50c50e4b2df321E
0001bfec g     F .text	00000010 rust_sysinit
00008164  w    F .text	00000002 I2S_IRQHandler
000192dc g     F .text	00000010 console_printint
0001b2a8 g     F .text	0000002c os_sched_resort
00021c0c g     O .text	00000008 MemFile_methods
0001bfc0 g     F .text	00000018 fmemopen_w
0001332c g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
00019d8c g     F .text	00000038 hal_spi_config
0001da68  w    F .text	00000002 .hidden __aeabi_ldiv0
0001ac78 g     F .text	00000010 os_mempool_module_init
0001b278 g     F .text	0000000c os_sched_next_task
0000abac g     F .text	0000001a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E
0000aa34 g     F .text	00000010 _ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E
000195ca g     F .text	00000034 hal_gpio_read
0001a450 g     F .text	0000001a os_callout_init
0001ad54 g     F .text	00000010 os_msys_reset
0001bf1c g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0000c1b6 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h447f56c10c9a295aE
0001d76c g     F .text	00000000 .hidden __aeabi_uldivmod
0001b60c g     F .text	00000038 os_gettimeofday
00019358 g     F .text	0000001e console_write
00016dd6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
0001800e g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
00009a84 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
0001a2dc g     F .text	00000070 os_init_idle_task
0001b6fc g     F .text	0000008c os_arch_os_init
00010f88 g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE
000153aa g     F .text	000001b6 _ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE
000094e8 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
0001a34c g     F .text	000000b0 os_init
2000c698 g     O .bss	00000008 g_os_mempool_list
000110d2 g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17hd9b164ddc3c07b23E
00009a7a g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
0000aa44 g     F .text	0000001e _ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE
00011c0c g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
0000c9fc g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE
00019354 g     F .text	00000004 semihosting_console_init
0001d59e g     F .text	0000001a mfg_seek_next_with_type
0001ae8c g     F .text	000000e0 os_mutex_pend
00012574 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
000165a4 g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E
000195a8 g     F .text	00000022 hal_gpio_write
00008600 g     F .text	00000014 _start
00011cee g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
00011d56 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001d664 g     F .text	00000014 __wrap_coap_receive
00016c56 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000c5bc g     O .bss	00000001 sysinit_active
0000c0f0 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E
00016742 g     F .text	00000012 _ZN4core3mem4swap17h206518364108b51fE
000125dc g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
0001448a g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
0001bf90 g     F .text	0000002e memfile_write
0001da68  w    F .text	00000002 .hidden __aeabi_idiv0
000166de g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE
0000ad26 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE
0001a2d0 g     F .text	0000000c os_started
00015c2a g     F .text	0000000a .hidden _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE
0001d138 g     F .text	00000028 oc_buffer_init
000142b6 g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
000094cc g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000c6a0 g     O .bss	0000000c g_os_sanity_check_mu
00009276 g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
000166bc g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
0001da6c g     F .text	00000006 __aeabi_memclr
0001da78 g     F .text	0000009a __aeabi_memset4
00012744 g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
00018016 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
0000968c g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E
00016734 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h0faaf188ff940782E
0001b5a4 g     F .text	00000040 os_time_advance
00019dc4 g     F .text	0000004c hal_spi_enable
0001d5cc g     F .text	00000038 mfg_init
00013dd6 g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
2000c638 g     O .bss	00000050 g_os_main_task
0001da78 g     F .text	0000009a __aeabi_memset8
00018ae6 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
00008d32 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
00021e4c g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20000148 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
00017658 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
00008cc0 g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
0001904c g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
00019440 g     F .text	00000034 NVIC_Relocate
00019428 g     F .text	0000000c sysinit_start
0000ad0e g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E
0000cb12 g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h1de41a42d046f353E
0000ad3e g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE
00021c18 g     O .text	00000018 nrf52k_flash_dev
0001c654 g     F .text	000000f8 hal_timer_config
00014746 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E
00014560 g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
0001bf7c g     F .text	00000014 vprintf
00009156 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
000191f4 g     F .text	00000008 disable_buffer
2000c688 g     O .bss	00000004 g_os_started
000172c0 g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
00010ea4 g     F .text	000000ba _ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E
00008826 g     F .text	00000010 _ZN4core3ptr13drop_in_place17h63bc181655880baeE
00014706 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E
20000144 g       .bssnz	00000000 __bssnz_end__
000111ee g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he4b6bba524de7333E
0001a6d8 g     F .text	00000020 os_dev_lookup
000152c4 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E
000093ce g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
0001a138 g     F .text	00000010 hal_watchdog_enable
00008858 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcac38603a072769eE
2000c6c4 g     O .bss	0000000c g_hal_os_tick
0001b694 g     F .text	00000006 os_arch_restore_sr
0001a4a8 g     F .text	00000078 os_callout_reset
00009a8e g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001d5b8 g     F .text	0000000a mfg_read_tlv_flash_area
00012590 g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
0000acf8 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E
0001a8e0 g     F .text	00000012 os_mqueue_init
000117c6 g     F .text	00000052 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE
00016cb6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
00014f8a g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0000c70e g     F .text	000000d0 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE
0001cf82 g     F .text	0000000e temp_stub_default_cfg
00008020 g       .imghdr	00000000 __text
0001a46c g     F .text	0000003c os_callout_stop
00014f28 g     F .text	00000062 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E
000081c0 g     F .text	0000004c hal_system_clock_start
0001a9dc g     F .text	00000024 os_mbuf_free_chain
000092a2 g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
0001bffc g     F .text	00000030 mem_init_mbuf_pool
000125d4 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
00008c56 g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
000198a8 g     F .text	00000128 hal_i2c_master_write
00015324 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E
0000c960 g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE
00008164  w    F .text	00000002 QDEC_IRQHandler
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00016582 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E
00012726 g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
000119ca g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
0000aaa4 g     F .text	0000001a _ZN4core5slice14from_raw_parts17h1425df913744b73aE
0001a8d8 g     F .text	00000008 os_eventq_dflt_get
0001caa8 g     F .text	00000018 sensor_lock
00011384 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
00008a8c g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE
00019380 g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
0000894e g     F .text	000000a6 _ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf9cb6d84c59cafdaE
0001aa00 g     F .text	00000014 os_mbuf_len
0001a9c8 g     F .text	00000014 os_mbuf_free
00015560 g     F .text	0000005e _ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E
0001489c g     F .text	000000ae _ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E
00011be0 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
000121a0 g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
00019376 g     F .text	00000008 console_blocking_mode
0001539e g     F .text	0000000c _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E
0000aa7a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
00009f66 g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
00011398 g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0000d050 g     F .text	00003b12 _ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E
0001c7f0 g     F .text	00000010 nrf52_periph_create
00015c7c g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E
0001afdc g     F .text	0000006c os_sanity_run
00016498 g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE
00016726 g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E
0000841c g     F .text	00000010 SystemCoreClockUpdate
00014352 g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
000145c4 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
0000991c g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE
00008a5c g     F .text	00000030 _ZN4core3any6TypeId2of17haae5124a9f275cb8E
0000ced6 g     F .text	000000d2 _ZN8libchip814Chip8$LT$T$GT$3new17h80d41819f2580e6eE
0001abec g     F .text	00000014 os_mempool_init
00021c14 g     O .text	00000004 stdout
0000b330 g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
0000cb3a g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E
0001a6ac g     F .text	0000002c os_dev_initialize_all
00008e56 g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
000146e6 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E
00016a7a g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
0001a240 g     F .text	00000078 os_idle_task
00008f0a g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
0000c08c g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h60abe3d598a93563E
00016bbc g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
0000a9be g     F .text	0000001e _ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE
00009660 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E
00009d84 g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
00017d0c g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001d2d8 g     F .text	00000040 flash_area_open
0000abc6 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E
00015c72 g     F .text	0000000a _ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E
0001460c g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE
00008164 g     F .text	00000002 Default_Handler
000172be g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
000093f4 g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
0001acc4 g     F .text	0000004c os_msys_register
0000abee g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE
000092ac g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000c1b0 g     O .bss	00000004 g_os_sanity_check_list
0000b134 g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
00011d2c g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
00011906 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
00019e78 g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001c9e4 g     F .text	00000010 sensor_mgr_unlock
2000c780 g     O .bss	00000004 flash_map_entries
00010c9c g     F .text	000000a2 _ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E
00018a2a g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
00016bc6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
00014cce g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE
0001d234 g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
00016a3e g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E
00015224 g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
0000ad68 g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
00014336 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE
000149b0 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E
00008164  w    F .text	00000002 GPIOTE_IRQHandler
00011ea4 g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001133e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h3d28273d6dd7c774E
0001d58c g     F .text	00000012 mfg_seek_next
00014fdc g     F .text	0000004a _ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E
00015294 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E
000121aa g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
000149da g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE
2000011c g     O .data	00000008 g_os_sleep_list
00017a7c g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
00016ec0 g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE
0001a956 g     F .text	0000000a os_mbuf_pool_init
0000cd30 g     F .text	00000176 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E
2000c690 g     O .bss	00000008 g_callout_list
0001b0e8 g     F .text	0000000c os_sched_set_current_task
0001a520 g     F .text	0000005c os_callout_tick
00016f18 g     F .text	00000042 _ZN4core3ptr4read17h38cf3848f1a0f2ccE
000092c8 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
00011e0c g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
0000964a g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E
00010b62 g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hb16abfee8f88907eE
0001a0c0 g     F .text	00000078 hal_watchdog_init
2000c6b4 g     O .bss	00000001 g_task_id
00018e0e g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
0000aa62 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
0000b33e g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E
0001a6f8 g     F .text	00000044 os_dev_open
2000c6b0 g     O .bss	00000004 g_current_task
000170a8 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
0001111e g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdaeeeffeba3c3f70E
00016b38 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
00010e2a g     F .text	0000007a _ZN8libchip814Chip8$LT$T$GT$5setup17ha7902fed1bdb33a6E
00008d26 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
00019b7c g     F .text	00000018 nrf52_spi0_irq_handler
0001caa0 g     F .text	00000008 sensor_pkg_init
00016758 g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE
0001d0b4 g     F .text	00000028 temp_stub_config
0001a918 g     F .text	0000003e os_mqueue_put
0001904c g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
00019f04 g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
0001b0dc g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0001241c g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001d3b0 g     F .text	00000002 modlog_init
00014c58 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E
00015c34 g     F .text	0000003e _ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE
00019fb0 g     F .text	000000e0 hal_spi_txrx_noblock
00017238 g     F .text	00000038 _ZN4core6option13expect_failed17had6579abaad447b4E
0001801e g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
00009242 g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
00010d3e g     F .text	000000ec _ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E
00009094 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
0001b0ac g     F .text	00000030 os_sched_ctx_sw_hook
0001cb40 g     F .text	0000002e sensor_mgr_register
00017270 g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
000178bc g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
00010c20 g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E
00008154  w    F .text	00000002 NMI_Handler
0001429e g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
00009344 g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
00016e7c g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E
00008f12 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
00011ba8 g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
000165ca g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E
0001a960 g     F .text	00000032 os_mbuf_get
2000c6b8 g     O .bss	00000008 g_os_task_list
00008aee g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
00017586 g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
0001bf40 g     F .text	0000003a vsnprintf
00010baa g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h28b293d7e5188fe6E
000131f8 g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
0001add4 g     F .text	000000b8 os_mutex_release
000121b2 g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
00011f66 g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001c9f4 g     F .text	0000000c sensor_mgr_evq_get
00016406 g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
00011d0a g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
00014dea g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE
2000c68c g     O .bss	00000004 g_os_idle_ctr
0000cb86 g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha7a9542e2459a97dE
00019544 g     F .text	0000002c hal_gpio_init_in
00011ca6 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
00009bb0 g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
0001c800 g     F .text	00000002 sensor_dev_create
00011818 g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
00008aa2 g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
00019570 g     F .text	00000038 hal_gpio_init_out
00008f34 g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
0001193a g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
00016e06 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E
0000aba2 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E
0001650a g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E
000095c8 g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
0001b598 g     F .text	0000000c os_time_get
00010b86 g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h06eb33e167ea87a6E
000172c0 g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
0000a91a g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
0001ac50 g     F .text	00000026 os_memblock_put
00013288 g     F .text	000000a4 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
0001b0f4 g     F .text	00000090 os_sched_sleep
00011ce4 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001c9c8 g     F .text	0000001c sensor_mgr_lock
0001d79c g     F .text	000002cc .hidden __udivmoddi4
000113a4 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
0001109a g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h5eca9088e433250cE
0001c378 g     F .text	000000a0 os_tick_init
0001450e g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
000172ba g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
000091b6 g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
0001b238 g     F .text	00000040 os_sched_wakeup_ticks
00016aa4 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE
00009504 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001c74c g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
00019678 g     F .text	00000028 hal_gpio_irq_enable
0001d190 g     F .text	0000000c oc_evq_set
0001cd10 g     F .text	00000018 is_sensor_node
00018a2a g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
000111c2 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2feea8e9eaacbdd0E
0001d208 g     F .text	00000024 oc_init
0000cc0a g     F .text	00000126 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E
00018c62 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
00018c62 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
000099be g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
000181fa g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
00016822 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE
2000c748 g     O .bss	00000018 sensor_base_ts
00018f58 g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
00021e4c g       .ARM.exidx	00000000 __etext
000112fc g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE
00018ae6 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
00019414 g     F .text	0000000c console_get_ticks
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
000091fa g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
20000108 g     O .data	00000004 hal_twi_i2c1
00014acc g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E
0001b418 g     F .text	000000d8 os_task_init
00015d28 g     F .text	0000000a _ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E
0000912e g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
000118ec g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
000088c0 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h1fe22dbbfbb0a059E
00011cd4 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
00009936 g     F .text	00000042 _ZN4core3ptr4read17h27a035d1812d8297E
00016da6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
0001b2e4 g     F .text	00000064 os_sem_release
0001da78 g     F .text	0000009a __aeabi_memset
0001aabc g     F .text	000000b8 os_mbuf_dup
0001b87c g     F .text	00000046 PendSV_Handler
0000c910 g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h46449aaa1682a400E
0001b836 g     F .text	00000046 SVC_Handler
00008836 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E
0001b688 g     F .text	0000000c os_arch_save_sr
00014726 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E
00008164  w    F .text	00000002 PWM2_IRQHandler
0000815c  w    F .text	00000002 UsageFault_Handler
0001c5e4 g     F .text	00000010 nrf52_timer0_irq_handler
0001b6a4 g     F .text	00000040 os_arch_task_stack_init
2000c788 g       .bss	00000000 __bss_end__
0001669a g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E
0001ac00 g     F .text	00000032 os_memblock_get
2000c784 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
00016914 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E
00011a04 g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
00011478 g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
0001a148 g     F .text	00000014 hal_watchdog_tickle
0000a9ae g     F .text	00000010 _ZN4core3ptr13drop_in_place17h0697ea54608a328fE
00015234 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE
000088d8 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17ha9fbe1a1dec6e23eE
0001a806 g     F .text	0000007a os_eventq_get
0001d74c g     F .text	00000020 sprintf
0001b644 g     F .text	00000026 os_time_ms_to_ticks
00008ab2 g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
0000c918 g     F .text	0000001a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h7a2ee6dc937954dfE
00016e0a g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E
0000b19a g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000c1e8 g     O .bss	00000004 os_flags
0001d238 g     F .text	00000028 oc_rep_init
0001b948 g     F .text	0000001a memcpy
0001c02c g     F .text	00000044 sysinit_app
0000cb9a g     F .text	00000070 _ZN22piet_embedded_graphics7display18set_display_pixels17h52aeff59745589e9E
0000aad8 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE
0001684c g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE
00011f4e g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E
00016bf6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
00018e88 g     F .text	000000d0 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E
00013de6 g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
000124ce g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
00019318 g     F .text	0000003c console_out_nolock
2000c760 g     O .bss	00000020 oc_transports
00019600 g     F .text	00000078 hal_gpio_irq_init
00014830 g     F .text	00000020 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE
0001b9b6 g     F .text	00000010 strlen
0001b348 g     F .text	000000b8 os_sem_pend
00011558 g     F .text	00000016 _ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE
000088f4 g     F .text	00000028 _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17ha26667ca61d55534E
0001c2e0 g     F .text	00000098 os_tick_idle
00012514 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
00016560 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00000000 g       .svc_table	00000000 SVC_Table
0001264a g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
0000aabe g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E
2000fe50 g       *ABS*	00000000 __HeapLimit
0001a418 g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
00009574 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
000118a6 g     F .text	00000012 _ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E
0000a96e g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
0000c838 g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbe871a76fb26495aE
00015026 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
00014152 g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
0001670e g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E
00008158  w    F .text	00000002 MemoryManagement_Handler
00018c62 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
000143d0 g     F .text	000000ba _ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE
0001a79e g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
00014d98 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E
00009be6 g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
00011722 g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
00014caa g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE
0001d5c2 g     F .text	0000000a mfg_read_tlv_mmr_ref
00008d0e g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
0001cdd0 g     F .text	000000c0 sensor_network_init
00018c62 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
000167f8 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
00008dba g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
0001255c g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0001b837 	.word	0x0001b837
	...
    8058:	0001b87d 	.word	0x0001b87d
    805c:	0001b8c3 	.word	0x0001b8c3
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000c788 	.word	0x2000c788
    ldr    r1, =__etext
    8138:	00021e4c 	.word	0x00021e4c
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000c788 	.word	0x2000c788
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f010 ff67 	bl	19440 <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f011 fea2 	bl	1a34c <os_init>
    os_start();
    8608:	f011 fef8 	bl	1a3fc <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f000 fa43 	bl	8aa2 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f001 f83f 	bl	96a0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f64d 3112 	movw	r1, #56082	; 0xdb12
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f64d 3348 	movw	r3, #56136	; 0xdb48
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f000 fb41 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f002 fe8f 	bl	b362 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f64d 311a 	movw	r1, #56090	; 0xdb1a
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f64d 3358 	movw	r3, #56152	; 0xdb58
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f000 fb30 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f003 fdc7 	bl	c1f4 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f64d 3168 	movw	r1, #56168	; 0xdb68
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f64d 3374 	movw	r3, #56180	; 0xdb74
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f000 fb1f 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f000 fbd5 	bl	8e36 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f64d 3122 	movw	r1, #56098	; 0xdb22
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f64d 3384 	movw	r3, #56196	; 0xdb84
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f000 f896 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f000 fbba 	bl	8e24 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f64d 312a 	movw	r1, #56106	; 0xdb2a
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f64d 3394 	movw	r3, #56212	; 0xdb94
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f000 fafa 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f64d 31a4 	movw	r1, #56228	; 0xdba4
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f000 fd67 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00e fde5 	bl	172ba <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f64d 30aa 	movw	r0, #56234	; 0xdbaa
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f000 fd56 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00e fdd5 	bl	172c0 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00e fdd3 	bl	172c8 <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f64d 30b1 	movw	r0, #56241	; 0xdbb1
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f000 fd3f 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f000 fd61 	bl	9204 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f64d 30b4 	movw	r0, #56244	; 0xdbb4
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f000 fd32 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f000 fd6c 	bl	9232 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f64d 30ba 	movw	r0, #56250	; 0xdbba
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f000 fd26 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f000 fd69 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f000 fd65 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00e fd9d 	bl	172c0 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f000 f97c 	bl	8a8c <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f64d 31bc 	movw	r1, #56252	; 0xdbbc
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f004 f9ca 	bl	cb3a <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f000 fd00 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f64d 30ba 	movw	r0, #56250	; 0xdbba
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f000 fcf8 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f000 fd3b 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>:
    87d2:	b08a      	sub	sp, #40	; 0x28
    87d4:	9107      	str	r1, [sp, #28]
    87d6:	9208      	str	r2, [sp, #32]
    87d8:	f8d0 c000 	ldr.w	ip, [r0]
    87dc:	f1bc 0f00 	cmp.w	ip, #0
    87e0:	9305      	str	r3, [sp, #20]
    87e2:	9204      	str	r2, [sp, #16]
    87e4:	9103      	str	r1, [sp, #12]
    87e6:	9002      	str	r0, [sp, #8]
    87e8:	d011      	beq.n	880e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x3c>
    87ea:	e7ff      	b.n	87ec <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x1a>
    87ec:	9802      	ldr	r0, [sp, #8]
    87ee:	6841      	ldr	r1, [r0, #4]
    87f0:	9106      	str	r1, [sp, #24]
    87f2:	4669      	mov	r1, sp
    87f4:	9a05      	ldr	r2, [sp, #20]
    87f6:	600a      	str	r2, [r1, #0]
    87f8:	f64d 33cc 	movw	r3, #56268	; 0xdbcc
    87fc:	f2c0 0301 	movt	r3, #1
    8800:	aa06      	add	r2, sp, #24
    8802:	9803      	ldr	r0, [sp, #12]
    8804:	9904      	ldr	r1, [sp, #16]
    8806:	f00e fd33 	bl	17270 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    880a:	defe      	udf	#254	; 0xfe
    880c:	defe      	udf	#254	; 0xfe
    880e:	9802      	ldr	r0, [sp, #8]
    8810:	6841      	ldr	r1, [r0, #4]
    8812:	9109      	str	r1, [sp, #36]	; 0x24
    8814:	6802      	ldr	r2, [r0, #0]
    8816:	2a00      	cmp	r2, #0
    8818:	9101      	str	r1, [sp, #4]
    881a:	d103      	bne.n	8824 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x52>
    881c:	e7ff      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>
    881e:	9801      	ldr	r0, [sp, #4]
    8820:	b00a      	add	sp, #40	; 0x28
    8822:	4770      	bx	lr
    8824:	e7fb      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>

00008826 <_ZN4core3ptr13drop_in_place17h63bc181655880baeE>:
    8826:	b580      	push	{r7, lr}
    8828:	b082      	sub	sp, #8
    882a:	9001      	str	r0, [sp, #4]
    882c:	f000 f814 	bl	8858 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcac38603a072769eE>
    8830:	e7ff      	b.n	8832 <_ZN4core3ptr13drop_in_place17h63bc181655880baeE+0xc>
    8832:	b002      	add	sp, #8
    8834:	bd80      	pop	{r7, pc}

00008836 <_ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E>:
    8836:	b081      	sub	sp, #4
    8838:	9000      	str	r0, [sp, #0]
    883a:	b001      	add	sp, #4
    883c:	4770      	bx	lr

0000883e <_ZN4core3ptr13drop_in_place17hf56ef57525333fd2E>:
    883e:	b580      	push	{r7, lr}
    8840:	b082      	sub	sp, #8
    8842:	9001      	str	r0, [sp, #4]
    8844:	9000      	str	r0, [sp, #0]
    8846:	f000 f823 	bl	8890 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17he674f1923c1f056eE>
    884a:	e001      	b.n	8850 <_ZN4core3ptr13drop_in_place17hf56ef57525333fd2E+0x12>
    884c:	b002      	add	sp, #8
    884e:	bd80      	pop	{r7, pc}
    8850:	9800      	ldr	r0, [sp, #0]
    8852:	f7ff ffe8 	bl	8826 <_ZN4core3ptr13drop_in_place17h63bc181655880baeE>
    8856:	e7f9      	b.n	884c <_ZN4core3ptr13drop_in_place17hf56ef57525333fd2E+0xe>

00008858 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcac38603a072769eE>:

impl<T, N> Drop for Vec<T, N>
where
    N: ArrayLength<T>,
{
    fn drop(&mut self) {
    8858:	b580      	push	{r7, lr}
    885a:	b084      	sub	sp, #16
    885c:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
    885e:	f000 f82f 	bl	88c0 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h1fe22dbbfbb0a059E>
    8862:	9002      	str	r0, [sp, #8]
    8864:	9101      	str	r1, [sp, #4]
    8866:	e7ff      	b.n	8868 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcac38603a072769eE+0x10>
    8868:	9802      	ldr	r0, [sp, #8]
    886a:	9901      	ldr	r1, [sp, #4]
    886c:	f002 f99e 	bl	abac <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
    8870:	e7ff      	b.n	8872 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcac38603a072769eE+0x1a>
    8872:	e7ff      	b.n	8874 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hcac38603a072769eE+0x1c>
    }
    8874:	b004      	add	sp, #16
    8876:	bd80      	pop	{r7, pc}

00008878 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbb99c21890343ba7E>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
    8878:	b580      	push	{r7, lr}
    887a:	b084      	sub	sp, #16
    887c:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
    887e:	f003 fc9a 	bl	c1b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h447f56c10c9a295aE>
    8882:	9002      	str	r0, [sp, #8]
    8884:	9101      	str	r1, [sp, #4]
    8886:	e7ff      	b.n	8888 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbb99c21890343ba7E+0x10>
    }
    8888:	9802      	ldr	r0, [sp, #8]
    888a:	9901      	ldr	r1, [sp, #4]
    888c:	b004      	add	sp, #16
    888e:	bd80      	pop	{r7, pc}

00008890 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17he674f1923c1f056eE>:
    fn drop(&mut self) {
    8890:	b580      	push	{r7, lr}
    8892:	b086      	sub	sp, #24
    8894:	9005      	str	r0, [sp, #20]
            ptr::drop_in_place(&mut self.vec[self.next..]);
    8896:	9003      	str	r0, [sp, #12]
    8898:	f000 f812 	bl	88c0 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h1fe22dbbfbb0a059E>
    889c:	9002      	str	r0, [sp, #8]
    889e:	9101      	str	r1, [sp, #4]
    88a0:	e7ff      	b.n	88a2 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17he674f1923c1f056eE+0x12>
    88a2:	9803      	ldr	r0, [sp, #12]
    88a4:	6a41      	ldr	r1, [r0, #36]	; 0x24
    88a6:	9104      	str	r1, [sp, #16]
    88a8:	9a04      	ldr	r2, [sp, #16]
    88aa:	9802      	ldr	r0, [sp, #8]
    88ac:	9901      	ldr	r1, [sp, #4]
    88ae:	f002 f98a 	bl	abc6 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>
    88b2:	e7ff      	b.n	88b4 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17he674f1923c1f056eE+0x24>
    88b4:	e7ff      	b.n	88b6 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17he674f1923c1f056eE+0x26>
    88b6:	2000      	movs	r0, #0
            self.vec.0.len = 0;
    88b8:	9903      	ldr	r1, [sp, #12]
    88ba:	6008      	str	r0, [r1, #0]
    }
    88bc:	b006      	add	sp, #24
    88be:	bd80      	pop	{r7, pc}

000088c0 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h1fe22dbbfbb0a059E>:

impl<T, N> ops::DerefMut for Vec<T, N>
where
    N: ArrayLength<T>,
{
    fn deref_mut(&mut self) -> &mut [T] {
    88c0:	b580      	push	{r7, lr}
    88c2:	b084      	sub	sp, #16
    88c4:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
    88c6:	f003 fbcc 	bl	c062 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h9e50c50e4b2df321E>
    88ca:	9002      	str	r0, [sp, #8]
    88cc:	9101      	str	r1, [sp, #4]
    88ce:	e7ff      	b.n	88d0 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h1fe22dbbfbb0a059E+0x10>
    }
    88d0:	9802      	ldr	r0, [sp, #8]
    88d2:	9901      	ldr	r1, [sp, #4]
    88d4:	b004      	add	sp, #16
    88d6:	bd80      	pop	{r7, pc}

000088d8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17ha9fbe1a1dec6e23eE>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
    88d8:	b580      	push	{r7, lr}
    88da:	b084      	sub	sp, #16
    88dc:	9001      	str	r0, [sp, #4]
    88de:	9102      	str	r1, [sp, #8]
    88e0:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
    88e2:	f003 fc05 	bl	c0f0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E>
    88e6:	9000      	str	r0, [sp, #0]
    88e8:	e7ff      	b.n	88ea <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17ha9fbe1a1dec6e23eE+0x12>
    }
    88ea:	9800      	ldr	r0, [sp, #0]
    88ec:	f000 0001 	and.w	r0, r0, #1
    88f0:	b004      	add	sp, #16
    88f2:	bd80      	pop	{r7, pc}

000088f4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17ha26667ca61d55534E>:
    pub fn new() -> Self {
    88f4:	b510      	push	{r4, lr}
    88f6:	b08a      	sub	sp, #40	; 0x28
    88f8:	a901      	add	r1, sp, #4
        Vec(crate::i::Vec::new())
    88fa:	9000      	str	r0, [sp, #0]
    88fc:	4608      	mov	r0, r1
    88fe:	f003 fba1 	bl	c044 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17h62f022ff61df2a71E>
    8902:	e7ff      	b.n	8904 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17ha26667ca61d55534E+0x10>
    8904:	a801      	add	r0, sp, #4
    8906:	9900      	ldr	r1, [sp, #0]
    8908:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
    890c:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
    8910:	e890 501c 	ldmia.w	r0, {r2, r3, r4, ip, lr}
    8914:	e881 501c 	stmia.w	r1, {r2, r3, r4, ip, lr}
    }
    8918:	b00a      	add	sp, #40	; 0x28
    891a:	bd10      	pop	{r4, pc}

0000891c <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h75849c4c3d7f7cbaE>:
    fn into_iter(self) -> Self::IntoIter {
    891c:	b570      	push	{r4, r5, r6, lr}
    891e:	b089      	sub	sp, #36	; 0x24
    8920:	466a      	mov	r2, sp
        IntoIter { vec: self, next: 0 }
    8922:	4613      	mov	r3, r2
    8924:	e8b1 5030 	ldmia.w	r1!, {r4, r5, ip, lr}
    8928:	e8a3 5030 	stmia.w	r3!, {r4, r5, ip, lr}
    892c:	e891 5070 	ldmia.w	r1, {r4, r5, r6, ip, lr}
    8930:	e883 5070 	stmia.w	r3, {r4, r5, r6, ip, lr}
    8934:	4601      	mov	r1, r0
    8936:	e8b2 5018 	ldmia.w	r2!, {r3, r4, ip, lr}
    893a:	e8a1 5018 	stmia.w	r1!, {r3, r4, ip, lr}
    893e:	e892 5038 	ldmia.w	r2, {r3, r4, r5, ip, lr}
    8942:	e881 5038 	stmia.w	r1, {r3, r4, r5, ip, lr}
    8946:	2100      	movs	r1, #0
    8948:	6241      	str	r1, [r0, #36]	; 0x24
    }
    894a:	b009      	add	sp, #36	; 0x24
    894c:	bd70      	pop	{r4, r5, r6, pc}

0000894e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf9cb6d84c59cafdaE>:
    fn next(&mut self) -> Option<Self::Item> {
    894e:	b580      	push	{r7, lr}
    8950:	b08e      	sub	sp, #56	; 0x38
    8952:	900a      	str	r0, [sp, #40]	; 0x28
        if self.next < self.vec.len() {
    8954:	6a41      	ldr	r1, [r0, #36]	; 0x24
    8956:	9008      	str	r0, [sp, #32]
    8958:	9107      	str	r1, [sp, #28]
    895a:	f7ff ff8d 	bl	8878 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hbb99c21890343ba7E>
    895e:	9006      	str	r0, [sp, #24]
    8960:	9105      	str	r1, [sp, #20]
    8962:	e7ff      	b.n	8964 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf9cb6d84c59cafdaE+0x16>
    8964:	9806      	ldr	r0, [sp, #24]
    8966:	9905      	ldr	r1, [sp, #20]
    8968:	f002 f8cd 	bl	ab06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
    896c:	9004      	str	r0, [sp, #16]
    896e:	e7ff      	b.n	8970 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf9cb6d84c59cafdaE+0x22>
    8970:	9807      	ldr	r0, [sp, #28]
    8972:	9904      	ldr	r1, [sp, #16]
    8974:	4288      	cmp	r0, r1
    8976:	d304      	bcc.n	8982 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf9cb6d84c59cafdaE+0x34>
    8978:	e7ff      	b.n	897a <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf9cb6d84c59cafdaE+0x2c>
    897a:	2000      	movs	r0, #0
            None
    897c:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
    8980:	e026      	b.n	89d0 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf9cb6d84c59cafdaE+0x82>
                (self.vec.0.buffer.as_ptr() as *const T)
    8982:	9808      	ldr	r0, [sp, #32]
    8984:	1d01      	adds	r1, r0, #4
    8986:	910c      	str	r1, [sp, #48]	; 0x30
    8988:	910d      	str	r1, [sp, #52]	; 0x34
    898a:	9103      	str	r1, [sp, #12]
    898c:	e7ff      	b.n	898e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf9cb6d84c59cafdaE+0x40>
                    .add(self.next)
    898e:	9808      	ldr	r0, [sp, #32]
    8990:	6a41      	ldr	r1, [r0, #36]	; 0x24
                (self.vec.0.buffer.as_ptr() as *const T)
    8992:	9803      	ldr	r0, [sp, #12]
    8994:	f000 fe59 	bl	964a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
    8998:	9002      	str	r0, [sp, #8]
    899a:	e7ff      	b.n	899c <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf9cb6d84c59cafdaE+0x4e>
    899c:	9802      	ldr	r0, [sp, #8]
    899e:	f000 fe5f 	bl	9660 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>
    89a2:	4601      	mov	r1, r0
    89a4:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    89a8:	9101      	str	r1, [sp, #4]
    89aa:	e7ff      	b.n	89ac <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf9cb6d84c59cafdaE+0x5e>
            self.next += 1;
    89ac:	9808      	ldr	r0, [sp, #32]
    89ae:	6a41      	ldr	r1, [r0, #36]	; 0x24
    89b0:	1c4a      	adds	r2, r1, #1
    89b2:	4613      	mov	r3, r2
    89b4:	428a      	cmp	r2, r1
    89b6:	9300      	str	r3, [sp, #0]
    89b8:	d310      	bcc.n	89dc <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf9cb6d84c59cafdaE+0x8e>
    89ba:	e7ff      	b.n	89bc <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf9cb6d84c59cafdaE+0x6e>
    89bc:	9800      	ldr	r0, [sp, #0]
    89be:	9908      	ldr	r1, [sp, #32]
    89c0:	6248      	str	r0, [r1, #36]	; 0x24
            Some(item)
    89c2:	9a01      	ldr	r2, [sp, #4]
    89c4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
    89c8:	2301      	movs	r3, #1
    89ca:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
    89ce:	e7ff      	b.n	89d0 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf9cb6d84c59cafdaE+0x82>
    }
    89d0:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
    89d4:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
    89d8:	b00e      	add	sp, #56	; 0x38
    89da:	bd80      	pop	{r7, pc}
            self.next += 1;
    89dc:	f64d 4050 	movw	r0, #56400	; 0xdc50
    89e0:	f2c0 0001 	movt	r0, #1
    89e4:	f64d 4234 	movw	r2, #56372	; 0xdc34
    89e8:	f2c0 0201 	movt	r2, #1
    89ec:	211c      	movs	r1, #28
    89ee:	f00e fc6d 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    89f2:	defe      	udf	#254	; 0xfe

000089f4 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>:
    89f4:	b580      	push	{r7, lr}
    89f6:	b086      	sub	sp, #24
    89f8:	9004      	str	r0, [sp, #16]
    89fa:	9105      	str	r1, [sp, #20]
    89fc:	9002      	str	r0, [sp, #8]
    89fe:	f000 f810 	bl	8a22 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>
    8a02:	9001      	str	r0, [sp, #4]
    8a04:	e7ff      	b.n	8a06 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x12>
    8a06:	9801      	ldr	r0, [sp, #4]
    8a08:	07c1      	lsls	r1, r0, #31
    8a0a:	2900      	cmp	r1, #0
    8a0c:	d103      	bne.n	8a16 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x22>
    8a0e:	e7ff      	b.n	8a10 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x1c>
    8a10:	2000      	movs	r0, #0
    8a12:	9003      	str	r0, [sp, #12]
    8a14:	e002      	b.n	8a1c <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8a16:	9802      	ldr	r0, [sp, #8]
    8a18:	9003      	str	r0, [sp, #12]
    8a1a:	e7ff      	b.n	8a1c <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8a1c:	9803      	ldr	r0, [sp, #12]
    8a1e:	b006      	add	sp, #24
    8a20:	bd80      	pop	{r7, pc}

00008a22 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>:
    8a22:	b580      	push	{r7, lr}
    8a24:	b08a      	sub	sp, #40	; 0x28
    8a26:	9008      	str	r0, [sp, #32]
    8a28:	9109      	str	r1, [sp, #36]	; 0x24
    8a2a:	9103      	str	r1, [sp, #12]
    8a2c:	9002      	str	r0, [sp, #8]
    8a2e:	f000 f815 	bl	8a5c <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>
    8a32:	9105      	str	r1, [sp, #20]
    8a34:	9004      	str	r0, [sp, #16]
    8a36:	e7ff      	b.n	8a38 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x16>
    8a38:	9803      	ldr	r0, [sp, #12]
    8a3a:	68c1      	ldr	r1, [r0, #12]
    8a3c:	9802      	ldr	r0, [sp, #8]
    8a3e:	4788      	blx	r1
    8a40:	9107      	str	r1, [sp, #28]
    8a42:	9006      	str	r0, [sp, #24]
    8a44:	e7ff      	b.n	8a46 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x24>
    8a46:	a804      	add	r0, sp, #16
    8a48:	a906      	add	r1, sp, #24
    8a4a:	f002 fc78 	bl	b33e <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>
    8a4e:	9001      	str	r0, [sp, #4]
    8a50:	e7ff      	b.n	8a52 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x30>
    8a52:	9801      	ldr	r0, [sp, #4]
    8a54:	f000 0001 	and.w	r0, r0, #1
    8a58:	b00a      	add	sp, #40	; 0x28
    8a5a:	bd80      	pop	{r7, pc}

00008a5c <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>:
    8a5c:	b086      	sub	sp, #24
    8a5e:	f249 40d9 	movw	r0, #38105	; 0x94d9
    8a62:	f2c1 1010 	movt	r0, #4368	; 0x1110
    8a66:	9005      	str	r0, [sp, #20]
    8a68:	f249 7064 	movw	r0, #38756	; 0x9764
    8a6c:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    8a70:	9004      	str	r0, [sp, #16]
    8a72:	9804      	ldr	r0, [sp, #16]
    8a74:	9905      	ldr	r1, [sp, #20]
    8a76:	9001      	str	r0, [sp, #4]
    8a78:	9100      	str	r1, [sp, #0]
    8a7a:	e7ff      	b.n	8a7c <_ZN4core3any6TypeId2of17haae5124a9f275cb8E+0x20>
    8a7c:	9801      	ldr	r0, [sp, #4]
    8a7e:	9002      	str	r0, [sp, #8]
    8a80:	9900      	ldr	r1, [sp, #0]
    8a82:	9103      	str	r1, [sp, #12]
    8a84:	9802      	ldr	r0, [sp, #8]
    8a86:	9903      	ldr	r1, [sp, #12]
    8a88:	b006      	add	sp, #24
    8a8a:	4770      	bx	lr

00008a8c <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>:
    8a8c:	b580      	push	{r7, lr}
    8a8e:	b084      	sub	sp, #16
    8a90:	9002      	str	r0, [sp, #8]
    8a92:	9103      	str	r1, [sp, #12]
    8a94:	f7ff ffae 	bl	89f4 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>
    8a98:	9001      	str	r0, [sp, #4]
    8a9a:	e7ff      	b.n	8a9c <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE+0x10>
    8a9c:	9801      	ldr	r0, [sp, #4]
    8a9e:	b004      	add	sp, #16
    8aa0:	bd80      	pop	{r7, pc}

00008aa2 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    8aa2:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    8aa4:	f013 faa2 	bl	1bfec <rust_sysinit>
    8aa8:	e7ff      	b.n	8aaa <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    8aaa:	f000 fbca 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8aae:	e7ff      	b.n	8ab0 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    8ab0:	bd80      	pop	{r7, pc}

00008ab2 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    8ab2:	b580      	push	{r7, lr}
    8ab4:	b086      	sub	sp, #24
    8ab6:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    8ab8:	7801      	ldrb	r1, [r0, #0]
    8aba:	07ca      	lsls	r2, r1, #31
    8abc:	2a00      	cmp	r2, #0
    8abe:	9000      	str	r0, [sp, #0]
    8ac0:	d006      	beq.n	8ad0 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    8ac2:	e7ff      	b.n	8ac4 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    8ac4:	9800      	ldr	r0, [sp, #0]
    8ac6:	6841      	ldr	r1, [r0, #4]
    8ac8:	9103      	str	r1, [sp, #12]
    8aca:	9101      	str	r1, [sp, #4]
        match self.rep {
    8acc:	e00c      	b.n	8ae8 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    8ace:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    8ad0:	9800      	ldr	r0, [sp, #0]
    8ad2:	6841      	ldr	r1, [r0, #4]
    8ad4:	6882      	ldr	r2, [r0, #8]
    8ad6:	9104      	str	r1, [sp, #16]
    8ad8:	9205      	str	r2, [sp, #20]
    8ada:	4608      	mov	r0, r1
    8adc:	4611      	mov	r1, r2
    8ade:	f009 f901 	bl	11ce4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8ae2:	9001      	str	r0, [sp, #4]
    8ae4:	e7ff      	b.n	8ae6 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    8ae6:	e7ff      	b.n	8ae8 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    8ae8:	9801      	ldr	r0, [sp, #4]
    8aea:	b006      	add	sp, #24
    8aec:	bd80      	pop	{r7, pc}

00008aee <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    8aee:	b5b0      	push	{r4, r5, r7, lr}
    8af0:	b0b2      	sub	sp, #200	; 0xc8
    8af2:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    8af4:	7801      	ldrb	r1, [r0, #0]
    8af6:	07ca      	lsls	r2, r1, #31
    8af8:	2a00      	cmp	r2, #0
    8afa:	900e      	str	r0, [sp, #56]	; 0x38
    8afc:	d005      	beq.n	8b0a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    8afe:	e7ff      	b.n	8b00 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    8b00:	980e      	ldr	r0, [sp, #56]	; 0x38
    8b02:	6841      	ldr	r1, [r0, #4]
    8b04:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    8b06:	e096      	b.n	8c36 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    8b08:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    8b0a:	980e      	ldr	r0, [sp, #56]	; 0x38
    8b0c:	6841      	ldr	r1, [r0, #4]
    8b0e:	6882      	ldr	r2, [r0, #8]
    8b10:	912b      	str	r1, [sp, #172]	; 0xac
    8b12:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    8b14:	4608      	mov	r0, r1
    8b16:	4611      	mov	r1, r2
    8b18:	f000 face 	bl	90b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    8b1c:	9011      	str	r0, [sp, #68]	; 0x44
    8b1e:	e7ff      	b.n	8b20 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    8b20:	f64d 4074 	movw	r0, #56436	; 0xdc74
    8b24:	f2c0 0001 	movt	r0, #1
    8b28:	6800      	ldr	r0, [r0, #0]
    8b2a:	a911      	add	r1, sp, #68	; 0x44
    8b2c:	910f      	str	r1, [sp, #60]	; 0x3c
    8b2e:	9010      	str	r0, [sp, #64]	; 0x40
    8b30:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8b32:	902d      	str	r0, [sp, #180]	; 0xb4
    8b34:	9910      	ldr	r1, [sp, #64]	; 0x40
    8b36:	912e      	str	r1, [sp, #184]	; 0xb8
    8b38:	900d      	str	r0, [sp, #52]	; 0x34
    8b3a:	910c      	str	r1, [sp, #48]	; 0x30
    8b3c:	f000 fc5a 	bl	93f4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    8b40:	900b      	str	r0, [sp, #44]	; 0x2c
    8b42:	e7ff      	b.n	8b44 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    8b44:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8b46:	07c1      	lsls	r1, r0, #31
    8b48:	2900      	cmp	r1, #0
    8b4a:	d001      	beq.n	8b50 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    8b4c:	e7ff      	b.n	8b4e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    8b4e:	e072      	b.n	8c36 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    8b50:	f64d 40cc 	movw	r0, #56524	; 0xdccc
    8b54:	f2c0 0001 	movt	r0, #1
    8b58:	6801      	ldr	r1, [r0, #0]
    8b5a:	980d      	ldr	r0, [sp, #52]	; 0x34
    8b5c:	9021      	str	r0, [sp, #132]	; 0x84
    8b5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8b60:	9222      	str	r2, [sp, #136]	; 0x88
    8b62:	f64d 43e0 	movw	r3, #56544	; 0xdce0
    8b66:	f2c0 0301 	movt	r3, #1
    8b6a:	681b      	ldr	r3, [r3, #0]
    8b6c:	f64d 4ce4 	movw	ip, #56548	; 0xdce4
    8b70:	f2c0 0c01 	movt	ip, #1
    8b74:	f8dc c000 	ldr.w	ip, [ip]
    8b78:	46ee      	mov	lr, sp
    8b7a:	2400      	movs	r4, #0
    8b7c:	f8ce 4000 	str.w	r4, [lr]
    8b80:	a823      	add	r0, sp, #140	; 0x8c
    8b82:	2201      	movs	r2, #1
    8b84:	910a      	str	r1, [sp, #40]	; 0x28
    8b86:	4619      	mov	r1, r3
    8b88:	4663      	mov	r3, ip
    8b8a:	f000 f86a 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8b8e:	e7ff      	b.n	8b90 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    8b90:	a821      	add	r0, sp, #132	; 0x84
    8b92:	901e      	str	r0, [sp, #120]	; 0x78
    8b94:	a822      	add	r0, sp, #136	; 0x88
    8b96:	901f      	str	r0, [sp, #124]	; 0x7c
    8b98:	a823      	add	r0, sp, #140	; 0x8c
    8b9a:	9020      	str	r0, [sp, #128]	; 0x80
    8b9c:	981e      	ldr	r0, [sp, #120]	; 0x78
    8b9e:	902f      	str	r0, [sp, #188]	; 0xbc
    8ba0:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8ba2:	9130      	str	r1, [sp, #192]	; 0xc0
    8ba4:	9a20      	ldr	r2, [sp, #128]	; 0x80
    8ba6:	9231      	str	r2, [sp, #196]	; 0xc4
    8ba8:	f249 23ad 	movw	r3, #37549	; 0x92ad
    8bac:	f2c0 0300 	movt	r3, #0
    8bb0:	9109      	str	r1, [sp, #36]	; 0x24
    8bb2:	4619      	mov	r1, r3
    8bb4:	9208      	str	r2, [sp, #32]
    8bb6:	f000 fcc8 	bl	954a <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8bba:	9007      	str	r0, [sp, #28]
    8bbc:	9106      	str	r1, [sp, #24]
    8bbe:	e7ff      	b.n	8bc0 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    8bc0:	f249 21ad 	movw	r1, #37549	; 0x92ad
    8bc4:	f2c0 0100 	movt	r1, #0
    8bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
    8bca:	f000 fcbe 	bl	954a <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8bce:	9005      	str	r0, [sp, #20]
    8bd0:	9104      	str	r1, [sp, #16]
    8bd2:	e7ff      	b.n	8bd4 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    8bd4:	f647 019b 	movw	r1, #30875	; 0x789b
    8bd8:	f2c0 0101 	movt	r1, #1
    8bdc:	9808      	ldr	r0, [sp, #32]
    8bde:	f000 fcde 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8be2:	9003      	str	r0, [sp, #12]
    8be4:	9102      	str	r1, [sp, #8]
    8be6:	e7ff      	b.n	8be8 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    8be8:	9807      	ldr	r0, [sp, #28]
    8bea:	9018      	str	r0, [sp, #96]	; 0x60
    8bec:	9906      	ldr	r1, [sp, #24]
    8bee:	9119      	str	r1, [sp, #100]	; 0x64
    8bf0:	9a05      	ldr	r2, [sp, #20]
    8bf2:	921a      	str	r2, [sp, #104]	; 0x68
    8bf4:	9b04      	ldr	r3, [sp, #16]
    8bf6:	931b      	str	r3, [sp, #108]	; 0x6c
    8bf8:	f8dd c00c 	ldr.w	ip, [sp, #12]
    8bfc:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    8c00:	f8dd e008 	ldr.w	lr, [sp, #8]
    8c04:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    8c08:	466c      	mov	r4, sp
    8c0a:	2503      	movs	r5, #3
    8c0c:	6025      	str	r5, [r4, #0]
    8c0e:	a812      	add	r0, sp, #72	; 0x48
    8c10:	ab18      	add	r3, sp, #96	; 0x60
    8c12:	990a      	ldr	r1, [sp, #40]	; 0x28
    8c14:	462a      	mov	r2, r5
    8c16:	f000 f824 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8c1a:	e7ff      	b.n	8c1c <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    8c1c:	f64d 5000 	movw	r0, #56576	; 0xdd00
    8c20:	f2c0 0001 	movt	r0, #1
    8c24:	f00e fb4b 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8c28:	9001      	str	r0, [sp, #4]
    8c2a:	e7ff      	b.n	8c2c <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    8c2c:	a812      	add	r0, sp, #72	; 0x48
    8c2e:	9901      	ldr	r1, [sp, #4]
    8c30:	f00e fb82 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8c34:	defe      	udf	#254	; 0xfe
    }
    8c36:	b032      	add	sp, #200	; 0xc8
    8c38:	bdb0      	pop	{r4, r5, r7, pc}

00008c3a <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
    8c3a:	b083      	sub	sp, #12
    8c3c:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
    8c3e:	9002      	str	r0, [sp, #8]
    8c40:	9802      	ldr	r0, [sp, #8]
    8c42:	9000      	str	r0, [sp, #0]
    8c44:	e7ff      	b.n	8c46 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
    8c46:	9800      	ldr	r0, [sp, #0]
    8c48:	b003      	add	sp, #12
    8c4a:	4770      	bx	lr

00008c4c <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
    8c4c:	b081      	sub	sp, #4
    8c4e:	f06f 000c 	mvn.w	r0, #12
        }
    8c52:	b001      	add	sp, #4
    8c54:	4770      	bx	lr

00008c56 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    8c56:	b082      	sub	sp, #8
    8c58:	9000      	str	r0, [sp, #0]
    8c5a:	9101      	str	r1, [sp, #4]
    8c5c:	2000      	movs	r0, #0
        }
    8c5e:	b002      	add	sp, #8
    8c60:	4770      	bx	lr

00008c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    8c62:	b580      	push	{r7, lr}
    8c64:	b086      	sub	sp, #24
    8c66:	f8dd c020 	ldr.w	ip, [sp, #32]
    8c6a:	9102      	str	r1, [sp, #8]
    8c6c:	9203      	str	r2, [sp, #12]
    8c6e:	9304      	str	r3, [sp, #16]
    8c70:	f8cd c014 	str.w	ip, [sp, #20]
    8c74:	f04f 0e00 	mov.w	lr, #0
    8c78:	f8cd e004 	str.w	lr, [sp, #4]
    8c7c:	f8cd e000 	str.w	lr, [sp]
    8c80:	f8cd e000 	str.w	lr, [sp]
    8c84:	6001      	str	r1, [r0, #0]
    8c86:	6042      	str	r2, [r0, #4]
    8c88:	9900      	ldr	r1, [sp, #0]
    8c8a:	9a01      	ldr	r2, [sp, #4]
    8c8c:	6081      	str	r1, [r0, #8]
    8c8e:	60c2      	str	r2, [r0, #12]
    8c90:	6103      	str	r3, [r0, #16]
    8c92:	f8c0 c014 	str.w	ip, [r0, #20]
    8c96:	b006      	add	sp, #24
    8c98:	bd80      	pop	{r7, pc}

00008c9a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    8c9a:	b082      	sub	sp, #8
    8c9c:	9001      	str	r0, [sp, #4]
    8c9e:	7800      	ldrb	r0, [r0, #0]
    8ca0:	07c0      	lsls	r0, r0, #31
    8ca2:	2800      	cmp	r0, #0
    8ca4:	d004      	beq.n	8cb0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    8ca6:	e7ff      	b.n	8ca8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    8ca8:	2000      	movs	r0, #0
    8caa:	f88d 0003 	strb.w	r0, [sp, #3]
    8cae:	e003      	b.n	8cb8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8cb0:	2001      	movs	r0, #1
    8cb2:	f88d 0003 	strb.w	r0, [sp, #3]
    8cb6:	e7ff      	b.n	8cb8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8cb8:	f89d 0003 	ldrb.w	r0, [sp, #3]
    8cbc:	b002      	add	sp, #8
    8cbe:	4770      	bx	lr

00008cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    8cc0:	b08a      	sub	sp, #40	; 0x28
    8cc2:	9005      	str	r0, [sp, #20]
    8cc4:	9107      	str	r1, [sp, #28]
    8cc6:	9208      	str	r2, [sp, #32]
    8cc8:	9805      	ldr	r0, [sp, #20]
    8cca:	f1b0 0c01 	subs.w	ip, r0, #1
    8cce:	bf18      	it	ne
    8cd0:	f04f 0c01 	movne.w	ip, #1
    8cd4:	2801      	cmp	r0, #1
    8cd6:	9304      	str	r3, [sp, #16]
    8cd8:	9203      	str	r2, [sp, #12]
    8cda:	9102      	str	r1, [sp, #8]
    8cdc:	d010      	beq.n	8d00 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    8cde:	e7ff      	b.n	8ce0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    8ce0:	9805      	ldr	r0, [sp, #20]
    8ce2:	9006      	str	r0, [sp, #24]
    8ce4:	4668      	mov	r0, sp
    8ce6:	9904      	ldr	r1, [sp, #16]
    8ce8:	6001      	str	r1, [r0, #0]
    8cea:	f64d 5310 	movw	r3, #56592	; 0xdd10
    8cee:	f2c0 0301 	movt	r3, #1
    8cf2:	aa06      	add	r2, sp, #24
    8cf4:	9802      	ldr	r0, [sp, #8]
    8cf6:	9903      	ldr	r1, [sp, #12]
    8cf8:	f00e faba 	bl	17270 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    8cfc:	defe      	udf	#254	; 0xfe
    8cfe:	defe      	udf	#254	; 0xfe
    8d00:	9805      	ldr	r0, [sp, #20]
    8d02:	2801      	cmp	r0, #1
    8d04:	d102      	bne.n	8d0c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    8d06:	e7ff      	b.n	8d08 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    8d08:	b00a      	add	sp, #40	; 0x28
    8d0a:	4770      	bx	lr
    8d0c:	e7fc      	b.n	8d08 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

00008d0e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    8d0e:	b580      	push	{r7, lr}
    8d10:	b082      	sub	sp, #8
    8d12:	9001      	str	r0, [sp, #4]
    8d14:	f7ff ffc1 	bl	8c9a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    8d18:	9000      	str	r0, [sp, #0]
    8d1a:	e7ff      	b.n	8d1c <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    8d1c:	2001      	movs	r0, #1
    8d1e:	9900      	ldr	r1, [sp, #0]
    8d20:	4388      	bics	r0, r1
    8d22:	b002      	add	sp, #8
    8d24:	bd80      	pop	{r7, pc}

00008d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    8d26:	b082      	sub	sp, #8
    8d28:	9001      	str	r0, [sp, #4]
    8d2a:	9000      	str	r0, [sp, #0]
    8d2c:	9800      	ldr	r0, [sp, #0]
    8d2e:	b002      	add	sp, #8
    8d30:	4770      	bx	lr

00008d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    8d32:	b081      	sub	sp, #4
    8d34:	4601      	mov	r1, r0
    8d36:	f88d 0003 	strb.w	r0, [sp, #3]
    8d3a:	b001      	add	sp, #4
    8d3c:	4770      	bx	lr

00008d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    8d3e:	b081      	sub	sp, #4
    8d40:	9000      	str	r0, [sp, #0]
    8d42:	b001      	add	sp, #4
    8d44:	4770      	bx	lr

00008d46 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    8d46:	b580      	push	{r7, lr}
    8d48:	b08a      	sub	sp, #40	; 0x28
    8d4a:	9007      	str	r0, [sp, #28]
    8d4c:	9108      	str	r1, [sp, #32]
    8d4e:	9209      	str	r2, [sp, #36]	; 0x24
    8d50:	2300      	movs	r3, #0
    8d52:	9305      	str	r3, [sp, #20]
    8d54:	9006      	str	r0, [sp, #24]
    8d56:	9805      	ldr	r0, [sp, #20]
    8d58:	9b06      	ldr	r3, [sp, #24]
    8d5a:	9104      	str	r1, [sp, #16]
    8d5c:	4619      	mov	r1, r3
    8d5e:	9b04      	ldr	r3, [sp, #16]
    8d60:	9203      	str	r2, [sp, #12]
    8d62:	461a      	mov	r2, r3
    8d64:	9b03      	ldr	r3, [sp, #12]
    8d66:	f000 f828 	bl	8dba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    8d6a:	9002      	str	r0, [sp, #8]
    8d6c:	9101      	str	r1, [sp, #4]
    8d6e:	e7ff      	b.n	8d70 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    8d70:	9802      	ldr	r0, [sp, #8]
    8d72:	9901      	ldr	r1, [sp, #4]
    8d74:	b00a      	add	sp, #40	; 0x28
    8d76:	bd80      	pop	{r7, pc}

00008d78 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    8d78:	b580      	push	{r7, lr}
    8d7a:	b08a      	sub	sp, #40	; 0x28
    8d7c:	9006      	str	r0, [sp, #24]
    8d7e:	9107      	str	r1, [sp, #28]
    8d80:	9208      	str	r2, [sp, #32]
    8d82:	9309      	str	r3, [sp, #36]	; 0x24
    8d84:	9005      	str	r0, [sp, #20]
    8d86:	4610      	mov	r0, r2
    8d88:	9104      	str	r1, [sp, #16]
    8d8a:	4619      	mov	r1, r3
    8d8c:	f008 ff8b 	bl	11ca6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8d90:	9003      	str	r0, [sp, #12]
    8d92:	e7ff      	b.n	8d94 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    8d94:	9803      	ldr	r0, [sp, #12]
    8d96:	9905      	ldr	r1, [sp, #20]
    8d98:	f008 ff0c 	bl	11bb4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    8d9c:	9002      	str	r0, [sp, #8]
    8d9e:	e7ff      	b.n	8da0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    8da0:	9804      	ldr	r0, [sp, #16]
    8da2:	9905      	ldr	r1, [sp, #20]
    8da4:	1a41      	subs	r1, r0, r1
    8da6:	9802      	ldr	r0, [sp, #8]
    8da8:	f000 f8b7 	bl	8f1a <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    8dac:	9001      	str	r0, [sp, #4]
    8dae:	9100      	str	r1, [sp, #0]
    8db0:	e7ff      	b.n	8db2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    8db2:	9801      	ldr	r0, [sp, #4]
    8db4:	9900      	ldr	r1, [sp, #0]
    8db6:	b00a      	add	sp, #40	; 0x28
    8db8:	bd80      	pop	{r7, pc}

00008dba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    8dba:	b580      	push	{r7, lr}
    8dbc:	b08c      	sub	sp, #48	; 0x30
    8dbe:	9008      	str	r0, [sp, #32]
    8dc0:	9109      	str	r1, [sp, #36]	; 0x24
    8dc2:	920a      	str	r2, [sp, #40]	; 0x28
    8dc4:	930b      	str	r3, [sp, #44]	; 0x2c
    8dc6:	4288      	cmp	r0, r1
    8dc8:	9307      	str	r3, [sp, #28]
    8dca:	9206      	str	r2, [sp, #24]
    8dcc:	9105      	str	r1, [sp, #20]
    8dce:	9004      	str	r0, [sp, #16]
    8dd0:	d806      	bhi.n	8de0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    8dd2:	e7ff      	b.n	8dd4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    8dd4:	9806      	ldr	r0, [sp, #24]
    8dd6:	9907      	ldr	r1, [sp, #28]
    8dd8:	f008 ff7c 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8ddc:	9003      	str	r0, [sp, #12]
    8dde:	e004      	b.n	8dea <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    8de0:	9804      	ldr	r0, [sp, #16]
    8de2:	9905      	ldr	r1, [sp, #20]
    8de4:	f00f f9e7 	bl	181b6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    8de8:	defe      	udf	#254	; 0xfe
    8dea:	9805      	ldr	r0, [sp, #20]
    8dec:	9903      	ldr	r1, [sp, #12]
    8dee:	4288      	cmp	r0, r1
    8df0:	d809      	bhi.n	8e06 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    8df2:	e7ff      	b.n	8df4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    8df4:	9804      	ldr	r0, [sp, #16]
    8df6:	9905      	ldr	r1, [sp, #20]
    8df8:	9a06      	ldr	r2, [sp, #24]
    8dfa:	9b07      	ldr	r3, [sp, #28]
    8dfc:	f7ff ffbc 	bl	8d78 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    8e00:	9002      	str	r0, [sp, #8]
    8e02:	9101      	str	r1, [sp, #4]
    8e04:	e00a      	b.n	8e1c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    8e06:	9806      	ldr	r0, [sp, #24]
    8e08:	9907      	ldr	r1, [sp, #28]
    8e0a:	f008 ff63 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8e0e:	9000      	str	r0, [sp, #0]
    8e10:	e7ff      	b.n	8e12 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    8e12:	9805      	ldr	r0, [sp, #20]
    8e14:	9900      	ldr	r1, [sp, #0]
    8e16:	f00f f9ac 	bl	18172 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    8e1a:	defe      	udf	#254	; 0xfe
    8e1c:	9802      	ldr	r0, [sp, #8]
    8e1e:	9901      	ldr	r1, [sp, #4]
    8e20:	b00c      	add	sp, #48	; 0x30
    8e22:	bd80      	pop	{r7, pc}

00008e24 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8e24:	b580      	push	{r7, lr}
    8e26:	b082      	sub	sp, #8
    8e28:	9001      	str	r0, [sp, #4]
    8e2a:	f011 fd29 	bl	1a880 <os_eventq_run>
    8e2e:	e7ff      	b.n	8e30 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    8e30:	2001      	movs	r0, #1
    8e32:	b002      	add	sp, #8
    8e34:	bd80      	pop	{r7, pc}

00008e36 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8e36:	b580      	push	{r7, lr}
    8e38:	b084      	sub	sp, #16
    8e3a:	9002      	str	r0, [sp, #8]
    8e3c:	f011 fd4c 	bl	1a8d8 <os_eventq_dflt_get>
    8e40:	4601      	mov	r1, r0
    8e42:	9003      	str	r0, [sp, #12]
    8e44:	9101      	str	r1, [sp, #4]
    8e46:	e7ff      	b.n	8e48 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    8e48:	9801      	ldr	r0, [sp, #4]
    8e4a:	9902      	ldr	r1, [sp, #8]
    8e4c:	6048      	str	r0, [r1, #4]
    8e4e:	2200      	movs	r2, #0
    8e50:	600a      	str	r2, [r1, #0]
    8e52:	b004      	add	sp, #16
    8e54:	bd80      	pop	{r7, pc}

00008e56 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8e56:	b570      	push	{r4, r5, r6, lr}
    8e58:	b09c      	sub	sp, #112	; 0x70
    8e5a:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    8e5e:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    8e62:	9c22      	ldr	r4, [sp, #136]	; 0x88
    8e64:	9d21      	ldr	r5, [sp, #132]	; 0x84
    8e66:	9e20      	ldr	r6, [sp, #128]	; 0x80
    8e68:	9013      	str	r0, [sp, #76]	; 0x4c
    8e6a:	9114      	str	r1, [sp, #80]	; 0x50
    8e6c:	9215      	str	r2, [sp, #84]	; 0x54
    8e6e:	9316      	str	r3, [sp, #88]	; 0x58
    8e70:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    8e74:	9418      	str	r4, [sp, #96]	; 0x60
    8e76:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    8e7a:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    8e7e:	9011      	str	r0, [sp, #68]	; 0x44
    8e80:	4608      	mov	r0, r1
    8e82:	9310      	str	r3, [sp, #64]	; 0x40
    8e84:	920f      	str	r2, [sp, #60]	; 0x3c
    8e86:	910e      	str	r1, [sp, #56]	; 0x38
    8e88:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    8e8c:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    8e90:	940b      	str	r4, [sp, #44]	; 0x2c
    8e92:	950a      	str	r5, [sp, #40]	; 0x28
    8e94:	9609      	str	r6, [sp, #36]	; 0x24
    8e96:	f7ff fe2a 	bl	8aee <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    8e9a:	e7ff      	b.n	8e9c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    8e9c:	980e      	ldr	r0, [sp, #56]	; 0x38
    8e9e:	f7ff fe08 	bl	8ab2 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    8ea2:	9008      	str	r0, [sp, #32]
    8ea4:	e7ff      	b.n	8ea6 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    8ea6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8ea8:	990c      	ldr	r1, [sp, #48]	; 0x30
    8eaa:	f000 f93b 	bl	9124 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    8eae:	9007      	str	r0, [sp, #28]
    8eb0:	e7ff      	b.n	8eb2 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    8eb2:	980d      	ldr	r0, [sp, #52]	; 0x34
    8eb4:	b281      	uxth	r1, r0
    8eb6:	466a      	mov	r2, sp
    8eb8:	60d1      	str	r1, [r2, #12]
    8eba:	9907      	ldr	r1, [sp, #28]
    8ebc:	6091      	str	r1, [r2, #8]
    8ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8ec0:	6053      	str	r3, [r2, #4]
    8ec2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    8ec6:	fa5f fe8c 	uxtb.w	lr, ip
    8eca:	f8c2 e000 	str.w	lr, [r2]
    8ece:	9811      	ldr	r0, [sp, #68]	; 0x44
    8ed0:	9908      	ldr	r1, [sp, #32]
    8ed2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8ed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8ed6:	f012 fa9f 	bl	1b418 <os_task_init>
    8eda:	4601      	mov	r1, r0
    8edc:	901b      	str	r0, [sp, #108]	; 0x6c
    8ede:	9106      	str	r1, [sp, #24]
    8ee0:	e7ff      	b.n	8ee2 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    8ee2:	9806      	ldr	r0, [sp, #24]
    8ee4:	2800      	cmp	r0, #0
    8ee6:	d005      	beq.n	8ef4 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    8ee8:	e7ff      	b.n	8eea <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    8eea:	9806      	ldr	r0, [sp, #24]
    8eec:	f7ff fea5 	bl	8c3a <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    8ef0:	9005      	str	r0, [sp, #20]
    8ef2:	e004      	b.n	8efe <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    8ef4:	2000      	movs	r0, #0
    8ef6:	9012      	str	r0, [sp, #72]	; 0x48
    8ef8:	2001      	movs	r0, #1
    8efa:	9012      	str	r0, [sp, #72]	; 0x48
    8efc:	e002      	b.n	8f04 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8efe:	9805      	ldr	r0, [sp, #20]
    8f00:	9012      	str	r0, [sp, #72]	; 0x48
    8f02:	e7ff      	b.n	8f04 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8f04:	9812      	ldr	r0, [sp, #72]	; 0x48
    8f06:	b01c      	add	sp, #112	; 0x70
    8f08:	bd70      	pop	{r4, r5, r6, pc}

00008f0a <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    8f0a:	b081      	sub	sp, #4
    8f0c:	9000      	str	r0, [sp, #0]
    8f0e:	b001      	add	sp, #4
    8f10:	4770      	bx	lr

00008f12 <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    8f12:	b081      	sub	sp, #4
    8f14:	9000      	str	r0, [sp, #0]
    8f16:	b001      	add	sp, #4
    8f18:	4770      	bx	lr

00008f1a <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    8f1a:	b580      	push	{r7, lr}
    8f1c:	b084      	sub	sp, #16
    8f1e:	9002      	str	r0, [sp, #8]
    8f20:	9103      	str	r1, [sp, #12]
    8f22:	f000 f993 	bl	924c <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    8f26:	9001      	str	r0, [sp, #4]
    8f28:	9100      	str	r1, [sp, #0]
    8f2a:	e7ff      	b.n	8f2c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    8f2c:	9801      	ldr	r0, [sp, #4]
    8f2e:	9900      	ldr	r1, [sp, #0]
    8f30:	b004      	add	sp, #16
    8f32:	bd80      	pop	{r7, pc}

00008f34 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    8f34:	b5b0      	push	{r4, r5, r7, lr}
    8f36:	b0b8      	sub	sp, #224	; 0xe0
    8f38:	902f      	str	r0, [sp, #188]	; 0xbc
    8f3a:	9130      	str	r1, [sp, #192]	; 0xc0
    8f3c:	9231      	str	r2, [sp, #196]	; 0xc4
    8f3e:	9332      	str	r3, [sp, #200]	; 0xc8
    8f40:	9013      	str	r0, [sp, #76]	; 0x4c
    8f42:	9112      	str	r1, [sp, #72]	; 0x48
    8f44:	9311      	str	r3, [sp, #68]	; 0x44
    8f46:	9210      	str	r2, [sp, #64]	; 0x40
    8f48:	f008 fec4 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8f4c:	9016      	str	r0, [sp, #88]	; 0x58
    8f4e:	e7ff      	b.n	8f50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    8f50:	9810      	ldr	r0, [sp, #64]	; 0x40
    8f52:	9911      	ldr	r1, [sp, #68]	; 0x44
    8f54:	f008 febe 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8f58:	9017      	str	r0, [sp, #92]	; 0x5c
    8f5a:	e7ff      	b.n	8f5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    8f5c:	a816      	add	r0, sp, #88	; 0x58
    8f5e:	9014      	str	r0, [sp, #80]	; 0x50
    8f60:	a817      	add	r0, sp, #92	; 0x5c
    8f62:	9015      	str	r0, [sp, #84]	; 0x54
    8f64:	9814      	ldr	r0, [sp, #80]	; 0x50
    8f66:	9033      	str	r0, [sp, #204]	; 0xcc
    8f68:	9915      	ldr	r1, [sp, #84]	; 0x54
    8f6a:	9134      	str	r1, [sp, #208]	; 0xd0
    8f6c:	6802      	ldr	r2, [r0, #0]
    8f6e:	680b      	ldr	r3, [r1, #0]
    8f70:	429a      	cmp	r2, r3
    8f72:	900f      	str	r0, [sp, #60]	; 0x3c
    8f74:	910e      	str	r1, [sp, #56]	; 0x38
    8f76:	d106      	bne.n	8f86 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    8f78:	e7ff      	b.n	8f7a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    8f7a:	9810      	ldr	r0, [sp, #64]	; 0x40
    8f7c:	9911      	ldr	r1, [sp, #68]	; 0x44
    8f7e:	f008 feb1 	bl	11ce4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8f82:	900d      	str	r0, [sp, #52]	; 0x34
    8f84:	e072      	b.n	906c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    8f86:	f64d 5074 	movw	r0, #56692	; 0xdd74
    8f8a:	f2c0 0001 	movt	r0, #1
    8f8e:	6801      	ldr	r1, [r0, #0]
    8f90:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8f92:	9027      	str	r0, [sp, #156]	; 0x9c
    8f94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8f96:	9228      	str	r2, [sp, #160]	; 0xa0
    8f98:	f64d 53b4 	movw	r3, #56756	; 0xddb4
    8f9c:	f2c0 0301 	movt	r3, #1
    8fa0:	681b      	ldr	r3, [r3, #0]
    8fa2:	f64d 5cb8 	movw	ip, #56760	; 0xddb8
    8fa6:	f2c0 0c01 	movt	ip, #1
    8faa:	f8dc c000 	ldr.w	ip, [ip]
    8fae:	46ee      	mov	lr, sp
    8fb0:	2400      	movs	r4, #0
    8fb2:	f8ce 4000 	str.w	r4, [lr]
    8fb6:	a829      	add	r0, sp, #164	; 0xa4
    8fb8:	2201      	movs	r2, #1
    8fba:	910c      	str	r1, [sp, #48]	; 0x30
    8fbc:	4619      	mov	r1, r3
    8fbe:	4663      	mov	r3, ip
    8fc0:	f7ff fe4f 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8fc4:	e7ff      	b.n	8fc6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    8fc6:	a827      	add	r0, sp, #156	; 0x9c
    8fc8:	9024      	str	r0, [sp, #144]	; 0x90
    8fca:	a828      	add	r0, sp, #160	; 0xa0
    8fcc:	9025      	str	r0, [sp, #148]	; 0x94
    8fce:	a829      	add	r0, sp, #164	; 0xa4
    8fd0:	9026      	str	r0, [sp, #152]	; 0x98
    8fd2:	9824      	ldr	r0, [sp, #144]	; 0x90
    8fd4:	9035      	str	r0, [sp, #212]	; 0xd4
    8fd6:	9925      	ldr	r1, [sp, #148]	; 0x94
    8fd8:	9136      	str	r1, [sp, #216]	; 0xd8
    8fda:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8fdc:	9237      	str	r2, [sp, #220]	; 0xdc
    8fde:	f242 4301 	movw	r3, #9217	; 0x2401
    8fe2:	f2c0 0301 	movt	r3, #1
    8fe6:	910b      	str	r1, [sp, #44]	; 0x2c
    8fe8:	4619      	mov	r1, r3
    8fea:	920a      	str	r2, [sp, #40]	; 0x28
    8fec:	f009 fa16 	bl	1241c <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8ff0:	9009      	str	r0, [sp, #36]	; 0x24
    8ff2:	9108      	str	r1, [sp, #32]
    8ff4:	e7ff      	b.n	8ff6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    8ff6:	f242 4101 	movw	r1, #9217	; 0x2401
    8ffa:	f2c0 0101 	movt	r1, #1
    8ffe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9000:	f009 fa0c 	bl	1241c <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    9004:	9007      	str	r0, [sp, #28]
    9006:	9106      	str	r1, [sp, #24]
    9008:	e7ff      	b.n	900a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    900a:	f647 019b 	movw	r1, #30875	; 0x789b
    900e:	f2c0 0101 	movt	r1, #1
    9012:	980a      	ldr	r0, [sp, #40]	; 0x28
    9014:	f000 fac3 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    9018:	9005      	str	r0, [sp, #20]
    901a:	9104      	str	r1, [sp, #16]
    901c:	e7ff      	b.n	901e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    901e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9020:	901e      	str	r0, [sp, #120]	; 0x78
    9022:	9908      	ldr	r1, [sp, #32]
    9024:	911f      	str	r1, [sp, #124]	; 0x7c
    9026:	9a07      	ldr	r2, [sp, #28]
    9028:	9220      	str	r2, [sp, #128]	; 0x80
    902a:	9b06      	ldr	r3, [sp, #24]
    902c:	9321      	str	r3, [sp, #132]	; 0x84
    902e:	f8dd c014 	ldr.w	ip, [sp, #20]
    9032:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    9036:	f8dd e010 	ldr.w	lr, [sp, #16]
    903a:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    903e:	466c      	mov	r4, sp
    9040:	2503      	movs	r5, #3
    9042:	6025      	str	r5, [r4, #0]
    9044:	a818      	add	r0, sp, #96	; 0x60
    9046:	ab1e      	add	r3, sp, #120	; 0x78
    9048:	990c      	ldr	r1, [sp, #48]	; 0x30
    904a:	462a      	mov	r2, r5
    904c:	f7ff fe09 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    9050:	e7ff      	b.n	9052 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    9052:	f64d 6008 	movw	r0, #56840	; 0xde08
    9056:	f2c0 0001 	movt	r0, #1
    905a:	f00e f930 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    905e:	9003      	str	r0, [sp, #12]
    9060:	e7ff      	b.n	9062 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    9062:	a818      	add	r0, sp, #96	; 0x60
    9064:	9903      	ldr	r1, [sp, #12]
    9066:	f00e f967 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    906a:	defe      	udf	#254	; 0xfe
    906c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    906e:	9912      	ldr	r1, [sp, #72]	; 0x48
    9070:	f008 fe19 	bl	11ca6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    9074:	9002      	str	r0, [sp, #8]
    9076:	e7ff      	b.n	9078 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    9078:	9813      	ldr	r0, [sp, #76]	; 0x4c
    907a:	9912      	ldr	r1, [sp, #72]	; 0x48
    907c:	f008 fe2a 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    9080:	9001      	str	r0, [sp, #4]
    9082:	e7ff      	b.n	9084 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    9084:	980d      	ldr	r0, [sp, #52]	; 0x34
    9086:	9902      	ldr	r1, [sp, #8]
    9088:	9a01      	ldr	r2, [sp, #4]
    908a:	f008 fc2f 	bl	118ec <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    908e:	e7ff      	b.n	9090 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    9090:	b038      	add	sp, #224	; 0xe0
    9092:	bdb0      	pop	{r4, r5, r7, pc}

00009094 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    9094:	b580      	push	{r7, lr}
    9096:	b086      	sub	sp, #24
    9098:	9003      	str	r0, [sp, #12]
    909a:	9104      	str	r1, [sp, #16]
    909c:	9205      	str	r2, [sp, #20]
    909e:	9002      	str	r0, [sp, #8]
    90a0:	4610      	mov	r0, r2
    90a2:	9a02      	ldr	r2, [sp, #8]
    90a4:	9101      	str	r1, [sp, #4]
    90a6:	4611      	mov	r1, r2
    90a8:	9a01      	ldr	r2, [sp, #4]
    90aa:	f000 f861 	bl	9170 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    90ae:	9000      	str	r0, [sp, #0]
    90b0:	e7ff      	b.n	90b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    90b2:	9800      	ldr	r0, [sp, #0]
    90b4:	b006      	add	sp, #24
    90b6:	bd80      	pop	{r7, pc}

000090b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    90b8:	b580      	push	{r7, lr}
    90ba:	b08e      	sub	sp, #56	; 0x38
    90bc:	9009      	str	r0, [sp, #36]	; 0x24
    90be:	910a      	str	r1, [sp, #40]	; 0x28
    90c0:	9005      	str	r0, [sp, #20]
    90c2:	9104      	str	r1, [sp, #16]
    90c4:	f008 fe06 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    90c8:	9003      	str	r0, [sp, #12]
    90ca:	e7ff      	b.n	90cc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    90cc:	2101      	movs	r1, #1
    90ce:	9803      	ldr	r0, [sp, #12]
    90d0:	f000 fa7a 	bl	95c8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    90d4:	9002      	str	r0, [sp, #8]
    90d6:	9101      	str	r1, [sp, #4]
    90d8:	e7ff      	b.n	90da <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    90da:	9802      	ldr	r0, [sp, #8]
    90dc:	9901      	ldr	r1, [sp, #4]
    90de:	f000 f97c 	bl	93da <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    90e2:	9108      	str	r1, [sp, #32]
    90e4:	9007      	str	r0, [sp, #28]
    90e6:	e7ff      	b.n	90e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    90e8:	9807      	ldr	r0, [sp, #28]
    90ea:	2800      	cmp	r0, #0
    90ec:	d001      	beq.n	90f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    90ee:	e7ff      	b.n	90f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    90f0:	e00c      	b.n	910c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    90f2:	9808      	ldr	r0, [sp, #32]
    90f4:	900c      	str	r0, [sp, #48]	; 0x30
    90f6:	900d      	str	r0, [sp, #52]	; 0x34
    90f8:	9905      	ldr	r1, [sp, #20]
    90fa:	9000      	str	r0, [sp, #0]
    90fc:	4608      	mov	r0, r1
    90fe:	9904      	ldr	r1, [sp, #16]
    9100:	9a00      	ldr	r2, [sp, #0]
    9102:	f7ff ffc7 	bl	9094 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    9106:	9006      	str	r0, [sp, #24]
    9108:	e00b      	b.n	9122 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    910a:	defe      	udf	#254	; 0xfe
    910c:	f008 f9b1 	bl	11472 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    9110:	e002      	b.n	9118 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    9112:	9806      	ldr	r0, [sp, #24]
    9114:	b00e      	add	sp, #56	; 0x38
    9116:	bd80      	pop	{r7, pc}
    9118:	f000 f959 	bl	93ce <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    911c:	9006      	str	r0, [sp, #24]
    911e:	e7ff      	b.n	9120 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    9120:	e7f7      	b.n	9112 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    9122:	e7f6      	b.n	9112 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

00009124 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    9124:	b082      	sub	sp, #8
    9126:	9000      	str	r0, [sp, #0]
    9128:	9101      	str	r1, [sp, #4]
    912a:	b002      	add	sp, #8
    912c:	4770      	bx	lr

0000912e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    912e:	b580      	push	{r7, lr}
    9130:	b088      	sub	sp, #32
    9132:	9005      	str	r0, [sp, #20]
    9134:	9106      	str	r1, [sp, #24]
    9136:	9207      	str	r2, [sp, #28]
    9138:	9004      	str	r0, [sp, #16]
    913a:	4610      	mov	r0, r2
    913c:	9a04      	ldr	r2, [sp, #16]
    913e:	9103      	str	r1, [sp, #12]
    9140:	4611      	mov	r1, r2
    9142:	9a03      	ldr	r2, [sp, #12]
    9144:	f7ff fdff 	bl	8d46 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    9148:	9002      	str	r0, [sp, #8]
    914a:	9101      	str	r1, [sp, #4]
    914c:	e7ff      	b.n	914e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    914e:	9802      	ldr	r0, [sp, #8]
    9150:	9901      	ldr	r1, [sp, #4]
    9152:	b008      	add	sp, #32
    9154:	bd80      	pop	{r7, pc}

00009156 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    9156:	b580      	push	{r7, lr}
    9158:	b084      	sub	sp, #16
    915a:	9002      	str	r0, [sp, #8]
    915c:	9103      	str	r1, [sp, #12]
    915e:	f008 f945 	bl	113ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    9162:	9001      	str	r0, [sp, #4]
    9164:	9100      	str	r1, [sp, #0]
    9166:	e7ff      	b.n	9168 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    9168:	9801      	ldr	r0, [sp, #4]
    916a:	9900      	ldr	r1, [sp, #0]
    916c:	b004      	add	sp, #16
    916e:	bd80      	pop	{r7, pc}

00009170 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    9170:	b580      	push	{r7, lr}
    9172:	b08a      	sub	sp, #40	; 0x28
    9174:	9007      	str	r0, [sp, #28]
    9176:	9108      	str	r1, [sp, #32]
    9178:	9209      	str	r2, [sp, #36]	; 0x24
    917a:	9005      	str	r0, [sp, #20]
    917c:	4608      	mov	r0, r1
    917e:	9104      	str	r1, [sp, #16]
    9180:	4611      	mov	r1, r2
    9182:	9203      	str	r2, [sp, #12]
    9184:	f008 fda6 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    9188:	9002      	str	r0, [sp, #8]
    918a:	e7ff      	b.n	918c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    918c:	9805      	ldr	r0, [sp, #20]
    918e:	9902      	ldr	r1, [sp, #8]
    9190:	4288      	cmp	r0, r1
    9192:	d303      	bcc.n	919c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    9194:	e7ff      	b.n	9196 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    9196:	2000      	movs	r0, #0
    9198:	9006      	str	r0, [sp, #24]
    919a:	e009      	b.n	91b0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    919c:	9805      	ldr	r0, [sp, #20]
    919e:	9904      	ldr	r1, [sp, #16]
    91a0:	9a03      	ldr	r2, [sp, #12]
    91a2:	f008 fdc3 	bl	11d2c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    91a6:	9001      	str	r0, [sp, #4]
    91a8:	e7ff      	b.n	91aa <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    91aa:	9801      	ldr	r0, [sp, #4]
    91ac:	9006      	str	r0, [sp, #24]
    91ae:	e7ff      	b.n	91b0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    91b0:	9806      	ldr	r0, [sp, #24]
    91b2:	b00a      	add	sp, #40	; 0x28
    91b4:	bd80      	pop	{r7, pc}

000091b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    91b6:	b580      	push	{r7, lr}
    91b8:	b08a      	sub	sp, #40	; 0x28
    91ba:	9004      	str	r0, [sp, #16]
    91bc:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    91be:	9003      	str	r0, [sp, #12]
    91c0:	9102      	str	r1, [sp, #8]
    91c2:	f000 f86e 	bl	92a2 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    91c6:	4601      	mov	r1, r0
    91c8:	9006      	str	r0, [sp, #24]
    91ca:	9101      	str	r1, [sp, #4]
    91cc:	e7ff      	b.n	91ce <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    91ce:	9803      	ldr	r0, [sp, #12]
    91d0:	9902      	ldr	r1, [sp, #8]
    91d2:	f000 f850 	bl	9276 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    91d6:	9000      	str	r0, [sp, #0]
    91d8:	e7ff      	b.n	91da <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    91da:	9800      	ldr	r0, [sp, #0]
    91dc:	9007      	str	r0, [sp, #28]
    91de:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    91e0:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    91e2:	4608      	mov	r0, r1
    91e4:	f000 f809 	bl	91fa <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    91e8:	9009      	str	r0, [sp, #36]	; 0x24
    91ea:	e7ff      	b.n	91ec <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    91ec:	9801      	ldr	r0, [sp, #4]
    91ee:	9900      	ldr	r1, [sp, #0]
    91f0:	f010 f804 	bl	191fc <console_buffer>
    91f4:	e7ff      	b.n	91f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    91f6:	b00a      	add	sp, #40	; 0x28
    91f8:	bd80      	pop	{r7, pc}

000091fa <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    91fa:	b081      	sub	sp, #4
    91fc:	9000      	str	r0, [sp, #0]
    91fe:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    9200:	b001      	add	sp, #4
    9202:	4770      	bx	lr

00009204 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    9204:	b580      	push	{r7, lr}
    9206:	b086      	sub	sp, #24
    9208:	9004      	str	r0, [sp, #16]
    920a:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    920c:	9003      	str	r0, [sp, #12]
    920e:	9102      	str	r1, [sp, #8]
    9210:	f000 f847 	bl	92a2 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9214:	9001      	str	r0, [sp, #4]
    9216:	e7ff      	b.n	9218 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    9218:	9803      	ldr	r0, [sp, #12]
    921a:	9902      	ldr	r1, [sp, #8]
    921c:	f000 f82b 	bl	9276 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9220:	9000      	str	r0, [sp, #0]
    9222:	e7ff      	b.n	9224 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    9224:	9801      	ldr	r0, [sp, #4]
    9226:	9900      	ldr	r1, [sp, #0]
    9228:	f00f ffe8 	bl	191fc <console_buffer>
    922c:	e7ff      	b.n	922e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    922e:	b006      	add	sp, #24
    9230:	bd80      	pop	{r7, pc}

00009232 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    9232:	b580      	push	{r7, lr}
    9234:	b082      	sub	sp, #8
    9236:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    9238:	f010 f850 	bl	192dc <console_printint>
    923c:	e7ff      	b.n	923e <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    923e:	b002      	add	sp, #8
    9240:	bd80      	pop	{r7, pc}

00009242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    9242:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    9244:	f00f ffb2 	bl	191ac <console_flush>
    9248:	e7ff      	b.n	924a <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    924a:	bd80      	pop	{r7, pc}

0000924c <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    924c:	b086      	sub	sp, #24
    924e:	9004      	str	r0, [sp, #16]
    9250:	9105      	str	r1, [sp, #20]
    9252:	9002      	str	r0, [sp, #8]
    9254:	9103      	str	r1, [sp, #12]
    9256:	9802      	ldr	r0, [sp, #8]
    9258:	9903      	ldr	r1, [sp, #12]
    925a:	9000      	str	r0, [sp, #0]
    925c:	9101      	str	r1, [sp, #4]
    925e:	9800      	ldr	r0, [sp, #0]
    9260:	9901      	ldr	r1, [sp, #4]
    9262:	b006      	add	sp, #24
    9264:	4770      	bx	lr

00009266 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    9266:	b082      	sub	sp, #8
    9268:	460a      	mov	r2, r1
    926a:	9000      	str	r0, [sp, #0]
    926c:	f88d 1007 	strb.w	r1, [sp, #7]
    9270:	7001      	strb	r1, [r0, #0]
    9272:	b002      	add	sp, #8
    9274:	4770      	bx	lr

00009276 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    9276:	b580      	push	{r7, lr}
    9278:	b08a      	sub	sp, #40	; 0x28
    927a:	9004      	str	r0, [sp, #16]
    927c:	9105      	str	r1, [sp, #20]
    927e:	9008      	str	r0, [sp, #32]
    9280:	9109      	str	r1, [sp, #36]	; 0x24
    9282:	9006      	str	r0, [sp, #24]
    9284:	9107      	str	r1, [sp, #28]
    9286:	9806      	ldr	r0, [sp, #24]
    9288:	9907      	ldr	r1, [sp, #28]
    928a:	9003      	str	r0, [sp, #12]
    928c:	9102      	str	r1, [sp, #8]
    928e:	e7ff      	b.n	9290 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    9290:	9803      	ldr	r0, [sp, #12]
    9292:	9902      	ldr	r1, [sp, #8]
    9294:	f008 fd1e 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    9298:	9001      	str	r0, [sp, #4]
    929a:	e7ff      	b.n	929c <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    929c:	9801      	ldr	r0, [sp, #4]
    929e:	b00a      	add	sp, #40	; 0x28
    92a0:	bd80      	pop	{r7, pc}

000092a2 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    92a2:	b082      	sub	sp, #8
    92a4:	9000      	str	r0, [sp, #0]
    92a6:	9101      	str	r1, [sp, #4]
    92a8:	b002      	add	sp, #8
    92aa:	4770      	bx	lr

000092ac <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    92ac:	b580      	push	{r7, lr}
    92ae:	b084      	sub	sp, #16
    92b0:	9002      	str	r0, [sp, #8]
    92b2:	9103      	str	r1, [sp, #12]
    92b4:	6800      	ldr	r0, [r0, #0]
    92b6:	f000 f845 	bl	9344 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    92ba:	9001      	str	r0, [sp, #4]
    92bc:	e7ff      	b.n	92be <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    92be:	9801      	ldr	r0, [sp, #4]
    92c0:	f000 0001 	and.w	r0, r0, #1
    92c4:	b004      	add	sp, #16
    92c6:	bd80      	pop	{r7, pc}

000092c8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    92c8:	b087      	sub	sp, #28
    92ca:	9000      	str	r0, [sp, #0]
    92cc:	9101      	str	r1, [sp, #4]
    92ce:	2000      	movs	r0, #0
    92d0:	f88d 0013 	strb.w	r0, [sp, #19]
    92d4:	f88d 0012 	strb.w	r0, [sp, #18]
    92d8:	2001      	movs	r0, #1
    92da:	f88d 0013 	strb.w	r0, [sp, #19]
    92de:	f88d 0012 	strb.w	r0, [sp, #18]
    92e2:	9800      	ldr	r0, [sp, #0]
    92e4:	2800      	cmp	r0, #0
    92e6:	d001      	beq.n	92ec <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    92e8:	e7ff      	b.n	92ea <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    92ea:	e006      	b.n	92fa <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    92ec:	2000      	movs	r0, #0
    92ee:	f88d 0012 	strb.w	r0, [sp, #18]
    92f2:	2001      	movs	r0, #1
    92f4:	9002      	str	r0, [sp, #8]
    92f6:	e008      	b.n	930a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    92f8:	defe      	udf	#254	; 0xfe
    92fa:	2000      	movs	r0, #0
    92fc:	f88d 0013 	strb.w	r0, [sp, #19]
    9300:	9901      	ldr	r1, [sp, #4]
    9302:	9106      	str	r1, [sp, #24]
    9304:	9103      	str	r1, [sp, #12]
    9306:	9002      	str	r0, [sp, #8]
    9308:	e7ff      	b.n	930a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    930a:	f89d 0012 	ldrb.w	r0, [sp, #18]
    930e:	07c0      	lsls	r0, r0, #31
    9310:	2800      	cmp	r0, #0
    9312:	d104      	bne.n	931e <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    9314:	e7ff      	b.n	9316 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9316:	9800      	ldr	r0, [sp, #0]
    9318:	2801      	cmp	r0, #1
    931a:	d008      	beq.n	932e <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    931c:	e011      	b.n	9342 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    931e:	2000      	movs	r0, #0
    9320:	f88d 0012 	strb.w	r0, [sp, #18]
    9324:	e7f7      	b.n	9316 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9326:	9802      	ldr	r0, [sp, #8]
    9328:	9903      	ldr	r1, [sp, #12]
    932a:	b007      	add	sp, #28
    932c:	4770      	bx	lr
    932e:	f89d 0013 	ldrb.w	r0, [sp, #19]
    9332:	07c0      	lsls	r0, r0, #31
    9334:	2800      	cmp	r0, #0
    9336:	d0f6      	beq.n	9326 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    9338:	e7ff      	b.n	933a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    933a:	2000      	movs	r0, #0
    933c:	f88d 0013 	strb.w	r0, [sp, #19]
    9340:	e7f1      	b.n	9326 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    9342:	e7f0      	b.n	9326 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

00009344 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    9344:	b580      	push	{r7, lr}
    9346:	b08e      	sub	sp, #56	; 0x38
    9348:	900b      	str	r0, [sp, #44]	; 0x2c
    934a:	910c      	str	r1, [sp, #48]	; 0x30
    934c:	9003      	str	r0, [sp, #12]
    934e:	9803      	ldr	r0, [sp, #12]
    9350:	6800      	ldr	r0, [r0, #0]
    9352:	2800      	cmp	r0, #0
    9354:	4602      	mov	r2, r0
    9356:	bf18      	it	ne
    9358:	2201      	movne	r2, #1
    935a:	2800      	cmp	r0, #0
    935c:	9101      	str	r1, [sp, #4]
    935e:	d00f      	beq.n	9380 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    9360:	e7ff      	b.n	9362 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    9362:	9803      	ldr	r0, [sp, #12]
    9364:	900d      	str	r0, [sp, #52]	; 0x34
    9366:	f64d 6218 	movw	r2, #56856	; 0xde18
    936a:	f2c0 0201 	movt	r2, #1
    936e:	a907      	add	r1, sp, #28
    9370:	2304      	movs	r3, #4
    9372:	9000      	str	r0, [sp, #0]
    9374:	4608      	mov	r0, r1
    9376:	9901      	ldr	r1, [sp, #4]
    9378:	f00e fe51 	bl	1801e <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    937c:	e011      	b.n	93a2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    937e:	defe      	udf	#254	; 0xfe
    9380:	f64d 621c 	movw	r2, #56860	; 0xde1c
    9384:	f2c0 0201 	movt	r2, #1
    9388:	a804      	add	r0, sp, #16
    938a:	2304      	movs	r3, #4
    938c:	9901      	ldr	r1, [sp, #4]
    938e:	f00e fe46 	bl	1801e <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    9392:	e7ff      	b.n	9394 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    9394:	a804      	add	r0, sp, #16
    9396:	f00e f95f 	bl	17658 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    939a:	f88d 000b 	strb.w	r0, [sp, #11]
    939e:	e7ff      	b.n	93a0 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    93a0:	e011      	b.n	93c6 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    93a2:	9800      	ldr	r0, [sp, #0]
    93a4:	900a      	str	r0, [sp, #40]	; 0x28
    93a6:	f64d 6220 	movw	r2, #56864	; 0xde20
    93aa:	f2c0 0201 	movt	r2, #1
    93ae:	a807      	add	r0, sp, #28
    93b0:	a90a      	add	r1, sp, #40	; 0x28
    93b2:	f00e f8e8 	bl	17586 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    93b6:	e7ff      	b.n	93b8 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    93b8:	a807      	add	r0, sp, #28
    93ba:	f00e f94d 	bl	17658 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    93be:	f88d 000b 	strb.w	r0, [sp, #11]
    93c2:	e7ff      	b.n	93c4 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    93c4:	e7ff      	b.n	93c6 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    93c6:	f89d 000b 	ldrb.w	r0, [sp, #11]
    93ca:	b00e      	add	sp, #56	; 0x38
    93cc:	bd80      	pop	{r7, pc}

000093ce <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    93ce:	b082      	sub	sp, #8
    93d0:	2000      	movs	r0, #0
    93d2:	9000      	str	r0, [sp, #0]
    93d4:	9800      	ldr	r0, [sp, #0]
    93d6:	b002      	add	sp, #8
    93d8:	4770      	bx	lr

000093da <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    93da:	b580      	push	{r7, lr}
    93dc:	b084      	sub	sp, #16
    93de:	9002      	str	r0, [sp, #8]
    93e0:	9103      	str	r1, [sp, #12]
    93e2:	f7ff ff71 	bl	92c8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    93e6:	9001      	str	r0, [sp, #4]
    93e8:	9100      	str	r1, [sp, #0]
    93ea:	e7ff      	b.n	93ec <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    93ec:	9801      	ldr	r0, [sp, #4]
    93ee:	9900      	ldr	r1, [sp, #0]
    93f0:	b004      	add	sp, #16
    93f2:	bd80      	pop	{r7, pc}

000093f4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    93f4:	b580      	push	{r7, lr}
    93f6:	b094      	sub	sp, #80	; 0x50
    93f8:	9008      	str	r0, [sp, #32]
    93fa:	9109      	str	r1, [sp, #36]	; 0x24
    93fc:	6802      	ldr	r2, [r0, #0]
    93fe:	2a00      	cmp	r2, #0
    9400:	bf18      	it	ne
    9402:	2201      	movne	r2, #1
    9404:	f04f 0300 	mov.w	r3, #0
    9408:	930b      	str	r3, [sp, #44]	; 0x2c
    940a:	920a      	str	r2, [sp, #40]	; 0x28
    940c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    940e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9410:	9104      	str	r1, [sp, #16]
    9412:	9003      	str	r0, [sp, #12]
    9414:	9202      	str	r2, [sp, #8]
    9416:	e7ff      	b.n	9418 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    9418:	9802      	ldr	r0, [sp, #8]
    941a:	9902      	ldr	r1, [sp, #8]
    941c:	910d      	str	r1, [sp, #52]	; 0x34
    941e:	9a04      	ldr	r2, [sp, #16]
    9420:	6813      	ldr	r3, [r2, #0]
    9422:	2b00      	cmp	r3, #0
    9424:	bf18      	it	ne
    9426:	2301      	movne	r3, #1
    9428:	f04f 0c00 	mov.w	ip, #0
    942c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    9430:	930e      	str	r3, [sp, #56]	; 0x38
    9432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9434:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    9438:	9001      	str	r0, [sp, #4]
    943a:	9300      	str	r3, [sp, #0]
    943c:	e7ff      	b.n	943e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    943e:	9800      	ldr	r0, [sp, #0]
    9440:	9011      	str	r0, [sp, #68]	; 0x44
    9442:	9901      	ldr	r1, [sp, #4]
    9444:	4281      	cmp	r1, r0
    9446:	d104      	bne.n	9452 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    9448:	e7ff      	b.n	944a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    944a:	2001      	movs	r0, #1
    944c:	f88d 0017 	strb.w	r0, [sp, #23]
    9450:	e003      	b.n	945a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    9452:	2000      	movs	r0, #0
    9454:	f88d 0017 	strb.w	r0, [sp, #23]
    9458:	e7ff      	b.n	945a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    945a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    945e:	07c0      	lsls	r0, r0, #31
    9460:	2800      	cmp	r0, #0
    9462:	d104      	bne.n	946e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    9464:	e7ff      	b.n	9466 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    9466:	2000      	movs	r0, #0
    9468:	f88d 0016 	strb.w	r0, [sp, #22]
    946c:	e01c      	b.n	94a8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    946e:	9803      	ldr	r0, [sp, #12]
    9470:	9006      	str	r0, [sp, #24]
    9472:	9904      	ldr	r1, [sp, #16]
    9474:	9107      	str	r1, [sp, #28]
    9476:	9a06      	ldr	r2, [sp, #24]
    9478:	6812      	ldr	r2, [r2, #0]
    947a:	2a00      	cmp	r2, #0
    947c:	d104      	bne.n	9488 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    947e:	e7ff      	b.n	9480 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    9480:	2001      	movs	r0, #1
    9482:	f88d 0016 	strb.w	r0, [sp, #22]
    9486:	e00e      	b.n	94a6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    9488:	9807      	ldr	r0, [sp, #28]
    948a:	6800      	ldr	r0, [r0, #0]
    948c:	2800      	cmp	r0, #0
    948e:	d0f7      	beq.n	9480 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    9490:	e7ff      	b.n	9492 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    9492:	9806      	ldr	r0, [sp, #24]
    9494:	9012      	str	r0, [sp, #72]	; 0x48
    9496:	9907      	ldr	r1, [sp, #28]
    9498:	9113      	str	r1, [sp, #76]	; 0x4c
    949a:	f009 f944 	bl	12726 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    949e:	f88d 0016 	strb.w	r0, [sp, #22]
    94a2:	e7ff      	b.n	94a4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    94a4:	e7ff      	b.n	94a6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    94a6:	e7ff      	b.n	94a8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    94a8:	f89d 0016 	ldrb.w	r0, [sp, #22]
    94ac:	b014      	add	sp, #80	; 0x50
    94ae:	bd80      	pop	{r7, pc}

000094b0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    94b0:	b580      	push	{r7, lr}
    94b2:	b084      	sub	sp, #16
    94b4:	9002      	str	r0, [sp, #8]
    94b6:	9103      	str	r1, [sp, #12]
    94b8:	6800      	ldr	r0, [r0, #0]
    94ba:	f009 f8c6 	bl	1264a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    94be:	9001      	str	r0, [sp, #4]
    94c0:	e7ff      	b.n	94c2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    94c2:	9801      	ldr	r0, [sp, #4]
    94c4:	f000 0001 	and.w	r0, r0, #1
    94c8:	b004      	add	sp, #16
    94ca:	bd80      	pop	{r7, pc}

000094cc <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    94cc:	b580      	push	{r7, lr}
    94ce:	b084      	sub	sp, #16
    94d0:	9002      	str	r0, [sp, #8]
    94d2:	9103      	str	r1, [sp, #12]
    94d4:	6800      	ldr	r0, [r0, #0]
    94d6:	f009 f881 	bl	125dc <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    94da:	9001      	str	r0, [sp, #4]
    94dc:	e7ff      	b.n	94de <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    94de:	9801      	ldr	r0, [sp, #4]
    94e0:	f000 0001 	and.w	r0, r0, #1
    94e4:	b004      	add	sp, #16
    94e6:	bd80      	pop	{r7, pc}

000094e8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    94e8:	b580      	push	{r7, lr}
    94ea:	b084      	sub	sp, #16
    94ec:	9002      	str	r0, [sp, #8]
    94ee:	9103      	str	r1, [sp, #12]
    94f0:	6800      	ldr	r0, [r0, #0]
    94f2:	f7ff ffeb 	bl	94cc <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    94f6:	9001      	str	r0, [sp, #4]
    94f8:	e7ff      	b.n	94fa <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    94fa:	9801      	ldr	r0, [sp, #4]
    94fc:	f000 0001 	and.w	r0, r0, #1
    9500:	b004      	add	sp, #16
    9502:	bd80      	pop	{r7, pc}

00009504 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    9504:	b580      	push	{r7, lr}
    9506:	b084      	sub	sp, #16
    9508:	9002      	str	r0, [sp, #8]
    950a:	9103      	str	r1, [sp, #12]
    950c:	6800      	ldr	r0, [r0, #0]
    950e:	f009 f8d3 	bl	126b8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
    9512:	9001      	str	r0, [sp, #4]
    9514:	e7ff      	b.n	9516 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
    9516:	9801      	ldr	r0, [sp, #4]
    9518:	f000 0001 	and.w	r0, r0, #1
    951c:	b004      	add	sp, #16
    951e:	bd80      	pop	{r7, pc}

00009520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    9520:	b089      	sub	sp, #36	; 0x24
    9522:	9005      	str	r0, [sp, #20]
    9524:	9106      	str	r1, [sp, #24]
    9526:	9107      	str	r1, [sp, #28]
    9528:	9907      	ldr	r1, [sp, #28]
    952a:	9002      	str	r0, [sp, #8]
    952c:	9101      	str	r1, [sp, #4]
    952e:	e7ff      	b.n	9530 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    9530:	9802      	ldr	r0, [sp, #8]
    9532:	9008      	str	r0, [sp, #32]
    9534:	9908      	ldr	r1, [sp, #32]
    9536:	9100      	str	r1, [sp, #0]
    9538:	e7ff      	b.n	953a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    953a:	9800      	ldr	r0, [sp, #0]
    953c:	9003      	str	r0, [sp, #12]
    953e:	9901      	ldr	r1, [sp, #4]
    9540:	9104      	str	r1, [sp, #16]
    9542:	9803      	ldr	r0, [sp, #12]
    9544:	9904      	ldr	r1, [sp, #16]
    9546:	b009      	add	sp, #36	; 0x24
    9548:	4770      	bx	lr

0000954a <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    954a:	b089      	sub	sp, #36	; 0x24
    954c:	9005      	str	r0, [sp, #20]
    954e:	9106      	str	r1, [sp, #24]
    9550:	9107      	str	r1, [sp, #28]
    9552:	9907      	ldr	r1, [sp, #28]
    9554:	9002      	str	r0, [sp, #8]
    9556:	9101      	str	r1, [sp, #4]
    9558:	e7ff      	b.n	955a <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    955a:	9802      	ldr	r0, [sp, #8]
    955c:	9008      	str	r0, [sp, #32]
    955e:	9908      	ldr	r1, [sp, #32]
    9560:	9100      	str	r1, [sp, #0]
    9562:	e7ff      	b.n	9564 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    9564:	9800      	ldr	r0, [sp, #0]
    9566:	9003      	str	r0, [sp, #12]
    9568:	9901      	ldr	r1, [sp, #4]
    956a:	9104      	str	r1, [sp, #16]
    956c:	9803      	ldr	r0, [sp, #12]
    956e:	9904      	ldr	r1, [sp, #16]
    9570:	b009      	add	sp, #36	; 0x24
    9572:	4770      	bx	lr

00009574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    9574:	b089      	sub	sp, #36	; 0x24
    9576:	9005      	str	r0, [sp, #20]
    9578:	9106      	str	r1, [sp, #24]
    957a:	9107      	str	r1, [sp, #28]
    957c:	9907      	ldr	r1, [sp, #28]
    957e:	9002      	str	r0, [sp, #8]
    9580:	9101      	str	r1, [sp, #4]
    9582:	e7ff      	b.n	9584 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    9584:	9802      	ldr	r0, [sp, #8]
    9586:	9008      	str	r0, [sp, #32]
    9588:	9908      	ldr	r1, [sp, #32]
    958a:	9100      	str	r1, [sp, #0]
    958c:	e7ff      	b.n	958e <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
    958e:	9800      	ldr	r0, [sp, #0]
    9590:	9003      	str	r0, [sp, #12]
    9592:	9901      	ldr	r1, [sp, #4]
    9594:	9104      	str	r1, [sp, #16]
    9596:	9803      	ldr	r0, [sp, #12]
    9598:	9904      	ldr	r1, [sp, #16]
    959a:	b009      	add	sp, #36	; 0x24
    959c:	4770      	bx	lr

0000959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
    959e:	b089      	sub	sp, #36	; 0x24
    95a0:	9005      	str	r0, [sp, #20]
    95a2:	9106      	str	r1, [sp, #24]
    95a4:	9107      	str	r1, [sp, #28]
    95a6:	9907      	ldr	r1, [sp, #28]
    95a8:	9002      	str	r0, [sp, #8]
    95aa:	9101      	str	r1, [sp, #4]
    95ac:	e7ff      	b.n	95ae <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
    95ae:	9802      	ldr	r0, [sp, #8]
    95b0:	9008      	str	r0, [sp, #32]
    95b2:	9908      	ldr	r1, [sp, #32]
    95b4:	9100      	str	r1, [sp, #0]
    95b6:	e7ff      	b.n	95b8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
    95b8:	9800      	ldr	r0, [sp, #0]
    95ba:	9003      	str	r0, [sp, #12]
    95bc:	9901      	ldr	r1, [sp, #4]
    95be:	9104      	str	r1, [sp, #16]
    95c0:	9803      	ldr	r0, [sp, #12]
    95c2:	9904      	ldr	r1, [sp, #16]
    95c4:	b009      	add	sp, #36	; 0x24
    95c6:	4770      	bx	lr

000095c8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
    95c8:	b580      	push	{r7, lr}
    95ca:	b088      	sub	sp, #32
    95cc:	9004      	str	r0, [sp, #16]
    95ce:	9105      	str	r1, [sp, #20]
    95d0:	f000 f819 	bl	9606 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
    95d4:	9001      	str	r0, [sp, #4]
    95d6:	9100      	str	r1, [sp, #0]
    95d8:	e7ff      	b.n	95da <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
    95da:	9801      	ldr	r0, [sp, #4]
    95dc:	9006      	str	r0, [sp, #24]
    95de:	9900      	ldr	r1, [sp, #0]
    95e0:	f001 0201 	and.w	r2, r1, #1
    95e4:	f88d 201f 	strb.w	r2, [sp, #31]
    95e8:	2a00      	cmp	r2, #0
    95ea:	d105      	bne.n	95f8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
    95ec:	e7ff      	b.n	95ee <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
    95ee:	9801      	ldr	r0, [sp, #4]
    95f0:	9003      	str	r0, [sp, #12]
    95f2:	2101      	movs	r1, #1
    95f4:	9102      	str	r1, [sp, #8]
    95f6:	e002      	b.n	95fe <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    95f8:	2000      	movs	r0, #0
    95fa:	9002      	str	r0, [sp, #8]
    95fc:	e7ff      	b.n	95fe <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    95fe:	9802      	ldr	r0, [sp, #8]
    9600:	9903      	ldr	r1, [sp, #12]
    9602:	b008      	add	sp, #32
    9604:	bd80      	pop	{r7, pc}

00009606 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
    9606:	b08a      	sub	sp, #40	; 0x28
    9608:	9004      	str	r0, [sp, #16]
    960a:	9105      	str	r1, [sp, #20]
    960c:	1a40      	subs	r0, r0, r1
    960e:	f04f 0100 	mov.w	r1, #0
    9612:	f141 0100 	adc.w	r1, r1, #0
    9616:	f1c1 0101 	rsb	r1, r1, #1
    961a:	9006      	str	r0, [sp, #24]
    961c:	f88d 101c 	strb.w	r1, [sp, #28]
    9620:	9806      	ldr	r0, [sp, #24]
    9622:	f89d 101c 	ldrb.w	r1, [sp, #28]
    9626:	9001      	str	r0, [sp, #4]
    9628:	9100      	str	r1, [sp, #0]
    962a:	e7ff      	b.n	962c <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
    962c:	9801      	ldr	r0, [sp, #4]
    962e:	9008      	str	r0, [sp, #32]
    9630:	9900      	ldr	r1, [sp, #0]
    9632:	f001 0201 	and.w	r2, r1, #1
    9636:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    963a:	9002      	str	r0, [sp, #8]
    963c:	f88d 200c 	strb.w	r2, [sp, #12]
    9640:	9802      	ldr	r0, [sp, #8]
    9642:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9646:	b00a      	add	sp, #40	; 0x28
    9648:	4770      	bx	lr

0000964a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>:
    964a:	b580      	push	{r7, lr}
    964c:	b084      	sub	sp, #16
    964e:	9002      	str	r0, [sp, #8]
    9650:	9103      	str	r1, [sp, #12]
    9652:	f000 f80f 	bl	9674 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>
    9656:	9001      	str	r0, [sp, #4]
    9658:	e7ff      	b.n	965a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E+0x10>
    965a:	9801      	ldr	r0, [sp, #4]
    965c:	b004      	add	sp, #16
    965e:	bd80      	pop	{r7, pc}

00009660 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>:
    9660:	b580      	push	{r7, lr}
    9662:	b082      	sub	sp, #8
    9664:	9001      	str	r0, [sp, #4]
    9666:	f000 f966 	bl	9936 <_ZN4core3ptr4read17h27a035d1812d8297E>
    966a:	9000      	str	r0, [sp, #0]
    966c:	e7ff      	b.n	966e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E+0xe>
    966e:	9800      	ldr	r0, [sp, #0]
    9670:	b002      	add	sp, #8
    9672:	bd80      	pop	{r7, pc}

00009674 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>:
    9674:	b084      	sub	sp, #16
    9676:	9001      	str	r0, [sp, #4]
    9678:	9102      	str	r1, [sp, #8]
    967a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    967e:	9003      	str	r0, [sp, #12]
    9680:	9803      	ldr	r0, [sp, #12]
    9682:	9000      	str	r0, [sp, #0]
    9684:	e7ff      	b.n	9686 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE+0x12>
    9686:	9800      	ldr	r0, [sp, #0]
    9688:	b004      	add	sp, #16
    968a:	4770      	bx	lr

0000968c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>:
    968c:	b082      	sub	sp, #8
    968e:	9001      	str	r0, [sp, #4]
    9690:	9000      	str	r0, [sp, #0]
    9692:	e7ff      	b.n	9694 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E+0x8>
    9694:	9800      	ldr	r0, [sp, #0]
    9696:	fab0 f180 	clz	r1, r0
    969a:	0948      	lsrs	r0, r1, #5
    969c:	b002      	add	sp, #8
    969e:	4770      	bx	lr

000096a0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
    baudrate:   8000,  //  In kHZ. Use SPI at 8MHz (the fastest clock available on the nRF52832) because otherwise refreshing will be super slow.
    word_size:  hal::HAL_SPI_WORD_SIZE_8BIT as u8,
};

/// Initialise the display controller
pub fn start_display() -> MynewtResult<()> {
    96a0:	b5b0      	push	{r4, r5, r7, lr}
    96a2:	b0b2      	sub	sp, #200	; 0xc8
    //  Create SPI port and GPIO pins
    let mut spi_port = mynewt::SPI::new();
    96a4:	f00a fb97 	bl	13dd6 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
    96a8:	9115      	str	r1, [sp, #84]	; 0x54
    96aa:	9014      	str	r0, [sp, #80]	; 0x50
    96ac:	e7ff      	b.n	96ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
    96ae:	f00a fd50 	bl	14152 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    96b2:	9016      	str	r0, [sp, #88]	; 0x58
    96b4:	e7ff      	b.n	96b6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
    96b6:	f00a fd4c 	bl	14152 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    96ba:	9017      	str	r0, [sp, #92]	; 0x5c
    96bc:	e7ff      	b.n	96be <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>

    //  Init SPI port and GPIO pins
    spi_port.init(
    96be:	f240 03e8 	movw	r3, #232	; 0xe8
    96c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96c6:	a814      	add	r0, sp, #80	; 0x50
    96c8:	2100      	movs	r1, #0
    96ca:	2219      	movs	r2, #25
    96cc:	f00a fb8b 	bl	13de6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
    96d0:	9012      	str	r0, [sp, #72]	; 0x48
    96d2:	e7ff      	b.n	96d4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
    96d4:	9812      	ldr	r0, [sp, #72]	; 0x48
    96d6:	f7ff fb32 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    96da:	9018      	str	r0, [sp, #96]	; 0x60
    96dc:	e7ff      	b.n	96de <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
        DISPLAY_SPI, //  Mynewt SPI port 0
        DISPLAY_CS,  //  LCD_CS (P0.25): Chip select
        unsafe { &mut SPI_SETTINGS }
    ) ? ;
    96de:	9818      	ldr	r0, [sp, #96]	; 0x60
    96e0:	1e41      	subs	r1, r0, #1
    96e2:	bf18      	it	ne
    96e4:	2101      	movne	r1, #1
    96e6:	2801      	cmp	r0, #1
    96e8:	d001      	beq.n	96ee <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
    96ea:	e7ff      	b.n	96ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
    96ec:	e006      	b.n	96fc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
    96ee:	a816      	add	r0, sp, #88	; 0x58
    96f0:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    96f2:	f00a fd30 	bl	14156 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    96f6:	9011      	str	r0, [sp, #68]	; 0x44
    96f8:	e010      	b.n	971c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
    96fa:	defe      	udf	#254	; 0xfe
    ) ? ;
    96fc:	9818      	ldr	r0, [sp, #96]	; 0x60
    96fe:	902d      	str	r0, [sp, #180]	; 0xb4
    9700:	f008 ff68 	bl	125d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9704:	9010      	str	r0, [sp, #64]	; 0x40
    9706:	e002      	b.n	970e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
    unsafe {
        DISPLAY.init(&mut delay) ? ;
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    }
    Ok(())
}
    9708:	9813      	ldr	r0, [sp, #76]	; 0x4c
    970a:	b032      	add	sp, #200	; 0xc8
    970c:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
    970e:	9810      	ldr	r0, [sp, #64]	; 0x40
    9710:	f7ff fb09 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9714:	9013      	str	r0, [sp, #76]	; 0x4c
    9716:	e7ff      	b.n	9718 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
    9718:	e7ff      	b.n	971a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    971a:	e7f5      	b.n	9708 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    971c:	9811      	ldr	r0, [sp, #68]	; 0x44
    971e:	f7ff fb0e 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9722:	9019      	str	r0, [sp, #100]	; 0x64
    9724:	e7ff      	b.n	9726 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
    9726:	9819      	ldr	r0, [sp, #100]	; 0x64
    9728:	1e41      	subs	r1, r0, #1
    972a:	bf18      	it	ne
    972c:	2101      	movne	r1, #1
    972e:	2801      	cmp	r0, #1
    9730:	d001      	beq.n	9736 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
    9732:	e7ff      	b.n	9734 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
    9734:	e006      	b.n	9744 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
    9736:	a817      	add	r0, sp, #92	; 0x5c
    9738:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    973a:	f00a fd0c 	bl	14156 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    973e:	900f      	str	r0, [sp, #60]	; 0x3c
    9740:	e00c      	b.n	975c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9742:	defe      	udf	#254	; 0xfe
    9744:	9819      	ldr	r0, [sp, #100]	; 0x64
    9746:	902e      	str	r0, [sp, #184]	; 0xb8
    9748:	f008 ff44 	bl	125d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    974c:	900e      	str	r0, [sp, #56]	; 0x38
    974e:	e7ff      	b.n	9750 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
    9750:	980e      	ldr	r0, [sp, #56]	; 0x38
    9752:	f7ff fae8 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9756:	9013      	str	r0, [sp, #76]	; 0x4c
    9758:	e7ff      	b.n	975a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
    975a:	e7de      	b.n	971a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    975c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    975e:	f7ff faee 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9762:	901a      	str	r0, [sp, #104]	; 0x68
    9764:	e7ff      	b.n	9766 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
    9766:	981a      	ldr	r0, [sp, #104]	; 0x68
    9768:	1e41      	subs	r1, r0, #1
    976a:	bf18      	it	ne
    976c:	2101      	movne	r1, #1
    976e:	2801      	cmp	r0, #1
    9770:	d001      	beq.n	9776 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
    9772:	e7ff      	b.n	9774 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
    9774:	e004      	b.n	9780 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    9776:	f00a fcec 	bl	14152 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    977a:	900d      	str	r0, [sp, #52]	; 0x34
    977c:	e00c      	b.n	9798 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    977e:	defe      	udf	#254	; 0xfe
    9780:	981a      	ldr	r0, [sp, #104]	; 0x68
    9782:	902f      	str	r0, [sp, #188]	; 0xbc
    9784:	f008 ff26 	bl	125d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9788:	900c      	str	r0, [sp, #48]	; 0x30
    978a:	e7ff      	b.n	978c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
    978c:	980c      	ldr	r0, [sp, #48]	; 0x30
    978e:	f7ff faca 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9792:	9013      	str	r0, [sp, #76]	; 0x4c
    9794:	e7ff      	b.n	9796 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
    9796:	e7c0      	b.n	971a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    9798:	f240 1060 	movw	r0, #352	; 0x160
    979c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    97a0:	990d      	ldr	r1, [sp, #52]	; 0x34
    97a2:	6001      	str	r1, [r0, #0]
    97a4:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    97a6:	f00a fcd6 	bl	14156 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    97aa:	900b      	str	r0, [sp, #44]	; 0x2c
    97ac:	e7ff      	b.n	97ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
    97ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
    97b0:	f7ff fac5 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    97b4:	901b      	str	r0, [sp, #108]	; 0x6c
    97b6:	e7ff      	b.n	97b8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
    97b8:	981b      	ldr	r0, [sp, #108]	; 0x6c
    97ba:	1e41      	subs	r1, r0, #1
    97bc:	bf18      	it	ne
    97be:	2101      	movne	r1, #1
    97c0:	2801      	cmp	r0, #1
    97c2:	d001      	beq.n	97c8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
    97c4:	e7ff      	b.n	97c6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
    97c6:	e008      	b.n	97da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
    97c8:	f240 1060 	movw	r0, #352	; 0x160
    97cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    97d0:	f00a fd5a 	bl	14288 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    97d4:	900a      	str	r0, [sp, #40]	; 0x28
    97d6:	e00d      	b.n	97f4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    97d8:	defe      	udf	#254	; 0xfe
    97da:	981b      	ldr	r0, [sp, #108]	; 0x6c
    97dc:	9030      	str	r0, [sp, #192]	; 0xc0
    97de:	f008 fef9 	bl	125d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    97e2:	9009      	str	r0, [sp, #36]	; 0x24
    97e4:	e7ff      	b.n	97e6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
    97e6:	9809      	ldr	r0, [sp, #36]	; 0x24
    97e8:	f7ff fa9d 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    97ec:	9013      	str	r0, [sp, #76]	; 0x4c
    97ee:	e7ff      	b.n	97f0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
    97f0:	e7ff      	b.n	97f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    97f2:	e792      	b.n	971a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
    97f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    97f6:	f7ff faa2 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    97fa:	901c      	str	r0, [sp, #112]	; 0x70
    97fc:	e7ff      	b.n	97fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
    97fe:	981c      	ldr	r0, [sp, #112]	; 0x70
    9800:	1e41      	subs	r1, r0, #1
    9802:	bf18      	it	ne
    9804:	2101      	movne	r1, #1
    9806:	2801      	cmp	r0, #1
    9808:	d001      	beq.n	980e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
    980a:	e7ff      	b.n	980c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
    980c:	e011      	b.n	9832 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
    980e:	9914      	ldr	r1, [sp, #80]	; 0x50
    9810:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
    9812:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
    9814:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    9816:	46ec      	mov	ip, sp
    9818:	f04f 0e01 	mov.w	lr, #1
    981c:	f8cc e008 	str.w	lr, [ip, #8]
    9820:	f8cc e004 	str.w	lr, [ip, #4]
    9824:	f8cc 0000 	str.w	r0, [ip]
    9828:	a81d      	add	r0, sp, #116	; 0x74
    982a:	f000 fccf 	bl	a1cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
    982e:	e00c      	b.n	984a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
    9830:	defe      	udf	#254	; 0xfe
    9832:	981c      	ldr	r0, [sp, #112]	; 0x70
    9834:	9031      	str	r0, [sp, #196]	; 0xc4
    9836:	f008 fecd 	bl	125d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    983a:	9008      	str	r0, [sp, #32]
    983c:	e7ff      	b.n	983e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
    983e:	9808      	ldr	r0, [sp, #32]
    9840:	f7ff fa71 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9844:	9013      	str	r0, [sp, #76]	; 0x4c
    9846:	e7ff      	b.n	9848 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
    9848:	e7d3      	b.n	97f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    984a:	f240 1048 	movw	r0, #328	; 0x148
    984e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9852:	a91d      	add	r1, sp, #116	; 0x74
    9854:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9858:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
    985c:	f00a fd2a 	bl	142b4 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
    9860:	e7ff      	b.n	9862 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
    9862:	f240 1048 	movw	r0, #328	; 0x148
    9866:	f2c2 0000 	movt	r0, #8192	; 0x2000
    986a:	a923      	add	r1, sp, #140	; 0x8c
    986c:	f000 fcd0 	bl	a210 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
    9870:	9007      	str	r0, [sp, #28]
    9872:	e7ff      	b.n	9874 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
    9874:	9807      	ldr	r0, [sp, #28]
    9876:	f000 0001 	and.w	r0, r0, #1
    987a:	f7ff fa5a 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    987e:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
    9882:	e7ff      	b.n	9884 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
    9884:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
    9888:	07c1      	lsls	r1, r0, #31
    988a:	2900      	cmp	r1, #0
    988c:	d001      	beq.n	9892 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
    988e:	e7ff      	b.n	9890 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
    9890:	e00d      	b.n	98ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    9892:	f64d 6034 	movw	r0, #56884	; 0xde34
    9896:	f2c0 0001 	movt	r0, #1
    989a:	6801      	ldr	r1, [r0, #0]
    989c:	f240 1048 	movw	r0, #328	; 0x148
    98a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    98a4:	f000 fac9 	bl	9e3a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
    98a8:	9006      	str	r0, [sp, #24]
    98aa:	e00b      	b.n	98c4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
    98ac:	defe      	udf	#254	; 0xfe
    98ae:	f7ff f9cd 	bl	8c4c <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    98b2:	9005      	str	r0, [sp, #20]
    98b4:	e7ff      	b.n	98b6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
    98b6:	9805      	ldr	r0, [sp, #20]
    98b8:	f7ff fa35 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    98bc:	9013      	str	r0, [sp, #76]	; 0x4c
    98be:	e7ff      	b.n	98c0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
    98c0:	e7ff      	b.n	98c2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
    98c2:	e72a      	b.n	971a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    98c4:	9806      	ldr	r0, [sp, #24]
    98c6:	f000 0001 	and.w	r0, r0, #1
    98ca:	f7ff fa32 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    98ce:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
    98d2:	e7ff      	b.n	98d4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
    98d4:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
    98d8:	07c1      	lsls	r1, r0, #31
    98da:	2900      	cmp	r1, #0
    98dc:	d001      	beq.n	98e2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
    98de:	e7ff      	b.n	98e0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
    98e0:	e005      	b.n	98ee <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
    98e2:	2000      	movs	r0, #0
    Ok(())
    98e4:	9013      	str	r0, [sp, #76]	; 0x4c
    98e6:	2001      	movs	r0, #1
    98e8:	9013      	str	r0, [sp, #76]	; 0x4c
}
    98ea:	e70d      	b.n	9708 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    98ec:	defe      	udf	#254	; 0xfe
    98ee:	f7ff f9ad 	bl	8c4c <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    98f2:	9004      	str	r0, [sp, #16]
    98f4:	e7ff      	b.n	98f6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
    98f6:	9804      	ldr	r0, [sp, #16]
    98f8:	f7ff fa15 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    98fc:	9013      	str	r0, [sp, #76]	; 0x4c
    98fe:	e7ff      	b.n	9900 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
    9900:	e7df      	b.n	98c2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

00009902 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>:
    9902:	b086      	sub	sp, #24
    9904:	9004      	str	r0, [sp, #16]
    9906:	9105      	str	r1, [sp, #20]
    9908:	9002      	str	r0, [sp, #8]
    990a:	9103      	str	r1, [sp, #12]
    990c:	9802      	ldr	r0, [sp, #8]
    990e:	9903      	ldr	r1, [sp, #12]
    9910:	9000      	str	r0, [sp, #0]
    9912:	9101      	str	r1, [sp, #4]
    9914:	9800      	ldr	r0, [sp, #0]
    9916:	9901      	ldr	r1, [sp, #4]
    9918:	b006      	add	sp, #24
    991a:	4770      	bx	lr

0000991c <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>:
    991c:	b086      	sub	sp, #24
    991e:	9004      	str	r0, [sp, #16]
    9920:	9105      	str	r1, [sp, #20]
    9922:	9002      	str	r0, [sp, #8]
    9924:	9103      	str	r1, [sp, #12]
    9926:	9802      	ldr	r0, [sp, #8]
    9928:	9903      	ldr	r1, [sp, #12]
    992a:	9000      	str	r0, [sp, #0]
    992c:	9101      	str	r1, [sp, #4]
    992e:	9800      	ldr	r0, [sp, #0]
    9930:	9901      	ldr	r1, [sp, #4]
    9932:	b006      	add	sp, #24
    9934:	4770      	bx	lr

00009936 <_ZN4core3ptr4read17h27a035d1812d8297E>:
    9936:	b580      	push	{r7, lr}
    9938:	b088      	sub	sp, #32
    993a:	9003      	str	r0, [sp, #12]
    993c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    9940:	f8ad 100a 	strh.w	r1, [sp, #10]
    9944:	9001      	str	r0, [sp, #4]
    9946:	e7ff      	b.n	9948 <_ZN4core3ptr4read17h27a035d1812d8297E+0x12>
    9948:	f10d 000a 	add.w	r0, sp, #10
    994c:	9006      	str	r0, [sp, #24]
    994e:	9007      	str	r0, [sp, #28]
    9950:	e7ff      	b.n	9952 <_ZN4core3ptr4read17h27a035d1812d8297E+0x1c>
    9952:	f10d 010a 	add.w	r1, sp, #10
    9956:	2201      	movs	r2, #1
    9958:	9801      	ldr	r0, [sp, #4]
    995a:	f00b fab2 	bl	14ec2 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>
    995e:	e7ff      	b.n	9960 <_ZN4core3ptr4read17h27a035d1812d8297E+0x2a>
    9960:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    9964:	4601      	mov	r1, r0
    9966:	f8ad 0014 	strh.w	r0, [sp, #20]
    996a:	f8ad 0016 	strh.w	r0, [sp, #22]
    996e:	9100      	str	r1, [sp, #0]
    9970:	e7ff      	b.n	9972 <_ZN4core3ptr4read17h27a035d1812d8297E+0x3c>
    9972:	9800      	ldr	r0, [sp, #0]
    9974:	b008      	add	sp, #32
    9976:	bd80      	pop	{r7, pc}

00009978 <_ZN4core3ptr5write17h147d4643d861e927E>:
    9978:	b082      	sub	sp, #8
    997a:	460a      	mov	r2, r1
    997c:	9000      	str	r0, [sp, #0]
    997e:	f8ad 1006 	strh.w	r1, [sp, #6]
    9982:	8001      	strh	r1, [r0, #0]
    9984:	b002      	add	sp, #8
    9986:	4770      	bx	lr

00009988 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
    9988:	b580      	push	{r7, lr}
    998a:	b08a      	sub	sp, #40	; 0x28
    998c:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    998e:	f001 fc04 	bl	b19a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
    9992:	9307      	str	r3, [sp, #28]
    9994:	9206      	str	r2, [sp, #24]
    9996:	9105      	str	r1, [sp, #20]
    9998:	9004      	str	r0, [sp, #16]
    999a:	e7ff      	b.n	999c <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
    999c:	a804      	add	r0, sp, #16
    999e:	f00a fd74 	bl	1448a <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    99a2:	9003      	str	r0, [sp, #12]
    99a4:	e7ff      	b.n	99a6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
    99a6:	9803      	ldr	r0, [sp, #12]
    99a8:	f00a fe42 	bl	14630 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    99ac:	9002      	str	r0, [sp, #8]
    99ae:	9101      	str	r1, [sp, #4]
    99b0:	e7ff      	b.n	99b2 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
    99b2:	9802      	ldr	r0, [sp, #8]
    99b4:	f000 0001 	and.w	r0, r0, #1
    99b8:	9901      	ldr	r1, [sp, #4]
    99ba:	b00a      	add	sp, #40	; 0x28
    99bc:	bd80      	pop	{r7, pc}

000099be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
    99be:	b580      	push	{r7, lr}
    99c0:	b090      	sub	sp, #64	; 0x40
    99c2:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
    99c4:	f100 010c 	add.w	r1, r0, #12
    99c8:	9006      	str	r0, [sp, #24]
    99ca:	4608      	mov	r0, r1
    99cc:	f00a fc67 	bl	1429e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    99d0:	9005      	str	r0, [sp, #20]
    99d2:	e7ff      	b.n	99d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
    99d4:	9805      	ldr	r0, [sp, #20]
    99d6:	f00b fbd0 	bl	1517a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
    99da:	9004      	str	r0, [sp, #16]
    99dc:	e7ff      	b.n	99de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
    99de:	9804      	ldr	r0, [sp, #16]
    99e0:	f000 0001 	and.w	r0, r0, #1
    99e4:	f7ff f9a5 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    99e8:	f88d 001f 	strb.w	r0, [sp, #31]
    99ec:	e7ff      	b.n	99ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
    99ee:	f89d 001f 	ldrb.w	r0, [sp, #31]
    99f2:	07c1      	lsls	r1, r0, #31
    99f4:	2900      	cmp	r1, #0
    99f6:	d001      	beq.n	99fc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
    99f8:	e7ff      	b.n	99fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
    99fa:	e006      	b.n	9a0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
    99fc:	9806      	ldr	r0, [sp, #24]
    99fe:	300c      	adds	r0, #12
    9a00:	f00a fc42 	bl	14288 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    9a04:	9003      	str	r0, [sp, #12]
    9a06:	e00d      	b.n	9a24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
    9a08:	defe      	udf	#254	; 0xfe
    9a0a:	f008 f9b9 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9a0e:	e003      	b.n	9a18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
    9a10:	f89d 001e 	ldrb.w	r0, [sp, #30]
    9a14:	b010      	add	sp, #64	; 0x40
    9a16:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
    9a18:	f00b fc04 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9a1c:	f88d 001e 	strb.w	r0, [sp, #30]
    9a20:	e7ff      	b.n	9a22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
    9a22:	e7f5      	b.n	9a10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
    9a24:	9803      	ldr	r0, [sp, #12]
    9a26:	f00b fb53 	bl	150d0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
    9a2a:	9002      	str	r0, [sp, #8]
    9a2c:	e7ff      	b.n	9a2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
    9a2e:	9802      	ldr	r0, [sp, #8]
    9a30:	f000 0001 	and.w	r0, r0, #1
    9a34:	f7ff f97d 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9a38:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    9a3c:	e7ff      	b.n	9a3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
    9a3e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    9a42:	07c1      	lsls	r1, r0, #31
    9a44:	2900      	cmp	r1, #0
    9a46:	d001      	beq.n	9a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
    9a48:	e7ff      	b.n	9a4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
    9a4a:	e006      	b.n	9a5a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
    9a4c:	9806      	ldr	r0, [sp, #24]
    9a4e:	300c      	adds	r0, #12
    9a50:	f00a fc25 	bl	1429e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    9a54:	9001      	str	r0, [sp, #4]
    9a56:	e009      	b.n	9a6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
    9a58:	defe      	udf	#254	; 0xfe
    9a5a:	f008 f991 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9a5e:	e7ff      	b.n	9a60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
    9a60:	f00b fbe0 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9a64:	f88d 001e 	strb.w	r0, [sp, #30]
    9a68:	e7ff      	b.n	9a6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
    9a6a:	e7d1      	b.n	9a10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
    9a6c:	9801      	ldr	r0, [sp, #4]
    9a6e:	f00b fada 	bl	15026 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
    9a72:	f88d 001e 	strb.w	r0, [sp, #30]
    9a76:	e7ff      	b.n	9a78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
    9a78:	e7ca      	b.n	9a10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

00009a7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
    9a7a:	b082      	sub	sp, #8
    9a7c:	9001      	str	r0, [sp, #4]
    9a7e:	e7ff      	b.n	9a80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
    9a80:	b002      	add	sp, #8
    9a82:	4770      	bx	lr

00009a84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
    9a84:	b082      	sub	sp, #8
    9a86:	9001      	str	r0, [sp, #4]
    9a88:	e7ff      	b.n	9a8a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
    9a8a:	b002      	add	sp, #8
    9a8c:	4770      	bx	lr

00009a8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
    9a8e:	b082      	sub	sp, #8
    9a90:	9001      	str	r0, [sp, #4]
    9a92:	e7ff      	b.n	9a94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
    9a94:	b002      	add	sp, #8
    9a96:	4770      	bx	lr

00009a98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    9a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a9a:	b0c7      	sub	sp, #284	; 0x11c
    9a9c:	f8dd c134 	ldr.w	ip, [sp, #308]	; 0x134
    9aa0:	f8dd e130 	ldr.w	lr, [sp, #304]	; 0x130
    9aa4:	461c      	mov	r4, r3
    9aa6:	4615      	mov	r5, r2
    9aa8:	460e      	mov	r6, r1
    9aaa:	9040      	str	r0, [sp, #256]	; 0x100
    9aac:	f8ad 1104 	strh.w	r1, [sp, #260]	; 0x104
    9ab0:	f8ad 2106 	strh.w	r2, [sp, #262]	; 0x106
    9ab4:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
    9ab8:	f8ad e10a 	strh.w	lr, [sp, #266]	; 0x10a
    9abc:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
    9abe:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
    9ac2:	2701      	movs	r7, #1
    9ac4:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
    9ac8:	466f      	mov	r7, sp
    9aca:	f8c7 e000 	str.w	lr, [r7]
    9ace:	900a      	str	r0, [sp, #40]	; 0x28
    9ad0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9ad4:	9408      	str	r4, [sp, #32]
    9ad6:	9507      	str	r5, [sp, #28]
    9ad8:	9606      	str	r6, [sp, #24]
    9ada:	f000 fa44 	bl	9f66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
    9ade:	9005      	str	r0, [sp, #20]
    9ae0:	e7ff      	b.n	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x4a>
    9ae2:	9805      	ldr	r0, [sp, #20]
    9ae4:	f000 0001 	and.w	r0, r0, #1
    9ae8:	f7ff f923 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9aec:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    9af0:	e7ff      	b.n	9af2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x5a>
    9af2:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    9af6:	07c1      	lsls	r1, r0, #31
    9af8:	2900      	cmp	r1, #0
    9afa:	d001      	beq.n	9b00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x68>
    9afc:	e7ff      	b.n	9afe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x66>
    9afe:	e00f      	b.n	9b20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x88>
    9b00:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
    9b02:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    9b06:	a80c      	add	r0, sp, #48	; 0x30
    9b08:	22cc      	movs	r2, #204	; 0xcc
    9b0a:	9004      	str	r0, [sp, #16]
    9b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
    9b0e:	f013 ffb1 	bl	1da74 <__aeabi_memcpy>
    9b12:	980a      	ldr	r0, [sp, #40]	; 0x28
    9b14:	9904      	ldr	r1, [sp, #16]
    9b16:	f000 f884 	bl	9c22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>
    9b1a:	9003      	str	r0, [sp, #12]
    9b1c:	e00d      	b.n	9b3a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa2>
        self.set_address_window(sx, sy, ex, ey)?;
    9b1e:	defe      	udf	#254	; 0xfe
    9b20:	f008 f92e 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9b24:	e003      	b.n	9b2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x96>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
    9b26:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9b2a:	b047      	add	sp, #284	; 0x11c
    9b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
    9b2e:	f00b fb79 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9b32:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9b36:	e7ff      	b.n	9b38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa0>
    9b38:	e034      	b.n	9ba4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        self.write_pixels(colors) ? ;
    9b3a:	9803      	ldr	r0, [sp, #12]
    9b3c:	f000 0001 	and.w	r0, r0, #1
    9b40:	f7ff f8f7 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9b44:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    9b48:	e7ff      	b.n	9b4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xb2>
    9b4a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    9b4e:	07c1      	lsls	r1, r0, #31
    9b50:	2900      	cmp	r1, #0
    9b52:	d001      	beq.n	9b58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xc0>
    9b54:	e7ff      	b.n	9b56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xbe>
    9b56:	e004      	b.n	9b62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xca>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    9b58:	f009 fbe8 	bl	1332c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    9b5c:	9002      	str	r0, [sp, #8]
    9b5e:	e009      	b.n	9b74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xdc>
        self.write_pixels(colors) ? ;
    9b60:	defe      	udf	#254	; 0xfe
    9b62:	f008 f90d 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9b66:	e7ff      	b.n	9b68 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xd0>
    9b68:	f00b fb5c 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9b6c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9b70:	e7ff      	b.n	9b72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xda>
    9b72:	e017      	b.n	9ba4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    9b74:	f64d 6138 	movw	r1, #56888	; 0xde38
    9b78:	f2c0 0101 	movt	r1, #1
    9b7c:	f64d 6394 	movw	r3, #56980	; 0xde94
    9b80:	f2c0 0301 	movt	r3, #1
    9b84:	220e      	movs	r2, #14
    9b86:	9802      	ldr	r0, [sp, #8]
    9b88:	f7ff f89a 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9b8c:	e7ff      	b.n	9b8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xf6>
    9b8e:	2000      	movs	r0, #0
        Ok(())
    9b90:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    9b94:	e7c7      	b.n	9b26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
    9b96:	2000      	movs	r0, #0
    9b98:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    9b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
    9b9e:	f000 ff1d 	bl	a9dc <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    9ba2:	e7c0      	b.n	9b26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
    9ba4:	f89d 00ff 	ldrb.w	r0, [sp, #255]	; 0xff
    9ba8:	07c0      	lsls	r0, r0, #31
    9baa:	2800      	cmp	r0, #0
    9bac:	d1f3      	bne.n	9b96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xfe>
    9bae:	e7ba      	b.n	9b26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>

00009bb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
    9bb0:	b580      	push	{r7, lr}
    9bb2:	b084      	sub	sp, #16
    9bb4:	9001      	str	r0, [sp, #4]
    9bb6:	9102      	str	r1, [sp, #8]
    9bb8:	9203      	str	r2, [sp, #12]
        mynewt::spi::spi_noblock_write_data(
    9bba:	4608      	mov	r0, r1
    9bbc:	4611      	mov	r1, r2
    9bbe:	f009 fb63 	bl	13288 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9bc2:	9000      	str	r0, [sp, #0]
    9bc4:	e7ff      	b.n	9bc6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
    9bc6:	f64d 61a4 	movw	r1, #56996	; 0xdea4
    9bca:	f2c0 0101 	movt	r1, #1
    9bce:	f64d 63b4 	movw	r3, #57012	; 0xdeb4
    9bd2:	f2c0 0301 	movt	r3, #1
    9bd6:	220d      	movs	r2, #13
    9bd8:	9800      	ldr	r0, [sp, #0]
    9bda:	f7ff f871 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9bde:	e7ff      	b.n	9be0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
    9be0:	2000      	movs	r0, #0
    }
    9be2:	b004      	add	sp, #16
    9be4:	bd80      	pop	{r7, pc}

00009be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
    9be6:	b580      	push	{r7, lr}
    9be8:	b088      	sub	sp, #32
    9bea:	460a      	mov	r2, r1
    9bec:	9006      	str	r0, [sp, #24]
    9bee:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
    9bf2:	9004      	str	r0, [sp, #16]
    9bf4:	4608      	mov	r0, r1
    9bf6:	9203      	str	r2, [sp, #12]
    9bf8:	f000 feb9 	bl	a96e <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
    9bfc:	9002      	str	r0, [sp, #8]
    9bfe:	e7ff      	b.n	9c00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
    9c00:	9802      	ldr	r0, [sp, #8]
    9c02:	f8ad 0016 	strh.w	r0, [sp, #22]
    9c06:	e7ff      	b.n	9c08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
    9c08:	f10d 0116 	add.w	r1, sp, #22
    9c0c:	2202      	movs	r2, #2
        self.write_data(&bytes)
    9c0e:	9804      	ldr	r0, [sp, #16]
    9c10:	f7ff ffce 	bl	9bb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
    9c14:	9001      	str	r0, [sp, #4]
    9c16:	e7ff      	b.n	9c18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
    9c18:	9801      	ldr	r0, [sp, #4]
    9c1a:	f000 0001 	and.w	r0, r0, #1
    9c1e:	b008      	add	sp, #32
    9c20:	bd80      	pop	{r7, pc}

00009c22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
    9c22:	b580      	push	{r7, lr}
    9c24:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
    9c28:	90a8      	str	r0, [sp, #672]	; 0x2a0
    9c2a:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
    9c2c:	f88d 229f 	strb.w	r2, [sp, #671]	; 0x29f
    9c30:	2301      	movs	r3, #1
    9c32:	f88d 329f 	strb.w	r3, [sp, #671]	; 0x29f
    9c36:	232c      	movs	r3, #44	; 0x2c
    9c38:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    9c3c:	920a      	str	r2, [sp, #40]	; 0x28
    9c3e:	9209      	str	r2, [sp, #36]	; 0x24
    9c40:	9209      	str	r2, [sp, #36]	; 0x24
    9c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9c46:	f89d c023 	ldrb.w	ip, [sp, #35]	; 0x23
    9c4a:	9007      	str	r0, [sp, #28]
    9c4c:	9106      	str	r1, [sp, #24]
    9c4e:	4661      	mov	r1, ip
    9c50:	f000 f898 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9c54:	9005      	str	r0, [sp, #20]
    9c56:	e7ff      	b.n	9c58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x36>
    9c58:	9805      	ldr	r0, [sp, #20]
    9c5a:	f000 0001 	and.w	r0, r0, #1
    9c5e:	f7ff f868 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c62:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    9c66:	e7ff      	b.n	9c68 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x46>
    9c68:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    9c6c:	07c1      	lsls	r1, r0, #31
    9c6e:	2900      	cmp	r1, #0
    9c70:	d001      	beq.n	9c76 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x54>
    9c72:	e7ff      	b.n	9c74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x52>
    9c74:	e00e      	b.n	9c94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x72>
    9c76:	2000      	movs	r0, #0
        for color in colors {
    9c78:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
    9c7c:	a83f      	add	r0, sp, #252	; 0xfc
    9c7e:	22cc      	movs	r2, #204	; 0xcc
    9c80:	9004      	str	r0, [sp, #16]
    9c82:	9906      	ldr	r1, [sp, #24]
    9c84:	f013 fef6 	bl	1da74 <__aeabi_memcpy>
    9c88:	a80b      	add	r0, sp, #44	; 0x2c
    9c8a:	9904      	ldr	r1, [sp, #16]
    9c8c:	f00a fdf0 	bl	14870 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>
    9c90:	e00e      	b.n	9cb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8e>
        self.write_command(Instruction::RAMWR, None)?;
    9c92:	defe      	udf	#254	; 0xfe
    9c94:	f008 f874 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9c98:	e004      	b.n	9ca4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x82>
    }
    9c9a:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
    9c9e:	f50d 7d2e 	add.w	sp, sp, #696	; 0x2b8
    9ca2:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
    9ca4:	f00b fabe 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ca8:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    9cac:	e7ff      	b.n	9cae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8c>
    9cae:	e063      	b.n	9d78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
    9cb0:	a872      	add	r0, sp, #456	; 0x1c8
    9cb2:	a90b      	add	r1, sp, #44	; 0x2c
    9cb4:	22d0      	movs	r2, #208	; 0xd0
        for color in colors {
    9cb6:	f013 fedd 	bl	1da74 <__aeabi_memcpy>
    9cba:	e7ff      	b.n	9cbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
    9cbc:	a872      	add	r0, sp, #456	; 0x1c8
    9cbe:	f00a fded 	bl	1489c <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>
    9cc2:	f8ad 129a 	strh.w	r1, [sp, #666]	; 0x29a
    9cc6:	f8ad 0298 	strh.w	r0, [sp, #664]	; 0x298
    9cca:	e7ff      	b.n	9ccc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xaa>
    9ccc:	f8bd 0298 	ldrh.w	r0, [sp, #664]	; 0x298
    9cd0:	4601      	mov	r1, r0
    9cd2:	2800      	cmp	r0, #0
    9cd4:	d001      	beq.n	9cda <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb8>
    9cd6:	e7ff      	b.n	9cd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb6>
    9cd8:	e004      	b.n	9ce4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xc2>
    9cda:	a872      	add	r0, sp, #456	; 0x1c8
        }
    9cdc:	f000 fe9d 	bl	aa1a <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
    9ce0:	e02e      	b.n	9d40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11e>
        for color in colors {
    9ce2:	defe      	udf	#254	; 0xfe
    9ce4:	f8bd 029a 	ldrh.w	r0, [sp, #666]	; 0x29a
    9ce8:	f8ad 02b2 	strh.w	r0, [sp, #690]	; 0x2b2
    9cec:	f8ad 02b4 	strh.w	r0, [sp, #692]	; 0x2b4
    9cf0:	f8ad 02b6 	strh.w	r0, [sp, #694]	; 0x2b6
            self.write_word(color)?;
    9cf4:	9907      	ldr	r1, [sp, #28]
    9cf6:	9003      	str	r0, [sp, #12]
    9cf8:	4608      	mov	r0, r1
    9cfa:	9903      	ldr	r1, [sp, #12]
    9cfc:	f7ff ff73 	bl	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9d00:	9002      	str	r0, [sp, #8]
    9d02:	e7ff      	b.n	9d04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xe2>
    9d04:	9802      	ldr	r0, [sp, #8]
    9d06:	f000 0001 	and.w	r0, r0, #1
    9d0a:	f7ff f812 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d0e:	f88d 029e 	strb.w	r0, [sp, #670]	; 0x29e
    9d12:	e7ff      	b.n	9d14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xf2>
    9d14:	f89d 029e 	ldrb.w	r0, [sp, #670]	; 0x29e
    9d18:	07c1      	lsls	r1, r0, #31
    9d1a:	2900      	cmp	r1, #0
    9d1c:	d001      	beq.n	9d22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x100>
    9d1e:	e7ff      	b.n	9d20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xfe>
    9d20:	e001      	b.n	9d26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x104>
        for color in colors {
    9d22:	e7cb      	b.n	9cbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
            self.write_word(color)?;
    9d24:	defe      	udf	#254	; 0xfe
    9d26:	f008 f82b 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9d2a:	e7ff      	b.n	9d2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x10a>
    9d2c:	f00b fa7a 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9d30:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    9d34:	e7ff      	b.n	9d36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x114>
    9d36:	a872      	add	r0, sp, #456	; 0x1c8
        }
    9d38:	f000 fe6f 	bl	aa1a <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
    9d3c:	e7ff      	b.n	9d3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11c>
    }
    9d3e:	e01b      	b.n	9d78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    9d40:	f009 faf4 	bl	1332c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    9d44:	9001      	str	r0, [sp, #4]
    9d46:	e7ff      	b.n	9d48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x126>
    9d48:	f64d 6138 	movw	r1, #56888	; 0xde38
    9d4c:	f2c0 0101 	movt	r1, #1
    9d50:	f64d 63c4 	movw	r3, #57028	; 0xdec4
    9d54:	f2c0 0301 	movt	r3, #1
    9d58:	220e      	movs	r2, #14
    9d5a:	9801      	ldr	r0, [sp, #4]
    9d5c:	f7fe ffb0 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9d60:	e7ff      	b.n	9d62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x140>
    9d62:	2000      	movs	r0, #0
        Ok(())
    9d64:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    }
    9d68:	e797      	b.n	9c9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
    9d6a:	2000      	movs	r0, #0
    9d6c:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
    9d70:	9806      	ldr	r0, [sp, #24]
    9d72:	f000 fe33 	bl	a9dc <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    9d76:	e790      	b.n	9c9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
    9d78:	f89d 029f 	ldrb.w	r0, [sp, #671]	; 0x29f
    9d7c:	07c0      	lsls	r0, r0, #31
    9d7e:	2800      	cmp	r0, #0
    9d80:	d1f3      	bne.n	9d6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x148>
    9d82:	e78a      	b.n	9c9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>

00009d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
    9d84:	b580      	push	{r7, lr}
    9d86:	b08e      	sub	sp, #56	; 0x38
    9d88:	468c      	mov	ip, r1
    9d8a:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
    9d8e:	920b      	str	r2, [sp, #44]	; 0x2c
    9d90:	930c      	str	r3, [sp, #48]	; 0x30
    9d92:	900d      	str	r0, [sp, #52]	; 0x34
    9d94:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
    9d98:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9d9c:	f000 fdbd 	bl	a91a <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
    9da0:	9008      	str	r0, [sp, #32]
    9da2:	9107      	str	r1, [sp, #28]
    9da4:	e7ff      	b.n	9da6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
    9da6:	9808      	ldr	r0, [sp, #32]
    9da8:	f000 0001 	and.w	r0, r0, #1
    9dac:	f64d 62d4 	movw	r2, #57044	; 0xded4
    9db0:	f2c0 0201 	movt	r2, #1
    9db4:	9907      	ldr	r1, [sp, #28]
    9db6:	f00a fbaa 	bl	1450e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9dba:	9006      	str	r0, [sp, #24]
    9dbc:	e7ff      	b.n	9dbe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
    9dbe:	9806      	ldr	r0, [sp, #24]
    9dc0:	f009 fa1a 	bl	131f8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
    9dc4:	9005      	str	r0, [sp, #20]
    9dc6:	e7ff      	b.n	9dc8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
    9dc8:	f64d 61e4 	movw	r1, #57060	; 0xdee4
    9dcc:	f2c0 0101 	movt	r1, #1
    9dd0:	f64d 63f0 	movw	r3, #57072	; 0xdef0
    9dd4:	f2c0 0301 	movt	r3, #1
    9dd8:	220c      	movs	r2, #12
    9dda:	9805      	ldr	r0, [sp, #20]
    9ddc:	f7fe ff70 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9de0:	e7ff      	b.n	9de2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
    9de2:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
    9de4:	f00a fbee 	bl	145c4 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
    9de8:	9004      	str	r0, [sp, #16]
    9dea:	e7ff      	b.n	9dec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
    9dec:	9804      	ldr	r0, [sp, #16]
    9dee:	07c1      	lsls	r1, r0, #31
    9df0:	2900      	cmp	r1, #0
    9df2:	d01f      	beq.n	9e34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9df4:	e7ff      	b.n	9df6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
    9df6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9df8:	990c      	ldr	r1, [sp, #48]	; 0x30
    9dfa:	f64d 7200 	movw	r2, #57088	; 0xdf00
    9dfe:	f2c0 0201 	movt	r2, #1
    9e02:	f00a fbad 	bl	14560 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
    9e06:	9003      	str	r0, [sp, #12]
    9e08:	9102      	str	r1, [sp, #8]
    9e0a:	e7ff      	b.n	9e0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
    9e0c:	9803      	ldr	r0, [sp, #12]
    9e0e:	9902      	ldr	r1, [sp, #8]
    9e10:	f009 fa3a 	bl	13288 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9e14:	9001      	str	r0, [sp, #4]
    9e16:	e7ff      	b.n	9e18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
    9e18:	f64d 61a4 	movw	r1, #56996	; 0xdea4
    9e1c:	f2c0 0101 	movt	r1, #1
    9e20:	f64d 7310 	movw	r3, #57104	; 0xdf10
    9e24:	f2c0 0301 	movt	r3, #1
    9e28:	220d      	movs	r2, #13
    9e2a:	9801      	ldr	r0, [sp, #4]
    9e2c:	f7fe ff48 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9e30:	e7ff      	b.n	9e32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
    9e32:	e7ff      	b.n	9e34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9e34:	2000      	movs	r0, #0
    }
    9e36:	b00e      	add	sp, #56	; 0x38
    9e38:	bd80      	pop	{r7, pc}

00009e3a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:
    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
    9e3a:	b580      	push	{r7, lr}
    9e3c:	b098      	sub	sp, #96	; 0x60
    9e3e:	9012      	str	r0, [sp, #72]	; 0x48
    9e40:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
    9e42:	7d02      	ldrb	r2, [r0, #20]
    9e44:	07d2      	lsls	r2, r2, #31
    9e46:	2a00      	cmp	r2, #0
    9e48:	910a      	str	r1, [sp, #40]	; 0x28
    9e4a:	9009      	str	r0, [sp, #36]	; 0x24
    9e4c:	d109      	bne.n	9e62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
    9e4e:	e7ff      	b.n	9e50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
    9e50:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9e52:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    9e56:	980a      	ldr	r0, [sp, #40]	; 0x28
    9e58:	f7ff fd96 	bl	9988 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9e5c:	9008      	str	r0, [sp, #32]
    9e5e:	9107      	str	r1, [sp, #28]
    9e60:	e044      	b.n	9eec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
    9e62:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
    9e64:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    9e68:	980a      	ldr	r0, [sp, #40]	; 0x28
    9e6a:	f7ff fd8d 	bl	9988 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9e6e:	9006      	str	r0, [sp, #24]
    9e70:	9105      	str	r1, [sp, #20]
    9e72:	e7ff      	b.n	9e74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
    9e74:	9806      	ldr	r0, [sp, #24]
    9e76:	f000 0001 	and.w	r0, r0, #1
    9e7a:	f64d 7220 	movw	r2, #57120	; 0xdf20
    9e7e:	f2c0 0201 	movt	r2, #1
    9e82:	9905      	ldr	r1, [sp, #20]
    9e84:	f00a fb43 	bl	1450e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9e88:	9004      	str	r0, [sp, #16]
    9e8a:	e7ff      	b.n	9e8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
    9e8c:	9804      	ldr	r0, [sp, #16]
    9e8e:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9e92:	f10d 0139 	add.w	r1, sp, #57	; 0x39
    9e96:	910c      	str	r1, [sp, #48]	; 0x30
    9e98:	2101      	movs	r1, #1
    9e9a:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
    9e9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9e9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9ea0:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    9ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
    9ea6:	f7ff ff6d 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9eaa:	9003      	str	r0, [sp, #12]
    9eac:	e7ff      	b.n	9eae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
    9eae:	9803      	ldr	r0, [sp, #12]
    9eb0:	f000 0001 	and.w	r0, r0, #1
    9eb4:	f7fe ff3d 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9eb8:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    9ebc:	e7ff      	b.n	9ebe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
    9ebe:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    9ec2:	07c1      	lsls	r1, r0, #31
    9ec4:	2900      	cmp	r1, #0
    9ec6:	d001      	beq.n	9ecc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
    9ec8:	e7ff      	b.n	9eca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
    9eca:	e001      	b.n	9ed0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
    9ecc:	e047      	b.n	9f5e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9ece:	defe      	udf	#254	; 0xfe
            ))?;
    9ed0:	f007 ff56 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ed4:	e003      	b.n	9ede <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
    }
    9ed6:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9eda:	b018      	add	sp, #96	; 0x60
    9edc:	bd80      	pop	{r7, pc}
            ))?;
    9ede:	f00b f9a1 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ee2:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9ee6:	e7ff      	b.n	9ee8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
    9ee8:	e7ff      	b.n	9eea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9eea:	e7f4      	b.n	9ed6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9eec:	9808      	ldr	r0, [sp, #32]
    9eee:	f000 0001 	and.w	r0, r0, #1
    9ef2:	f64d 7230 	movw	r2, #57136	; 0xdf30
    9ef6:	f2c0 0201 	movt	r2, #1
    9efa:	9907      	ldr	r1, [sp, #28]
    9efc:	f00a fb07 	bl	1450e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9f00:	9002      	str	r0, [sp, #8]
    9f02:	e7ff      	b.n	9f04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
    9f04:	9802      	ldr	r0, [sp, #8]
    9f06:	f040 0108 	orr.w	r1, r0, #8
    9f0a:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    9f0e:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    9f12:	910f      	str	r1, [sp, #60]	; 0x3c
    9f14:	2101      	movs	r1, #1
    9f16:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
    9f18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9f1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9f1c:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9f20:	9809      	ldr	r0, [sp, #36]	; 0x24
    9f22:	f7ff ff2f 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9f26:	9001      	str	r0, [sp, #4]
    9f28:	e7ff      	b.n	9f2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
    9f2a:	9801      	ldr	r0, [sp, #4]
    9f2c:	f000 0001 	and.w	r0, r0, #1
    9f30:	f7fe feff 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9f34:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9f38:	e7ff      	b.n	9f3a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
    9f3a:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9f3e:	07c1      	lsls	r1, r0, #31
    9f40:	2900      	cmp	r1, #0
    9f42:	d001      	beq.n	9f48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
    9f44:	e7ff      	b.n	9f46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
    9f46:	e001      	b.n	9f4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
    9f48:	e009      	b.n	9f5e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9f4a:	defe      	udf	#254	; 0xfe
            ))?;
    9f4c:	f007 ff18 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9f50:	e7ff      	b.n	9f52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
    9f52:	f00b f967 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9f56:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9f5a:	e7ff      	b.n	9f5c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
    9f5c:	e7c5      	b.n	9eea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9f5e:	2000      	movs	r0, #0
        Ok(())
    9f60:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    9f64:	e7b7      	b.n	9ed6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

00009f66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
    9f66:	b5b0      	push	{r4, r5, r7, lr}
    9f68:	b0a2      	sub	sp, #136	; 0x88
    9f6a:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
    9f6e:	469e      	mov	lr, r3
    9f70:	4614      	mov	r4, r2
    9f72:	460d      	mov	r5, r1
    9f74:	9015      	str	r0, [sp, #84]	; 0x54
    9f76:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    9f7a:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    9f7e:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    9f82:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
    9f86:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
    9f88:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
    9f8c:	2100      	movs	r1, #0
    9f8e:	9110      	str	r1, [sp, #64]	; 0x40
    9f90:	910f      	str	r1, [sp, #60]	; 0x3c
    9f92:	910f      	str	r1, [sp, #60]	; 0x3c
    9f94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9f96:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9f98:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9f9c:	900d      	str	r0, [sp, #52]	; 0x34
    9f9e:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9fa2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9fa6:	940a      	str	r4, [sp, #40]	; 0x28
    9fa8:	9509      	str	r5, [sp, #36]	; 0x24
    9faa:	f7ff feeb 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9fae:	9008      	str	r0, [sp, #32]
    9fb0:	e7ff      	b.n	9fb2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
    9fb2:	9808      	ldr	r0, [sp, #32]
    9fb4:	f000 0001 	and.w	r0, r0, #1
    9fb8:	f7fe febb 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9fbc:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9fc0:	e7ff      	b.n	9fc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
    9fc2:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9fc6:	07c1      	lsls	r1, r0, #31
    9fc8:	2900      	cmp	r1, #0
    9fca:	d001      	beq.n	9fd0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
    9fcc:	e7ff      	b.n	9fce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
    9fce:	e00d      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
    9fd0:	980d      	ldr	r0, [sp, #52]	; 0x34
    9fd2:	8a01      	ldrh	r1, [r0, #16]
    9fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9fd6:	fa11 f182 	uxtah	r1, r1, r2
    9fda:	b28b      	uxth	r3, r1
    9fdc:	468c      	mov	ip, r1
    9fde:	428b      	cmp	r3, r1
    9fe0:	f8cd c01c 	str.w	ip, [sp, #28]
    9fe4:	f040 80c2 	bne.w	a16c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
    9fe8:	e00d      	b.n	a006 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
    9fea:	defe      	udf	#254	; 0xfe
    9fec:	f007 fec8 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ff0:	e003      	b.n	9ffa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
    }
    9ff2:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    9ff6:	b022      	add	sp, #136	; 0x88
    9ff8:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
    9ffa:	f00b f913 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ffe:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    a002:	e7ff      	b.n	a004 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
    a004:	e7f5      	b.n	9ff2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    a006:	980d      	ldr	r0, [sp, #52]	; 0x34
    a008:	9907      	ldr	r1, [sp, #28]
    a00a:	f7ff fdec 	bl	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    a00e:	9006      	str	r0, [sp, #24]
    a010:	e7ff      	b.n	a012 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
    a012:	9806      	ldr	r0, [sp, #24]
    a014:	f000 0001 	and.w	r0, r0, #1
    a018:	f7fe fe8b 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a01c:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    a020:	e7ff      	b.n	a022 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
    a022:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    a026:	07c1      	lsls	r1, r0, #31
    a028:	2900      	cmp	r1, #0
    a02a:	d001      	beq.n	a030 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
    a02c:	e7ff      	b.n	a02e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
    a02e:	e00d      	b.n	a04c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
    a030:	980d      	ldr	r0, [sp, #52]	; 0x34
    a032:	8a01      	ldrh	r1, [r0, #16]
    a034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a036:	fa11 f182 	uxtah	r1, r1, r2
    a03a:	b28b      	uxth	r3, r1
    a03c:	468c      	mov	ip, r1
    a03e:	428b      	cmp	r3, r1
    a040:	f8cd c014 	str.w	ip, [sp, #20]
    a044:	f040 809e 	bne.w	a184 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
    a048:	e009      	b.n	a05e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
    a04a:	defe      	udf	#254	; 0xfe
    a04c:	f007 fe98 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a050:	e7ff      	b.n	a052 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
    a052:	f00b f8e7 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a056:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    a05a:	e7ff      	b.n	a05c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
    a05c:	e7c9      	b.n	9ff2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
    a05e:	980d      	ldr	r0, [sp, #52]	; 0x34
    a060:	9905      	ldr	r1, [sp, #20]
    a062:	f7ff fdc0 	bl	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    a066:	9004      	str	r0, [sp, #16]
    a068:	e7ff      	b.n	a06a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
    a06a:	9804      	ldr	r0, [sp, #16]
    a06c:	f000 0001 	and.w	r0, r0, #1
    a070:	f7fe fe5f 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a074:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    a078:	e7ff      	b.n	a07a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
    a07a:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    a07e:	07c1      	lsls	r1, r0, #31
    a080:	2900      	cmp	r1, #0
    a082:	d001      	beq.n	a088 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
    a084:	e7ff      	b.n	a086 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
    a086:	e010      	b.n	a0aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
    a088:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
    a08a:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
    a08e:	2000      	movs	r0, #0
    a090:	9013      	str	r0, [sp, #76]	; 0x4c
    a092:	9012      	str	r0, [sp, #72]	; 0x48
    a094:	9012      	str	r0, [sp, #72]	; 0x48
    a096:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a098:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a09a:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
    a09e:	980d      	ldr	r0, [sp, #52]	; 0x34
    a0a0:	f7ff fe70 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0a4:	9003      	str	r0, [sp, #12]
    a0a6:	e009      	b.n	a0bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
    a0a8:	defe      	udf	#254	; 0xfe
    a0aa:	f007 fe69 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a0ae:	e7ff      	b.n	a0b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
    a0b0:	f00b f8b8 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a0b4:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    a0b8:	e7ff      	b.n	a0ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
    a0ba:	e79a      	b.n	9ff2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
    a0bc:	9803      	ldr	r0, [sp, #12]
    a0be:	f000 0001 	and.w	r0, r0, #1
    a0c2:	f7fe fe36 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a0c6:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    a0ca:	e7ff      	b.n	a0cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
    a0cc:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    a0d0:	07c1      	lsls	r1, r0, #31
    a0d2:	2900      	cmp	r1, #0
    a0d4:	d001      	beq.n	a0da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
    a0d6:	e7ff      	b.n	a0d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
    a0d8:	e00c      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
    a0da:	980d      	ldr	r0, [sp, #52]	; 0x34
    a0dc:	8a41      	ldrh	r1, [r0, #18]
    a0de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a0e0:	fa11 f182 	uxtah	r1, r1, r2
    a0e4:	b28b      	uxth	r3, r1
    a0e6:	468c      	mov	ip, r1
    a0e8:	428b      	cmp	r3, r1
    a0ea:	f8cd c008 	str.w	ip, [sp, #8]
    a0ee:	d155      	bne.n	a19c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
    a0f0:	e009      	b.n	a106 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
    a0f2:	defe      	udf	#254	; 0xfe
    a0f4:	f007 fe44 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a0f8:	e7ff      	b.n	a0fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
    a0fa:	f00b f893 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a0fe:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    a102:	e7ff      	b.n	a104 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
    a104:	e775      	b.n	9ff2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
    a106:	980d      	ldr	r0, [sp, #52]	; 0x34
    a108:	9902      	ldr	r1, [sp, #8]
    a10a:	f7ff fd6c 	bl	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    a10e:	9001      	str	r0, [sp, #4]
    a110:	e7ff      	b.n	a112 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
    a112:	9801      	ldr	r0, [sp, #4]
    a114:	f000 0001 	and.w	r0, r0, #1
    a118:	f7fe fe0b 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a11c:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    a120:	e7ff      	b.n	a122 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
    a122:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    a126:	07c1      	lsls	r1, r0, #31
    a128:	2900      	cmp	r1, #0
    a12a:	d001      	beq.n	a130 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
    a12c:	e7ff      	b.n	a12e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
    a12e:	e00c      	b.n	a14a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
    a130:	980d      	ldr	r0, [sp, #52]	; 0x34
    a132:	8a41      	ldrh	r1, [r0, #18]
    a134:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a136:	fa11 f182 	uxtah	r1, r1, r2
    a13a:	b28b      	uxth	r3, r1
    a13c:	468c      	mov	ip, r1
    a13e:	428b      	cmp	r3, r1
    a140:	f8cd c000 	str.w	ip, [sp]
    a144:	d136      	bne.n	a1b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
    a146:	e009      	b.n	a15c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
    a148:	defe      	udf	#254	; 0xfe
    a14a:	f007 fe19 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a14e:	e7ff      	b.n	a150 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
    a150:	f00b f868 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a154:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    a158:	e7ff      	b.n	a15a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
    a15a:	e74a      	b.n	9ff2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
    a15c:	980d      	ldr	r0, [sp, #52]	; 0x34
    a15e:	9900      	ldr	r1, [sp, #0]
    a160:	f7ff fd41 	bl	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    a164:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    a168:	e7ff      	b.n	a16a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
    a16a:	e742      	b.n	9ff2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    a16c:	f64d 7050 	movw	r0, #57168	; 0xdf50
    a170:	f2c0 0001 	movt	r0, #1
    a174:	f64d 7240 	movw	r2, #57152	; 0xdf40
    a178:	f2c0 0201 	movt	r2, #1
    a17c:	211c      	movs	r1, #28
    a17e:	f00d f8a5 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    a182:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
    a184:	f64d 7050 	movw	r0, #57168	; 0xdf50
    a188:	f2c0 0001 	movt	r0, #1
    a18c:	f64d 726c 	movw	r2, #57196	; 0xdf6c
    a190:	f2c0 0201 	movt	r2, #1
    a194:	211c      	movs	r1, #28
    a196:	f00d f899 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    a19a:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
    a19c:	f64d 7050 	movw	r0, #57168	; 0xdf50
    a1a0:	f2c0 0001 	movt	r0, #1
    a1a4:	f64d 727c 	movw	r2, #57212	; 0xdf7c
    a1a8:	f2c0 0201 	movt	r2, #1
    a1ac:	211c      	movs	r1, #28
    a1ae:	f00d f88d 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    a1b2:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
    a1b4:	f64d 7050 	movw	r0, #57168	; 0xdf50
    a1b8:	f2c0 0001 	movt	r0, #1
    a1bc:	f64d 728c 	movw	r2, #57228	; 0xdf8c
    a1c0:	f2c0 0201 	movt	r2, #1
    a1c4:	211c      	movs	r1, #28
    a1c6:	f00d f881 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    a1ca:	defe      	udf	#254	; 0xfe

0000a1cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
    a1cc:	b5b0      	push	{r4, r5, r7, lr}
    a1ce:	b08a      	sub	sp, #40	; 0x28
    a1d0:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    a1d4:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    a1d8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    a1da:	9106      	str	r1, [sp, #24]
    a1dc:	9207      	str	r2, [sp, #28]
    a1de:	9308      	str	r3, [sp, #32]
    a1e0:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    a1e4:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
    a1e8:	9100      	str	r1, [sp, #0]
    a1ea:	9201      	str	r2, [sp, #4]
    a1ec:	9302      	str	r3, [sp, #8]
    a1ee:	9403      	str	r4, [sp, #12]
    a1f0:	f88d e014 	strb.w	lr, [sp, #20]
    a1f4:	f88d c015 	strb.w	ip, [sp, #21]
    a1f8:	2100      	movs	r1, #0
    a1fa:	f8ad 1010 	strh.w	r1, [sp, #16]
    a1fe:	f8ad 1012 	strh.w	r1, [sp, #18]
    a202:	4669      	mov	r1, sp
        display
    a204:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    a208:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
    a20c:	b00a      	add	sp, #40	; 0x28
    a20e:	bdb0      	pop	{r4, r5, r7, pc}

0000a210 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
    a210:	b580      	push	{r7, lr}
    a212:	b0f6      	sub	sp, #472	; 0x1d8
    a214:	904e      	str	r0, [sp, #312]	; 0x138
    a216:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
    a218:	9117      	str	r1, [sp, #92]	; 0x5c
    a21a:	9016      	str	r0, [sp, #88]	; 0x58
    a21c:	f008 fa92 	bl	12744 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
    a220:	9015      	str	r0, [sp, #84]	; 0x54
    a222:	e7ff      	b.n	a224 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
    a224:	f64d 719c 	movw	r1, #57244	; 0xdf9c
    a228:	f2c0 0101 	movt	r1, #1
    a22c:	f64d 73ac 	movw	r3, #57260	; 0xdfac
    a230:	f2c0 0301 	movt	r3, #1
    a234:	220d      	movs	r2, #13
    a236:	9815      	ldr	r0, [sp, #84]	; 0x54
    a238:	f7fe fd42 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a23c:	e7ff      	b.n	a23e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
    a23e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a240:	f7ff fbbd 	bl	99be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
    a244:	9014      	str	r0, [sp, #80]	; 0x50
    a246:	e7ff      	b.n	a248 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
    a248:	9814      	ldr	r0, [sp, #80]	; 0x50
    a24a:	f000 0001 	and.w	r0, r0, #1
    a24e:	f7fe fd70 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a252:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    a256:	e7ff      	b.n	a258 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
    a258:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
    a25c:	07c1      	lsls	r1, r0, #31
    a25e:	2900      	cmp	r1, #0
    a260:	d001      	beq.n	a266 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
    a262:	e7ff      	b.n	a264 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
    a264:	e010      	b.n	a288 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
    a266:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
    a268:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    a26c:	2000      	movs	r0, #0
    a26e:	901a      	str	r0, [sp, #104]	; 0x68
    a270:	9019      	str	r0, [sp, #100]	; 0x64
    a272:	9019      	str	r0, [sp, #100]	; 0x64
    a274:	9a19      	ldr	r2, [sp, #100]	; 0x64
    a276:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a278:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    a27c:	9816      	ldr	r0, [sp, #88]	; 0x58
    a27e:	f7ff fd81 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a282:	9013      	str	r0, [sp, #76]	; 0x4c
    a284:	e00d      	b.n	a2a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
    a286:	defe      	udf	#254	; 0xfe
    a288:	f007 fd7a 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a28c:	e003      	b.n	a296 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
    a28e:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    a292:	b076      	add	sp, #472	; 0x1d8
    a294:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
    a296:	f00a ffc5 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a29a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a29e:	e7ff      	b.n	a2a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
    a2a0:	e7f5      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
    a2a2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a2a4:	f000 0001 	and.w	r0, r0, #1
    a2a8:	f7fe fd43 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a2ac:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    a2b0:	e7ff      	b.n	a2b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
    a2b2:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    a2b6:	07c1      	lsls	r1, r0, #31
    a2b8:	2900      	cmp	r1, #0
    a2ba:	d001      	beq.n	a2c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
    a2bc:	e7ff      	b.n	a2be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
    a2be:	e005      	b.n	a2cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
    a2c0:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a2c2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a2c4:	f009 fff7 	bl	142b6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a2c8:	e009      	b.n	a2de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
    a2ca:	defe      	udf	#254	; 0xfe
    a2cc:	f007 fd58 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a2d0:	e7ff      	b.n	a2d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
    a2d2:	f00a ffa7 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a2d6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a2da:	e7ff      	b.n	a2dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
    a2dc:	e7d7      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a2de:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
    a2e0:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    a2e4:	2000      	movs	r0, #0
    a2e6:	901d      	str	r0, [sp, #116]	; 0x74
    a2e8:	901c      	str	r0, [sp, #112]	; 0x70
    a2ea:	901c      	str	r0, [sp, #112]	; 0x70
    a2ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a2ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a2f0:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
    a2f4:	9816      	ldr	r0, [sp, #88]	; 0x58
    a2f6:	f7ff fd45 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a2fa:	9012      	str	r0, [sp, #72]	; 0x48
    a2fc:	e7ff      	b.n	a2fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
    a2fe:	9812      	ldr	r0, [sp, #72]	; 0x48
    a300:	f000 0001 	and.w	r0, r0, #1
    a304:	f7fe fd15 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a308:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
    a30c:	e7ff      	b.n	a30e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
    a30e:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
    a312:	07c1      	lsls	r1, r0, #31
    a314:	2900      	cmp	r1, #0
    a316:	d001      	beq.n	a31c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
    a318:	e7ff      	b.n	a31a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
    a31a:	e005      	b.n	a328 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
    a31c:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a31e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a320:	f009 ffc9 	bl	142b6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a324:	e009      	b.n	a33a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
    a326:	defe      	udf	#254	; 0xfe
    a328:	f007 fd2a 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a32c:	e7ff      	b.n	a32e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
    a32e:	f00a ff79 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a332:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a336:	e7ff      	b.n	a338 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
    a338:	e7a9      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a33a:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    a33c:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    a340:	f64d 70c0 	movw	r0, #57280	; 0xdfc0
    a344:	f2c0 0001 	movt	r0, #1
    a348:	6800      	ldr	r0, [r0, #0]
    a34a:	901f      	str	r0, [sp, #124]	; 0x7c
    a34c:	2003      	movs	r0, #3
    a34e:	9020      	str	r0, [sp, #128]	; 0x80
    a350:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    a352:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a354:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
    a358:	9816      	ldr	r0, [sp, #88]	; 0x58
    a35a:	f7ff fd13 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a35e:	9011      	str	r0, [sp, #68]	; 0x44
    a360:	e7ff      	b.n	a362 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
    a362:	9811      	ldr	r0, [sp, #68]	; 0x44
    a364:	f000 0001 	and.w	r0, r0, #1
    a368:	f7fe fce3 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a36c:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    a370:	e7ff      	b.n	a372 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
    a372:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    a376:	07c1      	lsls	r1, r0, #31
    a378:	2900      	cmp	r1, #0
    a37a:	d001      	beq.n	a380 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
    a37c:	e7ff      	b.n	a37e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
    a37e:	e014      	b.n	a3aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
    a380:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a382:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    a386:	f64d 70c0 	movw	r0, #57280	; 0xdfc0
    a38a:	f2c0 0001 	movt	r0, #1
    a38e:	6800      	ldr	r0, [r0, #0]
    a390:	9022      	str	r0, [sp, #136]	; 0x88
    a392:	2003      	movs	r0, #3
    a394:	9023      	str	r0, [sp, #140]	; 0x8c
    a396:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a398:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a39a:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
    a39e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a3a0:	f7ff fcf0 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a3a4:	9010      	str	r0, [sp, #64]	; 0x40
    a3a6:	e009      	b.n	a3bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    a3a8:	defe      	udf	#254	; 0xfe
    a3aa:	f007 fce9 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a3ae:	e7ff      	b.n	a3b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
    a3b0:	f00a ff38 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a3b4:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a3b8:	e7ff      	b.n	a3ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
    a3ba:	e768      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a3bc:	9810      	ldr	r0, [sp, #64]	; 0x40
    a3be:	f000 0001 	and.w	r0, r0, #1
    a3c2:	f7fe fcb6 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a3c6:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
    a3ca:	e7ff      	b.n	a3cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
    a3cc:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
    a3d0:	07c1      	lsls	r1, r0, #31
    a3d2:	2900      	cmp	r1, #0
    a3d4:	d001      	beq.n	a3da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
    a3d6:	e7ff      	b.n	a3d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
    a3d8:	e014      	b.n	a404 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
    a3da:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
    a3dc:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a3e0:	f64d 70cc 	movw	r0, #57292	; 0xdfcc
    a3e4:	f2c0 0001 	movt	r0, #1
    a3e8:	6800      	ldr	r0, [r0, #0]
    a3ea:	9025      	str	r0, [sp, #148]	; 0x94
    a3ec:	2006      	movs	r0, #6
    a3ee:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
    a3f0:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a3f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a3f4:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
    a3f8:	9816      	ldr	r0, [sp, #88]	; 0x58
    a3fa:	f7ff fcc3 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a3fe:	900f      	str	r0, [sp, #60]	; 0x3c
    a400:	e009      	b.n	a416 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a402:	defe      	udf	#254	; 0xfe
    a404:	f007 fcbc 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a408:	e7ff      	b.n	a40a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
    a40a:	f00a ff0b 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a40e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a412:	e7ff      	b.n	a414 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
    a414:	e73b      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
    a416:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a418:	f000 0001 	and.w	r0, r0, #1
    a41c:	f7fe fc89 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a420:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
    a424:	e7ff      	b.n	a426 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a426:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
    a42a:	07c1      	lsls	r1, r0, #31
    a42c:	2900      	cmp	r1, #0
    a42e:	d001      	beq.n	a434 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
    a430:	e7ff      	b.n	a432 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
    a432:	e014      	b.n	a45e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
    a434:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a436:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
    a43a:	f64d 70d4 	movw	r0, #57300	; 0xdfd4
    a43e:	f2c0 0001 	movt	r0, #1
    a442:	6800      	ldr	r0, [r0, #0]
    a444:	9028      	str	r0, [sp, #160]	; 0xa0
    a446:	2001      	movs	r0, #1
    a448:	9029      	str	r0, [sp, #164]	; 0xa4
    a44a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    a44c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    a44e:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
    a452:	9816      	ldr	r0, [sp, #88]	; 0x58
    a454:	f7ff fc96 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a458:	900e      	str	r0, [sp, #56]	; 0x38
    a45a:	e009      	b.n	a470 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
    a45c:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a45e:	f007 fc8f 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a462:	e7ff      	b.n	a464 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
    a464:	f00a fede 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a468:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a46c:	e7ff      	b.n	a46e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
    a46e:	e70e      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a470:	980e      	ldr	r0, [sp, #56]	; 0x38
    a472:	f000 0001 	and.w	r0, r0, #1
    a476:	f7fe fc5c 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a47a:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
    a47e:	e7ff      	b.n	a480 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
    a480:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
    a484:	07c1      	lsls	r1, r0, #31
    a486:	2900      	cmp	r1, #0
    a488:	d001      	beq.n	a48e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
    a48a:	e7ff      	b.n	a48c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
    a48c:	e014      	b.n	a4b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
    a48e:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a490:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
    a494:	f64d 70dc 	movw	r0, #57308	; 0xdfdc
    a498:	f2c0 0001 	movt	r0, #1
    a49c:	6800      	ldr	r0, [r0, #0]
    a49e:	902b      	str	r0, [sp, #172]	; 0xac
    a4a0:	2003      	movs	r0, #3
    a4a2:	902c      	str	r0, [sp, #176]	; 0xb0
    a4a4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    a4a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    a4a8:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
    a4ac:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4ae:	f7ff fc69 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a4b2:	900d      	str	r0, [sp, #52]	; 0x34
    a4b4:	e009      	b.n	a4ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a4b6:	defe      	udf	#254	; 0xfe
    a4b8:	f007 fc62 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a4bc:	e7ff      	b.n	a4be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
    a4be:	f00a feb1 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a4c2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a4c6:	e7ff      	b.n	a4c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
    a4c8:	e6e1      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a4ca:	980d      	ldr	r0, [sp, #52]	; 0x34
    a4cc:	f000 0001 	and.w	r0, r0, #1
    a4d0:	f7fe fc2f 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a4d4:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
    a4d8:	e7ff      	b.n	a4da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
    a4da:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
    a4de:	07c1      	lsls	r1, r0, #31
    a4e0:	2900      	cmp	r1, #0
    a4e2:	d001      	beq.n	a4e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
    a4e4:	e7ff      	b.n	a4e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
    a4e6:	e014      	b.n	a512 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
    a4e8:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a4ea:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
    a4ee:	f64d 70e4 	movw	r0, #57316	; 0xdfe4
    a4f2:	f2c0 0001 	movt	r0, #1
    a4f6:	6800      	ldr	r0, [r0, #0]
    a4f8:	902e      	str	r0, [sp, #184]	; 0xb8
    a4fa:	2001      	movs	r0, #1
    a4fc:	902f      	str	r0, [sp, #188]	; 0xbc
    a4fe:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    a500:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    a502:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
    a506:	9816      	ldr	r0, [sp, #88]	; 0x58
    a508:	f7ff fc3c 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a50c:	900c      	str	r0, [sp, #48]	; 0x30
    a50e:	e009      	b.n	a524 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a510:	defe      	udf	#254	; 0xfe
    a512:	f007 fc35 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a516:	e7ff      	b.n	a518 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
    a518:	f00a fe84 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a51c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a520:	e7ff      	b.n	a522 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
    a522:	e6b4      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a524:	980c      	ldr	r0, [sp, #48]	; 0x30
    a526:	f000 0001 	and.w	r0, r0, #1
    a52a:	f7fe fc02 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a52e:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
    a532:	e7ff      	b.n	a534 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
    a534:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
    a538:	07c1      	lsls	r1, r0, #31
    a53a:	2900      	cmp	r1, #0
    a53c:	d001      	beq.n	a542 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
    a53e:	e7ff      	b.n	a540 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
    a540:	e014      	b.n	a56c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
    a542:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a544:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
    a548:	f64d 70ec 	movw	r0, #57324	; 0xdfec
    a54c:	f2c0 0001 	movt	r0, #1
    a550:	6800      	ldr	r0, [r0, #0]
    a552:	9031      	str	r0, [sp, #196]	; 0xc4
    a554:	2002      	movs	r0, #2
    a556:	9032      	str	r0, [sp, #200]	; 0xc8
    a558:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    a55a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    a55c:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
    a560:	9816      	ldr	r0, [sp, #88]	; 0x58
    a562:	f7ff fc0f 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a566:	900b      	str	r0, [sp, #44]	; 0x2c
    a568:	e009      	b.n	a57e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a56a:	defe      	udf	#254	; 0xfe
    a56c:	f007 fc08 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a570:	e7ff      	b.n	a572 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
    a572:	f00a fe57 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a576:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a57a:	e7ff      	b.n	a57c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
    a57c:	e687      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a57e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a580:	f000 0001 	and.w	r0, r0, #1
    a584:	f7fe fbd5 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a588:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
    a58c:	e7ff      	b.n	a58e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
    a58e:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
    a592:	07c1      	lsls	r1, r0, #31
    a594:	2900      	cmp	r1, #0
    a596:	d001      	beq.n	a59c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
    a598:	e7ff      	b.n	a59a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
    a59a:	e014      	b.n	a5c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
    a59c:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a59e:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
    a5a2:	f64d 70f4 	movw	r0, #57332	; 0xdff4
    a5a6:	f2c0 0001 	movt	r0, #1
    a5aa:	6800      	ldr	r0, [r0, #0]
    a5ac:	9034      	str	r0, [sp, #208]	; 0xd0
    a5ae:	2002      	movs	r0, #2
    a5b0:	9035      	str	r0, [sp, #212]	; 0xd4
    a5b2:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    a5b4:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    a5b6:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
    a5ba:	9816      	ldr	r0, [sp, #88]	; 0x58
    a5bc:	f7ff fbe2 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a5c0:	900a      	str	r0, [sp, #40]	; 0x28
    a5c2:	e009      	b.n	a5d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a5c4:	defe      	udf	#254	; 0xfe
    a5c6:	f007 fbdb 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a5ca:	e7ff      	b.n	a5cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
    a5cc:	f00a fe2a 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a5d0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a5d4:	e7ff      	b.n	a5d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
    a5d6:	e65a      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a5d8:	980a      	ldr	r0, [sp, #40]	; 0x28
    a5da:	f000 0001 	and.w	r0, r0, #1
    a5de:	f7fe fba8 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a5e2:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
    a5e6:	e7ff      	b.n	a5e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
    a5e8:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
    a5ec:	07c1      	lsls	r1, r0, #31
    a5ee:	2900      	cmp	r1, #0
    a5f0:	d001      	beq.n	a5f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
    a5f2:	e7ff      	b.n	a5f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
    a5f4:	e014      	b.n	a620 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
    a5f6:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a5f8:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
    a5fc:	f64d 70fc 	movw	r0, #57340	; 0xdffc
    a600:	f2c0 0001 	movt	r0, #1
    a604:	6800      	ldr	r0, [r0, #0]
    a606:	9037      	str	r0, [sp, #220]	; 0xdc
    a608:	2002      	movs	r0, #2
    a60a:	9038      	str	r0, [sp, #224]	; 0xe0
    a60c:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    a60e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    a610:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
    a614:	9816      	ldr	r0, [sp, #88]	; 0x58
    a616:	f7ff fbb5 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a61a:	9009      	str	r0, [sp, #36]	; 0x24
    a61c:	e009      	b.n	a632 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a61e:	defe      	udf	#254	; 0xfe
    a620:	f007 fbae 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a624:	e7ff      	b.n	a626 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
    a626:	f00a fdfd 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a62a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a62e:	e7ff      	b.n	a630 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
    a630:	e62d      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a632:	9809      	ldr	r0, [sp, #36]	; 0x24
    a634:	f000 0001 	and.w	r0, r0, #1
    a638:	f7fe fb7b 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a63c:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
    a640:	e7ff      	b.n	a642 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
    a642:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
    a646:	07c1      	lsls	r1, r0, #31
    a648:	2900      	cmp	r1, #0
    a64a:	d001      	beq.n	a650 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
    a64c:	e7ff      	b.n	a64e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
    a64e:	e014      	b.n	a67a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
    a650:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a652:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
    a656:	f24e 0004 	movw	r0, #57348	; 0xe004
    a65a:	f2c0 0001 	movt	r0, #1
    a65e:	6800      	ldr	r0, [r0, #0]
    a660:	903a      	str	r0, [sp, #232]	; 0xe8
    a662:	2001      	movs	r0, #1
    a664:	903b      	str	r0, [sp, #236]	; 0xec
    a666:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    a668:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    a66a:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
    a66e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a670:	f7ff fb88 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a674:	9008      	str	r0, [sp, #32]
    a676:	e009      	b.n	a68c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a678:	defe      	udf	#254	; 0xfe
    a67a:	f007 fb81 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a67e:	e7ff      	b.n	a680 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
    a680:	f00a fdd0 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a684:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a688:	e7ff      	b.n	a68a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
    a68a:	e600      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a68c:	9808      	ldr	r0, [sp, #32]
    a68e:	f000 0001 	and.w	r0, r0, #1
    a692:	f7fe fb4e 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a696:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
    a69a:	e7ff      	b.n	a69c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
    a69c:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
    a6a0:	07c1      	lsls	r1, r0, #31
    a6a2:	2900      	cmp	r1, #0
    a6a4:	d001      	beq.n	a6aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
    a6a6:	e7ff      	b.n	a6a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
    a6a8:	e006      	b.n	a6b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
    a6aa:	9816      	ldr	r0, [sp, #88]	; 0x58
    a6ac:	7d41      	ldrb	r1, [r0, #21]
    a6ae:	07c9      	lsls	r1, r1, #31
    a6b0:	2900      	cmp	r1, #0
    a6b2:	d11a      	bne.n	a6ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
    a6b4:	e009      	b.n	a6ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a6b6:	defe      	udf	#254	; 0xfe
    a6b8:	f007 fb62 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a6bc:	e7ff      	b.n	a6be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
    a6be:	f00a fdb1 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a6c2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a6c6:	e7ff      	b.n	a6c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
    a6c8:	e5e1      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a6ca:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
    a6cc:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    a6d0:	2000      	movs	r0, #0
    a6d2:	9041      	str	r0, [sp, #260]	; 0x104
    a6d4:	9040      	str	r0, [sp, #256]	; 0x100
    a6d6:	9040      	str	r0, [sp, #256]	; 0x100
    a6d8:	9a40      	ldr	r2, [sp, #256]	; 0x100
    a6da:	9b41      	ldr	r3, [sp, #260]	; 0x104
    a6dc:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
    a6e0:	9816      	ldr	r0, [sp, #88]	; 0x58
    a6e2:	f7ff fb4f 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a6e6:	9007      	str	r0, [sp, #28]
    a6e8:	e02a      	b.n	a740 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
    a6ea:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
    a6ec:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
    a6f0:	2000      	movs	r0, #0
    a6f2:	903e      	str	r0, [sp, #248]	; 0xf8
    a6f4:	903d      	str	r0, [sp, #244]	; 0xf4
    a6f6:	903d      	str	r0, [sp, #244]	; 0xf4
    a6f8:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    a6fa:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    a6fc:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
    a700:	9816      	ldr	r0, [sp, #88]	; 0x58
    a702:	f7ff fb3f 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a706:	9006      	str	r0, [sp, #24]
    a708:	e7ff      	b.n	a70a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
    a70a:	9806      	ldr	r0, [sp, #24]
    a70c:	f000 0001 	and.w	r0, r0, #1
    a710:	f7fe fb0f 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a714:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
    a718:	e7ff      	b.n	a71a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
    a71a:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
    a71e:	07c1      	lsls	r1, r0, #31
    a720:	2900      	cmp	r1, #0
    a722:	d001      	beq.n	a728 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
    a724:	e7ff      	b.n	a726 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
    a726:	e001      	b.n	a72c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
    a728:	e024      	b.n	a774 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
    a72a:	defe      	udf	#254	; 0xfe
    a72c:	f007 fb28 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a730:	e7ff      	b.n	a732 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
    a732:	f00a fd77 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a736:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a73a:	e7ff      	b.n	a73c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
    a73c:	e7ff      	b.n	a73e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
    a73e:	e5a6      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
    a740:	9807      	ldr	r0, [sp, #28]
    a742:	f000 0001 	and.w	r0, r0, #1
    a746:	f7fe faf4 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a74a:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
    a74e:	e7ff      	b.n	a750 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
    a750:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
    a754:	07c1      	lsls	r1, r0, #31
    a756:	2900      	cmp	r1, #0
    a758:	d001      	beq.n	a75e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
    a75a:	e7ff      	b.n	a75c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
    a75c:	e001      	b.n	a762 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
    a75e:	e009      	b.n	a774 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
    a760:	defe      	udf	#254	; 0xfe
    a762:	f007 fb0d 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a766:	e7ff      	b.n	a768 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
    a768:	f00a fd5c 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a76c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a770:	e7ff      	b.n	a772 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
    a772:	e7e4      	b.n	a73e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
    a774:	9816      	ldr	r0, [sp, #88]	; 0x58
    a776:	7d01      	ldrb	r1, [r0, #20]
    a778:	07c9      	lsls	r1, r1, #31
    a77a:	2900      	cmp	r1, #0
    a77c:	d114      	bne.n	a7a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
    a77e:	e7ff      	b.n	a780 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
    a780:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a782:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
    a786:	f24e 0014 	movw	r0, #57364	; 0xe014
    a78a:	f2c0 0001 	movt	r0, #1
    a78e:	6800      	ldr	r0, [r0, #0]
    a790:	9046      	str	r0, [sp, #280]	; 0x118
    a792:	2001      	movs	r0, #1
    a794:	9047      	str	r0, [sp, #284]	; 0x11c
    a796:	9a46      	ldr	r2, [sp, #280]	; 0x118
    a798:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    a79a:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
    a79e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a7a0:	f7ff faf0 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a7a4:	9005      	str	r0, [sp, #20]
    a7a6:	e02e      	b.n	a806 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
    a7a8:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a7aa:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
    a7ae:	f24e 000c 	movw	r0, #57356	; 0xe00c
    a7b2:	f2c0 0001 	movt	r0, #1
    a7b6:	6800      	ldr	r0, [r0, #0]
    a7b8:	9043      	str	r0, [sp, #268]	; 0x10c
    a7ba:	2001      	movs	r0, #1
    a7bc:	9044      	str	r0, [sp, #272]	; 0x110
    a7be:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    a7c0:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a7c2:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
    a7c6:	9816      	ldr	r0, [sp, #88]	; 0x58
    a7c8:	f7ff fadc 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a7cc:	9004      	str	r0, [sp, #16]
    a7ce:	e7ff      	b.n	a7d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
    a7d0:	9804      	ldr	r0, [sp, #16]
    a7d2:	f000 0001 	and.w	r0, r0, #1
    a7d6:	f7fe faac 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a7da:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
    a7de:	e7ff      	b.n	a7e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
    a7e0:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
    a7e4:	07c1      	lsls	r1, r0, #31
    a7e6:	2900      	cmp	r1, #0
    a7e8:	d001      	beq.n	a7ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
    a7ea:	e7ff      	b.n	a7ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
    a7ec:	e001      	b.n	a7f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
    a7ee:	e024      	b.n	a83a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a7f0:	defe      	udf	#254	; 0xfe
    a7f2:	f007 fac5 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a7f6:	e7ff      	b.n	a7f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
    a7f8:	f00a fd14 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a7fc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a800:	e7ff      	b.n	a802 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
    a802:	e7ff      	b.n	a804 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a804:	e543      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a806:	9805      	ldr	r0, [sp, #20]
    a808:	f000 0001 	and.w	r0, r0, #1
    a80c:	f7fe fa91 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a810:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
    a814:	e7ff      	b.n	a816 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
    a816:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    a81a:	07c1      	lsls	r1, r0, #31
    a81c:	2900      	cmp	r1, #0
    a81e:	d001      	beq.n	a824 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
    a820:	e7ff      	b.n	a822 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
    a822:	e001      	b.n	a828 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
    a824:	e009      	b.n	a83a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a826:	defe      	udf	#254	; 0xfe
    a828:	f007 faaa 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a82c:	e7ff      	b.n	a82e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
    a82e:	f00a fcf9 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a832:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a836:	e7ff      	b.n	a838 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
    a838:	e7e4      	b.n	a804 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a83a:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a83c:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
    a840:	f24e 001c 	movw	r0, #57372	; 0xe01c
    a844:	f2c0 0001 	movt	r0, #1
    a848:	6800      	ldr	r0, [r0, #0]
    a84a:	9049      	str	r0, [sp, #292]	; 0x124
    a84c:	2001      	movs	r0, #1
    a84e:	904a      	str	r0, [sp, #296]	; 0x128
    a850:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a852:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    a854:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
    a858:	9816      	ldr	r0, [sp, #88]	; 0x58
    a85a:	f7ff fa93 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a85e:	9003      	str	r0, [sp, #12]
    a860:	e7ff      	b.n	a862 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
    a862:	9803      	ldr	r0, [sp, #12]
    a864:	f000 0001 	and.w	r0, r0, #1
    a868:	f7fe fa63 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a86c:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
    a870:	e7ff      	b.n	a872 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
    a872:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
    a876:	07c1      	lsls	r1, r0, #31
    a878:	2900      	cmp	r1, #0
    a87a:	d001      	beq.n	a880 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
    a87c:	e7ff      	b.n	a87e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
    a87e:	e010      	b.n	a8a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
    a880:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
    a882:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
    a886:	2000      	movs	r0, #0
    a888:	904d      	str	r0, [sp, #308]	; 0x134
    a88a:	904c      	str	r0, [sp, #304]	; 0x130
    a88c:	904c      	str	r0, [sp, #304]	; 0x130
    a88e:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    a890:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    a892:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
    a896:	9816      	ldr	r0, [sp, #88]	; 0x58
    a898:	f7ff fa74 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a89c:	9002      	str	r0, [sp, #8]
    a89e:	e009      	b.n	a8b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a8a0:	defe      	udf	#254	; 0xfe
    a8a2:	f007 fa6d 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a8a6:	e7ff      	b.n	a8a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
    a8a8:	f00a fcbc 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a8ac:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a8b0:	e7ff      	b.n	a8b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
    a8b2:	e4ec      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
    a8b4:	9802      	ldr	r0, [sp, #8]
    a8b6:	f000 0001 	and.w	r0, r0, #1
    a8ba:	f7fe fa3a 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a8be:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
    a8c2:	e7ff      	b.n	a8c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
    a8c4:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
    a8c8:	07c1      	lsls	r1, r0, #31
    a8ca:	2900      	cmp	r1, #0
    a8cc:	d001      	beq.n	a8d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
    a8ce:	e7ff      	b.n	a8d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
    a8d0:	e005      	b.n	a8de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
    a8d2:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a8d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a8d6:	f009 fcee 	bl	142b6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a8da:	e009      	b.n	a8f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
    a8dc:	defe      	udf	#254	; 0xfe
    a8de:	f007 fa4f 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a8e2:	e7ff      	b.n	a8e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
    a8e4:	f00a fc9e 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a8e8:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a8ec:	e7ff      	b.n	a8ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
    a8ee:	e4ce      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    a8f0:	f008 fd1c 	bl	1332c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    a8f4:	9001      	str	r0, [sp, #4]
    a8f6:	e7ff      	b.n	a8f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
    a8f8:	f64d 6138 	movw	r1, #56888	; 0xde38
    a8fc:	f2c0 0101 	movt	r1, #1
    a900:	f24e 0320 	movw	r3, #57376	; 0xe020
    a904:	f2c0 0301 	movt	r3, #1
    a908:	220e      	movs	r2, #14
    a90a:	9801      	ldr	r0, [sp, #4]
    a90c:	f7fe f9d8 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a910:	e7ff      	b.n	a912 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
    a912:	2000      	movs	r0, #0
        Ok(())
    a914:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
    a918:	e4b9      	b.n	a28e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

0000a91a <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
    a91a:	b580      	push	{r7, lr}
    a91c:	b08a      	sub	sp, #40	; 0x28
    a91e:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    a920:	f000 fbed 	bl	b0fe <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
    a924:	9307      	str	r3, [sp, #28]
    a926:	9206      	str	r2, [sp, #24]
    a928:	9105      	str	r1, [sp, #20]
    a92a:	9004      	str	r0, [sp, #16]
    a92c:	e7ff      	b.n	a92e <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
    a92e:	a804      	add	r0, sp, #16
    a930:	f009 fdab 	bl	1448a <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    a934:	9003      	str	r0, [sp, #12]
    a936:	e7ff      	b.n	a938 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
    a938:	9803      	ldr	r0, [sp, #12]
    a93a:	f009 fe79 	bl	14630 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    a93e:	9002      	str	r0, [sp, #8]
    a940:	9101      	str	r1, [sp, #4]
    a942:	e7ff      	b.n	a944 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
    a944:	9802      	ldr	r0, [sp, #8]
    a946:	f000 0001 	and.w	r0, r0, #1
    a94a:	9901      	ldr	r1, [sp, #4]
    a94c:	b00a      	add	sp, #40	; 0x28
    a94e:	bd80      	pop	{r7, pc}

0000a950 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
    a950:	b082      	sub	sp, #8
    a952:	4601      	mov	r1, r0
    a954:	f8ad 0004 	strh.w	r0, [sp, #4]
    a958:	ba00      	rev	r0, r0
    a95a:	0c00      	lsrs	r0, r0, #16
    a95c:	f8ad 0006 	strh.w	r0, [sp, #6]
    a960:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a964:	9000      	str	r0, [sp, #0]
    a966:	e7ff      	b.n	a968 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
    a968:	9800      	ldr	r0, [sp, #0]
    a96a:	b002      	add	sp, #8
    a96c:	4770      	bx	lr

0000a96e <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
    a96e:	b580      	push	{r7, lr}
    a970:	b084      	sub	sp, #16
    a972:	4601      	mov	r1, r0
    a974:	f8ad 000e 	strh.w	r0, [sp, #14]
    a978:	9102      	str	r1, [sp, #8]
    a97a:	f7ff ffe9 	bl	a950 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
    a97e:	9001      	str	r0, [sp, #4]
    a980:	e7ff      	b.n	a982 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
    a982:	9801      	ldr	r0, [sp, #4]
    a984:	b004      	add	sp, #16
    a986:	bd80      	pop	{r7, pc}

0000a988 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
    a988:	b580      	push	{r7, lr}
    a98a:	b084      	sub	sp, #16
    a98c:	9002      	str	r0, [sp, #8]
    a98e:	9802      	ldr	r0, [sp, #8]
    a990:	f009 fcdf 	bl	14352 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
    a994:	9001      	str	r0, [sp, #4]
    a996:	9100      	str	r1, [sp, #0]
    a998:	e7ff      	b.n	a99a <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
    a99a:	9801      	ldr	r0, [sp, #4]
    a99c:	f000 0001 	and.w	r0, r0, #1
    a9a0:	9900      	ldr	r1, [sp, #0]
    a9a2:	b004      	add	sp, #16
    a9a4:	bd80      	pop	{r7, pc}

0000a9a6 <_ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE>:
    a9a6:	b081      	sub	sp, #4
    a9a8:	9000      	str	r0, [sp, #0]
    a9aa:	b001      	add	sp, #4
    a9ac:	4770      	bx	lr

0000a9ae <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>:
    a9ae:	b580      	push	{r7, lr}
    a9b0:	b082      	sub	sp, #8
    a9b2:	9001      	str	r0, [sp, #4]
    a9b4:	f000 f83e 	bl	aa34 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    a9b8:	e7ff      	b.n	a9ba <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE+0xc>
    a9ba:	b002      	add	sp, #8
    a9bc:	bd80      	pop	{r7, pc}

0000a9be <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>:
    a9be:	b580      	push	{r7, lr}
    a9c0:	b082      	sub	sp, #8
    a9c2:	9001      	str	r0, [sp, #4]
    a9c4:	6801      	ldr	r1, [r0, #0]
    a9c6:	2900      	cmp	r1, #0
    a9c8:	9000      	str	r0, [sp, #0]
    a9ca:	d102      	bne.n	a9d2 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x14>
    a9cc:	e7ff      	b.n	a9ce <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>
    a9ce:	b002      	add	sp, #8
    a9d0:	bd80      	pop	{r7, pc}
    a9d2:	9800      	ldr	r0, [sp, #0]
    a9d4:	3004      	adds	r0, #4
    a9d6:	f7ff ffea 	bl	a9ae <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>
    a9da:	e7f8      	b.n	a9ce <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>

0000a9dc <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>:
    a9dc:	b580      	push	{r7, lr}
    a9de:	b082      	sub	sp, #8
    a9e0:	9001      	str	r0, [sp, #4]
    a9e2:	f009 fea0 	bl	14726 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>
    a9e6:	e7ff      	b.n	a9e8 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE+0xc>
    a9e8:	b002      	add	sp, #8
    a9ea:	bd80      	pop	{r7, pc}

0000a9ec <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>:
    a9ec:	b580      	push	{r7, lr}
    a9ee:	b082      	sub	sp, #8
    a9f0:	9001      	str	r0, [sp, #4]
    a9f2:	3024      	adds	r0, #36	; 0x24
    a9f4:	f000 f81e 	bl	aa34 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    a9f8:	e7ff      	b.n	a9fa <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E+0xe>
    a9fa:	b002      	add	sp, #8
    a9fc:	bd80      	pop	{r7, pc}

0000a9fe <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>:
    a9fe:	b580      	push	{r7, lr}
    aa00:	b082      	sub	sp, #8
    aa02:	9001      	str	r0, [sp, #4]
    aa04:	9000      	str	r0, [sp, #0]
    aa06:	f7ff fff1 	bl	a9ec <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>
    aa0a:	e001      	b.n	aa10 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0x12>
    aa0c:	b002      	add	sp, #8
    aa0e:	bd80      	pop	{r7, pc}
    aa10:	9800      	ldr	r0, [sp, #0]
    aa12:	3094      	adds	r0, #148	; 0x94
    aa14:	f7ff ffe2 	bl	a9dc <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    aa18:	e7f8      	b.n	aa0c <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0xe>

0000aa1a <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>:
    aa1a:	b580      	push	{r7, lr}
    aa1c:	b082      	sub	sp, #8
    aa1e:	9001      	str	r0, [sp, #4]
    aa20:	9000      	str	r0, [sp, #0]
    aa22:	f009 fea8 	bl	14776 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>
    aa26:	e001      	b.n	aa2c <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0x12>
    aa28:	b002      	add	sp, #8
    aa2a:	bd80      	pop	{r7, pc}
    aa2c:	9800      	ldr	r0, [sp, #0]
    aa2e:	f7ff ffd5 	bl	a9dc <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    aa32:	e7f9      	b.n	aa28 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0xe>

0000aa34 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>:
    aa34:	b580      	push	{r7, lr}
    aa36:	b082      	sub	sp, #8
    aa38:	9001      	str	r0, [sp, #4]
    aa3a:	f009 fe64 	bl	14706 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>
    aa3e:	e7ff      	b.n	aa40 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E+0xc>
    aa40:	b002      	add	sp, #8
    aa42:	bd80      	pop	{r7, pc}

0000aa44 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>:
    aa44:	b580      	push	{r7, lr}
    aa46:	b082      	sub	sp, #8
    aa48:	9001      	str	r0, [sp, #4]
    aa4a:	6801      	ldr	r1, [r0, #0]
    aa4c:	2900      	cmp	r1, #0
    aa4e:	9000      	str	r0, [sp, #0]
    aa50:	d102      	bne.n	aa58 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x14>
    aa52:	e7ff      	b.n	aa54 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>
    aa54:	b002      	add	sp, #8
    aa56:	bd80      	pop	{r7, pc}
    aa58:	9800      	ldr	r0, [sp, #0]
    aa5a:	3004      	adds	r0, #4
    aa5c:	f000 f805 	bl	aa6a <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>
    aa60:	e7f8      	b.n	aa54 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>

0000aa62 <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
    aa62:	b081      	sub	sp, #4
    aa64:	9000      	str	r0, [sp, #0]
    aa66:	b001      	add	sp, #4
    aa68:	4770      	bx	lr

0000aa6a <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>:
    aa6a:	b580      	push	{r7, lr}
    aa6c:	b082      	sub	sp, #8
    aa6e:	9001      	str	r0, [sp, #4]
    aa70:	f7ff ffb4 	bl	a9dc <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    aa74:	e7ff      	b.n	aa76 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE+0xc>
    aa76:	b002      	add	sp, #8
    aa78:	bd80      	pop	{r7, pc}

0000aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
    aa7a:	b089      	sub	sp, #36	; 0x24
    aa7c:	9005      	str	r0, [sp, #20]
    aa7e:	9106      	str	r1, [sp, #24]
    aa80:	9107      	str	r1, [sp, #28]
    aa82:	9907      	ldr	r1, [sp, #28]
    aa84:	9002      	str	r0, [sp, #8]
    aa86:	9101      	str	r1, [sp, #4]
    aa88:	e7ff      	b.n	aa8a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
    aa8a:	9802      	ldr	r0, [sp, #8]
    aa8c:	9008      	str	r0, [sp, #32]
    aa8e:	9908      	ldr	r1, [sp, #32]
    aa90:	9100      	str	r1, [sp, #0]
    aa92:	e7ff      	b.n	aa94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
    aa94:	9800      	ldr	r0, [sp, #0]
    aa96:	9003      	str	r0, [sp, #12]
    aa98:	9901      	ldr	r1, [sp, #4]
    aa9a:	9104      	str	r1, [sp, #16]
    aa9c:	9803      	ldr	r0, [sp, #12]
    aa9e:	9904      	ldr	r1, [sp, #16]
    aaa0:	b009      	add	sp, #36	; 0x24
    aaa2:	4770      	bx	lr

0000aaa4 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>:
    aaa4:	b580      	push	{r7, lr}
    aaa6:	b084      	sub	sp, #16
    aaa8:	9002      	str	r0, [sp, #8]
    aaaa:	9103      	str	r1, [sp, #12]
    aaac:	f7fe ff29 	bl	9902 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>
    aab0:	9001      	str	r0, [sp, #4]
    aab2:	9100      	str	r1, [sp, #0]
    aab4:	e7ff      	b.n	aab6 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE+0x12>
    aab6:	9801      	ldr	r0, [sp, #4]
    aab8:	9900      	ldr	r1, [sp, #0]
    aaba:	b004      	add	sp, #16
    aabc:	bd80      	pop	{r7, pc}

0000aabe <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>:
    aabe:	b580      	push	{r7, lr}
    aac0:	b084      	sub	sp, #16
    aac2:	9002      	str	r0, [sp, #8]
    aac4:	9103      	str	r1, [sp, #12]
    aac6:	f7fe ff29 	bl	991c <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>
    aaca:	9001      	str	r0, [sp, #4]
    aacc:	9100      	str	r1, [sp, #0]
    aace:	e7ff      	b.n	aad0 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E+0x12>
    aad0:	9801      	ldr	r0, [sp, #4]
    aad2:	9900      	ldr	r1, [sp, #0]
    aad4:	b004      	add	sp, #16
    aad6:	bd80      	pop	{r7, pc}

0000aad8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>:
    aad8:	b082      	sub	sp, #8
    aada:	9000      	str	r0, [sp, #0]
    aadc:	9101      	str	r1, [sp, #4]
    aade:	b002      	add	sp, #8
    aae0:	4770      	bx	lr

0000aae2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>:
    aae2:	b580      	push	{r7, lr}
    aae4:	b086      	sub	sp, #24
    aae6:	9003      	str	r0, [sp, #12]
    aae8:	9104      	str	r1, [sp, #16]
    aaea:	9205      	str	r2, [sp, #20]
    aaec:	9002      	str	r0, [sp, #8]
    aaee:	4610      	mov	r0, r2
    aaf0:	9a02      	ldr	r2, [sp, #8]
    aaf2:	9101      	str	r1, [sp, #4]
    aaf4:	4611      	mov	r1, r2
    aaf6:	9a01      	ldr	r2, [sp, #4]
    aaf8:	f000 f886 	bl	ac08 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>
    aafc:	9000      	str	r0, [sp, #0]
    aafe:	e7ff      	b.n	ab00 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE+0x1e>
    ab00:	9800      	ldr	r0, [sp, #0]
    ab02:	b006      	add	sp, #24
    ab04:	bd80      	pop	{r7, pc}

0000ab06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>:
    ab06:	b084      	sub	sp, #16
    ab08:	9002      	str	r0, [sp, #8]
    ab0a:	9103      	str	r1, [sp, #12]
    ab0c:	9000      	str	r0, [sp, #0]
    ab0e:	9101      	str	r1, [sp, #4]
    ab10:	9801      	ldr	r0, [sp, #4]
    ab12:	b004      	add	sp, #16
    ab14:	4770      	bx	lr

0000ab16 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>:
    ab16:	b580      	push	{r7, lr}
    ab18:	b092      	sub	sp, #72	; 0x48
    ab1a:	900e      	str	r0, [sp, #56]	; 0x38
    ab1c:	910f      	str	r1, [sp, #60]	; 0x3c
    ab1e:	9009      	str	r0, [sp, #36]	; 0x24
    ab20:	9108      	str	r1, [sp, #32]
    ab22:	f000 f83e 	bl	aba2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>
    ab26:	4601      	mov	r1, r0
    ab28:	9010      	str	r0, [sp, #64]	; 0x40
    ab2a:	9107      	str	r1, [sp, #28]
    ab2c:	e7ff      	b.n	ab2e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x18>
    ab2e:	9807      	ldr	r0, [sp, #28]
    ab30:	f7fe fdac 	bl	968c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
    ab34:	e7ff      	b.n	ab36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x20>
    ab36:	e7ff      	b.n	ab38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x22>
    ab38:	2002      	movs	r0, #2
    ab3a:	9011      	str	r0, [sp, #68]	; 0x44
    ab3c:	9811      	ldr	r0, [sp, #68]	; 0x44
    ab3e:	9006      	str	r0, [sp, #24]
    ab40:	e7ff      	b.n	ab42 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x2c>
    ab42:	9806      	ldr	r0, [sp, #24]
    ab44:	2800      	cmp	r0, #0
    ab46:	d006      	beq.n	ab56 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x40>
    ab48:	e7ff      	b.n	ab4a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x34>
    ab4a:	9809      	ldr	r0, [sp, #36]	; 0x24
    ab4c:	9908      	ldr	r1, [sp, #32]
    ab4e:	f7ff ffda 	bl	ab06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
    ab52:	9005      	str	r0, [sp, #20]
    ab54:	e011      	b.n	ab7a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x64>
    ab56:	9807      	ldr	r0, [sp, #28]
    ab58:	9909      	ldr	r1, [sp, #36]	; 0x24
    ab5a:	9004      	str	r0, [sp, #16]
    ab5c:	4608      	mov	r0, r1
    ab5e:	9908      	ldr	r1, [sp, #32]
    ab60:	f7ff ffd1 	bl	ab06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
    ab64:	9003      	str	r0, [sp, #12]
    ab66:	e7ff      	b.n	ab68 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x52>
    ab68:	9804      	ldr	r0, [sp, #16]
    ab6a:	9903      	ldr	r1, [sp, #12]
    ab6c:	f009 fbd8 	bl	14320 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>
    ab70:	9002      	str	r0, [sp, #8]
    ab72:	e7ff      	b.n	ab74 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x5e>
    ab74:	9802      	ldr	r0, [sp, #8]
    ab76:	900c      	str	r0, [sp, #48]	; 0x30
    ab78:	e006      	b.n	ab88 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
    ab7a:	9807      	ldr	r0, [sp, #28]
    ab7c:	9905      	ldr	r1, [sp, #20]
    ab7e:	f7fe fd64 	bl	964a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
    ab82:	900c      	str	r0, [sp, #48]	; 0x30
    ab84:	e7ff      	b.n	ab86 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x70>
    ab86:	e7ff      	b.n	ab88 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
    ab88:	9807      	ldr	r0, [sp, #28]
    ab8a:	f000 f8e2 	bl	ad52 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
    ab8e:	9001      	str	r0, [sp, #4]
    ab90:	e7ff      	b.n	ab92 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x7c>
    ab92:	980c      	ldr	r0, [sp, #48]	; 0x30
    ab94:	9901      	ldr	r1, [sp, #4]
    ab96:	910a      	str	r1, [sp, #40]	; 0x28
    ab98:	900b      	str	r0, [sp, #44]	; 0x2c
    ab9a:	980a      	ldr	r0, [sp, #40]	; 0x28
    ab9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ab9e:	b012      	add	sp, #72	; 0x48
    aba0:	bd80      	pop	{r7, pc}

0000aba2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>:
    aba2:	b082      	sub	sp, #8
    aba4:	9000      	str	r0, [sp, #0]
    aba6:	9101      	str	r1, [sp, #4]
    aba8:	b002      	add	sp, #8
    abaa:	4770      	bx	lr

0000abac <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>:
    abac:	b580      	push	{r7, lr}
    abae:	b086      	sub	sp, #24
    abb0:	9003      	str	r0, [sp, #12]
    abb2:	9104      	str	r1, [sp, #16]
    abb4:	f00b f85d 	bl	15c72 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>
    abb8:	9002      	str	r0, [sp, #8]
    abba:	9101      	str	r1, [sp, #4]
    abbc:	e7ff      	b.n	abbe <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E+0x12>
    abbe:	9802      	ldr	r0, [sp, #8]
    abc0:	9901      	ldr	r1, [sp, #4]
    abc2:	b006      	add	sp, #24
    abc4:	bd80      	pop	{r7, pc}

0000abc6 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>:
    abc6:	b580      	push	{r7, lr}
    abc8:	b088      	sub	sp, #32
    abca:	9005      	str	r0, [sp, #20]
    abcc:	9106      	str	r1, [sp, #24]
    abce:	9207      	str	r2, [sp, #28]
    abd0:	9004      	str	r0, [sp, #16]
    abd2:	4610      	mov	r0, r2
    abd4:	9a04      	ldr	r2, [sp, #16]
    abd6:	9103      	str	r1, [sp, #12]
    abd8:	4611      	mov	r1, r2
    abda:	9a03      	ldr	r2, [sp, #12]
    abdc:	f00b f82a 	bl	15c34 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>
    abe0:	9002      	str	r0, [sp, #8]
    abe2:	9101      	str	r1, [sp, #4]
    abe4:	e7ff      	b.n	abe6 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E+0x20>
    abe6:	9802      	ldr	r0, [sp, #8]
    abe8:	9901      	ldr	r1, [sp, #4]
    abea:	b008      	add	sp, #32
    abec:	bd80      	pop	{r7, pc}

0000abee <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>:
    abee:	b580      	push	{r7, lr}
    abf0:	b084      	sub	sp, #16
    abf2:	9002      	str	r0, [sp, #8]
    abf4:	9103      	str	r1, [sp, #12]
    abf6:	f7ff ff8e 	bl	ab16 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>
    abfa:	9001      	str	r0, [sp, #4]
    abfc:	9100      	str	r1, [sp, #0]
    abfe:	e7ff      	b.n	ac00 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE+0x12>
    ac00:	9801      	ldr	r0, [sp, #4]
    ac02:	9900      	ldr	r1, [sp, #0]
    ac04:	b004      	add	sp, #16
    ac06:	bd80      	pop	{r7, pc}

0000ac08 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>:
    ac08:	b580      	push	{r7, lr}
    ac0a:	b086      	sub	sp, #24
    ac0c:	9003      	str	r0, [sp, #12]
    ac0e:	9104      	str	r1, [sp, #16]
    ac10:	9205      	str	r2, [sp, #20]
    ac12:	9002      	str	r0, [sp, #8]
    ac14:	4608      	mov	r0, r1
    ac16:	4611      	mov	r1, r2
    ac18:	f7ff ff5e 	bl	aad8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
    ac1c:	9001      	str	r0, [sp, #4]
    ac1e:	e7ff      	b.n	ac20 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x18>
    ac20:	9801      	ldr	r0, [sp, #4]
    ac22:	9902      	ldr	r1, [sp, #8]
    ac24:	f000 f868 	bl	acf8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
    ac28:	9000      	str	r0, [sp, #0]
    ac2a:	e7ff      	b.n	ac2c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x24>
    ac2c:	9800      	ldr	r0, [sp, #0]
    ac2e:	b006      	add	sp, #24
    ac30:	bd80      	pop	{r7, pc}

0000ac32 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>:
    ac32:	b580      	push	{r7, lr}
    ac34:	b08e      	sub	sp, #56	; 0x38
    ac36:	9007      	str	r0, [sp, #28]
    ac38:	6801      	ldr	r1, [r0, #0]
    ac3a:	9005      	str	r0, [sp, #20]
    ac3c:	4608      	mov	r0, r1
    ac3e:	f000 f88e 	bl	ad5e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
    ac42:	9004      	str	r0, [sp, #16]
    ac44:	e7ff      	b.n	ac46 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x14>
    ac46:	9804      	ldr	r0, [sp, #16]
    ac48:	f000 f879 	bl	ad3e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>
    ac4c:	e7ff      	b.n	ac4e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1c>
    ac4e:	e7ff      	b.n	ac50 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1e>
    ac50:	2002      	movs	r0, #2
    ac52:	9008      	str	r0, [sp, #32]
    ac54:	9808      	ldr	r0, [sp, #32]
    ac56:	9003      	str	r0, [sp, #12]
    ac58:	e7ff      	b.n	ac5a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x28>
    ac5a:	9803      	ldr	r0, [sp, #12]
    ac5c:	2800      	cmp	r0, #0
    ac5e:	d007      	beq.n	ac70 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
    ac60:	e7ff      	b.n	ac62 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x30>
    ac62:	9805      	ldr	r0, [sp, #20]
    ac64:	6840      	ldr	r0, [r0, #4]
    ac66:	f7fe fd11 	bl	968c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
    ac6a:	e7ff      	b.n	ac6c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3a>
    ac6c:	e7ff      	b.n	ac6e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3c>
    ac6e:	e7ff      	b.n	ac70 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
    ac70:	9805      	ldr	r0, [sp, #20]
    ac72:	6800      	ldr	r0, [r0, #0]
    ac74:	f000 f873 	bl	ad5e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
    ac78:	9002      	str	r0, [sp, #8]
    ac7a:	e7ff      	b.n	ac7c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x4a>
    ac7c:	9805      	ldr	r0, [sp, #20]
    ac7e:	6841      	ldr	r1, [r0, #4]
    ac80:	9a02      	ldr	r2, [sp, #8]
    ac82:	428a      	cmp	r2, r1
    ac84:	d02f      	beq.n	ace6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xb4>
    ac86:	e7ff      	b.n	ac88 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x56>
    ac88:	9805      	ldr	r0, [sp, #20]
    ac8a:	900a      	str	r0, [sp, #40]	; 0x28
    ac8c:	2101      	movs	r1, #1
    ac8e:	910b      	str	r1, [sp, #44]	; 0x2c
    ac90:	2102      	movs	r1, #2
    ac92:	910d      	str	r1, [sp, #52]	; 0x34
    ac94:	990d      	ldr	r1, [sp, #52]	; 0x34
    ac96:	2900      	cmp	r1, #0
    ac98:	d015      	beq.n	acc6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x94>
    ac9a:	e7ff      	b.n	ac9c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x6a>
    ac9c:	9805      	ldr	r0, [sp, #20]
    ac9e:	6800      	ldr	r0, [r0, #0]
    aca0:	f000 f85d 	bl	ad5e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
    aca4:	900c      	str	r0, [sp, #48]	; 0x30
    aca6:	9905      	ldr	r1, [sp, #20]
    aca8:	680a      	ldr	r2, [r1, #0]
    acaa:	9001      	str	r0, [sp, #4]
    acac:	4610      	mov	r0, r2
    acae:	f000 f856 	bl	ad5e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
    acb2:	2101      	movs	r1, #1
    acb4:	f000 f837 	bl	ad26 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
    acb8:	f000 f84b 	bl	ad52 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
    acbc:	9905      	ldr	r1, [sp, #20]
    acbe:	6008      	str	r0, [r1, #0]
    acc0:	9801      	ldr	r0, [sp, #4]
    acc2:	9009      	str	r0, [sp, #36]	; 0x24
    acc4:	e00c      	b.n	ace0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
    acc6:	9805      	ldr	r0, [sp, #20]
    acc8:	6840      	ldr	r0, [r0, #4]
    acca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    acce:	f009 fb32 	bl	14336 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
    acd2:	9905      	ldr	r1, [sp, #20]
    acd4:	6048      	str	r0, [r1, #4]
    acd6:	6808      	ldr	r0, [r1, #0]
    acd8:	f000 f841 	bl	ad5e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
    acdc:	9009      	str	r0, [sp, #36]	; 0x24
    acde:	e7ff      	b.n	ace0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
    ace0:	9809      	ldr	r0, [sp, #36]	; 0x24
    ace2:	9000      	str	r0, [sp, #0]
    ace4:	e002      	b.n	acec <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xba>
    ace6:	2000      	movs	r0, #0
    ace8:	9006      	str	r0, [sp, #24]
    acea:	e002      	b.n	acf2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
    acec:	9800      	ldr	r0, [sp, #0]
    acee:	9006      	str	r0, [sp, #24]
    acf0:	e7ff      	b.n	acf2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
    acf2:	9806      	ldr	r0, [sp, #24]
    acf4:	b00e      	add	sp, #56	; 0x38
    acf6:	bd80      	pop	{r7, pc}

0000acf8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>:
    acf8:	b580      	push	{r7, lr}
    acfa:	b084      	sub	sp, #16
    acfc:	9002      	str	r0, [sp, #8]
    acfe:	9103      	str	r1, [sp, #12]
    ad00:	f000 f811 	bl	ad26 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
    ad04:	9001      	str	r0, [sp, #4]
    ad06:	e7ff      	b.n	ad08 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E+0x10>
    ad08:	9801      	ldr	r0, [sp, #4]
    ad0a:	b004      	add	sp, #16
    ad0c:	bd80      	pop	{r7, pc}

0000ad0e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>:
    ad0e:	b580      	push	{r7, lr}
    ad10:	b084      	sub	sp, #16
    ad12:	460a      	mov	r2, r1
    ad14:	9002      	str	r0, [sp, #8]
    ad16:	f8ad 100e 	strh.w	r1, [sp, #14]
    ad1a:	9201      	str	r2, [sp, #4]
    ad1c:	f7fe fe2c 	bl	9978 <_ZN4core3ptr5write17h147d4643d861e927E>
    ad20:	e7ff      	b.n	ad22 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E+0x14>
    ad22:	b004      	add	sp, #16
    ad24:	bd80      	pop	{r7, pc}

0000ad26 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>:
    ad26:	b084      	sub	sp, #16
    ad28:	9001      	str	r0, [sp, #4]
    ad2a:	9102      	str	r1, [sp, #8]
    ad2c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ad30:	9003      	str	r0, [sp, #12]
    ad32:	9803      	ldr	r0, [sp, #12]
    ad34:	9000      	str	r0, [sp, #0]
    ad36:	e7ff      	b.n	ad38 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE+0x12>
    ad38:	9800      	ldr	r0, [sp, #0]
    ad3a:	b004      	add	sp, #16
    ad3c:	4770      	bx	lr

0000ad3e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>:
    ad3e:	b082      	sub	sp, #8
    ad40:	9001      	str	r0, [sp, #4]
    ad42:	9000      	str	r0, [sp, #0]
    ad44:	e7ff      	b.n	ad46 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE+0x8>
    ad46:	9800      	ldr	r0, [sp, #0]
    ad48:	fab0 f180 	clz	r1, r0
    ad4c:	0948      	lsrs	r0, r1, #5
    ad4e:	b002      	add	sp, #8
    ad50:	4770      	bx	lr

0000ad52 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>:
    ad52:	b082      	sub	sp, #8
    ad54:	9001      	str	r0, [sp, #4]
    ad56:	9000      	str	r0, [sp, #0]
    ad58:	9800      	ldr	r0, [sp, #0]
    ad5a:	b002      	add	sp, #8
    ad5c:	4770      	bx	lr

0000ad5e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>:
    ad5e:	b081      	sub	sp, #4
    ad60:	9000      	str	r0, [sp, #0]
    ad62:	b001      	add	sp, #4
    ad64:	4770      	bx	lr
	...

0000ad68 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
    ad68:	b08a      	sub	sp, #40	; 0x28
    ad6a:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
    ad6c:	7800      	ldrb	r0, [r0, #0]
    ad6e:	9001      	str	r0, [sp, #4]
    ad70:	9901      	ldr	r1, [sp, #4]
    ad72:	e8df f011 	tbh	[pc, r1, lsl #1]
    ad76:	0103      	.short	0x0103
    ad78:	01020107 	.word	0x01020107
    ad7c:	010c0102 	.word	0x010c0102
    ad80:	01020102 	.word	0x01020102
    ad84:	01020102 	.word	0x01020102
    ad88:	01020111 	.word	0x01020111
    ad8c:	01020102 	.word	0x01020102
    ad90:	01020102 	.word	0x01020102
    ad94:	01160102 	.word	0x01160102
    ad98:	0120011b 	.word	0x0120011b
    ad9c:	01020125 	.word	0x01020125
    ada0:	01020102 	.word	0x01020102
    ada4:	01020102 	.word	0x01020102
    ada8:	01020102 	.word	0x01020102
    adac:	01020102 	.word	0x01020102
    adb0:	01020102 	.word	0x01020102
    adb4:	012a0102 	.word	0x012a0102
    adb8:	0102012f 	.word	0x0102012f
    adbc:	01020102 	.word	0x01020102
    adc0:	01020102 	.word	0x01020102
    adc4:	01340102 	.word	0x01340102
    adc8:	013e0139 	.word	0x013e0139
    adcc:	01480143 	.word	0x01480143
    add0:	014d0102 	.word	0x014d0102
    add4:	01520102 	.word	0x01520102
    add8:	01020102 	.word	0x01020102
    addc:	01020102 	.word	0x01020102
    ade0:	015c0102 	.word	0x015c0102
    ade4:	01020102 	.word	0x01020102
    ade8:	01570102 	.word	0x01570102
    adec:	01020102 	.word	0x01020102
    adf0:	01020102 	.word	0x01020102
    adf4:	01020102 	.word	0x01020102
    adf8:	01020102 	.word	0x01020102
    adfc:	01020102 	.word	0x01020102
    ae00:	01020102 	.word	0x01020102
    ae04:	01020102 	.word	0x01020102
    ae08:	01020102 	.word	0x01020102
    ae0c:	01020102 	.word	0x01020102
    ae10:	01020102 	.word	0x01020102
    ae14:	01020102 	.word	0x01020102
    ae18:	01020102 	.word	0x01020102
    ae1c:	01020102 	.word	0x01020102
    ae20:	01020102 	.word	0x01020102
    ae24:	01020102 	.word	0x01020102
    ae28:	01020102 	.word	0x01020102
    ae2c:	01020102 	.word	0x01020102
    ae30:	01020102 	.word	0x01020102
    ae34:	01020102 	.word	0x01020102
    ae38:	01020102 	.word	0x01020102
    ae3c:	01020102 	.word	0x01020102
    ae40:	01020102 	.word	0x01020102
    ae44:	01020102 	.word	0x01020102
    ae48:	01020102 	.word	0x01020102
    ae4c:	01020102 	.word	0x01020102
    ae50:	01020102 	.word	0x01020102
    ae54:	01020102 	.word	0x01020102
    ae58:	01020102 	.word	0x01020102
    ae5c:	01020102 	.word	0x01020102
    ae60:	01020102 	.word	0x01020102
    ae64:	01020102 	.word	0x01020102
    ae68:	01020102 	.word	0x01020102
    ae6c:	01020102 	.word	0x01020102
    ae70:	01020102 	.word	0x01020102
    ae74:	01020102 	.word	0x01020102
    ae78:	01020102 	.word	0x01020102
    ae7c:	01020102 	.word	0x01020102
    ae80:	01020102 	.word	0x01020102
    ae84:	01020102 	.word	0x01020102
    ae88:	01020102 	.word	0x01020102
    ae8c:	01020102 	.word	0x01020102
    ae90:	01020102 	.word	0x01020102
    ae94:	01020102 	.word	0x01020102
    ae98:	01020102 	.word	0x01020102
    ae9c:	01020102 	.word	0x01020102
    aea0:	01020102 	.word	0x01020102
    aea4:	01020102 	.word	0x01020102
    aea8:	01020102 	.word	0x01020102
    aeac:	01020102 	.word	0x01020102
    aeb0:	01020102 	.word	0x01020102
    aeb4:	01020102 	.word	0x01020102
    aeb8:	01020102 	.word	0x01020102
    aebc:	01020102 	.word	0x01020102
    aec0:	01020102 	.word	0x01020102
    aec4:	01020102 	.word	0x01020102
    aec8:	01020102 	.word	0x01020102
    aecc:	01020102 	.word	0x01020102
    aed0:	01020102 	.word	0x01020102
    aed4:	01020102 	.word	0x01020102
    aed8:	01660161 	.word	0x01660161
    aedc:	0170016b 	.word	0x0170016b
    aee0:	01750102 	.word	0x01750102
    aee4:	01020102 	.word	0x01020102
    aee8:	01020102 	.word	0x01020102
    aeec:	01020102 	.word	0x01020102
    aef0:	01020102 	.word	0x01020102
    aef4:	017a0102 	.word	0x017a0102
    aef8:	0184017f 	.word	0x0184017f
    aefc:	018e0189 	.word	0x018e0189
    af00:	01020193 	.word	0x01020193
    af04:	01020102 	.word	0x01020102
    af08:	01020102 	.word	0x01020102
    af0c:	01020102 	.word	0x01020102
    af10:	01020102 	.word	0x01020102
    af14:	01020102 	.word	0x01020102
    af18:	01020102 	.word	0x01020102
    af1c:	01020102 	.word	0x01020102
    af20:	01020102 	.word	0x01020102
    af24:	01020102 	.word	0x01020102
    af28:	01980102 	.word	0x01980102
    af2c:	01a2019d 	.word	0x01a2019d
    af30:	010201a7 	.word	0x010201a7
    af34:	01b10102 	.word	0x01b10102
    af38:	010200fd 	.word	0x010200fd
    af3c:	01020102 	.word	0x01020102
    af40:	01020102 	.word	0x01020102
    af44:	01020102 	.word	0x01020102
    af48:	01020102 	.word	0x01020102
    af4c:	01020102 	.word	0x01020102
    af50:	01020102 	.word	0x01020102
    af54:	01020102 	.word	0x01020102
    af58:	01020102 	.word	0x01020102
    af5c:	01020102 	.word	0x01020102
    af60:	01020102 	.word	0x01020102
    af64:	01020102 	.word	0x01020102
    af68:	01020102 	.word	0x01020102
    af6c:	01ac0102 	.word	0x01ac0102
    af70:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    af72:	9007      	str	r0, [sp, #28]
    af74:	20e1      	movs	r0, #225	; 0xe1
    af76:	9006      	str	r0, [sp, #24]
    af78:	e0b3      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    af7a:	defe      	udf	#254	; 0xfe
    af7c:	2000      	movs	r0, #0
    af7e:	9007      	str	r0, [sp, #28]
    af80:	9006      	str	r0, [sp, #24]
    af82:	e0ae      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    af84:	2000      	movs	r0, #0
    af86:	9007      	str	r0, [sp, #28]
    af88:	2001      	movs	r0, #1
    af8a:	9006      	str	r0, [sp, #24]
    af8c:	e0a9      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    af8e:	2000      	movs	r0, #0
    af90:	9007      	str	r0, [sp, #28]
    af92:	2004      	movs	r0, #4
    af94:	9006      	str	r0, [sp, #24]
    af96:	e0a4      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    af98:	2000      	movs	r0, #0
    af9a:	9007      	str	r0, [sp, #28]
    af9c:	2009      	movs	r0, #9
    af9e:	9006      	str	r0, [sp, #24]
    afa0:	e09f      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    afa2:	2000      	movs	r0, #0
    afa4:	9007      	str	r0, [sp, #28]
    afa6:	2010      	movs	r0, #16
    afa8:	9006      	str	r0, [sp, #24]
    afaa:	e09a      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    afac:	2000      	movs	r0, #0
    afae:	9007      	str	r0, [sp, #28]
    afb0:	2011      	movs	r0, #17
    afb2:	9006      	str	r0, [sp, #24]
    afb4:	e095      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    afb6:	2000      	movs	r0, #0
    afb8:	9007      	str	r0, [sp, #28]
    afba:	2012      	movs	r0, #18
    afbc:	9006      	str	r0, [sp, #24]
    afbe:	e090      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    afc0:	2000      	movs	r0, #0
    afc2:	9007      	str	r0, [sp, #28]
    afc4:	2013      	movs	r0, #19
    afc6:	9006      	str	r0, [sp, #24]
    afc8:	e08b      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    afca:	2000      	movs	r0, #0
    afcc:	9007      	str	r0, [sp, #28]
    afce:	2020      	movs	r0, #32
    afd0:	9006      	str	r0, [sp, #24]
    afd2:	e086      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    afd4:	2000      	movs	r0, #0
    afd6:	9007      	str	r0, [sp, #28]
    afd8:	2021      	movs	r0, #33	; 0x21
    afda:	9006      	str	r0, [sp, #24]
    afdc:	e081      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    afde:	2000      	movs	r0, #0
    afe0:	9007      	str	r0, [sp, #28]
    afe2:	2028      	movs	r0, #40	; 0x28
    afe4:	9006      	str	r0, [sp, #24]
    afe6:	e07c      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    afe8:	2000      	movs	r0, #0
    afea:	9007      	str	r0, [sp, #28]
    afec:	2029      	movs	r0, #41	; 0x29
    afee:	9006      	str	r0, [sp, #24]
    aff0:	e077      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aff2:	2000      	movs	r0, #0
    aff4:	9007      	str	r0, [sp, #28]
    aff6:	202a      	movs	r0, #42	; 0x2a
    aff8:	9006      	str	r0, [sp, #24]
    affa:	e072      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    affc:	2000      	movs	r0, #0
    affe:	9007      	str	r0, [sp, #28]
    b000:	202b      	movs	r0, #43	; 0x2b
    b002:	9006      	str	r0, [sp, #24]
    b004:	e06d      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b006:	2000      	movs	r0, #0
    b008:	9007      	str	r0, [sp, #28]
    b00a:	202c      	movs	r0, #44	; 0x2c
    b00c:	9006      	str	r0, [sp, #24]
    b00e:	e068      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b010:	2000      	movs	r0, #0
    b012:	9007      	str	r0, [sp, #28]
    b014:	202e      	movs	r0, #46	; 0x2e
    b016:	9006      	str	r0, [sp, #24]
    b018:	e063      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b01a:	2000      	movs	r0, #0
    b01c:	9007      	str	r0, [sp, #28]
    b01e:	2030      	movs	r0, #48	; 0x30
    b020:	9006      	str	r0, [sp, #24]
    b022:	e05e      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b024:	2000      	movs	r0, #0
    b026:	9007      	str	r0, [sp, #28]
    b028:	203a      	movs	r0, #58	; 0x3a
    b02a:	9006      	str	r0, [sp, #24]
    b02c:	e059      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b02e:	2000      	movs	r0, #0
    b030:	9007      	str	r0, [sp, #28]
    b032:	2036      	movs	r0, #54	; 0x36
    b034:	9006      	str	r0, [sp, #24]
    b036:	e054      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b038:	2000      	movs	r0, #0
    b03a:	9007      	str	r0, [sp, #28]
    b03c:	20b1      	movs	r0, #177	; 0xb1
    b03e:	9006      	str	r0, [sp, #24]
    b040:	e04f      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b042:	2000      	movs	r0, #0
    b044:	9007      	str	r0, [sp, #28]
    b046:	20b2      	movs	r0, #178	; 0xb2
    b048:	9006      	str	r0, [sp, #24]
    b04a:	e04a      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b04c:	2000      	movs	r0, #0
    b04e:	9007      	str	r0, [sp, #28]
    b050:	20b3      	movs	r0, #179	; 0xb3
    b052:	9006      	str	r0, [sp, #24]
    b054:	e045      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b056:	2000      	movs	r0, #0
    b058:	9007      	str	r0, [sp, #28]
    b05a:	20b4      	movs	r0, #180	; 0xb4
    b05c:	9006      	str	r0, [sp, #24]
    b05e:	e040      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b060:	2000      	movs	r0, #0
    b062:	9007      	str	r0, [sp, #28]
    b064:	20b6      	movs	r0, #182	; 0xb6
    b066:	9006      	str	r0, [sp, #24]
    b068:	e03b      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b06a:	2000      	movs	r0, #0
    b06c:	9007      	str	r0, [sp, #28]
    b06e:	20c0      	movs	r0, #192	; 0xc0
    b070:	9006      	str	r0, [sp, #24]
    b072:	e036      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b074:	2000      	movs	r0, #0
    b076:	9007      	str	r0, [sp, #28]
    b078:	20c1      	movs	r0, #193	; 0xc1
    b07a:	9006      	str	r0, [sp, #24]
    b07c:	e031      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b07e:	2000      	movs	r0, #0
    b080:	9007      	str	r0, [sp, #28]
    b082:	20c2      	movs	r0, #194	; 0xc2
    b084:	9006      	str	r0, [sp, #24]
    b086:	e02c      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b088:	2000      	movs	r0, #0
    b08a:	9007      	str	r0, [sp, #28]
    b08c:	20c3      	movs	r0, #195	; 0xc3
    b08e:	9006      	str	r0, [sp, #24]
    b090:	e027      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b092:	2000      	movs	r0, #0
    b094:	9007      	str	r0, [sp, #28]
    b096:	20c4      	movs	r0, #196	; 0xc4
    b098:	9006      	str	r0, [sp, #24]
    b09a:	e022      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b09c:	2000      	movs	r0, #0
    b09e:	9007      	str	r0, [sp, #28]
    b0a0:	20c5      	movs	r0, #197	; 0xc5
    b0a2:	9006      	str	r0, [sp, #24]
    b0a4:	e01d      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b0a6:	2000      	movs	r0, #0
    b0a8:	9007      	str	r0, [sp, #28]
    b0aa:	20da      	movs	r0, #218	; 0xda
    b0ac:	9006      	str	r0, [sp, #24]
    b0ae:	e018      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b0b0:	2000      	movs	r0, #0
    b0b2:	9007      	str	r0, [sp, #28]
    b0b4:	20db      	movs	r0, #219	; 0xdb
    b0b6:	9006      	str	r0, [sp, #24]
    b0b8:	e013      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b0ba:	2000      	movs	r0, #0
    b0bc:	9007      	str	r0, [sp, #28]
    b0be:	20dc      	movs	r0, #220	; 0xdc
    b0c0:	9006      	str	r0, [sp, #24]
    b0c2:	e00e      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b0c4:	2000      	movs	r0, #0
    b0c6:	9007      	str	r0, [sp, #28]
    b0c8:	20dd      	movs	r0, #221	; 0xdd
    b0ca:	9006      	str	r0, [sp, #24]
    b0cc:	e009      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b0ce:	2000      	movs	r0, #0
    b0d0:	9007      	str	r0, [sp, #28]
    b0d2:	20fc      	movs	r0, #252	; 0xfc
    b0d4:	9006      	str	r0, [sp, #24]
    b0d6:	e004      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b0d8:	2000      	movs	r0, #0
    b0da:	9007      	str	r0, [sp, #28]
    b0dc:	20e0      	movs	r0, #224	; 0xe0
    b0de:	9006      	str	r0, [sp, #24]
    b0e0:	e7ff      	b.n	b0e2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    b0e2:	9806      	ldr	r0, [sp, #24]
    b0e4:	9907      	ldr	r1, [sp, #28]
    b0e6:	9105      	str	r1, [sp, #20]
    b0e8:	9004      	str	r0, [sp, #16]
    b0ea:	2000      	movs	r0, #0
    b0ec:	9003      	str	r0, [sp, #12]
    b0ee:	2001      	movs	r0, #1
    b0f0:	9002      	str	r0, [sp, #8]
    b0f2:	9802      	ldr	r0, [sp, #8]
    b0f4:	9903      	ldr	r1, [sp, #12]
    b0f6:	9a04      	ldr	r2, [sp, #16]
    b0f8:	9b05      	ldr	r3, [sp, #20]
    b0fa:	b00a      	add	sp, #40	; 0x28
    b0fc:	4770      	bx	lr

0000b0fe <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
    b0fe:	b580      	push	{r7, lr}
    b100:	b08a      	sub	sp, #40	; 0x28
    b102:	9009      	str	r0, [sp, #36]	; 0x24
    b104:	f7ff fe30 	bl	ad68 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
    b108:	9108      	str	r1, [sp, #32]
    b10a:	9007      	str	r0, [sp, #28]
    b10c:	9306      	str	r3, [sp, #24]
    b10e:	9205      	str	r2, [sp, #20]
    b110:	e7ff      	b.n	b112 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
    b112:	9807      	ldr	r0, [sp, #28]
    b114:	9908      	ldr	r1, [sp, #32]
    b116:	9a05      	ldr	r2, [sp, #20]
    b118:	9b06      	ldr	r3, [sp, #24]
    b11a:	f000 f859 	bl	b1d0 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
    b11e:	9104      	str	r1, [sp, #16]
    b120:	9003      	str	r0, [sp, #12]
    b122:	9302      	str	r3, [sp, #8]
    b124:	9201      	str	r2, [sp, #4]
    b126:	e7ff      	b.n	b128 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
    b128:	9803      	ldr	r0, [sp, #12]
    b12a:	9904      	ldr	r1, [sp, #16]
    b12c:	9a01      	ldr	r2, [sp, #4]
    b12e:	9b02      	ldr	r3, [sp, #8]
    b130:	b00a      	add	sp, #40	; 0x28
    b132:	bd80      	pop	{r7, pc}

0000b134 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
    b134:	b08a      	sub	sp, #40	; 0x28
    b136:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
    b138:	7800      	ldrb	r0, [r0, #0]
    b13a:	4601      	mov	r1, r0
    b13c:	2800      	cmp	r0, #0
    b13e:	9101      	str	r1, [sp, #4]
    b140:	d00f      	beq.n	b162 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
    b142:	e7ff      	b.n	b144 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
    b144:	9801      	ldr	r0, [sp, #4]
    b146:	2860      	cmp	r0, #96	; 0x60
    b148:	d00f      	beq.n	b16a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
    b14a:	e7ff      	b.n	b14c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
    b14c:	9801      	ldr	r0, [sp, #4]
    b14e:	28a0      	cmp	r0, #160	; 0xa0
    b150:	d001      	beq.n	b156 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
    b152:	e7ff      	b.n	b154 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
    b154:	e00e      	b.n	b174 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
    b156:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    b158:	9007      	str	r0, [sp, #28]
    b15a:	20a0      	movs	r0, #160	; 0xa0
    b15c:	9006      	str	r0, [sp, #24]
    b15e:	e00e      	b.n	b17e <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    b160:	defe      	udf	#254	; 0xfe
    b162:	2000      	movs	r0, #0
    b164:	9007      	str	r0, [sp, #28]
    b166:	9006      	str	r0, [sp, #24]
    b168:	e009      	b.n	b17e <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    b16a:	2000      	movs	r0, #0
    b16c:	9007      	str	r0, [sp, #28]
    b16e:	2060      	movs	r0, #96	; 0x60
    b170:	9006      	str	r0, [sp, #24]
    b172:	e004      	b.n	b17e <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    b174:	2000      	movs	r0, #0
    b176:	9007      	str	r0, [sp, #28]
    b178:	20c0      	movs	r0, #192	; 0xc0
    b17a:	9006      	str	r0, [sp, #24]
    b17c:	e7ff      	b.n	b17e <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    b17e:	9806      	ldr	r0, [sp, #24]
    b180:	9907      	ldr	r1, [sp, #28]
    b182:	9105      	str	r1, [sp, #20]
    b184:	9004      	str	r0, [sp, #16]
    b186:	2000      	movs	r0, #0
    b188:	9003      	str	r0, [sp, #12]
    b18a:	2001      	movs	r0, #1
    b18c:	9002      	str	r0, [sp, #8]
    b18e:	9802      	ldr	r0, [sp, #8]
    b190:	9903      	ldr	r1, [sp, #12]
    b192:	9a04      	ldr	r2, [sp, #16]
    b194:	9b05      	ldr	r3, [sp, #20]
    b196:	b00a      	add	sp, #40	; 0x28
    b198:	4770      	bx	lr

0000b19a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
    b19a:	b580      	push	{r7, lr}
    b19c:	b08a      	sub	sp, #40	; 0x28
    b19e:	9009      	str	r0, [sp, #36]	; 0x24
    b1a0:	f7ff ffc8 	bl	b134 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
    b1a4:	9108      	str	r1, [sp, #32]
    b1a6:	9007      	str	r0, [sp, #28]
    b1a8:	9306      	str	r3, [sp, #24]
    b1aa:	9205      	str	r2, [sp, #20]
    b1ac:	e7ff      	b.n	b1ae <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
    b1ae:	9807      	ldr	r0, [sp, #28]
    b1b0:	9908      	ldr	r1, [sp, #32]
    b1b2:	9a05      	ldr	r2, [sp, #20]
    b1b4:	9b06      	ldr	r3, [sp, #24]
    b1b6:	f000 f863 	bl	b280 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
    b1ba:	9104      	str	r1, [sp, #16]
    b1bc:	9003      	str	r0, [sp, #12]
    b1be:	9302      	str	r3, [sp, #8]
    b1c0:	9201      	str	r2, [sp, #4]
    b1c2:	e7ff      	b.n	b1c4 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
    b1c4:	9803      	ldr	r0, [sp, #12]
    b1c6:	9904      	ldr	r1, [sp, #16]
    b1c8:	9a01      	ldr	r2, [sp, #4]
    b1ca:	9b02      	ldr	r3, [sp, #8]
    b1cc:	b00a      	add	sp, #40	; 0x28
    b1ce:	bd80      	pop	{r7, pc}

0000b1d0 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
    b1d0:	b5b0      	push	{r4, r5, r7, lr}
    b1d2:	b090      	sub	sp, #64	; 0x40
    b1d4:	469c      	mov	ip, r3
    b1d6:	4696      	mov	lr, r2
    b1d8:	460c      	mov	r4, r1
    b1da:	4605      	mov	r5, r0
    b1dc:	9103      	str	r1, [sp, #12]
    b1de:	9002      	str	r0, [sp, #8]
    b1e0:	9305      	str	r3, [sp, #20]
    b1e2:	9204      	str	r2, [sp, #16]
    b1e4:	2000      	movs	r0, #0
    b1e6:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    b1ea:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    b1ee:	2001      	movs	r0, #1
    b1f0:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    b1f4:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    b1f8:	9802      	ldr	r0, [sp, #8]
    b1fa:	2800      	cmp	r0, #0
    b1fc:	d001      	beq.n	b202 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
    b1fe:	e7ff      	b.n	b200 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
    b200:	e004      	b.n	b20c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
    b202:	2000      	movs	r0, #0
    b204:	9007      	str	r0, [sp, #28]
    b206:	9006      	str	r0, [sp, #24]
    b208:	e023      	b.n	b252 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    b20a:	defe      	udf	#254	; 0xfe
    b20c:	2000      	movs	r0, #0
    b20e:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    b212:	9904      	ldr	r1, [sp, #16]
    b214:	9a05      	ldr	r2, [sp, #20]
    b216:	920f      	str	r2, [sp, #60]	; 0x3c
    b218:	910e      	str	r1, [sp, #56]	; 0x38
    b21a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    b21e:	920b      	str	r2, [sp, #44]	; 0x2c
    b220:	910a      	str	r1, [sp, #40]	; 0x28
    b222:	980a      	ldr	r0, [sp, #40]	; 0x28
    b224:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b226:	f000 f883 	bl	b330 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
    b22a:	9101      	str	r1, [sp, #4]
    b22c:	9000      	str	r0, [sp, #0]
    b22e:	e7ff      	b.n	b230 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
    b230:	9800      	ldr	r0, [sp, #0]
    b232:	9008      	str	r0, [sp, #32]
    b234:	9901      	ldr	r1, [sp, #4]
    b236:	9109      	str	r1, [sp, #36]	; 0x24
    b238:	2200      	movs	r2, #0
    b23a:	9207      	str	r2, [sp, #28]
    b23c:	2201      	movs	r2, #1
    b23e:	9206      	str	r2, [sp, #24]
    b240:	e007      	b.n	b252 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    b242:	9802      	ldr	r0, [sp, #8]
    b244:	2801      	cmp	r0, #1
    b246:	d010      	beq.n	b26a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
    b248:	e019      	b.n	b27e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
    b24a:	2000      	movs	r0, #0
    b24c:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    b250:	e7f7      	b.n	b242 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    b252:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    b256:	07c0      	lsls	r0, r0, #31
    b258:	2800      	cmp	r0, #0
    b25a:	d1f6      	bne.n	b24a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
    b25c:	e7f1      	b.n	b242 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    b25e:	9806      	ldr	r0, [sp, #24]
    b260:	9907      	ldr	r1, [sp, #28]
    b262:	9a08      	ldr	r2, [sp, #32]
    b264:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b266:	b010      	add	sp, #64	; 0x40
    b268:	bdb0      	pop	{r4, r5, r7, pc}
    b26a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    b26e:	07c0      	lsls	r0, r0, #31
    b270:	2800      	cmp	r0, #0
    b272:	d0f4      	beq.n	b25e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    b274:	e7ff      	b.n	b276 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
    b276:	2000      	movs	r0, #0
    b278:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    b27c:	e7ef      	b.n	b25e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    b27e:	e7ee      	b.n	b25e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

0000b280 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
    b280:	b5b0      	push	{r4, r5, r7, lr}
    b282:	b090      	sub	sp, #64	; 0x40
    b284:	469c      	mov	ip, r3
    b286:	4696      	mov	lr, r2
    b288:	460c      	mov	r4, r1
    b28a:	4605      	mov	r5, r0
    b28c:	9103      	str	r1, [sp, #12]
    b28e:	9002      	str	r0, [sp, #8]
    b290:	9305      	str	r3, [sp, #20]
    b292:	9204      	str	r2, [sp, #16]
    b294:	2000      	movs	r0, #0
    b296:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    b29a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    b29e:	2001      	movs	r0, #1
    b2a0:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    b2a4:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    b2a8:	9802      	ldr	r0, [sp, #8]
    b2aa:	2800      	cmp	r0, #0
    b2ac:	d001      	beq.n	b2b2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
    b2ae:	e7ff      	b.n	b2b0 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
    b2b0:	e004      	b.n	b2bc <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
    b2b2:	2000      	movs	r0, #0
    b2b4:	9007      	str	r0, [sp, #28]
    b2b6:	9006      	str	r0, [sp, #24]
    b2b8:	e023      	b.n	b302 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    b2ba:	defe      	udf	#254	; 0xfe
    b2bc:	2000      	movs	r0, #0
    b2be:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    b2c2:	9904      	ldr	r1, [sp, #16]
    b2c4:	9a05      	ldr	r2, [sp, #20]
    b2c6:	920f      	str	r2, [sp, #60]	; 0x3c
    b2c8:	910e      	str	r1, [sp, #56]	; 0x38
    b2ca:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    b2ce:	920b      	str	r2, [sp, #44]	; 0x2c
    b2d0:	910a      	str	r1, [sp, #40]	; 0x28
    b2d2:	980a      	ldr	r0, [sp, #40]	; 0x28
    b2d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b2d6:	f00b f8d8 	bl	1648a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
    b2da:	9101      	str	r1, [sp, #4]
    b2dc:	9000      	str	r0, [sp, #0]
    b2de:	e7ff      	b.n	b2e0 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
    b2e0:	9800      	ldr	r0, [sp, #0]
    b2e2:	9008      	str	r0, [sp, #32]
    b2e4:	9901      	ldr	r1, [sp, #4]
    b2e6:	9109      	str	r1, [sp, #36]	; 0x24
    b2e8:	2200      	movs	r2, #0
    b2ea:	9207      	str	r2, [sp, #28]
    b2ec:	2201      	movs	r2, #1
    b2ee:	9206      	str	r2, [sp, #24]
    b2f0:	e007      	b.n	b302 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    b2f2:	9802      	ldr	r0, [sp, #8]
    b2f4:	2801      	cmp	r0, #1
    b2f6:	d010      	beq.n	b31a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
    b2f8:	e019      	b.n	b32e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
    b2fa:	2000      	movs	r0, #0
    b2fc:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    b300:	e7f7      	b.n	b2f2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    b302:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    b306:	07c0      	lsls	r0, r0, #31
    b308:	2800      	cmp	r0, #0
    b30a:	d1f6      	bne.n	b2fa <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
    b30c:	e7f1      	b.n	b2f2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    b30e:	9806      	ldr	r0, [sp, #24]
    b310:	9907      	ldr	r1, [sp, #28]
    b312:	9a08      	ldr	r2, [sp, #32]
    b314:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b316:	b010      	add	sp, #64	; 0x40
    b318:	bdb0      	pop	{r4, r5, r7, pc}
    b31a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    b31e:	07c0      	lsls	r0, r0, #31
    b320:	2800      	cmp	r0, #0
    b322:	d0f4      	beq.n	b30e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    b324:	e7ff      	b.n	b326 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
    b326:	2000      	movs	r0, #0
    b328:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    b32c:	e7ef      	b.n	b30e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    b32e:	e7ee      	b.n	b30e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

0000b330 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
    b330:	b084      	sub	sp, #16
    b332:	460a      	mov	r2, r1
    b334:	4603      	mov	r3, r0
    b336:	9103      	str	r1, [sp, #12]
    b338:	9002      	str	r0, [sp, #8]
    b33a:	b004      	add	sp, #16
    b33c:	4770      	bx	lr

0000b33e <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>:
    b33e:	b084      	sub	sp, #16
    b340:	9000      	str	r0, [sp, #0]
    b342:	9101      	str	r1, [sp, #4]
    b344:	9102      	str	r1, [sp, #8]
    b346:	9003      	str	r0, [sp, #12]
    b348:	6802      	ldr	r2, [r0, #0]
    b34a:	6840      	ldr	r0, [r0, #4]
    b34c:	680b      	ldr	r3, [r1, #0]
    b34e:	6849      	ldr	r1, [r1, #4]
    b350:	4048      	eors	r0, r1
    b352:	ea82 0103 	eor.w	r1, r2, r3
    b356:	4308      	orrs	r0, r1
    b358:	fab0 f080 	clz	r0, r0
    b35c:	0940      	lsrs	r0, r0, #5
    b35e:	b004      	add	sp, #16
    b360:	4770      	bx	lr

0000b362 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
    b362:	b5b0      	push	{r4, r5, r7, lr}
    b364:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
    b366:	f24e 0030 	movw	r0, #57392	; 0xe030
    b36a:	f2c0 0001 	movt	r0, #1
    b36e:	2112      	movs	r1, #18
    b370:	f7fd ff21 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    b374:	e7ff      	b.n	b376 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    b376:	f240 1064 	movw	r0, #356	; 0x164
    b37a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b37e:	210a      	movs	r1, #10
    b380:	f008 fee9 	bl	14156 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    b384:	9012      	str	r0, [sp, #72]	; 0x48
    b386:	e7ff      	b.n	b388 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x26>
    b388:	9812      	ldr	r0, [sp, #72]	; 0x48
    b38a:	f7fd fcd8 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    b38e:	9014      	str	r0, [sp, #80]	; 0x50
    b390:	e7ff      	b.n	b392 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x30>
    b392:	9814      	ldr	r0, [sp, #80]	; 0x50
    b394:	1e41      	subs	r1, r0, #1
    b396:	bf18      	it	ne
    b398:	2101      	movne	r1, #1
    b39a:	2801      	cmp	r0, #1
    b39c:	d001      	beq.n	b3a2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x40>
    b39e:	e7ff      	b.n	b3a0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x3e>
    b3a0:	e008      	b.n	b3b4 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
    b3a2:	f240 1064 	movw	r0, #356	; 0x164
    b3a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b3aa:	f008 ff6d 	bl	14288 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    b3ae:	9011      	str	r0, [sp, #68]	; 0x44
    b3b0:	e00f      	b.n	b3d2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    b3b2:	defe      	udf	#254	; 0xfe
    b3b4:	9814      	ldr	r0, [sp, #80]	; 0x50
    b3b6:	9036      	str	r0, [sp, #216]	; 0xd8
    b3b8:	f007 f90c 	bl	125d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    b3bc:	9010      	str	r0, [sp, #64]	; 0x40
    b3be:	e002      	b.n	b3c6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
    b3c0:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b3c2:	b03e      	add	sp, #248	; 0xf8
    b3c4:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    b3c6:	9810      	ldr	r0, [sp, #64]	; 0x40
    b3c8:	f7fd fcad 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    b3cc:	9013      	str	r0, [sp, #76]	; 0x4c
    b3ce:	e7ff      	b.n	b3d0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x6e>
    b3d0:	e7f6      	b.n	b3c0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_low() ? ;
    b3d2:	9811      	ldr	r0, [sp, #68]	; 0x44
    b3d4:	f7fd fcb3 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    b3d8:	9015      	str	r0, [sp, #84]	; 0x54
    b3da:	e7ff      	b.n	b3dc <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x7a>
    b3dc:	9815      	ldr	r0, [sp, #84]	; 0x54
    b3de:	1e41      	subs	r1, r0, #1
    b3e0:	bf18      	it	ne
    b3e2:	2101      	movne	r1, #1
    b3e4:	2801      	cmp	r0, #1
    b3e6:	d001      	beq.n	b3ec <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x8a>
    b3e8:	e7ff      	b.n	b3ea <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x88>
    b3ea:	e008      	b.n	b3fe <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x9c>
        TOUCH_DELAY.delay_ms(20);
    b3ec:	f240 1068 	movw	r0, #360	; 0x168
    b3f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b3f4:	2114      	movs	r1, #20
    b3f6:	f008 ff5e 	bl	142b6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    b3fa:	e00d      	b.n	b418 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb6>
        TOUCH_RESET.set_low() ? ;
    b3fc:	defe      	udf	#254	; 0xfe
    b3fe:	9815      	ldr	r0, [sp, #84]	; 0x54
    b400:	9037      	str	r0, [sp, #220]	; 0xdc
    b402:	f007 f8e7 	bl	125d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    b406:	900f      	str	r0, [sp, #60]	; 0x3c
    b408:	e7ff      	b.n	b40a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xa8>
    b40a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b40c:	f7fd fc8b 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    b410:	9013      	str	r0, [sp, #76]	; 0x4c
    b412:	e7ff      	b.n	b414 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb2>
    b414:	e7ff      	b.n	b416 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
    b416:	e7d3      	b.n	b3c0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_high() ? ;
    b418:	f240 1064 	movw	r0, #356	; 0x164
    b41c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b420:	f008 ff3d 	bl	1429e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    b424:	900e      	str	r0, [sp, #56]	; 0x38
    b426:	e7ff      	b.n	b428 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xc6>
    b428:	980e      	ldr	r0, [sp, #56]	; 0x38
    b42a:	f7fd fc88 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    b42e:	9016      	str	r0, [sp, #88]	; 0x58
    b430:	e7ff      	b.n	b432 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xd0>
    b432:	9816      	ldr	r0, [sp, #88]	; 0x58
    b434:	1e41      	subs	r1, r0, #1
    b436:	bf18      	it	ne
    b438:	2101      	movne	r1, #1
    b43a:	2801      	cmp	r0, #1
    b43c:	d001      	beq.n	b442 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xe0>
    b43e:	e7ff      	b.n	b440 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xde>
    b440:	e008      	b.n	b454 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    b442:	f240 1068 	movw	r0, #360	; 0x168
    b446:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b44a:	21c8      	movs	r1, #200	; 0xc8
    b44c:	f008 ff33 	bl	142b6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    b450:	e00c      	b.n	b46c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x10a>
        TOUCH_RESET.set_high() ? ;
    b452:	defe      	udf	#254	; 0xfe
    b454:	9816      	ldr	r0, [sp, #88]	; 0x58
    b456:	9038      	str	r0, [sp, #224]	; 0xe0
    b458:	f007 f8bc 	bl	125d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    b45c:	900d      	str	r0, [sp, #52]	; 0x34
    b45e:	e7ff      	b.n	b460 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xfe>
    b460:	980d      	ldr	r0, [sp, #52]	; 0x34
    b462:	f7fd fc60 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    b466:	9013      	str	r0, [sp, #76]	; 0x4c
    b468:	e7ff      	b.n	b46a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x108>
    b46a:	e7d4      	b.n	b416 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    b46c:	f240 1068 	movw	r0, #360	; 0x168
    b470:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b474:	21c8      	movs	r1, #200	; 0xc8
    b476:	f008 ff1e 	bl	142b6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    b47a:	e7ff      	b.n	b47c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
    b47c:	f24b 601f 	movw	r0, #46623	; 0xb61f
    b480:	f2c0 0000 	movt	r0, #0
    b484:	9017      	str	r0, [sp, #92]	; 0x5c
    b486:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b488:	f240 11fc 	movw	r1, #508	; 0x1fc
    b48c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b490:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
    b492:	f24b 50d3 	movw	r0, #46547	; 0xb5d3
    b496:	f2c0 0000 	movt	r0, #0
    b49a:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
    b49c:	e7ff      	b.n	b49e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
    b49e:	9919      	ldr	r1, [sp, #100]	; 0x64
    b4a0:	4668      	mov	r0, sp
    b4a2:	2201      	movs	r2, #1
    b4a4:	6002      	str	r2, [r0, #0]
    b4a6:	201c      	movs	r0, #28
    b4a8:	2200      	movs	r2, #0
    b4aa:	2302      	movs	r3, #2
    b4ac:	f00e f8a8 	bl	19600 <hal_gpio_irq_init>
    b4b0:	9018      	str	r0, [sp, #96]	; 0x60
    b4b2:	e7ff      	b.n	b4b4 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
    b4b4:	f24e 0048 	movw	r0, #57416	; 0xe048
    b4b8:	f2c0 0001 	movt	r0, #1
    b4bc:	6800      	ldr	r0, [r0, #0]
    b4be:	a918      	add	r1, sp, #96	; 0x60
    b4c0:	911a      	str	r1, [sp, #104]	; 0x68
    b4c2:	901b      	str	r0, [sp, #108]	; 0x6c
    b4c4:	981a      	ldr	r0, [sp, #104]	; 0x68
    b4c6:	9039      	str	r0, [sp, #228]	; 0xe4
    b4c8:	991b      	ldr	r1, [sp, #108]	; 0x6c
    b4ca:	913a      	str	r1, [sp, #232]	; 0xe8
    b4cc:	6802      	ldr	r2, [r0, #0]
    b4ce:	680b      	ldr	r3, [r1, #0]
    b4d0:	429a      	cmp	r2, r3
    b4d2:	900c      	str	r0, [sp, #48]	; 0x30
    b4d4:	910b      	str	r1, [sp, #44]	; 0x2c
    b4d6:	d104      	bne.n	b4e2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x180>
    b4d8:	e7ff      	b.n	b4da <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x178>
    b4da:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    b4dc:	f00e f8cc 	bl	19678 <hal_gpio_irq_enable>
    b4e0:	e072      	b.n	b5c8 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
    b4e2:	f24e 00a0 	movw	r0, #57504	; 0xe0a0
    b4e6:	f2c0 0001 	movt	r0, #1
    b4ea:	6801      	ldr	r1, [r0, #0]
    b4ec:	980c      	ldr	r0, [sp, #48]	; 0x30
    b4ee:	902b      	str	r0, [sp, #172]	; 0xac
    b4f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b4f2:	922c      	str	r2, [sp, #176]	; 0xb0
    b4f4:	f24e 03bc 	movw	r3, #57532	; 0xe0bc
    b4f8:	f2c0 0301 	movt	r3, #1
    b4fc:	681b      	ldr	r3, [r3, #0]
    b4fe:	f24e 0cc0 	movw	ip, #57536	; 0xe0c0
    b502:	f2c0 0c01 	movt	ip, #1
    b506:	f8dc c000 	ldr.w	ip, [ip]
    b50a:	46ee      	mov	lr, sp
    b50c:	2400      	movs	r4, #0
    b50e:	f8ce 4000 	str.w	r4, [lr]
    b512:	a82d      	add	r0, sp, #180	; 0xb4
    b514:	2201      	movs	r2, #1
    b516:	910a      	str	r1, [sp, #40]	; 0x28
    b518:	4619      	mov	r1, r3
    b51a:	4663      	mov	r3, ip
    b51c:	f00a ffd9 	bl	164d2 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    b520:	e7ff      	b.n	b522 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1c0>
    b522:	a82b      	add	r0, sp, #172	; 0xac
    b524:	9028      	str	r0, [sp, #160]	; 0xa0
    b526:	a82c      	add	r0, sp, #176	; 0xb0
    b528:	9029      	str	r0, [sp, #164]	; 0xa4
    b52a:	a82d      	add	r0, sp, #180	; 0xb4
    b52c:	902a      	str	r0, [sp, #168]	; 0xa8
    b52e:	9828      	ldr	r0, [sp, #160]	; 0xa0
    b530:	903b      	str	r0, [sp, #236]	; 0xec
    b532:	9929      	ldr	r1, [sp, #164]	; 0xa4
    b534:	913c      	str	r1, [sp, #240]	; 0xf0
    b536:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    b538:	923d      	str	r2, [sp, #244]	; 0xf4
    b53a:	f241 533d 	movw	r3, #5437	; 0x153d
    b53e:	f2c0 0301 	movt	r3, #1
    b542:	9109      	str	r1, [sp, #36]	; 0x24
    b544:	4619      	mov	r1, r3
    b546:	9208      	str	r2, [sp, #32]
    b548:	f7fd ffea 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    b54c:	9007      	str	r0, [sp, #28]
    b54e:	9106      	str	r1, [sp, #24]
    b550:	e7ff      	b.n	b552 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1f0>
    b552:	f241 513d 	movw	r1, #5437	; 0x153d
    b556:	f2c0 0101 	movt	r1, #1
    b55a:	9809      	ldr	r0, [sp, #36]	; 0x24
    b55c:	f7fd ffe0 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    b560:	9005      	str	r0, [sp, #20]
    b562:	9104      	str	r1, [sp, #16]
    b564:	e7ff      	b.n	b566 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x204>
    b566:	f647 019b 	movw	r1, #30875	; 0x789b
    b56a:	f2c0 0101 	movt	r1, #1
    b56e:	9808      	ldr	r0, [sp, #32]
    b570:	f7fe f815 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    b574:	9003      	str	r0, [sp, #12]
    b576:	9102      	str	r1, [sp, #8]
    b578:	e7ff      	b.n	b57a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x218>
    b57a:	9807      	ldr	r0, [sp, #28]
    b57c:	9022      	str	r0, [sp, #136]	; 0x88
    b57e:	9906      	ldr	r1, [sp, #24]
    b580:	9123      	str	r1, [sp, #140]	; 0x8c
    b582:	9a05      	ldr	r2, [sp, #20]
    b584:	9224      	str	r2, [sp, #144]	; 0x90
    b586:	9b04      	ldr	r3, [sp, #16]
    b588:	9325      	str	r3, [sp, #148]	; 0x94
    b58a:	f8dd c00c 	ldr.w	ip, [sp, #12]
    b58e:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
    b592:	f8dd e008 	ldr.w	lr, [sp, #8]
    b596:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
    b59a:	466c      	mov	r4, sp
    b59c:	2503      	movs	r5, #3
    b59e:	6025      	str	r5, [r4, #0]
    b5a0:	a81c      	add	r0, sp, #112	; 0x70
    b5a2:	ab22      	add	r3, sp, #136	; 0x88
    b5a4:	990a      	ldr	r1, [sp, #40]	; 0x28
    b5a6:	462a      	mov	r2, r5
    b5a8:	f00a ff93 	bl	164d2 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    b5ac:	e7ff      	b.n	b5ae <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x24c>
    b5ae:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
    b5b2:	f2c0 0001 	movt	r0, #1
    b5b6:	f00b fe82 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    b5ba:	9001      	str	r0, [sp, #4]
    b5bc:	e7ff      	b.n	b5be <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x25c>
    b5be:	a81c      	add	r0, sp, #112	; 0x70
    b5c0:	9901      	ldr	r1, [sp, #4]
    b5c2:	f00b feb9 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    b5c6:	defe      	udf	#254	; 0xfe
    b5c8:	2000      	movs	r0, #0
    Ok(())
    b5ca:	9013      	str	r0, [sp, #76]	; 0x4c
    b5cc:	2001      	movs	r0, #1
    b5ce:	9013      	str	r0, [sp, #76]	; 0x4c
}
    b5d0:	e6f6      	b.n	b3c0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>

0000b5d2 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
    b5d2:	b580      	push	{r7, lr}
    b5d4:	b086      	sub	sp, #24
    b5d6:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
    b5d8:	f240 11fc 	movw	r1, #508	; 0x1fc
    b5dc:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b5e0:	6088      	str	r0, [r1, #8]
    b5e2:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
    b5e4:	f7fd fc27 	bl	8e36 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    b5e8:	e7ff      	b.n	b5ea <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x18>
    b5ea:	f64d 3122 	movw	r1, #56098	; 0xdb22
    b5ee:	f2c0 0101 	movt	r1, #1
    b5f2:	f24e 03f8 	movw	r3, #57592	; 0xe0f8
    b5f6:	f2c0 0301 	movt	r3, #1
    b5fa:	a802      	add	r0, sp, #8
    b5fc:	2208      	movs	r2, #8
    b5fe:	f7fd f8e8 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    b602:	4601      	mov	r1, r0
    b604:	9005      	str	r0, [sp, #20]
    b606:	9101      	str	r1, [sp, #4]
    b608:	e7ff      	b.n	b60a <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
    b60a:	f240 11fc 	movw	r1, #508	; 0x1fc
    b60e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b612:	9801      	ldr	r0, [sp, #4]
    b614:	f00f f8c3 	bl	1a79e <os_eventq_put>
    b618:	e7ff      	b.n	b61a <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x48>
    //console::print("touch\n"); ////
}
    b61a:	b006      	add	sp, #24
    b61c:	bd80      	pop	{r7, pc}

0000b61e <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
    b61e:	b580      	push	{r7, lr}
    b620:	b094      	sub	sp, #80	; 0x50
    b622:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
    b624:	f240 1068 	movw	r0, #360	; 0x168
    b628:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b62c:	f000 f894 	bl	b758 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>
    b630:	9006      	str	r0, [sp, #24]
    b632:	e7ff      	b.n	b634 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x16>
    b634:	f24e 1108 	movw	r1, #57608	; 0xe108
    b638:	f2c0 0101 	movt	r1, #1
    b63c:	f24e 1318 	movw	r3, #57624	; 0xe118
    b640:	f2c0 0301 	movt	r3, #1
    b644:	220e      	movs	r2, #14
    b646:	9806      	ldr	r0, [sp, #24]
    b648:	f7fd fb3a 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    b64c:	e7ff      	b.n	b64e <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
    b64e:	f240 1068 	movw	r0, #360	; 0x168
    b652:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b656:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    b65a:	2100      	movs	r1, #0
    b65c:	9107      	str	r1, [sp, #28]
    b65e:	9008      	str	r0, [sp, #32]
    b660:	9807      	ldr	r0, [sp, #28]
    b662:	9908      	ldr	r1, [sp, #32]
    b664:	f006 fb5d 	bl	11d22 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    b668:	9005      	str	r0, [sp, #20]
    b66a:	9104      	str	r1, [sp, #16]
    b66c:	e7ff      	b.n	b66e <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x50>
    b66e:	9805      	ldr	r0, [sp, #20]
    b670:	9009      	str	r0, [sp, #36]	; 0x24
    b672:	9904      	ldr	r1, [sp, #16]
    b674:	910a      	str	r1, [sp, #40]	; 0x28
    b676:	e7ff      	b.n	b678 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    b678:	a809      	add	r0, sp, #36	; 0x24
    b67a:	f006 fac7 	bl	11c0c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    b67e:	910c      	str	r1, [sp, #48]	; 0x30
    b680:	900b      	str	r0, [sp, #44]	; 0x2c
    b682:	e7ff      	b.n	b684 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x66>
    b684:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b686:	2800      	cmp	r0, #0
    b688:	d001      	beq.n	b68e <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x70>
    b68a:	e7ff      	b.n	b68c <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x6e>
    b68c:	e002      	b.n	b694 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
    b68e:	b014      	add	sp, #80	; 0x50
    b690:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
    b692:	defe      	udf	#254	; 0xfe
    b694:	980c      	ldr	r0, [sp, #48]	; 0x30
    b696:	900f      	str	r0, [sp, #60]	; 0x3c
    b698:	9010      	str	r0, [sp, #64]	; 0x40
    b69a:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    b69c:	2809      	cmp	r0, #9
    b69e:	9003      	str	r0, [sp, #12]
    b6a0:	d851      	bhi.n	b746 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x128>
    b6a2:	e7ff      	b.n	b6a4 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x86>
    b6a4:	f240 1068 	movw	r0, #360	; 0x168
    b6a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b6ac:	9903      	ldr	r1, [sp, #12]
    b6ae:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b6b2:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
    b6b6:	4603      	mov	r3, r0
    b6b8:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    b6bc:	f8b2 c002 	ldrh.w	ip, [r2, #2]
    b6c0:	46e6      	mov	lr, ip
    b6c2:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
    b6c6:	7912      	ldrb	r2, [r2, #4]
    b6c8:	4694      	mov	ip, r2
    b6ca:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
    b6ce:	2800      	cmp	r0, #0
    b6d0:	9302      	str	r3, [sp, #8]
    b6d2:	f8cd e004 	str.w	lr, [sp, #4]
    b6d6:	f8cd c000 	str.w	ip, [sp]
    b6da:	d008      	beq.n	b6ee <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xd0>
    b6dc:	e003      	b.n	b6e6 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    b6de:	2001      	movs	r0, #1
    b6e0:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    b6e4:	e008      	b.n	b6f8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    b6e6:	2000      	movs	r0, #0
    b6e8:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    b6ec:	e004      	b.n	b6f8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    b6ee:	9801      	ldr	r0, [sp, #4]
    b6f0:	0401      	lsls	r1, r0, #16
    b6f2:	2900      	cmp	r1, #0
    b6f4:	d0f3      	beq.n	b6de <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc0>
    b6f6:	e7f6      	b.n	b6e6 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    b6f8:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    b6fc:	07c0      	lsls	r0, r0, #31
    b6fe:	2800      	cmp	r0, #0
    b700:	d105      	bne.n	b70e <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf0>
    b702:	e7ff      	b.n	b704 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xe6>
            if action != 0 && action != 2 { continue; }
    b704:	9800      	ldr	r0, [sp, #0]
    b706:	0601      	lsls	r1, r0, #24
    b708:	2900      	cmp	r1, #0
    b70a:	d10a      	bne.n	b722 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x104>
    b70c:	e005      	b.n	b71a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
            if x == 0 && y == 0 { continue; }
    b70e:	e7ff      	b.n	b710 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
    b710:	e7b2      	b.n	b678 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    b712:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
    b714:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    b718:	e008      	b.n	b72c <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    b71a:	2000      	movs	r0, #0
    b71c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    b720:	e004      	b.n	b72c <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    b722:	9800      	ldr	r0, [sp, #0]
    b724:	b2c1      	uxtb	r1, r0
    b726:	2902      	cmp	r1, #2
    b728:	d1f3      	bne.n	b712 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf4>
    b72a:	e7f6      	b.n	b71a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
    b72c:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
    b730:	07c0      	lsls	r0, r0, #31
    b732:	2800      	cmp	r0, #0
    b734:	d105      	bne.n	b742 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x124>
    b736:	e7ff      	b.n	b738 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x11a>
            super::handle_touch(x, y);
    b738:	9802      	ldr	r0, [sp, #8]
    b73a:	9901      	ldr	r1, [sp, #4]
    b73c:	f001 f8f9 	bl	c932 <_ZN3app5chip812handle_touch17habca32c74e5cefadE>
    b740:	e000      	b.n	b744 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x126>
            if action != 0 && action != 2 { continue; }
    b742:	e7e5      	b.n	b710 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
    b744:	e798      	b.n	b678 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    b746:	f24e 1028 	movw	r0, #57640	; 0xe128
    b74a:	f2c0 0001 	movt	r0, #1
    b74e:	220a      	movs	r2, #10
    b750:	9903      	ldr	r1, [sp, #12]
    b752:	f00b fdd1 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b756:	defe      	udf	#254	; 0xfe

0000b758 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
    b758:	b580      	push	{r7, lr}
    b75a:	b0de      	sub	sp, #376	; 0x178
    b75c:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
    b75e:	4669      	mov	r1, sp
    b760:	223f      	movs	r2, #63	; 0x3f
    b762:	600a      	str	r2, [r1, #0]
    b764:	f240 13ba 	movw	r3, #442	; 0x1ba
    b768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b76c:	2115      	movs	r1, #21
    b76e:	f04f 0c00 	mov.w	ip, #0
    b772:	9026      	str	r0, [sp, #152]	; 0x98
    b774:	4608      	mov	r0, r1
    b776:	4661      	mov	r1, ip
    b778:	f000 fb97 	bl	beaa <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>
    b77c:	9025      	str	r0, [sp, #148]	; 0x94
    b77e:	e7ff      	b.n	b780 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x28>
    b780:	f24e 1138 	movw	r1, #57656	; 0xe138
    b784:	f2c0 0101 	movt	r1, #1
    b788:	f24e 134c 	movw	r3, #57676	; 0xe14c
    b78c:	f2c0 0301 	movt	r3, #1
    b790:	2213      	movs	r2, #19
    b792:	9825      	ldr	r0, [sp, #148]	; 0x94
    b794:	f7fd fa94 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    b798:	e7ff      	b.n	b79a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x42>
    b79a:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
    b79e:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
    b7a0:	9024      	str	r0, [sp, #144]	; 0x90
    b7a2:	9123      	str	r1, [sp, #140]	; 0x8c
    b7a4:	f012 f962 	bl	1da6c <__aeabi_memclr>
    b7a8:	a827      	add	r0, sp, #156	; 0x9c
    b7aa:	9924      	ldr	r1, [sp, #144]	; 0x90
    b7ac:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    b7ae:	f012 f961 	bl	1da74 <__aeabi_memcpy>
    b7b2:	e7ff      	b.n	b7b4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5c>
    b7b4:	a927      	add	r1, sp, #156	; 0x9c
    b7b6:	2252      	movs	r2, #82	; 0x52
    b7b8:	9826      	ldr	r0, [sp, #152]	; 0x98
    b7ba:	f012 f95b 	bl	1da74 <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
    b7be:	f240 11ba 	movw	r1, #442	; 0x1ba
    b7c2:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b7c6:	7889      	ldrb	r1, [r1, #2]
    b7c8:	f001 010f 	and.w	r1, r1, #15
    b7cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b7ce:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    b7d2:	2100      	movs	r1, #0
    data.count     = 0;
    b7d4:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
    b7d8:	9150      	str	r1, [sp, #320]	; 0x140
    b7da:	2105      	movs	r1, #5
    b7dc:	9151      	str	r1, [sp, #324]	; 0x144
    b7de:	9950      	ldr	r1, [sp, #320]	; 0x140
    b7e0:	9b51      	ldr	r3, [sp, #324]	; 0x144
    b7e2:	9022      	str	r0, [sp, #136]	; 0x88
    b7e4:	4608      	mov	r0, r1
    b7e6:	4619      	mov	r1, r3
    b7e8:	f006 fa9b 	bl	11d22 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    b7ec:	9021      	str	r0, [sp, #132]	; 0x84
    b7ee:	9120      	str	r1, [sp, #128]	; 0x80
    b7f0:	e7ff      	b.n	b7f2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x9a>
    b7f2:	9821      	ldr	r0, [sp, #132]	; 0x84
    b7f4:	9052      	str	r0, [sp, #328]	; 0x148
    b7f6:	9920      	ldr	r1, [sp, #128]	; 0x80
    b7f8:	9153      	str	r1, [sp, #332]	; 0x14c
    b7fa:	e7ff      	b.n	b7fc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
    b7fc:	a852      	add	r0, sp, #328	; 0x148
    b7fe:	f006 fa05 	bl	11c0c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    b802:	9155      	str	r1, [sp, #340]	; 0x154
    b804:	9054      	str	r0, [sp, #336]	; 0x150
    b806:	e7ff      	b.n	b808 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb0>
    b808:	9854      	ldr	r0, [sp, #336]	; 0x150
    b80a:	2800      	cmp	r0, #0
    b80c:	d001      	beq.n	b812 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xba>
    b80e:	e7ff      	b.n	b810 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb8>
    b810:	e001      	b.n	b816 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xbe>
    b812:	e00d      	b.n	b830 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
    b814:	defe      	udf	#254	; 0xfe
    b816:	9855      	ldr	r0, [sp, #340]	; 0x154
    b818:	9058      	str	r0, [sp, #352]	; 0x160
    b81a:	9059      	str	r0, [sp, #356]	; 0x164
    b81c:	905a      	str	r0, [sp, #360]	; 0x168
    b81e:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b820:	fba1 1200 	umull	r1, r2, r1, r0
    b824:	2a00      	cmp	r2, #0
    b826:	901f      	str	r0, [sp, #124]	; 0x7c
    b828:	911e      	str	r1, [sp, #120]	; 0x78
    b82a:	f040 81c1 	bne.w	bbb0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x458>
    b82e:	e002      	b.n	b836 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xde>
    b830:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
    b832:	b05e      	add	sp, #376	; 0x178
    b834:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b836:	981e      	ldr	r0, [sp, #120]	; 0x78
    b838:	1d41      	adds	r1, r0, #5
    b83a:	460a      	mov	r2, r1
    b83c:	4281      	cmp	r1, r0
    b83e:	921d      	str	r2, [sp, #116]	; 0x74
    b840:	f0c0 81c2 	bcc.w	bbc8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x470>
    b844:	e7ff      	b.n	b846 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xee>
    b846:	981d      	ldr	r0, [sp, #116]	; 0x74
    b848:	283e      	cmp	r0, #62	; 0x3e
    b84a:	f200 81c9 	bhi.w	bbe0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x488>
    b84e:	e7ff      	b.n	b850 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xf8>
    b850:	f240 10ba 	movw	r0, #442	; 0x1ba
    b854:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b858:	991d      	ldr	r1, [sp, #116]	; 0x74
    b85a:	5c40      	ldrb	r0, [r0, r1]
    b85c:	0900      	lsrs	r0, r0, #4
    b85e:	901c      	str	r0, [sp, #112]	; 0x70
    b860:	e7ff      	b.n	b862 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x10a>
    b862:	981c      	ldr	r0, [sp, #112]	; 0x70
    b864:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
    b868:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
    b86a:	290e      	cmp	r1, #14
    b86c:	d80b      	bhi.n	b886 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x12e>
    b86e:	e7ff      	b.n	b870 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x118>
        data.count += 1;
    b870:	9826      	ldr	r0, [sp, #152]	; 0x98
    b872:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
    b876:	3101      	adds	r1, #1
    b878:	b2ca      	uxtb	r2, r1
    b87a:	460b      	mov	r3, r1
    b87c:	428a      	cmp	r2, r1
    b87e:	931b      	str	r3, [sp, #108]	; 0x6c
    b880:	f040 81b7 	bne.w	bbf2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x49a>
    b884:	e001      	b.n	b88a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x132>
        if pointid >= HYN_MAX_ID { break; }
    b886:	e7ff      	b.n	b888 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
    b888:	e7d2      	b.n	b830 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
        data.count += 1;
    b88a:	981b      	ldr	r0, [sp, #108]	; 0x6c
    b88c:	9926      	ldr	r1, [sp, #152]	; 0x98
    b88e:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    b892:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b894:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b896:	fba2 2c03 	umull	r2, ip, r2, r3
    b89a:	f1bc 0f00 	cmp.w	ip, #0
    b89e:	921a      	str	r2, [sp, #104]	; 0x68
    b8a0:	f040 81b3 	bne.w	bc0a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4b2>
    b8a4:	e7ff      	b.n	b8a6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x14e>
    b8a6:	981a      	ldr	r0, [sp, #104]	; 0x68
    b8a8:	1cc1      	adds	r1, r0, #3
    b8aa:	460a      	mov	r2, r1
    b8ac:	4281      	cmp	r1, r0
    b8ae:	9219      	str	r2, [sp, #100]	; 0x64
    b8b0:	f0c0 81b7 	bcc.w	bc22 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4ca>
    b8b4:	e7ff      	b.n	b8b6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x15e>
    b8b6:	9819      	ldr	r0, [sp, #100]	; 0x64
    b8b8:	283e      	cmp	r0, #62	; 0x3e
    b8ba:	f200 81be 	bhi.w	bc3a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4e2>
    b8be:	e7ff      	b.n	b8c0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x168>
    b8c0:	f240 10ba 	movw	r0, #442	; 0x1ba
    b8c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b8c8:	9919      	ldr	r1, [sp, #100]	; 0x64
    b8ca:	5c40      	ldrb	r0, [r0, r1]
    b8cc:	f000 000f 	and.w	r0, r0, #15
    b8d0:	4602      	mov	r2, r0
    b8d2:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
    b8d6:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b8d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b8da:	fba0 0c03 	umull	r0, ip, r0, r3
    b8de:	f1bc 0f00 	cmp.w	ip, #0
    b8e2:	9218      	str	r2, [sp, #96]	; 0x60
    b8e4:	9017      	str	r0, [sp, #92]	; 0x5c
    b8e6:	f040 81b1 	bne.w	bc4c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4f4>
    b8ea:	e7ff      	b.n	b8ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x194>
    b8ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b8ee:	1d01      	adds	r1, r0, #4
    b8f0:	460a      	mov	r2, r1
    b8f2:	4281      	cmp	r1, r0
    b8f4:	9216      	str	r2, [sp, #88]	; 0x58
    b8f6:	f0c0 81b5 	bcc.w	bc64 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x50c>
    b8fa:	e7ff      	b.n	b8fc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1a4>
    b8fc:	9816      	ldr	r0, [sp, #88]	; 0x58
    b8fe:	283e      	cmp	r0, #62	; 0x3e
    b900:	f200 81bc 	bhi.w	bc7c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x524>
    b904:	e7ff      	b.n	b906 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ae>
    b906:	f240 10ba 	movw	r0, #442	; 0x1ba
    b90a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b90e:	9916      	ldr	r1, [sp, #88]	; 0x58
    b910:	5c40      	ldrb	r0, [r0, r1]
    b912:	4602      	mov	r2, r0
    b914:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
    b918:	9818      	ldr	r0, [sp, #96]	; 0x60
    b91a:	0203      	lsls	r3, r0, #8
    b91c:	9215      	str	r2, [sp, #84]	; 0x54
    b91e:	9314      	str	r3, [sp, #80]	; 0x50
    b920:	e7ff      	b.n	b922 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ca>
    b922:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b924:	2809      	cmp	r0, #9
    b926:	f200 81b2 	bhi.w	bc8e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x536>
    b92a:	e7ff      	b.n	b92c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1d4>
    b92c:	9814      	ldr	r0, [sp, #80]	; 0x50
    b92e:	9915      	ldr	r1, [sp, #84]	; 0x54
    b930:	ea40 0201 	orr.w	r2, r0, r1
    b934:	9b26      	ldr	r3, [sp, #152]	; 0x98
    b936:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
    b93a:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
    b93e:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b940:	fba2 2e0c 	umull	r2, lr, r2, ip
    b944:	f1be 0f00 	cmp.w	lr, #0
    b948:	9213      	str	r2, [sp, #76]	; 0x4c
    b94a:	f040 81a9 	bne.w	bca0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x548>
    b94e:	e7ff      	b.n	b950 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1f8>
    b950:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b952:	1d41      	adds	r1, r0, #5
    b954:	460a      	mov	r2, r1
    b956:	4281      	cmp	r1, r0
    b958:	9212      	str	r2, [sp, #72]	; 0x48
    b95a:	f0c0 81ad 	bcc.w	bcb8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x560>
    b95e:	e7ff      	b.n	b960 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x208>
    b960:	9812      	ldr	r0, [sp, #72]	; 0x48
    b962:	283e      	cmp	r0, #62	; 0x3e
    b964:	f200 81b4 	bhi.w	bcd0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x578>
    b968:	e7ff      	b.n	b96a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x212>
    b96a:	f240 10ba 	movw	r0, #442	; 0x1ba
    b96e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b972:	9912      	ldr	r1, [sp, #72]	; 0x48
    b974:	5c40      	ldrb	r0, [r0, r1]
    b976:	f000 000f 	and.w	r0, r0, #15
    b97a:	4602      	mov	r2, r0
    b97c:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
    b980:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b982:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b984:	fba0 0c03 	umull	r0, ip, r0, r3
    b988:	f1bc 0f00 	cmp.w	ip, #0
    b98c:	9211      	str	r2, [sp, #68]	; 0x44
    b98e:	9010      	str	r0, [sp, #64]	; 0x40
    b990:	f040 81a7 	bne.w	bce2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x58a>
    b994:	e7ff      	b.n	b996 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x23e>
    b996:	9810      	ldr	r0, [sp, #64]	; 0x40
    b998:	1d81      	adds	r1, r0, #6
    b99a:	460a      	mov	r2, r1
    b99c:	4281      	cmp	r1, r0
    b99e:	920f      	str	r2, [sp, #60]	; 0x3c
    b9a0:	f0c0 81ab 	bcc.w	bcfa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5a2>
    b9a4:	e7ff      	b.n	b9a6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x24e>
    b9a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b9a8:	283e      	cmp	r0, #62	; 0x3e
    b9aa:	f200 81b2 	bhi.w	bd12 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5ba>
    b9ae:	e7ff      	b.n	b9b0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x258>
    b9b0:	f240 10ba 	movw	r0, #442	; 0x1ba
    b9b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b9b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b9ba:	5c40      	ldrb	r0, [r0, r1]
    b9bc:	4602      	mov	r2, r0
    b9be:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
    b9c2:	9811      	ldr	r0, [sp, #68]	; 0x44
    b9c4:	0203      	lsls	r3, r0, #8
    b9c6:	920e      	str	r2, [sp, #56]	; 0x38
    b9c8:	930d      	str	r3, [sp, #52]	; 0x34
    b9ca:	e7ff      	b.n	b9cc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x274>
    b9cc:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b9ce:	2809      	cmp	r0, #9
    b9d0:	f200 81a8 	bhi.w	bd24 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5cc>
    b9d4:	e7ff      	b.n	b9d6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x27e>
    b9d6:	9826      	ldr	r0, [sp, #152]	; 0x98
    b9d8:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b9da:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b9de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b9e0:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    b9e4:	ea43 0e0c 	orr.w	lr, r3, ip
    b9e8:	f8a2 e002 	strh.w	lr, [r2, #2]
    b9ec:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b9ee:	fba2 2e01 	umull	r2, lr, r2, r1
    b9f2:	f1be 0f00 	cmp.w	lr, #0
    b9f6:	920c      	str	r2, [sp, #48]	; 0x30
    b9f8:	f040 819d 	bne.w	bd36 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5de>
    b9fc:	e7ff      	b.n	b9fe <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2a6>
    b9fe:	980c      	ldr	r0, [sp, #48]	; 0x30
    ba00:	1cc1      	adds	r1, r0, #3
    ba02:	460a      	mov	r2, r1
    ba04:	4281      	cmp	r1, r0
    ba06:	920b      	str	r2, [sp, #44]	; 0x2c
    ba08:	f0c0 81a1 	bcc.w	bd4e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5f6>
    ba0c:	e7ff      	b.n	ba0e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2b6>
    ba0e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ba10:	283e      	cmp	r0, #62	; 0x3e
    ba12:	f200 81a8 	bhi.w	bd66 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x60e>
    ba16:	e7ff      	b.n	ba18 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2c0>
    ba18:	f240 10ba 	movw	r0, #442	; 0x1ba
    ba1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba20:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ba22:	5c40      	ldrb	r0, [r0, r1]
    ba24:	0980      	lsrs	r0, r0, #6
    ba26:	900a      	str	r0, [sp, #40]	; 0x28
    ba28:	e7ff      	b.n	ba2a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2d2>
        data.touches[i].action =
    ba2a:	981f      	ldr	r0, [sp, #124]	; 0x7c
    ba2c:	2809      	cmp	r0, #9
    ba2e:	f200 81a3 	bhi.w	bd78 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x620>
    ba32:	e7ff      	b.n	ba34 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2dc>
    ba34:	9826      	ldr	r0, [sp, #152]	; 0x98
    ba36:	991f      	ldr	r1, [sp, #124]	; 0x7c
    ba38:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    ba3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ba3e:	7113      	strb	r3, [r2, #4]
    ba40:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    ba42:	fba2 2c01 	umull	r2, ip, r2, r1
    ba46:	f1bc 0f00 	cmp.w	ip, #0
    ba4a:	9209      	str	r2, [sp, #36]	; 0x24
    ba4c:	f040 819d 	bne.w	bd8a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x632>
    ba50:	e7ff      	b.n	ba52 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2fa>
    ba52:	9809      	ldr	r0, [sp, #36]	; 0x24
    ba54:	1d41      	adds	r1, r0, #5
    ba56:	460a      	mov	r2, r1
    ba58:	4281      	cmp	r1, r0
    ba5a:	9208      	str	r2, [sp, #32]
    ba5c:	f0c0 81a1 	bcc.w	bda2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x64a>
    ba60:	e7ff      	b.n	ba62 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x30a>
    ba62:	9808      	ldr	r0, [sp, #32]
    ba64:	283e      	cmp	r0, #62	; 0x3e
    ba66:	f200 81a8 	bhi.w	bdba <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x662>
    ba6a:	e7ff      	b.n	ba6c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x314>
    ba6c:	f240 10ba 	movw	r0, #442	; 0x1ba
    ba70:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba74:	9908      	ldr	r1, [sp, #32]
    ba76:	5c40      	ldrb	r0, [r0, r1]
    ba78:	0900      	lsrs	r0, r0, #4
    ba7a:	9007      	str	r0, [sp, #28]
    ba7c:	e7ff      	b.n	ba7e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x326>
        data.touches[i].finger =
    ba7e:	981f      	ldr	r0, [sp, #124]	; 0x7c
    ba80:	2809      	cmp	r0, #9
    ba82:	f200 81a3 	bhi.w	bdcc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x674>
    ba86:	e7ff      	b.n	ba88 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x330>
    ba88:	9826      	ldr	r0, [sp, #152]	; 0x98
    ba8a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    ba8c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    ba90:	9b07      	ldr	r3, [sp, #28]
    ba92:	7153      	strb	r3, [r2, #5]
    ba94:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    ba96:	fba2 2c01 	umull	r2, ip, r2, r1
    ba9a:	f1bc 0f00 	cmp.w	ip, #0
    ba9e:	9206      	str	r2, [sp, #24]
    baa0:	f040 819d 	bne.w	bdde <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x686>
    baa4:	e7ff      	b.n	baa6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x34e>
    baa6:	9806      	ldr	r0, [sp, #24]
    baa8:	1dc1      	adds	r1, r0, #7
    baaa:	460a      	mov	r2, r1
    baac:	4281      	cmp	r1, r0
    baae:	9205      	str	r2, [sp, #20]
    bab0:	f0c0 81a1 	bcc.w	bdf6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x69e>
    bab4:	e7ff      	b.n	bab6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x35e>
    bab6:	9805      	ldr	r0, [sp, #20]
    bab8:	283e      	cmp	r0, #62	; 0x3e
    baba:	f200 81a8 	bhi.w	be0e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6b6>
    babe:	e7ff      	b.n	bac0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x368>
    bac0:	f240 10ba 	movw	r0, #442	; 0x1ba
    bac4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bac8:	9905      	ldr	r1, [sp, #20]
    baca:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
    bacc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    bace:	2a09      	cmp	r2, #9
    bad0:	9004      	str	r0, [sp, #16]
    bad2:	f200 81a5 	bhi.w	be20 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6c8>
    bad6:	e7ff      	b.n	bad8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x380>
    bad8:	9826      	ldr	r0, [sp, #152]	; 0x98
    bada:	991f      	ldr	r1, [sp, #124]	; 0x7c
    badc:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    bae0:	9b04      	ldr	r3, [sp, #16]
    bae2:	7193      	strb	r3, [r2, #6]
    bae4:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    bae6:	fba2 2c01 	umull	r2, ip, r2, r1
    baea:	f1bc 0f00 	cmp.w	ip, #0
    baee:	9203      	str	r2, [sp, #12]
    baf0:	f040 819f 	bne.w	be32 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6da>
    baf4:	e7ff      	b.n	baf6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x39e>
    baf6:	9803      	ldr	r0, [sp, #12]
    baf8:	f100 0108 	add.w	r1, r0, #8
    bafc:	460a      	mov	r2, r1
    bafe:	4281      	cmp	r1, r0
    bb00:	9202      	str	r2, [sp, #8]
    bb02:	f0c0 81a2 	bcc.w	be4a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6f2>
    bb06:	e7ff      	b.n	bb08 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3b0>
    bb08:	9802      	ldr	r0, [sp, #8]
    bb0a:	283e      	cmp	r0, #62	; 0x3e
    bb0c:	f200 81a9 	bhi.w	be62 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x70a>
    bb10:	e7ff      	b.n	bb12 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3ba>
    bb12:	f240 10ba 	movw	r0, #442	; 0x1ba
    bb16:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bb1a:	9902      	ldr	r1, [sp, #8]
    bb1c:	5c40      	ldrb	r0, [r0, r1]
    bb1e:	0900      	lsrs	r0, r0, #4
    bb20:	9001      	str	r0, [sp, #4]
    bb22:	e7ff      	b.n	bb24 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3cc>
        data.touches[i].area =
    bb24:	981f      	ldr	r0, [sp, #124]	; 0x7c
    bb26:	2809      	cmp	r0, #9
    bb28:	f200 81a4 	bhi.w	be74 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x71c>
    bb2c:	e7ff      	b.n	bb2e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3d6>
    bb2e:	9826      	ldr	r0, [sp, #152]	; 0x98
    bb30:	991f      	ldr	r1, [sp, #124]	; 0x7c
    bb32:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    bb36:	9b01      	ldr	r3, [sp, #4]
    bb38:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    bb3a:	290a      	cmp	r1, #10
    bb3c:	d326      	bcc.n	bb8c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x434>
    bb3e:	e1a2      	b.n	be86 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x72e>
    bb40:	2001      	movs	r0, #1
    bb42:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    bb46:	e009      	b.n	bb5c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
    bb48:	2000      	movs	r0, #0
    bb4a:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    bb4e:	e005      	b.n	bb5c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
            && (data.point_num == 0) {
    bb50:	9826      	ldr	r0, [sp, #152]	; 0x98
    bb52:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    bb56:	2900      	cmp	r1, #0
    bb58:	d0f2      	beq.n	bb40 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3e8>
    bb5a:	e7f5      	b.n	bb48 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    bb5c:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
    bb60:	07c0      	lsls	r0, r0, #31
    bb62:	2800      	cmp	r0, #0
    bb64:	d123      	bne.n	bbae <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x456>
    bb66:	e021      	b.n	bbac <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x454>
    bb68:	2001      	movs	r0, #1
    bb6a:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    bb6e:	e007      	b.n	bb80 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    bb70:	2000      	movs	r0, #0
    bb72:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    bb76:	e003      	b.n	bb80 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    bb78:	981f      	ldr	r0, [sp, #124]	; 0x7c
    bb7a:	280a      	cmp	r0, #10
    bb7c:	d30e      	bcc.n	bb9c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x444>
    bb7e:	e18b      	b.n	be98 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x740>
    bb80:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
    bb84:	07c0      	lsls	r0, r0, #31
    bb86:	2800      	cmp	r0, #0
    bb88:	d1e2      	bne.n	bb50 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f8>
    bb8a:	e7dd      	b.n	bb48 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    bb8c:	9826      	ldr	r0, [sp, #152]	; 0x98
    bb8e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    bb90:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    bb94:	7912      	ldrb	r2, [r2, #4]
    bb96:	2a00      	cmp	r2, #0
    bb98:	d0e6      	beq.n	bb68 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    bb9a:	e7ed      	b.n	bb78 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x420>
    bb9c:	9826      	ldr	r0, [sp, #152]	; 0x98
    bb9e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    bba0:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    bba4:	7912      	ldrb	r2, [r2, #4]
    bba6:	2a02      	cmp	r2, #2
    bba8:	d0de      	beq.n	bb68 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    bbaa:	e7e1      	b.n	bb70 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
    bbac:	e626      	b.n	b7fc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
            break;
    bbae:	e66b      	b.n	b888 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    bbb0:	f24e 1070 	movw	r0, #57712	; 0xe170
    bbb4:	f2c0 0001 	movt	r0, #1
    bbb8:	f24e 125c 	movw	r2, #57692	; 0xe15c
    bbbc:	f2c0 0201 	movt	r2, #1
    bbc0:	2121      	movs	r1, #33	; 0x21
    bbc2:	f00b fb83 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bbc6:	defe      	udf	#254	; 0xfe
    bbc8:	f24e 10b0 	movw	r0, #57776	; 0xe1b0
    bbcc:	f2c0 0001 	movt	r0, #1
    bbd0:	f24e 1294 	movw	r2, #57748	; 0xe194
    bbd4:	f2c0 0201 	movt	r2, #1
    bbd8:	211c      	movs	r1, #28
    bbda:	f00b fb77 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bbde:	defe      	udf	#254	; 0xfe
    bbe0:	f24e 10cc 	movw	r0, #57804	; 0xe1cc
    bbe4:	f2c0 0001 	movt	r0, #1
    bbe8:	223f      	movs	r2, #63	; 0x3f
    bbea:	991d      	ldr	r1, [sp, #116]	; 0x74
    bbec:	f00b fb84 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bbf0:	defe      	udf	#254	; 0xfe
        data.count += 1;
    bbf2:	f24e 10b0 	movw	r0, #57776	; 0xe1b0
    bbf6:	f2c0 0001 	movt	r0, #1
    bbfa:	f24e 12dc 	movw	r2, #57820	; 0xe1dc
    bbfe:	f2c0 0201 	movt	r2, #1
    bc02:	211c      	movs	r1, #28
    bc04:	f00b fb62 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bc08:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    bc0a:	f24e 1070 	movw	r0, #57712	; 0xe170
    bc0e:	f2c0 0001 	movt	r0, #1
    bc12:	f24e 12ec 	movw	r2, #57836	; 0xe1ec
    bc16:	f2c0 0201 	movt	r2, #1
    bc1a:	2121      	movs	r1, #33	; 0x21
    bc1c:	f00b fb56 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bc20:	defe      	udf	#254	; 0xfe
    bc22:	f24e 10b0 	movw	r0, #57776	; 0xe1b0
    bc26:	f2c0 0001 	movt	r0, #1
    bc2a:	f24e 12fc 	movw	r2, #57852	; 0xe1fc
    bc2e:	f2c0 0201 	movt	r2, #1
    bc32:	211c      	movs	r1, #28
    bc34:	f00b fb4a 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bc38:	defe      	udf	#254	; 0xfe
    bc3a:	f24e 200c 	movw	r0, #57868	; 0xe20c
    bc3e:	f2c0 0001 	movt	r0, #1
    bc42:	223f      	movs	r2, #63	; 0x3f
    bc44:	9919      	ldr	r1, [sp, #100]	; 0x64
    bc46:	f00b fb57 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bc4a:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    bc4c:	f24e 1070 	movw	r0, #57712	; 0xe170
    bc50:	f2c0 0001 	movt	r0, #1
    bc54:	f24e 221c 	movw	r2, #57884	; 0xe21c
    bc58:	f2c0 0201 	movt	r2, #1
    bc5c:	2121      	movs	r1, #33	; 0x21
    bc5e:	f00b fb35 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bc62:	defe      	udf	#254	; 0xfe
    bc64:	f24e 10b0 	movw	r0, #57776	; 0xe1b0
    bc68:	f2c0 0001 	movt	r0, #1
    bc6c:	f24e 222c 	movw	r2, #57900	; 0xe22c
    bc70:	f2c0 0201 	movt	r2, #1
    bc74:	211c      	movs	r1, #28
    bc76:	f00b fb29 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bc7a:	defe      	udf	#254	; 0xfe
    bc7c:	f24e 203c 	movw	r0, #57916	; 0xe23c
    bc80:	f2c0 0001 	movt	r0, #1
    bc84:	223f      	movs	r2, #63	; 0x3f
    bc86:	9916      	ldr	r1, [sp, #88]	; 0x58
    bc88:	f00b fb36 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bc8c:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
    bc8e:	f24e 204c 	movw	r0, #57932	; 0xe24c
    bc92:	f2c0 0001 	movt	r0, #1
    bc96:	220a      	movs	r2, #10
    bc98:	991f      	ldr	r1, [sp, #124]	; 0x7c
    bc9a:	f00b fb2d 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bc9e:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    bca0:	f24e 1070 	movw	r0, #57712	; 0xe170
    bca4:	f2c0 0001 	movt	r0, #1
    bca8:	f24e 225c 	movw	r2, #57948	; 0xe25c
    bcac:	f2c0 0201 	movt	r2, #1
    bcb0:	2121      	movs	r1, #33	; 0x21
    bcb2:	f00b fb0b 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bcb6:	defe      	udf	#254	; 0xfe
    bcb8:	f24e 10b0 	movw	r0, #57776	; 0xe1b0
    bcbc:	f2c0 0001 	movt	r0, #1
    bcc0:	f24e 226c 	movw	r2, #57964	; 0xe26c
    bcc4:	f2c0 0201 	movt	r2, #1
    bcc8:	211c      	movs	r1, #28
    bcca:	f00b faff 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bcce:	defe      	udf	#254	; 0xfe
    bcd0:	f24e 207c 	movw	r0, #57980	; 0xe27c
    bcd4:	f2c0 0001 	movt	r0, #1
    bcd8:	223f      	movs	r2, #63	; 0x3f
    bcda:	9912      	ldr	r1, [sp, #72]	; 0x48
    bcdc:	f00b fb0c 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bce0:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    bce2:	f24e 1070 	movw	r0, #57712	; 0xe170
    bce6:	f2c0 0001 	movt	r0, #1
    bcea:	f24e 228c 	movw	r2, #57996	; 0xe28c
    bcee:	f2c0 0201 	movt	r2, #1
    bcf2:	2121      	movs	r1, #33	; 0x21
    bcf4:	f00b faea 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bcf8:	defe      	udf	#254	; 0xfe
    bcfa:	f24e 10b0 	movw	r0, #57776	; 0xe1b0
    bcfe:	f2c0 0001 	movt	r0, #1
    bd02:	f24e 229c 	movw	r2, #58012	; 0xe29c
    bd06:	f2c0 0201 	movt	r2, #1
    bd0a:	211c      	movs	r1, #28
    bd0c:	f00b fade 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd10:	defe      	udf	#254	; 0xfe
    bd12:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
    bd16:	f2c0 0001 	movt	r0, #1
    bd1a:	223f      	movs	r2, #63	; 0x3f
    bd1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    bd1e:	f00b faeb 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bd22:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
    bd24:	f24e 20bc 	movw	r0, #58044	; 0xe2bc
    bd28:	f2c0 0001 	movt	r0, #1
    bd2c:	220a      	movs	r2, #10
    bd2e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    bd30:	f00b fae2 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bd34:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    bd36:	f24e 1070 	movw	r0, #57712	; 0xe170
    bd3a:	f2c0 0001 	movt	r0, #1
    bd3e:	f24e 22cc 	movw	r2, #58060	; 0xe2cc
    bd42:	f2c0 0201 	movt	r2, #1
    bd46:	2121      	movs	r1, #33	; 0x21
    bd48:	f00b fac0 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd4c:	defe      	udf	#254	; 0xfe
    bd4e:	f24e 10b0 	movw	r0, #57776	; 0xe1b0
    bd52:	f2c0 0001 	movt	r0, #1
    bd56:	f24e 22dc 	movw	r2, #58076	; 0xe2dc
    bd5a:	f2c0 0201 	movt	r2, #1
    bd5e:	211c      	movs	r1, #28
    bd60:	f00b fab4 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd64:	defe      	udf	#254	; 0xfe
    bd66:	f24e 20ec 	movw	r0, #58092	; 0xe2ec
    bd6a:	f2c0 0001 	movt	r0, #1
    bd6e:	223f      	movs	r2, #63	; 0x3f
    bd70:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bd72:	f00b fac1 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bd76:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
    bd78:	f24e 20fc 	movw	r0, #58108	; 0xe2fc
    bd7c:	f2c0 0001 	movt	r0, #1
    bd80:	220a      	movs	r2, #10
    bd82:	991f      	ldr	r1, [sp, #124]	; 0x7c
    bd84:	f00b fab8 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bd88:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    bd8a:	f24e 1070 	movw	r0, #57712	; 0xe170
    bd8e:	f2c0 0001 	movt	r0, #1
    bd92:	f24e 320c 	movw	r2, #58124	; 0xe30c
    bd96:	f2c0 0201 	movt	r2, #1
    bd9a:	2121      	movs	r1, #33	; 0x21
    bd9c:	f00b fa96 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bda0:	defe      	udf	#254	; 0xfe
    bda2:	f24e 10b0 	movw	r0, #57776	; 0xe1b0
    bda6:	f2c0 0001 	movt	r0, #1
    bdaa:	f24e 321c 	movw	r2, #58140	; 0xe31c
    bdae:	f2c0 0201 	movt	r2, #1
    bdb2:	211c      	movs	r1, #28
    bdb4:	f00b fa8a 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bdb8:	defe      	udf	#254	; 0xfe
    bdba:	f24e 302c 	movw	r0, #58156	; 0xe32c
    bdbe:	f2c0 0001 	movt	r0, #1
    bdc2:	223f      	movs	r2, #63	; 0x3f
    bdc4:	9908      	ldr	r1, [sp, #32]
    bdc6:	f00b fa97 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bdca:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
    bdcc:	f24e 303c 	movw	r0, #58172	; 0xe33c
    bdd0:	f2c0 0001 	movt	r0, #1
    bdd4:	220a      	movs	r2, #10
    bdd6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    bdd8:	f00b fa8e 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bddc:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    bdde:	f24e 1070 	movw	r0, #57712	; 0xe170
    bde2:	f2c0 0001 	movt	r0, #1
    bde6:	f24e 324c 	movw	r2, #58188	; 0xe34c
    bdea:	f2c0 0201 	movt	r2, #1
    bdee:	2121      	movs	r1, #33	; 0x21
    bdf0:	f00b fa6c 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bdf4:	defe      	udf	#254	; 0xfe
    bdf6:	f24e 10b0 	movw	r0, #57776	; 0xe1b0
    bdfa:	f2c0 0001 	movt	r0, #1
    bdfe:	f24e 325c 	movw	r2, #58204	; 0xe35c
    be02:	f2c0 0201 	movt	r2, #1
    be06:	211c      	movs	r1, #28
    be08:	f00b fa60 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    be0c:	defe      	udf	#254	; 0xfe
    be0e:	f24e 306c 	movw	r0, #58220	; 0xe36c
    be12:	f2c0 0001 	movt	r0, #1
    be16:	223f      	movs	r2, #63	; 0x3f
    be18:	9905      	ldr	r1, [sp, #20]
    be1a:	f00b fa6d 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    be1e:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
    be20:	f24e 307c 	movw	r0, #58236	; 0xe37c
    be24:	f2c0 0001 	movt	r0, #1
    be28:	220a      	movs	r2, #10
    be2a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    be2c:	f00b fa64 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    be30:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    be32:	f24e 1070 	movw	r0, #57712	; 0xe170
    be36:	f2c0 0001 	movt	r0, #1
    be3a:	f24e 328c 	movw	r2, #58252	; 0xe38c
    be3e:	f2c0 0201 	movt	r2, #1
    be42:	2121      	movs	r1, #33	; 0x21
    be44:	f00b fa42 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    be48:	defe      	udf	#254	; 0xfe
    be4a:	f24e 10b0 	movw	r0, #57776	; 0xe1b0
    be4e:	f2c0 0001 	movt	r0, #1
    be52:	f24e 329c 	movw	r2, #58268	; 0xe39c
    be56:	f2c0 0201 	movt	r2, #1
    be5a:	211c      	movs	r1, #28
    be5c:	f00b fa36 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    be60:	defe      	udf	#254	; 0xfe
    be62:	f24e 30ac 	movw	r0, #58284	; 0xe3ac
    be66:	f2c0 0001 	movt	r0, #1
    be6a:	223f      	movs	r2, #63	; 0x3f
    be6c:	9902      	ldr	r1, [sp, #8]
    be6e:	f00b fa43 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    be72:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
    be74:	f24e 30bc 	movw	r0, #58300	; 0xe3bc
    be78:	f2c0 0001 	movt	r0, #1
    be7c:	220a      	movs	r2, #10
    be7e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    be80:	f00b fa3a 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    be84:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    be86:	f24e 30cc 	movw	r0, #58316	; 0xe3cc
    be8a:	f2c0 0001 	movt	r0, #1
    be8e:	220a      	movs	r2, #10
    be90:	991f      	ldr	r1, [sp, #124]	; 0x7c
    be92:	f00b fa31 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    be96:	defe      	udf	#254	; 0xfe
    be98:	f24e 30dc 	movw	r0, #58332	; 0xe3dc
    be9c:	f2c0 0001 	movt	r0, #1
    bea0:	220a      	movs	r2, #10
    bea2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    bea4:	f00b fa28 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bea8:	defe      	udf	#254	; 0xfe

0000beaa <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
    beaa:	b5b0      	push	{r4, r5, r7, lr}
    beac:	b094      	sub	sp, #80	; 0x50
    beae:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
    beb2:	4696      	mov	lr, r2
    beb4:	460c      	mov	r4, r1
    beb6:	4605      	mov	r5, r0
    beb8:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    bebc:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
    bec0:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    bec4:	9310      	str	r3, [sp, #64]	; 0x40
    bec6:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    beca:	4618      	mov	r0, r3
    becc:	4661      	mov	r1, ip
    bece:	930d      	str	r3, [sp, #52]	; 0x34
    bed0:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    bed4:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    bed8:	940a      	str	r4, [sp, #40]	; 0x28
    beda:	9509      	str	r5, [sp, #36]	; 0x24
    bedc:	f005 fefa 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    bee0:	9008      	str	r0, [sp, #32]
    bee2:	e7ff      	b.n	bee4 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x3a>
    bee4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bee6:	b2c1      	uxtb	r1, r0
    bee8:	9a08      	ldr	r2, [sp, #32]
    beea:	428a      	cmp	r2, r1
    beec:	d30d      	bcc.n	bf0a <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x60>
    beee:	e7ff      	b.n	bef0 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    bef0:	980a      	ldr	r0, [sp, #40]	; 0x28
    bef2:	b2c1      	uxtb	r1, r0
    bef4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bef6:	fa51 f182 	uxtab	r1, r1, r2
    befa:	b2cb      	uxtb	r3, r1
    befc:	468c      	mov	ip, r1
    befe:	428b      	cmp	r3, r1
    bf00:	f8cd c01c 	str.w	ip, [sp, #28]
    bf04:	f040 8092 	bne.w	c02c <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x182>
    bf08:	e00b      	b.n	bf22 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    bf0a:	f24e 30ec 	movw	r0, #58348	; 0xe3ec
    bf0e:	f2c0 0001 	movt	r0, #1
    bf12:	f24e 32f4 	movw	r2, #58356	; 0xe3f4
    bf16:	f2c0 0201 	movt	r2, #1
    bf1a:	2107      	movs	r1, #7
    bf1c:	f00b f9d6 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf20:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    bf22:	9807      	ldr	r0, [sp, #28]
    bf24:	b241      	sxtb	r1, r0
    bf26:	2900      	cmp	r1, #0
    bf28:	d411      	bmi.n	bf4e <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xa4>
    bf2a:	e7ff      	b.n	bf2c <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
    bf2c:	f240 2014 	movw	r0, #532	; 0x214
    bf30:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bf34:	990a      	ldr	r1, [sp, #40]	; 0x28
    bf36:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
    bf38:	f240 220c 	movw	r2, #524	; 0x20c
    bf3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf40:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bf42:	7013      	strb	r3, [r2, #0]
    bf44:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    bf46:	f005 fec5 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    bf4a:	9006      	str	r0, [sp, #24]
    bf4c:	e00b      	b.n	bf66 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    bf4e:	f24e 00f0 	movw	r0, #57584	; 0xe0f0
    bf52:	f2c0 0001 	movt	r0, #1
    bf56:	f24e 4214 	movw	r2, #58388	; 0xe414
    bf5a:	f2c0 0201 	movt	r2, #1
    bf5e:	2108      	movs	r1, #8
    bf60:	f00b f9b4 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf64:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    bf66:	f240 200c 	movw	r0, #524	; 0x20c
    bf6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bf6e:	9906      	ldr	r1, [sp, #24]
    bf70:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
    bf72:	f240 2014 	movw	r0, #532	; 0x214
    bf76:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bf7a:	2101      	movs	r1, #1
    bf7c:	f005 fe93 	bl	11ca6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    bf80:	9005      	str	r0, [sp, #20]
    bf82:	e7ff      	b.n	bf84 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xda>
    bf84:	f240 200c 	movw	r0, #524	; 0x20c
    bf88:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bf8c:	9905      	ldr	r1, [sp, #20]
    bf8e:	6041      	str	r1, [r0, #4]
    bf90:	2201      	movs	r2, #1
    bf92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    bf96:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
    bf9a:	9004      	str	r0, [sp, #16]
    bf9c:	4610      	mov	r0, r2
    bf9e:	9904      	ldr	r1, [sp, #16]
    bfa0:	461a      	mov	r2, r3
    bfa2:	4663      	mov	r3, ip
    bfa4:	f00d fc80 	bl	198a8 <hal_i2c_master_write>
    bfa8:	9012      	str	r0, [sp, #72]	; 0x48
    bfaa:	e7ff      	b.n	bfac <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
    bfac:	f240 2014 	movw	r0, #532	; 0x214
    bfb0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bfb4:	2100      	movs	r1, #0
    bfb6:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
    bfb8:	f240 200c 	movw	r0, #524	; 0x20c
    bfbc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bfc0:	9909      	ldr	r1, [sp, #36]	; 0x24
    bfc2:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
    bfc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bfc6:	b2d3      	uxtb	r3, r2
    bfc8:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
    bfca:	980d      	ldr	r0, [sp, #52]	; 0x34
    bfcc:	990c      	ldr	r1, [sp, #48]	; 0x30
    bfce:	f005 fe6a 	bl	11ca6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    bfd2:	9003      	str	r0, [sp, #12]
    bfd4:	e7ff      	b.n	bfd6 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x12c>
    bfd6:	f240 200c 	movw	r0, #524	; 0x20c
    bfda:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bfde:	9903      	ldr	r1, [sp, #12]
    bfe0:	6041      	str	r1, [r0, #4]
    bfe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bfe6:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
    bfe8:	9002      	str	r0, [sp, #8]
    bfea:	4618      	mov	r0, r3
    bfec:	9902      	ldr	r1, [sp, #8]
    bfee:	f00d fcef 	bl	199d0 <hal_i2c_master_read>
    bff2:	4601      	mov	r1, r0
    bff4:	9013      	str	r0, [sp, #76]	; 0x4c
    bff6:	9101      	str	r1, [sp, #4]
    bff8:	e7ff      	b.n	bffa <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
    bffa:	9801      	ldr	r0, [sp, #4]
    bffc:	2804      	cmp	r0, #4
    bffe:	d005      	beq.n	c00c <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x162>
    c000:	e7ff      	b.n	c002 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x158>
    c002:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
    c004:	900e      	str	r0, [sp, #56]	; 0x38
    c006:	2001      	movs	r0, #1
    c008:	900e      	str	r0, [sp, #56]	; 0x38
}
    c00a:	e00c      	b.n	c026 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
        console::print("i2c fail\n"); ////
    c00c:	f24e 4024 	movw	r0, #58404	; 0xe424
    c010:	f2c0 0001 	movt	r0, #1
    c014:	2109      	movs	r1, #9
    c016:	f7fd f8ce 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c01a:	e7ff      	b.n	c01c <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x172>
    c01c:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
    c01e:	900e      	str	r0, [sp, #56]	; 0x38
    c020:	2001      	movs	r0, #1
    c022:	900e      	str	r0, [sp, #56]	; 0x38
    c024:	e7ff      	b.n	c026 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
}
    c026:	980e      	ldr	r0, [sp, #56]	; 0x38
    c028:	b014      	add	sp, #80	; 0x50
    c02a:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    c02c:	f24e 10b0 	movw	r0, #57776	; 0xe1b0
    c030:	f2c0 0001 	movt	r0, #1
    c034:	f24e 4204 	movw	r2, #58372	; 0xe404
    c038:	f2c0 0201 	movt	r2, #1
    c03c:	211c      	movs	r1, #28
    c03e:	f00b f945 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c042:	defe      	udf	#254	; 0xfe

0000c044 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17h62f022ff61df2a71E>:
    pub const fn new() -> Self {
    c044:	b580      	push	{r7, lr}
    c046:	b08a      	sub	sp, #40	; 0x28
            buffer: MaybeUninit::uninit(),
    c048:	9001      	str	r0, [sp, #4]
    c04a:	e7ff      	b.n	c04c <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17h62f022ff61df2a71E+0x8>
        Self {
    c04c:	9801      	ldr	r0, [sp, #4]
    c04e:	3004      	adds	r0, #4
    c050:	a902      	add	r1, sp, #8
    c052:	221e      	movs	r2, #30
    c054:	f011 fd0e 	bl	1da74 <__aeabi_memcpy>
    c058:	2100      	movs	r1, #0
    c05a:	9a01      	ldr	r2, [sp, #4]
    c05c:	6011      	str	r1, [r2, #0]
    }
    c05e:	b00a      	add	sp, #40	; 0x28
    c060:	bd80      	pop	{r7, pc}

0000c062 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h9e50c50e4b2df321E>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
    c062:	b580      	push	{r7, lr}
    c064:	b088      	sub	sp, #32
    c066:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
    c068:	1d01      	adds	r1, r0, #4
    c06a:	9106      	str	r1, [sp, #24]
    c06c:	9107      	str	r1, [sp, #28]
    c06e:	9004      	str	r0, [sp, #16]
    c070:	9103      	str	r1, [sp, #12]
    c072:	e7ff      	b.n	c074 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h9e50c50e4b2df321E+0x12>
    c074:	9804      	ldr	r0, [sp, #16]
    c076:	6801      	ldr	r1, [r0, #0]
    c078:	9803      	ldr	r0, [sp, #12]
    c07a:	f7fe fd20 	bl	aabe <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
    c07e:	9002      	str	r0, [sp, #8]
    c080:	9101      	str	r1, [sp, #4]
    c082:	e7ff      	b.n	c084 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h9e50c50e4b2df321E+0x22>
    }
    c084:	9802      	ldr	r0, [sp, #8]
    c086:	9901      	ldr	r1, [sp, #4]
    c088:	b008      	add	sp, #32
    c08a:	bd80      	pop	{r7, pc}

0000c08c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h60abe3d598a93563E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
    c08c:	b580      	push	{r7, lr}
    c08e:	b08a      	sub	sp, #40	; 0x28
    c090:	460a      	mov	r2, r1
    c092:	9006      	str	r0, [sp, #24]
    c094:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
    c098:	1d01      	adds	r1, r0, #4
    c09a:	9108      	str	r1, [sp, #32]
    c09c:	9109      	str	r1, [sp, #36]	; 0x24
    c09e:	9005      	str	r0, [sp, #20]
    c0a0:	9204      	str	r2, [sp, #16]
    c0a2:	9103      	str	r1, [sp, #12]
    c0a4:	e7ff      	b.n	c0a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h60abe3d598a93563E+0x1a>
            .add(self.len)
    c0a6:	9805      	ldr	r0, [sp, #20]
    c0a8:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
    c0aa:	9803      	ldr	r0, [sp, #12]
    c0ac:	f7fe fe24 	bl	acf8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
    c0b0:	9002      	str	r0, [sp, #8]
    c0b2:	e7ff      	b.n	c0b4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h60abe3d598a93563E+0x28>
    c0b4:	9802      	ldr	r0, [sp, #8]
    c0b6:	9904      	ldr	r1, [sp, #16]
    c0b8:	f7fe fe29 	bl	ad0e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
    c0bc:	e7ff      	b.n	c0be <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h60abe3d598a93563E+0x32>
        self.len += 1;
    c0be:	9805      	ldr	r0, [sp, #20]
    c0c0:	6801      	ldr	r1, [r0, #0]
    c0c2:	1c4a      	adds	r2, r1, #1
    c0c4:	4613      	mov	r3, r2
    c0c6:	428a      	cmp	r2, r1
    c0c8:	9301      	str	r3, [sp, #4]
    c0ca:	d305      	bcc.n	c0d8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h60abe3d598a93563E+0x4c>
    c0cc:	e7ff      	b.n	c0ce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h60abe3d598a93563E+0x42>
    c0ce:	9801      	ldr	r0, [sp, #4]
    c0d0:	9905      	ldr	r1, [sp, #20]
    c0d2:	6008      	str	r0, [r1, #0]
    }
    c0d4:	b00a      	add	sp, #40	; 0x28
    c0d6:	bd80      	pop	{r7, pc}
        self.len += 1;
    c0d8:	f24e 40a0 	movw	r0, #58528	; 0xe4a0
    c0dc:	f2c0 0001 	movt	r0, #1
    c0e0:	f24e 4284 	movw	r2, #58500	; 0xe484
    c0e4:	f2c0 0201 	movt	r2, #1
    c0e8:	211c      	movs	r1, #28
    c0ea:	f00b f8ef 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c0ee:	defe      	udf	#254	; 0xfe

0000c0f0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
    c0f0:	b580      	push	{r7, lr}
    c0f2:	b094      	sub	sp, #80	; 0x50
    c0f4:	900e      	str	r0, [sp, #56]	; 0x38
    c0f6:	910f      	str	r1, [sp, #60]	; 0x3c
    c0f8:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
    c0fa:	6803      	ldr	r3, [r0, #0]
    c0fc:	9009      	str	r0, [sp, #36]	; 0x24
    c0fe:	4608      	mov	r0, r1
    c100:	9108      	str	r1, [sp, #32]
    c102:	4611      	mov	r1, r2
    c104:	9207      	str	r2, [sp, #28]
    c106:	9306      	str	r3, [sp, #24]
    c108:	f7fe fcfd 	bl	ab06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
    c10c:	9005      	str	r0, [sp, #20]
    c10e:	e7ff      	b.n	c110 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E+0x20>
    c110:	9806      	ldr	r0, [sp, #24]
    c112:	9905      	ldr	r1, [sp, #20]
    c114:	1842      	adds	r2, r0, r1
    c116:	4613      	mov	r3, r2
    c118:	4282      	cmp	r2, r0
    c11a:	9304      	str	r3, [sp, #16]
    c11c:	d33f      	bcc.n	c19e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E+0xae>
    c11e:	e7ff      	b.n	c120 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E+0x30>
    c120:	9809      	ldr	r0, [sp, #36]	; 0x24
    c122:	f000 f85d 	bl	c1e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h74d2e0a17f4f0219E>
    c126:	9003      	str	r0, [sp, #12]
    c128:	e7ff      	b.n	c12a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E+0x3a>
    c12a:	9804      	ldr	r0, [sp, #16]
    c12c:	9903      	ldr	r1, [sp, #12]
    c12e:	4288      	cmp	r0, r1
    c130:	d807      	bhi.n	c142 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E+0x52>
    c132:	e7ff      	b.n	c134 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E+0x44>
            for elem in other {
    c134:	9808      	ldr	r0, [sp, #32]
    c136:	9907      	ldr	r1, [sp, #28]
    c138:	f7fe fd59 	bl	abee <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
    c13c:	9002      	str	r0, [sp, #8]
    c13e:	9101      	str	r1, [sp, #4]
    c140:	e003      	b.n	c14a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E+0x5a>
    c142:	2001      	movs	r0, #1
            Err(())
    c144:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
    c148:	e025      	b.n	c196 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E+0xa6>
            for elem in other {
    c14a:	9802      	ldr	r0, [sp, #8]
    c14c:	900b      	str	r0, [sp, #44]	; 0x2c
    c14e:	9901      	ldr	r1, [sp, #4]
    c150:	910c      	str	r1, [sp, #48]	; 0x30
    c152:	e7ff      	b.n	c154 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E+0x64>
    c154:	a80b      	add	r0, sp, #44	; 0x2c
    c156:	f7fe fd6c 	bl	ac32 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
    c15a:	900d      	str	r0, [sp, #52]	; 0x34
    c15c:	e7ff      	b.n	c15e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E+0x6e>
    c15e:	980d      	ldr	r0, [sp, #52]	; 0x34
    c160:	2800      	cmp	r0, #0
    c162:	4601      	mov	r1, r0
    c164:	bf18      	it	ne
    c166:	2101      	movne	r1, #1
    c168:	2800      	cmp	r0, #0
    c16a:	d001      	beq.n	c170 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E+0x80>
    c16c:	e7ff      	b.n	c16e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E+0x7e>
    c16e:	e004      	b.n	c17a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E+0x8a>
    c170:	2000      	movs	r0, #0
            Ok(())
    c172:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
    c176:	e00e      	b.n	c196 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E+0xa6>
            for elem in other {
    c178:	defe      	udf	#254	; 0xfe
    c17a:	980d      	ldr	r0, [sp, #52]	; 0x34
    c17c:	9011      	str	r0, [sp, #68]	; 0x44
    c17e:	9012      	str	r0, [sp, #72]	; 0x48
    c180:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
    c182:	f004 fef4 	bl	10f6e <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17h830ef09e153bc6fbE>
    c186:	9000      	str	r0, [sp, #0]
    c188:	e7ff      	b.n	c18a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E+0x9a>
    c18a:	9809      	ldr	r0, [sp, #36]	; 0x24
    c18c:	9900      	ldr	r1, [sp, #0]
    c18e:	f7ff ff7d 	bl	c08c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h60abe3d598a93563E>
    c192:	e7ff      	b.n	c194 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E+0xa4>
            for elem in other {
    c194:	e7de      	b.n	c154 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h5a228ad7f125e7e4E+0x64>
    }
    c196:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
    c19a:	b014      	add	sp, #80	; 0x50
    c19c:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
    c19e:	f24e 40a0 	movw	r0, #58528	; 0xe4a0
    c1a2:	f2c0 0001 	movt	r0, #1
    c1a6:	f24e 42bc 	movw	r2, #58556	; 0xe4bc
    c1aa:	f2c0 0201 	movt	r2, #1
    c1ae:	211c      	movs	r1, #28
    c1b0:	f00b f88c 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c1b4:	defe      	udf	#254	; 0xfe

0000c1b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h447f56c10c9a295aE>:
    pub(crate) fn as_slice(&self) -> &[T] {
    c1b6:	b580      	push	{r7, lr}
    c1b8:	b088      	sub	sp, #32
    c1ba:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
    c1bc:	1d01      	adds	r1, r0, #4
    c1be:	9106      	str	r1, [sp, #24]
    c1c0:	9107      	str	r1, [sp, #28]
    c1c2:	9004      	str	r0, [sp, #16]
    c1c4:	9103      	str	r1, [sp, #12]
    c1c6:	e7ff      	b.n	c1c8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h447f56c10c9a295aE+0x12>
    c1c8:	9804      	ldr	r0, [sp, #16]
    c1ca:	6801      	ldr	r1, [r0, #0]
    c1cc:	9803      	ldr	r0, [sp, #12]
    c1ce:	f7fe fc69 	bl	aaa4 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
    c1d2:	9002      	str	r0, [sp, #8]
    c1d4:	9101      	str	r1, [sp, #4]
    c1d6:	e7ff      	b.n	c1d8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h447f56c10c9a295aE+0x22>
    }
    c1d8:	9802      	ldr	r0, [sp, #8]
    c1da:	9901      	ldr	r1, [sp, #4]
    c1dc:	b008      	add	sp, #32
    c1de:	bd80      	pop	{r7, pc}

0000c1e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h74d2e0a17f4f0219E>:
    pub(crate) fn capacity(&self) -> usize {
    c1e0:	b580      	push	{r7, lr}
    c1e2:	b082      	sub	sp, #8
    c1e4:	9001      	str	r0, [sp, #4]
        N::to_usize()
    c1e6:	f005 f892 	bl	1130e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h16ab7cdbe914a27fE>
    c1ea:	9000      	str	r0, [sp, #0]
    c1ec:	e7ff      	b.n	c1ee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h74d2e0a17f4f0219E+0xe>
    }
    c1ee:	9800      	ldr	r0, [sp, #0]
    c1f0:	b002      	add	sp, #8
    c1f2:	bd80      	pop	{r7, pc}

0000c1f4 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>:

/// Size of the stack (in 4-byte units). Previously `OS_STACK_ALIGN(256)`  
const CHIP8_TASK_STACK_SIZE: usize = 4096;  //  Must be 4096 and above because CHIP8 Emulator requires substantial stack space

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    c1f4:	b510      	push	{r4, lr}
    c1f6:	b0aa      	sub	sp, #168	; 0xa8
    console::print("Rust CHIP8\n"); console::flush();
    c1f8:	f24e 40cc 	movw	r0, #58572	; 0xe4cc
    c1fc:	f2c0 0001 	movt	r0, #1
    c200:	210b      	movs	r1, #11
    c202:	f7fc ffd8 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c206:	e7ff      	b.n	c208 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x14>
    c208:	f7fd f81b 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    c20c:	e7ff      	b.n	c20e <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x1a>
    c20e:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    c210:	900d      	str	r0, [sp, #52]	; 0x34
    c212:	990d      	ldr	r1, [sp, #52]	; 0x34
    c214:	f005 fa85 	bl	11722 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    c218:	900c      	str	r0, [sp, #48]	; 0x30
    c21a:	910b      	str	r1, [sp, #44]	; 0x2c
    c21c:	e7ff      	b.n	c21e <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x2a>
    c21e:	20ef      	movs	r0, #239	; 0xef
    c220:	900a      	str	r0, [sp, #40]	; 0x28
    c222:	990a      	ldr	r1, [sp, #40]	; 0x28
    c224:	f005 fa7d 	bl	11722 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    c228:	9009      	str	r0, [sp, #36]	; 0x24
    c22a:	9108      	str	r1, [sp, #32]
    c22c:	e7ff      	b.n	c22e <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x3a>
    let background = Rectangle::<Rgb565>
    c22e:	4668      	mov	r0, sp
    c230:	9908      	ldr	r1, [sp, #32]
    c232:	6001      	str	r1, [r0, #0]
    c234:	a816      	add	r0, sp, #88	; 0x58
    c236:	990c      	ldr	r1, [sp, #48]	; 0x30
    c238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c23a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c23c:	f00a f8e3 	bl	16406 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    c240:	e7ff      	b.n	c242 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x4e>
    c242:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    c244:	f88d 0078 	strb.w	r0, [sp, #120]	; 0x78
    c248:	f88d 0079 	strb.w	r0, [sp, #121]	; 0x79
    c24c:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    c250:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    c254:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
    c258:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    c25c:	f005 fadc 	bl	11818 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    c260:	9007      	str	r0, [sp, #28]
    c262:	e7ff      	b.n	c264 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x70>
    c264:	9807      	ldr	r0, [sp, #28]
    c266:	f8ad 0076 	strh.w	r0, [sp, #118]	; 0x76
    c26a:	2101      	movs	r1, #1
    c26c:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
    let background = Rectangle::<Rgb565>
    c270:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    c274:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
    c278:	a80f      	add	r0, sp, #60	; 0x3c
    c27a:	a916      	add	r1, sp, #88	; 0x58
    c27c:	f009 fd59 	bl	15d32 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    c280:	e7ff      	b.n	c282 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x8e>
    c282:	a80f      	add	r0, sp, #60	; 0x3c
    c284:	a91f      	add	r1, sp, #124	; 0x7c

    //  Render background to display
    druid::draw_to_display(background);
    c286:	460a      	mov	r2, r1
    c288:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    c28c:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    c290:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    c294:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    c298:	4608      	mov	r0, r1
    c29a:	f009 f85b 	bl	15354 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>
    c29e:	e7ff      	b.n	c2a0 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xac>

    //  Start the emulator in a background task
    os::task_init(                  //  Create a new task and start it...
        unsafe { &mut CHIP8_TASK }, //  Task object will be saved here
        &init_strn!( "chip8" ),     //  Name of task
    c2a0:	f24e 40ec 	movw	r0, #58604	; 0xe4ec
    c2a4:	f2c0 0001 	movt	r0, #1
    c2a8:	6801      	ldr	r1, [r0, #0]
        Some( task_func ),    //  Function to execute when task starts
    c2aa:	f24c 302b 	movw	r0, #49963	; 0xc32b
    c2ae:	f2c0 0000 	movt	r0, #0
    c2b2:	9027      	str	r0, [sp, #156]	; 0x9c
    os::task_init(                  //  Create a new task and start it...
    c2b4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    c2b6:	4668      	mov	r0, sp
    c2b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    c2bc:	6103      	str	r3, [r0, #16]
    c2be:	60c3      	str	r3, [r0, #12]
    c2c0:	f240 2368 	movw	r3, #616	; 0x268
    c2c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2c8:	6083      	str	r3, [r0, #8]
    c2ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c2ce:	6043      	str	r3, [r0, #4]
    c2d0:	2314      	movs	r3, #20
    c2d2:	6003      	str	r3, [r0, #0]
    c2d4:	f240 2018 	movw	r0, #536	; 0x218
    c2d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c2dc:	2300      	movs	r3, #0
    c2de:	f7fc fdba 	bl	8e56 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
    c2e2:	9006      	str	r0, [sp, #24]
    c2e4:	e7ff      	b.n	c2e6 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xf2>
    c2e6:	9806      	ldr	r0, [sp, #24]
    c2e8:	f7fc fd29 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    c2ec:	9026      	str	r0, [sp, #152]	; 0x98
    c2ee:	e7ff      	b.n	c2f0 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xfc>
        NULL,  //  Argument to be passed to above function
        20,    //  Task priority: highest is 0, lowest is 255 (main task is 127), SPI is 10
        os::OS_WAIT_FOREVER as u32,       //  Don't do sanity / watchdog checking
        unsafe { &mut CHIP8_TASK_STACK }, //  Stack space for the task
        CHIP8_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                                 //  `?` means check for error
    c2f0:	9826      	ldr	r0, [sp, #152]	; 0x98
    c2f2:	1e41      	subs	r1, r0, #1
    c2f4:	bf18      	it	ne
    c2f6:	2101      	movne	r1, #1
    c2f8:	2801      	cmp	r0, #1
    c2fa:	d001      	beq.n	c300 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x10c>
    c2fc:	e7ff      	b.n	c2fe <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x10a>
    c2fe:	e005      	b.n	c30c <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x118>
    c300:	2000      	movs	r0, #0

    //  Return success to the caller
    Ok(())
    c302:	900e      	str	r0, [sp, #56]	; 0x38
    c304:	2001      	movs	r0, #1
    c306:	900e      	str	r0, [sp, #56]	; 0x38
}
    c308:	e006      	b.n	c318 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x124>
    os::task_init(                  //  Create a new task and start it...
    c30a:	defe      	udf	#254	; 0xfe
    ) ? ;                                 //  `?` means check for error
    c30c:	9826      	ldr	r0, [sp, #152]	; 0x98
    c30e:	9029      	str	r0, [sp, #164]	; 0xa4
    c310:	f006 f960 	bl	125d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    c314:	9005      	str	r0, [sp, #20]
    c316:	e002      	b.n	c31e <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x12a>
}
    c318:	980e      	ldr	r0, [sp, #56]	; 0x38
    c31a:	b02a      	add	sp, #168	; 0xa8
    c31c:	bd10      	pop	{r4, pc}
    ) ? ;                                 //  `?` means check for error
    c31e:	9805      	ldr	r0, [sp, #20]
    c320:	f7fc fd01 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    c324:	900e      	str	r0, [sp, #56]	; 0x38
    c326:	e7ff      	b.n	c328 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x134>
    c328:	e7f6      	b.n	c318 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x124>

0000c32a <_ZN3app5chip89task_func17h385831a0096277b5E>:

///  Run the emulator
extern "C" fn task_func(_arg: Ptr) {    
    c32a:	b580      	push	{r7, lr}
    c32c:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
    c330:	b08a      	sub	sp, #40	; 0x28
    c332:	f10d 0e20 	add.w	lr, sp, #32
    c336:	f50e 5102 	add.w	r1, lr, #8320	; 0x2080
    c33a:	6008      	str	r0, [r1, #0]
    c33c:	a804      	add	r0, sp, #16
    //  Init the colours
    //  loop { if PIXEL_OFF.push(0x0).is_err() { break; } }
    //  loop { if PIXEL_ON.push(0xffff).is_err() { break; } }

    //  Create the emulator
    let chip8 = libchip8::Chip8::new(Hardware);
    c33e:	9103      	str	r1, [sp, #12]
    c340:	f000 fdc9 	bl	ced6 <_ZN8libchip814Chip8$LT$T$GT$3new17h80d41819f2580e6eE>
    c344:	e7ff      	b.n	c346 <_ZN3app5chip89task_func17h385831a0096277b5E+0x1c>
    console::print("CHIP8 started\n"); console::flush();
    c346:	f24e 40f0 	movw	r0, #58608	; 0xe4f0
    c34a:	f2c0 0001 	movt	r0, #1
    c34e:	210e      	movs	r1, #14
    c350:	f7fc ff31 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c354:	e7ff      	b.n	c356 <_ZN3app5chip89task_func17h385831a0096277b5E+0x2c>
    c356:	f7fc ff74 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    c35a:	e7ff      	b.n	c35c <_ZN3app5chip89task_func17h385831a0096277b5E+0x32>

    //  Load the emulator ROM
    let rom = include_bytes!("../roms/invaders.ch8");
    c35c:	f24e 40fe 	movw	r0, #58622	; 0xe4fe
    c360:	f2c0 0001 	movt	r0, #1
    c364:	9903      	ldr	r1, [sp, #12]
    c366:	6048      	str	r0, [r1, #4]
    c368:	f10d 0e18 	add.w	lr, sp, #24
    c36c:	f50e 5282 	add.w	r2, lr, #4160	; 0x1040
    c370:	a904      	add	r1, sp, #16
    c372:	f241 0348 	movw	r3, #4168	; 0x1048
    //  let rom = include_bytes!("../roms/pong.ch8");

    //  Run the emulator ROM. This will block until emulator terminates
    chip8.run(rom);
    c376:	9002      	str	r0, [sp, #8]
    c378:	4610      	mov	r0, r2
    c37a:	9201      	str	r2, [sp, #4]
    c37c:	461a      	mov	r2, r3
    c37e:	f011 fb79 	bl	1da74 <__aeabi_memcpy>
    c382:	f240 5215 	movw	r2, #1301	; 0x515
    c386:	9801      	ldr	r0, [sp, #4]
    c388:	9902      	ldr	r1, [sp, #8]
    c38a:	f000 fe38 	bl	cffe <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E>
    c38e:	e7ff      	b.n	c390 <_ZN3app5chip89task_func17h385831a0096277b5E+0x66>

    //  Should not come here
    console::print("CHIP8 done\n"); console::flush();
    c390:	f64e 2013 	movw	r0, #59923	; 0xea13
    c394:	f2c0 0001 	movt	r0, #1
    c398:	210b      	movs	r1, #11
    c39a:	f7fc ff0c 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c39e:	e7ff      	b.n	c3a0 <_ZN3app5chip89task_func17h385831a0096277b5E+0x76>
    c3a0:	f7fc ff4f 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    c3a4:	e7ff      	b.n	c3a6 <_ZN3app5chip89task_func17h385831a0096277b5E+0x7c>
    assert!(false, "CHIP8 should not end");
    c3a6:	f64e 201e 	movw	r0, #59934	; 0xea1e
    c3aa:	f2c0 0001 	movt	r0, #1
    c3ae:	f64e 2248 	movw	r2, #59976	; 0xea48
    c3b2:	f2c0 0201 	movt	r2, #1
    c3b6:	2114      	movs	r1, #20
    c3b8:	f00a ff88 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c3bc:	defe      	udf	#254	; 0xfe

0000c3be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hdef6640b381cd2e3E>:
type PixelColors = heapless::Vec::<u16, PixelSize>;

struct Hardware;

impl libchip8::Hardware for Hardware {
    fn rand(&mut self) -> u8 {
    c3be:	b081      	sub	sp, #4
    c3c0:	9000      	str	r0, [sp, #0]
    c3c2:	207b      	movs	r0, #123	; 0x7b
        //  Return a random value.
        123  //  TODO
        //  self.rng.gen()
    }
    c3c4:	b001      	add	sp, #4
    c3c6:	4770      	bx	lr

0000c3c8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h6ab5fe7f9b6adc84E>:

    fn key(&mut self, _key: u8) -> bool {
    c3c8:	b082      	sub	sp, #8
    c3ca:	460a      	mov	r2, r1
    c3cc:	9000      	str	r0, [sp, #0]
    c3ce:	f88d 1007 	strb.w	r1, [sp, #7]
    c3d2:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    c3d4:	b002      	add	sp, #8
    c3d6:	4770      	bx	lr

0000c3d8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E>:

    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    c3d8:	b5b0      	push	{r4, r5, r7, lr}
    c3da:	b0a8      	sub	sp, #160	; 0xa0
    c3dc:	469c      	mov	ip, r3
    c3de:	9022      	str	r0, [sp, #136]	; 0x88
    c3e0:	9123      	str	r1, [sp, #140]	; 0x8c
    c3e2:	9224      	str	r2, [sp, #144]	; 0x90
    c3e4:	f88d 3097 	strb.w	r3, [sp, #151]	; 0x97
        //  Set the state of a pixel in the screen.
        //  true for white, and false for black.
        //  console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    c3e8:	293f      	cmp	r1, #63	; 0x3f
    c3ea:	920d      	str	r2, [sp, #52]	; 0x34
    c3ec:	910c      	str	r1, [sp, #48]	; 0x30
    c3ee:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    c3f2:	d804      	bhi.n	c3fe <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x26>
    c3f4:	e7ff      	b.n	c3f6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x1e>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c3f6:	980d      	ldr	r0, [sp, #52]	; 0x34
    c3f8:	281f      	cmp	r0, #31
    c3fa:	d814      	bhi.n	c426 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x4e>
    c3fc:	e00b      	b.n	c416 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x3e>
        assert!(x < SCREEN_WIDTH, "x overflow");
    c3fe:	f64e 2094 	movw	r0, #60052	; 0xea94
    c402:	f2c0 0001 	movt	r0, #1
    c406:	f64e 22a0 	movw	r2, #60064	; 0xeaa0
    c40a:	f2c0 0201 	movt	r2, #1
    c40e:	210a      	movs	r1, #10
    c410:	f00a ff5c 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c414:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c416:	980d      	ldr	r0, [sp, #52]	; 0x34
    c418:	0181      	lsls	r1, r0, #6
    c41a:	0e82      	lsrs	r2, r0, #26
    c41c:	2a00      	cmp	r2, #0
    c41e:	910a      	str	r1, [sp, #40]	; 0x28
    c420:	f040 810b 	bne.w	c63a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x262>
    c424:	e00b      	b.n	c43e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x66>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c426:	f64e 20b0 	movw	r0, #60080	; 0xeab0
    c42a:	f2c0 0001 	movt	r0, #1
    c42e:	f64e 22bc 	movw	r2, #60092	; 0xeabc
    c432:	f2c0 0201 	movt	r2, #1
    c436:	210a      	movs	r1, #10
    c438:	f00a ff48 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c43c:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c43e:	980c      	ldr	r0, [sp, #48]	; 0x30
    c440:	990a      	ldr	r1, [sp, #40]	; 0x28
    c442:	1842      	adds	r2, r0, r1
    c444:	4613      	mov	r3, r2
    c446:	4282      	cmp	r2, r0
    c448:	9309      	str	r3, [sp, #36]	; 0x24
    c44a:	f0c0 8102 	bcc.w	c652 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x27a>
    c44e:	e7ff      	b.n	c450 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x78>
    c450:	9809      	ldr	r0, [sp, #36]	; 0x24
    c452:	9026      	str	r0, [sp, #152]	; 0x98
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    c454:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c456:	07ca      	lsls	r2, r1, #31
    c458:	2a00      	cmp	r2, #0
    c45a:	d104      	bne.n	c466 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x8e>
    c45c:	e7ff      	b.n	c45e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x86>
    c45e:	2000      	movs	r0, #0
    c460:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    c464:	e003      	b.n	c46e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x96>
    c466:	2001      	movs	r0, #1
    c468:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    c46c:	e7ff      	b.n	c46e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x96>
    c46e:	2000      	movs	r0, #0
    c470:	9909      	ldr	r1, [sp, #36]	; 0x24
    c472:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    c476:	f040 80f8 	bne.w	c66a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x292>
    c47a:	e7ff      	b.n	c47c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0xa4>
    c47c:	f244 2068 	movw	r0, #17000	; 0x4268
    c480:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c484:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    c488:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c48a:	5481      	strb	r1, [r0, r2]

        let x_scaled: u16 = x as u16 * PIXEL_WIDTH as u16;
    c48c:	980c      	ldr	r0, [sp, #48]	; 0x30
    c48e:	b281      	uxth	r1, r0
    c490:	2303      	movs	r3, #3
    c492:	fba1 1303 	umull	r1, r3, r1, r3
    c496:	ea4f 4c11 	mov.w	ip, r1, lsr #16
    c49a:	f04f 0e00 	mov.w	lr, #0
    c49e:	ebbe 4f11 	cmp.w	lr, r1, lsr #16
    c4a2:	bf18      	it	ne
    c4a4:	f04f 0c01 	movne.w	ip, #1
    c4a8:	2b00      	cmp	r3, #0
    c4aa:	bf18      	it	ne
    c4ac:	2301      	movne	r3, #1
    c4ae:	ea43 030c 	orr.w	r3, r3, ip
    c4b2:	2b00      	cmp	r3, #0
    c4b4:	9108      	str	r1, [sp, #32]
    c4b6:	f040 80e2 	bne.w	c67e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x2a6>
    c4ba:	e7ff      	b.n	c4bc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0xe4>
    c4bc:	9808      	ldr	r0, [sp, #32]
    c4be:	f8ad 009c 	strh.w	r0, [sp, #156]	; 0x9c
        let y_scaled: u16 = y as u16 * PIXEL_HEIGHT as u16; 
    c4c2:	990d      	ldr	r1, [sp, #52]	; 0x34
    c4c4:	b28a      	uxth	r2, r1
    c4c6:	2305      	movs	r3, #5
    c4c8:	fba2 2303 	umull	r2, r3, r2, r3
    c4cc:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    c4d0:	f04f 0e00 	mov.w	lr, #0
    c4d4:	ebbe 4f12 	cmp.w	lr, r2, lsr #16
    c4d8:	bf18      	it	ne
    c4da:	f04f 0c01 	movne.w	ip, #1
    c4de:	2b00      	cmp	r3, #0
    c4e0:	bf18      	it	ne
    c4e2:	2301      	movne	r3, #1
    c4e4:	ea43 030c 	orr.w	r3, r3, ip
    c4e8:	2b00      	cmp	r3, #0
    c4ea:	9207      	str	r2, [sp, #28]
    c4ec:	f040 80d3 	bne.w	c696 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x2be>
    c4f0:	e7ff      	b.n	c4f2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x11a>
    c4f2:	9807      	ldr	r0, [sp, #28]
    c4f4:	f8ad 009e 	strh.w	r0, [sp, #158]	; 0x9e
        assert!(x_scaled < 240 - PIXEL_WIDTH as u16, "x overflow");
    c4f8:	9908      	ldr	r1, [sp, #32]
    c4fa:	b28a      	uxth	r2, r1
    c4fc:	2aec      	cmp	r2, #236	; 0xec
    c4fe:	d805      	bhi.n	c50c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x134>
    c500:	e7ff      	b.n	c502 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x12a>
        assert!(y_scaled < 240 - PIXEL_HEIGHT as u16, "y overflow");
    c502:	9807      	ldr	r0, [sp, #28]
    c504:	b281      	uxth	r1, r0
    c506:	29ea      	cmp	r1, #234	; 0xea
    c508:	d811      	bhi.n	c52e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x156>
    c50a:	e00b      	b.n	c524 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x14c>
        assert!(x_scaled < 240 - PIXEL_WIDTH as u16, "x overflow");
    c50c:	f64e 2094 	movw	r0, #60052	; 0xea94
    c510:	f2c0 0001 	movt	r0, #1
    c514:	f64e 326c 	movw	r2, #60268	; 0xeb6c
    c518:	f2c0 0201 	movt	r2, #1
    c51c:	210a      	movs	r1, #10
    c51e:	f00a fed5 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c522:	defe      	udf	#254	; 0xfe

        let pixel_colors = if d { &PIXEL_ON } else { &PIXEL_OFF };
    c524:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c526:	07c1      	lsls	r1, r0, #31
    c528:	2900      	cmp	r1, #0
    c52a:	d112      	bne.n	c552 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x17a>
    c52c:	e00b      	b.n	c546 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x16e>
        assert!(y_scaled < 240 - PIXEL_HEIGHT as u16, "y overflow");
    c52e:	f64e 20b0 	movw	r0, #60080	; 0xeab0
    c532:	f2c0 0001 	movt	r0, #1
    c536:	f64e 327c 	movw	r2, #60284	; 0xeb7c
    c53a:	f2c0 0201 	movt	r2, #1
    c53e:	210a      	movs	r1, #10
    c540:	f00a fec4 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c544:	defe      	udf	#254	; 0xfe
        let pixel_colors = if d { &PIXEL_ON } else { &PIXEL_OFF };
    c546:	f64e 2076 	movw	r0, #60022	; 0xea76
    c54a:	f2c0 0001 	movt	r0, #1
    c54e:	900f      	str	r0, [sp, #60]	; 0x3c
    c550:	e005      	b.n	c55e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x186>
    c552:	f64e 2058 	movw	r0, #59992	; 0xea58
    c556:	f2c0 0001 	movt	r0, #1
    c55a:	900f      	str	r0, [sp, #60]	; 0x3c
    c55c:	e7ff      	b.n	c55e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x186>
    c55e:	a810      	add	r0, sp, #64	; 0x40
        let mut colors = PixelColors::new();
    c560:	f7fc f9c8 	bl	88f4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17ha26667ca61d55534E>
    c564:	e7ff      	b.n	c566 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x18e>
        colors.extend_from_slice(pixel_colors).expect("extend failed");
    c566:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c568:	a810      	add	r0, sp, #64	; 0x40
    c56a:	220f      	movs	r2, #15
    c56c:	f7fc f9b4 	bl	88d8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17ha9fbe1a1dec6e23eE>
    c570:	9006      	str	r0, [sp, #24]
    c572:	e7ff      	b.n	c574 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x19c>
    c574:	9806      	ldr	r0, [sp, #24]
    c576:	f000 0001 	and.w	r0, r0, #1
    c57a:	f64e 318c 	movw	r1, #60300	; 0xeb8c
    c57e:	f2c0 0101 	movt	r1, #1
    c582:	f64e 339c 	movw	r3, #60316	; 0xeb9c
    c586:	f2c0 0301 	movt	r3, #1
    c58a:	220d      	movs	r2, #13
    c58c:	f008 fcfd 	bl	14f8a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
    c590:	e7ff      	b.n	c592 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x1ba>
    c592:	2003      	movs	r0, #3
        druid::set_display_pixels(x_scaled, y_scaled, 
            x_scaled + PIXEL_WIDTH as u16 - 1,
    c594:	9908      	ldr	r1, [sp, #32]
    c596:	fa10 f081 	uxtah	r0, r0, r1
    c59a:	b282      	uxth	r2, r0
    c59c:	4603      	mov	r3, r0
    c59e:	4282      	cmp	r2, r0
    c5a0:	9305      	str	r3, [sp, #20]
    c5a2:	f040 8084 	bne.w	c6ae <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x2d6>
    c5a6:	e7ff      	b.n	c5a8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x1d0>
    c5a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c5ac:	9905      	ldr	r1, [sp, #20]
    c5ae:	fa10 f081 	uxtah	r0, r0, r1
    c5b2:	b282      	uxth	r2, r0
    c5b4:	4603      	mov	r3, r0
    c5b6:	4282      	cmp	r2, r0
    c5b8:	9304      	str	r3, [sp, #16]
    c5ba:	f040 8084 	bne.w	c6c6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x2ee>
    c5be:	e7ff      	b.n	c5c0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x1e8>
    c5c0:	2005      	movs	r0, #5
            y_scaled + PIXEL_HEIGHT as u16 - 1,
    c5c2:	9907      	ldr	r1, [sp, #28]
    c5c4:	fa10 f081 	uxtah	r0, r0, r1
    c5c8:	b282      	uxth	r2, r0
    c5ca:	4603      	mov	r3, r0
    c5cc:	4282      	cmp	r2, r0
    c5ce:	9303      	str	r3, [sp, #12]
    c5d0:	f040 8085 	bne.w	c6de <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x306>
    c5d4:	e7ff      	b.n	c5d6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x1fe>
    c5d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c5da:	9903      	ldr	r1, [sp, #12]
    c5dc:	fa10 f081 	uxtah	r0, r0, r1
    c5e0:	b282      	uxth	r2, r0
    c5e2:	4603      	mov	r3, r0
    c5e4:	4282      	cmp	r2, r0
    c5e6:	9302      	str	r3, [sp, #8]
    c5e8:	f040 8085 	bne.w	c6f6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x31e>
    c5ec:	e7ff      	b.n	c5ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x216>
    c5ee:	a810      	add	r0, sp, #64	; 0x40
    c5f0:	a919      	add	r1, sp, #100	; 0x64
            colors
    c5f2:	460a      	mov	r2, r1
    c5f4:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
    c5f8:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
    c5fc:	e890 5038 	ldmia.w	r0, {r3, r4, r5, ip, lr}
    c600:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
        druid::set_display_pixels(x_scaled, y_scaled, 
    c604:	4668      	mov	r0, sp
    c606:	6001      	str	r1, [r0, #0]
    c608:	9808      	ldr	r0, [sp, #32]
    c60a:	9907      	ldr	r1, [sp, #28]
    c60c:	9a04      	ldr	r2, [sp, #16]
    c60e:	9b02      	ldr	r3, [sp, #8]
    c610:	f000 fac3 	bl	cb9a <_ZN22piet_embedded_graphics7display18set_display_pixels17h52aeff59745589e9E>
    c614:	9001      	str	r0, [sp, #4]
    c616:	e7ff      	b.n	c618 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x240>
    c618:	9801      	ldr	r0, [sp, #4]
    c61a:	f000 0001 	and.w	r0, r0, #1
    c61e:	f64e 31f4 	movw	r1, #60404	; 0xebf4
    c622:	f2c0 0101 	movt	r1, #1
    c626:	f64e 4308 	movw	r3, #60424	; 0xec08
    c62a:	f2c0 0301 	movt	r3, #1
    c62e:	2211      	movs	r2, #17
    c630:	f008 fcab 	bl	14f8a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
    c634:	e7ff      	b.n	c636 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x25e>
            .fill( Some( color ) );
        druid::draw_to_display(pixel);
        */
        //  trace!("Set pixel ({},{})", x, y);
        //  self.vram[(y * self.vramsz.0) + x] = d;
    }
    c636:	b028      	add	sp, #160	; 0xa0
    c638:	bdb0      	pop	{r4, r5, r7, pc}
        let i = x + y * SCREEN_WIDTH;
    c63a:	f64e 20e0 	movw	r0, #60128	; 0xeae0
    c63e:	f2c0 0001 	movt	r0, #1
    c642:	f64e 22cc 	movw	r2, #60108	; 0xeacc
    c646:	f2c0 0201 	movt	r2, #1
    c64a:	2121      	movs	r1, #33	; 0x21
    c64c:	f00a fe3e 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c650:	defe      	udf	#254	; 0xfe
    c652:	f64e 3020 	movw	r0, #60192	; 0xeb20
    c656:	f2c0 0001 	movt	r0, #1
    c65a:	f64e 3204 	movw	r2, #60164	; 0xeb04
    c65e:	f2c0 0201 	movt	r2, #1
    c662:	211c      	movs	r1, #28
    c664:	f00a fe32 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c668:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    c66a:	f64e 303c 	movw	r0, #60220	; 0xeb3c
    c66e:	f2c0 0001 	movt	r0, #1
    c672:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c676:	9909      	ldr	r1, [sp, #36]	; 0x24
    c678:	f00a fe3e 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    c67c:	defe      	udf	#254	; 0xfe
        let x_scaled: u16 = x as u16 * PIXEL_WIDTH as u16;
    c67e:	f64e 20e0 	movw	r0, #60128	; 0xeae0
    c682:	f2c0 0001 	movt	r0, #1
    c686:	f64e 324c 	movw	r2, #60236	; 0xeb4c
    c68a:	f2c0 0201 	movt	r2, #1
    c68e:	2121      	movs	r1, #33	; 0x21
    c690:	f00a fe1c 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c694:	defe      	udf	#254	; 0xfe
        let y_scaled: u16 = y as u16 * PIXEL_HEIGHT as u16; 
    c696:	f64e 20e0 	movw	r0, #60128	; 0xeae0
    c69a:	f2c0 0001 	movt	r0, #1
    c69e:	f64e 325c 	movw	r2, #60252	; 0xeb5c
    c6a2:	f2c0 0201 	movt	r2, #1
    c6a6:	2121      	movs	r1, #33	; 0x21
    c6a8:	f00a fe10 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c6ac:	defe      	udf	#254	; 0xfe
            x_scaled + PIXEL_WIDTH as u16 - 1,
    c6ae:	f64e 3020 	movw	r0, #60192	; 0xeb20
    c6b2:	f2c0 0001 	movt	r0, #1
    c6b6:	f64e 32ac 	movw	r2, #60332	; 0xebac
    c6ba:	f2c0 0201 	movt	r2, #1
    c6be:	211c      	movs	r1, #28
    c6c0:	f00a fe04 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c6c4:	defe      	udf	#254	; 0xfe
    c6c6:	f64e 30c0 	movw	r0, #60352	; 0xebc0
    c6ca:	f2c0 0001 	movt	r0, #1
    c6ce:	f64e 32ac 	movw	r2, #60332	; 0xebac
    c6d2:	f2c0 0201 	movt	r2, #1
    c6d6:	2121      	movs	r1, #33	; 0x21
    c6d8:	f00a fdf8 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c6dc:	defe      	udf	#254	; 0xfe
            y_scaled + PIXEL_HEIGHT as u16 - 1,
    c6de:	f64e 3020 	movw	r0, #60192	; 0xeb20
    c6e2:	f2c0 0001 	movt	r0, #1
    c6e6:	f64e 32e4 	movw	r2, #60388	; 0xebe4
    c6ea:	f2c0 0201 	movt	r2, #1
    c6ee:	211c      	movs	r1, #28
    c6f0:	f00a fdec 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c6f4:	defe      	udf	#254	; 0xfe
    c6f6:	f64e 30c0 	movw	r0, #60352	; 0xebc0
    c6fa:	f2c0 0001 	movt	r0, #1
    c6fe:	f64e 32e4 	movw	r2, #60388	; 0xebe4
    c702:	f2c0 0201 	movt	r2, #1
    c706:	2121      	movs	r1, #33	; 0x21
    c708:	f00a fde0 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c70c:	defe      	udf	#254	; 0xfe

0000c70e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE>:

    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    c70e:	b088      	sub	sp, #32
    c710:	9004      	str	r0, [sp, #16]
    c712:	9105      	str	r1, [sp, #20]
    c714:	9206      	str	r2, [sp, #24]
        //  Get the current state of a pixel in the screen.
        //  console::print("get "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    c716:	293f      	cmp	r1, #63	; 0x3f
    c718:	9203      	str	r2, [sp, #12]
    c71a:	9102      	str	r1, [sp, #8]
    c71c:	d804      	bhi.n	c728 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0x1a>
    c71e:	e7ff      	b.n	c720 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0x12>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c720:	9803      	ldr	r0, [sp, #12]
    c722:	281f      	cmp	r0, #31
    c724:	d813      	bhi.n	c74e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0x40>
    c726:	e00b      	b.n	c740 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0x32>
        assert!(x < SCREEN_WIDTH, "x overflow");
    c728:	f64e 2094 	movw	r0, #60052	; 0xea94
    c72c:	f2c0 0001 	movt	r0, #1
    c730:	f64e 4218 	movw	r2, #60440	; 0xec18
    c734:	f2c0 0201 	movt	r2, #1
    c738:	210a      	movs	r1, #10
    c73a:	f00a fdc7 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c73e:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c740:	9803      	ldr	r0, [sp, #12]
    c742:	0181      	lsls	r1, r0, #6
    c744:	0e82      	lsrs	r2, r0, #26
    c746:	2a00      	cmp	r2, #0
    c748:	9101      	str	r1, [sp, #4]
    c74a:	d126      	bne.n	c79a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0x8c>
    c74c:	e00b      	b.n	c766 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0x58>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c74e:	f64e 20b0 	movw	r0, #60080	; 0xeab0
    c752:	f2c0 0001 	movt	r0, #1
    c756:	f64e 4228 	movw	r2, #60456	; 0xec28
    c75a:	f2c0 0201 	movt	r2, #1
    c75e:	210a      	movs	r1, #10
    c760:	f00a fdb4 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c764:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c766:	9802      	ldr	r0, [sp, #8]
    c768:	9901      	ldr	r1, [sp, #4]
    c76a:	1842      	adds	r2, r0, r1
    c76c:	4613      	mov	r3, r2
    c76e:	4282      	cmp	r2, r0
    c770:	9300      	str	r3, [sp, #0]
    c772:	d31e      	bcc.n	c7b2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0xa4>
    c774:	e7ff      	b.n	c776 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0x68>
    c776:	9800      	ldr	r0, [sp, #0]
    c778:	9007      	str	r0, [sp, #28]
    c77a:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] != 0 }
    c77c:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    c780:	d123      	bne.n	c7ca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0xbc>
    c782:	e7ff      	b.n	c784 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0x76>
    c784:	f244 2068 	movw	r0, #17000	; 0x4268
    c788:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c78c:	9900      	ldr	r1, [sp, #0]
    c78e:	5c40      	ldrb	r0, [r0, r1]
    c790:	2800      	cmp	r0, #0
    c792:	bf18      	it	ne
    c794:	2001      	movne	r0, #1
        //  self.vram[(y * self.vramsz.0) + x]
    }
    c796:	b008      	add	sp, #32
    c798:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    c79a:	f64e 20e0 	movw	r0, #60128	; 0xeae0
    c79e:	f2c0 0001 	movt	r0, #1
    c7a2:	f64e 4238 	movw	r2, #60472	; 0xec38
    c7a6:	f2c0 0201 	movt	r2, #1
    c7aa:	2121      	movs	r1, #33	; 0x21
    c7ac:	f00a fd8e 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c7b0:	defe      	udf	#254	; 0xfe
    c7b2:	f64e 3020 	movw	r0, #60192	; 0xeb20
    c7b6:	f2c0 0001 	movt	r0, #1
    c7ba:	f64e 4248 	movw	r2, #60488	; 0xec48
    c7be:	f2c0 0201 	movt	r2, #1
    c7c2:	211c      	movs	r1, #28
    c7c4:	f00a fd82 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c7c8:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] != 0 }
    c7ca:	f64e 4058 	movw	r0, #60504	; 0xec58
    c7ce:	f2c0 0001 	movt	r0, #1
    c7d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c7d6:	9900      	ldr	r1, [sp, #0]
    c7d8:	f00a fd8e 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    c7dc:	defe      	udf	#254	; 0xfe

0000c7de <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E>:

    fn vram_setsize(&mut self, size: (usize, usize)) {
    c7de:	b580      	push	{r7, lr}
    c7e0:	b086      	sub	sp, #24
    c7e2:	9003      	str	r0, [sp, #12]
    c7e4:	9104      	str	r1, [sp, #16]
    c7e6:	9205      	str	r2, [sp, #20]
        //  Set the size of the screen.
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    c7e8:	f64e 4068 	movw	r0, #60520	; 0xec68
    c7ec:	f2c0 0001 	movt	r0, #1
    c7f0:	2308      	movs	r3, #8
    c7f2:	9102      	str	r1, [sp, #8]
    c7f4:	4619      	mov	r1, r3
    c7f6:	9201      	str	r2, [sp, #4]
    c7f8:	f7fc fcdd 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c7fc:	e7ff      	b.n	c7fe <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E+0x20>
    c7fe:	9802      	ldr	r0, [sp, #8]
    c800:	f7fc fd17 	bl	9232 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    c804:	e7ff      	b.n	c806 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E+0x28>
    c806:	f64e 4070 	movw	r0, #60528	; 0xec70
    c80a:	f2c0 0001 	movt	r0, #1
    c80e:	2102      	movs	r1, #2
    c810:	f7fc fcd1 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c814:	e7ff      	b.n	c816 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E+0x38>
    c816:	9801      	ldr	r0, [sp, #4]
    c818:	f7fc fd0b 	bl	9232 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    c81c:	e7ff      	b.n	c81e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E+0x40>
    c81e:	f64e 4072 	movw	r0, #60530	; 0xec72
    c822:	f2c0 0001 	movt	r0, #1
    c826:	2101      	movs	r1, #1
    c828:	f7fc fcc5 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c82c:	e7ff      	b.n	c82e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E+0x50>
    c82e:	f7fc fd08 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    c832:	e7ff      	b.n	c834 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E+0x56>
                panic!("Unable to create window {}", err);
            }
        };
        self.win = Some(win);
        */
    }
    c834:	b006      	add	sp, #24
    c836:	bd80      	pop	{r7, pc}

0000c838 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbe871a76fb26495aE>:

    fn vram_size(&mut self) -> (usize, usize) {
    c838:	b083      	sub	sp, #12
    c83a:	9002      	str	r0, [sp, #8]
    c83c:	2040      	movs	r0, #64	; 0x40
        //  Get the size of the screen.
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    c83e:	9000      	str	r0, [sp, #0]
    c840:	2020      	movs	r0, #32
    c842:	9001      	str	r0, [sp, #4]
        //  self.vramsz
    }
    c844:	9800      	ldr	r0, [sp, #0]
    c846:	9901      	ldr	r1, [sp, #4]
    c848:	b003      	add	sp, #12
    c84a:	4770      	bx	lr

0000c84c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE>:

    fn clock(&mut self) -> u64 {
    c84c:	b5b0      	push	{r4, r5, r7, lr}
    c84e:	b086      	sub	sp, #24
    c850:	9005      	str	r0, [sp, #20]
        //  Return the current clock value in nanoseconds.
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    c852:	f00e fea1 	bl	1b598 <os_time_get>
    c856:	9004      	str	r0, [sp, #16]
    c858:	e7ff      	b.n	c85a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE+0xe>
    c85a:	2000      	movs	r0, #0
    c85c:	9904      	ldr	r1, [sp, #16]
    c85e:	fba0 2301 	umull	r2, r3, r0, r1
    c862:	2b00      	cmp	r3, #0
    c864:	bf18      	it	ne
    c866:	2301      	movne	r3, #1
    c868:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    c86c:	fba0 e40c 	umull	lr, r4, r0, ip
    c870:	2c00      	cmp	r4, #0
    c872:	bf18      	it	ne
    c874:	2401      	movne	r4, #1
    c876:	ea43 0304 	orr.w	r3, r3, r4
    c87a:	4472      	add	r2, lr
    c87c:	fba1 ce0c 	umull	ip, lr, r1, ip
    c880:	eb12 020e 	adds.w	r2, r2, lr
    c884:	f140 0000 	adc.w	r0, r0, #0
    c888:	ea40 0003 	orr.w	r0, r0, r3
    c88c:	2800      	cmp	r0, #0
    c88e:	f8cd c00c 	str.w	ip, [sp, #12]
    c892:	9202      	str	r2, [sp, #8]
    c894:	d124      	bne.n	c8e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE+0x94>
    c896:	e7ff      	b.n	c898 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE+0x4c>
    c898:	2000      	movs	r0, #0
    c89a:	9903      	ldr	r1, [sp, #12]
    c89c:	fba0 2301 	umull	r2, r3, r0, r1
    c8a0:	2b00      	cmp	r3, #0
    c8a2:	bf18      	it	ne
    c8a4:	2301      	movne	r3, #1
    c8a6:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
    c8aa:	f8dd e008 	ldr.w	lr, [sp, #8]
    c8ae:	fbae 450c 	umull	r4, r5, lr, ip
    c8b2:	2d00      	cmp	r5, #0
    c8b4:	bf18      	it	ne
    c8b6:	2501      	movne	r5, #1
    c8b8:	ea43 0305 	orr.w	r3, r3, r5
    c8bc:	4422      	add	r2, r4
    c8be:	fba1 c40c 	umull	ip, r4, r1, ip
    c8c2:	1912      	adds	r2, r2, r4
    c8c4:	f140 0000 	adc.w	r0, r0, #0
    c8c8:	ea40 0003 	orr.w	r0, r0, r3
    c8cc:	2800      	cmp	r0, #0
    c8ce:	f8cd c004 	str.w	ip, [sp, #4]
    c8d2:	9200      	str	r2, [sp, #0]
    c8d4:	d110      	bne.n	c8f8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE+0xac>
    c8d6:	e7ff      	b.n	c8d8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE+0x8c>
        let d = self.inst.elapsed();
        d.as_secs()
            .wrapping_mul(1000_000_000)
            .wrapping_add(d.subsec_nanos().into())
        */
    }
    c8d8:	9801      	ldr	r0, [sp, #4]
    c8da:	9900      	ldr	r1, [sp, #0]
    c8dc:	b006      	add	sp, #24
    c8de:	bdb0      	pop	{r4, r5, r7, pc}
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    c8e0:	f64e 20e0 	movw	r0, #60128	; 0xeae0
    c8e4:	f2c0 0001 	movt	r0, #1
    c8e8:	f64e 4274 	movw	r2, #60532	; 0xec74
    c8ec:	f2c0 0201 	movt	r2, #1
    c8f0:	2121      	movs	r1, #33	; 0x21
    c8f2:	f00a fceb 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c8f6:	defe      	udf	#254	; 0xfe
    c8f8:	f64e 20e0 	movw	r0, #60128	; 0xeae0
    c8fc:	f2c0 0001 	movt	r0, #1
    c900:	f64e 4274 	movw	r2, #60532	; 0xec74
    c904:	f2c0 0201 	movt	r2, #1
    c908:	2121      	movs	r1, #33	; 0x21
    c90a:	f00a fcdf 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c90e:	defe      	udf	#254	; 0xfe

0000c910 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h46449aaa1682a400E>:

    fn beep(&mut self) {
    c910:	b081      	sub	sp, #4
    c912:	9000      	str	r0, [sp, #0]
        //  Play beep sound.
    }
    c914:	b001      	add	sp, #4
    c916:	4770      	bx	lr

0000c918 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h7a2ee6dc937954dfE>:

    fn sched(&mut self) -> bool {
    c918:	b580      	push	{r7, lr}
    c91a:	b082      	sub	sp, #8
    c91c:	9001      	str	r0, [sp, #4]
        //  Called in every step; return true for shutdown.
        //  console::print("sched\n"); console::flush(); ////
        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
    c91e:	f00d fc13 	bl	1a148 <hal_watchdog_tickle>
    c922:	e7ff      	b.n	c924 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h7a2ee6dc937954dfE+0xc>
    c924:	2001      	movs	r0, #1
        unsafe { os::os_time_delay(1) };
    c926:	f00e fe5d 	bl	1b5e4 <os_time_delay>
    c92a:	e7ff      	b.n	c92c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h7a2ee6dc937954dfE+0x14>
    c92c:	2000      	movs	r0, #0
                .map(|b| if b { 0xffffff } else { 0 })
                .collect();
            win.update_with_buffer(&vram).unwrap();
        }
        */
    }
    c92e:	b002      	add	sp, #8
    c930:	bd80      	pop	{r7, pc}

0000c932 <_ZN3app5chip812handle_touch17habca32c74e5cefadE>:
}

pub fn handle_touch(_x: u16, _y: u16) { 
    c932:	b580      	push	{r7, lr}
    c934:	b084      	sub	sp, #16
    c936:	460a      	mov	r2, r1
    c938:	4603      	mov	r3, r0
    c93a:	f8ad 000c 	strh.w	r0, [sp, #12]
    c93e:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
    c942:	f64e 4084 	movw	r0, #60548	; 0xec84
    c946:	f2c0 0001 	movt	r0, #1
    c94a:	2118      	movs	r1, #24
    c94c:	9202      	str	r2, [sp, #8]
    c94e:	9301      	str	r3, [sp, #4]
    c950:	f7fc fc31 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c954:	e7ff      	b.n	c956 <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x24>
    c956:	f7fc fc74 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    c95a:	e7ff      	b.n	c95c <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x2a>
}
    c95c:	b004      	add	sp, #16
    c95e:	bd80      	pop	{r7, pc}

0000c960 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE>:
    c960:	b580      	push	{r7, lr}
    c962:	b08c      	sub	sp, #48	; 0x30
    c964:	9103      	str	r1, [sp, #12]
    c966:	9204      	str	r2, [sp, #16]
    c968:	930a      	str	r3, [sp, #40]	; 0x28
    c96a:	2100      	movs	r1, #0
    c96c:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    c970:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    c974:	2101      	movs	r1, #1
    c976:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    c97a:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    c97e:	9903      	ldr	r1, [sp, #12]
    c980:	2900      	cmp	r1, #0
    c982:	9302      	str	r3, [sp, #8]
    c984:	9001      	str	r0, [sp, #4]
    c986:	d001      	beq.n	c98c <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x2c>
    c988:	e7ff      	b.n	c98a <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x2a>
    c98a:	e004      	b.n	c996 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x36>
    c98c:	2000      	movs	r0, #0
    c98e:	9901      	ldr	r1, [sp, #4]
    c990:	6008      	str	r0, [r1, #0]
    c992:	e020      	b.n	c9d6 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x76>
    c994:	defe      	udf	#254	; 0xfe
    c996:	2000      	movs	r0, #0
    c998:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c99c:	9904      	ldr	r1, [sp, #16]
    c99e:	910b      	str	r1, [sp, #44]	; 0x2c
    c9a0:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    c9a4:	9108      	str	r1, [sp, #32]
    c9a6:	9a08      	ldr	r2, [sp, #32]
    c9a8:	a805      	add	r0, sp, #20
    c9aa:	9902      	ldr	r1, [sp, #8]
    c9ac:	f000 fa7b 	bl	cea6 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hc72815860861018cE>
    c9b0:	e7ff      	b.n	c9b2 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x52>
    c9b2:	9805      	ldr	r0, [sp, #20]
    c9b4:	9906      	ldr	r1, [sp, #24]
    c9b6:	9a07      	ldr	r2, [sp, #28]
    c9b8:	9b01      	ldr	r3, [sp, #4]
    c9ba:	60da      	str	r2, [r3, #12]
    c9bc:	6099      	str	r1, [r3, #8]
    c9be:	6058      	str	r0, [r3, #4]
    c9c0:	2001      	movs	r0, #1
    c9c2:	6018      	str	r0, [r3, #0]
    c9c4:	e007      	b.n	c9d6 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x76>
    c9c6:	9803      	ldr	r0, [sp, #12]
    c9c8:	2801      	cmp	r0, #1
    c9ca:	d00c      	beq.n	c9e6 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x86>
    c9cc:	e015      	b.n	c9fa <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x9a>
    c9ce:	2000      	movs	r0, #0
    c9d0:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    c9d4:	e7f7      	b.n	c9c6 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x66>
    c9d6:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    c9da:	07c0      	lsls	r0, r0, #31
    c9dc:	2800      	cmp	r0, #0
    c9de:	d1f6      	bne.n	c9ce <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x6e>
    c9e0:	e7f1      	b.n	c9c6 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x66>
    c9e2:	b00c      	add	sp, #48	; 0x30
    c9e4:	bd80      	pop	{r7, pc}
    c9e6:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    c9ea:	07c0      	lsls	r0, r0, #31
    c9ec:	2800      	cmp	r0, #0
    c9ee:	d0f8      	beq.n	c9e2 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x82>
    c9f0:	e7ff      	b.n	c9f2 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x92>
    c9f2:	2000      	movs	r0, #0
    c9f4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c9f8:	e7f3      	b.n	c9e2 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x82>
    c9fa:	e7f2      	b.n	c9e2 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x82>

0000c9fc <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE>:
    c9fc:	b580      	push	{r7, lr}
    c9fe:	b08a      	sub	sp, #40	; 0x28
    ca00:	9104      	str	r1, [sp, #16]
    ca02:	9205      	str	r2, [sp, #20]
    ca04:	9308      	str	r3, [sp, #32]
    ca06:	2100      	movs	r1, #0
    ca08:	f88d 101e 	strb.w	r1, [sp, #30]
    ca0c:	f88d 101f 	strb.w	r1, [sp, #31]
    ca10:	2101      	movs	r1, #1
    ca12:	f88d 101f 	strb.w	r1, [sp, #31]
    ca16:	f88d 101e 	strb.w	r1, [sp, #30]
    ca1a:	9904      	ldr	r1, [sp, #16]
    ca1c:	2900      	cmp	r1, #0
    ca1e:	9303      	str	r3, [sp, #12]
    ca20:	9002      	str	r0, [sp, #8]
    ca22:	d001      	beq.n	ca28 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x2c>
    ca24:	e7ff      	b.n	ca26 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x2a>
    ca26:	e004      	b.n	ca32 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x36>
    ca28:	2000      	movs	r0, #0
    ca2a:	9902      	ldr	r1, [sp, #8]
    ca2c:	6008      	str	r0, [r1, #0]
    ca2e:	e01f      	b.n	ca70 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x74>
    ca30:	defe      	udf	#254	; 0xfe
    ca32:	2000      	movs	r0, #0
    ca34:	f88d 001f 	strb.w	r0, [sp, #31]
    ca38:	9905      	ldr	r1, [sp, #20]
    ca3a:	9109      	str	r1, [sp, #36]	; 0x24
    ca3c:	f88d 001e 	strb.w	r0, [sp, #30]
    ca40:	9106      	str	r1, [sp, #24]
    ca42:	9906      	ldr	r1, [sp, #24]
    ca44:	9803      	ldr	r0, [sp, #12]
    ca46:	f000 fa38 	bl	ceba <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17heea96aaa2e3c2266E>
    ca4a:	9001      	str	r0, [sp, #4]
    ca4c:	9100      	str	r1, [sp, #0]
    ca4e:	e7ff      	b.n	ca50 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x54>
    ca50:	9801      	ldr	r0, [sp, #4]
    ca52:	9902      	ldr	r1, [sp, #8]
    ca54:	6048      	str	r0, [r1, #4]
    ca56:	9a00      	ldr	r2, [sp, #0]
    ca58:	608a      	str	r2, [r1, #8]
    ca5a:	2301      	movs	r3, #1
    ca5c:	600b      	str	r3, [r1, #0]
    ca5e:	e007      	b.n	ca70 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x74>
    ca60:	9804      	ldr	r0, [sp, #16]
    ca62:	2801      	cmp	r0, #1
    ca64:	d00c      	beq.n	ca80 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x84>
    ca66:	e015      	b.n	ca94 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x98>
    ca68:	2000      	movs	r0, #0
    ca6a:	f88d 001e 	strb.w	r0, [sp, #30]
    ca6e:	e7f7      	b.n	ca60 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x64>
    ca70:	f89d 001e 	ldrb.w	r0, [sp, #30]
    ca74:	07c0      	lsls	r0, r0, #31
    ca76:	2800      	cmp	r0, #0
    ca78:	d1f6      	bne.n	ca68 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x6c>
    ca7a:	e7f1      	b.n	ca60 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x64>
    ca7c:	b00a      	add	sp, #40	; 0x28
    ca7e:	bd80      	pop	{r7, pc}
    ca80:	f89d 001f 	ldrb.w	r0, [sp, #31]
    ca84:	07c0      	lsls	r0, r0, #31
    ca86:	2800      	cmp	r0, #0
    ca88:	d0f8      	beq.n	ca7c <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x80>
    ca8a:	e7ff      	b.n	ca8c <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x90>
    ca8c:	2000      	movs	r0, #0
    ca8e:	f88d 001f 	strb.w	r0, [sp, #31]
    ca92:	e7f3      	b.n	ca7c <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x80>
    ca94:	e7f2      	b.n	ca7c <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x80>

0000ca96 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E>:
    ca96:	b085      	sub	sp, #20
    ca98:	9000      	str	r0, [sp, #0]
    ca9a:	2000      	movs	r0, #0
    ca9c:	f88d 000b 	strb.w	r0, [sp, #11]
    caa0:	f88d 000a 	strb.w	r0, [sp, #10]
    caa4:	2001      	movs	r0, #1
    caa6:	f88d 000b 	strb.w	r0, [sp, #11]
    caaa:	f88d 000a 	strb.w	r0, [sp, #10]
    caae:	9800      	ldr	r0, [sp, #0]
    cab0:	2800      	cmp	r0, #0
    cab2:	4601      	mov	r1, r0
    cab4:	bf18      	it	ne
    cab6:	2101      	movne	r1, #1
    cab8:	2800      	cmp	r0, #0
    caba:	d001      	beq.n	cac0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x2a>
    cabc:	e7ff      	b.n	cabe <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x28>
    cabe:	e005      	b.n	cacc <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x36>
    cac0:	2000      	movs	r0, #0
    cac2:	f88d 000a 	strb.w	r0, [sp, #10]
    cac6:	9001      	str	r0, [sp, #4]
    cac8:	e007      	b.n	cada <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x44>
    caca:	defe      	udf	#254	; 0xfe
    cacc:	2000      	movs	r0, #0
    cace:	f88d 000b 	strb.w	r0, [sp, #11]
    cad2:	9800      	ldr	r0, [sp, #0]
    cad4:	9004      	str	r0, [sp, #16]
    cad6:	9001      	str	r0, [sp, #4]
    cad8:	e7ff      	b.n	cada <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x44>
    cada:	f89d 000a 	ldrb.w	r0, [sp, #10]
    cade:	07c0      	lsls	r0, r0, #31
    cae0:	2800      	cmp	r0, #0
    cae2:	d104      	bne.n	caee <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x58>
    cae4:	e7ff      	b.n	cae6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x50>
    cae6:	9800      	ldr	r0, [sp, #0]
    cae8:	2800      	cmp	r0, #0
    caea:	d107      	bne.n	cafc <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x66>
    caec:	e010      	b.n	cb10 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x7a>
    caee:	2000      	movs	r0, #0
    caf0:	f88d 000a 	strb.w	r0, [sp, #10]
    caf4:	e7f7      	b.n	cae6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x50>
    caf6:	9801      	ldr	r0, [sp, #4]
    caf8:	b005      	add	sp, #20
    cafa:	4770      	bx	lr
    cafc:	f89d 000b 	ldrb.w	r0, [sp, #11]
    cb00:	07c0      	lsls	r0, r0, #31
    cb02:	2800      	cmp	r0, #0
    cb04:	d0f7      	beq.n	caf6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x60>
    cb06:	e7ff      	b.n	cb08 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x72>
    cb08:	2000      	movs	r0, #0
    cb0a:	f88d 000b 	strb.w	r0, [sp, #11]
    cb0e:	e7f2      	b.n	caf6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x60>
    cb10:	e7f1      	b.n	caf6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x60>

0000cb12 <_ZN4core6option15Option$LT$T$GT$6as_mut17h1de41a42d046f353E>:
    cb12:	b084      	sub	sp, #16
    cb14:	9002      	str	r0, [sp, #8]
    cb16:	6801      	ldr	r1, [r0, #0]
    cb18:	2900      	cmp	r1, #0
    cb1a:	9000      	str	r0, [sp, #0]
    cb1c:	d001      	beq.n	cb22 <_ZN4core6option15Option$LT$T$GT$6as_mut17h1de41a42d046f353E+0x10>
    cb1e:	e7ff      	b.n	cb20 <_ZN4core6option15Option$LT$T$GT$6as_mut17h1de41a42d046f353E+0xe>
    cb20:	e003      	b.n	cb2a <_ZN4core6option15Option$LT$T$GT$6as_mut17h1de41a42d046f353E+0x18>
    cb22:	2000      	movs	r0, #0
    cb24:	9001      	str	r0, [sp, #4]
    cb26:	e005      	b.n	cb34 <_ZN4core6option15Option$LT$T$GT$6as_mut17h1de41a42d046f353E+0x22>
    cb28:	defe      	udf	#254	; 0xfe
    cb2a:	9800      	ldr	r0, [sp, #0]
    cb2c:	1d01      	adds	r1, r0, #4
    cb2e:	9103      	str	r1, [sp, #12]
    cb30:	9101      	str	r1, [sp, #4]
    cb32:	e7ff      	b.n	cb34 <_ZN4core6option15Option$LT$T$GT$6as_mut17h1de41a42d046f353E+0x22>
    cb34:	9801      	ldr	r0, [sp, #4]
    cb36:	b004      	add	sp, #16
    cb38:	4770      	bx	lr

0000cb3a <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>:
    cb3a:	b084      	sub	sp, #16
    cb3c:	9002      	str	r0, [sp, #8]
    cb3e:	9802      	ldr	r0, [sp, #8]
    cb40:	2800      	cmp	r0, #0
    cb42:	4602      	mov	r2, r0
    cb44:	bf18      	it	ne
    cb46:	2201      	movne	r2, #1
    cb48:	2800      	cmp	r0, #0
    cb4a:	9101      	str	r1, [sp, #4]
    cb4c:	d001      	beq.n	cb52 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x18>
    cb4e:	e7ff      	b.n	cb50 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x16>
    cb50:	e009      	b.n	cb66 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x2c>
    cb52:	f64e 409c 	movw	r0, #60572	; 0xec9c
    cb56:	f2c0 0001 	movt	r0, #1
    cb5a:	212b      	movs	r1, #43	; 0x2b
    cb5c:	9a01      	ldr	r2, [sp, #4]
    cb5e:	f00a fbb5 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cb62:	defe      	udf	#254	; 0xfe
    cb64:	defe      	udf	#254	; 0xfe
    cb66:	9802      	ldr	r0, [sp, #8]
    cb68:	9003      	str	r0, [sp, #12]
    cb6a:	9902      	ldr	r1, [sp, #8]
    cb6c:	2900      	cmp	r1, #0
    cb6e:	9000      	str	r0, [sp, #0]
    cb70:	d003      	beq.n	cb7a <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x40>
    cb72:	e7ff      	b.n	cb74 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>
    cb74:	9800      	ldr	r0, [sp, #0]
    cb76:	b004      	add	sp, #16
    cb78:	4770      	bx	lr
    cb7a:	e7fb      	b.n	cb74 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>

0000cb7c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>:
    cb7c:	b081      	sub	sp, #4
    cb7e:	2100      	movs	r1, #0
    cb80:	6001      	str	r1, [r0, #0]
    cb82:	b001      	add	sp, #4
    cb84:	4770      	bx	lr

0000cb86 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha7a9542e2459a97dE>:
    cb86:	b580      	push	{r7, lr}
    cb88:	b082      	sub	sp, #8
    cb8a:	9001      	str	r0, [sp, #4]
    cb8c:	f7ff ff83 	bl	ca96 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E>
    cb90:	9000      	str	r0, [sp, #0]
    cb92:	e7ff      	b.n	cb94 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha7a9542e2459a97dE+0xe>
    cb94:	9800      	ldr	r0, [sp, #0]
    cb96:	b002      	add	sp, #8
    cb98:	bd80      	pop	{r7, pc}

0000cb9a <_ZN22piet_embedded_graphics7display18set_display_pixels17h52aeff59745589e9E>:
        item
    ).expect("draw blocks fail");
}

/// Draw the pixel colours to the display at the window from (sx,sy) to (ex,ey)
pub fn set_display_pixels<P: IntoIterator<Item = u16>>(sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    cb9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb9e:	b095      	sub	sp, #84	; 0x54
    cba0:	f8dd c078 	ldr.w	ip, [sp, #120]	; 0x78
    cba4:	469e      	mov	lr, r3
    cba6:	4614      	mov	r4, r2
    cba8:	460d      	mov	r5, r1
    cbaa:	4606      	mov	r6, r0
    cbac:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    cbb0:	f8ad 104e 	strh.w	r1, [sp, #78]	; 0x4e
    cbb4:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
    cbb8:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    cbbc:	af0a      	add	r7, sp, #40	; 0x28
    unsafe { DISPLAY.set_pixels(sx, sy, ex, ey, colors) }
    cbbe:	46b8      	mov	r8, r7
    cbc0:	9009      	str	r0, [sp, #36]	; 0x24
    cbc2:	e8bc 0e01 	ldmia.w	ip!, {r0, r9, sl, fp}
    cbc6:	e8a8 0e01 	stmia.w	r8!, {r0, r9, sl, fp}
    cbca:	9108      	str	r1, [sp, #32]
    cbcc:	e89c 0e03 	ldmia.w	ip, {r0, r1, r9, sl, fp}
    cbd0:	e888 0e03 	stmia.w	r8, {r0, r1, r9, sl, fp}
    cbd4:	4668      	mov	r0, sp
    cbd6:	6047      	str	r7, [r0, #4]
    cbd8:	6003      	str	r3, [r0, #0]
    cbda:	f240 1048 	movw	r0, #328	; 0x148
    cbde:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cbe2:	9909      	ldr	r1, [sp, #36]	; 0x24
    cbe4:	9b08      	ldr	r3, [sp, #32]
    cbe6:	9207      	str	r2, [sp, #28]
    cbe8:	461a      	mov	r2, r3
    cbea:	9b07      	ldr	r3, [sp, #28]
    cbec:	f8cd e018 	str.w	lr, [sp, #24]
    cbf0:	9405      	str	r4, [sp, #20]
    cbf2:	9504      	str	r5, [sp, #16]
    cbf4:	9603      	str	r6, [sp, #12]
    cbf6:	f000 f808 	bl	cc0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E>
    cbfa:	9002      	str	r0, [sp, #8]
    cbfc:	e7ff      	b.n	cbfe <_ZN22piet_embedded_graphics7display18set_display_pixels17h52aeff59745589e9E+0x64>
}
    cbfe:	9802      	ldr	r0, [sp, #8]
    cc00:	f000 0001 	and.w	r0, r0, #1
    cc04:	b015      	add	sp, #84	; 0x54
    cc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cc0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E>:
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    cc0a:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc0c:	b09d      	sub	sp, #116	; 0x74
    cc0e:	f8dd c08c 	ldr.w	ip, [sp, #140]	; 0x8c
    cc12:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
    cc16:	461c      	mov	r4, r3
    cc18:	4615      	mov	r5, r2
    cc1a:	460e      	mov	r6, r1
    cc1c:	9016      	str	r0, [sp, #88]	; 0x58
    cc1e:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
    cc22:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
    cc26:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    cc2a:	f8ad e062 	strh.w	lr, [sp, #98]	; 0x62
    cc2e:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
    cc30:	f88d 7057 	strb.w	r7, [sp, #87]	; 0x57
    cc34:	2701      	movs	r7, #1
    cc36:	f88d 7057 	strb.w	r7, [sp, #87]	; 0x57
    cc3a:	466f      	mov	r7, sp
    cc3c:	f8c7 e000 	str.w	lr, [r7]
    cc40:	900a      	str	r0, [sp, #40]	; 0x28
    cc42:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    cc46:	9408      	str	r4, [sp, #32]
    cc48:	9507      	str	r5, [sp, #28]
    cc4a:	9606      	str	r6, [sp, #24]
    cc4c:	f7fd f98b 	bl	9f66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
    cc50:	9005      	str	r0, [sp, #20]
    cc52:	e7ff      	b.n	cc54 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0x4a>
    cc54:	9805      	ldr	r0, [sp, #20]
    cc56:	f000 0001 	and.w	r0, r0, #1
    cc5a:	f7fc f86a 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    cc5e:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    cc62:	e7ff      	b.n	cc64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0x5a>
    cc64:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    cc68:	07c1      	lsls	r1, r0, #31
    cc6a:	2900      	cmp	r1, #0
    cc6c:	d001      	beq.n	cc72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0x68>
    cc6e:	e7ff      	b.n	cc70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0x66>
    cc70:	e016      	b.n	cca0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0x96>
    cc72:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
    cc74:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
    cc78:	a80c      	add	r0, sp, #48	; 0x30
    cc7a:	9909      	ldr	r1, [sp, #36]	; 0x24
    cc7c:	4602      	mov	r2, r0
    cc7e:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
    cc82:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
    cc86:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
    cc8a:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
    cc8e:	990a      	ldr	r1, [sp, #40]	; 0x28
    cc90:	9004      	str	r0, [sp, #16]
    cc92:	4608      	mov	r0, r1
    cc94:	9904      	ldr	r1, [sp, #16]
    cc96:	f000 f84b 	bl	cd30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E>
    cc9a:	9003      	str	r0, [sp, #12]
    cc9c:	e00d      	b.n	ccba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0xb0>
        self.set_address_window(sx, sy, ex, ey)?;
    cc9e:	defe      	udf	#254	; 0xfe
    cca0:	f005 f955 	bl	11f4e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    cca4:	e003      	b.n	ccae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0xa4>
    }
    cca6:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    ccaa:	b01d      	add	sp, #116	; 0x74
    ccac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
    ccae:	f008 fab9 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    ccb2:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    ccb6:	e7ff      	b.n	ccb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0xae>
    ccb8:	e034      	b.n	cd24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0x11a>
        self.write_pixels(colors) ? ;
    ccba:	9803      	ldr	r0, [sp, #12]
    ccbc:	f000 0001 	and.w	r0, r0, #1
    ccc0:	f7fc f837 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    ccc4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    ccc8:	e7ff      	b.n	ccca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0xc0>
    ccca:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    ccce:	07c1      	lsls	r1, r0, #31
    ccd0:	2900      	cmp	r1, #0
    ccd2:	d001      	beq.n	ccd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0xce>
    ccd4:	e7ff      	b.n	ccd6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0xcc>
    ccd6:	e004      	b.n	cce2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0xd8>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    ccd8:	f006 fb28 	bl	1332c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    ccdc:	9002      	str	r0, [sp, #8]
    ccde:	e009      	b.n	ccf4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0xea>
        self.write_pixels(colors) ? ;
    cce0:	defe      	udf	#254	; 0xfe
    cce2:	f005 f934 	bl	11f4e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    cce6:	e7ff      	b.n	cce8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0xde>
    cce8:	f008 fa9c 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    ccec:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    ccf0:	e7ff      	b.n	ccf2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0xe8>
    ccf2:	e017      	b.n	cd24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0x11a>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    ccf4:	f64e 41c7 	movw	r1, #60615	; 0xecc7
    ccf8:	f2c0 0101 	movt	r1, #1
    ccfc:	f64e 5324 	movw	r3, #60708	; 0xed24
    cd00:	f2c0 0301 	movt	r3, #1
    cd04:	220e      	movs	r2, #14
    cd06:	9802      	ldr	r0, [sp, #8]
    cd08:	f7fb ffda 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    cd0c:	e7ff      	b.n	cd0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0x104>
    cd0e:	2000      	movs	r0, #0
        Ok(())
    cd10:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    cd14:	e7c7      	b.n	cca6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0x9c>
    cd16:	2000      	movs	r0, #0
    cd18:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
    cd1c:	9809      	ldr	r0, [sp, #36]	; 0x24
    cd1e:	f7fb fd82 	bl	8826 <_ZN4core3ptr13drop_in_place17h63bc181655880baeE>
    cd22:	e7c0      	b.n	cca6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0x9c>
    cd24:	f89d 0057 	ldrb.w	r0, [sp, #87]	; 0x57
    cd28:	07c0      	lsls	r0, r0, #31
    cd2a:	2800      	cmp	r0, #0
    cd2c:	d1f3      	bne.n	cd16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0x10c>
    cd2e:	e7ba      	b.n	cca6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17ha14024c7b7e53bd9E+0x9c>

0000cd30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
    cd30:	b5b0      	push	{r4, r5, r7, lr}
    cd32:	b0b0      	sub	sp, #192	; 0xc0
    cd34:	902a      	str	r0, [sp, #168]	; 0xa8
    cd36:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
    cd38:	f88d 20a7 	strb.w	r2, [sp, #167]	; 0xa7
    cd3c:	2301      	movs	r3, #1
    cd3e:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
    cd42:	232c      	movs	r3, #44	; 0x2c
    cd44:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    cd48:	920a      	str	r2, [sp, #40]	; 0x28
    cd4a:	9209      	str	r2, [sp, #36]	; 0x24
    cd4c:	9209      	str	r2, [sp, #36]	; 0x24
    cd4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cd50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd52:	f89d c023 	ldrb.w	ip, [sp, #35]	; 0x23
    cd56:	9007      	str	r0, [sp, #28]
    cd58:	9106      	str	r1, [sp, #24]
    cd5a:	4661      	mov	r1, ip
    cd5c:	f7fd f812 	bl	9d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    cd60:	9005      	str	r0, [sp, #20]
    cd62:	e7ff      	b.n	cd64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x34>
    cd64:	9805      	ldr	r0, [sp, #20]
    cd66:	f000 0001 	and.w	r0, r0, #1
    cd6a:	f7fb ffe2 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    cd6e:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    cd72:	e7ff      	b.n	cd74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x44>
    cd74:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    cd78:	07c1      	lsls	r1, r0, #31
    cd7a:	2900      	cmp	r1, #0
    cd7c:	d001      	beq.n	cd82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x52>
    cd7e:	e7ff      	b.n	cd80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x50>
    cd80:	e015      	b.n	cdae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x7e>
    cd82:	2000      	movs	r0, #0
        for color in colors {
    cd84:	f88d 00a7 	strb.w	r0, [sp, #167]	; 0xa7
    cd88:	a815      	add	r0, sp, #84	; 0x54
    cd8a:	9906      	ldr	r1, [sp, #24]
    cd8c:	4602      	mov	r2, r0
    cd8e:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
    cd92:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
    cd96:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
    cd9a:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
    cd9e:	a90b      	add	r1, sp, #44	; 0x2c
    cda0:	9004      	str	r0, [sp, #16]
    cda2:	4608      	mov	r0, r1
    cda4:	9904      	ldr	r1, [sp, #16]
    cda6:	f7fb fdb9 	bl	891c <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h75849c4c3d7f7cbaE>
    cdaa:	e00d      	b.n	cdc8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x98>
        self.write_command(Instruction::RAMWR, None)?;
    cdac:	defe      	udf	#254	; 0xfe
    cdae:	f005 f8ce 	bl	11f4e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    cdb2:	e003      	b.n	cdbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x8c>
    }
    cdb4:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
    cdb8:	b030      	add	sp, #192	; 0xc0
    cdba:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
    cdbc:	f008 fa32 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    cdc0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    cdc4:	e7ff      	b.n	cdc6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x96>
    cdc6:	e068      	b.n	ce9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x16a>
    cdc8:	a80b      	add	r0, sp, #44	; 0x2c
    cdca:	a91e      	add	r1, sp, #120	; 0x78
        for color in colors {
    cdcc:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    cdd0:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    cdd4:	e890 501c 	ldmia.w	r0, {r2, r3, r4, ip, lr}
    cdd8:	e881 501c 	stmia.w	r1, {r2, r3, r4, ip, lr}
    cddc:	e7ff      	b.n	cdde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0xae>
    cdde:	a81e      	add	r0, sp, #120	; 0x78
    cde0:	f7fb fdb5 	bl	894e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf9cb6d84c59cafdaE>
    cde4:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
    cde8:	f8ad 00a0 	strh.w	r0, [sp, #160]	; 0xa0
    cdec:	e7ff      	b.n	cdee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0xbe>
    cdee:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
    cdf2:	4601      	mov	r1, r0
    cdf4:	2800      	cmp	r0, #0
    cdf6:	d001      	beq.n	cdfc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0xcc>
    cdf8:	e7ff      	b.n	cdfa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0xca>
    cdfa:	e004      	b.n	ce06 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0xd6>
    cdfc:	a81e      	add	r0, sp, #120	; 0x78
        }
    cdfe:	f7fb fd1e 	bl	883e <_ZN4core3ptr13drop_in_place17hf56ef57525333fd2E>
    ce02:	e02e      	b.n	ce62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x132>
        for color in colors {
    ce04:	defe      	udf	#254	; 0xfe
    ce06:	f8bd 00a2 	ldrh.w	r0, [sp, #162]	; 0xa2
    ce0a:	f8ad 00ba 	strh.w	r0, [sp, #186]	; 0xba
    ce0e:	f8ad 00bc 	strh.w	r0, [sp, #188]	; 0xbc
    ce12:	f8ad 00be 	strh.w	r0, [sp, #190]	; 0xbe
            self.write_word(color)?;
    ce16:	9907      	ldr	r1, [sp, #28]
    ce18:	9003      	str	r0, [sp, #12]
    ce1a:	4608      	mov	r0, r1
    ce1c:	9903      	ldr	r1, [sp, #12]
    ce1e:	f7fc fee2 	bl	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    ce22:	9002      	str	r0, [sp, #8]
    ce24:	e7ff      	b.n	ce26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0xf6>
    ce26:	9802      	ldr	r0, [sp, #8]
    ce28:	f000 0001 	and.w	r0, r0, #1
    ce2c:	f7fb ff81 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    ce30:	f88d 00a6 	strb.w	r0, [sp, #166]	; 0xa6
    ce34:	e7ff      	b.n	ce36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x106>
    ce36:	f89d 00a6 	ldrb.w	r0, [sp, #166]	; 0xa6
    ce3a:	07c1      	lsls	r1, r0, #31
    ce3c:	2900      	cmp	r1, #0
    ce3e:	d001      	beq.n	ce44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x114>
    ce40:	e7ff      	b.n	ce42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x112>
    ce42:	e001      	b.n	ce48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x118>
        for color in colors {
    ce44:	e7cb      	b.n	cdde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0xae>
            self.write_word(color)?;
    ce46:	defe      	udf	#254	; 0xfe
    ce48:	f005 f881 	bl	11f4e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    ce4c:	e7ff      	b.n	ce4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x11e>
    ce4e:	f008 f9e9 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    ce52:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    ce56:	e7ff      	b.n	ce58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x128>
    ce58:	a81e      	add	r0, sp, #120	; 0x78
        }
    ce5a:	f7fb fcf0 	bl	883e <_ZN4core3ptr13drop_in_place17hf56ef57525333fd2E>
    ce5e:	e7ff      	b.n	ce60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x130>
    }
    ce60:	e01b      	b.n	ce9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x16a>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    ce62:	f006 fa63 	bl	1332c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    ce66:	9001      	str	r0, [sp, #4]
    ce68:	e7ff      	b.n	ce6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x13a>
    ce6a:	f64e 41c7 	movw	r1, #60615	; 0xecc7
    ce6e:	f2c0 0101 	movt	r1, #1
    ce72:	f64e 5334 	movw	r3, #60724	; 0xed34
    ce76:	f2c0 0301 	movt	r3, #1
    ce7a:	220e      	movs	r2, #14
    ce7c:	9801      	ldr	r0, [sp, #4]
    ce7e:	f7fb ff1f 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    ce82:	e7ff      	b.n	ce84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x154>
    ce84:	2000      	movs	r0, #0
        Ok(())
    ce86:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    }
    ce8a:	e793      	b.n	cdb4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x84>
    ce8c:	2000      	movs	r0, #0
    ce8e:	f88d 00a7 	strb.w	r0, [sp, #167]	; 0xa7
    ce92:	9806      	ldr	r0, [sp, #24]
    ce94:	f7fb fcc7 	bl	8826 <_ZN4core3ptr13drop_in_place17h63bc181655880baeE>
    ce98:	e78c      	b.n	cdb4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x84>
    ce9a:	f89d 00a7 	ldrb.w	r0, [sp, #167]	; 0xa7
    ce9e:	07c0      	lsls	r0, r0, #31
    cea0:	2800      	cmp	r0, #0
    cea2:	d1f3      	bne.n	ce8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x15c>
    cea4:	e786      	b.n	cdb4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h923e916669c8c400E+0x84>

0000cea6 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hc72815860861018cE>:
    cea6:	b580      	push	{r7, lr}
    cea8:	b082      	sub	sp, #8
    ceaa:	9200      	str	r2, [sp, #0]
    ceac:	9101      	str	r1, [sp, #4]
    ceae:	9a00      	ldr	r2, [sp, #0]
    ceb0:	f003 fe57 	bl	10b62 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hb16abfee8f88907eE>
    ceb4:	e7ff      	b.n	ceb6 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hc72815860861018cE+0x10>
    ceb6:	b002      	add	sp, #8
    ceb8:	bd80      	pop	{r7, pc}

0000ceba <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17heea96aaa2e3c2266E>:
    ceba:	b580      	push	{r7, lr}
    cebc:	b084      	sub	sp, #16
    cebe:	9102      	str	r1, [sp, #8]
    cec0:	9003      	str	r0, [sp, #12]
    cec2:	9902      	ldr	r1, [sp, #8]
    cec4:	f003 fe5f 	bl	10b86 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h06eb33e167ea87a6E>
    cec8:	9001      	str	r0, [sp, #4]
    ceca:	9100      	str	r1, [sp, #0]
    cecc:	e7ff      	b.n	cece <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17heea96aaa2e3c2266E+0x14>
    cece:	9801      	ldr	r0, [sp, #4]
    ced0:	9900      	ldr	r1, [sp, #0]
    ced2:	b004      	add	sp, #16
    ced4:	bd80      	pop	{r7, pc}

0000ced6 <_ZN8libchip814Chip8$LT$T$GT$3new17h80d41819f2580e6eE>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    ced6:	b570      	push	{r4, r5, r6, lr}
    ced8:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    cedc:	f10d 0e04 	add.w	lr, sp, #4
    cee0:	f50e 5182 	add.w	r1, lr, #4160	; 0x1040
    cee4:	2200      	movs	r2, #0
        Self {
            v: [0; REGS],
    cee6:	9209      	str	r2, [sp, #36]	; 0x24
    cee8:	9208      	str	r2, [sp, #32]
    ceea:	9207      	str	r2, [sp, #28]
    ceec:	9206      	str	r2, [sp, #24]
    ceee:	ab0a      	add	r3, sp, #40	; 0x28
    cef0:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    cef4:	9005      	str	r0, [sp, #20]
    cef6:	4618      	mov	r0, r3
    cef8:	9104      	str	r1, [sp, #16]
    cefa:	4661      	mov	r1, ip
    cefc:	9203      	str	r2, [sp, #12]
    cefe:	9302      	str	r3, [sp, #8]
    cf00:	f8cd c004 	str.w	ip, [sp, #4]
    cf04:	f010 fdb2 	bl	1da6c <__aeabi_memclr>
            stack: [0; STACKS],
    cf08:	9803      	ldr	r0, [sp, #12]
    cf0a:	9904      	ldr	r1, [sp, #16]
    cf0c:	6008      	str	r0, [r1, #0]
    cf0e:	f841 0c04 	str.w	r0, [r1, #-4]
    cf12:	f841 0c08 	str.w	r0, [r1, #-8]
    cf16:	f841 0c0c 	str.w	r0, [r1, #-12]
    cf1a:	f841 0c10 	str.w	r0, [r1, #-16]
    cf1e:	f841 0c14 	str.w	r0, [r1, #-20]
    cf22:	f841 0c18 	str.w	r0, [r1, #-24]
    cf26:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    cf2a:	6088      	str	r0, [r1, #8]
    cf2c:	6048      	str	r0, [r1, #4]
        Self {
    cf2e:	9a06      	ldr	r2, [sp, #24]
    cf30:	9b07      	ldr	r3, [sp, #28]
    cf32:	f8dd c020 	ldr.w	ip, [sp, #32]
    cf36:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    cf3a:	9c05      	ldr	r4, [sp, #20]
    cf3c:	f8c4 e040 	str.w	lr, [r4, #64]	; 0x40
    cf40:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
    cf44:	63a3      	str	r3, [r4, #56]	; 0x38
    cf46:	6362      	str	r2, [r4, #52]	; 0x34
    cf48:	8220      	strh	r0, [r4, #16]
    cf4a:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
    cf4e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    cf52:	8260      	strh	r0, [r4, #18]
    cf54:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
    cf58:	f104 0047 	add.w	r0, r4, #71	; 0x47
    cf5c:	9902      	ldr	r1, [sp, #8]
    cf5e:	9a01      	ldr	r2, [sp, #4]
    cf60:	f010 fd88 	bl	1da74 <__aeabi_memcpy>
    cf64:	9905      	ldr	r1, [sp, #20]
    cf66:	f101 0214 	add.w	r2, r1, #20
    cf6a:	f10d 0e08 	add.w	lr, sp, #8
    cf6e:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    cf72:	2320      	movs	r3, #32
    cf74:	9000      	str	r0, [sp, #0]
    cf76:	4610      	mov	r0, r2
    cf78:	461a      	mov	r2, r3
    cf7a:	f010 fd7b 	bl	1da74 <__aeabi_memcpy>
    cf7e:	9904      	ldr	r1, [sp, #16]
    cf80:	684a      	ldr	r2, [r1, #4]
    cf82:	688b      	ldr	r3, [r1, #8]
    cf84:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    cf88:	f8d1 e010 	ldr.w	lr, [r1, #16]
    cf8c:	9c05      	ldr	r4, [sp, #20]
    cf8e:	6063      	str	r3, [r4, #4]
    cf90:	6022      	str	r2, [r4, #0]
    cf92:	f8c4 e00c 	str.w	lr, [r4, #12]
    cf96:	f8c4 c008 	str.w	ip, [r4, #8]
    cf9a:	f241 0247 	movw	r2, #4167	; 0x1047
    cf9e:	9b03      	ldr	r3, [sp, #12]
    cfa0:	54a3      	strb	r3, [r4, r2]
            running: false,
            hw,
        }
    }
    cfa2:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    cfa6:	bd70      	pop	{r4, r5, r6, pc}

0000cfa8 <_ZN8libchip814Chip8$LT$T$GT$3pop17h70e7cf8d6b1182e4E>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    cfa8:	b580      	push	{r7, lr}
    cfaa:	b086      	sub	sp, #24
    cfac:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    cfae:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    cfb2:	2201      	movs	r2, #1
    cfb4:	9003      	str	r0, [sp, #12]
    cfb6:	4608      	mov	r0, r1
    cfb8:	4611      	mov	r1, r2
    cfba:	f009 fb06 	bl	165ca <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>
    cfbe:	9002      	str	r0, [sp, #8]
    cfc0:	e7ff      	b.n	cfc2 <_ZN8libchip814Chip8$LT$T$GT$3pop17h70e7cf8d6b1182e4E+0x1a>
    cfc2:	9802      	ldr	r0, [sp, #8]
    cfc4:	9903      	ldr	r1, [sp, #12]
    cfc6:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    cfca:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    cfce:	4613      	mov	r3, r2
    cfd0:	2a0f      	cmp	r2, #15
    cfd2:	9301      	str	r3, [sp, #4]
    cfd4:	d80a      	bhi.n	cfec <_ZN8libchip814Chip8$LT$T$GT$3pop17h70e7cf8d6b1182e4E+0x44>
    cfd6:	e7ff      	b.n	cfd8 <_ZN8libchip814Chip8$LT$T$GT$3pop17h70e7cf8d6b1182e4E+0x30>
    cfd8:	9803      	ldr	r0, [sp, #12]
    cfda:	9901      	ldr	r1, [sp, #4]
    cfdc:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    cfe0:	8a92      	ldrh	r2, [r2, #20]
    cfe2:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    cfe6:	4610      	mov	r0, r2
    cfe8:	b006      	add	sp, #24
    cfea:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    cfec:	f64e 509c 	movw	r0, #60828	; 0xed9c
    cff0:	f2c0 0001 	movt	r0, #1
    cff4:	2210      	movs	r2, #16
    cff6:	9901      	ldr	r1, [sp, #4]
    cff8:	f00a f97e 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    cffc:	defe      	udf	#254	; 0xfe

0000cffe <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E>:
    pub fn run(mut self, rom: &[u8]) {
    cffe:	b580      	push	{r7, lr}
    d000:	b086      	sub	sp, #24
    d002:	9104      	str	r1, [sp, #16]
    d004:	9205      	str	r2, [sp, #20]
        self.setup();
    d006:	9003      	str	r0, [sp, #12]
    d008:	9202      	str	r2, [sp, #8]
    d00a:	9101      	str	r1, [sp, #4]
    d00c:	f003 ff0d 	bl	10e2a <_ZN8libchip814Chip8$LT$T$GT$5setup17ha7902fed1bdb33a6E>
    d010:	e7ff      	b.n	d012 <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x14>
        self.load(rom);
    d012:	9803      	ldr	r0, [sp, #12]
    d014:	9901      	ldr	r1, [sp, #4]
    d016:	9a02      	ldr	r2, [sp, #8]
    d018:	f003 fdc7 	bl	10baa <_ZN8libchip814Chip8$LT$T$GT$4load17h28b293d7e5188fe6E>
    d01c:	e7ff      	b.n	d01e <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x20>
        while self.running {
    d01e:	e7ff      	b.n	d020 <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x22>
    d020:	f241 0047 	movw	r0, #4167	; 0x1047
    d024:	9903      	ldr	r1, [sp, #12]
    d026:	5c08      	ldrb	r0, [r1, r0]
    d028:	07c0      	lsls	r0, r0, #31
    d02a:	2800      	cmp	r0, #0
    d02c:	d101      	bne.n	d032 <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x34>
    d02e:	e7ff      	b.n	d030 <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x32>
    }
    d030:	e00c      	b.n	d04c <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x4e>
            self.sched();
    d032:	9803      	ldr	r0, [sp, #12]
    d034:	f003 fe83 	bl	10d3e <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E>
    d038:	e7ff      	b.n	d03a <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x3c>
            self.eval();
    d03a:	9803      	ldr	r0, [sp, #12]
    d03c:	f000 f808 	bl	d050 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E>
    d040:	e7ff      	b.n	d042 <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x44>
            self.next();
    d042:	9803      	ldr	r0, [sp, #12]
    d044:	f003 fdec 	bl	10c20 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E>
    d048:	e7ff      	b.n	d04a <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x4c>
        while self.running {
    d04a:	e7e9      	b.n	d020 <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x22>
    }
    d04c:	b006      	add	sp, #24
    d04e:	bd80      	pop	{r7, pc}

0000d050 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    d050:	b570      	push	{r4, r5, r6, lr}
    d052:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    d056:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    d05a:	8a41      	ldrh	r1, [r0, #18]
    d05c:	460a      	mov	r2, r1
    d05e:	2300      	movs	r3, #0
    d060:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    d064:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    d068:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    d06c:	f043 82a9 	bne.w	105c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3572>
    d070:	e7ff      	b.n	d072 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22>
    d072:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d076:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    d07a:	1842      	adds	r2, r0, r1
    d07c:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d080:	4613      	mov	r3, r2
    d082:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    d086:	8a42      	ldrh	r2, [r0, #18]
    d088:	3201      	adds	r2, #1
    d08a:	fa1f fc82 	uxth.w	ip, r2
    d08e:	4696      	mov	lr, r2
    d090:	4594      	cmp	ip, r2
    d092:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    d096:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    d09a:	f043 829d 	bne.w	105d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3588>
    d09e:	e7ff      	b.n	d0a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x50>
    d0a0:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    d0a4:	b281      	uxth	r1, r0
    d0a6:	460a      	mov	r2, r1
    d0a8:	2300      	movs	r3, #0
    d0aa:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    d0ae:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    d0b2:	f043 829d 	bne.w	105f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x35a0>
    d0b6:	e7ff      	b.n	d0b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x68>
    d0b8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d0bc:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    d0c0:	1842      	adds	r2, r0, r1
    d0c2:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d0c6:	4613      	mov	r3, r2
    d0c8:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    d0cc:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    d0d0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    d0d4:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    d0d8:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    d0dc:	e7ff      	b.n	d0de <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x8e>
    d0de:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    d0e2:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    d0e6:	ea40 0201 	orr.w	r2, r0, r1
    d0ea:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    d0ee:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d0f2:	f36f 321f 	bfc	r2, #12, #20
    d0f6:	4613      	mov	r3, r2
    d0f8:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    d0fc:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d100:	f002 020f 	and.w	r2, r2, #15
    d104:	4694      	mov	ip, r2
    d106:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    d10a:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    d10e:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    d112:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    d116:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    d11a:	e7ff      	b.n	d11c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xcc>
    d11c:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    d120:	f000 010f 	and.w	r1, r0, #15
    d124:	460a      	mov	r2, r1
    d126:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    d12a:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d12e:	0909      	lsrs	r1, r1, #4
    d130:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    d134:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    d138:	e7ff      	b.n	d13a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xea>
    d13a:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    d13e:	f000 010f 	and.w	r1, r0, #15
    d142:	460a      	mov	r2, r1
    d144:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    d148:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d14c:	b2cb      	uxtb	r3, r1
    d14e:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    d152:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d156:	0b09      	lsrs	r1, r1, #12
    d158:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    d15c:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    d160:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    d164:	e7ff      	b.n	d166 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x116>
    d166:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    d16a:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    d16e:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    d172:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    d176:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    d17a:	e7ff      	b.n	d17c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x12c>
    d17c:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    d180:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    d184:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d188:	0912      	lsrs	r2, r2, #4
    d18a:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    d18e:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    d192:	e7ff      	b.n	d194 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x144>
    d194:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    d198:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    d19c:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d1a0:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    d1a4:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    d1a8:	e7ff      	b.n	d1aa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x15a>
    d1aa:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    d1ae:	f000 010f 	and.w	r1, r0, #15
        match (
    d1b2:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    d1b6:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    d1ba:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    d1be:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    d1c2:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    d1c6:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    d1ca:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    d1ce:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    d1d2:	468e      	mov	lr, r1
    d1d4:	290f      	cmp	r1, #15
    d1d6:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    d1da:	d84f      	bhi.n	d27c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
    d1dc:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    d1e0:	e8df f011 	tbh	[pc, r1, lsl #1]
    d1e4:	03010010 	.word	0x03010010
    d1e8:	042d0394 	.word	0x042d0394
    d1ec:	002c04cd 	.word	0x002c04cd
    d1f0:	06af061a 	.word	0x06af061a
    d1f4:	00750032 	.word	0x00750032
    d1f8:	0edf0e54 	.word	0x0edf0e54
    d1fc:	101e0f80 	.word	0x101e0f80
    d200:	0095007b 	.word	0x0095007b
    d204:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    d208:	2800      	cmp	r0, #0
    d20a:	f040 825c 	bne.w	d6c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x676>
    d20e:	e7ff      	b.n	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1c0>
    d210:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d214:	280e      	cmp	r0, #14
    d216:	f040 8256 	bne.w	d6c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x676>
    d21a:	e7ff      	b.n	d21c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1cc>
    d21c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d220:	4601      	mov	r1, r0
    d222:	2800      	cmp	r0, #0
    d224:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    d228:	f000 80c0 	beq.w	d3ac <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x35c>
    d22c:	e7ff      	b.n	d22e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1de>
    d22e:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    d232:	b281      	uxth	r1, r0
    d234:	290e      	cmp	r1, #14
    d236:	f000 81b1 	beq.w	d59c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x54c>
    d23a:	e244      	b.n	d6c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x676>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    d23c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d240:	2800      	cmp	r0, #0
    d242:	f000 853c 	beq.w	dcbe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc6e>
    d246:	e019      	b.n	d27c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    d248:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d24c:	4601      	mov	r1, r0
    d24e:	280e      	cmp	r0, #14
    d250:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    d254:	d812      	bhi.n	d27c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
    d256:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    d25a:	e8df f011 	tbh	[pc, r1, lsl #1]
    d25e:	0719      	.short	0x0719
    d260:	086207bb 	.word	0x086207bb
    d264:	09b00909 	.word	0x09b00909
    d268:	0b360a72 	.word	0x0b360a72
    d26c:	000f0beb 	.word	0x000f0beb
    d270:	000f000f 	.word	0x000f000f
    d274:	000f000f 	.word	0x000f000f
    d278:	0caf000f 	.word	0x0caf000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    d27c:	f64f 10a8 	movw	r0, #63912	; 0xf9a8
    d280:	f2c0 0001 	movt	r0, #1
    d284:	6801      	ldr	r1, [r0, #0]
    d286:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d28a:	f100 0212 	add.w	r2, r0, #18
    d28e:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    d292:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    d296:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    d29a:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    d29e:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    d2a2:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    d2a6:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    d2aa:	f648 2ce7 	movw	ip, #35559	; 0x8ae7
    d2ae:	f2c0 0c01 	movt	ip, #1
    d2b2:	4610      	mov	r0, r2
    d2b4:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    d2b8:	4661      	mov	r1, ip
    d2ba:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    d2be:	f7fd fbdc 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d2c2:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    d2c6:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    d2ca:	f003 b938 	b.w	1053e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x34ee>
            (9, _, _, 0) => {
    d2ce:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d2d2:	2800      	cmp	r0, #0
    d2d4:	f001 852d 	beq.w	ed32 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1ce2>
    d2d8:	e7d0      	b.n	d27c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            (0xe, _, 9, 0xe) => {
    d2da:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d2de:	4601      	mov	r1, r0
    d2e0:	2809      	cmp	r0, #9
    d2e2:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    d2e6:	d006      	beq.n	d2f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a6>
    d2e8:	e7ff      	b.n	d2ea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x29a>
    d2ea:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    d2ee:	b281      	uxth	r1, r0
    d2f0:	290a      	cmp	r1, #10
    d2f2:	d006      	beq.n	d302 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b2>
    d2f4:	e7c2      	b.n	d27c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
    d2f6:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d2fa:	280e      	cmp	r0, #14
    d2fc:	f002 814a 	beq.w	f594 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2544>
    d300:	e7bc      	b.n	d27c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            (0xe, _, 0xa, 0x1) => {
    d302:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d306:	2801      	cmp	r0, #1
    d308:	f002 81ea 	beq.w	f6e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2690>
    d30c:	e7b6      	b.n	d27c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            (0xf, _, 0, 7) => {
    d30e:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d312:	4601      	mov	r1, r0
    d314:	2806      	cmp	r0, #6
    d316:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    d31a:	d8af      	bhi.n	d27c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
    d31c:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    d320:	e8df f001 	tbb	[pc, r1]
    d324:	322c1505 	.word	0x322c1505
    d328:	003e3804 	.word	0x003e3804
    d32c:	e7a6      	b.n	d27c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
    d32e:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d332:	4601      	mov	r1, r0
    d334:	2807      	cmp	r0, #7
    d336:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    d33a:	f002 8277 	beq.w	f82c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x27dc>
    d33e:	e7ff      	b.n	d340 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f0>
    d340:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    d344:	b281      	uxth	r1, r0
    d346:	290a      	cmp	r1, #10
    d348:	f002 8309 	beq.w	f95e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x290e>
    d34c:	e796      	b.n	d27c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            (0xf, _, 1, 5) => {
    d34e:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d352:	4601      	mov	r1, r0
    d354:	2805      	cmp	r0, #5
    d356:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    d35a:	f002 839a 	beq.w	fa92 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a42>
    d35e:	e7ff      	b.n	d360 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x310>
    d360:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    d364:	b281      	uxth	r1, r0
    d366:	2908      	cmp	r1, #8
    d368:	f002 8428 	beq.w	fbbc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b6c>
    d36c:	e7ff      	b.n	d36e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x31e>
    d36e:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    d372:	b281      	uxth	r1, r0
    d374:	290e      	cmp	r1, #14
    d376:	f002 84b6 	beq.w	fce6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2c96>
    d37a:	e77f      	b.n	d27c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            (0xf, _, 2, 9) => {
    d37c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d380:	2809      	cmp	r0, #9
    d382:	f002 8554 	beq.w	fe2e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2dde>
    d386:	e779      	b.n	d27c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            (0xf, _, 3, 3) => {
    d388:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d38c:	2803      	cmp	r0, #3
    d38e:	f002 85ff 	beq.w	ff90 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f40>
    d392:	e773      	b.n	d27c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            (0xf, _, 5, 5) => {
    d394:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d398:	2805      	cmp	r0, #5
    d39a:	f002 8708 	beq.w	101ae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x315e>
    d39e:	e76d      	b.n	d27c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            (0xf, _, 6, 5) => {
    d3a0:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d3a4:	2805      	cmp	r0, #5
    d3a6:	f002 87e5 	beq.w	10374 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3324>
    d3aa:	e767      	b.n	d27c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
    d3ac:	2005      	movs	r0, #5
    d3ae:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    d3b2:	f64e 6000 	movw	r0, #60928	; 0xee00
    d3b6:	f2c0 0001 	movt	r0, #1
    d3ba:	6801      	ldr	r1, [r0, #0]
    d3bc:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    d3c0:	f009 f9a5 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d3c4:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    d3c8:	e01f      	b.n	d40a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3ba>
    d3ca:	2001      	movs	r0, #1
    d3cc:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    d3d0:	e015      	b.n	d3fe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3ae>
    d3d2:	2000      	movs	r0, #0
    d3d4:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    d3d8:	e011      	b.n	d3fe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3ae>
    d3da:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    d3dc:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    d3e0:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    d3e4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d3e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d3ec:	f003 feae 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d3f0:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    d3f4:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    d3f8:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    d3fc:	e00b      	b.n	d416 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3c6>
    d3fe:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    d402:	07c0      	lsls	r0, r0, #31
    d404:	2800      	cmp	r0, #0
    d406:	d115      	bne.n	d434 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3e4>
    d408:	e05e      	b.n	d4c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x478>
    d40a:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    d40e:	07c1      	lsls	r1, r0, #31
    d410:	2900      	cmp	r1, #0
    d412:	d1e2      	bne.n	d3da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x38a>
    d414:	e7dd      	b.n	d3d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x382>
    d416:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    d41a:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    d41e:	f009 f976 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d422:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    d426:	e7ff      	b.n	d428 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3d8>
    d428:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    d42c:	07c1      	lsls	r1, r0, #31
    d42e:	2900      	cmp	r1, #0
    d430:	d1cb      	bne.n	d3ca <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x37a>
    d432:	e7ce      	b.n	d3d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x382>
                trace!("[{:04x}] CLS", self.pc);
    d434:	f64f 4048 	movw	r0, #64584	; 0xfc48
    d438:	f2c0 0001 	movt	r0, #1
    d43c:	6801      	ldr	r1, [r0, #0]
    d43e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d442:	f100 0212 	add.w	r2, r0, #18
    d446:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    d44a:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    d44e:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    d452:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    d456:	f2c0 0301 	movt	r3, #1
    d45a:	4610      	mov	r0, r2
    d45c:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    d460:	4619      	mov	r1, r3
    d462:	f7fd fb0a 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d466:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    d46a:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    d46e:	e7ff      	b.n	d470 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x420>
    d470:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    d474:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    d478:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    d47c:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    d480:	f64e 6248 	movw	r2, #61000	; 0xee48
    d484:	f2c0 0201 	movt	r2, #1
    d488:	6812      	ldr	r2, [r2, #0]
    d48a:	466b      	mov	r3, sp
    d48c:	f04f 0c01 	mov.w	ip, #1
    d490:	f8c3 c008 	str.w	ip, [r3, #8]
    d494:	605a      	str	r2, [r3, #4]
    d496:	f8c3 c000 	str.w	ip, [r3]
    d49a:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    d49e:	2202      	movs	r2, #2
    d4a0:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    d4a4:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    d4a8:	f008 fff6 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d4ac:	e7ff      	b.n	d4ae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x45e>
    d4ae:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    d4b2:	f64f 4068 	movw	r0, #64616	; 0xfc68
    d4b6:	f2c0 0001 	movt	r0, #1
    d4ba:	6802      	ldr	r2, [r0, #0]
    d4bc:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    d4c0:	f004 fea2 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d4c4:	e7ff      	b.n	d4c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x476>
    d4c6:	e7ff      	b.n	d4c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x478>
                let (w, h) = self.hw.vram_size();
    d4c8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d4cc:	f7ff f9b4 	bl	c838 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbe871a76fb26495aE>
    d4d0:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    d4d2:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    d4d4:	e7ff      	b.n	d4d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x486>
    d4d6:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    d4d8:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    d4dc:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    d4de:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    d4e2:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d4e4:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    d4e8:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    d4ec:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    d4f0:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    d4f4:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    d4f8:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    d4fc:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    d500:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    d504:	f003 fee6 	bl	112d4 <_ZN4core4iter6traits8iterator8Iterator3map17h2bffa2f7235b9482E>
    d508:	e7ff      	b.n	d50a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x4ba>
    d50a:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    d50e:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    d512:	f003 fe2f 	bl	11174 <_ZN4core4iter6traits8iterator8Iterator7flatten17h1299c8c4daf1c93cE>
    d516:	e7ff      	b.n	d518 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x4c8>
    d518:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d51c:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    d520:	f003 fdfd 	bl	1111e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdaeeeffeba3c3f70E>
    d524:	e7ff      	b.n	d526 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x4d6>
    d526:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d52a:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d52e:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    d532:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    d536:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    d53a:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    d53e:	e7ff      	b.n	d540 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x4f0>
    d540:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    d544:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d548:	f003 fd16 	bl	10f78 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf0fe5cd21a17e0a6E>
    d54c:	e7ff      	b.n	d54e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x4fe>
    d54e:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    d552:	2800      	cmp	r0, #0
    d554:	d001      	beq.n	d55a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x50a>
    d556:	e7ff      	b.n	d558 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x508>
    d558:	e002      	b.n	d560 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x510>
        match (
    d55a:	f003 b82f 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d55e:	defe      	udf	#254	; 0xfe
    d560:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    d564:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    d568:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    d56c:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    d570:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    d574:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    d578:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    d57c:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    d580:	2300      	movs	r3, #0
                    self.hw.vram_set(x, y, false);
    d582:	f8dd 2490 	ldr.w	r2, [sp, #1168]	; 0x490
    d586:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    d588:	4610      	mov	r0, r2
    d58a:	f8dd c3f4 	ldr.w	ip, [sp, #1012]	; 0x3f4
    d58e:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    d590:	4661      	mov	r1, ip
    d592:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    d594:	f7fe ff20 	bl	c3d8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E>
    d598:	e7ff      	b.n	d59a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x54a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d59a:	e7d1      	b.n	d540 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x4f0>
    d59c:	2005      	movs	r0, #5
    d59e:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    d5a2:	f64e 6000 	movw	r0, #60928	; 0xee00
    d5a6:	f2c0 0001 	movt	r0, #1
    d5aa:	6801      	ldr	r1, [r0, #0]
    d5ac:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d5b0:	f009 f8ad 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d5b4:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    d5b6:	e01f      	b.n	d5f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x5a8>
    d5b8:	2001      	movs	r0, #1
    d5ba:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d5be:	e015      	b.n	d5ec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x59c>
    d5c0:	2000      	movs	r0, #0
    d5c2:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d5c6:	e011      	b.n	d5ec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x59c>
    d5c8:	2000      	movs	r0, #0
    d5ca:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    d5ce:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    d5d2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d5d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d5da:	f003 fdb7 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d5de:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    d5e2:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    d5e6:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    d5ea:	e00a      	b.n	d602 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x5b2>
    d5ec:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    d5f0:	07c0      	lsls	r0, r0, #31
    d5f2:	2800      	cmp	r0, #0
    d5f4:	d112      	bne.n	d61c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x5cc>
    d5f6:	e055      	b.n	d6a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x654>
    d5f8:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    d5fa:	07c1      	lsls	r1, r0, #31
    d5fc:	2900      	cmp	r1, #0
    d5fe:	d1e3      	bne.n	d5c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x578>
    d600:	e7de      	b.n	d5c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x570>
    d602:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d606:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    d60a:	f009 f880 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d60e:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    d610:	e7ff      	b.n	d612 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x5c2>
    d612:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    d614:	07c1      	lsls	r1, r0, #31
    d616:	2900      	cmp	r1, #0
    d618:	d1ce      	bne.n	d5b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x568>
    d61a:	e7d1      	b.n	d5c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x570>
                trace!("[{:04x}] RET", self.pc);
    d61c:	f64f 400c 	movw	r0, #64524	; 0xfc0c
    d620:	f2c0 0001 	movt	r0, #1
    d624:	6801      	ldr	r1, [r0, #0]
    d626:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d62a:	f100 0212 	add.w	r2, r0, #18
    d62e:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    d632:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    d636:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    d63a:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    d63e:	f2c0 0301 	movt	r3, #1
    d642:	4610      	mov	r0, r2
    d644:	91f9      	str	r1, [sp, #996]	; 0x3e4
    d646:	4619      	mov	r1, r3
    d648:	f7fd fa17 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d64c:	90f8      	str	r0, [sp, #992]	; 0x3e0
    d64e:	91f7      	str	r1, [sp, #988]	; 0x3dc
    d650:	e7ff      	b.n	d652 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x602>
    d652:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    d654:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    d658:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    d65a:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    d65e:	f64e 6248 	movw	r2, #61000	; 0xee48
    d662:	f2c0 0201 	movt	r2, #1
    d666:	6812      	ldr	r2, [r2, #0]
    d668:	466b      	mov	r3, sp
    d66a:	f04f 0c01 	mov.w	ip, #1
    d66e:	f8c3 c008 	str.w	ip, [r3, #8]
    d672:	605a      	str	r2, [r3, #4]
    d674:	f8c3 c000 	str.w	ip, [r3]
    d678:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d67c:	2202      	movs	r2, #2
    d67e:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    d682:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    d684:	f008 ff08 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d688:	e7ff      	b.n	d68a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x63a>
    d68a:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    d68e:	f64f 402c 	movw	r0, #64556	; 0xfc2c
    d692:	f2c0 0001 	movt	r0, #1
    d696:	6802      	ldr	r2, [r0, #0]
    d698:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d69c:	f004 fdb4 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d6a0:	e7ff      	b.n	d6a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x652>
    d6a2:	e7ff      	b.n	d6a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x654>
                let addr = self.pop();
    d6a4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d6a8:	f7ff fc7e 	bl	cfa8 <_ZN8libchip814Chip8$LT$T$GT$3pop17h70e7cf8d6b1182e4E>
    d6ac:	4601      	mov	r1, r0
    d6ae:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    d6b2:	91f6      	str	r1, [sp, #984]	; 0x3d8
    d6b4:	e7ff      	b.n	d6b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x666>
                self.jump(addr);
    d6b6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d6ba:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    d6bc:	f003 fa6d 	bl	10b9a <_ZN8libchip814Chip8$LT$T$GT$4jump17heb92b408b228e4d7E>
    d6c0:	e7ff      	b.n	d6c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x672>
        match (
    d6c2:	f002 bf7b 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    d6c6:	2005      	movs	r0, #5
    d6c8:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    d6cc:	f64e 6000 	movw	r0, #60928	; 0xee00
    d6d0:	f2c0 0001 	movt	r0, #1
    d6d4:	6801      	ldr	r1, [r0, #0]
    d6d6:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d6da:	f009 f818 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d6de:	90f5      	str	r0, [sp, #980]	; 0x3d4
    d6e0:	e01f      	b.n	d722 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x6d2>
    d6e2:	2001      	movs	r0, #1
    d6e4:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d6e8:	e015      	b.n	d716 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x6c6>
    d6ea:	2000      	movs	r0, #0
    d6ec:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d6f0:	e011      	b.n	d716 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x6c6>
    d6f2:	2000      	movs	r0, #0
    d6f4:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    d6f8:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    d6fc:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d700:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d704:	f003 fd22 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d708:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    d70c:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    d710:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    d714:	e00a      	b.n	d72c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x6dc>
    d716:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    d71a:	07c0      	lsls	r0, r0, #31
    d71c:	2800      	cmp	r0, #0
    d71e:	d112      	bne.n	d746 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x6f6>
    d720:	e055      	b.n	d7ce <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x77e>
    d722:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    d724:	07c1      	lsls	r1, r0, #31
    d726:	2900      	cmp	r1, #0
    d728:	d1e3      	bne.n	d6f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x6a2>
    d72a:	e7de      	b.n	d6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x69a>
    d72c:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d730:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    d734:	f008 ffeb 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d738:	90f4      	str	r0, [sp, #976]	; 0x3d0
    d73a:	e7ff      	b.n	d73c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x6ec>
    d73c:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    d73e:	07c1      	lsls	r1, r0, #31
    d740:	2900      	cmp	r1, #0
    d742:	d1ce      	bne.n	d6e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x692>
    d744:	e7d1      	b.n	d6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x69a>
                trace!("[{:04x}] SYS nnn", self.pc);
    d746:	f64f 30b0 	movw	r0, #64432	; 0xfbb0
    d74a:	f2c0 0001 	movt	r0, #1
    d74e:	6801      	ldr	r1, [r0, #0]
    d750:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d754:	f100 0212 	add.w	r2, r0, #18
    d758:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    d75c:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    d760:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    d764:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    d768:	f2c0 0301 	movt	r3, #1
    d76c:	4610      	mov	r0, r2
    d76e:	91f3      	str	r1, [sp, #972]	; 0x3cc
    d770:	4619      	mov	r1, r3
    d772:	f7fd f982 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d776:	90f2      	str	r0, [sp, #968]	; 0x3c8
    d778:	91f1      	str	r1, [sp, #964]	; 0x3c4
    d77a:	e7ff      	b.n	d77c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x72c>
    d77c:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    d77e:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    d782:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    d784:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    d788:	f64e 6248 	movw	r2, #61000	; 0xee48
    d78c:	f2c0 0201 	movt	r2, #1
    d790:	6812      	ldr	r2, [r2, #0]
    d792:	466b      	mov	r3, sp
    d794:	f04f 0c01 	mov.w	ip, #1
    d798:	f8c3 c008 	str.w	ip, [r3, #8]
    d79c:	605a      	str	r2, [r3, #4]
    d79e:	f8c3 c000 	str.w	ip, [r3]
    d7a2:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    d7a6:	2202      	movs	r2, #2
    d7a8:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    d7ac:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    d7ae:	f008 fe73 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d7b2:	e7ff      	b.n	d7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x764>
    d7b4:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    d7b8:	f64f 30d0 	movw	r0, #64464	; 0xfbd0
    d7bc:	f2c0 0001 	movt	r0, #1
    d7c0:	6802      	ldr	r2, [r0, #0]
    d7c2:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    d7c6:	f004 fd1f 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d7ca:	e7ff      	b.n	d7cc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x77c>
    d7cc:	e7ff      	b.n	d7ce <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x77e>
    d7ce:	f64f 30d4 	movw	r0, #64468	; 0xfbd4
    d7d2:	f2c0 0001 	movt	r0, #1
    d7d6:	f64f 32e4 	movw	r2, #64484	; 0xfbe4
    d7da:	f2c0 0201 	movt	r2, #1
    d7de:	210f      	movs	r1, #15
    d7e0:	f009 fd74 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d7e4:	defe      	udf	#254	; 0xfe
    d7e6:	2005      	movs	r0, #5
    d7e8:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    d7ec:	f64e 6000 	movw	r0, #60928	; 0xee00
    d7f0:	f2c0 0001 	movt	r0, #1
    d7f4:	6801      	ldr	r1, [r0, #0]
    d7f6:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    d7fa:	f008 ff88 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d7fe:	90f0      	str	r0, [sp, #960]	; 0x3c0
    d800:	e01f      	b.n	d842 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x7f2>
    d802:	2001      	movs	r0, #1
    d804:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    d808:	e015      	b.n	d836 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x7e6>
    d80a:	2000      	movs	r0, #0
    d80c:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    d810:	e011      	b.n	d836 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x7e6>
    d812:	2000      	movs	r0, #0
    d814:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    d818:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    d81c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d820:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d824:	f003 fc92 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d828:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    d82c:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    d830:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    d834:	e00a      	b.n	d84c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x7fc>
    d836:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    d83a:	07c0      	lsls	r0, r0, #31
    d83c:	2800      	cmp	r0, #0
    d83e:	d112      	bne.n	d866 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x816>
    d840:	e055      	b.n	d8ee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x89e>
    d842:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    d844:	07c1      	lsls	r1, r0, #31
    d846:	2900      	cmp	r1, #0
    d848:	d1e3      	bne.n	d812 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x7c2>
    d84a:	e7de      	b.n	d80a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x7ba>
    d84c:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    d850:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    d854:	f008 ff5b 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d858:	90ef      	str	r0, [sp, #956]	; 0x3bc
    d85a:	e7ff      	b.n	d85c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x80c>
    d85c:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    d85e:	07c1      	lsls	r1, r0, #31
    d860:	2900      	cmp	r1, #0
    d862:	d1ce      	bne.n	d802 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x7b2>
    d864:	e7d1      	b.n	d80a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x7ba>
                trace!("[{:04x}] JP nnn", self.pc);
    d866:	f64f 3070 	movw	r0, #64368	; 0xfb70
    d86a:	f2c0 0001 	movt	r0, #1
    d86e:	6801      	ldr	r1, [r0, #0]
    d870:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d874:	f100 0212 	add.w	r2, r0, #18
    d878:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    d87c:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    d880:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    d884:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    d888:	f2c0 0301 	movt	r3, #1
    d88c:	4610      	mov	r0, r2
    d88e:	91ee      	str	r1, [sp, #952]	; 0x3b8
    d890:	4619      	mov	r1, r3
    d892:	f7fd f8f2 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d896:	90ed      	str	r0, [sp, #948]	; 0x3b4
    d898:	91ec      	str	r1, [sp, #944]	; 0x3b0
    d89a:	e7ff      	b.n	d89c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x84c>
    d89c:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    d89e:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    d8a2:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    d8a4:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    d8a8:	f64e 6248 	movw	r2, #61000	; 0xee48
    d8ac:	f2c0 0201 	movt	r2, #1
    d8b0:	6812      	ldr	r2, [r2, #0]
    d8b2:	466b      	mov	r3, sp
    d8b4:	f04f 0c01 	mov.w	ip, #1
    d8b8:	f8c3 c008 	str.w	ip, [r3, #8]
    d8bc:	605a      	str	r2, [r3, #4]
    d8be:	f8c3 c000 	str.w	ip, [r3]
    d8c2:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    d8c6:	2202      	movs	r2, #2
    d8c8:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    d8cc:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    d8ce:	f008 fde3 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d8d2:	e7ff      	b.n	d8d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x884>
    d8d4:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    d8d8:	f64f 3090 	movw	r0, #64400	; 0xfb90
    d8dc:	f2c0 0001 	movt	r0, #1
    d8e0:	6802      	ldr	r2, [r0, #0]
    d8e2:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    d8e6:	f004 fc8f 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d8ea:	e7ff      	b.n	d8ec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x89c>
    d8ec:	e7ff      	b.n	d8ee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x89e>
    d8ee:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    d8f0:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    d8f4:	f008 fee2 	bl	166bc <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    d8f8:	90eb      	str	r0, [sp, #940]	; 0x3ac
    d8fa:	e7ff      	b.n	d8fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x8ac>
    d8fc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d900:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    d902:	f003 f94a 	bl	10b9a <_ZN8libchip814Chip8$LT$T$GT$4jump17heb92b408b228e4d7E>
    d906:	e7ff      	b.n	d908 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x8b8>
        match (
    d908:	f002 be58 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    d90c:	2005      	movs	r0, #5
    d90e:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    d912:	f64e 6000 	movw	r0, #60928	; 0xee00
    d916:	f2c0 0001 	movt	r0, #1
    d91a:	6801      	ldr	r1, [r0, #0]
    d91c:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    d920:	f008 fef5 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d924:	90ea      	str	r0, [sp, #936]	; 0x3a8
    d926:	e01f      	b.n	d968 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x918>
    d928:	2001      	movs	r0, #1
    d92a:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    d92e:	e015      	b.n	d95c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x90c>
    d930:	2000      	movs	r0, #0
    d932:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    d936:	e011      	b.n	d95c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x90c>
    d938:	2000      	movs	r0, #0
    d93a:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    d93e:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    d942:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d946:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d94a:	f003 fbff 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d94e:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    d952:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    d956:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    d95a:	e00a      	b.n	d972 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x922>
    d95c:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    d960:	07c0      	lsls	r0, r0, #31
    d962:	2800      	cmp	r0, #0
    d964:	d112      	bne.n	d98c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x93c>
    d966:	e055      	b.n	da14 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x9c4>
    d968:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    d96a:	07c1      	lsls	r1, r0, #31
    d96c:	2900      	cmp	r1, #0
    d96e:	d1e3      	bne.n	d938 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x8e8>
    d970:	e7de      	b.n	d930 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x8e0>
    d972:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    d976:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    d97a:	f008 fec8 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d97e:	90e9      	str	r0, [sp, #932]	; 0x3a4
    d980:	e7ff      	b.n	d982 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x932>
    d982:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    d984:	07c1      	lsls	r1, r0, #31
    d986:	2900      	cmp	r1, #0
    d988:	d1ce      	bne.n	d928 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x8d8>
    d98a:	e7d1      	b.n	d930 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x8e0>
                trace!("[{:04x}] CALL nnn", self.pc);
    d98c:	f64f 303c 	movw	r0, #64316	; 0xfb3c
    d990:	f2c0 0001 	movt	r0, #1
    d994:	6801      	ldr	r1, [r0, #0]
    d996:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d99a:	f100 0212 	add.w	r2, r0, #18
    d99e:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    d9a2:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    d9a6:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    d9aa:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    d9ae:	f2c0 0301 	movt	r3, #1
    d9b2:	4610      	mov	r0, r2
    d9b4:	91e8      	str	r1, [sp, #928]	; 0x3a0
    d9b6:	4619      	mov	r1, r3
    d9b8:	f7fd f85f 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d9bc:	90e7      	str	r0, [sp, #924]	; 0x39c
    d9be:	91e6      	str	r1, [sp, #920]	; 0x398
    d9c0:	e7ff      	b.n	d9c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x972>
    d9c2:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    d9c4:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    d9c8:	99e6      	ldr	r1, [sp, #920]	; 0x398
    d9ca:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    d9ce:	f64e 6248 	movw	r2, #61000	; 0xee48
    d9d2:	f2c0 0201 	movt	r2, #1
    d9d6:	6812      	ldr	r2, [r2, #0]
    d9d8:	466b      	mov	r3, sp
    d9da:	f04f 0c01 	mov.w	ip, #1
    d9de:	f8c3 c008 	str.w	ip, [r3, #8]
    d9e2:	605a      	str	r2, [r3, #4]
    d9e4:	f8c3 c000 	str.w	ip, [r3]
    d9e8:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    d9ec:	2202      	movs	r2, #2
    d9ee:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    d9f2:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    d9f4:	f008 fd50 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d9f8:	e7ff      	b.n	d9fa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x9aa>
    d9fa:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    d9fe:	f64f 305c 	movw	r0, #64348	; 0xfb5c
    da02:	f2c0 0001 	movt	r0, #1
    da06:	6802      	ldr	r2, [r0, #0]
    da08:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    da0c:	f004 fbfc 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    da10:	e7ff      	b.n	da12 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x9c2>
    da12:	e7ff      	b.n	da14 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x9c4>
                self.push(self.pc);
    da14:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da18:	8a41      	ldrh	r1, [r0, #18]
    da1a:	f003 f914 	bl	10c46 <_ZN8libchip814Chip8$LT$T$GT$4push17hf7601df6bb546f8dE>
    da1e:	e7ff      	b.n	da20 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x9d0>
    da20:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    da22:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    da26:	f008 fe49 	bl	166bc <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    da2a:	90e5      	str	r0, [sp, #916]	; 0x394
    da2c:	e7ff      	b.n	da2e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x9de>
    da2e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da32:	99e5      	ldr	r1, [sp, #916]	; 0x394
    da34:	f003 f8b1 	bl	10b9a <_ZN8libchip814Chip8$LT$T$GT$4jump17heb92b408b228e4d7E>
    da38:	e7ff      	b.n	da3a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x9ea>
        match (
    da3a:	f002 bdbf 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    da3e:	2005      	movs	r0, #5
    da40:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    da44:	f64e 6000 	movw	r0, #60928	; 0xee00
    da48:	f2c0 0001 	movt	r0, #1
    da4c:	6801      	ldr	r1, [r0, #0]
    da4e:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    da52:	f008 fe5c 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    da56:	90e4      	str	r0, [sp, #912]	; 0x390
    da58:	e01f      	b.n	da9a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa4a>
    da5a:	2001      	movs	r0, #1
    da5c:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    da60:	e015      	b.n	da8e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa3e>
    da62:	2000      	movs	r0, #0
    da64:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    da68:	e011      	b.n	da8e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa3e>
    da6a:	2000      	movs	r0, #0
    da6c:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    da70:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    da74:	f644 206c 	movw	r0, #19052	; 0x4a6c
    da78:	f2c2 0000 	movt	r0, #8192	; 0x2000
    da7c:	f003 fb66 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    da80:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    da84:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    da88:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    da8c:	e00a      	b.n	daa4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa54>
    da8e:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    da92:	07c0      	lsls	r0, r0, #31
    da94:	2800      	cmp	r0, #0
    da96:	d112      	bne.n	dabe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa6e>
    da98:	e055      	b.n	db46 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xaf6>
    da9a:	98e4      	ldr	r0, [sp, #912]	; 0x390
    da9c:	07c1      	lsls	r1, r0, #31
    da9e:	2900      	cmp	r1, #0
    daa0:	d1e3      	bne.n	da6a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa1a>
    daa2:	e7de      	b.n	da62 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa12>
    daa4:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    daa8:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    daac:	f008 fe2f 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dab0:	90e3      	str	r0, [sp, #908]	; 0x38c
    dab2:	e7ff      	b.n	dab4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa64>
    dab4:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    dab6:	07c1      	lsls	r1, r0, #31
    dab8:	2900      	cmp	r1, #0
    daba:	d1ce      	bne.n	da5a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa0a>
    dabc:	e7d1      	b.n	da62 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa12>
                trace!("[{:04x}] SE Vx kk", self.pc);
    dabe:	f64f 20ec 	movw	r0, #64236	; 0xfaec
    dac2:	f2c0 0001 	movt	r0, #1
    dac6:	6801      	ldr	r1, [r0, #0]
    dac8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dacc:	f100 0212 	add.w	r2, r0, #18
    dad0:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    dad4:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    dad8:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    dadc:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    dae0:	f2c0 0301 	movt	r3, #1
    dae4:	4610      	mov	r0, r2
    dae6:	91e2      	str	r1, [sp, #904]	; 0x388
    dae8:	4619      	mov	r1, r3
    daea:	f7fc ffc6 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    daee:	90e1      	str	r0, [sp, #900]	; 0x384
    daf0:	91e0      	str	r1, [sp, #896]	; 0x380
    daf2:	e7ff      	b.n	daf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xaa4>
    daf4:	98e1      	ldr	r0, [sp, #900]	; 0x384
    daf6:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    dafa:	99e0      	ldr	r1, [sp, #896]	; 0x380
    dafc:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    db00:	f64e 6248 	movw	r2, #61000	; 0xee48
    db04:	f2c0 0201 	movt	r2, #1
    db08:	6812      	ldr	r2, [r2, #0]
    db0a:	466b      	mov	r3, sp
    db0c:	f04f 0c01 	mov.w	ip, #1
    db10:	f8c3 c008 	str.w	ip, [r3, #8]
    db14:	605a      	str	r2, [r3, #4]
    db16:	f8c3 c000 	str.w	ip, [r3]
    db1a:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    db1e:	2202      	movs	r2, #2
    db20:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    db24:	99e2      	ldr	r1, [sp, #904]	; 0x388
    db26:	f008 fcb7 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    db2a:	e7ff      	b.n	db2c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xadc>
    db2c:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    db30:	f64f 300c 	movw	r0, #64268	; 0xfb0c
    db34:	f2c0 0001 	movt	r0, #1
    db38:	6802      	ldr	r2, [r0, #0]
    db3a:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    db3e:	f004 fb63 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    db42:	e7ff      	b.n	db44 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xaf4>
    db44:	e7ff      	b.n	db46 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xaf6>
                if self.v[x] == kk {
    db46:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    db4a:	280f      	cmp	r0, #15
    db4c:	f202 87ff 	bhi.w	10b4e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3afe>
    db50:	e7ff      	b.n	db52 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb02>
    db52:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    db56:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    db5a:	1842      	adds	r2, r0, r1
    db5c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    db60:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    db64:	fa5f fc83 	uxtb.w	ip, r3
    db68:	4562      	cmp	r2, ip
    db6a:	d106      	bne.n	db7a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb2a>
    db6c:	e7ff      	b.n	db6e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb1e>
                    self.next();
    db6e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    db72:	f003 f855 	bl	10c20 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E>
    db76:	e7ff      	b.n	db78 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb28>
                if self.v[x] == kk {
    db78:	e7ff      	b.n	db7a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb2a>
        match (
    db7a:	f002 bd1f 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    db7e:	2005      	movs	r0, #5
    db80:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    db84:	f64e 6000 	movw	r0, #60928	; 0xee00
    db88:	f2c0 0001 	movt	r0, #1
    db8c:	6801      	ldr	r1, [r0, #0]
    db8e:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    db92:	f008 fdbc 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    db96:	90df      	str	r0, [sp, #892]	; 0x37c
    db98:	e01f      	b.n	dbda <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb8a>
    db9a:	2001      	movs	r0, #1
    db9c:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    dba0:	e015      	b.n	dbce <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb7e>
    dba2:	2000      	movs	r0, #0
    dba4:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    dba8:	e011      	b.n	dbce <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb7e>
    dbaa:	2000      	movs	r0, #0
    dbac:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    dbb0:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    dbb4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dbb8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dbbc:	f003 fac6 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dbc0:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    dbc4:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    dbc8:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    dbcc:	e00a      	b.n	dbe4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb94>
    dbce:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    dbd2:	07c0      	lsls	r0, r0, #31
    dbd4:	2800      	cmp	r0, #0
    dbd6:	d112      	bne.n	dbfe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xbae>
    dbd8:	e055      	b.n	dc86 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc36>
    dbda:	98df      	ldr	r0, [sp, #892]	; 0x37c
    dbdc:	07c1      	lsls	r1, r0, #31
    dbde:	2900      	cmp	r1, #0
    dbe0:	d1e3      	bne.n	dbaa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb5a>
    dbe2:	e7de      	b.n	dba2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb52>
    dbe4:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    dbe8:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    dbec:	f008 fd8f 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dbf0:	90de      	str	r0, [sp, #888]	; 0x378
    dbf2:	e7ff      	b.n	dbf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xba4>
    dbf4:	98de      	ldr	r0, [sp, #888]	; 0x378
    dbf6:	07c1      	lsls	r1, r0, #31
    dbf8:	2900      	cmp	r1, #0
    dbfa:	d1ce      	bne.n	db9a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb4a>
    dbfc:	e7d1      	b.n	dba2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb52>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    dbfe:	f64f 209c 	movw	r0, #64156	; 0xfa9c
    dc02:	f2c0 0001 	movt	r0, #1
    dc06:	6801      	ldr	r1, [r0, #0]
    dc08:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc0c:	f100 0212 	add.w	r2, r0, #18
    dc10:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    dc14:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    dc18:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    dc1c:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    dc20:	f2c0 0301 	movt	r3, #1
    dc24:	4610      	mov	r0, r2
    dc26:	91dd      	str	r1, [sp, #884]	; 0x374
    dc28:	4619      	mov	r1, r3
    dc2a:	f7fc ff26 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dc2e:	90dc      	str	r0, [sp, #880]	; 0x370
    dc30:	91db      	str	r1, [sp, #876]	; 0x36c
    dc32:	e7ff      	b.n	dc34 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xbe4>
    dc34:	98dc      	ldr	r0, [sp, #880]	; 0x370
    dc36:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    dc3a:	99db      	ldr	r1, [sp, #876]	; 0x36c
    dc3c:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    dc40:	f64e 6248 	movw	r2, #61000	; 0xee48
    dc44:	f2c0 0201 	movt	r2, #1
    dc48:	6812      	ldr	r2, [r2, #0]
    dc4a:	466b      	mov	r3, sp
    dc4c:	f04f 0c01 	mov.w	ip, #1
    dc50:	f8c3 c008 	str.w	ip, [r3, #8]
    dc54:	605a      	str	r2, [r3, #4]
    dc56:	f8c3 c000 	str.w	ip, [r3]
    dc5a:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    dc5e:	2202      	movs	r2, #2
    dc60:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    dc64:	99dd      	ldr	r1, [sp, #884]	; 0x374
    dc66:	f008 fc17 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    dc6a:	e7ff      	b.n	dc6c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc1c>
    dc6c:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    dc70:	f64f 20bc 	movw	r0, #64188	; 0xfabc
    dc74:	f2c0 0001 	movt	r0, #1
    dc78:	6802      	ldr	r2, [r0, #0]
    dc7a:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    dc7e:	f004 fac3 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dc82:	e7ff      	b.n	dc84 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc34>
    dc84:	e7ff      	b.n	dc86 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc36>
                if self.v[x] != kk {
    dc86:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dc8a:	280f      	cmp	r0, #15
    dc8c:	f202 8755 	bhi.w	10b3a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3aea>
    dc90:	e7ff      	b.n	dc92 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc42>
    dc92:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc96:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dc9a:	1842      	adds	r2, r0, r1
    dc9c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    dca0:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    dca4:	fa5f fc83 	uxtb.w	ip, r3
    dca8:	4562      	cmp	r2, ip
    dcaa:	d006      	beq.n	dcba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc6a>
    dcac:	e7ff      	b.n	dcae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc5e>
                    self.next();
    dcae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dcb2:	f002 ffb5 	bl	10c20 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E>
    dcb6:	e7ff      	b.n	dcb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc68>
                if self.v[x] != kk {
    dcb8:	e7ff      	b.n	dcba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc6a>
        match (
    dcba:	f002 bc7f 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    dcbe:	2005      	movs	r0, #5
    dcc0:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    dcc4:	f64e 6000 	movw	r0, #60928	; 0xee00
    dcc8:	f2c0 0001 	movt	r0, #1
    dccc:	6801      	ldr	r1, [r0, #0]
    dcce:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    dcd2:	f008 fd1c 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dcd6:	90da      	str	r0, [sp, #872]	; 0x368
    dcd8:	e01f      	b.n	dd1a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xcca>
    dcda:	2001      	movs	r0, #1
    dcdc:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    dce0:	e015      	b.n	dd0e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xcbe>
    dce2:	2000      	movs	r0, #0
    dce4:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    dce8:	e011      	b.n	dd0e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xcbe>
    dcea:	2000      	movs	r0, #0
    dcec:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    dcf0:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    dcf4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dcf8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dcfc:	f003 fa26 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dd00:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    dd04:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    dd08:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    dd0c:	e00a      	b.n	dd24 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xcd4>
    dd0e:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    dd12:	07c0      	lsls	r0, r0, #31
    dd14:	2800      	cmp	r0, #0
    dd16:	d112      	bne.n	dd3e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xcee>
    dd18:	e055      	b.n	ddc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xd76>
    dd1a:	98da      	ldr	r0, [sp, #872]	; 0x368
    dd1c:	07c1      	lsls	r1, r0, #31
    dd1e:	2900      	cmp	r1, #0
    dd20:	d1e3      	bne.n	dcea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc9a>
    dd22:	e7de      	b.n	dce2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc92>
    dd24:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    dd28:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    dd2c:	f008 fcef 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dd30:	90d9      	str	r0, [sp, #868]	; 0x364
    dd32:	e7ff      	b.n	dd34 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xce4>
    dd34:	98d9      	ldr	r0, [sp, #868]	; 0x364
    dd36:	07c1      	lsls	r1, r0, #31
    dd38:	2900      	cmp	r1, #0
    dd3a:	d1ce      	bne.n	dcda <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc8a>
    dd3c:	e7d1      	b.n	dce2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc92>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    dd3e:	f64f 203c 	movw	r0, #64060	; 0xfa3c
    dd42:	f2c0 0001 	movt	r0, #1
    dd46:	6801      	ldr	r1, [r0, #0]
    dd48:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dd4c:	f100 0212 	add.w	r2, r0, #18
    dd50:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    dd54:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    dd58:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    dd5c:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    dd60:	f2c0 0301 	movt	r3, #1
    dd64:	4610      	mov	r0, r2
    dd66:	91d8      	str	r1, [sp, #864]	; 0x360
    dd68:	4619      	mov	r1, r3
    dd6a:	f7fc fe86 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dd6e:	90d7      	str	r0, [sp, #860]	; 0x35c
    dd70:	91d6      	str	r1, [sp, #856]	; 0x358
    dd72:	e7ff      	b.n	dd74 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xd24>
    dd74:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    dd76:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    dd7a:	99d6      	ldr	r1, [sp, #856]	; 0x358
    dd7c:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    dd80:	f64e 6248 	movw	r2, #61000	; 0xee48
    dd84:	f2c0 0201 	movt	r2, #1
    dd88:	6812      	ldr	r2, [r2, #0]
    dd8a:	466b      	mov	r3, sp
    dd8c:	f04f 0c01 	mov.w	ip, #1
    dd90:	f8c3 c008 	str.w	ip, [r3, #8]
    dd94:	605a      	str	r2, [r3, #4]
    dd96:	f8c3 c000 	str.w	ip, [r3]
    dd9a:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    dd9e:	2202      	movs	r2, #2
    dda0:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    dda4:	99d8      	ldr	r1, [sp, #864]	; 0x360
    dda6:	f008 fb77 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ddaa:	e7ff      	b.n	ddac <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xd5c>
    ddac:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    ddb0:	f64f 205c 	movw	r0, #64092	; 0xfa5c
    ddb4:	f2c0 0001 	movt	r0, #1
    ddb8:	6802      	ldr	r2, [r0, #0]
    ddba:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    ddbe:	f004 fa23 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ddc2:	e7ff      	b.n	ddc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xd74>
    ddc4:	e7ff      	b.n	ddc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xd76>
                if self.v[x] == self.v[y] {
    ddc6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ddca:	280f      	cmp	r0, #15
    ddcc:	f202 86a1 	bhi.w	10b12 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3ac2>
    ddd0:	e7ff      	b.n	ddd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xd82>
    ddd2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ddd6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ddda:	1842      	adds	r2, r0, r1
    dddc:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    dde0:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    dde4:	2b0f      	cmp	r3, #15
    dde6:	92d5      	str	r2, [sp, #852]	; 0x354
    dde8:	f202 869d 	bhi.w	10b26 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3ad6>
    ddec:	e7ff      	b.n	ddee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xd9e>
    ddee:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ddf2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ddf6:	1842      	adds	r2, r0, r1
    ddf8:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ddfc:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    ddfe:	fa5f fc83 	uxtb.w	ip, r3
    de02:	4594      	cmp	ip, r2
    de04:	d106      	bne.n	de14 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xdc4>
    de06:	e7ff      	b.n	de08 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xdb8>
                    self.next();
    de08:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    de0c:	f002 ff08 	bl	10c20 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E>
    de10:	e7ff      	b.n	de12 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xdc2>
                if self.v[x] == self.v[y] {
    de12:	e7ff      	b.n	de14 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xdc4>
        match (
    de14:	f002 bbd2 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    de18:	2005      	movs	r0, #5
    de1a:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    de1e:	f64e 6000 	movw	r0, #60928	; 0xee00
    de22:	f2c0 0001 	movt	r0, #1
    de26:	6801      	ldr	r1, [r0, #0]
    de28:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    de2c:	f008 fc6f 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    de30:	90d4      	str	r0, [sp, #848]	; 0x350
    de32:	e01f      	b.n	de74 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xe24>
    de34:	2001      	movs	r0, #1
    de36:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    de3a:	e015      	b.n	de68 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xe18>
    de3c:	2000      	movs	r0, #0
    de3e:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    de42:	e011      	b.n	de68 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xe18>
    de44:	2000      	movs	r0, #0
    de46:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    de4a:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    de4e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    de52:	f2c2 0000 	movt	r0, #8192	; 0x2000
    de56:	f003 f979 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    de5a:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    de5e:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    de62:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    de66:	e00a      	b.n	de7e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xe2e>
    de68:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    de6c:	07c0      	lsls	r0, r0, #31
    de6e:	2800      	cmp	r0, #0
    de70:	d112      	bne.n	de98 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xe48>
    de72:	e055      	b.n	df20 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xed0>
    de74:	98d4      	ldr	r0, [sp, #848]	; 0x350
    de76:	07c1      	lsls	r1, r0, #31
    de78:	2900      	cmp	r1, #0
    de7a:	d1e3      	bne.n	de44 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xdf4>
    de7c:	e7de      	b.n	de3c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xdec>
    de7e:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    de82:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    de86:	f008 fc42 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    de8a:	90d3      	str	r0, [sp, #844]	; 0x34c
    de8c:	e7ff      	b.n	de8e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xe3e>
    de8e:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    de90:	07c1      	lsls	r1, r0, #31
    de92:	2900      	cmp	r1, #0
    de94:	d1ce      	bne.n	de34 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xde4>
    de96:	e7d1      	b.n	de3c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xdec>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    de98:	f64f 1054 	movw	r0, #63828	; 0xf954
    de9c:	f2c0 0001 	movt	r0, #1
    dea0:	6801      	ldr	r1, [r0, #0]
    dea2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dea6:	f100 0212 	add.w	r2, r0, #18
    deaa:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    deae:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    deb2:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    deb6:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    deba:	f2c0 0301 	movt	r3, #1
    debe:	4610      	mov	r0, r2
    dec0:	91d2      	str	r1, [sp, #840]	; 0x348
    dec2:	4619      	mov	r1, r3
    dec4:	f7fc fdd9 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dec8:	90d1      	str	r0, [sp, #836]	; 0x344
    deca:	91d0      	str	r1, [sp, #832]	; 0x340
    decc:	e7ff      	b.n	dece <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xe7e>
    dece:	98d1      	ldr	r0, [sp, #836]	; 0x344
    ded0:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    ded4:	99d0      	ldr	r1, [sp, #832]	; 0x340
    ded6:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    deda:	f64e 6248 	movw	r2, #61000	; 0xee48
    dede:	f2c0 0201 	movt	r2, #1
    dee2:	6812      	ldr	r2, [r2, #0]
    dee4:	466b      	mov	r3, sp
    dee6:	f04f 0c01 	mov.w	ip, #1
    deea:	f8c3 c008 	str.w	ip, [r3, #8]
    deee:	605a      	str	r2, [r3, #4]
    def0:	f8c3 c000 	str.w	ip, [r3]
    def4:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    def8:	2202      	movs	r2, #2
    defa:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    defe:	99d2      	ldr	r1, [sp, #840]	; 0x348
    df00:	f008 faca 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    df04:	e7ff      	b.n	df06 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xeb6>
    df06:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    df0a:	f64f 1074 	movw	r0, #63860	; 0xf974
    df0e:	f2c0 0001 	movt	r0, #1
    df12:	6802      	ldr	r2, [r0, #0]
    df14:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    df18:	f004 f976 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    df1c:	e7ff      	b.n	df1e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xece>
    df1e:	e7ff      	b.n	df20 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xed0>
                self.v[x] = kk;
    df20:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    df24:	280f      	cmp	r0, #15
    df26:	f202 85ea 	bhi.w	10afe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3aae>
    df2a:	e7ff      	b.n	df2c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xedc>
    df2c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df30:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    df34:	1842      	adds	r2, r0, r1
    df36:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    df3a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    df3e:	f002 bb3d 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    df42:	2005      	movs	r0, #5
    df44:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    df48:	f64e 6000 	movw	r0, #60928	; 0xee00
    df4c:	f2c0 0001 	movt	r0, #1
    df50:	6801      	ldr	r1, [r0, #0]
    df52:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    df56:	f008 fbda 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    df5a:	90cf      	str	r0, [sp, #828]	; 0x33c
    df5c:	e01f      	b.n	df9e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf4e>
    df5e:	2001      	movs	r0, #1
    df60:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    df64:	e015      	b.n	df92 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf42>
    df66:	2000      	movs	r0, #0
    df68:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    df6c:	e011      	b.n	df92 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf42>
    df6e:	2000      	movs	r0, #0
    df70:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    df74:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    df78:	f644 206c 	movw	r0, #19052	; 0x4a6c
    df7c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    df80:	f003 f8e4 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    df84:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    df88:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    df8c:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    df90:	e00a      	b.n	dfa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf58>
    df92:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    df96:	07c0      	lsls	r0, r0, #31
    df98:	2800      	cmp	r0, #0
    df9a:	d112      	bne.n	dfc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf72>
    df9c:	e055      	b.n	e04a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xffa>
    df9e:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    dfa0:	07c1      	lsls	r1, r0, #31
    dfa2:	2900      	cmp	r1, #0
    dfa4:	d1e3      	bne.n	df6e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf1e>
    dfa6:	e7de      	b.n	df66 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf16>
    dfa8:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    dfac:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    dfb0:	f008 fbad 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dfb4:	90ce      	str	r0, [sp, #824]	; 0x338
    dfb6:	e7ff      	b.n	dfb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf68>
    dfb8:	98ce      	ldr	r0, [sp, #824]	; 0x338
    dfba:	07c1      	lsls	r1, r0, #31
    dfbc:	2900      	cmp	r1, #0
    dfbe:	d1ce      	bne.n	df5e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf0e>
    dfc0:	e7d1      	b.n	df66 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf16>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    dfc2:	f64f 00f4 	movw	r0, #63732	; 0xf8f4
    dfc6:	f2c0 0001 	movt	r0, #1
    dfca:	6801      	ldr	r1, [r0, #0]
    dfcc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dfd0:	f100 0212 	add.w	r2, r0, #18
    dfd4:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    dfd8:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    dfdc:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    dfe0:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    dfe4:	f2c0 0301 	movt	r3, #1
    dfe8:	4610      	mov	r0, r2
    dfea:	91cd      	str	r1, [sp, #820]	; 0x334
    dfec:	4619      	mov	r1, r3
    dfee:	f7fc fd44 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dff2:	90cc      	str	r0, [sp, #816]	; 0x330
    dff4:	91cb      	str	r1, [sp, #812]	; 0x32c
    dff6:	e7ff      	b.n	dff8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xfa8>
    dff8:	98cc      	ldr	r0, [sp, #816]	; 0x330
    dffa:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    dffe:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    e000:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    e004:	f64e 6248 	movw	r2, #61000	; 0xee48
    e008:	f2c0 0201 	movt	r2, #1
    e00c:	6812      	ldr	r2, [r2, #0]
    e00e:	466b      	mov	r3, sp
    e010:	f04f 0c01 	mov.w	ip, #1
    e014:	f8c3 c008 	str.w	ip, [r3, #8]
    e018:	605a      	str	r2, [r3, #4]
    e01a:	f8c3 c000 	str.w	ip, [r3]
    e01e:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    e022:	2202      	movs	r2, #2
    e024:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    e028:	99cd      	ldr	r1, [sp, #820]	; 0x334
    e02a:	f008 fa35 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e02e:	e7ff      	b.n	e030 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xfe0>
    e030:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    e034:	f64f 1014 	movw	r0, #63764	; 0xf914
    e038:	f2c0 0001 	movt	r0, #1
    e03c:	6802      	ldr	r2, [r0, #0]
    e03e:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    e042:	f004 f8e1 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e046:	e7ff      	b.n	e048 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xff8>
    e048:	e7ff      	b.n	e04a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xffa>
                self.v[x] = self.v[x].wrapping_add(kk);
    e04a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e04e:	280f      	cmp	r0, #15
    e050:	f202 8541 	bhi.w	10ad6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3a86>
    e054:	e7ff      	b.n	e056 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1006>
    e056:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e05a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e05e:	1842      	adds	r2, r0, r1
    e060:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    e064:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    e068:	f008 fa7a 	bl	16560 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
    e06c:	90ca      	str	r0, [sp, #808]	; 0x328
    e06e:	e7ff      	b.n	e070 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1020>
    e070:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e074:	280f      	cmp	r0, #15
    e076:	f202 8538 	bhi.w	10aea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3a9a>
    e07a:	e7ff      	b.n	e07c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x102c>
    e07c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e080:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e084:	1842      	adds	r2, r0, r1
    e086:	9bca      	ldr	r3, [sp, #808]	; 0x328
    e088:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e08c:	f002 ba96 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    e090:	2005      	movs	r0, #5
    e092:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    e096:	f64e 6000 	movw	r0, #60928	; 0xee00
    e09a:	f2c0 0001 	movt	r0, #1
    e09e:	6801      	ldr	r1, [r0, #0]
    e0a0:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    e0a4:	f008 fb33 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e0a8:	90c9      	str	r0, [sp, #804]	; 0x324
    e0aa:	e01f      	b.n	e0ec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x109c>
    e0ac:	2001      	movs	r0, #1
    e0ae:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    e0b2:	e015      	b.n	e0e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1090>
    e0b4:	2000      	movs	r0, #0
    e0b6:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    e0ba:	e011      	b.n	e0e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1090>
    e0bc:	2000      	movs	r0, #0
    e0be:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    e0c2:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    e0c6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e0ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e0ce:	f003 f83d 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e0d2:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    e0d6:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    e0da:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    e0de:	e00a      	b.n	e0f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x10a6>
    e0e0:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    e0e4:	07c0      	lsls	r0, r0, #31
    e0e6:	2800      	cmp	r0, #0
    e0e8:	d112      	bne.n	e110 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x10c0>
    e0ea:	e055      	b.n	e198 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1148>
    e0ec:	98c9      	ldr	r0, [sp, #804]	; 0x324
    e0ee:	07c1      	lsls	r1, r0, #31
    e0f0:	2900      	cmp	r1, #0
    e0f2:	d1e3      	bne.n	e0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x106c>
    e0f4:	e7de      	b.n	e0b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1064>
    e0f6:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    e0fa:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    e0fe:	f008 fb06 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e102:	90c8      	str	r0, [sp, #800]	; 0x320
    e104:	e7ff      	b.n	e106 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x10b6>
    e106:	98c8      	ldr	r0, [sp, #800]	; 0x320
    e108:	07c1      	lsls	r1, r0, #31
    e10a:	2900      	cmp	r1, #0
    e10c:	d1ce      	bne.n	e0ac <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x105c>
    e10e:	e7d1      	b.n	e0b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1064>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    e110:	f64f 0094 	movw	r0, #63636	; 0xf894
    e114:	f2c0 0001 	movt	r0, #1
    e118:	6801      	ldr	r1, [r0, #0]
    e11a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e11e:	f100 0212 	add.w	r2, r0, #18
    e122:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    e126:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    e12a:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    e12e:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    e132:	f2c0 0301 	movt	r3, #1
    e136:	4610      	mov	r0, r2
    e138:	91c7      	str	r1, [sp, #796]	; 0x31c
    e13a:	4619      	mov	r1, r3
    e13c:	f7fc fc9d 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e140:	90c6      	str	r0, [sp, #792]	; 0x318
    e142:	91c5      	str	r1, [sp, #788]	; 0x314
    e144:	e7ff      	b.n	e146 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x10f6>
    e146:	98c6      	ldr	r0, [sp, #792]	; 0x318
    e148:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    e14c:	99c5      	ldr	r1, [sp, #788]	; 0x314
    e14e:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    e152:	f64e 6248 	movw	r2, #61000	; 0xee48
    e156:	f2c0 0201 	movt	r2, #1
    e15a:	6812      	ldr	r2, [r2, #0]
    e15c:	466b      	mov	r3, sp
    e15e:	f04f 0c01 	mov.w	ip, #1
    e162:	f8c3 c008 	str.w	ip, [r3, #8]
    e166:	605a      	str	r2, [r3, #4]
    e168:	f8c3 c000 	str.w	ip, [r3]
    e16c:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    e170:	2202      	movs	r2, #2
    e172:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    e176:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    e178:	f008 f98e 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e17c:	e7ff      	b.n	e17e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x112e>
    e17e:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    e182:	f64f 00b4 	movw	r0, #63668	; 0xf8b4
    e186:	f2c0 0001 	movt	r0, #1
    e18a:	6802      	ldr	r2, [r0, #0]
    e18c:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    e190:	f004 f83a 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e194:	e7ff      	b.n	e196 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1146>
    e196:	e7ff      	b.n	e198 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1148>
                self.v[x] = self.v[y];
    e198:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e19c:	280f      	cmp	r0, #15
    e19e:	f202 8486 	bhi.w	10aae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3a5e>
    e1a2:	e7ff      	b.n	e1a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1154>
    e1a4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e1a8:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e1ac:	1842      	adds	r2, r0, r1
    e1ae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e1b2:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e1b6:	2b0f      	cmp	r3, #15
    e1b8:	92c4      	str	r2, [sp, #784]	; 0x310
    e1ba:	f202 8482 	bhi.w	10ac2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3a72>
    e1be:	e7ff      	b.n	e1c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1170>
    e1c0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e1c4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e1c8:	1842      	adds	r2, r0, r1
    e1ca:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    e1cc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e1d0:	f002 b9f4 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    e1d4:	2005      	movs	r0, #5
    e1d6:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    e1da:	f64e 6000 	movw	r0, #60928	; 0xee00
    e1de:	f2c0 0001 	movt	r0, #1
    e1e2:	6801      	ldr	r1, [r0, #0]
    e1e4:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    e1e8:	f008 fa91 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e1ec:	90c3      	str	r0, [sp, #780]	; 0x30c
    e1ee:	e01f      	b.n	e230 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11e0>
    e1f0:	2001      	movs	r0, #1
    e1f2:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    e1f6:	e015      	b.n	e224 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11d4>
    e1f8:	2000      	movs	r0, #0
    e1fa:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    e1fe:	e011      	b.n	e224 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11d4>
    e200:	2000      	movs	r0, #0
    e202:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    e206:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    e20a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e20e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e212:	f002 ff9b 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e216:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    e21a:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    e21e:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    e222:	e00a      	b.n	e23a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11ea>
    e224:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    e228:	07c0      	lsls	r0, r0, #31
    e22a:	2800      	cmp	r0, #0
    e22c:	d112      	bne.n	e254 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1204>
    e22e:	e055      	b.n	e2dc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x128c>
    e230:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    e232:	07c1      	lsls	r1, r0, #31
    e234:	2900      	cmp	r1, #0
    e236:	d1e3      	bne.n	e200 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11b0>
    e238:	e7de      	b.n	e1f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11a8>
    e23a:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    e23e:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    e242:	f008 fa64 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e246:	90c2      	str	r0, [sp, #776]	; 0x308
    e248:	e7ff      	b.n	e24a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11fa>
    e24a:	98c2      	ldr	r0, [sp, #776]	; 0x308
    e24c:	07c1      	lsls	r1, r0, #31
    e24e:	2900      	cmp	r1, #0
    e250:	d1ce      	bne.n	e1f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11a0>
    e252:	e7d1      	b.n	e1f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11a8>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    e254:	f64f 0034 	movw	r0, #63540	; 0xf834
    e258:	f2c0 0001 	movt	r0, #1
    e25c:	6801      	ldr	r1, [r0, #0]
    e25e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e262:	f100 0212 	add.w	r2, r0, #18
    e266:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    e26a:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    e26e:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    e272:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    e276:	f2c0 0301 	movt	r3, #1
    e27a:	4610      	mov	r0, r2
    e27c:	91c1      	str	r1, [sp, #772]	; 0x304
    e27e:	4619      	mov	r1, r3
    e280:	f7fc fbfb 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e284:	90c0      	str	r0, [sp, #768]	; 0x300
    e286:	91bf      	str	r1, [sp, #764]	; 0x2fc
    e288:	e7ff      	b.n	e28a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x123a>
    e28a:	98c0      	ldr	r0, [sp, #768]	; 0x300
    e28c:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    e290:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    e292:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    e296:	f64e 6248 	movw	r2, #61000	; 0xee48
    e29a:	f2c0 0201 	movt	r2, #1
    e29e:	6812      	ldr	r2, [r2, #0]
    e2a0:	466b      	mov	r3, sp
    e2a2:	f04f 0c01 	mov.w	ip, #1
    e2a6:	f8c3 c008 	str.w	ip, [r3, #8]
    e2aa:	605a      	str	r2, [r3, #4]
    e2ac:	f8c3 c000 	str.w	ip, [r3]
    e2b0:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    e2b4:	2202      	movs	r2, #2
    e2b6:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    e2ba:	99c1      	ldr	r1, [sp, #772]	; 0x304
    e2bc:	f008 f8ec 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e2c0:	e7ff      	b.n	e2c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1272>
    e2c2:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    e2c6:	f64f 0054 	movw	r0, #63572	; 0xf854
    e2ca:	f2c0 0001 	movt	r0, #1
    e2ce:	6802      	ldr	r2, [r0, #0]
    e2d0:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    e2d4:	f003 ff98 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e2d8:	e7ff      	b.n	e2da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x128a>
    e2da:	e7ff      	b.n	e2dc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x128c>
                self.v[x] |= self.v[y];
    e2dc:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e2e0:	280f      	cmp	r0, #15
    e2e2:	f202 83d0 	bhi.w	10a86 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3a36>
    e2e6:	e7ff      	b.n	e2e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1298>
    e2e8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e2ec:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e2f0:	1842      	adds	r2, r0, r1
    e2f2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e2f6:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e2fa:	2b0f      	cmp	r3, #15
    e2fc:	92be      	str	r2, [sp, #760]	; 0x2f8
    e2fe:	f202 83cc 	bhi.w	10a9a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3a4a>
    e302:	e7ff      	b.n	e304 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x12b4>
    e304:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e308:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e30c:	1842      	adds	r2, r0, r1
    e30e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e312:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    e316:	ea43 030c 	orr.w	r3, r3, ip
    e31a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e31e:	f002 b94d 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    e322:	2005      	movs	r0, #5
    e324:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    e328:	f64e 6000 	movw	r0, #60928	; 0xee00
    e32c:	f2c0 0001 	movt	r0, #1
    e330:	6801      	ldr	r1, [r0, #0]
    e332:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    e336:	f008 f9ea 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e33a:	90bd      	str	r0, [sp, #756]	; 0x2f4
    e33c:	e01f      	b.n	e37e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x132e>
    e33e:	2001      	movs	r0, #1
    e340:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    e344:	e015      	b.n	e372 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1322>
    e346:	2000      	movs	r0, #0
    e348:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    e34c:	e011      	b.n	e372 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1322>
    e34e:	2000      	movs	r0, #0
    e350:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    e354:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    e358:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e35c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e360:	f002 fef4 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e364:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    e368:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    e36c:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    e370:	e00a      	b.n	e388 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1338>
    e372:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    e376:	07c0      	lsls	r0, r0, #31
    e378:	2800      	cmp	r0, #0
    e37a:	d112      	bne.n	e3a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1352>
    e37c:	e055      	b.n	e42a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x13da>
    e37e:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    e380:	07c1      	lsls	r1, r0, #31
    e382:	2900      	cmp	r1, #0
    e384:	d1e3      	bne.n	e34e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x12fe>
    e386:	e7de      	b.n	e346 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x12f6>
    e388:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    e38c:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    e390:	f008 f9bd 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e394:	90bc      	str	r0, [sp, #752]	; 0x2f0
    e396:	e7ff      	b.n	e398 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1348>
    e398:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    e39a:	07c1      	lsls	r1, r0, #31
    e39c:	2900      	cmp	r1, #0
    e39e:	d1ce      	bne.n	e33e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x12ee>
    e3a0:	e7d1      	b.n	e346 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x12f6>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    e3a2:	f24f 70d4 	movw	r0, #63444	; 0xf7d4
    e3a6:	f2c0 0001 	movt	r0, #1
    e3aa:	6801      	ldr	r1, [r0, #0]
    e3ac:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e3b0:	f100 0212 	add.w	r2, r0, #18
    e3b4:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    e3b8:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    e3bc:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    e3c0:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    e3c4:	f2c0 0301 	movt	r3, #1
    e3c8:	4610      	mov	r0, r2
    e3ca:	91bb      	str	r1, [sp, #748]	; 0x2ec
    e3cc:	4619      	mov	r1, r3
    e3ce:	f7fc fb54 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e3d2:	90ba      	str	r0, [sp, #744]	; 0x2e8
    e3d4:	91b9      	str	r1, [sp, #740]	; 0x2e4
    e3d6:	e7ff      	b.n	e3d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1388>
    e3d8:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    e3da:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    e3de:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    e3e0:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    e3e4:	f64e 6248 	movw	r2, #61000	; 0xee48
    e3e8:	f2c0 0201 	movt	r2, #1
    e3ec:	6812      	ldr	r2, [r2, #0]
    e3ee:	466b      	mov	r3, sp
    e3f0:	f04f 0c01 	mov.w	ip, #1
    e3f4:	f8c3 c008 	str.w	ip, [r3, #8]
    e3f8:	605a      	str	r2, [r3, #4]
    e3fa:	f8c3 c000 	str.w	ip, [r3]
    e3fe:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    e402:	2202      	movs	r2, #2
    e404:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    e408:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    e40a:	f008 f845 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e40e:	e7ff      	b.n	e410 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x13c0>
    e410:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    e414:	f24f 70f4 	movw	r0, #63476	; 0xf7f4
    e418:	f2c0 0001 	movt	r0, #1
    e41c:	6802      	ldr	r2, [r0, #0]
    e41e:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    e422:	f003 fef1 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e426:	e7ff      	b.n	e428 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x13d8>
    e428:	e7ff      	b.n	e42a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x13da>
                self.v[x] &= self.v[y];
    e42a:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e42e:	280f      	cmp	r0, #15
    e430:	f202 8315 	bhi.w	10a5e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3a0e>
    e434:	e7ff      	b.n	e436 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x13e6>
    e436:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e43a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e43e:	1842      	adds	r2, r0, r1
    e440:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e444:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e448:	2b0f      	cmp	r3, #15
    e44a:	92b8      	str	r2, [sp, #736]	; 0x2e0
    e44c:	f202 8311 	bhi.w	10a72 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3a22>
    e450:	e7ff      	b.n	e452 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1402>
    e452:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e456:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e45a:	1842      	adds	r2, r0, r1
    e45c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e460:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    e464:	ea03 030c 	and.w	r3, r3, ip
    e468:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e46c:	f002 b8a6 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    e470:	2005      	movs	r0, #5
    e472:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    e476:	f64e 6000 	movw	r0, #60928	; 0xee00
    e47a:	f2c0 0001 	movt	r0, #1
    e47e:	6801      	ldr	r1, [r0, #0]
    e480:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    e484:	f008 f943 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e488:	90b7      	str	r0, [sp, #732]	; 0x2dc
    e48a:	e01f      	b.n	e4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x147c>
    e48c:	2001      	movs	r0, #1
    e48e:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    e492:	e015      	b.n	e4c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1470>
    e494:	2000      	movs	r0, #0
    e496:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    e49a:	e011      	b.n	e4c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1470>
    e49c:	2000      	movs	r0, #0
    e49e:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    e4a2:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    e4a6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e4aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e4ae:	f002 fe4d 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e4b2:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    e4b6:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    e4ba:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    e4be:	e00a      	b.n	e4d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1486>
    e4c0:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    e4c4:	07c0      	lsls	r0, r0, #31
    e4c6:	2800      	cmp	r0, #0
    e4c8:	d112      	bne.n	e4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x14a0>
    e4ca:	e055      	b.n	e578 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1528>
    e4cc:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    e4ce:	07c1      	lsls	r1, r0, #31
    e4d0:	2900      	cmp	r1, #0
    e4d2:	d1e3      	bne.n	e49c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x144c>
    e4d4:	e7de      	b.n	e494 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1444>
    e4d6:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    e4da:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    e4de:	f008 f916 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e4e2:	90b6      	str	r0, [sp, #728]	; 0x2d8
    e4e4:	e7ff      	b.n	e4e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1496>
    e4e6:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    e4e8:	07c1      	lsls	r1, r0, #31
    e4ea:	2900      	cmp	r1, #0
    e4ec:	d1ce      	bne.n	e48c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x143c>
    e4ee:	e7d1      	b.n	e494 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1444>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    e4f0:	f24f 7074 	movw	r0, #63348	; 0xf774
    e4f4:	f2c0 0001 	movt	r0, #1
    e4f8:	6801      	ldr	r1, [r0, #0]
    e4fa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e4fe:	f100 0212 	add.w	r2, r0, #18
    e502:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    e506:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    e50a:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    e50e:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    e512:	f2c0 0301 	movt	r3, #1
    e516:	4610      	mov	r0, r2
    e518:	91b5      	str	r1, [sp, #724]	; 0x2d4
    e51a:	4619      	mov	r1, r3
    e51c:	f7fc faad 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e520:	90b4      	str	r0, [sp, #720]	; 0x2d0
    e522:	91b3      	str	r1, [sp, #716]	; 0x2cc
    e524:	e7ff      	b.n	e526 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x14d6>
    e526:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    e528:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    e52c:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    e52e:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    e532:	f64e 6248 	movw	r2, #61000	; 0xee48
    e536:	f2c0 0201 	movt	r2, #1
    e53a:	6812      	ldr	r2, [r2, #0]
    e53c:	466b      	mov	r3, sp
    e53e:	f04f 0c01 	mov.w	ip, #1
    e542:	f8c3 c008 	str.w	ip, [r3, #8]
    e546:	605a      	str	r2, [r3, #4]
    e548:	f8c3 c000 	str.w	ip, [r3]
    e54c:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e550:	2202      	movs	r2, #2
    e552:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    e556:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    e558:	f007 ff9e 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e55c:	e7ff      	b.n	e55e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x150e>
    e55e:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    e562:	f24f 7094 	movw	r0, #63380	; 0xf794
    e566:	f2c0 0001 	movt	r0, #1
    e56a:	6802      	ldr	r2, [r0, #0]
    e56c:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e570:	f003 fe4a 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e574:	e7ff      	b.n	e576 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1526>
    e576:	e7ff      	b.n	e578 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1528>
                self.v[x] ^= self.v[y];
    e578:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e57c:	280f      	cmp	r0, #15
    e57e:	f202 825a 	bhi.w	10a36 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x39e6>
    e582:	e7ff      	b.n	e584 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1534>
    e584:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e588:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e58c:	1842      	adds	r2, r0, r1
    e58e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e592:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e596:	2b0f      	cmp	r3, #15
    e598:	92b2      	str	r2, [sp, #712]	; 0x2c8
    e59a:	f202 8256 	bhi.w	10a4a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x39fa>
    e59e:	e7ff      	b.n	e5a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1550>
    e5a0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e5a4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5a8:	1842      	adds	r2, r0, r1
    e5aa:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e5ae:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    e5b2:	ea83 030c 	eor.w	r3, r3, ip
    e5b6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e5ba:	f001 bfff 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    e5be:	2005      	movs	r0, #5
    e5c0:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    e5c4:	f64e 6000 	movw	r0, #60928	; 0xee00
    e5c8:	f2c0 0001 	movt	r0, #1
    e5cc:	6801      	ldr	r1, [r0, #0]
    e5ce:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e5d2:	f008 f89c 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e5d6:	90b1      	str	r0, [sp, #708]	; 0x2c4
    e5d8:	e01f      	b.n	e61a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x15ca>
    e5da:	2001      	movs	r0, #1
    e5dc:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e5e0:	e015      	b.n	e60e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x15be>
    e5e2:	2000      	movs	r0, #0
    e5e4:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e5e8:	e011      	b.n	e60e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x15be>
    e5ea:	2000      	movs	r0, #0
    e5ec:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    e5f0:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    e5f4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e5f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e5fc:	f002 fda6 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e600:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    e604:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    e608:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    e60c:	e00a      	b.n	e624 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x15d4>
    e60e:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    e612:	07c0      	lsls	r0, r0, #31
    e614:	2800      	cmp	r0, #0
    e616:	d112      	bne.n	e63e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x15ee>
    e618:	e055      	b.n	e6c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1676>
    e61a:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    e61c:	07c1      	lsls	r1, r0, #31
    e61e:	2900      	cmp	r1, #0
    e620:	d1e3      	bne.n	e5ea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x159a>
    e622:	e7de      	b.n	e5e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1592>
    e624:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e628:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    e62c:	f008 f86f 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e630:	90b0      	str	r0, [sp, #704]	; 0x2c0
    e632:	e7ff      	b.n	e634 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x15e4>
    e634:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    e636:	07c1      	lsls	r1, r0, #31
    e638:	2900      	cmp	r1, #0
    e63a:	d1ce      	bne.n	e5da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x158a>
    e63c:	e7d1      	b.n	e5e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1592>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    e63e:	f24f 7004 	movw	r0, #63236	; 0xf704
    e642:	f2c0 0001 	movt	r0, #1
    e646:	6801      	ldr	r1, [r0, #0]
    e648:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e64c:	f100 0212 	add.w	r2, r0, #18
    e650:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    e654:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    e658:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    e65c:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    e660:	f2c0 0301 	movt	r3, #1
    e664:	4610      	mov	r0, r2
    e666:	91af      	str	r1, [sp, #700]	; 0x2bc
    e668:	4619      	mov	r1, r3
    e66a:	f7fc fa06 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e66e:	90ae      	str	r0, [sp, #696]	; 0x2b8
    e670:	91ad      	str	r1, [sp, #692]	; 0x2b4
    e672:	e7ff      	b.n	e674 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1624>
    e674:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    e676:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    e67a:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    e67c:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    e680:	f64e 6248 	movw	r2, #61000	; 0xee48
    e684:	f2c0 0201 	movt	r2, #1
    e688:	6812      	ldr	r2, [r2, #0]
    e68a:	466b      	mov	r3, sp
    e68c:	f04f 0c01 	mov.w	ip, #1
    e690:	f8c3 c008 	str.w	ip, [r3, #8]
    e694:	605a      	str	r2, [r3, #4]
    e696:	f8c3 c000 	str.w	ip, [r3]
    e69a:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e69e:	2202      	movs	r2, #2
    e6a0:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    e6a4:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    e6a6:	f007 fef7 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e6aa:	e7ff      	b.n	e6ac <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x165c>
    e6ac:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    e6b0:	f24f 7024 	movw	r0, #63268	; 0xf724
    e6b4:	f2c0 0001 	movt	r0, #1
    e6b8:	6802      	ldr	r2, [r0, #0]
    e6ba:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e6be:	f003 fda3 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e6c2:	e7ff      	b.n	e6c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1674>
    e6c4:	e7ff      	b.n	e6c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1676>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    e6c6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e6ca:	280f      	cmp	r0, #15
    e6cc:	f202 8195 	bhi.w	109fa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x39aa>
    e6d0:	e7ff      	b.n	e6d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1682>
    e6d2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e6d6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e6da:	1842      	adds	r2, r0, r1
    e6dc:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e6e0:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e6e4:	2b0f      	cmp	r3, #15
    e6e6:	92ac      	str	r2, [sp, #688]	; 0x2b0
    e6e8:	f202 8191 	bhi.w	10a0e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x39be>
    e6ec:	e7ff      	b.n	e6ee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x169e>
    e6ee:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e6f2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e6f6:	1842      	adds	r2, r0, r1
    e6f8:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    e6fc:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    e6fe:	f007 ff75 	bl	165ec <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
    e702:	90ab      	str	r0, [sp, #684]	; 0x2ac
    e704:	91aa      	str	r1, [sp, #680]	; 0x2a8
    e706:	e7ff      	b.n	e708 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x16b8>
    e708:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    e70a:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    e70e:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    e710:	f001 0201 	and.w	r2, r1, #1
    e714:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    e718:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e71c:	2a0f      	cmp	r2, #15
    e71e:	f202 8180 	bhi.w	10a22 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x39d2>
    e722:	e7ff      	b.n	e724 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x16d4>
    e724:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e728:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e72c:	1842      	adds	r2, r0, r1
    e72e:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    e730:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    e734:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    e736:	f002 0c01 	and.w	ip, r2, #1
    e73a:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    e73e:	f001 bf3d 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    e742:	2005      	movs	r0, #5
    e744:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    e748:	f64e 6000 	movw	r0, #60928	; 0xee00
    e74c:	f2c0 0001 	movt	r0, #1
    e750:	6801      	ldr	r1, [r0, #0]
    e752:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    e756:	f007 ffda 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e75a:	90a9      	str	r0, [sp, #676]	; 0x2a4
    e75c:	e01f      	b.n	e79e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x174e>
    e75e:	2001      	movs	r0, #1
    e760:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    e764:	e015      	b.n	e792 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1742>
    e766:	2000      	movs	r0, #0
    e768:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    e76c:	e011      	b.n	e792 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1742>
    e76e:	2000      	movs	r0, #0
    e770:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    e774:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    e778:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e77c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e780:	f002 fce4 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e784:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    e788:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    e78c:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    e790:	e00a      	b.n	e7a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1758>
    e792:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    e796:	07c0      	lsls	r0, r0, #31
    e798:	2800      	cmp	r0, #0
    e79a:	d112      	bne.n	e7c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1772>
    e79c:	e055      	b.n	e84a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x17fa>
    e79e:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    e7a0:	07c1      	lsls	r1, r0, #31
    e7a2:	2900      	cmp	r1, #0
    e7a4:	d1e3      	bne.n	e76e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x171e>
    e7a6:	e7de      	b.n	e766 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1716>
    e7a8:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    e7ac:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    e7b0:	f007 ffad 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e7b4:	90a8      	str	r0, [sp, #672]	; 0x2a0
    e7b6:	e7ff      	b.n	e7b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1768>
    e7b8:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    e7ba:	07c1      	lsls	r1, r0, #31
    e7bc:	2900      	cmp	r1, #0
    e7be:	d1ce      	bne.n	e75e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x170e>
    e7c0:	e7d1      	b.n	e766 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1716>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    e7c2:	f24f 6094 	movw	r0, #63124	; 0xf694
    e7c6:	f2c0 0001 	movt	r0, #1
    e7ca:	6801      	ldr	r1, [r0, #0]
    e7cc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e7d0:	f100 0212 	add.w	r2, r0, #18
    e7d4:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    e7d8:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    e7dc:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    e7e0:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    e7e4:	f2c0 0301 	movt	r3, #1
    e7e8:	4610      	mov	r0, r2
    e7ea:	91a7      	str	r1, [sp, #668]	; 0x29c
    e7ec:	4619      	mov	r1, r3
    e7ee:	f7fc f944 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e7f2:	90a6      	str	r0, [sp, #664]	; 0x298
    e7f4:	91a5      	str	r1, [sp, #660]	; 0x294
    e7f6:	e7ff      	b.n	e7f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x17a8>
    e7f8:	98a6      	ldr	r0, [sp, #664]	; 0x298
    e7fa:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    e7fe:	99a5      	ldr	r1, [sp, #660]	; 0x294
    e800:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    e804:	f64e 6248 	movw	r2, #61000	; 0xee48
    e808:	f2c0 0201 	movt	r2, #1
    e80c:	6812      	ldr	r2, [r2, #0]
    e80e:	466b      	mov	r3, sp
    e810:	f04f 0c01 	mov.w	ip, #1
    e814:	f8c3 c008 	str.w	ip, [r3, #8]
    e818:	605a      	str	r2, [r3, #4]
    e81a:	f8c3 c000 	str.w	ip, [r3]
    e81e:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    e822:	2202      	movs	r2, #2
    e824:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    e828:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    e82a:	f007 fe35 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e82e:	e7ff      	b.n	e830 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x17e0>
    e830:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    e834:	f24f 60b4 	movw	r0, #63156	; 0xf6b4
    e838:	f2c0 0001 	movt	r0, #1
    e83c:	6802      	ldr	r2, [r0, #0]
    e83e:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    e842:	f003 fce1 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e846:	e7ff      	b.n	e848 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x17f8>
    e848:	e7ff      	b.n	e84a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x17fa>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    e84a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e84e:	280f      	cmp	r0, #15
    e850:	f202 80b5 	bhi.w	109be <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x396e>
    e854:	e7ff      	b.n	e856 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1806>
    e856:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e85a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e85e:	1842      	adds	r2, r0, r1
    e860:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e864:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e868:	2b0f      	cmp	r3, #15
    e86a:	92a4      	str	r2, [sp, #656]	; 0x290
    e86c:	f202 80b1 	bhi.w	109d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3982>
    e870:	e7ff      	b.n	e872 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1822>
    e872:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e876:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e87a:	1842      	adds	r2, r0, r1
    e87c:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    e880:	98a4      	ldr	r0, [sp, #656]	; 0x290
    e882:	f007 fede 	bl	16642 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    e886:	90a3      	str	r0, [sp, #652]	; 0x28c
    e888:	91a2      	str	r1, [sp, #648]	; 0x288
    e88a:	e7ff      	b.n	e88c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x183c>
    e88c:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    e88e:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    e892:	99a2      	ldr	r1, [sp, #648]	; 0x288
    e894:	f001 0201 	and.w	r2, r1, #1
    e898:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    e89c:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e8a0:	2a0f      	cmp	r2, #15
    e8a2:	f202 80a0 	bhi.w	109e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3996>
    e8a6:	e7ff      	b.n	e8a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1858>
    e8a8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e8ac:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8b0:	1842      	adds	r2, r0, r1
    e8b2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    e8b4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    e8b8:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    e8ba:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    e8be:	ea22 020c 	bic.w	r2, r2, ip
    e8c2:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    e8c6:	f001 be79 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    e8ca:	2005      	movs	r0, #5
    e8cc:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    e8d0:	f64e 6000 	movw	r0, #60928	; 0xee00
    e8d4:	f2c0 0001 	movt	r0, #1
    e8d8:	6801      	ldr	r1, [r0, #0]
    e8da:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    e8de:	f007 ff16 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e8e2:	90a1      	str	r0, [sp, #644]	; 0x284
    e8e4:	e01f      	b.n	e926 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x18d6>
    e8e6:	2001      	movs	r0, #1
    e8e8:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    e8ec:	e015      	b.n	e91a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x18ca>
    e8ee:	2000      	movs	r0, #0
    e8f0:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    e8f4:	e011      	b.n	e91a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x18ca>
    e8f6:	2000      	movs	r0, #0
    e8f8:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    e8fc:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    e900:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e904:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e908:	f002 fc20 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e90c:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    e910:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    e914:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    e918:	e00a      	b.n	e930 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x18e0>
    e91a:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    e91e:	07c0      	lsls	r0, r0, #31
    e920:	2800      	cmp	r0, #0
    e922:	d112      	bne.n	e94a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x18fa>
    e924:	e055      	b.n	e9d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1982>
    e926:	98a1      	ldr	r0, [sp, #644]	; 0x284
    e928:	07c1      	lsls	r1, r0, #31
    e92a:	2900      	cmp	r1, #0
    e92c:	d1e3      	bne.n	e8f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x18a6>
    e92e:	e7de      	b.n	e8ee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x189e>
    e930:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    e934:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    e938:	f007 fee9 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e93c:	90a0      	str	r0, [sp, #640]	; 0x280
    e93e:	e7ff      	b.n	e940 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x18f0>
    e940:	98a0      	ldr	r0, [sp, #640]	; 0x280
    e942:	07c1      	lsls	r1, r0, #31
    e944:	2900      	cmp	r1, #0
    e946:	d1ce      	bne.n	e8e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1896>
    e948:	e7d1      	b.n	e8ee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x189e>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    e94a:	f24f 6024 	movw	r0, #63012	; 0xf624
    e94e:	f2c0 0001 	movt	r0, #1
    e952:	6801      	ldr	r1, [r0, #0]
    e954:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e958:	f100 0212 	add.w	r2, r0, #18
    e95c:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    e960:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    e964:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    e968:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    e96c:	f2c0 0301 	movt	r3, #1
    e970:	4610      	mov	r0, r2
    e972:	919f      	str	r1, [sp, #636]	; 0x27c
    e974:	4619      	mov	r1, r3
    e976:	f7fc f880 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e97a:	909e      	str	r0, [sp, #632]	; 0x278
    e97c:	919d      	str	r1, [sp, #628]	; 0x274
    e97e:	e7ff      	b.n	e980 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1930>
    e980:	989e      	ldr	r0, [sp, #632]	; 0x278
    e982:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    e986:	999d      	ldr	r1, [sp, #628]	; 0x274
    e988:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    e98c:	f64e 6248 	movw	r2, #61000	; 0xee48
    e990:	f2c0 0201 	movt	r2, #1
    e994:	6812      	ldr	r2, [r2, #0]
    e996:	466b      	mov	r3, sp
    e998:	f04f 0c01 	mov.w	ip, #1
    e99c:	f8c3 c008 	str.w	ip, [r3, #8]
    e9a0:	605a      	str	r2, [r3, #4]
    e9a2:	f8c3 c000 	str.w	ip, [r3]
    e9a6:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    e9aa:	2202      	movs	r2, #2
    e9ac:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    e9b0:	999f      	ldr	r1, [sp, #636]	; 0x27c
    e9b2:	f007 fd71 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e9b6:	e7ff      	b.n	e9b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1968>
    e9b8:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    e9bc:	f24f 6044 	movw	r0, #63044	; 0xf644
    e9c0:	f2c0 0001 	movt	r0, #1
    e9c4:	6802      	ldr	r2, [r0, #0]
    e9c6:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    e9ca:	f003 fc1d 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e9ce:	e7ff      	b.n	e9d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1980>
    e9d0:	e7ff      	b.n	e9d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1982>
                self.v[0xf] = self.v[x] & 1;
    e9d2:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e9d6:	280f      	cmp	r0, #15
    e9d8:	f201 87d3 	bhi.w	10982 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3932>
    e9dc:	e7ff      	b.n	e9de <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x198e>
    e9de:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e9e2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e9e6:	1842      	adds	r2, r0, r1
    e9e8:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e9ec:	f002 0201 	and.w	r2, r2, #1
    e9f0:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    e9f4:	290f      	cmp	r1, #15
    e9f6:	f201 87ce 	bhi.w	10996 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3946>
    e9fa:	e7ff      	b.n	e9fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x19ac>
    e9fc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ea00:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ea04:	1842      	adds	r2, r0, r1
    ea06:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    ea0a:	2101      	movs	r1, #1
    ea0c:	f007 fdca 	bl	165a4 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>
    ea10:	909c      	str	r0, [sp, #624]	; 0x270
    ea12:	e7ff      	b.n	ea14 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x19c4>
    ea14:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ea18:	280f      	cmp	r0, #15
    ea1a:	f201 87c6 	bhi.w	109aa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x395a>
    ea1e:	e7ff      	b.n	ea20 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x19d0>
    ea20:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ea24:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ea28:	1842      	adds	r2, r0, r1
    ea2a:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    ea2c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ea30:	f001 bdc4 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    ea34:	2005      	movs	r0, #5
    ea36:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    ea3a:	f64e 6000 	movw	r0, #60928	; 0xee00
    ea3e:	f2c0 0001 	movt	r0, #1
    ea42:	6801      	ldr	r1, [r0, #0]
    ea44:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    ea48:	f007 fe61 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ea4c:	909b      	str	r0, [sp, #620]	; 0x26c
    ea4e:	e01f      	b.n	ea90 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a40>
    ea50:	2001      	movs	r0, #1
    ea52:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    ea56:	e015      	b.n	ea84 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a34>
    ea58:	2000      	movs	r0, #0
    ea5a:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    ea5e:	e011      	b.n	ea84 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a34>
    ea60:	2000      	movs	r0, #0
    ea62:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    ea66:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    ea6a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ea6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ea72:	f002 fb6b 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ea76:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    ea7a:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    ea7e:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    ea82:	e00a      	b.n	ea9a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a4a>
    ea84:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    ea88:	07c0      	lsls	r0, r0, #31
    ea8a:	2800      	cmp	r0, #0
    ea8c:	d112      	bne.n	eab4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a64>
    ea8e:	e055      	b.n	eb3c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1aec>
    ea90:	989b      	ldr	r0, [sp, #620]	; 0x26c
    ea92:	07c1      	lsls	r1, r0, #31
    ea94:	2900      	cmp	r1, #0
    ea96:	d1e3      	bne.n	ea60 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a10>
    ea98:	e7de      	b.n	ea58 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a08>
    ea9a:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    ea9e:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    eaa2:	f007 fe34 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eaa6:	909a      	str	r0, [sp, #616]	; 0x268
    eaa8:	e7ff      	b.n	eaaa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a5a>
    eaaa:	989a      	ldr	r0, [sp, #616]	; 0x268
    eaac:	07c1      	lsls	r1, r0, #31
    eaae:	2900      	cmp	r1, #0
    eab0:	d1ce      	bne.n	ea50 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a00>
    eab2:	e7d1      	b.n	ea58 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a08>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    eab4:	f24f 50b4 	movw	r0, #62900	; 0xf5b4
    eab8:	f2c0 0001 	movt	r0, #1
    eabc:	6801      	ldr	r1, [r0, #0]
    eabe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eac2:	f100 0212 	add.w	r2, r0, #18
    eac6:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    eaca:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    eace:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    ead2:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    ead6:	f2c0 0301 	movt	r3, #1
    eada:	4610      	mov	r0, r2
    eadc:	9199      	str	r1, [sp, #612]	; 0x264
    eade:	4619      	mov	r1, r3
    eae0:	f7fb ffcb 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    eae4:	9098      	str	r0, [sp, #608]	; 0x260
    eae6:	9197      	str	r1, [sp, #604]	; 0x25c
    eae8:	e7ff      	b.n	eaea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a9a>
    eaea:	9898      	ldr	r0, [sp, #608]	; 0x260
    eaec:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    eaf0:	9997      	ldr	r1, [sp, #604]	; 0x25c
    eaf2:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    eaf6:	f64e 6248 	movw	r2, #61000	; 0xee48
    eafa:	f2c0 0201 	movt	r2, #1
    eafe:	6812      	ldr	r2, [r2, #0]
    eb00:	466b      	mov	r3, sp
    eb02:	f04f 0c01 	mov.w	ip, #1
    eb06:	f8c3 c008 	str.w	ip, [r3, #8]
    eb0a:	605a      	str	r2, [r3, #4]
    eb0c:	f8c3 c000 	str.w	ip, [r3]
    eb10:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    eb14:	2202      	movs	r2, #2
    eb16:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    eb1a:	9999      	ldr	r1, [sp, #612]	; 0x264
    eb1c:	f007 fcbc 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    eb20:	e7ff      	b.n	eb22 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1ad2>
    eb22:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    eb26:	f24f 50d4 	movw	r0, #62932	; 0xf5d4
    eb2a:	f2c0 0001 	movt	r0, #1
    eb2e:	6802      	ldr	r2, [r0, #0]
    eb30:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    eb34:	f003 fb68 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    eb38:	e7ff      	b.n	eb3a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1aea>
    eb3a:	e7ff      	b.n	eb3c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1aec>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    eb3c:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    eb40:	280f      	cmp	r0, #15
    eb42:	f201 8700 	bhi.w	10946 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x38f6>
    eb46:	e7ff      	b.n	eb48 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1af8>
    eb48:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eb4c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    eb50:	1842      	adds	r2, r0, r1
    eb52:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    eb56:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    eb5a:	2b0f      	cmp	r3, #15
    eb5c:	9296      	str	r2, [sp, #600]	; 0x258
    eb5e:	f201 86fc 	bhi.w	1095a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x390a>
    eb62:	e7ff      	b.n	eb64 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1b14>
    eb64:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eb68:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eb6c:	1842      	adds	r2, r0, r1
    eb6e:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    eb72:	9896      	ldr	r0, [sp, #600]	; 0x258
    eb74:	f007 fd65 	bl	16642 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    eb78:	9095      	str	r0, [sp, #596]	; 0x254
    eb7a:	9194      	str	r1, [sp, #592]	; 0x250
    eb7c:	e7ff      	b.n	eb7e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1b2e>
    eb7e:	9895      	ldr	r0, [sp, #596]	; 0x254
    eb80:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    eb84:	9994      	ldr	r1, [sp, #592]	; 0x250
    eb86:	f001 0201 	and.w	r2, r1, #1
    eb8a:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    eb8e:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    eb92:	2a0f      	cmp	r2, #15
    eb94:	f201 86eb 	bhi.w	1096e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x391e>
    eb98:	e7ff      	b.n	eb9a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1b4a>
    eb9a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eb9e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eba2:	1842      	adds	r2, r0, r1
    eba4:	9b95      	ldr	r3, [sp, #596]	; 0x254
    eba6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    ebaa:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    ebac:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    ebb0:	ea22 020c 	bic.w	r2, r2, ip
    ebb4:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    ebb8:	f001 bd00 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    ebbc:	2005      	movs	r0, #5
    ebbe:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    ebc2:	f64e 6000 	movw	r0, #60928	; 0xee00
    ebc6:	f2c0 0001 	movt	r0, #1
    ebca:	6801      	ldr	r1, [r0, #0]
    ebcc:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    ebd0:	f007 fd9d 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ebd4:	9093      	str	r0, [sp, #588]	; 0x24c
    ebd6:	e01f      	b.n	ec18 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1bc8>
    ebd8:	2001      	movs	r0, #1
    ebda:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    ebde:	e015      	b.n	ec0c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1bbc>
    ebe0:	2000      	movs	r0, #0
    ebe2:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    ebe6:	e011      	b.n	ec0c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1bbc>
    ebe8:	2000      	movs	r0, #0
    ebea:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    ebee:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    ebf2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ebf6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ebfa:	f002 faa7 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ebfe:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    ec02:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    ec06:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    ec0a:	e00a      	b.n	ec22 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1bd2>
    ec0c:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    ec10:	07c0      	lsls	r0, r0, #31
    ec12:	2800      	cmp	r0, #0
    ec14:	d112      	bne.n	ec3c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1bec>
    ec16:	e055      	b.n	ecc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1c74>
    ec18:	9893      	ldr	r0, [sp, #588]	; 0x24c
    ec1a:	07c1      	lsls	r1, r0, #31
    ec1c:	2900      	cmp	r1, #0
    ec1e:	d1e3      	bne.n	ebe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1b98>
    ec20:	e7de      	b.n	ebe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1b90>
    ec22:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    ec26:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    ec2a:	f007 fd70 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ec2e:	9092      	str	r0, [sp, #584]	; 0x248
    ec30:	e7ff      	b.n	ec32 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1be2>
    ec32:	9892      	ldr	r0, [sp, #584]	; 0x248
    ec34:	07c1      	lsls	r1, r0, #31
    ec36:	2900      	cmp	r1, #0
    ec38:	d1ce      	bne.n	ebd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1b88>
    ec3a:	e7d1      	b.n	ebe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1b90>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    ec3c:	f24f 5040 	movw	r0, #62784	; 0xf540
    ec40:	f2c0 0001 	movt	r0, #1
    ec44:	6801      	ldr	r1, [r0, #0]
    ec46:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ec4a:	f100 0212 	add.w	r2, r0, #18
    ec4e:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    ec52:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    ec56:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    ec5a:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    ec5e:	f2c0 0301 	movt	r3, #1
    ec62:	4610      	mov	r0, r2
    ec64:	9191      	str	r1, [sp, #580]	; 0x244
    ec66:	4619      	mov	r1, r3
    ec68:	f7fb ff07 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ec6c:	9090      	str	r0, [sp, #576]	; 0x240
    ec6e:	918f      	str	r1, [sp, #572]	; 0x23c
    ec70:	e7ff      	b.n	ec72 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1c22>
    ec72:	9890      	ldr	r0, [sp, #576]	; 0x240
    ec74:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    ec78:	998f      	ldr	r1, [sp, #572]	; 0x23c
    ec7a:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    ec7e:	f64e 6248 	movw	r2, #61000	; 0xee48
    ec82:	f2c0 0201 	movt	r2, #1
    ec86:	6812      	ldr	r2, [r2, #0]
    ec88:	466b      	mov	r3, sp
    ec8a:	f04f 0c01 	mov.w	ip, #1
    ec8e:	f8c3 c008 	str.w	ip, [r3, #8]
    ec92:	605a      	str	r2, [r3, #4]
    ec94:	f8c3 c000 	str.w	ip, [r3]
    ec98:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    ec9c:	2202      	movs	r2, #2
    ec9e:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    eca2:	9991      	ldr	r1, [sp, #580]	; 0x244
    eca4:	f007 fbf8 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    eca8:	e7ff      	b.n	ecaa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1c5a>
    ecaa:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    ecae:	f24f 5060 	movw	r0, #62816	; 0xf560
    ecb2:	f2c0 0001 	movt	r0, #1
    ecb6:	6802      	ldr	r2, [r0, #0]
    ecb8:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    ecbc:	f003 faa4 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ecc0:	e7ff      	b.n	ecc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1c72>
    ecc2:	e7ff      	b.n	ecc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1c74>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    ecc4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ecc8:	280f      	cmp	r0, #15
    ecca:	f201 861e 	bhi.w	1090a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x38ba>
    ecce:	e7ff      	b.n	ecd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1c80>
    ecd0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ecd4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ecd8:	1842      	adds	r2, r0, r1
    ecda:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ecde:	09d2      	lsrs	r2, r2, #7
    ece0:	928e      	str	r2, [sp, #568]	; 0x238
    ece2:	e7ff      	b.n	ece4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1c94>
    ece4:	988e      	ldr	r0, [sp, #568]	; 0x238
    ece6:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ecea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    ecee:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ecf2:	2a0f      	cmp	r2, #15
    ecf4:	f201 8613 	bhi.w	1091e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x38ce>
    ecf8:	e7ff      	b.n	ecfa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1caa>
    ecfa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ecfe:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ed02:	1842      	adds	r2, r0, r1
    ed04:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    ed08:	2101      	movs	r1, #1
    ed0a:	f007 fc3a 	bl	16582 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>
    ed0e:	908d      	str	r0, [sp, #564]	; 0x234
    ed10:	e7ff      	b.n	ed12 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1cc2>
    ed12:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ed16:	280f      	cmp	r0, #15
    ed18:	f201 860b 	bhi.w	10932 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x38e2>
    ed1c:	e7ff      	b.n	ed1e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1cce>
    ed1e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ed22:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ed26:	1842      	adds	r2, r0, r1
    ed28:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    ed2a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ed2e:	f001 bc45 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    ed32:	2005      	movs	r0, #5
    ed34:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    ed38:	f64e 6000 	movw	r0, #60928	; 0xee00
    ed3c:	f2c0 0001 	movt	r0, #1
    ed40:	6801      	ldr	r1, [r0, #0]
    ed42:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    ed46:	f007 fce2 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ed4a:	908c      	str	r0, [sp, #560]	; 0x230
    ed4c:	e01f      	b.n	ed8e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d3e>
    ed4e:	2001      	movs	r0, #1
    ed50:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    ed54:	e015      	b.n	ed82 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d32>
    ed56:	2000      	movs	r0, #0
    ed58:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    ed5c:	e011      	b.n	ed82 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d32>
    ed5e:	2000      	movs	r0, #0
    ed60:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    ed64:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    ed68:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ed6c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ed70:	f002 f9ec 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ed74:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    ed78:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    ed7c:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    ed80:	e00a      	b.n	ed98 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d48>
    ed82:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    ed86:	07c0      	lsls	r0, r0, #31
    ed88:	2800      	cmp	r0, #0
    ed8a:	d112      	bne.n	edb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d62>
    ed8c:	e055      	b.n	ee3a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1dea>
    ed8e:	988c      	ldr	r0, [sp, #560]	; 0x230
    ed90:	07c1      	lsls	r1, r0, #31
    ed92:	2900      	cmp	r1, #0
    ed94:	d1e3      	bne.n	ed5e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d0e>
    ed96:	e7de      	b.n	ed56 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d06>
    ed98:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    ed9c:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    eda0:	f007 fcb5 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eda4:	908b      	str	r0, [sp, #556]	; 0x22c
    eda6:	e7ff      	b.n	eda8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d58>
    eda8:	988b      	ldr	r0, [sp, #556]	; 0x22c
    edaa:	07c1      	lsls	r1, r0, #31
    edac:	2900      	cmp	r1, #0
    edae:	d1ce      	bne.n	ed4e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1cfe>
    edb0:	e7d1      	b.n	ed56 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d06>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    edb2:	f24f 40e0 	movw	r0, #62688	; 0xf4e0
    edb6:	f2c0 0001 	movt	r0, #1
    edba:	6801      	ldr	r1, [r0, #0]
    edbc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    edc0:	f100 0212 	add.w	r2, r0, #18
    edc4:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    edc8:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    edcc:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    edd0:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    edd4:	f2c0 0301 	movt	r3, #1
    edd8:	4610      	mov	r0, r2
    edda:	918a      	str	r1, [sp, #552]	; 0x228
    eddc:	4619      	mov	r1, r3
    edde:	f7fb fe4c 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ede2:	9089      	str	r0, [sp, #548]	; 0x224
    ede4:	9188      	str	r1, [sp, #544]	; 0x220
    ede6:	e7ff      	b.n	ede8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d98>
    ede8:	9889      	ldr	r0, [sp, #548]	; 0x224
    edea:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    edee:	9988      	ldr	r1, [sp, #544]	; 0x220
    edf0:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    edf4:	f64e 6248 	movw	r2, #61000	; 0xee48
    edf8:	f2c0 0201 	movt	r2, #1
    edfc:	6812      	ldr	r2, [r2, #0]
    edfe:	466b      	mov	r3, sp
    ee00:	f04f 0c01 	mov.w	ip, #1
    ee04:	f8c3 c008 	str.w	ip, [r3, #8]
    ee08:	605a      	str	r2, [r3, #4]
    ee0a:	f8c3 c000 	str.w	ip, [r3]
    ee0e:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    ee12:	2202      	movs	r2, #2
    ee14:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    ee18:	998a      	ldr	r1, [sp, #552]	; 0x228
    ee1a:	f007 fb3d 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ee1e:	e7ff      	b.n	ee20 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1dd0>
    ee20:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    ee24:	f24f 5000 	movw	r0, #62720	; 0xf500
    ee28:	f2c0 0001 	movt	r0, #1
    ee2c:	6802      	ldr	r2, [r0, #0]
    ee2e:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    ee32:	f003 f9e9 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ee36:	e7ff      	b.n	ee38 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1de8>
    ee38:	e7ff      	b.n	ee3a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1dea>
                if self.v[x] != self.v[y] {
    ee3a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ee3e:	280f      	cmp	r0, #15
    ee40:	f201 854f 	bhi.w	108e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3892>
    ee44:	e7ff      	b.n	ee46 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1df6>
    ee46:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ee4a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ee4e:	1842      	adds	r2, r0, r1
    ee50:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ee54:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    ee58:	2b0f      	cmp	r3, #15
    ee5a:	9287      	str	r2, [sp, #540]	; 0x21c
    ee5c:	f201 854b 	bhi.w	108f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x38a6>
    ee60:	e7ff      	b.n	ee62 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e12>
    ee62:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ee66:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ee6a:	1842      	adds	r2, r0, r1
    ee6c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ee70:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    ee72:	fa5f fc83 	uxtb.w	ip, r3
    ee76:	4594      	cmp	ip, r2
    ee78:	d006      	beq.n	ee88 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e38>
    ee7a:	e7ff      	b.n	ee7c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e2c>
                    self.next();
    ee7c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ee80:	f001 fece 	bl	10c20 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E>
    ee84:	e7ff      	b.n	ee86 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e36>
                if self.v[x] != self.v[y] {
    ee86:	e7ff      	b.n	ee88 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e38>
        match (
    ee88:	f001 bb98 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    ee8c:	2005      	movs	r0, #5
    ee8e:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    ee92:	f64e 6000 	movw	r0, #60928	; 0xee00
    ee96:	f2c0 0001 	movt	r0, #1
    ee9a:	6801      	ldr	r1, [r0, #0]
    ee9c:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    eea0:	f007 fc35 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eea4:	9086      	str	r0, [sp, #536]	; 0x218
    eea6:	e01f      	b.n	eee8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e98>
    eea8:	2001      	movs	r0, #1
    eeaa:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    eeae:	e015      	b.n	eedc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e8c>
    eeb0:	2000      	movs	r0, #0
    eeb2:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    eeb6:	e011      	b.n	eedc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e8c>
    eeb8:	2000      	movs	r0, #0
    eeba:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    eebe:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    eec2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    eec6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    eeca:	f002 f93f 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    eece:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    eed2:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    eed6:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    eeda:	e00a      	b.n	eef2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1ea2>
    eedc:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    eee0:	07c0      	lsls	r0, r0, #31
    eee2:	2800      	cmp	r0, #0
    eee4:	d112      	bne.n	ef0c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1ebc>
    eee6:	e055      	b.n	ef94 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1f44>
    eee8:	9886      	ldr	r0, [sp, #536]	; 0x218
    eeea:	07c1      	lsls	r1, r0, #31
    eeec:	2900      	cmp	r1, #0
    eeee:	d1e3      	bne.n	eeb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e68>
    eef0:	e7de      	b.n	eeb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e60>
    eef2:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    eef6:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    eefa:	f007 fc08 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eefe:	9085      	str	r0, [sp, #532]	; 0x214
    ef00:	e7ff      	b.n	ef02 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1eb2>
    ef02:	9885      	ldr	r0, [sp, #532]	; 0x214
    ef04:	07c1      	lsls	r1, r0, #31
    ef06:	2900      	cmp	r1, #0
    ef08:	d1ce      	bne.n	eea8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e58>
    ef0a:	e7d1      	b.n	eeb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e60>
                trace!("[{:04x}] LD I, nnn", self.pc);
    ef0c:	f24f 40a0 	movw	r0, #62624	; 0xf4a0
    ef10:	f2c0 0001 	movt	r0, #1
    ef14:	6801      	ldr	r1, [r0, #0]
    ef16:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ef1a:	f100 0212 	add.w	r2, r0, #18
    ef1e:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    ef22:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    ef26:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    ef2a:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    ef2e:	f2c0 0301 	movt	r3, #1
    ef32:	4610      	mov	r0, r2
    ef34:	9184      	str	r1, [sp, #528]	; 0x210
    ef36:	4619      	mov	r1, r3
    ef38:	f7fb fd9f 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ef3c:	9083      	str	r0, [sp, #524]	; 0x20c
    ef3e:	9182      	str	r1, [sp, #520]	; 0x208
    ef40:	e7ff      	b.n	ef42 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1ef2>
    ef42:	9883      	ldr	r0, [sp, #524]	; 0x20c
    ef44:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    ef48:	9982      	ldr	r1, [sp, #520]	; 0x208
    ef4a:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    ef4e:	f64e 6248 	movw	r2, #61000	; 0xee48
    ef52:	f2c0 0201 	movt	r2, #1
    ef56:	6812      	ldr	r2, [r2, #0]
    ef58:	466b      	mov	r3, sp
    ef5a:	f04f 0c01 	mov.w	ip, #1
    ef5e:	f8c3 c008 	str.w	ip, [r3, #8]
    ef62:	605a      	str	r2, [r3, #4]
    ef64:	f8c3 c000 	str.w	ip, [r3]
    ef68:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    ef6c:	2202      	movs	r2, #2
    ef6e:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    ef72:	9984      	ldr	r1, [sp, #528]	; 0x210
    ef74:	f007 fa90 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ef78:	e7ff      	b.n	ef7a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1f2a>
    ef7a:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    ef7e:	f24f 40c0 	movw	r0, #62656	; 0xf4c0
    ef82:	f2c0 0001 	movt	r0, #1
    ef86:	6802      	ldr	r2, [r0, #0]
    ef88:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    ef8c:	f003 f93c 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ef90:	e7ff      	b.n	ef92 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1f42>
    ef92:	e7ff      	b.n	ef94 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1f44>
                self.i = nnn;
    ef94:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    ef98:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ef9c:	8208      	strh	r0, [r1, #16]
        match (
    ef9e:	f001 bb0d 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    efa2:	2005      	movs	r0, #5
    efa4:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    efa8:	f64e 6000 	movw	r0, #60928	; 0xee00
    efac:	f2c0 0001 	movt	r0, #1
    efb0:	6801      	ldr	r1, [r0, #0]
    efb2:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    efb6:	f007 fbaa 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    efba:	9081      	str	r0, [sp, #516]	; 0x204
    efbc:	e01f      	b.n	effe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1fae>
    efbe:	2001      	movs	r0, #1
    efc0:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    efc4:	e015      	b.n	eff2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1fa2>
    efc6:	2000      	movs	r0, #0
    efc8:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    efcc:	e011      	b.n	eff2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1fa2>
    efce:	2000      	movs	r0, #0
    efd0:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    efd4:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    efd8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    efdc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    efe0:	f002 f8b4 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    efe4:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    efe8:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    efec:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    eff0:	e00a      	b.n	f008 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1fb8>
    eff2:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    eff6:	07c0      	lsls	r0, r0, #31
    eff8:	2800      	cmp	r0, #0
    effa:	d112      	bne.n	f022 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1fd2>
    effc:	e055      	b.n	f0aa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x205a>
    effe:	9881      	ldr	r0, [sp, #516]	; 0x204
    f000:	07c1      	lsls	r1, r0, #31
    f002:	2900      	cmp	r1, #0
    f004:	d1e3      	bne.n	efce <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1f7e>
    f006:	e7de      	b.n	efc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1f76>
    f008:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    f00c:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    f010:	f007 fb7d 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f014:	9080      	str	r0, [sp, #512]	; 0x200
    f016:	e7ff      	b.n	f018 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1fc8>
    f018:	9880      	ldr	r0, [sp, #512]	; 0x200
    f01a:	07c1      	lsls	r1, r0, #31
    f01c:	2900      	cmp	r1, #0
    f01e:	d1ce      	bne.n	efbe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1f6e>
    f020:	e7d1      	b.n	efc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1f76>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    f022:	f24f 4060 	movw	r0, #62560	; 0xf460
    f026:	f2c0 0001 	movt	r0, #1
    f02a:	6801      	ldr	r1, [r0, #0]
    f02c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f030:	f100 0212 	add.w	r2, r0, #18
    f034:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    f038:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    f03c:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    f040:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    f044:	f2c0 0301 	movt	r3, #1
    f048:	4610      	mov	r0, r2
    f04a:	917f      	str	r1, [sp, #508]	; 0x1fc
    f04c:	4619      	mov	r1, r3
    f04e:	f7fb fd14 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f052:	907e      	str	r0, [sp, #504]	; 0x1f8
    f054:	917d      	str	r1, [sp, #500]	; 0x1f4
    f056:	e7ff      	b.n	f058 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2008>
    f058:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    f05a:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    f05e:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    f060:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    f064:	f64e 6248 	movw	r2, #61000	; 0xee48
    f068:	f2c0 0201 	movt	r2, #1
    f06c:	6812      	ldr	r2, [r2, #0]
    f06e:	466b      	mov	r3, sp
    f070:	f04f 0c01 	mov.w	ip, #1
    f074:	f8c3 c008 	str.w	ip, [r3, #8]
    f078:	605a      	str	r2, [r3, #4]
    f07a:	f8c3 c000 	str.w	ip, [r3]
    f07e:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    f082:	2202      	movs	r2, #2
    f084:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    f088:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    f08a:	f007 fa05 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f08e:	e7ff      	b.n	f090 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2040>
    f090:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    f094:	f24f 4080 	movw	r0, #62592	; 0xf480
    f098:	f2c0 0001 	movt	r0, #1
    f09c:	6802      	ldr	r2, [r0, #0]
    f09e:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    f0a2:	f003 f8b1 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f0a6:	e7ff      	b.n	f0a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2058>
    f0a8:	e7ff      	b.n	f0aa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x205a>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    f0aa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f0ae:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    f0b2:	f002 f83e 	bl	11132 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    f0b6:	907c      	str	r0, [sp, #496]	; 0x1f0
    f0b8:	e7ff      	b.n	f0ba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x206a>
    f0ba:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    f0be:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    f0c0:	f007 faeb 	bl	1669a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
    f0c4:	907b      	str	r0, [sp, #492]	; 0x1ec
    f0c6:	e7ff      	b.n	f0c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2078>
    f0c8:	2102      	movs	r1, #2
    f0ca:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    f0cc:	f007 faf6 	bl	166bc <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    f0d0:	907a      	str	r0, [sp, #488]	; 0x1e8
    f0d2:	e7ff      	b.n	f0d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2084>
    f0d4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f0d8:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    f0da:	f001 fd5e 	bl	10b9a <_ZN8libchip814Chip8$LT$T$GT$4jump17heb92b408b228e4d7E>
    f0de:	e7ff      	b.n	f0e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2090>
        match (
    f0e0:	f001 ba6c 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    f0e4:	2005      	movs	r0, #5
    f0e6:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    f0ea:	f64e 6000 	movw	r0, #60928	; 0xee00
    f0ee:	f2c0 0001 	movt	r0, #1
    f0f2:	6801      	ldr	r1, [r0, #0]
    f0f4:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    f0f8:	f007 fb09 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f0fc:	9079      	str	r0, [sp, #484]	; 0x1e4
    f0fe:	e01f      	b.n	f140 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x20f0>
    f100:	2001      	movs	r0, #1
    f102:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    f106:	e015      	b.n	f134 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x20e4>
    f108:	2000      	movs	r0, #0
    f10a:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    f10e:	e011      	b.n	f134 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x20e4>
    f110:	2000      	movs	r0, #0
    f112:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    f116:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    f11a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f11e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f122:	f002 f813 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f126:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    f12a:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    f12e:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    f132:	e00a      	b.n	f14a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x20fa>
    f134:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    f138:	07c0      	lsls	r0, r0, #31
    f13a:	2800      	cmp	r0, #0
    f13c:	d112      	bne.n	f164 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2114>
    f13e:	e055      	b.n	f1ec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x219c>
    f140:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    f142:	07c1      	lsls	r1, r0, #31
    f144:	2900      	cmp	r1, #0
    f146:	d1e3      	bne.n	f110 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x20c0>
    f148:	e7de      	b.n	f108 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x20b8>
    f14a:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    f14e:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    f152:	f007 fadc 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f156:	9078      	str	r0, [sp, #480]	; 0x1e0
    f158:	e7ff      	b.n	f15a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x210a>
    f15a:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    f15c:	07c1      	lsls	r1, r0, #31
    f15e:	2900      	cmp	r1, #0
    f160:	d1ce      	bne.n	f100 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x20b0>
    f162:	e7d1      	b.n	f108 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x20b8>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    f164:	f24f 4010 	movw	r0, #62480	; 0xf410
    f168:	f2c0 0001 	movt	r0, #1
    f16c:	6801      	ldr	r1, [r0, #0]
    f16e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f172:	f100 0212 	add.w	r2, r0, #18
    f176:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    f17a:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    f17e:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    f182:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    f186:	f2c0 0301 	movt	r3, #1
    f18a:	4610      	mov	r0, r2
    f18c:	9177      	str	r1, [sp, #476]	; 0x1dc
    f18e:	4619      	mov	r1, r3
    f190:	f7fb fc73 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f194:	9076      	str	r0, [sp, #472]	; 0x1d8
    f196:	9175      	str	r1, [sp, #468]	; 0x1d4
    f198:	e7ff      	b.n	f19a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x214a>
    f19a:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    f19c:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    f1a0:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    f1a2:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    f1a6:	f64e 6248 	movw	r2, #61000	; 0xee48
    f1aa:	f2c0 0201 	movt	r2, #1
    f1ae:	6812      	ldr	r2, [r2, #0]
    f1b0:	466b      	mov	r3, sp
    f1b2:	f04f 0c01 	mov.w	ip, #1
    f1b6:	f8c3 c008 	str.w	ip, [r3, #8]
    f1ba:	605a      	str	r2, [r3, #4]
    f1bc:	f8c3 c000 	str.w	ip, [r3]
    f1c0:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    f1c4:	2202      	movs	r2, #2
    f1c6:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    f1ca:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    f1cc:	f007 f964 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f1d0:	e7ff      	b.n	f1d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2182>
    f1d2:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    f1d6:	f24f 4030 	movw	r0, #62512	; 0xf430
    f1da:	f2c0 0001 	movt	r0, #1
    f1de:	6802      	ldr	r2, [r0, #0]
    f1e0:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    f1e4:	f003 f810 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f1e8:	e7ff      	b.n	f1ea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x219a>
    f1ea:	e7ff      	b.n	f1ec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x219c>
                self.v[x] = self.hw.rand() & kk;
    f1ec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f1f0:	f7fd f8e5 	bl	c3be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hdef6640b381cd2e3E>
    f1f4:	9074      	str	r0, [sp, #464]	; 0x1d0
    f1f6:	e7ff      	b.n	f1f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x21a8>
    f1f8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f1fc:	280f      	cmp	r0, #15
    f1fe:	f201 8366 	bhi.w	108ce <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x387e>
    f202:	e7ff      	b.n	f204 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x21b4>
    f204:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f208:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f20c:	1842      	adds	r2, r0, r1
    f20e:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    f210:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    f214:	ea03 0e0c 	and.w	lr, r3, ip
    f218:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    f21c:	f001 b9ce 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    f220:	2005      	movs	r0, #5
    f222:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    f226:	f64e 6000 	movw	r0, #60928	; 0xee00
    f22a:	f2c0 0001 	movt	r0, #1
    f22e:	6801      	ldr	r1, [r0, #0]
    f230:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    f234:	f007 fa6b 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f238:	9073      	str	r0, [sp, #460]	; 0x1cc
    f23a:	e01f      	b.n	f27c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x222c>
    f23c:	2001      	movs	r0, #1
    f23e:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    f242:	e015      	b.n	f270 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2220>
    f244:	2000      	movs	r0, #0
    f246:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    f24a:	e011      	b.n	f270 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2220>
    f24c:	2000      	movs	r0, #0
    f24e:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    f252:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    f256:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f25a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f25e:	f001 ff75 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f262:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    f266:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    f26a:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    f26e:	e00a      	b.n	f286 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2236>
    f270:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    f274:	07c0      	lsls	r0, r0, #31
    f276:	2800      	cmp	r0, #0
    f278:	d112      	bne.n	f2a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2250>
    f27a:	e055      	b.n	f328 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22d8>
    f27c:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    f27e:	07c1      	lsls	r1, r0, #31
    f280:	2900      	cmp	r1, #0
    f282:	d1e3      	bne.n	f24c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x21fc>
    f284:	e7de      	b.n	f244 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x21f4>
    f286:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    f28a:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    f28e:	f007 fa3e 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f292:	9072      	str	r0, [sp, #456]	; 0x1c8
    f294:	e7ff      	b.n	f296 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2246>
    f296:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    f298:	07c1      	lsls	r1, r0, #31
    f29a:	2900      	cmp	r1, #0
    f29c:	d1ce      	bne.n	f23c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x21ec>
    f29e:	e7d1      	b.n	f244 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x21f4>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    f2a0:	f24f 20b4 	movw	r0, #62132	; 0xf2b4
    f2a4:	f2c0 0001 	movt	r0, #1
    f2a8:	6801      	ldr	r1, [r0, #0]
    f2aa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f2ae:	f100 0212 	add.w	r2, r0, #18
    f2b2:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    f2b6:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    f2ba:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    f2be:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    f2c2:	f2c0 0301 	movt	r3, #1
    f2c6:	4610      	mov	r0, r2
    f2c8:	9171      	str	r1, [sp, #452]	; 0x1c4
    f2ca:	4619      	mov	r1, r3
    f2cc:	f7fb fbd5 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f2d0:	9070      	str	r0, [sp, #448]	; 0x1c0
    f2d2:	916f      	str	r1, [sp, #444]	; 0x1bc
    f2d4:	e7ff      	b.n	f2d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2286>
    f2d6:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    f2d8:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    f2dc:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    f2de:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    f2e2:	f64e 6248 	movw	r2, #61000	; 0xee48
    f2e6:	f2c0 0201 	movt	r2, #1
    f2ea:	6812      	ldr	r2, [r2, #0]
    f2ec:	466b      	mov	r3, sp
    f2ee:	f04f 0c01 	mov.w	ip, #1
    f2f2:	f8c3 c008 	str.w	ip, [r3, #8]
    f2f6:	605a      	str	r2, [r3, #4]
    f2f8:	f8c3 c000 	str.w	ip, [r3]
    f2fc:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    f300:	2202      	movs	r2, #2
    f302:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    f306:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    f308:	f007 f8c6 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f30c:	e7ff      	b.n	f30e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22be>
    f30e:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    f312:	f24f 20d4 	movw	r0, #62164	; 0xf2d4
    f316:	f2c0 0001 	movt	r0, #1
    f31a:	6802      	ldr	r2, [r0, #0]
    f31c:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    f320:	f002 ff72 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f324:	e7ff      	b.n	f326 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22d6>
    f326:	e7ff      	b.n	f328 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22d8>
                let basex = self.v[x] as usize;
    f328:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f32c:	280f      	cmp	r0, #15
    f32e:	f201 825c 	bhi.w	107ea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x379a>
    f332:	e7ff      	b.n	f334 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22e4>
    f334:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f338:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f33c:	1842      	adds	r2, r0, r1
    f33e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f342:	4613      	mov	r3, r2
    f344:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    f348:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    f34c:	2a0f      	cmp	r2, #15
    f34e:	936e      	str	r3, [sp, #440]	; 0x1b8
    f350:	f201 8255 	bhi.w	107fe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x37ae>
    f354:	e7ff      	b.n	f356 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2306>
    f356:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f35a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    f35e:	1842      	adds	r2, r0, r1
    f360:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f364:	4613      	mov	r3, r2
    f366:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
                let (w, h) = self.hw.vram_size();
    f36a:	936d      	str	r3, [sp, #436]	; 0x1b4
    f36c:	f7fd fa64 	bl	c838 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbe871a76fb26495aE>
    f370:	906c      	str	r0, [sp, #432]	; 0x1b0
    f372:	916b      	str	r1, [sp, #428]	; 0x1ac
    f374:	e7ff      	b.n	f376 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2326>
    f376:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    f378:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    f37c:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    f37e:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    f382:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    f384:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    f388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    f38c:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    f390:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    f394:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    f398:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    f39c:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    f3a0:	f002 fcbf 	bl	11d22 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    f3a4:	906a      	str	r0, [sp, #424]	; 0x1a8
    f3a6:	9169      	str	r1, [sp, #420]	; 0x1a4
    f3a8:	e7ff      	b.n	f3aa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x235a>
    f3aa:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    f3ac:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    f3b0:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    f3b2:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    f3b6:	e7ff      	b.n	f3b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2368>
    f3b8:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    f3bc:	f002 fc26 	bl	11c0c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f3c0:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    f3c4:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    f3c8:	e7ff      	b.n	f3ca <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x237a>
    f3ca:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    f3ce:	2800      	cmp	r0, #0
    f3d0:	d001      	beq.n	f3d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2386>
    f3d2:	e7ff      	b.n	f3d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2384>
    f3d4:	e002      	b.n	f3dc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x238c>
        match (
    f3d6:	f001 b8f1 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
                for y in 0..n {
    f3da:	defe      	udf	#254	; 0xfe
    f3dc:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    f3e0:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    f3e4:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    f3e8:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    f3ec:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f3f0:	8a0a      	ldrh	r2, [r1, #16]
    f3f2:	1813      	adds	r3, r2, r0
    f3f4:	469c      	mov	ip, r3
    f3f6:	4293      	cmp	r3, r2
    f3f8:	9068      	str	r0, [sp, #416]	; 0x1a0
    f3fa:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    f3fe:	f0c1 8208 	bcc.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x37c2>
    f402:	e7ff      	b.n	f404 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x23b4>
    f404:	2000      	movs	r0, #0
    f406:	9967      	ldr	r1, [sp, #412]	; 0x19c
    f408:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    f40c:	f041 820d 	bne.w	1082a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x37da>
    f410:	e7ff      	b.n	f412 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x23c2>
    f412:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f416:	9967      	ldr	r1, [sp, #412]	; 0x19c
    f418:	1842      	adds	r2, r0, r1
    f41a:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    f41e:	4613      	mov	r3, r2
    f420:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    f424:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    f426:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    f42a:	eb02 0e0c 	add.w	lr, r2, ip
    f42e:	4674      	mov	r4, lr
    f430:	4596      	cmp	lr, r2
    f432:	9366      	str	r3, [sp, #408]	; 0x198
    f434:	9465      	str	r4, [sp, #404]	; 0x194
    f436:	f0c1 8202 	bcc.w	1083e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x37ee>
    f43a:	e7ff      	b.n	f43c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x23ec>
    f43c:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    f43e:	2800      	cmp	r0, #0
    f440:	f001 8209 	beq.w	10856 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3806>
    f444:	e7ff      	b.n	f446 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x23f6>
    f446:	9865      	ldr	r0, [sp, #404]	; 0x194
    f448:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    f44a:	fbb0 f2f1 	udiv	r2, r0, r1
    f44e:	fb02 0211 	mls	r2, r2, r1, r0
    f452:	4613      	mov	r3, r2
    f454:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    f458:	2200      	movs	r2, #0
                    for x in 0..8 {
    f45a:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    f45e:	2208      	movs	r2, #8
    f460:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    f464:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    f468:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    f46c:	9364      	str	r3, [sp, #400]	; 0x190
    f46e:	f002 fc58 	bl	11d22 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    f472:	9063      	str	r0, [sp, #396]	; 0x18c
    f474:	9162      	str	r1, [sp, #392]	; 0x188
    f476:	e7ff      	b.n	f478 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2428>
    f478:	9863      	ldr	r0, [sp, #396]	; 0x18c
    f47a:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    f47e:	9962      	ldr	r1, [sp, #392]	; 0x188
    f480:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    f484:	e7ff      	b.n	f486 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2436>
    f486:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    f48a:	f002 fbbf 	bl	11c0c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f48e:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    f492:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    f496:	e7ff      	b.n	f498 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2448>
    f498:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    f49c:	2800      	cmp	r0, #0
    f49e:	d001      	beq.n	f4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2454>
    f4a0:	e7ff      	b.n	f4a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2452>
    f4a2:	e001      	b.n	f4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2458>
                for y in 0..n {
    f4a4:	e788      	b.n	f3b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2368>
                    for x in 0..8 {
    f4a6:	defe      	udf	#254	; 0xfe
    f4a8:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    f4ac:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    f4b0:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    f4b4:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    f4b8:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    f4ba:	1842      	adds	r2, r0, r1
    f4bc:	4613      	mov	r3, r2
    f4be:	4282      	cmp	r2, r0
    f4c0:	9061      	str	r0, [sp, #388]	; 0x184
    f4c2:	9360      	str	r3, [sp, #384]	; 0x180
    f4c4:	f0c1 81d3 	bcc.w	1086e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x381e>
    f4c8:	e7ff      	b.n	f4ca <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x247a>
    f4ca:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    f4cc:	2800      	cmp	r0, #0
    f4ce:	f001 81da 	beq.w	10886 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3836>
    f4d2:	e7ff      	b.n	f4d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2484>
    f4d4:	9860      	ldr	r0, [sp, #384]	; 0x180
    f4d6:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    f4d8:	fbb0 f2f1 	udiv	r2, r0, r1
    f4dc:	fb02 0211 	mls	r2, r2, r1, r0
    f4e0:	4613      	mov	r3, r2
    f4e2:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    f4e6:	9a61      	ldr	r2, [sp, #388]	; 0x184
    f4e8:	f1c2 0c07 	rsb	ip, r2, #7
    f4ec:	f04f 0e07 	mov.w	lr, #7
    f4f0:	4596      	cmp	lr, r2
    f4f2:	935f      	str	r3, [sp, #380]	; 0x17c
    f4f4:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    f4f8:	f0c1 81d1 	bcc.w	1089e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x384e>
    f4fc:	e7ff      	b.n	f4fe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x24ae>
    f4fe:	985e      	ldr	r0, [sp, #376]	; 0x178
    f500:	f000 0107 	and.w	r1, r0, #7
    f504:	2201      	movs	r2, #1
    f506:	fa02 f101 	lsl.w	r1, r2, r1
    f50a:	08c2      	lsrs	r2, r0, #3
    f50c:	2a00      	cmp	r2, #0
    f50e:	915d      	str	r1, [sp, #372]	; 0x174
    f510:	f041 81d1 	bne.w	108b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3866>
    f514:	e7ff      	b.n	f516 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x24c6>
    f516:	9866      	ldr	r0, [sp, #408]	; 0x198
    f518:	995d      	ldr	r1, [sp, #372]	; 0x174
    f51a:	ea00 0201 	and.w	r2, r0, r1
    f51e:	b2d2      	uxtb	r2, r2
    f520:	2a00      	cmp	r2, #0
    f522:	bf18      	it	ne
    f524:	2201      	movne	r2, #1
    f526:	4613      	mov	r3, r2
    f528:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
                        let dst = self.hw.vram_get(vramx, vramy);
    f52c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f530:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f532:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f534:	935c      	str	r3, [sp, #368]	; 0x170
    f536:	f7fd f8ea 	bl	c70e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE>
    f53a:	4601      	mov	r1, r0
    f53c:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    f540:	915b      	str	r1, [sp, #364]	; 0x16c
    f542:	e7ff      	b.n	f544 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x24f4>
                        self.v[0xf] |= (src && dst) as u8;
    f544:	985c      	ldr	r0, [sp, #368]	; 0x170
    f546:	07c1      	lsls	r1, r0, #31
    f548:	2900      	cmp	r1, #0
    f54a:	d108      	bne.n	f55e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x250e>
    f54c:	e003      	b.n	f556 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2506>
    f54e:	2001      	movs	r0, #1
    f550:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f554:	e008      	b.n	f568 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2518>
    f556:	2000      	movs	r0, #0
    f558:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f55c:	e004      	b.n	f568 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2518>
    f55e:	985b      	ldr	r0, [sp, #364]	; 0x16c
    f560:	07c1      	lsls	r1, r0, #31
    f562:	2900      	cmp	r1, #0
    f564:	d1f3      	bne.n	f54e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x24fe>
    f566:	e7f6      	b.n	f556 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2506>
    f568:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    f56c:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f570:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    f574:	4310      	orrs	r0, r2
    f576:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    f57a:	985c      	ldr	r0, [sp, #368]	; 0x170
    f57c:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    f57e:	ea80 0302 	eor.w	r3, r0, r2
    f582:	f003 0301 	and.w	r3, r3, #1
    f586:	4608      	mov	r0, r1
    f588:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f58a:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f58c:	f7fc ff24 	bl	c3d8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E>
    f590:	e7ff      	b.n	f592 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2542>
                    for x in 0..8 {
    f592:	e778      	b.n	f486 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2436>
    f594:	2005      	movs	r0, #5
    f596:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    f59a:	f64e 6000 	movw	r0, #60928	; 0xee00
    f59e:	f2c0 0001 	movt	r0, #1
    f5a2:	6801      	ldr	r1, [r0, #0]
    f5a4:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f5a8:	f007 f8b1 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f5ac:	905a      	str	r0, [sp, #360]	; 0x168
    f5ae:	e01f      	b.n	f5f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x25a0>
    f5b0:	2001      	movs	r0, #1
    f5b2:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f5b6:	e015      	b.n	f5e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2594>
    f5b8:	2000      	movs	r0, #0
    f5ba:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f5be:	e011      	b.n	f5e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2594>
    f5c0:	2000      	movs	r0, #0
    f5c2:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    f5c6:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    f5ca:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f5ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f5d2:	f001 fdbb 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f5d6:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    f5da:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    f5de:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    f5e2:	e00a      	b.n	f5fa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x25aa>
    f5e4:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    f5e8:	07c0      	lsls	r0, r0, #31
    f5ea:	2800      	cmp	r0, #0
    f5ec:	d112      	bne.n	f614 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x25c4>
    f5ee:	e055      	b.n	f69c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x264c>
    f5f0:	985a      	ldr	r0, [sp, #360]	; 0x168
    f5f2:	07c1      	lsls	r1, r0, #31
    f5f4:	2900      	cmp	r1, #0
    f5f6:	d1e3      	bne.n	f5c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2570>
    f5f8:	e7de      	b.n	f5b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2568>
    f5fa:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f5fe:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    f602:	f007 f884 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f606:	9059      	str	r0, [sp, #356]	; 0x164
    f608:	e7ff      	b.n	f60a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x25ba>
    f60a:	9859      	ldr	r0, [sp, #356]	; 0x164
    f60c:	07c1      	lsls	r1, r0, #31
    f60e:	2900      	cmp	r1, #0
    f610:	d1ce      	bne.n	f5b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2560>
    f612:	e7d1      	b.n	f5b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2568>
                trace!("[{:04x}] SKP Vx", self.pc);
    f614:	f24f 2060 	movw	r0, #62048	; 0xf260
    f618:	f2c0 0001 	movt	r0, #1
    f61c:	6801      	ldr	r1, [r0, #0]
    f61e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f622:	f100 0212 	add.w	r2, r0, #18
    f626:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    f62a:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    f62e:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    f632:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    f636:	f2c0 0301 	movt	r3, #1
    f63a:	4610      	mov	r0, r2
    f63c:	9158      	str	r1, [sp, #352]	; 0x160
    f63e:	4619      	mov	r1, r3
    f640:	f7fb fa1b 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f644:	9057      	str	r0, [sp, #348]	; 0x15c
    f646:	9156      	str	r1, [sp, #344]	; 0x158
    f648:	e7ff      	b.n	f64a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x25fa>
    f64a:	9857      	ldr	r0, [sp, #348]	; 0x15c
    f64c:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    f650:	9956      	ldr	r1, [sp, #344]	; 0x158
    f652:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    f656:	f64e 6248 	movw	r2, #61000	; 0xee48
    f65a:	f2c0 0201 	movt	r2, #1
    f65e:	6812      	ldr	r2, [r2, #0]
    f660:	466b      	mov	r3, sp
    f662:	f04f 0c01 	mov.w	ip, #1
    f666:	f8c3 c008 	str.w	ip, [r3, #8]
    f66a:	605a      	str	r2, [r3, #4]
    f66c:	f8c3 c000 	str.w	ip, [r3]
    f670:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f674:	2202      	movs	r2, #2
    f676:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    f67a:	9958      	ldr	r1, [sp, #352]	; 0x160
    f67c:	f006 ff0c 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f680:	e7ff      	b.n	f682 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2632>
    f682:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    f686:	f24f 2080 	movw	r0, #62080	; 0xf280
    f68a:	f2c0 0001 	movt	r0, #1
    f68e:	6802      	ldr	r2, [r0, #0]
    f690:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f694:	f002 fdb8 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f698:	e7ff      	b.n	f69a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x264a>
    f69a:	e7ff      	b.n	f69c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x264c>
                if self.hw.key(self.v[x]) {
    f69c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f6a0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f6a4:	290f      	cmp	r1, #15
    f6a6:	9055      	str	r0, [sp, #340]	; 0x154
    f6a8:	f201 8095 	bhi.w	107d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3786>
    f6ac:	e7ff      	b.n	f6ae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x265e>
    f6ae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f6b2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f6b6:	1842      	adds	r2, r0, r1
    f6b8:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    f6bc:	9855      	ldr	r0, [sp, #340]	; 0x154
    f6be:	f7fc fe83 	bl	c3c8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h6ab5fe7f9b6adc84E>
    f6c2:	9054      	str	r0, [sp, #336]	; 0x150
    f6c4:	e7ff      	b.n	f6c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2676>
    f6c6:	9854      	ldr	r0, [sp, #336]	; 0x150
    f6c8:	07c1      	lsls	r1, r0, #31
    f6ca:	2900      	cmp	r1, #0
    f6cc:	d006      	beq.n	f6dc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x268c>
    f6ce:	e7ff      	b.n	f6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2680>
                    self.next();
    f6d0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f6d4:	f001 faa4 	bl	10c20 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E>
    f6d8:	e7ff      	b.n	f6da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x268a>
                if self.hw.key(self.v[x]) {
    f6da:	e7ff      	b.n	f6dc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x268c>
        match (
    f6dc:	f000 bf6e 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    f6e0:	2005      	movs	r0, #5
    f6e2:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    f6e6:	f64e 6000 	movw	r0, #60928	; 0xee00
    f6ea:	f2c0 0001 	movt	r0, #1
    f6ee:	6801      	ldr	r1, [r0, #0]
    f6f0:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    f6f4:	f007 f80b 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f6f8:	9053      	str	r0, [sp, #332]	; 0x14c
    f6fa:	e01f      	b.n	f73c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x26ec>
    f6fc:	2001      	movs	r0, #1
    f6fe:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f702:	e015      	b.n	f730 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x26e0>
    f704:	2000      	movs	r0, #0
    f706:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f70a:	e011      	b.n	f730 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x26e0>
    f70c:	2000      	movs	r0, #0
    f70e:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    f712:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    f716:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f71a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f71e:	f001 fd15 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f722:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    f726:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    f72a:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    f72e:	e00a      	b.n	f746 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x26f6>
    f730:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    f734:	07c0      	lsls	r0, r0, #31
    f736:	2800      	cmp	r0, #0
    f738:	d112      	bne.n	f760 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2710>
    f73a:	e055      	b.n	f7e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2798>
    f73c:	9853      	ldr	r0, [sp, #332]	; 0x14c
    f73e:	07c1      	lsls	r1, r0, #31
    f740:	2900      	cmp	r1, #0
    f742:	d1e3      	bne.n	f70c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x26bc>
    f744:	e7de      	b.n	f704 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x26b4>
    f746:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    f74a:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    f74e:	f006 ffde 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f752:	9052      	str	r0, [sp, #328]	; 0x148
    f754:	e7ff      	b.n	f756 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2706>
    f756:	9852      	ldr	r0, [sp, #328]	; 0x148
    f758:	07c1      	lsls	r1, r0, #31
    f75a:	2900      	cmp	r1, #0
    f75c:	d1ce      	bne.n	f6fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x26ac>
    f75e:	e7d1      	b.n	f704 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x26b4>
                trace!("[{:04x}] SKNP Vx", self.pc);
    f760:	f24f 201c 	movw	r0, #61980	; 0xf21c
    f764:	f2c0 0001 	movt	r0, #1
    f768:	6801      	ldr	r1, [r0, #0]
    f76a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f76e:	f100 0212 	add.w	r2, r0, #18
    f772:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    f776:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    f77a:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    f77e:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    f782:	f2c0 0301 	movt	r3, #1
    f786:	4610      	mov	r0, r2
    f788:	9151      	str	r1, [sp, #324]	; 0x144
    f78a:	4619      	mov	r1, r3
    f78c:	f7fb f975 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f790:	9050      	str	r0, [sp, #320]	; 0x140
    f792:	914f      	str	r1, [sp, #316]	; 0x13c
    f794:	e7ff      	b.n	f796 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2746>
    f796:	9850      	ldr	r0, [sp, #320]	; 0x140
    f798:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    f79c:	994f      	ldr	r1, [sp, #316]	; 0x13c
    f79e:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    f7a2:	f64e 6248 	movw	r2, #61000	; 0xee48
    f7a6:	f2c0 0201 	movt	r2, #1
    f7aa:	6812      	ldr	r2, [r2, #0]
    f7ac:	466b      	mov	r3, sp
    f7ae:	f04f 0c01 	mov.w	ip, #1
    f7b2:	f8c3 c008 	str.w	ip, [r3, #8]
    f7b6:	605a      	str	r2, [r3, #4]
    f7b8:	f8c3 c000 	str.w	ip, [r3]
    f7bc:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    f7c0:	2202      	movs	r2, #2
    f7c2:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    f7c6:	9951      	ldr	r1, [sp, #324]	; 0x144
    f7c8:	f006 fe66 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f7cc:	e7ff      	b.n	f7ce <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x277e>
    f7ce:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    f7d2:	f24f 203c 	movw	r0, #62012	; 0xf23c
    f7d6:	f2c0 0001 	movt	r0, #1
    f7da:	6802      	ldr	r2, [r0, #0]
    f7dc:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    f7e0:	f002 fd12 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f7e4:	e7ff      	b.n	f7e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2796>
    f7e6:	e7ff      	b.n	f7e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2798>
                if !self.hw.key(self.v[x]) {
    f7e8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f7ec:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f7f0:	290f      	cmp	r1, #15
    f7f2:	904e      	str	r0, [sp, #312]	; 0x138
    f7f4:	f200 87e5 	bhi.w	107c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3772>
    f7f8:	e7ff      	b.n	f7fa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x27aa>
    f7fa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f7fe:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f802:	1842      	adds	r2, r0, r1
    f804:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    f808:	984e      	ldr	r0, [sp, #312]	; 0x138
    f80a:	f7fc fddd 	bl	c3c8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h6ab5fe7f9b6adc84E>
    f80e:	904d      	str	r0, [sp, #308]	; 0x134
    f810:	e7ff      	b.n	f812 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x27c2>
    f812:	984d      	ldr	r0, [sp, #308]	; 0x134
    f814:	07c1      	lsls	r1, r0, #31
    f816:	2900      	cmp	r1, #0
    f818:	d106      	bne.n	f828 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x27d8>
    f81a:	e7ff      	b.n	f81c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x27cc>
                    self.next();
    f81c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f820:	f001 f9fe 	bl	10c20 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E>
    f824:	e7ff      	b.n	f826 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x27d6>
                if !self.hw.key(self.v[x]) {
    f826:	e7ff      	b.n	f828 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x27d8>
        match (
    f828:	f000 bec8 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    f82c:	2005      	movs	r0, #5
    f82e:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    f832:	f64e 6000 	movw	r0, #60928	; 0xee00
    f836:	f2c0 0001 	movt	r0, #1
    f83a:	6801      	ldr	r1, [r0, #0]
    f83c:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    f840:	f006 ff65 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f844:	904c      	str	r0, [sp, #304]	; 0x130
    f846:	e01f      	b.n	f888 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2838>
    f848:	2001      	movs	r0, #1
    f84a:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    f84e:	e015      	b.n	f87c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x282c>
    f850:	2000      	movs	r0, #0
    f852:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    f856:	e011      	b.n	f87c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x282c>
    f858:	2000      	movs	r0, #0
    f85a:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    f85e:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    f862:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f866:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f86a:	f001 fc6f 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f86e:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    f872:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    f876:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    f87a:	e00a      	b.n	f892 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2842>
    f87c:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    f880:	07c0      	lsls	r0, r0, #31
    f882:	2800      	cmp	r0, #0
    f884:	d112      	bne.n	f8ac <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x285c>
    f886:	e055      	b.n	f934 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x28e4>
    f888:	984c      	ldr	r0, [sp, #304]	; 0x130
    f88a:	07c1      	lsls	r1, r0, #31
    f88c:	2900      	cmp	r1, #0
    f88e:	d1e3      	bne.n	f858 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2808>
    f890:	e7de      	b.n	f850 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2800>
    f892:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    f896:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    f89a:	f006 ff38 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f89e:	904b      	str	r0, [sp, #300]	; 0x12c
    f8a0:	e7ff      	b.n	f8a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2852>
    f8a2:	984b      	ldr	r0, [sp, #300]	; 0x12c
    f8a4:	07c1      	lsls	r1, r0, #31
    f8a6:	2900      	cmp	r1, #0
    f8a8:	d1ce      	bne.n	f848 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x27f8>
    f8aa:	e7d1      	b.n	f850 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2800>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    f8ac:	f24f 10cc 	movw	r0, #61900	; 0xf1cc
    f8b0:	f2c0 0001 	movt	r0, #1
    f8b4:	6801      	ldr	r1, [r0, #0]
    f8b6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f8ba:	f100 0212 	add.w	r2, r0, #18
    f8be:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    f8c2:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    f8c6:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    f8ca:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    f8ce:	f2c0 0301 	movt	r3, #1
    f8d2:	4610      	mov	r0, r2
    f8d4:	914a      	str	r1, [sp, #296]	; 0x128
    f8d6:	4619      	mov	r1, r3
    f8d8:	f7fb f8cf 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f8dc:	9049      	str	r0, [sp, #292]	; 0x124
    f8de:	9148      	str	r1, [sp, #288]	; 0x120
    f8e0:	e7ff      	b.n	f8e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2892>
    f8e2:	9849      	ldr	r0, [sp, #292]	; 0x124
    f8e4:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    f8e8:	9948      	ldr	r1, [sp, #288]	; 0x120
    f8ea:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    f8ee:	f64e 6248 	movw	r2, #61000	; 0xee48
    f8f2:	f2c0 0201 	movt	r2, #1
    f8f6:	6812      	ldr	r2, [r2, #0]
    f8f8:	466b      	mov	r3, sp
    f8fa:	f04f 0c01 	mov.w	ip, #1
    f8fe:	f8c3 c008 	str.w	ip, [r3, #8]
    f902:	605a      	str	r2, [r3, #4]
    f904:	f8c3 c000 	str.w	ip, [r3]
    f908:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    f90c:	2202      	movs	r2, #2
    f90e:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    f912:	994a      	ldr	r1, [sp, #296]	; 0x128
    f914:	f006 fdc0 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f918:	e7ff      	b.n	f91a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x28ca>
    f91a:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    f91e:	f24f 10ec 	movw	r0, #61932	; 0xf1ec
    f922:	f2c0 0001 	movt	r0, #1
    f926:	6802      	ldr	r2, [r0, #0]
    f928:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    f92c:	f002 fc6c 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f930:	e7ff      	b.n	f932 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x28e2>
    f932:	e7ff      	b.n	f934 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x28e4>
                self.v[x] = self.dt;
    f934:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f938:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    f93c:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    f940:	2a0f      	cmp	r2, #15
    f942:	9147      	str	r1, [sp, #284]	; 0x11c
    f944:	f200 8733 	bhi.w	107ae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x375e>
    f948:	e7ff      	b.n	f94a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x28fa>
    f94a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f94e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f952:	1842      	adds	r2, r0, r1
    f954:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    f956:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    f95a:	f000 be2f 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    f95e:	2005      	movs	r0, #5
    f960:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    f964:	f64e 6000 	movw	r0, #60928	; 0xee00
    f968:	f2c0 0001 	movt	r0, #1
    f96c:	6801      	ldr	r1, [r0, #0]
    f96e:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    f972:	f006 fecc 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f976:	9046      	str	r0, [sp, #280]	; 0x118
    f978:	e01f      	b.n	f9ba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x296a>
    f97a:	2001      	movs	r0, #1
    f97c:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    f980:	e015      	b.n	f9ae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x295e>
    f982:	2000      	movs	r0, #0
    f984:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    f988:	e011      	b.n	f9ae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x295e>
    f98a:	2000      	movs	r0, #0
    f98c:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    f990:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    f994:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f998:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f99c:	f001 fbd6 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f9a0:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    f9a4:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    f9a8:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    f9ac:	e00a      	b.n	f9c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2974>
    f9ae:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    f9b2:	07c0      	lsls	r0, r0, #31
    f9b4:	2800      	cmp	r0, #0
    f9b6:	d112      	bne.n	f9de <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x298e>
    f9b8:	e055      	b.n	fa66 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a16>
    f9ba:	9846      	ldr	r0, [sp, #280]	; 0x118
    f9bc:	07c1      	lsls	r1, r0, #31
    f9be:	2900      	cmp	r1, #0
    f9c0:	d1e3      	bne.n	f98a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x293a>
    f9c2:	e7de      	b.n	f982 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2932>
    f9c4:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    f9c8:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    f9cc:	f006 fe9f 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f9d0:	9045      	str	r0, [sp, #276]	; 0x114
    f9d2:	e7ff      	b.n	f9d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2984>
    f9d4:	9845      	ldr	r0, [sp, #276]	; 0x114
    f9d6:	07c1      	lsls	r1, r0, #31
    f9d8:	2900      	cmp	r1, #0
    f9da:	d1ce      	bne.n	f97a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x292a>
    f9dc:	e7d1      	b.n	f982 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2932>
                trace!("[{:04x}] LD Vx, K", self.pc);
    f9de:	f24f 107c 	movw	r0, #61820	; 0xf17c
    f9e2:	f2c0 0001 	movt	r0, #1
    f9e6:	6801      	ldr	r1, [r0, #0]
    f9e8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f9ec:	f100 0212 	add.w	r2, r0, #18
    f9f0:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    f9f4:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    f9f8:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    f9fc:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    fa00:	f2c0 0301 	movt	r3, #1
    fa04:	4610      	mov	r0, r2
    fa06:	9144      	str	r1, [sp, #272]	; 0x110
    fa08:	4619      	mov	r1, r3
    fa0a:	f7fb f836 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fa0e:	9043      	str	r0, [sp, #268]	; 0x10c
    fa10:	9142      	str	r1, [sp, #264]	; 0x108
    fa12:	e7ff      	b.n	fa14 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x29c4>
    fa14:	9843      	ldr	r0, [sp, #268]	; 0x10c
    fa16:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    fa1a:	9942      	ldr	r1, [sp, #264]	; 0x108
    fa1c:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    fa20:	f64e 6248 	movw	r2, #61000	; 0xee48
    fa24:	f2c0 0201 	movt	r2, #1
    fa28:	6812      	ldr	r2, [r2, #0]
    fa2a:	466b      	mov	r3, sp
    fa2c:	f04f 0c01 	mov.w	ip, #1
    fa30:	f8c3 c008 	str.w	ip, [r3, #8]
    fa34:	605a      	str	r2, [r3, #4]
    fa36:	f8c3 c000 	str.w	ip, [r3]
    fa3a:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    fa3e:	2202      	movs	r2, #2
    fa40:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    fa44:	9944      	ldr	r1, [sp, #272]	; 0x110
    fa46:	f006 fd27 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fa4a:	e7ff      	b.n	fa4c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x29fc>
    fa4c:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    fa50:	f24f 109c 	movw	r0, #61852	; 0xf19c
    fa54:	f2c0 0001 	movt	r0, #1
    fa58:	6802      	ldr	r2, [r0, #0]
    fa5a:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    fa5e:	f002 fbd3 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fa62:	e7ff      	b.n	fa64 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a14>
    fa64:	e7ff      	b.n	fa66 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a16>
                self.v[x] = self.waitkey();
    fa66:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fa6a:	f001 fa1b 	bl	10ea4 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E>
    fa6e:	9041      	str	r0, [sp, #260]	; 0x104
    fa70:	e7ff      	b.n	fa72 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a22>
    fa72:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fa76:	280f      	cmp	r0, #15
    fa78:	f200 868f 	bhi.w	1079a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x374a>
    fa7c:	e7ff      	b.n	fa7e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a2e>
    fa7e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fa82:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fa86:	1842      	adds	r2, r0, r1
    fa88:	9b41      	ldr	r3, [sp, #260]	; 0x104
    fa8a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    fa8e:	f000 bd95 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    fa92:	2005      	movs	r0, #5
    fa94:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    fa98:	f64e 6000 	movw	r0, #60928	; 0xee00
    fa9c:	f2c0 0001 	movt	r0, #1
    faa0:	6801      	ldr	r1, [r0, #0]
    faa2:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    faa6:	f006 fe32 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    faaa:	9040      	str	r0, [sp, #256]	; 0x100
    faac:	e01f      	b.n	faee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a9e>
    faae:	2001      	movs	r0, #1
    fab0:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    fab4:	e015      	b.n	fae2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a92>
    fab6:	2000      	movs	r0, #0
    fab8:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    fabc:	e011      	b.n	fae2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a92>
    fabe:	2000      	movs	r0, #0
    fac0:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    fac4:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    fac8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    facc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fad0:	f001 fb3c 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fad4:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    fad8:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    fadc:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    fae0:	e00a      	b.n	faf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2aa8>
    fae2:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    fae6:	07c0      	lsls	r0, r0, #31
    fae8:	2800      	cmp	r0, #0
    faea:	d112      	bne.n	fb12 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ac2>
    faec:	e055      	b.n	fb9a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b4a>
    faee:	9840      	ldr	r0, [sp, #256]	; 0x100
    faf0:	07c1      	lsls	r1, r0, #31
    faf2:	2900      	cmp	r1, #0
    faf4:	d1e3      	bne.n	fabe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a6e>
    faf6:	e7de      	b.n	fab6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a66>
    faf8:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    fafc:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    fb00:	f006 fe05 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fb04:	903f      	str	r0, [sp, #252]	; 0xfc
    fb06:	e7ff      	b.n	fb08 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ab8>
    fb08:	983f      	ldr	r0, [sp, #252]	; 0xfc
    fb0a:	07c1      	lsls	r1, r0, #31
    fb0c:	2900      	cmp	r1, #0
    fb0e:	d1ce      	bne.n	faae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a5e>
    fb10:	e7d1      	b.n	fab6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a66>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    fb12:	f24f 102c 	movw	r0, #61740	; 0xf12c
    fb16:	f2c0 0001 	movt	r0, #1
    fb1a:	6801      	ldr	r1, [r0, #0]
    fb1c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fb20:	f100 0212 	add.w	r2, r0, #18
    fb24:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    fb28:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    fb2c:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    fb30:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    fb34:	f2c0 0301 	movt	r3, #1
    fb38:	4610      	mov	r0, r2
    fb3a:	913e      	str	r1, [sp, #248]	; 0xf8
    fb3c:	4619      	mov	r1, r3
    fb3e:	f7fa ff9c 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fb42:	903d      	str	r0, [sp, #244]	; 0xf4
    fb44:	913c      	str	r1, [sp, #240]	; 0xf0
    fb46:	e7ff      	b.n	fb48 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2af8>
    fb48:	983d      	ldr	r0, [sp, #244]	; 0xf4
    fb4a:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    fb4e:	993c      	ldr	r1, [sp, #240]	; 0xf0
    fb50:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    fb54:	f64e 6248 	movw	r2, #61000	; 0xee48
    fb58:	f2c0 0201 	movt	r2, #1
    fb5c:	6812      	ldr	r2, [r2, #0]
    fb5e:	466b      	mov	r3, sp
    fb60:	f04f 0c01 	mov.w	ip, #1
    fb64:	f8c3 c008 	str.w	ip, [r3, #8]
    fb68:	605a      	str	r2, [r3, #4]
    fb6a:	f8c3 c000 	str.w	ip, [r3]
    fb6e:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    fb72:	2202      	movs	r2, #2
    fb74:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    fb78:	993e      	ldr	r1, [sp, #248]	; 0xf8
    fb7a:	f006 fc8d 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fb7e:	e7ff      	b.n	fb80 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b30>
    fb80:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    fb84:	f24f 104c 	movw	r0, #61772	; 0xf14c
    fb88:	f2c0 0001 	movt	r0, #1
    fb8c:	6802      	ldr	r2, [r0, #0]
    fb8e:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    fb92:	f002 fb39 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fb96:	e7ff      	b.n	fb98 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b48>
    fb98:	e7ff      	b.n	fb9a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b4a>
                self.dt = self.v[x];
    fb9a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fb9e:	280f      	cmp	r0, #15
    fba0:	f200 85f1 	bhi.w	10786 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3736>
    fba4:	e7ff      	b.n	fba6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b56>
    fba6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fbaa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fbae:	1842      	adds	r2, r0, r1
    fbb0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    fbb4:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    fbb8:	f000 bd00 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    fbbc:	2005      	movs	r0, #5
    fbbe:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    fbc2:	f64e 6000 	movw	r0, #60928	; 0xee00
    fbc6:	f2c0 0001 	movt	r0, #1
    fbca:	6801      	ldr	r1, [r0, #0]
    fbcc:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    fbd0:	f006 fd9d 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fbd4:	903b      	str	r0, [sp, #236]	; 0xec
    fbd6:	e01f      	b.n	fc18 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2bc8>
    fbd8:	2001      	movs	r0, #1
    fbda:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    fbde:	e015      	b.n	fc0c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2bbc>
    fbe0:	2000      	movs	r0, #0
    fbe2:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    fbe6:	e011      	b.n	fc0c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2bbc>
    fbe8:	2000      	movs	r0, #0
    fbea:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    fbee:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    fbf2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fbf6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fbfa:	f001 faa7 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fbfe:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    fc02:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    fc06:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    fc0a:	e00a      	b.n	fc22 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2bd2>
    fc0c:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    fc10:	07c0      	lsls	r0, r0, #31
    fc12:	2800      	cmp	r0, #0
    fc14:	d112      	bne.n	fc3c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2bec>
    fc16:	e055      	b.n	fcc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2c74>
    fc18:	983b      	ldr	r0, [sp, #236]	; 0xec
    fc1a:	07c1      	lsls	r1, r0, #31
    fc1c:	2900      	cmp	r1, #0
    fc1e:	d1e3      	bne.n	fbe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b98>
    fc20:	e7de      	b.n	fbe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b90>
    fc22:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    fc26:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    fc2a:	f006 fd70 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fc2e:	903a      	str	r0, [sp, #232]	; 0xe8
    fc30:	e7ff      	b.n	fc32 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2be2>
    fc32:	983a      	ldr	r0, [sp, #232]	; 0xe8
    fc34:	07c1      	lsls	r1, r0, #31
    fc36:	2900      	cmp	r1, #0
    fc38:	d1ce      	bne.n	fbd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b88>
    fc3a:	e7d1      	b.n	fbe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b90>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    fc3c:	f24f 00dc 	movw	r0, #61660	; 0xf0dc
    fc40:	f2c0 0001 	movt	r0, #1
    fc44:	6801      	ldr	r1, [r0, #0]
    fc46:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fc4a:	f100 0212 	add.w	r2, r0, #18
    fc4e:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    fc52:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    fc56:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    fc5a:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    fc5e:	f2c0 0301 	movt	r3, #1
    fc62:	4610      	mov	r0, r2
    fc64:	9139      	str	r1, [sp, #228]	; 0xe4
    fc66:	4619      	mov	r1, r3
    fc68:	f7fa ff07 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fc6c:	9038      	str	r0, [sp, #224]	; 0xe0
    fc6e:	9137      	str	r1, [sp, #220]	; 0xdc
    fc70:	e7ff      	b.n	fc72 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2c22>
    fc72:	9838      	ldr	r0, [sp, #224]	; 0xe0
    fc74:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    fc78:	9937      	ldr	r1, [sp, #220]	; 0xdc
    fc7a:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    fc7e:	f64e 6248 	movw	r2, #61000	; 0xee48
    fc82:	f2c0 0201 	movt	r2, #1
    fc86:	6812      	ldr	r2, [r2, #0]
    fc88:	466b      	mov	r3, sp
    fc8a:	f04f 0c01 	mov.w	ip, #1
    fc8e:	f8c3 c008 	str.w	ip, [r3, #8]
    fc92:	605a      	str	r2, [r3, #4]
    fc94:	f8c3 c000 	str.w	ip, [r3]
    fc98:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    fc9c:	2202      	movs	r2, #2
    fc9e:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    fca2:	9939      	ldr	r1, [sp, #228]	; 0xe4
    fca4:	f006 fbf8 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fca8:	e7ff      	b.n	fcaa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2c5a>
    fcaa:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    fcae:	f24f 00fc 	movw	r0, #61692	; 0xf0fc
    fcb2:	f2c0 0001 	movt	r0, #1
    fcb6:	6802      	ldr	r2, [r0, #0]
    fcb8:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    fcbc:	f002 faa4 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fcc0:	e7ff      	b.n	fcc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2c72>
    fcc2:	e7ff      	b.n	fcc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2c74>
                self.st = self.v[x];
    fcc4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fcc8:	280f      	cmp	r0, #15
    fcca:	f200 8552 	bhi.w	10772 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3722>
    fcce:	e7ff      	b.n	fcd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2c80>
    fcd0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fcd4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fcd8:	1842      	adds	r2, r0, r1
    fcda:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    fcde:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    fce2:	f000 bc6b 	b.w	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    fce6:	2005      	movs	r0, #5
    fce8:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    fcec:	f64e 6000 	movw	r0, #60928	; 0xee00
    fcf0:	f2c0 0001 	movt	r0, #1
    fcf4:	6801      	ldr	r1, [r0, #0]
    fcf6:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    fcfa:	f006 fd08 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fcfe:	9036      	str	r0, [sp, #216]	; 0xd8
    fd00:	e01f      	b.n	fd42 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2cf2>
    fd02:	2001      	movs	r0, #1
    fd04:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    fd08:	e015      	b.n	fd36 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ce6>
    fd0a:	2000      	movs	r0, #0
    fd0c:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    fd10:	e011      	b.n	fd36 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ce6>
    fd12:	2000      	movs	r0, #0
    fd14:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    fd18:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    fd1c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fd20:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fd24:	f001 fa12 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fd28:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    fd2c:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    fd30:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    fd34:	e00a      	b.n	fd4c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2cfc>
    fd36:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    fd3a:	07c0      	lsls	r0, r0, #31
    fd3c:	2800      	cmp	r0, #0
    fd3e:	d112      	bne.n	fd66 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2d16>
    fd40:	e055      	b.n	fdee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2d9e>
    fd42:	9836      	ldr	r0, [sp, #216]	; 0xd8
    fd44:	07c1      	lsls	r1, r0, #31
    fd46:	2900      	cmp	r1, #0
    fd48:	d1e3      	bne.n	fd12 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2cc2>
    fd4a:	e7de      	b.n	fd0a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2cba>
    fd4c:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    fd50:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    fd54:	f006 fcdb 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fd58:	9035      	str	r0, [sp, #212]	; 0xd4
    fd5a:	e7ff      	b.n	fd5c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2d0c>
    fd5c:	9835      	ldr	r0, [sp, #212]	; 0xd4
    fd5e:	07c1      	lsls	r1, r0, #31
    fd60:	2900      	cmp	r1, #0
    fd62:	d1ce      	bne.n	fd02 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2cb2>
    fd64:	e7d1      	b.n	fd0a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2cba>
                trace!("[{:04x}] ADD I, Vx", self.pc);
    fd66:	f24f 008c 	movw	r0, #61580	; 0xf08c
    fd6a:	f2c0 0001 	movt	r0, #1
    fd6e:	6801      	ldr	r1, [r0, #0]
    fd70:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fd74:	f100 0212 	add.w	r2, r0, #18
    fd78:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
    fd7c:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
    fd80:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
    fd84:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    fd88:	f2c0 0301 	movt	r3, #1
    fd8c:	4610      	mov	r0, r2
    fd8e:	9134      	str	r1, [sp, #208]	; 0xd0
    fd90:	4619      	mov	r1, r3
    fd92:	f7fa fe72 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fd96:	9033      	str	r0, [sp, #204]	; 0xcc
    fd98:	9132      	str	r1, [sp, #200]	; 0xc8
    fd9a:	e7ff      	b.n	fd9c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2d4c>
    fd9c:	9833      	ldr	r0, [sp, #204]	; 0xcc
    fd9e:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
    fda2:	9932      	ldr	r1, [sp, #200]	; 0xc8
    fda4:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
    fda8:	f64e 6248 	movw	r2, #61000	; 0xee48
    fdac:	f2c0 0201 	movt	r2, #1
    fdb0:	6812      	ldr	r2, [r2, #0]
    fdb2:	466b      	mov	r3, sp
    fdb4:	f04f 0c01 	mov.w	ip, #1
    fdb8:	f8c3 c008 	str.w	ip, [r3, #8]
    fdbc:	605a      	str	r2, [r3, #4]
    fdbe:	f8c3 c000 	str.w	ip, [r3]
    fdc2:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    fdc6:	2202      	movs	r2, #2
    fdc8:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
    fdcc:	9934      	ldr	r1, [sp, #208]	; 0xd0
    fdce:	f006 fb63 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fdd2:	e7ff      	b.n	fdd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2d84>
    fdd4:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
    fdd8:	f24f 00ac 	movw	r0, #61612	; 0xf0ac
    fddc:	f2c0 0001 	movt	r0, #1
    fde0:	6802      	ldr	r2, [r0, #0]
    fde2:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    fde6:	f002 fa0f 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fdea:	e7ff      	b.n	fdec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2d9c>
    fdec:	e7ff      	b.n	fdee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2d9e>
                self.i = self.i.wrapping_add(self.v[x].into());
    fdee:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fdf2:	8a01      	ldrh	r1, [r0, #16]
    fdf4:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    fdf8:	2a0f      	cmp	r2, #15
    fdfa:	9131      	str	r1, [sp, #196]	; 0xc4
    fdfc:	f200 84af 	bhi.w	1075e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x370e>
    fe00:	e7ff      	b.n	fe02 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2db2>
    fe02:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fe06:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fe0a:	1842      	adds	r2, r0, r1
    fe0c:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    fe10:	f001 f98f 	bl	11132 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    fe14:	9030      	str	r0, [sp, #192]	; 0xc0
    fe16:	e7ff      	b.n	fe18 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2dc8>
    fe18:	9831      	ldr	r0, [sp, #196]	; 0xc4
    fe1a:	9930      	ldr	r1, [sp, #192]	; 0xc0
    fe1c:	f006 fc3d 	bl	1669a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
    fe20:	902f      	str	r0, [sp, #188]	; 0xbc
    fe22:	e7ff      	b.n	fe24 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2dd4>
    fe24:	982f      	ldr	r0, [sp, #188]	; 0xbc
    fe26:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    fe2a:	8208      	strh	r0, [r1, #16]
        match (
    fe2c:	e3c6      	b.n	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    fe2e:	2005      	movs	r0, #5
    fe30:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
    fe34:	f64e 6000 	movw	r0, #60928	; 0xee00
    fe38:	f2c0 0001 	movt	r0, #1
    fe3c:	6801      	ldr	r1, [r0, #0]
    fe3e:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    fe42:	f006 fc64 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fe46:	902e      	str	r0, [sp, #184]	; 0xb8
    fe48:	e01f      	b.n	fe8a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e3a>
    fe4a:	2001      	movs	r0, #1
    fe4c:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    fe50:	e015      	b.n	fe7e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e2e>
    fe52:	2000      	movs	r0, #0
    fe54:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    fe58:	e011      	b.n	fe7e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e2e>
    fe5a:	2000      	movs	r0, #0
    fe5c:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
    fe60:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
    fe64:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fe68:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fe6c:	f001 f96e 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fe70:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
    fe74:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
    fe78:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
    fe7c:	e00a      	b.n	fe94 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e44>
    fe7e:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
    fe82:	07c0      	lsls	r0, r0, #31
    fe84:	2800      	cmp	r0, #0
    fe86:	d112      	bne.n	feae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e5e>
    fe88:	e055      	b.n	ff36 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ee6>
    fe8a:	982e      	ldr	r0, [sp, #184]	; 0xb8
    fe8c:	07c1      	lsls	r1, r0, #31
    fe8e:	2900      	cmp	r1, #0
    fe90:	d1e3      	bne.n	fe5a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e0a>
    fe92:	e7de      	b.n	fe52 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e02>
    fe94:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    fe98:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
    fe9c:	f006 fc37 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fea0:	902d      	str	r0, [sp, #180]	; 0xb4
    fea2:	e7ff      	b.n	fea4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e54>
    fea4:	982d      	ldr	r0, [sp, #180]	; 0xb4
    fea6:	07c1      	lsls	r1, r0, #31
    fea8:	2900      	cmp	r1, #0
    feaa:	d1ce      	bne.n	fe4a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2dfa>
    feac:	e7d1      	b.n	fe52 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e02>
                trace!("[{:04x}] LD F, Vx", self.pc);
    feae:	f24f 0008 	movw	r0, #61448	; 0xf008
    feb2:	f2c0 0001 	movt	r0, #1
    feb6:	6801      	ldr	r1, [r0, #0]
    feb8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    febc:	f100 0212 	add.w	r2, r0, #18
    fec0:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
    fec4:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
    fec8:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
    fecc:	f648 23e7 	movw	r3, #35559	; 0x8ae7
    fed0:	f2c0 0301 	movt	r3, #1
    fed4:	4610      	mov	r0, r2
    fed6:	912c      	str	r1, [sp, #176]	; 0xb0
    fed8:	4619      	mov	r1, r3
    feda:	f7fa fdce 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fede:	902b      	str	r0, [sp, #172]	; 0xac
    fee0:	912a      	str	r1, [sp, #168]	; 0xa8
    fee2:	e7ff      	b.n	fee4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e94>
    fee4:	982b      	ldr	r0, [sp, #172]	; 0xac
    fee6:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
    feea:	992a      	ldr	r1, [sp, #168]	; 0xa8
    feec:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
    fef0:	f64e 6248 	movw	r2, #61000	; 0xee48
    fef4:	f2c0 0201 	movt	r2, #1
    fef8:	6812      	ldr	r2, [r2, #0]
    fefa:	466b      	mov	r3, sp
    fefc:	f04f 0c01 	mov.w	ip, #1
    ff00:	f8c3 c008 	str.w	ip, [r3, #8]
    ff04:	605a      	str	r2, [r3, #4]
    ff06:	f8c3 c000 	str.w	ip, [r3]
    ff0a:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    ff0e:	2202      	movs	r2, #2
    ff10:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
    ff14:	992c      	ldr	r1, [sp, #176]	; 0xb0
    ff16:	f006 fabf 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ff1a:	e7ff      	b.n	ff1c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ecc>
    ff1c:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
    ff20:	f24f 0028 	movw	r0, #61480	; 0xf028
    ff24:	f2c0 0001 	movt	r0, #1
    ff28:	6802      	ldr	r2, [r0, #0]
    ff2a:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    ff2e:	f002 f96b 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ff32:	e7ff      	b.n	ff34 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ee4>
    ff34:	e7ff      	b.n	ff36 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ee6>
                self.i = (self.v[x] * 5).into();
    ff36:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ff3a:	280f      	cmp	r0, #15
    ff3c:	f200 83f9 	bhi.w	10732 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x36e2>
    ff40:	e7ff      	b.n	ff42 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ef2>
    ff42:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ff46:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ff4a:	1842      	adds	r2, r0, r1
    ff4c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ff50:	2305      	movs	r3, #5
    ff52:	fba2 2303 	umull	r2, r3, r2, r3
    ff56:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    ff5a:	f04f 0e00 	mov.w	lr, #0
    ff5e:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    ff62:	bf18      	it	ne
    ff64:	f04f 0c01 	movne.w	ip, #1
    ff68:	2b00      	cmp	r3, #0
    ff6a:	bf18      	it	ne
    ff6c:	2301      	movne	r3, #1
    ff6e:	ea43 030c 	orr.w	r3, r3, ip
    ff72:	2b00      	cmp	r3, #0
    ff74:	9229      	str	r2, [sp, #164]	; 0xa4
    ff76:	f040 83e6 	bne.w	10746 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x36f6>
    ff7a:	e7ff      	b.n	ff7c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f2c>
    ff7c:	9829      	ldr	r0, [sp, #164]	; 0xa4
    ff7e:	f001 f8d8 	bl	11132 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    ff82:	9028      	str	r0, [sp, #160]	; 0xa0
    ff84:	e7ff      	b.n	ff86 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f36>
    ff86:	9828      	ldr	r0, [sp, #160]	; 0xa0
    ff88:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ff8c:	8208      	strh	r0, [r1, #16]
        match (
    ff8e:	e315      	b.n	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    ff90:	2005      	movs	r0, #5
    ff92:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
    ff96:	f64e 6000 	movw	r0, #60928	; 0xee00
    ff9a:	f2c0 0001 	movt	r0, #1
    ff9e:	6801      	ldr	r1, [r0, #0]
    ffa0:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    ffa4:	f006 fbb3 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ffa8:	9027      	str	r0, [sp, #156]	; 0x9c
    ffaa:	e01f      	b.n	ffec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f9c>
    ffac:	2001      	movs	r0, #1
    ffae:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    ffb2:	e015      	b.n	ffe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f90>
    ffb4:	2000      	movs	r0, #0
    ffb6:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    ffba:	e011      	b.n	ffe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f90>
    ffbc:	2000      	movs	r0, #0
    ffbe:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
    ffc2:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
    ffc6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ffca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ffce:	f001 f8bd 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ffd2:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
    ffd6:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
    ffda:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
    ffde:	e00a      	b.n	fff6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2fa6>
    ffe0:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
    ffe4:	07c0      	lsls	r0, r0, #31
    ffe6:	2800      	cmp	r0, #0
    ffe8:	d112      	bne.n	10010 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2fc0>
    ffea:	e055      	b.n	10098 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3048>
    ffec:	9827      	ldr	r0, [sp, #156]	; 0x9c
    ffee:	07c1      	lsls	r1, r0, #31
    fff0:	2900      	cmp	r1, #0
    fff2:	d1e3      	bne.n	ffbc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f6c>
    fff4:	e7de      	b.n	ffb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f64>
    fff6:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    fffa:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
    fffe:	f006 fb86 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10002:	9026      	str	r0, [sp, #152]	; 0x98
   10004:	e7ff      	b.n	10006 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2fb6>
   10006:	9826      	ldr	r0, [sp, #152]	; 0x98
   10008:	07c1      	lsls	r1, r0, #31
   1000a:	2900      	cmp	r1, #0
   1000c:	d1ce      	bne.n	ffac <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f5c>
   1000e:	e7d1      	b.n	ffb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f64>
                trace!("[{:04x}] LD B, Vx", self.pc);
   10010:	f64e 7068 	movw	r0, #61288	; 0xef68
   10014:	f2c0 0001 	movt	r0, #1
   10018:	6801      	ldr	r1, [r0, #0]
   1001a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1001e:	f100 0212 	add.w	r2, r0, #18
   10022:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
   10026:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
   1002a:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
   1002e:	f648 23e7 	movw	r3, #35559	; 0x8ae7
   10032:	f2c0 0301 	movt	r3, #1
   10036:	4610      	mov	r0, r2
   10038:	9125      	str	r1, [sp, #148]	; 0x94
   1003a:	4619      	mov	r1, r3
   1003c:	f7fa fd1d 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10040:	9024      	str	r0, [sp, #144]	; 0x90
   10042:	9123      	str	r1, [sp, #140]	; 0x8c
   10044:	e7ff      	b.n	10046 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ff6>
   10046:	9824      	ldr	r0, [sp, #144]	; 0x90
   10048:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
   1004c:	9923      	ldr	r1, [sp, #140]	; 0x8c
   1004e:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
   10052:	f64e 6248 	movw	r2, #61000	; 0xee48
   10056:	f2c0 0201 	movt	r2, #1
   1005a:	6812      	ldr	r2, [r2, #0]
   1005c:	466b      	mov	r3, sp
   1005e:	f04f 0c01 	mov.w	ip, #1
   10062:	f8c3 c008 	str.w	ip, [r3, #8]
   10066:	605a      	str	r2, [r3, #4]
   10068:	f8c3 c000 	str.w	ip, [r3]
   1006c:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
   10070:	2202      	movs	r2, #2
   10072:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
   10076:	9925      	ldr	r1, [sp, #148]	; 0x94
   10078:	f006 fa0e 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   1007c:	e7ff      	b.n	1007e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x302e>
   1007e:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
   10082:	f64e 7088 	movw	r0, #61320	; 0xef88
   10086:	f2c0 0001 	movt	r0, #1
   1008a:	6802      	ldr	r2, [r0, #0]
   1008c:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
   10090:	f002 f8ba 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   10094:	e7ff      	b.n	10096 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3046>
   10096:	e7ff      	b.n	10098 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3048>
                let bcd = self.v[x];
   10098:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   1009c:	280f      	cmp	r0, #15
   1009e:	f200 8308 	bhi.w	106b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3662>
   100a2:	e7ff      	b.n	100a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3054>
   100a4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   100a8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   100ac:	1842      	adds	r2, r0, r1
   100ae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   100b2:	4613      	mov	r3, r2
   100b4:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
   100b8:	f248 5c1f 	movw	ip, #34079	; 0x851f
   100bc:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
   100c0:	fba2 2c0c 	umull	r2, ip, r2, ip
   100c4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   100c8:	f8b0 e010 	ldrh.w	lr, [r0, #16]
   100cc:	4674      	mov	r4, lr
   100ce:	2500      	movs	r5, #0
   100d0:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
   100d4:	9322      	str	r3, [sp, #136]	; 0x88
   100d6:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
   100da:	9420      	str	r4, [sp, #128]	; 0x80
   100dc:	f040 82f3 	bne.w	106c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3676>
   100e0:	e7ff      	b.n	100e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3092>
   100e2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   100e6:	9920      	ldr	r1, [sp, #128]	; 0x80
   100e8:	1842      	adds	r2, r0, r1
   100ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
   100ec:	fa5f fc83 	uxtb.w	ip, r3
   100f0:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   100f4:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   100f8:	fbac 450e 	umull	r4, r5, ip, lr
   100fc:	08ed      	lsrs	r5, r5, #3
   100fe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   10102:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
   10106:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
   1010a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1010c:	fa5f fc82 	uxtb.w	ip, r2
   10110:	fbac ce0e 	umull	ip, lr, ip, lr
   10114:	ea4f 0ede 	mov.w	lr, lr, lsr #3
   10118:	8a05      	ldrh	r5, [r0, #16]
   1011a:	3501      	adds	r5, #1
   1011c:	2600      	movs	r6, #0
   1011e:	2e00      	cmp	r6, #0
   10120:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
   10124:	951e      	str	r5, [sp, #120]	; 0x78
   10126:	f040 82d8 	bne.w	106da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x368a>
   1012a:	e7ff      	b.n	1012c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x30dc>
   1012c:	2000      	movs	r0, #0
   1012e:	991e      	ldr	r1, [sp, #120]	; 0x78
   10130:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   10134:	f040 82dd 	bne.w	106f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x36a2>
   10138:	e7ff      	b.n	1013a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x30ea>
   1013a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1013e:	991e      	ldr	r1, [sp, #120]	; 0x78
   10140:	1842      	adds	r2, r0, r1
   10142:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   10144:	fa5f fc83 	uxtb.w	ip, r3
   10148:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   1014c:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   10150:	fbac e40e 	umull	lr, r4, ip, lr
   10154:	08e4      	lsrs	r4, r4, #3
   10156:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1015a:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
   1015e:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
   10162:	8a02      	ldrh	r2, [r0, #16]
   10164:	3202      	adds	r2, #2
   10166:	f04f 0c00 	mov.w	ip, #0
   1016a:	f1bc 0f00 	cmp.w	ip, #0
   1016e:	921d      	str	r2, [sp, #116]	; 0x74
   10170:	f040 82c9 	bne.w	10706 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x36b6>
   10174:	e7ff      	b.n	10176 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3126>
   10176:	2000      	movs	r0, #0
   10178:	991d      	ldr	r1, [sp, #116]	; 0x74
   1017a:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   1017e:	f040 82ce 	bne.w	1071e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x36ce>
   10182:	e7ff      	b.n	10184 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3134>
   10184:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10188:	991d      	ldr	r1, [sp, #116]	; 0x74
   1018a:	1842      	adds	r2, r0, r1
   1018c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1018e:	fa5f fc83 	uxtb.w	ip, r3
   10192:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   10196:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   1019a:	fbac e40e 	umull	lr, r4, ip, lr
   1019e:	08e4      	lsrs	r4, r4, #3
   101a0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   101a4:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
   101a8:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
   101ac:	e206      	b.n	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
   101ae:	2005      	movs	r0, #5
   101b0:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
   101b4:	f64e 6000 	movw	r0, #60928	; 0xee00
   101b8:	f2c0 0001 	movt	r0, #1
   101bc:	6801      	ldr	r1, [r0, #0]
   101be:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
   101c2:	f006 faa4 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   101c6:	901c      	str	r0, [sp, #112]	; 0x70
   101c8:	e01f      	b.n	1020a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x31ba>
   101ca:	2001      	movs	r0, #1
   101cc:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
   101d0:	e015      	b.n	101fe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x31ae>
   101d2:	2000      	movs	r0, #0
   101d4:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
   101d8:	e011      	b.n	101fe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x31ae>
   101da:	2000      	movs	r0, #0
   101dc:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
   101e0:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
   101e4:	f644 206c 	movw	r0, #19052	; 0x4a6c
   101e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   101ec:	f000 ffae 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   101f0:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
   101f4:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
   101f8:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
   101fc:	e00a      	b.n	10214 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x31c4>
   101fe:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
   10202:	07c0      	lsls	r0, r0, #31
   10204:	2800      	cmp	r0, #0
   10206:	d112      	bne.n	1022e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x31de>
   10208:	e055      	b.n	102b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3266>
   1020a:	981c      	ldr	r0, [sp, #112]	; 0x70
   1020c:	07c1      	lsls	r1, r0, #31
   1020e:	2900      	cmp	r1, #0
   10210:	d1e3      	bne.n	101da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x318a>
   10212:	e7de      	b.n	101d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3182>
   10214:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
   10218:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
   1021c:	f006 fa77 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10220:	901b      	str	r0, [sp, #108]	; 0x6c
   10222:	e7ff      	b.n	10224 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x31d4>
   10224:	981b      	ldr	r0, [sp, #108]	; 0x6c
   10226:	07c1      	lsls	r1, r0, #31
   10228:	2900      	cmp	r1, #0
   1022a:	d1ce      	bne.n	101ca <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x317a>
   1022c:	e7d1      	b.n	101d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3182>
                trace!("[{:04x}] LD [I], Vx", self.pc);
   1022e:	f64e 60e8 	movw	r0, #61160	; 0xeee8
   10232:	f2c0 0001 	movt	r0, #1
   10236:	6801      	ldr	r1, [r0, #0]
   10238:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1023c:	f100 0212 	add.w	r2, r0, #18
   10240:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
   10244:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
   10248:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
   1024c:	f648 23e7 	movw	r3, #35559	; 0x8ae7
   10250:	f2c0 0301 	movt	r3, #1
   10254:	4610      	mov	r0, r2
   10256:	911a      	str	r1, [sp, #104]	; 0x68
   10258:	4619      	mov	r1, r3
   1025a:	f7fa fc0e 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   1025e:	9019      	str	r0, [sp, #100]	; 0x64
   10260:	9118      	str	r1, [sp, #96]	; 0x60
   10262:	e7ff      	b.n	10264 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3214>
   10264:	9819      	ldr	r0, [sp, #100]	; 0x64
   10266:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
   1026a:	9918      	ldr	r1, [sp, #96]	; 0x60
   1026c:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
   10270:	f64e 6248 	movw	r2, #61000	; 0xee48
   10274:	f2c0 0201 	movt	r2, #1
   10278:	6812      	ldr	r2, [r2, #0]
   1027a:	466b      	mov	r3, sp
   1027c:	f04f 0c01 	mov.w	ip, #1
   10280:	f8c3 c008 	str.w	ip, [r3, #8]
   10284:	605a      	str	r2, [r3, #4]
   10286:	f8c3 c000 	str.w	ip, [r3]
   1028a:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
   1028e:	2202      	movs	r2, #2
   10290:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
   10294:	991a      	ldr	r1, [sp, #104]	; 0x68
   10296:	f006 f8ff 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   1029a:	e7ff      	b.n	1029c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x324c>
   1029c:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
   102a0:	f64e 7008 	movw	r0, #61192	; 0xef08
   102a4:	f2c0 0001 	movt	r0, #1
   102a8:	6802      	ldr	r2, [r0, #0]
   102aa:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
   102ae:	f001 ffab 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   102b2:	e7ff      	b.n	102b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3264>
   102b4:	e7ff      	b.n	102b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3266>
                let x = x as usize;
   102b6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   102ba:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
   102be:	1c41      	adds	r1, r0, #1
   102c0:	460a      	mov	r2, r1
   102c2:	4281      	cmp	r1, r0
   102c4:	9217      	str	r2, [sp, #92]	; 0x5c
   102c6:	f0c0 81c9 	bcc.w	1065c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x360c>
   102ca:	e7ff      	b.n	102cc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x327c>
   102cc:	2000      	movs	r0, #0
   102ce:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
   102d2:	9817      	ldr	r0, [sp, #92]	; 0x5c
   102d4:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
   102d8:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
   102dc:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
   102e0:	f001 fd1f 	bl	11d22 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   102e4:	9016      	str	r0, [sp, #88]	; 0x58
   102e6:	9115      	str	r1, [sp, #84]	; 0x54
   102e8:	e7ff      	b.n	102ea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x329a>
   102ea:	9816      	ldr	r0, [sp, #88]	; 0x58
   102ec:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
   102f0:	9915      	ldr	r1, [sp, #84]	; 0x54
   102f2:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
   102f6:	e7ff      	b.n	102f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x32a8>
   102f8:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
   102fc:	f001 fc86 	bl	11c0c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   10300:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
   10304:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
   10308:	e7ff      	b.n	1030a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x32ba>
   1030a:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
   1030e:	2800      	cmp	r0, #0
   10310:	d001      	beq.n	10316 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x32c6>
   10312:	e7ff      	b.n	10314 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x32c4>
   10314:	e001      	b.n	1031a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x32ca>
        match (
   10316:	e151      	b.n	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
                for i in 0..(x + 1) {
   10318:	defe      	udf	#254	; 0xfe
   1031a:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
   1031e:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
   10322:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
   10326:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
   1032a:	280f      	cmp	r0, #15
   1032c:	9014      	str	r0, [sp, #80]	; 0x50
   1032e:	f200 81a1 	bhi.w	10674 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3624>
   10332:	e7ff      	b.n	10334 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x32e4>
   10334:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10338:	9914      	ldr	r1, [sp, #80]	; 0x50
   1033a:	1842      	adds	r2, r0, r1
   1033c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   10340:	8a03      	ldrh	r3, [r0, #16]
   10342:	eb03 0c01 	add.w	ip, r3, r1
   10346:	46e6      	mov	lr, ip
   10348:	459c      	cmp	ip, r3
   1034a:	9213      	str	r2, [sp, #76]	; 0x4c
   1034c:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
   10350:	f0c0 8199 	bcc.w	10686 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3636>
   10354:	e7ff      	b.n	10356 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3306>
   10356:	2000      	movs	r0, #0
   10358:	9912      	ldr	r1, [sp, #72]	; 0x48
   1035a:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   1035e:	f040 819e 	bne.w	1069e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x364e>
   10362:	e7ff      	b.n	10364 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3314>
   10364:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10368:	9912      	ldr	r1, [sp, #72]	; 0x48
   1036a:	1842      	adds	r2, r0, r1
   1036c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1036e:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
   10372:	e7c1      	b.n	102f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x32a8>
   10374:	2005      	movs	r0, #5
   10376:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
   1037a:	f64e 6000 	movw	r0, #60928	; 0xee00
   1037e:	f2c0 0001 	movt	r0, #1
   10382:	6801      	ldr	r1, [r0, #0]
   10384:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
   10388:	f006 f9c1 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   1038c:	9011      	str	r0, [sp, #68]	; 0x44
   1038e:	e01f      	b.n	103d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3380>
   10390:	2001      	movs	r0, #1
   10392:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
   10396:	e015      	b.n	103c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3374>
   10398:	2000      	movs	r0, #0
   1039a:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
   1039e:	e011      	b.n	103c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3374>
   103a0:	2000      	movs	r0, #0
   103a2:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
   103a6:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
   103aa:	f644 206c 	movw	r0, #19052	; 0x4a6c
   103ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
   103b2:	f000 fecb 	bl	1114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   103b6:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
   103ba:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
   103be:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
   103c2:	e00a      	b.n	103da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x338a>
   103c4:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
   103c8:	07c0      	lsls	r0, r0, #31
   103ca:	2800      	cmp	r0, #0
   103cc:	d112      	bne.n	103f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x33a4>
   103ce:	e055      	b.n	1047c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x342c>
   103d0:	9811      	ldr	r0, [sp, #68]	; 0x44
   103d2:	07c1      	lsls	r1, r0, #31
   103d4:	2900      	cmp	r1, #0
   103d6:	d1e3      	bne.n	103a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3350>
   103d8:	e7de      	b.n	10398 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3348>
   103da:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
   103de:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
   103e2:	f006 f994 	bl	1670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   103e6:	9010      	str	r0, [sp, #64]	; 0x40
   103e8:	e7ff      	b.n	103ea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x339a>
   103ea:	9810      	ldr	r0, [sp, #64]	; 0x40
   103ec:	07c1      	lsls	r1, r0, #31
   103ee:	2900      	cmp	r1, #0
   103f0:	d1ce      	bne.n	10390 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3340>
   103f2:	e7d1      	b.n	10398 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3348>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
   103f4:	f64e 6024 	movw	r0, #60964	; 0xee24
   103f8:	f2c0 0001 	movt	r0, #1
   103fc:	6801      	ldr	r1, [r0, #0]
   103fe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10402:	f100 0212 	add.w	r2, r0, #18
   10406:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
   1040a:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
   1040e:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
   10412:	f648 23e7 	movw	r3, #35559	; 0x8ae7
   10416:	f2c0 0301 	movt	r3, #1
   1041a:	4610      	mov	r0, r2
   1041c:	910f      	str	r1, [sp, #60]	; 0x3c
   1041e:	4619      	mov	r1, r3
   10420:	f7fa fb2b 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10424:	900e      	str	r0, [sp, #56]	; 0x38
   10426:	910d      	str	r1, [sp, #52]	; 0x34
   10428:	e7ff      	b.n	1042a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x33da>
   1042a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1042c:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
   10430:	990d      	ldr	r1, [sp, #52]	; 0x34
   10432:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
   10436:	f64e 6248 	movw	r2, #61000	; 0xee48
   1043a:	f2c0 0201 	movt	r2, #1
   1043e:	6812      	ldr	r2, [r2, #0]
   10440:	466b      	mov	r3, sp
   10442:	f04f 0c01 	mov.w	ip, #1
   10446:	f8c3 c008 	str.w	ip, [r3, #8]
   1044a:	605a      	str	r2, [r3, #4]
   1044c:	f8c3 c000 	str.w	ip, [r3]
   10450:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
   10454:	2202      	movs	r2, #2
   10456:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
   1045a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1045c:	f006 f81c 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10460:	e7ff      	b.n	10462 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3412>
   10462:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
   10466:	f64e 6088 	movw	r0, #61064	; 0xee88
   1046a:	f2c0 0001 	movt	r0, #1
   1046e:	6802      	ldr	r2, [r0, #0]
   10470:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
   10474:	f001 fec8 	bl	12208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   10478:	e7ff      	b.n	1047a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x342a>
   1047a:	e7ff      	b.n	1047c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x342c>
                let x = x as usize;
   1047c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   10480:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
   10484:	1c41      	adds	r1, r0, #1
   10486:	460a      	mov	r2, r1
   10488:	4281      	cmp	r1, r0
   1048a:	920c      	str	r2, [sp, #48]	; 0x30
   1048c:	f0c0 80bb 	bcc.w	10606 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x35b6>
   10490:	e7ff      	b.n	10492 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3442>
   10492:	2000      	movs	r0, #0
   10494:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
   10498:	980c      	ldr	r0, [sp, #48]	; 0x30
   1049a:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
   1049e:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
   104a2:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
   104a6:	f001 fc3c 	bl	11d22 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   104aa:	900b      	str	r0, [sp, #44]	; 0x2c
   104ac:	910a      	str	r1, [sp, #40]	; 0x28
   104ae:	e7ff      	b.n	104b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3460>
   104b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   104b2:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
   104b6:	990a      	ldr	r1, [sp, #40]	; 0x28
   104b8:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
   104bc:	e7ff      	b.n	104be <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x346e>
   104be:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
   104c2:	f001 fba3 	bl	11c0c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   104c6:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
   104ca:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
   104ce:	e7ff      	b.n	104d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3480>
   104d0:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
   104d4:	2800      	cmp	r0, #0
   104d6:	d001      	beq.n	104dc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x348c>
   104d8:	e7ff      	b.n	104da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x348a>
   104da:	e001      	b.n	104e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3490>
        match (
   104dc:	e06e      	b.n	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
                for i in 0..(x + 1) {
   104de:	defe      	udf	#254	; 0xfe
   104e0:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
   104e4:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
   104e8:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
   104ec:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
   104f0:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   104f4:	8a0a      	ldrh	r2, [r1, #16]
   104f6:	1813      	adds	r3, r2, r0
   104f8:	469c      	mov	ip, r3
   104fa:	4293      	cmp	r3, r2
   104fc:	9009      	str	r0, [sp, #36]	; 0x24
   104fe:	f8cd c020 	str.w	ip, [sp, #32]
   10502:	f0c0 808c 	bcc.w	1061e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x35ce>
   10506:	e7ff      	b.n	10508 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x34b8>
   10508:	2000      	movs	r0, #0
   1050a:	9908      	ldr	r1, [sp, #32]
   1050c:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   10510:	f040 8091 	bne.w	10636 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x35e6>
   10514:	e7ff      	b.n	10516 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x34c6>
   10516:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1051a:	9908      	ldr	r1, [sp, #32]
   1051c:	1842      	adds	r2, r0, r1
   1051e:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
   10522:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10524:	2b0f      	cmp	r3, #15
   10526:	9207      	str	r2, [sp, #28]
   10528:	f200 808f 	bhi.w	1064a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x35fa>
   1052c:	e7ff      	b.n	1052e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x34de>
   1052e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10532:	9909      	ldr	r1, [sp, #36]	; 0x24
   10534:	1842      	adds	r2, r0, r1
   10536:	9b07      	ldr	r3, [sp, #28]
   10538:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
   1053c:	e7bf      	b.n	104be <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x346e>
   1053e:	f648 21e7 	movw	r1, #35559	; 0x8ae7
   10542:	f2c0 0101 	movt	r1, #1
   10546:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
   1054a:	f7fa fa96 	bl	aa7a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   1054e:	9006      	str	r0, [sp, #24]
   10550:	9105      	str	r1, [sp, #20]
   10552:	e7ff      	b.n	10554 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3504>
   10554:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
   10558:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
   1055c:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   10560:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
   10564:	9a06      	ldr	r2, [sp, #24]
   10566:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
   1056a:	9b05      	ldr	r3, [sp, #20]
   1056c:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
   10570:	f64f 1cec 	movw	ip, #63980	; 0xf9ec
   10574:	f2c0 0c01 	movt	ip, #1
   10578:	f8dc c000 	ldr.w	ip, [ip]
   1057c:	46ee      	mov	lr, sp
   1057e:	2402      	movs	r4, #2
   10580:	f8ce 4008 	str.w	r4, [lr, #8]
   10584:	f8ce c004 	str.w	ip, [lr, #4]
   10588:	f8ce 4000 	str.w	r4, [lr]
   1058c:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   10590:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
   10594:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
   10598:	4622      	mov	r2, r4
   1059a:	f005 ff7d 	bl	16498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   1059e:	e7ff      	b.n	105a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3550>
   105a0:	f64f 2010 	movw	r0, #64016	; 0xfa10
   105a4:	f2c0 0001 	movt	r0, #1
   105a8:	f006 fe89 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   105ac:	9004      	str	r0, [sp, #16]
   105ae:	e7ff      	b.n	105b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3560>
   105b0:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   105b4:	9904      	ldr	r1, [sp, #16]
   105b6:	f006 febf 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   105ba:	defe      	udf	#254	; 0xfe
        }
    }
   105bc:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
   105c0:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
   105c2:	f64e 50ac 	movw	r0, #60844	; 0xedac
   105c6:	f2c0 0001 	movt	r0, #1
   105ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   105ce:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
   105d2:	f006 fe91 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   105d6:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
   105d8:	f64e 50d0 	movw	r0, #60880	; 0xedd0
   105dc:	f2c0 0001 	movt	r0, #1
   105e0:	f64e 52bc 	movw	r2, #60860	; 0xedbc
   105e4:	f2c0 0201 	movt	r2, #1
   105e8:	211c      	movs	r1, #28
   105ea:	f006 fe6f 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   105ee:	defe      	udf	#254	; 0xfe
   105f0:	f64e 50ec 	movw	r0, #60908	; 0xedec
   105f4:	f2c0 0001 	movt	r0, #1
   105f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   105fc:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
   10600:	f006 fe7a 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10604:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   10606:	f64e 50d0 	movw	r0, #60880	; 0xedd0
   1060a:	f2c0 0001 	movt	r0, #1
   1060e:	f64e 628c 	movw	r2, #61068	; 0xee8c
   10612:	f2c0 0201 	movt	r2, #1
   10616:	211c      	movs	r1, #28
   10618:	f006 fe58 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1061c:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
   1061e:	f64e 50d0 	movw	r0, #60880	; 0xedd0
   10622:	f2c0 0001 	movt	r0, #1
   10626:	f64e 629c 	movw	r2, #61084	; 0xee9c
   1062a:	f2c0 0201 	movt	r2, #1
   1062e:	211c      	movs	r1, #28
   10630:	f006 fe4c 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10634:	defe      	udf	#254	; 0xfe
   10636:	f64e 60ac 	movw	r0, #61100	; 0xeeac
   1063a:	f2c0 0001 	movt	r0, #1
   1063e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10642:	9908      	ldr	r1, [sp, #32]
   10644:	f006 fe58 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10648:	defe      	udf	#254	; 0xfe
   1064a:	f64e 60bc 	movw	r0, #61116	; 0xeebc
   1064e:	f2c0 0001 	movt	r0, #1
   10652:	2210      	movs	r2, #16
   10654:	9909      	ldr	r1, [sp, #36]	; 0x24
   10656:	f006 fe4f 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1065a:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   1065c:	f64e 50d0 	movw	r0, #60880	; 0xedd0
   10660:	f2c0 0001 	movt	r0, #1
   10664:	f64e 720c 	movw	r2, #61196	; 0xef0c
   10668:	f2c0 0201 	movt	r2, #1
   1066c:	211c      	movs	r1, #28
   1066e:	f006 fe2d 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10672:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
   10674:	f64e 701c 	movw	r0, #61212	; 0xef1c
   10678:	f2c0 0001 	movt	r0, #1
   1067c:	2210      	movs	r2, #16
   1067e:	9914      	ldr	r1, [sp, #80]	; 0x50
   10680:	f006 fe3a 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10684:	defe      	udf	#254	; 0xfe
   10686:	f64e 50d0 	movw	r0, #60880	; 0xedd0
   1068a:	f2c0 0001 	movt	r0, #1
   1068e:	f64e 722c 	movw	r2, #61228	; 0xef2c
   10692:	f2c0 0201 	movt	r2, #1
   10696:	211c      	movs	r1, #28
   10698:	f006 fe18 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1069c:	defe      	udf	#254	; 0xfe
   1069e:	f64e 703c 	movw	r0, #61244	; 0xef3c
   106a2:	f2c0 0001 	movt	r0, #1
   106a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   106aa:	9912      	ldr	r1, [sp, #72]	; 0x48
   106ac:	f006 fe24 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   106b0:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
   106b2:	f64e 708c 	movw	r0, #61324	; 0xef8c
   106b6:	f2c0 0001 	movt	r0, #1
   106ba:	2210      	movs	r2, #16
   106bc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   106c0:	f006 fe1a 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   106c4:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
   106c6:	f64e 709c 	movw	r0, #61340	; 0xef9c
   106ca:	f2c0 0001 	movt	r0, #1
   106ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   106d2:	9920      	ldr	r1, [sp, #128]	; 0x80
   106d4:	f006 fe10 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   106d8:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
   106da:	f64e 50d0 	movw	r0, #60880	; 0xedd0
   106de:	f2c0 0001 	movt	r0, #1
   106e2:	f64e 72ac 	movw	r2, #61356	; 0xefac
   106e6:	f2c0 0201 	movt	r2, #1
   106ea:	211c      	movs	r1, #28
   106ec:	f006 fdee 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   106f0:	defe      	udf	#254	; 0xfe
   106f2:	f64e 70bc 	movw	r0, #61372	; 0xefbc
   106f6:	f2c0 0001 	movt	r0, #1
   106fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   106fe:	991e      	ldr	r1, [sp, #120]	; 0x78
   10700:	f006 fdfa 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10704:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
   10706:	f64e 50d0 	movw	r0, #60880	; 0xedd0
   1070a:	f2c0 0001 	movt	r0, #1
   1070e:	f64e 72cc 	movw	r2, #61388	; 0xefcc
   10712:	f2c0 0201 	movt	r2, #1
   10716:	211c      	movs	r1, #28
   10718:	f006 fdd8 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1071c:	defe      	udf	#254	; 0xfe
   1071e:	f64e 70dc 	movw	r0, #61404	; 0xefdc
   10722:	f2c0 0001 	movt	r0, #1
   10726:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1072a:	991d      	ldr	r1, [sp, #116]	; 0x74
   1072c:	f006 fde4 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10730:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
   10732:	f24f 002c 	movw	r0, #61484	; 0xf02c
   10736:	f2c0 0001 	movt	r0, #1
   1073a:	2210      	movs	r2, #16
   1073c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10740:	f006 fdda 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10744:	defe      	udf	#254	; 0xfe
   10746:	f24f 0050 	movw	r0, #61520	; 0xf050
   1074a:	f2c0 0001 	movt	r0, #1
   1074e:	f24f 023c 	movw	r2, #61500	; 0xf03c
   10752:	f2c0 0201 	movt	r2, #1
   10756:	2121      	movs	r1, #33	; 0x21
   10758:	f006 fdb8 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1075c:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
   1075e:	f24f 00b0 	movw	r0, #61616	; 0xf0b0
   10762:	f2c0 0001 	movt	r0, #1
   10766:	2210      	movs	r2, #16
   10768:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1076c:	f006 fdc4 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10770:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
   10772:	f24f 1000 	movw	r0, #61696	; 0xf100
   10776:	f2c0 0001 	movt	r0, #1
   1077a:	2210      	movs	r2, #16
   1077c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10780:	f006 fdba 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10784:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
   10786:	f24f 1050 	movw	r0, #61776	; 0xf150
   1078a:	f2c0 0001 	movt	r0, #1
   1078e:	2210      	movs	r2, #16
   10790:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10794:	f006 fdb0 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10798:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
   1079a:	f24f 10a0 	movw	r0, #61856	; 0xf1a0
   1079e:	f2c0 0001 	movt	r0, #1
   107a2:	2210      	movs	r2, #16
   107a4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   107a8:	f006 fda6 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   107ac:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
   107ae:	f24f 10f0 	movw	r0, #61936	; 0xf1f0
   107b2:	f2c0 0001 	movt	r0, #1
   107b6:	2210      	movs	r2, #16
   107b8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   107bc:	f006 fd9c 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   107c0:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
   107c2:	f24f 2040 	movw	r0, #62016	; 0xf240
   107c6:	f2c0 0001 	movt	r0, #1
   107ca:	2210      	movs	r2, #16
   107cc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   107d0:	f006 fd92 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   107d4:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
   107d6:	f24f 2084 	movw	r0, #62084	; 0xf284
   107da:	f2c0 0001 	movt	r0, #1
   107de:	2210      	movs	r2, #16
   107e0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   107e4:	f006 fd88 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   107e8:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
   107ea:	f24f 20d8 	movw	r0, #62168	; 0xf2d8
   107ee:	f2c0 0001 	movt	r0, #1
   107f2:	2210      	movs	r2, #16
   107f4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   107f8:	f006 fd7e 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   107fc:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
   107fe:	f24f 20e8 	movw	r0, #62184	; 0xf2e8
   10802:	f2c0 0001 	movt	r0, #1
   10806:	2210      	movs	r2, #16
   10808:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   1080c:	f006 fd74 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10810:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
   10812:	f64e 50d0 	movw	r0, #60880	; 0xedd0
   10816:	f2c0 0001 	movt	r0, #1
   1081a:	f24f 22f8 	movw	r2, #62200	; 0xf2f8
   1081e:	f2c0 0201 	movt	r2, #1
   10822:	211c      	movs	r1, #28
   10824:	f006 fd52 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10828:	defe      	udf	#254	; 0xfe
   1082a:	f24f 3008 	movw	r0, #62216	; 0xf308
   1082e:	f2c0 0001 	movt	r0, #1
   10832:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10836:	9967      	ldr	r1, [sp, #412]	; 0x19c
   10838:	f006 fd5e 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1083c:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
   1083e:	f64e 50d0 	movw	r0, #60880	; 0xedd0
   10842:	f2c0 0001 	movt	r0, #1
   10846:	f24f 3218 	movw	r2, #62232	; 0xf318
   1084a:	f2c0 0201 	movt	r2, #1
   1084e:	211c      	movs	r1, #28
   10850:	f006 fd3c 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10854:	defe      	udf	#254	; 0xfe
   10856:	f24f 3030 	movw	r0, #62256	; 0xf330
   1085a:	f2c0 0001 	movt	r0, #1
   1085e:	f24f 3218 	movw	r2, #62232	; 0xf318
   10862:	f2c0 0201 	movt	r2, #1
   10866:	2139      	movs	r1, #57	; 0x39
   10868:	f006 fd30 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1086c:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
   1086e:	f64e 50d0 	movw	r0, #60880	; 0xedd0
   10872:	f2c0 0001 	movt	r0, #1
   10876:	f24f 326c 	movw	r2, #62316	; 0xf36c
   1087a:	f2c0 0201 	movt	r2, #1
   1087e:	211c      	movs	r1, #28
   10880:	f006 fd24 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10884:	defe      	udf	#254	; 0xfe
   10886:	f24f 3030 	movw	r0, #62256	; 0xf330
   1088a:	f2c0 0001 	movt	r0, #1
   1088e:	f24f 326c 	movw	r2, #62316	; 0xf36c
   10892:	f2c0 0201 	movt	r2, #1
   10896:	2139      	movs	r1, #57	; 0x39
   10898:	f006 fd18 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1089c:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
   1089e:	f24f 3090 	movw	r0, #62352	; 0xf390
   108a2:	f2c0 0001 	movt	r0, #1
   108a6:	f24f 327c 	movw	r2, #62332	; 0xf37c
   108aa:	f2c0 0201 	movt	r2, #1
   108ae:	2121      	movs	r1, #33	; 0x21
   108b0:	f006 fd0c 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   108b4:	defe      	udf	#254	; 0xfe
   108b6:	f24f 30d0 	movw	r0, #62416	; 0xf3d0
   108ba:	f2c0 0001 	movt	r0, #1
   108be:	f24f 32b4 	movw	r2, #62388	; 0xf3b4
   108c2:	f2c0 0201 	movt	r2, #1
   108c6:	2123      	movs	r1, #35	; 0x23
   108c8:	f006 fd00 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   108cc:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
   108ce:	f24f 4034 	movw	r0, #62516	; 0xf434
   108d2:	f2c0 0001 	movt	r0, #1
   108d6:	2210      	movs	r2, #16
   108d8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   108dc:	f006 fd0c 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   108e0:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
   108e2:	f24f 5004 	movw	r0, #62724	; 0xf504
   108e6:	f2c0 0001 	movt	r0, #1
   108ea:	2210      	movs	r2, #16
   108ec:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   108f0:	f006 fd02 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   108f4:	defe      	udf	#254	; 0xfe
   108f6:	f24f 5014 	movw	r0, #62740	; 0xf514
   108fa:	f2c0 0001 	movt	r0, #1
   108fe:	2210      	movs	r2, #16
   10900:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10904:	f006 fcf8 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10908:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
   1090a:	f24f 5064 	movw	r0, #62820	; 0xf564
   1090e:	f2c0 0001 	movt	r0, #1
   10912:	2210      	movs	r2, #16
   10914:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10918:	f006 fcee 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1091c:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
   1091e:	f24f 5074 	movw	r0, #62836	; 0xf574
   10922:	f2c0 0001 	movt	r0, #1
   10926:	2210      	movs	r2, #16
   10928:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1092c:	f006 fce4 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10930:	defe      	udf	#254	; 0xfe
   10932:	f24f 5084 	movw	r0, #62852	; 0xf584
   10936:	f2c0 0001 	movt	r0, #1
   1093a:	2210      	movs	r2, #16
   1093c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10940:	f006 fcda 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10944:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
   10946:	f24f 50d8 	movw	r0, #62936	; 0xf5d8
   1094a:	f2c0 0001 	movt	r0, #1
   1094e:	2210      	movs	r2, #16
   10950:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10954:	f006 fcd0 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10958:	defe      	udf	#254	; 0xfe
   1095a:	f24f 50e8 	movw	r0, #62952	; 0xf5e8
   1095e:	f2c0 0001 	movt	r0, #1
   10962:	2210      	movs	r2, #16
   10964:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10968:	f006 fcc6 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1096c:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   1096e:	f24f 50f8 	movw	r0, #62968	; 0xf5f8
   10972:	f2c0 0001 	movt	r0, #1
   10976:	2210      	movs	r2, #16
   10978:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1097c:	f006 fcbc 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10980:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
   10982:	f24f 6048 	movw	r0, #63048	; 0xf648
   10986:	f2c0 0001 	movt	r0, #1
   1098a:	2210      	movs	r2, #16
   1098c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10990:	f006 fcb2 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10994:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
   10996:	f24f 6058 	movw	r0, #63064	; 0xf658
   1099a:	f2c0 0001 	movt	r0, #1
   1099e:	2210      	movs	r2, #16
   109a0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   109a4:	f006 fca8 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109a8:	defe      	udf	#254	; 0xfe
   109aa:	f24f 6068 	movw	r0, #63080	; 0xf668
   109ae:	f2c0 0001 	movt	r0, #1
   109b2:	2210      	movs	r2, #16
   109b4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   109b8:	f006 fc9e 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109bc:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
   109be:	f24f 60b8 	movw	r0, #63160	; 0xf6b8
   109c2:	f2c0 0001 	movt	r0, #1
   109c6:	2210      	movs	r2, #16
   109c8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   109cc:	f006 fc94 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109d0:	defe      	udf	#254	; 0xfe
   109d2:	f24f 60c8 	movw	r0, #63176	; 0xf6c8
   109d6:	f2c0 0001 	movt	r0, #1
   109da:	2210      	movs	r2, #16
   109dc:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   109e0:	f006 fc8a 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109e4:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   109e6:	f24f 60d8 	movw	r0, #63192	; 0xf6d8
   109ea:	f2c0 0001 	movt	r0, #1
   109ee:	2210      	movs	r2, #16
   109f0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   109f4:	f006 fc80 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109f8:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
   109fa:	f24f 7028 	movw	r0, #63272	; 0xf728
   109fe:	f2c0 0001 	movt	r0, #1
   10a02:	2210      	movs	r2, #16
   10a04:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a08:	f006 fc76 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a0c:	defe      	udf	#254	; 0xfe
   10a0e:	f24f 7038 	movw	r0, #63288	; 0xf738
   10a12:	f2c0 0001 	movt	r0, #1
   10a16:	2210      	movs	r2, #16
   10a18:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10a1c:	f006 fc6c 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a20:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10a22:	f24f 7048 	movw	r0, #63304	; 0xf748
   10a26:	f2c0 0001 	movt	r0, #1
   10a2a:	2210      	movs	r2, #16
   10a2c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a30:	f006 fc62 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a34:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
   10a36:	f24f 7098 	movw	r0, #63384	; 0xf798
   10a3a:	f2c0 0001 	movt	r0, #1
   10a3e:	2210      	movs	r2, #16
   10a40:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10a44:	f006 fc58 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a48:	defe      	udf	#254	; 0xfe
   10a4a:	f24f 70a8 	movw	r0, #63400	; 0xf7a8
   10a4e:	f2c0 0001 	movt	r0, #1
   10a52:	2210      	movs	r2, #16
   10a54:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a58:	f006 fc4e 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a5c:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
   10a5e:	f24f 70f8 	movw	r0, #63480	; 0xf7f8
   10a62:	f2c0 0001 	movt	r0, #1
   10a66:	2210      	movs	r2, #16
   10a68:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10a6c:	f006 fc44 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a70:	defe      	udf	#254	; 0xfe
   10a72:	f64f 0008 	movw	r0, #63496	; 0xf808
   10a76:	f2c0 0001 	movt	r0, #1
   10a7a:	2210      	movs	r2, #16
   10a7c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a80:	f006 fc3a 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a84:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
   10a86:	f64f 0058 	movw	r0, #63576	; 0xf858
   10a8a:	f2c0 0001 	movt	r0, #1
   10a8e:	2210      	movs	r2, #16
   10a90:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10a94:	f006 fc30 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a98:	defe      	udf	#254	; 0xfe
   10a9a:	f64f 0068 	movw	r0, #63592	; 0xf868
   10a9e:	f2c0 0001 	movt	r0, #1
   10aa2:	2210      	movs	r2, #16
   10aa4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10aa8:	f006 fc26 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10aac:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
   10aae:	f64f 00b8 	movw	r0, #63672	; 0xf8b8
   10ab2:	f2c0 0001 	movt	r0, #1
   10ab6:	2210      	movs	r2, #16
   10ab8:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10abc:	f006 fc1c 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ac0:	defe      	udf	#254	; 0xfe
   10ac2:	f64f 00c8 	movw	r0, #63688	; 0xf8c8
   10ac6:	f2c0 0001 	movt	r0, #1
   10aca:	2210      	movs	r2, #16
   10acc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10ad0:	f006 fc12 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ad4:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
   10ad6:	f64f 1018 	movw	r0, #63768	; 0xf918
   10ada:	f2c0 0001 	movt	r0, #1
   10ade:	2210      	movs	r2, #16
   10ae0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10ae4:	f006 fc08 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ae8:	defe      	udf	#254	; 0xfe
   10aea:	f64f 1028 	movw	r0, #63784	; 0xf928
   10aee:	f2c0 0001 	movt	r0, #1
   10af2:	2210      	movs	r2, #16
   10af4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10af8:	f006 fbfe 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10afc:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
   10afe:	f64f 1078 	movw	r0, #63864	; 0xf978
   10b02:	f2c0 0001 	movt	r0, #1
   10b06:	2210      	movs	r2, #16
   10b08:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b0c:	f006 fbf4 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b10:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
   10b12:	f64f 2060 	movw	r0, #64096	; 0xfa60
   10b16:	f2c0 0001 	movt	r0, #1
   10b1a:	2210      	movs	r2, #16
   10b1c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b20:	f006 fbea 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b24:	defe      	udf	#254	; 0xfe
   10b26:	f64f 2070 	movw	r0, #64112	; 0xfa70
   10b2a:	f2c0 0001 	movt	r0, #1
   10b2e:	2210      	movs	r2, #16
   10b30:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10b34:	f006 fbe0 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b38:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
   10b3a:	f64f 20c0 	movw	r0, #64192	; 0xfac0
   10b3e:	f2c0 0001 	movt	r0, #1
   10b42:	2210      	movs	r2, #16
   10b44:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b48:	f006 fbd6 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b4c:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
   10b4e:	f64f 3010 	movw	r0, #64272	; 0xfb10
   10b52:	f2c0 0001 	movt	r0, #1
   10b56:	2210      	movs	r2, #16
   10b58:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b5c:	f006 fbcc 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b60:	defe      	udf	#254	; 0xfe

00010b62 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hb16abfee8f88907eE>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
   10b62:	b580      	push	{r7, lr}
   10b64:	b086      	sub	sp, #24
   10b66:	9104      	str	r1, [sp, #16]
   10b68:	9205      	str	r2, [sp, #20]
   10b6a:	6809      	ldr	r1, [r1, #0]
   10b6c:	6809      	ldr	r1, [r1, #0]
   10b6e:	2300      	movs	r3, #0
   10b70:	9301      	str	r3, [sp, #4]
   10b72:	9102      	str	r1, [sp, #8]
   10b74:	9203      	str	r2, [sp, #12]
   10b76:	9901      	ldr	r1, [sp, #4]
   10b78:	9a02      	ldr	r2, [sp, #8]
   10b7a:	9b03      	ldr	r3, [sp, #12]
   10b7c:	f000 fbb4 	bl	112e8 <_ZN4core4iter6traits8iterator8Iterator3map17h6d8406b1bb96c52eE>
   10b80:	e7ff      	b.n	10b82 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hb16abfee8f88907eE+0x20>
   10b82:	b006      	add	sp, #24
   10b84:	bd80      	pop	{r7, pc}

00010b86 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h06eb33e167ea87a6E>:
   10b86:	b084      	sub	sp, #16
   10b88:	9002      	str	r0, [sp, #8]
   10b8a:	9103      	str	r1, [sp, #12]
   10b8c:	6800      	ldr	r0, [r0, #0]
   10b8e:	9000      	str	r0, [sp, #0]
   10b90:	9101      	str	r1, [sp, #4]
   10b92:	9800      	ldr	r0, [sp, #0]
   10b94:	9901      	ldr	r1, [sp, #4]
   10b96:	b004      	add	sp, #16
   10b98:	4770      	bx	lr

00010b9a <_ZN8libchip814Chip8$LT$T$GT$4jump17heb92b408b228e4d7E>:
    fn jump(&mut self, pc: u16) {
   10b9a:	b082      	sub	sp, #8
   10b9c:	460a      	mov	r2, r1
   10b9e:	9000      	str	r0, [sp, #0]
   10ba0:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
   10ba4:	8241      	strh	r1, [r0, #18]
    }
   10ba6:	b002      	add	sp, #8
   10ba8:	4770      	bx	lr

00010baa <_ZN8libchip814Chip8$LT$T$GT$4load17h28b293d7e5188fe6E>:
    fn load(&mut self, rom: &[u8]) {
   10baa:	b580      	push	{r7, lr}
   10bac:	b08a      	sub	sp, #40	; 0x28
   10bae:	9105      	str	r1, [sp, #20]
   10bb0:	9206      	str	r2, [sp, #24]
   10bb2:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   10bb4:	3047      	adds	r0, #71	; 0x47
   10bb6:	9905      	ldr	r1, [sp, #20]
   10bb8:	9a06      	ldr	r2, [sp, #24]
   10bba:	9004      	str	r0, [sp, #16]
   10bbc:	4608      	mov	r0, r1
   10bbe:	4611      	mov	r1, r2
   10bc0:	f001 f888 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   10bc4:	9003      	str	r0, [sp, #12]
   10bc6:	e7ff      	b.n	10bc8 <_ZN8libchip814Chip8$LT$T$GT$4load17h28b293d7e5188fe6E+0x1e>
   10bc8:	9803      	ldr	r0, [sp, #12]
   10bca:	f500 7100 	add.w	r1, r0, #512	; 0x200
   10bce:	460a      	mov	r2, r1
   10bd0:	4281      	cmp	r1, r0
   10bd2:	9202      	str	r2, [sp, #8]
   10bd4:	d318      	bcc.n	10c08 <_ZN8libchip814Chip8$LT$T$GT$4load17h28b293d7e5188fe6E+0x5e>
   10bd6:	e7ff      	b.n	10bd8 <_ZN8libchip814Chip8$LT$T$GT$4load17h28b293d7e5188fe6E+0x2e>
   10bd8:	f44f 7000 	mov.w	r0, #512	; 0x200
   10bdc:	9007      	str	r0, [sp, #28]
   10bde:	9802      	ldr	r0, [sp, #8]
   10be0:	9008      	str	r0, [sp, #32]
   10be2:	9a07      	ldr	r2, [sp, #28]
   10be4:	9b08      	ldr	r3, [sp, #32]
   10be6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10bea:	9804      	ldr	r0, [sp, #16]
   10bec:	f005 fdb4 	bl	16758 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>
   10bf0:	9001      	str	r0, [sp, #4]
   10bf2:	9100      	str	r1, [sp, #0]
   10bf4:	e7ff      	b.n	10bf6 <_ZN8libchip814Chip8$LT$T$GT$4load17h28b293d7e5188fe6E+0x4c>
   10bf6:	9a05      	ldr	r2, [sp, #20]
   10bf8:	9b06      	ldr	r3, [sp, #24]
   10bfa:	9801      	ldr	r0, [sp, #4]
   10bfc:	9900      	ldr	r1, [sp, #0]
   10bfe:	f7f8 f999 	bl	8f34 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   10c02:	e7ff      	b.n	10c04 <_ZN8libchip814Chip8$LT$T$GT$4load17h28b293d7e5188fe6E+0x5a>
    }
   10c04:	b00a      	add	sp, #40	; 0x28
   10c06:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   10c08:	f64e 50d0 	movw	r0, #60880	; 0xedd0
   10c0c:	f2c0 0001 	movt	r0, #1
   10c10:	f64f 426c 	movw	r2, #64620	; 0xfc6c
   10c14:	f2c0 0201 	movt	r2, #1
   10c18:	211c      	movs	r1, #28
   10c1a:	f006 fb57 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10c1e:	defe      	udf	#254	; 0xfe

00010c20 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E>:
    fn next(&mut self) {
   10c20:	b580      	push	{r7, lr}
   10c22:	b084      	sub	sp, #16
   10c24:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
   10c26:	8a41      	ldrh	r1, [r0, #18]
   10c28:	2202      	movs	r2, #2
   10c2a:	9002      	str	r0, [sp, #8]
   10c2c:	4608      	mov	r0, r1
   10c2e:	4611      	mov	r1, r2
   10c30:	f005 fd33 	bl	1669a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
   10c34:	9001      	str	r0, [sp, #4]
   10c36:	e7ff      	b.n	10c38 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E+0x18>
   10c38:	9802      	ldr	r0, [sp, #8]
   10c3a:	9901      	ldr	r1, [sp, #4]
   10c3c:	f7ff ffad 	bl	10b9a <_ZN8libchip814Chip8$LT$T$GT$4jump17heb92b408b228e4d7E>
   10c40:	e7ff      	b.n	10c42 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E+0x22>
    }
   10c42:	b004      	add	sp, #16
   10c44:	bd80      	pop	{r7, pc}

00010c46 <_ZN8libchip814Chip8$LT$T$GT$4push17hf7601df6bb546f8dE>:
    fn push(&mut self, item: u16) {
   10c46:	b580      	push	{r7, lr}
   10c48:	b086      	sub	sp, #24
   10c4a:	460a      	mov	r2, r1
   10c4c:	9004      	str	r0, [sp, #16]
   10c4e:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
   10c52:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
   10c56:	460b      	mov	r3, r1
   10c58:	290f      	cmp	r1, #15
   10c5a:	9003      	str	r0, [sp, #12]
   10c5c:	9202      	str	r2, [sp, #8]
   10c5e:	9301      	str	r3, [sp, #4]
   10c60:	d813      	bhi.n	10c8a <_ZN8libchip814Chip8$LT$T$GT$4push17hf7601df6bb546f8dE+0x44>
   10c62:	e7ff      	b.n	10c64 <_ZN8libchip814Chip8$LT$T$GT$4push17hf7601df6bb546f8dE+0x1e>
   10c64:	9803      	ldr	r0, [sp, #12]
   10c66:	9901      	ldr	r1, [sp, #4]
   10c68:	eb00 0241 	add.w	r2, r0, r1, lsl #1
   10c6c:	9b02      	ldr	r3, [sp, #8]
   10c6e:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
   10c70:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
   10c74:	2101      	movs	r1, #1
   10c76:	f005 fc73 	bl	16560 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
   10c7a:	9000      	str	r0, [sp, #0]
   10c7c:	e7ff      	b.n	10c7e <_ZN8libchip814Chip8$LT$T$GT$4push17hf7601df6bb546f8dE+0x38>
   10c7e:	9800      	ldr	r0, [sp, #0]
   10c80:	9903      	ldr	r1, [sp, #12]
   10c82:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
   10c86:	b006      	add	sp, #24
   10c88:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
   10c8a:	f64f 407c 	movw	r0, #64636	; 0xfc7c
   10c8e:	f2c0 0001 	movt	r0, #1
   10c92:	2210      	movs	r2, #16
   10c94:	9901      	ldr	r1, [sp, #4]
   10c96:	f006 fb2f 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c9a:	defe      	udf	#254	; 0xfe

00010c9c <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E>:
    fn tick(&mut self) {
   10c9c:	b580      	push	{r7, lr}
   10c9e:	b084      	sub	sp, #16
   10ca0:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
   10ca2:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   10ca6:	2900      	cmp	r1, #0
   10ca8:	9002      	str	r0, [sp, #8]
   10caa:	d00f      	beq.n	10ccc <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x30>
   10cac:	e7ff      	b.n	10cae <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x12>
            self.dt -= 1;
   10cae:	9802      	ldr	r0, [sp, #8]
   10cb0:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   10cb4:	3901      	subs	r1, #1
   10cb6:	b2ca      	uxtb	r2, r1
   10cb8:	460b      	mov	r3, r1
   10cba:	428a      	cmp	r2, r1
   10cbc:	9301      	str	r3, [sp, #4]
   10cbe:	d126      	bne.n	10d0e <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x72>
   10cc0:	e7ff      	b.n	10cc2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x26>
   10cc2:	9801      	ldr	r0, [sp, #4]
   10cc4:	9902      	ldr	r1, [sp, #8]
   10cc6:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
   10cca:	e7ff      	b.n	10ccc <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x30>
        if self.st > 0 {
   10ccc:	9802      	ldr	r0, [sp, #8]
   10cce:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   10cd2:	2900      	cmp	r1, #0
   10cd4:	d019      	beq.n	10d0a <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x6e>
   10cd6:	e7ff      	b.n	10cd8 <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x3c>
            self.st -= 1;
   10cd8:	9802      	ldr	r0, [sp, #8]
   10cda:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   10cde:	3901      	subs	r1, #1
   10ce0:	b2ca      	uxtb	r2, r1
   10ce2:	460b      	mov	r3, r1
   10ce4:	428a      	cmp	r2, r1
   10ce6:	9300      	str	r3, [sp, #0]
   10ce8:	d11d      	bne.n	10d26 <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x8a>
   10cea:	e7ff      	b.n	10cec <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x50>
   10cec:	9800      	ldr	r0, [sp, #0]
   10cee:	9902      	ldr	r1, [sp, #8]
   10cf0:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
   10cf4:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
   10cf8:	2a00      	cmp	r2, #0
   10cfa:	d105      	bne.n	10d08 <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x6c>
   10cfc:	e7ff      	b.n	10cfe <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x62>
                self.hw.beep();
   10cfe:	9802      	ldr	r0, [sp, #8]
   10d00:	f7fb fe06 	bl	c910 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h46449aaa1682a400E>
   10d04:	e7ff      	b.n	10d06 <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x6a>
            if self.st == 0 {
   10d06:	e7ff      	b.n	10d08 <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x6c>
        if self.st > 0 {
   10d08:	e7ff      	b.n	10d0a <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x6e>
    }
   10d0a:	b004      	add	sp, #16
   10d0c:	bd80      	pop	{r7, pc}
            self.dt -= 1;
   10d0e:	f24f 3090 	movw	r0, #62352	; 0xf390
   10d12:	f2c0 0001 	movt	r0, #1
   10d16:	f64f 428c 	movw	r2, #64652	; 0xfc8c
   10d1a:	f2c0 0201 	movt	r2, #1
   10d1e:	2121      	movs	r1, #33	; 0x21
   10d20:	f006 fad4 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10d24:	defe      	udf	#254	; 0xfe
            self.st -= 1;
   10d26:	f24f 3090 	movw	r0, #62352	; 0xf390
   10d2a:	f2c0 0001 	movt	r0, #1
   10d2e:	f64f 429c 	movw	r2, #64668	; 0xfc9c
   10d32:	f2c0 0201 	movt	r2, #1
   10d36:	2121      	movs	r1, #33	; 0x21
   10d38:	f006 fac8 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10d3c:	defe      	udf	#254	; 0xfe

00010d3e <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E>:
    fn sched(&mut self) {
   10d3e:	b510      	push	{r4, lr}
   10d40:	b098      	sub	sp, #96	; 0x60
   10d42:	9015      	str	r0, [sp, #84]	; 0x54
        if self.hw.sched() {
   10d44:	900b      	str	r0, [sp, #44]	; 0x2c
   10d46:	f7fb fde7 	bl	c918 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h7a2ee6dc937954dfE>
   10d4a:	900a      	str	r0, [sp, #40]	; 0x28
   10d4c:	e7ff      	b.n	10d4e <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x10>
   10d4e:	980a      	ldr	r0, [sp, #40]	; 0x28
   10d50:	07c1      	lsls	r1, r0, #31
   10d52:	2900      	cmp	r1, #0
   10d54:	d005      	beq.n	10d62 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x24>
   10d56:	e7ff      	b.n	10d58 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x1a>
            self.shutdown();
   10d58:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10d5a:	f000 f900 	bl	10f5e <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h203a3011efe54ce1E>
   10d5e:	e7ff      	b.n	10d60 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x22>
        if self.hw.sched() {
   10d60:	e7ff      	b.n	10d62 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x24>
        if let Some(t) = self.time {
   10d62:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10d64:	6801      	ldr	r1, [r0, #0]
   10d66:	2901      	cmp	r1, #1
   10d68:	d006      	beq.n	10d78 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x3a>
   10d6a:	e7ff      	b.n	10d6c <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x2e>
            self.time = Some(self.hw.clock());
   10d6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10d6e:	f7fb fd6d 	bl	c84c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE>
   10d72:	9109      	str	r1, [sp, #36]	; 0x24
   10d74:	9008      	str	r0, [sp, #32]
   10d76:	e040      	b.n	10dfa <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0xbc>
        if let Some(t) = self.time {
   10d78:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10d7a:	6881      	ldr	r1, [r0, #8]
   10d7c:	68c2      	ldr	r2, [r0, #12]
   10d7e:	9217      	str	r2, [sp, #92]	; 0x5c
   10d80:	9116      	str	r1, [sp, #88]	; 0x58
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   10d82:	9107      	str	r1, [sp, #28]
   10d84:	9206      	str	r2, [sp, #24]
   10d86:	f7fb fd61 	bl	c84c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE>
   10d8a:	9105      	str	r1, [sp, #20]
   10d8c:	9004      	str	r0, [sp, #16]
   10d8e:	e7ff      	b.n	10d90 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x52>
   10d90:	9804      	ldr	r0, [sp, #16]
   10d92:	9905      	ldr	r1, [sp, #20]
   10d94:	9a07      	ldr	r2, [sp, #28]
   10d96:	9b06      	ldr	r3, [sp, #24]
   10d98:	f005 fca1 	bl	166de <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>
   10d9c:	9103      	str	r1, [sp, #12]
   10d9e:	9002      	str	r0, [sp, #8]
   10da0:	e7ff      	b.n	10da2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x64>
   10da2:	f245 002b 	movw	r0, #20523	; 0x502b
   10da6:	f2c0 00fe 	movt	r0, #254	; 0xfe
   10daa:	9902      	ldr	r1, [sp, #8]
   10dac:	1a08      	subs	r0, r1, r0
   10dae:	9a03      	ldr	r2, [sp, #12]
   10db0:	f172 0300 	sbcs.w	r3, r2, #0
   10db4:	d320      	bcc.n	10df8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0xba>
   10db6:	e7ff      	b.n	10db8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x7a>
                self.tick();
   10db8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10dba:	f7ff ff6f 	bl	10c9c <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E>
   10dbe:	e7ff      	b.n	10dc0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x82>
                self.time = Some(self.hw.clock());
   10dc0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10dc2:	f7fb fd43 	bl	c84c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE>
   10dc6:	9101      	str	r1, [sp, #4]
   10dc8:	9000      	str	r0, [sp, #0]
   10dca:	e7ff      	b.n	10dcc <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x8e>
   10dcc:	9800      	ldr	r0, [sp, #0]
   10dce:	900e      	str	r0, [sp, #56]	; 0x38
   10dd0:	9901      	ldr	r1, [sp, #4]
   10dd2:	910f      	str	r1, [sp, #60]	; 0x3c
   10dd4:	2200      	movs	r2, #0
   10dd6:	920d      	str	r2, [sp, #52]	; 0x34
   10dd8:	2201      	movs	r2, #1
   10dda:	920c      	str	r2, [sp, #48]	; 0x30
   10ddc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10de0:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   10de4:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   10de8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   10dea:	6063      	str	r3, [r4, #4]
   10dec:	6022      	str	r2, [r4, #0]
   10dee:	f8c4 e00c 	str.w	lr, [r4, #12]
   10df2:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   10df6:	e7ff      	b.n	10df8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0xba>
        if let Some(t) = self.time {
   10df8:	e015      	b.n	10e26 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0xe8>
            self.time = Some(self.hw.clock());
   10dfa:	9808      	ldr	r0, [sp, #32]
   10dfc:	9012      	str	r0, [sp, #72]	; 0x48
   10dfe:	9909      	ldr	r1, [sp, #36]	; 0x24
   10e00:	9113      	str	r1, [sp, #76]	; 0x4c
   10e02:	2200      	movs	r2, #0
   10e04:	9211      	str	r2, [sp, #68]	; 0x44
   10e06:	2201      	movs	r2, #1
   10e08:	9210      	str	r2, [sp, #64]	; 0x40
   10e0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10e0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e0e:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   10e12:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
   10e16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   10e18:	6063      	str	r3, [r4, #4]
   10e1a:	6022      	str	r2, [r4, #0]
   10e1c:	f8c4 e00c 	str.w	lr, [r4, #12]
   10e20:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
   10e24:	e7ff      	b.n	10e26 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0xe8>
    }
   10e26:	b018      	add	sp, #96	; 0x60
   10e28:	bd10      	pop	{r4, pc}

00010e2a <_ZN8libchip814Chip8$LT$T$GT$5setup17ha7902fed1bdb33a6E>:
    fn setup(&mut self) {
   10e2a:	b580      	push	{r7, lr}
   10e2c:	b088      	sub	sp, #32
   10e2e:	9007      	str	r0, [sp, #28]
   10e30:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
   10e34:	8241      	strh	r1, [r0, #18]
        self.hw.vram_setsize(DISPS);
   10e36:	f64e 6164 	movw	r1, #61028	; 0xee64
   10e3a:	f2c0 0101 	movt	r1, #1
   10e3e:	680a      	ldr	r2, [r1, #0]
   10e40:	6849      	ldr	r1, [r1, #4]
   10e42:	9005      	str	r0, [sp, #20]
   10e44:	9104      	str	r1, [sp, #16]
   10e46:	4611      	mov	r1, r2
   10e48:	9a04      	ldr	r2, [sp, #16]
   10e4a:	f7fb fcc8 	bl	c7de <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E>
   10e4e:	e7ff      	b.n	10e50 <_ZN8libchip814Chip8$LT$T$GT$5setup17ha7902fed1bdb33a6E+0x26>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
   10e50:	9805      	ldr	r0, [sp, #20]
   10e52:	f100 0147 	add.w	r1, r0, #71	; 0x47
   10e56:	f64f 503c 	movw	r0, #64828	; 0xfd3c
   10e5a:	f2c0 0001 	movt	r0, #1
   10e5e:	2250      	movs	r2, #80	; 0x50
   10e60:	9103      	str	r1, [sp, #12]
   10e62:	4611      	mov	r1, r2
   10e64:	f000 ff36 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   10e68:	9002      	str	r0, [sp, #8]
   10e6a:	e7ff      	b.n	10e6c <_ZN8libchip814Chip8$LT$T$GT$5setup17ha7902fed1bdb33a6E+0x42>
   10e6c:	9802      	ldr	r0, [sp, #8]
   10e6e:	9006      	str	r0, [sp, #24]
   10e70:	9a06      	ldr	r2, [sp, #24]
   10e72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10e76:	9803      	ldr	r0, [sp, #12]
   10e78:	f7f8 f959 	bl	912e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
   10e7c:	9001      	str	r0, [sp, #4]
   10e7e:	9100      	str	r1, [sp, #0]
   10e80:	e7ff      	b.n	10e82 <_ZN8libchip814Chip8$LT$T$GT$5setup17ha7902fed1bdb33a6E+0x58>
   10e82:	f64f 523c 	movw	r2, #64828	; 0xfd3c
   10e86:	f2c0 0201 	movt	r2, #1
   10e8a:	2350      	movs	r3, #80	; 0x50
   10e8c:	9801      	ldr	r0, [sp, #4]
   10e8e:	9900      	ldr	r1, [sp, #0]
   10e90:	f7f8 f850 	bl	8f34 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   10e94:	e7ff      	b.n	10e96 <_ZN8libchip814Chip8$LT$T$GT$5setup17ha7902fed1bdb33a6E+0x6c>
   10e96:	f241 0047 	movw	r0, #4167	; 0x1047
   10e9a:	2101      	movs	r1, #1
        self.running = true;
   10e9c:	9a05      	ldr	r2, [sp, #20]
   10e9e:	5411      	strb	r1, [r2, r0]
    }
   10ea0:	b008      	add	sp, #32
   10ea2:	bd80      	pop	{r7, pc}

00010ea4 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E>:
    fn waitkey(&mut self) -> u8 {
   10ea4:	b580      	push	{r7, lr}
   10ea6:	b08c      	sub	sp, #48	; 0x30
   10ea8:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
   10eaa:	9005      	str	r0, [sp, #20]
   10eac:	e7ff      	b.n	10eae <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0xa>
   10eae:	f241 0047 	movw	r0, #4167	; 0x1047
   10eb2:	9905      	ldr	r1, [sp, #20]
   10eb4:	5c08      	ldrb	r0, [r1, r0]
   10eb6:	07c0      	lsls	r0, r0, #31
   10eb8:	2800      	cmp	r0, #0
   10eba:	d104      	bne.n	10ec6 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x22>
   10ebc:	e7ff      	b.n	10ebe <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x1a>
   10ebe:	2020      	movs	r0, #32
        return b' ';
   10ec0:	f88d 001b 	strb.w	r0, [sp, #27]
   10ec4:	e047      	b.n	10f56 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0xb2>
            self.sched();
   10ec6:	9805      	ldr	r0, [sp, #20]
   10ec8:	f7ff ff39 	bl	10d3e <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E>
   10ecc:	e7ff      	b.n	10ece <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x2a>
   10ece:	2000      	movs	r0, #0
            for i in 0..0xf {
   10ed0:	f88d 001c 	strb.w	r0, [sp, #28]
   10ed4:	200f      	movs	r0, #15
   10ed6:	f88d 001d 	strb.w	r0, [sp, #29]
   10eda:	f89d 001c 	ldrb.w	r0, [sp, #28]
   10ede:	f89d 101d 	ldrb.w	r1, [sp, #29]
   10ee2:	f000 fa0b 	bl	112fc <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>
   10ee6:	9004      	str	r0, [sp, #16]
   10ee8:	9103      	str	r1, [sp, #12]
   10eea:	e7ff      	b.n	10eec <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x48>
   10eec:	9804      	ldr	r0, [sp, #16]
   10eee:	f88d 0020 	strb.w	r0, [sp, #32]
   10ef2:	9903      	ldr	r1, [sp, #12]
   10ef4:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   10ef8:	e7ff      	b.n	10efa <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x56>
   10efa:	a808      	add	r0, sp, #32
   10efc:	f000 f98d 	bl	1121a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>
   10f00:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   10f04:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   10f08:	e7ff      	b.n	10f0a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x66>
   10f0a:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   10f0e:	07c1      	lsls	r1, r0, #31
   10f10:	2900      	cmp	r1, #0
   10f12:	d001      	beq.n	10f18 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x74>
   10f14:	e7ff      	b.n	10f16 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x72>
   10f16:	e001      	b.n	10f1c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x78>
        while self.running {
   10f18:	e7c9      	b.n	10eae <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0xa>
            for i in 0..0xf {
   10f1a:	defe      	udf	#254	; 0xfe
   10f1c:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
   10f20:	4601      	mov	r1, r0
   10f22:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   10f26:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   10f2a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if self.hw.key(i) {
   10f2e:	9a05      	ldr	r2, [sp, #20]
   10f30:	9002      	str	r0, [sp, #8]
   10f32:	4610      	mov	r0, r2
   10f34:	9b02      	ldr	r3, [sp, #8]
   10f36:	9101      	str	r1, [sp, #4]
   10f38:	4619      	mov	r1, r3
   10f3a:	f7fb fa45 	bl	c3c8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h6ab5fe7f9b6adc84E>
   10f3e:	9000      	str	r0, [sp, #0]
   10f40:	e7ff      	b.n	10f42 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x9e>
   10f42:	9800      	ldr	r0, [sp, #0]
   10f44:	07c1      	lsls	r1, r0, #31
   10f46:	2900      	cmp	r1, #0
   10f48:	d101      	bne.n	10f4e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0xaa>
   10f4a:	e7ff      	b.n	10f4c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0xa8>
            for i in 0..0xf {
   10f4c:	e7d5      	b.n	10efa <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x56>
                    return i;
   10f4e:	9801      	ldr	r0, [sp, #4]
   10f50:	f88d 001b 	strb.w	r0, [sp, #27]
   10f54:	e7ff      	b.n	10f56 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0xb2>
    }
   10f56:	f89d 001b 	ldrb.w	r0, [sp, #27]
   10f5a:	b00c      	add	sp, #48	; 0x30
   10f5c:	bd80      	pop	{r7, pc}

00010f5e <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h203a3011efe54ce1E>:
    fn shutdown(&mut self) {
   10f5e:	b081      	sub	sp, #4
   10f60:	9000      	str	r0, [sp, #0]
   10f62:	f241 0147 	movw	r1, #4167	; 0x1047
   10f66:	2200      	movs	r2, #0
        self.running = false;
   10f68:	5442      	strb	r2, [r0, r1]
    }
   10f6a:	b001      	add	sp, #4
   10f6c:	4770      	bx	lr

00010f6e <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17h830ef09e153bc6fbE>:
   10f6e:	b081      	sub	sp, #4
   10f70:	9000      	str	r0, [sp, #0]
   10f72:	8800      	ldrh	r0, [r0, #0]
   10f74:	b001      	add	sp, #4
   10f76:	4770      	bx	lr

00010f78 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf0fe5cd21a17e0a6E>:
   10f78:	b580      	push	{r7, lr}
   10f7a:	b082      	sub	sp, #8
   10f7c:	9101      	str	r1, [sp, #4]
   10f7e:	f000 f803 	bl	10f88 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE>
   10f82:	e7ff      	b.n	10f84 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf0fe5cd21a17e0a6E+0xc>
   10f84:	b002      	add	sp, #8
   10f86:	bd80      	pop	{r7, pc}

00010f88 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE>:
   10f88:	b580      	push	{r7, lr}
   10f8a:	b0a0      	sub	sp, #128	; 0x80
   10f8c:	911c      	str	r1, [sp, #112]	; 0x70
   10f8e:	9103      	str	r1, [sp, #12]
   10f90:	9002      	str	r0, [sp, #8]
   10f92:	e7ff      	b.n	10f94 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xc>
   10f94:	9803      	ldr	r0, [sp, #12]
   10f96:	68c1      	ldr	r1, [r0, #12]
   10f98:	2901      	cmp	r1, #1
   10f9a:	d11e      	bne.n	10fda <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x52>
   10f9c:	e7ff      	b.n	10f9e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x16>
   10f9e:	9803      	ldr	r0, [sp, #12]
   10fa0:	f100 0110 	add.w	r1, r0, #16
   10fa4:	911e      	str	r1, [sp, #120]	; 0x78
   10fa6:	a804      	add	r0, sp, #16
   10fa8:	f000 f921 	bl	111ee <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he4b6bba524de7333E>
   10fac:	e7ff      	b.n	10fae <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x26>
   10fae:	9804      	ldr	r0, [sp, #16]
   10fb0:	2801      	cmp	r0, #1
   10fb2:	d001      	beq.n	10fb8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x30>
   10fb4:	e7ff      	b.n	10fb6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x2e>
   10fb6:	e00f      	b.n	10fd8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x50>
   10fb8:	9804      	ldr	r0, [sp, #16]
   10fba:	9905      	ldr	r1, [sp, #20]
   10fbc:	9a06      	ldr	r2, [sp, #24]
   10fbe:	9209      	str	r2, [sp, #36]	; 0x24
   10fc0:	9108      	str	r1, [sp, #32]
   10fc2:	9007      	str	r0, [sp, #28]
   10fc4:	9807      	ldr	r0, [sp, #28]
   10fc6:	9908      	ldr	r1, [sp, #32]
   10fc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10fca:	9b02      	ldr	r3, [sp, #8]
   10fcc:	609a      	str	r2, [r3, #8]
   10fce:	6059      	str	r1, [r3, #4]
   10fd0:	6018      	str	r0, [r3, #0]
   10fd2:	e7ff      	b.n	10fd4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x4c>
   10fd4:	b020      	add	sp, #128	; 0x80
   10fd6:	bd80      	pop	{r7, pc}
   10fd8:	e7ff      	b.n	10fda <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x52>
   10fda:	a80a      	add	r0, sp, #40	; 0x28
   10fdc:	9903      	ldr	r1, [sp, #12]
   10fde:	f000 f8f0 	bl	111c2 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2feea8e9eaacbdd0E>
   10fe2:	e7ff      	b.n	10fe4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x5c>
   10fe4:	980a      	ldr	r0, [sp, #40]	; 0x28
   10fe6:	2800      	cmp	r0, #0
   10fe8:	d012      	beq.n	11010 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x88>
   10fea:	e7ff      	b.n	10fec <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x64>
   10fec:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10fee:	990c      	ldr	r1, [sp, #48]	; 0x30
   10ff0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10ff2:	9211      	str	r2, [sp, #68]	; 0x44
   10ff4:	9110      	str	r1, [sp, #64]	; 0x40
   10ff6:	900f      	str	r0, [sp, #60]	; 0x3c
   10ff8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10ffa:	9910      	ldr	r1, [sp, #64]	; 0x40
   10ffc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10ffe:	921b      	str	r2, [sp, #108]	; 0x6c
   11000:	911a      	str	r1, [sp, #104]	; 0x68
   11002:	9019      	str	r0, [sp, #100]	; 0x64
   11004:	a816      	add	r0, sp, #88	; 0x58
   11006:	a919      	add	r1, sp, #100	; 0x64
   11008:	f000 f8d4 	bl	111b4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcc80626d7c50dc19E>
   1100c:	e028      	b.n	11060 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xd8>
   1100e:	defe      	udf	#254	; 0xfe
   11010:	9803      	ldr	r0, [sp, #12]
   11012:	301c      	adds	r0, #28
   11014:	f7fb fd7d 	bl	cb12 <_ZN4core6option15Option$LT$T$GT$6as_mut17h1de41a42d046f353E>
   11018:	9001      	str	r0, [sp, #4]
   1101a:	e7ff      	b.n	1101c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x94>
   1101c:	9801      	ldr	r0, [sp, #4]
   1101e:	f7fb fdb2 	bl	cb86 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha7a9542e2459a97dE>
   11022:	900e      	str	r0, [sp, #56]	; 0x38
   11024:	e7ff      	b.n	11026 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x9e>
   11026:	980e      	ldr	r0, [sp, #56]	; 0x38
   11028:	fab0 f180 	clz	r1, r0
   1102c:	0949      	lsrs	r1, r1, #5
   1102e:	2800      	cmp	r0, #0
   11030:	d101      	bne.n	11036 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xae>
   11032:	e7ff      	b.n	11034 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xac>
   11034:	e009      	b.n	1104a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xc2>
   11036:	980e      	ldr	r0, [sp, #56]	; 0x38
   11038:	901f      	str	r0, [sp, #124]	; 0x7c
   1103a:	9902      	ldr	r1, [sp, #8]
   1103c:	9000      	str	r0, [sp, #0]
   1103e:	4608      	mov	r0, r1
   11040:	9900      	ldr	r1, [sp, #0]
   11042:	f000 f8d4 	bl	111ee <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he4b6bba524de7333E>
   11046:	e00a      	b.n	1105e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xd6>
   11048:	defe      	udf	#254	; 0xfe
   1104a:	f003 f97f 	bl	1434c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
   1104e:	e7ff      	b.n	11050 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xc8>
   11050:	9802      	ldr	r0, [sp, #8]
   11052:	f7fb fd93 	bl	cb7c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>
   11056:	e7ff      	b.n	11058 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xd0>
   11058:	e7ff      	b.n	1105a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xd2>
   1105a:	e7ff      	b.n	1105c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xd4>
   1105c:	e7ba      	b.n	10fd4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x4c>
   1105e:	e7fc      	b.n	1105a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xd2>
   11060:	9816      	ldr	r0, [sp, #88]	; 0x58
   11062:	9917      	ldr	r1, [sp, #92]	; 0x5c
   11064:	9a18      	ldr	r2, [sp, #96]	; 0x60
   11066:	9215      	str	r2, [sp, #84]	; 0x54
   11068:	9114      	str	r1, [sp, #80]	; 0x50
   1106a:	9013      	str	r0, [sp, #76]	; 0x4c
   1106c:	2001      	movs	r0, #1
   1106e:	9012      	str	r0, [sp, #72]	; 0x48
   11070:	e7ff      	b.n	11072 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xea>
   11072:	9812      	ldr	r0, [sp, #72]	; 0x48
   11074:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11076:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11078:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1107a:	f8dd c00c 	ldr.w	ip, [sp, #12]
   1107e:	f8cc 3018 	str.w	r3, [ip, #24]
   11082:	f8cc 2014 	str.w	r2, [ip, #20]
   11086:	f8cc 1010 	str.w	r1, [ip, #16]
   1108a:	f8cc 000c 	str.w	r0, [ip, #12]
   1108e:	980a      	ldr	r0, [sp, #40]	; 0x28
   11090:	2801      	cmp	r0, #1
   11092:	d101      	bne.n	11098 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x110>
   11094:	e7ff      	b.n	11096 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x10e>
   11096:	e77d      	b.n	10f94 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xc>
   11098:	e7fd      	b.n	11096 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x10e>

0001109a <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h5eca9088e433250cE>:
   1109a:	b5b0      	push	{r4, r5, r7, lr}
   1109c:	b090      	sub	sp, #64	; 0x40
   1109e:	680a      	ldr	r2, [r1, #0]
   110a0:	684b      	ldr	r3, [r1, #4]
   110a2:	6889      	ldr	r1, [r1, #8]
   110a4:	910f      	str	r1, [sp, #60]	; 0x3c
   110a6:	930e      	str	r3, [sp, #56]	; 0x38
   110a8:	920d      	str	r2, [sp, #52]	; 0x34
   110aa:	a902      	add	r1, sp, #8
   110ac:	aa0d      	add	r2, sp, #52	; 0x34
   110ae:	9001      	str	r0, [sp, #4]
   110b0:	4608      	mov	r0, r1
   110b2:	4611      	mov	r1, r2
   110b4:	f000 f80d 	bl	110d2 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17hd9b164ddc3c07b23E>
   110b8:	e7ff      	b.n	110ba <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h5eca9088e433250cE+0x20>
   110ba:	a802      	add	r0, sp, #8
   110bc:	9901      	ldr	r1, [sp, #4]
   110be:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
   110c2:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
   110c6:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
   110ca:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
   110ce:	b010      	add	sp, #64	; 0x40
   110d0:	bdb0      	pop	{r4, r5, r7, pc}

000110d2 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17hd9b164ddc3c07b23E>:
   110d2:	b08b      	sub	sp, #44	; 0x2c
   110d4:	680a      	ldr	r2, [r1, #0]
   110d6:	684b      	ldr	r3, [r1, #4]
   110d8:	6889      	ldr	r1, [r1, #8]
   110da:	9102      	str	r1, [sp, #8]
   110dc:	9301      	str	r3, [sp, #4]
   110de:	9200      	str	r2, [sp, #0]
   110e0:	2100      	movs	r1, #0
   110e2:	9103      	str	r1, [sp, #12]
   110e4:	9107      	str	r1, [sp, #28]
   110e6:	9900      	ldr	r1, [sp, #0]
   110e8:	9a01      	ldr	r2, [sp, #4]
   110ea:	9b02      	ldr	r3, [sp, #8]
   110ec:	6083      	str	r3, [r0, #8]
   110ee:	6042      	str	r2, [r0, #4]
   110f0:	6001      	str	r1, [r0, #0]
   110f2:	9903      	ldr	r1, [sp, #12]
   110f4:	9a04      	ldr	r2, [sp, #16]
   110f6:	9b05      	ldr	r3, [sp, #20]
   110f8:	f8dd c018 	ldr.w	ip, [sp, #24]
   110fc:	f8c0 c018 	str.w	ip, [r0, #24]
   11100:	6143      	str	r3, [r0, #20]
   11102:	6102      	str	r2, [r0, #16]
   11104:	60c1      	str	r1, [r0, #12]
   11106:	9907      	ldr	r1, [sp, #28]
   11108:	9a08      	ldr	r2, [sp, #32]
   1110a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1110c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   11110:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   11114:	6243      	str	r3, [r0, #36]	; 0x24
   11116:	6202      	str	r2, [r0, #32]
   11118:	61c1      	str	r1, [r0, #28]
   1111a:	b00b      	add	sp, #44	; 0x2c
   1111c:	4770      	bx	lr

0001111e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdaeeeffeba3c3f70E>:
   1111e:	b5b0      	push	{r4, r5, r7, lr}
   11120:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
   11124:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
   11128:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   1112c:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   11130:	bdb0      	pop	{r4, r5, r7, pc}

00011132 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>:
   11132:	b580      	push	{r7, lr}
   11134:	b084      	sub	sp, #16
   11136:	4601      	mov	r1, r0
   11138:	f88d 000f 	strb.w	r0, [sp, #15]
   1113c:	9102      	str	r1, [sp, #8]
   1113e:	f005 faf2 	bl	16726 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>
   11142:	9001      	str	r0, [sp, #4]
   11144:	e7ff      	b.n	11146 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E+0x14>
   11146:	9801      	ldr	r0, [sp, #4]
   11148:	b004      	add	sp, #16
   1114a:	bd80      	pop	{r7, pc}

0001114c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>:
   1114c:	b580      	push	{r7, lr}
   1114e:	b086      	sub	sp, #24
   11150:	460a      	mov	r2, r1
   11152:	9004      	str	r0, [sp, #16]
   11154:	f88d 1017 	strb.w	r1, [sp, #23]
   11158:	9203      	str	r2, [sp, #12]
   1115a:	f000 fe3f 	bl	11ddc <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   1115e:	9002      	str	r0, [sp, #8]
   11160:	e7ff      	b.n	11162 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x16>
   11162:	9802      	ldr	r0, [sp, #8]
   11164:	9903      	ldr	r1, [sp, #12]
   11166:	f000 fe51 	bl	11e0c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   1116a:	9001      	str	r0, [sp, #4]
   1116c:	e7ff      	b.n	1116e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x22>
   1116e:	9801      	ldr	r0, [sp, #4]
   11170:	b006      	add	sp, #24
   11172:	bd80      	pop	{r7, pc}

00011174 <_ZN4core4iter6traits8iterator8Iterator7flatten17h1299c8c4daf1c93cE>:
   11174:	b580      	push	{r7, lr}
   11176:	b084      	sub	sp, #16
   11178:	680a      	ldr	r2, [r1, #0]
   1117a:	684b      	ldr	r3, [r1, #4]
   1117c:	6889      	ldr	r1, [r1, #8]
   1117e:	9103      	str	r1, [sp, #12]
   11180:	9302      	str	r3, [sp, #8]
   11182:	9201      	str	r2, [sp, #4]
   11184:	a901      	add	r1, sp, #4
   11186:	f7ff ff88 	bl	1109a <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h5eca9088e433250cE>
   1118a:	e7ff      	b.n	1118c <_ZN4core4iter6traits8iterator8Iterator7flatten17h1299c8c4daf1c93cE+0x18>
   1118c:	b004      	add	sp, #16
   1118e:	bd80      	pop	{r7, pc}

00011190 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17had576ea3abe2661aE>:
   11190:	b083      	sub	sp, #12
   11192:	9100      	str	r1, [sp, #0]
   11194:	9201      	str	r2, [sp, #4]
   11196:	9302      	str	r3, [sp, #8]
   11198:	6001      	str	r1, [r0, #0]
   1119a:	6042      	str	r2, [r0, #4]
   1119c:	6083      	str	r3, [r0, #8]
   1119e:	b003      	add	sp, #12
   111a0:	4770      	bx	lr

000111a2 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17he3a44d3ea8f47cacE>:
   111a2:	b083      	sub	sp, #12
   111a4:	9100      	str	r1, [sp, #0]
   111a6:	9201      	str	r2, [sp, #4]
   111a8:	9302      	str	r3, [sp, #8]
   111aa:	6001      	str	r1, [r0, #0]
   111ac:	6042      	str	r2, [r0, #4]
   111ae:	6083      	str	r3, [r0, #8]
   111b0:	b003      	add	sp, #12
   111b2:	4770      	bx	lr

000111b4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcc80626d7c50dc19E>:
   111b4:	680a      	ldr	r2, [r1, #0]
   111b6:	684b      	ldr	r3, [r1, #4]
   111b8:	6889      	ldr	r1, [r1, #8]
   111ba:	6081      	str	r1, [r0, #8]
   111bc:	6043      	str	r3, [r0, #4]
   111be:	6002      	str	r2, [r0, #0]
   111c0:	4770      	bx	lr

000111c2 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2feea8e9eaacbdd0E>:
   111c2:	b580      	push	{r7, lr}
   111c4:	b086      	sub	sp, #24
   111c6:	9105      	str	r1, [sp, #20]
   111c8:	9004      	str	r0, [sp, #16]
   111ca:	4608      	mov	r0, r1
   111cc:	9103      	str	r1, [sp, #12]
   111ce:	f000 fd1d 	bl	11c0c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   111d2:	9002      	str	r0, [sp, #8]
   111d4:	9101      	str	r1, [sp, #4]
   111d6:	e7ff      	b.n	111d8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2feea8e9eaacbdd0E+0x16>
   111d8:	9803      	ldr	r0, [sp, #12]
   111da:	f100 0308 	add.w	r3, r0, #8
   111de:	9804      	ldr	r0, [sp, #16]
   111e0:	9902      	ldr	r1, [sp, #8]
   111e2:	9a01      	ldr	r2, [sp, #4]
   111e4:	f7fb fbbc 	bl	c960 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE>
   111e8:	e7ff      	b.n	111ea <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2feea8e9eaacbdd0E+0x28>
   111ea:	b006      	add	sp, #24
   111ec:	bd80      	pop	{r7, pc}

000111ee <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he4b6bba524de7333E>:
   111ee:	b580      	push	{r7, lr}
   111f0:	b086      	sub	sp, #24
   111f2:	9105      	str	r1, [sp, #20]
   111f4:	9004      	str	r0, [sp, #16]
   111f6:	4608      	mov	r0, r1
   111f8:	9103      	str	r1, [sp, #12]
   111fa:	f000 fd07 	bl	11c0c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   111fe:	9002      	str	r0, [sp, #8]
   11200:	9101      	str	r1, [sp, #4]
   11202:	e7ff      	b.n	11204 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he4b6bba524de7333E+0x16>
   11204:	9803      	ldr	r0, [sp, #12]
   11206:	f100 0308 	add.w	r3, r0, #8
   1120a:	9804      	ldr	r0, [sp, #16]
   1120c:	9902      	ldr	r1, [sp, #8]
   1120e:	9a01      	ldr	r2, [sp, #4]
   11210:	f7fb fbf4 	bl	c9fc <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE>
   11214:	e7ff      	b.n	11216 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he4b6bba524de7333E+0x28>
   11216:	b006      	add	sp, #24
   11218:	bd80      	pop	{r7, pc}

0001121a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>:
   1121a:	b580      	push	{r7, lr}
   1121c:	b086      	sub	sp, #24
   1121e:	9005      	str	r0, [sp, #20]
   11220:	2100      	movs	r1, #0
   11222:	f88d 1013 	strb.w	r1, [sp, #19]
   11226:	1c41      	adds	r1, r0, #1
   11228:	9002      	str	r0, [sp, #8]
   1122a:	f005 faaa 	bl	16782 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>
   1122e:	9001      	str	r0, [sp, #4]
   11230:	e7ff      	b.n	11232 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x18>
   11232:	9801      	ldr	r0, [sp, #4]
   11234:	07c1      	lsls	r1, r0, #31
   11236:	2900      	cmp	r1, #0
   11238:	d104      	bne.n	11244 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x2a>
   1123a:	e7ff      	b.n	1123c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x22>
   1123c:	2000      	movs	r0, #0
   1123e:	f88d 000c 	strb.w	r0, [sp, #12]
   11242:	e02c      	b.n	1129e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   11244:	2001      	movs	r0, #1
   11246:	f88d 0013 	strb.w	r0, [sp, #19]
   1124a:	9902      	ldr	r1, [sp, #8]
   1124c:	9000      	str	r0, [sp, #0]
   1124e:	4608      	mov	r0, r1
   11250:	9900      	ldr	r1, [sp, #0]
   11252:	f005 faa2 	bl	1679a <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>
   11256:	f88d 1011 	strb.w	r1, [sp, #17]
   1125a:	f88d 0010 	strb.w	r0, [sp, #16]
   1125e:	e7ff      	b.n	11260 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x46>
   11260:	f89d 0010 	ldrb.w	r0, [sp, #16]
   11264:	07c0      	lsls	r0, r0, #31
   11266:	2800      	cmp	r0, #0
   11268:	d104      	bne.n	11274 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x5a>
   1126a:	e7ff      	b.n	1126c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x52>
   1126c:	2000      	movs	r0, #0
   1126e:	f88d 000c 	strb.w	r0, [sp, #12]
   11272:	e029      	b.n	112c8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   11274:	2000      	movs	r0, #0
   11276:	f88d 0013 	strb.w	r0, [sp, #19]
   1127a:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1127e:	f88d 0012 	strb.w	r0, [sp, #18]
   11282:	f10d 0012 	add.w	r0, sp, #18
   11286:	9902      	ldr	r1, [sp, #8]
   11288:	f005 fa5b 	bl	16742 <_ZN4core3mem4swap17h206518364108b51fE>
   1128c:	e7ff      	b.n	1128e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x74>
   1128e:	f89d 0012 	ldrb.w	r0, [sp, #18]
   11292:	f88d 000d 	strb.w	r0, [sp, #13]
   11296:	2001      	movs	r0, #1
   11298:	f88d 000c 	strb.w	r0, [sp, #12]
   1129c:	e014      	b.n	112c8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   1129e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   112a2:	f89d 100d 	ldrb.w	r1, [sp, #13]
   112a6:	b006      	add	sp, #24
   112a8:	bd80      	pop	{r7, pc}
   112aa:	2000      	movs	r0, #0
   112ac:	f88d 0013 	strb.w	r0, [sp, #19]
   112b0:	e7f5      	b.n	1129e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   112b2:	f89d 0013 	ldrb.w	r0, [sp, #19]
   112b6:	07c0      	lsls	r0, r0, #31
   112b8:	2800      	cmp	r0, #0
   112ba:	d0f6      	beq.n	112aa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   112bc:	e7ff      	b.n	112be <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xa4>
   112be:	2000      	movs	r0, #0
   112c0:	f88d 0013 	strb.w	r0, [sp, #19]
   112c4:	e7f1      	b.n	112aa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   112c6:	e7f0      	b.n	112aa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   112c8:	f89d 0010 	ldrb.w	r0, [sp, #16]
   112cc:	07c0      	lsls	r0, r0, #31
   112ce:	2800      	cmp	r0, #0
   112d0:	d1ef      	bne.n	112b2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x98>
   112d2:	e7f8      	b.n	112c6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xac>

000112d4 <_ZN4core4iter6traits8iterator8Iterator3map17h2bffa2f7235b9482E>:
   112d4:	b580      	push	{r7, lr}
   112d6:	b084      	sub	sp, #16
   112d8:	9101      	str	r1, [sp, #4]
   112da:	9202      	str	r2, [sp, #8]
   112dc:	9303      	str	r3, [sp, #12]
   112de:	f7ff ff60 	bl	111a2 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17he3a44d3ea8f47cacE>
   112e2:	e7ff      	b.n	112e4 <_ZN4core4iter6traits8iterator8Iterator3map17h2bffa2f7235b9482E+0x10>
   112e4:	b004      	add	sp, #16
   112e6:	bd80      	pop	{r7, pc}

000112e8 <_ZN4core4iter6traits8iterator8Iterator3map17h6d8406b1bb96c52eE>:
   112e8:	b580      	push	{r7, lr}
   112ea:	b084      	sub	sp, #16
   112ec:	9101      	str	r1, [sp, #4]
   112ee:	9202      	str	r2, [sp, #8]
   112f0:	9303      	str	r3, [sp, #12]
   112f2:	f7ff ff4d 	bl	11190 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17had576ea3abe2661aE>
   112f6:	e7ff      	b.n	112f8 <_ZN4core4iter6traits8iterator8Iterator3map17h6d8406b1bb96c52eE+0x10>
   112f8:	b004      	add	sp, #16
   112fa:	bd80      	pop	{r7, pc}

000112fc <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>:
   112fc:	b081      	sub	sp, #4
   112fe:	460a      	mov	r2, r1
   11300:	4603      	mov	r3, r0
   11302:	f88d 0000 	strb.w	r0, [sp]
   11306:	f88d 1001 	strb.w	r1, [sp, #1]
   1130a:	b001      	add	sp, #4
   1130c:	4770      	bx	lr

0001130e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h16ab7cdbe914a27fE>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   1130e:	b580      	push	{r7, lr}
   11310:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   11312:	f005 fa1f 	bl	16754 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hc6fa01816813026eE>
   11316:	9003      	str	r0, [sp, #12]
   11318:	e7ff      	b.n	1131a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h16ab7cdbe914a27fE+0xc>
   1131a:	9803      	ldr	r0, [sp, #12]
   1131c:	f005 fa0a 	bl	16734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h0faaf188ff940782E>
   11320:	9002      	str	r0, [sp, #8]
   11322:	e7ff      	b.n	11324 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h16ab7cdbe914a27fE+0x16>
   11324:	f000 f80b 	bl	1133e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h3d28273d6dd7c774E>
   11328:	9001      	str	r0, [sp, #4]
   1132a:	e7ff      	b.n	1132c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h16ab7cdbe914a27fE+0x1e>
   1132c:	9801      	ldr	r0, [sp, #4]
   1132e:	0041      	lsls	r1, r0, #1
   11330:	9100      	str	r1, [sp, #0]
   11332:	e7ff      	b.n	11334 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h16ab7cdbe914a27fE+0x26>
   11334:	9802      	ldr	r0, [sp, #8]
   11336:	9900      	ldr	r1, [sp, #0]
   11338:	4308      	orrs	r0, r1
    }
   1133a:	b004      	add	sp, #16
   1133c:	bd80      	pop	{r7, pc}

0001133e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h3d28273d6dd7c774E>:
    fn to_usize() -> usize {
   1133e:	b580      	push	{r7, lr}
   11340:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   11342:	f005 fa07 	bl	16754 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hc6fa01816813026eE>
   11346:	9003      	str	r0, [sp, #12]
   11348:	e7ff      	b.n	1134a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h3d28273d6dd7c774E+0xc>
   1134a:	9803      	ldr	r0, [sp, #12]
   1134c:	f005 f9f2 	bl	16734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h0faaf188ff940782E>
   11350:	9002      	str	r0, [sp, #8]
   11352:	e7ff      	b.n	11354 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h3d28273d6dd7c774E+0x16>
   11354:	f003 ffce 	bl	152f4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>
   11358:	9001      	str	r0, [sp, #4]
   1135a:	e7ff      	b.n	1135c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h3d28273d6dd7c774E+0x1e>
   1135c:	9801      	ldr	r0, [sp, #4]
   1135e:	0041      	lsls	r1, r0, #1
   11360:	9100      	str	r1, [sp, #0]
   11362:	e7ff      	b.n	11364 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h3d28273d6dd7c774E+0x26>
   11364:	9802      	ldr	r0, [sp, #8]
   11366:	9900      	ldr	r1, [sp, #0]
   11368:	4308      	orrs	r0, r1
    }
   1136a:	b004      	add	sp, #16
   1136c:	bd80      	pop	{r7, pc}

0001136e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   1136e:	b084      	sub	sp, #16
   11370:	9001      	str	r0, [sp, #4]
   11372:	9102      	str	r1, [sp, #8]
   11374:	4408      	add	r0, r1
   11376:	9003      	str	r0, [sp, #12]
   11378:	9803      	ldr	r0, [sp, #12]
   1137a:	9000      	str	r0, [sp, #0]
   1137c:	e7ff      	b.n	1137e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   1137e:	9800      	ldr	r0, [sp, #0]
   11380:	b004      	add	sp, #16
   11382:	4770      	bx	lr

00011384 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   11384:	b082      	sub	sp, #8
   11386:	9001      	str	r0, [sp, #4]
   11388:	9000      	str	r0, [sp, #0]
   1138a:	e7ff      	b.n	1138c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   1138c:	9800      	ldr	r0, [sp, #0]
   1138e:	fab0 f180 	clz	r1, r0
   11392:	0948      	lsrs	r0, r1, #5
   11394:	b002      	add	sp, #8
   11396:	4770      	bx	lr

00011398 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   11398:	b082      	sub	sp, #8
   1139a:	9001      	str	r0, [sp, #4]
   1139c:	9000      	str	r0, [sp, #0]
   1139e:	9800      	ldr	r0, [sp, #0]
   113a0:	b002      	add	sp, #8
   113a2:	4770      	bx	lr

000113a4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   113a4:	b081      	sub	sp, #4
   113a6:	9000      	str	r0, [sp, #0]
   113a8:	b001      	add	sp, #4
   113aa:	4770      	bx	lr

000113ac <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   113ac:	b580      	push	{r7, lr}
   113ae:	b084      	sub	sp, #16
   113b0:	9002      	str	r0, [sp, #8]
   113b2:	9103      	str	r1, [sp, #12]
   113b4:	f000 f805 	bl	113c2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   113b8:	9001      	str	r0, [sp, #4]
   113ba:	e7ff      	b.n	113bc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   113bc:	9801      	ldr	r0, [sp, #4]
   113be:	b004      	add	sp, #16
   113c0:	bd80      	pop	{r7, pc}

000113c2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   113c2:	b084      	sub	sp, #16
   113c4:	9001      	str	r0, [sp, #4]
   113c6:	9102      	str	r1, [sp, #8]
   113c8:	4408      	add	r0, r1
   113ca:	9003      	str	r0, [sp, #12]
   113cc:	9803      	ldr	r0, [sp, #12]
   113ce:	9000      	str	r0, [sp, #0]
   113d0:	e7ff      	b.n	113d2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   113d2:	9800      	ldr	r0, [sp, #0]
   113d4:	b004      	add	sp, #16
   113d6:	4770      	bx	lr

000113d8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   113d8:	b082      	sub	sp, #8
   113da:	9001      	str	r0, [sp, #4]
   113dc:	9000      	str	r0, [sp, #0]
   113de:	e7ff      	b.n	113e0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   113e0:	9800      	ldr	r0, [sp, #0]
   113e2:	fab0 f180 	clz	r1, r0
   113e6:	0948      	lsrs	r0, r1, #5
   113e8:	b002      	add	sp, #8
   113ea:	4770      	bx	lr

000113ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   113ec:	b580      	push	{r7, lr}
   113ee:	b090      	sub	sp, #64	; 0x40
   113f0:	900c      	str	r0, [sp, #48]	; 0x30
   113f2:	910d      	str	r1, [sp, #52]	; 0x34
   113f4:	9007      	str	r0, [sp, #28]
   113f6:	9106      	str	r1, [sp, #24]
   113f8:	f001 f894 	bl	12524 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   113fc:	4601      	mov	r1, r0
   113fe:	900e      	str	r0, [sp, #56]	; 0x38
   11400:	9105      	str	r1, [sp, #20]
   11402:	e7ff      	b.n	11404 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   11404:	9805      	ldr	r0, [sp, #20]
   11406:	f7ff ffe7 	bl	113d8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   1140a:	e7ff      	b.n	1140c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   1140c:	e7ff      	b.n	1140e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   1140e:	2001      	movs	r0, #1
   11410:	900f      	str	r0, [sp, #60]	; 0x3c
   11412:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11414:	9004      	str	r0, [sp, #16]
   11416:	e7ff      	b.n	11418 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   11418:	9804      	ldr	r0, [sp, #16]
   1141a:	2800      	cmp	r0, #0
   1141c:	d006      	beq.n	1142c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   1141e:	e7ff      	b.n	11420 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   11420:	9807      	ldr	r0, [sp, #28]
   11422:	9906      	ldr	r1, [sp, #24]
   11424:	f001 f876 	bl	12514 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   11428:	9003      	str	r0, [sp, #12]
   1142a:	e00e      	b.n	1144a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   1142c:	9807      	ldr	r0, [sp, #28]
   1142e:	9906      	ldr	r1, [sp, #24]
   11430:	f001 f870 	bl	12514 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   11434:	9002      	str	r0, [sp, #8]
   11436:	e7ff      	b.n	11438 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   11438:	9805      	ldr	r0, [sp, #20]
   1143a:	9902      	ldr	r1, [sp, #8]
   1143c:	f7ff ffb6 	bl	113ac <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   11440:	9001      	str	r0, [sp, #4]
   11442:	e7ff      	b.n	11444 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   11444:	9801      	ldr	r0, [sp, #4]
   11446:	900a      	str	r0, [sp, #40]	; 0x28
   11448:	e006      	b.n	11458 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   1144a:	9805      	ldr	r0, [sp, #20]
   1144c:	9903      	ldr	r1, [sp, #12]
   1144e:	f001 f83e 	bl	124ce <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   11452:	900a      	str	r0, [sp, #40]	; 0x28
   11454:	e7ff      	b.n	11456 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   11456:	e7ff      	b.n	11458 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   11458:	9805      	ldr	r0, [sp, #20]
   1145a:	f7ff ff9d 	bl	11398 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   1145e:	9000      	str	r0, [sp, #0]
   11460:	e7ff      	b.n	11462 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   11462:	980a      	ldr	r0, [sp, #40]	; 0x28
   11464:	9900      	ldr	r1, [sp, #0]
   11466:	9108      	str	r1, [sp, #32]
   11468:	9009      	str	r0, [sp, #36]	; 0x24
   1146a:	9808      	ldr	r0, [sp, #32]
   1146c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1146e:	b010      	add	sp, #64	; 0x40
   11470:	bd80      	pop	{r7, pc}

00011472 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   11472:	b081      	sub	sp, #4
   11474:	b001      	add	sp, #4
   11476:	4770      	bx	lr

00011478 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   11478:	b580      	push	{r7, lr}
   1147a:	b08e      	sub	sp, #56	; 0x38
   1147c:	9007      	str	r0, [sp, #28]
   1147e:	6801      	ldr	r1, [r0, #0]
   11480:	9005      	str	r0, [sp, #20]
   11482:	4608      	mov	r0, r1
   11484:	f7ff ff8e 	bl	113a4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11488:	9004      	str	r0, [sp, #16]
   1148a:	e7ff      	b.n	1148c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   1148c:	9804      	ldr	r0, [sp, #16]
   1148e:	f7ff ff79 	bl	11384 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   11492:	e7ff      	b.n	11494 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   11494:	e7ff      	b.n	11496 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   11496:	2001      	movs	r0, #1
   11498:	9008      	str	r0, [sp, #32]
   1149a:	9808      	ldr	r0, [sp, #32]
   1149c:	9003      	str	r0, [sp, #12]
   1149e:	e7ff      	b.n	114a0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   114a0:	9803      	ldr	r0, [sp, #12]
   114a2:	2800      	cmp	r0, #0
   114a4:	d007      	beq.n	114b6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   114a6:	e7ff      	b.n	114a8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   114a8:	9805      	ldr	r0, [sp, #20]
   114aa:	6840      	ldr	r0, [r0, #4]
   114ac:	f7ff ff94 	bl	113d8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   114b0:	e7ff      	b.n	114b2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   114b2:	e7ff      	b.n	114b4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   114b4:	e7ff      	b.n	114b6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   114b6:	9805      	ldr	r0, [sp, #20]
   114b8:	6800      	ldr	r0, [r0, #0]
   114ba:	f7ff ff73 	bl	113a4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   114be:	9002      	str	r0, [sp, #8]
   114c0:	e7ff      	b.n	114c2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   114c2:	9805      	ldr	r0, [sp, #20]
   114c4:	6841      	ldr	r1, [r0, #4]
   114c6:	9a02      	ldr	r2, [sp, #8]
   114c8:	428a      	cmp	r2, r1
   114ca:	d02e      	beq.n	1152a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   114cc:	e7ff      	b.n	114ce <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   114ce:	9805      	ldr	r0, [sp, #20]
   114d0:	900a      	str	r0, [sp, #40]	; 0x28
   114d2:	2101      	movs	r1, #1
   114d4:	910b      	str	r1, [sp, #44]	; 0x2c
   114d6:	910d      	str	r1, [sp, #52]	; 0x34
   114d8:	990d      	ldr	r1, [sp, #52]	; 0x34
   114da:	2900      	cmp	r1, #0
   114dc:	d015      	beq.n	1150a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   114de:	e7ff      	b.n	114e0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   114e0:	9805      	ldr	r0, [sp, #20]
   114e2:	6800      	ldr	r0, [r0, #0]
   114e4:	f7ff ff5e 	bl	113a4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   114e8:	900c      	str	r0, [sp, #48]	; 0x30
   114ea:	9905      	ldr	r1, [sp, #20]
   114ec:	680a      	ldr	r2, [r1, #0]
   114ee:	9001      	str	r0, [sp, #4]
   114f0:	4610      	mov	r0, r2
   114f2:	f7ff ff57 	bl	113a4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   114f6:	2101      	movs	r1, #1
   114f8:	f7ff ff39 	bl	1136e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   114fc:	f7ff ff4c 	bl	11398 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   11500:	9905      	ldr	r1, [sp, #20]
   11502:	6008      	str	r0, [r1, #0]
   11504:	9801      	ldr	r0, [sp, #4]
   11506:	9009      	str	r0, [sp, #36]	; 0x24
   11508:	e00c      	b.n	11524 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   1150a:	9805      	ldr	r0, [sp, #20]
   1150c:	6840      	ldr	r0, [r0, #4]
   1150e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11512:	f7ff ff56 	bl	113c2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   11516:	9905      	ldr	r1, [sp, #20]
   11518:	6048      	str	r0, [r1, #4]
   1151a:	6808      	ldr	r0, [r1, #0]
   1151c:	f7ff ff42 	bl	113a4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11520:	9009      	str	r0, [sp, #36]	; 0x24
   11522:	e7ff      	b.n	11524 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   11524:	9809      	ldr	r0, [sp, #36]	; 0x24
   11526:	9000      	str	r0, [sp, #0]
   11528:	e002      	b.n	11530 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   1152a:	2000      	movs	r0, #0
   1152c:	9006      	str	r0, [sp, #24]
   1152e:	e002      	b.n	11536 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   11530:	9800      	ldr	r0, [sp, #0]
   11532:	9006      	str	r0, [sp, #24]
   11534:	e7ff      	b.n	11536 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   11536:	9806      	ldr	r0, [sp, #24]
   11538:	b00e      	add	sp, #56	; 0x38
   1153a:	bd80      	pop	{r7, pc}

0001153c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
   1153c:	b580      	push	{r7, lr}
   1153e:	b084      	sub	sp, #16
   11540:	9002      	str	r0, [sp, #8]
   11542:	9103      	str	r1, [sp, #12]
   11544:	6800      	ldr	r0, [r0, #0]
   11546:	f000 f88c 	bl	11662 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
   1154a:	9001      	str	r0, [sp, #4]
   1154c:	e7ff      	b.n	1154e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
   1154e:	9801      	ldr	r0, [sp, #4]
   11550:	f000 0001 	and.w	r0, r0, #1
   11554:	b004      	add	sp, #16
   11556:	bd80      	pop	{r7, pc}

00011558 <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>:
   11558:	b580      	push	{r7, lr}
   1155a:	b084      	sub	sp, #16
   1155c:	9002      	str	r0, [sp, #8]
   1155e:	9103      	str	r1, [sp, #12]
   11560:	f000 f827 	bl	115b2 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>
   11564:	9001      	str	r0, [sp, #4]
   11566:	e7ff      	b.n	11568 <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE+0x10>
   11568:	9801      	ldr	r0, [sp, #4]
   1156a:	b004      	add	sp, #16
   1156c:	bd80      	pop	{r7, pc}

0001156e <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>:
   1156e:	b085      	sub	sp, #20
   11570:	9003      	str	r0, [sp, #12]
   11572:	9104      	str	r1, [sp, #16]
   11574:	6802      	ldr	r2, [r0, #0]
   11576:	680b      	ldr	r3, [r1, #0]
   11578:	429a      	cmp	r2, r3
   1157a:	9101      	str	r1, [sp, #4]
   1157c:	9000      	str	r0, [sp, #0]
   1157e:	db07      	blt.n	11590 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x22>
   11580:	e7ff      	b.n	11582 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x14>
   11582:	9800      	ldr	r0, [sp, #0]
   11584:	6801      	ldr	r1, [r0, #0]
   11586:	9a01      	ldr	r2, [sp, #4]
   11588:	6813      	ldr	r3, [r2, #0]
   1158a:	4299      	cmp	r1, r3
   1158c:	d008      	beq.n	115a0 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x32>
   1158e:	e003      	b.n	11598 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x2a>
   11590:	20ff      	movs	r0, #255	; 0xff
   11592:	f88d 000b 	strb.w	r0, [sp, #11]
   11596:	e008      	b.n	115aa <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
   11598:	2001      	movs	r0, #1
   1159a:	f88d 000b 	strb.w	r0, [sp, #11]
   1159e:	e003      	b.n	115a8 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
   115a0:	2000      	movs	r0, #0
   115a2:	f88d 000b 	strb.w	r0, [sp, #11]
   115a6:	e7ff      	b.n	115a8 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
   115a8:	e7ff      	b.n	115aa <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
   115aa:	f89d 000b 	ldrb.w	r0, [sp, #11]
   115ae:	b005      	add	sp, #20
   115b0:	4770      	bx	lr

000115b2 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>:
   115b2:	b580      	push	{r7, lr}
   115b4:	b088      	sub	sp, #32
   115b6:	9000      	str	r0, [sp, #0]
   115b8:	9101      	str	r1, [sp, #4]
   115ba:	2000      	movs	r0, #0
   115bc:	f88d 001b 	strb.w	r0, [sp, #27]
   115c0:	f88d 001a 	strb.w	r0, [sp, #26]
   115c4:	2001      	movs	r0, #1
   115c6:	f88d 001b 	strb.w	r0, [sp, #27]
   115ca:	f88d 001a 	strb.w	r0, [sp, #26]
   115ce:	4668      	mov	r0, sp
   115d0:	9004      	str	r0, [sp, #16]
   115d2:	a801      	add	r0, sp, #4
   115d4:	9005      	str	r0, [sp, #20]
   115d6:	9804      	ldr	r0, [sp, #16]
   115d8:	9905      	ldr	r1, [sp, #20]
   115da:	f000 f895 	bl	11708 <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>
   115de:	f88d 000f 	strb.w	r0, [sp, #15]
   115e2:	e7ff      	b.n	115e4 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x32>
   115e4:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   115e8:	1c41      	adds	r1, r0, #1
   115ea:	2902      	cmp	r1, #2
   115ec:	d307      	bcc.n	115fe <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x4c>
   115ee:	e7ff      	b.n	115f0 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x3e>
   115f0:	2000      	movs	r0, #0
   115f2:	f88d 001b 	strb.w	r0, [sp, #27]
   115f6:	9800      	ldr	r0, [sp, #0]
   115f8:	9002      	str	r0, [sp, #8]
   115fa:	e006      	b.n	1160a <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
   115fc:	defe      	udf	#254	; 0xfe
   115fe:	2000      	movs	r0, #0
   11600:	f88d 001a 	strb.w	r0, [sp, #26]
   11604:	9801      	ldr	r0, [sp, #4]
   11606:	9002      	str	r0, [sp, #8]
   11608:	e7ff      	b.n	1160a <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
   1160a:	f89d 001a 	ldrb.w	r0, [sp, #26]
   1160e:	07c0      	lsls	r0, r0, #31
   11610:	2800      	cmp	r0, #0
   11612:	d109      	bne.n	11628 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x76>
   11614:	e7ff      	b.n	11616 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
   11616:	f89d 001b 	ldrb.w	r0, [sp, #27]
   1161a:	07c0      	lsls	r0, r0, #31
   1161c:	2800      	cmp	r0, #0
   1161e:	d107      	bne.n	11630 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x7e>
   11620:	e7ff      	b.n	11622 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>
   11622:	9802      	ldr	r0, [sp, #8]
   11624:	b008      	add	sp, #32
   11626:	bd80      	pop	{r7, pc}
   11628:	2000      	movs	r0, #0
   1162a:	f88d 001a 	strb.w	r0, [sp, #26]
   1162e:	e7f2      	b.n	11616 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
   11630:	2000      	movs	r0, #0
   11632:	f88d 001b 	strb.w	r0, [sp, #27]
   11636:	e7f4      	b.n	11622 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>

00011638 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>:
   11638:	b089      	sub	sp, #36	; 0x24
   1163a:	9005      	str	r0, [sp, #20]
   1163c:	9106      	str	r1, [sp, #24]
   1163e:	9107      	str	r1, [sp, #28]
   11640:	9907      	ldr	r1, [sp, #28]
   11642:	9002      	str	r0, [sp, #8]
   11644:	9101      	str	r1, [sp, #4]
   11646:	e7ff      	b.n	11648 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x10>
   11648:	9802      	ldr	r0, [sp, #8]
   1164a:	9008      	str	r0, [sp, #32]
   1164c:	9908      	ldr	r1, [sp, #32]
   1164e:	9100      	str	r1, [sp, #0]
   11650:	e7ff      	b.n	11652 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x1a>
   11652:	9800      	ldr	r0, [sp, #0]
   11654:	9003      	str	r0, [sp, #12]
   11656:	9901      	ldr	r1, [sp, #4]
   11658:	9104      	str	r1, [sp, #16]
   1165a:	9803      	ldr	r0, [sp, #12]
   1165c:	9904      	ldr	r1, [sp, #16]
   1165e:	b009      	add	sp, #36	; 0x24
   11660:	4770      	bx	lr

00011662 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
   11662:	b580      	push	{r7, lr}
   11664:	b088      	sub	sp, #32
   11666:	9006      	str	r0, [sp, #24]
   11668:	9107      	str	r1, [sp, #28]
   1166a:	9004      	str	r0, [sp, #16]
   1166c:	4608      	mov	r0, r1
   1166e:	9103      	str	r1, [sp, #12]
   11670:	f006 fccd 	bl	1800e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   11674:	9002      	str	r0, [sp, #8]
   11676:	e7ff      	b.n	11678 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
   11678:	9802      	ldr	r0, [sp, #8]
   1167a:	07c1      	lsls	r1, r0, #31
   1167c:	2900      	cmp	r1, #0
   1167e:	d105      	bne.n	1168c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
   11680:	e7ff      	b.n	11682 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
   11682:	9803      	ldr	r0, [sp, #12]
   11684:	f006 fcc7 	bl	18016 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   11688:	9001      	str	r0, [sp, #4]
   1168a:	e007      	b.n	1169c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
   1168c:	9804      	ldr	r0, [sp, #16]
   1168e:	9903      	ldr	r1, [sp, #12]
   11690:	f007 fae7 	bl	18c62 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   11694:	f88d 0017 	strb.w	r0, [sp, #23]
   11698:	e7ff      	b.n	1169a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
   1169a:	e015      	b.n	116c8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   1169c:	9801      	ldr	r0, [sp, #4]
   1169e:	07c1      	lsls	r1, r0, #31
   116a0:	2900      	cmp	r1, #0
   116a2:	d107      	bne.n	116b4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
   116a4:	e7ff      	b.n	116a6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
   116a6:	9804      	ldr	r0, [sp, #16]
   116a8:	9903      	ldr	r1, [sp, #12]
   116aa:	f007 fc55 	bl	18f58 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   116ae:	f88d 0017 	strb.w	r0, [sp, #23]
   116b2:	e007      	b.n	116c4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
   116b4:	9804      	ldr	r0, [sp, #16]
   116b6:	9903      	ldr	r1, [sp, #12]
   116b8:	f007 fb3e 	bl	18d38 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   116bc:	f88d 0017 	strb.w	r0, [sp, #23]
   116c0:	e7ff      	b.n	116c2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
   116c2:	e000      	b.n	116c6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   116c4:	e7ff      	b.n	116c6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   116c6:	e7ff      	b.n	116c8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   116c8:	f89d 0017 	ldrb.w	r0, [sp, #23]
   116cc:	b008      	add	sp, #32
   116ce:	bd80      	pop	{r7, pc}

000116d0 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>:
   116d0:	b580      	push	{r7, lr}
   116d2:	b086      	sub	sp, #24
   116d4:	f8dd c020 	ldr.w	ip, [sp, #32]
   116d8:	9102      	str	r1, [sp, #8]
   116da:	9203      	str	r2, [sp, #12]
   116dc:	9304      	str	r3, [sp, #16]
   116de:	f8cd c014 	str.w	ip, [sp, #20]
   116e2:	f04f 0e00 	mov.w	lr, #0
   116e6:	f8cd e004 	str.w	lr, [sp, #4]
   116ea:	f8cd e000 	str.w	lr, [sp]
   116ee:	f8cd e000 	str.w	lr, [sp]
   116f2:	6001      	str	r1, [r0, #0]
   116f4:	6042      	str	r2, [r0, #4]
   116f6:	9900      	ldr	r1, [sp, #0]
   116f8:	9a01      	ldr	r2, [sp, #4]
   116fa:	6081      	str	r1, [r0, #8]
   116fc:	60c2      	str	r2, [r0, #12]
   116fe:	6103      	str	r3, [r0, #16]
   11700:	f8c0 c014 	str.w	ip, [r0, #20]
   11704:	b006      	add	sp, #24
   11706:	bd80      	pop	{r7, pc}

00011708 <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>:
   11708:	b580      	push	{r7, lr}
   1170a:	b084      	sub	sp, #16
   1170c:	9001      	str	r0, [sp, #4]
   1170e:	9102      	str	r1, [sp, #8]
   11710:	9801      	ldr	r0, [sp, #4]
   11712:	9902      	ldr	r1, [sp, #8]
   11714:	f7ff ff2b 	bl	1156e <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>
   11718:	9000      	str	r0, [sp, #0]
   1171a:	e7ff      	b.n	1171c <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E+0x14>
   1171c:	9800      	ldr	r0, [sp, #0]
   1171e:	b004      	add	sp, #16
   11720:	bd80      	pop	{r7, pc}

00011722 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
   11722:	b084      	sub	sp, #16
   11724:	9002      	str	r0, [sp, #8]
   11726:	9103      	str	r1, [sp, #12]
            Coord(x, y)
   11728:	9000      	str	r0, [sp, #0]
   1172a:	9101      	str	r1, [sp, #4]
        }
   1172c:	9800      	ldr	r0, [sp, #0]
   1172e:	9901      	ldr	r1, [sp, #4]
   11730:	b004      	add	sp, #16
   11732:	4770      	bx	lr

00011734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>:
    }

    impl Index<usize> for Coord {
        type Output = CoordPart;

        fn index(&self, idx: usize) -> &CoordPart {
   11734:	b580      	push	{r7, lr}
   11736:	b096      	sub	sp, #88	; 0x58
   11738:	9109      	str	r1, [sp, #36]	; 0x24
   1173a:	9014      	str	r0, [sp, #80]	; 0x50
            match idx {
                0 => &self.0,
   1173c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1173e:	2900      	cmp	r1, #0
   11740:	9008      	str	r0, [sp, #32]
   11742:	9107      	str	r1, [sp, #28]
   11744:	d018      	beq.n	11778 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x44>
   11746:	e7ff      	b.n	11748 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x14>
   11748:	9807      	ldr	r0, [sp, #28]
   1174a:	2801      	cmp	r0, #1
   1174c:	d017      	beq.n	1177e <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x4a>
   1174e:	e7ff      	b.n	11750 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x1c>
                1 => &self.1,
                _ => panic!("Unreachable index {}", idx),
   11750:	f64f 5028 	movw	r0, #64808	; 0xfd28
   11754:	f2c0 0001 	movt	r0, #1
   11758:	6801      	ldr	r1, [r0, #0]
   1175a:	a809      	add	r0, sp, #36	; 0x24
   1175c:	9013      	str	r0, [sp, #76]	; 0x4c
   1175e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   11760:	9015      	str	r0, [sp, #84]	; 0x54
   11762:	f249 024d 	movw	r2, #36941	; 0x904d
   11766:	f2c0 0201 	movt	r2, #1
   1176a:	9106      	str	r1, [sp, #24]
   1176c:	4611      	mov	r1, r2
   1176e:	f7ff ff63 	bl	11638 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>
   11772:	9005      	str	r0, [sp, #20]
   11774:	9104      	str	r1, [sp, #16]
   11776:	e006      	b.n	11786 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x52>
                0 => &self.0,
   11778:	9808      	ldr	r0, [sp, #32]
   1177a:	900a      	str	r0, [sp, #40]	; 0x28
            match idx {
   1177c:	e020      	b.n	117c0 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                1 => &self.1,
   1177e:	9808      	ldr	r0, [sp, #32]
   11780:	1d01      	adds	r1, r0, #4
   11782:	910a      	str	r1, [sp, #40]	; 0x28
            match idx {
   11784:	e01c      	b.n	117c0 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                _ => panic!("Unreachable index {}", idx),
   11786:	9805      	ldr	r0, [sp, #20]
   11788:	9011      	str	r0, [sp, #68]	; 0x44
   1178a:	9904      	ldr	r1, [sp, #16]
   1178c:	9112      	str	r1, [sp, #72]	; 0x48
   1178e:	466a      	mov	r2, sp
   11790:	2301      	movs	r3, #1
   11792:	6013      	str	r3, [r2, #0]
   11794:	a80b      	add	r0, sp, #44	; 0x2c
   11796:	aa11      	add	r2, sp, #68	; 0x44
   11798:	9906      	ldr	r1, [sp, #24]
   1179a:	9203      	str	r2, [sp, #12]
   1179c:	461a      	mov	r2, r3
   1179e:	9b03      	ldr	r3, [sp, #12]
   117a0:	f7ff ff96 	bl	116d0 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>
   117a4:	e7ff      	b.n	117a6 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x72>
   117a6:	f64f 502c 	movw	r0, #64812	; 0xfd2c
   117aa:	f2c0 0001 	movt	r0, #1
   117ae:	f005 fd86 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   117b2:	9002      	str	r0, [sp, #8]
   117b4:	e7ff      	b.n	117b6 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x82>
   117b6:	a80b      	add	r0, sp, #44	; 0x2c
   117b8:	9902      	ldr	r1, [sp, #8]
   117ba:	f005 fdbd 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   117be:	defe      	udf	#254	; 0xfe
            match idx {
   117c0:	980a      	ldr	r0, [sp, #40]	; 0x28
            }
        }
   117c2:	b016      	add	sp, #88	; 0x58
   117c4:	bd80      	pop	{r7, pc}

000117c6 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>:
    /// #
    /// let coord = Coord::new(-5, 10);
    ///
    /// assert_eq!(coord.to_unsigned(), UnsignedCoord::new(0, 10));
    /// ```
    fn to_unsigned(self) -> UnsignedCoord {
   117c6:	b580      	push	{r7, lr}
   117c8:	b088      	sub	sp, #32
   117ca:	9006      	str	r0, [sp, #24]
   117cc:	9107      	str	r1, [sp, #28]
   117ce:	a806      	add	r0, sp, #24
   117d0:	2100      	movs	r1, #0
        UnsignedCoord::new(self[0].max(0) as u32, self[1].max(0) as u32)
   117d2:	f7ff ffaf 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   117d6:	9005      	str	r0, [sp, #20]
   117d8:	e7ff      	b.n	117da <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x14>
   117da:	9805      	ldr	r0, [sp, #20]
   117dc:	6800      	ldr	r0, [r0, #0]
   117de:	2100      	movs	r1, #0
   117e0:	f7ff feba 	bl	11558 <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
   117e4:	9004      	str	r0, [sp, #16]
   117e6:	e7ff      	b.n	117e8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x22>
   117e8:	a806      	add	r0, sp, #24
   117ea:	2101      	movs	r1, #1
   117ec:	f7ff ffa2 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   117f0:	9003      	str	r0, [sp, #12]
   117f2:	e7ff      	b.n	117f4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x2e>
   117f4:	9803      	ldr	r0, [sp, #12]
   117f6:	6800      	ldr	r0, [r0, #0]
   117f8:	2100      	movs	r1, #0
   117fa:	f7ff fead 	bl	11558 <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
   117fe:	9002      	str	r0, [sp, #8]
   11800:	e7ff      	b.n	11802 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x3c>
   11802:	9804      	ldr	r0, [sp, #16]
   11804:	9902      	ldr	r1, [sp, #8]
   11806:	f000 f84e 	bl	118a6 <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>
   1180a:	9001      	str	r0, [sp, #4]
   1180c:	9100      	str	r1, [sp, #0]
   1180e:	e7ff      	b.n	11810 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x4a>
    }
   11810:	9801      	ldr	r0, [sp, #4]
   11812:	9900      	ldr	r1, [sp, #0]
   11814:	b008      	add	sp, #32
   11816:	bd80      	pop	{r7, pc}

00011818 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
   11818:	b08b      	sub	sp, #44	; 0x2c
   1181a:	4601      	mov	r1, r0
   1181c:	f8ad 0020 	strh.w	r0, [sp, #32]
   11820:	0c00      	lsrs	r0, r0, #16
   11822:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11826:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   1182a:	f88d 001e 	strb.w	r0, [sp, #30]
   1182e:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   11832:	f8ad 001c 	strh.w	r0, [sp, #28]
   11836:	f89d 001c 	ldrb.w	r0, [sp, #28]
   1183a:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   1183e:	f89d 201d 	ldrb.w	r2, [sp, #29]
   11842:	4613      	mov	r3, r2
   11844:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   11848:	f89d 201e 	ldrb.w	r2, [sp, #30]
   1184c:	4694      	mov	ip, r2
   1184e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
   11852:	0200      	lsls	r0, r0, #8
   11854:	9306      	str	r3, [sp, #24]
   11856:	f8cd c014 	str.w	ip, [sp, #20]
   1185a:	9004      	str	r0, [sp, #16]
   1185c:	e7ff      	b.n	1185e <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
   1185e:	9804      	ldr	r0, [sp, #16]
   11860:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
   11864:	9a06      	ldr	r2, [sp, #24]
   11866:	b2d3      	uxtb	r3, r2
   11868:	00db      	lsls	r3, r3, #3
   1186a:	9103      	str	r1, [sp, #12]
   1186c:	9302      	str	r3, [sp, #8]
   1186e:	e7ff      	b.n	11870 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
   11870:	9802      	ldr	r0, [sp, #8]
   11872:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
   11876:	9a03      	ldr	r2, [sp, #12]
   11878:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
   1187a:	9b05      	ldr	r3, [sp, #20]
   1187c:	fa5f fc83 	uxtb.w	ip, r3
   11880:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   11884:	9101      	str	r1, [sp, #4]
   11886:	f8cd c000 	str.w	ip, [sp]
   1188a:	e7ff      	b.n	1188c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
   1188c:	9800      	ldr	r0, [sp, #0]
   1188e:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
   11892:	9a01      	ldr	r2, [sp, #4]
   11894:	4311      	orrs	r1, r2
   11896:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
   1189a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
   1189e:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   118a2:	b00b      	add	sp, #44	; 0x2c
   118a4:	4770      	bx	lr

000118a6 <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct UnsignedCoord(pub UnsignedCoordPart, pub UnsignedCoordPart);

    impl UnsignedCoord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: UnsignedCoordPart, y: UnsignedCoordPart) -> Self {
   118a6:	b084      	sub	sp, #16
   118a8:	9002      	str	r0, [sp, #8]
   118aa:	9103      	str	r1, [sp, #12]
            UnsignedCoord(x, y)
   118ac:	9000      	str	r0, [sp, #0]
   118ae:	9101      	str	r1, [sp, #4]
        }
   118b0:	9800      	ldr	r0, [sp, #0]
   118b2:	9901      	ldr	r1, [sp, #4]
   118b4:	b004      	add	sp, #16
   118b6:	4770      	bx	lr

000118b8 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
   118b8:	b580      	push	{r7, lr}
   118ba:	b088      	sub	sp, #32
   118bc:	9005      	str	r0, [sp, #20]
   118be:	9106      	str	r1, [sp, #24]
   118c0:	9003      	str	r0, [sp, #12]
   118c2:	4608      	mov	r0, r1
   118c4:	f000 fa21 	bl	11d0a <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
   118c8:	9004      	str	r0, [sp, #16]
   118ca:	e7ff      	b.n	118cc <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
   118cc:	9804      	ldr	r0, [sp, #16]
   118ce:	9007      	str	r0, [sp, #28]
   118d0:	9903      	ldr	r1, [sp, #12]
   118d2:	680a      	ldr	r2, [r1, #0]
   118d4:	9002      	str	r0, [sp, #8]
   118d6:	4610      	mov	r0, r2
   118d8:	9902      	ldr	r1, [sp, #8]
   118da:	f000 f837 	bl	1194c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
   118de:	9001      	str	r0, [sp, #4]
   118e0:	9100      	str	r1, [sp, #0]
   118e2:	e7ff      	b.n	118e4 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
   118e4:	9801      	ldr	r0, [sp, #4]
   118e6:	9900      	ldr	r1, [sp, #0]
   118e8:	b008      	add	sp, #32
   118ea:	bd80      	pop	{r7, pc}

000118ec <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
   118ec:	b580      	push	{r7, lr}
   118ee:	b084      	sub	sp, #16
   118f0:	9001      	str	r0, [sp, #4]
   118f2:	9102      	str	r1, [sp, #8]
   118f4:	9203      	str	r2, [sp, #12]
   118f6:	9000      	str	r0, [sp, #0]
   118f8:	4608      	mov	r0, r1
   118fa:	9900      	ldr	r1, [sp, #0]
   118fc:	f00c f8ba 	bl	1da74 <__aeabi_memcpy>
   11900:	e7ff      	b.n	11902 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
   11902:	b004      	add	sp, #16
   11904:	bd80      	pop	{r7, pc}

00011906 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
   11906:	b580      	push	{r7, lr}
   11908:	b084      	sub	sp, #16
   1190a:	9001      	str	r0, [sp, #4]
   1190c:	9102      	str	r1, [sp, #8]
   1190e:	9203      	str	r2, [sp, #12]
   11910:	0092      	lsls	r2, r2, #2
   11912:	9000      	str	r0, [sp, #0]
   11914:	4608      	mov	r0, r1
   11916:	9900      	ldr	r1, [sp, #0]
   11918:	f00c f8ac 	bl	1da74 <__aeabi_memcpy>
   1191c:	e7ff      	b.n	1191e <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
   1191e:	b004      	add	sp, #16
   11920:	bd80      	pop	{r7, pc}

00011922 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
   11922:	b082      	sub	sp, #8
   11924:	9000      	str	r0, [sp, #0]
   11926:	9101      	str	r1, [sp, #4]
   11928:	6800      	ldr	r0, [r0, #0]
   1192a:	6809      	ldr	r1, [r1, #0]
   1192c:	2200      	movs	r2, #0
   1192e:	4288      	cmp	r0, r1
   11930:	bf38      	it	cc
   11932:	2201      	movcc	r2, #1
   11934:	4610      	mov	r0, r2
   11936:	b002      	add	sp, #8
   11938:	4770      	bx	lr

0001193a <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
   1193a:	b580      	push	{r7, lr}
   1193c:	b082      	sub	sp, #8
   1193e:	9000      	str	r0, [sp, #0]
   11940:	9101      	str	r1, [sp, #4]
   11942:	f000 f85f 	bl	11a04 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
   11946:	e7ff      	b.n	11948 <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
   11948:	b002      	add	sp, #8
   1194a:	bd80      	pop	{r7, pc}

0001194c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
   1194c:	b580      	push	{r7, lr}
   1194e:	b088      	sub	sp, #32
   11950:	9004      	str	r0, [sp, #16]
   11952:	9105      	str	r1, [sp, #20]
   11954:	f000 f819 	bl	1198a <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
   11958:	9001      	str	r0, [sp, #4]
   1195a:	9100      	str	r1, [sp, #0]
   1195c:	e7ff      	b.n	1195e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
   1195e:	9801      	ldr	r0, [sp, #4]
   11960:	9006      	str	r0, [sp, #24]
   11962:	9900      	ldr	r1, [sp, #0]
   11964:	f001 0201 	and.w	r2, r1, #1
   11968:	f88d 201f 	strb.w	r2, [sp, #31]
   1196c:	2a00      	cmp	r2, #0
   1196e:	d105      	bne.n	1197c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
   11970:	e7ff      	b.n	11972 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
   11972:	9801      	ldr	r0, [sp, #4]
   11974:	9003      	str	r0, [sp, #12]
   11976:	2101      	movs	r1, #1
   11978:	9102      	str	r1, [sp, #8]
   1197a:	e002      	b.n	11982 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   1197c:	2000      	movs	r0, #0
   1197e:	9002      	str	r0, [sp, #8]
   11980:	e7ff      	b.n	11982 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   11982:	9802      	ldr	r0, [sp, #8]
   11984:	9903      	ldr	r1, [sp, #12]
   11986:	b008      	add	sp, #32
   11988:	bd80      	pop	{r7, pc}

0001198a <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
   1198a:	b08a      	sub	sp, #40	; 0x28
   1198c:	9004      	str	r0, [sp, #16]
   1198e:	9105      	str	r1, [sp, #20]
   11990:	1840      	adds	r0, r0, r1
   11992:	f04f 0100 	mov.w	r1, #0
   11996:	f141 0100 	adc.w	r1, r1, #0
   1199a:	9006      	str	r0, [sp, #24]
   1199c:	f88d 101c 	strb.w	r1, [sp, #28]
   119a0:	9806      	ldr	r0, [sp, #24]
   119a2:	f89d 101c 	ldrb.w	r1, [sp, #28]
   119a6:	9001      	str	r0, [sp, #4]
   119a8:	9100      	str	r1, [sp, #0]
   119aa:	e7ff      	b.n	119ac <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
   119ac:	9801      	ldr	r0, [sp, #4]
   119ae:	9008      	str	r0, [sp, #32]
   119b0:	9900      	ldr	r1, [sp, #0]
   119b2:	f001 0201 	and.w	r2, r1, #1
   119b6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   119ba:	9002      	str	r0, [sp, #8]
   119bc:	f88d 200c 	strb.w	r2, [sp, #12]
   119c0:	9802      	ldr	r0, [sp, #8]
   119c2:	f89d 100c 	ldrb.w	r1, [sp, #12]
   119c6:	b00a      	add	sp, #40	; 0x28
   119c8:	4770      	bx	lr

000119ca <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
   119ca:	b580      	push	{r7, lr}
   119cc:	b08c      	sub	sp, #48	; 0x30
   119ce:	9005      	str	r0, [sp, #20]
   119d0:	9106      	str	r1, [sp, #24]
   119d2:	9207      	str	r2, [sp, #28]
   119d4:	4603      	mov	r3, r0
   119d6:	9008      	str	r0, [sp, #32]
   119d8:	4608      	mov	r0, r1
   119da:	9109      	str	r1, [sp, #36]	; 0x24
   119dc:	2104      	movs	r1, #4
   119de:	910b      	str	r1, [sp, #44]	; 0x2c
   119e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   119e2:	9204      	str	r2, [sp, #16]
   119e4:	9303      	str	r3, [sp, #12]
   119e6:	9002      	str	r0, [sp, #8]
   119e8:	9101      	str	r1, [sp, #4]
   119ea:	e7ff      	b.n	119ec <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
   119ec:	9801      	ldr	r0, [sp, #4]
   119ee:	9904      	ldr	r1, [sp, #16]
   119f0:	fb00 f201 	mul.w	r2, r0, r1
   119f4:	920a      	str	r2, [sp, #40]	; 0x28
   119f6:	9803      	ldr	r0, [sp, #12]
   119f8:	9902      	ldr	r1, [sp, #8]
   119fa:	f000 f82e 	bl	11a5a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
   119fe:	e7ff      	b.n	11a00 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
   11a00:	b00c      	add	sp, #48	; 0x30
   11a02:	bd80      	pop	{r7, pc}

00011a04 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
   11a04:	b580      	push	{r7, lr}
   11a06:	b088      	sub	sp, #32
   11a08:	9004      	str	r0, [sp, #16]
   11a0a:	9105      	str	r1, [sp, #20]
   11a0c:	2204      	movs	r2, #4
   11a0e:	9207      	str	r2, [sp, #28]
   11a10:	9a07      	ldr	r2, [sp, #28]
   11a12:	9103      	str	r1, [sp, #12]
   11a14:	9002      	str	r0, [sp, #8]
   11a16:	9201      	str	r2, [sp, #4]
   11a18:	e7ff      	b.n	11a1a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
   11a1a:	9801      	ldr	r0, [sp, #4]
   11a1c:	2820      	cmp	r0, #32
   11a1e:	d306      	bcc.n	11a2e <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
   11a20:	e7ff      	b.n	11a22 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
   11a22:	2201      	movs	r2, #1
   11a24:	9802      	ldr	r0, [sp, #8]
   11a26:	9903      	ldr	r1, [sp, #12]
   11a28:	f7ff ffcf 	bl	119ca <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
   11a2c:	e012      	b.n	11a54 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
   11a2e:	9802      	ldr	r0, [sp, #8]
   11a30:	f000 f8a1 	bl	11b76 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
   11a34:	4601      	mov	r1, r0
   11a36:	9006      	str	r0, [sp, #24]
   11a38:	9100      	str	r1, [sp, #0]
   11a3a:	e7ff      	b.n	11a3c <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
   11a3c:	2201      	movs	r2, #1
   11a3e:	9803      	ldr	r0, [sp, #12]
   11a40:	9902      	ldr	r1, [sp, #8]
   11a42:	f7ff ff60 	bl	11906 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   11a46:	e7ff      	b.n	11a48 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
   11a48:	9803      	ldr	r0, [sp, #12]
   11a4a:	9900      	ldr	r1, [sp, #0]
   11a4c:	f000 f8ac 	bl	11ba8 <_ZN4core3ptr5write17h4a80332de2cee3d3E>
   11a50:	e7ff      	b.n	11a52 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
   11a52:	e000      	b.n	11a56 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   11a54:	e7ff      	b.n	11a56 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   11a56:	b008      	add	sp, #32
   11a58:	bd80      	pop	{r7, pc}

00011a5a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
   11a5a:	b5d0      	push	{r4, r6, r7, lr}
   11a5c:	af02      	add	r7, sp, #8
   11a5e:	b0b4      	sub	sp, #208	; 0xd0
   11a60:	466c      	mov	r4, sp
   11a62:	f36f 0404 	bfc	r4, #0, #5
   11a66:	46a5      	mov	sp, r4
   11a68:	9024      	str	r0, [sp, #144]	; 0x90
   11a6a:	9125      	str	r1, [sp, #148]	; 0x94
   11a6c:	9226      	str	r2, [sp, #152]	; 0x98
   11a6e:	2320      	movs	r3, #32
   11a70:	932f      	str	r3, [sp, #188]	; 0xbc
   11a72:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   11a74:	9327      	str	r3, [sp, #156]	; 0x9c
   11a76:	920e      	str	r2, [sp, #56]	; 0x38
   11a78:	910d      	str	r1, [sp, #52]	; 0x34
   11a7a:	900c      	str	r0, [sp, #48]	; 0x30
   11a7c:	930b      	str	r3, [sp, #44]	; 0x2c
   11a7e:	e7ff      	b.n	11a80 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
   11a80:	2000      	movs	r0, #0
   11a82:	900f      	str	r0, [sp, #60]	; 0x3c
   11a84:	e7ff      	b.n	11a86 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11a86:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11a88:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11a8a:	4408      	add	r0, r1
   11a8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11a8e:	4290      	cmp	r0, r2
   11a90:	d905      	bls.n	11a9e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
   11a92:	e7ff      	b.n	11a94 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
   11a94:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11a96:	990e      	ldr	r1, [sp, #56]	; 0x38
   11a98:	4288      	cmp	r0, r1
   11a9a:	d334      	bcc.n	11b06 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
   11a9c:	e067      	b.n	11b6e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   11a9e:	e7ff      	b.n	11aa0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
   11aa0:	a810      	add	r0, sp, #64	; 0x40
   11aa2:	9030      	str	r0, [sp, #192]	; 0xc0
   11aa4:	9031      	str	r0, [sp, #196]	; 0xc4
   11aa6:	e7ff      	b.n	11aa8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
   11aa8:	a810      	add	r0, sp, #64	; 0x40
   11aaa:	4601      	mov	r1, r0
   11aac:	9028      	str	r0, [sp, #160]	; 0xa0
   11aae:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11ab0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11ab2:	900a      	str	r0, [sp, #40]	; 0x28
   11ab4:	4610      	mov	r0, r2
   11ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11ab8:	9109      	str	r1, [sp, #36]	; 0x24
   11aba:	4619      	mov	r1, r3
   11abc:	f000 f87a 	bl	11bb4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11ac0:	4601      	mov	r1, r0
   11ac2:	9029      	str	r0, [sp, #164]	; 0xa4
   11ac4:	9108      	str	r1, [sp, #32]
   11ac6:	e7ff      	b.n	11ac8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
   11ac8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11aca:	980d      	ldr	r0, [sp, #52]	; 0x34
   11acc:	f000 f872 	bl	11bb4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11ad0:	4601      	mov	r1, r0
   11ad2:	902a      	str	r0, [sp, #168]	; 0xa8
   11ad4:	9107      	str	r1, [sp, #28]
   11ad6:	e7ff      	b.n	11ad8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
   11ad8:	9808      	ldr	r0, [sp, #32]
   11ada:	9909      	ldr	r1, [sp, #36]	; 0x24
   11adc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11ade:	f7ff ff05 	bl	118ec <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11ae2:	e7ff      	b.n	11ae4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
   11ae4:	9807      	ldr	r0, [sp, #28]
   11ae6:	9908      	ldr	r1, [sp, #32]
   11ae8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11aea:	f7ff feff 	bl	118ec <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11aee:	e7ff      	b.n	11af0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
   11af0:	9809      	ldr	r0, [sp, #36]	; 0x24
   11af2:	9907      	ldr	r1, [sp, #28]
   11af4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11af6:	f7ff fef9 	bl	118ec <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11afa:	e7ff      	b.n	11afc <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
   11afc:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11afe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11b00:	4408      	add	r0, r1
   11b02:	900f      	str	r0, [sp, #60]	; 0x3c
   11b04:	e7bf      	b.n	11a86 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11b06:	e7ff      	b.n	11b08 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
   11b08:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11b0a:	990e      	ldr	r1, [sp, #56]	; 0x38
   11b0c:	1a08      	subs	r0, r1, r0
   11b0e:	4602      	mov	r2, r0
   11b10:	902b      	str	r0, [sp, #172]	; 0xac
   11b12:	a81c      	add	r0, sp, #112	; 0x70
   11b14:	9032      	str	r0, [sp, #200]	; 0xc8
   11b16:	9033      	str	r0, [sp, #204]	; 0xcc
   11b18:	9206      	str	r2, [sp, #24]
   11b1a:	9005      	str	r0, [sp, #20]
   11b1c:	e7ff      	b.n	11b1e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
   11b1e:	9805      	ldr	r0, [sp, #20]
   11b20:	9905      	ldr	r1, [sp, #20]
   11b22:	912c      	str	r1, [sp, #176]	; 0xb0
   11b24:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11b26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11b28:	9004      	str	r0, [sp, #16]
   11b2a:	4610      	mov	r0, r2
   11b2c:	f000 f842 	bl	11bb4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11b30:	4601      	mov	r1, r0
   11b32:	902d      	str	r0, [sp, #180]	; 0xb4
   11b34:	9103      	str	r1, [sp, #12]
   11b36:	e7ff      	b.n	11b38 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
   11b38:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11b3a:	980d      	ldr	r0, [sp, #52]	; 0x34
   11b3c:	f000 f83a 	bl	11bb4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11b40:	4601      	mov	r1, r0
   11b42:	902e      	str	r0, [sp, #184]	; 0xb8
   11b44:	9102      	str	r1, [sp, #8]
   11b46:	e7ff      	b.n	11b48 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
   11b48:	9803      	ldr	r0, [sp, #12]
   11b4a:	9904      	ldr	r1, [sp, #16]
   11b4c:	9a06      	ldr	r2, [sp, #24]
   11b4e:	f7ff fecd 	bl	118ec <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11b52:	e7ff      	b.n	11b54 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
   11b54:	9802      	ldr	r0, [sp, #8]
   11b56:	9903      	ldr	r1, [sp, #12]
   11b58:	9a06      	ldr	r2, [sp, #24]
   11b5a:	f7ff fec7 	bl	118ec <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11b5e:	e7ff      	b.n	11b60 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
   11b60:	9804      	ldr	r0, [sp, #16]
   11b62:	9902      	ldr	r1, [sp, #8]
   11b64:	9a06      	ldr	r2, [sp, #24]
   11b66:	f7ff fec1 	bl	118ec <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11b6a:	e7ff      	b.n	11b6c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
   11b6c:	e7ff      	b.n	11b6e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   11b6e:	f1a7 0408 	sub.w	r4, r7, #8
   11b72:	46a5      	mov	sp, r4
   11b74:	bdd0      	pop	{r4, r6, r7, pc}

00011b76 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
   11b76:	b580      	push	{r7, lr}
   11b78:	b08a      	sub	sp, #40	; 0x28
   11b7a:	9004      	str	r0, [sp, #16]
   11b7c:	9905      	ldr	r1, [sp, #20]
   11b7e:	9103      	str	r1, [sp, #12]
   11b80:	9002      	str	r0, [sp, #8]
   11b82:	e7ff      	b.n	11b84 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
   11b84:	a803      	add	r0, sp, #12
   11b86:	9008      	str	r0, [sp, #32]
   11b88:	9009      	str	r0, [sp, #36]	; 0x24
   11b8a:	e7ff      	b.n	11b8c <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
   11b8c:	a903      	add	r1, sp, #12
   11b8e:	2201      	movs	r2, #1
   11b90:	9802      	ldr	r0, [sp, #8]
   11b92:	f7ff feb8 	bl	11906 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   11b96:	e7ff      	b.n	11b98 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
   11b98:	9803      	ldr	r0, [sp, #12]
   11b9a:	9006      	str	r0, [sp, #24]
   11b9c:	9007      	str	r0, [sp, #28]
   11b9e:	9001      	str	r0, [sp, #4]
   11ba0:	e7ff      	b.n	11ba2 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
   11ba2:	9801      	ldr	r0, [sp, #4]
   11ba4:	b00a      	add	sp, #40	; 0x28
   11ba6:	bd80      	pop	{r7, pc}

00011ba8 <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
   11ba8:	b082      	sub	sp, #8
   11baa:	9000      	str	r0, [sp, #0]
   11bac:	9101      	str	r1, [sp, #4]
   11bae:	6001      	str	r1, [r0, #0]
   11bb0:	b002      	add	sp, #8
   11bb2:	4770      	bx	lr

00011bb4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
   11bb4:	b580      	push	{r7, lr}
   11bb6:	b084      	sub	sp, #16
   11bb8:	9002      	str	r0, [sp, #8]
   11bba:	9103      	str	r1, [sp, #12]
   11bbc:	f000 f805 	bl	11bca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
   11bc0:	9001      	str	r0, [sp, #4]
   11bc2:	e7ff      	b.n	11bc4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
   11bc4:	9801      	ldr	r0, [sp, #4]
   11bc6:	b004      	add	sp, #16
   11bc8:	bd80      	pop	{r7, pc}

00011bca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
   11bca:	b084      	sub	sp, #16
   11bcc:	9001      	str	r0, [sp, #4]
   11bce:	9102      	str	r1, [sp, #8]
   11bd0:	4408      	add	r0, r1
   11bd2:	9003      	str	r0, [sp, #12]
   11bd4:	9803      	ldr	r0, [sp, #12]
   11bd6:	9000      	str	r0, [sp, #0]
   11bd8:	e7ff      	b.n	11bda <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
   11bda:	9800      	ldr	r0, [sp, #0]
   11bdc:	b004      	add	sp, #16
   11bde:	4770      	bx	lr

00011be0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
   11be0:	b580      	push	{r7, lr}
   11be2:	b084      	sub	sp, #16
   11be4:	9002      	str	r0, [sp, #8]
   11be6:	9103      	str	r1, [sp, #12]
   11be8:	f000 f805 	bl	11bf6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
   11bec:	9001      	str	r0, [sp, #4]
   11bee:	e7ff      	b.n	11bf0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
   11bf0:	9801      	ldr	r0, [sp, #4]
   11bf2:	b004      	add	sp, #16
   11bf4:	bd80      	pop	{r7, pc}

00011bf6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
   11bf6:	b084      	sub	sp, #16
   11bf8:	9001      	str	r0, [sp, #4]
   11bfa:	9102      	str	r1, [sp, #8]
   11bfc:	4408      	add	r0, r1
   11bfe:	9003      	str	r0, [sp, #12]
   11c00:	9803      	ldr	r0, [sp, #12]
   11c02:	9000      	str	r0, [sp, #0]
   11c04:	e7ff      	b.n	11c06 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
   11c06:	9800      	ldr	r0, [sp, #0]
   11c08:	b004      	add	sp, #16
   11c0a:	4770      	bx	lr

00011c0c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
   11c0c:	b580      	push	{r7, lr}
   11c0e:	b08a      	sub	sp, #40	; 0x28
   11c10:	9009      	str	r0, [sp, #36]	; 0x24
   11c12:	2100      	movs	r1, #0
   11c14:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11c18:	1d01      	adds	r1, r0, #4
   11c1a:	9002      	str	r0, [sp, #8]
   11c1c:	f7ff fe81 	bl	11922 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
   11c20:	9001      	str	r0, [sp, #4]
   11c22:	e7ff      	b.n	11c24 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
   11c24:	9801      	ldr	r0, [sp, #4]
   11c26:	07c1      	lsls	r1, r0, #31
   11c28:	2900      	cmp	r1, #0
   11c2a:	d103      	bne.n	11c34 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
   11c2c:	e7ff      	b.n	11c2e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
   11c2e:	2000      	movs	r0, #0
   11c30:	9003      	str	r0, [sp, #12]
   11c32:	e021      	b.n	11c78 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11c34:	2001      	movs	r0, #1
   11c36:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11c3a:	9902      	ldr	r1, [sp, #8]
   11c3c:	9000      	str	r0, [sp, #0]
   11c3e:	4608      	mov	r0, r1
   11c40:	9900      	ldr	r1, [sp, #0]
   11c42:	f7ff fe39 	bl	118b8 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
   11c46:	9106      	str	r1, [sp, #24]
   11c48:	9005      	str	r0, [sp, #20]
   11c4a:	e7ff      	b.n	11c4c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
   11c4c:	9805      	ldr	r0, [sp, #20]
   11c4e:	2801      	cmp	r0, #1
   11c50:	d003      	beq.n	11c5a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
   11c52:	e7ff      	b.n	11c54 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
   11c54:	2000      	movs	r0, #0
   11c56:	9003      	str	r0, [sp, #12]
   11c58:	e021      	b.n	11c9e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11c5a:	2000      	movs	r0, #0
   11c5c:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11c60:	9806      	ldr	r0, [sp, #24]
   11c62:	9007      	str	r0, [sp, #28]
   11c64:	a807      	add	r0, sp, #28
   11c66:	9902      	ldr	r1, [sp, #8]
   11c68:	f7ff fe67 	bl	1193a <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
   11c6c:	e7ff      	b.n	11c6e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
   11c6e:	9807      	ldr	r0, [sp, #28]
   11c70:	9004      	str	r0, [sp, #16]
   11c72:	2001      	movs	r0, #1
   11c74:	9003      	str	r0, [sp, #12]
   11c76:	e012      	b.n	11c9e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11c78:	9803      	ldr	r0, [sp, #12]
   11c7a:	9904      	ldr	r1, [sp, #16]
   11c7c:	b00a      	add	sp, #40	; 0x28
   11c7e:	bd80      	pop	{r7, pc}
   11c80:	2000      	movs	r0, #0
   11c82:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11c86:	e7f7      	b.n	11c78 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11c88:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   11c8c:	07c0      	lsls	r0, r0, #31
   11c8e:	2800      	cmp	r0, #0
   11c90:	d0f6      	beq.n	11c80 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11c92:	e7ff      	b.n	11c94 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
   11c94:	2000      	movs	r0, #0
   11c96:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11c9a:	e7f1      	b.n	11c80 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11c9c:	e7f0      	b.n	11c80 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11c9e:	9805      	ldr	r0, [sp, #20]
   11ca0:	2801      	cmp	r0, #1
   11ca2:	d0f1      	beq.n	11c88 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
   11ca4:	e7fa      	b.n	11c9c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

00011ca6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
   11ca6:	b082      	sub	sp, #8
   11ca8:	9000      	str	r0, [sp, #0]
   11caa:	9101      	str	r1, [sp, #4]
   11cac:	b002      	add	sp, #8
   11cae:	4770      	bx	lr

00011cb0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
   11cb0:	b580      	push	{r7, lr}
   11cb2:	b086      	sub	sp, #24
   11cb4:	9003      	str	r0, [sp, #12]
   11cb6:	9104      	str	r1, [sp, #16]
   11cb8:	9205      	str	r2, [sp, #20]
   11cba:	9002      	str	r0, [sp, #8]
   11cbc:	4610      	mov	r0, r2
   11cbe:	9a02      	ldr	r2, [sp, #8]
   11cc0:	9101      	str	r1, [sp, #4]
   11cc2:	4611      	mov	r1, r2
   11cc4:	9a01      	ldr	r2, [sp, #4]
   11cc6:	f000 f846 	bl	11d56 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
   11cca:	9000      	str	r0, [sp, #0]
   11ccc:	e7ff      	b.n	11cce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
   11cce:	9800      	ldr	r0, [sp, #0]
   11cd0:	b006      	add	sp, #24
   11cd2:	bd80      	pop	{r7, pc}

00011cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
   11cd4:	b084      	sub	sp, #16
   11cd6:	9002      	str	r0, [sp, #8]
   11cd8:	9103      	str	r1, [sp, #12]
   11cda:	9000      	str	r0, [sp, #0]
   11cdc:	9101      	str	r1, [sp, #4]
   11cde:	9801      	ldr	r0, [sp, #4]
   11ce0:	b004      	add	sp, #16
   11ce2:	4770      	bx	lr

00011ce4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
   11ce4:	b082      	sub	sp, #8
   11ce6:	9000      	str	r0, [sp, #0]
   11ce8:	9101      	str	r1, [sp, #4]
   11cea:	b002      	add	sp, #8
   11cec:	4770      	bx	lr

00011cee <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
   11cee:	b081      	sub	sp, #4
   11cf0:	9000      	str	r0, [sp, #0]
   11cf2:	b001      	add	sp, #4
   11cf4:	4770      	bx	lr

00011cf6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
   11cf6:	b580      	push	{r7, lr}
   11cf8:	b082      	sub	sp, #8
   11cfa:	9001      	str	r0, [sp, #4]
   11cfc:	f7ff fff7 	bl	11cee <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
   11d00:	9000      	str	r0, [sp, #0]
   11d02:	e7ff      	b.n	11d04 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
   11d04:	9800      	ldr	r0, [sp, #0]
   11d06:	b002      	add	sp, #8
   11d08:	bd80      	pop	{r7, pc}

00011d0a <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
   11d0a:	b580      	push	{r7, lr}
   11d0c:	b084      	sub	sp, #16
   11d0e:	9003      	str	r0, [sp, #12]
   11d10:	f7ff fff1 	bl	11cf6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
   11d14:	9001      	str	r0, [sp, #4]
   11d16:	e7ff      	b.n	11d18 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
   11d18:	9801      	ldr	r0, [sp, #4]
   11d1a:	9002      	str	r0, [sp, #8]
   11d1c:	9802      	ldr	r0, [sp, #8]
   11d1e:	b004      	add	sp, #16
   11d20:	bd80      	pop	{r7, pc}

00011d22 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
   11d22:	b082      	sub	sp, #8
   11d24:	9000      	str	r0, [sp, #0]
   11d26:	9101      	str	r1, [sp, #4]
   11d28:	b002      	add	sp, #8
   11d2a:	4770      	bx	lr

00011d2c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
   11d2c:	b580      	push	{r7, lr}
   11d2e:	b086      	sub	sp, #24
   11d30:	9003      	str	r0, [sp, #12]
   11d32:	9104      	str	r1, [sp, #16]
   11d34:	9205      	str	r2, [sp, #20]
   11d36:	9002      	str	r0, [sp, #8]
   11d38:	4608      	mov	r0, r1
   11d3a:	4611      	mov	r1, r2
   11d3c:	f7ff ffd2 	bl	11ce4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   11d40:	9001      	str	r0, [sp, #4]
   11d42:	e7ff      	b.n	11d44 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
   11d44:	9801      	ldr	r0, [sp, #4]
   11d46:	9902      	ldr	r1, [sp, #8]
   11d48:	f7ff ff4a 	bl	11be0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
   11d4c:	9000      	str	r0, [sp, #0]
   11d4e:	e7ff      	b.n	11d50 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
   11d50:	9800      	ldr	r0, [sp, #0]
   11d52:	b006      	add	sp, #24
   11d54:	bd80      	pop	{r7, pc}

00011d56 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
   11d56:	b580      	push	{r7, lr}
   11d58:	b086      	sub	sp, #24
   11d5a:	9003      	str	r0, [sp, #12]
   11d5c:	9104      	str	r1, [sp, #16]
   11d5e:	9205      	str	r2, [sp, #20]
   11d60:	9002      	str	r0, [sp, #8]
   11d62:	4608      	mov	r0, r1
   11d64:	4611      	mov	r1, r2
   11d66:	f7ff ff9e 	bl	11ca6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11d6a:	9001      	str	r0, [sp, #4]
   11d6c:	e7ff      	b.n	11d6e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
   11d6e:	9801      	ldr	r0, [sp, #4]
   11d70:	9902      	ldr	r1, [sp, #8]
   11d72:	f7ff ff1f 	bl	11bb4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11d76:	9000      	str	r0, [sp, #0]
   11d78:	e7ff      	b.n	11d7a <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
   11d7a:	9800      	ldr	r0, [sp, #0]
   11d7c:	b006      	add	sp, #24
   11d7e:	bd80      	pop	{r7, pc}

00011d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   11d80:	b081      	sub	sp, #4
   11d82:	b001      	add	sp, #4
   11d84:	4770      	bx	lr

00011d86 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
   11d86:	b580      	push	{r7, lr}
   11d88:	b086      	sub	sp, #24
   11d8a:	f8dd c020 	ldr.w	ip, [sp, #32]
   11d8e:	9102      	str	r1, [sp, #8]
   11d90:	9203      	str	r2, [sp, #12]
   11d92:	9304      	str	r3, [sp, #16]
   11d94:	f8cd c014 	str.w	ip, [sp, #20]
   11d98:	f04f 0e00 	mov.w	lr, #0
   11d9c:	f8cd e004 	str.w	lr, [sp, #4]
   11da0:	f8cd e000 	str.w	lr, [sp]
   11da4:	f8cd e000 	str.w	lr, [sp]
   11da8:	6001      	str	r1, [r0, #0]
   11daa:	6042      	str	r2, [r0, #4]
   11dac:	9900      	ldr	r1, [sp, #0]
   11dae:	9a01      	ldr	r2, [sp, #4]
   11db0:	6081      	str	r1, [r0, #8]
   11db2:	60c2      	str	r2, [r0, #12]
   11db4:	6103      	str	r3, [r0, #16]
   11db6:	f8c0 c014 	str.w	ip, [r0, #20]
   11dba:	b006      	add	sp, #24
   11dbc:	bd80      	pop	{r7, pc}

00011dbe <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
   11dbe:	b580      	push	{r7, lr}
   11dc0:	b084      	sub	sp, #16
   11dc2:	9101      	str	r1, [sp, #4]
   11dc4:	9202      	str	r2, [sp, #8]
   11dc6:	9901      	ldr	r1, [sp, #4]
   11dc8:	9a02      	ldr	r2, [sp, #8]
   11dca:	f000 fa94 	bl	122f6 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
   11dce:	e7ff      	b.n	11dd0 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
   11dd0:	b004      	add	sp, #16
   11dd2:	bd80      	pop	{r7, pc}

00011dd4 <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
   11dd4:	b081      	sub	sp, #4
   11dd6:	9000      	str	r0, [sp, #0]
   11dd8:	b001      	add	sp, #4
   11dda:	4770      	bx	lr

00011ddc <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
   11ddc:	b081      	sub	sp, #4
   11dde:	9000      	str	r0, [sp, #0]
   11de0:	b001      	add	sp, #4
   11de2:	4770      	bx	lr

00011de4 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
   11de4:	b580      	push	{r7, lr}
   11de6:	b086      	sub	sp, #24
   11de8:	460a      	mov	r2, r1
   11dea:	9004      	str	r0, [sp, #16]
   11dec:	f88d 1017 	strb.w	r1, [sp, #23]
   11df0:	9203      	str	r2, [sp, #12]
   11df2:	f7ff fff3 	bl	11ddc <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   11df6:	9002      	str	r0, [sp, #8]
   11df8:	e7ff      	b.n	11dfa <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
   11dfa:	9802      	ldr	r0, [sp, #8]
   11dfc:	9903      	ldr	r1, [sp, #12]
   11dfe:	f000 f805 	bl	11e0c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   11e02:	9001      	str	r0, [sp, #4]
   11e04:	e7ff      	b.n	11e06 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
   11e06:	9801      	ldr	r0, [sp, #4]
   11e08:	b006      	add	sp, #24
   11e0a:	bd80      	pop	{r7, pc}

00011e0c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
   11e0c:	b086      	sub	sp, #24
   11e0e:	460a      	mov	r2, r1
   11e10:	f88d 100f 	strb.w	r1, [sp, #15]
   11e14:	9005      	str	r0, [sp, #20]
   11e16:	f89d 100f 	ldrb.w	r1, [sp, #15]
   11e1a:	9002      	str	r0, [sp, #8]
   11e1c:	9101      	str	r1, [sp, #4]
   11e1e:	9901      	ldr	r1, [sp, #4]
   11e20:	e8df f001 	tbb	[pc, r1]
   11e24:	03102317 	.word	0x03102317
   11e28:	001c      	.short	0x001c
   11e2a:	f64f 508c 	movw	r0, #64908	; 0xfd8c
   11e2e:	f2c0 0001 	movt	r0, #1
   11e32:	f64f 6208 	movw	r2, #65032	; 0xfe08
   11e36:	f2c0 0201 	movt	r2, #1
   11e3a:	2131      	movs	r1, #49	; 0x31
   11e3c:	f005 fa46 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11e40:	defe      	udf	#254	; 0xfe
   11e42:	defe      	udf	#254	; 0xfe
   11e44:	9802      	ldr	r0, [sp, #8]
   11e46:	6801      	ldr	r1, [r0, #0]
   11e48:	f3bf 8f5f 	dmb	sy
   11e4c:	9104      	str	r1, [sp, #16]
   11e4e:	e7ff      	b.n	11e50 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
   11e50:	e017      	b.n	11e82 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   11e52:	9802      	ldr	r0, [sp, #8]
   11e54:	6801      	ldr	r1, [r0, #0]
   11e56:	9104      	str	r1, [sp, #16]
   11e58:	e7ff      	b.n	11e5a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
   11e5a:	e012      	b.n	11e82 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   11e5c:	9802      	ldr	r0, [sp, #8]
   11e5e:	6801      	ldr	r1, [r0, #0]
   11e60:	f3bf 8f5f 	dmb	sy
   11e64:	9104      	str	r1, [sp, #16]
   11e66:	e7ff      	b.n	11e68 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
   11e68:	e00b      	b.n	11e82 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   11e6a:	f64f 6018 	movw	r0, #65048	; 0xfe18
   11e6e:	f2c0 0001 	movt	r0, #1
   11e72:	f64f 6208 	movw	r2, #65032	; 0xfe08
   11e76:	f2c0 0201 	movt	r2, #1
   11e7a:	2128      	movs	r1, #40	; 0x28
   11e7c:	f005 fa26 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11e80:	defe      	udf	#254	; 0xfe
   11e82:	9804      	ldr	r0, [sp, #16]
   11e84:	b006      	add	sp, #24
   11e86:	4770      	bx	lr

00011e88 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
   11e88:	b081      	sub	sp, #4
   11e8a:	9000      	str	r0, [sp, #0]
   11e8c:	6800      	ldr	r0, [r0, #0]
   11e8e:	b001      	add	sp, #4
   11e90:	4770      	bx	lr

00011e92 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
   11e92:	b082      	sub	sp, #8
   11e94:	9001      	str	r0, [sp, #4]
   11e96:	6801      	ldr	r1, [r0, #0]
   11e98:	6840      	ldr	r0, [r0, #4]
   11e9a:	9000      	str	r0, [sp, #0]
   11e9c:	4608      	mov	r0, r1
   11e9e:	9900      	ldr	r1, [sp, #0]
   11ea0:	b002      	add	sp, #8
   11ea2:	4770      	bx	lr

00011ea4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
   11ea4:	b580      	push	{r7, lr}
   11ea6:	b08c      	sub	sp, #48	; 0x30
   11ea8:	9101      	str	r1, [sp, #4]
   11eaa:	9202      	str	r2, [sp, #8]
   11eac:	2100      	movs	r1, #0
   11eae:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   11eb2:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11eb6:	2101      	movs	r1, #1
   11eb8:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11ebc:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   11ec0:	9901      	ldr	r1, [sp, #4]
   11ec2:	2900      	cmp	r1, #0
   11ec4:	460a      	mov	r2, r1
   11ec6:	bf18      	it	ne
   11ec8:	2201      	movne	r2, #1
   11eca:	2900      	cmp	r1, #0
   11ecc:	9000      	str	r0, [sp, #0]
   11ece:	d001      	beq.n	11ed4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
   11ed0:	e7ff      	b.n	11ed2 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
   11ed2:	e008      	b.n	11ee6 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
   11ed4:	2000      	movs	r0, #0
   11ed6:	9900      	ldr	r1, [sp, #0]
   11ed8:	6088      	str	r0, [r1, #8]
   11eda:	6048      	str	r0, [r1, #4]
   11edc:	6008      	str	r0, [r1, #0]
   11ede:	2002      	movs	r0, #2
   11ee0:	6008      	str	r0, [r1, #0]
   11ee2:	e021      	b.n	11f28 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   11ee4:	defe      	udf	#254	; 0xfe
   11ee6:	2000      	movs	r0, #0
   11ee8:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11eec:	9901      	ldr	r1, [sp, #4]
   11eee:	9a02      	ldr	r2, [sp, #8]
   11ef0:	910a      	str	r1, [sp, #40]	; 0x28
   11ef2:	920b      	str	r2, [sp, #44]	; 0x2c
   11ef4:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11ef8:	9106      	str	r1, [sp, #24]
   11efa:	9207      	str	r2, [sp, #28]
   11efc:	9906      	ldr	r1, [sp, #24]
   11efe:	9a07      	ldr	r2, [sp, #28]
   11f00:	a803      	add	r0, sp, #12
   11f02:	f7ff ff5c 	bl	11dbe <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
   11f06:	e7ff      	b.n	11f08 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
   11f08:	9803      	ldr	r0, [sp, #12]
   11f0a:	9904      	ldr	r1, [sp, #16]
   11f0c:	9a05      	ldr	r2, [sp, #20]
   11f0e:	9b00      	ldr	r3, [sp, #0]
   11f10:	609a      	str	r2, [r3, #8]
   11f12:	6059      	str	r1, [r3, #4]
   11f14:	6018      	str	r0, [r3, #0]
   11f16:	e007      	b.n	11f28 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   11f18:	9801      	ldr	r0, [sp, #4]
   11f1a:	2800      	cmp	r0, #0
   11f1c:	d10c      	bne.n	11f38 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
   11f1e:	e015      	b.n	11f4c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
   11f20:	2000      	movs	r0, #0
   11f22:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11f26:	e7f7      	b.n	11f18 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   11f28:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   11f2c:	07c0      	lsls	r0, r0, #31
   11f2e:	2800      	cmp	r0, #0
   11f30:	d1f6      	bne.n	11f20 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
   11f32:	e7f1      	b.n	11f18 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   11f34:	b00c      	add	sp, #48	; 0x30
   11f36:	bd80      	pop	{r7, pc}
   11f38:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   11f3c:	07c0      	lsls	r0, r0, #31
   11f3e:	2800      	cmp	r0, #0
   11f40:	d0f8      	beq.n	11f34 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   11f42:	e7ff      	b.n	11f44 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
   11f44:	2000      	movs	r0, #0
   11f46:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11f4a:	e7f3      	b.n	11f34 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   11f4c:	e7f2      	b.n	11f34 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

00011f4e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>:
   11f4e:	b081      	sub	sp, #4
   11f50:	b001      	add	sp, #4
   11f52:	4770      	bx	lr

00011f54 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
   11f54:	b5b0      	push	{r4, r5, r7, lr}
   11f56:	b081      	sub	sp, #4
   11f58:	9100      	str	r1, [sp, #0]
   11f5a:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   11f5e:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   11f62:	b001      	add	sp, #4
   11f64:	bdb0      	pop	{r4, r5, r7, pc}

00011f66 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
   11f66:	b580      	push	{r7, lr}
   11f68:	b088      	sub	sp, #32
   11f6a:	9106      	str	r1, [sp, #24]
   11f6c:	680a      	ldr	r2, [r1, #0]
   11f6e:	1e93      	subs	r3, r2, #2
   11f70:	bf18      	it	ne
   11f72:	2301      	movne	r3, #1
   11f74:	2a02      	cmp	r2, #2
   11f76:	9102      	str	r1, [sp, #8]
   11f78:	9001      	str	r0, [sp, #4]
   11f7a:	d001      	beq.n	11f80 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
   11f7c:	e7ff      	b.n	11f7e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
   11f7e:	e008      	b.n	11f92 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
   11f80:	2000      	movs	r0, #0
   11f82:	9901      	ldr	r1, [sp, #4]
   11f84:	6088      	str	r0, [r1, #8]
   11f86:	6048      	str	r0, [r1, #4]
   11f88:	6008      	str	r0, [r1, #0]
   11f8a:	2002      	movs	r0, #2
   11f8c:	6008      	str	r0, [r1, #0]
   11f8e:	e00f      	b.n	11fb0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   11f90:	defe      	udf	#254	; 0xfe
   11f92:	9802      	ldr	r0, [sp, #8]
   11f94:	9007      	str	r0, [sp, #28]
   11f96:	a803      	add	r0, sp, #12
   11f98:	9902      	ldr	r1, [sp, #8]
   11f9a:	f000 f9b5 	bl	12308 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
   11f9e:	e7ff      	b.n	11fa0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
   11fa0:	9803      	ldr	r0, [sp, #12]
   11fa2:	9904      	ldr	r1, [sp, #16]
   11fa4:	9a05      	ldr	r2, [sp, #20]
   11fa6:	9b01      	ldr	r3, [sp, #4]
   11fa8:	609a      	str	r2, [r3, #8]
   11faa:	6059      	str	r1, [r3, #4]
   11fac:	6018      	str	r0, [r3, #0]
   11fae:	e7ff      	b.n	11fb0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   11fb0:	b008      	add	sp, #32
   11fb2:	bd80      	pop	{r7, pc}

00011fb4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
   11fb4:	b580      	push	{r7, lr}
   11fb6:	b086      	sub	sp, #24
   11fb8:	9004      	str	r0, [sp, #16]
   11fba:	6801      	ldr	r1, [r0, #0]
   11fbc:	2900      	cmp	r1, #0
   11fbe:	9001      	str	r0, [sp, #4]
   11fc0:	d001      	beq.n	11fc6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
   11fc2:	e7ff      	b.n	11fc4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
   11fc4:	e003      	b.n	11fce <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
   11fc6:	2000      	movs	r0, #0
   11fc8:	9002      	str	r0, [sp, #8]
   11fca:	e00d      	b.n	11fe8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   11fcc:	defe      	udf	#254	; 0xfe
   11fce:	9801      	ldr	r0, [sp, #4]
   11fd0:	1d01      	adds	r1, r0, #4
   11fd2:	9105      	str	r1, [sp, #20]
   11fd4:	4608      	mov	r0, r1
   11fd6:	f7ff ff57 	bl	11e88 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
   11fda:	9000      	str	r0, [sp, #0]
   11fdc:	e7ff      	b.n	11fde <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
   11fde:	9800      	ldr	r0, [sp, #0]
   11fe0:	9003      	str	r0, [sp, #12]
   11fe2:	2101      	movs	r1, #1
   11fe4:	9102      	str	r1, [sp, #8]
   11fe6:	e7ff      	b.n	11fe8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   11fe8:	9802      	ldr	r0, [sp, #8]
   11fea:	9903      	ldr	r1, [sp, #12]
   11fec:	b006      	add	sp, #24
   11fee:	bd80      	pop	{r7, pc}

00011ff0 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
   11ff0:	b081      	sub	sp, #4
   11ff2:	9000      	str	r0, [sp, #0]
        *self
   11ff4:	6800      	ldr	r0, [r0, #0]
    }
   11ff6:	b001      	add	sp, #4
   11ff8:	4770      	bx	lr

00011ffa <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
   11ffa:	b580      	push	{r7, lr}
        RecordBuilder::new()
   11ffc:	f000 f802 	bl	12004 <_ZN3log13RecordBuilder3new17haca8312579858419E>
   12000:	e7ff      	b.n	12002 <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
   12002:	bd80      	pop	{r7, pc}

00012004 <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
   12004:	b570      	push	{r4, r5, r6, lr}
   12006:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
   12008:	f64f 6158 	movw	r1, #65112	; 0xfe58
   1200c:	f2c0 0101 	movt	r1, #1
   12010:	6809      	ldr	r1, [r1, #0]
   12012:	466a      	mov	r2, sp
   12014:	2300      	movs	r3, #0
   12016:	6013      	str	r3, [r2, #0]
   12018:	aa16      	add	r2, sp, #88	; 0x58
   1201a:	9004      	str	r0, [sp, #16]
   1201c:	4610      	mov	r0, r2
   1201e:	9103      	str	r1, [sp, #12]
   12020:	461a      	mov	r2, r3
   12022:	9b03      	ldr	r3, [sp, #12]
   12024:	f7ff feaf 	bl	11d86 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
   12028:	e7ff      	b.n	1202a <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
   1202a:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
   1202c:	f000 f891 	bl	12152 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
   12030:	e7ff      	b.n	12032 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
   12032:	a81c      	add	r0, sp, #112	; 0x70
   12034:	a91f      	add	r1, sp, #124	; 0x7c
   12036:	f000 f8a5 	bl	12184 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
   1203a:	e7ff      	b.n	1203c <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
   1203c:	2000      	movs	r0, #0
                module_path: None,
   1203e:	9024      	str	r0, [sp, #144]	; 0x90
   12040:	9023      	str	r0, [sp, #140]	; 0x8c
   12042:	9022      	str	r0, [sp, #136]	; 0x88
   12044:	2102      	movs	r1, #2
   12046:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
   12048:	9027      	str	r0, [sp, #156]	; 0x9c
   1204a:	9026      	str	r0, [sp, #152]	; 0x98
   1204c:	9025      	str	r0, [sp, #148]	; 0x94
   1204e:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
   12050:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
   12052:	981c      	ldr	r0, [sp, #112]	; 0x70
   12054:	991d      	ldr	r1, [sp, #116]	; 0x74
   12056:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   12058:	9207      	str	r2, [sp, #28]
   1205a:	9106      	str	r1, [sp, #24]
   1205c:	9005      	str	r0, [sp, #20]
   1205e:	a805      	add	r0, sp, #20
   12060:	f100 010c 	add.w	r1, r0, #12
   12064:	aa16      	add	r2, sp, #88	; 0x58
   12066:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   1206a:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   1206e:	9922      	ldr	r1, [sp, #136]	; 0x88
   12070:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   12072:	9b24      	ldr	r3, [sp, #144]	; 0x90
   12074:	9310      	str	r3, [sp, #64]	; 0x40
   12076:	920f      	str	r2, [sp, #60]	; 0x3c
   12078:	910e      	str	r1, [sp, #56]	; 0x38
   1207a:	9925      	ldr	r1, [sp, #148]	; 0x94
   1207c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1207e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   12080:	9313      	str	r3, [sp, #76]	; 0x4c
   12082:	9212      	str	r2, [sp, #72]	; 0x48
   12084:	9111      	str	r1, [sp, #68]	; 0x44
   12086:	9928      	ldr	r1, [sp, #160]	; 0xa0
   12088:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1208a:	9114      	str	r1, [sp, #80]	; 0x50
   1208c:	9215      	str	r2, [sp, #84]	; 0x54
   1208e:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
   12090:	9904      	ldr	r1, [sp, #16]
   12092:	9002      	str	r0, [sp, #8]
   12094:	4608      	mov	r0, r1
   12096:	9902      	ldr	r1, [sp, #8]
   12098:	f00b fcec 	bl	1da74 <__aeabi_memcpy>
    }
   1209c:	b02a      	add	sp, #168	; 0xa8
   1209e:	bd70      	pop	{r4, r5, r6, pc}

000120a0 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
   120a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   120a2:	b087      	sub	sp, #28
   120a4:	9006      	str	r0, [sp, #24]
   120a6:	466a      	mov	r2, sp
        self.record.args = args;
   120a8:	4613      	mov	r3, r2
   120aa:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
   120ae:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
   120b2:	f100 010c 	add.w	r1, r0, #12
   120b6:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   120ba:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
   120be:	b007      	add	sp, #28
   120c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000120c2 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
   120c2:	b082      	sub	sp, #8
   120c4:	9000      	str	r0, [sp, #0]
   120c6:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
   120c8:	6001      	str	r1, [r0, #0]
    }
   120ca:	b002      	add	sp, #8
   120cc:	4770      	bx	lr

000120ce <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
   120ce:	b083      	sub	sp, #12
   120d0:	9000      	str	r0, [sp, #0]
   120d2:	9101      	str	r1, [sp, #4]
   120d4:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
   120d6:	6041      	str	r1, [r0, #4]
   120d8:	6082      	str	r2, [r0, #8]
    }
   120da:	b003      	add	sp, #12
   120dc:	4770      	bx	lr

000120de <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
   120de:	b580      	push	{r7, lr}
   120e0:	b088      	sub	sp, #32
   120e2:	9005      	str	r0, [sp, #20]
   120e4:	9106      	str	r1, [sp, #24]
   120e6:	9207      	str	r2, [sp, #28]
   120e8:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
   120ea:	9001      	str	r0, [sp, #4]
   120ec:	4618      	mov	r0, r3
   120ee:	f7ff fed9 	bl	11ea4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   120f2:	e7ff      	b.n	120f4 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
   120f4:	9802      	ldr	r0, [sp, #8]
   120f6:	9903      	ldr	r1, [sp, #12]
   120f8:	9a04      	ldr	r2, [sp, #16]
   120fa:	9b01      	ldr	r3, [sp, #4]
   120fc:	62da      	str	r2, [r3, #44]	; 0x2c
   120fe:	6299      	str	r1, [r3, #40]	; 0x28
   12100:	6258      	str	r0, [r3, #36]	; 0x24
    }
   12102:	4618      	mov	r0, r3
   12104:	b008      	add	sp, #32
   12106:	bd80      	pop	{r7, pc}

00012108 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
   12108:	b580      	push	{r7, lr}
   1210a:	b088      	sub	sp, #32
   1210c:	9005      	str	r0, [sp, #20]
   1210e:	9106      	str	r1, [sp, #24]
   12110:	9207      	str	r2, [sp, #28]
   12112:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
   12114:	9001      	str	r0, [sp, #4]
   12116:	4618      	mov	r0, r3
   12118:	f7ff fec4 	bl	11ea4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   1211c:	e7ff      	b.n	1211e <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
   1211e:	9802      	ldr	r0, [sp, #8]
   12120:	9903      	ldr	r1, [sp, #12]
   12122:	9a04      	ldr	r2, [sp, #16]
   12124:	9b01      	ldr	r3, [sp, #4]
   12126:	639a      	str	r2, [r3, #56]	; 0x38
   12128:	6359      	str	r1, [r3, #52]	; 0x34
   1212a:	6318      	str	r0, [r3, #48]	; 0x30
    }
   1212c:	4618      	mov	r0, r3
   1212e:	b008      	add	sp, #32
   12130:	bd80      	pop	{r7, pc}

00012132 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
   12132:	b083      	sub	sp, #12
   12134:	9000      	str	r0, [sp, #0]
   12136:	9101      	str	r1, [sp, #4]
   12138:	9202      	str	r2, [sp, #8]
        self.record.line = line;
   1213a:	63c1      	str	r1, [r0, #60]	; 0x3c
   1213c:	6402      	str	r2, [r0, #64]	; 0x40
    }
   1213e:	b003      	add	sp, #12
   12140:	4770      	bx	lr

00012142 <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
   12142:	b580      	push	{r7, lr}
   12144:	b082      	sub	sp, #8
   12146:	9101      	str	r1, [sp, #4]
        self.record.clone()
   12148:	f000 f8e8 	bl	1231c <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
   1214c:	e7ff      	b.n	1214e <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
   1214e:	b002      	add	sp, #8
   12150:	bd80      	pop	{r7, pc}

00012152 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
   12152:	b580      	push	{r7, lr}
        MetadataBuilder::new()
   12154:	f000 f802 	bl	1215c <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
   12158:	e7ff      	b.n	1215a <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
   1215a:	bd80      	pop	{r7, pc}

0001215c <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
   1215c:	b084      	sub	sp, #16
   1215e:	2103      	movs	r1, #3
                level: Level::Info,
   12160:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
   12162:	9903      	ldr	r1, [sp, #12]
   12164:	9100      	str	r1, [sp, #0]
   12166:	f64f 6140 	movw	r1, #65088	; 0xfe40
   1216a:	f2c0 0101 	movt	r1, #1
   1216e:	9101      	str	r1, [sp, #4]
   12170:	2100      	movs	r1, #0
   12172:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
   12174:	9900      	ldr	r1, [sp, #0]
   12176:	9a01      	ldr	r2, [sp, #4]
   12178:	9b02      	ldr	r3, [sp, #8]
   1217a:	6083      	str	r3, [r0, #8]
   1217c:	6042      	str	r2, [r0, #4]
   1217e:	6001      	str	r1, [r0, #0]
    }
   12180:	b004      	add	sp, #16
   12182:	4770      	bx	lr

00012184 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
   12184:	b580      	push	{r7, lr}
   12186:	b082      	sub	sp, #8
   12188:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
   1218a:	f000 f91c 	bl	123c6 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   1218e:	e7ff      	b.n	12190 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
   12190:	b002      	add	sp, #8
   12192:	bd80      	pop	{r7, pc}

00012194 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
   12194:	b082      	sub	sp, #8
   12196:	9000      	str	r0, [sp, #0]
   12198:	9101      	str	r1, [sp, #4]
   1219a:	2000      	movs	r0, #0
    }
   1219c:	b002      	add	sp, #8
   1219e:	4770      	bx	lr

000121a0 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
   121a0:	b082      	sub	sp, #8
   121a2:	9000      	str	r0, [sp, #0]
   121a4:	9101      	str	r1, [sp, #4]
   121a6:	b002      	add	sp, #8
   121a8:	4770      	bx	lr

000121aa <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
   121aa:	b081      	sub	sp, #4
   121ac:	9000      	str	r0, [sp, #0]
   121ae:	b001      	add	sp, #4
   121b0:	4770      	bx	lr

000121b2 <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
   121b2:	b580      	push	{r7, lr}
   121b4:	b084      	sub	sp, #16
   121b6:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   121b8:	f88d 000f 	strb.w	r0, [sp, #15]
   121bc:	f89d 100f 	ldrb.w	r1, [sp, #15]
   121c0:	f644 2068 	movw	r0, #19048	; 0x4a68
   121c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   121c8:	f7ff fe0c 	bl	11de4 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
   121cc:	9000      	str	r0, [sp, #0]
   121ce:	e7ff      	b.n	121d0 <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
   121d0:	9800      	ldr	r0, [sp, #0]
   121d2:	2802      	cmp	r0, #2
   121d4:	d109      	bne.n	121ea <_ZN3log6logger17hf609e7cc1c031552E+0x38>
   121d6:	e7ff      	b.n	121d8 <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
   121d8:	f240 00f0 	movw	r0, #240	; 0xf0
   121dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   121e0:	6801      	ldr	r1, [r0, #0]
   121e2:	6840      	ldr	r0, [r0, #4]
   121e4:	9101      	str	r1, [sp, #4]
   121e6:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   121e8:	e00a      	b.n	12200 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
   121ea:	f64f 6074 	movw	r0, #65140	; 0xfe74
   121ee:	f2c0 0001 	movt	r0, #1
   121f2:	9001      	str	r0, [sp, #4]
   121f4:	f64f 605c 	movw	r0, #65116	; 0xfe5c
   121f8:	f2c0 0001 	movt	r0, #1
   121fc:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   121fe:	e7ff      	b.n	12200 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
   12200:	9801      	ldr	r0, [sp, #4]
   12202:	9902      	ldr	r1, [sp, #8]
        }
    }
}
   12204:	b004      	add	sp, #16
   12206:	bd80      	pop	{r7, pc}

00012208 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
   12208:	b570      	push	{r4, r5, r6, lr}
   1220a:	b0ca      	sub	sp, #296	; 0x128
   1220c:	9141      	str	r1, [sp, #260]	; 0x104
   1220e:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
   12210:	6813      	ldr	r3, [r2, #0]
   12212:	f8d2 c004 	ldr.w	ip, [r2, #4]
   12216:	9343      	str	r3, [sp, #268]	; 0x10c
   12218:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
   1221c:	f8d2 e008 	ldr.w	lr, [r2, #8]
   12220:	68d4      	ldr	r4, [r2, #12]
   12222:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
   12226:	9446      	str	r4, [sp, #280]	; 0x118
   12228:	6915      	ldr	r5, [r2, #16]
   1222a:	6956      	ldr	r6, [r2, #20]
   1222c:	9547      	str	r5, [sp, #284]	; 0x11c
   1222e:	9648      	str	r6, [sp, #288]	; 0x120
   12230:	6992      	ldr	r2, [r2, #24]
   12232:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
   12234:	9112      	str	r1, [sp, #72]	; 0x48
   12236:	9011      	str	r0, [sp, #68]	; 0x44
   12238:	9310      	str	r3, [sp, #64]	; 0x40
   1223a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   1223e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   12242:	940d      	str	r4, [sp, #52]	; 0x34
   12244:	950c      	str	r5, [sp, #48]	; 0x30
   12246:	960b      	str	r6, [sp, #44]	; 0x2c
   12248:	920a      	str	r2, [sp, #40]	; 0x28
   1224a:	f7ff ffb2 	bl	121b2 <_ZN3log6logger17hf609e7cc1c031552E>
   1224e:	9009      	str	r0, [sp, #36]	; 0x24
   12250:	9108      	str	r1, [sp, #32]
   12252:	e7ff      	b.n	12254 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
   12254:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
   12256:	f7ff fed0 	bl	11ffa <_ZN3log6Record7builder17hde62ab0132265febE>
   1225a:	e7ff      	b.n	1225c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
   1225c:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
   1225e:	4601      	mov	r1, r0
   12260:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12262:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   12266:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   1226a:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
   1226c:	9007      	str	r0, [sp, #28]
   1226e:	4608      	mov	r0, r1
   12270:	9907      	ldr	r1, [sp, #28]
   12272:	f7ff ff15 	bl	120a0 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
   12276:	9006      	str	r0, [sp, #24]
   12278:	e7ff      	b.n	1227a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
   1227a:	9806      	ldr	r0, [sp, #24]
   1227c:	9912      	ldr	r1, [sp, #72]	; 0x48
   1227e:	f7ff ff20 	bl	120c2 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
   12282:	9005      	str	r0, [sp, #20]
   12284:	e7ff      	b.n	12286 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
   12286:	9805      	ldr	r0, [sp, #20]
   12288:	9910      	ldr	r1, [sp, #64]	; 0x40
   1228a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1228c:	f7ff ff1f 	bl	120ce <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
   12290:	9004      	str	r0, [sp, #16]
   12292:	e7ff      	b.n	12294 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
   12294:	980e      	ldr	r0, [sp, #56]	; 0x38
   12296:	903b      	str	r0, [sp, #236]	; 0xec
   12298:	990d      	ldr	r1, [sp, #52]	; 0x34
   1229a:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
   1229c:	993b      	ldr	r1, [sp, #236]	; 0xec
   1229e:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   122a0:	9804      	ldr	r0, [sp, #16]
   122a2:	f7ff ff1c 	bl	120de <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
   122a6:	9003      	str	r0, [sp, #12]
   122a8:	e7ff      	b.n	122aa <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
   122aa:	980c      	ldr	r0, [sp, #48]	; 0x30
   122ac:	903d      	str	r0, [sp, #244]	; 0xf4
   122ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   122b0:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
   122b2:	993d      	ldr	r1, [sp, #244]	; 0xf4
   122b4:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
   122b6:	9803      	ldr	r0, [sp, #12]
   122b8:	f7ff ff26 	bl	12108 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
   122bc:	9002      	str	r0, [sp, #8]
   122be:	e7ff      	b.n	122c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
   122c0:	980a      	ldr	r0, [sp, #40]	; 0x28
   122c2:	9040      	str	r0, [sp, #256]	; 0x100
   122c4:	2101      	movs	r1, #1
   122c6:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
   122c8:	993f      	ldr	r1, [sp, #252]	; 0xfc
   122ca:	9a40      	ldr	r2, [sp, #256]	; 0x100
   122cc:	9802      	ldr	r0, [sp, #8]
   122ce:	f7ff ff30 	bl	12132 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
   122d2:	9001      	str	r0, [sp, #4]
   122d4:	e7ff      	b.n	122d6 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
   122d6:	a813      	add	r0, sp, #76	; 0x4c
   122d8:	9901      	ldr	r1, [sp, #4]
   122da:	f7ff ff32 	bl	12142 <_ZN3log13RecordBuilder5build17h83529556a009112eE>
   122de:	e7ff      	b.n	122e0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
   122e0:	9808      	ldr	r0, [sp, #32]
   122e2:	6901      	ldr	r1, [r0, #16]
   122e4:	aa13      	add	r2, sp, #76	; 0x4c
   122e6:	9809      	ldr	r0, [sp, #36]	; 0x24
   122e8:	9100      	str	r1, [sp, #0]
   122ea:	4611      	mov	r1, r2
   122ec:	9a00      	ldr	r2, [sp, #0]
   122ee:	4790      	blx	r2
   122f0:	e7ff      	b.n	122f2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
   122f2:	b04a      	add	sp, #296	; 0x128
   122f4:	bd70      	pop	{r4, r5, r6, pc}

000122f6 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
   122f6:	b082      	sub	sp, #8
   122f8:	9100      	str	r1, [sp, #0]
   122fa:	9201      	str	r2, [sp, #4]
   122fc:	6041      	str	r1, [r0, #4]
   122fe:	6082      	str	r2, [r0, #8]
   12300:	2100      	movs	r1, #0
   12302:	6001      	str	r1, [r0, #0]
   12304:	b002      	add	sp, #8
   12306:	4770      	bx	lr

00012308 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   12308:	b081      	sub	sp, #4
   1230a:	9100      	str	r1, [sp, #0]
   1230c:	680a      	ldr	r2, [r1, #0]
   1230e:	684b      	ldr	r3, [r1, #4]
   12310:	6889      	ldr	r1, [r1, #8]
   12312:	6081      	str	r1, [r0, #8]
   12314:	6043      	str	r3, [r0, #4]
   12316:	6002      	str	r2, [r0, #0]
   12318:	b001      	add	sp, #4
   1231a:	4770      	bx	lr

0001231c <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
   1231c:	b570      	push	{r4, r5, r6, lr}
   1231e:	b09c      	sub	sp, #112	; 0x70
   12320:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
   12322:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
   12324:	f101 020c 	add.w	r2, r1, #12
   12328:	4613      	mov	r3, r2
   1232a:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
   1232c:	f101 0224 	add.w	r2, r1, #36	; 0x24
   12330:	4694      	mov	ip, r2
   12332:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
   12334:	f101 0230 	add.w	r2, r1, #48	; 0x30
   12338:	4696      	mov	lr, r2
   1233a:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
   1233c:	f101 023c 	add.w	r2, r1, #60	; 0x3c
   12340:	4614      	mov	r4, r2
   12342:	921b      	str	r2, [sp, #108]	; 0x6c
   12344:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
   12346:	9006      	str	r0, [sp, #24]
   12348:	4610      	mov	r0, r2
   1234a:	9305      	str	r3, [sp, #20]
   1234c:	f8cd c010 	str.w	ip, [sp, #16]
   12350:	f8cd e00c 	str.w	lr, [sp, #12]
   12354:	9402      	str	r4, [sp, #8]
   12356:	f000 f836 	bl	123c6 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   1235a:	e7ff      	b.n	1235c <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
   1235c:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
   1235e:	9905      	ldr	r1, [sp, #20]
   12360:	f7ff fdf8 	bl	11f54 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
   12364:	e7ff      	b.n	12366 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
   12366:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
   12368:	9904      	ldr	r1, [sp, #16]
   1236a:	f7ff fdfc 	bl	11f66 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   1236e:	e7ff      	b.n	12370 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
   12370:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
   12372:	9903      	ldr	r1, [sp, #12]
   12374:	f7ff fdf7 	bl	11f66 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   12378:	e7ff      	b.n	1237a <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
   1237a:	9802      	ldr	r0, [sp, #8]
   1237c:	f7ff fe1a 	bl	11fb4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
   12380:	9001      	str	r0, [sp, #4]
   12382:	9100      	str	r1, [sp, #0]
   12384:	e7ff      	b.n	12386 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
   12386:	9807      	ldr	r0, [sp, #28]
   12388:	9908      	ldr	r1, [sp, #32]
   1238a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1238c:	9b06      	ldr	r3, [sp, #24]
   1238e:	609a      	str	r2, [r3, #8]
   12390:	6059      	str	r1, [r3, #4]
   12392:	6018      	str	r0, [r3, #0]
   12394:	f103 000c 	add.w	r0, r3, #12
   12398:	a90a      	add	r1, sp, #40	; 0x28
   1239a:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
   1239e:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
   123a2:	9810      	ldr	r0, [sp, #64]	; 0x40
   123a4:	9911      	ldr	r1, [sp, #68]	; 0x44
   123a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   123a8:	62da      	str	r2, [r3, #44]	; 0x2c
   123aa:	6299      	str	r1, [r3, #40]	; 0x28
   123ac:	6258      	str	r0, [r3, #36]	; 0x24
   123ae:	9813      	ldr	r0, [sp, #76]	; 0x4c
   123b0:	9914      	ldr	r1, [sp, #80]	; 0x50
   123b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   123b4:	639a      	str	r2, [r3, #56]	; 0x38
   123b6:	6359      	str	r1, [r3, #52]	; 0x34
   123b8:	6318      	str	r0, [r3, #48]	; 0x30
   123ba:	9801      	ldr	r0, [sp, #4]
   123bc:	63d8      	str	r0, [r3, #60]	; 0x3c
   123be:	9900      	ldr	r1, [sp, #0]
   123c0:	6419      	str	r1, [r3, #64]	; 0x40
   123c2:	b01c      	add	sp, #112	; 0x70
   123c4:	bd70      	pop	{r4, r5, r6, pc}

000123c6 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   123c6:	b580      	push	{r7, lr}
   123c8:	b088      	sub	sp, #32
   123ca:	9105      	str	r1, [sp, #20]
    level: Level,
   123cc:	9106      	str	r1, [sp, #24]
    target: &'a str,
   123ce:	1d0a      	adds	r2, r1, #4
   123d0:	4613      	mov	r3, r2
   123d2:	9207      	str	r2, [sp, #28]
    level: Level,
   123d4:	9004      	str	r0, [sp, #16]
   123d6:	4608      	mov	r0, r1
   123d8:	9303      	str	r3, [sp, #12]
   123da:	f7ff fe09 	bl	11ff0 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
   123de:	9002      	str	r0, [sp, #8]
   123e0:	e7ff      	b.n	123e2 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
   123e2:	9803      	ldr	r0, [sp, #12]
   123e4:	f7ff fd55 	bl	11e92 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
   123e8:	9001      	str	r0, [sp, #4]
   123ea:	9100      	str	r1, [sp, #0]
   123ec:	e7ff      	b.n	123ee <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   123ee:	9802      	ldr	r0, [sp, #8]
   123f0:	9904      	ldr	r1, [sp, #16]
   123f2:	6008      	str	r0, [r1, #0]
   123f4:	9a01      	ldr	r2, [sp, #4]
   123f6:	604a      	str	r2, [r1, #4]
   123f8:	9b00      	ldr	r3, [sp, #0]
   123fa:	608b      	str	r3, [r1, #8]
   123fc:	b008      	add	sp, #32
   123fe:	bd80      	pop	{r7, pc}

00012400 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   12400:	b580      	push	{r7, lr}
   12402:	b084      	sub	sp, #16
   12404:	9002      	str	r0, [sp, #8]
   12406:	9103      	str	r1, [sp, #12]
   12408:	6800      	ldr	r0, [r0, #0]
   1240a:	f000 f81c 	bl	12446 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   1240e:	9001      	str	r0, [sp, #4]
   12410:	e7ff      	b.n	12412 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   12412:	9801      	ldr	r0, [sp, #4]
   12414:	f000 0001 	and.w	r0, r0, #1
   12418:	b004      	add	sp, #16
   1241a:	bd80      	pop	{r7, pc}

0001241c <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   1241c:	b089      	sub	sp, #36	; 0x24
   1241e:	9005      	str	r0, [sp, #20]
   12420:	9106      	str	r1, [sp, #24]
   12422:	9107      	str	r1, [sp, #28]
   12424:	9907      	ldr	r1, [sp, #28]
   12426:	9002      	str	r0, [sp, #8]
   12428:	9101      	str	r1, [sp, #4]
   1242a:	e7ff      	b.n	1242c <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   1242c:	9802      	ldr	r0, [sp, #8]
   1242e:	9008      	str	r0, [sp, #32]
   12430:	9908      	ldr	r1, [sp, #32]
   12432:	9100      	str	r1, [sp, #0]
   12434:	e7ff      	b.n	12436 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   12436:	9800      	ldr	r0, [sp, #0]
   12438:	9003      	str	r0, [sp, #12]
   1243a:	9901      	ldr	r1, [sp, #4]
   1243c:	9104      	str	r1, [sp, #16]
   1243e:	9803      	ldr	r0, [sp, #12]
   12440:	9904      	ldr	r1, [sp, #16]
   12442:	b009      	add	sp, #36	; 0x24
   12444:	4770      	bx	lr

00012446 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   12446:	b580      	push	{r7, lr}
   12448:	b088      	sub	sp, #32
   1244a:	9006      	str	r0, [sp, #24]
   1244c:	9107      	str	r1, [sp, #28]
   1244e:	9004      	str	r0, [sp, #16]
   12450:	4608      	mov	r0, r1
   12452:	9103      	str	r1, [sp, #12]
   12454:	f005 fddb 	bl	1800e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12458:	9002      	str	r0, [sp, #8]
   1245a:	e7ff      	b.n	1245c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   1245c:	9802      	ldr	r0, [sp, #8]
   1245e:	07c1      	lsls	r1, r0, #31
   12460:	2900      	cmp	r1, #0
   12462:	d105      	bne.n	12470 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   12464:	e7ff      	b.n	12466 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   12466:	9803      	ldr	r0, [sp, #12]
   12468:	f005 fdd5 	bl	18016 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1246c:	9001      	str	r0, [sp, #4]
   1246e:	e007      	b.n	12480 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   12470:	9804      	ldr	r0, [sp, #16]
   12472:	9903      	ldr	r1, [sp, #12]
   12474:	f006 fbf5 	bl	18c62 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12478:	f88d 0017 	strb.w	r0, [sp, #23]
   1247c:	e7ff      	b.n	1247e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   1247e:	e015      	b.n	124ac <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   12480:	9801      	ldr	r0, [sp, #4]
   12482:	07c1      	lsls	r1, r0, #31
   12484:	2900      	cmp	r1, #0
   12486:	d107      	bne.n	12498 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   12488:	e7ff      	b.n	1248a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   1248a:	9804      	ldr	r0, [sp, #16]
   1248c:	9903      	ldr	r1, [sp, #12]
   1248e:	f006 fddd 	bl	1904c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   12492:	f88d 0017 	strb.w	r0, [sp, #23]
   12496:	e007      	b.n	124a8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   12498:	9804      	ldr	r0, [sp, #16]
   1249a:	9903      	ldr	r1, [sp, #12]
   1249c:	f006 fc4c 	bl	18d38 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   124a0:	f88d 0017 	strb.w	r0, [sp, #23]
   124a4:	e7ff      	b.n	124a6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   124a6:	e000      	b.n	124aa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   124a8:	e7ff      	b.n	124aa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   124aa:	e7ff      	b.n	124ac <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   124ac:	f89d 0017 	ldrb.w	r0, [sp, #23]
   124b0:	b008      	add	sp, #32
   124b2:	bd80      	pop	{r7, pc}

000124b4 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   124b4:	b086      	sub	sp, #24
   124b6:	9004      	str	r0, [sp, #16]
   124b8:	9105      	str	r1, [sp, #20]
   124ba:	9002      	str	r0, [sp, #8]
   124bc:	9103      	str	r1, [sp, #12]
   124be:	9802      	ldr	r0, [sp, #8]
   124c0:	9903      	ldr	r1, [sp, #12]
   124c2:	9000      	str	r0, [sp, #0]
   124c4:	9101      	str	r1, [sp, #4]
   124c6:	9800      	ldr	r0, [sp, #0]
   124c8:	9901      	ldr	r1, [sp, #4]
   124ca:	b006      	add	sp, #24
   124cc:	4770      	bx	lr

000124ce <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   124ce:	b580      	push	{r7, lr}
   124d0:	b084      	sub	sp, #16
   124d2:	9002      	str	r0, [sp, #8]
   124d4:	9103      	str	r1, [sp, #12]
   124d6:	f000 f805 	bl	124e4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   124da:	9001      	str	r0, [sp, #4]
   124dc:	e7ff      	b.n	124de <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   124de:	9801      	ldr	r0, [sp, #4]
   124e0:	b004      	add	sp, #16
   124e2:	bd80      	pop	{r7, pc}

000124e4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   124e4:	b084      	sub	sp, #16
   124e6:	9001      	str	r0, [sp, #4]
   124e8:	9102      	str	r1, [sp, #8]
   124ea:	4408      	add	r0, r1
   124ec:	9003      	str	r0, [sp, #12]
   124ee:	9803      	ldr	r0, [sp, #12]
   124f0:	9000      	str	r0, [sp, #0]
   124f2:	e7ff      	b.n	124f4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   124f4:	9800      	ldr	r0, [sp, #0]
   124f6:	b004      	add	sp, #16
   124f8:	4770      	bx	lr

000124fa <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   124fa:	b580      	push	{r7, lr}
   124fc:	b084      	sub	sp, #16
   124fe:	9002      	str	r0, [sp, #8]
   12500:	9103      	str	r1, [sp, #12]
   12502:	f7ff ffd7 	bl	124b4 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   12506:	9001      	str	r0, [sp, #4]
   12508:	9100      	str	r1, [sp, #0]
   1250a:	e7ff      	b.n	1250c <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   1250c:	9801      	ldr	r0, [sp, #4]
   1250e:	9900      	ldr	r1, [sp, #0]
   12510:	b004      	add	sp, #16
   12512:	bd80      	pop	{r7, pc}

00012514 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   12514:	b084      	sub	sp, #16
   12516:	9002      	str	r0, [sp, #8]
   12518:	9103      	str	r1, [sp, #12]
   1251a:	9000      	str	r0, [sp, #0]
   1251c:	9101      	str	r1, [sp, #4]
   1251e:	9801      	ldr	r0, [sp, #4]
   12520:	b004      	add	sp, #16
   12522:	4770      	bx	lr

00012524 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   12524:	b082      	sub	sp, #8
   12526:	9000      	str	r0, [sp, #0]
   12528:	9101      	str	r1, [sp, #4]
   1252a:	b002      	add	sp, #8
   1252c:	4770      	bx	lr

0001252e <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   1252e:	b082      	sub	sp, #8
   12530:	9000      	str	r0, [sp, #0]
   12532:	9101      	str	r1, [sp, #4]
   12534:	7800      	ldrb	r0, [r0, #0]
   12536:	7809      	ldrb	r1, [r1, #0]
   12538:	1a40      	subs	r0, r0, r1
   1253a:	fab0 f080 	clz	r0, r0
   1253e:	0940      	lsrs	r0, r0, #5
   12540:	b002      	add	sp, #8
   12542:	4770      	bx	lr

00012544 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>:
    fn deref(&self) -> &[T] {
   12544:	b580      	push	{r7, lr}
   12546:	b084      	sub	sp, #16
   12548:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   1254a:	f004 fa81 	bl	16a50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE>
   1254e:	9002      	str	r0, [sp, #8]
   12550:	9101      	str	r1, [sp, #4]
   12552:	e7ff      	b.n	12554 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE+0x10>
    }
   12554:	9802      	ldr	r0, [sp, #8]
   12556:	9901      	ldr	r1, [sp, #4]
   12558:	b004      	add	sp, #16
   1255a:	bd80      	pop	{r7, pc}

0001255c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   1255c:	b580      	push	{r7, lr}
   1255e:	b084      	sub	sp, #16
   12560:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   12562:	f004 fa8a 	bl	16a7a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   12566:	9002      	str	r0, [sp, #8]
   12568:	9101      	str	r1, [sp, #4]
   1256a:	e7ff      	b.n	1256c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   1256c:	9802      	ldr	r0, [sp, #8]
   1256e:	9901      	ldr	r1, [sp, #4]
   12570:	b004      	add	sp, #16
   12572:	bd80      	pop	{r7, pc}

00012574 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   12574:	b580      	push	{r7, lr}
   12576:	b084      	sub	sp, #16
   12578:	9001      	str	r0, [sp, #4]
   1257a:	9102      	str	r1, [sp, #8]
   1257c:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   1257e:	f004 f9c9 	bl	16914 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E>
   12582:	9000      	str	r0, [sp, #0]
   12584:	e7ff      	b.n	12586 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E+0x12>
    }
   12586:	9800      	ldr	r0, [sp, #0]
   12588:	f000 0001 	and.w	r0, r0, #1
   1258c:	b004      	add	sp, #16
   1258e:	bd80      	pop	{r7, pc}

00012590 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   12590:	b580      	push	{r7, lr}
   12592:	b086      	sub	sp, #24
   12594:	460a      	mov	r2, r1
   12596:	9004      	str	r0, [sp, #16]
   12598:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   1259c:	9203      	str	r2, [sp, #12]
   1259e:	f004 fa1c 	bl	169da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   125a2:	9002      	str	r0, [sp, #8]
   125a4:	9101      	str	r1, [sp, #4]
   125a6:	e7ff      	b.n	125a8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   125a8:	9802      	ldr	r0, [sp, #8]
   125aa:	f000 0001 	and.w	r0, r0, #1
   125ae:	9901      	ldr	r1, [sp, #4]
   125b0:	b006      	add	sp, #24
   125b2:	bd80      	pop	{r7, pc}

000125b4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>:
    pub fn clear(&mut self) {
   125b4:	b580      	push	{r7, lr}
   125b6:	b082      	sub	sp, #8
   125b8:	9001      	str	r0, [sp, #4]
        self.0.clear()
   125ba:	f004 fa40 	bl	16a3e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E>
   125be:	e7ff      	b.n	125c0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E+0xc>
    }
   125c0:	b002      	add	sp, #8
   125c2:	bd80      	pop	{r7, pc}

000125c4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   125c4:	b580      	push	{r7, lr}
   125c6:	b082      	sub	sp, #8
   125c8:	9001      	str	r0, [sp, #4]
        self.0.clear()
   125ca:	f004 fa2f 	bl	16a2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   125ce:	e7ff      	b.n	125d0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   125d0:	b002      	add	sp, #8
   125d2:	bd80      	pop	{r7, pc}

000125d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
   125d4:	b081      	sub	sp, #4
   125d6:	9000      	str	r0, [sp, #0]
   125d8:	b001      	add	sp, #4
   125da:	4770      	bx	lr

000125dc <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   125dc:	b580      	push	{r7, lr}
   125de:	b088      	sub	sp, #32
   125e0:	9006      	str	r0, [sp, #24]
   125e2:	9107      	str	r1, [sp, #28]
   125e4:	9004      	str	r0, [sp, #16]
   125e6:	4608      	mov	r0, r1
   125e8:	9103      	str	r1, [sp, #12]
   125ea:	f005 fd10 	bl	1800e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   125ee:	9002      	str	r0, [sp, #8]
   125f0:	e7ff      	b.n	125f2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   125f2:	9802      	ldr	r0, [sp, #8]
   125f4:	07c1      	lsls	r1, r0, #31
   125f6:	2900      	cmp	r1, #0
   125f8:	d105      	bne.n	12606 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   125fa:	e7ff      	b.n	125fc <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   125fc:	9803      	ldr	r0, [sp, #12]
   125fe:	f005 fd0a 	bl	18016 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12602:	9001      	str	r0, [sp, #4]
   12604:	e007      	b.n	12616 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   12606:	9804      	ldr	r0, [sp, #16]
   12608:	9903      	ldr	r1, [sp, #12]
   1260a:	f006 fa0e 	bl	18a2a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   1260e:	f88d 0017 	strb.w	r0, [sp, #23]
   12612:	e7ff      	b.n	12614 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   12614:	e015      	b.n	12642 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   12616:	9801      	ldr	r0, [sp, #4]
   12618:	07c1      	lsls	r1, r0, #31
   1261a:	2900      	cmp	r1, #0
   1261c:	d107      	bne.n	1262e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   1261e:	e7ff      	b.n	12620 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   12620:	9804      	ldr	r0, [sp, #16]
   12622:	9903      	ldr	r1, [sp, #12]
   12624:	f006 fbf3 	bl	18e0e <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   12628:	f88d 0017 	strb.w	r0, [sp, #23]
   1262c:	e007      	b.n	1263e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   1262e:	9804      	ldr	r0, [sp, #16]
   12630:	9903      	ldr	r1, [sp, #12]
   12632:	f006 fa29 	bl	18a88 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   12636:	f88d 0017 	strb.w	r0, [sp, #23]
   1263a:	e7ff      	b.n	1263c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   1263c:	e000      	b.n	12640 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   1263e:	e7ff      	b.n	12640 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   12640:	e7ff      	b.n	12642 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   12642:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12646:	b008      	add	sp, #32
   12648:	bd80      	pop	{r7, pc}

0001264a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   1264a:	b580      	push	{r7, lr}
   1264c:	b088      	sub	sp, #32
   1264e:	9006      	str	r0, [sp, #24]
   12650:	9107      	str	r1, [sp, #28]
   12652:	9004      	str	r0, [sp, #16]
   12654:	4608      	mov	r0, r1
   12656:	9103      	str	r1, [sp, #12]
   12658:	f005 fcd9 	bl	1800e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1265c:	9002      	str	r0, [sp, #8]
   1265e:	e7ff      	b.n	12660 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   12660:	9802      	ldr	r0, [sp, #8]
   12662:	07c1      	lsls	r1, r0, #31
   12664:	2900      	cmp	r1, #0
   12666:	d105      	bne.n	12674 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   12668:	e7ff      	b.n	1266a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   1266a:	9803      	ldr	r0, [sp, #12]
   1266c:	f005 fcd3 	bl	18016 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12670:	9001      	str	r0, [sp, #4]
   12672:	e007      	b.n	12684 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   12674:	9804      	ldr	r0, [sp, #16]
   12676:	9903      	ldr	r1, [sp, #12]
   12678:	f006 faf3 	bl	18c62 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   1267c:	f88d 0017 	strb.w	r0, [sp, #23]
   12680:	e7ff      	b.n	12682 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   12682:	e015      	b.n	126b0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   12684:	9801      	ldr	r0, [sp, #4]
   12686:	07c1      	lsls	r1, r0, #31
   12688:	2900      	cmp	r1, #0
   1268a:	d107      	bne.n	1269c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   1268c:	e7ff      	b.n	1268e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   1268e:	9804      	ldr	r0, [sp, #16]
   12690:	9903      	ldr	r1, [sp, #12]
   12692:	f006 fc61 	bl	18f58 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   12696:	f88d 0017 	strb.w	r0, [sp, #23]
   1269a:	e007      	b.n	126ac <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   1269c:	9804      	ldr	r0, [sp, #16]
   1269e:	9903      	ldr	r1, [sp, #12]
   126a0:	f006 fb4a 	bl	18d38 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   126a4:	f88d 0017 	strb.w	r0, [sp, #23]
   126a8:	e7ff      	b.n	126aa <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   126aa:	e000      	b.n	126ae <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   126ac:	e7ff      	b.n	126ae <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   126ae:	e7ff      	b.n	126b0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   126b0:	f89d 0017 	ldrb.w	r0, [sp, #23]
   126b4:	b008      	add	sp, #32
   126b6:	bd80      	pop	{r7, pc}

000126b8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   126b8:	b580      	push	{r7, lr}
   126ba:	b088      	sub	sp, #32
   126bc:	9006      	str	r0, [sp, #24]
   126be:	9107      	str	r1, [sp, #28]
   126c0:	9004      	str	r0, [sp, #16]
   126c2:	4608      	mov	r0, r1
   126c4:	9103      	str	r1, [sp, #12]
   126c6:	f005 fca2 	bl	1800e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   126ca:	9002      	str	r0, [sp, #8]
   126cc:	e7ff      	b.n	126ce <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   126ce:	9802      	ldr	r0, [sp, #8]
   126d0:	07c1      	lsls	r1, r0, #31
   126d2:	2900      	cmp	r1, #0
   126d4:	d105      	bne.n	126e2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   126d6:	e7ff      	b.n	126d8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   126d8:	9803      	ldr	r0, [sp, #12]
   126da:	f005 fc9c 	bl	18016 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   126de:	9001      	str	r0, [sp, #4]
   126e0:	e007      	b.n	126f2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   126e2:	9804      	ldr	r0, [sp, #16]
   126e4:	9903      	ldr	r1, [sp, #12]
   126e6:	f006 fabc 	bl	18c62 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   126ea:	f88d 0017 	strb.w	r0, [sp, #23]
   126ee:	e7ff      	b.n	126f0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   126f0:	e015      	b.n	1271e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   126f2:	9801      	ldr	r0, [sp, #4]
   126f4:	07c1      	lsls	r1, r0, #31
   126f6:	2900      	cmp	r1, #0
   126f8:	d107      	bne.n	1270a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   126fa:	e7ff      	b.n	126fc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   126fc:	9804      	ldr	r0, [sp, #16]
   126fe:	9903      	ldr	r1, [sp, #12]
   12700:	f006 fca4 	bl	1904c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   12704:	f88d 0017 	strb.w	r0, [sp, #23]
   12708:	e007      	b.n	1271a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   1270a:	9804      	ldr	r0, [sp, #16]
   1270c:	9903      	ldr	r1, [sp, #12]
   1270e:	f006 fb13 	bl	18d38 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   12712:	f88d 0017 	strb.w	r0, [sp, #23]
   12716:	e7ff      	b.n	12718 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   12718:	e000      	b.n	1271c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   1271a:	e7ff      	b.n	1271c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   1271c:	e7ff      	b.n	1271e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   1271e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12722:	b008      	add	sp, #32
   12724:	bd80      	pop	{r7, pc}

00012726 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   12726:	b580      	push	{r7, lr}
   12728:	b084      	sub	sp, #16
   1272a:	9002      	str	r0, [sp, #8]
   1272c:	9103      	str	r1, [sp, #12]
   1272e:	6800      	ldr	r0, [r0, #0]
   12730:	6809      	ldr	r1, [r1, #0]
   12732:	f7ff fefc 	bl	1252e <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   12736:	9001      	str	r0, [sp, #4]
   12738:	e7ff      	b.n	1273a <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   1273a:	9801      	ldr	r0, [sp, #4]
   1273c:	f000 0001 	and.w	r0, r0, #1
   12740:	b004      	add	sp, #16
   12742:	bd80      	pop	{r7, pc}

00012744 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   12744:	b5b0      	push	{r4, r5, r7, lr}
   12746:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   1274a:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   1274c:	f007 fb60 	bl	19e10 <hal_spi_disable>
   12750:	e7ff      	b.n	12752 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   12752:	f240 01f8 	movw	r1, #248	; 0xf8
   12756:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1275a:	2000      	movs	r0, #0
   1275c:	f007 fb16 	bl	19d8c <hal_spi_config>
   12760:	906a      	str	r0, [sp, #424]	; 0x1a8
   12762:	e7ff      	b.n	12764 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   12764:	f64f 6078 	movw	r0, #65144	; 0xfe78
   12768:	f2c0 0001 	movt	r0, #1
   1276c:	6800      	ldr	r0, [r0, #0]
   1276e:	a96a      	add	r1, sp, #424	; 0x1a8
   12770:	916b      	str	r1, [sp, #428]	; 0x1ac
   12772:	906c      	str	r0, [sp, #432]	; 0x1b0
   12774:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   12776:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   1277a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   1277c:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   12780:	6802      	ldr	r2, [r0, #0]
   12782:	680b      	ldr	r3, [r1, #0]
   12784:	429a      	cmp	r2, r3
   12786:	9068      	str	r0, [sp, #416]	; 0x1a0
   12788:	9167      	str	r1, [sp, #412]	; 0x19c
   1278a:	d10c      	bne.n	127a6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   1278c:	e7ff      	b.n	1278e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   1278e:	f245 7004 	movw	r0, #22276	; 0x5704
   12792:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12796:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   1279a:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   1279e:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   127a2:	9066      	str	r0, [sp, #408]	; 0x198
   127a4:	e075      	b.n	12892 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   127a6:	f64f 60d0 	movw	r0, #65232	; 0xfed0
   127aa:	f2c0 0001 	movt	r0, #1
   127ae:	6801      	ldr	r1, [r0, #0]
   127b0:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   127b2:	907c      	str	r0, [sp, #496]	; 0x1f0
   127b4:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   127b6:	927d      	str	r2, [sp, #500]	; 0x1f4
   127b8:	f64f 63ec 	movw	r3, #65260	; 0xfeec
   127bc:	f2c0 0301 	movt	r3, #1
   127c0:	681b      	ldr	r3, [r3, #0]
   127c2:	f64f 6cf0 	movw	ip, #65264	; 0xfef0
   127c6:	f2c0 0c01 	movt	ip, #1
   127ca:	f8dc c000 	ldr.w	ip, [ip]
   127ce:	46ee      	mov	lr, sp
   127d0:	2400      	movs	r4, #0
   127d2:	f8ce 4000 	str.w	r4, [lr]
   127d6:	a87e      	add	r0, sp, #504	; 0x1f8
   127d8:	2201      	movs	r2, #1
   127da:	9165      	str	r1, [sp, #404]	; 0x194
   127dc:	4619      	mov	r1, r3
   127de:	4663      	mov	r3, ip
   127e0:	f7f6 fa3f 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   127e4:	e7ff      	b.n	127e6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   127e6:	a87c      	add	r0, sp, #496	; 0x1f0
   127e8:	9079      	str	r0, [sp, #484]	; 0x1e4
   127ea:	a87d      	add	r0, sp, #500	; 0x1f4
   127ec:	907a      	str	r0, [sp, #488]	; 0x1e8
   127ee:	a87e      	add	r0, sp, #504	; 0x1f8
   127f0:	907b      	str	r0, [sp, #492]	; 0x1ec
   127f2:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   127f4:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   127f8:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   127fa:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   127fe:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   12800:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   12804:	f249 43b1 	movw	r3, #38065	; 0x94b1
   12808:	f2c0 0300 	movt	r3, #0
   1280c:	9164      	str	r1, [sp, #400]	; 0x190
   1280e:	4619      	mov	r1, r3
   12810:	9263      	str	r2, [sp, #396]	; 0x18c
   12812:	f7f6 fe85 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12816:	9062      	str	r0, [sp, #392]	; 0x188
   12818:	9161      	str	r1, [sp, #388]	; 0x184
   1281a:	e7ff      	b.n	1281c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   1281c:	f249 41b1 	movw	r1, #38065	; 0x94b1
   12820:	f2c0 0100 	movt	r1, #0
   12824:	9864      	ldr	r0, [sp, #400]	; 0x190
   12826:	f7f6 fe7b 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1282a:	9060      	str	r0, [sp, #384]	; 0x180
   1282c:	915f      	str	r1, [sp, #380]	; 0x17c
   1282e:	e7ff      	b.n	12830 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   12830:	f647 019b 	movw	r1, #30875	; 0x789b
   12834:	f2c0 0101 	movt	r1, #1
   12838:	9863      	ldr	r0, [sp, #396]	; 0x18c
   1283a:	f7f6 feb0 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1283e:	905e      	str	r0, [sp, #376]	; 0x178
   12840:	915d      	str	r1, [sp, #372]	; 0x174
   12842:	e7ff      	b.n	12844 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   12844:	9862      	ldr	r0, [sp, #392]	; 0x188
   12846:	9073      	str	r0, [sp, #460]	; 0x1cc
   12848:	9961      	ldr	r1, [sp, #388]	; 0x184
   1284a:	9174      	str	r1, [sp, #464]	; 0x1d0
   1284c:	9a60      	ldr	r2, [sp, #384]	; 0x180
   1284e:	9275      	str	r2, [sp, #468]	; 0x1d4
   12850:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   12852:	9376      	str	r3, [sp, #472]	; 0x1d8
   12854:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   12858:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   1285c:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   12860:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   12864:	466c      	mov	r4, sp
   12866:	2503      	movs	r5, #3
   12868:	6025      	str	r5, [r4, #0]
   1286a:	a86d      	add	r0, sp, #436	; 0x1b4
   1286c:	ab73      	add	r3, sp, #460	; 0x1cc
   1286e:	9965      	ldr	r1, [sp, #404]	; 0x194
   12870:	462a      	mov	r2, r5
   12872:	f7f6 f9f6 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12876:	e7ff      	b.n	12878 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   12878:	f64f 700c 	movw	r0, #65292	; 0xff0c
   1287c:	f2c0 0001 	movt	r0, #1
   12880:	f004 fd1d 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12884:	905c      	str	r0, [sp, #368]	; 0x170
   12886:	e7ff      	b.n	12888 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   12888:	a86d      	add	r0, sp, #436	; 0x1b4
   1288a:	995c      	ldr	r1, [sp, #368]	; 0x170
   1288c:	f004 fd54 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12890:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   12892:	f643 405b 	movw	r0, #15451	; 0x3c5b
   12896:	f2c0 0001 	movt	r0, #1
   1289a:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   1289c:	9985      	ldr	r1, [sp, #532]	; 0x214
   1289e:	2000      	movs	r0, #0
   128a0:	9a66      	ldr	r2, [sp, #408]	; 0x198
   128a2:	f007 fb19 	bl	19ed8 <hal_spi_set_txrx_cb>
   128a6:	9084      	str	r0, [sp, #528]	; 0x210
   128a8:	e7ff      	b.n	128aa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   128aa:	f64f 6078 	movw	r0, #65144	; 0xfe78
   128ae:	f2c0 0001 	movt	r0, #1
   128b2:	6800      	ldr	r0, [r0, #0]
   128b4:	a984      	add	r1, sp, #528	; 0x210
   128b6:	9186      	str	r1, [sp, #536]	; 0x218
   128b8:	9087      	str	r0, [sp, #540]	; 0x21c
   128ba:	9886      	ldr	r0, [sp, #536]	; 0x218
   128bc:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   128c0:	9987      	ldr	r1, [sp, #540]	; 0x21c
   128c2:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   128c6:	6802      	ldr	r2, [r0, #0]
   128c8:	680b      	ldr	r3, [r1, #0]
   128ca:	429a      	cmp	r2, r3
   128cc:	905b      	str	r0, [sp, #364]	; 0x16c
   128ce:	915a      	str	r1, [sp, #360]	; 0x168
   128d0:	d105      	bne.n	128de <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   128d2:	e7ff      	b.n	128d4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   128d4:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   128d6:	f007 fa75 	bl	19dc4 <hal_spi_enable>
   128da:	909f      	str	r0, [sp, #636]	; 0x27c
   128dc:	e075      	b.n	129ca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   128de:	f64f 60d0 	movw	r0, #65232	; 0xfed0
   128e2:	f2c0 0001 	movt	r0, #1
   128e6:	6801      	ldr	r1, [r0, #0]
   128e8:	985b      	ldr	r0, [sp, #364]	; 0x16c
   128ea:	9097      	str	r0, [sp, #604]	; 0x25c
   128ec:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   128ee:	9298      	str	r2, [sp, #608]	; 0x260
   128f0:	f64f 7330 	movw	r3, #65328	; 0xff30
   128f4:	f2c0 0301 	movt	r3, #1
   128f8:	681b      	ldr	r3, [r3, #0]
   128fa:	f64f 6cf0 	movw	ip, #65264	; 0xfef0
   128fe:	f2c0 0c01 	movt	ip, #1
   12902:	f8dc c000 	ldr.w	ip, [ip]
   12906:	46ee      	mov	lr, sp
   12908:	2400      	movs	r4, #0
   1290a:	f8ce 4000 	str.w	r4, [lr]
   1290e:	a899      	add	r0, sp, #612	; 0x264
   12910:	2201      	movs	r2, #1
   12912:	9159      	str	r1, [sp, #356]	; 0x164
   12914:	4619      	mov	r1, r3
   12916:	4663      	mov	r3, ip
   12918:	f7f6 f9a3 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1291c:	e7ff      	b.n	1291e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   1291e:	a897      	add	r0, sp, #604	; 0x25c
   12920:	9094      	str	r0, [sp, #592]	; 0x250
   12922:	a898      	add	r0, sp, #608	; 0x260
   12924:	9095      	str	r0, [sp, #596]	; 0x254
   12926:	a899      	add	r0, sp, #612	; 0x264
   12928:	9096      	str	r0, [sp, #600]	; 0x258
   1292a:	9894      	ldr	r0, [sp, #592]	; 0x250
   1292c:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   12930:	9995      	ldr	r1, [sp, #596]	; 0x254
   12932:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   12936:	9a96      	ldr	r2, [sp, #600]	; 0x258
   12938:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   1293c:	f249 43b1 	movw	r3, #38065	; 0x94b1
   12940:	f2c0 0300 	movt	r3, #0
   12944:	9158      	str	r1, [sp, #352]	; 0x160
   12946:	4619      	mov	r1, r3
   12948:	9257      	str	r2, [sp, #348]	; 0x15c
   1294a:	f7f6 fde9 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1294e:	9056      	str	r0, [sp, #344]	; 0x158
   12950:	9155      	str	r1, [sp, #340]	; 0x154
   12952:	e7ff      	b.n	12954 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   12954:	f249 41b1 	movw	r1, #38065	; 0x94b1
   12958:	f2c0 0100 	movt	r1, #0
   1295c:	9858      	ldr	r0, [sp, #352]	; 0x160
   1295e:	f7f6 fddf 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12962:	9054      	str	r0, [sp, #336]	; 0x150
   12964:	9153      	str	r1, [sp, #332]	; 0x14c
   12966:	e7ff      	b.n	12968 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   12968:	f647 019b 	movw	r1, #30875	; 0x789b
   1296c:	f2c0 0101 	movt	r1, #1
   12970:	9857      	ldr	r0, [sp, #348]	; 0x15c
   12972:	f7f6 fe14 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12976:	9052      	str	r0, [sp, #328]	; 0x148
   12978:	9151      	str	r1, [sp, #324]	; 0x144
   1297a:	e7ff      	b.n	1297c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   1297c:	9856      	ldr	r0, [sp, #344]	; 0x158
   1297e:	908e      	str	r0, [sp, #568]	; 0x238
   12980:	9955      	ldr	r1, [sp, #340]	; 0x154
   12982:	918f      	str	r1, [sp, #572]	; 0x23c
   12984:	9a54      	ldr	r2, [sp, #336]	; 0x150
   12986:	9290      	str	r2, [sp, #576]	; 0x240
   12988:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   1298a:	9391      	str	r3, [sp, #580]	; 0x244
   1298c:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   12990:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   12994:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   12998:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   1299c:	466c      	mov	r4, sp
   1299e:	2503      	movs	r5, #3
   129a0:	6025      	str	r5, [r4, #0]
   129a2:	a888      	add	r0, sp, #544	; 0x220
   129a4:	ab8e      	add	r3, sp, #568	; 0x238
   129a6:	9959      	ldr	r1, [sp, #356]	; 0x164
   129a8:	462a      	mov	r2, r5
   129aa:	f7f6 f95a 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   129ae:	e7ff      	b.n	129b0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   129b0:	f64f 7034 	movw	r0, #65332	; 0xff34
   129b4:	f2c0 0001 	movt	r0, #1
   129b8:	f004 fc81 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   129bc:	9050      	str	r0, [sp, #320]	; 0x140
   129be:	e7ff      	b.n	129c0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   129c0:	a888      	add	r0, sp, #544	; 0x220
   129c2:	9950      	ldr	r1, [sp, #320]	; 0x140
   129c4:	f004 fcb8 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   129c8:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   129ca:	f64f 6078 	movw	r0, #65144	; 0xfe78
   129ce:	f2c0 0001 	movt	r0, #1
   129d2:	6800      	ldr	r0, [r0, #0]
   129d4:	a99f      	add	r1, sp, #636	; 0x27c
   129d6:	91a0      	str	r1, [sp, #640]	; 0x280
   129d8:	90a1      	str	r0, [sp, #644]	; 0x284
   129da:	98a0      	ldr	r0, [sp, #640]	; 0x280
   129dc:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   129e0:	99a1      	ldr	r1, [sp, #644]	; 0x284
   129e2:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   129e6:	6802      	ldr	r2, [r0, #0]
   129e8:	680b      	ldr	r3, [r1, #0]
   129ea:	429a      	cmp	r2, r3
   129ec:	904f      	str	r0, [sp, #316]	; 0x13c
   129ee:	914e      	str	r1, [sp, #312]	; 0x138
   129f0:	d106      	bne.n	12a00 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   129f2:	e7ff      	b.n	129f4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   129f4:	2019      	movs	r0, #25
   129f6:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   129f8:	f006 fdba 	bl	19570 <hal_gpio_init_out>
   129fc:	90b9      	str	r0, [sp, #740]	; 0x2e4
   129fe:	e075      	b.n	12aec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12a00:	f64f 60d0 	movw	r0, #65232	; 0xfed0
   12a04:	f2c0 0001 	movt	r0, #1
   12a08:	6801      	ldr	r1, [r0, #0]
   12a0a:	984f      	ldr	r0, [sp, #316]	; 0x13c
   12a0c:	90b1      	str	r0, [sp, #708]	; 0x2c4
   12a0e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   12a10:	92b2      	str	r2, [sp, #712]	; 0x2c8
   12a12:	f64f 735c 	movw	r3, #65372	; 0xff5c
   12a16:	f2c0 0301 	movt	r3, #1
   12a1a:	681b      	ldr	r3, [r3, #0]
   12a1c:	f64f 6cf0 	movw	ip, #65264	; 0xfef0
   12a20:	f2c0 0c01 	movt	ip, #1
   12a24:	f8dc c000 	ldr.w	ip, [ip]
   12a28:	46ee      	mov	lr, sp
   12a2a:	2400      	movs	r4, #0
   12a2c:	f8ce 4000 	str.w	r4, [lr]
   12a30:	a8b3      	add	r0, sp, #716	; 0x2cc
   12a32:	2201      	movs	r2, #1
   12a34:	914d      	str	r1, [sp, #308]	; 0x134
   12a36:	4619      	mov	r1, r3
   12a38:	4663      	mov	r3, ip
   12a3a:	f7f6 f912 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12a3e:	e7ff      	b.n	12a40 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   12a40:	a8b1      	add	r0, sp, #708	; 0x2c4
   12a42:	90ae      	str	r0, [sp, #696]	; 0x2b8
   12a44:	a8b2      	add	r0, sp, #712	; 0x2c8
   12a46:	90af      	str	r0, [sp, #700]	; 0x2bc
   12a48:	a8b3      	add	r0, sp, #716	; 0x2cc
   12a4a:	90b0      	str	r0, [sp, #704]	; 0x2c0
   12a4c:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   12a4e:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   12a52:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   12a54:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   12a58:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   12a5a:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   12a5e:	f249 43b1 	movw	r3, #38065	; 0x94b1
   12a62:	f2c0 0300 	movt	r3, #0
   12a66:	914c      	str	r1, [sp, #304]	; 0x130
   12a68:	4619      	mov	r1, r3
   12a6a:	924b      	str	r2, [sp, #300]	; 0x12c
   12a6c:	f7f6 fd58 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12a70:	904a      	str	r0, [sp, #296]	; 0x128
   12a72:	9149      	str	r1, [sp, #292]	; 0x124
   12a74:	e7ff      	b.n	12a76 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   12a76:	f249 41b1 	movw	r1, #38065	; 0x94b1
   12a7a:	f2c0 0100 	movt	r1, #0
   12a7e:	984c      	ldr	r0, [sp, #304]	; 0x130
   12a80:	f7f6 fd4e 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12a84:	9048      	str	r0, [sp, #288]	; 0x120
   12a86:	9147      	str	r1, [sp, #284]	; 0x11c
   12a88:	e7ff      	b.n	12a8a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   12a8a:	f647 019b 	movw	r1, #30875	; 0x789b
   12a8e:	f2c0 0101 	movt	r1, #1
   12a92:	984b      	ldr	r0, [sp, #300]	; 0x12c
   12a94:	f7f6 fd83 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12a98:	9046      	str	r0, [sp, #280]	; 0x118
   12a9a:	9145      	str	r1, [sp, #276]	; 0x114
   12a9c:	e7ff      	b.n	12a9e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   12a9e:	984a      	ldr	r0, [sp, #296]	; 0x128
   12aa0:	90a8      	str	r0, [sp, #672]	; 0x2a0
   12aa2:	9949      	ldr	r1, [sp, #292]	; 0x124
   12aa4:	91a9      	str	r1, [sp, #676]	; 0x2a4
   12aa6:	9a48      	ldr	r2, [sp, #288]	; 0x120
   12aa8:	92aa      	str	r2, [sp, #680]	; 0x2a8
   12aaa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   12aac:	93ab      	str	r3, [sp, #684]	; 0x2ac
   12aae:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   12ab2:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   12ab6:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   12aba:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   12abe:	466c      	mov	r4, sp
   12ac0:	2503      	movs	r5, #3
   12ac2:	6025      	str	r5, [r4, #0]
   12ac4:	a8a2      	add	r0, sp, #648	; 0x288
   12ac6:	aba8      	add	r3, sp, #672	; 0x2a0
   12ac8:	994d      	ldr	r1, [sp, #308]	; 0x134
   12aca:	462a      	mov	r2, r5
   12acc:	f7f6 f8c9 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12ad0:	e7ff      	b.n	12ad2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   12ad2:	f64f 7060 	movw	r0, #65376	; 0xff60
   12ad6:	f2c0 0001 	movt	r0, #1
   12ada:	f004 fbf0 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12ade:	9044      	str	r0, [sp, #272]	; 0x110
   12ae0:	e7ff      	b.n	12ae2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   12ae2:	a8a2      	add	r0, sp, #648	; 0x288
   12ae4:	9944      	ldr	r1, [sp, #272]	; 0x110
   12ae6:	f004 fc27 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12aea:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12aec:	f64f 6078 	movw	r0, #65144	; 0xfe78
   12af0:	f2c0 0001 	movt	r0, #1
   12af4:	6800      	ldr	r0, [r0, #0]
   12af6:	a9b9      	add	r1, sp, #740	; 0x2e4
   12af8:	91ba      	str	r1, [sp, #744]	; 0x2e8
   12afa:	90bb      	str	r0, [sp, #748]	; 0x2ec
   12afc:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   12afe:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   12b02:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   12b04:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   12b08:	6802      	ldr	r2, [r0, #0]
   12b0a:	680b      	ldr	r3, [r1, #0]
   12b0c:	429a      	cmp	r2, r3
   12b0e:	9043      	str	r0, [sp, #268]	; 0x10c
   12b10:	9142      	str	r1, [sp, #264]	; 0x108
   12b12:	d106      	bne.n	12b22 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   12b14:	e7ff      	b.n	12b16 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   12b16:	2012      	movs	r0, #18
   12b18:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12b1a:	f006 fd29 	bl	19570 <hal_gpio_init_out>
   12b1e:	90d3      	str	r0, [sp, #844]	; 0x34c
   12b20:	e075      	b.n	12c0e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12b22:	f64f 60d0 	movw	r0, #65232	; 0xfed0
   12b26:	f2c0 0001 	movt	r0, #1
   12b2a:	6801      	ldr	r1, [r0, #0]
   12b2c:	9843      	ldr	r0, [sp, #268]	; 0x10c
   12b2e:	90cb      	str	r0, [sp, #812]	; 0x32c
   12b30:	9a42      	ldr	r2, [sp, #264]	; 0x108
   12b32:	92cc      	str	r2, [sp, #816]	; 0x330
   12b34:	f64f 7384 	movw	r3, #65412	; 0xff84
   12b38:	f2c0 0301 	movt	r3, #1
   12b3c:	681b      	ldr	r3, [r3, #0]
   12b3e:	f64f 6cf0 	movw	ip, #65264	; 0xfef0
   12b42:	f2c0 0c01 	movt	ip, #1
   12b46:	f8dc c000 	ldr.w	ip, [ip]
   12b4a:	46ee      	mov	lr, sp
   12b4c:	2400      	movs	r4, #0
   12b4e:	f8ce 4000 	str.w	r4, [lr]
   12b52:	a8cd      	add	r0, sp, #820	; 0x334
   12b54:	2201      	movs	r2, #1
   12b56:	9141      	str	r1, [sp, #260]	; 0x104
   12b58:	4619      	mov	r1, r3
   12b5a:	4663      	mov	r3, ip
   12b5c:	f7f6 f881 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12b60:	e7ff      	b.n	12b62 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   12b62:	a8cb      	add	r0, sp, #812	; 0x32c
   12b64:	90c8      	str	r0, [sp, #800]	; 0x320
   12b66:	a8cc      	add	r0, sp, #816	; 0x330
   12b68:	90c9      	str	r0, [sp, #804]	; 0x324
   12b6a:	a8cd      	add	r0, sp, #820	; 0x334
   12b6c:	90ca      	str	r0, [sp, #808]	; 0x328
   12b6e:	98c8      	ldr	r0, [sp, #800]	; 0x320
   12b70:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   12b74:	99c9      	ldr	r1, [sp, #804]	; 0x324
   12b76:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   12b7a:	9aca      	ldr	r2, [sp, #808]	; 0x328
   12b7c:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   12b80:	f249 43b1 	movw	r3, #38065	; 0x94b1
   12b84:	f2c0 0300 	movt	r3, #0
   12b88:	9140      	str	r1, [sp, #256]	; 0x100
   12b8a:	4619      	mov	r1, r3
   12b8c:	923f      	str	r2, [sp, #252]	; 0xfc
   12b8e:	f7f6 fcc7 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12b92:	903e      	str	r0, [sp, #248]	; 0xf8
   12b94:	913d      	str	r1, [sp, #244]	; 0xf4
   12b96:	e7ff      	b.n	12b98 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   12b98:	f249 41b1 	movw	r1, #38065	; 0x94b1
   12b9c:	f2c0 0100 	movt	r1, #0
   12ba0:	9840      	ldr	r0, [sp, #256]	; 0x100
   12ba2:	f7f6 fcbd 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12ba6:	903c      	str	r0, [sp, #240]	; 0xf0
   12ba8:	913b      	str	r1, [sp, #236]	; 0xec
   12baa:	e7ff      	b.n	12bac <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   12bac:	f647 019b 	movw	r1, #30875	; 0x789b
   12bb0:	f2c0 0101 	movt	r1, #1
   12bb4:	983f      	ldr	r0, [sp, #252]	; 0xfc
   12bb6:	f7f6 fcf2 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12bba:	903a      	str	r0, [sp, #232]	; 0xe8
   12bbc:	9139      	str	r1, [sp, #228]	; 0xe4
   12bbe:	e7ff      	b.n	12bc0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   12bc0:	983e      	ldr	r0, [sp, #248]	; 0xf8
   12bc2:	90c2      	str	r0, [sp, #776]	; 0x308
   12bc4:	993d      	ldr	r1, [sp, #244]	; 0xf4
   12bc6:	91c3      	str	r1, [sp, #780]	; 0x30c
   12bc8:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   12bca:	92c4      	str	r2, [sp, #784]	; 0x310
   12bcc:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   12bce:	93c5      	str	r3, [sp, #788]	; 0x314
   12bd0:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   12bd4:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   12bd8:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   12bdc:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   12be0:	466c      	mov	r4, sp
   12be2:	2503      	movs	r5, #3
   12be4:	6025      	str	r5, [r4, #0]
   12be6:	a8bc      	add	r0, sp, #752	; 0x2f0
   12be8:	abc2      	add	r3, sp, #776	; 0x308
   12bea:	9941      	ldr	r1, [sp, #260]	; 0x104
   12bec:	462a      	mov	r2, r5
   12bee:	f7f6 f838 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12bf2:	e7ff      	b.n	12bf4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   12bf4:	f64f 7088 	movw	r0, #65416	; 0xff88
   12bf8:	f2c0 0001 	movt	r0, #1
   12bfc:	f004 fb5f 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12c00:	9038      	str	r0, [sp, #224]	; 0xe0
   12c02:	e7ff      	b.n	12c04 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   12c04:	a8bc      	add	r0, sp, #752	; 0x2f0
   12c06:	9938      	ldr	r1, [sp, #224]	; 0xe0
   12c08:	f004 fb96 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12c0c:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12c0e:	f64f 6078 	movw	r0, #65144	; 0xfe78
   12c12:	f2c0 0001 	movt	r0, #1
   12c16:	6800      	ldr	r0, [r0, #0]
   12c18:	a9d3      	add	r1, sp, #844	; 0x34c
   12c1a:	91d4      	str	r1, [sp, #848]	; 0x350
   12c1c:	90d5      	str	r0, [sp, #852]	; 0x354
   12c1e:	98d4      	ldr	r0, [sp, #848]	; 0x350
   12c20:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   12c24:	99d5      	ldr	r1, [sp, #852]	; 0x354
   12c26:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   12c2a:	6802      	ldr	r2, [r0, #0]
   12c2c:	680b      	ldr	r3, [r1, #0]
   12c2e:	429a      	cmp	r2, r3
   12c30:	9037      	str	r0, [sp, #220]	; 0xdc
   12c32:	9136      	str	r1, [sp, #216]	; 0xd8
   12c34:	d107      	bne.n	12c46 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   12c36:	e7ff      	b.n	12c38 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   12c38:	f245 20a4 	movw	r0, #21156	; 0x52a4
   12c3c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12c40:	f007 fda0 	bl	1a784 <os_eventq_init>
   12c44:	e075      	b.n	12d32 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12c46:	f64f 60d0 	movw	r0, #65232	; 0xfed0
   12c4a:	f2c0 0001 	movt	r0, #1
   12c4e:	6801      	ldr	r1, [r0, #0]
   12c50:	9837      	ldr	r0, [sp, #220]	; 0xdc
   12c52:	90e5      	str	r0, [sp, #916]	; 0x394
   12c54:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   12c56:	92e6      	str	r2, [sp, #920]	; 0x398
   12c58:	f64f 7384 	movw	r3, #65412	; 0xff84
   12c5c:	f2c0 0301 	movt	r3, #1
   12c60:	681b      	ldr	r3, [r3, #0]
   12c62:	f64f 6cf0 	movw	ip, #65264	; 0xfef0
   12c66:	f2c0 0c01 	movt	ip, #1
   12c6a:	f8dc c000 	ldr.w	ip, [ip]
   12c6e:	46ee      	mov	lr, sp
   12c70:	2400      	movs	r4, #0
   12c72:	f8ce 4000 	str.w	r4, [lr]
   12c76:	a8e7      	add	r0, sp, #924	; 0x39c
   12c78:	2201      	movs	r2, #1
   12c7a:	9135      	str	r1, [sp, #212]	; 0xd4
   12c7c:	4619      	mov	r1, r3
   12c7e:	4663      	mov	r3, ip
   12c80:	f7f5 ffef 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12c84:	e7ff      	b.n	12c86 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   12c86:	a8e5      	add	r0, sp, #916	; 0x394
   12c88:	90e2      	str	r0, [sp, #904]	; 0x388
   12c8a:	a8e6      	add	r0, sp, #920	; 0x398
   12c8c:	90e3      	str	r0, [sp, #908]	; 0x38c
   12c8e:	a8e7      	add	r0, sp, #924	; 0x39c
   12c90:	90e4      	str	r0, [sp, #912]	; 0x390
   12c92:	98e2      	ldr	r0, [sp, #904]	; 0x388
   12c94:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   12c98:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   12c9a:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   12c9e:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   12ca0:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   12ca4:	f249 43b1 	movw	r3, #38065	; 0x94b1
   12ca8:	f2c0 0300 	movt	r3, #0
   12cac:	9134      	str	r1, [sp, #208]	; 0xd0
   12cae:	4619      	mov	r1, r3
   12cb0:	9233      	str	r2, [sp, #204]	; 0xcc
   12cb2:	f7f6 fc35 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12cb6:	9032      	str	r0, [sp, #200]	; 0xc8
   12cb8:	9131      	str	r1, [sp, #196]	; 0xc4
   12cba:	e7ff      	b.n	12cbc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   12cbc:	f249 41b1 	movw	r1, #38065	; 0x94b1
   12cc0:	f2c0 0100 	movt	r1, #0
   12cc4:	9834      	ldr	r0, [sp, #208]	; 0xd0
   12cc6:	f7f6 fc2b 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12cca:	9030      	str	r0, [sp, #192]	; 0xc0
   12ccc:	912f      	str	r1, [sp, #188]	; 0xbc
   12cce:	e7ff      	b.n	12cd0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   12cd0:	f647 019b 	movw	r1, #30875	; 0x789b
   12cd4:	f2c0 0101 	movt	r1, #1
   12cd8:	9833      	ldr	r0, [sp, #204]	; 0xcc
   12cda:	f7f6 fc60 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12cde:	902e      	str	r0, [sp, #184]	; 0xb8
   12ce0:	912d      	str	r1, [sp, #180]	; 0xb4
   12ce2:	e7ff      	b.n	12ce4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   12ce4:	9832      	ldr	r0, [sp, #200]	; 0xc8
   12ce6:	90dc      	str	r0, [sp, #880]	; 0x370
   12ce8:	9931      	ldr	r1, [sp, #196]	; 0xc4
   12cea:	91dd      	str	r1, [sp, #884]	; 0x374
   12cec:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   12cee:	92de      	str	r2, [sp, #888]	; 0x378
   12cf0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   12cf2:	93df      	str	r3, [sp, #892]	; 0x37c
   12cf4:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   12cf8:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   12cfc:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   12d00:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   12d04:	466c      	mov	r4, sp
   12d06:	2503      	movs	r5, #3
   12d08:	6025      	str	r5, [r4, #0]
   12d0a:	a8d6      	add	r0, sp, #856	; 0x358
   12d0c:	abdc      	add	r3, sp, #880	; 0x370
   12d0e:	9935      	ldr	r1, [sp, #212]	; 0xd4
   12d10:	462a      	mov	r2, r5
   12d12:	f7f5 ffa6 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12d16:	e7ff      	b.n	12d18 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   12d18:	f64f 7098 	movw	r0, #65432	; 0xff98
   12d1c:	f2c0 0001 	movt	r0, #1
   12d20:	f004 facd 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12d24:	902c      	str	r0, [sp, #176]	; 0xb0
   12d26:	e7ff      	b.n	12d28 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   12d28:	a8d6      	add	r0, sp, #856	; 0x358
   12d2a:	992c      	ldr	r1, [sp, #176]	; 0xb0
   12d2c:	f004 fb04 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12d30:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   12d32:	f243 603d 	movw	r0, #13885	; 0x363d
   12d36:	f2c0 0001 	movt	r0, #1
   12d3a:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   12d3c:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   12d3e:	f245 208c 	movw	r0, #21132	; 0x528c
   12d42:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12d46:	2200      	movs	r2, #0
   12d48:	f007 fdca 	bl	1a8e0 <os_mqueue_init>
   12d4c:	90ed      	str	r0, [sp, #948]	; 0x3b4
   12d4e:	e7ff      	b.n	12d50 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   12d50:	f64f 6078 	movw	r0, #65144	; 0xfe78
   12d54:	f2c0 0001 	movt	r0, #1
   12d58:	6800      	ldr	r0, [r0, #0]
   12d5a:	a9ed      	add	r1, sp, #948	; 0x3b4
   12d5c:	91ef      	str	r1, [sp, #956]	; 0x3bc
   12d5e:	90f0      	str	r0, [sp, #960]	; 0x3c0
   12d60:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   12d62:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   12d66:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   12d68:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   12d6c:	6802      	ldr	r2, [r0, #0]
   12d6e:	680b      	ldr	r3, [r1, #0]
   12d70:	429a      	cmp	r2, r3
   12d72:	902b      	str	r0, [sp, #172]	; 0xac
   12d74:	912a      	str	r1, [sp, #168]	; 0xa8
   12d76:	d10a      	bne.n	12d8e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   12d78:	e7ff      	b.n	12d7a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   12d7a:	f245 207c 	movw	r0, #21116	; 0x527c
   12d7e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12d82:	2100      	movs	r1, #0
   12d84:	f008 faa6 	bl	1b2d4 <os_sem_init>
   12d88:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   12d8c:	e07b      	b.n	12e86 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   12d8e:	f64f 60d0 	movw	r0, #65232	; 0xfed0
   12d92:	f2c0 0001 	movt	r0, #1
   12d96:	6801      	ldr	r1, [r0, #0]
   12d98:	982b      	ldr	r0, [sp, #172]	; 0xac
   12d9a:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   12d9e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   12da0:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   12da4:	f64f 73bc 	movw	r3, #65468	; 0xffbc
   12da8:	f2c0 0301 	movt	r3, #1
   12dac:	681b      	ldr	r3, [r3, #0]
   12dae:	f64f 6cf0 	movw	ip, #65264	; 0xfef0
   12db2:	f2c0 0c01 	movt	ip, #1
   12db6:	f8dc c000 	ldr.w	ip, [ip]
   12dba:	46ee      	mov	lr, sp
   12dbc:	2400      	movs	r4, #0
   12dbe:	f8ce 4000 	str.w	r4, [lr]
   12dc2:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   12dc6:	2201      	movs	r2, #1
   12dc8:	9129      	str	r1, [sp, #164]	; 0xa4
   12dca:	4619      	mov	r1, r3
   12dcc:	4663      	mov	r3, ip
   12dce:	f7f5 ff48 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12dd2:	e7ff      	b.n	12dd4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   12dd4:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   12dd8:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   12dda:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   12dde:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   12de0:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   12de4:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   12de6:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   12de8:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   12dec:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   12dee:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   12df2:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   12df4:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   12df8:	f249 43b1 	movw	r3, #38065	; 0x94b1
   12dfc:	f2c0 0300 	movt	r3, #0
   12e00:	9128      	str	r1, [sp, #160]	; 0xa0
   12e02:	4619      	mov	r1, r3
   12e04:	9227      	str	r2, [sp, #156]	; 0x9c
   12e06:	f7f6 fb8b 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12e0a:	9026      	str	r0, [sp, #152]	; 0x98
   12e0c:	9125      	str	r1, [sp, #148]	; 0x94
   12e0e:	e7ff      	b.n	12e10 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   12e10:	f249 41b1 	movw	r1, #38065	; 0x94b1
   12e14:	f2c0 0100 	movt	r1, #0
   12e18:	9828      	ldr	r0, [sp, #160]	; 0xa0
   12e1a:	f7f6 fb81 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12e1e:	9024      	str	r0, [sp, #144]	; 0x90
   12e20:	9123      	str	r1, [sp, #140]	; 0x8c
   12e22:	e7ff      	b.n	12e24 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   12e24:	f647 019b 	movw	r1, #30875	; 0x789b
   12e28:	f2c0 0101 	movt	r1, #1
   12e2c:	9827      	ldr	r0, [sp, #156]	; 0x9c
   12e2e:	f7f6 fbb6 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12e32:	9022      	str	r0, [sp, #136]	; 0x88
   12e34:	9121      	str	r1, [sp, #132]	; 0x84
   12e36:	e7ff      	b.n	12e38 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   12e38:	9826      	ldr	r0, [sp, #152]	; 0x98
   12e3a:	90f7      	str	r0, [sp, #988]	; 0x3dc
   12e3c:	9925      	ldr	r1, [sp, #148]	; 0x94
   12e3e:	91f8      	str	r1, [sp, #992]	; 0x3e0
   12e40:	9a24      	ldr	r2, [sp, #144]	; 0x90
   12e42:	92f9      	str	r2, [sp, #996]	; 0x3e4
   12e44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   12e46:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   12e48:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   12e4c:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   12e50:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   12e54:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   12e58:	466c      	mov	r4, sp
   12e5a:	2503      	movs	r5, #3
   12e5c:	6025      	str	r5, [r4, #0]
   12e5e:	a8f1      	add	r0, sp, #964	; 0x3c4
   12e60:	abf7      	add	r3, sp, #988	; 0x3dc
   12e62:	9929      	ldr	r1, [sp, #164]	; 0xa4
   12e64:	462a      	mov	r2, r5
   12e66:	f7f5 fefc 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12e6a:	e7ff      	b.n	12e6c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   12e6c:	f64f 70c0 	movw	r0, #65472	; 0xffc0
   12e70:	f2c0 0001 	movt	r0, #1
   12e74:	f004 fa23 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12e78:	9020      	str	r0, [sp, #128]	; 0x80
   12e7a:	e7ff      	b.n	12e7c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   12e7c:	a8f1      	add	r0, sp, #964	; 0x3c4
   12e7e:	9920      	ldr	r1, [sp, #128]	; 0x80
   12e80:	f004 fa5a 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12e84:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12e86:	f64f 6078 	movw	r0, #65144	; 0xfe78
   12e8a:	f2c0 0001 	movt	r0, #1
   12e8e:	6800      	ldr	r0, [r0, #0]
   12e90:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   12e94:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   12e98:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   12e9c:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   12ea0:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   12ea4:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   12ea8:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   12eac:	6802      	ldr	r2, [r0, #0]
   12eae:	680b      	ldr	r3, [r1, #0]
   12eb0:	429a      	cmp	r2, r3
   12eb2:	901f      	str	r0, [sp, #124]	; 0x7c
   12eb4:	911e      	str	r1, [sp, #120]	; 0x78
   12eb6:	d10a      	bne.n	12ece <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   12eb8:	e7ff      	b.n	12eba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   12eba:	f245 2084 	movw	r0, #21124	; 0x5284
   12ebe:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12ec2:	2102      	movs	r1, #2
   12ec4:	f008 fa06 	bl	1b2d4 <os_sem_init>
   12ec8:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   12ecc:	e088      	b.n	12fe0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12ece:	f64f 60d0 	movw	r0, #65232	; 0xfed0
   12ed2:	f2c0 0001 	movt	r0, #1
   12ed6:	6801      	ldr	r1, [r0, #0]
   12ed8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12eda:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   12ede:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   12ee0:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   12ee4:	f64f 73e8 	movw	r3, #65512	; 0xffe8
   12ee8:	f2c0 0301 	movt	r3, #1
   12eec:	681b      	ldr	r3, [r3, #0]
   12eee:	f64f 6cf0 	movw	ip, #65264	; 0xfef0
   12ef2:	f2c0 0c01 	movt	ip, #1
   12ef6:	f8dc c000 	ldr.w	ip, [ip]
   12efa:	46ee      	mov	lr, sp
   12efc:	2400      	movs	r4, #0
   12efe:	f8ce 4000 	str.w	r4, [lr]
   12f02:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   12f06:	2201      	movs	r2, #1
   12f08:	911d      	str	r1, [sp, #116]	; 0x74
   12f0a:	4619      	mov	r1, r3
   12f0c:	4663      	mov	r3, ip
   12f0e:	f7f5 fea8 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12f12:	e7ff      	b.n	12f14 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   12f14:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   12f18:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   12f1c:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   12f20:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   12f24:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   12f28:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   12f2c:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   12f30:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   12f34:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   12f38:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   12f3c:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   12f40:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   12f44:	f249 5305 	movw	r3, #38149	; 0x9505
   12f48:	f2c0 0300 	movt	r3, #0
   12f4c:	911c      	str	r1, [sp, #112]	; 0x70
   12f4e:	4619      	mov	r1, r3
   12f50:	921b      	str	r2, [sp, #108]	; 0x6c
   12f52:	f7f6 fb0f 	bl	9574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   12f56:	901a      	str	r0, [sp, #104]	; 0x68
   12f58:	9119      	str	r1, [sp, #100]	; 0x64
   12f5a:	e7ff      	b.n	12f5c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   12f5c:	f249 5105 	movw	r1, #38149	; 0x9505
   12f60:	f2c0 0100 	movt	r1, #0
   12f64:	981c      	ldr	r0, [sp, #112]	; 0x70
   12f66:	f7f6 fb05 	bl	9574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   12f6a:	9018      	str	r0, [sp, #96]	; 0x60
   12f6c:	9117      	str	r1, [sp, #92]	; 0x5c
   12f6e:	e7ff      	b.n	12f70 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   12f70:	f647 019b 	movw	r1, #30875	; 0x789b
   12f74:	f2c0 0101 	movt	r1, #1
   12f78:	981b      	ldr	r0, [sp, #108]	; 0x6c
   12f7a:	f7f6 fb10 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12f7e:	9016      	str	r0, [sp, #88]	; 0x58
   12f80:	9115      	str	r1, [sp, #84]	; 0x54
   12f82:	e7ff      	b.n	12f84 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   12f84:	981a      	ldr	r0, [sp, #104]	; 0x68
   12f86:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   12f8a:	9919      	ldr	r1, [sp, #100]	; 0x64
   12f8c:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   12f90:	9a18      	ldr	r2, [sp, #96]	; 0x60
   12f92:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   12f96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12f98:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   12f9c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   12fa0:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   12fa4:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   12fa8:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   12fac:	466c      	mov	r4, sp
   12fae:	2503      	movs	r5, #3
   12fb0:	6025      	str	r5, [r4, #0]
   12fb2:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   12fb6:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   12fba:	991d      	ldr	r1, [sp, #116]	; 0x74
   12fbc:	462a      	mov	r2, r5
   12fbe:	f7f5 fe50 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12fc2:	e7ff      	b.n	12fc4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   12fc4:	f64f 70ec 	movw	r0, #65516	; 0xffec
   12fc8:	f2c0 0001 	movt	r0, #1
   12fcc:	f004 f977 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12fd0:	9014      	str	r0, [sp, #80]	; 0x50
   12fd2:	e7ff      	b.n	12fd4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   12fd4:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   12fd8:	9914      	ldr	r1, [sp, #80]	; 0x50
   12fda:	f004 f9ad 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12fde:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12fe0:	f64f 6078 	movw	r0, #65144	; 0xfe78
   12fe4:	f2c0 0001 	movt	r0, #1
   12fe8:	6800      	ldr	r0, [r0, #0]
   12fea:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   12fee:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   12ff2:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   12ff6:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   12ffa:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   12ffe:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   13002:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   13006:	6802      	ldr	r2, [r0, #0]
   13008:	680b      	ldr	r3, [r1, #0]
   1300a:	429a      	cmp	r2, r3
   1300c:	9013      	str	r0, [sp, #76]	; 0x4c
   1300e:	9112      	str	r1, [sp, #72]	; 0x48
   13010:	d125      	bne.n	1305e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   13012:	e7ff      	b.n	13014 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   13014:	f240 0018 	movw	r0, #24
   13018:	f2c0 0002 	movt	r0, #2
   1301c:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   1301e:	f243 10bf 	movw	r0, #12735	; 0x31bf
   13022:	f2c0 0001 	movt	r0, #1
   13026:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   1302a:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   1302e:	4668      	mov	r0, sp
   13030:	f44f 7380 	mov.w	r3, #256	; 0x100
   13034:	6103      	str	r3, [r0, #16]
   13036:	60c3      	str	r3, [r0, #12]
   13038:	f245 3304 	movw	r3, #21252	; 0x5304
   1303c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13040:	6083      	str	r3, [r0, #8]
   13042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13046:	6043      	str	r3, [r0, #4]
   13048:	230a      	movs	r3, #10
   1304a:	6003      	str	r3, [r0, #0]
   1304c:	f245 20b4 	movw	r0, #21172	; 0x52b4
   13050:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13054:	2300      	movs	r3, #0
   13056:	f7f5 fefe 	bl	8e56 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   1305a:	9011      	str	r0, [sp, #68]	; 0x44
   1305c:	e088      	b.n	13170 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   1305e:	f64f 60d0 	movw	r0, #65232	; 0xfed0
   13062:	f2c0 0001 	movt	r0, #1
   13066:	6801      	ldr	r1, [r0, #0]
   13068:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1306a:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   1306e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13070:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   13074:	f64f 73e8 	movw	r3, #65512	; 0xffe8
   13078:	f2c0 0301 	movt	r3, #1
   1307c:	681b      	ldr	r3, [r3, #0]
   1307e:	f64f 6cf0 	movw	ip, #65264	; 0xfef0
   13082:	f2c0 0c01 	movt	ip, #1
   13086:	f8dc c000 	ldr.w	ip, [ip]
   1308a:	46ee      	mov	lr, sp
   1308c:	2400      	movs	r4, #0
   1308e:	f8ce 4000 	str.w	r4, [lr]
   13092:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13096:	2201      	movs	r2, #1
   13098:	9110      	str	r1, [sp, #64]	; 0x40
   1309a:	4619      	mov	r1, r3
   1309c:	4663      	mov	r3, ip
   1309e:	f7f5 fde0 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   130a2:	e7ff      	b.n	130a4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   130a4:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   130a8:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   130ac:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   130b0:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   130b4:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   130b8:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   130bc:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   130c0:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   130c4:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   130c8:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   130cc:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   130d0:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   130d4:	f249 5305 	movw	r3, #38149	; 0x9505
   130d8:	f2c0 0300 	movt	r3, #0
   130dc:	910f      	str	r1, [sp, #60]	; 0x3c
   130de:	4619      	mov	r1, r3
   130e0:	920e      	str	r2, [sp, #56]	; 0x38
   130e2:	f7f6 fa47 	bl	9574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   130e6:	900d      	str	r0, [sp, #52]	; 0x34
   130e8:	910c      	str	r1, [sp, #48]	; 0x30
   130ea:	e7ff      	b.n	130ec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   130ec:	f249 5105 	movw	r1, #38149	; 0x9505
   130f0:	f2c0 0100 	movt	r1, #0
   130f4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   130f6:	f7f6 fa3d 	bl	9574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   130fa:	900b      	str	r0, [sp, #44]	; 0x2c
   130fc:	910a      	str	r1, [sp, #40]	; 0x28
   130fe:	e7ff      	b.n	13100 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   13100:	f647 019b 	movw	r1, #30875	; 0x789b
   13104:	f2c0 0101 	movt	r1, #1
   13108:	980e      	ldr	r0, [sp, #56]	; 0x38
   1310a:	f7f6 fa48 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1310e:	9009      	str	r0, [sp, #36]	; 0x24
   13110:	9108      	str	r1, [sp, #32]
   13112:	e7ff      	b.n	13114 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   13114:	980d      	ldr	r0, [sp, #52]	; 0x34
   13116:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   1311a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1311c:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   13120:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13122:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   13126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13128:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   1312c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   13130:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   13134:	f8dd e020 	ldr.w	lr, [sp, #32]
   13138:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   1313c:	466c      	mov	r4, sp
   1313e:	2503      	movs	r5, #3
   13140:	6025      	str	r5, [r4, #0]
   13142:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13146:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   1314a:	9910      	ldr	r1, [sp, #64]	; 0x40
   1314c:	462a      	mov	r2, r5
   1314e:	f7f5 fd88 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13152:	e7ff      	b.n	13154 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   13154:	f64f 70fc 	movw	r0, #65532	; 0xfffc
   13158:	f2c0 0001 	movt	r0, #1
   1315c:	f004 f8af 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13160:	9007      	str	r0, [sp, #28]
   13162:	e7ff      	b.n	13164 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   13164:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13168:	9907      	ldr	r1, [sp, #28]
   1316a:	f004 f8e5 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1316e:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   13170:	9811      	ldr	r0, [sp, #68]	; 0x44
   13172:	f7f5 fde4 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   13176:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   1317a:	e7ff      	b.n	1317c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   1317c:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   13180:	1e41      	subs	r1, r0, #1
   13182:	bf18      	it	ne
   13184:	2101      	movne	r1, #1
   13186:	2801      	cmp	r0, #1
   13188:	d001      	beq.n	1318e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   1318a:	e7ff      	b.n	1318c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   1318c:	e005      	b.n	1319a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   1318e:	2000      	movs	r0, #0
    Ok(())
   13190:	9069      	str	r0, [sp, #420]	; 0x1a4
   13192:	2001      	movs	r0, #1
   13194:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   13196:	e008      	b.n	131aa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   13198:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   1319a:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   1319e:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   131a2:	f7ff fa17 	bl	125d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   131a6:	9006      	str	r0, [sp, #24]
   131a8:	e003      	b.n	131b2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   131aa:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   131ac:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   131b0:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   131b2:	9806      	ldr	r0, [sp, #24]
   131b4:	f7f5 fdb7 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   131b8:	9069      	str	r0, [sp, #420]	; 0x1a4
   131ba:	e7ff      	b.n	131bc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   131bc:	e7f5      	b.n	131aa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

000131be <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   131be:	b580      	push	{r7, lr}
   131c0:	b082      	sub	sp, #8
   131c2:	9001      	str	r0, [sp, #4]
    loop {
   131c4:	e7ff      	b.n	131c6 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   131c6:	f245 20a4 	movw	r0, #21156	; 0x52a4
   131ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
   131ce:	f7f5 fe29 	bl	8e24 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   131d2:	9000      	str	r0, [sp, #0]
   131d4:	e7ff      	b.n	131d6 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   131d6:	f240 011c 	movw	r1, #28
   131da:	f2c0 0102 	movt	r1, #2
   131de:	f240 0328 	movw	r3, #40	; 0x28
   131e2:	f2c0 0302 	movt	r3, #2
   131e6:	220b      	movs	r2, #11
   131e8:	9800      	ldr	r0, [sp, #0]
   131ea:	f7f5 fd69 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   131ee:	e7ff      	b.n	131f0 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   131f0:	f006 ffaa 	bl	1a148 <hal_watchdog_tickle>
   131f4:	e7ff      	b.n	131f6 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   131f6:	e7e6      	b.n	131c6 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

000131f8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   131f8:	b580      	push	{r7, lr}
   131fa:	b08c      	sub	sp, #48	; 0x30
   131fc:	4601      	mov	r1, r0
   131fe:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   13202:	9104      	str	r1, [sp, #16]
   13204:	f000 f892 	bl	1332c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   13208:	9003      	str	r0, [sp, #12]
   1320a:	e7ff      	b.n	1320c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   1320c:	9803      	ldr	r0, [sp, #12]
   1320e:	f7f5 fd96 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   13212:	9006      	str	r0, [sp, #24]
   13214:	e7ff      	b.n	13216 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   13216:	9806      	ldr	r0, [sp, #24]
   13218:	1e41      	subs	r1, r0, #1
   1321a:	bf18      	it	ne
   1321c:	2101      	movne	r1, #1
   1321e:	2801      	cmp	r0, #1
   13220:	d001      	beq.n	13226 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   13222:	e7ff      	b.n	13224 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   13224:	e00c      	b.n	13240 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   13226:	f644 2070 	movw	r0, #19056	; 0x4a70
   1322a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1322e:	9904      	ldr	r1, [sp, #16]
   13230:	f7ff f9ae 	bl	12590 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   13234:	f88d 101d 	strb.w	r1, [sp, #29]
   13238:	f88d 001c 	strb.w	r0, [sp, #28]
   1323c:	e00f      	b.n	1325e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   1323e:	defe      	udf	#254	; 0xfe
   13240:	9806      	ldr	r0, [sp, #24]
   13242:	900b      	str	r0, [sp, #44]	; 0x2c
   13244:	f7ff f9c6 	bl	125d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13248:	9002      	str	r0, [sp, #8]
   1324a:	e002      	b.n	13252 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   1324c:	9805      	ldr	r0, [sp, #20]
   1324e:	b00c      	add	sp, #48	; 0x30
   13250:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   13252:	9802      	ldr	r0, [sp, #8]
   13254:	f7f5 fd67 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13258:	9005      	str	r0, [sp, #20]
   1325a:	e7ff      	b.n	1325c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   1325c:	e7f6      	b.n	1324c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   1325e:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   13260:	f7f5 fd55 	bl	8d0e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   13264:	9001      	str	r0, [sp, #4]
   13266:	e7ff      	b.n	13268 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   13268:	9801      	ldr	r0, [sp, #4]
   1326a:	07c1      	lsls	r1, r0, #31
   1326c:	2900      	cmp	r1, #0
   1326e:	d105      	bne.n	1327c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   13270:	e7ff      	b.n	13272 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   13272:	2000      	movs	r0, #0
    Ok(())
   13274:	9005      	str	r0, [sp, #20]
   13276:	2001      	movs	r0, #1
   13278:	9005      	str	r0, [sp, #20]
}
   1327a:	e7e7      	b.n	1324c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   1327c:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   13280:	9008      	str	r0, [sp, #32]
   13282:	9808      	ldr	r0, [sp, #32]
   13284:	9005      	str	r0, [sp, #20]
   13286:	e7e1      	b.n	1324c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

00013288 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   13288:	b580      	push	{r7, lr}
   1328a:	b08e      	sub	sp, #56	; 0x38
   1328c:	900a      	str	r0, [sp, #40]	; 0x28
   1328e:	910b      	str	r1, [sp, #44]	; 0x2c
    assert!(unsafe { PENDING_CMD.len() } > 0);  //  Must have Command Byte before Data Bytes
   13290:	f644 2270 	movw	r2, #19056	; 0x4a70
   13294:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13298:	9007      	str	r0, [sp, #28]
   1329a:	4610      	mov	r0, r2
   1329c:	9106      	str	r1, [sp, #24]
   1329e:	f7ff f95d 	bl	1255c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   132a2:	9005      	str	r0, [sp, #20]
   132a4:	9104      	str	r1, [sp, #16]
   132a6:	e7ff      	b.n	132a8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   132a8:	9805      	ldr	r0, [sp, #20]
   132aa:	9904      	ldr	r1, [sp, #16]
   132ac:	f7fe fd12 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   132b0:	9003      	str	r0, [sp, #12]
   132b2:	e7ff      	b.n	132b4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   132b4:	9803      	ldr	r0, [sp, #12]
   132b6:	2800      	cmp	r0, #0
   132b8:	d00a      	beq.n	132d0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x48>
   132ba:	e7ff      	b.n	132bc <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   132bc:	f644 2078 	movw	r0, #19064	; 0x4a78
   132c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   132c4:	9907      	ldr	r1, [sp, #28]
   132c6:	9a06      	ldr	r2, [sp, #24]
   132c8:	f7ff f954 	bl	12574 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E>
   132cc:	9002      	str	r0, [sp, #8]
   132ce:	e00b      	b.n	132e8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x60>
    assert!(unsafe { PENDING_CMD.len() } > 0);  //  Must have Command Byte before Data Bytes
   132d0:	f240 0038 	movw	r0, #56	; 0x38
   132d4:	f2c0 0002 	movt	r0, #2
   132d8:	f240 026c 	movw	r2, #108	; 0x6c
   132dc:	f2c0 0202 	movt	r2, #2
   132e0:	2132      	movs	r1, #50	; 0x32
   132e2:	f003 fff3 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   132e6:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   132e8:	9802      	ldr	r0, [sp, #8]
   132ea:	f000 0001 	and.w	r0, r0, #1
   132ee:	f7f5 fd20 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   132f2:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   132f6:	e7ff      	b.n	132f8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x70>
   132f8:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   132fc:	07c1      	lsls	r1, r0, #31
   132fe:	2900      	cmp	r1, #0
   13300:	d001      	beq.n	13306 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x7e>
   13302:	e7ff      	b.n	13304 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x7c>
   13304:	e005      	b.n	13312 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x8a>
   13306:	2000      	movs	r0, #0
    Ok(())
   13308:	9008      	str	r0, [sp, #32]
   1330a:	2001      	movs	r0, #1
   1330c:	9008      	str	r0, [sp, #32]
}
   1330e:	e004      	b.n	1331a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x92>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13310:	defe      	udf	#254	; 0xfe
   13312:	f7f5 fc9b 	bl	8c4c <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   13316:	9001      	str	r0, [sp, #4]
   13318:	e002      	b.n	13320 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x98>
}
   1331a:	9808      	ldr	r0, [sp, #32]
   1331c:	b00e      	add	sp, #56	; 0x38
   1331e:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13320:	9801      	ldr	r0, [sp, #4]
   13322:	f7f5 fd00 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13326:	9008      	str	r0, [sp, #32]
   13328:	e7ff      	b.n	1332a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa2>
   1332a:	e7f6      	b.n	1331a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x92>

0001332c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   1332c:	b580      	push	{r7, lr}
   1332e:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   13330:	f644 2070 	movw	r0, #19056	; 0x4a70
   13334:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13338:	f7ff f910 	bl	1255c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   1333c:	900b      	str	r0, [sp, #44]	; 0x2c
   1333e:	910a      	str	r1, [sp, #40]	; 0x28
   13340:	e016      	b.n	13370 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   13342:	2001      	movs	r0, #1
   13344:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   13348:	e00c      	b.n	13364 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   1334a:	2000      	movs	r0, #0
   1334c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   13350:	e008      	b.n	13364 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   13352:	f644 2078 	movw	r0, #19064	; 0x4a78
   13356:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1335a:	f7ff f8f3 	bl	12544 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>
   1335e:	9009      	str	r0, [sp, #36]	; 0x24
   13360:	9108      	str	r1, [sp, #32]
   13362:	e00f      	b.n	13384 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   13364:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   13368:	07c0      	lsls	r0, r0, #31
   1336a:	2800      	cmp	r0, #0
   1336c:	d11d      	bne.n	133aa <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   1336e:	e013      	b.n	13398 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   13370:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13372:	990a      	ldr	r1, [sp, #40]	; 0x28
   13374:	f7fe fcae 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13378:	9007      	str	r0, [sp, #28]
   1337a:	e7ff      	b.n	1337c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   1337c:	9807      	ldr	r0, [sp, #28]
   1337e:	2800      	cmp	r0, #0
   13380:	d0e7      	beq.n	13352 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   13382:	e7e2      	b.n	1334a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   13384:	9809      	ldr	r0, [sp, #36]	; 0x24
   13386:	9908      	ldr	r1, [sp, #32]
   13388:	f7fe fca4 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1338c:	9006      	str	r0, [sp, #24]
   1338e:	e7ff      	b.n	13390 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   13390:	9806      	ldr	r0, [sp, #24]
   13392:	2800      	cmp	r0, #0
   13394:	d0d5      	beq.n	13342 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   13396:	e7d8      	b.n	1334a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   13398:	f644 2070 	movw	r0, #19056	; 0x4a70
   1339c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   133a0:	f7ff f8dc 	bl	1255c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   133a4:	9005      	str	r0, [sp, #20]
   133a6:	9104      	str	r1, [sp, #16]
   133a8:	e007      	b.n	133ba <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   133aa:	2000      	movs	r0, #0
        return Ok(());
   133ac:	900c      	str	r0, [sp, #48]	; 0x30
   133ae:	2001      	movs	r0, #1
   133b0:	900c      	str	r0, [sp, #48]	; 0x30
   133b2:	e7ff      	b.n	133b4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   133b4:	980c      	ldr	r0, [sp, #48]	; 0x30
   133b6:	b010      	add	sp, #64	; 0x40
   133b8:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   133ba:	9804      	ldr	r0, [sp, #16]
   133bc:	2800      	cmp	r0, #0
   133be:	d03f      	beq.n	13440 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   133c0:	e7ff      	b.n	133c2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   133c2:	9805      	ldr	r0, [sp, #20]
   133c4:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   133c6:	f644 2078 	movw	r0, #19064	; 0x4a78
   133ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
   133ce:	9103      	str	r1, [sp, #12]
   133d0:	f7ff f8b8 	bl	12544 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>
   133d4:	9002      	str	r0, [sp, #8]
   133d6:	9101      	str	r1, [sp, #4]
   133d8:	e7ff      	b.n	133da <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   133da:	9803      	ldr	r0, [sp, #12]
   133dc:	9902      	ldr	r1, [sp, #8]
   133de:	9a01      	ldr	r2, [sp, #4]
   133e0:	f000 f837 	bl	13452 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   133e4:	900e      	str	r0, [sp, #56]	; 0x38
   133e6:	e7ff      	b.n	133e8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   133e8:	980e      	ldr	r0, [sp, #56]	; 0x38
   133ea:	2801      	cmp	r0, #1
   133ec:	d107      	bne.n	133fe <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   133ee:	e7ff      	b.n	133f0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   133f0:	f644 2070 	movw	r0, #19056	; 0x4a70
   133f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   133f8:	f7ff f8e4 	bl	125c4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   133fc:	e014      	b.n	13428 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   133fe:	980e      	ldr	r0, [sp, #56]	; 0x38
   13400:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   13402:	f644 2170 	movw	r1, #19056	; 0x4a70
   13406:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1340a:	9000      	str	r0, [sp, #0]
   1340c:	4608      	mov	r0, r1
   1340e:	f7ff f8d9 	bl	125c4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   13412:	e7ff      	b.n	13414 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   13414:	f644 2078 	movw	r0, #19064	; 0x4a78
   13418:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1341c:	f7ff f8ca 	bl	125b4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>
   13420:	e7ff      	b.n	13422 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   13422:	9800      	ldr	r0, [sp, #0]
   13424:	900c      	str	r0, [sp, #48]	; 0x30
   13426:	e7c5      	b.n	133b4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   13428:	f644 2078 	movw	r0, #19064	; 0x4a78
   1342c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13430:	f7ff f8c0 	bl	125b4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>
   13434:	e7ff      	b.n	13436 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   13436:	2000      	movs	r0, #0
    Ok(())
   13438:	900c      	str	r0, [sp, #48]	; 0x30
   1343a:	2001      	movs	r0, #1
   1343c:	900c      	str	r0, [sp, #48]	; 0x30
}
   1343e:	e7b9      	b.n	133b4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   13440:	f240 007c 	movw	r0, #124	; 0x7c
   13444:	f2c0 0002 	movt	r0, #2
   13448:	2100      	movs	r1, #0
   1344a:	9a04      	ldr	r2, [sp, #16]
   1344c:	f003 ff54 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   13450:	defe      	udf	#254	; 0xfe

00013452 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   13452:	b580      	push	{r7, lr}
   13454:	b0a0      	sub	sp, #128	; 0x80
   13456:	4603      	mov	r3, r0
   13458:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   1345c:	9116      	str	r1, [sp, #88]	; 0x58
   1345e:	9217      	str	r2, [sp, #92]	; 0x5c
   13460:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   13464:	9018      	str	r0, [sp, #96]	; 0x60
   13466:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   1346a:	fba0 0c0c 	umull	r0, ip, r0, ip
   1346e:	f1bc 0f00 	cmp.w	ip, #0
   13472:	920f      	str	r2, [sp, #60]	; 0x3c
   13474:	910e      	str	r1, [sp, #56]	; 0x38
   13476:	900d      	str	r0, [sp, #52]	; 0x34
   13478:	f040 80c8 	bne.w	1360c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   1347c:	e7ff      	b.n	1347e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   1347e:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13482:	f2c1 0062 	movt	r0, #4194	; 0x1062
   13486:	990d      	ldr	r1, [sp, #52]	; 0x34
   13488:	fba1 0200 	umull	r0, r2, r1, r0
   1348c:	0991      	lsrs	r1, r2, #6
   1348e:	f245 2284 	movw	r2, #21124	; 0x5284
   13492:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13496:	900c      	str	r0, [sp, #48]	; 0x30
   13498:	4610      	mov	r0, r2
   1349a:	f007 ff55 	bl	1b348 <os_sem_pend>
   1349e:	e7ff      	b.n	134a0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   134a0:	980e      	ldr	r0, [sp, #56]	; 0x38
   134a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   134a4:	f7fe fc16 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   134a8:	900b      	str	r0, [sp, #44]	; 0x2c
   134aa:	e7ff      	b.n	134ac <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   134ac:	2001      	movs	r0, #1
   134ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   134b0:	fa10 f081 	uxtah	r0, r0, r1
   134b4:	b282      	uxth	r2, r0
   134b6:	4603      	mov	r3, r0
   134b8:	4282      	cmp	r2, r0
   134ba:	930a      	str	r3, [sp, #40]	; 0x28
   134bc:	f040 80b2 	bne.w	13624 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   134c0:	e7ff      	b.n	134c2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   134c2:	980a      	ldr	r0, [sp, #40]	; 0x28
   134c4:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   134c8:	b280      	uxth	r0, r0
   134ca:	2100      	movs	r1, #0
   134cc:	f007 fc4a 	bl	1ad64 <os_msys_get_pkthdr>
   134d0:	4601      	mov	r1, r0
   134d2:	901a      	str	r0, [sp, #104]	; 0x68
   134d4:	9109      	str	r1, [sp, #36]	; 0x24
   134d6:	e7ff      	b.n	134d8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   134d8:	9809      	ldr	r0, [sp, #36]	; 0x24
   134da:	f000 ff17 	bl	1430c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   134de:	9008      	str	r0, [sp, #32]
   134e0:	e7ff      	b.n	134e2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   134e2:	9808      	ldr	r0, [sp, #32]
   134e4:	07c1      	lsls	r1, r0, #31
   134e6:	2900      	cmp	r1, #0
   134e8:	d106      	bne.n	134f8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   134ea:	e7ff      	b.n	134ec <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   134ec:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   134f0:	901b      	str	r0, [sp, #108]	; 0x6c
   134f2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   134f4:	9107      	str	r1, [sp, #28]
   134f6:	e010      	b.n	1351a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   134f8:	f245 2084 	movw	r0, #21124	; 0x5284
   134fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13500:	f007 fef0 	bl	1b2e4 <os_sem_release>
   13504:	e7ff      	b.n	13506 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   13506:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1350a:	9012      	str	r0, [sp, #72]	; 0x48
   1350c:	9812      	ldr	r0, [sp, #72]	; 0x48
   1350e:	9011      	str	r0, [sp, #68]	; 0x44
   13510:	e002      	b.n	13518 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   13512:	9811      	ldr	r0, [sp, #68]	; 0x44
   13514:	b020      	add	sp, #128	; 0x80
   13516:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   13518:	e7fb      	b.n	13512 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   1351a:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   1351c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1351e:	9907      	ldr	r1, [sp, #28]
   13520:	f007 fa78 	bl	1aa14 <os_mbuf_append>
   13524:	4601      	mov	r1, r0
   13526:	901c      	str	r0, [sp, #112]	; 0x70
   13528:	9106      	str	r1, [sp, #24]
   1352a:	e7ff      	b.n	1352c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   1352c:	9806      	ldr	r0, [sp, #24]
   1352e:	2800      	cmp	r0, #0
   13530:	d106      	bne.n	13540 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   13532:	e7ff      	b.n	13534 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   13534:	980e      	ldr	r0, [sp, #56]	; 0x38
   13536:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13538:	f7fe fbd4 	bl	11ce4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   1353c:	9005      	str	r0, [sp, #20]
   1353e:	e011      	b.n	13564 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   13540:	9809      	ldr	r0, [sp, #36]	; 0x24
   13542:	f007 fa4b 	bl	1a9dc <os_mbuf_free_chain>
   13546:	e7ff      	b.n	13548 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13548:	f245 2084 	movw	r0, #21124	; 0x5284
   1354c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13550:	f007 fec8 	bl	1b2e4 <os_sem_release>
   13554:	e7ff      	b.n	13556 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   13556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1355a:	9013      	str	r0, [sp, #76]	; 0x4c
   1355c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1355e:	9011      	str	r0, [sp, #68]	; 0x44
   13560:	e7ff      	b.n	13562 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   13562:	e7d9      	b.n	13518 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   13564:	9805      	ldr	r0, [sp, #20]
   13566:	901d      	str	r0, [sp, #116]	; 0x74
   13568:	991d      	ldr	r1, [sp, #116]	; 0x74
   1356a:	9104      	str	r1, [sp, #16]
   1356c:	e7ff      	b.n	1356e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   1356e:	980e      	ldr	r0, [sp, #56]	; 0x38
   13570:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13572:	f7fe fbaf 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13576:	9003      	str	r0, [sp, #12]
   13578:	e7ff      	b.n	1357a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   1357a:	9803      	ldr	r0, [sp, #12]
   1357c:	b282      	uxth	r2, r0
   1357e:	9809      	ldr	r0, [sp, #36]	; 0x24
   13580:	9904      	ldr	r1, [sp, #16]
   13582:	f007 fa47 	bl	1aa14 <os_mbuf_append>
   13586:	4601      	mov	r1, r0
   13588:	901e      	str	r0, [sp, #120]	; 0x78
   1358a:	9102      	str	r1, [sp, #8]
   1358c:	e7ff      	b.n	1358e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   1358e:	9802      	ldr	r0, [sp, #8]
   13590:	2800      	cmp	r0, #0
   13592:	d10f      	bne.n	135b4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   13594:	e7ff      	b.n	13596 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   13596:	f245 208c 	movw	r0, #21132	; 0x528c
   1359a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1359e:	f245 21a4 	movw	r1, #21156	; 0x52a4
   135a2:	f2c2 0100 	movt	r1, #8192	; 0x2000
   135a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   135a8:	f007 f9b6 	bl	1a918 <os_mqueue_put>
   135ac:	4601      	mov	r1, r0
   135ae:	901f      	str	r0, [sp, #124]	; 0x7c
   135b0:	9101      	str	r1, [sp, #4]
   135b2:	e011      	b.n	135d8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   135b4:	9809      	ldr	r0, [sp, #36]	; 0x24
   135b6:	f007 fa11 	bl	1a9dc <os_mbuf_free_chain>
   135ba:	e7ff      	b.n	135bc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   135bc:	f245 2084 	movw	r0, #21124	; 0x5284
   135c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   135c4:	f007 fe8e 	bl	1b2e4 <os_sem_release>
   135c8:	e7ff      	b.n	135ca <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   135ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   135ce:	9014      	str	r0, [sp, #80]	; 0x50
   135d0:	9814      	ldr	r0, [sp, #80]	; 0x50
   135d2:	9011      	str	r0, [sp, #68]	; 0x44
   135d4:	e7ff      	b.n	135d6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   135d6:	e7c4      	b.n	13562 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   135d8:	9801      	ldr	r0, [sp, #4]
   135da:	2800      	cmp	r0, #0
   135dc:	d105      	bne.n	135ea <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   135de:	e7ff      	b.n	135e0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   135e0:	2000      	movs	r0, #0
    Ok(())
   135e2:	9011      	str	r0, [sp, #68]	; 0x44
   135e4:	2001      	movs	r0, #1
   135e6:	9011      	str	r0, [sp, #68]	; 0x44
}
   135e8:	e793      	b.n	13512 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   135ea:	9809      	ldr	r0, [sp, #36]	; 0x24
   135ec:	f007 f9f6 	bl	1a9dc <os_mbuf_free_chain>
   135f0:	e7ff      	b.n	135f2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   135f2:	f245 2084 	movw	r0, #21124	; 0x5284
   135f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   135fa:	f007 fe73 	bl	1b2e4 <os_sem_release>
   135fe:	e7ff      	b.n	13600 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   13600:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   13604:	9015      	str	r0, [sp, #84]	; 0x54
   13606:	9815      	ldr	r0, [sp, #84]	; 0x54
   13608:	9011      	str	r0, [sp, #68]	; 0x44
   1360a:	e7e4      	b.n	135d6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   1360c:	f240 00a0 	movw	r0, #160	; 0xa0
   13610:	f2c0 0002 	movt	r0, #2
   13614:	f240 028c 	movw	r2, #140	; 0x8c
   13618:	f2c0 0202 	movt	r2, #2
   1361c:	2121      	movs	r1, #33	; 0x21
   1361e:	f003 fe55 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13622:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   13624:	f240 00e0 	movw	r0, #224	; 0xe0
   13628:	f2c0 0002 	movt	r0, #2
   1362c:	f240 02c4 	movw	r2, #196	; 0xc4
   13630:	f2c0 0202 	movt	r2, #2
   13634:	211c      	movs	r1, #28
   13636:	f003 fe49 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1363a:	defe      	udf	#254	; 0xfe

0001363c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   1363c:	b5b0      	push	{r4, r5, r7, lr}
   1363e:	b0c4      	sub	sp, #272	; 0x110
   13640:	9038      	str	r0, [sp, #224]	; 0xe0
   13642:	e7ff      	b.n	13644 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   13644:	f245 208c 	movw	r0, #21132	; 0x528c
   13648:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1364c:	f007 f951 	bl	1a8f2 <os_mqueue_get>
   13650:	4601      	mov	r1, r0
   13652:	9039      	str	r0, [sp, #228]	; 0xe4
   13654:	911b      	str	r1, [sp, #108]	; 0x6c
   13656:	e7ff      	b.n	13658 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   13658:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1365a:	f000 fe57 	bl	1430c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   1365e:	901a      	str	r0, [sp, #104]	; 0x68
   13660:	e7ff      	b.n	13662 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   13662:	981a      	ldr	r0, [sp, #104]	; 0x68
   13664:	07c1      	lsls	r1, r0, #31
   13666:	2900      	cmp	r1, #0
   13668:	d106      	bne.n	13678 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   1366a:	e7ff      	b.n	1366c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   1366c:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1366e:	901c      	str	r0, [sp, #112]	; 0x70
   13670:	2101      	movs	r1, #1
        let mut first_byte = true;
   13672:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   13676:	e001      	b.n	1367c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   13678:	b044      	add	sp, #272	; 0x110
   1367a:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   1367c:	981c      	ldr	r0, [sp, #112]	; 0x70
   1367e:	f000 fe45 	bl	1430c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   13682:	9019      	str	r0, [sp, #100]	; 0x64
   13684:	e7ff      	b.n	13686 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   13686:	9819      	ldr	r0, [sp, #100]	; 0x64
   13688:	07c1      	lsls	r1, r0, #31
   1368a:	2900      	cmp	r1, #0
   1368c:	d004      	beq.n	13698 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   1368e:	e7ff      	b.n	13690 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   13690:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13692:	f007 f9a3 	bl	1a9dc <os_mbuf_free_chain>
   13696:	e0aa      	b.n	137ee <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   13698:	981c      	ldr	r0, [sp, #112]	; 0x70
   1369a:	6800      	ldr	r0, [r0, #0]
   1369c:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   1369e:	991c      	ldr	r1, [sp, #112]	; 0x70
   136a0:	88c9      	ldrh	r1, [r1, #6]
   136a2:	460a      	mov	r2, r1
   136a4:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   136a8:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   136ac:	07c9      	lsls	r1, r1, #31
   136ae:	2900      	cmp	r1, #0
   136b0:	9018      	str	r0, [sp, #96]	; 0x60
   136b2:	9217      	str	r2, [sp, #92]	; 0x5c
   136b4:	d105      	bne.n	136c2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   136b6:	e7ff      	b.n	136b8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   136b8:	9818      	ldr	r0, [sp, #96]	; 0x60
   136ba:	903e      	str	r0, [sp, #248]	; 0xf8
   136bc:	983e      	ldr	r0, [sp, #248]	; 0xf8
   136be:	9016      	str	r0, [sp, #88]	; 0x58
   136c0:	e07b      	b.n	137ba <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   136c2:	2000      	movs	r0, #0
                first_byte = false;
   136c4:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   136c8:	9818      	ldr	r0, [sp, #96]	; 0x60
   136ca:	903c      	str	r0, [sp, #240]	; 0xf0
   136cc:	983c      	ldr	r0, [sp, #240]	; 0xf0
   136ce:	9015      	str	r0, [sp, #84]	; 0x54
   136d0:	e7ff      	b.n	136d2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   136d2:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   136d4:	9915      	ldr	r1, [sp, #84]	; 0x54
   136d6:	9014      	str	r0, [sp, #80]	; 0x50
   136d8:	4608      	mov	r0, r1
   136da:	9914      	ldr	r1, [sp, #80]	; 0x50
   136dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   136de:	f000 f921 	bl	13924 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   136e2:	9013      	str	r0, [sp, #76]	; 0x4c
   136e4:	e7ff      	b.n	136e6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   136e6:	f240 01fc 	movw	r1, #252	; 0xfc
   136ea:	f2c0 0102 	movt	r1, #2
   136ee:	f240 1308 	movw	r3, #264	; 0x108
   136f2:	f2c0 0302 	movt	r3, #2
   136f6:	220c      	movs	r2, #12
   136f8:	9813      	ldr	r0, [sp, #76]	; 0x4c
   136fa:	f7f5 fae1 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   136fe:	e7ff      	b.n	13700 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   13700:	9818      	ldr	r0, [sp, #96]	; 0x60
   13702:	7801      	ldrb	r1, [r0, #0]
   13704:	2901      	cmp	r1, #1
   13706:	d013      	beq.n	13730 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   13708:	e01a      	b.n	13740 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   1370a:	2001      	movs	r0, #1
   1370c:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   13710:	e008      	b.n	13724 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   13712:	2000      	movs	r0, #0
   13714:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   13718:	e004      	b.n	13724 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   1371a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1371c:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   1371e:	2929      	cmp	r1, #41	; 0x29
   13720:	d0f3      	beq.n	1370a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   13722:	e7f6      	b.n	13712 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   13724:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   13728:	07c0      	lsls	r0, r0, #31
   1372a:	2800      	cmp	r0, #0
   1372c:	d113      	bne.n	13756 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   1372e:	e017      	b.n	13760 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   13730:	2001      	movs	r0, #1
   13732:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   13736:	e008      	b.n	1374a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   13738:	2000      	movs	r0, #0
   1373a:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   1373e:	e004      	b.n	1374a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   13740:	9818      	ldr	r0, [sp, #96]	; 0x60
   13742:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   13744:	2911      	cmp	r1, #17
   13746:	d0f3      	beq.n	13730 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   13748:	e7f6      	b.n	13738 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   1374a:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   1374e:	07c0      	lsls	r0, r0, #31
   13750:	2800      	cmp	r0, #0
   13752:	d1da      	bne.n	1370a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   13754:	e7e1      	b.n	1371a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   13756:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   13758:	f000 fb13 	bl	13d82 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   1375c:	e7ff      	b.n	1375e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   1375e:	e7ff      	b.n	13760 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   13760:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   13762:	9818      	ldr	r0, [sp, #96]	; 0x60
   13764:	f7fe fa26 	bl	11bb4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   13768:	9012      	str	r0, [sp, #72]	; 0x48
   1376a:	e7ff      	b.n	1376c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   1376c:	9812      	ldr	r0, [sp, #72]	; 0x48
   1376e:	903d      	str	r0, [sp, #244]	; 0xf4
   13770:	983d      	ldr	r0, [sp, #244]	; 0xf4
   13772:	9011      	str	r0, [sp, #68]	; 0x44
   13774:	e7ff      	b.n	13776 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   13776:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   1377a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1377c:	fa10 f081 	uxtah	r0, r0, r1
   13780:	b282      	uxth	r2, r0
   13782:	4603      	mov	r3, r0
   13784:	4282      	cmp	r2, r0
   13786:	9310      	str	r3, [sp, #64]	; 0x40
   13788:	f040 80c0 	bne.w	1390c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   1378c:	e7ff      	b.n	1378e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   1378e:	9810      	ldr	r0, [sp, #64]	; 0x40
   13790:	b281      	uxth	r1, r0
   13792:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13794:	9811      	ldr	r0, [sp, #68]	; 0x44
   13796:	f000 f8c5 	bl	13924 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   1379a:	900f      	str	r0, [sp, #60]	; 0x3c
   1379c:	e7ff      	b.n	1379e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   1379e:	f240 01fc 	movw	r1, #252	; 0xfc
   137a2:	f2c0 0102 	movt	r1, #2
   137a6:	f240 1354 	movw	r3, #340	; 0x154
   137aa:	f2c0 0302 	movt	r3, #2
   137ae:	220c      	movs	r2, #12
   137b0:	980f      	ldr	r0, [sp, #60]	; 0x3c
   137b2:	f7f5 fa85 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   137b6:	e7ff      	b.n	137b8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   137b8:	e015      	b.n	137e6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   137ba:	9817      	ldr	r0, [sp, #92]	; 0x5c
   137bc:	b281      	uxth	r1, r0
   137be:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   137c0:	9816      	ldr	r0, [sp, #88]	; 0x58
   137c2:	f000 f8af 	bl	13924 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   137c6:	900e      	str	r0, [sp, #56]	; 0x38
   137c8:	e7ff      	b.n	137ca <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   137ca:	f240 01fc 	movw	r1, #252	; 0xfc
   137ce:	f2c0 0102 	movt	r1, #2
   137d2:	f240 1364 	movw	r3, #356	; 0x164
   137d6:	f2c0 0302 	movt	r3, #2
   137da:	220c      	movs	r2, #12
   137dc:	980e      	ldr	r0, [sp, #56]	; 0x38
   137de:	f7f5 fa6f 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   137e2:	e7ff      	b.n	137e4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   137e4:	e7ff      	b.n	137e6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   137e6:	981c      	ldr	r0, [sp, #112]	; 0x70
   137e8:	68c0      	ldr	r0, [r0, #12]
   137ea:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   137ec:	e746      	b.n	1367c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   137ee:	f245 2084 	movw	r0, #21124	; 0x5284
   137f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   137f6:	f007 fd75 	bl	1b2e4 <os_sem_release>
   137fa:	901e      	str	r0, [sp, #120]	; 0x78
   137fc:	e7ff      	b.n	137fe <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   137fe:	f64f 6078 	movw	r0, #65144	; 0xfe78
   13802:	f2c0 0001 	movt	r0, #1
   13806:	6800      	ldr	r0, [r0, #0]
   13808:	a91e      	add	r1, sp, #120	; 0x78
   1380a:	911f      	str	r1, [sp, #124]	; 0x7c
   1380c:	9020      	str	r0, [sp, #128]	; 0x80
   1380e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13810:	903f      	str	r0, [sp, #252]	; 0xfc
   13812:	9920      	ldr	r1, [sp, #128]	; 0x80
   13814:	9140      	str	r1, [sp, #256]	; 0x100
   13816:	6802      	ldr	r2, [r0, #0]
   13818:	680b      	ldr	r3, [r1, #0]
   1381a:	429a      	cmp	r2, r3
   1381c:	900d      	str	r0, [sp, #52]	; 0x34
   1381e:	910c      	str	r1, [sp, #48]	; 0x30
   13820:	d101      	bne.n	13826 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   13822:	e7ff      	b.n	13824 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   13824:	e70e      	b.n	13644 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   13826:	f64f 60d0 	movw	r0, #65232	; 0xfed0
   1382a:	f2c0 0001 	movt	r0, #1
   1382e:	6801      	ldr	r1, [r0, #0]
   13830:	980d      	ldr	r0, [sp, #52]	; 0x34
   13832:	9030      	str	r0, [sp, #192]	; 0xc0
   13834:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13836:	9231      	str	r2, [sp, #196]	; 0xc4
   13838:	f64f 73e8 	movw	r3, #65512	; 0xffe8
   1383c:	f2c0 0301 	movt	r3, #1
   13840:	681b      	ldr	r3, [r3, #0]
   13842:	f64f 6cf0 	movw	ip, #65264	; 0xfef0
   13846:	f2c0 0c01 	movt	ip, #1
   1384a:	f8dc c000 	ldr.w	ip, [ip]
   1384e:	46ee      	mov	lr, sp
   13850:	2400      	movs	r4, #0
   13852:	f8ce 4000 	str.w	r4, [lr]
   13856:	a832      	add	r0, sp, #200	; 0xc8
   13858:	2201      	movs	r2, #1
   1385a:	910b      	str	r1, [sp, #44]	; 0x2c
   1385c:	4619      	mov	r1, r3
   1385e:	4663      	mov	r3, ip
   13860:	f7f5 f9ff 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13864:	e7ff      	b.n	13866 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   13866:	a830      	add	r0, sp, #192	; 0xc0
   13868:	902d      	str	r0, [sp, #180]	; 0xb4
   1386a:	a831      	add	r0, sp, #196	; 0xc4
   1386c:	902e      	str	r0, [sp, #184]	; 0xb8
   1386e:	a832      	add	r0, sp, #200	; 0xc8
   13870:	902f      	str	r0, [sp, #188]	; 0xbc
   13872:	982d      	ldr	r0, [sp, #180]	; 0xb4
   13874:	9041      	str	r0, [sp, #260]	; 0x104
   13876:	992e      	ldr	r1, [sp, #184]	; 0xb8
   13878:	9142      	str	r1, [sp, #264]	; 0x108
   1387a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   1387c:	9243      	str	r2, [sp, #268]	; 0x10c
   1387e:	f249 5305 	movw	r3, #38149	; 0x9505
   13882:	f2c0 0300 	movt	r3, #0
   13886:	910a      	str	r1, [sp, #40]	; 0x28
   13888:	4619      	mov	r1, r3
   1388a:	9209      	str	r2, [sp, #36]	; 0x24
   1388c:	f7f5 fe72 	bl	9574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13890:	9008      	str	r0, [sp, #32]
   13892:	9107      	str	r1, [sp, #28]
   13894:	e7ff      	b.n	13896 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   13896:	f249 5105 	movw	r1, #38149	; 0x9505
   1389a:	f2c0 0100 	movt	r1, #0
   1389e:	980a      	ldr	r0, [sp, #40]	; 0x28
   138a0:	f7f5 fe68 	bl	9574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   138a4:	9006      	str	r0, [sp, #24]
   138a6:	9105      	str	r1, [sp, #20]
   138a8:	e7ff      	b.n	138aa <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   138aa:	f647 019b 	movw	r1, #30875	; 0x789b
   138ae:	f2c0 0101 	movt	r1, #1
   138b2:	9809      	ldr	r0, [sp, #36]	; 0x24
   138b4:	f7f5 fe73 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   138b8:	9004      	str	r0, [sp, #16]
   138ba:	9103      	str	r1, [sp, #12]
   138bc:	e7ff      	b.n	138be <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   138be:	9808      	ldr	r0, [sp, #32]
   138c0:	9027      	str	r0, [sp, #156]	; 0x9c
   138c2:	9907      	ldr	r1, [sp, #28]
   138c4:	9128      	str	r1, [sp, #160]	; 0xa0
   138c6:	9a06      	ldr	r2, [sp, #24]
   138c8:	9229      	str	r2, [sp, #164]	; 0xa4
   138ca:	9b05      	ldr	r3, [sp, #20]
   138cc:	932a      	str	r3, [sp, #168]	; 0xa8
   138ce:	f8dd c010 	ldr.w	ip, [sp, #16]
   138d2:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   138d6:	f8dd e00c 	ldr.w	lr, [sp, #12]
   138da:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   138de:	466c      	mov	r4, sp
   138e0:	2503      	movs	r5, #3
   138e2:	6025      	str	r5, [r4, #0]
   138e4:	a821      	add	r0, sp, #132	; 0x84
   138e6:	ab27      	add	r3, sp, #156	; 0x9c
   138e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   138ea:	462a      	mov	r2, r5
   138ec:	f7f5 f9b9 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   138f0:	e7ff      	b.n	138f2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   138f2:	f240 1074 	movw	r0, #372	; 0x174
   138f6:	f2c0 0002 	movt	r0, #2
   138fa:	f003 fce0 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   138fe:	9002      	str	r0, [sp, #8]
   13900:	e7ff      	b.n	13902 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   13902:	a821      	add	r0, sp, #132	; 0x84
   13904:	9902      	ldr	r1, [sp, #8]
   13906:	f003 fd17 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1390a:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   1390c:	f240 1030 	movw	r0, #304	; 0x130
   13910:	f2c0 0002 	movt	r0, #2
   13914:	f240 1218 	movw	r2, #280	; 0x118
   13918:	f2c0 0202 	movt	r2, #2
   1391c:	2121      	movs	r1, #33	; 0x21
   1391e:	f003 fcd5 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13922:	defe      	udf	#254	; 0xfe

00013924 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   13924:	b5b0      	push	{r4, r5, r7, lr}
   13926:	b0e8      	sub	sp, #416	; 0x1a0
   13928:	4613      	mov	r3, r2
   1392a:	9058      	str	r0, [sp, #352]	; 0x160
   1392c:	9159      	str	r1, [sp, #356]	; 0x164
   1392e:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   13932:	2900      	cmp	r1, #0
   13934:	9121      	str	r1, [sp, #132]	; 0x84
   13936:	9020      	str	r0, [sp, #128]	; 0x80
   13938:	931f      	str	r3, [sp, #124]	; 0x7c
   1393a:	d004      	beq.n	13946 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   1393c:	e7ff      	b.n	1393e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   1393e:	9821      	ldr	r0, [sp, #132]	; 0x84
   13940:	2801      	cmp	r0, #1
   13942:	db0d      	blt.n	13960 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   13944:	e007      	b.n	13956 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   13946:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   13948:	9022      	str	r0, [sp, #136]	; 0x88
   1394a:	2001      	movs	r0, #1
   1394c:	9022      	str	r0, [sp, #136]	; 0x88
   1394e:	e7ff      	b.n	13950 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   13950:	9822      	ldr	r0, [sp, #136]	; 0x88
   13952:	b068      	add	sp, #416	; 0x1a0
   13954:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   13956:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13958:	07c1      	lsls	r1, r0, #31
   1395a:	2900      	cmp	r1, #0
   1395c:	d10f      	bne.n	1397e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   1395e:	e00b      	b.n	13978 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   13960:	f240 1084 	movw	r0, #388	; 0x184
   13964:	f2c0 0002 	movt	r0, #2
   13968:	f240 1290 	movw	r2, #400	; 0x190
   1396c:	f2c0 0202 	movt	r2, #2
   13970:	210b      	movs	r1, #11
   13972:	f003 fcab 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13976:	defe      	udf	#254	; 0xfe
   13978:	2001      	movs	r0, #1
        else { 1 }
   1397a:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   1397c:	e002      	b.n	13984 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   1397e:	2000      	movs	r0, #0
   13980:	9023      	str	r0, [sp, #140]	; 0x8c
   13982:	e7ff      	b.n	13984 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   13984:	9923      	ldr	r1, [sp, #140]	; 0x8c
   13986:	2012      	movs	r0, #18
   13988:	f005 fe0e 	bl	195a8 <hal_gpio_write>
   1398c:	e7ff      	b.n	1398e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   1398e:	2019      	movs	r0, #25
   13990:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   13992:	f005 fe09 	bl	195a8 <hal_gpio_write>
   13996:	e7ff      	b.n	13998 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   13998:	9821      	ldr	r0, [sp, #132]	; 0x84
   1399a:	2801      	cmp	r0, #1
   1399c:	d005      	beq.n	139aa <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   1399e:	e7ff      	b.n	139a0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   139a0:	9820      	ldr	r0, [sp, #128]	; 0x80
   139a2:	9061      	str	r0, [sp, #388]	; 0x184
   139a4:	9961      	ldr	r1, [sp, #388]	; 0x184
   139a6:	911e      	str	r1, [sp, #120]	; 0x78
   139a8:	e094      	b.n	13ad4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   139aa:	9820      	ldr	r0, [sp, #128]	; 0x80
   139ac:	905b      	str	r0, [sp, #364]	; 0x16c
   139ae:	995b      	ldr	r1, [sp, #364]	; 0x16c
   139b0:	911d      	str	r1, [sp, #116]	; 0x74
   139b2:	e7ff      	b.n	139b4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   139b4:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   139b6:	901c      	str	r0, [sp, #112]	; 0x70
   139b8:	991d      	ldr	r1, [sp, #116]	; 0x74
   139ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   139bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
   139be:	f006 faa1 	bl	19f04 <hal_spi_txrx>
   139c2:	9024      	str	r0, [sp, #144]	; 0x90
   139c4:	e7ff      	b.n	139c6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   139c6:	f64f 6078 	movw	r0, #65144	; 0xfe78
   139ca:	f2c0 0001 	movt	r0, #1
   139ce:	6800      	ldr	r0, [r0, #0]
   139d0:	a924      	add	r1, sp, #144	; 0x90
   139d2:	9125      	str	r1, [sp, #148]	; 0x94
   139d4:	9026      	str	r0, [sp, #152]	; 0x98
   139d6:	9825      	ldr	r0, [sp, #148]	; 0x94
   139d8:	905c      	str	r0, [sp, #368]	; 0x170
   139da:	9926      	ldr	r1, [sp, #152]	; 0x98
   139dc:	915d      	str	r1, [sp, #372]	; 0x174
   139de:	6802      	ldr	r2, [r0, #0]
   139e0:	680b      	ldr	r3, [r1, #0]
   139e2:	429a      	cmp	r2, r3
   139e4:	901b      	str	r0, [sp, #108]	; 0x6c
   139e6:	911a      	str	r1, [sp, #104]	; 0x68
   139e8:	d101      	bne.n	139ee <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   139ea:	e7ff      	b.n	139ec <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   139ec:	e11f      	b.n	13c2e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   139ee:	f64f 60d0 	movw	r0, #65232	; 0xfed0
   139f2:	f2c0 0001 	movt	r0, #1
   139f6:	6801      	ldr	r1, [r0, #0]
   139f8:	981b      	ldr	r0, [sp, #108]	; 0x6c
   139fa:	9036      	str	r0, [sp, #216]	; 0xd8
   139fc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   139fe:	9237      	str	r2, [sp, #220]	; 0xdc
   13a00:	f240 13a8 	movw	r3, #424	; 0x1a8
   13a04:	f2c0 0302 	movt	r3, #2
   13a08:	681b      	ldr	r3, [r3, #0]
   13a0a:	f64f 6cf0 	movw	ip, #65264	; 0xfef0
   13a0e:	f2c0 0c01 	movt	ip, #1
   13a12:	f8dc c000 	ldr.w	ip, [ip]
   13a16:	46ee      	mov	lr, sp
   13a18:	2400      	movs	r4, #0
   13a1a:	f8ce 4000 	str.w	r4, [lr]
   13a1e:	a838      	add	r0, sp, #224	; 0xe0
   13a20:	2201      	movs	r2, #1
   13a22:	9119      	str	r1, [sp, #100]	; 0x64
   13a24:	4619      	mov	r1, r3
   13a26:	4663      	mov	r3, ip
   13a28:	f7f5 f91b 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13a2c:	e7ff      	b.n	13a2e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   13a2e:	a836      	add	r0, sp, #216	; 0xd8
   13a30:	9033      	str	r0, [sp, #204]	; 0xcc
   13a32:	a837      	add	r0, sp, #220	; 0xdc
   13a34:	9034      	str	r0, [sp, #208]	; 0xd0
   13a36:	a838      	add	r0, sp, #224	; 0xe0
   13a38:	9035      	str	r0, [sp, #212]	; 0xd4
   13a3a:	9833      	ldr	r0, [sp, #204]	; 0xcc
   13a3c:	905e      	str	r0, [sp, #376]	; 0x178
   13a3e:	9934      	ldr	r1, [sp, #208]	; 0xd0
   13a40:	915f      	str	r1, [sp, #380]	; 0x17c
   13a42:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   13a44:	9260      	str	r2, [sp, #384]	; 0x180
   13a46:	f249 43b1 	movw	r3, #38065	; 0x94b1
   13a4a:	f2c0 0300 	movt	r3, #0
   13a4e:	9118      	str	r1, [sp, #96]	; 0x60
   13a50:	4619      	mov	r1, r3
   13a52:	9217      	str	r2, [sp, #92]	; 0x5c
   13a54:	f7f5 fd64 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13a58:	9016      	str	r0, [sp, #88]	; 0x58
   13a5a:	9115      	str	r1, [sp, #84]	; 0x54
   13a5c:	e7ff      	b.n	13a5e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   13a5e:	f249 41b1 	movw	r1, #38065	; 0x94b1
   13a62:	f2c0 0100 	movt	r1, #0
   13a66:	9818      	ldr	r0, [sp, #96]	; 0x60
   13a68:	f7f5 fd5a 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13a6c:	9014      	str	r0, [sp, #80]	; 0x50
   13a6e:	9113      	str	r1, [sp, #76]	; 0x4c
   13a70:	e7ff      	b.n	13a72 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   13a72:	f647 019b 	movw	r1, #30875	; 0x789b
   13a76:	f2c0 0101 	movt	r1, #1
   13a7a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   13a7c:	f7f5 fd8f 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13a80:	9012      	str	r0, [sp, #72]	; 0x48
   13a82:	9111      	str	r1, [sp, #68]	; 0x44
   13a84:	e7ff      	b.n	13a86 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   13a86:	9816      	ldr	r0, [sp, #88]	; 0x58
   13a88:	902d      	str	r0, [sp, #180]	; 0xb4
   13a8a:	9915      	ldr	r1, [sp, #84]	; 0x54
   13a8c:	912e      	str	r1, [sp, #184]	; 0xb8
   13a8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13a90:	922f      	str	r2, [sp, #188]	; 0xbc
   13a92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13a94:	9330      	str	r3, [sp, #192]	; 0xc0
   13a96:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   13a9a:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   13a9e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   13aa2:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   13aa6:	466c      	mov	r4, sp
   13aa8:	2503      	movs	r5, #3
   13aaa:	6025      	str	r5, [r4, #0]
   13aac:	a827      	add	r0, sp, #156	; 0x9c
   13aae:	ab2d      	add	r3, sp, #180	; 0xb4
   13ab0:	9919      	ldr	r1, [sp, #100]	; 0x64
   13ab2:	462a      	mov	r2, r5
   13ab4:	f7f5 f8d5 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13ab8:	e7ff      	b.n	13aba <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   13aba:	f240 10ac 	movw	r0, #428	; 0x1ac
   13abe:	f2c0 0002 	movt	r0, #2
   13ac2:	f003 fbfc 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13ac6:	9010      	str	r0, [sp, #64]	; 0x40
   13ac8:	e7ff      	b.n	13aca <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   13aca:	a827      	add	r0, sp, #156	; 0x9c
   13acc:	9910      	ldr	r1, [sp, #64]	; 0x40
   13ace:	f003 fc33 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13ad2:	defe      	udf	#254	; 0xfe
   13ad4:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   13ad6:	900f      	str	r0, [sp, #60]	; 0x3c
   13ad8:	991e      	ldr	r1, [sp, #120]	; 0x78
   13ada:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13adc:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13ade:	f006 fa67 	bl	19fb0 <hal_spi_txrx_noblock>
   13ae2:	903e      	str	r0, [sp, #248]	; 0xf8
   13ae4:	e7ff      	b.n	13ae6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13ae6:	f64f 6078 	movw	r0, #65144	; 0xfe78
   13aea:	f2c0 0001 	movt	r0, #1
   13aee:	6800      	ldr	r0, [r0, #0]
   13af0:	a93e      	add	r1, sp, #248	; 0xf8
   13af2:	913f      	str	r1, [sp, #252]	; 0xfc
   13af4:	9040      	str	r0, [sp, #256]	; 0x100
   13af6:	983f      	ldr	r0, [sp, #252]	; 0xfc
   13af8:	9062      	str	r0, [sp, #392]	; 0x188
   13afa:	9940      	ldr	r1, [sp, #256]	; 0x100
   13afc:	9163      	str	r1, [sp, #396]	; 0x18c
   13afe:	6802      	ldr	r2, [r0, #0]
   13b00:	680b      	ldr	r3, [r1, #0]
   13b02:	429a      	cmp	r2, r3
   13b04:	900e      	str	r0, [sp, #56]	; 0x38
   13b06:	910d      	str	r1, [sp, #52]	; 0x34
   13b08:	d10c      	bne.n	13b24 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   13b0a:	e7ff      	b.n	13b0c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   13b0c:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   13b10:	9067      	str	r0, [sp, #412]	; 0x19c
   13b12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13b16:	fba0 0101 	umull	r0, r1, r0, r1
   13b1a:	2900      	cmp	r1, #0
   13b1c:	900c      	str	r0, [sp, #48]	; 0x30
   13b1e:	f040 8090 	bne.w	13c42 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   13b22:	e072      	b.n	13c0a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13b24:	f64f 60d0 	movw	r0, #65232	; 0xfed0
   13b28:	f2c0 0001 	movt	r0, #1
   13b2c:	6801      	ldr	r1, [r0, #0]
   13b2e:	980e      	ldr	r0, [sp, #56]	; 0x38
   13b30:	9050      	str	r0, [sp, #320]	; 0x140
   13b32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13b34:	9251      	str	r2, [sp, #324]	; 0x144
   13b36:	f240 13a8 	movw	r3, #424	; 0x1a8
   13b3a:	f2c0 0302 	movt	r3, #2
   13b3e:	681b      	ldr	r3, [r3, #0]
   13b40:	f64f 6cf0 	movw	ip, #65264	; 0xfef0
   13b44:	f2c0 0c01 	movt	ip, #1
   13b48:	f8dc c000 	ldr.w	ip, [ip]
   13b4c:	46ee      	mov	lr, sp
   13b4e:	2400      	movs	r4, #0
   13b50:	f8ce 4000 	str.w	r4, [lr]
   13b54:	a852      	add	r0, sp, #328	; 0x148
   13b56:	2201      	movs	r2, #1
   13b58:	910b      	str	r1, [sp, #44]	; 0x2c
   13b5a:	4619      	mov	r1, r3
   13b5c:	4663      	mov	r3, ip
   13b5e:	f7f5 f880 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b62:	e7ff      	b.n	13b64 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   13b64:	a850      	add	r0, sp, #320	; 0x140
   13b66:	904d      	str	r0, [sp, #308]	; 0x134
   13b68:	a851      	add	r0, sp, #324	; 0x144
   13b6a:	904e      	str	r0, [sp, #312]	; 0x138
   13b6c:	a852      	add	r0, sp, #328	; 0x148
   13b6e:	904f      	str	r0, [sp, #316]	; 0x13c
   13b70:	984d      	ldr	r0, [sp, #308]	; 0x134
   13b72:	9064      	str	r0, [sp, #400]	; 0x190
   13b74:	994e      	ldr	r1, [sp, #312]	; 0x138
   13b76:	9165      	str	r1, [sp, #404]	; 0x194
   13b78:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   13b7a:	9266      	str	r2, [sp, #408]	; 0x198
   13b7c:	f249 43b1 	movw	r3, #38065	; 0x94b1
   13b80:	f2c0 0300 	movt	r3, #0
   13b84:	910a      	str	r1, [sp, #40]	; 0x28
   13b86:	4619      	mov	r1, r3
   13b88:	9209      	str	r2, [sp, #36]	; 0x24
   13b8a:	f7f5 fcc9 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13b8e:	9008      	str	r0, [sp, #32]
   13b90:	9107      	str	r1, [sp, #28]
   13b92:	e7ff      	b.n	13b94 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   13b94:	f249 41b1 	movw	r1, #38065	; 0x94b1
   13b98:	f2c0 0100 	movt	r1, #0
   13b9c:	980a      	ldr	r0, [sp, #40]	; 0x28
   13b9e:	f7f5 fcbf 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13ba2:	9006      	str	r0, [sp, #24]
   13ba4:	9105      	str	r1, [sp, #20]
   13ba6:	e7ff      	b.n	13ba8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   13ba8:	f647 019b 	movw	r1, #30875	; 0x789b
   13bac:	f2c0 0101 	movt	r1, #1
   13bb0:	9809      	ldr	r0, [sp, #36]	; 0x24
   13bb2:	f7f5 fcf4 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13bb6:	9004      	str	r0, [sp, #16]
   13bb8:	9103      	str	r1, [sp, #12]
   13bba:	e7ff      	b.n	13bbc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   13bbc:	9808      	ldr	r0, [sp, #32]
   13bbe:	9047      	str	r0, [sp, #284]	; 0x11c
   13bc0:	9907      	ldr	r1, [sp, #28]
   13bc2:	9148      	str	r1, [sp, #288]	; 0x120
   13bc4:	9a06      	ldr	r2, [sp, #24]
   13bc6:	9249      	str	r2, [sp, #292]	; 0x124
   13bc8:	9b05      	ldr	r3, [sp, #20]
   13bca:	934a      	str	r3, [sp, #296]	; 0x128
   13bcc:	f8dd c010 	ldr.w	ip, [sp, #16]
   13bd0:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   13bd4:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13bd8:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   13bdc:	466c      	mov	r4, sp
   13bde:	2503      	movs	r5, #3
   13be0:	6025      	str	r5, [r4, #0]
   13be2:	a841      	add	r0, sp, #260	; 0x104
   13be4:	ab47      	add	r3, sp, #284	; 0x11c
   13be6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13be8:	462a      	mov	r2, r5
   13bea:	f7f5 f83a 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13bee:	e7ff      	b.n	13bf0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   13bf0:	f240 10bc 	movw	r0, #444	; 0x1bc
   13bf4:	f2c0 0002 	movt	r0, #2
   13bf8:	f003 fb61 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13bfc:	9002      	str	r0, [sp, #8]
   13bfe:	e7ff      	b.n	13c00 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   13c00:	a841      	add	r0, sp, #260	; 0x104
   13c02:	9902      	ldr	r1, [sp, #8]
   13c04:	f003 fb98 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13c08:	defe      	udf	#254	; 0xfe
   13c0a:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13c0e:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13c12:	990c      	ldr	r1, [sp, #48]	; 0x30
   13c14:	fba1 0200 	umull	r0, r2, r1, r0
   13c18:	0991      	lsrs	r1, r2, #6
   13c1a:	f245 227c 	movw	r2, #21116	; 0x527c
   13c1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13c22:	9001      	str	r0, [sp, #4]
   13c24:	4610      	mov	r0, r2
   13c26:	f007 fb8f 	bl	1b348 <os_sem_pend>
   13c2a:	e7ff      	b.n	13c2c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   13c2c:	e7ff      	b.n	13c2e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   13c2e:	2019      	movs	r0, #25
   13c30:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   13c32:	f005 fcb9 	bl	195a8 <hal_gpio_write>
   13c36:	e7ff      	b.n	13c38 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   13c38:	2000      	movs	r0, #0
    Ok(())
   13c3a:	9022      	str	r0, [sp, #136]	; 0x88
   13c3c:	2001      	movs	r0, #1
   13c3e:	9022      	str	r0, [sp, #136]	; 0x88
}
   13c40:	e686      	b.n	13950 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13c42:	f240 00a0 	movw	r0, #160	; 0xa0
   13c46:	f2c0 0002 	movt	r0, #2
   13c4a:	f240 12cc 	movw	r2, #460	; 0x1cc
   13c4e:	f2c0 0202 	movt	r2, #2
   13c52:	2121      	movs	r1, #33	; 0x21
   13c54:	f003 fb3a 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13c58:	defe      	udf	#254	; 0xfe

00013c5a <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   13c5a:	b5b0      	push	{r4, r5, r7, lr}
   13c5c:	b0ae      	sub	sp, #184	; 0xb8
   13c5e:	9027      	str	r0, [sp, #156]	; 0x9c
   13c60:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   13c62:	f245 207c 	movw	r0, #21116	; 0x527c
   13c66:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13c6a:	f007 fb3b 	bl	1b2e4 <os_sem_release>
   13c6e:	900d      	str	r0, [sp, #52]	; 0x34
   13c70:	e7ff      	b.n	13c72 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   13c72:	f64f 6078 	movw	r0, #65144	; 0xfe78
   13c76:	f2c0 0001 	movt	r0, #1
   13c7a:	6800      	ldr	r0, [r0, #0]
   13c7c:	a90d      	add	r1, sp, #52	; 0x34
   13c7e:	910e      	str	r1, [sp, #56]	; 0x38
   13c80:	900f      	str	r0, [sp, #60]	; 0x3c
   13c82:	980e      	ldr	r0, [sp, #56]	; 0x38
   13c84:	9029      	str	r0, [sp, #164]	; 0xa4
   13c86:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13c88:	912a      	str	r1, [sp, #168]	; 0xa8
   13c8a:	6802      	ldr	r2, [r0, #0]
   13c8c:	680b      	ldr	r3, [r1, #0]
   13c8e:	429a      	cmp	r2, r3
   13c90:	900c      	str	r0, [sp, #48]	; 0x30
   13c92:	910b      	str	r1, [sp, #44]	; 0x2c
   13c94:	d102      	bne.n	13c9c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   13c96:	e7ff      	b.n	13c98 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   13c98:	b02e      	add	sp, #184	; 0xb8
   13c9a:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   13c9c:	f64f 60d0 	movw	r0, #65232	; 0xfed0
   13ca0:	f2c0 0001 	movt	r0, #1
   13ca4:	6801      	ldr	r1, [r0, #0]
   13ca6:	980c      	ldr	r0, [sp, #48]	; 0x30
   13ca8:	901f      	str	r0, [sp, #124]	; 0x7c
   13caa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13cac:	9220      	str	r2, [sp, #128]	; 0x80
   13cae:	f64f 73e8 	movw	r3, #65512	; 0xffe8
   13cb2:	f2c0 0301 	movt	r3, #1
   13cb6:	681b      	ldr	r3, [r3, #0]
   13cb8:	f64f 6cf0 	movw	ip, #65264	; 0xfef0
   13cbc:	f2c0 0c01 	movt	ip, #1
   13cc0:	f8dc c000 	ldr.w	ip, [ip]
   13cc4:	46ee      	mov	lr, sp
   13cc6:	2400      	movs	r4, #0
   13cc8:	f8ce 4000 	str.w	r4, [lr]
   13ccc:	a821      	add	r0, sp, #132	; 0x84
   13cce:	2201      	movs	r2, #1
   13cd0:	910a      	str	r1, [sp, #40]	; 0x28
   13cd2:	4619      	mov	r1, r3
   13cd4:	4663      	mov	r3, ip
   13cd6:	f7f4 ffc4 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13cda:	e7ff      	b.n	13cdc <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   13cdc:	a81f      	add	r0, sp, #124	; 0x7c
   13cde:	901c      	str	r0, [sp, #112]	; 0x70
   13ce0:	a820      	add	r0, sp, #128	; 0x80
   13ce2:	901d      	str	r0, [sp, #116]	; 0x74
   13ce4:	a821      	add	r0, sp, #132	; 0x84
   13ce6:	901e      	str	r0, [sp, #120]	; 0x78
   13ce8:	981c      	ldr	r0, [sp, #112]	; 0x70
   13cea:	902b      	str	r0, [sp, #172]	; 0xac
   13cec:	991d      	ldr	r1, [sp, #116]	; 0x74
   13cee:	912c      	str	r1, [sp, #176]	; 0xb0
   13cf0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13cf2:	922d      	str	r2, [sp, #180]	; 0xb4
   13cf4:	f249 5305 	movw	r3, #38149	; 0x9505
   13cf8:	f2c0 0300 	movt	r3, #0
   13cfc:	9109      	str	r1, [sp, #36]	; 0x24
   13cfe:	4619      	mov	r1, r3
   13d00:	9208      	str	r2, [sp, #32]
   13d02:	f7f5 fc37 	bl	9574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13d06:	9007      	str	r0, [sp, #28]
   13d08:	9106      	str	r1, [sp, #24]
   13d0a:	e7ff      	b.n	13d0c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   13d0c:	f249 5105 	movw	r1, #38149	; 0x9505
   13d10:	f2c0 0100 	movt	r1, #0
   13d14:	9809      	ldr	r0, [sp, #36]	; 0x24
   13d16:	f7f5 fc2d 	bl	9574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13d1a:	9005      	str	r0, [sp, #20]
   13d1c:	9104      	str	r1, [sp, #16]
   13d1e:	e7ff      	b.n	13d20 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   13d20:	f647 019b 	movw	r1, #30875	; 0x789b
   13d24:	f2c0 0101 	movt	r1, #1
   13d28:	9808      	ldr	r0, [sp, #32]
   13d2a:	f7f5 fc38 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13d2e:	9003      	str	r0, [sp, #12]
   13d30:	9102      	str	r1, [sp, #8]
   13d32:	e7ff      	b.n	13d34 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   13d34:	9807      	ldr	r0, [sp, #28]
   13d36:	9016      	str	r0, [sp, #88]	; 0x58
   13d38:	9906      	ldr	r1, [sp, #24]
   13d3a:	9117      	str	r1, [sp, #92]	; 0x5c
   13d3c:	9a05      	ldr	r2, [sp, #20]
   13d3e:	9218      	str	r2, [sp, #96]	; 0x60
   13d40:	9b04      	ldr	r3, [sp, #16]
   13d42:	9319      	str	r3, [sp, #100]	; 0x64
   13d44:	f8dd c00c 	ldr.w	ip, [sp, #12]
   13d48:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   13d4c:	f8dd e008 	ldr.w	lr, [sp, #8]
   13d50:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   13d54:	466c      	mov	r4, sp
   13d56:	2503      	movs	r5, #3
   13d58:	6025      	str	r5, [r4, #0]
   13d5a:	a810      	add	r0, sp, #64	; 0x40
   13d5c:	ab16      	add	r3, sp, #88	; 0x58
   13d5e:	990a      	ldr	r1, [sp, #40]	; 0x28
   13d60:	462a      	mov	r2, r5
   13d62:	f7f4 ff7e 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13d66:	e7ff      	b.n	13d68 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   13d68:	f240 10dc 	movw	r0, #476	; 0x1dc
   13d6c:	f2c0 0002 	movt	r0, #2
   13d70:	f003 faa5 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13d74:	9001      	str	r0, [sp, #4]
   13d76:	e7ff      	b.n	13d78 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   13d78:	a810      	add	r0, sp, #64	; 0x40
   13d7a:	9901      	ldr	r1, [sp, #4]
   13d7c:	f003 fadc 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13d80:	defe      	udf	#254	; 0xfe

00013d82 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   13d82:	b580      	push	{r7, lr}
   13d84:	b084      	sub	sp, #16
   13d86:	4601      	mov	r1, r0
   13d88:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   13d8c:	b2c0      	uxtb	r0, r0
   13d8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13d92:	fba0 0202 	umull	r0, r2, r0, r2
   13d96:	2a00      	cmp	r2, #0
   13d98:	9001      	str	r0, [sp, #4]
   13d9a:	d110      	bne.n	13dbe <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   13d9c:	e7ff      	b.n	13d9e <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   13d9e:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13da2:	f2c1 0062 	movt	r0, #4194	; 0x1062
   13da6:	9901      	ldr	r1, [sp, #4]
   13da8:	fba1 0200 	umull	r0, r2, r1, r0
   13dac:	0992      	lsrs	r2, r2, #6
   13dae:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   13db0:	9000      	str	r0, [sp, #0]
   13db2:	4610      	mov	r0, r2
   13db4:	f007 fc16 	bl	1b5e4 <os_time_delay>
   13db8:	e7ff      	b.n	13dba <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   13dba:	b004      	add	sp, #16
   13dbc:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   13dbe:	f240 00a0 	movw	r0, #160	; 0xa0
   13dc2:	f2c0 0002 	movt	r0, #2
   13dc6:	f240 12ec 	movw	r2, #492	; 0x1ec
   13dca:	f2c0 0202 	movt	r2, #2
   13dce:	2121      	movs	r1, #33	; 0x21
   13dd0:	f003 fa7c 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13dd4:	defe      	udf	#254	; 0xfe

00013dd6 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
   13dd6:	b082      	sub	sp, #8
   13dd8:	2000      	movs	r0, #0
        SPI {
   13dda:	9000      	str	r0, [sp, #0]
   13ddc:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
   13dde:	9800      	ldr	r0, [sp, #0]
   13de0:	9901      	ldr	r1, [sp, #4]
   13de2:	b002      	add	sp, #8
   13de4:	4770      	bx	lr

00013de6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
   13de6:	b5b0      	push	{r4, r5, r7, lr}
   13de8:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
   13dec:	9077      	str	r0, [sp, #476]	; 0x1dc
   13dee:	9178      	str	r1, [sp, #480]	; 0x1e0
   13df0:	9279      	str	r2, [sp, #484]	; 0x1e4
   13df2:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
   13df4:	9028      	str	r0, [sp, #160]	; 0xa0
   13df6:	4608      	mov	r0, r1
   13df8:	9127      	str	r1, [sp, #156]	; 0x9c
   13dfa:	4619      	mov	r1, r3
   13dfc:	9226      	str	r2, [sp, #152]	; 0x98
   13dfe:	f005 ffc5 	bl	19d8c <hal_spi_config>
   13e02:	9029      	str	r0, [sp, #164]	; 0xa4
   13e04:	e7ff      	b.n	13e06 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
   13e06:	f240 10fc 	movw	r0, #508	; 0x1fc
   13e0a:	f2c0 0002 	movt	r0, #2
   13e0e:	6800      	ldr	r0, [r0, #0]
   13e10:	a929      	add	r1, sp, #164	; 0xa4
   13e12:	912a      	str	r1, [sp, #168]	; 0xa8
   13e14:	902b      	str	r0, [sp, #172]	; 0xac
   13e16:	982a      	ldr	r0, [sp, #168]	; 0xa8
   13e18:	907b      	str	r0, [sp, #492]	; 0x1ec
   13e1a:	992b      	ldr	r1, [sp, #172]	; 0xac
   13e1c:	917c      	str	r1, [sp, #496]	; 0x1f0
   13e1e:	6802      	ldr	r2, [r0, #0]
   13e20:	680b      	ldr	r3, [r1, #0]
   13e22:	429a      	cmp	r2, r3
   13e24:	9025      	str	r0, [sp, #148]	; 0x94
   13e26:	9124      	str	r1, [sp, #144]	; 0x90
   13e28:	d105      	bne.n	13e36 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
   13e2a:	e7ff      	b.n	13e2c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
   13e2c:	9827      	ldr	r0, [sp, #156]	; 0x9c
   13e2e:	f005 ffc9 	bl	19dc4 <hal_spi_enable>
   13e32:	9043      	str	r0, [sp, #268]	; 0x10c
   13e34:	e072      	b.n	13f1c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
   13e36:	f240 2054 	movw	r0, #596	; 0x254
   13e3a:	f2c0 0002 	movt	r0, #2
   13e3e:	6801      	ldr	r1, [r0, #0]
   13e40:	9825      	ldr	r0, [sp, #148]	; 0x94
   13e42:	903b      	str	r0, [sp, #236]	; 0xec
   13e44:	9a24      	ldr	r2, [sp, #144]	; 0x90
   13e46:	923c      	str	r2, [sp, #240]	; 0xf0
   13e48:	f240 2370 	movw	r3, #624	; 0x270
   13e4c:	f2c0 0302 	movt	r3, #2
   13e50:	681b      	ldr	r3, [r3, #0]
   13e52:	f240 2c74 	movw	ip, #628	; 0x274
   13e56:	f2c0 0c02 	movt	ip, #2
   13e5a:	f8dc c000 	ldr.w	ip, [ip]
   13e5e:	46ee      	mov	lr, sp
   13e60:	2400      	movs	r4, #0
   13e62:	f8ce 4000 	str.w	r4, [lr]
   13e66:	a83d      	add	r0, sp, #244	; 0xf4
   13e68:	2201      	movs	r2, #1
   13e6a:	9123      	str	r1, [sp, #140]	; 0x8c
   13e6c:	4619      	mov	r1, r3
   13e6e:	4663      	mov	r3, ip
   13e70:	f7f4 fef7 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13e74:	e7ff      	b.n	13e76 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
   13e76:	a83b      	add	r0, sp, #236	; 0xec
   13e78:	9038      	str	r0, [sp, #224]	; 0xe0
   13e7a:	a83c      	add	r0, sp, #240	; 0xf0
   13e7c:	9039      	str	r0, [sp, #228]	; 0xe4
   13e7e:	a83d      	add	r0, sp, #244	; 0xf4
   13e80:	903a      	str	r0, [sp, #232]	; 0xe8
   13e82:	9838      	ldr	r0, [sp, #224]	; 0xe0
   13e84:	907d      	str	r0, [sp, #500]	; 0x1f4
   13e86:	9939      	ldr	r1, [sp, #228]	; 0xe4
   13e88:	917e      	str	r1, [sp, #504]	; 0x1f8
   13e8a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   13e8c:	927f      	str	r2, [sp, #508]	; 0x1fc
   13e8e:	f249 43b1 	movw	r3, #38065	; 0x94b1
   13e92:	f2c0 0300 	movt	r3, #0
   13e96:	9122      	str	r1, [sp, #136]	; 0x88
   13e98:	4619      	mov	r1, r3
   13e9a:	9221      	str	r2, [sp, #132]	; 0x84
   13e9c:	f7f5 fb40 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13ea0:	9020      	str	r0, [sp, #128]	; 0x80
   13ea2:	911f      	str	r1, [sp, #124]	; 0x7c
   13ea4:	e7ff      	b.n	13ea6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
   13ea6:	f249 41b1 	movw	r1, #38065	; 0x94b1
   13eaa:	f2c0 0100 	movt	r1, #0
   13eae:	9822      	ldr	r0, [sp, #136]	; 0x88
   13eb0:	f7f5 fb36 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13eb4:	901e      	str	r0, [sp, #120]	; 0x78
   13eb6:	911d      	str	r1, [sp, #116]	; 0x74
   13eb8:	e7ff      	b.n	13eba <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
   13eba:	f647 019b 	movw	r1, #30875	; 0x789b
   13ebe:	f2c0 0101 	movt	r1, #1
   13ec2:	9821      	ldr	r0, [sp, #132]	; 0x84
   13ec4:	f7f5 fb6b 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13ec8:	901c      	str	r0, [sp, #112]	; 0x70
   13eca:	911b      	str	r1, [sp, #108]	; 0x6c
   13ecc:	e7ff      	b.n	13ece <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
   13ece:	9820      	ldr	r0, [sp, #128]	; 0x80
   13ed0:	9032      	str	r0, [sp, #200]	; 0xc8
   13ed2:	991f      	ldr	r1, [sp, #124]	; 0x7c
   13ed4:	9133      	str	r1, [sp, #204]	; 0xcc
   13ed6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13ed8:	9234      	str	r2, [sp, #208]	; 0xd0
   13eda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   13edc:	9335      	str	r3, [sp, #212]	; 0xd4
   13ede:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
   13ee2:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
   13ee6:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
   13eea:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
   13eee:	466c      	mov	r4, sp
   13ef0:	2503      	movs	r5, #3
   13ef2:	6025      	str	r5, [r4, #0]
   13ef4:	a82c      	add	r0, sp, #176	; 0xb0
   13ef6:	ab32      	add	r3, sp, #200	; 0xc8
   13ef8:	9923      	ldr	r1, [sp, #140]	; 0x8c
   13efa:	462a      	mov	r2, r5
   13efc:	f7f4 feb1 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13f00:	e7ff      	b.n	13f02 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
   13f02:	f240 2090 	movw	r0, #656	; 0x290
   13f06:	f2c0 0002 	movt	r0, #2
   13f0a:	f003 f9d8 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13f0e:	901a      	str	r0, [sp, #104]	; 0x68
   13f10:	e7ff      	b.n	13f12 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
   13f12:	a82c      	add	r0, sp, #176	; 0xb0
   13f14:	991a      	ldr	r1, [sp, #104]	; 0x68
   13f16:	f003 fa0f 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13f1a:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
   13f1c:	f240 10fc 	movw	r0, #508	; 0x1fc
   13f20:	f2c0 0002 	movt	r0, #2
   13f24:	6800      	ldr	r0, [r0, #0]
   13f26:	a943      	add	r1, sp, #268	; 0x10c
   13f28:	9144      	str	r1, [sp, #272]	; 0x110
   13f2a:	9045      	str	r0, [sp, #276]	; 0x114
   13f2c:	9844      	ldr	r0, [sp, #272]	; 0x110
   13f2e:	9080      	str	r0, [sp, #512]	; 0x200
   13f30:	9945      	ldr	r1, [sp, #276]	; 0x114
   13f32:	9181      	str	r1, [sp, #516]	; 0x204
   13f34:	6802      	ldr	r2, [r0, #0]
   13f36:	680b      	ldr	r3, [r1, #0]
   13f38:	429a      	cmp	r2, r3
   13f3a:	9019      	str	r0, [sp, #100]	; 0x64
   13f3c:	9118      	str	r1, [sp, #96]	; 0x60
   13f3e:	d106      	bne.n	13f4e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
   13f40:	e7ff      	b.n	13f42 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
   13f42:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
   13f44:	9826      	ldr	r0, [sp, #152]	; 0x98
   13f46:	f005 fb13 	bl	19570 <hal_gpio_init_out>
   13f4a:	905d      	str	r0, [sp, #372]	; 0x174
   13f4c:	e072      	b.n	14034 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
   13f4e:	f240 2054 	movw	r0, #596	; 0x254
   13f52:	f2c0 0002 	movt	r0, #2
   13f56:	6801      	ldr	r1, [r0, #0]
   13f58:	9819      	ldr	r0, [sp, #100]	; 0x64
   13f5a:	9055      	str	r0, [sp, #340]	; 0x154
   13f5c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13f5e:	9256      	str	r2, [sp, #344]	; 0x158
   13f60:	f240 23b8 	movw	r3, #696	; 0x2b8
   13f64:	f2c0 0302 	movt	r3, #2
   13f68:	681b      	ldr	r3, [r3, #0]
   13f6a:	f240 2c74 	movw	ip, #628	; 0x274
   13f6e:	f2c0 0c02 	movt	ip, #2
   13f72:	f8dc c000 	ldr.w	ip, [ip]
   13f76:	46ee      	mov	lr, sp
   13f78:	2400      	movs	r4, #0
   13f7a:	f8ce 4000 	str.w	r4, [lr]
   13f7e:	a857      	add	r0, sp, #348	; 0x15c
   13f80:	2201      	movs	r2, #1
   13f82:	9117      	str	r1, [sp, #92]	; 0x5c
   13f84:	4619      	mov	r1, r3
   13f86:	4663      	mov	r3, ip
   13f88:	f7f4 fe6b 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13f8c:	e7ff      	b.n	13f8e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
   13f8e:	a855      	add	r0, sp, #340	; 0x154
   13f90:	9052      	str	r0, [sp, #328]	; 0x148
   13f92:	a856      	add	r0, sp, #344	; 0x158
   13f94:	9053      	str	r0, [sp, #332]	; 0x14c
   13f96:	a857      	add	r0, sp, #348	; 0x15c
   13f98:	9054      	str	r0, [sp, #336]	; 0x150
   13f9a:	9852      	ldr	r0, [sp, #328]	; 0x148
   13f9c:	9082      	str	r0, [sp, #520]	; 0x208
   13f9e:	9953      	ldr	r1, [sp, #332]	; 0x14c
   13fa0:	9183      	str	r1, [sp, #524]	; 0x20c
   13fa2:	9a54      	ldr	r2, [sp, #336]	; 0x150
   13fa4:	9284      	str	r2, [sp, #528]	; 0x210
   13fa6:	f249 43b1 	movw	r3, #38065	; 0x94b1
   13faa:	f2c0 0300 	movt	r3, #0
   13fae:	9116      	str	r1, [sp, #88]	; 0x58
   13fb0:	4619      	mov	r1, r3
   13fb2:	9215      	str	r2, [sp, #84]	; 0x54
   13fb4:	f7f5 fab4 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13fb8:	9014      	str	r0, [sp, #80]	; 0x50
   13fba:	9113      	str	r1, [sp, #76]	; 0x4c
   13fbc:	e7ff      	b.n	13fbe <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
   13fbe:	f249 41b1 	movw	r1, #38065	; 0x94b1
   13fc2:	f2c0 0100 	movt	r1, #0
   13fc6:	9816      	ldr	r0, [sp, #88]	; 0x58
   13fc8:	f7f5 faaa 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13fcc:	9012      	str	r0, [sp, #72]	; 0x48
   13fce:	9111      	str	r1, [sp, #68]	; 0x44
   13fd0:	e7ff      	b.n	13fd2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
   13fd2:	f647 019b 	movw	r1, #30875	; 0x789b
   13fd6:	f2c0 0101 	movt	r1, #1
   13fda:	9815      	ldr	r0, [sp, #84]	; 0x54
   13fdc:	f7f5 fadf 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13fe0:	9010      	str	r0, [sp, #64]	; 0x40
   13fe2:	910f      	str	r1, [sp, #60]	; 0x3c
   13fe4:	e7ff      	b.n	13fe6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
   13fe6:	9814      	ldr	r0, [sp, #80]	; 0x50
   13fe8:	904c      	str	r0, [sp, #304]	; 0x130
   13fea:	9913      	ldr	r1, [sp, #76]	; 0x4c
   13fec:	914d      	str	r1, [sp, #308]	; 0x134
   13fee:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13ff0:	924e      	str	r2, [sp, #312]	; 0x138
   13ff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13ff4:	934f      	str	r3, [sp, #316]	; 0x13c
   13ff6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   13ffa:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
   13ffe:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   14002:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
   14006:	466c      	mov	r4, sp
   14008:	2503      	movs	r5, #3
   1400a:	6025      	str	r5, [r4, #0]
   1400c:	a846      	add	r0, sp, #280	; 0x118
   1400e:	ab4c      	add	r3, sp, #304	; 0x130
   14010:	9917      	ldr	r1, [sp, #92]	; 0x5c
   14012:	462a      	mov	r2, r5
   14014:	f7f4 fe25 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14018:	e7ff      	b.n	1401a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
   1401a:	f240 20bc 	movw	r0, #700	; 0x2bc
   1401e:	f2c0 0002 	movt	r0, #2
   14022:	f003 f94c 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14026:	900e      	str	r0, [sp, #56]	; 0x38
   14028:	e7ff      	b.n	1402a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
   1402a:	a846      	add	r0, sp, #280	; 0x118
   1402c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1402e:	f003 f983 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14032:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
   14034:	f240 10fc 	movw	r0, #508	; 0x1fc
   14038:	f2c0 0002 	movt	r0, #2
   1403c:	6800      	ldr	r0, [r0, #0]
   1403e:	a95d      	add	r1, sp, #372	; 0x174
   14040:	915e      	str	r1, [sp, #376]	; 0x178
   14042:	905f      	str	r0, [sp, #380]	; 0x17c
   14044:	985e      	ldr	r0, [sp, #376]	; 0x178
   14046:	9085      	str	r0, [sp, #532]	; 0x214
   14048:	995f      	ldr	r1, [sp, #380]	; 0x17c
   1404a:	9186      	str	r1, [sp, #536]	; 0x218
   1404c:	6802      	ldr	r2, [r0, #0]
   1404e:	680b      	ldr	r3, [r1, #0]
   14050:	429a      	cmp	r2, r3
   14052:	900d      	str	r0, [sp, #52]	; 0x34
   14054:	910c      	str	r1, [sp, #48]	; 0x30
   14056:	d109      	bne.n	1406c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
   14058:	e7ff      	b.n	1405a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
   1405a:	9827      	ldr	r0, [sp, #156]	; 0x9c
   1405c:	9928      	ldr	r1, [sp, #160]	; 0xa0
   1405e:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
   14060:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14062:	604a      	str	r2, [r1, #4]
   14064:	2001      	movs	r0, #1
        Ok(())
    }
   14066:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
   1406a:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
   1406c:	f240 2054 	movw	r0, #596	; 0x254
   14070:	f2c0 0002 	movt	r0, #2
   14074:	6801      	ldr	r1, [r0, #0]
   14076:	980d      	ldr	r0, [sp, #52]	; 0x34
   14078:	906f      	str	r0, [sp, #444]	; 0x1bc
   1407a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1407c:	9270      	str	r2, [sp, #448]	; 0x1c0
   1407e:	f240 23e4 	movw	r3, #740	; 0x2e4
   14082:	f2c0 0302 	movt	r3, #2
   14086:	681b      	ldr	r3, [r3, #0]
   14088:	f240 2c74 	movw	ip, #628	; 0x274
   1408c:	f2c0 0c02 	movt	ip, #2
   14090:	f8dc c000 	ldr.w	ip, [ip]
   14094:	46ee      	mov	lr, sp
   14096:	2400      	movs	r4, #0
   14098:	f8ce 4000 	str.w	r4, [lr]
   1409c:	a871      	add	r0, sp, #452	; 0x1c4
   1409e:	2201      	movs	r2, #1
   140a0:	910b      	str	r1, [sp, #44]	; 0x2c
   140a2:	4619      	mov	r1, r3
   140a4:	4663      	mov	r3, ip
   140a6:	f7f4 fddc 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   140aa:	e7ff      	b.n	140ac <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
   140ac:	a86f      	add	r0, sp, #444	; 0x1bc
   140ae:	906c      	str	r0, [sp, #432]	; 0x1b0
   140b0:	a870      	add	r0, sp, #448	; 0x1c0
   140b2:	906d      	str	r0, [sp, #436]	; 0x1b4
   140b4:	a871      	add	r0, sp, #452	; 0x1c4
   140b6:	906e      	str	r0, [sp, #440]	; 0x1b8
   140b8:	986c      	ldr	r0, [sp, #432]	; 0x1b0
   140ba:	9087      	str	r0, [sp, #540]	; 0x21c
   140bc:	996d      	ldr	r1, [sp, #436]	; 0x1b4
   140be:	9188      	str	r1, [sp, #544]	; 0x220
   140c0:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
   140c2:	9289      	str	r2, [sp, #548]	; 0x224
   140c4:	f249 43b1 	movw	r3, #38065	; 0x94b1
   140c8:	f2c0 0300 	movt	r3, #0
   140cc:	910a      	str	r1, [sp, #40]	; 0x28
   140ce:	4619      	mov	r1, r3
   140d0:	9209      	str	r2, [sp, #36]	; 0x24
   140d2:	f7f5 fa25 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   140d6:	9008      	str	r0, [sp, #32]
   140d8:	9107      	str	r1, [sp, #28]
   140da:	e7ff      	b.n	140dc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
   140dc:	f249 41b1 	movw	r1, #38065	; 0x94b1
   140e0:	f2c0 0100 	movt	r1, #0
   140e4:	980a      	ldr	r0, [sp, #40]	; 0x28
   140e6:	f7f5 fa1b 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   140ea:	9006      	str	r0, [sp, #24]
   140ec:	9105      	str	r1, [sp, #20]
   140ee:	e7ff      	b.n	140f0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
   140f0:	f647 019b 	movw	r1, #30875	; 0x789b
   140f4:	f2c0 0101 	movt	r1, #1
   140f8:	9809      	ldr	r0, [sp, #36]	; 0x24
   140fa:	f7f5 fa50 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   140fe:	9004      	str	r0, [sp, #16]
   14100:	9103      	str	r1, [sp, #12]
   14102:	e7ff      	b.n	14104 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
   14104:	9808      	ldr	r0, [sp, #32]
   14106:	9066      	str	r0, [sp, #408]	; 0x198
   14108:	9907      	ldr	r1, [sp, #28]
   1410a:	9167      	str	r1, [sp, #412]	; 0x19c
   1410c:	9a06      	ldr	r2, [sp, #24]
   1410e:	9268      	str	r2, [sp, #416]	; 0x1a0
   14110:	9b05      	ldr	r3, [sp, #20]
   14112:	9369      	str	r3, [sp, #420]	; 0x1a4
   14114:	f8dd c010 	ldr.w	ip, [sp, #16]
   14118:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
   1411c:	f8dd e00c 	ldr.w	lr, [sp, #12]
   14120:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
   14124:	466c      	mov	r4, sp
   14126:	2503      	movs	r5, #3
   14128:	6025      	str	r5, [r4, #0]
   1412a:	a860      	add	r0, sp, #384	; 0x180
   1412c:	ab66      	add	r3, sp, #408	; 0x198
   1412e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14130:	462a      	mov	r2, r5
   14132:	f7f4 fd96 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14136:	e7ff      	b.n	14138 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
   14138:	f240 20e8 	movw	r0, #744	; 0x2e8
   1413c:	f2c0 0002 	movt	r0, #2
   14140:	f003 f8bd 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14144:	9002      	str	r0, [sp, #8]
   14146:	e7ff      	b.n	14148 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
   14148:	a860      	add	r0, sp, #384	; 0x180
   1414a:	9902      	ldr	r1, [sp, #8]
   1414c:	f003 f8f4 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14150:	defe      	udf	#254	; 0xfe

00014152 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
   14152:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
   14154:	4770      	bx	lr

00014156 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
   14156:	b5b0      	push	{r4, r5, r7, lr}
   14158:	b0b0      	sub	sp, #192	; 0xc0
   1415a:	9029      	str	r0, [sp, #164]	; 0xa4
   1415c:	912a      	str	r1, [sp, #168]	; 0xa8
   1415e:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
   14160:	900e      	str	r0, [sp, #56]	; 0x38
   14162:	4608      	mov	r0, r1
   14164:	910d      	str	r1, [sp, #52]	; 0x34
   14166:	4611      	mov	r1, r2
   14168:	f005 fa02 	bl	19570 <hal_gpio_init_out>
   1416c:	900f      	str	r0, [sp, #60]	; 0x3c
   1416e:	e7ff      	b.n	14170 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
   14170:	f240 10fc 	movw	r0, #508	; 0x1fc
   14174:	f2c0 0002 	movt	r0, #2
   14178:	6800      	ldr	r0, [r0, #0]
   1417a:	a90f      	add	r1, sp, #60	; 0x3c
   1417c:	9110      	str	r1, [sp, #64]	; 0x40
   1417e:	9011      	str	r0, [sp, #68]	; 0x44
   14180:	9810      	ldr	r0, [sp, #64]	; 0x40
   14182:	902b      	str	r0, [sp, #172]	; 0xac
   14184:	9911      	ldr	r1, [sp, #68]	; 0x44
   14186:	912c      	str	r1, [sp, #176]	; 0xb0
   14188:	6802      	ldr	r2, [r0, #0]
   1418a:	680b      	ldr	r3, [r1, #0]
   1418c:	429a      	cmp	r2, r3
   1418e:	900c      	str	r0, [sp, #48]	; 0x30
   14190:	910b      	str	r1, [sp, #44]	; 0x2c
   14192:	d106      	bne.n	141a2 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
   14194:	e7ff      	b.n	14196 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
   14196:	980d      	ldr	r0, [sp, #52]	; 0x34
   14198:	990e      	ldr	r1, [sp, #56]	; 0x38
   1419a:	6008      	str	r0, [r1, #0]
   1419c:	2001      	movs	r0, #1
        Ok(())
    }
   1419e:	b030      	add	sp, #192	; 0xc0
   141a0:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
   141a2:	f240 2054 	movw	r0, #596	; 0x254
   141a6:	f2c0 0002 	movt	r0, #2
   141aa:	6801      	ldr	r1, [r0, #0]
   141ac:	980c      	ldr	r0, [sp, #48]	; 0x30
   141ae:	9021      	str	r0, [sp, #132]	; 0x84
   141b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   141b2:	9222      	str	r2, [sp, #136]	; 0x88
   141b4:	f240 330c 	movw	r3, #780	; 0x30c
   141b8:	f2c0 0302 	movt	r3, #2
   141bc:	681b      	ldr	r3, [r3, #0]
   141be:	f240 2c74 	movw	ip, #628	; 0x274
   141c2:	f2c0 0c02 	movt	ip, #2
   141c6:	f8dc c000 	ldr.w	ip, [ip]
   141ca:	46ee      	mov	lr, sp
   141cc:	2400      	movs	r4, #0
   141ce:	f8ce 4000 	str.w	r4, [lr]
   141d2:	a823      	add	r0, sp, #140	; 0x8c
   141d4:	2201      	movs	r2, #1
   141d6:	910a      	str	r1, [sp, #40]	; 0x28
   141d8:	4619      	mov	r1, r3
   141da:	4663      	mov	r3, ip
   141dc:	f7f4 fd41 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   141e0:	e7ff      	b.n	141e2 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
   141e2:	a821      	add	r0, sp, #132	; 0x84
   141e4:	901e      	str	r0, [sp, #120]	; 0x78
   141e6:	a822      	add	r0, sp, #136	; 0x88
   141e8:	901f      	str	r0, [sp, #124]	; 0x7c
   141ea:	a823      	add	r0, sp, #140	; 0x8c
   141ec:	9020      	str	r0, [sp, #128]	; 0x80
   141ee:	981e      	ldr	r0, [sp, #120]	; 0x78
   141f0:	902d      	str	r0, [sp, #180]	; 0xb4
   141f2:	991f      	ldr	r1, [sp, #124]	; 0x7c
   141f4:	912e      	str	r1, [sp, #184]	; 0xb8
   141f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   141f8:	922f      	str	r2, [sp, #188]	; 0xbc
   141fa:	f249 43b1 	movw	r3, #38065	; 0x94b1
   141fe:	f2c0 0300 	movt	r3, #0
   14202:	9109      	str	r1, [sp, #36]	; 0x24
   14204:	4619      	mov	r1, r3
   14206:	9208      	str	r2, [sp, #32]
   14208:	f7f5 f98a 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1420c:	9007      	str	r0, [sp, #28]
   1420e:	9106      	str	r1, [sp, #24]
   14210:	e7ff      	b.n	14212 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
   14212:	f249 41b1 	movw	r1, #38065	; 0x94b1
   14216:	f2c0 0100 	movt	r1, #0
   1421a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1421c:	f7f5 f980 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14220:	9005      	str	r0, [sp, #20]
   14222:	9104      	str	r1, [sp, #16]
   14224:	e7ff      	b.n	14226 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
   14226:	f647 019b 	movw	r1, #30875	; 0x789b
   1422a:	f2c0 0101 	movt	r1, #1
   1422e:	9808      	ldr	r0, [sp, #32]
   14230:	f7f5 f9b5 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14234:	9003      	str	r0, [sp, #12]
   14236:	9102      	str	r1, [sp, #8]
   14238:	e7ff      	b.n	1423a <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
   1423a:	9807      	ldr	r0, [sp, #28]
   1423c:	9018      	str	r0, [sp, #96]	; 0x60
   1423e:	9906      	ldr	r1, [sp, #24]
   14240:	9119      	str	r1, [sp, #100]	; 0x64
   14242:	9a05      	ldr	r2, [sp, #20]
   14244:	921a      	str	r2, [sp, #104]	; 0x68
   14246:	9b04      	ldr	r3, [sp, #16]
   14248:	931b      	str	r3, [sp, #108]	; 0x6c
   1424a:	f8dd c00c 	ldr.w	ip, [sp, #12]
   1424e:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
   14252:	f8dd e008 	ldr.w	lr, [sp, #8]
   14256:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
   1425a:	466c      	mov	r4, sp
   1425c:	2503      	movs	r5, #3
   1425e:	6025      	str	r5, [r4, #0]
   14260:	a812      	add	r0, sp, #72	; 0x48
   14262:	ab18      	add	r3, sp, #96	; 0x60
   14264:	990a      	ldr	r1, [sp, #40]	; 0x28
   14266:	462a      	mov	r2, r5
   14268:	f7f4 fcfb 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1426c:	e7ff      	b.n	1426e <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
   1426e:	f240 3010 	movw	r0, #784	; 0x310
   14272:	f2c0 0002 	movt	r0, #2
   14276:	f003 f822 	bl	172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1427a:	9001      	str	r0, [sp, #4]
   1427c:	e7ff      	b.n	1427e <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
   1427e:	a812      	add	r0, sp, #72	; 0x48
   14280:	9901      	ldr	r1, [sp, #4]
   14282:	f003 f859 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14286:	defe      	udf	#254	; 0xfe

00014288 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
   14288:	b580      	push	{r7, lr}
   1428a:	b082      	sub	sp, #8
   1428c:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
   1428e:	6800      	ldr	r0, [r0, #0]
   14290:	2100      	movs	r1, #0
   14292:	f005 f989 	bl	195a8 <hal_gpio_write>
   14296:	e7ff      	b.n	14298 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
   14298:	2001      	movs	r0, #1
        Ok(())
    }
   1429a:	b002      	add	sp, #8
   1429c:	bd80      	pop	{r7, pc}

0001429e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
   1429e:	b580      	push	{r7, lr}
   142a0:	b082      	sub	sp, #8
   142a2:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
   142a4:	6800      	ldr	r0, [r0, #0]
   142a6:	2101      	movs	r1, #1
   142a8:	f005 f97e 	bl	195a8 <hal_gpio_write>
   142ac:	e7ff      	b.n	142ae <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
   142ae:	2001      	movs	r0, #1
        Ok(())
    }
   142b0:	b002      	add	sp, #8
   142b2:	bd80      	pop	{r7, pc}

000142b4 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
   142b4:	4770      	bx	lr

000142b6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
   142b6:	b580      	push	{r7, lr}
   142b8:	b086      	sub	sp, #24
   142ba:	460a      	mov	r2, r1
   142bc:	9003      	str	r0, [sp, #12]
   142be:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   142c2:	b2c8      	uxtb	r0, r1
   142c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   142c8:	fba0 0101 	umull	r0, r1, r0, r1
   142cc:	2900      	cmp	r1, #0
   142ce:	9002      	str	r0, [sp, #8]
   142d0:	d110      	bne.n	142f4 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
   142d2:	e7ff      	b.n	142d4 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
   142d4:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   142d8:	f2c1 0062 	movt	r0, #4194	; 0x1062
   142dc:	9902      	ldr	r1, [sp, #8]
   142de:	fba1 0200 	umull	r0, r2, r1, r0
   142e2:	0992      	lsrs	r2, r2, #6
   142e4:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
   142e6:	9001      	str	r0, [sp, #4]
   142e8:	4610      	mov	r0, r2
   142ea:	f007 f97b 	bl	1b5e4 <os_time_delay>
   142ee:	e7ff      	b.n	142f0 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
   142f0:	b006      	add	sp, #24
   142f2:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   142f4:	f240 3030 	movw	r0, #816	; 0x330
   142f8:	f2c0 0002 	movt	r0, #2
   142fc:	f240 3220 	movw	r2, #800	; 0x320
   14300:	f2c0 0202 	movt	r2, #2
   14304:	2121      	movs	r1, #33	; 0x21
   14306:	f002 ffe1 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1430a:	defe      	udf	#254	; 0xfe

0001430c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   1430c:	b082      	sub	sp, #8
   1430e:	9001      	str	r0, [sp, #4]
   14310:	9000      	str	r0, [sp, #0]
   14312:	e7ff      	b.n	14314 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   14314:	9800      	ldr	r0, [sp, #0]
   14316:	fab0 f180 	clz	r1, r0
   1431a:	0948      	lsrs	r0, r1, #5
   1431c:	b002      	add	sp, #8
   1431e:	4770      	bx	lr

00014320 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>:
   14320:	b580      	push	{r7, lr}
   14322:	b084      	sub	sp, #16
   14324:	9002      	str	r0, [sp, #8]
   14326:	9103      	str	r1, [sp, #12]
   14328:	f000 f805 	bl	14336 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   1432c:	9001      	str	r0, [sp, #4]
   1432e:	e7ff      	b.n	14330 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE+0x10>
   14330:	9801      	ldr	r0, [sp, #4]
   14332:	b004      	add	sp, #16
   14334:	bd80      	pop	{r7, pc}

00014336 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>:
   14336:	b084      	sub	sp, #16
   14338:	9001      	str	r0, [sp, #4]
   1433a:	9102      	str	r1, [sp, #8]
   1433c:	4408      	add	r0, r1
   1433e:	9003      	str	r0, [sp, #12]
   14340:	9803      	ldr	r0, [sp, #12]
   14342:	9000      	str	r0, [sp, #0]
   14344:	e7ff      	b.n	14346 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE+0x10>
   14346:	9800      	ldr	r0, [sp, #0]
   14348:	b004      	add	sp, #16
   1434a:	4770      	bx	lr

0001434c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   1434c:	b081      	sub	sp, #4
   1434e:	b001      	add	sp, #4
   14350:	4770      	bx	lr

00014352 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   14352:	b08a      	sub	sp, #40	; 0x28
   14354:	9005      	str	r0, [sp, #20]
   14356:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   14358:	9107      	str	r1, [sp, #28]
   1435a:	21ff      	movs	r1, #255	; 0xff
   1435c:	9106      	str	r1, [sp, #24]
   1435e:	2108      	movs	r1, #8
   14360:	9108      	str	r1, [sp, #32]
   14362:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14364:	9003      	str	r0, [sp, #12]
   14366:	9102      	str	r1, [sp, #8]
   14368:	e016      	b.n	14398 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   1436a:	2001      	movs	r0, #1
   1436c:	f88d 0013 	strb.w	r0, [sp, #19]
   14370:	e00c      	b.n	1438c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14372:	2000      	movs	r0, #0
   14374:	f88d 0013 	strb.w	r0, [sp, #19]
   14378:	e008      	b.n	1438c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   1437a:	9803      	ldr	r0, [sp, #12]
   1437c:	6801      	ldr	r1, [r0, #0]
   1437e:	6842      	ldr	r2, [r0, #4]
   14380:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   14384:	f172 0200 	sbcs.w	r2, r2, #0
   14388:	d3ef      	bcc.n	1436a <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   1438a:	e7f2      	b.n	14372 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   1438c:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14390:	07c0      	lsls	r0, r0, #31
   14392:	2800      	cmp	r0, #0
   14394:	d10e      	bne.n	143b4 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   14396:	e009      	b.n	143ac <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   14398:	2001      	movs	r0, #1
   1439a:	9009      	str	r0, [sp, #36]	; 0x24
   1439c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1439e:	9001      	str	r0, [sp, #4]
   143a0:	e7ff      	b.n	143a2 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   143a2:	9802      	ldr	r0, [sp, #8]
   143a4:	9901      	ldr	r1, [sp, #4]
   143a6:	4288      	cmp	r0, r1
   143a8:	d9df      	bls.n	1436a <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   143aa:	e7e6      	b.n	1437a <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   143ac:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   143ae:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   143b2:	e007      	b.n	143c4 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   143b4:	9803      	ldr	r0, [sp, #12]
   143b6:	7801      	ldrb	r1, [r0, #0]
   143b8:	f88d 1011 	strb.w	r1, [sp, #17]
   143bc:	2101      	movs	r1, #1
   143be:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   143c2:	e7ff      	b.n	143c4 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   143c4:	f89d 0010 	ldrb.w	r0, [sp, #16]
   143c8:	f89d 1011 	ldrb.w	r1, [sp, #17]
   143cc:	b00a      	add	sp, #40	; 0x28
   143ce:	4770      	bx	lr

000143d0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>:
   143d0:	b580      	push	{r7, lr}
   143d2:	b090      	sub	sp, #64	; 0x40
   143d4:	2200      	movs	r2, #0
   143d6:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   143da:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   143de:	2201      	movs	r2, #1
   143e0:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   143e4:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   143e8:	680a      	ldr	r2, [r1, #0]
   143ea:	2a00      	cmp	r2, #0
   143ec:	9101      	str	r1, [sp, #4]
   143ee:	9000      	str	r0, [sp, #0]
   143f0:	d001      	beq.n	143f6 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x26>
   143f2:	e7ff      	b.n	143f4 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x24>
   143f4:	e004      	b.n	14400 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x30>
   143f6:	2000      	movs	r0, #0
   143f8:	9900      	ldr	r1, [sp, #0]
   143fa:	6008      	str	r0, [r1, #0]
   143fc:	e032      	b.n	14464 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   143fe:	defe      	udf	#254	; 0xfe
   14400:	2000      	movs	r0, #0
   14402:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   14406:	9901      	ldr	r1, [sp, #4]
   14408:	684a      	ldr	r2, [r1, #4]
   1440a:	688b      	ldr	r3, [r1, #8]
   1440c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   14410:	f8cd c010 	str.w	ip, [sp, #16]
   14414:	9303      	str	r3, [sp, #12]
   14416:	9202      	str	r2, [sp, #8]
   14418:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   1441c:	9802      	ldr	r0, [sp, #8]
   1441e:	9a03      	ldr	r2, [sp, #12]
   14420:	9b04      	ldr	r3, [sp, #16]
   14422:	930d      	str	r3, [sp, #52]	; 0x34
   14424:	920c      	str	r2, [sp, #48]	; 0x30
   14426:	900b      	str	r0, [sp, #44]	; 0x2c
   14428:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1442a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1442c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1442e:	930a      	str	r3, [sp, #40]	; 0x28
   14430:	9209      	str	r2, [sp, #36]	; 0x24
   14432:	9008      	str	r0, [sp, #32]
   14434:	a805      	add	r0, sp, #20
   14436:	a908      	add	r1, sp, #32
   14438:	f001 ffc1 	bl	163be <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>
   1443c:	e7ff      	b.n	1443e <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x6e>
   1443e:	9805      	ldr	r0, [sp, #20]
   14440:	9906      	ldr	r1, [sp, #24]
   14442:	9a07      	ldr	r2, [sp, #28]
   14444:	9b00      	ldr	r3, [sp, #0]
   14446:	60da      	str	r2, [r3, #12]
   14448:	6099      	str	r1, [r3, #8]
   1444a:	6058      	str	r0, [r3, #4]
   1444c:	2001      	movs	r0, #1
   1444e:	6018      	str	r0, [r3, #0]
   14450:	e008      	b.n	14464 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   14452:	9801      	ldr	r0, [sp, #4]
   14454:	6801      	ldr	r1, [r0, #0]
   14456:	2901      	cmp	r1, #1
   14458:	d00c      	beq.n	14474 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa4>
   1445a:	e015      	b.n	14488 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb8>
   1445c:	2000      	movs	r0, #0
   1445e:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   14462:	e7f6      	b.n	14452 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   14464:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   14468:	07c0      	lsls	r0, r0, #31
   1446a:	2800      	cmp	r0, #0
   1446c:	d1f6      	bne.n	1445c <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x8c>
   1446e:	e7f0      	b.n	14452 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   14470:	b010      	add	sp, #64	; 0x40
   14472:	bd80      	pop	{r7, pc}
   14474:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   14478:	07c0      	lsls	r0, r0, #31
   1447a:	2800      	cmp	r0, #0
   1447c:	d0f8      	beq.n	14470 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   1447e:	e7ff      	b.n	14480 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb0>
   14480:	2000      	movs	r0, #0
   14482:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   14486:	e7f3      	b.n	14470 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   14488:	e7f2      	b.n	14470 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>

0001448a <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   1448a:	b084      	sub	sp, #16
   1448c:	9002      	str	r0, [sp, #8]
   1448e:	6801      	ldr	r1, [r0, #0]
   14490:	2900      	cmp	r1, #0
   14492:	9000      	str	r0, [sp, #0]
   14494:	d001      	beq.n	1449a <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   14496:	e7ff      	b.n	14498 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   14498:	e003      	b.n	144a2 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   1449a:	2000      	movs	r0, #0
   1449c:	9001      	str	r0, [sp, #4]
   1449e:	e006      	b.n	144ae <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   144a0:	defe      	udf	#254	; 0xfe
   144a2:	9800      	ldr	r0, [sp, #0]
   144a4:	f100 0108 	add.w	r1, r0, #8
   144a8:	9103      	str	r1, [sp, #12]
   144aa:	9101      	str	r1, [sp, #4]
   144ac:	e7ff      	b.n	144ae <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   144ae:	9801      	ldr	r0, [sp, #4]
   144b0:	b004      	add	sp, #16
   144b2:	4770      	bx	lr

000144b4 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>:
   144b4:	b510      	push	{r4, lr}
   144b6:	b088      	sub	sp, #32
   144b8:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   144bc:	468e      	mov	lr, r1
   144be:	4604      	mov	r4, r0
   144c0:	f8ad 0010 	strh.w	r0, [sp, #16]
   144c4:	f8ad 1012 	strh.w	r1, [sp, #18]
   144c8:	9205      	str	r2, [sp, #20]
   144ca:	9306      	str	r3, [sp, #24]
   144cc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   144d0:	4601      	mov	r1, r0
   144d2:	2800      	cmp	r0, #0
   144d4:	9303      	str	r3, [sp, #12]
   144d6:	9202      	str	r2, [sp, #8]
   144d8:	f8cd c004 	str.w	ip, [sp, #4]
   144dc:	d001      	beq.n	144e2 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2e>
   144de:	e7ff      	b.n	144e0 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2c>
   144e0:	e006      	b.n	144f0 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x3c>
   144e2:	9802      	ldr	r0, [sp, #8]
   144e4:	9903      	ldr	r1, [sp, #12]
   144e6:	9a01      	ldr	r2, [sp, #4]
   144e8:	f002 fea6 	bl	17238 <_ZN4core6option13expect_failed17had6579abaad447b4E>
   144ec:	defe      	udf	#254	; 0xfe
   144ee:	defe      	udf	#254	; 0xfe
   144f0:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   144f4:	4601      	mov	r1, r0
   144f6:	f8ad 001e 	strh.w	r0, [sp, #30]
   144fa:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   144fe:	2801      	cmp	r0, #1
   14500:	9100      	str	r1, [sp, #0]
   14502:	d103      	bne.n	1450c <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x58>
   14504:	e7ff      	b.n	14506 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>
   14506:	9800      	ldr	r0, [sp, #0]
   14508:	b008      	add	sp, #32
   1450a:	bd10      	pop	{r4, pc}
   1450c:	e7fb      	b.n	14506 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>

0001450e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   1450e:	b084      	sub	sp, #16
   14510:	460b      	mov	r3, r1
   14512:	4684      	mov	ip, r0
   14514:	f88d 000c 	strb.w	r0, [sp, #12]
   14518:	f88d 100d 	strb.w	r1, [sp, #13]
   1451c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14520:	07c1      	lsls	r1, r0, #31
   14522:	2900      	cmp	r1, #0
   14524:	9202      	str	r2, [sp, #8]
   14526:	d001      	beq.n	1452c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   14528:	e7ff      	b.n	1452a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   1452a:	e009      	b.n	14540 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   1452c:	f240 3051 	movw	r0, #849	; 0x351
   14530:	f2c0 0002 	movt	r0, #2
   14534:	212b      	movs	r1, #43	; 0x2b
   14536:	9a02      	ldr	r2, [sp, #8]
   14538:	f002 fec8 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1453c:	defe      	udf	#254	; 0xfe
   1453e:	defe      	udf	#254	; 0xfe
   14540:	f89d 000d 	ldrb.w	r0, [sp, #13]
   14544:	4601      	mov	r1, r0
   14546:	f88d 000f 	strb.w	r0, [sp, #15]
   1454a:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1454e:	07c0      	lsls	r0, r0, #31
   14550:	2800      	cmp	r0, #0
   14552:	9101      	str	r1, [sp, #4]
   14554:	d003      	beq.n	1455e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   14556:	e7ff      	b.n	14558 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   14558:	9801      	ldr	r0, [sp, #4]
   1455a:	b004      	add	sp, #16
   1455c:	4770      	bx	lr
   1455e:	e7fb      	b.n	14558 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

00014560 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   14560:	b088      	sub	sp, #32
   14562:	9004      	str	r0, [sp, #16]
   14564:	9105      	str	r1, [sp, #20]
   14566:	9804      	ldr	r0, [sp, #16]
   14568:	2800      	cmp	r0, #0
   1456a:	4601      	mov	r1, r0
   1456c:	bf18      	it	ne
   1456e:	2101      	movne	r1, #1
   14570:	2800      	cmp	r0, #0
   14572:	9203      	str	r2, [sp, #12]
   14574:	d001      	beq.n	1457a <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   14576:	e7ff      	b.n	14578 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   14578:	e009      	b.n	1458e <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   1457a:	f240 3051 	movw	r0, #849	; 0x351
   1457e:	f2c0 0002 	movt	r0, #2
   14582:	212b      	movs	r1, #43	; 0x2b
   14584:	9a03      	ldr	r2, [sp, #12]
   14586:	f002 fea1 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1458a:	defe      	udf	#254	; 0xfe
   1458c:	defe      	udf	#254	; 0xfe
   1458e:	9804      	ldr	r0, [sp, #16]
   14590:	9905      	ldr	r1, [sp, #20]
   14592:	9006      	str	r0, [sp, #24]
   14594:	9107      	str	r1, [sp, #28]
   14596:	9a04      	ldr	r2, [sp, #16]
   14598:	2a00      	cmp	r2, #0
   1459a:	9002      	str	r0, [sp, #8]
   1459c:	9101      	str	r1, [sp, #4]
   1459e:	d004      	beq.n	145aa <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   145a0:	e7ff      	b.n	145a2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   145a2:	9802      	ldr	r0, [sp, #8]
   145a4:	9901      	ldr	r1, [sp, #4]
   145a6:	b008      	add	sp, #32
   145a8:	4770      	bx	lr
   145aa:	e7fa      	b.n	145a2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

000145ac <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>:
   145ac:	b580      	push	{r7, lr}
   145ae:	b082      	sub	sp, #8
   145b0:	9001      	str	r0, [sp, #4]
   145b2:	f000 f82b 	bl	1460c <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   145b6:	9000      	str	r0, [sp, #0]
   145b8:	e7ff      	b.n	145ba <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E+0xe>
   145ba:	2001      	movs	r0, #1
   145bc:	9900      	ldr	r1, [sp, #0]
   145be:	4388      	bics	r0, r1
   145c0:	b002      	add	sp, #8
   145c2:	bd80      	pop	{r7, pc}

000145c4 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   145c4:	b082      	sub	sp, #8
   145c6:	9001      	str	r0, [sp, #4]
   145c8:	6800      	ldr	r0, [r0, #0]
   145ca:	2800      	cmp	r0, #0
   145cc:	d104      	bne.n	145d8 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   145ce:	e7ff      	b.n	145d0 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   145d0:	2000      	movs	r0, #0
   145d2:	f88d 0003 	strb.w	r0, [sp, #3]
   145d6:	e003      	b.n	145e0 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   145d8:	2001      	movs	r0, #1
   145da:	f88d 0003 	strb.w	r0, [sp, #3]
   145de:	e7ff      	b.n	145e0 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   145e0:	f89d 0003 	ldrb.w	r0, [sp, #3]
   145e4:	b002      	add	sp, #8
   145e6:	4770      	bx	lr

000145e8 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>:
   145e8:	b082      	sub	sp, #8
   145ea:	9001      	str	r0, [sp, #4]
   145ec:	6800      	ldr	r0, [r0, #0]
   145ee:	2801      	cmp	r0, #1
   145f0:	d004      	beq.n	145fc <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x14>
   145f2:	e7ff      	b.n	145f4 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0xc>
   145f4:	2000      	movs	r0, #0
   145f6:	f88d 0003 	strb.w	r0, [sp, #3]
   145fa:	e003      	b.n	14604 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   145fc:	2001      	movs	r0, #1
   145fe:	f88d 0003 	strb.w	r0, [sp, #3]
   14602:	e7ff      	b.n	14604 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   14604:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14608:	b002      	add	sp, #8
   1460a:	4770      	bx	lr

0001460c <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>:
   1460c:	b082      	sub	sp, #8
   1460e:	9001      	str	r0, [sp, #4]
   14610:	8800      	ldrh	r0, [r0, #0]
   14612:	2801      	cmp	r0, #1
   14614:	d004      	beq.n	14620 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x14>
   14616:	e7ff      	b.n	14618 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0xc>
   14618:	2000      	movs	r0, #0
   1461a:	f88d 0003 	strb.w	r0, [sp, #3]
   1461e:	e003      	b.n	14628 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   14620:	2001      	movs	r0, #1
   14622:	f88d 0003 	strb.w	r0, [sp, #3]
   14626:	e7ff      	b.n	14628 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   14628:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1462c:	b002      	add	sp, #8
   1462e:	4770      	bx	lr

00014630 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   14630:	b580      	push	{r7, lr}
   14632:	b086      	sub	sp, #24
   14634:	9000      	str	r0, [sp, #0]
   14636:	2000      	movs	r0, #0
   14638:	f88d 000f 	strb.w	r0, [sp, #15]
   1463c:	f88d 000e 	strb.w	r0, [sp, #14]
   14640:	2001      	movs	r0, #1
   14642:	f88d 000f 	strb.w	r0, [sp, #15]
   14646:	f88d 000e 	strb.w	r0, [sp, #14]
   1464a:	9800      	ldr	r0, [sp, #0]
   1464c:	2800      	cmp	r0, #0
   1464e:	4601      	mov	r1, r0
   14650:	bf18      	it	ne
   14652:	2101      	movne	r1, #1
   14654:	2800      	cmp	r0, #0
   14656:	d001      	beq.n	1465c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   14658:	e7ff      	b.n	1465a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   1465a:	e004      	b.n	14666 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   1465c:	2000      	movs	r0, #0
   1465e:	f88d 0004 	strb.w	r0, [sp, #4]
   14662:	e019      	b.n	14698 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14664:	defe      	udf	#254	; 0xfe
   14666:	2000      	movs	r0, #0
   14668:	f88d 000f 	strb.w	r0, [sp, #15]
   1466c:	9900      	ldr	r1, [sp, #0]
   1466e:	9105      	str	r1, [sp, #20]
   14670:	f88d 000e 	strb.w	r0, [sp, #14]
   14674:	9102      	str	r1, [sp, #8]
   14676:	9802      	ldr	r0, [sp, #8]
   14678:	f7f6 f986 	bl	a988 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   1467c:	f88d 1005 	strb.w	r1, [sp, #5]
   14680:	f88d 0004 	strb.w	r0, [sp, #4]
   14684:	e7ff      	b.n	14686 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   14686:	e007      	b.n	14698 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14688:	9800      	ldr	r0, [sp, #0]
   1468a:	2800      	cmp	r0, #0
   1468c:	d110      	bne.n	146b0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   1468e:	e019      	b.n	146c4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   14690:	2000      	movs	r0, #0
   14692:	f88d 000e 	strb.w	r0, [sp, #14]
   14696:	e7f7      	b.n	14688 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14698:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1469c:	07c0      	lsls	r0, r0, #31
   1469e:	2800      	cmp	r0, #0
   146a0:	d1f6      	bne.n	14690 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   146a2:	e7f1      	b.n	14688 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   146a4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   146a8:	f89d 1005 	ldrb.w	r1, [sp, #5]
   146ac:	b006      	add	sp, #24
   146ae:	bd80      	pop	{r7, pc}
   146b0:	f89d 000f 	ldrb.w	r0, [sp, #15]
   146b4:	07c0      	lsls	r0, r0, #31
   146b6:	2800      	cmp	r0, #0
   146b8:	d0f4      	beq.n	146a4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   146ba:	e7ff      	b.n	146bc <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   146bc:	2000      	movs	r0, #0
   146be:	f88d 000f 	strb.w	r0, [sp, #15]
   146c2:	e7ef      	b.n	146a4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   146c4:	e7ee      	b.n	146a4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

000146c6 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>:
    fn clone(&self) -> Self {
   146c6:	b580      	push	{r7, lr}
   146c8:	b09c      	sub	sp, #112	; 0x70
   146ca:	911b      	str	r1, [sp, #108]	; 0x6c
   146cc:	aa01      	add	r2, sp, #4
        Vec(self.0.clone())
   146ce:	9000      	str	r0, [sp, #0]
   146d0:	4610      	mov	r0, r2
   146d2:	f000 fafc 	bl	14cce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>
   146d6:	e7ff      	b.n	146d8 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE+0x12>
   146d8:	a901      	add	r1, sp, #4
   146da:	2268      	movs	r2, #104	; 0x68
   146dc:	9800      	ldr	r0, [sp, #0]
   146de:	f009 f9c9 	bl	1da74 <__aeabi_memcpy>
    }
   146e2:	b01c      	add	sp, #112	; 0x70
   146e4:	bd80      	pop	{r7, pc}

000146e6 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>:
    fn clone(&self) -> Self {
   146e6:	b580      	push	{r7, lr}
   146e8:	b0b6      	sub	sp, #216	; 0xd8
   146ea:	9135      	str	r1, [sp, #212]	; 0xd4
   146ec:	aa02      	add	r2, sp, #8
        Vec(self.0.clone())
   146ee:	9001      	str	r0, [sp, #4]
   146f0:	4610      	mov	r0, r2
   146f2:	f000 fb14 	bl	14d1e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>
   146f6:	e7ff      	b.n	146f8 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E+0x12>
   146f8:	a902      	add	r1, sp, #8
   146fa:	22cc      	movs	r2, #204	; 0xcc
   146fc:	9801      	ldr	r0, [sp, #4]
   146fe:	f009 f9b9 	bl	1da74 <__aeabi_memcpy>
    }
   14702:	b036      	add	sp, #216	; 0xd8
   14704:	bd80      	pop	{r7, pc}

00014706 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>:
    fn drop(&mut self) {
   14706:	b580      	push	{r7, lr}
   14708:	b084      	sub	sp, #16
   1470a:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   1470c:	f000 f84c 	bl	147a8 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>
   14710:	9002      	str	r0, [sp, #8]
   14712:	9101      	str	r1, [sp, #4]
   14714:	e7ff      	b.n	14716 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x10>
   14716:	9802      	ldr	r0, [sp, #8]
   14718:	9901      	ldr	r1, [sp, #4]
   1471a:	f7f6 fa47 	bl	abac <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   1471e:	e7ff      	b.n	14720 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1a>
   14720:	e7ff      	b.n	14722 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1c>
    }
   14722:	b004      	add	sp, #16
   14724:	bd80      	pop	{r7, pc}

00014726 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>:
    fn drop(&mut self) {
   14726:	b580      	push	{r7, lr}
   14728:	b084      	sub	sp, #16
   1472a:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   1472c:	f000 f848 	bl	147c0 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   14730:	9002      	str	r0, [sp, #8]
   14732:	9101      	str	r1, [sp, #4]
   14734:	e7ff      	b.n	14736 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x10>
   14736:	9802      	ldr	r0, [sp, #8]
   14738:	9901      	ldr	r1, [sp, #4]
   1473a:	f7f6 fa37 	bl	abac <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   1473e:	e7ff      	b.n	14740 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1a>
   14740:	e7ff      	b.n	14742 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1c>
    }
   14742:	b004      	add	sp, #16
   14744:	bd80      	pop	{r7, pc}

00014746 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>:
    fn deref(&self) -> &[T] {
   14746:	b580      	push	{r7, lr}
   14748:	b084      	sub	sp, #16
   1474a:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   1474c:	f000 fb0f 	bl	14d6e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   14750:	9002      	str	r0, [sp, #8]
   14752:	9101      	str	r1, [sp, #4]
   14754:	e7ff      	b.n	14756 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E+0x10>
    }
   14756:	9802      	ldr	r0, [sp, #8]
   14758:	9901      	ldr	r1, [sp, #4]
   1475a:	b004      	add	sp, #16
   1475c:	bd80      	pop	{r7, pc}

0001475e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>:
    fn deref(&self) -> &[T] {
   1475e:	b580      	push	{r7, lr}
   14760:	b084      	sub	sp, #16
   14762:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   14764:	f000 fb18 	bl	14d98 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   14768:	9002      	str	r0, [sp, #8]
   1476a:	9101      	str	r1, [sp, #4]
   1476c:	e7ff      	b.n	1476e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E+0x10>
    }
   1476e:	9802      	ldr	r0, [sp, #8]
   14770:	9901      	ldr	r1, [sp, #4]
   14772:	b004      	add	sp, #16
   14774:	bd80      	pop	{r7, pc}

00014776 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>:
    fn drop(&mut self) {
   14776:	b580      	push	{r7, lr}
   14778:	b086      	sub	sp, #24
   1477a:	9005      	str	r0, [sp, #20]
            ptr::drop_in_place(&mut self.vec[self.next..]);
   1477c:	9003      	str	r0, [sp, #12]
   1477e:	f000 f81f 	bl	147c0 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   14782:	9002      	str	r0, [sp, #8]
   14784:	9101      	str	r1, [sp, #4]
   14786:	e7ff      	b.n	14788 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x12>
   14788:	9803      	ldr	r0, [sp, #12]
   1478a:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   1478e:	9104      	str	r1, [sp, #16]
   14790:	9a04      	ldr	r2, [sp, #16]
   14792:	9802      	ldr	r0, [sp, #8]
   14794:	9901      	ldr	r1, [sp, #4]
   14796:	f7f6 fa16 	bl	abc6 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>
   1479a:	e7ff      	b.n	1479c <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x26>
   1479c:	e7ff      	b.n	1479e <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x28>
   1479e:	2000      	movs	r0, #0
            self.vec.0.len = 0;
   147a0:	9903      	ldr	r1, [sp, #12]
   147a2:	6008      	str	r0, [r1, #0]
    }
   147a4:	b006      	add	sp, #24
   147a6:	bd80      	pop	{r7, pc}

000147a8 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>:
    fn deref_mut(&mut self) -> &mut [T] {
   147a8:	b580      	push	{r7, lr}
   147aa:	b084      	sub	sp, #16
   147ac:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   147ae:	f000 f8ff 	bl	149b0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   147b2:	9002      	str	r0, [sp, #8]
   147b4:	9101      	str	r1, [sp, #4]
   147b6:	e7ff      	b.n	147b8 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E+0x10>
    }
   147b8:	9802      	ldr	r0, [sp, #8]
   147ba:	9901      	ldr	r1, [sp, #4]
   147bc:	b004      	add	sp, #16
   147be:	bd80      	pop	{r7, pc}

000147c0 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>:
    fn deref_mut(&mut self) -> &mut [T] {
   147c0:	b580      	push	{r7, lr}
   147c2:	b084      	sub	sp, #16
   147c4:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   147c6:	f000 f908 	bl	149da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   147ca:	9002      	str	r0, [sp, #8]
   147cc:	9101      	str	r1, [sp, #4]
   147ce:	e7ff      	b.n	147d0 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E+0x10>
    }
   147d0:	9802      	ldr	r0, [sp, #8]
   147d2:	9901      	ldr	r1, [sp, #4]
   147d4:	b004      	add	sp, #16
   147d6:	bd80      	pop	{r7, pc}

000147d8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   147d8:	b580      	push	{r7, lr}
   147da:	b084      	sub	sp, #16
   147dc:	9001      	str	r0, [sp, #4]
   147de:	9102      	str	r1, [sp, #8]
   147e0:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   147e2:	f000 f973 	bl	14acc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   147e6:	9000      	str	r0, [sp, #0]
   147e8:	e7ff      	b.n	147ea <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE+0x12>
    }
   147ea:	9800      	ldr	r0, [sp, #0]
   147ec:	f000 0001 	and.w	r0, r0, #1
   147f0:	b004      	add	sp, #16
   147f2:	bd80      	pop	{r7, pc}

000147f4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>:
    pub fn new() -> Self {
   147f4:	b580      	push	{r7, lr}
   147f6:	b09c      	sub	sp, #112	; 0x70
   147f8:	a902      	add	r1, sp, #8
        Vec(crate::i::Vec::new())
   147fa:	9001      	str	r0, [sp, #4]
   147fc:	4608      	mov	r0, r1
   147fe:	f000 f8c8 	bl	14992 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   14802:	e7ff      	b.n	14804 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E+0x10>
   14804:	a902      	add	r1, sp, #8
   14806:	2268      	movs	r2, #104	; 0x68
   14808:	9801      	ldr	r0, [sp, #4]
   1480a:	f009 f933 	bl	1da74 <__aeabi_memcpy>
    }
   1480e:	b01c      	add	sp, #112	; 0x70
   14810:	bd80      	pop	{r7, pc}

00014812 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>:
    pub fn new() -> Self {
   14812:	b580      	push	{r7, lr}
   14814:	b0b4      	sub	sp, #208	; 0xd0
   14816:	a901      	add	r1, sp, #4
        Vec(crate::i::Vec::new())
   14818:	9000      	str	r0, [sp, #0]
   1481a:	4608      	mov	r0, r1
   1481c:	f000 f8aa 	bl	14974 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   14820:	e7ff      	b.n	14822 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE+0x10>
   14822:	a901      	add	r1, sp, #4
   14824:	22cc      	movs	r2, #204	; 0xcc
   14826:	9800      	ldr	r0, [sp, #0]
   14828:	f009 f924 	bl	1da74 <__aeabi_memcpy>
    }
   1482c:	b034      	add	sp, #208	; 0xd0
   1482e:	bd80      	pop	{r7, pc}

00014830 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   14830:	b580      	push	{r7, lr}
   14832:	b086      	sub	sp, #24
   14834:	460a      	mov	r2, r1
   14836:	9004      	str	r0, [sp, #16]
   14838:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.0.push(item)
   1483c:	9203      	str	r2, [sp, #12]
   1483e:	f000 fa0b 	bl	14c58 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>
   14842:	9002      	str	r0, [sp, #8]
   14844:	9101      	str	r1, [sp, #4]
   14846:	e7ff      	b.n	14848 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE+0x18>
    }
   14848:	9802      	ldr	r0, [sp, #8]
   1484a:	9901      	ldr	r1, [sp, #4]
   1484c:	b006      	add	sp, #24
   1484e:	bd80      	pop	{r7, pc}

00014850 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>:
    pub fn clear(&mut self) {
   14850:	b580      	push	{r7, lr}
   14852:	b082      	sub	sp, #8
   14854:	9001      	str	r0, [sp, #4]
        self.0.clear()
   14856:	f000 fa28 	bl	14caa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>
   1485a:	e7ff      	b.n	1485c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E+0xc>
    }
   1485c:	b002      	add	sp, #8
   1485e:	bd80      	pop	{r7, pc}

00014860 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>:
    pub fn clear(&mut self) {
   14860:	b580      	push	{r7, lr}
   14862:	b082      	sub	sp, #8
   14864:	9001      	str	r0, [sp, #4]
        self.0.clear()
   14866:	f000 fa29 	bl	14cbc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>
   1486a:	e7ff      	b.n	1486c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E+0xc>
    }
   1486c:	b002      	add	sp, #8
   1486e:	bd80      	pop	{r7, pc}

00014870 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>:
    fn into_iter(self) -> Self::IntoIter {
   14870:	b580      	push	{r7, lr}
   14872:	b0b6      	sub	sp, #216	; 0xd8
   14874:	aa03      	add	r2, sp, #12
   14876:	23cc      	movs	r3, #204	; 0xcc
        IntoIter { vec: self, next: 0 }
   14878:	9002      	str	r0, [sp, #8]
   1487a:	4610      	mov	r0, r2
   1487c:	9201      	str	r2, [sp, #4]
   1487e:	461a      	mov	r2, r3
   14880:	9300      	str	r3, [sp, #0]
   14882:	f009 f8f7 	bl	1da74 <__aeabi_memcpy>
   14886:	9802      	ldr	r0, [sp, #8]
   14888:	9901      	ldr	r1, [sp, #4]
   1488a:	9a00      	ldr	r2, [sp, #0]
   1488c:	f009 f8f2 	bl	1da74 <__aeabi_memcpy>
   14890:	2000      	movs	r0, #0
   14892:	9902      	ldr	r1, [sp, #8]
   14894:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    }
   14898:	b036      	add	sp, #216	; 0xd8
   1489a:	bd80      	pop	{r7, pc}

0001489c <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>:
    fn next(&mut self) -> Option<Self::Item> {
   1489c:	b580      	push	{r7, lr}
   1489e:	b08e      	sub	sp, #56	; 0x38
   148a0:	900a      	str	r0, [sp, #40]	; 0x28
        if self.next < self.vec.len() {
   148a2:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   148a6:	9008      	str	r0, [sp, #32]
   148a8:	9107      	str	r1, [sp, #28]
   148aa:	f7ff ff58 	bl	1475e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>
   148ae:	9006      	str	r0, [sp, #24]
   148b0:	9105      	str	r1, [sp, #20]
   148b2:	e7ff      	b.n	148b4 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x18>
   148b4:	9806      	ldr	r0, [sp, #24]
   148b6:	9905      	ldr	r1, [sp, #20]
   148b8:	f7f6 f925 	bl	ab06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   148bc:	9004      	str	r0, [sp, #16]
   148be:	e7ff      	b.n	148c0 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x24>
   148c0:	9807      	ldr	r0, [sp, #28]
   148c2:	9904      	ldr	r1, [sp, #16]
   148c4:	4288      	cmp	r0, r1
   148c6:	d304      	bcc.n	148d2 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x36>
   148c8:	e7ff      	b.n	148ca <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x2e>
   148ca:	2000      	movs	r0, #0
            None
   148cc:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   148d0:	e029      	b.n	14926 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
                (self.vec.0.buffer.as_ptr() as *const T)
   148d2:	9808      	ldr	r0, [sp, #32]
   148d4:	1d01      	adds	r1, r0, #4
   148d6:	910c      	str	r1, [sp, #48]	; 0x30
   148d8:	910d      	str	r1, [sp, #52]	; 0x34
   148da:	9103      	str	r1, [sp, #12]
   148dc:	e7ff      	b.n	148de <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x42>
                    .add(self.next)
   148de:	9808      	ldr	r0, [sp, #32]
   148e0:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
                (self.vec.0.buffer.as_ptr() as *const T)
   148e4:	9803      	ldr	r0, [sp, #12]
   148e6:	f7f4 feb0 	bl	964a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   148ea:	9002      	str	r0, [sp, #8]
   148ec:	e7ff      	b.n	148ee <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x52>
   148ee:	9802      	ldr	r0, [sp, #8]
   148f0:	f7f4 feb6 	bl	9660 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>
   148f4:	4601      	mov	r1, r0
   148f6:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
   148fa:	9101      	str	r1, [sp, #4]
   148fc:	e7ff      	b.n	148fe <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x62>
            self.next += 1;
   148fe:	9808      	ldr	r0, [sp, #32]
   14900:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14904:	1c4a      	adds	r2, r1, #1
   14906:	4613      	mov	r3, r2
   14908:	428a      	cmp	r2, r1
   1490a:	9300      	str	r3, [sp, #0]
   1490c:	d311      	bcc.n	14932 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x96>
   1490e:	e7ff      	b.n	14910 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x74>
   14910:	9800      	ldr	r0, [sp, #0]
   14912:	9908      	ldr	r1, [sp, #32]
   14914:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
            Some(item)
   14918:	9a01      	ldr	r2, [sp, #4]
   1491a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
   1491e:	2301      	movs	r3, #1
   14920:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   14924:	e7ff      	b.n	14926 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
    }
   14926:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   1492a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   1492e:	b00e      	add	sp, #56	; 0x38
   14930:	bd80      	pop	{r7, pc}
            self.next += 1;
   14932:	f240 30f0 	movw	r0, #1008	; 0x3f0
   14936:	f2c0 0002 	movt	r0, #2
   1493a:	f240 32d4 	movw	r2, #980	; 0x3d4
   1493e:	f2c0 0202 	movt	r2, #2
   14942:	211c      	movs	r1, #28
   14944:	f002 fcc2 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14948:	defe      	udf	#254	; 0xfe

0001494a <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   1494a:	b580      	push	{r7, lr}
   1494c:	b084      	sub	sp, #16
   1494e:	9002      	str	r0, [sp, #8]
   14950:	9103      	str	r1, [sp, #12]
   14952:	f240 400c 	movw	r0, #1036	; 0x40c
   14956:	f2c0 0002 	movt	r0, #2
   1495a:	2202      	movs	r2, #2
   1495c:	9001      	str	r0, [sp, #4]
   1495e:	4608      	mov	r0, r1
   14960:	9901      	ldr	r1, [sp, #4]
   14962:	f003 f9d3 	bl	17d0c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   14966:	9000      	str	r0, [sp, #0]
   14968:	e7ff      	b.n	1496a <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   1496a:	9800      	ldr	r0, [sp, #0]
   1496c:	f000 0001 	and.w	r0, r0, #1
   14970:	b004      	add	sp, #16
   14972:	bd80      	pop	{r7, pc}

00014974 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>:
    pub const fn new() -> Self {
   14974:	b580      	push	{r7, lr}
   14976:	b0b4      	sub	sp, #208	; 0xd0
            buffer: MaybeUninit::uninit(),
   14978:	9001      	str	r0, [sp, #4]
   1497a:	e7ff      	b.n	1497c <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE+0x8>
        Self {
   1497c:	9801      	ldr	r0, [sp, #4]
   1497e:	3004      	adds	r0, #4
   14980:	a902      	add	r1, sp, #8
   14982:	22c8      	movs	r2, #200	; 0xc8
   14984:	f009 f876 	bl	1da74 <__aeabi_memcpy>
   14988:	2100      	movs	r1, #0
   1498a:	9a01      	ldr	r2, [sp, #4]
   1498c:	6011      	str	r1, [r2, #0]
    }
   1498e:	b034      	add	sp, #208	; 0xd0
   14990:	bd80      	pop	{r7, pc}

00014992 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>:
    pub const fn new() -> Self {
   14992:	b580      	push	{r7, lr}
   14994:	b09a      	sub	sp, #104	; 0x68
            buffer: MaybeUninit::uninit(),
   14996:	9000      	str	r0, [sp, #0]
   14998:	e7ff      	b.n	1499a <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE+0x8>
        Self {
   1499a:	9800      	ldr	r0, [sp, #0]
   1499c:	3004      	adds	r0, #4
   1499e:	a901      	add	r1, sp, #4
   149a0:	2264      	movs	r2, #100	; 0x64
   149a2:	f009 f867 	bl	1da74 <__aeabi_memcpy>
   149a6:	2100      	movs	r1, #0
   149a8:	9a00      	ldr	r2, [sp, #0]
   149aa:	6011      	str	r1, [r2, #0]
    }
   149ac:	b01a      	add	sp, #104	; 0x68
   149ae:	bd80      	pop	{r7, pc}

000149b0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   149b0:	b580      	push	{r7, lr}
   149b2:	b088      	sub	sp, #32
   149b4:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   149b6:	1d01      	adds	r1, r0, #4
   149b8:	9106      	str	r1, [sp, #24]
   149ba:	9107      	str	r1, [sp, #28]
   149bc:	9004      	str	r0, [sp, #16]
   149be:	9103      	str	r1, [sp, #12]
   149c0:	e7ff      	b.n	149c2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x12>
   149c2:	9804      	ldr	r0, [sp, #16]
   149c4:	6801      	ldr	r1, [r0, #0]
   149c6:	9803      	ldr	r0, [sp, #12]
   149c8:	f7f6 f879 	bl	aabe <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   149cc:	9002      	str	r0, [sp, #8]
   149ce:	9101      	str	r1, [sp, #4]
   149d0:	e7ff      	b.n	149d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x22>
    }
   149d2:	9802      	ldr	r0, [sp, #8]
   149d4:	9901      	ldr	r1, [sp, #4]
   149d6:	b008      	add	sp, #32
   149d8:	bd80      	pop	{r7, pc}

000149da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   149da:	b580      	push	{r7, lr}
   149dc:	b088      	sub	sp, #32
   149de:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   149e0:	1d01      	adds	r1, r0, #4
   149e2:	9106      	str	r1, [sp, #24]
   149e4:	9107      	str	r1, [sp, #28]
   149e6:	9004      	str	r0, [sp, #16]
   149e8:	9103      	str	r1, [sp, #12]
   149ea:	e7ff      	b.n	149ec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x12>
   149ec:	9804      	ldr	r0, [sp, #16]
   149ee:	6801      	ldr	r1, [r0, #0]
   149f0:	9803      	ldr	r0, [sp, #12]
   149f2:	f7f6 f864 	bl	aabe <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   149f6:	9002      	str	r0, [sp, #8]
   149f8:	9101      	str	r1, [sp, #4]
   149fa:	e7ff      	b.n	149fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x22>
    }
   149fc:	9802      	ldr	r0, [sp, #8]
   149fe:	9901      	ldr	r1, [sp, #4]
   14a00:	b008      	add	sp, #32
   14a02:	bd80      	pop	{r7, pc}

00014a04 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14a04:	b580      	push	{r7, lr}
   14a06:	b08a      	sub	sp, #40	; 0x28
   14a08:	460a      	mov	r2, r1
   14a0a:	9006      	str	r0, [sp, #24]
   14a0c:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   14a10:	1d01      	adds	r1, r0, #4
   14a12:	9108      	str	r1, [sp, #32]
   14a14:	9109      	str	r1, [sp, #36]	; 0x24
   14a16:	9005      	str	r0, [sp, #20]
   14a18:	9204      	str	r2, [sp, #16]
   14a1a:	9103      	str	r1, [sp, #12]
   14a1c:	e7ff      	b.n	14a1e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x1a>
            .add(self.len)
   14a1e:	9805      	ldr	r0, [sp, #20]
   14a20:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14a22:	9803      	ldr	r0, [sp, #12]
   14a24:	f7f6 f968 	bl	acf8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   14a28:	9002      	str	r0, [sp, #8]
   14a2a:	e7ff      	b.n	14a2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x28>
   14a2c:	9802      	ldr	r0, [sp, #8]
   14a2e:	9904      	ldr	r1, [sp, #16]
   14a30:	f7f6 f96d 	bl	ad0e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   14a34:	e7ff      	b.n	14a36 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x32>
        self.len += 1;
   14a36:	9805      	ldr	r0, [sp, #20]
   14a38:	6801      	ldr	r1, [r0, #0]
   14a3a:	1c4a      	adds	r2, r1, #1
   14a3c:	4613      	mov	r3, r2
   14a3e:	428a      	cmp	r2, r1
   14a40:	9301      	str	r3, [sp, #4]
   14a42:	d305      	bcc.n	14a50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x4c>
   14a44:	e7ff      	b.n	14a46 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x42>
   14a46:	9801      	ldr	r0, [sp, #4]
   14a48:	9905      	ldr	r1, [sp, #20]
   14a4a:	6008      	str	r0, [r1, #0]
    }
   14a4c:	b00a      	add	sp, #40	; 0x28
   14a4e:	bd80      	pop	{r7, pc}
        self.len += 1;
   14a50:	f240 40b0 	movw	r0, #1200	; 0x4b0
   14a54:	f2c0 0002 	movt	r0, #2
   14a58:	f240 4294 	movw	r2, #1172	; 0x494
   14a5c:	f2c0 0202 	movt	r2, #2
   14a60:	211c      	movs	r1, #28
   14a62:	f002 fc33 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14a66:	defe      	udf	#254	; 0xfe

00014a68 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14a68:	b580      	push	{r7, lr}
   14a6a:	b08a      	sub	sp, #40	; 0x28
   14a6c:	460a      	mov	r2, r1
   14a6e:	9006      	str	r0, [sp, #24]
   14a70:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   14a74:	1d01      	adds	r1, r0, #4
   14a76:	9108      	str	r1, [sp, #32]
   14a78:	9109      	str	r1, [sp, #36]	; 0x24
   14a7a:	9005      	str	r0, [sp, #20]
   14a7c:	9204      	str	r2, [sp, #16]
   14a7e:	9103      	str	r1, [sp, #12]
   14a80:	e7ff      	b.n	14a82 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x1a>
            .add(self.len)
   14a82:	9805      	ldr	r0, [sp, #20]
   14a84:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14a86:	9803      	ldr	r0, [sp, #12]
   14a88:	f7f6 f936 	bl	acf8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   14a8c:	9002      	str	r0, [sp, #8]
   14a8e:	e7ff      	b.n	14a90 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x28>
   14a90:	9802      	ldr	r0, [sp, #8]
   14a92:	9904      	ldr	r1, [sp, #16]
   14a94:	f7f6 f93b 	bl	ad0e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   14a98:	e7ff      	b.n	14a9a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x32>
        self.len += 1;
   14a9a:	9805      	ldr	r0, [sp, #20]
   14a9c:	6801      	ldr	r1, [r0, #0]
   14a9e:	1c4a      	adds	r2, r1, #1
   14aa0:	4613      	mov	r3, r2
   14aa2:	428a      	cmp	r2, r1
   14aa4:	9301      	str	r3, [sp, #4]
   14aa6:	d305      	bcc.n	14ab4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x4c>
   14aa8:	e7ff      	b.n	14aaa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x42>
   14aaa:	9801      	ldr	r0, [sp, #4]
   14aac:	9905      	ldr	r1, [sp, #20]
   14aae:	6008      	str	r0, [r1, #0]
    }
   14ab0:	b00a      	add	sp, #40	; 0x28
   14ab2:	bd80      	pop	{r7, pc}
        self.len += 1;
   14ab4:	f240 40b0 	movw	r0, #1200	; 0x4b0
   14ab8:	f2c0 0002 	movt	r0, #2
   14abc:	f240 4294 	movw	r2, #1172	; 0x494
   14ac0:	f2c0 0202 	movt	r2, #2
   14ac4:	211c      	movs	r1, #28
   14ac6:	f002 fc01 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14aca:	defe      	udf	#254	; 0xfe

00014acc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14acc:	b580      	push	{r7, lr}
   14ace:	b094      	sub	sp, #80	; 0x50
   14ad0:	900e      	str	r0, [sp, #56]	; 0x38
   14ad2:	910f      	str	r1, [sp, #60]	; 0x3c
   14ad4:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   14ad6:	6803      	ldr	r3, [r0, #0]
   14ad8:	9009      	str	r0, [sp, #36]	; 0x24
   14ada:	4608      	mov	r0, r1
   14adc:	9108      	str	r1, [sp, #32]
   14ade:	4611      	mov	r1, r2
   14ae0:	9207      	str	r2, [sp, #28]
   14ae2:	9306      	str	r3, [sp, #24]
   14ae4:	f7f6 f80f 	bl	ab06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   14ae8:	9005      	str	r0, [sp, #20]
   14aea:	e7ff      	b.n	14aec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x20>
   14aec:	9806      	ldr	r0, [sp, #24]
   14aee:	9905      	ldr	r1, [sp, #20]
   14af0:	1842      	adds	r2, r0, r1
   14af2:	4613      	mov	r3, r2
   14af4:	4282      	cmp	r2, r0
   14af6:	9304      	str	r3, [sp, #16]
   14af8:	d33f      	bcc.n	14b7a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xae>
   14afa:	e7ff      	b.n	14afc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x30>
   14afc:	9809      	ldr	r0, [sp, #36]	; 0x24
   14afe:	f000 f96a 	bl	14dd6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>
   14b02:	9003      	str	r0, [sp, #12]
   14b04:	e7ff      	b.n	14b06 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x3a>
   14b06:	9804      	ldr	r0, [sp, #16]
   14b08:	9903      	ldr	r1, [sp, #12]
   14b0a:	4288      	cmp	r0, r1
   14b0c:	d807      	bhi.n	14b1e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x52>
   14b0e:	e7ff      	b.n	14b10 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x44>
            for elem in other {
   14b10:	9808      	ldr	r0, [sp, #32]
   14b12:	9907      	ldr	r1, [sp, #28]
   14b14:	f7f6 f86b 	bl	abee <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   14b18:	9002      	str	r0, [sp, #8]
   14b1a:	9101      	str	r1, [sp, #4]
   14b1c:	e003      	b.n	14b26 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x5a>
   14b1e:	2001      	movs	r0, #1
            Err(())
   14b20:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14b24:	e025      	b.n	14b72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   14b26:	9802      	ldr	r0, [sp, #8]
   14b28:	900b      	str	r0, [sp, #44]	; 0x2c
   14b2a:	9901      	ldr	r1, [sp, #4]
   14b2c:	910c      	str	r1, [sp, #48]	; 0x30
   14b2e:	e7ff      	b.n	14b30 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
   14b30:	a80b      	add	r0, sp, #44	; 0x2c
   14b32:	f7f6 f87e 	bl	ac32 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   14b36:	900d      	str	r0, [sp, #52]	; 0x34
   14b38:	e7ff      	b.n	14b3a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x6e>
   14b3a:	980d      	ldr	r0, [sp, #52]	; 0x34
   14b3c:	2800      	cmp	r0, #0
   14b3e:	4601      	mov	r1, r0
   14b40:	bf18      	it	ne
   14b42:	2101      	movne	r1, #1
   14b44:	2800      	cmp	r0, #0
   14b46:	d001      	beq.n	14b4c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x80>
   14b48:	e7ff      	b.n	14b4a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x7e>
   14b4a:	e004      	b.n	14b56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x8a>
   14b4c:	2000      	movs	r0, #0
            Ok(())
   14b4e:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14b52:	e00e      	b.n	14b72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   14b54:	defe      	udf	#254	; 0xfe
   14b56:	980d      	ldr	r0, [sp, #52]	; 0x34
   14b58:	9011      	str	r0, [sp, #68]	; 0x44
   14b5a:	9012      	str	r0, [sp, #72]	; 0x48
   14b5c:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   14b5e:	f001 f864 	bl	15c2a <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   14b62:	9000      	str	r0, [sp, #0]
   14b64:	e7ff      	b.n	14b66 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x9a>
   14b66:	9809      	ldr	r0, [sp, #36]	; 0x24
   14b68:	9900      	ldr	r1, [sp, #0]
   14b6a:	f7ff ff4b 	bl	14a04 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>
   14b6e:	e7ff      	b.n	14b70 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa4>
            for elem in other {
   14b70:	e7de      	b.n	14b30 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
    }
   14b72:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   14b76:	b014      	add	sp, #80	; 0x50
   14b78:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   14b7a:	f240 40b0 	movw	r0, #1200	; 0x4b0
   14b7e:	f2c0 0002 	movt	r0, #2
   14b82:	f240 42cc 	movw	r2, #1228	; 0x4cc
   14b86:	f2c0 0202 	movt	r2, #2
   14b8a:	211c      	movs	r1, #28
   14b8c:	f002 fb9e 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14b90:	defe      	udf	#254	; 0xfe

00014b92 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14b92:	b580      	push	{r7, lr}
   14b94:	b094      	sub	sp, #80	; 0x50
   14b96:	900e      	str	r0, [sp, #56]	; 0x38
   14b98:	910f      	str	r1, [sp, #60]	; 0x3c
   14b9a:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   14b9c:	6803      	ldr	r3, [r0, #0]
   14b9e:	9009      	str	r0, [sp, #36]	; 0x24
   14ba0:	4608      	mov	r0, r1
   14ba2:	9108      	str	r1, [sp, #32]
   14ba4:	4611      	mov	r1, r2
   14ba6:	9207      	str	r2, [sp, #28]
   14ba8:	9306      	str	r3, [sp, #24]
   14baa:	f7f5 ffac 	bl	ab06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   14bae:	9005      	str	r0, [sp, #20]
   14bb0:	e7ff      	b.n	14bb2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x20>
   14bb2:	9806      	ldr	r0, [sp, #24]
   14bb4:	9905      	ldr	r1, [sp, #20]
   14bb6:	1842      	adds	r2, r0, r1
   14bb8:	4613      	mov	r3, r2
   14bba:	4282      	cmp	r2, r0
   14bbc:	9304      	str	r3, [sp, #16]
   14bbe:	d33f      	bcc.n	14c40 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xae>
   14bc0:	e7ff      	b.n	14bc2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x30>
   14bc2:	9809      	ldr	r0, [sp, #36]	; 0x24
   14bc4:	f000 f8fd 	bl	14dc2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   14bc8:	9003      	str	r0, [sp, #12]
   14bca:	e7ff      	b.n	14bcc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x3a>
   14bcc:	9804      	ldr	r0, [sp, #16]
   14bce:	9903      	ldr	r1, [sp, #12]
   14bd0:	4288      	cmp	r0, r1
   14bd2:	d807      	bhi.n	14be4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x52>
   14bd4:	e7ff      	b.n	14bd6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x44>
            for elem in other {
   14bd6:	9808      	ldr	r0, [sp, #32]
   14bd8:	9907      	ldr	r1, [sp, #28]
   14bda:	f7f6 f808 	bl	abee <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   14bde:	9002      	str	r0, [sp, #8]
   14be0:	9101      	str	r1, [sp, #4]
   14be2:	e003      	b.n	14bec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x5a>
   14be4:	2001      	movs	r0, #1
            Err(())
   14be6:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14bea:	e025      	b.n	14c38 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   14bec:	9802      	ldr	r0, [sp, #8]
   14bee:	900b      	str	r0, [sp, #44]	; 0x2c
   14bf0:	9901      	ldr	r1, [sp, #4]
   14bf2:	910c      	str	r1, [sp, #48]	; 0x30
   14bf4:	e7ff      	b.n	14bf6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
   14bf6:	a80b      	add	r0, sp, #44	; 0x2c
   14bf8:	f7f6 f81b 	bl	ac32 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   14bfc:	900d      	str	r0, [sp, #52]	; 0x34
   14bfe:	e7ff      	b.n	14c00 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x6e>
   14c00:	980d      	ldr	r0, [sp, #52]	; 0x34
   14c02:	2800      	cmp	r0, #0
   14c04:	4601      	mov	r1, r0
   14c06:	bf18      	it	ne
   14c08:	2101      	movne	r1, #1
   14c0a:	2800      	cmp	r0, #0
   14c0c:	d001      	beq.n	14c12 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x80>
   14c0e:	e7ff      	b.n	14c10 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x7e>
   14c10:	e004      	b.n	14c1c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x8a>
   14c12:	2000      	movs	r0, #0
            Ok(())
   14c14:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14c18:	e00e      	b.n	14c38 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   14c1a:	defe      	udf	#254	; 0xfe
   14c1c:	980d      	ldr	r0, [sp, #52]	; 0x34
   14c1e:	9011      	str	r0, [sp, #68]	; 0x44
   14c20:	9012      	str	r0, [sp, #72]	; 0x48
   14c22:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   14c24:	f001 f801 	bl	15c2a <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   14c28:	9000      	str	r0, [sp, #0]
   14c2a:	e7ff      	b.n	14c2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x9a>
   14c2c:	9809      	ldr	r0, [sp, #36]	; 0x24
   14c2e:	9900      	ldr	r1, [sp, #0]
   14c30:	f7ff ff1a 	bl	14a68 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   14c34:	e7ff      	b.n	14c36 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa4>
            for elem in other {
   14c36:	e7de      	b.n	14bf6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
    }
   14c38:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   14c3c:	b014      	add	sp, #80	; 0x50
   14c3e:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   14c40:	f240 40b0 	movw	r0, #1200	; 0x4b0
   14c44:	f2c0 0002 	movt	r0, #2
   14c48:	f240 42cc 	movw	r2, #1228	; 0x4cc
   14c4c:	f2c0 0202 	movt	r2, #2
   14c50:	211c      	movs	r1, #28
   14c52:	f002 fb3b 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14c56:	defe      	udf	#254	; 0xfe

00014c58 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   14c58:	b580      	push	{r7, lr}
   14c5a:	b088      	sub	sp, #32
   14c5c:	460a      	mov	r2, r1
   14c5e:	9006      	str	r0, [sp, #24]
   14c60:	f8ad 101e 	strh.w	r1, [sp, #30]
        if self.len < self.capacity() {
   14c64:	6801      	ldr	r1, [r0, #0]
   14c66:	9004      	str	r0, [sp, #16]
   14c68:	9203      	str	r2, [sp, #12]
   14c6a:	9102      	str	r1, [sp, #8]
   14c6c:	f000 f8a9 	bl	14dc2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   14c70:	9001      	str	r0, [sp, #4]
   14c72:	e7ff      	b.n	14c74 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x1c>
   14c74:	9802      	ldr	r0, [sp, #8]
   14c76:	9901      	ldr	r1, [sp, #4]
   14c78:	4288      	cmp	r0, r1
   14c7a:	d307      	bcc.n	14c8c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x34>
   14c7c:	e7ff      	b.n	14c7e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x26>
            Err(item)
   14c7e:	9803      	ldr	r0, [sp, #12]
   14c80:	f8ad 0016 	strh.w	r0, [sp, #22]
   14c84:	2101      	movs	r1, #1
   14c86:	f8ad 1014 	strh.w	r1, [sp, #20]
        if self.len < self.capacity() {
   14c8a:	e008      	b.n	14c9e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
            unsafe { self.push_unchecked(item) }
   14c8c:	9804      	ldr	r0, [sp, #16]
   14c8e:	9903      	ldr	r1, [sp, #12]
   14c90:	f7ff feea 	bl	14a68 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   14c94:	e7ff      	b.n	14c96 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x3e>
   14c96:	2000      	movs	r0, #0
            Ok(())
   14c98:	f8ad 0014 	strh.w	r0, [sp, #20]
        if self.len < self.capacity() {
   14c9c:	e7ff      	b.n	14c9e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
    }
   14c9e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   14ca2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   14ca6:	b008      	add	sp, #32
   14ca8:	bd80      	pop	{r7, pc}

00014caa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>:
    pub(crate) fn clear(&mut self) {
   14caa:	b580      	push	{r7, lr}
   14cac:	b082      	sub	sp, #8
   14cae:	9001      	str	r0, [sp, #4]
   14cb0:	2100      	movs	r1, #0
        self.truncate(0);
   14cb2:	f000 f8d0 	bl	14e56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>
   14cb6:	e7ff      	b.n	14cb8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE+0xe>
    }
   14cb8:	b002      	add	sp, #8
   14cba:	bd80      	pop	{r7, pc}

00014cbc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>:
    pub(crate) fn clear(&mut self) {
   14cbc:	b580      	push	{r7, lr}
   14cbe:	b082      	sub	sp, #8
   14cc0:	9001      	str	r0, [sp, #4]
   14cc2:	2100      	movs	r1, #0
        self.truncate(0);
   14cc4:	f000 f891 	bl	14dea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>
   14cc8:	e7ff      	b.n	14cca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E+0xe>
    }
   14cca:	b002      	add	sp, #8
   14ccc:	bd80      	pop	{r7, pc}

00014cce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>:
    pub(crate) fn clone(&self) -> Self
   14cce:	b580      	push	{r7, lr}
   14cd0:	b0a0      	sub	sp, #128	; 0x80
   14cd2:	911f      	str	r1, [sp, #124]	; 0x7c
   14cd4:	aa05      	add	r2, sp, #20
        let mut new = Self::new();
   14cd6:	9004      	str	r0, [sp, #16]
   14cd8:	4610      	mov	r0, r2
   14cda:	9103      	str	r1, [sp, #12]
   14cdc:	f7ff fe59 	bl	14992 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   14ce0:	e7ff      	b.n	14ce2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   14ce2:	9803      	ldr	r0, [sp, #12]
   14ce4:	f000 f843 	bl	14d6e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   14ce8:	9002      	str	r0, [sp, #8]
   14cea:	9101      	str	r1, [sp, #4]
   14cec:	e7ff      	b.n	14cee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x20>
   14cee:	a805      	add	r0, sp, #20
   14cf0:	9902      	ldr	r1, [sp, #8]
   14cf2:	9a01      	ldr	r2, [sp, #4]
   14cf4:	f7ff ff4d 	bl	14b92 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>
   14cf8:	9000      	str	r0, [sp, #0]
   14cfa:	e7ff      	b.n	14cfc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x2e>
   14cfc:	9800      	ldr	r0, [sp, #0]
   14cfe:	f000 0001 	and.w	r0, r0, #1
   14d02:	f240 41dc 	movw	r1, #1244	; 0x4dc
   14d06:	f2c0 0102 	movt	r1, #2
   14d0a:	f000 f967 	bl	14fdc <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   14d0e:	e7ff      	b.n	14d10 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x42>
   14d10:	a905      	add	r1, sp, #20
   14d12:	2268      	movs	r2, #104	; 0x68
        new
   14d14:	9804      	ldr	r0, [sp, #16]
   14d16:	f008 fead 	bl	1da74 <__aeabi_memcpy>
    }
   14d1a:	b020      	add	sp, #128	; 0x80
   14d1c:	bd80      	pop	{r7, pc}

00014d1e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>:
    pub(crate) fn clone(&self) -> Self
   14d1e:	b580      	push	{r7, lr}
   14d20:	b0ba      	sub	sp, #232	; 0xe8
   14d22:	9139      	str	r1, [sp, #228]	; 0xe4
   14d24:	aa06      	add	r2, sp, #24
        let mut new = Self::new();
   14d26:	9005      	str	r0, [sp, #20]
   14d28:	4610      	mov	r0, r2
   14d2a:	9104      	str	r1, [sp, #16]
   14d2c:	f7ff fe22 	bl	14974 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   14d30:	e7ff      	b.n	14d32 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   14d32:	9804      	ldr	r0, [sp, #16]
   14d34:	f000 f830 	bl	14d98 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   14d38:	9003      	str	r0, [sp, #12]
   14d3a:	9102      	str	r1, [sp, #8]
   14d3c:	e7ff      	b.n	14d3e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x20>
   14d3e:	a806      	add	r0, sp, #24
   14d40:	9903      	ldr	r1, [sp, #12]
   14d42:	9a02      	ldr	r2, [sp, #8]
   14d44:	f7ff fec2 	bl	14acc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   14d48:	9001      	str	r0, [sp, #4]
   14d4a:	e7ff      	b.n	14d4c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x2e>
   14d4c:	9801      	ldr	r0, [sp, #4]
   14d4e:	f000 0001 	and.w	r0, r0, #1
   14d52:	f240 41dc 	movw	r1, #1244	; 0x4dc
   14d56:	f2c0 0102 	movt	r1, #2
   14d5a:	f000 f93f 	bl	14fdc <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   14d5e:	e7ff      	b.n	14d60 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x42>
   14d60:	a906      	add	r1, sp, #24
   14d62:	22cc      	movs	r2, #204	; 0xcc
        new
   14d64:	9805      	ldr	r0, [sp, #20]
   14d66:	f008 fe85 	bl	1da74 <__aeabi_memcpy>
    }
   14d6a:	b03a      	add	sp, #232	; 0xe8
   14d6c:	bd80      	pop	{r7, pc}

00014d6e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   14d6e:	b580      	push	{r7, lr}
   14d70:	b088      	sub	sp, #32
   14d72:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   14d74:	1d01      	adds	r1, r0, #4
   14d76:	9106      	str	r1, [sp, #24]
   14d78:	9107      	str	r1, [sp, #28]
   14d7a:	9004      	str	r0, [sp, #16]
   14d7c:	9103      	str	r1, [sp, #12]
   14d7e:	e7ff      	b.n	14d80 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x12>
   14d80:	9804      	ldr	r0, [sp, #16]
   14d82:	6801      	ldr	r1, [r0, #0]
   14d84:	9803      	ldr	r0, [sp, #12]
   14d86:	f7f5 fe8d 	bl	aaa4 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   14d8a:	9002      	str	r0, [sp, #8]
   14d8c:	9101      	str	r1, [sp, #4]
   14d8e:	e7ff      	b.n	14d90 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x22>
    }
   14d90:	9802      	ldr	r0, [sp, #8]
   14d92:	9901      	ldr	r1, [sp, #4]
   14d94:	b008      	add	sp, #32
   14d96:	bd80      	pop	{r7, pc}

00014d98 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   14d98:	b580      	push	{r7, lr}
   14d9a:	b088      	sub	sp, #32
   14d9c:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   14d9e:	1d01      	adds	r1, r0, #4
   14da0:	9106      	str	r1, [sp, #24]
   14da2:	9107      	str	r1, [sp, #28]
   14da4:	9004      	str	r0, [sp, #16]
   14da6:	9103      	str	r1, [sp, #12]
   14da8:	e7ff      	b.n	14daa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x12>
   14daa:	9804      	ldr	r0, [sp, #16]
   14dac:	6801      	ldr	r1, [r0, #0]
   14dae:	9803      	ldr	r0, [sp, #12]
   14db0:	f7f5 fe78 	bl	aaa4 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   14db4:	9002      	str	r0, [sp, #8]
   14db6:	9101      	str	r1, [sp, #4]
   14db8:	e7ff      	b.n	14dba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x22>
    }
   14dba:	9802      	ldr	r0, [sp, #8]
   14dbc:	9901      	ldr	r1, [sp, #4]
   14dbe:	b008      	add	sp, #32
   14dc0:	bd80      	pop	{r7, pc}

00014dc2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>:
    pub(crate) fn capacity(&self) -> usize {
   14dc2:	b580      	push	{r7, lr}
   14dc4:	b082      	sub	sp, #8
   14dc6:	9001      	str	r0, [sp, #4]
        N::to_usize()
   14dc8:	f000 fa34 	bl	15234 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   14dcc:	9000      	str	r0, [sp, #0]
   14dce:	e7ff      	b.n	14dd0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E+0xe>
    }
   14dd0:	9800      	ldr	r0, [sp, #0]
   14dd2:	b002      	add	sp, #8
   14dd4:	bd80      	pop	{r7, pc}

00014dd6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>:
    pub(crate) fn capacity(&self) -> usize {
   14dd6:	b580      	push	{r7, lr}
   14dd8:	b082      	sub	sp, #8
   14dda:	9001      	str	r0, [sp, #4]
        N::to_usize()
   14ddc:	f000 fa42 	bl	15264 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>
   14de0:	9000      	str	r0, [sp, #0]
   14de2:	e7ff      	b.n	14de4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E+0xe>
    }
   14de4:	9800      	ldr	r0, [sp, #0]
   14de6:	b002      	add	sp, #8
   14de8:	bd80      	pop	{r7, pc}

00014dea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   14dea:	b580      	push	{r7, lr}
   14dec:	b08a      	sub	sp, #40	; 0x28
   14dee:	9007      	str	r0, [sp, #28]
   14df0:	9108      	str	r1, [sp, #32]
   14df2:	9106      	str	r1, [sp, #24]
   14df4:	9005      	str	r0, [sp, #20]
   14df6:	e7ff      	b.n	14df8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
            while len < self.len {
   14df8:	9805      	ldr	r0, [sp, #20]
   14dfa:	6801      	ldr	r1, [r0, #0]
   14dfc:	9a06      	ldr	r2, [sp, #24]
   14dfe:	428a      	cmp	r2, r1
   14e00:	d302      	bcc.n	14e08 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1e>
   14e02:	e7ff      	b.n	14e04 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1a>
    }
   14e04:	b00a      	add	sp, #40	; 0x28
   14e06:	bd80      	pop	{r7, pc}
                self.len -= 1;
   14e08:	9805      	ldr	r0, [sp, #20]
   14e0a:	6801      	ldr	r1, [r0, #0]
   14e0c:	1e4a      	subs	r2, r1, #1
   14e0e:	2901      	cmp	r1, #1
   14e10:	9204      	str	r2, [sp, #16]
   14e12:	d314      	bcc.n	14e3e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x54>
   14e14:	e7ff      	b.n	14e16 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x2c>
   14e16:	9804      	ldr	r0, [sp, #16]
   14e18:	9905      	ldr	r1, [sp, #20]
   14e1a:	6008      	str	r0, [r1, #0]
                let len = self.len;
   14e1c:	680a      	ldr	r2, [r1, #0]
   14e1e:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   14e20:	4608      	mov	r0, r1
   14e22:	9203      	str	r2, [sp, #12]
   14e24:	f7ff fdd9 	bl	149da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   14e28:	9002      	str	r0, [sp, #8]
   14e2a:	9101      	str	r1, [sp, #4]
   14e2c:	e7ff      	b.n	14e2e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x44>
   14e2e:	9802      	ldr	r0, [sp, #8]
   14e30:	9901      	ldr	r1, [sp, #4]
   14e32:	9a03      	ldr	r2, [sp, #12]
   14e34:	f7f5 fe55 	bl	aae2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   14e38:	e7ff      	b.n	14e3a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x50>
   14e3a:	e7ff      	b.n	14e3c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x52>
            while len < self.len {
   14e3c:	e7dc      	b.n	14df8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
                self.len -= 1;
   14e3e:	f240 4070 	movw	r0, #1136	; 0x470
   14e42:	f2c0 0002 	movt	r0, #2
   14e46:	f240 42ec 	movw	r2, #1260	; 0x4ec
   14e4a:	f2c0 0202 	movt	r2, #2
   14e4e:	2121      	movs	r1, #33	; 0x21
   14e50:	f002 fa3c 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14e54:	defe      	udf	#254	; 0xfe

00014e56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   14e56:	b580      	push	{r7, lr}
   14e58:	b08a      	sub	sp, #40	; 0x28
   14e5a:	9007      	str	r0, [sp, #28]
   14e5c:	9108      	str	r1, [sp, #32]
   14e5e:	9106      	str	r1, [sp, #24]
   14e60:	9005      	str	r0, [sp, #20]
   14e62:	e7ff      	b.n	14e64 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
            while len < self.len {
   14e64:	9805      	ldr	r0, [sp, #20]
   14e66:	6801      	ldr	r1, [r0, #0]
   14e68:	9a06      	ldr	r2, [sp, #24]
   14e6a:	428a      	cmp	r2, r1
   14e6c:	d302      	bcc.n	14e74 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1e>
   14e6e:	e7ff      	b.n	14e70 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1a>
    }
   14e70:	b00a      	add	sp, #40	; 0x28
   14e72:	bd80      	pop	{r7, pc}
                self.len -= 1;
   14e74:	9805      	ldr	r0, [sp, #20]
   14e76:	6801      	ldr	r1, [r0, #0]
   14e78:	1e4a      	subs	r2, r1, #1
   14e7a:	2901      	cmp	r1, #1
   14e7c:	9204      	str	r2, [sp, #16]
   14e7e:	d314      	bcc.n	14eaa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x54>
   14e80:	e7ff      	b.n	14e82 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x2c>
   14e82:	9804      	ldr	r0, [sp, #16]
   14e84:	9905      	ldr	r1, [sp, #20]
   14e86:	6008      	str	r0, [r1, #0]
                let len = self.len;
   14e88:	680a      	ldr	r2, [r1, #0]
   14e8a:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   14e8c:	4608      	mov	r0, r1
   14e8e:	9203      	str	r2, [sp, #12]
   14e90:	f7ff fd8e 	bl	149b0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   14e94:	9002      	str	r0, [sp, #8]
   14e96:	9101      	str	r1, [sp, #4]
   14e98:	e7ff      	b.n	14e9a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x44>
   14e9a:	9802      	ldr	r0, [sp, #8]
   14e9c:	9901      	ldr	r1, [sp, #4]
   14e9e:	9a03      	ldr	r2, [sp, #12]
   14ea0:	f7f5 fe1f 	bl	aae2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   14ea4:	e7ff      	b.n	14ea6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x50>
   14ea6:	e7ff      	b.n	14ea8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x52>
            while len < self.len {
   14ea8:	e7dc      	b.n	14e64 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
                self.len -= 1;
   14eaa:	f240 4070 	movw	r0, #1136	; 0x470
   14eae:	f2c0 0002 	movt	r0, #2
   14eb2:	f240 42ec 	movw	r2, #1260	; 0x4ec
   14eb6:	f2c0 0202 	movt	r2, #2
   14eba:	2121      	movs	r1, #33	; 0x21
   14ebc:	f002 fa06 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14ec0:	defe      	udf	#254	; 0xfe

00014ec2 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>:
   14ec2:	b580      	push	{r7, lr}
   14ec4:	b084      	sub	sp, #16
   14ec6:	9001      	str	r0, [sp, #4]
   14ec8:	9102      	str	r1, [sp, #8]
   14eca:	9203      	str	r2, [sp, #12]
   14ecc:	0052      	lsls	r2, r2, #1
   14ece:	9000      	str	r0, [sp, #0]
   14ed0:	4608      	mov	r0, r1
   14ed2:	9900      	ldr	r1, [sp, #0]
   14ed4:	f008 fdce 	bl	1da74 <__aeabi_memcpy>
   14ed8:	e7ff      	b.n	14eda <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E+0x18>
   14eda:	b004      	add	sp, #16
   14edc:	bd80      	pop	{r7, pc}

00014ede <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>:
   14ede:	b082      	sub	sp, #8
   14ee0:	9001      	str	r0, [sp, #4]
   14ee2:	8800      	ldrh	r0, [r0, #0]
   14ee4:	2800      	cmp	r0, #0
   14ee6:	d004      	beq.n	14ef2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x14>
   14ee8:	e7ff      	b.n	14eea <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0xc>
   14eea:	2000      	movs	r0, #0
   14eec:	f88d 0003 	strb.w	r0, [sp, #3]
   14ef0:	e003      	b.n	14efa <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   14ef2:	2001      	movs	r0, #1
   14ef4:	f88d 0003 	strb.w	r0, [sp, #3]
   14ef8:	e7ff      	b.n	14efa <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   14efa:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14efe:	b002      	add	sp, #8
   14f00:	4770      	bx	lr

00014f02 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>:
   14f02:	b082      	sub	sp, #8
   14f04:	9001      	str	r0, [sp, #4]
   14f06:	7800      	ldrb	r0, [r0, #0]
   14f08:	07c0      	lsls	r0, r0, #31
   14f0a:	2800      	cmp	r0, #0
   14f0c:	d004      	beq.n	14f18 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x16>
   14f0e:	e7ff      	b.n	14f10 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0xe>
   14f10:	2000      	movs	r0, #0
   14f12:	f88d 0003 	strb.w	r0, [sp, #3]
   14f16:	e003      	b.n	14f20 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   14f18:	2001      	movs	r0, #1
   14f1a:	f88d 0003 	strb.w	r0, [sp, #3]
   14f1e:	e7ff      	b.n	14f20 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   14f20:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14f24:	b002      	add	sp, #8
   14f26:	4770      	bx	lr

00014f28 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>:
   14f28:	b510      	push	{r4, lr}
   14f2a:	b08a      	sub	sp, #40	; 0x28
   14f2c:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   14f30:	468e      	mov	lr, r1
   14f32:	4604      	mov	r4, r0
   14f34:	f8ad 0014 	strh.w	r0, [sp, #20]
   14f38:	f8ad 1016 	strh.w	r1, [sp, #22]
   14f3c:	9207      	str	r2, [sp, #28]
   14f3e:	9308      	str	r3, [sp, #32]
   14f40:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   14f44:	4601      	mov	r1, r0
   14f46:	2800      	cmp	r0, #0
   14f48:	9304      	str	r3, [sp, #16]
   14f4a:	9203      	str	r2, [sp, #12]
   14f4c:	f8cd c008 	str.w	ip, [sp, #8]
   14f50:	d013      	beq.n	14f7a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x52>
   14f52:	e7ff      	b.n	14f54 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x2c>
   14f54:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   14f58:	f8ad 001a 	strh.w	r0, [sp, #26]
   14f5c:	4668      	mov	r0, sp
   14f5e:	9902      	ldr	r1, [sp, #8]
   14f60:	6001      	str	r1, [r0, #0]
   14f62:	f240 530c 	movw	r3, #1292	; 0x50c
   14f66:	f2c0 0302 	movt	r3, #2
   14f6a:	f10d 021a 	add.w	r2, sp, #26
   14f6e:	9803      	ldr	r0, [sp, #12]
   14f70:	9904      	ldr	r1, [sp, #16]
   14f72:	f002 f97d 	bl	17270 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   14f76:	defe      	udf	#254	; 0xfe
   14f78:	defe      	udf	#254	; 0xfe
   14f7a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   14f7e:	2800      	cmp	r0, #0
   14f80:	d102      	bne.n	14f88 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x60>
   14f82:	e7ff      	b.n	14f84 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>
   14f84:	b00a      	add	sp, #40	; 0x28
   14f86:	bd10      	pop	{r4, pc}
   14f88:	e7fc      	b.n	14f84 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>

00014f8a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   14f8a:	b580      	push	{r7, lr}
   14f8c:	b08a      	sub	sp, #40	; 0x28
   14f8e:	4684      	mov	ip, r0
   14f90:	f88d 0017 	strb.w	r0, [sp, #23]
   14f94:	9107      	str	r1, [sp, #28]
   14f96:	9208      	str	r2, [sp, #32]
   14f98:	f89d 0017 	ldrb.w	r0, [sp, #23]
   14f9c:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   14fa0:	f1be 0f00 	cmp.w	lr, #0
   14fa4:	9304      	str	r3, [sp, #16]
   14fa6:	9203      	str	r2, [sp, #12]
   14fa8:	9102      	str	r1, [sp, #8]
   14faa:	d00e      	beq.n	14fca <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   14fac:	e7ff      	b.n	14fae <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   14fae:	4668      	mov	r0, sp
   14fb0:	9904      	ldr	r1, [sp, #16]
   14fb2:	6001      	str	r1, [r0, #0]
   14fb4:	f240 43fc 	movw	r3, #1276	; 0x4fc
   14fb8:	f2c0 0302 	movt	r3, #2
   14fbc:	aa06      	add	r2, sp, #24
   14fbe:	9802      	ldr	r0, [sp, #8]
   14fc0:	9903      	ldr	r1, [sp, #12]
   14fc2:	f002 f955 	bl	17270 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   14fc6:	defe      	udf	#254	; 0xfe
   14fc8:	defe      	udf	#254	; 0xfe
   14fca:	f89d 0017 	ldrb.w	r0, [sp, #23]
   14fce:	07c0      	lsls	r0, r0, #31
   14fd0:	2800      	cmp	r0, #0
   14fd2:	d102      	bne.n	14fda <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   14fd4:	e7ff      	b.n	14fd6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   14fd6:	b00a      	add	sp, #40	; 0x28
   14fd8:	bd80      	pop	{r7, pc}
   14fda:	e7fc      	b.n	14fd6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

00014fdc <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>:
   14fdc:	b086      	sub	sp, #24
   14fde:	4602      	mov	r2, r0
   14fe0:	f88d 000f 	strb.w	r0, [sp, #15]
   14fe4:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14fe8:	07c3      	lsls	r3, r0, #31
   14fea:	2b00      	cmp	r3, #0
   14fec:	9102      	str	r1, [sp, #8]
   14fee:	d011      	beq.n	15014 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x38>
   14ff0:	e7ff      	b.n	14ff2 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x16>
   14ff2:	4668      	mov	r0, sp
   14ff4:	9902      	ldr	r1, [sp, #8]
   14ff6:	6001      	str	r1, [r0, #0]
   14ff8:	f240 501c 	movw	r0, #1308	; 0x51c
   14ffc:	f2c0 0002 	movt	r0, #2
   15000:	f240 43fc 	movw	r3, #1276	; 0x4fc
   15004:	f2c0 0302 	movt	r3, #2
   15008:	212b      	movs	r1, #43	; 0x2b
   1500a:	aa04      	add	r2, sp, #16
   1500c:	f002 f930 	bl	17270 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15010:	defe      	udf	#254	; 0xfe
   15012:	defe      	udf	#254	; 0xfe
   15014:	f89d 000f 	ldrb.w	r0, [sp, #15]
   15018:	07c0      	lsls	r0, r0, #31
   1501a:	2800      	cmp	r0, #0
   1501c:	d102      	bne.n	15024 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x48>
   1501e:	e7ff      	b.n	15020 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>
   15020:	b006      	add	sp, #24
   15022:	4770      	bx	lr
   15024:	e7fc      	b.n	15020 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>

00015026 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   15026:	b580      	push	{r7, lr}
   15028:	b088      	sub	sp, #32
   1502a:	9001      	str	r0, [sp, #4]
   1502c:	2000      	movs	r0, #0
   1502e:	f88d 0013 	strb.w	r0, [sp, #19]
   15032:	f88d 0011 	strb.w	r0, [sp, #17]
   15036:	f88d 0012 	strb.w	r0, [sp, #18]
   1503a:	2001      	movs	r0, #1
   1503c:	f88d 0012 	strb.w	r0, [sp, #18]
   15040:	f88d 0013 	strb.w	r0, [sp, #19]
   15044:	f88d 0011 	strb.w	r0, [sp, #17]
   15048:	9801      	ldr	r0, [sp, #4]
   1504a:	1e41      	subs	r1, r0, #1
   1504c:	bf18      	it	ne
   1504e:	2101      	movne	r1, #1
   15050:	2801      	cmp	r0, #1
   15052:	d00d      	beq.n	15070 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   15054:	e7ff      	b.n	15056 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   15056:	2000      	movs	r0, #0
   15058:	f88d 0013 	strb.w	r0, [sp, #19]
   1505c:	9901      	ldr	r1, [sp, #4]
   1505e:	9107      	str	r1, [sp, #28]
   15060:	f88d 0011 	strb.w	r0, [sp, #17]
   15064:	9103      	str	r1, [sp, #12]
   15066:	9803      	ldr	r0, [sp, #12]
   15068:	f7f4 fd11 	bl	9a8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   1506c:	e006      	b.n	1507c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   1506e:	defe      	udf	#254	; 0xfe
   15070:	2000      	movs	r0, #0
   15072:	f88d 0012 	strb.w	r0, [sp, #18]
   15076:	f88d 000b 	strb.w	r0, [sp, #11]
   1507a:	e003      	b.n	15084 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   1507c:	2001      	movs	r0, #1
   1507e:	f88d 000b 	strb.w	r0, [sp, #11]
   15082:	e7ff      	b.n	15084 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   15084:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15088:	07c0      	lsls	r0, r0, #31
   1508a:	2800      	cmp	r0, #0
   1508c:	d104      	bne.n	15098 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   1508e:	e7ff      	b.n	15090 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   15090:	9801      	ldr	r0, [sp, #4]
   15092:	2801      	cmp	r0, #1
   15094:	d008      	beq.n	150a8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   15096:	e011      	b.n	150bc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   15098:	2000      	movs	r0, #0
   1509a:	f88d 0011 	strb.w	r0, [sp, #17]
   1509e:	e7f7      	b.n	15090 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   150a0:	f89d 000b 	ldrb.w	r0, [sp, #11]
   150a4:	b008      	add	sp, #32
   150a6:	bd80      	pop	{r7, pc}
   150a8:	f89d 0012 	ldrb.w	r0, [sp, #18]
   150ac:	07c0      	lsls	r0, r0, #31
   150ae:	2800      	cmp	r0, #0
   150b0:	d0f6      	beq.n	150a0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   150b2:	e7ff      	b.n	150b4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   150b4:	2000      	movs	r0, #0
   150b6:	f88d 0012 	strb.w	r0, [sp, #18]
   150ba:	e7f1      	b.n	150a0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   150bc:	f89d 0013 	ldrb.w	r0, [sp, #19]
   150c0:	07c0      	lsls	r0, r0, #31
   150c2:	2800      	cmp	r0, #0
   150c4:	d0ec      	beq.n	150a0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   150c6:	e7ff      	b.n	150c8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   150c8:	2000      	movs	r0, #0
   150ca:	f88d 0013 	strb.w	r0, [sp, #19]
   150ce:	e7e7      	b.n	150a0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

000150d0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   150d0:	b580      	push	{r7, lr}
   150d2:	b088      	sub	sp, #32
   150d4:	9001      	str	r0, [sp, #4]
   150d6:	2000      	movs	r0, #0
   150d8:	f88d 0013 	strb.w	r0, [sp, #19]
   150dc:	f88d 0011 	strb.w	r0, [sp, #17]
   150e0:	f88d 0012 	strb.w	r0, [sp, #18]
   150e4:	2001      	movs	r0, #1
   150e6:	f88d 0012 	strb.w	r0, [sp, #18]
   150ea:	f88d 0013 	strb.w	r0, [sp, #19]
   150ee:	f88d 0011 	strb.w	r0, [sp, #17]
   150f2:	9801      	ldr	r0, [sp, #4]
   150f4:	1e41      	subs	r1, r0, #1
   150f6:	bf18      	it	ne
   150f8:	2101      	movne	r1, #1
   150fa:	2801      	cmp	r0, #1
   150fc:	d00d      	beq.n	1511a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   150fe:	e7ff      	b.n	15100 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   15100:	2000      	movs	r0, #0
   15102:	f88d 0013 	strb.w	r0, [sp, #19]
   15106:	9901      	ldr	r1, [sp, #4]
   15108:	9107      	str	r1, [sp, #28]
   1510a:	f88d 0011 	strb.w	r0, [sp, #17]
   1510e:	9103      	str	r1, [sp, #12]
   15110:	9803      	ldr	r0, [sp, #12]
   15112:	f7f4 fcb2 	bl	9a7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   15116:	e006      	b.n	15126 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   15118:	defe      	udf	#254	; 0xfe
   1511a:	2000      	movs	r0, #0
   1511c:	f88d 0012 	strb.w	r0, [sp, #18]
   15120:	f88d 000b 	strb.w	r0, [sp, #11]
   15124:	e003      	b.n	1512e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   15126:	2001      	movs	r0, #1
   15128:	f88d 000b 	strb.w	r0, [sp, #11]
   1512c:	e7ff      	b.n	1512e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   1512e:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15132:	07c0      	lsls	r0, r0, #31
   15134:	2800      	cmp	r0, #0
   15136:	d104      	bne.n	15142 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   15138:	e7ff      	b.n	1513a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1513a:	9801      	ldr	r0, [sp, #4]
   1513c:	2801      	cmp	r0, #1
   1513e:	d008      	beq.n	15152 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   15140:	e011      	b.n	15166 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   15142:	2000      	movs	r0, #0
   15144:	f88d 0011 	strb.w	r0, [sp, #17]
   15148:	e7f7      	b.n	1513a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1514a:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1514e:	b008      	add	sp, #32
   15150:	bd80      	pop	{r7, pc}
   15152:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15156:	07c0      	lsls	r0, r0, #31
   15158:	2800      	cmp	r0, #0
   1515a:	d0f6      	beq.n	1514a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   1515c:	e7ff      	b.n	1515e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   1515e:	2000      	movs	r0, #0
   15160:	f88d 0012 	strb.w	r0, [sp, #18]
   15164:	e7f1      	b.n	1514a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15166:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1516a:	07c0      	lsls	r0, r0, #31
   1516c:	2800      	cmp	r0, #0
   1516e:	d0ec      	beq.n	1514a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15170:	e7ff      	b.n	15172 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   15172:	2000      	movs	r0, #0
   15174:	f88d 0013 	strb.w	r0, [sp, #19]
   15178:	e7e7      	b.n	1514a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

0001517a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   1517a:	b580      	push	{r7, lr}
   1517c:	b088      	sub	sp, #32
   1517e:	9001      	str	r0, [sp, #4]
   15180:	2000      	movs	r0, #0
   15182:	f88d 0013 	strb.w	r0, [sp, #19]
   15186:	f88d 0011 	strb.w	r0, [sp, #17]
   1518a:	f88d 0012 	strb.w	r0, [sp, #18]
   1518e:	2001      	movs	r0, #1
   15190:	f88d 0012 	strb.w	r0, [sp, #18]
   15194:	f88d 0013 	strb.w	r0, [sp, #19]
   15198:	f88d 0011 	strb.w	r0, [sp, #17]
   1519c:	9801      	ldr	r0, [sp, #4]
   1519e:	1e41      	subs	r1, r0, #1
   151a0:	bf18      	it	ne
   151a2:	2101      	movne	r1, #1
   151a4:	2801      	cmp	r0, #1
   151a6:	d00d      	beq.n	151c4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   151a8:	e7ff      	b.n	151aa <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   151aa:	2000      	movs	r0, #0
   151ac:	f88d 0013 	strb.w	r0, [sp, #19]
   151b0:	9901      	ldr	r1, [sp, #4]
   151b2:	9107      	str	r1, [sp, #28]
   151b4:	f88d 0011 	strb.w	r0, [sp, #17]
   151b8:	9103      	str	r1, [sp, #12]
   151ba:	9803      	ldr	r0, [sp, #12]
   151bc:	f7f4 fc62 	bl	9a84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   151c0:	e006      	b.n	151d0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   151c2:	defe      	udf	#254	; 0xfe
   151c4:	2000      	movs	r0, #0
   151c6:	f88d 0012 	strb.w	r0, [sp, #18]
   151ca:	f88d 000b 	strb.w	r0, [sp, #11]
   151ce:	e003      	b.n	151d8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   151d0:	2001      	movs	r0, #1
   151d2:	f88d 000b 	strb.w	r0, [sp, #11]
   151d6:	e7ff      	b.n	151d8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   151d8:	f89d 0011 	ldrb.w	r0, [sp, #17]
   151dc:	07c0      	lsls	r0, r0, #31
   151de:	2800      	cmp	r0, #0
   151e0:	d104      	bne.n	151ec <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   151e2:	e7ff      	b.n	151e4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   151e4:	9801      	ldr	r0, [sp, #4]
   151e6:	2801      	cmp	r0, #1
   151e8:	d008      	beq.n	151fc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   151ea:	e011      	b.n	15210 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   151ec:	2000      	movs	r0, #0
   151ee:	f88d 0011 	strb.w	r0, [sp, #17]
   151f2:	e7f7      	b.n	151e4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   151f4:	f89d 000b 	ldrb.w	r0, [sp, #11]
   151f8:	b008      	add	sp, #32
   151fa:	bd80      	pop	{r7, pc}
   151fc:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15200:	07c0      	lsls	r0, r0, #31
   15202:	2800      	cmp	r0, #0
   15204:	d0f6      	beq.n	151f4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   15206:	e7ff      	b.n	15208 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   15208:	2000      	movs	r0, #0
   1520a:	f88d 0012 	strb.w	r0, [sp, #18]
   1520e:	e7f1      	b.n	151f4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   15210:	f89d 0013 	ldrb.w	r0, [sp, #19]
   15214:	07c0      	lsls	r0, r0, #31
   15216:	2800      	cmp	r0, #0
   15218:	d0ec      	beq.n	151f4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1521a:	e7ff      	b.n	1521c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   1521c:	2000      	movs	r0, #0
   1521e:	f88d 0013 	strb.w	r0, [sp, #19]
   15222:	e7e7      	b.n	151f4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

00015224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   15224:	b082      	sub	sp, #8
   15226:	2001      	movs	r0, #1
   15228:	f88d 0003 	strb.w	r0, [sp, #3]
   1522c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15230:	b002      	add	sp, #8
   15232:	4770      	bx	lr

00015234 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>:
    fn to_usize() -> usize {
   15234:	b580      	push	{r7, lr}
   15236:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15238:	f001 fde5 	bl	16e06 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   1523c:	9003      	str	r0, [sp, #12]
   1523e:	e7ff      	b.n	15240 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0xc>
   15240:	9803      	ldr	r0, [sp, #12]
   15242:	f001 fe1b 	bl	16e7c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15246:	9002      	str	r0, [sp, #8]
   15248:	e7ff      	b.n	1524a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x16>
   1524a:	f000 f823 	bl	15294 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>
   1524e:	9001      	str	r0, [sp, #4]
   15250:	e7ff      	b.n	15252 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x1e>
   15252:	9801      	ldr	r0, [sp, #4]
   15254:	0041      	lsls	r1, r0, #1
   15256:	9100      	str	r1, [sp, #0]
   15258:	e7ff      	b.n	1525a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x26>
   1525a:	9802      	ldr	r0, [sp, #8]
   1525c:	9900      	ldr	r1, [sp, #0]
   1525e:	4308      	orrs	r0, r1
    }
   15260:	b004      	add	sp, #16
   15262:	bd80      	pop	{r7, pc}

00015264 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>:
    fn to_usize() -> usize {
   15264:	b580      	push	{r7, lr}
   15266:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15268:	f001 fdcd 	bl	16e06 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   1526c:	9003      	str	r0, [sp, #12]
   1526e:	e7ff      	b.n	15270 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0xc>
   15270:	9803      	ldr	r0, [sp, #12]
   15272:	f001 fe03 	bl	16e7c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15276:	9002      	str	r0, [sp, #8]
   15278:	e7ff      	b.n	1527a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x16>
   1527a:	f7ff ffdb 	bl	15234 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   1527e:	9001      	str	r0, [sp, #4]
   15280:	e7ff      	b.n	15282 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x1e>
   15282:	9801      	ldr	r0, [sp, #4]
   15284:	0041      	lsls	r1, r0, #1
   15286:	9100      	str	r1, [sp, #0]
   15288:	e7ff      	b.n	1528a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x26>
   1528a:	9802      	ldr	r0, [sp, #8]
   1528c:	9900      	ldr	r1, [sp, #0]
   1528e:	4308      	orrs	r0, r1
    }
   15290:	b004      	add	sp, #16
   15292:	bd80      	pop	{r7, pc}

00015294 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>:
    fn to_usize() -> usize {
   15294:	b580      	push	{r7, lr}
   15296:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15298:	f001 fdb7 	bl	16e0a <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   1529c:	9003      	str	r0, [sp, #12]
   1529e:	e7ff      	b.n	152a0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0xc>
   152a0:	9803      	ldr	r0, [sp, #12]
   152a2:	f001 fdeb 	bl	16e7c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   152a6:	9002      	str	r0, [sp, #8]
   152a8:	e7ff      	b.n	152aa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x16>
   152aa:	f000 f83b 	bl	15324 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>
   152ae:	9001      	str	r0, [sp, #4]
   152b0:	e7ff      	b.n	152b2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x1e>
   152b2:	9801      	ldr	r0, [sp, #4]
   152b4:	0041      	lsls	r1, r0, #1
   152b6:	9100      	str	r1, [sp, #0]
   152b8:	e7ff      	b.n	152ba <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x26>
   152ba:	9802      	ldr	r0, [sp, #8]
   152bc:	9900      	ldr	r1, [sp, #0]
   152be:	4308      	orrs	r0, r1
    }
   152c0:	b004      	add	sp, #16
   152c2:	bd80      	pop	{r7, pc}

000152c4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>:
    fn to_usize() -> usize {
   152c4:	b580      	push	{r7, lr}
   152c6:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   152c8:	f001 fd9d 	bl	16e06 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   152cc:	9003      	str	r0, [sp, #12]
   152ce:	e7ff      	b.n	152d0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0xc>
   152d0:	9803      	ldr	r0, [sp, #12]
   152d2:	f001 fdd3 	bl	16e7c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   152d6:	9002      	str	r0, [sp, #8]
   152d8:	e7ff      	b.n	152da <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x16>
   152da:	f000 f80b 	bl	152f4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>
   152de:	9001      	str	r0, [sp, #4]
   152e0:	e7ff      	b.n	152e2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x1e>
   152e2:	9801      	ldr	r0, [sp, #4]
   152e4:	0041      	lsls	r1, r0, #1
   152e6:	9100      	str	r1, [sp, #0]
   152e8:	e7ff      	b.n	152ea <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x26>
   152ea:	9802      	ldr	r0, [sp, #8]
   152ec:	9900      	ldr	r1, [sp, #0]
   152ee:	4308      	orrs	r0, r1
    }
   152f0:	b004      	add	sp, #16
   152f2:	bd80      	pop	{r7, pc}

000152f4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>:
    fn to_usize() -> usize {
   152f4:	b580      	push	{r7, lr}
   152f6:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   152f8:	f001 fd87 	bl	16e0a <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   152fc:	9003      	str	r0, [sp, #12]
   152fe:	e7ff      	b.n	15300 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0xc>
   15300:	9803      	ldr	r0, [sp, #12]
   15302:	f001 fdbb 	bl	16e7c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15306:	9002      	str	r0, [sp, #8]
   15308:	e7ff      	b.n	1530a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x16>
   1530a:	f001 fd1c 	bl	16d46 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   1530e:	9001      	str	r0, [sp, #4]
   15310:	e7ff      	b.n	15312 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x1e>
   15312:	9801      	ldr	r0, [sp, #4]
   15314:	0041      	lsls	r1, r0, #1
   15316:	9100      	str	r1, [sp, #0]
   15318:	e7ff      	b.n	1531a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x26>
   1531a:	9802      	ldr	r0, [sp, #8]
   1531c:	9900      	ldr	r1, [sp, #0]
   1531e:	4308      	orrs	r0, r1
    }
   15320:	b004      	add	sp, #16
   15322:	bd80      	pop	{r7, pc}

00015324 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>:
    fn to_usize() -> usize {
   15324:	b580      	push	{r7, lr}
   15326:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15328:	f001 fd6d 	bl	16e06 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   1532c:	9003      	str	r0, [sp, #12]
   1532e:	e7ff      	b.n	15330 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0xc>
   15330:	9803      	ldr	r0, [sp, #12]
   15332:	f001 fda3 	bl	16e7c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15336:	9002      	str	r0, [sp, #8]
   15338:	e7ff      	b.n	1533a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x16>
   1533a:	f7ff ffc3 	bl	152c4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>
   1533e:	9001      	str	r0, [sp, #4]
   15340:	e7ff      	b.n	15342 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x1e>
   15342:	9801      	ldr	r0, [sp, #4]
   15344:	0041      	lsls	r1, r0, #1
   15346:	9100      	str	r1, [sp, #0]
   15348:	e7ff      	b.n	1534a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x26>
   1534a:	9802      	ldr	r0, [sp, #8]
   1534c:	9900      	ldr	r1, [sp, #0]
   1534e:	4308      	orrs	r0, r1
    }
   15350:	b004      	add	sp, #16
   15352:	bd80      	pop	{r7, pc}

00015354 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>:
pub fn draw_to_display<T>(item: T)
   15354:	b510      	push	{r4, lr}
   15356:	b088      	sub	sp, #32
   15358:	a901      	add	r1, sp, #4
        item
   1535a:	460a      	mov	r2, r1
   1535c:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
   15360:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
   15364:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
   15368:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
   1536c:	f240 1048 	movw	r0, #328	; 0x148
   15370:	f2c2 0000 	movt	r0, #8192	; 0x2000
   15374:	f000 f819 	bl	153aa <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>
   15378:	9000      	str	r0, [sp, #0]
   1537a:	e7ff      	b.n	1537c <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x28>
   1537c:	9800      	ldr	r0, [sp, #0]
   1537e:	f000 0001 	and.w	r0, r0, #1
   15382:	f240 5147 	movw	r1, #1351	; 0x547
   15386:	f2c0 0102 	movt	r1, #2
   1538a:	f240 5390 	movw	r3, #1424	; 0x590
   1538e:	f2c0 0302 	movt	r3, #2
   15392:	2210      	movs	r2, #16
   15394:	f7ff fdf9 	bl	14f8a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   15398:	e7ff      	b.n	1539a <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x46>
}
   1539a:	b008      	add	sp, #32
   1539c:	bd10      	pop	{r4, pc}

0001539e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>:
   1539e:	b580      	push	{r7, lr}
   153a0:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   153a4:	f008 fb66 	bl	1da74 <__aeabi_memcpy>
   153a8:	bd80      	pop	{r7, pc}

000153aa <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>:
    pub colors:   BlockColors,
}

/// Draw the pixels in the item as Pixel Blocks of contiguous Pixel Rows. The pixels are grouped by row then by block.
#[allow(dead_code)]
pub fn draw_blocks<SPI, DC, RST, T>(display: &mut ST7735<SPI, DC, RST>, item_pixels: T) -> Result<(),()>
   153aa:	b5b0      	push	{r4, r5, r7, lr}
   153ac:	f5ad 6d48 	sub.w	sp, sp, #3200	; 0xc80
   153b0:	f8cd 0c6c 	str.w	r0, [sp, #3180]	; 0xc6c
   153b4:	aa19      	add	r2, sp, #100	; 0x64
    SPI: spi::Write<u8>,
    DC: OutputPin,
    RST: OutputPin,
    T: IntoIterator<Item = Pixel<Rgb565>>, {
    //  Get the pixels for the item to be rendered.
    let pixels = item_pixels.into_iter();
   153b6:	4613      	mov	r3, r2
   153b8:	e8b1 5010 	ldmia.w	r1!, {r4, ip, lr}
   153bc:	e8a3 5010 	stmia.w	r3!, {r4, ip, lr}
   153c0:	e891 5030 	ldmia.w	r1, {r4, r5, ip, lr}
   153c4:	e883 5030 	stmia.w	r3, {r4, r5, ip, lr}
   153c8:	a910      	add	r1, sp, #64	; 0x40
   153ca:	900e      	str	r0, [sp, #56]	; 0x38
   153cc:	4608      	mov	r0, r1
   153ce:	4611      	mov	r1, r2
   153d0:	f000 fcaa 	bl	15d28 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>
   153d4:	e7ff      	b.n	153d6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x2c>
   153d6:	a810      	add	r0, sp, #64	; 0x40
   153d8:	a945      	add	r1, sp, #276	; 0x114
    //  Batch the pixels into Pixel Rows.
    let rows = to_rows(pixels);
   153da:	460a      	mov	r2, r1
   153dc:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
   153e0:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   153e4:	e890 5038 	ldmia.w	r0, {r3, r4, r5, ip, lr}
   153e8:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   153ec:	a820      	add	r0, sp, #128	; 0x80
   153ee:	f000 f8b7 	bl	15560 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>
   153f2:	e7ff      	b.n	153f4 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x4a>
   153f4:	a8a9      	add	r0, sp, #676	; 0x2a4
   153f6:	a920      	add	r1, sp, #128	; 0x80
   153f8:	2294      	movs	r2, #148	; 0x94
    //  Batch the Pixel Rows into Pixel Blocks.
    let blocks = to_blocks(rows);
   153fa:	900d      	str	r0, [sp, #52]	; 0x34
   153fc:	f008 fb3a 	bl	1da74 <__aeabi_memcpy>
   15400:	a84e      	add	r0, sp, #312	; 0x138
   15402:	990d      	ldr	r1, [sp, #52]	; 0x34
   15404:	f000 f8db 	bl	155be <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>
   15408:	e7ff      	b.n	1540a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x60>
   1540a:	f20d 40a4 	addw	r0, sp, #1188	; 0x4a4
   1540e:	a94e      	add	r1, sp, #312	; 0x138
   15410:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    //  For each Pixel Block...
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   15414:	900c      	str	r0, [sp, #48]	; 0x30
   15416:	f008 fb2d 	bl	1da74 <__aeabi_memcpy>
   1541a:	a8ce      	add	r0, sp, #824	; 0x338
   1541c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1541e:	f7ff ffbe 	bl	1539e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>
   15422:	e7ff      	b.n	15424 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x7a>
   15424:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
   15428:	a9ce      	add	r1, sp, #824	; 0x338
   1542a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   1542e:	f008 fb21 	bl	1da74 <__aeabi_memcpy>
   15432:	e7ff      	b.n	15434 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
   15434:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   15438:	f50d 61c2 	add.w	r1, sp, #1552	; 0x610
   1543c:	f000 fa2c 	bl	15898 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>
   15440:	e7ff      	b.n	15442 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x98>
   15442:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   15446:	2800      	cmp	r0, #0
   15448:	d001      	beq.n	1544e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa4>
   1544a:	e7ff      	b.n	1544c <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa2>
   1544c:	e005      	b.n	1545a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xb0>
   1544e:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   15452:	f7f5 faf7 	bl	aa44 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   15456:	e01c      	b.n	15492 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xe8>
   15458:	defe      	udf	#254	; 0xfe
   1545a:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   1545e:	1d01      	adds	r1, r0, #4
   15460:	f60d 1028 	addw	r0, sp, #2344	; 0x928
   15464:	22d4      	movs	r2, #212	; 0xd4
   15466:	900b      	str	r0, [sp, #44]	; 0x2c
   15468:	920a      	str	r2, [sp, #40]	; 0x28
   1546a:	f008 fb03 	bl	1da74 <__aeabi_memcpy>
   1546e:	f60d 10fc 	addw	r0, sp, #2556	; 0x9fc
   15472:	9009      	str	r0, [sp, #36]	; 0x24
   15474:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15476:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15478:	f008 fafc 	bl	1da74 <__aeabi_memcpy>
   1547c:	f20d 707c 	addw	r0, sp, #1916	; 0x77c
   15480:	9909      	ldr	r1, [sp, #36]	; 0x24
   15482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15484:	f008 faf6 	bl	1da74 <__aeabi_memcpy>
   15488:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   1548c:	2801      	cmp	r0, #1
   1548e:	d02c      	beq.n	154ea <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>
   15490:	e061      	b.n	15556 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x1ac>
   15492:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
        //  Dump out the Pixel Blocks for the square in test_display()
        /* if x_left >= 60 && x_left <= 150 && x_right >= 60 && x_right <= 150 && y_top >= 60 && y_top <= 150 && y_bottom >= 60 && y_bottom <= 150 {
            console::print("pixel block ("); console::printint(x_left as i32); console::print(", "); console::printint(y_top as i32); ////
            console::print("), ("); console::printint(x_right as i32); console::print(", "); console::printint(y_bottom as i32); console::print(")\n"); ////    
        } */
    }
   15496:	f7f5 fab2 	bl	a9fe <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   1549a:	e022      	b.n	154e2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x138>
        display.set_pixels(
   1549c:	f89d 0b9f 	ldrb.w	r0, [sp, #2975]	; 0xb9f
   154a0:	f7f3 fc47 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   154a4:	f88d 0b9e 	strb.w	r0, [sp, #2974]	; 0xb9e
   154a8:	e7ff      	b.n	154aa <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x100>
            colors) ? ;
   154aa:	f89d 0b9e 	ldrb.w	r0, [sp, #2974]	; 0xb9e
   154ae:	07c1      	lsls	r1, r0, #31
   154b0:	2900      	cmp	r1, #0
   154b2:	d001      	beq.n	154b8 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10e>
   154b4:	e7ff      	b.n	154b6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10c>
   154b6:	e001      	b.n	154bc <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x112>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   154b8:	e7bc      	b.n	15434 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
        display.set_pixels(
   154ba:	defe      	udf	#254	; 0xfe
            colors) ? ;
   154bc:	f7fc fc60 	bl	11d80 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   154c0:	e004      	b.n	154cc <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x122>
    Ok(())
}
   154c2:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   154c6:	f50d 6d48 	add.w	sp, sp, #3200	; 0xc80
   154ca:	bdb0      	pop	{r4, r5, r7, pc}
            colors) ? ;
   154cc:	f7ff feaa 	bl	15224 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   154d0:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   154d4:	e7ff      	b.n	154d6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x12c>
   154d6:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
    }
   154da:	f7f5 fa90 	bl	a9fe <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   154de:	e7ff      	b.n	154e0 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x136>
}
   154e0:	e7ef      	b.n	154c2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
   154e2:	2000      	movs	r0, #0
    Ok(())
   154e4:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
}
   154e8:	e7eb      	b.n	154c2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   154ea:	f8bd 0848 	ldrh.w	r0, [sp, #2120]	; 0x848
   154ee:	f8ad 0c78 	strh.w	r0, [sp, #3192]	; 0xc78
   154f2:	f8bd 184a 	ldrh.w	r1, [sp, #2122]	; 0x84a
   154f6:	f8ad 1c7a 	strh.w	r1, [sp, #3194]	; 0xc7a
   154fa:	f8bd 284c 	ldrh.w	r2, [sp, #2124]	; 0x84c
   154fe:	f8ad 2c7c 	strh.w	r2, [sp, #3196]	; 0xc7c
   15502:	f8bd 384e 	ldrh.w	r3, [sp, #2126]	; 0x84e
   15506:	f8ad 3c7e 	strh.w	r3, [sp, #3198]	; 0xc7e
   1550a:	f50d 6c2d 	add.w	ip, sp, #2768	; 0xad0
   1550e:	f20d 7e7c 	addw	lr, sp, #1916	; 0x77c
   15512:	24cc      	movs	r4, #204	; 0xcc
   15514:	9008      	str	r0, [sp, #32]
   15516:	4660      	mov	r0, ip
   15518:	9107      	str	r1, [sp, #28]
   1551a:	4671      	mov	r1, lr
   1551c:	9206      	str	r2, [sp, #24]
   1551e:	4622      	mov	r2, r4
   15520:	9305      	str	r3, [sp, #20]
   15522:	f8cd c010 	str.w	ip, [sp, #16]
   15526:	9403      	str	r4, [sp, #12]
   15528:	f008 faa4 	bl	1da74 <__aeabi_memcpy>
   1552c:	f50d 603a 	add.w	r0, sp, #2976	; 0xba0
            colors) ? ;
   15530:	9002      	str	r0, [sp, #8]
   15532:	9904      	ldr	r1, [sp, #16]
   15534:	9a03      	ldr	r2, [sp, #12]
   15536:	f008 fa9d 	bl	1da74 <__aeabi_memcpy>
        display.set_pixels(
   1553a:	4668      	mov	r0, sp
   1553c:	9902      	ldr	r1, [sp, #8]
   1553e:	6041      	str	r1, [r0, #4]
   15540:	9a05      	ldr	r2, [sp, #20]
   15542:	6002      	str	r2, [r0, #0]
   15544:	980e      	ldr	r0, [sp, #56]	; 0x38
   15546:	9908      	ldr	r1, [sp, #32]
   15548:	9a06      	ldr	r2, [sp, #24]
   1554a:	9b07      	ldr	r3, [sp, #28]
   1554c:	f7f4 faa4 	bl	9a98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>
   15550:	f88d 0b9f 	strb.w	r0, [sp, #2975]	; 0xb9f
   15554:	e7a2      	b.n	1549c <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xf2>
   15556:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   1555a:	f7f5 fa73 	bl	aa44 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   1555e:	e7c4      	b.n	154ea <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>

00015560 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>:

/// Batch the pixels into Pixel Rows, which are contiguous pixels on the same row.
/// P can be any Pixel Iterator (e.g. a rectangle).
fn to_rows<P>(pixels: P) -> RowIterator<P>
   15560:	b5b0      	push	{r4, r5, r7, lr}
   15562:	b0a4      	sub	sp, #144	; 0x90
   15564:	aa01      	add	r2, sp, #4
where
    P: Iterator<Item = Pixel<Rgb565>>, {
    RowIterator::<P> {
        pixels,
   15566:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
   1556a:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   1556e:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
   15572:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   15576:	a90a      	add	r1, sp, #40	; 0x28
        x_left: 0,
        x_right: 0,
        y: 0,
        colors: RowColors::new(),
   15578:	9000      	str	r0, [sp, #0]
   1557a:	4608      	mov	r0, r1
   1557c:	f7ff f93a 	bl	147f4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>
   15580:	e7ff      	b.n	15582 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E+0x22>
   15582:	a801      	add	r0, sp, #4
    RowIterator::<P> {
   15584:	9900      	ldr	r1, [sp, #0]
   15586:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
   1558a:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
   1558e:	e890 501c 	ldmia.w	r0, {r2, r3, r4, ip, lr}
   15592:	e881 501c 	stmia.w	r1, {r2, r3, r4, ip, lr}
   15596:	2000      	movs	r0, #0
   15598:	9900      	ldr	r1, [sp, #0]
   1559a:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
   1559e:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
   155a2:	f8a1 0090 	strh.w	r0, [r1, #144]	; 0x90
   155a6:	f101 0024 	add.w	r0, r1, #36	; 0x24
   155aa:	a90a      	add	r1, sp, #40	; 0x28
   155ac:	2268      	movs	r2, #104	; 0x68
   155ae:	f008 fa61 	bl	1da74 <__aeabi_memcpy>
   155b2:	2001      	movs	r0, #1
   155b4:	9900      	ldr	r1, [sp, #0]
   155b6:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
        first_pixel: true,
    }
}
   155ba:	b024      	add	sp, #144	; 0x90
   155bc:	bdb0      	pop	{r4, r5, r7, pc}

000155be <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>:

/// Batch the Pixel Rows into Pixel Blocks, which are contiguous Pixel Rows with the same start and end column number
/// R can be any Pixel Row Iterator.
fn to_blocks<R>(rows: R) -> BlockIterator<R>
   155be:	b580      	push	{r7, lr}
   155c0:	b0da      	sub	sp, #360	; 0x168
   155c2:	aa02      	add	r2, sp, #8
   155c4:	2394      	movs	r3, #148	; 0x94
where
    R: Iterator<Item = PixelRow>, {
    BlockIterator::<R> {
        rows,
   155c6:	9001      	str	r0, [sp, #4]
   155c8:	4610      	mov	r0, r2
   155ca:	461a      	mov	r2, r3
   155cc:	f008 fa52 	bl	1da74 <__aeabi_memcpy>
   155d0:	a827      	add	r0, sp, #156	; 0x9c
        x_left: 0,
        x_right: 0,
        y_top: 0,
        y_bottom: 0,
        colors: BlockColors::new(),
   155d2:	f7ff f91e 	bl	14812 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>
   155d6:	e7ff      	b.n	155d8 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E+0x1a>
   155d8:	a902      	add	r1, sp, #8
   155da:	2294      	movs	r2, #148	; 0x94
    BlockIterator::<R> {
   155dc:	9801      	ldr	r0, [sp, #4]
   155de:	f008 fa49 	bl	1da74 <__aeabi_memcpy>
   155e2:	2000      	movs	r0, #0
   155e4:	9901      	ldr	r1, [sp, #4]
   155e6:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
   155ea:	f8a1 0162 	strh.w	r0, [r1, #354]	; 0x162
   155ee:	f8a1 0164 	strh.w	r0, [r1, #356]	; 0x164
   155f2:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
   155f6:	f101 0094 	add.w	r0, r1, #148	; 0x94
   155fa:	a927      	add	r1, sp, #156	; 0x9c
   155fc:	22cc      	movs	r2, #204	; 0xcc
   155fe:	f008 fa39 	bl	1da74 <__aeabi_memcpy>
   15602:	2001      	movs	r0, #1
   15604:	9901      	ldr	r1, [sp, #4]
   15606:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
        first_row: true,
    }
}    
   1560a:	b05a      	add	sp, #360	; 0x168
   1560c:	bd80      	pop	{r7, pc}

0001560e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>:
impl<P: Iterator<Item = Pixel<Rgb565>>> Iterator for RowIterator<P> {
    /// This Iterator returns Pixel Rows
    type Item = PixelRow;

    /// Return the next Pixel Row of contiguous pixels on the same row
    fn next(&mut self) -> Option<Self::Item> {
   1560e:	b580      	push	{r7, lr}
   15610:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
   15614:	91c1      	str	r1, [sp, #772]	; 0x304
        //  Loop over all pixels until we have composed a Pixel Row, or we have run out of pixels.
        loop {
   15616:	9116      	str	r1, [sp, #88]	; 0x58
   15618:	9015      	str	r0, [sp, #84]	; 0x54
   1561a:	e7ff      	b.n	1561c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   1561c:	a817      	add	r0, sp, #92	; 0x5c
            //  Get the next pixel.
            let next_pixel = self.pixels.next();
   1561e:	9916      	ldr	r1, [sp, #88]	; 0x58
   15620:	f000 fbdd 	bl	15dde <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>
   15624:	e7ff      	b.n	15626 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x18>
            match next_pixel {
                None => {  //  If no more pixels...
   15626:	9817      	ldr	r0, [sp, #92]	; 0x5c
   15628:	2800      	cmp	r0, #0
   1562a:	d01c      	beq.n	15666 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x58>
   1562c:	e7ff      	b.n	1562e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x20>
                    };
                    self.colors.clear();
                    self.first_pixel = true;
                    return Some(row);
                }
                Some(Pixel(coord, color)) => {  //  If there is a pixel...
   1562e:	9818      	ldr	r0, [sp, #96]	; 0x60
   15630:	9919      	ldr	r1, [sp, #100]	; 0x64
   15632:	90c2      	str	r0, [sp, #776]	; 0x308
   15634:	91c3      	str	r1, [sp, #780]	; 0x30c
   15636:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   1563a:	4613      	mov	r3, r2
   1563c:	f8ad 2310 	strh.w	r2, [sp, #784]	; 0x310
                    let x = coord.0 as u16;
   15640:	f8ad 0312 	strh.w	r0, [sp, #786]	; 0x312
                    let y = coord.1 as u16;
   15644:	f8ad 1314 	strh.w	r1, [sp, #788]	; 0x314
                    let color = color.0;
   15648:	f8ad 2316 	strh.w	r2, [sp, #790]	; 0x316
                    //  Save the first pixel as the row start and handle next pixel.
                    if self.first_pixel {
   1564c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1564e:	f892 c092 	ldrb.w	ip, [r2, #146]	; 0x92
   15652:	ea4f 7ccc 	mov.w	ip, ip, lsl #31
   15656:	f1bc 0f00 	cmp.w	ip, #0
   1565a:	9014      	str	r0, [sp, #80]	; 0x50
   1565c:	9113      	str	r1, [sp, #76]	; 0x4c
   1565e:	9312      	str	r3, [sp, #72]	; 0x48
   15660:	d156      	bne.n	15710 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x102>
   15662:	e04a      	b.n	156fa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xec>
            match next_pixel {
   15664:	defe      	udf	#254	; 0xfe
                    if self.first_pixel {
   15666:	9816      	ldr	r0, [sp, #88]	; 0x58
   15668:	f890 1092 	ldrb.w	r1, [r0, #146]	; 0x92
   1566c:	07c9      	lsls	r1, r1, #31
   1566e:	2900      	cmp	r1, #0
   15670:	d111      	bne.n	15696 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x88>
   15672:	e7ff      	b.n	15674 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x66>
                        x_left: self.x_left,
   15674:	9816      	ldr	r0, [sp, #88]	; 0x58
   15676:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   1567a:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   1567e:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   15682:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   15686:	a837      	add	r0, sp, #220	; 0xdc
   15688:	9111      	str	r1, [sp, #68]	; 0x44
   1568a:	4661      	mov	r1, ip
   1568c:	9210      	str	r2, [sp, #64]	; 0x40
   1568e:	930f      	str	r3, [sp, #60]	; 0x3c
   15690:	f7ff f819 	bl	146c6 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   15694:	e006      	b.n	156a4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x96>
   15696:	2000      	movs	r0, #0
                        return None;  //  No pixels to group
   15698:	9915      	ldr	r1, [sp, #84]	; 0x54
   1569a:	6008      	str	r0, [r1, #0]
   1569c:	e7ff      	b.n	1569e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                        .expect("never");
                    return Some(row);
                }
            }
        }
    }
   1569e:	f50d 7d46 	add.w	sp, sp, #792	; 0x318
   156a2:	bd80      	pop	{r7, pc}
                    let row = PixelRow {
   156a4:	9811      	ldr	r0, [sp, #68]	; 0x44
   156a6:	f8ad 00d4 	strh.w	r0, [sp, #212]	; 0xd4
   156aa:	9910      	ldr	r1, [sp, #64]	; 0x40
   156ac:	f8ad 10d6 	strh.w	r1, [sp, #214]	; 0xd6
   156b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   156b2:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
   156b6:	a81b      	add	r0, sp, #108	; 0x6c
   156b8:	a937      	add	r1, sp, #220	; 0xdc
   156ba:	2268      	movs	r2, #104	; 0x68
   156bc:	f008 f9da 	bl	1da74 <__aeabi_memcpy>
                    self.colors.clear();
   156c0:	9816      	ldr	r0, [sp, #88]	; 0x58
   156c2:	3024      	adds	r0, #36	; 0x24
   156c4:	f7ff f8c4 	bl	14850 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   156c8:	e7ff      	b.n	156ca <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xbc>
   156ca:	2001      	movs	r0, #1
                    self.first_pixel = true;
   156cc:	9916      	ldr	r1, [sp, #88]	; 0x58
   156ce:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
   156d2:	aa51      	add	r2, sp, #324	; 0x144
   156d4:	a91b      	add	r1, sp, #108	; 0x6c
   156d6:	2370      	movs	r3, #112	; 0x70
                    return Some(row);
   156d8:	900e      	str	r0, [sp, #56]	; 0x38
   156da:	4610      	mov	r0, r2
   156dc:	920d      	str	r2, [sp, #52]	; 0x34
   156de:	461a      	mov	r2, r3
   156e0:	930c      	str	r3, [sp, #48]	; 0x30
   156e2:	f008 f9c7 	bl	1da74 <__aeabi_memcpy>
   156e6:	9815      	ldr	r0, [sp, #84]	; 0x54
   156e8:	3004      	adds	r0, #4
   156ea:	990d      	ldr	r1, [sp, #52]	; 0x34
   156ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   156ee:	f008 f9c1 	bl	1da74 <__aeabi_memcpy>
   156f2:	980e      	ldr	r0, [sp, #56]	; 0x38
   156f4:	9915      	ldr	r1, [sp, #84]	; 0x54
   156f6:	6008      	str	r0, [r1, #0]
   156f8:	e7d1      	b.n	1569e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   156fa:	9816      	ldr	r0, [sp, #88]	; 0x58
   156fc:	f8b0 108e 	ldrh.w	r1, [r0, #142]	; 0x8e
   15700:	3101      	adds	r1, #1
   15702:	b28a      	uxth	r2, r1
   15704:	460b      	mov	r3, r1
   15706:	428a      	cmp	r2, r1
   15708:	930b      	str	r3, [sp, #44]	; 0x2c
   1570a:	f040 80b9 	bne.w	15880 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x272>
   1570e:	e040      	b.n	15792 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x184>
   15710:	2000      	movs	r0, #0
                        self.first_pixel = false;
   15712:	9916      	ldr	r1, [sp, #88]	; 0x58
   15714:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
                        self.x_left = x;
   15718:	9814      	ldr	r0, [sp, #80]	; 0x50
   1571a:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                        self.x_right = x;
   1571e:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                        self.y = y;
   15722:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15724:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                        self.colors.clear();
   15728:	f101 0024 	add.w	r0, r1, #36	; 0x24
   1572c:	f7ff f890 	bl	14850 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   15730:	e7ff      	b.n	15732 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x124>
                        self.colors.push(color)
   15732:	9816      	ldr	r0, [sp, #88]	; 0x58
   15734:	3024      	adds	r0, #36	; 0x24
   15736:	9912      	ldr	r1, [sp, #72]	; 0x48
   15738:	f7ff f87a 	bl	14830 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   1573c:	900a      	str	r0, [sp, #40]	; 0x28
   1573e:	9109      	str	r1, [sp, #36]	; 0x24
   15740:	e7ff      	b.n	15742 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x134>
   15742:	f240 50dc 	movw	r0, #1500	; 0x5dc
   15746:	f2c0 0002 	movt	r0, #2
   1574a:	4669      	mov	r1, sp
   1574c:	6008      	str	r0, [r1, #0]
   1574e:	f240 52a0 	movw	r2, #1440	; 0x5a0
   15752:	f2c0 0202 	movt	r2, #2
   15756:	2305      	movs	r3, #5
   15758:	980a      	ldr	r0, [sp, #40]	; 0x28
   1575a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1575c:	f7ff fbe4 	bl	14f28 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   15760:	e7ff      	b.n	15762 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x154>
                        continue;
   15762:	e7ff      	b.n	15764 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
   15764:	e75a      	b.n	1561c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   15766:	2001      	movs	r0, #1
                    if x == self.x_right + 1 && y == self.y {
   15768:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   1576c:	e00b      	b.n	15786 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   1576e:	2000      	movs	r0, #0
   15770:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   15774:	e007      	b.n	15786 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   15776:	9816      	ldr	r0, [sp, #88]	; 0x58
   15778:	f8b0 1090 	ldrh.w	r1, [r0, #144]	; 0x90
   1577c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1577e:	b293      	uxth	r3, r2
   15780:	428b      	cmp	r3, r1
   15782:	d0f0      	beq.n	15766 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x158>
   15784:	e7f3      	b.n	1576e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
   15786:	f89d 01b7 	ldrb.w	r0, [sp, #439]	; 0x1b7
   1578a:	07c0      	lsls	r0, r0, #31
   1578c:	2800      	cmp	r0, #0
   1578e:	d107      	bne.n	157a0 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x192>
   15790:	e020      	b.n	157d4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
   15792:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15794:	b281      	uxth	r1, r0
   15796:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15798:	b293      	uxth	r3, r2
   1579a:	428b      	cmp	r3, r1
   1579c:	d0eb      	beq.n	15776 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x168>
   1579e:	e7e6      	b.n	1576e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
                        if self.colors.push(color).is_ok() {
   157a0:	9816      	ldr	r0, [sp, #88]	; 0x58
   157a2:	3024      	adds	r0, #36	; 0x24
   157a4:	9912      	ldr	r1, [sp, #72]	; 0x48
   157a6:	f7ff f843 	bl	14830 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   157aa:	f8ad 11ba 	strh.w	r1, [sp, #442]	; 0x1ba
   157ae:	f8ad 01b8 	strh.w	r0, [sp, #440]	; 0x1b8
   157b2:	e7ff      	b.n	157b4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1a6>
   157b4:	a86e      	add	r0, sp, #440	; 0x1b8
   157b6:	f7ff fb92 	bl	14ede <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>
   157ba:	9008      	str	r0, [sp, #32]
   157bc:	e7ff      	b.n	157be <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1b0>
   157be:	9808      	ldr	r0, [sp, #32]
   157c0:	07c1      	lsls	r1, r0, #31
   157c2:	2900      	cmp	r1, #0
   157c4:	d101      	bne.n	157ca <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1bc>
   157c6:	e7ff      	b.n	157c8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1ba>
                    if x == self.x_right + 1 && y == self.y {
   157c8:	e004      	b.n	157d4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
                            self.x_right = x;
   157ca:	9814      	ldr	r0, [sp, #80]	; 0x50
   157cc:	9916      	ldr	r1, [sp, #88]	; 0x58
   157ce:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                            continue;
   157d2:	e7c7      	b.n	15764 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
                        x_left: self.x_left,
   157d4:	9816      	ldr	r0, [sp, #88]	; 0x58
   157d6:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   157da:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   157de:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   157e2:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   157e6:	a88b      	add	r0, sp, #556	; 0x22c
   157e8:	9107      	str	r1, [sp, #28]
   157ea:	4661      	mov	r1, ip
   157ec:	9206      	str	r2, [sp, #24]
   157ee:	9305      	str	r3, [sp, #20]
   157f0:	f7fe ff69 	bl	146c6 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   157f4:	e7ff      	b.n	157f6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1e8>
                    let row = PixelRow {
   157f6:	9807      	ldr	r0, [sp, #28]
   157f8:	f8ad 0224 	strh.w	r0, [sp, #548]	; 0x224
   157fc:	9906      	ldr	r1, [sp, #24]
   157fe:	f8ad 1226 	strh.w	r1, [sp, #550]	; 0x226
   15802:	9a05      	ldr	r2, [sp, #20]
   15804:	f8ad 2228 	strh.w	r2, [sp, #552]	; 0x228
   15808:	a86f      	add	r0, sp, #444	; 0x1bc
   1580a:	a98b      	add	r1, sp, #556	; 0x22c
   1580c:	2268      	movs	r2, #104	; 0x68
   1580e:	f008 f931 	bl	1da74 <__aeabi_memcpy>
                    self.x_left = x;
   15812:	9814      	ldr	r0, [sp, #80]	; 0x50
   15814:	9916      	ldr	r1, [sp, #88]	; 0x58
   15816:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                    self.x_right = x;
   1581a:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                    self.y = y;
   1581e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15820:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                    self.colors.clear();
   15824:	f101 0024 	add.w	r0, r1, #36	; 0x24
   15828:	f7ff f812 	bl	14850 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   1582c:	e7ff      	b.n	1582e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x220>
                    self.colors.push(color)
   1582e:	9816      	ldr	r0, [sp, #88]	; 0x58
   15830:	3024      	adds	r0, #36	; 0x24
   15832:	9912      	ldr	r1, [sp, #72]	; 0x48
   15834:	f7fe fffc 	bl	14830 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   15838:	9004      	str	r0, [sp, #16]
   1583a:	9103      	str	r1, [sp, #12]
   1583c:	e7ff      	b.n	1583e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x230>
   1583e:	f240 601c 	movw	r0, #1564	; 0x61c
   15842:	f2c0 0002 	movt	r0, #2
   15846:	4669      	mov	r1, sp
   15848:	6008      	str	r0, [r1, #0]
   1584a:	f240 52a0 	movw	r2, #1440	; 0x5a0
   1584e:	f2c0 0202 	movt	r2, #2
   15852:	2305      	movs	r3, #5
   15854:	9804      	ldr	r0, [sp, #16]
   15856:	9903      	ldr	r1, [sp, #12]
   15858:	f7ff fb66 	bl	14f28 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   1585c:	e7ff      	b.n	1585e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x250>
   1585e:	a8a5      	add	r0, sp, #660	; 0x294
   15860:	a96f      	add	r1, sp, #444	; 0x1bc
   15862:	2270      	movs	r2, #112	; 0x70
                    return Some(row);
   15864:	9002      	str	r0, [sp, #8]
   15866:	9201      	str	r2, [sp, #4]
   15868:	f008 f904 	bl	1da74 <__aeabi_memcpy>
   1586c:	9815      	ldr	r0, [sp, #84]	; 0x54
   1586e:	3004      	adds	r0, #4
   15870:	9902      	ldr	r1, [sp, #8]
   15872:	9a01      	ldr	r2, [sp, #4]
   15874:	f008 f8fe 	bl	1da74 <__aeabi_memcpy>
   15878:	2001      	movs	r0, #1
   1587a:	9915      	ldr	r1, [sp, #84]	; 0x54
   1587c:	6008      	str	r0, [r1, #0]
   1587e:	e70e      	b.n	1569e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   15880:	f240 6000 	movw	r0, #1536	; 0x600
   15884:	f2c0 0002 	movt	r0, #2
   15888:	f240 52ec 	movw	r2, #1516	; 0x5ec
   1588c:	f2c0 0202 	movt	r2, #2
   15890:	211c      	movs	r1, #28
   15892:	f001 fd1b 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15896:	defe      	udf	#254	; 0xfe

00015898 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>:
impl<R: Iterator<Item = PixelRow>> Iterator for BlockIterator<R> {
    /// This Iterator returns Pixel Blocks
    type Item = PixelBlock;

    /// Return the next Pixel Block of contiguous Pixel Rows with the same start and end column number
    fn next(&mut self) -> Option<Self::Item> {
   15898:	b580      	push	{r7, lr}
   1589a:	f5ad 6dcb 	sub.w	sp, sp, #1624	; 0x658
   1589e:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c
   158a2:	2200      	movs	r2, #0
        //  Loop over all Pixel Rows until we have composed a Pixel Block, or we have run out of Pixel Rows.
        loop {
   158a4:	f88d 264b 	strb.w	r2, [sp, #1611]	; 0x64b
   158a8:	911f      	str	r1, [sp, #124]	; 0x7c
   158aa:	901e      	str	r0, [sp, #120]	; 0x78
   158ac:	e7ff      	b.n	158ae <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   158ae:	2001      	movs	r0, #1
            //  Get the next Pixel Row.
            let next_row = self.rows.next();
   158b0:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   158b4:	a820      	add	r0, sp, #128	; 0x80
   158b6:	991f      	ldr	r1, [sp, #124]	; 0x7c
   158b8:	f7ff fea9 	bl	1560e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>
   158bc:	e7ff      	b.n	158be <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x26>
            match next_row {
                None => {  //  If no more Pixel Rows...
   158be:	9820      	ldr	r0, [sp, #128]	; 0x80
   158c0:	2800      	cmp	r0, #0
   158c2:	d026      	beq.n	15912 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x7a>
   158c4:	e7ff      	b.n	158c6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e>
   158c6:	a820      	add	r0, sp, #128	; 0x80
                    };
                    self.colors.clear();
                    self.first_row = true;
                    return Some(row);
                }
                Some(PixelRow { x_left, x_right, y, colors, .. }) => {  //  If there is a Pixel Row...
   158c8:	1d01      	adds	r1, r0, #4
   158ca:	f8bd 00ec 	ldrh.w	r0, [sp, #236]	; 0xec
   158ce:	4602      	mov	r2, r0
   158d0:	f8ad 0652 	strh.w	r0, [sp, #1618]	; 0x652
   158d4:	f8bd 00ee 	ldrh.w	r0, [sp, #238]	; 0xee
   158d8:	4603      	mov	r3, r0
   158da:	f8ad 0654 	strh.w	r0, [sp, #1620]	; 0x654
   158de:	f8bd 00f0 	ldrh.w	r0, [sp, #240]	; 0xf0
   158e2:	4684      	mov	ip, r0
   158e4:	f8ad 0656 	strh.w	r0, [sp, #1622]	; 0x656
   158e8:	2000      	movs	r0, #0
   158ea:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   158ee:	a8da      	add	r0, sp, #872	; 0x368
   158f0:	f04f 0e68 	mov.w	lr, #104	; 0x68
   158f4:	921d      	str	r2, [sp, #116]	; 0x74
   158f6:	4672      	mov	r2, lr
   158f8:	931c      	str	r3, [sp, #112]	; 0x70
   158fa:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   158fe:	f008 f8b9 	bl	1da74 <__aeabi_memcpy>
                    //  Save the first row as the block start and handle next block.
                    if self.first_row {
   15902:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15904:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   15908:	07c9      	lsls	r1, r1, #31
   1590a:	2900      	cmp	r1, #0
   1590c:	d15a      	bne.n	159c4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x12c>
   1590e:	e04e      	b.n	159ae <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x116>
            match next_row {
   15910:	defe      	udf	#254	; 0xfe
                    if self.first_row {
   15912:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15914:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   15918:	07c9      	lsls	r1, r1, #31
   1591a:	2900      	cmp	r1, #0
   1591c:	d115      	bne.n	1594a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xb2>
   1591e:	e7ff      	b.n	15920 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x88>
                        x_left: self.x_left,
   15920:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15922:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   15926:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   1592a:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   1592e:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   15932:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   15936:	a872      	add	r0, sp, #456	; 0x1c8
   15938:	911a      	str	r1, [sp, #104]	; 0x68
   1593a:	4671      	mov	r1, lr
   1593c:	9219      	str	r2, [sp, #100]	; 0x64
   1593e:	9318      	str	r3, [sp, #96]	; 0x60
   15940:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
   15944:	f7fe fecf 	bl	146e6 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   15948:	e003      	b.n	15952 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xba>
   1594a:	2000      	movs	r0, #0
                        return None;  //  No rows to group
   1594c:	991e      	ldr	r1, [sp, #120]	; 0x78
   1594e:	6008      	str	r0, [r1, #0]
   15950:	e153      	b.n	15bfa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                    let row = PixelBlock {
   15952:	981a      	ldr	r0, [sp, #104]	; 0x68
   15954:	f8ad 01c0 	strh.w	r0, [sp, #448]	; 0x1c0
   15958:	9919      	ldr	r1, [sp, #100]	; 0x64
   1595a:	f8ad 11c2 	strh.w	r1, [sp, #450]	; 0x1c2
   1595e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   15960:	f8ad 21c4 	strh.w	r2, [sp, #452]	; 0x1c4
   15964:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15966:	f8ad 31c6 	strh.w	r3, [sp, #454]	; 0x1c6
   1596a:	a83d      	add	r0, sp, #244	; 0xf4
   1596c:	a972      	add	r1, sp, #456	; 0x1c8
   1596e:	22cc      	movs	r2, #204	; 0xcc
   15970:	f008 f880 	bl	1da74 <__aeabi_memcpy>
                    self.colors.clear();
   15974:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15976:	3094      	adds	r0, #148	; 0x94
   15978:	f7fe ff72 	bl	14860 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   1597c:	e7ff      	b.n	1597e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xe6>
   1597e:	2001      	movs	r0, #1
                    self.first_row = true;
   15980:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15982:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
   15986:	aaa5      	add	r2, sp, #660	; 0x294
   15988:	a93d      	add	r1, sp, #244	; 0xf4
   1598a:	23d4      	movs	r3, #212	; 0xd4
                    return Some(row);
   1598c:	9016      	str	r0, [sp, #88]	; 0x58
   1598e:	4610      	mov	r0, r2
   15990:	9215      	str	r2, [sp, #84]	; 0x54
   15992:	461a      	mov	r2, r3
   15994:	9314      	str	r3, [sp, #80]	; 0x50
   15996:	f008 f86d 	bl	1da74 <__aeabi_memcpy>
   1599a:	981e      	ldr	r0, [sp, #120]	; 0x78
   1599c:	3004      	adds	r0, #4
   1599e:	9915      	ldr	r1, [sp, #84]	; 0x54
   159a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   159a2:	f008 f867 	bl	1da74 <__aeabi_memcpy>
   159a6:	9816      	ldr	r0, [sp, #88]	; 0x58
   159a8:	991e      	ldr	r1, [sp, #120]	; 0x78
   159aa:	6008      	str	r0, [r1, #0]
   159ac:	e125      	b.n	15bfa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                        self.colors.extend_from_slice(&colors)
                            .expect("never");
                        continue;
                    }
                    //  If this row is adjacent to the previous row and same size, add to the block.
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   159ae:	981f      	ldr	r0, [sp, #124]	; 0x7c
   159b0:	f8b0 1166 	ldrh.w	r1, [r0, #358]	; 0x166
   159b4:	3101      	adds	r1, #1
   159b6:	b28a      	uxth	r2, r1
   159b8:	460b      	mov	r3, r1
   159ba:	428a      	cmp	r2, r1
   159bc:	9313      	str	r3, [sp, #76]	; 0x4c
   159be:	f040 8128 	bne.w	15c12 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x37a>
   159c2:	e069      	b.n	15a98 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x200>
   159c4:	2000      	movs	r0, #0
                        self.first_row = false;
   159c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
   159c8:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
                        self.x_left = x_left;
   159cc:	981d      	ldr	r0, [sp, #116]	; 0x74
   159ce:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                        self.x_right = x_right;
   159d2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   159d4:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                        self.y_top = y;
   159d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   159da:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                        self.y_bottom = y;
   159de:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                        self.colors.clear();
   159e2:	f101 0094 	add.w	r0, r1, #148	; 0x94
   159e6:	f7fe ff3b 	bl	14860 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   159ea:	e7ff      	b.n	159ec <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x154>
                        self.colors.extend_from_slice(&colors)
   159ec:	981f      	ldr	r0, [sp, #124]	; 0x7c
   159ee:	f100 0194 	add.w	r1, r0, #148	; 0x94
   159f2:	a8da      	add	r0, sp, #872	; 0x368
   159f4:	9112      	str	r1, [sp, #72]	; 0x48
   159f6:	f7fe fea6 	bl	14746 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   159fa:	9011      	str	r0, [sp, #68]	; 0x44
   159fc:	9110      	str	r1, [sp, #64]	; 0x40
   159fe:	e7ff      	b.n	15a00 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x168>
   15a00:	9812      	ldr	r0, [sp, #72]	; 0x48
   15a02:	9911      	ldr	r1, [sp, #68]	; 0x44
   15a04:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15a06:	f7fe fee7 	bl	147d8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   15a0a:	900f      	str	r0, [sp, #60]	; 0x3c
   15a0c:	e7ff      	b.n	15a0e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x176>
   15a0e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15a10:	f000 0001 	and.w	r0, r0, #1
   15a14:	f240 51a0 	movw	r1, #1440	; 0x5a0
   15a18:	f2c0 0102 	movt	r1, #2
   15a1c:	f240 632c 	movw	r3, #1580	; 0x62c
   15a20:	f2c0 0302 	movt	r3, #2
   15a24:	2205      	movs	r2, #5
   15a26:	f7ff fab0 	bl	14f8a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   15a2a:	e7ff      	b.n	15a2c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x194>
                        continue;
   15a2c:	e7ff      	b.n	15a2e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
   15a2e:	a8da      	add	r0, sp, #872	; 0x368
                    self.colors.clear();
                    self.colors.extend_from_slice(&colors)
                        .expect("never");
                    return Some(row);
                }
            }
   15a30:	f7f5 f800 	bl	aa34 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   15a34:	e7ff      	b.n	15a36 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x19e>
        }
   15a36:	9820      	ldr	r0, [sp, #128]	; 0x80
   15a38:	2801      	cmp	r0, #1
   15a3a:	f000 80e2 	beq.w	15c02 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
   15a3e:	e0e4      	b.n	15c0a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x372>
   15a40:	2001      	movs	r0, #1
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15a42:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   15a46:	e00b      	b.n	15a60 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   15a48:	2000      	movs	r0, #0
   15a4a:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   15a4e:	e007      	b.n	15a60 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   15a50:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15a52:	f8b0 1162 	ldrh.w	r1, [r0, #354]	; 0x162
   15a56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15a58:	b293      	uxth	r3, r2
   15a5a:	428b      	cmp	r3, r1
   15a5c:	d0f0      	beq.n	15a40 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1a8>
   15a5e:	e7f3      	b.n	15a48 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   15a60:	f89d 03d1 	ldrb.w	r0, [sp, #977]	; 0x3d1
   15a64:	07c0      	lsls	r0, r0, #31
   15a66:	2800      	cmp	r0, #0
   15a68:	d11d      	bne.n	15aa6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x20e>
   15a6a:	e03f      	b.n	15aec <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
   15a6c:	2001      	movs	r0, #1
   15a6e:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   15a72:	e00b      	b.n	15a8c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   15a74:	2000      	movs	r0, #0
   15a76:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   15a7a:	e007      	b.n	15a8c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   15a7c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15a7e:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
   15a82:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   15a84:	b293      	uxth	r3, r2
   15a86:	428b      	cmp	r3, r1
   15a88:	d0f0      	beq.n	15a6c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1d4>
   15a8a:	e7f3      	b.n	15a74 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
   15a8c:	f89d 03d2 	ldrb.w	r0, [sp, #978]	; 0x3d2
   15a90:	07c0      	lsls	r0, r0, #31
   15a92:	2800      	cmp	r0, #0
   15a94:	d1dc      	bne.n	15a50 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b8>
   15a96:	e7d7      	b.n	15a48 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   15a98:	9813      	ldr	r0, [sp, #76]	; 0x4c
   15a9a:	b281      	uxth	r1, r0
   15a9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   15a9e:	b293      	uxth	r3, r2
   15aa0:	428b      	cmp	r3, r1
   15aa2:	d0eb      	beq.n	15a7c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1e4>
   15aa4:	e7e6      	b.n	15a74 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
                        if self.colors.extend_from_slice(&colors).is_ok() {
   15aa6:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15aa8:	f100 0194 	add.w	r1, r0, #148	; 0x94
   15aac:	a8da      	add	r0, sp, #872	; 0x368
   15aae:	910e      	str	r1, [sp, #56]	; 0x38
   15ab0:	f7fe fe49 	bl	14746 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   15ab4:	900d      	str	r0, [sp, #52]	; 0x34
   15ab6:	910c      	str	r1, [sp, #48]	; 0x30
   15ab8:	e7ff      	b.n	15aba <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x222>
   15aba:	980e      	ldr	r0, [sp, #56]	; 0x38
   15abc:	990d      	ldr	r1, [sp, #52]	; 0x34
   15abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15ac0:	f7fe fe8a 	bl	147d8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   15ac4:	f88d 03d3 	strb.w	r0, [sp, #979]	; 0x3d3
   15ac8:	e7ff      	b.n	15aca <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x232>
   15aca:	f20d 30d3 	addw	r0, sp, #979	; 0x3d3
   15ace:	f7ff fa18 	bl	14f02 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>
   15ad2:	900b      	str	r0, [sp, #44]	; 0x2c
   15ad4:	e7ff      	b.n	15ad6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x23e>
   15ad6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15ad8:	07c1      	lsls	r1, r0, #31
   15ada:	2900      	cmp	r1, #0
   15adc:	d101      	bne.n	15ae2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x24a>
   15ade:	e7ff      	b.n	15ae0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x248>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15ae0:	e004      	b.n	15aec <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
                            self.y_bottom = y;
   15ae2:	981b      	ldr	r0, [sp, #108]	; 0x6c
   15ae4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15ae6:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
                            continue;    
   15aea:	e7a0      	b.n	15a2e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
                        x_left: self.x_left,
   15aec:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15aee:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   15af2:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   15af6:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   15afa:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   15afe:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   15b02:	f50d 6095 	add.w	r0, sp, #1192	; 0x4a8
   15b06:	910a      	str	r1, [sp, #40]	; 0x28
   15b08:	4671      	mov	r1, lr
   15b0a:	9209      	str	r2, [sp, #36]	; 0x24
   15b0c:	9308      	str	r3, [sp, #32]
   15b0e:	f8cd c01c 	str.w	ip, [sp, #28]
   15b12:	f7fe fde8 	bl	146e6 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   15b16:	e7ff      	b.n	15b18 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x280>
                    let row = PixelBlock {
   15b18:	980a      	ldr	r0, [sp, #40]	; 0x28
   15b1a:	f8ad 04a0 	strh.w	r0, [sp, #1184]	; 0x4a0
   15b1e:	9909      	ldr	r1, [sp, #36]	; 0x24
   15b20:	f8ad 14a2 	strh.w	r1, [sp, #1186]	; 0x4a2
   15b24:	9a08      	ldr	r2, [sp, #32]
   15b26:	f8ad 24a4 	strh.w	r2, [sp, #1188]	; 0x4a4
   15b2a:	9b07      	ldr	r3, [sp, #28]
   15b2c:	f8ad 34a6 	strh.w	r3, [sp, #1190]	; 0x4a6
   15b30:	a8f5      	add	r0, sp, #980	; 0x3d4
   15b32:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
   15b36:	22cc      	movs	r2, #204	; 0xcc
   15b38:	f007 ff9c 	bl	1da74 <__aeabi_memcpy>
                    self.x_left = x_left;
   15b3c:	981d      	ldr	r0, [sp, #116]	; 0x74
   15b3e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15b40:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                    self.x_right = x_right;
   15b44:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15b46:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                    self.y_top = y;
   15b4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15b4c:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                    self.y_bottom = y;
   15b50:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                    self.colors.clear();
   15b54:	f101 0094 	add.w	r0, r1, #148	; 0x94
   15b58:	f7fe fe82 	bl	14860 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   15b5c:	e7ff      	b.n	15b5e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2c6>
                    self.colors.extend_from_slice(&colors)
   15b5e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15b60:	f100 0194 	add.w	r1, r0, #148	; 0x94
   15b64:	a8da      	add	r0, sp, #872	; 0x368
   15b66:	9106      	str	r1, [sp, #24]
   15b68:	f7fe fded 	bl	14746 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   15b6c:	9005      	str	r0, [sp, #20]
   15b6e:	9104      	str	r1, [sp, #16]
   15b70:	e7ff      	b.n	15b72 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2da>
   15b72:	9806      	ldr	r0, [sp, #24]
   15b74:	9905      	ldr	r1, [sp, #20]
   15b76:	9a04      	ldr	r2, [sp, #16]
   15b78:	f7fe fe2e 	bl	147d8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   15b7c:	9003      	str	r0, [sp, #12]
   15b7e:	e7ff      	b.n	15b80 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e8>
   15b80:	9803      	ldr	r0, [sp, #12]
   15b82:	f000 0001 	and.w	r0, r0, #1
   15b86:	f240 51a0 	movw	r1, #1440	; 0x5a0
   15b8a:	f2c0 0102 	movt	r1, #2
   15b8e:	f240 634c 	movw	r3, #1612	; 0x64c
   15b92:	f2c0 0302 	movt	r3, #2
   15b96:	2205      	movs	r2, #5
   15b98:	f7ff f9f7 	bl	14f8a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   15b9c:	e7ff      	b.n	15b9e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x306>
   15b9e:	f20d 5074 	addw	r0, sp, #1396	; 0x574
   15ba2:	a9f5      	add	r1, sp, #980	; 0x3d4
   15ba4:	22d4      	movs	r2, #212	; 0xd4
                    return Some(row);
   15ba6:	9002      	str	r0, [sp, #8]
   15ba8:	9201      	str	r2, [sp, #4]
   15baa:	f007 ff63 	bl	1da74 <__aeabi_memcpy>
   15bae:	981e      	ldr	r0, [sp, #120]	; 0x78
   15bb0:	3004      	adds	r0, #4
   15bb2:	9902      	ldr	r1, [sp, #8]
   15bb4:	9a01      	ldr	r2, [sp, #4]
   15bb6:	f007 ff5d 	bl	1da74 <__aeabi_memcpy>
   15bba:	2001      	movs	r0, #1
   15bbc:	991e      	ldr	r1, [sp, #120]	; 0x78
   15bbe:	6008      	str	r0, [r1, #0]
   15bc0:	a8da      	add	r0, sp, #872	; 0x368
            }
   15bc2:	f7f4 ff37 	bl	aa34 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   15bc6:	e7ff      	b.n	15bc8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x330>
                    return Some(row);
   15bc8:	e017      	b.n	15bfa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
   15bca:	2000      	movs	r0, #0
        }
   15bcc:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
    }
   15bd0:	f50d 6dcb 	add.w	sp, sp, #1624	; 0x658
   15bd4:	bd80      	pop	{r7, pc}
        }
   15bd6:	f89d 064b 	ldrb.w	r0, [sp, #1611]	; 0x64b
   15bda:	07c0      	lsls	r0, r0, #31
   15bdc:	2800      	cmp	r0, #0
   15bde:	d0f4      	beq.n	15bca <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   15be0:	e7ff      	b.n	15be2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x34a>
   15be2:	2000      	movs	r0, #0
   15be4:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   15be8:	a820      	add	r0, sp, #128	; 0x80
   15bea:	3004      	adds	r0, #4
   15bec:	f7f4 ff22 	bl	aa34 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   15bf0:	e7eb      	b.n	15bca <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   15bf2:	a820      	add	r0, sp, #128	; 0x80
   15bf4:	f7f4 fee3 	bl	a9be <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   15bf8:	e7e7      	b.n	15bca <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   15bfa:	9820      	ldr	r0, [sp, #128]	; 0x80
   15bfc:	2801      	cmp	r0, #1
   15bfe:	d0ea      	beq.n	15bd6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x33e>
   15c00:	e7f7      	b.n	15bf2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x35a>
   15c02:	2000      	movs	r0, #0
   15c04:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
                        continue;
   15c08:	e651      	b.n	158ae <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   15c0a:	a820      	add	r0, sp, #128	; 0x80
        }
   15c0c:	f7f4 fed7 	bl	a9be <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   15c10:	e7f7      	b.n	15c02 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15c12:	f240 6000 	movw	r0, #1536	; 0x600
   15c16:	f2c0 0002 	movt	r0, #2
   15c1a:	f240 623c 	movw	r2, #1596	; 0x63c
   15c1e:	f2c0 0202 	movt	r2, #2
   15c22:	211c      	movs	r1, #28
   15c24:	f001 fb52 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15c28:	defe      	udf	#254	; 0xfe

00015c2a <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>:
   15c2a:	b081      	sub	sp, #4
   15c2c:	9000      	str	r0, [sp, #0]
   15c2e:	8800      	ldrh	r0, [r0, #0]
   15c30:	b001      	add	sp, #4
   15c32:	4770      	bx	lr

00015c34 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>:
   15c34:	b580      	push	{r7, lr}
   15c36:	b08c      	sub	sp, #48	; 0x30
   15c38:	9009      	str	r0, [sp, #36]	; 0x24
   15c3a:	910a      	str	r1, [sp, #40]	; 0x28
   15c3c:	920b      	str	r2, [sp, #44]	; 0x2c
   15c3e:	9006      	str	r0, [sp, #24]
   15c40:	4608      	mov	r0, r1
   15c42:	9105      	str	r1, [sp, #20]
   15c44:	4611      	mov	r1, r2
   15c46:	9204      	str	r2, [sp, #16]
   15c48:	f7f4 ff5d 	bl	ab06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15c4c:	9003      	str	r0, [sp, #12]
   15c4e:	e7ff      	b.n	15c50 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x1c>
   15c50:	9806      	ldr	r0, [sp, #24]
   15c52:	9007      	str	r0, [sp, #28]
   15c54:	9903      	ldr	r1, [sp, #12]
   15c56:	9108      	str	r1, [sp, #32]
   15c58:	9807      	ldr	r0, [sp, #28]
   15c5a:	9908      	ldr	r1, [sp, #32]
   15c5c:	9a05      	ldr	r2, [sp, #20]
   15c5e:	9b04      	ldr	r3, [sp, #16]
   15c60:	f000 f82d 	bl	15cbe <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>
   15c64:	9002      	str	r0, [sp, #8]
   15c66:	9101      	str	r1, [sp, #4]
   15c68:	e7ff      	b.n	15c6a <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x36>
   15c6a:	9802      	ldr	r0, [sp, #8]
   15c6c:	9901      	ldr	r1, [sp, #4]
   15c6e:	b00c      	add	sp, #48	; 0x30
   15c70:	bd80      	pop	{r7, pc}

00015c72 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>:
   15c72:	b083      	sub	sp, #12
   15c74:	9001      	str	r0, [sp, #4]
   15c76:	9102      	str	r1, [sp, #8]
   15c78:	b003      	add	sp, #12
   15c7a:	4770      	bx	lr

00015c7c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>:
   15c7c:	b580      	push	{r7, lr}
   15c7e:	b08a      	sub	sp, #40	; 0x28
   15c80:	9006      	str	r0, [sp, #24]
   15c82:	9107      	str	r1, [sp, #28]
   15c84:	9208      	str	r2, [sp, #32]
   15c86:	9309      	str	r3, [sp, #36]	; 0x24
   15c88:	9005      	str	r0, [sp, #20]
   15c8a:	4610      	mov	r0, r2
   15c8c:	9104      	str	r1, [sp, #16]
   15c8e:	4619      	mov	r1, r3
   15c90:	f7f4 ff22 	bl	aad8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   15c94:	9003      	str	r0, [sp, #12]
   15c96:	e7ff      	b.n	15c98 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x1c>
   15c98:	9803      	ldr	r0, [sp, #12]
   15c9a:	9905      	ldr	r1, [sp, #20]
   15c9c:	f7f5 f82c 	bl	acf8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15ca0:	9002      	str	r0, [sp, #8]
   15ca2:	e7ff      	b.n	15ca4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x28>
   15ca4:	9804      	ldr	r0, [sp, #16]
   15ca6:	9905      	ldr	r1, [sp, #20]
   15ca8:	1a41      	subs	r1, r0, r1
   15caa:	9802      	ldr	r0, [sp, #8]
   15cac:	f7f4 ff07 	bl	aabe <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   15cb0:	9001      	str	r0, [sp, #4]
   15cb2:	9100      	str	r1, [sp, #0]
   15cb4:	e7ff      	b.n	15cb6 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x3a>
   15cb6:	9801      	ldr	r0, [sp, #4]
   15cb8:	9900      	ldr	r1, [sp, #0]
   15cba:	b00a      	add	sp, #40	; 0x28
   15cbc:	bd80      	pop	{r7, pc}

00015cbe <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>:
   15cbe:	b580      	push	{r7, lr}
   15cc0:	b08c      	sub	sp, #48	; 0x30
   15cc2:	9008      	str	r0, [sp, #32]
   15cc4:	9109      	str	r1, [sp, #36]	; 0x24
   15cc6:	920a      	str	r2, [sp, #40]	; 0x28
   15cc8:	930b      	str	r3, [sp, #44]	; 0x2c
   15cca:	4288      	cmp	r0, r1
   15ccc:	9307      	str	r3, [sp, #28]
   15cce:	9206      	str	r2, [sp, #24]
   15cd0:	9105      	str	r1, [sp, #20]
   15cd2:	9004      	str	r0, [sp, #16]
   15cd4:	d806      	bhi.n	15ce4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x26>
   15cd6:	e7ff      	b.n	15cd8 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x1a>
   15cd8:	9806      	ldr	r0, [sp, #24]
   15cda:	9907      	ldr	r1, [sp, #28]
   15cdc:	f7f4 ff13 	bl	ab06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15ce0:	9003      	str	r0, [sp, #12]
   15ce2:	e004      	b.n	15cee <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x30>
   15ce4:	9804      	ldr	r0, [sp, #16]
   15ce6:	9905      	ldr	r1, [sp, #20]
   15ce8:	f002 fa65 	bl	181b6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   15cec:	defe      	udf	#254	; 0xfe
   15cee:	9805      	ldr	r0, [sp, #20]
   15cf0:	9903      	ldr	r1, [sp, #12]
   15cf2:	4288      	cmp	r0, r1
   15cf4:	d809      	bhi.n	15d0a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x4c>
   15cf6:	e7ff      	b.n	15cf8 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x3a>
   15cf8:	9804      	ldr	r0, [sp, #16]
   15cfa:	9905      	ldr	r1, [sp, #20]
   15cfc:	9a06      	ldr	r2, [sp, #24]
   15cfe:	9b07      	ldr	r3, [sp, #28]
   15d00:	f7ff ffbc 	bl	15c7c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>
   15d04:	9002      	str	r0, [sp, #8]
   15d06:	9101      	str	r1, [sp, #4]
   15d08:	e00a      	b.n	15d20 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x62>
   15d0a:	9806      	ldr	r0, [sp, #24]
   15d0c:	9907      	ldr	r1, [sp, #28]
   15d0e:	f7f4 fefa 	bl	ab06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15d12:	9000      	str	r0, [sp, #0]
   15d14:	e7ff      	b.n	15d16 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x58>
   15d16:	9805      	ldr	r0, [sp, #20]
   15d18:	9900      	ldr	r1, [sp, #0]
   15d1a:	f002 fa2a 	bl	18172 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   15d1e:	defe      	udf	#254	; 0xfe
   15d20:	9802      	ldr	r0, [sp, #8]
   15d22:	9901      	ldr	r1, [sp, #4]
   15d24:	b00c      	add	sp, #48	; 0x30
   15d26:	bd80      	pop	{r7, pc}

00015d28 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   15d28:	b580      	push	{r7, lr}
        (&self).into_iter()
   15d2a:	f000 f814 	bl	15d56 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>
   15d2e:	e7ff      	b.n	15d30 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E+0x8>
    }
   15d30:	bd80      	pop	{r7, pc}

00015d32 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
    fn fill(mut self, color: Option<C>) -> Self {
   15d32:	b5b0      	push	{r4, r5, r7, lr}
   15d34:	b081      	sub	sp, #4
   15d36:	469c      	mov	ip, r3
   15d38:	4696      	mov	lr, r2
   15d3a:	f8ad 2000 	strh.w	r2, [sp]
   15d3e:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   15d42:	820a      	strh	r2, [r1, #16]
   15d44:	824b      	strh	r3, [r1, #18]
        self
   15d46:	c91c      	ldmia	r1!, {r2, r3, r4}
   15d48:	c01c      	stmia	r0!, {r2, r3, r4}
   15d4a:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   15d4e:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   15d52:	b001      	add	sp, #4
   15d54:	bdb0      	pop	{r4, r5, r7, pc}

00015d56 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   15d56:	b570      	push	{r4, r5, r6, lr}
   15d58:	b08e      	sub	sp, #56	; 0x38
   15d5a:	910d      	str	r1, [sp, #52]	; 0x34
        RectangleIterator {
            top_left: self.top_left,
   15d5c:	680a      	ldr	r2, [r1, #0]
   15d5e:	684b      	ldr	r3, [r1, #4]
            bottom_right: self.bottom_right,
   15d60:	f8d1 c008 	ldr.w	ip, [r1, #8]
   15d64:	f8d1 e00c 	ldr.w	lr, [r1, #12]
            style: self.style,
   15d68:	8b0c      	ldrh	r4, [r1, #24]
   15d6a:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
   15d6e:	690c      	ldr	r4, [r1, #16]
   15d70:	694d      	ldr	r5, [r1, #20]
   15d72:	950b      	str	r5, [sp, #44]	; 0x2c
   15d74:	940a      	str	r4, [sp, #40]	; 0x28
   15d76:	2400      	movs	r4, #0
            x: self.top_left[0],
   15d78:	9009      	str	r0, [sp, #36]	; 0x24
   15d7a:	4608      	mov	r0, r1
   15d7c:	9108      	str	r1, [sp, #32]
   15d7e:	4621      	mov	r1, r4
   15d80:	9207      	str	r2, [sp, #28]
   15d82:	9306      	str	r3, [sp, #24]
   15d84:	f8cd c014 	str.w	ip, [sp, #20]
   15d88:	f8cd e010 	str.w	lr, [sp, #16]
   15d8c:	f7fb fcd2 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   15d90:	9003      	str	r0, [sp, #12]
   15d92:	e7ff      	b.n	15d94 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x3e>
   15d94:	9803      	ldr	r0, [sp, #12]
   15d96:	6801      	ldr	r1, [r0, #0]
   15d98:	2201      	movs	r2, #1
            y: self.top_left[1],
   15d9a:	9808      	ldr	r0, [sp, #32]
   15d9c:	9102      	str	r1, [sp, #8]
   15d9e:	4611      	mov	r1, r2
   15da0:	f7fb fcc8 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   15da4:	9001      	str	r0, [sp, #4]
   15da6:	e7ff      	b.n	15da8 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x52>
   15da8:	9801      	ldr	r0, [sp, #4]
   15daa:	6801      	ldr	r1, [r0, #0]
        RectangleIterator {
   15dac:	9a07      	ldr	r2, [sp, #28]
   15dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15db0:	601a      	str	r2, [r3, #0]
   15db2:	f8dd c018 	ldr.w	ip, [sp, #24]
   15db6:	f8c3 c004 	str.w	ip, [r3, #4]
   15dba:	f8dd e014 	ldr.w	lr, [sp, #20]
   15dbe:	f8c3 e008 	str.w	lr, [r3, #8]
   15dc2:	9c04      	ldr	r4, [sp, #16]
   15dc4:	60dc      	str	r4, [r3, #12]
   15dc6:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   15dca:	841d      	strh	r5, [r3, #32]
   15dcc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   15dce:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   15dd0:	61de      	str	r6, [r3, #28]
   15dd2:	619d      	str	r5, [r3, #24]
   15dd4:	9d02      	ldr	r5, [sp, #8]
   15dd6:	611d      	str	r5, [r3, #16]
   15dd8:	6159      	str	r1, [r3, #20]
        }
    }
   15dda:	b00e      	add	sp, #56	; 0x38
   15ddc:	bd70      	pop	{r4, r5, r6, pc}

00015dde <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>:
where
    C: PixelColor,
{
    type Item = Pixel<C>;

    fn next(&mut self) -> Option<Self::Item> {
   15dde:	b510      	push	{r4, lr}
   15de0:	b0d2      	sub	sp, #328	; 0x148
   15de2:	914f      	str	r1, [sp, #316]	; 0x13c
   15de4:	2200      	movs	r2, #0
        // If entire object is off the top left of the screen or has no border or fill colour,
        // don't render anything
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   15de6:	902a      	str	r0, [sp, #168]	; 0xa8
   15de8:	4608      	mov	r0, r1
   15dea:	9129      	str	r1, [sp, #164]	; 0xa4
   15dec:	4611      	mov	r1, r2
   15dee:	f7fb fca1 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   15df2:	9028      	str	r0, [sp, #160]	; 0xa0
   15df4:	e03c      	b.n	15e70 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x92>
   15df6:	2001      	movs	r0, #1
   15df8:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   15dfc:	e009      	b.n	15e12 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
   15dfe:	2000      	movs	r0, #0
   15e00:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   15e04:	e005      	b.n	15e12 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   15e06:	9829      	ldr	r0, [sp, #164]	; 0xa4
   15e08:	301c      	adds	r0, #28
   15e0a:	f7fe fbcf 	bl	145ac <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   15e0e:	9027      	str	r0, [sp, #156]	; 0x9c
   15e10:	e06c      	b.n	15eec <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x10e>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   15e12:	f89d 00af 	ldrb.w	r0, [sp, #175]	; 0xaf
   15e16:	07c0      	lsls	r0, r0, #31
   15e18:	2800      	cmp	r0, #0
   15e1a:	d172      	bne.n	15f02 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x124>
   15e1c:	e070      	b.n	15f00 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x122>
   15e1e:	2001      	movs	r0, #1
   15e20:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   15e24:	e00a      	b.n	15e3c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
   15e26:	2000      	movs	r0, #0
   15e28:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   15e2c:	e006      	b.n	15e3c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   15e2e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   15e30:	3008      	adds	r0, #8
   15e32:	2100      	movs	r1, #0
   15e34:	f7fb fc7e 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   15e38:	9026      	str	r0, [sp, #152]	; 0x98
   15e3a:	e038      	b.n	15eae <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xd0>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   15e3c:	f89d 00b0 	ldrb.w	r0, [sp, #176]	; 0xb0
   15e40:	07c0      	lsls	r0, r0, #31
   15e42:	2800      	cmp	r0, #0
   15e44:	d1d7      	bne.n	15df6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   15e46:	e7de      	b.n	15e06 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x28>
   15e48:	2001      	movs	r0, #1
   15e4a:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   15e4e:	e009      	b.n	15e64 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   15e50:	2000      	movs	r0, #0
   15e52:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   15e56:	e005      	b.n	15e64 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   15e58:	2101      	movs	r1, #1
   15e5a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   15e5c:	f7fb fc6a 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   15e60:	9025      	str	r0, [sp, #148]	; 0x94
   15e62:	e00a      	b.n	15e7a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x9c>
   15e64:	f89d 00b1 	ldrb.w	r0, [sp, #177]	; 0xb1
   15e68:	07c0      	lsls	r0, r0, #31
   15e6a:	2800      	cmp	r0, #0
   15e6c:	d1df      	bne.n	15e2e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x50>
   15e6e:	e7da      	b.n	15e26 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
   15e70:	9828      	ldr	r0, [sp, #160]	; 0xa0
   15e72:	6801      	ldr	r1, [r0, #0]
   15e74:	2900      	cmp	r1, #0
   15e76:	d4e7      	bmi.n	15e48 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   15e78:	e7ee      	b.n	15e58 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x7a>
   15e7a:	9825      	ldr	r0, [sp, #148]	; 0x94
   15e7c:	6801      	ldr	r1, [r0, #0]
   15e7e:	2900      	cmp	r1, #0
   15e80:	d4e2      	bmi.n	15e48 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   15e82:	e7e5      	b.n	15e50 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x72>
   15e84:	2001      	movs	r0, #1
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   15e86:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   15e8a:	e00a      	b.n	15ea2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   15e8c:	2000      	movs	r0, #0
   15e8e:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   15e92:	e006      	b.n	15ea2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   15e94:	9829      	ldr	r0, [sp, #164]	; 0xa4
   15e96:	3008      	adds	r0, #8
   15e98:	2101      	movs	r1, #1
   15e9a:	f7fb fc4b 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   15e9e:	9024      	str	r0, [sp, #144]	; 0x90
   15ea0:	e00a      	b.n	15eb8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xda>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   15ea2:	f89d 00b2 	ldrb.w	r0, [sp, #178]	; 0xb2
   15ea6:	07c0      	lsls	r0, r0, #31
   15ea8:	2800      	cmp	r0, #0
   15eaa:	d1b8      	bne.n	15e1e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40>
   15eac:	e7bb      	b.n	15e26 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   15eae:	9826      	ldr	r0, [sp, #152]	; 0x98
   15eb0:	6801      	ldr	r1, [r0, #0]
   15eb2:	2900      	cmp	r1, #0
   15eb4:	d4e6      	bmi.n	15e84 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   15eb6:	e7ed      	b.n	15e94 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xb6>
   15eb8:	9824      	ldr	r0, [sp, #144]	; 0x90
   15eba:	6801      	ldr	r1, [r0, #0]
   15ebc:	2900      	cmp	r1, #0
   15ebe:	d4e1      	bmi.n	15e84 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   15ec0:	e7e4      	b.n	15e8c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xae>
   15ec2:	2001      	movs	r0, #1
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   15ec4:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   15ec8:	e009      	b.n	15ede <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   15eca:	2000      	movs	r0, #0
   15ecc:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   15ed0:	e005      	b.n	15ede <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   15ed2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   15ed4:	3018      	adds	r0, #24
   15ed6:	f7fe fb69 	bl	145ac <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   15eda:	9023      	str	r0, [sp, #140]	; 0x8c
   15edc:	e00b      	b.n	15ef6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x118>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   15ede:	f89d 00b3 	ldrb.w	r0, [sp, #179]	; 0xb3
   15ee2:	07c0      	lsls	r0, r0, #31
   15ee4:	2800      	cmp	r0, #0
   15ee6:	f47f af86 	bne.w	15df6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   15eea:	e788      	b.n	15dfe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20>
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   15eec:	9827      	ldr	r0, [sp, #156]	; 0x9c
   15eee:	07c1      	lsls	r1, r0, #31
   15ef0:	2900      	cmp	r1, #0
   15ef2:	d1ee      	bne.n	15ed2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xf4>
   15ef4:	e7e9      	b.n	15eca <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
   15ef6:	9823      	ldr	r0, [sp, #140]	; 0x8c
   15ef8:	07c1      	lsls	r1, r0, #31
   15efa:	2900      	cmp	r1, #0
   15efc:	d1e1      	bne.n	15ec2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xe4>
   15efe:	e7e4      	b.n	15eca <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
        {
            return None;
        }

        let pixel = loop {
   15f00:	e012      	b.n	15f28 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
   15f02:	2000      	movs	r0, #0
            return None;
   15f04:	992a      	ldr	r1, [sp, #168]	; 0xa8
   15f06:	6008      	str	r0, [r1, #0]
   15f08:	e7ff      	b.n	15f0a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                break out;
            }
        };

        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
    }
   15f0a:	b052      	add	sp, #328	; 0x148
   15f0c:	bd10      	pop	{r4, pc}
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   15f0e:	982d      	ldr	r0, [sp, #180]	; 0xb4
   15f10:	992e      	ldr	r1, [sp, #184]	; 0xb8
   15f12:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   15f14:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   15f16:	934d      	str	r3, [sp, #308]	; 0x134
   15f18:	924c      	str	r2, [sp, #304]	; 0x130
   15f1a:	914b      	str	r1, [sp, #300]	; 0x12c
   15f1c:	904a      	str	r0, [sp, #296]	; 0x128
   15f1e:	a94a      	add	r1, sp, #296	; 0x128
   15f20:	982a      	ldr	r0, [sp, #168]	; 0xa8
   15f22:	f7fe fa55 	bl	143d0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>
   15f26:	e201      	b.n	1632c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x54e>
   15f28:	2000      	movs	r0, #0
            let mut out = None;
   15f2a:	9031      	str	r0, [sp, #196]	; 0xc4
            if self.y > self.bottom_right[1] {
   15f2c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   15f2e:	6941      	ldr	r1, [r0, #20]
   15f30:	3008      	adds	r0, #8
   15f32:	2201      	movs	r2, #1
   15f34:	9122      	str	r1, [sp, #136]	; 0x88
   15f36:	4611      	mov	r1, r2
   15f38:	f7fb fbfc 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   15f3c:	9021      	str	r0, [sp, #132]	; 0x84
   15f3e:	e7ff      	b.n	15f40 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x162>
   15f40:	9821      	ldr	r0, [sp, #132]	; 0x84
   15f42:	6801      	ldr	r1, [r0, #0]
   15f44:	9a22      	ldr	r2, [sp, #136]	; 0x88
   15f46:	428a      	cmp	r2, r1
   15f48:	dc13      	bgt.n	15f72 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x194>
   15f4a:	e7ff      	b.n	15f4c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x16e>
            let border_width = self.style.stroke_width as i32;
   15f4c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   15f4e:	f890 1020 	ldrb.w	r1, [r0, #32]
   15f52:	460a      	mov	r2, r1
   15f54:	9150      	str	r1, [sp, #320]	; 0x140
            let tl = self.top_left;
   15f56:	6801      	ldr	r1, [r0, #0]
   15f58:	6843      	ldr	r3, [r0, #4]
   15f5a:	9135      	str	r1, [sp, #212]	; 0xd4
   15f5c:	9336      	str	r3, [sp, #216]	; 0xd8
            let br = self.bottom_right;
   15f5e:	6881      	ldr	r1, [r0, #8]
   15f60:	68c3      	ldr	r3, [r0, #12]
   15f62:	9137      	str	r1, [sp, #220]	; 0xdc
   15f64:	9338      	str	r3, [sp, #224]	; 0xe0
            if self.x >= 0 && self.y >= 0 {
   15f66:	6901      	ldr	r1, [r0, #16]
   15f68:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   15f6c:	9220      	str	r2, [sp, #128]	; 0x80
   15f6e:	dc0b      	bgt.n	15f88 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1aa>
   15f70:	e006      	b.n	15f80 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   15f72:	2000      	movs	r0, #0
                break None;
   15f74:	902d      	str	r0, [sp, #180]	; 0xb4
   15f76:	e7ca      	b.n	15f0e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
   15f78:	2001      	movs	r0, #1
            if self.x >= 0 && self.y >= 0 {
   15f7a:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   15f7e:	e009      	b.n	15f94 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   15f80:	2000      	movs	r0, #0
   15f82:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   15f86:	e005      	b.n	15f94 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   15f88:	9829      	ldr	r0, [sp, #164]	; 0xa4
   15f8a:	6941      	ldr	r1, [r0, #20]
   15f8c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   15f90:	dcf2      	bgt.n	15f78 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x19a>
   15f92:	e7f5      	b.n	15f80 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   15f94:	f89d 00e7 	ldrb.w	r0, [sp, #231]	; 0xe7
   15f98:	07c0      	lsls	r0, r0, #31
   15f9a:	2800      	cmp	r0, #0
   15f9c:	f000 8182 	beq.w	162a4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
   15fa0:	e7ff      	b.n	15fa2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1c4>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   15fa2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   15fa4:	6941      	ldr	r1, [r0, #20]
   15fa6:	a835      	add	r0, sp, #212	; 0xd4
   15fa8:	2201      	movs	r2, #1
   15faa:	911f      	str	r1, [sp, #124]	; 0x7c
   15fac:	4611      	mov	r1, r2
   15fae:	f7fb fbc1 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   15fb2:	901e      	str	r0, [sp, #120]	; 0x78
   15fb4:	e074      	b.n	160a0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2c2>
   15fb6:	2001      	movs	r0, #1
                if (
   15fb8:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   15fbc:	e009      	b.n	15fd2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
   15fbe:	2000      	movs	r0, #0
   15fc0:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   15fc4:	e005      	b.n	15fd2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
                ) && self.style.stroke_color.is_some()
   15fc6:	9829      	ldr	r0, [sp, #164]	; 0xa4
   15fc8:	301c      	adds	r0, #28
   15fca:	f7fe fb1f 	bl	1460c <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   15fce:	901d      	str	r0, [sp, #116]	; 0x74
   15fd0:	e104      	b.n	161dc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3fe>
                if (
   15fd2:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
   15fd6:	07c0      	lsls	r0, r0, #31
   15fd8:	2800      	cmp	r0, #0
   15fda:	f040 810a 	bne.w	161f2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x414>
   15fde:	e103      	b.n	161e8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40a>
   15fe0:	2001      	movs	r0, #1
   15fe2:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   15fe6:	e00d      	b.n	16004 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
   15fe8:	2000      	movs	r0, #0
   15fea:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   15fee:	e009      	b.n	16004 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   15ff0:	9829      	ldr	r0, [sp, #164]	; 0xa4
   15ff2:	6901      	ldr	r1, [r0, #16]
   15ff4:	a837      	add	r0, sp, #220	; 0xdc
   15ff6:	2200      	movs	r2, #0
   15ff8:	911c      	str	r1, [sp, #112]	; 0x70
   15ffa:	4611      	mov	r1, r2
   15ffc:	f7fb fb9a 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16000:	901b      	str	r0, [sp, #108]	; 0x6c
   16002:	e0d7      	b.n	161b4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3d6>
                if (
   16004:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
   16008:	07c0      	lsls	r0, r0, #31
   1600a:	2800      	cmp	r0, #0
   1600c:	d1db      	bne.n	15fc6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e8>
   1600e:	e7d6      	b.n	15fbe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
   16010:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   16012:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   16016:	e00d      	b.n	16034 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
   16018:	2000      	movs	r0, #0
   1601a:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   1601e:	e009      	b.n	16034 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   16020:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16022:	6901      	ldr	r1, [r0, #16]
   16024:	a835      	add	r0, sp, #212	; 0xd4
   16026:	2200      	movs	r2, #0
   16028:	911a      	str	r1, [sp, #104]	; 0x68
   1602a:	4611      	mov	r1, r2
   1602c:	f7fb fb82 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16030:	9019      	str	r0, [sp, #100]	; 0x64
   16032:	e090      	b.n	16156 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x378>
                if (
   16034:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
   16038:	07c0      	lsls	r0, r0, #31
   1603a:	2800      	cmp	r0, #0
   1603c:	d1d0      	bne.n	15fe0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   1603e:	e7d7      	b.n	15ff0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x212>
   16040:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   16042:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   16046:	e00d      	b.n	16064 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
   16048:	2000      	movs	r0, #0
   1604a:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   1604e:	e009      	b.n	16064 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   16050:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16052:	6941      	ldr	r1, [r0, #20]
   16054:	a837      	add	r0, sp, #220	; 0xdc
   16056:	2201      	movs	r2, #1
   16058:	9118      	str	r1, [sp, #96]	; 0x60
   1605a:	4611      	mov	r1, r2
   1605c:	f7fb fb6a 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16060:	9017      	str	r0, [sp, #92]	; 0x5c
   16062:	e04b      	b.n	160fc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x31e>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   16064:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
   16068:	07c0      	lsls	r0, r0, #31
   1606a:	2800      	cmp	r0, #0
   1606c:	d1d0      	bne.n	16010 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   1606e:	e7d7      	b.n	16020 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x242>
   16070:	2001      	movs	r0, #1
   16072:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   16076:	e00d      	b.n	16094 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   16078:	2000      	movs	r0, #0
   1607a:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   1607e:	e009      	b.n	16094 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   16080:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16082:	6941      	ldr	r1, [r0, #20]
   16084:	a835      	add	r0, sp, #212	; 0xd4
   16086:	2201      	movs	r2, #1
   16088:	9116      	str	r1, [sp, #88]	; 0x58
   1608a:	4611      	mov	r1, r2
   1608c:	f7fb fb52 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16090:	9015      	str	r0, [sp, #84]	; 0x54
   16092:	e00b      	b.n	160ac <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ce>
   16094:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
   16098:	07c0      	lsls	r0, r0, #31
   1609a:	2800      	cmp	r0, #0
   1609c:	d1d0      	bne.n	16040 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   1609e:	e7d7      	b.n	16050 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x272>
   160a0:	981e      	ldr	r0, [sp, #120]	; 0x78
   160a2:	6801      	ldr	r1, [r0, #0]
   160a4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   160a6:	428a      	cmp	r2, r1
   160a8:	daea      	bge.n	16080 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2a2>
   160aa:	e7e5      	b.n	16078 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   160ac:	9815      	ldr	r0, [sp, #84]	; 0x54
   160ae:	6801      	ldr	r1, [r0, #0]
   160b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
   160b2:	188b      	adds	r3, r1, r2
   160b4:	469c      	mov	ip, r3
   160b6:	428b      	cmp	r3, r1
   160b8:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
   160bc:	f180 8137 	bvs.w	1632e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x550>
   160c0:	e7ff      	b.n	160c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2e4>
   160c2:	9816      	ldr	r0, [sp, #88]	; 0x58
   160c4:	9914      	ldr	r1, [sp, #80]	; 0x50
   160c6:	4288      	cmp	r0, r1
   160c8:	dbd2      	blt.n	16070 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x292>
   160ca:	e7d5      	b.n	16078 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   160cc:	2001      	movs	r0, #1
                || (self.y <= br[1] && self.y > br[1] - border_width)
   160ce:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   160d2:	e00d      	b.n	160f0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   160d4:	2000      	movs	r0, #0
   160d6:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   160da:	e009      	b.n	160f0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   160dc:	9829      	ldr	r0, [sp, #164]	; 0xa4
   160de:	6941      	ldr	r1, [r0, #20]
   160e0:	a837      	add	r0, sp, #220	; 0xdc
   160e2:	2201      	movs	r2, #1
   160e4:	9113      	str	r1, [sp, #76]	; 0x4c
   160e6:	4611      	mov	r1, r2
   160e8:	f7fb fb24 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   160ec:	9012      	str	r0, [sp, #72]	; 0x48
   160ee:	e00b      	b.n	16108 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x32a>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   160f0:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
   160f4:	07c0      	lsls	r0, r0, #31
   160f6:	2800      	cmp	r0, #0
   160f8:	d1a2      	bne.n	16040 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   160fa:	e7a5      	b.n	16048 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x26a>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   160fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   160fe:	6801      	ldr	r1, [r0, #0]
   16100:	9a18      	ldr	r2, [sp, #96]	; 0x60
   16102:	428a      	cmp	r2, r1
   16104:	ddea      	ble.n	160dc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2fe>
   16106:	e7e5      	b.n	160d4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   16108:	9812      	ldr	r0, [sp, #72]	; 0x48
   1610a:	6801      	ldr	r1, [r0, #0]
   1610c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1610e:	1a8b      	subs	r3, r1, r2
   16110:	4291      	cmp	r1, r2
   16112:	9311      	str	r3, [sp, #68]	; 0x44
   16114:	f180 8117 	bvs.w	16346 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x568>
   16118:	e7ff      	b.n	1611a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x33c>
   1611a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1611c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1611e:	4288      	cmp	r0, r1
   16120:	dcd4      	bgt.n	160cc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ee>
   16122:	e7d7      	b.n	160d4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   16124:	2001      	movs	r0, #1
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   16126:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   1612a:	e00d      	b.n	16148 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   1612c:	2000      	movs	r0, #0
   1612e:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   16132:	e009      	b.n	16148 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   16134:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16136:	6901      	ldr	r1, [r0, #16]
   16138:	a835      	add	r0, sp, #212	; 0xd4
   1613a:	2200      	movs	r2, #0
   1613c:	9110      	str	r1, [sp, #64]	; 0x40
   1613e:	4611      	mov	r1, r2
   16140:	f7fb faf8 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16144:	900f      	str	r0, [sp, #60]	; 0x3c
   16146:	e00c      	b.n	16162 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x384>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   16148:	f89d 00ee 	ldrb.w	r0, [sp, #238]	; 0xee
   1614c:	07c0      	lsls	r0, r0, #31
   1614e:	2800      	cmp	r0, #0
   16150:	f47f af5e 	bne.w	16010 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   16154:	e760      	b.n	16018 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x23a>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   16156:	9819      	ldr	r0, [sp, #100]	; 0x64
   16158:	6801      	ldr	r1, [r0, #0]
   1615a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1615c:	428a      	cmp	r2, r1
   1615e:	dae9      	bge.n	16134 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x356>
   16160:	e7e4      	b.n	1612c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   16162:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16164:	6801      	ldr	r1, [r0, #0]
   16166:	9a20      	ldr	r2, [sp, #128]	; 0x80
   16168:	188b      	adds	r3, r1, r2
   1616a:	469c      	mov	ip, r3
   1616c:	428b      	cmp	r3, r1
   1616e:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   16172:	f180 80f4 	bvs.w	1635e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x580>
   16176:	e7ff      	b.n	16178 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x39a>
   16178:	9810      	ldr	r0, [sp, #64]	; 0x40
   1617a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1617c:	4288      	cmp	r0, r1
   1617e:	dbd1      	blt.n	16124 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x346>
   16180:	e7d4      	b.n	1612c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   16182:	2001      	movs	r0, #1
                || (self.x <= br[0] && self.x > br[0] - border_width)
   16184:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   16188:	e00d      	b.n	161a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   1618a:	2000      	movs	r0, #0
   1618c:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   16190:	e009      	b.n	161a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   16192:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16194:	6901      	ldr	r1, [r0, #16]
   16196:	a837      	add	r0, sp, #220	; 0xdc
   16198:	2200      	movs	r2, #0
   1619a:	910d      	str	r1, [sp, #52]	; 0x34
   1619c:	4611      	mov	r1, r2
   1619e:	f7fb fac9 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   161a2:	900c      	str	r0, [sp, #48]	; 0x30
   161a4:	e00c      	b.n	161c0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3e2>
                if (
   161a6:	f89d 00ef 	ldrb.w	r0, [sp, #239]	; 0xef
   161aa:	07c0      	lsls	r0, r0, #31
   161ac:	2800      	cmp	r0, #0
   161ae:	f47f af17 	bne.w	15fe0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   161b2:	e719      	b.n	15fe8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20a>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   161b4:	981b      	ldr	r0, [sp, #108]	; 0x6c
   161b6:	6801      	ldr	r1, [r0, #0]
   161b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   161ba:	428a      	cmp	r2, r1
   161bc:	dde9      	ble.n	16192 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3b4>
   161be:	e7e4      	b.n	1618a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
   161c0:	980c      	ldr	r0, [sp, #48]	; 0x30
   161c2:	6801      	ldr	r1, [r0, #0]
   161c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   161c6:	1a8b      	subs	r3, r1, r2
   161c8:	4291      	cmp	r1, r2
   161ca:	930b      	str	r3, [sp, #44]	; 0x2c
   161cc:	f180 80d3 	bvs.w	16376 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x598>
   161d0:	e7ff      	b.n	161d2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3f4>
   161d2:	980d      	ldr	r0, [sp, #52]	; 0x34
   161d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   161d6:	4288      	cmp	r0, r1
   161d8:	dcd3      	bgt.n	16182 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3a4>
   161da:	e7d6      	b.n	1618a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
                if (
   161dc:	981d      	ldr	r0, [sp, #116]	; 0x74
   161de:	07c1      	lsls	r1, r0, #31
   161e0:	2900      	cmp	r1, #0
   161e2:	f47f aee8 	bne.w	15fb6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1d8>
   161e6:	e6ea      	b.n	15fbe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
                else if let Some(fill) = self.style.fill_color {
   161e8:	9829      	ldr	r0, [sp, #164]	; 0xa4
   161ea:	8b01      	ldrh	r1, [r0, #24]
   161ec:	2901      	cmp	r1, #1
   161ee:	d03b      	beq.n	16268 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48a>
   161f0:	e057      	b.n	162a2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                        self.x,
   161f2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   161f4:	6901      	ldr	r1, [r0, #16]
                        self.y,
   161f6:	6942      	ldr	r2, [r0, #20]
                        self.style.stroke_color.expect("Expected stroke"),
   161f8:	8bc3      	ldrh	r3, [r0, #30]
   161fa:	8b80      	ldrh	r0, [r0, #28]
   161fc:	f240 7c64 	movw	ip, #1892	; 0x764
   16200:	f2c0 0c02 	movt	ip, #2
   16204:	46ee      	mov	lr, sp
   16206:	f8ce c000 	str.w	ip, [lr]
   1620a:	f240 7c54 	movw	ip, #1876	; 0x754
   1620e:	f2c0 0c02 	movt	ip, #2
   16212:	f04f 0e0f 	mov.w	lr, #15
   16216:	910a      	str	r1, [sp, #40]	; 0x28
   16218:	4619      	mov	r1, r3
   1621a:	9209      	str	r2, [sp, #36]	; 0x24
   1621c:	4662      	mov	r2, ip
   1621e:	4673      	mov	r3, lr
   16220:	f7fe f948 	bl	144b4 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>
   16224:	9008      	str	r0, [sp, #32]
   16226:	e7ff      	b.n	16228 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x44a>
                    out = Some((
   16228:	980a      	ldr	r0, [sp, #40]	; 0x28
   1622a:	9040      	str	r0, [sp, #256]	; 0x100
   1622c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1622e:	9141      	str	r1, [sp, #260]	; 0x104
   16230:	9a08      	ldr	r2, [sp, #32]
   16232:	f8ad 2108 	strh.w	r2, [sp, #264]	; 0x108
   16236:	9b40      	ldr	r3, [sp, #256]	; 0x100
   16238:	f8dd c104 	ldr.w	ip, [sp, #260]	; 0x104
   1623c:	f8dd e108 	ldr.w	lr, [sp, #264]	; 0x108
   16240:	f8cd e0fc 	str.w	lr, [sp, #252]	; 0xfc
   16244:	f8cd c0f8 	str.w	ip, [sp, #248]	; 0xf8
   16248:	933d      	str	r3, [sp, #244]	; 0xf4
   1624a:	2301      	movs	r3, #1
   1624c:	933c      	str	r3, [sp, #240]	; 0xf0
   1624e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   16250:	f8dd c0f4 	ldr.w	ip, [sp, #244]	; 0xf4
   16254:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   16258:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
   1625a:	9434      	str	r4, [sp, #208]	; 0xd0
   1625c:	f8cd e0cc 	str.w	lr, [sp, #204]	; 0xcc
   16260:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
   16264:	9331      	str	r3, [sp, #196]	; 0xc4
                if (
   16266:	e01c      	b.n	162a2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                else if let Some(fill) = self.style.fill_color {
   16268:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1626a:	8b41      	ldrh	r1, [r0, #26]
   1626c:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
                    out = Some((self.x, self.y, fill));
   16270:	6902      	ldr	r2, [r0, #16]
   16272:	6943      	ldr	r3, [r0, #20]
   16274:	9247      	str	r2, [sp, #284]	; 0x11c
   16276:	9348      	str	r3, [sp, #288]	; 0x120
   16278:	f8ad 1124 	strh.w	r1, [sp, #292]	; 0x124
   1627c:	9947      	ldr	r1, [sp, #284]	; 0x11c
   1627e:	9a48      	ldr	r2, [sp, #288]	; 0x120
   16280:	9b49      	ldr	r3, [sp, #292]	; 0x124
   16282:	9346      	str	r3, [sp, #280]	; 0x118
   16284:	9245      	str	r2, [sp, #276]	; 0x114
   16286:	9144      	str	r1, [sp, #272]	; 0x110
   16288:	2101      	movs	r1, #1
   1628a:	9143      	str	r1, [sp, #268]	; 0x10c
   1628c:	9943      	ldr	r1, [sp, #268]	; 0x10c
   1628e:	9a44      	ldr	r2, [sp, #272]	; 0x110
   16290:	9b45      	ldr	r3, [sp, #276]	; 0x114
   16292:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   16296:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
   1629a:	9333      	str	r3, [sp, #204]	; 0xcc
   1629c:	9232      	str	r2, [sp, #200]	; 0xc8
   1629e:	9131      	str	r1, [sp, #196]	; 0xc4
                else if let Some(fill) = self.style.fill_color {
   162a0:	e7ff      	b.n	162a2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
            if self.x >= 0 && self.y >= 0 {
   162a2:	e7ff      	b.n	162a4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
            self.x += 1;
   162a4:	9829      	ldr	r0, [sp, #164]	; 0xa4
   162a6:	6901      	ldr	r1, [r0, #16]
   162a8:	1c4a      	adds	r2, r1, #1
   162aa:	4613      	mov	r3, r2
   162ac:	428a      	cmp	r2, r1
   162ae:	9307      	str	r3, [sp, #28]
   162b0:	d66d      	bvs.n	1638e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5b0>
   162b2:	e7ff      	b.n	162b4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4d6>
   162b4:	9807      	ldr	r0, [sp, #28]
   162b6:	9929      	ldr	r1, [sp, #164]	; 0xa4
   162b8:	6108      	str	r0, [r1, #16]
            if self.x > self.bottom_right[0] {
   162ba:	690a      	ldr	r2, [r1, #16]
   162bc:	f101 0008 	add.w	r0, r1, #8
   162c0:	2100      	movs	r1, #0
   162c2:	9206      	str	r2, [sp, #24]
   162c4:	f7fb fa36 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   162c8:	9005      	str	r0, [sp, #20]
   162ca:	e7ff      	b.n	162cc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4ee>
   162cc:	9805      	ldr	r0, [sp, #20]
   162ce:	6801      	ldr	r1, [r0, #0]
   162d0:	9a06      	ldr	r2, [sp, #24]
   162d2:	428a      	cmp	r2, r1
   162d4:	dd16      	ble.n	16304 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   162d6:	e7ff      	b.n	162d8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4fa>
   162d8:	2100      	movs	r1, #0
                self.x = self.top_left[0];
   162da:	9829      	ldr	r0, [sp, #164]	; 0xa4
   162dc:	f7fb fa2a 	bl	11734 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   162e0:	9004      	str	r0, [sp, #16]
   162e2:	e7ff      	b.n	162e4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x506>
   162e4:	9804      	ldr	r0, [sp, #16]
   162e6:	6801      	ldr	r1, [r0, #0]
   162e8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   162ea:	6111      	str	r1, [r2, #16]
                self.y += 1;
   162ec:	6951      	ldr	r1, [r2, #20]
   162ee:	1c4b      	adds	r3, r1, #1
   162f0:	469c      	mov	ip, r3
   162f2:	428b      	cmp	r3, r1
   162f4:	f8cd c00c 	str.w	ip, [sp, #12]
   162f8:	d655      	bvs.n	163a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5c8>
   162fa:	e7ff      	b.n	162fc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x51e>
   162fc:	9803      	ldr	r0, [sp, #12]
   162fe:	9929      	ldr	r1, [sp, #164]	; 0xa4
   16300:	6148      	str	r0, [r1, #20]
            if self.x > self.bottom_right[0] {
   16302:	e7ff      	b.n	16304 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   16304:	a831      	add	r0, sp, #196	; 0xc4
            if out.is_some() {
   16306:	f7fe f96f 	bl	145e8 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>
   1630a:	9002      	str	r0, [sp, #8]
   1630c:	e7ff      	b.n	1630e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x530>
   1630e:	9802      	ldr	r0, [sp, #8]
   16310:	07c1      	lsls	r1, r0, #31
   16312:	2900      	cmp	r1, #0
   16314:	d101      	bne.n	1631a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53c>
   16316:	e7ff      	b.n	16318 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53a>
        let pixel = loop {
   16318:	e606      	b.n	15f28 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
                break out;
   1631a:	9831      	ldr	r0, [sp, #196]	; 0xc4
   1631c:	9932      	ldr	r1, [sp, #200]	; 0xc8
   1631e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   16320:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   16322:	9330      	str	r3, [sp, #192]	; 0xc0
   16324:	922f      	str	r2, [sp, #188]	; 0xbc
   16326:	912e      	str	r1, [sp, #184]	; 0xb8
   16328:	902d      	str	r0, [sp, #180]	; 0xb4
   1632a:	e5f0      	b.n	15f0e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
    }
   1632c:	e5ed      	b.n	15f0a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   1632e:	f240 60e0 	movw	r0, #1760	; 0x6e0
   16332:	f2c0 0002 	movt	r0, #2
   16336:	f240 62cc 	movw	r2, #1740	; 0x6cc
   1633a:	f2c0 0202 	movt	r2, #2
   1633e:	211c      	movs	r1, #28
   16340:	f000 ffc4 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16344:	defe      	udf	#254	; 0xfe
                || (self.y <= br[1] && self.y > br[1] - border_width)
   16346:	f240 7010 	movw	r0, #1808	; 0x710
   1634a:	f2c0 0002 	movt	r0, #2
   1634e:	f240 62fc 	movw	r2, #1788	; 0x6fc
   16352:	f2c0 0202 	movt	r2, #2
   16356:	2121      	movs	r1, #33	; 0x21
   16358:	f000 ffb8 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1635c:	defe      	udf	#254	; 0xfe
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   1635e:	f240 60e0 	movw	r0, #1760	; 0x6e0
   16362:	f2c0 0002 	movt	r0, #2
   16366:	f240 7234 	movw	r2, #1844	; 0x734
   1636a:	f2c0 0202 	movt	r2, #2
   1636e:	211c      	movs	r1, #28
   16370:	f000 ffac 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16374:	defe      	udf	#254	; 0xfe
                || (self.x <= br[0] && self.x > br[0] - border_width)
   16376:	f240 7010 	movw	r0, #1808	; 0x710
   1637a:	f2c0 0002 	movt	r0, #2
   1637e:	f240 7244 	movw	r2, #1860	; 0x744
   16382:	f2c0 0202 	movt	r2, #2
   16386:	2121      	movs	r1, #33	; 0x21
   16388:	f000 ffa0 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1638c:	defe      	udf	#254	; 0xfe
            self.x += 1;
   1638e:	f240 60e0 	movw	r0, #1760	; 0x6e0
   16392:	f2c0 0002 	movt	r0, #2
   16396:	f240 7274 	movw	r2, #1908	; 0x774
   1639a:	f2c0 0202 	movt	r2, #2
   1639e:	211c      	movs	r1, #28
   163a0:	f000 ff94 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   163a4:	defe      	udf	#254	; 0xfe
                self.y += 1;
   163a6:	f240 60e0 	movw	r0, #1760	; 0x6e0
   163aa:	f2c0 0002 	movt	r0, #2
   163ae:	f240 7284 	movw	r2, #1924	; 0x784
   163b2:	f2c0 0202 	movt	r2, #2
   163b6:	211c      	movs	r1, #28
   163b8:	f000 ff88 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   163bc:	defe      	udf	#254	; 0xfe

000163be <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>:
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   163be:	b580      	push	{r7, lr}
   163c0:	b08a      	sub	sp, #40	; 0x28
   163c2:	680a      	ldr	r2, [r1, #0]
   163c4:	9207      	str	r2, [sp, #28]
   163c6:	684b      	ldr	r3, [r1, #4]
   163c8:	9308      	str	r3, [sp, #32]
   163ca:	8909      	ldrh	r1, [r1, #8]
   163cc:	468c      	mov	ip, r1
   163ce:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
   163d2:	9005      	str	r0, [sp, #20]
   163d4:	4610      	mov	r0, r2
   163d6:	4619      	mov	r1, r3
   163d8:	f8cd c010 	str.w	ip, [sp, #16]
   163dc:	f7fb f9a1 	bl	11722 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
   163e0:	9003      	str	r0, [sp, #12]
   163e2:	9102      	str	r1, [sp, #8]
   163e4:	e7ff      	b.n	163e6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x28>
   163e6:	9803      	ldr	r0, [sp, #12]
   163e8:	9902      	ldr	r1, [sp, #8]
   163ea:	f7fb f9ec 	bl	117c6 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>
   163ee:	9001      	str	r0, [sp, #4]
   163f0:	9100      	str	r1, [sp, #0]
   163f2:	e7ff      	b.n	163f4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x36>
   163f4:	9801      	ldr	r0, [sp, #4]
   163f6:	9905      	ldr	r1, [sp, #20]
   163f8:	6008      	str	r0, [r1, #0]
   163fa:	9a00      	ldr	r2, [sp, #0]
   163fc:	604a      	str	r2, [r1, #4]
   163fe:	9b04      	ldr	r3, [sp, #16]
   16400:	810b      	strh	r3, [r1, #8]
   16402:	b00a      	add	sp, #40	; 0x28
   16404:	bd80      	pop	{r7, pc}

00016406 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   16406:	b510      	push	{r4, lr}
   16408:	b08c      	sub	sp, #48	; 0x30
   1640a:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   1640e:	9108      	str	r1, [sp, #32]
   16410:	9209      	str	r2, [sp, #36]	; 0x24
   16412:	930a      	str	r3, [sp, #40]	; 0x28
   16414:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   16418:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   1641c:	9004      	str	r0, [sp, #16]
   1641e:	4670      	mov	r0, lr
   16420:	9303      	str	r3, [sp, #12]
   16422:	9202      	str	r2, [sp, #8]
   16424:	9101      	str	r1, [sp, #4]
   16426:	f8cd c000 	str.w	ip, [sp]
   1642a:	f000 f818 	bl	1645e <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   1642e:	e7ff      	b.n	16430 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   16430:	9801      	ldr	r0, [sp, #4]
   16432:	9904      	ldr	r1, [sp, #16]
   16434:	6008      	str	r0, [r1, #0]
   16436:	9a02      	ldr	r2, [sp, #8]
   16438:	604a      	str	r2, [r1, #4]
   1643a:	9b03      	ldr	r3, [sp, #12]
   1643c:	608b      	str	r3, [r1, #8]
   1643e:	f8dd c000 	ldr.w	ip, [sp]
   16442:	f8c1 c00c 	str.w	ip, [r1, #12]
   16446:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   1644a:	f8a1 e018 	strh.w	lr, [r1, #24]
   1644e:	f8dd e014 	ldr.w	lr, [sp, #20]
   16452:	9c06      	ldr	r4, [sp, #24]
   16454:	614c      	str	r4, [r1, #20]
   16456:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   1645a:	b00c      	add	sp, #48	; 0x30
   1645c:	bd10      	pop	{r4, pc}

0001645e <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   1645e:	b082      	sub	sp, #8
   16460:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   16462:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   16466:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   1646a:	f8bd 1000 	ldrh.w	r1, [sp]
   1646e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   16472:	8001      	strh	r1, [r0, #0]
   16474:	8042      	strh	r2, [r0, #2]
   16476:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1647a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1647e:	8081      	strh	r1, [r0, #4]
   16480:	80c2      	strh	r2, [r0, #6]
   16482:	2101      	movs	r1, #1
   16484:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   16486:	b002      	add	sp, #8
   16488:	4770      	bx	lr

0001648a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
#[derive(ToPrimitive)]
   1648a:	b084      	sub	sp, #16
   1648c:	460a      	mov	r2, r1
   1648e:	4603      	mov	r3, r0
   16490:	9103      	str	r1, [sp, #12]
   16492:	9002      	str	r0, [sp, #8]
   16494:	b004      	add	sp, #16
   16496:	4770      	bx	lr

00016498 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>:
   16498:	b510      	push	{r4, lr}
   1649a:	b088      	sub	sp, #32
   1649c:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   164a0:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
   164a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   164a6:	9102      	str	r1, [sp, #8]
   164a8:	9203      	str	r2, [sp, #12]
   164aa:	9304      	str	r3, [sp, #16]
   164ac:	9405      	str	r4, [sp, #20]
   164ae:	f8cd e018 	str.w	lr, [sp, #24]
   164b2:	f8cd c01c 	str.w	ip, [sp, #28]
   164b6:	f8cd e000 	str.w	lr, [sp]
   164ba:	f8cd c004 	str.w	ip, [sp, #4]
   164be:	6001      	str	r1, [r0, #0]
   164c0:	6042      	str	r2, [r0, #4]
   164c2:	9900      	ldr	r1, [sp, #0]
   164c4:	9a01      	ldr	r2, [sp, #4]
   164c6:	6081      	str	r1, [r0, #8]
   164c8:	60c2      	str	r2, [r0, #12]
   164ca:	6103      	str	r3, [r0, #16]
   164cc:	6144      	str	r4, [r0, #20]
   164ce:	b008      	add	sp, #32
   164d0:	bd10      	pop	{r4, pc}

000164d2 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>:
   164d2:	b580      	push	{r7, lr}
   164d4:	b086      	sub	sp, #24
   164d6:	f8dd c020 	ldr.w	ip, [sp, #32]
   164da:	9102      	str	r1, [sp, #8]
   164dc:	9203      	str	r2, [sp, #12]
   164de:	9304      	str	r3, [sp, #16]
   164e0:	f8cd c014 	str.w	ip, [sp, #20]
   164e4:	f04f 0e00 	mov.w	lr, #0
   164e8:	f8cd e004 	str.w	lr, [sp, #4]
   164ec:	f8cd e000 	str.w	lr, [sp]
   164f0:	f8cd e000 	str.w	lr, [sp]
   164f4:	6001      	str	r1, [r0, #0]
   164f6:	6042      	str	r2, [r0, #4]
   164f8:	9900      	ldr	r1, [sp, #0]
   164fa:	9a01      	ldr	r2, [sp, #4]
   164fc:	6081      	str	r1, [r0, #8]
   164fe:	60c2      	str	r2, [r0, #12]
   16500:	6103      	str	r3, [r0, #16]
   16502:	f8c0 c014 	str.w	ip, [r0, #20]
   16506:	b006      	add	sp, #24
   16508:	bd80      	pop	{r7, pc}

0001650a <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>:
   1650a:	b580      	push	{r7, lr}
   1650c:	b086      	sub	sp, #24
   1650e:	460a      	mov	r2, r1
   16510:	4603      	mov	r3, r0
   16512:	f88d 0014 	strb.w	r0, [sp, #20]
   16516:	f88d 1015 	strb.w	r1, [sp, #21]
   1651a:	9203      	str	r2, [sp, #12]
   1651c:	9302      	str	r3, [sp, #8]
   1651e:	f000 f865 	bl	165ec <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
   16522:	9001      	str	r0, [sp, #4]
   16524:	9100      	str	r1, [sp, #0]
   16526:	e7ff      	b.n	16528 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x1e>
   16528:	9801      	ldr	r0, [sp, #4]
   1652a:	f88d 0016 	strb.w	r0, [sp, #22]
   1652e:	9900      	ldr	r1, [sp, #0]
   16530:	f001 0201 	and.w	r2, r1, #1
   16534:	f88d 2017 	strb.w	r2, [sp, #23]
   16538:	2a00      	cmp	r2, #0
   1653a:	d107      	bne.n	1654c <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x42>
   1653c:	e7ff      	b.n	1653e <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x34>
   1653e:	9801      	ldr	r0, [sp, #4]
   16540:	f88d 0011 	strb.w	r0, [sp, #17]
   16544:	2101      	movs	r1, #1
   16546:	f88d 1010 	strb.w	r1, [sp, #16]
   1654a:	e003      	b.n	16554 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   1654c:	2000      	movs	r0, #0
   1654e:	f88d 0010 	strb.w	r0, [sp, #16]
   16552:	e7ff      	b.n	16554 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   16554:	f89d 0010 	ldrb.w	r0, [sp, #16]
   16558:	f89d 1011 	ldrb.w	r1, [sp, #17]
   1655c:	b006      	add	sp, #24
   1655e:	bd80      	pop	{r7, pc}

00016560 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>:
   16560:	b082      	sub	sp, #8
   16562:	460a      	mov	r2, r1
   16564:	4603      	mov	r3, r0
   16566:	f88d 0005 	strb.w	r0, [sp, #5]
   1656a:	f88d 1006 	strb.w	r1, [sp, #6]
   1656e:	4408      	add	r0, r1
   16570:	f88d 0007 	strb.w	r0, [sp, #7]
   16574:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16578:	9000      	str	r0, [sp, #0]
   1657a:	e7ff      	b.n	1657c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE+0x1c>
   1657c:	9800      	ldr	r0, [sp, #0]
   1657e:	b002      	add	sp, #8
   16580:	4770      	bx	lr

00016582 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>:
   16582:	b084      	sub	sp, #16
   16584:	4602      	mov	r2, r0
   16586:	f88d 0007 	strb.w	r0, [sp, #7]
   1658a:	9102      	str	r1, [sp, #8]
   1658c:	f001 0107 	and.w	r1, r1, #7
   16590:	4088      	lsls	r0, r1
   16592:	f88d 000f 	strb.w	r0, [sp, #15]
   16596:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1659a:	9000      	str	r0, [sp, #0]
   1659c:	e7ff      	b.n	1659e <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E+0x1c>
   1659e:	9800      	ldr	r0, [sp, #0]
   165a0:	b004      	add	sp, #16
   165a2:	4770      	bx	lr

000165a4 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>:
   165a4:	b084      	sub	sp, #16
   165a6:	b2c2      	uxtb	r2, r0
   165a8:	4603      	mov	r3, r0
   165aa:	f88d 0007 	strb.w	r0, [sp, #7]
   165ae:	9102      	str	r1, [sp, #8]
   165b0:	f001 0007 	and.w	r0, r1, #7
   165b4:	fa22 f000 	lsr.w	r0, r2, r0
   165b8:	f88d 000f 	strb.w	r0, [sp, #15]
   165bc:	f89d 000f 	ldrb.w	r0, [sp, #15]
   165c0:	9000      	str	r0, [sp, #0]
   165c2:	e7ff      	b.n	165c4 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E+0x20>
   165c4:	9800      	ldr	r0, [sp, #0]
   165c6:	b004      	add	sp, #16
   165c8:	4770      	bx	lr

000165ca <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>:
   165ca:	b082      	sub	sp, #8
   165cc:	460a      	mov	r2, r1
   165ce:	4603      	mov	r3, r0
   165d0:	f88d 0005 	strb.w	r0, [sp, #5]
   165d4:	f88d 1006 	strb.w	r1, [sp, #6]
   165d8:	1a40      	subs	r0, r0, r1
   165da:	f88d 0007 	strb.w	r0, [sp, #7]
   165de:	f89d 0007 	ldrb.w	r0, [sp, #7]
   165e2:	9000      	str	r0, [sp, #0]
   165e4:	e7ff      	b.n	165e6 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E+0x1c>
   165e6:	9800      	ldr	r0, [sp, #0]
   165e8:	b002      	add	sp, #8
   165ea:	4770      	bx	lr

000165ec <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>:
   165ec:	b084      	sub	sp, #16
   165ee:	b2c2      	uxtb	r2, r0
   165f0:	460b      	mov	r3, r1
   165f2:	4684      	mov	ip, r0
   165f4:	f88d 000a 	strb.w	r0, [sp, #10]
   165f8:	f88d 100b 	strb.w	r1, [sp, #11]
   165fc:	fa52 f081 	uxtab	r0, r2, r1
   16600:	b2c1      	uxtb	r1, r0
   16602:	1a09      	subs	r1, r1, r0
   16604:	bf18      	it	ne
   16606:	2101      	movne	r1, #1
   16608:	f88d 000c 	strb.w	r0, [sp, #12]
   1660c:	f88d 100d 	strb.w	r1, [sp, #13]
   16610:	f89d 000c 	ldrb.w	r0, [sp, #12]
   16614:	f89d 100d 	ldrb.w	r1, [sp, #13]
   16618:	9001      	str	r0, [sp, #4]
   1661a:	9100      	str	r1, [sp, #0]
   1661c:	e7ff      	b.n	1661e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E+0x32>
   1661e:	9801      	ldr	r0, [sp, #4]
   16620:	f88d 000e 	strb.w	r0, [sp, #14]
   16624:	9900      	ldr	r1, [sp, #0]
   16626:	f001 0201 	and.w	r2, r1, #1
   1662a:	f88d 200f 	strb.w	r2, [sp, #15]
   1662e:	f88d 0008 	strb.w	r0, [sp, #8]
   16632:	f88d 2009 	strb.w	r2, [sp, #9]
   16636:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1663a:	f89d 1009 	ldrb.w	r1, [sp, #9]
   1663e:	b004      	add	sp, #16
   16640:	4770      	bx	lr

00016642 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>:
   16642:	b580      	push	{r7, lr}
   16644:	b084      	sub	sp, #16
   16646:	b2ca      	uxtb	r2, r1
   16648:	b2c3      	uxtb	r3, r0
   1664a:	468c      	mov	ip, r1
   1664c:	4686      	mov	lr, r0
   1664e:	f88d 000a 	strb.w	r0, [sp, #10]
   16652:	f88d 100b 	strb.w	r1, [sp, #11]
   16656:	1a98      	subs	r0, r3, r2
   16658:	b2c1      	uxtb	r1, r0
   1665a:	1a09      	subs	r1, r1, r0
   1665c:	bf18      	it	ne
   1665e:	2101      	movne	r1, #1
   16660:	f88d 000c 	strb.w	r0, [sp, #12]
   16664:	f88d 100d 	strb.w	r1, [sp, #13]
   16668:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1666c:	f89d 100d 	ldrb.w	r1, [sp, #13]
   16670:	9001      	str	r0, [sp, #4]
   16672:	9100      	str	r1, [sp, #0]
   16674:	e7ff      	b.n	16676 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E+0x34>
   16676:	9801      	ldr	r0, [sp, #4]
   16678:	f88d 000e 	strb.w	r0, [sp, #14]
   1667c:	9900      	ldr	r1, [sp, #0]
   1667e:	f001 0201 	and.w	r2, r1, #1
   16682:	f88d 200f 	strb.w	r2, [sp, #15]
   16686:	f88d 0008 	strb.w	r0, [sp, #8]
   1668a:	f88d 2009 	strb.w	r2, [sp, #9]
   1668e:	f89d 0008 	ldrb.w	r0, [sp, #8]
   16692:	f89d 1009 	ldrb.w	r1, [sp, #9]
   16696:	b004      	add	sp, #16
   16698:	bd80      	pop	{r7, pc}

0001669a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>:
   1669a:	b083      	sub	sp, #12
   1669c:	460a      	mov	r2, r1
   1669e:	4603      	mov	r3, r0
   166a0:	f8ad 0006 	strh.w	r0, [sp, #6]
   166a4:	f8ad 1008 	strh.w	r1, [sp, #8]
   166a8:	4408      	add	r0, r1
   166aa:	f8ad 000a 	strh.w	r0, [sp, #10]
   166ae:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   166b2:	9000      	str	r0, [sp, #0]
   166b4:	e7ff      	b.n	166b6 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E+0x1c>
   166b6:	9800      	ldr	r0, [sp, #0]
   166b8:	b003      	add	sp, #12
   166ba:	4770      	bx	lr

000166bc <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>:
   166bc:	b083      	sub	sp, #12
   166be:	460a      	mov	r2, r1
   166c0:	4603      	mov	r3, r0
   166c2:	f8ad 0006 	strh.w	r0, [sp, #6]
   166c6:	f8ad 1008 	strh.w	r1, [sp, #8]
   166ca:	1a40      	subs	r0, r0, r1
   166cc:	f8ad 000a 	strh.w	r0, [sp, #10]
   166d0:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   166d4:	9000      	str	r0, [sp, #0]
   166d6:	e7ff      	b.n	166d8 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E+0x1c>
   166d8:	9800      	ldr	r0, [sp, #0]
   166da:	b003      	add	sp, #12
   166dc:	4770      	bx	lr

000166de <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>:
   166de:	b5b0      	push	{r4, r5, r7, lr}
   166e0:	b088      	sub	sp, #32
   166e2:	469c      	mov	ip, r3
   166e4:	4696      	mov	lr, r2
   166e6:	460c      	mov	r4, r1
   166e8:	4605      	mov	r5, r0
   166ea:	9103      	str	r1, [sp, #12]
   166ec:	9002      	str	r0, [sp, #8]
   166ee:	9305      	str	r3, [sp, #20]
   166f0:	9204      	str	r2, [sp, #16]
   166f2:	1a80      	subs	r0, r0, r2
   166f4:	eb61 0103 	sbc.w	r1, r1, r3
   166f8:	9107      	str	r1, [sp, #28]
   166fa:	9006      	str	r0, [sp, #24]
   166fc:	9806      	ldr	r0, [sp, #24]
   166fe:	9907      	ldr	r1, [sp, #28]
   16700:	9001      	str	r0, [sp, #4]
   16702:	9100      	str	r1, [sp, #0]
   16704:	e7ff      	b.n	16706 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE+0x28>
   16706:	9801      	ldr	r0, [sp, #4]
   16708:	9900      	ldr	r1, [sp, #0]
   1670a:	b008      	add	sp, #32
   1670c:	bdb0      	pop	{r4, r5, r7, pc}

0001670e <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>:
    fn le(&self, other: &LevelFilter) -> bool {
   1670e:	b082      	sub	sp, #8
   16710:	9000      	str	r0, [sp, #0]
   16712:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   16714:	6800      	ldr	r0, [r0, #0]
   16716:	6809      	ldr	r1, [r1, #0]
   16718:	2200      	movs	r2, #0
   1671a:	4288      	cmp	r0, r1
   1671c:	bf98      	it	ls
   1671e:	2201      	movls	r2, #1
    }
   16720:	4610      	mov	r0, r2
   16722:	b002      	add	sp, #8
   16724:	4770      	bx	lr

00016726 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>:
   16726:	b081      	sub	sp, #4
   16728:	4601      	mov	r1, r0
   1672a:	f88d 0003 	strb.w	r0, [sp, #3]
   1672e:	b2c0      	uxtb	r0, r0
   16730:	b001      	add	sp, #4
   16732:	4770      	bx	lr

00016734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h0faaf188ff940782E>:
   16734:	b081      	sub	sp, #4
   16736:	4601      	mov	r1, r0
   16738:	f88d 0003 	strb.w	r0, [sp, #3]
   1673c:	b2c0      	uxtb	r0, r0
   1673e:	b001      	add	sp, #4
   16740:	4770      	bx	lr

00016742 <_ZN4core3mem4swap17h206518364108b51fE>:
   16742:	b580      	push	{r7, lr}
   16744:	b082      	sub	sp, #8
   16746:	9000      	str	r0, [sp, #0]
   16748:	9101      	str	r1, [sp, #4]
   1674a:	f000 fbb9 	bl	16ec0 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>
   1674e:	e7ff      	b.n	16750 <_ZN4core3mem4swap17h206518364108b51fE+0xe>
   16750:	b002      	add	sp, #8
   16752:	bd80      	pop	{r7, pc}

00016754 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hc6fa01816813026eE>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   16754:	2001      	movs	r0, #1
        1
    }
   16756:	4770      	bx	lr

00016758 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>:
   16758:	b580      	push	{r7, lr}
   1675a:	b088      	sub	sp, #32
   1675c:	9004      	str	r0, [sp, #16]
   1675e:	9105      	str	r1, [sp, #20]
   16760:	9206      	str	r2, [sp, #24]
   16762:	9307      	str	r3, [sp, #28]
   16764:	9003      	str	r0, [sp, #12]
   16766:	4610      	mov	r0, r2
   16768:	9102      	str	r1, [sp, #8]
   1676a:	4619      	mov	r1, r3
   1676c:	9a03      	ldr	r2, [sp, #12]
   1676e:	9b02      	ldr	r3, [sp, #8]
   16770:	f7f2 fb23 	bl	8dba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
   16774:	9001      	str	r0, [sp, #4]
   16776:	9100      	str	r1, [sp, #0]
   16778:	e7ff      	b.n	1677a <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE+0x22>
   1677a:	9801      	ldr	r0, [sp, #4]
   1677c:	9900      	ldr	r1, [sp, #0]
   1677e:	b008      	add	sp, #32
   16780:	bd80      	pop	{r7, pc}

00016782 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>:
   16782:	b082      	sub	sp, #8
   16784:	9000      	str	r0, [sp, #0]
   16786:	9101      	str	r1, [sp, #4]
   16788:	7800      	ldrb	r0, [r0, #0]
   1678a:	7809      	ldrb	r1, [r1, #0]
   1678c:	2200      	movs	r2, #0
   1678e:	4288      	cmp	r0, r1
   16790:	bf38      	it	cc
   16792:	2201      	movcc	r2, #1
   16794:	4610      	mov	r0, r2
   16796:	b002      	add	sp, #8
   16798:	4770      	bx	lr

0001679a <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>:
   1679a:	b580      	push	{r7, lr}
   1679c:	b088      	sub	sp, #32
   1679e:	9005      	str	r0, [sp, #20]
   167a0:	9106      	str	r1, [sp, #24]
   167a2:	9002      	str	r0, [sp, #8]
   167a4:	4608      	mov	r0, r1
   167a6:	f000 fc66 	bl	17076 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>
   167aa:	f88d 1011 	strb.w	r1, [sp, #17]
   167ae:	f88d 0010 	strb.w	r0, [sp, #16]
   167b2:	e7ff      	b.n	167b4 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x1a>
   167b4:	f89d 0010 	ldrb.w	r0, [sp, #16]
   167b8:	07c1      	lsls	r1, r0, #31
   167ba:	2900      	cmp	r1, #0
   167bc:	d005      	beq.n	167ca <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x30>
   167be:	e7ff      	b.n	167c0 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x26>
   167c0:	2000      	movs	r0, #0
   167c2:	f88d 000c 	strb.w	r0, [sp, #12]
   167c6:	e011      	b.n	167ec <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   167c8:	defe      	udf	#254	; 0xfe
   167ca:	f89d 0011 	ldrb.w	r0, [sp, #17]
   167ce:	f88d 001f 	strb.w	r0, [sp, #31]
   167d2:	9902      	ldr	r1, [sp, #8]
   167d4:	780a      	ldrb	r2, [r1, #0]
   167d6:	9001      	str	r0, [sp, #4]
   167d8:	4610      	mov	r0, r2
   167da:	9901      	ldr	r1, [sp, #4]
   167dc:	f7ff fe95 	bl	1650a <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>
   167e0:	f88d 100d 	strb.w	r1, [sp, #13]
   167e4:	f88d 000c 	strb.w	r0, [sp, #12]
   167e8:	e7ff      	b.n	167ea <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x50>
   167ea:	e7ff      	b.n	167ec <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   167ec:	f89d 000c 	ldrb.w	r0, [sp, #12]
   167f0:	f89d 100d 	ldrb.w	r1, [sp, #13]
   167f4:	b008      	add	sp, #32
   167f6:	bd80      	pop	{r7, pc}

000167f8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   167f8:	b580      	push	{r7, lr}
   167fa:	b088      	sub	sp, #32
   167fc:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   167fe:	1d01      	adds	r1, r0, #4
   16800:	9106      	str	r1, [sp, #24]
   16802:	9107      	str	r1, [sp, #28]
   16804:	9004      	str	r0, [sp, #16]
   16806:	9103      	str	r1, [sp, #12]
   16808:	e7ff      	b.n	1680a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   1680a:	9804      	ldr	r0, [sp, #16]
   1680c:	6801      	ldr	r1, [r0, #0]
   1680e:	9803      	ldr	r0, [sp, #12]
   16810:	f7f2 fb83 	bl	8f1a <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   16814:	9002      	str	r0, [sp, #8]
   16816:	9101      	str	r1, [sp, #4]
   16818:	e7ff      	b.n	1681a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   1681a:	9802      	ldr	r0, [sp, #8]
   1681c:	9901      	ldr	r1, [sp, #4]
   1681e:	b008      	add	sp, #32
   16820:	bd80      	pop	{r7, pc}

00016822 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   16822:	b580      	push	{r7, lr}
   16824:	b088      	sub	sp, #32
   16826:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   16828:	1d01      	adds	r1, r0, #4
   1682a:	9106      	str	r1, [sp, #24]
   1682c:	9107      	str	r1, [sp, #28]
   1682e:	9004      	str	r0, [sp, #16]
   16830:	9103      	str	r1, [sp, #12]
   16832:	e7ff      	b.n	16834 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE+0x12>
   16834:	9804      	ldr	r0, [sp, #16]
   16836:	6801      	ldr	r1, [r0, #0]
   16838:	9803      	ldr	r0, [sp, #12]
   1683a:	f7f2 fb6e 	bl	8f1a <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   1683e:	9002      	str	r0, [sp, #8]
   16840:	9101      	str	r1, [sp, #4]
   16842:	e7ff      	b.n	16844 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE+0x22>
    }
   16844:	9802      	ldr	r0, [sp, #8]
   16846:	9901      	ldr	r1, [sp, #4]
   16848:	b008      	add	sp, #32
   1684a:	bd80      	pop	{r7, pc}

0001684c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   1684c:	b580      	push	{r7, lr}
   1684e:	b08a      	sub	sp, #40	; 0x28
   16850:	460a      	mov	r2, r1
   16852:	9006      	str	r0, [sp, #24]
   16854:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   16858:	1d01      	adds	r1, r0, #4
   1685a:	9108      	str	r1, [sp, #32]
   1685c:	9109      	str	r1, [sp, #36]	; 0x24
   1685e:	9005      	str	r0, [sp, #20]
   16860:	9204      	str	r2, [sp, #16]
   16862:	9103      	str	r1, [sp, #12]
   16864:	e7ff      	b.n	16866 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x1a>
            .add(self.len)
   16866:	9805      	ldr	r0, [sp, #20]
   16868:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   1686a:	9803      	ldr	r0, [sp, #12]
   1686c:	f7fb f9a2 	bl	11bb4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16870:	9002      	str	r0, [sp, #8]
   16872:	e7ff      	b.n	16874 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x28>
   16874:	9802      	ldr	r0, [sp, #8]
   16876:	9904      	ldr	r1, [sp, #16]
   16878:	f000 f994 	bl	16ba4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   1687c:	e7ff      	b.n	1687e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x32>
        self.len += 1;
   1687e:	9805      	ldr	r0, [sp, #20]
   16880:	6801      	ldr	r1, [r0, #0]
   16882:	1c4a      	adds	r2, r1, #1
   16884:	4613      	mov	r3, r2
   16886:	428a      	cmp	r2, r1
   16888:	9301      	str	r3, [sp, #4]
   1688a:	d305      	bcc.n	16898 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x4c>
   1688c:	e7ff      	b.n	1688e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x42>
   1688e:	9801      	ldr	r0, [sp, #4]
   16890:	9905      	ldr	r1, [sp, #20]
   16892:	6008      	str	r0, [r1, #0]
    }
   16894:	b00a      	add	sp, #40	; 0x28
   16896:	bd80      	pop	{r7, pc}
        self.len += 1;
   16898:	f640 0000 	movw	r0, #2048	; 0x800
   1689c:	f2c0 0002 	movt	r0, #2
   168a0:	f240 72ec 	movw	r2, #2028	; 0x7ec
   168a4:	f2c0 0202 	movt	r2, #2
   168a8:	211c      	movs	r1, #28
   168aa:	f000 fd0f 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   168ae:	defe      	udf	#254	; 0xfe

000168b0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   168b0:	b580      	push	{r7, lr}
   168b2:	b08a      	sub	sp, #40	; 0x28
   168b4:	460a      	mov	r2, r1
   168b6:	9006      	str	r0, [sp, #24]
   168b8:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   168bc:	1d01      	adds	r1, r0, #4
   168be:	9108      	str	r1, [sp, #32]
   168c0:	9109      	str	r1, [sp, #36]	; 0x24
   168c2:	9005      	str	r0, [sp, #20]
   168c4:	9204      	str	r2, [sp, #16]
   168c6:	9103      	str	r1, [sp, #12]
   168c8:	e7ff      	b.n	168ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   168ca:	9805      	ldr	r0, [sp, #20]
   168cc:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   168ce:	9803      	ldr	r0, [sp, #12]
   168d0:	f7fb f970 	bl	11bb4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   168d4:	9002      	str	r0, [sp, #8]
   168d6:	e7ff      	b.n	168d8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   168d8:	9802      	ldr	r0, [sp, #8]
   168da:	9904      	ldr	r1, [sp, #16]
   168dc:	f000 f962 	bl	16ba4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   168e0:	e7ff      	b.n	168e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   168e2:	9805      	ldr	r0, [sp, #20]
   168e4:	6801      	ldr	r1, [r0, #0]
   168e6:	1c4a      	adds	r2, r1, #1
   168e8:	4613      	mov	r3, r2
   168ea:	428a      	cmp	r2, r1
   168ec:	9301      	str	r3, [sp, #4]
   168ee:	d305      	bcc.n	168fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   168f0:	e7ff      	b.n	168f2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   168f2:	9801      	ldr	r0, [sp, #4]
   168f4:	9905      	ldr	r1, [sp, #20]
   168f6:	6008      	str	r0, [r1, #0]
    }
   168f8:	b00a      	add	sp, #40	; 0x28
   168fa:	bd80      	pop	{r7, pc}
        self.len += 1;
   168fc:	f640 0000 	movw	r0, #2048	; 0x800
   16900:	f2c0 0002 	movt	r0, #2
   16904:	f240 72ec 	movw	r2, #2028	; 0x7ec
   16908:	f2c0 0202 	movt	r2, #2
   1690c:	211c      	movs	r1, #28
   1690e:	f000 fcdd 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16912:	defe      	udf	#254	; 0xfe

00016914 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   16914:	b580      	push	{r7, lr}
   16916:	b094      	sub	sp, #80	; 0x50
   16918:	900e      	str	r0, [sp, #56]	; 0x38
   1691a:	910f      	str	r1, [sp, #60]	; 0x3c
   1691c:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   1691e:	6803      	ldr	r3, [r0, #0]
   16920:	9009      	str	r0, [sp, #36]	; 0x24
   16922:	4608      	mov	r0, r1
   16924:	9108      	str	r1, [sp, #32]
   16926:	4611      	mov	r1, r2
   16928:	9207      	str	r2, [sp, #28]
   1692a:	9306      	str	r3, [sp, #24]
   1692c:	f7fb f9d2 	bl	11cd4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   16930:	9005      	str	r0, [sp, #20]
   16932:	e7ff      	b.n	16934 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x20>
   16934:	9806      	ldr	r0, [sp, #24]
   16936:	9905      	ldr	r1, [sp, #20]
   16938:	1842      	adds	r2, r0, r1
   1693a:	4613      	mov	r3, r2
   1693c:	4282      	cmp	r2, r0
   1693e:	9304      	str	r3, [sp, #16]
   16940:	d33f      	bcc.n	169c2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xae>
   16942:	e7ff      	b.n	16944 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x30>
   16944:	9809      	ldr	r0, [sp, #36]	; 0x24
   16946:	f000 f8ad 	bl	16aa4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE>
   1694a:	9003      	str	r0, [sp, #12]
   1694c:	e7ff      	b.n	1694e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x3a>
   1694e:	9804      	ldr	r0, [sp, #16]
   16950:	9903      	ldr	r1, [sp, #12]
   16952:	4288      	cmp	r0, r1
   16954:	d807      	bhi.n	16966 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x52>
   16956:	e7ff      	b.n	16958 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x44>
            for elem in other {
   16958:	9808      	ldr	r0, [sp, #32]
   1695a:	9907      	ldr	r1, [sp, #28]
   1695c:	f7f2 fbfb 	bl	9156 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   16960:	9002      	str	r0, [sp, #8]
   16962:	9101      	str	r1, [sp, #4]
   16964:	e003      	b.n	1696e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x5a>
   16966:	2001      	movs	r0, #1
            Err(())
   16968:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   1696c:	e025      	b.n	169ba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa6>
            for elem in other {
   1696e:	9802      	ldr	r0, [sp, #8]
   16970:	900b      	str	r0, [sp, #44]	; 0x2c
   16972:	9901      	ldr	r1, [sp, #4]
   16974:	910c      	str	r1, [sp, #48]	; 0x30
   16976:	e7ff      	b.n	16978 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x64>
   16978:	a80b      	add	r0, sp, #44	; 0x2c
   1697a:	f7fa fd7d 	bl	11478 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   1697e:	900d      	str	r0, [sp, #52]	; 0x34
   16980:	e7ff      	b.n	16982 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x6e>
   16982:	980d      	ldr	r0, [sp, #52]	; 0x34
   16984:	2800      	cmp	r0, #0
   16986:	4601      	mov	r1, r0
   16988:	bf18      	it	ne
   1698a:	2101      	movne	r1, #1
   1698c:	2800      	cmp	r0, #0
   1698e:	d001      	beq.n	16994 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x80>
   16990:	e7ff      	b.n	16992 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x7e>
   16992:	e004      	b.n	1699e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x8a>
   16994:	2000      	movs	r0, #0
            Ok(())
   16996:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   1699a:	e00e      	b.n	169ba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa6>
            for elem in other {
   1699c:	defe      	udf	#254	; 0xfe
   1699e:	980d      	ldr	r0, [sp, #52]	; 0x34
   169a0:	9011      	str	r0, [sp, #68]	; 0x44
   169a2:	9012      	str	r0, [sp, #72]	; 0x48
   169a4:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   169a6:	f000 f909 	bl	16bbc <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   169aa:	9000      	str	r0, [sp, #0]
   169ac:	e7ff      	b.n	169ae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x9a>
   169ae:	9809      	ldr	r0, [sp, #36]	; 0x24
   169b0:	9900      	ldr	r1, [sp, #0]
   169b2:	f7ff ff4b 	bl	1684c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE>
   169b6:	e7ff      	b.n	169b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa4>
            for elem in other {
   169b8:	e7de      	b.n	16978 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x64>
    }
   169ba:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   169be:	b014      	add	sp, #80	; 0x50
   169c0:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   169c2:	f640 0000 	movw	r0, #2048	; 0x800
   169c6:	f2c0 0002 	movt	r0, #2
   169ca:	f640 021c 	movw	r2, #2076	; 0x81c
   169ce:	f2c0 0202 	movt	r2, #2
   169d2:	211c      	movs	r1, #28
   169d4:	f000 fc7a 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   169d8:	defe      	udf	#254	; 0xfe

000169da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   169da:	b580      	push	{r7, lr}
   169dc:	b088      	sub	sp, #32
   169de:	460a      	mov	r2, r1
   169e0:	9006      	str	r0, [sp, #24]
   169e2:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   169e6:	6801      	ldr	r1, [r0, #0]
   169e8:	9004      	str	r0, [sp, #16]
   169ea:	9203      	str	r2, [sp, #12]
   169ec:	9102      	str	r1, [sp, #8]
   169ee:	f000 f863 	bl	16ab8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   169f2:	9001      	str	r0, [sp, #4]
   169f4:	e7ff      	b.n	169f6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   169f6:	9802      	ldr	r0, [sp, #8]
   169f8:	9901      	ldr	r1, [sp, #4]
   169fa:	4288      	cmp	r0, r1
   169fc:	d307      	bcc.n	16a0e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   169fe:	e7ff      	b.n	16a00 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   16a00:	9803      	ldr	r0, [sp, #12]
   16a02:	f88d 0015 	strb.w	r0, [sp, #21]
   16a06:	2101      	movs	r1, #1
   16a08:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   16a0c:	e008      	b.n	16a20 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   16a0e:	9804      	ldr	r0, [sp, #16]
   16a10:	9903      	ldr	r1, [sp, #12]
   16a12:	f7ff ff4d 	bl	168b0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   16a16:	e7ff      	b.n	16a18 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   16a18:	2000      	movs	r0, #0
            Ok(())
   16a1a:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   16a1e:	e7ff      	b.n	16a20 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   16a20:	f89d 0014 	ldrb.w	r0, [sp, #20]
   16a24:	f89d 1015 	ldrb.w	r1, [sp, #21]
   16a28:	b008      	add	sp, #32
   16a2a:	bd80      	pop	{r7, pc}

00016a2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   16a2c:	b580      	push	{r7, lr}
   16a2e:	b082      	sub	sp, #8
   16a30:	9001      	str	r0, [sp, #4]
   16a32:	2100      	movs	r1, #0
        self.truncate(0);
   16a34:	f000 f880 	bl	16b38 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   16a38:	e7ff      	b.n	16a3a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   16a3a:	b002      	add	sp, #8
   16a3c:	bd80      	pop	{r7, pc}

00016a3e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E>:
    pub(crate) fn clear(&mut self) {
   16a3e:	b580      	push	{r7, lr}
   16a40:	b082      	sub	sp, #8
   16a42:	9001      	str	r0, [sp, #4]
   16a44:	2100      	movs	r1, #0
        self.truncate(0);
   16a46:	f000 f841 	bl	16acc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE>
   16a4a:	e7ff      	b.n	16a4c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E+0xe>
    }
   16a4c:	b002      	add	sp, #8
   16a4e:	bd80      	pop	{r7, pc}

00016a50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   16a50:	b580      	push	{r7, lr}
   16a52:	b088      	sub	sp, #32
   16a54:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   16a56:	1d01      	adds	r1, r0, #4
   16a58:	9106      	str	r1, [sp, #24]
   16a5a:	9107      	str	r1, [sp, #28]
   16a5c:	9004      	str	r0, [sp, #16]
   16a5e:	9103      	str	r1, [sp, #12]
   16a60:	e7ff      	b.n	16a62 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE+0x12>
   16a62:	9804      	ldr	r0, [sp, #16]
   16a64:	6801      	ldr	r1, [r0, #0]
   16a66:	9803      	ldr	r0, [sp, #12]
   16a68:	f7fb fd47 	bl	124fa <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   16a6c:	9002      	str	r0, [sp, #8]
   16a6e:	9101      	str	r1, [sp, #4]
   16a70:	e7ff      	b.n	16a72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE+0x22>
    }
   16a72:	9802      	ldr	r0, [sp, #8]
   16a74:	9901      	ldr	r1, [sp, #4]
   16a76:	b008      	add	sp, #32
   16a78:	bd80      	pop	{r7, pc}

00016a7a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   16a7a:	b580      	push	{r7, lr}
   16a7c:	b088      	sub	sp, #32
   16a7e:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   16a80:	1d01      	adds	r1, r0, #4
   16a82:	9106      	str	r1, [sp, #24]
   16a84:	9107      	str	r1, [sp, #28]
   16a86:	9004      	str	r0, [sp, #16]
   16a88:	9103      	str	r1, [sp, #12]
   16a8a:	e7ff      	b.n	16a8c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   16a8c:	9804      	ldr	r0, [sp, #16]
   16a8e:	6801      	ldr	r1, [r0, #0]
   16a90:	9803      	ldr	r0, [sp, #12]
   16a92:	f7fb fd32 	bl	124fa <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   16a96:	9002      	str	r0, [sp, #8]
   16a98:	9101      	str	r1, [sp, #4]
   16a9a:	e7ff      	b.n	16a9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   16a9c:	9802      	ldr	r0, [sp, #8]
   16a9e:	9901      	ldr	r1, [sp, #4]
   16aa0:	b008      	add	sp, #32
   16aa2:	bd80      	pop	{r7, pc}

00016aa4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE>:
    pub(crate) fn capacity(&self) -> usize {
   16aa4:	b580      	push	{r7, lr}
   16aa6:	b082      	sub	sp, #8
   16aa8:	9001      	str	r0, [sp, #4]
        N::to_usize()
   16aaa:	f000 f91c 	bl	16ce6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   16aae:	9000      	str	r0, [sp, #0]
   16ab0:	e7ff      	b.n	16ab2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE+0xe>
    }
   16ab2:	9800      	ldr	r0, [sp, #0]
   16ab4:	b002      	add	sp, #8
   16ab6:	bd80      	pop	{r7, pc}

00016ab8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   16ab8:	b580      	push	{r7, lr}
   16aba:	b082      	sub	sp, #8
   16abc:	9001      	str	r0, [sp, #4]
        N::to_usize()
   16abe:	f000 f942 	bl	16d46 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   16ac2:	9000      	str	r0, [sp, #0]
   16ac4:	e7ff      	b.n	16ac6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   16ac6:	9800      	ldr	r0, [sp, #0]
   16ac8:	b002      	add	sp, #8
   16aca:	bd80      	pop	{r7, pc}

00016acc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   16acc:	b580      	push	{r7, lr}
   16ace:	b08a      	sub	sp, #40	; 0x28
   16ad0:	9007      	str	r0, [sp, #28]
   16ad2:	9108      	str	r1, [sp, #32]
   16ad4:	9106      	str	r1, [sp, #24]
   16ad6:	9005      	str	r0, [sp, #20]
   16ad8:	e7ff      	b.n	16ada <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0xe>
            while len < self.len {
   16ada:	9805      	ldr	r0, [sp, #20]
   16adc:	6801      	ldr	r1, [r0, #0]
   16ade:	9a06      	ldr	r2, [sp, #24]
   16ae0:	428a      	cmp	r2, r1
   16ae2:	d302      	bcc.n	16aea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x1e>
   16ae4:	e7ff      	b.n	16ae6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x1a>
    }
   16ae6:	b00a      	add	sp, #40	; 0x28
   16ae8:	bd80      	pop	{r7, pc}
                self.len -= 1;
   16aea:	9805      	ldr	r0, [sp, #20]
   16aec:	6801      	ldr	r1, [r0, #0]
   16aee:	1e4a      	subs	r2, r1, #1
   16af0:	2901      	cmp	r1, #1
   16af2:	9204      	str	r2, [sp, #16]
   16af4:	d314      	bcc.n	16b20 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x54>
   16af6:	e7ff      	b.n	16af8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x2c>
   16af8:	9804      	ldr	r0, [sp, #16]
   16afa:	9905      	ldr	r1, [sp, #20]
   16afc:	6008      	str	r0, [r1, #0]
                let len = self.len;
   16afe:	680a      	ldr	r2, [r1, #0]
   16b00:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   16b02:	4608      	mov	r0, r1
   16b04:	9203      	str	r2, [sp, #12]
   16b06:	f7ff fe8c 	bl	16822 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE>
   16b0a:	9002      	str	r0, [sp, #8]
   16b0c:	9101      	str	r1, [sp, #4]
   16b0e:	e7ff      	b.n	16b10 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x44>
   16b10:	9802      	ldr	r0, [sp, #8]
   16b12:	9901      	ldr	r1, [sp, #4]
   16b14:	9a03      	ldr	r2, [sp, #12]
   16b16:	f7fb f8cb 	bl	11cb0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   16b1a:	e7ff      	b.n	16b1c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x50>
   16b1c:	e7ff      	b.n	16b1e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x52>
            while len < self.len {
   16b1e:	e7dc      	b.n	16ada <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0xe>
                self.len -= 1;
   16b20:	f640 0040 	movw	r0, #2112	; 0x840
   16b24:	f2c0 0002 	movt	r0, #2
   16b28:	f640 022c 	movw	r2, #2092	; 0x82c
   16b2c:	f2c0 0202 	movt	r2, #2
   16b30:	2121      	movs	r1, #33	; 0x21
   16b32:	f000 fbcb 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16b36:	defe      	udf	#254	; 0xfe

00016b38 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   16b38:	b580      	push	{r7, lr}
   16b3a:	b08a      	sub	sp, #40	; 0x28
   16b3c:	9007      	str	r0, [sp, #28]
   16b3e:	9108      	str	r1, [sp, #32]
   16b40:	9106      	str	r1, [sp, #24]
   16b42:	9005      	str	r0, [sp, #20]
   16b44:	e7ff      	b.n	16b46 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   16b46:	9805      	ldr	r0, [sp, #20]
   16b48:	6801      	ldr	r1, [r0, #0]
   16b4a:	9a06      	ldr	r2, [sp, #24]
   16b4c:	428a      	cmp	r2, r1
   16b4e:	d302      	bcc.n	16b56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   16b50:	e7ff      	b.n	16b52 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   16b52:	b00a      	add	sp, #40	; 0x28
   16b54:	bd80      	pop	{r7, pc}
                self.len -= 1;
   16b56:	9805      	ldr	r0, [sp, #20]
   16b58:	6801      	ldr	r1, [r0, #0]
   16b5a:	1e4a      	subs	r2, r1, #1
   16b5c:	2901      	cmp	r1, #1
   16b5e:	9204      	str	r2, [sp, #16]
   16b60:	d314      	bcc.n	16b8c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   16b62:	e7ff      	b.n	16b64 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   16b64:	9804      	ldr	r0, [sp, #16]
   16b66:	9905      	ldr	r1, [sp, #20]
   16b68:	6008      	str	r0, [r1, #0]
                let len = self.len;
   16b6a:	680a      	ldr	r2, [r1, #0]
   16b6c:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   16b6e:	4608      	mov	r0, r1
   16b70:	9203      	str	r2, [sp, #12]
   16b72:	f7ff fe41 	bl	167f8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   16b76:	9002      	str	r0, [sp, #8]
   16b78:	9101      	str	r1, [sp, #4]
   16b7a:	e7ff      	b.n	16b7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   16b7c:	9802      	ldr	r0, [sp, #8]
   16b7e:	9901      	ldr	r1, [sp, #4]
   16b80:	9a03      	ldr	r2, [sp, #12]
   16b82:	f7fb f895 	bl	11cb0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   16b86:	e7ff      	b.n	16b88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   16b88:	e7ff      	b.n	16b8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   16b8a:	e7dc      	b.n	16b46 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   16b8c:	f640 0040 	movw	r0, #2112	; 0x840
   16b90:	f2c0 0002 	movt	r0, #2
   16b94:	f640 022c 	movw	r2, #2092	; 0x82c
   16b98:	f2c0 0202 	movt	r2, #2
   16b9c:	2121      	movs	r1, #33	; 0x21
   16b9e:	f000 fb95 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16ba2:	defe      	udf	#254	; 0xfe

00016ba4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   16ba4:	b580      	push	{r7, lr}
   16ba6:	b084      	sub	sp, #16
   16ba8:	460a      	mov	r2, r1
   16baa:	9002      	str	r0, [sp, #8]
   16bac:	f88d 100f 	strb.w	r1, [sp, #15]
   16bb0:	9201      	str	r2, [sp, #4]
   16bb2:	f7f2 fb58 	bl	9266 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   16bb6:	e7ff      	b.n	16bb8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   16bb8:	b004      	add	sp, #16
   16bba:	bd80      	pop	{r7, pc}

00016bbc <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   16bbc:	b081      	sub	sp, #4
   16bbe:	9000      	str	r0, [sp, #0]
   16bc0:	7800      	ldrb	r0, [r0, #0]
   16bc2:	b001      	add	sp, #4
   16bc4:	4770      	bx	lr

00016bc6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    fn to_usize() -> usize {
   16bc6:	b580      	push	{r7, lr}
   16bc8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16bca:	f000 fa6d 	bl	170a8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16bce:	9003      	str	r0, [sp, #12]
   16bd0:	e7ff      	b.n	16bd2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   16bd2:	9803      	ldr	r0, [sp, #12]
   16bd4:	f000 fa6e 	bl	170b4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16bd8:	9002      	str	r0, [sp, #8]
   16bda:	e7ff      	b.n	16bdc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   16bdc:	f000 f8b3 	bl	16d46 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   16be0:	9001      	str	r0, [sp, #4]
   16be2:	e7ff      	b.n	16be4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   16be4:	9801      	ldr	r0, [sp, #4]
   16be6:	0041      	lsls	r1, r0, #1
   16be8:	9100      	str	r1, [sp, #0]
   16bea:	e7ff      	b.n	16bec <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   16bec:	9802      	ldr	r0, [sp, #8]
   16bee:	9900      	ldr	r1, [sp, #0]
   16bf0:	4308      	orrs	r0, r1
    }
   16bf2:	b004      	add	sp, #16
   16bf4:	bd80      	pop	{r7, pc}

00016bf6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   16bf6:	b580      	push	{r7, lr}
   16bf8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16bfa:	f000 fa55 	bl	170a8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16bfe:	9003      	str	r0, [sp, #12]
   16c00:	e7ff      	b.n	16c02 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   16c02:	9803      	ldr	r0, [sp, #12]
   16c04:	f000 fa56 	bl	170b4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16c08:	9002      	str	r0, [sp, #8]
   16c0a:	e7ff      	b.n	16c0c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   16c0c:	f000 f853 	bl	16cb6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   16c10:	9001      	str	r0, [sp, #4]
   16c12:	e7ff      	b.n	16c14 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   16c14:	9801      	ldr	r0, [sp, #4]
   16c16:	0041      	lsls	r1, r0, #1
   16c18:	9100      	str	r1, [sp, #0]
   16c1a:	e7ff      	b.n	16c1c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   16c1c:	9802      	ldr	r0, [sp, #8]
   16c1e:	9900      	ldr	r1, [sp, #0]
   16c20:	4308      	orrs	r0, r1
    }
   16c22:	b004      	add	sp, #16
   16c24:	bd80      	pop	{r7, pc}

00016c26 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   16c26:	b580      	push	{r7, lr}
   16c28:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16c2a:	f000 fa3d 	bl	170a8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16c2e:	9003      	str	r0, [sp, #12]
   16c30:	e7ff      	b.n	16c32 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   16c32:	9803      	ldr	r0, [sp, #12]
   16c34:	f000 fa3e 	bl	170b4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16c38:	9002      	str	r0, [sp, #8]
   16c3a:	e7ff      	b.n	16c3c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   16c3c:	f000 f80b 	bl	16c56 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   16c40:	9001      	str	r0, [sp, #4]
   16c42:	e7ff      	b.n	16c44 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   16c44:	9801      	ldr	r0, [sp, #4]
   16c46:	0041      	lsls	r1, r0, #1
   16c48:	9100      	str	r1, [sp, #0]
   16c4a:	e7ff      	b.n	16c4c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   16c4c:	9802      	ldr	r0, [sp, #8]
   16c4e:	9900      	ldr	r1, [sp, #0]
   16c50:	4308      	orrs	r0, r1
    }
   16c52:	b004      	add	sp, #16
   16c54:	bd80      	pop	{r7, pc}

00016c56 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   16c56:	b580      	push	{r7, lr}
   16c58:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16c5a:	f000 fa25 	bl	170a8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16c5e:	9003      	str	r0, [sp, #12]
   16c60:	e7ff      	b.n	16c62 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   16c62:	9803      	ldr	r0, [sp, #12]
   16c64:	f000 fa26 	bl	170b4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16c68:	9002      	str	r0, [sp, #8]
   16c6a:	e7ff      	b.n	16c6c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   16c6c:	f000 f89b 	bl	16da6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   16c70:	9001      	str	r0, [sp, #4]
   16c72:	e7ff      	b.n	16c74 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   16c74:	9801      	ldr	r0, [sp, #4]
   16c76:	0041      	lsls	r1, r0, #1
   16c78:	9100      	str	r1, [sp, #0]
   16c7a:	e7ff      	b.n	16c7c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   16c7c:	9802      	ldr	r0, [sp, #8]
   16c7e:	9900      	ldr	r1, [sp, #0]
   16c80:	4308      	orrs	r0, r1
    }
   16c82:	b004      	add	sp, #16
   16c84:	bd80      	pop	{r7, pc}

00016c86 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   16c86:	b580      	push	{r7, lr}
   16c88:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16c8a:	f000 fa0d 	bl	170a8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16c8e:	9003      	str	r0, [sp, #12]
   16c90:	e7ff      	b.n	16c92 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   16c92:	9803      	ldr	r0, [sp, #12]
   16c94:	f000 fa0e 	bl	170b4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16c98:	9002      	str	r0, [sp, #8]
   16c9a:	e7ff      	b.n	16c9c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   16c9c:	f7ff ff93 	bl	16bc6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   16ca0:	9001      	str	r0, [sp, #4]
   16ca2:	e7ff      	b.n	16ca4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   16ca4:	9801      	ldr	r0, [sp, #4]
   16ca6:	0041      	lsls	r1, r0, #1
   16ca8:	9100      	str	r1, [sp, #0]
   16caa:	e7ff      	b.n	16cac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   16cac:	9802      	ldr	r0, [sp, #8]
   16cae:	9900      	ldr	r1, [sp, #0]
   16cb0:	4308      	orrs	r0, r1
    }
   16cb2:	b004      	add	sp, #16
   16cb4:	bd80      	pop	{r7, pc}

00016cb6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   16cb6:	b580      	push	{r7, lr}
   16cb8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16cba:	f000 f9f5 	bl	170a8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16cbe:	9003      	str	r0, [sp, #12]
   16cc0:	e7ff      	b.n	16cc2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   16cc2:	9803      	ldr	r0, [sp, #12]
   16cc4:	f000 f9f6 	bl	170b4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16cc8:	9002      	str	r0, [sp, #8]
   16cca:	e7ff      	b.n	16ccc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   16ccc:	f000 f823 	bl	16d16 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   16cd0:	9001      	str	r0, [sp, #4]
   16cd2:	e7ff      	b.n	16cd4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   16cd4:	9801      	ldr	r0, [sp, #4]
   16cd6:	0041      	lsls	r1, r0, #1
   16cd8:	9100      	str	r1, [sp, #0]
   16cda:	e7ff      	b.n	16cdc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   16cdc:	9802      	ldr	r0, [sp, #8]
   16cde:	9900      	ldr	r1, [sp, #0]
   16ce0:	4308      	orrs	r0, r1
    }
   16ce2:	b004      	add	sp, #16
   16ce4:	bd80      	pop	{r7, pc}

00016ce6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   16ce6:	b580      	push	{r7, lr}
   16ce8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16cea:	f000 f9dd 	bl	170a8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16cee:	9003      	str	r0, [sp, #12]
   16cf0:	e7ff      	b.n	16cf2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   16cf2:	9803      	ldr	r0, [sp, #12]
   16cf4:	f000 f9de 	bl	170b4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16cf8:	9002      	str	r0, [sp, #8]
   16cfa:	e7ff      	b.n	16cfc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   16cfc:	f000 f86b 	bl	16dd6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   16d00:	9001      	str	r0, [sp, #4]
   16d02:	e7ff      	b.n	16d04 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   16d04:	9801      	ldr	r0, [sp, #4]
   16d06:	0041      	lsls	r1, r0, #1
   16d08:	9100      	str	r1, [sp, #0]
   16d0a:	e7ff      	b.n	16d0c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   16d0c:	9802      	ldr	r0, [sp, #8]
   16d0e:	9900      	ldr	r1, [sp, #0]
   16d10:	4308      	orrs	r0, r1
    }
   16d12:	b004      	add	sp, #16
   16d14:	bd80      	pop	{r7, pc}

00016d16 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   16d16:	b580      	push	{r7, lr}
   16d18:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16d1a:	f000 f9c5 	bl	170a8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16d1e:	9003      	str	r0, [sp, #12]
   16d20:	e7ff      	b.n	16d22 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   16d22:	9803      	ldr	r0, [sp, #12]
   16d24:	f000 f9c6 	bl	170b4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16d28:	9002      	str	r0, [sp, #8]
   16d2a:	e7ff      	b.n	16d2c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   16d2c:	f000 f823 	bl	16d76 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   16d30:	9001      	str	r0, [sp, #4]
   16d32:	e7ff      	b.n	16d34 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   16d34:	9801      	ldr	r0, [sp, #4]
   16d36:	0041      	lsls	r1, r0, #1
   16d38:	9100      	str	r1, [sp, #0]
   16d3a:	e7ff      	b.n	16d3c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   16d3c:	9802      	ldr	r0, [sp, #8]
   16d3e:	9900      	ldr	r1, [sp, #0]
   16d40:	4308      	orrs	r0, r1
    }
   16d42:	b004      	add	sp, #16
   16d44:	bd80      	pop	{r7, pc}

00016d46 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   16d46:	b580      	push	{r7, lr}
   16d48:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16d4a:	f000 f9af 	bl	170ac <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   16d4e:	9003      	str	r0, [sp, #12]
   16d50:	e7ff      	b.n	16d52 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   16d52:	9803      	ldr	r0, [sp, #12]
   16d54:	f000 f9ae 	bl	170b4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16d58:	9002      	str	r0, [sp, #8]
   16d5a:	e7ff      	b.n	16d5c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   16d5c:	f000 f9a8 	bl	170b0 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   16d60:	9001      	str	r0, [sp, #4]
   16d62:	e7ff      	b.n	16d64 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   16d64:	9801      	ldr	r0, [sp, #4]
   16d66:	0041      	lsls	r1, r0, #1
   16d68:	9100      	str	r1, [sp, #0]
   16d6a:	e7ff      	b.n	16d6c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   16d6c:	9802      	ldr	r0, [sp, #8]
   16d6e:	9900      	ldr	r1, [sp, #0]
   16d70:	4308      	orrs	r0, r1
    }
   16d72:	b004      	add	sp, #16
   16d74:	bd80      	pop	{r7, pc}

00016d76 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   16d76:	b580      	push	{r7, lr}
   16d78:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16d7a:	f000 f995 	bl	170a8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16d7e:	9003      	str	r0, [sp, #12]
   16d80:	e7ff      	b.n	16d82 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   16d82:	9803      	ldr	r0, [sp, #12]
   16d84:	f000 f996 	bl	170b4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16d88:	9002      	str	r0, [sp, #8]
   16d8a:	e7ff      	b.n	16d8c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   16d8c:	f7ff ff7b 	bl	16c86 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   16d90:	9001      	str	r0, [sp, #4]
   16d92:	e7ff      	b.n	16d94 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   16d94:	9801      	ldr	r0, [sp, #4]
   16d96:	0041      	lsls	r1, r0, #1
   16d98:	9100      	str	r1, [sp, #0]
   16d9a:	e7ff      	b.n	16d9c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   16d9c:	9802      	ldr	r0, [sp, #8]
   16d9e:	9900      	ldr	r1, [sp, #0]
   16da0:	4308      	orrs	r0, r1
    }
   16da2:	b004      	add	sp, #16
   16da4:	bd80      	pop	{r7, pc}

00016da6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   16da6:	b580      	push	{r7, lr}
   16da8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16daa:	f000 f97d 	bl	170a8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16dae:	9003      	str	r0, [sp, #12]
   16db0:	e7ff      	b.n	16db2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   16db2:	9803      	ldr	r0, [sp, #12]
   16db4:	f000 f97e 	bl	170b4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16db8:	9002      	str	r0, [sp, #8]
   16dba:	e7ff      	b.n	16dbc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   16dbc:	f7ff ff1b 	bl	16bf6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   16dc0:	9001      	str	r0, [sp, #4]
   16dc2:	e7ff      	b.n	16dc4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   16dc4:	9801      	ldr	r0, [sp, #4]
   16dc6:	0041      	lsls	r1, r0, #1
   16dc8:	9100      	str	r1, [sp, #0]
   16dca:	e7ff      	b.n	16dcc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   16dcc:	9802      	ldr	r0, [sp, #8]
   16dce:	9900      	ldr	r1, [sp, #0]
   16dd0:	4308      	orrs	r0, r1
    }
   16dd2:	b004      	add	sp, #16
   16dd4:	bd80      	pop	{r7, pc}

00016dd6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   16dd6:	b580      	push	{r7, lr}
   16dd8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16dda:	f000 f965 	bl	170a8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   16dde:	9003      	str	r0, [sp, #12]
   16de0:	e7ff      	b.n	16de2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   16de2:	9803      	ldr	r0, [sp, #12]
   16de4:	f000 f966 	bl	170b4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16de8:	9002      	str	r0, [sp, #8]
   16dea:	e7ff      	b.n	16dec <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   16dec:	f7ff ff1b 	bl	16c26 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   16df0:	9001      	str	r0, [sp, #4]
   16df2:	e7ff      	b.n	16df4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   16df4:	9801      	ldr	r0, [sp, #4]
   16df6:	0041      	lsls	r1, r0, #1
   16df8:	9100      	str	r1, [sp, #0]
   16dfa:	e7ff      	b.n	16dfc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   16dfc:	9802      	ldr	r0, [sp, #8]
   16dfe:	9900      	ldr	r1, [sp, #0]
   16e00:	4308      	orrs	r0, r1
    }
   16e02:	b004      	add	sp, #16
   16e04:	bd80      	pop	{r7, pc}

00016e06 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>:
    fn to_u8() -> u8 {
   16e06:	2000      	movs	r0, #0
    }
   16e08:	4770      	bx	lr

00016e0a <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>:
    fn to_u8() -> u8 {
   16e0a:	2001      	movs	r0, #1
    }
   16e0c:	4770      	bx	lr

00016e0e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE>:
   16e0e:	b580      	push	{r7, lr}
   16e10:	b088      	sub	sp, #32
   16e12:	9006      	str	r0, [sp, #24]
   16e14:	9107      	str	r1, [sp, #28]
   16e16:	9004      	str	r0, [sp, #16]
   16e18:	4608      	mov	r0, r1
   16e1a:	9103      	str	r1, [sp, #12]
   16e1c:	f001 f8f7 	bl	1800e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   16e20:	9002      	str	r0, [sp, #8]
   16e22:	e7ff      	b.n	16e24 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x16>
   16e24:	9802      	ldr	r0, [sp, #8]
   16e26:	07c1      	lsls	r1, r0, #31
   16e28:	2900      	cmp	r1, #0
   16e2a:	d105      	bne.n	16e38 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x2a>
   16e2c:	e7ff      	b.n	16e2e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x20>
   16e2e:	9803      	ldr	r0, [sp, #12]
   16e30:	f001 f8f1 	bl	18016 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   16e34:	9001      	str	r0, [sp, #4]
   16e36:	e007      	b.n	16e48 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x3a>
   16e38:	9804      	ldr	r0, [sp, #16]
   16e3a:	9903      	ldr	r1, [sp, #12]
   16e3c:	f001 fe53 	bl	18ae6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>
   16e40:	f88d 0017 	strb.w	r0, [sp, #23]
   16e44:	e7ff      	b.n	16e46 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x38>
   16e46:	e015      	b.n	16e74 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   16e48:	9801      	ldr	r0, [sp, #4]
   16e4a:	07c1      	lsls	r1, r0, #31
   16e4c:	2900      	cmp	r1, #0
   16e4e:	d107      	bne.n	16e60 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x52>
   16e50:	e7ff      	b.n	16e52 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x44>
   16e52:	9804      	ldr	r0, [sp, #16]
   16e54:	9903      	ldr	r1, [sp, #12]
   16e56:	f002 f817 	bl	18e88 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>
   16e5a:	f88d 0017 	strb.w	r0, [sp, #23]
   16e5e:	e007      	b.n	16e70 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x62>
   16e60:	9804      	ldr	r0, [sp, #16]
   16e62:	9903      	ldr	r1, [sp, #12]
   16e64:	f001 fe9e 	bl	18ba4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>
   16e68:	f88d 0017 	strb.w	r0, [sp, #23]
   16e6c:	e7ff      	b.n	16e6e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x60>
   16e6e:	e000      	b.n	16e72 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   16e70:	e7ff      	b.n	16e72 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   16e72:	e7ff      	b.n	16e74 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   16e74:	f89d 0017 	ldrb.w	r0, [sp, #23]
   16e78:	b008      	add	sp, #32
   16e7a:	bd80      	pop	{r7, pc}

00016e7c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>:
   16e7c:	b081      	sub	sp, #4
   16e7e:	4601      	mov	r1, r0
   16e80:	f88d 0003 	strb.w	r0, [sp, #3]
   16e84:	b2c0      	uxtb	r0, r0
   16e86:	b001      	add	sp, #4
   16e88:	4770      	bx	lr

00016e8a <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>:
   16e8a:	b580      	push	{r7, lr}
   16e8c:	b08c      	sub	sp, #48	; 0x30
   16e8e:	9005      	str	r0, [sp, #20]
   16e90:	9106      	str	r1, [sp, #24]
   16e92:	9207      	str	r2, [sp, #28]
   16e94:	9008      	str	r0, [sp, #32]
   16e96:	9109      	str	r1, [sp, #36]	; 0x24
   16e98:	2301      	movs	r3, #1
   16e9a:	930b      	str	r3, [sp, #44]	; 0x2c
   16e9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16e9e:	9204      	str	r2, [sp, #16]
   16ea0:	9103      	str	r1, [sp, #12]
   16ea2:	9002      	str	r0, [sp, #8]
   16ea4:	9301      	str	r3, [sp, #4]
   16ea6:	e7ff      	b.n	16ea8 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x1e>
   16ea8:	9801      	ldr	r0, [sp, #4]
   16eaa:	9904      	ldr	r1, [sp, #16]
   16eac:	fb00 f201 	mul.w	r2, r0, r1
   16eb0:	920a      	str	r2, [sp, #40]	; 0x28
   16eb2:	9802      	ldr	r0, [sp, #8]
   16eb4:	9903      	ldr	r1, [sp, #12]
   16eb6:	f000 f850 	bl	16f5a <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>
   16eba:	e7ff      	b.n	16ebc <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x32>
   16ebc:	b00c      	add	sp, #48	; 0x30
   16ebe:	bd80      	pop	{r7, pc}

00016ec0 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>:
   16ec0:	b580      	push	{r7, lr}
   16ec2:	b088      	sub	sp, #32
   16ec4:	9004      	str	r0, [sp, #16]
   16ec6:	9105      	str	r1, [sp, #20]
   16ec8:	2201      	movs	r2, #1
   16eca:	9207      	str	r2, [sp, #28]
   16ecc:	9a07      	ldr	r2, [sp, #28]
   16ece:	9103      	str	r1, [sp, #12]
   16ed0:	9002      	str	r0, [sp, #8]
   16ed2:	9201      	str	r2, [sp, #4]
   16ed4:	e7ff      	b.n	16ed6 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x16>
   16ed6:	9801      	ldr	r0, [sp, #4]
   16ed8:	2820      	cmp	r0, #32
   16eda:	d306      	bcc.n	16eea <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x2a>
   16edc:	e7ff      	b.n	16ede <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x1e>
   16ede:	2201      	movs	r2, #1
   16ee0:	9802      	ldr	r0, [sp, #8]
   16ee2:	9903      	ldr	r1, [sp, #12]
   16ee4:	f7ff ffd1 	bl	16e8a <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>
   16ee8:	e013      	b.n	16f12 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x52>
   16eea:	9802      	ldr	r0, [sp, #8]
   16eec:	f000 f814 	bl	16f18 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>
   16ef0:	4601      	mov	r1, r0
   16ef2:	f88d 001b 	strb.w	r0, [sp, #27]
   16ef6:	9100      	str	r1, [sp, #0]
   16ef8:	e7ff      	b.n	16efa <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x3a>
   16efa:	2201      	movs	r2, #1
   16efc:	9803      	ldr	r0, [sp, #12]
   16efe:	9902      	ldr	r1, [sp, #8]
   16f00:	f7fa fcf4 	bl	118ec <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   16f04:	e7ff      	b.n	16f06 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x46>
   16f06:	9803      	ldr	r0, [sp, #12]
   16f08:	9900      	ldr	r1, [sp, #0]
   16f0a:	f7f2 f9ac 	bl	9266 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   16f0e:	e7ff      	b.n	16f10 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x50>
   16f10:	e000      	b.n	16f14 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   16f12:	e7ff      	b.n	16f14 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   16f14:	b008      	add	sp, #32
   16f16:	bd80      	pop	{r7, pc}

00016f18 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>:
   16f18:	b580      	push	{r7, lr}
   16f1a:	b088      	sub	sp, #32
   16f1c:	9004      	str	r0, [sp, #16]
   16f1e:	f89d 1015 	ldrb.w	r1, [sp, #21]
   16f22:	f88d 100f 	strb.w	r1, [sp, #15]
   16f26:	9002      	str	r0, [sp, #8]
   16f28:	e7ff      	b.n	16f2a <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x12>
   16f2a:	f10d 000f 	add.w	r0, sp, #15
   16f2e:	9006      	str	r0, [sp, #24]
   16f30:	9007      	str	r0, [sp, #28]
   16f32:	e7ff      	b.n	16f34 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x1c>
   16f34:	f10d 010f 	add.w	r1, sp, #15
   16f38:	2201      	movs	r2, #1
   16f3a:	9802      	ldr	r0, [sp, #8]
   16f3c:	f7fa fcd6 	bl	118ec <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   16f40:	e7ff      	b.n	16f42 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x2a>
   16f42:	f89d 000f 	ldrb.w	r0, [sp, #15]
   16f46:	4601      	mov	r1, r0
   16f48:	f88d 0016 	strb.w	r0, [sp, #22]
   16f4c:	f88d 0017 	strb.w	r0, [sp, #23]
   16f50:	9101      	str	r1, [sp, #4]
   16f52:	e7ff      	b.n	16f54 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x3c>
   16f54:	9801      	ldr	r0, [sp, #4]
   16f56:	b008      	add	sp, #32
   16f58:	bd80      	pop	{r7, pc}

00016f5a <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>:
   16f5a:	b5d0      	push	{r4, r6, r7, lr}
   16f5c:	af02      	add	r7, sp, #8
   16f5e:	b0b4      	sub	sp, #208	; 0xd0
   16f60:	466c      	mov	r4, sp
   16f62:	f36f 0404 	bfc	r4, #0, #5
   16f66:	46a5      	mov	sp, r4
   16f68:	9024      	str	r0, [sp, #144]	; 0x90
   16f6a:	9125      	str	r1, [sp, #148]	; 0x94
   16f6c:	9226      	str	r2, [sp, #152]	; 0x98
   16f6e:	2320      	movs	r3, #32
   16f70:	932f      	str	r3, [sp, #188]	; 0xbc
   16f72:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   16f74:	9327      	str	r3, [sp, #156]	; 0x9c
   16f76:	920e      	str	r2, [sp, #56]	; 0x38
   16f78:	910d      	str	r1, [sp, #52]	; 0x34
   16f7a:	900c      	str	r0, [sp, #48]	; 0x30
   16f7c:	930b      	str	r3, [sp, #44]	; 0x2c
   16f7e:	e7ff      	b.n	16f80 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x26>
   16f80:	2000      	movs	r0, #0
   16f82:	900f      	str	r0, [sp, #60]	; 0x3c
   16f84:	e7ff      	b.n	16f86 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   16f86:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16f88:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16f8a:	4408      	add	r0, r1
   16f8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16f8e:	4290      	cmp	r0, r2
   16f90:	d905      	bls.n	16f9e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x44>
   16f92:	e7ff      	b.n	16f94 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x3a>
   16f94:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16f96:	990e      	ldr	r1, [sp, #56]	; 0x38
   16f98:	4288      	cmp	r0, r1
   16f9a:	d334      	bcc.n	17006 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xac>
   16f9c:	e067      	b.n	1706e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   16f9e:	e7ff      	b.n	16fa0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x46>
   16fa0:	a810      	add	r0, sp, #64	; 0x40
   16fa2:	9032      	str	r0, [sp, #200]	; 0xc8
   16fa4:	9033      	str	r0, [sp, #204]	; 0xcc
   16fa6:	e7ff      	b.n	16fa8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x4e>
   16fa8:	a810      	add	r0, sp, #64	; 0x40
   16faa:	4601      	mov	r1, r0
   16fac:	9028      	str	r0, [sp, #160]	; 0xa0
   16fae:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16fb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16fb2:	900a      	str	r0, [sp, #40]	; 0x28
   16fb4:	4610      	mov	r0, r2
   16fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16fb8:	9109      	str	r1, [sp, #36]	; 0x24
   16fba:	4619      	mov	r1, r3
   16fbc:	f7fa fdfa 	bl	11bb4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16fc0:	4601      	mov	r1, r0
   16fc2:	9029      	str	r0, [sp, #164]	; 0xa4
   16fc4:	9108      	str	r1, [sp, #32]
   16fc6:	e7ff      	b.n	16fc8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x6e>
   16fc8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16fca:	980d      	ldr	r0, [sp, #52]	; 0x34
   16fcc:	f7fa fdf2 	bl	11bb4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16fd0:	4601      	mov	r1, r0
   16fd2:	902a      	str	r0, [sp, #168]	; 0xa8
   16fd4:	9107      	str	r1, [sp, #28]
   16fd6:	e7ff      	b.n	16fd8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x7e>
   16fd8:	9808      	ldr	r0, [sp, #32]
   16fda:	9909      	ldr	r1, [sp, #36]	; 0x24
   16fdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16fde:	f7fa fc85 	bl	118ec <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   16fe2:	e7ff      	b.n	16fe4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x8a>
   16fe4:	9807      	ldr	r0, [sp, #28]
   16fe6:	9908      	ldr	r1, [sp, #32]
   16fe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16fea:	f7fa fc7f 	bl	118ec <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   16fee:	e7ff      	b.n	16ff0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x96>
   16ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
   16ff2:	9907      	ldr	r1, [sp, #28]
   16ff4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16ff6:	f7fa fc79 	bl	118ec <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   16ffa:	e7ff      	b.n	16ffc <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xa2>
   16ffc:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16ffe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17000:	4408      	add	r0, r1
   17002:	900f      	str	r0, [sp, #60]	; 0x3c
   17004:	e7bf      	b.n	16f86 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   17006:	e7ff      	b.n	17008 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xae>
   17008:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1700a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1700c:	1a08      	subs	r0, r1, r0
   1700e:	4602      	mov	r2, r0
   17010:	902b      	str	r0, [sp, #172]	; 0xac
   17012:	a81c      	add	r0, sp, #112	; 0x70
   17014:	9030      	str	r0, [sp, #192]	; 0xc0
   17016:	9031      	str	r0, [sp, #196]	; 0xc4
   17018:	9206      	str	r2, [sp, #24]
   1701a:	9005      	str	r0, [sp, #20]
   1701c:	e7ff      	b.n	1701e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xc4>
   1701e:	9805      	ldr	r0, [sp, #20]
   17020:	9905      	ldr	r1, [sp, #20]
   17022:	912c      	str	r1, [sp, #176]	; 0xb0
   17024:	990f      	ldr	r1, [sp, #60]	; 0x3c
   17026:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17028:	9004      	str	r0, [sp, #16]
   1702a:	4610      	mov	r0, r2
   1702c:	f7fa fdc2 	bl	11bb4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   17030:	4601      	mov	r1, r0
   17032:	902d      	str	r0, [sp, #180]	; 0xb4
   17034:	9103      	str	r1, [sp, #12]
   17036:	e7ff      	b.n	17038 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xde>
   17038:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1703a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1703c:	f7fa fdba 	bl	11bb4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   17040:	4601      	mov	r1, r0
   17042:	902e      	str	r0, [sp, #184]	; 0xb8
   17044:	9102      	str	r1, [sp, #8]
   17046:	e7ff      	b.n	17048 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xee>
   17048:	9803      	ldr	r0, [sp, #12]
   1704a:	9904      	ldr	r1, [sp, #16]
   1704c:	9a06      	ldr	r2, [sp, #24]
   1704e:	f7fa fc4d 	bl	118ec <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   17052:	e7ff      	b.n	17054 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xfa>
   17054:	9802      	ldr	r0, [sp, #8]
   17056:	9903      	ldr	r1, [sp, #12]
   17058:	9a06      	ldr	r2, [sp, #24]
   1705a:	f7fa fc47 	bl	118ec <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1705e:	e7ff      	b.n	17060 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x106>
   17060:	9804      	ldr	r0, [sp, #16]
   17062:	9902      	ldr	r1, [sp, #8]
   17064:	9a06      	ldr	r2, [sp, #24]
   17066:	f7fa fc41 	bl	118ec <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1706a:	e7ff      	b.n	1706c <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x112>
   1706c:	e7ff      	b.n	1706e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   1706e:	f1a7 0408 	sub.w	r4, r7, #8
   17072:	46a5      	mov	sp, r4
   17074:	bdd0      	pop	{r4, r6, r7, pc}

00017076 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>:
   17076:	b083      	sub	sp, #12
   17078:	9002      	str	r0, [sp, #8]
   1707a:	9000      	str	r0, [sp, #0]
   1707c:	e7ff      	b.n	1707e <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x8>
   1707e:	9800      	ldr	r0, [sp, #0]
   17080:	28ff      	cmp	r0, #255	; 0xff
   17082:	d807      	bhi.n	17094 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x1e>
   17084:	e7ff      	b.n	17086 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x10>
   17086:	9800      	ldr	r0, [sp, #0]
   17088:	f88d 0005 	strb.w	r0, [sp, #5]
   1708c:	2100      	movs	r1, #0
   1708e:	f88d 1004 	strb.w	r1, [sp, #4]
   17092:	e003      	b.n	1709c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   17094:	2001      	movs	r0, #1
   17096:	f88d 0004 	strb.w	r0, [sp, #4]
   1709a:	e7ff      	b.n	1709c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   1709c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   170a0:	f89d 1005 	ldrb.w	r1, [sp, #5]
   170a4:	b003      	add	sp, #12
   170a6:	4770      	bx	lr

000170a8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
    fn to_u8() -> u8 {
   170a8:	2000      	movs	r0, #0
    }
   170aa:	4770      	bx	lr

000170ac <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
    fn to_u8() -> u8 {
   170ac:	2001      	movs	r0, #1
    }
   170ae:	4770      	bx	lr

000170b0 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   170b0:	2000      	movs	r0, #0
    }
   170b2:	4770      	bx	lr

000170b4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   170b4:	b081      	sub	sp, #4
   170b6:	4601      	mov	r1, r0
   170b8:	f88d 0003 	strb.w	r0, [sp, #3]
   170bc:	b2c0      	uxtb	r0, r0
   170be:	b001      	add	sp, #4
   170c0:	4770      	bx	lr

000170c2 <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   170c2:	4770      	bx	lr

000170c4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   170c4:	b5b0      	push	{r4, r5, r7, lr}
   170c6:	b086      	sub	sp, #24
   170c8:	460c      	mov	r4, r1
   170ca:	4605      	mov	r5, r0
   170cc:	f001 fb87 	bl	187de <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   170d0:	b9a8      	cbnz	r0, 170fe <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   170d2:	f640 0364 	movw	r3, #2148	; 0x864
   170d6:	2200      	movs	r2, #0
   170d8:	f2c0 0302 	movt	r3, #2
   170dc:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   170e0:	9205      	str	r2, [sp, #20]
   170e2:	9304      	str	r3, [sp, #16]
   170e4:	e9cd 2202 	strd	r2, r2, [sp, #8]
   170e8:	2201      	movs	r2, #1
   170ea:	9201      	str	r2, [sp, #4]
   170ec:	f640 1228 	movw	r2, #2344	; 0x928
   170f0:	f2c0 0202 	movt	r2, #2
   170f4:	9200      	str	r2, [sp, #0]
   170f6:	466a      	mov	r2, sp
   170f8:	f000 fbe0 	bl	178bc <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   170fc:	b110      	cbz	r0, 17104 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   170fe:	2001      	movs	r0, #1
   17100:	b006      	add	sp, #24
   17102:	bdb0      	pop	{r4, r5, r7, pc}
   17104:	1d28      	adds	r0, r5, #4
   17106:	4621      	mov	r1, r4
   17108:	b006      	add	sp, #24
   1710a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   1710e:	f001 bb66 	b.w	187de <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

00017112 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   17112:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   17116:	f243 6134 	movw	r1, #13876	; 0x3634
   1711a:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   1711e:	f6cd 0131 	movt	r1, #55345	; 0xd831
   17122:	4770      	bx	lr

00017124 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   17124:	b570      	push	{r4, r5, r6, lr}
   17126:	460e      	mov	r6, r1
   17128:	3909      	subs	r1, #9
   1712a:	4604      	mov	r4, r0
   1712c:	291e      	cmp	r1, #30
   1712e:	d818      	bhi.n	17162 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   17130:	2002      	movs	r0, #2
   17132:	2574      	movs	r5, #116	; 0x74
   17134:	e8df f001 	tbb	[pc, r1]
   17138:	1c1c1019 	.word	0x1c1c1019
   1713c:	1c1c1c29 	.word	0x1c1c1c29
   17140:	1c1c1c1c 	.word	0x1c1c1c1c
   17144:	1c1c1c1c 	.word	0x1c1c1c1c
   17148:	1c1c1c1c 	.word	0x1c1c1c1c
   1714c:	1c1c1c1c 	.word	0x1c1c1c1c
   17150:	1c1c171c 	.word	0x1c1c171c
   17154:	00171c1c 	.word	0x00171c1c
   17158:	2002      	movs	r0, #2
   1715a:	256e      	movs	r5, #110	; 0x6e
   1715c:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   17160:	bd70      	pop	{r4, r5, r6, pc}
   17162:	2e5c      	cmp	r6, #92	; 0x5c
   17164:	d104      	bne.n	17170 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   17166:	2002      	movs	r0, #2
   17168:	4635      	mov	r5, r6
   1716a:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   1716e:	bd70      	pop	{r4, r5, r6, pc}
   17170:	2a00      	cmp	r2, #0
   17172:	d040      	beq.n	171f6 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   17174:	f3c6 1083 	ubfx	r0, r6, #6, #4
   17178:	0ab1      	lsrs	r1, r6, #10
   1717a:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   1717e:	d309      	bcc.n	17194 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   17180:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   17184:	d137      	bne.n	171f6 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   17186:	211e      	movs	r1, #30
   17188:	e00b      	b.n	171a2 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   1718a:	2002      	movs	r0, #2
   1718c:	2572      	movs	r5, #114	; 0x72
   1718e:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   17192:	bd70      	pop	{r4, r5, r6, pc}
   17194:	f241 329c 	movw	r2, #5020	; 0x139c
   17198:	f2c0 0202 	movt	r2, #2
   1719c:	5c51      	ldrb	r1, [r2, r1]
   1719e:	291e      	cmp	r1, #30
   171a0:	d842      	bhi.n	17228 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   171a2:	f241 4217 	movw	r2, #5143	; 0x1417
   171a6:	f2c0 0202 	movt	r2, #2
   171aa:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   171ae:	5c09      	ldrb	r1, [r1, r0]
   171b0:	298b      	cmp	r1, #139	; 0x8b
   171b2:	d231      	bcs.n	17218 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   171b4:	f241 6008 	movw	r0, #5640	; 0x1608
   171b8:	2301      	movs	r3, #1
   171ba:	f2c0 0002 	movt	r0, #2
   171be:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   171c2:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   171c6:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   171ca:	f8d2 c004 	ldr.w	ip, [r2, #4]
   171ce:	fa03 f501 	lsl.w	r5, r3, r1
   171d2:	f1b1 0220 	subs.w	r2, r1, #32
   171d6:	f1c1 0120 	rsb	r1, r1, #32
   171da:	bf58      	it	pl
   171dc:	2500      	movpl	r5, #0
   171de:	2a00      	cmp	r2, #0
   171e0:	ea00 0005 	and.w	r0, r0, r5
   171e4:	fa23 f101 	lsr.w	r1, r3, r1
   171e8:	bf58      	it	pl
   171ea:	fa03 f102 	lslpl.w	r1, r3, r2
   171ee:	ea01 010c 	and.w	r1, r1, ip
   171f2:	4308      	orrs	r0, r1
   171f4:	d105      	bne.n	17202 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   171f6:	4630      	mov	r0, r6
   171f8:	f001 f9a5 	bl	18546 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   171fc:	b108      	cbz	r0, 17202 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   171fe:	2001      	movs	r0, #1
   17200:	e7b2      	b.n	17168 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   17202:	f046 0001 	orr.w	r0, r6, #1
   17206:	2107      	movs	r1, #7
   17208:	fab0 f080 	clz	r0, r0
   1720c:	f04f 0e05 	mov.w	lr, #5
   17210:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   17214:	2003      	movs	r0, #3
   17216:	e7a7      	b.n	17168 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   17218:	f241 308c 	movw	r0, #5004	; 0x138c
   1721c:	228b      	movs	r2, #139	; 0x8b
   1721e:	f2c0 0002 	movt	r0, #2
   17222:	f000 f869 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   17226:	defe      	udf	#254	; 0xfe
   17228:	f241 307c 	movw	r0, #4988	; 0x137c
   1722c:	221f      	movs	r2, #31
   1722e:	f2c0 0002 	movt	r0, #2
   17232:	f000 f861 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   17236:	defe      	udf	#254	; 0xfe

00017238 <_ZN4core6option13expect_failed17had6579abaad447b4E>:
   17238:	b08a      	sub	sp, #40	; 0x28
   1723a:	e9cd 0100 	strd	r0, r1, [sp]
   1723e:	2001      	movs	r0, #1
   17240:	a908      	add	r1, sp, #32
   17242:	9007      	str	r0, [sp, #28]
   17244:	9106      	str	r1, [sp, #24]
   17246:	2100      	movs	r1, #0
   17248:	9105      	str	r1, [sp, #20]
   1724a:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1724e:	f640 202c 	movw	r0, #2604	; 0xa2c
   17252:	f2c0 0002 	movt	r0, #2
   17256:	4611      	mov	r1, r2
   17258:	9002      	str	r0, [sp, #8]
   1725a:	f249 103b 	movw	r0, #37179	; 0x913b
   1725e:	f2c0 0001 	movt	r0, #1
   17262:	9009      	str	r0, [sp, #36]	; 0x24
   17264:	4668      	mov	r0, sp
   17266:	9008      	str	r0, [sp, #32]
   17268:	a802      	add	r0, sp, #8
   1726a:	f000 f865 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1726e:	defe      	udf	#254	; 0xfe

00017270 <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   17270:	b08e      	sub	sp, #56	; 0x38
   17272:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   17276:	2002      	movs	r0, #2
   17278:	a90a      	add	r1, sp, #40	; 0x28
   1727a:	9009      	str	r0, [sp, #36]	; 0x24
   1727c:	9108      	str	r1, [sp, #32]
   1727e:	2100      	movs	r1, #0
   17280:	9107      	str	r1, [sp, #28]
   17282:	e9cd 0105 	strd	r0, r1, [sp, #20]
   17286:	f640 2038 	movw	r0, #2616	; 0xa38
   1728a:	f2c0 0002 	movt	r0, #2
   1728e:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   17292:	9004      	str	r0, [sp, #16]
   17294:	f249 1031 	movw	r0, #37169	; 0x9131
   17298:	f2c0 0001 	movt	r0, #1
   1729c:	900d      	str	r0, [sp, #52]	; 0x34
   1729e:	a802      	add	r0, sp, #8
   172a0:	900c      	str	r0, [sp, #48]	; 0x30
   172a2:	f249 103b 	movw	r0, #37179	; 0x913b
   172a6:	f2c0 0001 	movt	r0, #1
   172aa:	4661      	mov	r1, ip
   172ac:	900b      	str	r0, [sp, #44]	; 0x2c
   172ae:	4668      	mov	r0, sp
   172b0:	900a      	str	r0, [sp, #40]	; 0x28
   172b2:	a804      	add	r0, sp, #16
   172b4:	f000 f840 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   172b8:	defe      	udf	#254	; 0xfe

000172ba <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   172ba:	68c0      	ldr	r0, [r0, #12]
   172bc:	4770      	bx	lr

000172be <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   172be:	4770      	bx	lr

000172c0 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   172c0:	e9d0 2100 	ldrd	r2, r1, [r0]
   172c4:	4610      	mov	r0, r2
   172c6:	4770      	bx	lr

000172c8 <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   172c8:	6880      	ldr	r0, [r0, #8]
   172ca:	4770      	bx	lr

000172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   172cc:	b088      	sub	sp, #32
   172ce:	4694      	mov	ip, r2
   172d0:	f640 0264 	movw	r2, #2148	; 0x864
   172d4:	2300      	movs	r3, #0
   172d6:	f2c0 0202 	movt	r2, #2
   172da:	e9cd 0106 	strd	r0, r1, [sp, #24]
   172de:	4668      	mov	r0, sp
   172e0:	9305      	str	r3, [sp, #20]
   172e2:	4661      	mov	r1, ip
   172e4:	9204      	str	r2, [sp, #16]
   172e6:	2201      	movs	r2, #1
   172e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   172ec:	9201      	str	r2, [sp, #4]
   172ee:	aa06      	add	r2, sp, #24
   172f0:	9200      	str	r2, [sp, #0]
   172f2:	f000 f821 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   172f6:	defe      	udf	#254	; 0xfe

000172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   172f8:	b08c      	sub	sp, #48	; 0x30
   172fa:	4603      	mov	r3, r0
   172fc:	e9cd 1200 	strd	r1, r2, [sp]
   17300:	2002      	movs	r0, #2
   17302:	a908      	add	r1, sp, #32
   17304:	9007      	str	r0, [sp, #28]
   17306:	9106      	str	r1, [sp, #24]
   17308:	2100      	movs	r1, #0
   1730a:	9105      	str	r1, [sp, #20]
   1730c:	e9cd 0103 	strd	r0, r1, [sp, #12]
   17310:	f640 206c 	movw	r0, #2668	; 0xa6c
   17314:	f2c0 0002 	movt	r0, #2
   17318:	4669      	mov	r1, sp
   1731a:	9002      	str	r0, [sp, #8]
   1731c:	f249 004d 	movw	r0, #36941	; 0x904d
   17320:	f2c0 0001 	movt	r0, #1
   17324:	900b      	str	r0, [sp, #44]	; 0x2c
   17326:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   1732a:	a801      	add	r0, sp, #4
   1732c:	9008      	str	r0, [sp, #32]
   1732e:	a802      	add	r0, sp, #8
   17330:	4619      	mov	r1, r3
   17332:	f000 f801 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17336:	defe      	udf	#254	; 0xfe

00017338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   17338:	b084      	sub	sp, #16
   1733a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1733e:	f640 2048 	movw	r0, #2632	; 0xa48
   17342:	f2c0 0002 	movt	r0, #2
   17346:	9001      	str	r0, [sp, #4]
   17348:	f640 0064 	movw	r0, #2148	; 0x864
   1734c:	f2c0 0002 	movt	r0, #2
   17350:	9000      	str	r0, [sp, #0]
   17352:	4668      	mov	r0, sp
   17354:	f7f1 f9bc 	bl	86d0 <rust_begin_unwind>
   17358:	defe      	udf	#254	; 0xfe

0001735a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   1735a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1735e:	b081      	sub	sp, #4
   17360:	2a00      	cmp	r2, #0
   17362:	f000 80fe 	beq.w	17562 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   17366:	4690      	mov	r8, r2
   17368:	468a      	mov	sl, r1
   1736a:	4681      	mov	r9, r0
   1736c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   17370:	7800      	ldrb	r0, [r0, #0]
   17372:	b948      	cbnz	r0, 17388 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   17374:	e014      	b.n	173a0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   17376:	44da      	add	sl, fp
   17378:	2c00      	cmp	r4, #0
   1737a:	46a0      	mov	r8, r4
   1737c:	f000 80f1 	beq.w	17562 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   17380:	f8d9 0008 	ldr.w	r0, [r9, #8]
   17384:	7800      	ldrb	r0, [r0, #0]
   17386:	b158      	cbz	r0, 173a0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   17388:	e9d9 0100 	ldrd	r0, r1, [r9]
   1738c:	2204      	movs	r2, #4
   1738e:	68cb      	ldr	r3, [r1, #12]
   17390:	f640 1184 	movw	r1, #2436	; 0x984
   17394:	f2c0 0102 	movt	r1, #2
   17398:	4798      	blx	r3
   1739a:	2800      	cmp	r0, #0
   1739c:	f040 80e5 	bne.w	1756a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   173a0:	f04f 0b00 	mov.w	fp, #0
   173a4:	4641      	mov	r1, r8
   173a6:	e008      	b.n	173ba <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   173a8:	ebb8 010b 	subs.w	r1, r8, fp
   173ac:	f04f 0000 	mov.w	r0, #0
   173b0:	bf38      	it	cc
   173b2:	4601      	movcc	r1, r0
   173b4:	45c3      	cmp	fp, r8
   173b6:	f200 80a5 	bhi.w	17504 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   173ba:	eb0a 0e0b 	add.w	lr, sl, fp
   173be:	2000      	movs	r0, #0
   173c0:	f01e 0203 	ands.w	r2, lr, #3
   173c4:	bf18      	it	ne
   173c6:	f1d2 0c04 	rsbsne	ip, r2, #4
   173ca:	d120      	bne.n	1740e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   173cc:	2908      	cmp	r1, #8
   173ce:	d357      	bcc.n	17480 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   173d0:	f1a1 0208 	sub.w	r2, r1, #8
   173d4:	4290      	cmp	r0, r2
   173d6:	d853      	bhi.n	17480 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   173d8:	f85e 3000 	ldr.w	r3, [lr, r0]
   173dc:	eb0e 0700 	add.w	r7, lr, r0
   173e0:	687f      	ldr	r7, [r7, #4]
   173e2:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   173e6:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   173ea:	ea26 0303 	bic.w	r3, r6, r3
   173ee:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   173f2:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   173f6:	ea26 0707 	bic.w	r7, r6, r7
   173fa:	433b      	orrs	r3, r7
   173fc:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   17400:	d102      	bne.n	17408 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   17402:	3008      	adds	r0, #8
   17404:	4290      	cmp	r0, r2
   17406:	d9e7      	bls.n	173d8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   17408:	4288      	cmp	r0, r1
   1740a:	d939      	bls.n	17480 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   1740c:	e0b1      	b.n	17572 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   1740e:	458c      	cmp	ip, r1
   17410:	bf88      	it	hi
   17412:	468c      	movhi	ip, r1
   17414:	eb0e 060c 	add.w	r6, lr, ip
   17418:	2000      	movs	r0, #0
   1741a:	4663      	mov	r3, ip
   1741c:	4677      	mov	r7, lr
   1741e:	b363      	cbz	r3, 1747a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17420:	463a      	mov	r2, r7
   17422:	f812 4b01 	ldrb.w	r4, [r2], #1
   17426:	f1b4 050a 	subs.w	r5, r4, #10
   1742a:	bf18      	it	ne
   1742c:	2501      	movne	r5, #1
   1742e:	4428      	add	r0, r5
   17430:	2c0a      	cmp	r4, #10
   17432:	d059      	beq.n	174e8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17434:	42b2      	cmp	r2, r6
   17436:	d020      	beq.n	1747a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17438:	787a      	ldrb	r2, [r7, #1]
   1743a:	f1b2 040a 	subs.w	r4, r2, #10
   1743e:	bf18      	it	ne
   17440:	2401      	movne	r4, #1
   17442:	4420      	add	r0, r4
   17444:	2a0a      	cmp	r2, #10
   17446:	d04f      	beq.n	174e8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17448:	1cba      	adds	r2, r7, #2
   1744a:	42b2      	cmp	r2, r6
   1744c:	d015      	beq.n	1747a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   1744e:	78ba      	ldrb	r2, [r7, #2]
   17450:	f1b2 040a 	subs.w	r4, r2, #10
   17454:	bf18      	it	ne
   17456:	2401      	movne	r4, #1
   17458:	4420      	add	r0, r4
   1745a:	2a0a      	cmp	r2, #10
   1745c:	d044      	beq.n	174e8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   1745e:	1cfa      	adds	r2, r7, #3
   17460:	42b2      	cmp	r2, r6
   17462:	d00a      	beq.n	1747a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17464:	78fa      	ldrb	r2, [r7, #3]
   17466:	3b04      	subs	r3, #4
   17468:	3704      	adds	r7, #4
   1746a:	f1b2 040a 	subs.w	r4, r2, #10
   1746e:	bf18      	it	ne
   17470:	2401      	movne	r4, #1
   17472:	4420      	add	r0, r4
   17474:	2a0a      	cmp	r2, #10
   17476:	d1d2      	bne.n	1741e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   17478:	e036      	b.n	174e8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   1747a:	4660      	mov	r0, ip
   1747c:	2908      	cmp	r1, #8
   1747e:	d2a7      	bcs.n	173d0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   17480:	eb0e 0700 	add.w	r7, lr, r0
   17484:	eb0e 0201 	add.w	r2, lr, r1
   17488:	1a0e      	subs	r6, r1, r0
   1748a:	2100      	movs	r1, #0
   1748c:	b3ce      	cbz	r6, 17502 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   1748e:	463b      	mov	r3, r7
   17490:	f813 5b01 	ldrb.w	r5, [r3], #1
   17494:	f1b5 040a 	subs.w	r4, r5, #10
   17498:	bf18      	it	ne
   1749a:	2401      	movne	r4, #1
   1749c:	4421      	add	r1, r4
   1749e:	2d0a      	cmp	r5, #10
   174a0:	d021      	beq.n	174e6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   174a2:	4293      	cmp	r3, r2
   174a4:	d02d      	beq.n	17502 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   174a6:	787b      	ldrb	r3, [r7, #1]
   174a8:	f1b3 050a 	subs.w	r5, r3, #10
   174ac:	bf18      	it	ne
   174ae:	2501      	movne	r5, #1
   174b0:	4429      	add	r1, r5
   174b2:	2b0a      	cmp	r3, #10
   174b4:	d017      	beq.n	174e6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   174b6:	1cbb      	adds	r3, r7, #2
   174b8:	4293      	cmp	r3, r2
   174ba:	d022      	beq.n	17502 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   174bc:	78bb      	ldrb	r3, [r7, #2]
   174be:	f1b3 050a 	subs.w	r5, r3, #10
   174c2:	bf18      	it	ne
   174c4:	2501      	movne	r5, #1
   174c6:	4429      	add	r1, r5
   174c8:	2b0a      	cmp	r3, #10
   174ca:	d00c      	beq.n	174e6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   174cc:	1cfb      	adds	r3, r7, #3
   174ce:	4293      	cmp	r3, r2
   174d0:	d017      	beq.n	17502 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   174d2:	78fb      	ldrb	r3, [r7, #3]
   174d4:	3e04      	subs	r6, #4
   174d6:	3704      	adds	r7, #4
   174d8:	f1b3 050a 	subs.w	r5, r3, #10
   174dc:	bf18      	it	ne
   174de:	2501      	movne	r5, #1
   174e0:	4429      	add	r1, r5
   174e2:	2b0a      	cmp	r3, #10
   174e4:	d1d2      	bne.n	1748c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   174e6:	4408      	add	r0, r1
   174e8:	4458      	add	r0, fp
   174ea:	f100 0b01 	add.w	fp, r0, #1
   174ee:	4540      	cmp	r0, r8
   174f0:	f4bf af5a 	bcs.w	173a8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   174f4:	f81a 0000 	ldrb.w	r0, [sl, r0]
   174f8:	280a      	cmp	r0, #10
   174fa:	f47f af55 	bne.w	173a8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   174fe:	2001      	movs	r0, #1
   17500:	e001      	b.n	17506 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   17502:	2000      	movs	r0, #0
   17504:	46c3      	mov	fp, r8
   17506:	f8d9 1008 	ldr.w	r1, [r9, #8]
   1750a:	eba8 040b 	sub.w	r4, r8, fp
   1750e:	7008      	strb	r0, [r1, #0]
   17510:	fab4 f084 	clz	r0, r4
   17514:	0942      	lsrs	r2, r0, #5
   17516:	fabb f08b 	clz	r0, fp
   1751a:	0943      	lsrs	r3, r0, #5
   1751c:	e9d9 0100 	ldrd	r0, r1, [r9]
   17520:	ea53 0602 	orrs.w	r6, r3, r2
   17524:	d106      	bne.n	17534 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   17526:	45d8      	cmp	r8, fp
   17528:	d926      	bls.n	17578 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   1752a:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   1752e:	f112 0f41 	cmn.w	r2, #65	; 0x41
   17532:	dd21      	ble.n	17578 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   17534:	68cb      	ldr	r3, [r1, #12]
   17536:	4651      	mov	r1, sl
   17538:	465a      	mov	r2, fp
   1753a:	4798      	blx	r3
   1753c:	b9a8      	cbnz	r0, 1756a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   1753e:	2e00      	cmp	r6, #0
   17540:	f47f af19 	bne.w	17376 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   17544:	45d8      	cmp	r8, fp
   17546:	d905      	bls.n	17554 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   17548:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   1754c:	f110 0f41 	cmn.w	r0, #65	; 0x41
   17550:	f73f af11 	bgt.w	17376 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   17554:	4650      	mov	r0, sl
   17556:	4641      	mov	r1, r8
   17558:	465a      	mov	r2, fp
   1755a:	4643      	mov	r3, r8
   1755c:	f000 fe4d 	bl	181fa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   17560:	defe      	udf	#254	; 0xfe
   17562:	2000      	movs	r0, #0
   17564:	b001      	add	sp, #4
   17566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1756a:	2001      	movs	r0, #1
   1756c:	b001      	add	sp, #4
   1756e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17572:	f000 fe20 	bl	181b6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   17576:	defe      	udf	#254	; 0xfe
   17578:	4650      	mov	r0, sl
   1757a:	4641      	mov	r1, r8
   1757c:	2200      	movs	r2, #0
   1757e:	465b      	mov	r3, fp
   17580:	f000 fe3b 	bl	181fa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   17584:	defe      	udf	#254	; 0xfe

00017586 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   17586:	b5f0      	push	{r4, r5, r6, r7, lr}
   17588:	b08d      	sub	sp, #52	; 0x34
   1758a:	4604      	mov	r4, r0
   1758c:	7a00      	ldrb	r0, [r0, #8]
   1758e:	b138      	cbz	r0, 175a0 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   17590:	2001      	movs	r0, #1
   17592:	6861      	ldr	r1, [r4, #4]
   17594:	7220      	strb	r0, [r4, #8]
   17596:	1c48      	adds	r0, r1, #1
   17598:	6060      	str	r0, [r4, #4]
   1759a:	4620      	mov	r0, r4
   1759c:	b00d      	add	sp, #52	; 0x34
   1759e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   175a0:	4616      	mov	r6, r2
   175a2:	460d      	mov	r5, r1
   175a4:	e9d4 1200 	ldrd	r1, r2, [r4]
   175a8:	7808      	ldrb	r0, [r1, #0]
   175aa:	0740      	lsls	r0, r0, #29
   175ac:	d419      	bmi.n	175e2 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   175ae:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   175b2:	f640 2196 	movw	r1, #2710	; 0xa96
   175b6:	f640 2c9a 	movw	ip, #2714	; 0xa9a
   175ba:	f2c0 0102 	movt	r1, #2
   175be:	2a00      	cmp	r2, #0
   175c0:	f2c0 0c02 	movt	ip, #2
   175c4:	bf08      	it	eq
   175c6:	4661      	moveq	r1, ip
   175c8:	68db      	ldr	r3, [r3, #12]
   175ca:	f04f 0202 	mov.w	r2, #2
   175ce:	bf08      	it	eq
   175d0:	2201      	moveq	r2, #1
   175d2:	4798      	blx	r3
   175d4:	2800      	cmp	r0, #0
   175d6:	d1db      	bne.n	17590 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   175d8:	68f2      	ldr	r2, [r6, #12]
   175da:	4628      	mov	r0, r5
   175dc:	6821      	ldr	r1, [r4, #0]
   175de:	4790      	blx	r2
   175e0:	e7d7      	b.n	17592 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   175e2:	b95a      	cbnz	r2, 175fc <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   175e4:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   175e8:	2202      	movs	r2, #2
   175ea:	68cb      	ldr	r3, [r1, #12]
   175ec:	f640 2198 	movw	r1, #2712	; 0xa98
   175f0:	f2c0 0102 	movt	r1, #2
   175f4:	4798      	blx	r3
   175f6:	2800      	cmp	r0, #0
   175f8:	d1ca      	bne.n	17590 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   175fa:	6821      	ldr	r1, [r4, #0]
   175fc:	2001      	movs	r0, #1
   175fe:	f10d 030f 	add.w	r3, sp, #15
   17602:	f88d 000f 	strb.w	r0, [sp, #15]
   17606:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   1760a:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   1760e:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   17612:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   17616:	f891 1020 	ldrb.w	r1, [r1, #32]
   1761a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   1761e:	a904      	add	r1, sp, #16
   17620:	e9cd 0204 	strd	r0, r2, [sp, #16]
   17624:	f640 207c 	movw	r0, #2684	; 0xa7c
   17628:	f2c0 0002 	movt	r0, #2
   1762c:	68f2      	ldr	r2, [r6, #12]
   1762e:	900b      	str	r0, [sp, #44]	; 0x2c
   17630:	4668      	mov	r0, sp
   17632:	900a      	str	r0, [sp, #40]	; 0x28
   17634:	4628      	mov	r0, r5
   17636:	e9cd 3708 	strd	r3, r7, [sp, #32]
   1763a:	e9cd ce06 	strd	ip, lr, [sp, #24]
   1763e:	4790      	blx	r2
   17640:	2800      	cmp	r0, #0
   17642:	d1a5      	bne.n	17590 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   17644:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   17648:	2202      	movs	r2, #2
   1764a:	68cb      	ldr	r3, [r1, #12]
   1764c:	f640 2194 	movw	r1, #2708	; 0xa94
   17650:	f2c0 0102 	movt	r1, #2
   17654:	4798      	blx	r3
   17656:	e79c      	b.n	17592 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

00017658 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   17658:	b5b0      	push	{r4, r5, r7, lr}
   1765a:	4604      	mov	r4, r0
   1765c:	7a05      	ldrb	r5, [r0, #8]
   1765e:	6840      	ldr	r0, [r0, #4]
   17660:	b308      	cbz	r0, 176a6 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   17662:	b10d      	cbz	r5, 17668 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   17664:	2501      	movs	r5, #1
   17666:	e01d      	b.n	176a4 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   17668:	2801      	cmp	r0, #1
   1766a:	d110      	bne.n	1768e <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   1766c:	7a60      	ldrb	r0, [r4, #9]
   1766e:	b170      	cbz	r0, 1768e <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   17670:	6821      	ldr	r1, [r4, #0]
   17672:	7808      	ldrb	r0, [r1, #0]
   17674:	0740      	lsls	r0, r0, #29
   17676:	d40a      	bmi.n	1768e <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   17678:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1767c:	2201      	movs	r2, #1
   1767e:	68cb      	ldr	r3, [r1, #12]
   17680:	f640 219b 	movw	r1, #2715	; 0xa9b
   17684:	f2c0 0102 	movt	r1, #2
   17688:	2501      	movs	r5, #1
   1768a:	4798      	blx	r3
   1768c:	b950      	cbnz	r0, 176a4 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   1768e:	6821      	ldr	r1, [r4, #0]
   17690:	2201      	movs	r2, #1
   17692:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   17696:	68cb      	ldr	r3, [r1, #12]
   17698:	f640 219c 	movw	r1, #2716	; 0xa9c
   1769c:	f2c0 0102 	movt	r1, #2
   176a0:	4798      	blx	r3
   176a2:	4605      	mov	r5, r0
   176a4:	7225      	strb	r5, [r4, #8]
   176a6:	2d00      	cmp	r5, #0
   176a8:	bf18      	it	ne
   176aa:	2501      	movne	r5, #1
   176ac:	4628      	mov	r0, r5
   176ae:	bdb0      	pop	{r4, r5, r7, pc}

000176b0 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   176b0:	b580      	push	{r7, lr}
   176b2:	b082      	sub	sp, #8
   176b4:	468c      	mov	ip, r1
   176b6:	2100      	movs	r1, #0
   176b8:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   176bc:	9101      	str	r1, [sp, #4]
   176be:	d207      	bcs.n	176d0 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   176c0:	f88d c004 	strb.w	ip, [sp, #4]
   176c4:	a901      	add	r1, sp, #4
   176c6:	2201      	movs	r2, #1
   176c8:	f7ff fe47 	bl	1735a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   176cc:	b002      	add	sp, #8
   176ce:	bd80      	pop	{r7, pc}
   176d0:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   176d4:	d210      	bcs.n	176f8 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   176d6:	ea4f 119c 	mov.w	r1, ip, lsr #6
   176da:	2306      	movs	r3, #6
   176dc:	2202      	movs	r2, #2
   176de:	f363 115f 	bfi	r1, r3, #5, #27
   176e2:	f362 1c9f 	bfi	ip, r2, #6, #26
   176e6:	f88d c005 	strb.w	ip, [sp, #5]
   176ea:	f88d 1004 	strb.w	r1, [sp, #4]
   176ee:	a901      	add	r1, sp, #4
   176f0:	f7ff fe33 	bl	1735a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   176f4:	b002      	add	sp, #8
   176f6:	bd80      	pop	{r7, pc}
   176f8:	2202      	movs	r2, #2
   176fa:	4663      	mov	r3, ip
   176fc:	a901      	add	r1, sp, #4
   176fe:	f362 139f 	bfi	r3, r2, #6, #26
   17702:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   17706:	d213      	bcs.n	17730 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   17708:	f88d 3006 	strb.w	r3, [sp, #6]
   1770c:	ea4f 139c 	mov.w	r3, ip, lsr #6
   17710:	f362 139f 	bfi	r3, r2, #6, #26
   17714:	f88d 3005 	strb.w	r3, [sp, #5]
   17718:	ea4f 321c 	mov.w	r2, ip, lsr #12
   1771c:	230e      	movs	r3, #14
   1771e:	f363 121f 	bfi	r2, r3, #4, #28
   17722:	f88d 2004 	strb.w	r2, [sp, #4]
   17726:	2203      	movs	r2, #3
   17728:	f7ff fe17 	bl	1735a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   1772c:	b002      	add	sp, #8
   1772e:	bd80      	pop	{r7, pc}
   17730:	f88d 3007 	strb.w	r3, [sp, #7]
   17734:	ea4f 139c 	mov.w	r3, ip, lsr #6
   17738:	f362 139f 	bfi	r3, r2, #6, #26
   1773c:	f88d 3006 	strb.w	r3, [sp, #6]
   17740:	ea4f 331c 	mov.w	r3, ip, lsr #12
   17744:	f362 139f 	bfi	r3, r2, #6, #26
   17748:	22f0      	movs	r2, #240	; 0xf0
   1774a:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   1774e:	f88d 3005 	strb.w	r3, [sp, #5]
   17752:	f88d 2004 	strb.w	r2, [sp, #4]
   17756:	2204      	movs	r2, #4
   17758:	f7ff fdff 	bl	1735a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   1775c:	b002      	add	sp, #8
   1775e:	bd80      	pop	{r7, pc}

00017760 <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   17760:	b570      	push	{r4, r5, r6, lr}
   17762:	b088      	sub	sp, #32
   17764:	9001      	str	r0, [sp, #4]
   17766:	aa02      	add	r2, sp, #8
   17768:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   1776c:	f640 3168 	movw	r1, #2920	; 0xb68
   17770:	4610      	mov	r0, r2
   17772:	f2c0 0102 	movt	r1, #2
   17776:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   1777a:	a801      	add	r0, sp, #4
   1777c:	f000 f89e 	bl	178bc <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17780:	b008      	add	sp, #32
   17782:	bd70      	pop	{r4, r5, r6, pc}

00017784 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   17784:	6800      	ldr	r0, [r0, #0]
   17786:	f7ff bde8 	b.w	1735a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

0001778a <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   1778a:	6800      	ldr	r0, [r0, #0]
   1778c:	f7ff bf90 	b.w	176b0 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

00017790 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   17790:	b570      	push	{r4, r5, r6, lr}
   17792:	b088      	sub	sp, #32
   17794:	6800      	ldr	r0, [r0, #0]
   17796:	aa02      	add	r2, sp, #8
   17798:	9001      	str	r0, [sp, #4]
   1779a:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   1779e:	4610      	mov	r0, r2
   177a0:	f640 3168 	movw	r1, #2920	; 0xb68
   177a4:	f2c0 0102 	movt	r1, #2
   177a8:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   177ac:	a801      	add	r0, sp, #4
   177ae:	f000 f885 	bl	178bc <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   177b2:	b008      	add	sp, #32
   177b4:	bd70      	pop	{r4, r5, r6, pc}

000177b6 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   177b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177ba:	b08d      	sub	sp, #52	; 0x34
   177bc:	468c      	mov	ip, r1
   177be:	6801      	ldr	r1, [r0, #0]
   177c0:	f248 5e1f 	movw	lr, #34079	; 0x851f
   177c4:	f640 209f 	movw	r0, #2719	; 0xa9f
   177c8:	f242 7810 	movw	r8, #10000	; 0x2710
   177cc:	4541      	cmp	r1, r8
   177ce:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   177d2:	f2c0 0002 	movt	r0, #2
   177d6:	d337      	bcc.n	17848 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   177d8:	f241 7959 	movw	r9, #5977	; 0x1759
   177dc:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   177e0:	f10d 0b0c 	add.w	fp, sp, #12
   177e4:	2300      	movs	r3, #0
   177e6:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   177ea:	f04f 0a64 	mov.w	sl, #100	; 0x64
   177ee:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   177f2:	fba1 2409 	umull	r2, r4, r1, r9
   177f6:	42b9      	cmp	r1, r7
   177f8:	ea4f 3254 	mov.w	r2, r4, lsr #13
   177fc:	fb02 1418 	mls	r4, r2, r8, r1
   17800:	4611      	mov	r1, r2
   17802:	b2a5      	uxth	r5, r4
   17804:	fba5 560e 	umull	r5, r6, r5, lr
   17808:	ea4f 1556 	mov.w	r5, r6, lsr #5
   1780c:	eb0b 0603 	add.w	r6, fp, r3
   17810:	fb05 441a 	mls	r4, r5, sl, r4
   17814:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   17818:	f1a3 0304 	sub.w	r3, r3, #4
   1781c:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   17820:	b2a4      	uxth	r4, r4
   17822:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   17826:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   1782a:	d8e2      	bhi.n	177f2 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   1782c:	f103 0427 	add.w	r4, r3, #39	; 0x27
   17830:	4611      	mov	r1, r2
   17832:	2963      	cmp	r1, #99	; 0x63
   17834:	dc0b      	bgt.n	1784e <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   17836:	460b      	mov	r3, r1
   17838:	2b0a      	cmp	r3, #10
   1783a:	db17      	blt.n	1786c <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   1783c:	1ea1      	subs	r1, r4, #2
   1783e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   17842:	aa03      	add	r2, sp, #12
   17844:	5250      	strh	r0, [r2, r1]
   17846:	e016      	b.n	17876 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   17848:	2427      	movs	r4, #39	; 0x27
   1784a:	2963      	cmp	r1, #99	; 0x63
   1784c:	ddf3      	ble.n	17836 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   1784e:	b28a      	uxth	r2, r1
   17850:	3c02      	subs	r4, #2
   17852:	fba2 230e 	umull	r2, r3, r2, lr
   17856:	2264      	movs	r2, #100	; 0x64
   17858:	095b      	lsrs	r3, r3, #5
   1785a:	fb03 1112 	mls	r1, r3, r2, r1
   1785e:	aa03      	add	r2, sp, #12
   17860:	b289      	uxth	r1, r1
   17862:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   17866:	5311      	strh	r1, [r2, r4]
   17868:	2b0a      	cmp	r3, #10
   1786a:	dae7      	bge.n	1783c <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   1786c:	1e61      	subs	r1, r4, #1
   1786e:	aa03      	add	r2, sp, #12
   17870:	f103 0030 	add.w	r0, r3, #48	; 0x30
   17874:	5450      	strb	r0, [r2, r1]
   17876:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   1787a:	aa03      	add	r2, sp, #12
   1787c:	4411      	add	r1, r2
   1787e:	f640 0264 	movw	r2, #2148	; 0x864
   17882:	e9cd 1000 	strd	r1, r0, [sp]
   17886:	f2c0 0202 	movt	r2, #2
   1788a:	4660      	mov	r0, ip
   1788c:	2101      	movs	r1, #1
   1788e:	2300      	movs	r3, #0
   17890:	f000 f8f4 	bl	17a7c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   17894:	b00d      	add	sp, #52	; 0x34
   17896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001789a <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   1789a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1789e:	b086      	sub	sp, #24
   178a0:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   178a4:	466a      	mov	r2, sp
   178a6:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   178aa:	4613      	mov	r3, r2
   178ac:	4660      	mov	r0, ip
   178ae:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   178b2:	f000 f803 	bl	178bc <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   178b6:	b006      	add	sp, #24
   178b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000178bc <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   178bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178c0:	b08b      	sub	sp, #44	; 0x2c
   178c2:	2303      	movs	r3, #3
   178c4:	6897      	ldr	r7, [r2, #8]
   178c6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   178ca:	2320      	movs	r3, #32
   178cc:	9303      	str	r3, [sp, #12]
   178ce:	2300      	movs	r3, #0
   178d0:	2f00      	cmp	r7, #0
   178d2:	9302      	str	r3, [sp, #8]
   178d4:	e9cd 0108 	strd	r0, r1, [sp, #32]
   178d8:	9306      	str	r3, [sp, #24]
   178da:	9304      	str	r3, [sp, #16]
   178dc:	d07c      	beq.n	179d8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   178de:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   178e2:	e9d2 9400 	ldrd	r9, r4, [r2]
   178e6:	45a3      	cmp	fp, r4
   178e8:	bf88      	it	hi
   178ea:	46a3      	movhi	fp, r4
   178ec:	f1bb 0f00 	cmp.w	fp, #0
   178f0:	f000 809b 	beq.w	17a2a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   178f4:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   178f8:	68cd      	ldr	r5, [r1, #12]
   178fa:	9201      	str	r2, [sp, #4]
   178fc:	e9d9 3200 	ldrd	r3, r2, [r9]
   17900:	4619      	mov	r1, r3
   17902:	47a8      	blx	r5
   17904:	2800      	cmp	r0, #0
   17906:	f040 809e 	bne.w	17a46 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1790a:	464d      	mov	r5, r9
   1790c:	f04f 0a01 	mov.w	sl, #1
   17910:	f04f 0800 	mov.w	r8, #0
   17914:	f04f 0910 	mov.w	r9, #16
   17918:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   1791c:	6841      	ldr	r1, [r0, #4]
   1791e:	9103      	str	r1, [sp, #12]
   17920:	7f01      	ldrb	r1, [r0, #28]
   17922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   17926:	6881      	ldr	r1, [r0, #8]
   17928:	9102      	str	r1, [sp, #8]
   1792a:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   1792e:	b18a      	cbz	r2, 17954 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   17930:	2a02      	cmp	r2, #2
   17932:	d011      	beq.n	17958 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   17934:	9a01      	ldr	r2, [sp, #4]
   17936:	4291      	cmp	r1, r2
   17938:	f080 8098 	bcs.w	17a6c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   1793c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   17940:	f247 73b7 	movw	r3, #30647	; 0x77b7
   17944:	f2c0 0301 	movt	r3, #1
   17948:	6852      	ldr	r2, [r2, #4]
   1794a:	429a      	cmp	r2, r3
   1794c:	d104      	bne.n	17958 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   1794e:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   17952:	6809      	ldr	r1, [r1, #0]
   17954:	2201      	movs	r2, #1
   17956:	e000      	b.n	1795a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   17958:	2200      	movs	r2, #0
   1795a:	e9cd 2104 	strd	r2, r1, [sp, #16]
   1795e:	f857 1009 	ldr.w	r1, [r7, r9]
   17962:	68c0      	ldr	r0, [r0, #12]
   17964:	b180      	cbz	r0, 17988 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   17966:	2802      	cmp	r0, #2
   17968:	d010      	beq.n	1798c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   1796a:	9801      	ldr	r0, [sp, #4]
   1796c:	4281      	cmp	r1, r0
   1796e:	d27d      	bcs.n	17a6c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   17970:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   17974:	f247 72b7 	movw	r2, #30647	; 0x77b7
   17978:	f2c0 0201 	movt	r2, #1
   1797c:	6840      	ldr	r0, [r0, #4]
   1797e:	4290      	cmp	r0, r2
   17980:	d104      	bne.n	1798c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   17982:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   17986:	6801      	ldr	r1, [r0, #0]
   17988:	2001      	movs	r0, #1
   1798a:	e000      	b.n	1798e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   1798c:	2000      	movs	r0, #0
   1798e:	eb07 0209 	add.w	r2, r7, r9
   17992:	e9cd 0106 	strd	r0, r1, [sp, #24]
   17996:	9801      	ldr	r0, [sp, #4]
   17998:	f852 1c10 	ldr.w	r1, [r2, #-16]
   1799c:	4281      	cmp	r1, r0
   1799e:	d25d      	bcs.n	17a5c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   179a0:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   179a4:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   179a8:	684a      	ldr	r2, [r1, #4]
   179aa:	a902      	add	r1, sp, #8
   179ac:	4790      	blx	r2
   179ae:	2800      	cmp	r0, #0
   179b0:	d149      	bne.n	17a46 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   179b2:	45da      	cmp	sl, fp
   179b4:	d24b      	bcs.n	17a4e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   179b6:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   179ba:	eb05 0208 	add.w	r2, r5, r8
   179be:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   179c2:	68db      	ldr	r3, [r3, #12]
   179c4:	4798      	blx	r3
   179c6:	f109 0920 	add.w	r9, r9, #32
   179ca:	f108 0808 	add.w	r8, r8, #8
   179ce:	f10a 0a01 	add.w	sl, sl, #1
   179d2:	2800      	cmp	r0, #0
   179d4:	d0a0      	beq.n	17918 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   179d6:	e036      	b.n	17a46 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   179d8:	6956      	ldr	r6, [r2, #20]
   179da:	e9d2 9400 	ldrd	r9, r4, [r2]
   179de:	42a6      	cmp	r6, r4
   179e0:	bf88      	it	hi
   179e2:	4626      	movhi	r6, r4
   179e4:	b30e      	cbz	r6, 17a2a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   179e6:	6917      	ldr	r7, [r2, #16]
   179e8:	e9d9 3200 	ldrd	r3, r2, [r9]
   179ec:	68cd      	ldr	r5, [r1, #12]
   179ee:	4619      	mov	r1, r3
   179f0:	47a8      	blx	r5
   179f2:	bb40      	cbnz	r0, 17a46 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   179f4:	f10d 0808 	add.w	r8, sp, #8
   179f8:	2500      	movs	r5, #0
   179fa:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   179fe:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   17a02:	684a      	ldr	r2, [r1, #4]
   17a04:	4641      	mov	r1, r8
   17a06:	4790      	blx	r2
   17a08:	b9e8      	cbnz	r0, 17a46 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   17a0a:	f105 0a01 	add.w	sl, r5, #1
   17a0e:	45b2      	cmp	sl, r6
   17a10:	d20d      	bcs.n	17a2e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   17a12:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   17a16:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   17a1a:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   17a1e:	68db      	ldr	r3, [r3, #12]
   17a20:	4798      	blx	r3
   17a22:	2800      	cmp	r0, #0
   17a24:	4655      	mov	r5, sl
   17a26:	d0e8      	beq.n	179fa <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   17a28:	e00d      	b.n	17a46 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   17a2a:	f04f 0a00 	mov.w	sl, #0
   17a2e:	4554      	cmp	r4, sl
   17a30:	d910      	bls.n	17a54 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   17a32:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   17a36:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   17a3a:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   17a3e:	6852      	ldr	r2, [r2, #4]
   17a40:	68db      	ldr	r3, [r3, #12]
   17a42:	4798      	blx	r3
   17a44:	b130      	cbz	r0, 17a54 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   17a46:	2001      	movs	r0, #1
   17a48:	b00b      	add	sp, #44	; 0x2c
   17a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a4e:	46a9      	mov	r9, r5
   17a50:	4554      	cmp	r4, sl
   17a52:	d8ee      	bhi.n	17a32 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   17a54:	2000      	movs	r0, #0
   17a56:	b00b      	add	sp, #44	; 0x2c
   17a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a5c:	f640 3098 	movw	r0, #2968	; 0xb98
   17a60:	f2c0 0002 	movt	r0, #2
   17a64:	9a01      	ldr	r2, [sp, #4]
   17a66:	f7ff fc47 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   17a6a:	defe      	udf	#254	; 0xfe
   17a6c:	f640 30a8 	movw	r0, #2984	; 0xba8
   17a70:	f2c0 0002 	movt	r0, #2
   17a74:	9a01      	ldr	r2, [sp, #4]
   17a76:	f7ff fc3f 	bl	172f8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   17a7a:	defe      	udf	#254	; 0xfe

00017a7c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   17a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a80:	b083      	sub	sp, #12
   17a82:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   17a86:	469a      	mov	sl, r3
   17a88:	4604      	mov	r4, r0
   17a8a:	b1e1      	cbz	r1, 17ac6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   17a8c:	f8d4 e000 	ldr.w	lr, [r4]
   17a90:	f04f 082b 	mov.w	r8, #43	; 0x2b
   17a94:	f01e 0101 	ands.w	r1, lr, #1
   17a98:	bf08      	it	eq
   17a9a:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   17a9e:	eb01 0907 	add.w	r9, r1, r7
   17aa2:	ea5f 714e 	movs.w	r1, lr, lsl #29
   17aa6:	d517      	bpl.n	17ad8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   17aa8:	f1ba 0f00 	cmp.w	sl, #0
   17aac:	d033      	beq.n	17b16 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   17aae:	f1aa 0101 	sub.w	r1, sl, #1
   17ab2:	f00a 0c03 	and.w	ip, sl, #3
   17ab6:	2903      	cmp	r1, #3
   17ab8:	d22f      	bcs.n	17b1a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   17aba:	2100      	movs	r1, #0
   17abc:	4613      	mov	r3, r2
   17abe:	f1bc 0f00 	cmp.w	ip, #0
   17ac2:	d152      	bne.n	17b6a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   17ac4:	e069      	b.n	17b9a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   17ac6:	f8d4 e000 	ldr.w	lr, [r4]
   17aca:	f107 0901 	add.w	r9, r7, #1
   17ace:	f04f 082d 	mov.w	r8, #45	; 0x2d
   17ad2:	ea5f 714e 	movs.w	r1, lr, lsl #29
   17ad6:	d4e7      	bmi.n	17aa8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   17ad8:	f04f 0a00 	mov.w	sl, #0
   17adc:	2200      	movs	r2, #0
   17ade:	68a0      	ldr	r0, [r4, #8]
   17ae0:	2801      	cmp	r0, #1
   17ae2:	d161      	bne.n	17ba8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   17ae4:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   17ae8:	45cb      	cmp	fp, r9
   17aea:	d95d      	bls.n	17ba8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   17aec:	ea5f 700e 	movs.w	r0, lr, lsl #28
   17af0:	d46e      	bmi.n	17bd0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   17af2:	9202      	str	r2, [sp, #8]
   17af4:	ebab 0109 	sub.w	r1, fp, r9
   17af8:	f894 2020 	ldrb.w	r2, [r4, #32]
   17afc:	2000      	movs	r0, #0
   17afe:	46a9      	mov	r9, r5
   17b00:	460e      	mov	r6, r1
   17b02:	2a03      	cmp	r2, #3
   17b04:	bf08      	it	eq
   17b06:	2201      	moveq	r2, #1
   17b08:	e8df f002 	tbb	[pc, r2]
   17b0c:	02840287 	.word	0x02840287
   17b10:	2600      	movs	r6, #0
   17b12:	4608      	mov	r0, r1
   17b14:	e081      	b.n	17c1a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   17b16:	2100      	movs	r1, #0
   17b18:	e03f      	b.n	17b9a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   17b1a:	ebac 060a 	sub.w	r6, ip, sl
   17b1e:	2100      	movs	r1, #0
   17b20:	4693      	mov	fp, r2
   17b22:	4613      	mov	r3, r2
   17b24:	e9cd 7501 	strd	r7, r5, [sp, #4]
   17b28:	781a      	ldrb	r2, [r3, #0]
   17b2a:	785d      	ldrb	r5, [r3, #1]
   17b2c:	7898      	ldrb	r0, [r3, #2]
   17b2e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17b32:	78df      	ldrb	r7, [r3, #3]
   17b34:	2a80      	cmp	r2, #128	; 0x80
   17b36:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   17b3a:	bf08      	it	eq
   17b3c:	3101      	addeq	r1, #1
   17b3e:	2a80      	cmp	r2, #128	; 0x80
   17b40:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   17b44:	bf08      	it	eq
   17b46:	3101      	addeq	r1, #1
   17b48:	2880      	cmp	r0, #128	; 0x80
   17b4a:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   17b4e:	bf08      	it	eq
   17b50:	3101      	addeq	r1, #1
   17b52:	2880      	cmp	r0, #128	; 0x80
   17b54:	bf08      	it	eq
   17b56:	3101      	addeq	r1, #1
   17b58:	3304      	adds	r3, #4
   17b5a:	3604      	adds	r6, #4
   17b5c:	d1e4      	bne.n	17b28 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   17b5e:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   17b62:	465a      	mov	r2, fp
   17b64:	f1bc 0f00 	cmp.w	ip, #0
   17b68:	d017      	beq.n	17b9a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   17b6a:	7818      	ldrb	r0, [r3, #0]
   17b6c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   17b70:	2880      	cmp	r0, #128	; 0x80
   17b72:	bf08      	it	eq
   17b74:	3101      	addeq	r1, #1
   17b76:	f1bc 0f01 	cmp.w	ip, #1
   17b7a:	d00e      	beq.n	17b9a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   17b7c:	7858      	ldrb	r0, [r3, #1]
   17b7e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   17b82:	2880      	cmp	r0, #128	; 0x80
   17b84:	bf08      	it	eq
   17b86:	3101      	addeq	r1, #1
   17b88:	f1bc 0f02 	cmp.w	ip, #2
   17b8c:	d005      	beq.n	17b9a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   17b8e:	7898      	ldrb	r0, [r3, #2]
   17b90:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   17b94:	2880      	cmp	r0, #128	; 0x80
   17b96:	bf08      	it	eq
   17b98:	3101      	addeq	r1, #1
   17b9a:	eb09 000a 	add.w	r0, r9, sl
   17b9e:	eba0 0901 	sub.w	r9, r0, r1
   17ba2:	68a0      	ldr	r0, [r4, #8]
   17ba4:	2801      	cmp	r0, #1
   17ba6:	d09d      	beq.n	17ae4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   17ba8:	4620      	mov	r0, r4
   17baa:	4641      	mov	r1, r8
   17bac:	4653      	mov	r3, sl
   17bae:	f000 f893 	bl	17cd8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   17bb2:	b120      	cbz	r0, 17bbe <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   17bb4:	2601      	movs	r6, #1
   17bb6:	4630      	mov	r0, r6
   17bb8:	b003      	add	sp, #12
   17bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17bbe:	69e1      	ldr	r1, [r4, #28]
   17bc0:	463a      	mov	r2, r7
   17bc2:	69a0      	ldr	r0, [r4, #24]
   17bc4:	68cb      	ldr	r3, [r1, #12]
   17bc6:	4629      	mov	r1, r5
   17bc8:	b003      	add	sp, #12
   17bca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bce:	4718      	bx	r3
   17bd0:	6860      	ldr	r0, [r4, #4]
   17bd2:	2601      	movs	r6, #1
   17bd4:	9002      	str	r0, [sp, #8]
   17bd6:	2030      	movs	r0, #48	; 0x30
   17bd8:	f894 1020 	ldrb.w	r1, [r4, #32]
   17bdc:	4653      	mov	r3, sl
   17bde:	6060      	str	r0, [r4, #4]
   17be0:	4620      	mov	r0, r4
   17be2:	9101      	str	r1, [sp, #4]
   17be4:	4641      	mov	r1, r8
   17be6:	f884 6020 	strb.w	r6, [r4, #32]
   17bea:	f000 f875 	bl	17cd8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   17bee:	2800      	cmp	r0, #0
   17bf0:	d1e1      	bne.n	17bb6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   17bf2:	f894 2020 	ldrb.w	r2, [r4, #32]
   17bf6:	ebab 0109 	sub.w	r1, fp, r9
   17bfa:	2000      	movs	r0, #0
   17bfc:	46a9      	mov	r9, r5
   17bfe:	2a03      	cmp	r2, #3
   17c00:	bf08      	it	eq
   17c02:	2201      	moveq	r2, #1
   17c04:	460e      	mov	r6, r1
   17c06:	e8df f002 	tbb	[pc, r2]
   17c0a:	0235      	.short	0x0235
   17c0c:	0232      	.short	0x0232
   17c0e:	2600      	movs	r6, #0
   17c10:	4608      	mov	r0, r1
   17c12:	e02f      	b.n	17c74 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   17c14:	0848      	lsrs	r0, r1, #1
   17c16:	3101      	adds	r1, #1
   17c18:	084e      	lsrs	r6, r1, #1
   17c1a:	1c45      	adds	r5, r0, #1
   17c1c:	3d01      	subs	r5, #1
   17c1e:	d007      	beq.n	17c30 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   17c20:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   17c24:	6861      	ldr	r1, [r4, #4]
   17c26:	6912      	ldr	r2, [r2, #16]
   17c28:	4790      	blx	r2
   17c2a:	2800      	cmp	r0, #0
   17c2c:	d0f6      	beq.n	17c1c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   17c2e:	e7c1      	b.n	17bb4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   17c30:	9a02      	ldr	r2, [sp, #8]
   17c32:	4620      	mov	r0, r4
   17c34:	4641      	mov	r1, r8
   17c36:	4653      	mov	r3, sl
   17c38:	f8d4 b004 	ldr.w	fp, [r4, #4]
   17c3c:	f000 f84c 	bl	17cd8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   17c40:	2800      	cmp	r0, #0
   17c42:	d1b7      	bne.n	17bb4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   17c44:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   17c48:	463a      	mov	r2, r7
   17c4a:	68cb      	ldr	r3, [r1, #12]
   17c4c:	4649      	mov	r1, r9
   17c4e:	4798      	blx	r3
   17c50:	2800      	cmp	r0, #0
   17c52:	d1af      	bne.n	17bb4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   17c54:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   17c58:	1c77      	adds	r7, r6, #1
   17c5a:	2601      	movs	r6, #1
   17c5c:	3f01      	subs	r7, #1
   17c5e:	d02c      	beq.n	17cba <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   17c60:	6922      	ldr	r2, [r4, #16]
   17c62:	4628      	mov	r0, r5
   17c64:	4659      	mov	r1, fp
   17c66:	4790      	blx	r2
   17c68:	2800      	cmp	r0, #0
   17c6a:	d0f7      	beq.n	17c5c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   17c6c:	e7a3      	b.n	17bb6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   17c6e:	0848      	lsrs	r0, r1, #1
   17c70:	3101      	adds	r1, #1
   17c72:	084e      	lsrs	r6, r1, #1
   17c74:	1c45      	adds	r5, r0, #1
   17c76:	3d01      	subs	r5, #1
   17c78:	d007      	beq.n	17c8a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   17c7a:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   17c7e:	6861      	ldr	r1, [r4, #4]
   17c80:	6912      	ldr	r2, [r2, #16]
   17c82:	4790      	blx	r2
   17c84:	2800      	cmp	r0, #0
   17c86:	d0f6      	beq.n	17c76 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   17c88:	e794      	b.n	17bb4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   17c8a:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   17c8e:	463a      	mov	r2, r7
   17c90:	68cb      	ldr	r3, [r1, #12]
   17c92:	4649      	mov	r1, r9
   17c94:	f8d4 8004 	ldr.w	r8, [r4, #4]
   17c98:	4798      	blx	r3
   17c9a:	2800      	cmp	r0, #0
   17c9c:	f47f af8a 	bne.w	17bb4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   17ca0:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   17ca4:	1c77      	adds	r7, r6, #1
   17ca6:	2601      	movs	r6, #1
   17ca8:	3f01      	subs	r7, #1
   17caa:	d00b      	beq.n	17cc4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   17cac:	692a      	ldr	r2, [r5, #16]
   17cae:	4648      	mov	r0, r9
   17cb0:	4641      	mov	r1, r8
   17cb2:	4790      	blx	r2
   17cb4:	2800      	cmp	r0, #0
   17cb6:	d0f7      	beq.n	17ca8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   17cb8:	e77d      	b.n	17bb6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   17cba:	2600      	movs	r6, #0
   17cbc:	4630      	mov	r0, r6
   17cbe:	b003      	add	sp, #12
   17cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cc4:	9801      	ldr	r0, [sp, #4]
   17cc6:	2600      	movs	r6, #0
   17cc8:	f884 0020 	strb.w	r0, [r4, #32]
   17ccc:	9802      	ldr	r0, [sp, #8]
   17cce:	6060      	str	r0, [r4, #4]
   17cd0:	4630      	mov	r0, r6
   17cd2:	b003      	add	sp, #12
   17cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017cd8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   17cd8:	b570      	push	{r4, r5, r6, lr}
   17cda:	461c      	mov	r4, r3
   17cdc:	4615      	mov	r5, r2
   17cde:	4606      	mov	r6, r0
   17ce0:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   17ce4:	d006      	beq.n	17cf4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   17ce6:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   17cea:	6912      	ldr	r2, [r2, #16]
   17cec:	4790      	blx	r2
   17cee:	b108      	cbz	r0, 17cf4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   17cf0:	2001      	movs	r0, #1
   17cf2:	bd70      	pop	{r4, r5, r6, pc}
   17cf4:	b13d      	cbz	r5, 17d06 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   17cf6:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   17cfa:	4622      	mov	r2, r4
   17cfc:	68cb      	ldr	r3, [r1, #12]
   17cfe:	4629      	mov	r1, r5
   17d00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17d04:	4718      	bx	r3
   17d06:	2000      	movs	r0, #0
   17d08:	bd70      	pop	{r4, r5, r6, pc}
	...

00017d0c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   17d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d10:	b081      	sub	sp, #4
   17d12:	f8d0 e008 	ldr.w	lr, [r0, #8]
   17d16:	4682      	mov	sl, r0
   17d18:	6900      	ldr	r0, [r0, #16]
   17d1a:	4691      	mov	r9, r2
   17d1c:	4688      	mov	r8, r1
   17d1e:	f1be 0f01 	cmp.w	lr, #1
   17d22:	d111      	bne.n	17d48 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   17d24:	2801      	cmp	r0, #1
   17d26:	d012      	beq.n	17d4e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   17d28:	f1b9 0f00 	cmp.w	r9, #0
   17d2c:	f000 80c5 	beq.w	17eba <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   17d30:	f1a9 0101 	sub.w	r1, r9, #1
   17d34:	f009 0003 	and.w	r0, r9, #3
   17d38:	2903      	cmp	r1, #3
   17d3a:	d267      	bcs.n	17e0c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   17d3c:	2100      	movs	r1, #0
   17d3e:	4642      	mov	r2, r8
   17d40:	2800      	cmp	r0, #0
   17d42:	f040 8083 	bne.w	17e4c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   17d46:	e097      	b.n	17e78 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17d48:	2801      	cmp	r0, #1
   17d4a:	f040 80bd 	bne.w	17ec8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   17d4e:	f1b9 0f00 	cmp.w	r9, #0
   17d52:	d054      	beq.n	17dfe <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   17d54:	f8da 0014 	ldr.w	r0, [sl, #20]
   17d58:	eb08 0109 	add.w	r1, r8, r9
   17d5c:	2200      	movs	r2, #0
   17d5e:	4647      	mov	r7, r8
   17d60:	1c43      	adds	r3, r0, #1
   17d62:	4646      	mov	r6, r8
   17d64:	463c      	mov	r4, r7
   17d66:	f914 5b01 	ldrsb.w	r5, [r4], #1
   17d6a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   17d6e:	b2e8      	uxtb	r0, r5
   17d70:	dc2e      	bgt.n	17dd0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   17d72:	428c      	cmp	r4, r1
   17d74:	d01a      	beq.n	17dac <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   17d76:	787d      	ldrb	r5, [r7, #1]
   17d78:	1cbc      	adds	r4, r7, #2
   17d7a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   17d7e:	4627      	mov	r7, r4
   17d80:	f000 0b1f 	and.w	fp, r0, #31
   17d84:	28df      	cmp	r0, #223	; 0xdf
   17d86:	d917      	bls.n	17db8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   17d88:	428f      	cmp	r7, r1
   17d8a:	d018      	beq.n	17dbe <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   17d8c:	f817 4b01 	ldrb.w	r4, [r7], #1
   17d90:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   17d94:	463c      	mov	r4, r7
   17d96:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   17d9a:	28f0      	cmp	r0, #240	; 0xf0
   17d9c:	d316      	bcc.n	17dcc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   17d9e:	428f      	cmp	r7, r1
   17da0:	d020      	beq.n	17de4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   17da2:	f817 0b01 	ldrb.w	r0, [r7], #1
   17da6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   17daa:	e01d      	b.n	17de8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   17dac:	2500      	movs	r5, #0
   17dae:	460f      	mov	r7, r1
   17db0:	f000 0b1f 	and.w	fp, r0, #31
   17db4:	28df      	cmp	r0, #223	; 0xdf
   17db6:	d8e7      	bhi.n	17d88 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   17db8:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   17dbc:	e008      	b.n	17dd0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   17dbe:	f04f 0c00 	mov.w	ip, #0
   17dc2:	460f      	mov	r7, r1
   17dc4:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   17dc8:	28f0      	cmp	r0, #240	; 0xf0
   17dca:	d2e8      	bcs.n	17d9e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   17dcc:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   17dd0:	4627      	mov	r7, r4
   17dd2:	3b01      	subs	r3, #1
   17dd4:	d065      	beq.n	17ea2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   17dd6:	1b90      	subs	r0, r2, r6
   17dd8:	42b9      	cmp	r1, r7
   17dda:	eb00 0207 	add.w	r2, r0, r7
   17dde:	463e      	mov	r6, r7
   17de0:	d1c0      	bne.n	17d64 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   17de2:	e061      	b.n	17ea8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   17de4:	2000      	movs	r0, #0
   17de6:	4627      	mov	r7, r4
   17de8:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   17dec:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   17df0:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   17df4:	4428      	add	r0, r5
   17df6:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   17dfa:	d1ea      	bne.n	17dd2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   17dfc:	e054      	b.n	17ea8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   17dfe:	2200      	movs	r2, #0
   17e00:	f1be 0f01 	cmp.w	lr, #1
   17e04:	d054      	beq.n	17eb0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   17e06:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   17e0a:	e062      	b.n	17ed2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   17e0c:	eba0 0309 	sub.w	r3, r0, r9
   17e10:	2100      	movs	r1, #0
   17e12:	4642      	mov	r2, r8
   17e14:	7817      	ldrb	r7, [r2, #0]
   17e16:	7856      	ldrb	r6, [r2, #1]
   17e18:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   17e1c:	7895      	ldrb	r5, [r2, #2]
   17e1e:	78d4      	ldrb	r4, [r2, #3]
   17e20:	2f80      	cmp	r7, #128	; 0x80
   17e22:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   17e26:	bf08      	it	eq
   17e28:	3101      	addeq	r1, #1
   17e2a:	2f80      	cmp	r7, #128	; 0x80
   17e2c:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   17e30:	bf08      	it	eq
   17e32:	3101      	addeq	r1, #1
   17e34:	2f80      	cmp	r7, #128	; 0x80
   17e36:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   17e3a:	bf08      	it	eq
   17e3c:	3101      	addeq	r1, #1
   17e3e:	2f80      	cmp	r7, #128	; 0x80
   17e40:	bf08      	it	eq
   17e42:	3101      	addeq	r1, #1
   17e44:	3204      	adds	r2, #4
   17e46:	3304      	adds	r3, #4
   17e48:	d1e4      	bne.n	17e14 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   17e4a:	b1a8      	cbz	r0, 17e78 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17e4c:	7813      	ldrb	r3, [r2, #0]
   17e4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17e52:	2b80      	cmp	r3, #128	; 0x80
   17e54:	bf08      	it	eq
   17e56:	3101      	addeq	r1, #1
   17e58:	2801      	cmp	r0, #1
   17e5a:	d00d      	beq.n	17e78 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17e5c:	7853      	ldrb	r3, [r2, #1]
   17e5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17e62:	2b80      	cmp	r3, #128	; 0x80
   17e64:	bf08      	it	eq
   17e66:	3101      	addeq	r1, #1
   17e68:	2802      	cmp	r0, #2
   17e6a:	d005      	beq.n	17e78 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17e6c:	7890      	ldrb	r0, [r2, #2]
   17e6e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   17e72:	2880      	cmp	r0, #128	; 0x80
   17e74:	bf08      	it	eq
   17e76:	3101      	addeq	r1, #1
   17e78:	f8da 000c 	ldr.w	r0, [sl, #12]
   17e7c:	eba9 0101 	sub.w	r1, r9, r1
   17e80:	4281      	cmp	r1, r0
   17e82:	d221      	bcs.n	17ec8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   17e84:	f1b9 0f00 	cmp.w	r9, #0
   17e88:	d029      	beq.n	17ede <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   17e8a:	f1a9 0101 	sub.w	r1, r9, #1
   17e8e:	f009 0c03 	and.w	ip, r9, #3
   17e92:	2903      	cmp	r1, #3
   17e94:	d225      	bcs.n	17ee2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   17e96:	2100      	movs	r1, #0
   17e98:	4643      	mov	r3, r8
   17e9a:	f1bc 0f00 	cmp.w	ip, #0
   17e9e:	d142      	bne.n	17f26 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   17ea0:	e059      	b.n	17f56 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   17ea2:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   17ea6:	d167      	bne.n	17f78 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   17ea8:	464a      	mov	r2, r9
   17eaa:	f1be 0f01 	cmp.w	lr, #1
   17eae:	d1aa      	bne.n	17e06 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   17eb0:	4691      	mov	r9, r2
   17eb2:	f1b9 0f00 	cmp.w	r9, #0
   17eb6:	f47f af3b 	bne.w	17d30 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   17eba:	2100      	movs	r1, #0
   17ebc:	f8da 000c 	ldr.w	r0, [sl, #12]
   17ec0:	eba9 0101 	sub.w	r1, r9, r1
   17ec4:	4281      	cmp	r1, r0
   17ec6:	d3dd      	bcc.n	17e84 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   17ec8:	f8da 101c 	ldr.w	r1, [sl, #28]
   17ecc:	464a      	mov	r2, r9
   17ece:	f8da 0018 	ldr.w	r0, [sl, #24]
   17ed2:	68cb      	ldr	r3, [r1, #12]
   17ed4:	4641      	mov	r1, r8
   17ed6:	b001      	add	sp, #4
   17ed8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17edc:	4718      	bx	r3
   17ede:	2100      	movs	r1, #0
   17ee0:	e039      	b.n	17f56 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   17ee2:	ebac 0709 	sub.w	r7, ip, r9
   17ee6:	2100      	movs	r1, #0
   17ee8:	4643      	mov	r3, r8
   17eea:	781e      	ldrb	r6, [r3, #0]
   17eec:	785d      	ldrb	r5, [r3, #1]
   17eee:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   17ef2:	789c      	ldrb	r4, [r3, #2]
   17ef4:	78da      	ldrb	r2, [r3, #3]
   17ef6:	2e80      	cmp	r6, #128	; 0x80
   17ef8:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   17efc:	bf08      	it	eq
   17efe:	3101      	addeq	r1, #1
   17f00:	2e80      	cmp	r6, #128	; 0x80
   17f02:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   17f06:	bf08      	it	eq
   17f08:	3101      	addeq	r1, #1
   17f0a:	2e80      	cmp	r6, #128	; 0x80
   17f0c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17f10:	bf08      	it	eq
   17f12:	3101      	addeq	r1, #1
   17f14:	2a80      	cmp	r2, #128	; 0x80
   17f16:	bf08      	it	eq
   17f18:	3101      	addeq	r1, #1
   17f1a:	3304      	adds	r3, #4
   17f1c:	3704      	adds	r7, #4
   17f1e:	d1e4      	bne.n	17eea <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   17f20:	f1bc 0f00 	cmp.w	ip, #0
   17f24:	d017      	beq.n	17f56 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   17f26:	781a      	ldrb	r2, [r3, #0]
   17f28:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17f2c:	2a80      	cmp	r2, #128	; 0x80
   17f2e:	bf08      	it	eq
   17f30:	3101      	addeq	r1, #1
   17f32:	f1bc 0f01 	cmp.w	ip, #1
   17f36:	d00e      	beq.n	17f56 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   17f38:	785a      	ldrb	r2, [r3, #1]
   17f3a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17f3e:	2a80      	cmp	r2, #128	; 0x80
   17f40:	bf08      	it	eq
   17f42:	3101      	addeq	r1, #1
   17f44:	f1bc 0f02 	cmp.w	ip, #2
   17f48:	d005      	beq.n	17f56 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   17f4a:	789a      	ldrb	r2, [r3, #2]
   17f4c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17f50:	2a80      	cmp	r2, #128	; 0x80
   17f52:	bf08      	it	eq
   17f54:	3101      	addeq	r1, #1
   17f56:	f89a 3020 	ldrb.w	r3, [sl, #32]
   17f5a:	eba1 0109 	sub.w	r1, r1, r9
   17f5e:	4401      	add	r1, r0
   17f60:	2000      	movs	r0, #0
   17f62:	1eda      	subs	r2, r3, #3
   17f64:	bf18      	it	ne
   17f66:	461a      	movne	r2, r3
   17f68:	460e      	mov	r6, r1
   17f6a:	e8df f002 	tbb	[pc, r2]
   17f6e:	0216      	.short	0x0216
   17f70:	0213      	.short	0x0213
   17f72:	2600      	movs	r6, #0
   17f74:	4608      	mov	r0, r1
   17f76:	e010      	b.n	17f9a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   17f78:	2a00      	cmp	r2, #0
   17f7a:	bf18      	it	ne
   17f7c:	454a      	cmpne	r2, r9
   17f7e:	d134      	bne.n	17fea <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   17f80:	4640      	mov	r0, r8
   17f82:	2800      	cmp	r0, #0
   17f84:	bf0c      	ite	eq
   17f86:	464a      	moveq	r2, r9
   17f88:	4680      	movne	r8, r0
   17f8a:	f1be 0f01 	cmp.w	lr, #1
   17f8e:	f43f af8f 	beq.w	17eb0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   17f92:	e738      	b.n	17e06 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   17f94:	0848      	lsrs	r0, r1, #1
   17f96:	3101      	adds	r1, #1
   17f98:	084e      	lsrs	r6, r1, #1
   17f9a:	1c44      	adds	r4, r0, #1
   17f9c:	3c01      	subs	r4, #1
   17f9e:	d008      	beq.n	17fb2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   17fa0:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   17fa4:	f8da 1004 	ldr.w	r1, [sl, #4]
   17fa8:	6912      	ldr	r2, [r2, #16]
   17faa:	4790      	blx	r2
   17fac:	2800      	cmp	r0, #0
   17fae:	d0f5      	beq.n	17f9c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   17fb0:	e013      	b.n	17fda <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   17fb2:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   17fb6:	464a      	mov	r2, r9
   17fb8:	68cb      	ldr	r3, [r1, #12]
   17fba:	4641      	mov	r1, r8
   17fbc:	f8da 7004 	ldr.w	r7, [sl, #4]
   17fc0:	4798      	blx	r3
   17fc2:	b950      	cbnz	r0, 17fda <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   17fc4:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   17fc8:	3601      	adds	r6, #1
   17fca:	3e01      	subs	r6, #1
   17fcc:	d009      	beq.n	17fe2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   17fce:	692a      	ldr	r2, [r5, #16]
   17fd0:	4620      	mov	r0, r4
   17fd2:	4639      	mov	r1, r7
   17fd4:	4790      	blx	r2
   17fd6:	2800      	cmp	r0, #0
   17fd8:	d0f7      	beq.n	17fca <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   17fda:	2001      	movs	r0, #1
   17fdc:	b001      	add	sp, #4
   17fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fe2:	2000      	movs	r0, #0
   17fe4:	b001      	add	sp, #4
   17fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fea:	454a      	cmp	r2, r9
   17fec:	d204      	bcs.n	17ff8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   17fee:	f918 0002 	ldrsb.w	r0, [r8, r2]
   17ff2:	f110 0f40 	cmn.w	r0, #64	; 0x40
   17ff6:	dac3      	bge.n	17f80 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   17ff8:	2000      	movs	r0, #0
   17ffa:	2200      	movs	r2, #0
   17ffc:	2800      	cmp	r0, #0
   17ffe:	bf0c      	ite	eq
   18000:	464a      	moveq	r2, r9
   18002:	4680      	movne	r8, r0
   18004:	f1be 0f01 	cmp.w	lr, #1
   18008:	f43f af52 	beq.w	17eb0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   1800c:	e6fb      	b.n	17e06 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

0001800e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   1800e:	7800      	ldrb	r0, [r0, #0]
   18010:	f3c0 1000 	ubfx	r0, r0, #4, #1
   18014:	4770      	bx	lr

00018016 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   18016:	7800      	ldrb	r0, [r0, #0]
   18018:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1801c:	4770      	bx	lr

0001801e <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   1801e:	b570      	push	{r4, r5, r6, lr}
   18020:	460d      	mov	r5, r1
   18022:	4606      	mov	r6, r0
   18024:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   18028:	461c      	mov	r4, r3
   1802a:	68cb      	ldr	r3, [r1, #12]
   1802c:	4611      	mov	r1, r2
   1802e:	4622      	mov	r2, r4
   18030:	4798      	blx	r3
   18032:	7230      	strb	r0, [r6, #8]
   18034:	fab4 f084 	clz	r0, r4
   18038:	0940      	lsrs	r0, r0, #5
   1803a:	7270      	strb	r0, [r6, #9]
   1803c:	2000      	movs	r0, #0
   1803e:	e9c6 5000 	strd	r5, r0, [r6]
   18042:	bd70      	pop	{r4, r5, r6, pc}

00018044 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   18044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18048:	b085      	sub	sp, #20
   1804a:	460c      	mov	r4, r1
   1804c:	4605      	mov	r5, r0
   1804e:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   18052:	690a      	ldr	r2, [r1, #16]
   18054:	2127      	movs	r1, #39	; 0x27
   18056:	4790      	blx	r2
   18058:	b118      	cbz	r0, 18062 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   1805a:	2001      	movs	r0, #1
   1805c:	b005      	add	sp, #20
   1805e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18062:	6829      	ldr	r1, [r5, #0]
   18064:	a801      	add	r0, sp, #4
   18066:	2201      	movs	r2, #1
   18068:	f7ff f85c 	bl	17124 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   1806c:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   18070:	f04f 091c 	mov.w	r9, #28
   18074:	f8dd 800c 	ldr.w	r8, [sp, #12]
   18078:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   1807c:	f89d 6010 	ldrb.w	r6, [sp, #16]
   18080:	d139      	bne.n	180f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   18082:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   18086:	2f02      	cmp	r7, #2
   18088:	f0c0 806b 	bcc.w	18162 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   1808c:	d00c      	beq.n	180a8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   1808e:	b2f0      	uxtb	r0, r6
   18090:	2604      	movs	r6, #4
   18092:	2703      	movs	r7, #3
   18094:	215c      	movs	r1, #92	; 0x5c
   18096:	e8df f000 	tbb	[pc, r0]
   1809a:	0364      	.short	0x0364
   1809c:	09242010 	.word	0x09242010
   180a0:	2600      	movs	r6, #0
   180a2:	2703      	movs	r7, #3
   180a4:	217d      	movs	r1, #125	; 0x7d
   180a6:	e001      	b.n	180ac <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   180a8:	2701      	movs	r7, #1
   180aa:	215c      	movs	r1, #92	; 0x5c
   180ac:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   180b0:	6912      	ldr	r2, [r2, #16]
   180b2:	4790      	blx	r2
   180b4:	2800      	cmp	r0, #0
   180b6:	d0e6      	beq.n	18086 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   180b8:	e7cf      	b.n	1805a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   180ba:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   180be:	2602      	movs	r6, #2
   180c0:	2703      	movs	r7, #3
   180c2:	f1b8 0f00 	cmp.w	r8, #0
   180c6:	fa25 f100 	lsr.w	r1, r5, r0
   180ca:	bf08      	it	eq
   180cc:	2601      	moveq	r6, #1
   180ce:	bf18      	it	ne
   180d0:	f1a8 0801 	subne.w	r8, r8, #1
   180d4:	f367 111f 	bfi	r1, r7, #4, #28
   180d8:	e7e8      	b.n	180ac <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   180da:	2602      	movs	r6, #2
   180dc:	2703      	movs	r7, #3
   180de:	217b      	movs	r1, #123	; 0x7b
   180e0:	e7e4      	b.n	180ac <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   180e2:	2703      	movs	r7, #3
   180e4:	2175      	movs	r1, #117	; 0x75
   180e6:	2603      	movs	r6, #3
   180e8:	e7e0      	b.n	180ac <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   180ea:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   180ee:	6912      	ldr	r2, [r2, #16]
   180f0:	4790      	blx	r2
   180f2:	2800      	cmp	r0, #0
   180f4:	d1b1      	bne.n	1805a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   180f6:	4638      	mov	r0, r7
   180f8:	2701      	movs	r7, #1
   180fa:	215c      	movs	r1, #92	; 0x5c
   180fc:	e8df f000 	tbb	[pc, r0]
   18100:	06020331 	.word	0x06020331
   18104:	e7f1      	b.n	180ea <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   18106:	2700      	movs	r7, #0
   18108:	4629      	mov	r1, r5
   1810a:	e7ee      	b.n	180ea <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1810c:	b2f0      	uxtb	r0, r6
   1810e:	2604      	movs	r6, #4
   18110:	2703      	movs	r7, #3
   18112:	215c      	movs	r1, #92	; 0x5c
   18114:	e8df f000 	tbb	[pc, r0]
   18118:	1d080425 	.word	0x1d080425
   1811c:	0321      	.short	0x0321
   1811e:	e7e4      	b.n	180ea <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   18120:	2600      	movs	r6, #0
   18122:	2703      	movs	r7, #3
   18124:	217d      	movs	r1, #125	; 0x7d
   18126:	e7e0      	b.n	180ea <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   18128:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   1812c:	2602      	movs	r6, #2
   1812e:	2703      	movs	r7, #3
   18130:	fa25 f000 	lsr.w	r0, r5, r0
   18134:	f000 000f 	and.w	r0, r0, #15
   18138:	f100 0157 	add.w	r1, r0, #87	; 0x57
   1813c:	280a      	cmp	r0, #10
   1813e:	bf38      	it	cc
   18140:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   18144:	f1b8 0f00 	cmp.w	r8, #0
   18148:	bf0c      	ite	eq
   1814a:	2601      	moveq	r6, #1
   1814c:	f1a8 0801 	subne.w	r8, r8, #1
   18150:	e7cb      	b.n	180ea <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   18152:	2602      	movs	r6, #2
   18154:	2703      	movs	r7, #3
   18156:	217b      	movs	r1, #123	; 0x7b
   18158:	e7c7      	b.n	180ea <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1815a:	2703      	movs	r7, #3
   1815c:	2175      	movs	r1, #117	; 0x75
   1815e:	2603      	movs	r6, #3
   18160:	e7c3      	b.n	180ea <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   18162:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   18166:	690a      	ldr	r2, [r1, #16]
   18168:	2127      	movs	r1, #39	; 0x27
   1816a:	b005      	add	sp, #20
   1816c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18170:	4710      	bx	r2

00018172 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   18172:	b08c      	sub	sp, #48	; 0x30
   18174:	e9cd 0100 	strd	r0, r1, [sp]
   18178:	2002      	movs	r0, #2
   1817a:	a908      	add	r1, sp, #32
   1817c:	9007      	str	r0, [sp, #28]
   1817e:	9106      	str	r1, [sp, #24]
   18180:	2100      	movs	r1, #0
   18182:	9105      	str	r1, [sp, #20]
   18184:	e9cd 0103 	strd	r0, r1, [sp, #12]
   18188:	f640 30f8 	movw	r0, #3064	; 0xbf8
   1818c:	f2c0 0002 	movt	r0, #2
   18190:	a901      	add	r1, sp, #4
   18192:	9002      	str	r0, [sp, #8]
   18194:	f249 004d 	movw	r0, #36941	; 0x904d
   18198:	f2c0 0001 	movt	r0, #1
   1819c:	900b      	str	r0, [sp, #44]	; 0x2c
   1819e:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   181a2:	4668      	mov	r0, sp
   181a4:	f640 4108 	movw	r1, #3080	; 0xc08
   181a8:	9008      	str	r0, [sp, #32]
   181aa:	a802      	add	r0, sp, #8
   181ac:	f2c0 0102 	movt	r1, #2
   181b0:	f7ff f8c2 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   181b4:	defe      	udf	#254	; 0xfe

000181b6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   181b6:	b08c      	sub	sp, #48	; 0x30
   181b8:	e9cd 0100 	strd	r0, r1, [sp]
   181bc:	2002      	movs	r0, #2
   181be:	a908      	add	r1, sp, #32
   181c0:	9007      	str	r0, [sp, #28]
   181c2:	9106      	str	r1, [sp, #24]
   181c4:	2100      	movs	r1, #0
   181c6:	9105      	str	r1, [sp, #20]
   181c8:	e9cd 0103 	strd	r0, r1, [sp, #12]
   181cc:	f640 403c 	movw	r0, #3132	; 0xc3c
   181d0:	f2c0 0002 	movt	r0, #2
   181d4:	a901      	add	r1, sp, #4
   181d6:	9002      	str	r0, [sp, #8]
   181d8:	f249 004d 	movw	r0, #36941	; 0x904d
   181dc:	f2c0 0001 	movt	r0, #1
   181e0:	900b      	str	r0, [sp, #44]	; 0x2c
   181e2:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   181e6:	4668      	mov	r0, sp
   181e8:	f640 414c 	movw	r1, #3148	; 0xc4c
   181ec:	9008      	str	r0, [sp, #32]
   181ee:	a802      	add	r0, sp, #8
   181f0:	f2c0 0102 	movt	r1, #2
   181f4:	f7ff f8a0 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   181f8:	defe      	udf	#254	; 0xfe

000181fa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   181fa:	b09a      	sub	sp, #104	; 0x68
   181fc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   18200:	e9cd 2300 	strd	r2, r3, [sp]
   18204:	d802      	bhi.n	1820c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   18206:	2501      	movs	r5, #1
   18208:	468c      	mov	ip, r1
   1820a:	e03e      	b.n	1828a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   1820c:	f1c1 0e00 	rsb	lr, r1, #0
   18210:	f44f 7c80 	mov.w	ip, #256	; 0x100
   18214:	458c      	cmp	ip, r1
   18216:	d205      	bcs.n	18224 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   18218:	f910 400c 	ldrsb.w	r4, [r0, ip]
   1821c:	f114 0f41 	cmn.w	r4, #65	; 0x41
   18220:	f300 8108 	bgt.w	18434 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   18224:	eb0e 040c 	add.w	r4, lr, ip
   18228:	f1ac 0601 	sub.w	r6, ip, #1
   1822c:	2c01      	cmp	r4, #1
   1822e:	d02a      	beq.n	18286 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   18230:	428e      	cmp	r6, r1
   18232:	d206      	bcs.n	18242 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   18234:	eb00 050c 	add.w	r5, r0, ip
   18238:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   1823c:	f115 0f41 	cmn.w	r5, #65	; 0x41
   18240:	dc21      	bgt.n	18286 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   18242:	f1ac 0602 	sub.w	r6, ip, #2
   18246:	2c02      	cmp	r4, #2
   18248:	d01d      	beq.n	18286 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1824a:	428e      	cmp	r6, r1
   1824c:	d206      	bcs.n	1825c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   1824e:	eb00 050c 	add.w	r5, r0, ip
   18252:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   18256:	f115 0f41 	cmn.w	r5, #65	; 0x41
   1825a:	dc14      	bgt.n	18286 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1825c:	f1ac 0603 	sub.w	r6, ip, #3
   18260:	2c03      	cmp	r4, #3
   18262:	d010      	beq.n	18286 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   18264:	428e      	cmp	r6, r1
   18266:	d206      	bcs.n	18276 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   18268:	eb00 050c 	add.w	r5, r0, ip
   1826c:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   18270:	f115 0f41 	cmn.w	r5, #65	; 0x41
   18274:	dc07      	bgt.n	18286 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   18276:	f1bc 0c04 	subs.w	ip, ip, #4
   1827a:	f04f 0500 	mov.w	r5, #0
   1827e:	d004      	beq.n	1828a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   18280:	2c04      	cmp	r4, #4
   18282:	d1c7      	bne.n	18214 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   18284:	e001      	b.n	1828a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   18286:	2500      	movs	r5, #0
   18288:	46b4      	mov	ip, r6
   1828a:	2605      	movs	r6, #5
   1828c:	2d00      	cmp	r5, #0
   1828e:	f640 551a 	movw	r5, #3354	; 0xd1a
   18292:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   18296:	bf18      	it	ne
   18298:	2600      	movne	r6, #0
   1829a:	9605      	str	r6, [sp, #20]
   1829c:	f640 0664 	movw	r6, #2148	; 0x864
   182a0:	f2c0 0502 	movt	r5, #2
   182a4:	f2c0 0602 	movt	r6, #2
   182a8:	bf18      	it	ne
   182aa:	4635      	movne	r5, r6
   182ac:	428a      	cmp	r2, r1
   182ae:	9504      	str	r5, [sp, #16]
   182b0:	bf98      	it	ls
   182b2:	428b      	cmpls	r3, r1
   182b4:	d92a      	bls.n	1830c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   182b6:	428a      	cmp	r2, r1
   182b8:	f04f 0003 	mov.w	r0, #3
   182bc:	a910      	add	r1, sp, #64	; 0x40
   182be:	bf88      	it	hi
   182c0:	4613      	movhi	r3, r2
   182c2:	900f      	str	r0, [sp, #60]	; 0x3c
   182c4:	910e      	str	r1, [sp, #56]	; 0x38
   182c6:	2100      	movs	r1, #0
   182c8:	910d      	str	r1, [sp, #52]	; 0x34
   182ca:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   182ce:	f640 5040 	movw	r0, #3392	; 0xd40
   182d2:	f2c0 0002 	movt	r0, #2
   182d6:	a904      	add	r1, sp, #16
   182d8:	900a      	str	r0, [sp, #40]	; 0x28
   182da:	f249 103b 	movw	r0, #37179	; 0x913b
   182de:	f2c0 0001 	movt	r0, #1
   182e2:	9308      	str	r3, [sp, #32]
   182e4:	9015      	str	r0, [sp, #84]	; 0x54
   182e6:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   182ea:	a802      	add	r0, sp, #8
   182ec:	f640 5158 	movw	r1, #3416	; 0xd58
   182f0:	9012      	str	r0, [sp, #72]	; 0x48
   182f2:	f249 004d 	movw	r0, #36941	; 0x904d
   182f6:	f2c0 0102 	movt	r1, #2
   182fa:	f2c0 0001 	movt	r0, #1
   182fe:	9011      	str	r0, [sp, #68]	; 0x44
   18300:	a808      	add	r0, sp, #32
   18302:	9010      	str	r0, [sp, #64]	; 0x40
   18304:	a80a      	add	r0, sp, #40	; 0x28
   18306:	f7ff f817 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1830a:	defe      	udf	#254	; 0xfe
   1830c:	429a      	cmp	r2, r3
   1830e:	f200 80f1 	bhi.w	184f4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   18312:	2a00      	cmp	r2, #0
   18314:	bf18      	it	ne
   18316:	4291      	cmpne	r1, r2
   18318:	d109      	bne.n	1832e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   1831a:	461a      	mov	r2, r3
   1831c:	2a00      	cmp	r2, #0
   1831e:	9206      	str	r2, [sp, #24]
   18320:	bf18      	it	ne
   18322:	428a      	cmpne	r2, r1
   18324:	d10e      	bne.n	18344 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   18326:	4613      	mov	r3, r2
   18328:	428b      	cmp	r3, r1
   1832a:	d047      	beq.n	183bc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   1832c:	e052      	b.n	183d4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   1832e:	d9f5      	bls.n	1831c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   18330:	5686      	ldrsb	r6, [r0, r2]
   18332:	f116 0f40 	cmn.w	r6, #64	; 0x40
   18336:	bfa8      	it	ge
   18338:	461a      	movge	r2, r3
   1833a:	2a00      	cmp	r2, #0
   1833c:	9206      	str	r2, [sp, #24]
   1833e:	bf18      	it	ne
   18340:	428a      	cmpne	r2, r1
   18342:	d0f0      	beq.n	18326 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   18344:	f1a0 0c01 	sub.w	ip, r0, #1
   18348:	f101 0e02 	add.w	lr, r1, #2
   1834c:	1ccc      	adds	r4, r1, #3
   1834e:	1c4d      	adds	r5, r1, #1
   18350:	1d0e      	adds	r6, r1, #4
   18352:	428a      	cmp	r2, r1
   18354:	d206      	bcs.n	18364 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   18356:	eb0c 0302 	add.w	r3, ip, r2
   1835a:	f993 3001 	ldrsb.w	r3, [r3, #1]
   1835e:	f113 0f41 	cmn.w	r3, #65	; 0x41
   18362:	dce0      	bgt.n	18326 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   18364:	1e53      	subs	r3, r2, #1
   18366:	bf18      	it	ne
   18368:	4295      	cmpne	r5, r2
   1836a:	d025      	beq.n	183b8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   1836c:	428b      	cmp	r3, r1
   1836e:	d204      	bcs.n	1837a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   18370:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   18374:	f117 0f41 	cmn.w	r7, #65	; 0x41
   18378:	dc1e      	bgt.n	183b8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   1837a:	1e93      	subs	r3, r2, #2
   1837c:	bf18      	it	ne
   1837e:	4596      	cmpne	lr, r2
   18380:	d01a      	beq.n	183b8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18382:	428b      	cmp	r3, r1
   18384:	d206      	bcs.n	18394 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   18386:	eb0c 0702 	add.w	r7, ip, r2
   1838a:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   1838e:	f117 0f41 	cmn.w	r7, #65	; 0x41
   18392:	dc11      	bgt.n	183b8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18394:	1ed3      	subs	r3, r2, #3
   18396:	bf18      	it	ne
   18398:	4294      	cmpne	r4, r2
   1839a:	d00d      	beq.n	183b8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   1839c:	428b      	cmp	r3, r1
   1839e:	d206      	bcs.n	183ae <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   183a0:	eb0c 0702 	add.w	r7, ip, r2
   183a4:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   183a8:	f117 0f41 	cmn.w	r7, #65	; 0x41
   183ac:	dc04      	bgt.n	183b8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   183ae:	1f13      	subs	r3, r2, #4
   183b0:	d002      	beq.n	183b8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   183b2:	4296      	cmp	r6, r2
   183b4:	461a      	mov	r2, r3
   183b6:	d1cc      	bne.n	18352 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   183b8:	428b      	cmp	r3, r1
   183ba:	d10b      	bne.n	183d4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   183bc:	f640 2000 	movw	r0, #2560	; 0xa00
   183c0:	f640 52a8 	movw	r2, #3496	; 0xda8
   183c4:	f2c0 0002 	movt	r0, #2
   183c8:	f2c0 0202 	movt	r2, #2
   183cc:	212b      	movs	r1, #43	; 0x2b
   183ce:	f7fe ff7d 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   183d2:	defe      	udf	#254	; 0xfe
   183d4:	18c5      	adds	r5, r0, r3
   183d6:	462e      	mov	r6, r5
   183d8:	f916 4b01 	ldrsb.w	r4, [r6], #1
   183dc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   183e0:	b2e2      	uxtb	r2, r4
   183e2:	dd02      	ble.n	183ea <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   183e4:	9207      	str	r2, [sp, #28]
   183e6:	2101      	movs	r1, #1
   183e8:	e04d      	b.n	18486 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   183ea:	4408      	add	r0, r1
   183ec:	4286      	cmp	r6, r0
   183ee:	d10b      	bne.n	18408 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   183f0:	2500      	movs	r5, #0
   183f2:	4606      	mov	r6, r0
   183f4:	f002 011f 	and.w	r1, r2, #31
   183f8:	2adf      	cmp	r2, #223	; 0xdf
   183fa:	d80d      	bhi.n	18418 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   183fc:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   18400:	2880      	cmp	r0, #128	; 0x80
   18402:	9007      	str	r0, [sp, #28]
   18404:	d333      	bcc.n	1846e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   18406:	e034      	b.n	18472 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   18408:	7869      	ldrb	r1, [r5, #1]
   1840a:	1cae      	adds	r6, r5, #2
   1840c:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   18410:	f002 011f 	and.w	r1, r2, #31
   18414:	2adf      	cmp	r2, #223	; 0xdf
   18416:	d9f1      	bls.n	183fc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   18418:	4286      	cmp	r6, r0
   1841a:	d10d      	bne.n	18438 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   1841c:	2400      	movs	r4, #0
   1841e:	4606      	mov	r6, r0
   18420:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   18424:	2af0      	cmp	r2, #240	; 0xf0
   18426:	d20f      	bcs.n	18448 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   18428:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   1842c:	2880      	cmp	r0, #128	; 0x80
   1842e:	9007      	str	r0, [sp, #28]
   18430:	d31d      	bcc.n	1846e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   18432:	e01e      	b.n	18472 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   18434:	2500      	movs	r5, #0
   18436:	e728      	b.n	1828a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   18438:	f816 4b01 	ldrb.w	r4, [r6], #1
   1843c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   18440:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   18444:	2af0      	cmp	r2, #240	; 0xf0
   18446:	d3ef      	bcc.n	18428 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   18448:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   1844c:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   18450:	4286      	cmp	r6, r0
   18452:	bf1a      	itte	ne
   18454:	7830      	ldrbne	r0, [r6, #0]
   18456:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   1845a:	2000      	moveq	r0, #0
   1845c:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   18460:	4408      	add	r0, r1
   18462:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   18466:	d0a9      	beq.n	183bc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   18468:	2880      	cmp	r0, #128	; 0x80
   1846a:	9007      	str	r0, [sp, #28]
   1846c:	d201      	bcs.n	18472 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   1846e:	2101      	movs	r1, #1
   18470:	e009      	b.n	18486 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   18472:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   18476:	d201      	bcs.n	1847c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   18478:	2102      	movs	r1, #2
   1847a:	e004      	b.n	18486 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   1847c:	2104      	movs	r1, #4
   1847e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   18482:	bf38      	it	cc
   18484:	2103      	movcc	r1, #3
   18486:	4419      	add	r1, r3
   18488:	aa10      	add	r2, sp, #64	; 0x40
   1848a:	a808      	add	r0, sp, #32
   1848c:	e9cd 3108 	strd	r3, r1, [sp, #32]
   18490:	2105      	movs	r1, #5
   18492:	910f      	str	r1, [sp, #60]	; 0x3c
   18494:	920e      	str	r2, [sp, #56]	; 0x38
   18496:	2200      	movs	r2, #0
   18498:	920d      	str	r2, [sp, #52]	; 0x34
   1849a:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   1849e:	f640 51e4 	movw	r1, #3556	; 0xde4
   184a2:	f2c0 0102 	movt	r1, #2
   184a6:	aa04      	add	r2, sp, #16
   184a8:	910a      	str	r1, [sp, #40]	; 0x28
   184aa:	f249 113b 	movw	r1, #37179	; 0x913b
   184ae:	f2c0 0101 	movt	r1, #1
   184b2:	9119      	str	r1, [sp, #100]	; 0x64
   184b4:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   184b8:	a902      	add	r1, sp, #8
   184ba:	9116      	str	r1, [sp, #88]	; 0x58
   184bc:	f247 01c5 	movw	r1, #28869	; 0x70c5
   184c0:	f2c0 0101 	movt	r1, #1
   184c4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   184c8:	f248 0045 	movw	r0, #32837	; 0x8045
   184cc:	f2c0 0001 	movt	r0, #1
   184d0:	f640 610c 	movw	r1, #3596	; 0xe0c
   184d4:	9013      	str	r0, [sp, #76]	; 0x4c
   184d6:	a807      	add	r0, sp, #28
   184d8:	9012      	str	r0, [sp, #72]	; 0x48
   184da:	f249 004d 	movw	r0, #36941	; 0x904d
   184de:	f2c0 0001 	movt	r0, #1
   184e2:	f2c0 0102 	movt	r1, #2
   184e6:	9011      	str	r0, [sp, #68]	; 0x44
   184e8:	a806      	add	r0, sp, #24
   184ea:	9010      	str	r0, [sp, #64]	; 0x40
   184ec:	a80a      	add	r0, sp, #40	; 0x28
   184ee:	f7fe ff23 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   184f2:	defe      	udf	#254	; 0xfe
   184f4:	2004      	movs	r0, #4
   184f6:	a910      	add	r1, sp, #64	; 0x40
   184f8:	900f      	str	r0, [sp, #60]	; 0x3c
   184fa:	910e      	str	r1, [sp, #56]	; 0x38
   184fc:	2100      	movs	r1, #0
   184fe:	910d      	str	r1, [sp, #52]	; 0x34
   18500:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   18504:	f640 5078 	movw	r0, #3448	; 0xd78
   18508:	f2c0 0002 	movt	r0, #2
   1850c:	a904      	add	r1, sp, #16
   1850e:	900a      	str	r0, [sp, #40]	; 0x28
   18510:	f249 103b 	movw	r0, #37179	; 0x913b
   18514:	f2c0 0001 	movt	r0, #1
   18518:	9017      	str	r0, [sp, #92]	; 0x5c
   1851a:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   1851e:	a802      	add	r0, sp, #8
   18520:	9014      	str	r0, [sp, #80]	; 0x50
   18522:	f249 004d 	movw	r0, #36941	; 0x904d
   18526:	a901      	add	r1, sp, #4
   18528:	f2c0 0001 	movt	r0, #1
   1852c:	9013      	str	r0, [sp, #76]	; 0x4c
   1852e:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   18532:	f640 5198 	movw	r1, #3480	; 0xd98
   18536:	4668      	mov	r0, sp
   18538:	f2c0 0102 	movt	r1, #2
   1853c:	9010      	str	r0, [sp, #64]	; 0x40
   1853e:	a80a      	add	r0, sp, #40	; 0x28
   18540:	f7fe fefa 	bl	17338 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   18544:	defe      	udf	#254	; 0xfe

00018546 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   18546:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1854a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1854e:	d270      	bcs.n	18632 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   18550:	f640 6e2c 	movw	lr, #3628	; 0xe2c
   18554:	f640 687e 	movw	r8, #3710	; 0xe7e
   18558:	fa1f f980 	uxth.w	r9, r0
   1855c:	f2c0 0e02 	movt	lr, #2
   18560:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   18564:	f04f 0a00 	mov.w	sl, #0
   18568:	f2c0 0802 	movt	r8, #2
   1856c:	4675      	mov	r5, lr
   1856e:	786e      	ldrb	r6, [r5, #1]
   18570:	4652      	mov	r2, sl
   18572:	782b      	ldrb	r3, [r5, #0]
   18574:	3502      	adds	r5, #2
   18576:	44b2      	add	sl, r6
   18578:	4563      	cmp	r3, ip
   1857a:	d129      	bne.n	185d0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   1857c:	4592      	cmp	sl, r2
   1857e:	f0c0 8112 	bcc.w	187a6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   18582:	ea4f 035a 	mov.w	r3, sl, lsr #1
   18586:	2b92      	cmp	r3, #146	; 0x92
   18588:	f200 8112 	bhi.w	187b0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   1858c:	eb08 0302 	add.w	r3, r8, r2
   18590:	199a      	adds	r2, r3, r6
   18592:	b31e      	cbz	r6, 185dc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   18594:	461f      	mov	r7, r3
   18596:	b2c4      	uxtb	r4, r0
   18598:	f817 1b01 	ldrb.w	r1, [r7], #1
   1859c:	42a1      	cmp	r1, r4
   1859e:	f000 80b6 	beq.w	1870e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   185a2:	4297      	cmp	r7, r2
   185a4:	d01a      	beq.n	185dc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   185a6:	7859      	ldrb	r1, [r3, #1]
   185a8:	42a1      	cmp	r1, r4
   185aa:	f000 80b0 	beq.w	1870e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   185ae:	1c99      	adds	r1, r3, #2
   185b0:	4291      	cmp	r1, r2
   185b2:	d013      	beq.n	185dc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   185b4:	7899      	ldrb	r1, [r3, #2]
   185b6:	42a1      	cmp	r1, r4
   185b8:	f000 80a9 	beq.w	1870e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   185bc:	1cd9      	adds	r1, r3, #3
   185be:	4291      	cmp	r1, r2
   185c0:	d00c      	beq.n	185dc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   185c2:	1d19      	adds	r1, r3, #4
   185c4:	78db      	ldrb	r3, [r3, #3]
   185c6:	3e04      	subs	r6, #4
   185c8:	42a3      	cmp	r3, r4
   185ca:	460b      	mov	r3, r1
   185cc:	d1e1      	bne.n	18592 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   185ce:	e09e      	b.n	1870e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   185d0:	d808      	bhi.n	185e4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   185d2:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   185d6:	4295      	cmp	r5, r2
   185d8:	d1c9      	bne.n	1856e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   185da:	e003      	b.n	185e4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   185dc:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   185e0:	428d      	cmp	r5, r1
   185e2:	d1c4      	bne.n	1856e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   185e4:	f640 75a3 	movw	r5, #4003	; 0xfa3
   185e8:	2101      	movs	r1, #1
   185ea:	f2c0 0502 	movt	r5, #2
   185ee:	4628      	mov	r0, r5
   185f0:	4602      	mov	r2, r0
   185f2:	f812 7b01 	ldrb.w	r7, [r2], #1
   185f6:	b27e      	sxtb	r6, r7
   185f8:	2e00      	cmp	r6, #0
   185fa:	d404      	bmi.n	18606 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   185fc:	4610      	mov	r0, r2
   185fe:	ebb9 0907 	subs.w	r9, r9, r7
   18602:	d50f      	bpl.n	18624 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   18604:	e0bd      	b.n	18782 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18606:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   1860a:	429a      	cmp	r2, r3
   1860c:	f000 80db 	beq.w	187c6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   18610:	7842      	ldrb	r2, [r0, #1]
   18612:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   18616:	3002      	adds	r0, #2
   18618:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   1861c:	ebb9 0907 	subs.w	r9, r9, r7
   18620:	f100 80af 	bmi.w	18782 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18624:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   18628:	f081 0101 	eor.w	r1, r1, #1
   1862c:	4290      	cmp	r0, r2
   1862e:	d1df      	bne.n	185f0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   18630:	e0a7      	b.n	18782 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18632:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   18636:	d26f      	bcs.n	18718 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   18638:	f241 0edd 	movw	lr, #4317	; 0x10dd
   1863c:	f241 1823 	movw	r8, #4387	; 0x1123
   18640:	fa1f f980 	uxth.w	r9, r0
   18644:	f2c0 0e02 	movt	lr, #2
   18648:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   1864c:	f04f 0a00 	mov.w	sl, #0
   18650:	f2c0 0802 	movt	r8, #2
   18654:	4675      	mov	r5, lr
   18656:	786e      	ldrb	r6, [r5, #1]
   18658:	4652      	mov	r2, sl
   1865a:	782b      	ldrb	r3, [r5, #0]
   1865c:	3502      	adds	r5, #2
   1865e:	44b2      	add	sl, r6
   18660:	4563      	cmp	r3, ip
   18662:	d125      	bne.n	186b0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   18664:	4592      	cmp	sl, r2
   18666:	f0c0 809e 	bcc.w	187a6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   1866a:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   1866e:	f200 80a5 	bhi.w	187bc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   18672:	eb08 0302 	add.w	r3, r8, r2
   18676:	199a      	adds	r2, r3, r6
   18678:	b306      	cbz	r6, 186bc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   1867a:	461f      	mov	r7, r3
   1867c:	b2c4      	uxtb	r4, r0
   1867e:	f817 1b01 	ldrb.w	r1, [r7], #1
   18682:	42a1      	cmp	r1, r4
   18684:	d043      	beq.n	1870e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18686:	4297      	cmp	r7, r2
   18688:	d018      	beq.n	186bc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   1868a:	7859      	ldrb	r1, [r3, #1]
   1868c:	42a1      	cmp	r1, r4
   1868e:	d03e      	beq.n	1870e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18690:	1c99      	adds	r1, r3, #2
   18692:	4291      	cmp	r1, r2
   18694:	d012      	beq.n	186bc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   18696:	7899      	ldrb	r1, [r3, #2]
   18698:	42a1      	cmp	r1, r4
   1869a:	d038      	beq.n	1870e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   1869c:	1cd9      	adds	r1, r3, #3
   1869e:	4291      	cmp	r1, r2
   186a0:	d00c      	beq.n	186bc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   186a2:	1d19      	adds	r1, r3, #4
   186a4:	78db      	ldrb	r3, [r3, #3]
   186a6:	3e04      	subs	r6, #4
   186a8:	42a3      	cmp	r3, r4
   186aa:	460b      	mov	r3, r1
   186ac:	d1e4      	bne.n	18678 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   186ae:	e02e      	b.n	1870e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   186b0:	d808      	bhi.n	186c4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   186b2:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   186b6:	4295      	cmp	r5, r2
   186b8:	d1cd      	bne.n	18656 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   186ba:	e003      	b.n	186c4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   186bc:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   186c0:	428d      	cmp	r5, r1
   186c2:	d1c8      	bne.n	18656 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   186c4:	f241 15c9 	movw	r5, #4553	; 0x11c9
   186c8:	2101      	movs	r1, #1
   186ca:	f2c0 0502 	movt	r5, #2
   186ce:	4628      	mov	r0, r5
   186d0:	4602      	mov	r2, r0
   186d2:	f812 7b01 	ldrb.w	r7, [r2], #1
   186d6:	b27e      	sxtb	r6, r7
   186d8:	2e00      	cmp	r6, #0
   186da:	d40a      	bmi.n	186f2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   186dc:	4610      	mov	r0, r2
   186de:	ebb9 0907 	subs.w	r9, r9, r7
   186e2:	d44e      	bmi.n	18782 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   186e4:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   186e8:	f081 0101 	eor.w	r1, r1, #1
   186ec:	4290      	cmp	r0, r2
   186ee:	d1ef      	bne.n	186d0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   186f0:	e047      	b.n	18782 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   186f2:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   186f6:	429a      	cmp	r2, r3
   186f8:	d065      	beq.n	187c6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   186fa:	7842      	ldrb	r2, [r0, #1]
   186fc:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   18700:	3002      	adds	r0, #2
   18702:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   18706:	ebb9 0907 	subs.w	r9, r9, r7
   1870a:	d5eb      	bpl.n	186e4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   1870c:	e039      	b.n	18782 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   1870e:	2100      	movs	r1, #0
   18710:	f001 0001 	and.w	r0, r1, #1
   18714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18718:	f240 51e2 	movw	r1, #1506	; 0x5e2
   1871c:	f240 63e2 	movw	r3, #1762	; 0x6e2
   18720:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   18724:	1842      	adds	r2, r0, r1
   18726:	f2c0 030b 	movt	r3, #11
   1872a:	2100      	movs	r1, #0
   1872c:	429a      	cmp	r2, r3
   1872e:	d328      	bcc.n	18782 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18730:	f241 421f 	movw	r2, #5151	; 0x141f
   18734:	f640 431f 	movw	r3, #3103	; 0xc1f
   18738:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   1873c:	4402      	add	r2, r0
   1873e:	429a      	cmp	r2, r3
   18740:	bf21      	itttt	cs
   18742:	f243 125e 	movwcs	r2, #12638	; 0x315e
   18746:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   1874a:	4402      	addcs	r2, r0
   1874c:	2a0e      	cmpcs	r2, #14
   1874e:	d318      	bcc.n	18782 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18750:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   18754:	f64b 031e 	movw	r3, #47134	; 0xb81e
   18758:	f2c0 021f 	movt	r2, #31
   1875c:	f2c0 0302 	movt	r3, #2
   18760:	4002      	ands	r2, r0
   18762:	429a      	cmp	r2, r3
   18764:	d00d      	beq.n	18782 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18766:	f645 1229 	movw	r2, #22825	; 0x5929
   1876a:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   1876e:	4402      	add	r2, r0
   18770:	2a29      	cmp	r2, #41	; 0x29
   18772:	bf21      	itttt	cs
   18774:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   18778:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   1877c:	4402      	addcs	r2, r0
   1877e:	2a0b      	cmpcs	r2, #11
   18780:	d203      	bcs.n	1878a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   18782:	f001 0001 	and.w	r0, r1, #1
   18786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1878a:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   1878e:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   18792:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   18796:	2000      	movs	r0, #0
   18798:	f2c0 0202 	movt	r2, #2
   1879c:	4291      	cmp	r1, r2
   1879e:	bf88      	it	hi
   187a0:	2001      	movhi	r0, #1
   187a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   187a6:	4610      	mov	r0, r2
   187a8:	4651      	mov	r1, sl
   187aa:	f7ff fd04 	bl	181b6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   187ae:	defe      	udf	#254	; 0xfe
   187b0:	4650      	mov	r0, sl
   187b2:	f240 1125 	movw	r1, #293	; 0x125
   187b6:	f7ff fcdc 	bl	18172 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   187ba:	defe      	udf	#254	; 0xfe
   187bc:	4650      	mov	r0, sl
   187be:	21a6      	movs	r1, #166	; 0xa6
   187c0:	f7ff fcd7 	bl	18172 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   187c4:	defe      	udf	#254	; 0xfe
   187c6:	f640 2000 	movw	r0, #2560	; 0xa00
   187ca:	f640 621c 	movw	r2, #3612	; 0xe1c
   187ce:	f2c0 0002 	movt	r0, #2
   187d2:	f2c0 0202 	movt	r2, #2
   187d6:	212b      	movs	r1, #43	; 0x2b
   187d8:	f7fe fd78 	bl	172cc <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   187dc:	defe      	udf	#254	; 0xfe

000187de <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   187de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187e2:	b0a3      	sub	sp, #140	; 0x8c
   187e4:	468c      	mov	ip, r1
   187e6:	6809      	ldr	r1, [r1, #0]
   187e8:	06ca      	lsls	r2, r1, #27
   187ea:	d44a      	bmi.n	18882 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   187ec:	6804      	ldr	r4, [r0, #0]
   187ee:	0688      	lsls	r0, r1, #26
   187f0:	f100 8089 	bmi.w	18906 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   187f4:	f248 5e1f 	movw	lr, #34079	; 0x851f
   187f8:	f640 229f 	movw	r2, #2719	; 0xa9f
   187fc:	f242 7810 	movw	r8, #10000	; 0x2710
   18800:	4544      	cmp	r4, r8
   18802:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   18806:	f2c0 0202 	movt	r2, #2
   1880a:	f0c0 80e3 	bcc.w	189d4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   1880e:	f241 7959 	movw	r9, #5977	; 0x1759
   18812:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   18816:	f10d 0b0c 	add.w	fp, sp, #12
   1881a:	2300      	movs	r3, #0
   1881c:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   18820:	f04f 0a64 	mov.w	sl, #100	; 0x64
   18824:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   18828:	fba4 0109 	umull	r0, r1, r4, r9
   1882c:	42bc      	cmp	r4, r7
   1882e:	ea4f 3051 	mov.w	r0, r1, lsr #13
   18832:	fb00 4118 	mls	r1, r0, r8, r4
   18836:	4604      	mov	r4, r0
   18838:	b28d      	uxth	r5, r1
   1883a:	fba5 560e 	umull	r5, r6, r5, lr
   1883e:	ea4f 1556 	mov.w	r5, r6, lsr #5
   18842:	eb0b 0603 	add.w	r6, fp, r3
   18846:	fb05 111a 	mls	r1, r5, sl, r1
   1884a:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   1884e:	f1a3 0304 	sub.w	r3, r3, #4
   18852:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   18856:	b289      	uxth	r1, r1
   18858:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   1885c:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   18860:	d8e2      	bhi.n	18828 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   18862:	f103 0127 	add.w	r1, r3, #39	; 0x27
   18866:	4604      	mov	r4, r0
   18868:	2c63      	cmp	r4, #99	; 0x63
   1886a:	f300 80b7 	bgt.w	189dc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   1886e:	4623      	mov	r3, r4
   18870:	2b0a      	cmp	r3, #10
   18872:	f2c0 80c3 	blt.w	189fc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   18876:	1e88      	subs	r0, r1, #2
   18878:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   1887c:	aa03      	add	r2, sp, #12
   1887e:	5211      	strh	r1, [r2, r0]
   18880:	e0c1      	b.n	18a06 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   18882:	6800      	ldr	r0, [r0, #0]
   18884:	f10d 0e0c 	add.w	lr, sp, #12
   18888:	2381      	movs	r3, #129	; 0x81
   1888a:	2100      	movs	r1, #0
   1888c:	f000 020f 	and.w	r2, r0, #15
   18890:	f102 0457 	add.w	r4, r2, #87	; 0x57
   18894:	2a0a      	cmp	r2, #10
   18896:	bf38      	it	cc
   18898:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   1889c:	eb0e 0203 	add.w	r2, lr, r3
   188a0:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   188a4:	f802 4c02 	strb.w	r4, [r2, #-2]
   188a8:	d071      	beq.n	1898e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   188aa:	0904      	lsrs	r4, r0, #4
   188ac:	f004 040f 	and.w	r4, r4, #15
   188b0:	f104 0557 	add.w	r5, r4, #87	; 0x57
   188b4:	2c0a      	cmp	r4, #10
   188b6:	bf38      	it	cc
   188b8:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   188bc:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   188c0:	f802 5c03 	strb.w	r5, [r2, #-3]
   188c4:	d079      	beq.n	189ba <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   188c6:	0a04      	lsrs	r4, r0, #8
   188c8:	f004 040f 	and.w	r4, r4, #15
   188cc:	f104 0557 	add.w	r5, r4, #87	; 0x57
   188d0:	2c0a      	cmp	r4, #10
   188d2:	bf38      	it	cc
   188d4:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   188d8:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   188dc:	f802 5c04 	strb.w	r5, [r2, #-4]
   188e0:	d073      	beq.n	189ca <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   188e2:	0b04      	lsrs	r4, r0, #12
   188e4:	3b04      	subs	r3, #4
   188e6:	f004 040f 	and.w	r4, r4, #15
   188ea:	f104 0557 	add.w	r5, r4, #87	; 0x57
   188ee:	2c0a      	cmp	r4, #10
   188f0:	bf38      	it	cc
   188f2:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   188f6:	f802 5c05 	strb.w	r5, [r2, #-5]
   188fa:	0c02      	lsrs	r2, r0, #16
   188fc:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   18900:	4610      	mov	r0, r2
   18902:	d1c3      	bne.n	1888c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   18904:	e03f      	b.n	18986 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   18906:	f10d 0e0c 	add.w	lr, sp, #12
   1890a:	2381      	movs	r3, #129	; 0x81
   1890c:	2100      	movs	r1, #0
   1890e:	f004 000f 	and.w	r0, r4, #15
   18912:	eb0e 0203 	add.w	r2, lr, r3
   18916:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1891a:	280a      	cmp	r0, #10
   1891c:	bf38      	it	cc
   1891e:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18922:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   18926:	f802 5c02 	strb.w	r5, [r2, #-2]
   1892a:	d030      	beq.n	1898e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   1892c:	0920      	lsrs	r0, r4, #4
   1892e:	f000 000f 	and.w	r0, r0, #15
   18932:	f100 0537 	add.w	r5, r0, #55	; 0x37
   18936:	280a      	cmp	r0, #10
   18938:	bf38      	it	cc
   1893a:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   1893e:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   18942:	f802 5c03 	strb.w	r5, [r2, #-3]
   18946:	d038      	beq.n	189ba <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   18948:	0a20      	lsrs	r0, r4, #8
   1894a:	f000 000f 	and.w	r0, r0, #15
   1894e:	f100 0537 	add.w	r5, r0, #55	; 0x37
   18952:	280a      	cmp	r0, #10
   18954:	bf38      	it	cc
   18956:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   1895a:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   1895e:	f802 5c04 	strb.w	r5, [r2, #-4]
   18962:	d032      	beq.n	189ca <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   18964:	0b20      	lsrs	r0, r4, #12
   18966:	3b04      	subs	r3, #4
   18968:	f000 000f 	and.w	r0, r0, #15
   1896c:	f100 0537 	add.w	r5, r0, #55	; 0x37
   18970:	280a      	cmp	r0, #10
   18972:	bf38      	it	cc
   18974:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18978:	0c20      	lsrs	r0, r4, #16
   1897a:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   1897e:	4604      	mov	r4, r0
   18980:	f802 5c05 	strb.w	r5, [r2, #-5]
   18984:	d1c3      	bne.n	1890e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   18986:	1e58      	subs	r0, r3, #1
   18988:	2881      	cmp	r0, #129	; 0x81
   1898a:	d305      	bcc.n	18998 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   1898c:	e019      	b.n	189c2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   1898e:	1e59      	subs	r1, r3, #1
   18990:	1e98      	subs	r0, r3, #2
   18992:	460b      	mov	r3, r1
   18994:	2881      	cmp	r0, #129	; 0x81
   18996:	d214      	bcs.n	189c2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   18998:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   1899c:	f640 229d 	movw	r2, #2717	; 0xa9d
   189a0:	4470      	add	r0, lr
   189a2:	f2c0 0202 	movt	r2, #2
   189a6:	e9cd 0100 	strd	r0, r1, [sp]
   189aa:	4660      	mov	r0, ip
   189ac:	2101      	movs	r1, #1
   189ae:	2302      	movs	r3, #2
   189b0:	f7ff f864 	bl	17a7c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   189b4:	b023      	add	sp, #140	; 0x8c
   189b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189ba:	1ed8      	subs	r0, r3, #3
   189bc:	3b02      	subs	r3, #2
   189be:	2881      	cmp	r0, #129	; 0x81
   189c0:	d3ea      	bcc.n	18998 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   189c2:	2180      	movs	r1, #128	; 0x80
   189c4:	f7ff fbf7 	bl	181b6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   189c8:	defe      	udf	#254	; 0xfe
   189ca:	1f18      	subs	r0, r3, #4
   189cc:	3b03      	subs	r3, #3
   189ce:	2881      	cmp	r0, #129	; 0x81
   189d0:	d3e2      	bcc.n	18998 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   189d2:	e7f6      	b.n	189c2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   189d4:	2127      	movs	r1, #39	; 0x27
   189d6:	2c63      	cmp	r4, #99	; 0x63
   189d8:	f77f af49 	ble.w	1886e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   189dc:	b2a0      	uxth	r0, r4
   189de:	3902      	subs	r1, #2
   189e0:	fba0 030e 	umull	r0, r3, r0, lr
   189e4:	af03      	add	r7, sp, #12
   189e6:	2064      	movs	r0, #100	; 0x64
   189e8:	095b      	lsrs	r3, r3, #5
   189ea:	fb03 4010 	mls	r0, r3, r0, r4
   189ee:	b280      	uxth	r0, r0
   189f0:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   189f4:	5278      	strh	r0, [r7, r1]
   189f6:	2b0a      	cmp	r3, #10
   189f8:	f6bf af3d 	bge.w	18876 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   189fc:	1e48      	subs	r0, r1, #1
   189fe:	aa03      	add	r2, sp, #12
   18a00:	f103 0130 	add.w	r1, r3, #48	; 0x30
   18a04:	5411      	strb	r1, [r2, r0]
   18a06:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   18a0a:	aa03      	add	r2, sp, #12
   18a0c:	4410      	add	r0, r2
   18a0e:	f640 0264 	movw	r2, #2148	; 0x864
   18a12:	e9cd 0100 	strd	r0, r1, [sp]
   18a16:	f2c0 0202 	movt	r2, #2
   18a1a:	4660      	mov	r0, ip
   18a1c:	2101      	movs	r1, #1
   18a1e:	2300      	movs	r3, #0
   18a20:	f7ff f82c 	bl	17a7c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18a24:	b023      	add	sp, #140	; 0x8c
   18a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018a2a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   18a2a:	b580      	push	{r7, lr}
   18a2c:	b0a2      	sub	sp, #136	; 0x88
   18a2e:	7802      	ldrb	r2, [r0, #0]
   18a30:	468c      	mov	ip, r1
   18a32:	f002 030f 	and.w	r3, r2, #15
   18a36:	f103 0057 	add.w	r0, r3, #87	; 0x57
   18a3a:	2b0a      	cmp	r3, #10
   18a3c:	bf38      	it	cc
   18a3e:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   18a42:	2300      	movs	r3, #0
   18a44:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   18a48:	d00b      	beq.n	18a62 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   18a4a:	0913      	lsrs	r3, r2, #4
   18a4c:	f103 0157 	add.w	r1, r3, #87	; 0x57
   18a50:	2aa0      	cmp	r2, #160	; 0xa0
   18a52:	bf38      	it	cc
   18a54:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   18a58:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   18a5c:	227e      	movs	r2, #126	; 0x7e
   18a5e:	2302      	movs	r3, #2
   18a60:	e001      	b.n	18a66 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   18a62:	227f      	movs	r2, #127	; 0x7f
   18a64:	2301      	movs	r3, #1
   18a66:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   18a6a:	a802      	add	r0, sp, #8
   18a6c:	4410      	add	r0, r2
   18a6e:	f640 229d 	movw	r2, #2717	; 0xa9d
   18a72:	e9cd 0300 	strd	r0, r3, [sp]
   18a76:	f2c0 0202 	movt	r2, #2
   18a7a:	4660      	mov	r0, ip
   18a7c:	2101      	movs	r1, #1
   18a7e:	2302      	movs	r3, #2
   18a80:	f7fe fffc 	bl	17a7c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18a84:	b022      	add	sp, #136	; 0x88
   18a86:	bd80      	pop	{r7, pc}

00018a88 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   18a88:	b580      	push	{r7, lr}
   18a8a:	b0a2      	sub	sp, #136	; 0x88
   18a8c:	7802      	ldrb	r2, [r0, #0]
   18a8e:	468c      	mov	ip, r1
   18a90:	f002 030f 	and.w	r3, r2, #15
   18a94:	f103 0037 	add.w	r0, r3, #55	; 0x37
   18a98:	2b0a      	cmp	r3, #10
   18a9a:	bf38      	it	cc
   18a9c:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   18aa0:	2300      	movs	r3, #0
   18aa2:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   18aa6:	d00b      	beq.n	18ac0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   18aa8:	0913      	lsrs	r3, r2, #4
   18aaa:	f103 0137 	add.w	r1, r3, #55	; 0x37
   18aae:	2aa0      	cmp	r2, #160	; 0xa0
   18ab0:	bf38      	it	cc
   18ab2:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   18ab6:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   18aba:	227e      	movs	r2, #126	; 0x7e
   18abc:	2302      	movs	r3, #2
   18abe:	e001      	b.n	18ac4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   18ac0:	227f      	movs	r2, #127	; 0x7f
   18ac2:	2301      	movs	r3, #1
   18ac4:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   18ac8:	a802      	add	r0, sp, #8
   18aca:	4410      	add	r0, r2
   18acc:	f640 229d 	movw	r2, #2717	; 0xa9d
   18ad0:	e9cd 0300 	strd	r0, r3, [sp]
   18ad4:	f2c0 0202 	movt	r2, #2
   18ad8:	4660      	mov	r0, ip
   18ada:	2101      	movs	r1, #1
   18adc:	2302      	movs	r3, #2
   18ade:	f7fe ffcd 	bl	17a7c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18ae2:	b022      	add	sp, #136	; 0x88
   18ae4:	bd80      	pop	{r7, pc}

00018ae6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   18ae6:	b580      	push	{r7, lr}
   18ae8:	b0a2      	sub	sp, #136	; 0x88
   18aea:	8800      	ldrh	r0, [r0, #0]
   18aec:	468c      	mov	ip, r1
   18aee:	f000 020f 	and.w	r2, r0, #15
   18af2:	f102 0357 	add.w	r3, r2, #87	; 0x57
   18af6:	2a0a      	cmp	r2, #10
   18af8:	bf38      	it	cc
   18afa:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   18afe:	2200      	movs	r2, #0
   18b00:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   18b04:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   18b08:	d02a      	beq.n	18b60 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   18b0a:	0903      	lsrs	r3, r0, #4
   18b0c:	f003 030f 	and.w	r3, r3, #15
   18b10:	f103 0157 	add.w	r1, r3, #87	; 0x57
   18b14:	2b0a      	cmp	r3, #10
   18b16:	bf38      	it	cc
   18b18:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   18b1c:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   18b20:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   18b24:	d031      	beq.n	18b8a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   18b26:	0a01      	lsrs	r1, r0, #8
   18b28:	f001 010f 	and.w	r1, r1, #15
   18b2c:	f101 0257 	add.w	r2, r1, #87	; 0x57
   18b30:	290a      	cmp	r1, #10
   18b32:	bf38      	it	cc
   18b34:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   18b38:	2100      	movs	r1, #0
   18b3a:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18b3e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   18b42:	d027      	beq.n	18b94 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   18b44:	0b00      	lsrs	r0, r0, #12
   18b46:	f100 0157 	add.w	r1, r0, #87	; 0x57
   18b4a:	280a      	cmp	r0, #10
   18b4c:	bf38      	it	cc
   18b4e:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   18b52:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   18b56:	227d      	movs	r2, #125	; 0x7d
   18b58:	207c      	movs	r0, #124	; 0x7c
   18b5a:	2881      	cmp	r0, #129	; 0x81
   18b5c:	d304      	bcc.n	18b68 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   18b5e:	e01d      	b.n	18b9c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   18b60:	2280      	movs	r2, #128	; 0x80
   18b62:	207f      	movs	r0, #127	; 0x7f
   18b64:	2881      	cmp	r0, #129	; 0x81
   18b66:	d219      	bcs.n	18b9c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   18b68:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   18b6c:	ab02      	add	r3, sp, #8
   18b6e:	4418      	add	r0, r3
   18b70:	2101      	movs	r1, #1
   18b72:	e9cd 0200 	strd	r0, r2, [sp]
   18b76:	f640 229d 	movw	r2, #2717	; 0xa9d
   18b7a:	f2c0 0202 	movt	r2, #2
   18b7e:	4660      	mov	r0, ip
   18b80:	2302      	movs	r3, #2
   18b82:	f7fe ff7b 	bl	17a7c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18b86:	b022      	add	sp, #136	; 0x88
   18b88:	bd80      	pop	{r7, pc}
   18b8a:	207e      	movs	r0, #126	; 0x7e
   18b8c:	227f      	movs	r2, #127	; 0x7f
   18b8e:	2881      	cmp	r0, #129	; 0x81
   18b90:	d3ea      	bcc.n	18b68 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   18b92:	e003      	b.n	18b9c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   18b94:	207d      	movs	r0, #125	; 0x7d
   18b96:	227e      	movs	r2, #126	; 0x7e
   18b98:	2881      	cmp	r0, #129	; 0x81
   18b9a:	d3e5      	bcc.n	18b68 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   18b9c:	2180      	movs	r1, #128	; 0x80
   18b9e:	f7ff fb0a 	bl	181b6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18ba2:	defe      	udf	#254	; 0xfe

00018ba4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>:
   18ba4:	b580      	push	{r7, lr}
   18ba6:	b0a2      	sub	sp, #136	; 0x88
   18ba8:	8800      	ldrh	r0, [r0, #0]
   18baa:	468c      	mov	ip, r1
   18bac:	f000 020f 	and.w	r2, r0, #15
   18bb0:	f102 0337 	add.w	r3, r2, #55	; 0x37
   18bb4:	2a0a      	cmp	r2, #10
   18bb6:	bf38      	it	cc
   18bb8:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   18bbc:	2200      	movs	r2, #0
   18bbe:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   18bc2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   18bc6:	d02a      	beq.n	18c1e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x7a>
   18bc8:	0903      	lsrs	r3, r0, #4
   18bca:	f003 030f 	and.w	r3, r3, #15
   18bce:	f103 0137 	add.w	r1, r3, #55	; 0x37
   18bd2:	2b0a      	cmp	r3, #10
   18bd4:	bf38      	it	cc
   18bd6:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   18bda:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   18bde:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   18be2:	d031      	beq.n	18c48 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xa4>
   18be4:	0a01      	lsrs	r1, r0, #8
   18be6:	f001 010f 	and.w	r1, r1, #15
   18bea:	f101 0237 	add.w	r2, r1, #55	; 0x37
   18bee:	290a      	cmp	r1, #10
   18bf0:	bf38      	it	cc
   18bf2:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   18bf6:	2100      	movs	r1, #0
   18bf8:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18bfc:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   18c00:	d027      	beq.n	18c52 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xae>
   18c02:	0b00      	lsrs	r0, r0, #12
   18c04:	f100 0137 	add.w	r1, r0, #55	; 0x37
   18c08:	280a      	cmp	r0, #10
   18c0a:	bf38      	it	cc
   18c0c:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   18c10:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   18c14:	227d      	movs	r2, #125	; 0x7d
   18c16:	207c      	movs	r0, #124	; 0x7c
   18c18:	2881      	cmp	r0, #129	; 0x81
   18c1a:	d304      	bcc.n	18c26 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   18c1c:	e01d      	b.n	18c5a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   18c1e:	2280      	movs	r2, #128	; 0x80
   18c20:	207f      	movs	r0, #127	; 0x7f
   18c22:	2881      	cmp	r0, #129	; 0x81
   18c24:	d219      	bcs.n	18c5a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   18c26:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   18c2a:	ab02      	add	r3, sp, #8
   18c2c:	4418      	add	r0, r3
   18c2e:	2101      	movs	r1, #1
   18c30:	e9cd 0200 	strd	r0, r2, [sp]
   18c34:	f640 229d 	movw	r2, #2717	; 0xa9d
   18c38:	f2c0 0202 	movt	r2, #2
   18c3c:	4660      	mov	r0, ip
   18c3e:	2302      	movs	r3, #2
   18c40:	f7fe ff1c 	bl	17a7c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18c44:	b022      	add	sp, #136	; 0x88
   18c46:	bd80      	pop	{r7, pc}
   18c48:	207e      	movs	r0, #126	; 0x7e
   18c4a:	227f      	movs	r2, #127	; 0x7f
   18c4c:	2881      	cmp	r0, #129	; 0x81
   18c4e:	d3ea      	bcc.n	18c26 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   18c50:	e003      	b.n	18c5a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   18c52:	207d      	movs	r0, #125	; 0x7d
   18c54:	227e      	movs	r2, #126	; 0x7e
   18c56:	2881      	cmp	r0, #129	; 0x81
   18c58:	d3e5      	bcc.n	18c26 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   18c5a:	2180      	movs	r1, #128	; 0x80
   18c5c:	f7ff faab 	bl	181b6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18c60:	defe      	udf	#254	; 0xfe

00018c62 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   18c62:	b5b0      	push	{r4, r5, r7, lr}
   18c64:	b0a2      	sub	sp, #136	; 0x88
   18c66:	6800      	ldr	r0, [r0, #0]
   18c68:	f10d 0e08 	add.w	lr, sp, #8
   18c6c:	468c      	mov	ip, r1
   18c6e:	2381      	movs	r3, #129	; 0x81
   18c70:	2100      	movs	r1, #0
   18c72:	f000 020f 	and.w	r2, r0, #15
   18c76:	f102 0457 	add.w	r4, r2, #87	; 0x57
   18c7a:	2a0a      	cmp	r2, #10
   18c7c:	bf38      	it	cc
   18c7e:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   18c82:	eb0e 0203 	add.w	r2, lr, r3
   18c86:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   18c8a:	f802 4c02 	strb.w	r4, [r2, #-2]
   18c8e:	d030      	beq.n	18cf2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   18c90:	0904      	lsrs	r4, r0, #4
   18c92:	f004 040f 	and.w	r4, r4, #15
   18c96:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18c9a:	2c0a      	cmp	r4, #10
   18c9c:	bf38      	it	cc
   18c9e:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18ca2:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   18ca6:	f802 5c03 	strb.w	r5, [r2, #-3]
   18caa:	d028      	beq.n	18cfe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   18cac:	0a04      	lsrs	r4, r0, #8
   18cae:	f004 040f 	and.w	r4, r4, #15
   18cb2:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18cb6:	2c0a      	cmp	r4, #10
   18cb8:	bf38      	it	cc
   18cba:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18cbe:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18cc2:	f802 5c04 	strb.w	r5, [r2, #-4]
   18cc6:	d01f      	beq.n	18d08 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   18cc8:	0b04      	lsrs	r4, r0, #12
   18cca:	3b04      	subs	r3, #4
   18ccc:	f004 040f 	and.w	r4, r4, #15
   18cd0:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18cd4:	2c0a      	cmp	r4, #10
   18cd6:	bf38      	it	cc
   18cd8:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18cdc:	f802 5c05 	strb.w	r5, [r2, #-5]
   18ce0:	0c02      	lsrs	r2, r0, #16
   18ce2:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   18ce6:	4610      	mov	r0, r2
   18ce8:	d1c3      	bne.n	18c72 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   18cea:	1e58      	subs	r0, r3, #1
   18cec:	2881      	cmp	r0, #129	; 0x81
   18cee:	d30f      	bcc.n	18d10 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   18cf0:	e01e      	b.n	18d30 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   18cf2:	1e59      	subs	r1, r3, #1
   18cf4:	1e98      	subs	r0, r3, #2
   18cf6:	460b      	mov	r3, r1
   18cf8:	2881      	cmp	r0, #129	; 0x81
   18cfa:	d309      	bcc.n	18d10 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   18cfc:	e018      	b.n	18d30 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   18cfe:	1ed8      	subs	r0, r3, #3
   18d00:	3b02      	subs	r3, #2
   18d02:	2881      	cmp	r0, #129	; 0x81
   18d04:	d304      	bcc.n	18d10 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   18d06:	e013      	b.n	18d30 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   18d08:	1f18      	subs	r0, r3, #4
   18d0a:	3b03      	subs	r3, #3
   18d0c:	2881      	cmp	r0, #129	; 0x81
   18d0e:	d20f      	bcs.n	18d30 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   18d10:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   18d14:	f640 229d 	movw	r2, #2717	; 0xa9d
   18d18:	4470      	add	r0, lr
   18d1a:	f2c0 0202 	movt	r2, #2
   18d1e:	e9cd 0100 	strd	r0, r1, [sp]
   18d22:	4660      	mov	r0, ip
   18d24:	2101      	movs	r1, #1
   18d26:	2302      	movs	r3, #2
   18d28:	f7fe fea8 	bl	17a7c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18d2c:	b022      	add	sp, #136	; 0x88
   18d2e:	bdb0      	pop	{r4, r5, r7, pc}
   18d30:	2180      	movs	r1, #128	; 0x80
   18d32:	f7ff fa40 	bl	181b6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18d36:	defe      	udf	#254	; 0xfe

00018d38 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   18d38:	b5b0      	push	{r4, r5, r7, lr}
   18d3a:	b0a2      	sub	sp, #136	; 0x88
   18d3c:	6800      	ldr	r0, [r0, #0]
   18d3e:	f10d 0e08 	add.w	lr, sp, #8
   18d42:	468c      	mov	ip, r1
   18d44:	2381      	movs	r3, #129	; 0x81
   18d46:	2100      	movs	r1, #0
   18d48:	f000 020f 	and.w	r2, r0, #15
   18d4c:	f102 0437 	add.w	r4, r2, #55	; 0x37
   18d50:	2a0a      	cmp	r2, #10
   18d52:	bf38      	it	cc
   18d54:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   18d58:	eb0e 0203 	add.w	r2, lr, r3
   18d5c:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   18d60:	f802 4c02 	strb.w	r4, [r2, #-2]
   18d64:	d030      	beq.n	18dc8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   18d66:	0904      	lsrs	r4, r0, #4
   18d68:	f004 040f 	and.w	r4, r4, #15
   18d6c:	f104 0537 	add.w	r5, r4, #55	; 0x37
   18d70:	2c0a      	cmp	r4, #10
   18d72:	bf38      	it	cc
   18d74:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18d78:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   18d7c:	f802 5c03 	strb.w	r5, [r2, #-3]
   18d80:	d028      	beq.n	18dd4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   18d82:	0a04      	lsrs	r4, r0, #8
   18d84:	f004 040f 	and.w	r4, r4, #15
   18d88:	f104 0537 	add.w	r5, r4, #55	; 0x37
   18d8c:	2c0a      	cmp	r4, #10
   18d8e:	bf38      	it	cc
   18d90:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18d94:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18d98:	f802 5c04 	strb.w	r5, [r2, #-4]
   18d9c:	d01f      	beq.n	18dde <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   18d9e:	0b04      	lsrs	r4, r0, #12
   18da0:	3b04      	subs	r3, #4
   18da2:	f004 040f 	and.w	r4, r4, #15
   18da6:	f104 0537 	add.w	r5, r4, #55	; 0x37
   18daa:	2c0a      	cmp	r4, #10
   18dac:	bf38      	it	cc
   18dae:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18db2:	f802 5c05 	strb.w	r5, [r2, #-5]
   18db6:	0c02      	lsrs	r2, r0, #16
   18db8:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   18dbc:	4610      	mov	r0, r2
   18dbe:	d1c3      	bne.n	18d48 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   18dc0:	1e58      	subs	r0, r3, #1
   18dc2:	2881      	cmp	r0, #129	; 0x81
   18dc4:	d30f      	bcc.n	18de6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   18dc6:	e01e      	b.n	18e06 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   18dc8:	1e59      	subs	r1, r3, #1
   18dca:	1e98      	subs	r0, r3, #2
   18dcc:	460b      	mov	r3, r1
   18dce:	2881      	cmp	r0, #129	; 0x81
   18dd0:	d309      	bcc.n	18de6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   18dd2:	e018      	b.n	18e06 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   18dd4:	1ed8      	subs	r0, r3, #3
   18dd6:	3b02      	subs	r3, #2
   18dd8:	2881      	cmp	r0, #129	; 0x81
   18dda:	d304      	bcc.n	18de6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   18ddc:	e013      	b.n	18e06 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   18dde:	1f18      	subs	r0, r3, #4
   18de0:	3b03      	subs	r3, #3
   18de2:	2881      	cmp	r0, #129	; 0x81
   18de4:	d20f      	bcs.n	18e06 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   18de6:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   18dea:	f640 229d 	movw	r2, #2717	; 0xa9d
   18dee:	4470      	add	r0, lr
   18df0:	f2c0 0202 	movt	r2, #2
   18df4:	e9cd 0100 	strd	r0, r1, [sp]
   18df8:	4660      	mov	r0, ip
   18dfa:	2101      	movs	r1, #1
   18dfc:	2302      	movs	r3, #2
   18dfe:	f7fe fe3d 	bl	17a7c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18e02:	b022      	add	sp, #136	; 0x88
   18e04:	bdb0      	pop	{r4, r5, r7, pc}
   18e06:	2180      	movs	r1, #128	; 0x80
   18e08:	f7ff f9d5 	bl	181b6 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18e0c:	defe      	udf	#254	; 0xfe

00018e0e <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   18e0e:	b580      	push	{r7, lr}
   18e10:	b08c      	sub	sp, #48	; 0x30
   18e12:	7802      	ldrb	r2, [r0, #0]
   18e14:	2a64      	cmp	r2, #100	; 0x64
   18e16:	d314      	bcc.n	18e42 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   18e18:	f248 501f 	movw	r0, #34079	; 0x851f
   18e1c:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   18e20:	fba2 0300 	umull	r0, r3, r2, r0
   18e24:	2064      	movs	r0, #100	; 0x64
   18e26:	095b      	lsrs	r3, r3, #5
   18e28:	fb03 2010 	mls	r0, r3, r0, r2
   18e2c:	f640 229f 	movw	r2, #2719	; 0xa9f
   18e30:	f2c0 0202 	movt	r2, #2
   18e34:	b2c0      	uxtb	r0, r0
   18e36:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   18e3a:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   18e3e:	2024      	movs	r0, #36	; 0x24
   18e40:	e003      	b.n	18e4a <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   18e42:	2a0a      	cmp	r2, #10
   18e44:	d206      	bcs.n	18e54 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   18e46:	2026      	movs	r0, #38	; 0x26
   18e48:	4613      	mov	r3, r2
   18e4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
   18e4e:	ab02      	add	r3, sp, #8
   18e50:	541a      	strb	r2, [r3, r0]
   18e52:	e008      	b.n	18e66 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   18e54:	f640 209f 	movw	r0, #2719	; 0xa9f
   18e58:	f2c0 0002 	movt	r0, #2
   18e5c:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   18e60:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   18e64:	2025      	movs	r0, #37	; 0x25
   18e66:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   18e6a:	ab02      	add	r3, sp, #8
   18e6c:	4418      	add	r0, r3
   18e6e:	2300      	movs	r3, #0
   18e70:	e9cd 0200 	strd	r0, r2, [sp]
   18e74:	f640 0264 	movw	r2, #2148	; 0x864
   18e78:	4608      	mov	r0, r1
   18e7a:	f2c0 0202 	movt	r2, #2
   18e7e:	2101      	movs	r1, #1
   18e80:	f7fe fdfc 	bl	17a7c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18e84:	b00c      	add	sp, #48	; 0x30
   18e86:	bd80      	pop	{r7, pc}

00018e88 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>:
   18e88:	b580      	push	{r7, lr}
   18e8a:	b08c      	sub	sp, #48	; 0x30
   18e8c:	8800      	ldrh	r0, [r0, #0]
   18e8e:	f242 720f 	movw	r2, #9999	; 0x270f
   18e92:	468e      	mov	lr, r1
   18e94:	4290      	cmp	r0, r2
   18e96:	d924      	bls.n	18ee2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x5a>
   18e98:	f241 7259 	movw	r2, #5977	; 0x1759
   18e9c:	f248 511f 	movw	r1, #34079	; 0x851f
   18ea0:	f2cd 12b7 	movt	r2, #53687	; 0xd1b7
   18ea4:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   18ea8:	fba0 2302 	umull	r2, r3, r0, r2
   18eac:	0b5a      	lsrs	r2, r3, #13
   18eae:	f242 7310 	movw	r3, #10000	; 0x2710
   18eb2:	fb02 0013 	mls	r0, r2, r3, r0
   18eb6:	b283      	uxth	r3, r0
   18eb8:	fba3 1301 	umull	r1, r3, r3, r1
   18ebc:	0959      	lsrs	r1, r3, #5
   18ebe:	2364      	movs	r3, #100	; 0x64
   18ec0:	fb01 0013 	mls	r0, r1, r3, r0
   18ec4:	f640 239f 	movw	r3, #2719	; 0xa9f
   18ec8:	f2c0 0302 	movt	r3, #2
   18ecc:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   18ed0:	f8ad 102b 	strh.w	r1, [sp, #43]	; 0x2b
   18ed4:	b280      	uxth	r0, r0
   18ed6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   18eda:	2323      	movs	r3, #35	; 0x23
   18edc:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   18ee0:	e024      	b.n	18f2c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa4>
   18ee2:	f640 2c9f 	movw	ip, #2719	; 0xa9f
   18ee6:	2863      	cmp	r0, #99	; 0x63
   18ee8:	f2c0 0c02 	movt	ip, #2
   18eec:	d919      	bls.n	18f22 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x9a>
   18eee:	f248 511f 	movw	r1, #34079	; 0x851f
   18ef2:	2325      	movs	r3, #37	; 0x25
   18ef4:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   18ef8:	fba0 1201 	umull	r1, r2, r0, r1
   18efc:	0951      	lsrs	r1, r2, #5
   18efe:	2264      	movs	r2, #100	; 0x64
   18f00:	fb01 0012 	mls	r0, r1, r2, r0
   18f04:	b280      	uxth	r0, r0
   18f06:	f83c 0010 	ldrh.w	r0, [ip, r0, lsl #1]
   18f0a:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   18f0e:	4608      	mov	r0, r1
   18f10:	b282      	uxth	r2, r0
   18f12:	2a0a      	cmp	r2, #10
   18f14:	d309      	bcc.n	18f2a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa2>
   18f16:	f83c 1012 	ldrh.w	r1, [ip, r2, lsl #1]
   18f1a:	1e98      	subs	r0, r3, #2
   18f1c:	aa02      	add	r2, sp, #8
   18f1e:	5211      	strh	r1, [r2, r0]
   18f20:	e009      	b.n	18f36 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xae>
   18f22:	2327      	movs	r3, #39	; 0x27
   18f24:	b282      	uxth	r2, r0
   18f26:	2a0a      	cmp	r2, #10
   18f28:	d2f5      	bcs.n	18f16 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x8e>
   18f2a:	4602      	mov	r2, r0
   18f2c:	1e58      	subs	r0, r3, #1
   18f2e:	f102 0130 	add.w	r1, r2, #48	; 0x30
   18f32:	aa02      	add	r2, sp, #8
   18f34:	5411      	strb	r1, [r2, r0]
   18f36:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   18f3a:	aa02      	add	r2, sp, #8
   18f3c:	4410      	add	r0, r2
   18f3e:	f640 0264 	movw	r2, #2148	; 0x864
   18f42:	e9cd 0100 	strd	r0, r1, [sp]
   18f46:	f2c0 0202 	movt	r2, #2
   18f4a:	4670      	mov	r0, lr
   18f4c:	2101      	movs	r1, #1
   18f4e:	2300      	movs	r3, #0
   18f50:	f7fe fd94 	bl	17a7c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18f54:	b00c      	add	sp, #48	; 0x30
   18f56:	bd80      	pop	{r7, pc}

00018f58 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   18f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f5c:	b08f      	sub	sp, #60	; 0x3c
   18f5e:	6805      	ldr	r5, [r0, #0]
   18f60:	f248 581f 	movw	r8, #34079	; 0x851f
   18f64:	460e      	mov	r6, r1
   18f66:	f640 219f 	movw	r1, #2719	; 0xa9f
   18f6a:	2d00      	cmp	r5, #0
   18f6c:	f242 7910 	movw	r9, #10000	; 0x2710
   18f70:	462b      	mov	r3, r5
   18f72:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   18f76:	bf48      	it	mi
   18f78:	426b      	negmi	r3, r5
   18f7a:	454b      	cmp	r3, r9
   18f7c:	f2c0 0102 	movt	r1, #2
   18f80:	d33a      	bcc.n	18ff8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   18f82:	f241 7a59 	movw	sl, #5977	; 0x1759
   18f86:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   18f8a:	f10d 0e14 	add.w	lr, sp, #20
   18f8e:	2400      	movs	r4, #0
   18f90:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   18f94:	f04f 0b64 	mov.w	fp, #100	; 0x64
   18f98:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   18f9c:	e9cd 5603 	strd	r5, r6, [sp, #12]
   18fa0:	fba3 250a 	umull	r2, r5, r3, sl
   18fa4:	eb0e 0704 	add.w	r7, lr, r4
   18fa8:	3c04      	subs	r4, #4
   18faa:	4283      	cmp	r3, r0
   18fac:	ea4f 3255 	mov.w	r2, r5, lsr #13
   18fb0:	fb02 3519 	mls	r5, r2, r9, r3
   18fb4:	4613      	mov	r3, r2
   18fb6:	b2ae      	uxth	r6, r5
   18fb8:	fba6 6c08 	umull	r6, ip, r6, r8
   18fbc:	ea4f 165c 	mov.w	r6, ip, lsr #5
   18fc0:	fb06 551b 	mls	r5, r6, fp, r5
   18fc4:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   18fc8:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   18fcc:	b2ad      	uxth	r5, r5
   18fce:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   18fd2:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   18fd6:	d8e3      	bhi.n	18fa0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   18fd8:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   18fdc:	f104 0027 	add.w	r0, r4, #39	; 0x27
   18fe0:	4613      	mov	r3, r2
   18fe2:	2b63      	cmp	r3, #99	; 0x63
   18fe4:	dc0b      	bgt.n	18ffe <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   18fe6:	461a      	mov	r2, r3
   18fe8:	2a0a      	cmp	r2, #10
   18fea:	db17      	blt.n	1901c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   18fec:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   18ff0:	3802      	subs	r0, #2
   18ff2:	aa05      	add	r2, sp, #20
   18ff4:	5211      	strh	r1, [r2, r0]
   18ff6:	e016      	b.n	19026 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   18ff8:	2027      	movs	r0, #39	; 0x27
   18ffa:	2b63      	cmp	r3, #99	; 0x63
   18ffc:	ddf3      	ble.n	18fe6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   18ffe:	b29a      	uxth	r2, r3
   19000:	3802      	subs	r0, #2
   19002:	fba2 2708 	umull	r2, r7, r2, r8
   19006:	097a      	lsrs	r2, r7, #5
   19008:	2764      	movs	r7, #100	; 0x64
   1900a:	fb02 3317 	mls	r3, r2, r7, r3
   1900e:	af05      	add	r7, sp, #20
   19010:	b29b      	uxth	r3, r3
   19012:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   19016:	523b      	strh	r3, [r7, r0]
   19018:	2a0a      	cmp	r2, #10
   1901a:	dae7      	bge.n	18fec <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   1901c:	3801      	subs	r0, #1
   1901e:	f102 0130 	add.w	r1, r2, #48	; 0x30
   19022:	aa05      	add	r2, sp, #20
   19024:	5411      	strb	r1, [r2, r0]
   19026:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   1902a:	aa05      	add	r2, sp, #20
   1902c:	4410      	add	r0, r2
   1902e:	f640 0264 	movw	r2, #2148	; 0x864
   19032:	e9cd 0100 	strd	r0, r1, [sp]
   19036:	43e8      	mvns	r0, r5
   19038:	0fc1      	lsrs	r1, r0, #31
   1903a:	f2c0 0202 	movt	r2, #2
   1903e:	4630      	mov	r0, r6
   19040:	2300      	movs	r3, #0
   19042:	f7fe fd1b 	bl	17a7c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19046:	b00f      	add	sp, #60	; 0x3c
   19048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001904c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   1904c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19050:	b08d      	sub	sp, #52	; 0x34
   19052:	468c      	mov	ip, r1
   19054:	6801      	ldr	r1, [r0, #0]
   19056:	f248 5e1f 	movw	lr, #34079	; 0x851f
   1905a:	f640 209f 	movw	r0, #2719	; 0xa9f
   1905e:	f242 7810 	movw	r8, #10000	; 0x2710
   19062:	4541      	cmp	r1, r8
   19064:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   19068:	f2c0 0002 	movt	r0, #2
   1906c:	d337      	bcc.n	190de <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   1906e:	f241 7959 	movw	r9, #5977	; 0x1759
   19072:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   19076:	f10d 0b0c 	add.w	fp, sp, #12
   1907a:	2300      	movs	r3, #0
   1907c:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   19080:	f04f 0a64 	mov.w	sl, #100	; 0x64
   19084:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   19088:	fba1 2409 	umull	r2, r4, r1, r9
   1908c:	42b9      	cmp	r1, r7
   1908e:	ea4f 3254 	mov.w	r2, r4, lsr #13
   19092:	fb02 1418 	mls	r4, r2, r8, r1
   19096:	4611      	mov	r1, r2
   19098:	b2a5      	uxth	r5, r4
   1909a:	fba5 560e 	umull	r5, r6, r5, lr
   1909e:	ea4f 1556 	mov.w	r5, r6, lsr #5
   190a2:	eb0b 0603 	add.w	r6, fp, r3
   190a6:	fb05 441a 	mls	r4, r5, sl, r4
   190aa:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   190ae:	f1a3 0304 	sub.w	r3, r3, #4
   190b2:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   190b6:	b2a4      	uxth	r4, r4
   190b8:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   190bc:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   190c0:	d8e2      	bhi.n	19088 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   190c2:	f103 0427 	add.w	r4, r3, #39	; 0x27
   190c6:	4611      	mov	r1, r2
   190c8:	2963      	cmp	r1, #99	; 0x63
   190ca:	dc0b      	bgt.n	190e4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   190cc:	460b      	mov	r3, r1
   190ce:	2b0a      	cmp	r3, #10
   190d0:	db17      	blt.n	19102 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   190d2:	1ea1      	subs	r1, r4, #2
   190d4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   190d8:	aa03      	add	r2, sp, #12
   190da:	5250      	strh	r0, [r2, r1]
   190dc:	e016      	b.n	1910c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   190de:	2427      	movs	r4, #39	; 0x27
   190e0:	2963      	cmp	r1, #99	; 0x63
   190e2:	ddf3      	ble.n	190cc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   190e4:	b28a      	uxth	r2, r1
   190e6:	3c02      	subs	r4, #2
   190e8:	fba2 230e 	umull	r2, r3, r2, lr
   190ec:	2264      	movs	r2, #100	; 0x64
   190ee:	095b      	lsrs	r3, r3, #5
   190f0:	fb03 1112 	mls	r1, r3, r2, r1
   190f4:	aa03      	add	r2, sp, #12
   190f6:	b289      	uxth	r1, r1
   190f8:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   190fc:	5311      	strh	r1, [r2, r4]
   190fe:	2b0a      	cmp	r3, #10
   19100:	dae7      	bge.n	190d2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   19102:	1e61      	subs	r1, r4, #1
   19104:	aa03      	add	r2, sp, #12
   19106:	f103 0030 	add.w	r0, r3, #48	; 0x30
   1910a:	5450      	strb	r0, [r2, r1]
   1910c:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   19110:	aa03      	add	r2, sp, #12
   19112:	4411      	add	r1, r2
   19114:	f640 0264 	movw	r2, #2148	; 0x864
   19118:	e9cd 1000 	strd	r1, r0, [sp]
   1911c:	f2c0 0202 	movt	r2, #2
   19120:	4660      	mov	r0, ip
   19122:	2101      	movs	r1, #1
   19124:	2300      	movs	r3, #0
   19126:	f7fe fca9 	bl	17a7c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1912a:	b00d      	add	sp, #52	; 0x34
   1912c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019130 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   19130:	e9d0 2000 	ldrd	r2, r0, [r0]
   19134:	68c3      	ldr	r3, [r0, #12]
   19136:	4610      	mov	r0, r2
   19138:	4718      	bx	r3

0001913a <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   1913a:	460b      	mov	r3, r1
   1913c:	e9d0 1200 	ldrd	r1, r2, [r0]
   19140:	4618      	mov	r0, r3
   19142:	f7fe bde3 	b.w	17d0c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
	...

00019148 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   19148:	4b07      	ldr	r3, [pc, #28]	; (19168 <__semihost+0x20>)
   1914a:	781b      	ldrb	r3, [r3, #0]
   1914c:	b14b      	cbz	r3, 19162 <__semihost+0x1a>
static int __semihost(int command, void* message) {
   1914e:	b410      	push	{r4}
   19150:	4602      	mov	r2, r0
   19152:	460c      	mov	r4, r1
    __asm( 
   19154:	4610      	mov	r0, r2
   19156:	4621      	mov	r1, r4
   19158:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   1915a:	2000      	movs	r0, #0
}
   1915c:	f85d 4b04 	ldr.w	r4, [sp], #4
   19160:	4770      	bx	lr
    if (!log_enabled) return -1;
   19162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19166:	4770      	bx	lr
   19168:	20000100 	.word	0x20000100

0001916c <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   1916c:	4b02      	ldr	r3, [pc, #8]	; (19178 <debugger_connected+0xc>)
   1916e:	6818      	ldr	r0, [r3, #0]
}
   19170:	f000 0001 	and.w	r0, r0, #1
   19174:	4770      	bx	lr
   19176:	bf00      	nop
   19178:	e000edf0 	.word	0xe000edf0

0001917c <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   1917c:	b570      	push	{r4, r5, r6, lr}
   1917e:	b084      	sub	sp, #16
   19180:	4606      	mov	r6, r0
   19182:	460d      	mov	r5, r1
   19184:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   19186:	f7ff fff1 	bl	1916c <debugger_connected>
   1918a:	4603      	mov	r3, r0
   1918c:	b108      	cbz	r0, 19192 <semihost_write+0x16>
    if (length == 0) { return 0; }
   1918e:	b91c      	cbnz	r4, 19198 <semihost_write+0x1c>
   19190:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   19192:	4618      	mov	r0, r3
   19194:	b004      	add	sp, #16
   19196:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   19198:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   1919a:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   1919c:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   1919e:	a901      	add	r1, sp, #4
   191a0:	2005      	movs	r0, #5
   191a2:	f7ff ffd1 	bl	19148 <__semihost>
   191a6:	4603      	mov	r3, r0
   191a8:	e7f3      	b.n	19192 <semihost_write+0x16>
	...

000191ac <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   191ac:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   191ae:	4b0e      	ldr	r3, [pc, #56]	; (191e8 <console_flush+0x3c>)
   191b0:	781b      	ldrb	r3, [r3, #0]
   191b2:	b1bb      	cbz	r3, 191e4 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   191b4:	4b0d      	ldr	r3, [pc, #52]	; (191ec <console_flush+0x40>)
   191b6:	681d      	ldr	r5, [r3, #0]
   191b8:	b1a5      	cbz	r5, 191e4 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   191ba:	4b0d      	ldr	r3, [pc, #52]	; (191f0 <console_flush+0x44>)
   191bc:	685b      	ldr	r3, [r3, #4]
   191be:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   191c2:	b97b      	cbnz	r3, 191e4 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   191c4:	4b09      	ldr	r3, [pc, #36]	; (191ec <console_flush+0x40>)
   191c6:	2200      	movs	r2, #0
   191c8:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   191ca:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   191cc:	e005      	b.n	191da <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   191ce:	88e2      	ldrh	r2, [r4, #6]
   191d0:	6821      	ldr	r1, [r4, #0]
   191d2:	2002      	movs	r0, #2
   191d4:	f7ff ffd2 	bl	1917c <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   191d8:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   191da:	2c00      	cmp	r4, #0
   191dc:	d1f7      	bne.n	191ce <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   191de:	4628      	mov	r0, r5
   191e0:	f001 fbfc 	bl	1a9dc <os_mbuf_free_chain>
}
   191e4:	bd38      	pop	{r3, r4, r5, pc}
   191e6:	bf00      	nop
   191e8:	20000100 	.word	0x20000100
   191ec:	20005704 	.word	0x20005704
   191f0:	e000ed00 	.word	0xe000ed00

000191f4 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   191f4:	b508      	push	{r3, lr}
   191f6:	f7ff ffd9 	bl	191ac <console_flush>
   191fa:	bd08      	pop	{r3, pc}

000191fc <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   191fc:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   191fe:	4b12      	ldr	r3, [pc, #72]	; (19248 <console_buffer+0x4c>)
   19200:	781b      	ldrb	r3, [r3, #0]
   19202:	b903      	cbnz	r3, 19206 <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   19204:	bd38      	pop	{r3, r4, r5, pc}
   19206:	460d      	mov	r5, r1
   19208:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   1920a:	f7ff ffaf 	bl	1916c <debugger_connected>
   1920e:	2800      	cmp	r0, #0
   19210:	d0f8      	beq.n	19204 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   19212:	4b0e      	ldr	r3, [pc, #56]	; (1924c <console_buffer+0x50>)
   19214:	681b      	ldr	r3, [r3, #0]
   19216:	b173      	cbz	r3, 19236 <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   19218:	4b0c      	ldr	r3, [pc, #48]	; (1924c <console_buffer+0x50>)
   1921a:	6818      	ldr	r0, [r3, #0]
   1921c:	f001 fbf0 	bl	1aa00 <os_mbuf_len>
   19220:	4428      	add	r0, r5
   19222:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   19226:	d2ed      	bcs.n	19204 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   19228:	b2aa      	uxth	r2, r5
   1922a:	4621      	mov	r1, r4
   1922c:	4b07      	ldr	r3, [pc, #28]	; (1924c <console_buffer+0x50>)
   1922e:	6818      	ldr	r0, [r3, #0]
   19230:	f001 fbf0 	bl	1aa14 <os_mbuf_append>
   19234:	e7e6      	b.n	19204 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   19236:	2100      	movs	r1, #0
   19238:	b2a8      	uxth	r0, r5
   1923a:	f001 fd93 	bl	1ad64 <os_msys_get_pkthdr>
   1923e:	4b03      	ldr	r3, [pc, #12]	; (1924c <console_buffer+0x50>)
   19240:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   19242:	2800      	cmp	r0, #0
   19244:	d1e8      	bne.n	19218 <console_buffer+0x1c>
   19246:	e7dd      	b.n	19204 <console_buffer+0x8>
   19248:	20000100 	.word	0x20000100
   1924c:	20005704 	.word	0x20005704

00019250 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   19250:	b500      	push	{lr}
   19252:	b083      	sub	sp, #12
   19254:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   19258:	280d      	cmp	r0, #13
   1925a:	d004      	beq.n	19266 <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   1925c:	2101      	movs	r1, #1
   1925e:	f10d 0007 	add.w	r0, sp, #7
   19262:	f7ff ffcb 	bl	191fc <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   19266:	b003      	add	sp, #12
   19268:	f85d fb04 	ldr.w	pc, [sp], #4

0001926c <console_printhex>:
void console_printhex(uint8_t v) {
   1926c:	b510      	push	{r4, lr}
   1926e:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   19270:	2310      	movs	r3, #16
    int length = 0;
   19272:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   19274:	e005      	b.n	19282 <console_printhex+0x16>
        v = v % divisor;
   19276:	fbb0 f1f3 	udiv	r1, r0, r3
   1927a:	fb03 0011 	mls	r0, r3, r1, r0
   1927e:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   19280:	091b      	lsrs	r3, r3, #4
   19282:	b18b      	cbz	r3, 192a8 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   19284:	fbb0 f4f3 	udiv	r4, r0, r3
   19288:	f104 0130 	add.w	r1, r4, #48	; 0x30
   1928c:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   1928e:	2939      	cmp	r1, #57	; 0x39
   19290:	d902      	bls.n	19298 <console_printhex+0x2c>
   19292:	f104 0157 	add.w	r1, r4, #87	; 0x57
   19296:	b2c9      	uxtb	r1, r1
            if (length < size) {
   19298:	2a02      	cmp	r2, #2
   1929a:	dcec      	bgt.n	19276 <console_printhex+0xa>
                buffer[length++] = digit;
   1929c:	ac02      	add	r4, sp, #8
   1929e:	4414      	add	r4, r2
   192a0:	f804 1c04 	strb.w	r1, [r4, #-4]
   192a4:	3201      	adds	r2, #1
   192a6:	e7e6      	b.n	19276 <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   192a8:	b92a      	cbnz	r2, 192b6 <console_printhex+0x4a>
   192aa:	ab02      	add	r3, sp, #8
   192ac:	4413      	add	r3, r2
   192ae:	2130      	movs	r1, #48	; 0x30
   192b0:	f803 1c04 	strb.w	r1, [r3, #-4]
   192b4:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   192b6:	2a02      	cmp	r2, #2
   192b8:	dc04      	bgt.n	192c4 <console_printhex+0x58>
   192ba:	ab02      	add	r3, sp, #8
   192bc:	441a      	add	r2, r3
   192be:	2300      	movs	r3, #0
   192c0:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   192c4:	2300      	movs	r3, #0
   192c6:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   192ca:	a801      	add	r0, sp, #4
   192cc:	f002 fb73 	bl	1b9b6 <strlen>
   192d0:	4601      	mov	r1, r0
   192d2:	a801      	add	r0, sp, #4
   192d4:	f7ff ff92 	bl	191fc <console_buffer>
}
   192d8:	b002      	add	sp, #8
   192da:	bd10      	pop	{r4, pc}

000192dc <console_printint>:
void console_printint(int i) {
   192dc:	b508      	push	{r3, lr}
    console_printf("%d", i);
   192de:	4601      	mov	r1, r0
   192e0:	4801      	ldr	r0, [pc, #4]	; (192e8 <console_printint+0xc>)
   192e2:	f000 f873 	bl	193cc <console_printf>
}
   192e6:	bd08      	pop	{r3, pc}
   192e8:	00021a64 	.word	0x00021a64

000192ec <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   192ec:	b180      	cbz	r0, 19310 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   192ee:	b570      	push	{r4, r5, r6, lr}
   192f0:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   192f2:	b161      	cbz	r1, 1930e <console_dump+0x22>
   192f4:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   192f6:	2400      	movs	r4, #0
   192f8:	e007      	b.n	1930a <console_dump+0x1e>
   192fa:	5d30      	ldrb	r0, [r6, r4]
   192fc:	f7ff ffb6 	bl	1926c <console_printhex>
   19300:	2101      	movs	r1, #1
   19302:	4804      	ldr	r0, [pc, #16]	; (19314 <console_dump+0x28>)
   19304:	f7ff ff7a 	bl	191fc <console_buffer>
   19308:	3401      	adds	r4, #1
   1930a:	42ac      	cmp	r4, r5
   1930c:	d3f5      	bcc.n	192fa <console_dump+0xe>
}
   1930e:	bd70      	pop	{r4, r5, r6, pc}
   19310:	4770      	bx	lr
   19312:	bf00      	nop
   19314:	00021a60 	.word	0x00021a60

00019318 <console_out_nolock>:

int console_out_nolock(int character) {
   19318:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   1931a:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   1931c:	4b0b      	ldr	r3, [pc, #44]	; (1934c <console_out_nolock+0x34>)
   1931e:	781b      	ldrb	r3, [r3, #0]
   19320:	b953      	cbnz	r3, 19338 <console_out_nolock+0x20>
   19322:	4604      	mov	r4, r0
    if ('\n' == c) {
   19324:	2d0a      	cmp	r5, #10
   19326:	d009      	beq.n	1933c <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   19328:	4b09      	ldr	r3, [pc, #36]	; (19350 <console_out_nolock+0x38>)
   1932a:	2201      	movs	r2, #1
   1932c:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   1932e:	4628      	mov	r0, r5
   19330:	f7ff ff8e 	bl	19250 <semihosting_console_write_ch>
    return character;
   19334:	4620      	mov	r0, r4
}
   19336:	bd38      	pop	{r3, r4, r5, pc}
   19338:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   1933a:	e7fc      	b.n	19336 <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   1933c:	200d      	movs	r0, #13
   1933e:	f7ff ff87 	bl	19250 <semihosting_console_write_ch>
        console_is_midline = 0;
   19342:	4b03      	ldr	r3, [pc, #12]	; (19350 <console_out_nolock+0x38>)
   19344:	2200      	movs	r2, #0
   19346:	601a      	str	r2, [r3, #0]
   19348:	e7f1      	b.n	1932e <console_out_nolock+0x16>
   1934a:	bf00      	nop
   1934c:	2000c5b4 	.word	0x2000c5b4
   19350:	2000c5b8 	.word	0x2000c5b8

00019354 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   19354:	2000      	movs	r0, #0
   19356:	4770      	bx	lr

00019358 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   19358:	b570      	push	{r4, r5, r6, lr}
   1935a:	4606      	mov	r6, r0
   1935c:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   1935e:	2400      	movs	r4, #0
   19360:	42ac      	cmp	r4, r5
   19362:	da07      	bge.n	19374 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   19364:	5d30      	ldrb	r0, [r6, r4]
   19366:	f7ff ffd7 	bl	19318 <console_out_nolock>
   1936a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1936e:	d001      	beq.n	19374 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   19370:	3401      	adds	r4, #1
   19372:	e7f5      	b.n	19360 <console_write+0x8>
    }
}
   19374:	bd70      	pop	{r4, r5, r6, pc}

00019376 <console_blocking_mode>:

void console_blocking_mode(void) {
   19376:	b508      	push	{r3, lr}
    disable_buffer();
   19378:	f7ff ff3c 	bl	191f4 <disable_buffer>
}
   1937c:	bd08      	pop	{r3, pc}
	...

00019380 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   19380:	b510      	push	{r4, lr}
   19382:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   19384:	4b0d      	ldr	r3, [pc, #52]	; (193bc <console_pkg_init+0x3c>)
   19386:	781b      	ldrb	r3, [r3, #0]
   19388:	b193      	cbz	r3, 193b0 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   1938a:	480d      	ldr	r0, [pc, #52]	; (193c0 <console_pkg_init+0x40>)
   1938c:	f001 f9fa 	bl	1a784 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   19390:	480c      	ldr	r0, [pc, #48]	; (193c4 <console_pkg_init+0x44>)
   19392:	f001 fd15 	bl	1adc0 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   19396:	f7ff ffdd 	bl	19354 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   1939a:	b138      	cbz	r0, 193ac <console_pkg_init+0x2c>
   1939c:	2000      	movs	r0, #0
   1939e:	9000      	str	r0, [sp, #0]
   193a0:	4b09      	ldr	r3, [pc, #36]	; (193c8 <console_pkg_init+0x48>)
   193a2:	681c      	ldr	r4, [r3, #0]
   193a4:	4603      	mov	r3, r0
   193a6:	4602      	mov	r2, r0
   193a8:	4601      	mov	r1, r0
   193aa:	47a0      	blx	r4
}
   193ac:	b002      	add	sp, #8
   193ae:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   193b0:	461a      	mov	r2, r3
   193b2:	4619      	mov	r1, r3
   193b4:	4618      	mov	r0, r3
   193b6:	f000 fed1 	bl	1a15c <__assert_func>
   193ba:	bf00      	nop
   193bc:	2000c5bc 	.word	0x2000c5bc
   193c0:	20005708 	.word	0x20005708
   193c4:	20005718 	.word	0x20005718
   193c8:	20000104 	.word	0x20000104

000193cc <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   193cc:	b40f      	push	{r0, r1, r2, r3}
   193ce:	b510      	push	{r4, lr}
   193d0:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   193d2:	f000 f81f 	bl	19414 <console_get_ticks>
   193d6:	b160      	cbz	r0, 193f2 <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   193d8:	4b0c      	ldr	r3, [pc, #48]	; (1940c <console_printf+0x40>)
   193da:	681b      	ldr	r3, [r3, #0]
   193dc:	b10b      	cbz	r3, 193e2 <console_printf+0x16>
    num_chars = 0;
   193de:	2400      	movs	r4, #0
   193e0:	e008      	b.n	193f4 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   193e2:	f002 f8d9 	bl	1b598 <os_time_get>
   193e6:	4601      	mov	r1, r0
   193e8:	4809      	ldr	r0, [pc, #36]	; (19410 <console_printf+0x44>)
   193ea:	f002 fd97 	bl	1bf1c <printf>
   193ee:	4604      	mov	r4, r0
   193f0:	e000      	b.n	193f4 <console_printf+0x28>
    num_chars = 0;
   193f2:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   193f4:	a905      	add	r1, sp, #20
   193f6:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   193f8:	9804      	ldr	r0, [sp, #16]
   193fa:	f002 fdbf 	bl	1bf7c <vprintf>
    va_end(args);

    return num_chars;
}
   193fe:	4420      	add	r0, r4
   19400:	b002      	add	sp, #8
   19402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19406:	b004      	add	sp, #16
   19408:	4770      	bx	lr
   1940a:	bf00      	nop
   1940c:	2000c5b8 	.word	0x2000c5b8
   19410:	00021a68 	.word	0x00021a68

00019414 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   19414:	4b01      	ldr	r3, [pc, #4]	; (1941c <console_get_ticks+0x8>)
   19416:	7818      	ldrb	r0, [r3, #0]
   19418:	4770      	bx	lr
   1941a:	bf00      	nop
   1941c:	20005724 	.word	0x20005724

00019420 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   19420:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   19422:	f000 fe9b 	bl	1a15c <__assert_func>
	...

00019428 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   19428:	4b01      	ldr	r3, [pc, #4]	; (19430 <sysinit_start+0x8>)
   1942a:	2201      	movs	r2, #1
   1942c:	701a      	strb	r2, [r3, #0]
}
   1942e:	4770      	bx	lr
   19430:	2000c5bc 	.word	0x2000c5bc

00019434 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   19434:	4b01      	ldr	r3, [pc, #4]	; (1943c <sysinit_end+0x8>)
   19436:	2200      	movs	r2, #0
   19438:	701a      	strb	r2, [r3, #0]
}
   1943a:	4770      	bx	lr
   1943c:	2000c5bc 	.word	0x2000c5bc

00019440 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   19440:	4a09      	ldr	r2, [pc, #36]	; (19468 <NVIC_Relocate+0x28>)
   19442:	4b0a      	ldr	r3, [pc, #40]	; (1946c <NVIC_Relocate+0x2c>)
   19444:	429a      	cmp	r2, r3
   19446:	d00a      	beq.n	1945e <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   19448:	2300      	movs	r3, #0
   1944a:	e006      	b.n	1945a <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   1944c:	4a07      	ldr	r2, [pc, #28]	; (1946c <NVIC_Relocate+0x2c>)
   1944e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   19452:	4a05      	ldr	r2, [pc, #20]	; (19468 <NVIC_Relocate+0x28>)
   19454:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   19458:	3301      	adds	r3, #1
   1945a:	2b35      	cmp	r3, #53	; 0x35
   1945c:	ddf6      	ble.n	1944c <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   1945e:	4a02      	ldr	r2, [pc, #8]	; (19468 <NVIC_Relocate+0x28>)
   19460:	4b03      	ldr	r3, [pc, #12]	; (19470 <NVIC_Relocate+0x30>)
   19462:	609a      	str	r2, [r3, #8]
#endif
}
   19464:	4770      	bx	lr
   19466:	bf00      	nop
   19468:	20000000 	.word	0x20000000
   1946c:	00008020 	.word	0x00008020
   19470:	e000ed00 	.word	0xe000ed00

00019474 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   19474:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   19476:	2400      	movs	r4, #0
   19478:	e000      	b.n	1947c <hal_gpio_irq_handler+0x8>
   1947a:	3401      	adds	r4, #1
   1947c:	2c07      	cmp	r4, #7
   1947e:	dc1c      	bgt.n	194ba <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   19480:	f104 0340 	add.w	r3, r4, #64	; 0x40
   19484:	4a0d      	ldr	r2, [pc, #52]	; (194bc <hal_gpio_irq_handler+0x48>)
   19486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1948a:	2b00      	cmp	r3, #0
   1948c:	d0f5      	beq.n	1947a <hal_gpio_irq_handler+0x6>
   1948e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   19492:	2301      	movs	r3, #1
   19494:	40a3      	lsls	r3, r4
   19496:	421a      	tst	r2, r3
   19498:	d0ef      	beq.n	1947a <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   1949a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1949e:	4a07      	ldr	r2, [pc, #28]	; (194bc <hal_gpio_irq_handler+0x48>)
   194a0:	2100      	movs	r1, #0
   194a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   194a6:	4b06      	ldr	r3, [pc, #24]	; (194c0 <hal_gpio_irq_handler+0x4c>)
   194a8:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   194ac:	2a00      	cmp	r2, #0
   194ae:	d0e4      	beq.n	1947a <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   194b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   194b4:	6858      	ldr	r0, [r3, #4]
   194b6:	4790      	blx	r2
   194b8:	e7df      	b.n	1947a <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   194ba:	bd10      	pop	{r4, pc}
   194bc:	40006000 	.word	0x40006000
   194c0:	20005728 	.word	0x20005728

000194c4 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   194c4:	4b06      	ldr	r3, [pc, #24]	; (194e0 <hal_gpio_irq_setup+0x1c>)
   194c6:	781b      	ldrb	r3, [r3, #0]
   194c8:	b94b      	cbnz	r3, 194de <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   194ca:	4b06      	ldr	r3, [pc, #24]	; (194e4 <hal_gpio_irq_setup+0x20>)
   194cc:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   194ce:	4a06      	ldr	r2, [pc, #24]	; (194e8 <hal_gpio_irq_setup+0x24>)
   194d0:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   194d2:	4b06      	ldr	r3, [pc, #24]	; (194ec <hal_gpio_irq_setup+0x28>)
   194d4:	2240      	movs	r2, #64	; 0x40
   194d6:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   194d8:	4b01      	ldr	r3, [pc, #4]	; (194e0 <hal_gpio_irq_setup+0x1c>)
   194da:	2201      	movs	r2, #1
   194dc:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   194de:	4770      	bx	lr
   194e0:	20005768 	.word	0x20005768
   194e4:	e000ed00 	.word	0xe000ed00
   194e8:	00019475 	.word	0x00019475
   194ec:	e000e100 	.word	0xe000e100

000194f0 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   194f0:	2000      	movs	r0, #0
   194f2:	2807      	cmp	r0, #7
   194f4:	dc05      	bgt.n	19502 <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   194f6:	4b04      	ldr	r3, [pc, #16]	; (19508 <hal_gpio_find_empty_slot+0x18>)
   194f8:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   194fc:	b11b      	cbz	r3, 19506 <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   194fe:	3001      	adds	r0, #1
   19500:	e7f7      	b.n	194f2 <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   19502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19506:	4770      	bx	lr
   19508:	20005728 	.word	0x20005728

0001950c <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   1950c:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   1950e:	2000      	movs	r0, #0
   19510:	e000      	b.n	19514 <hal_gpio_find_pin+0x8>
   19512:	3001      	adds	r0, #1
   19514:	2807      	cmp	r0, #7
   19516:	dc0e      	bgt.n	19536 <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   19518:	4b08      	ldr	r3, [pc, #32]	; (1953c <hal_gpio_find_pin+0x30>)
   1951a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   1951e:	2b00      	cmp	r3, #0
   19520:	d0f7      	beq.n	19512 <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   19522:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   19526:	4a06      	ldr	r2, [pc, #24]	; (19540 <hal_gpio_find_pin+0x34>)
   19528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1952c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   19530:	428b      	cmp	r3, r1
   19532:	d1ee      	bne.n	19512 <hal_gpio_find_pin+0x6>
   19534:	e001      	b.n	1953a <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   19536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1953a:	4770      	bx	lr
   1953c:	20005728 	.word	0x20005728
   19540:	40006000 	.word	0x40006000

00019544 <hal_gpio_init_in>:
    switch (pull) {
   19544:	2901      	cmp	r1, #1
   19546:	d003      	beq.n	19550 <hal_gpio_init_in+0xc>
   19548:	2902      	cmp	r1, #2
   1954a:	d00f      	beq.n	1956c <hal_gpio_init_in+0x28>
        conf = 0;
   1954c:	2100      	movs	r1, #0
        break;
   1954e:	e000      	b.n	19552 <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   19550:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   19552:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19556:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   1955a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   1955e:	2301      	movs	r3, #1
   19560:	fa03 f000 	lsl.w	r0, r3, r0
   19564:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   19568:	2000      	movs	r0, #0
   1956a:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   1956c:	2104      	movs	r1, #4
   1956e:	e7f0      	b.n	19552 <hal_gpio_init_in+0xe>

00019570 <hal_gpio_init_out>:
    if (val) {
   19570:	b999      	cbnz	r1, 1959a <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   19572:	2301      	movs	r3, #1
   19574:	4083      	lsls	r3, r0
   19576:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1957a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   1957e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19582:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   19586:	2103      	movs	r1, #3
   19588:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   1958c:	2301      	movs	r3, #1
   1958e:	fa03 f000 	lsl.w	r0, r3, r0
   19592:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   19596:	2000      	movs	r0, #0
   19598:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   1959a:	2301      	movs	r3, #1
   1959c:	4083      	lsls	r3, r0
   1959e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   195a2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   195a6:	e7ea      	b.n	1957e <hal_gpio_init_out+0xe>

000195a8 <hal_gpio_write>:
    if (val) {
   195a8:	b939      	cbnz	r1, 195ba <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   195aa:	2301      	movs	r3, #1
   195ac:	fa03 f000 	lsl.w	r0, r3, r0
   195b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   195b4:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   195b8:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   195ba:	2301      	movs	r3, #1
   195bc:	fa03 f000 	lsl.w	r0, r3, r0
   195c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   195c4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   195c8:	4770      	bx	lr

000195ca <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   195ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   195ce:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   195d2:	2301      	movs	r3, #1
   195d4:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   195d6:	421a      	tst	r2, r3
   195d8:	d108      	bne.n	195ec <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   195da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   195de:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   195e2:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   195e6:	f000 0001 	and.w	r0, r0, #1
}
   195ea:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   195ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   195f0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   195f4:	fa23 f000 	lsr.w	r0, r3, r0
   195f8:	f000 0001 	and.w	r0, r0, #1
   195fc:	4770      	bx	lr
	...

00019600 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   19600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19604:	4680      	mov	r8, r0
   19606:	460f      	mov	r7, r1
   19608:	4616      	mov	r6, r2
   1960a:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   1960c:	f7ff ff5a 	bl	194c4 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   19610:	f7ff ff6e 	bl	194f0 <hal_gpio_find_empty_slot>
    if (i < 0) {
   19614:	1e05      	subs	r5, r0, #0
   19616:	db27      	blt.n	19668 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   19618:	f89d 1018 	ldrb.w	r1, [sp, #24]
   1961c:	4640      	mov	r0, r8
   1961e:	f7ff ff91 	bl	19544 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   19622:	2c02      	cmp	r4, #2
   19624:	d01d      	beq.n	19662 <hal_gpio_irq_init+0x62>
   19626:	2c03      	cmp	r4, #3
   19628:	d018      	beq.n	1965c <hal_gpio_irq_init+0x5c>
   1962a:	2c01      	cmp	r4, #1
   1962c:	d002      	beq.n	19634 <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   1962e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19632:	e011      	b.n	19658 <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   19634:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   19638:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   1963c:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   19640:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   19644:	4b0a      	ldr	r3, [pc, #40]	; (19670 <hal_gpio_irq_init+0x70>)
   19646:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   1964a:	4b0a      	ldr	r3, [pc, #40]	; (19674 <hal_gpio_irq_init+0x74>)
   1964c:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   19650:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   19654:	605e      	str	r6, [r3, #4]

    return 0;
   19656:	2000      	movs	r0, #0
}
   19658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   1965c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   19660:	e7ea      	b.n	19638 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   19662:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   19666:	e7e7      	b.n	19638 <hal_gpio_irq_init+0x38>
        return -1;
   19668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1966c:	e7f4      	b.n	19658 <hal_gpio_irq_init+0x58>
   1966e:	bf00      	nop
   19670:	40006000 	.word	0x40006000
   19674:	20005728 	.word	0x20005728

00019678 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   19678:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   1967a:	f7ff ff47 	bl	1950c <hal_gpio_find_pin>
    if (i < 0) {
   1967e:	2800      	cmp	r0, #0
   19680:	db0a      	blt.n	19698 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   19682:	4a06      	ldr	r2, [pc, #24]	; (1969c <hal_gpio_irq_enable+0x24>)
   19684:	f100 0340 	add.w	r3, r0, #64	; 0x40
   19688:	2100      	movs	r1, #0
   1968a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   1968e:	2301      	movs	r3, #1
   19690:	fa03 f000 	lsl.w	r0, r3, r0
   19694:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   19698:	bd08      	pop	{r3, pc}
   1969a:	bf00      	nop
   1969c:	40006000 	.word	0x40006000

000196a0 <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   196a0:	3801      	subs	r0, #1
   196a2:	bf00      	nop
   196a4:	bf00      	nop
   196a6:	bf00      	nop
   196a8:	bf00      	nop
   196aa:	bf00      	nop
   196ac:	bf00      	nop
   196ae:	bf00      	nop
   196b0:	bf00      	nop
   196b2:	bf00      	nop
   196b4:	bf00      	nop
   196b6:	bf00      	nop
   196b8:	bf00      	nop
   196ba:	bf00      	nop
   196bc:	bf00      	nop
   196be:	bf00      	nop
   196c0:	bf00      	nop
   196c2:	bf00      	nop
   196c4:	bf00      	nop
   196c6:	bf00      	nop
   196c8:	bf00      	nop
   196ca:	bf00      	nop
   196cc:	bf00      	nop
   196ce:	bf00      	nop
   196d0:	bf00      	nop
   196d2:	bf00      	nop
   196d4:	bf00      	nop
   196d6:	bf00      	nop
   196d8:	bf00      	nop
   196da:	bf00      	nop
   196dc:	bf00      	nop
   196de:	bf00      	nop
   196e0:	bf00      	nop
   196e2:	bf00      	nop
   196e4:	bf00      	nop
   196e6:	bf00      	nop
   196e8:	bf00      	nop
   196ea:	bf00      	nop
   196ec:	bf00      	nop
   196ee:	bf00      	nop
   196f0:	bf00      	nop
   196f2:	bf00      	nop
   196f4:	bf00      	nop
   196f6:	bf00      	nop
   196f8:	bf00      	nop
   196fa:	bf00      	nop
   196fc:	bf00      	nop
   196fe:	bf00      	nop
   19700:	bf00      	nop
   19702:	bf00      	nop
   19704:	bf00      	nop
   19706:	bf00      	nop
   19708:	bf00      	nop
   1970a:	bf00      	nop
   1970c:	bf00      	nop
   1970e:	bf00      	nop
   19710:	bf00      	nop
   19712:	bf00      	nop
   19714:	bf00      	nop
   19716:	d1c3      	bne.n	196a0 <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   19718:	4770      	bx	lr
	...

0001971c <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   1971c:	2801      	cmp	r0, #1
   1971e:	d806      	bhi.n	1972e <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   19720:	4b06      	ldr	r3, [pc, #24]	; (1973c <hal_i2c_resolve+0x20>)
   19722:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   19726:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   19728:	b12b      	cbz	r3, 19736 <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   1972a:	2000      	movs	r0, #0
}
   1972c:	4770      	bx	lr
        *out_i2c = NULL;
   1972e:	2300      	movs	r3, #0
   19730:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   19732:	2002      	movs	r0, #2
   19734:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   19736:	2002      	movs	r0, #2
   19738:	4770      	bx	lr
   1973a:	bf00      	nop
   1973c:	00021a70 	.word	0x00021a70

00019740 <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   19740:	b148      	cbz	r0, 19756 <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   19742:	f010 0f04 	tst.w	r0, #4
   19746:	d107      	bne.n	19758 <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   19748:	f010 0f02 	tst.w	r0, #2
   1974c:	d101      	bne.n	19752 <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   1974e:	2001      	movs	r0, #1
    }
}
   19750:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   19752:	2004      	movs	r0, #4
   19754:	4770      	bx	lr
   19756:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   19758:	2005      	movs	r0, #5
   1975a:	4770      	bx	lr

0001975c <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   1975c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19760:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   19764:	fa23 f000 	lsr.w	r0, r3, r0
}
   19768:	f000 0001 	and.w	r0, r0, #1
   1976c:	4770      	bx	lr

0001976e <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   1976e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19772:	4605      	mov	r5, r0
   19774:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   19776:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1977a:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   1977e:	f240 630c 	movw	r3, #1548	; 0x60c
   19782:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   19786:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   1978a:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   1978e:	2101      	movs	r1, #1
   19790:	f7ff ff0a 	bl	195a8 <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   19794:	2101      	movs	r1, #1
   19796:	4630      	mov	r0, r6
   19798:	f7ff ff06 	bl	195a8 <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   1979c:	f240 630d 	movw	r3, #1549	; 0x60d
   197a0:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   197a4:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   197a8:	2004      	movs	r0, #4
   197aa:	f7ff ff79 	bl	196a0 <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   197ae:	2400      	movs	r4, #0
   197b0:	2c08      	cmp	r4, #8
   197b2:	dc14      	bgt.n	197de <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   197b4:	4630      	mov	r0, r6
   197b6:	f7ff ffd1 	bl	1975c <read_gpio_inbuffer>
   197ba:	b978      	cbnz	r0, 197dc <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   197bc:	2100      	movs	r1, #0
   197be:	4628      	mov	r0, r5
   197c0:	f7ff fef2 	bl	195a8 <hal_gpio_write>
        hal_i2c_delay_us(4);
   197c4:	2004      	movs	r0, #4
   197c6:	f7ff ff6b 	bl	196a0 <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   197ca:	2101      	movs	r1, #1
   197cc:	4628      	mov	r0, r5
   197ce:	f7ff feeb 	bl	195a8 <hal_gpio_write>
        hal_i2c_delay_us(4);
   197d2:	2004      	movs	r0, #4
   197d4:	f7ff ff64 	bl	196a0 <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   197d8:	3401      	adds	r4, #1
   197da:	e7e9      	b.n	197b0 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   197dc:	b154      	cbz	r4, 197f4 <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   197de:	2100      	movs	r1, #0
   197e0:	4630      	mov	r0, r6
   197e2:	f7ff fee1 	bl	195a8 <hal_gpio_write>
    hal_i2c_delay_us(4);
   197e6:	2004      	movs	r0, #4
   197e8:	f7ff ff5a 	bl	196a0 <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   197ec:	2101      	movs	r1, #1
   197ee:	4630      	mov	r0, r6
   197f0:	f7ff feda 	bl	195a8 <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   197f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   197f8:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   197fc:	f240 620c 	movw	r2, #1548	; 0x60c
   19800:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   19804:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   19808:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1980c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019810 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   19810:	b5f0      	push	{r4, r5, r6, r7, lr}
   19812:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   19814:	b1a1      	cbz	r1, 19840 <hal_i2c_init+0x30>
   19816:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   19818:	a901      	add	r1, sp, #4
   1981a:	f7ff ff7f 	bl	1971c <hal_i2c_resolve>
    if (rc != 0) {
   1981e:	4606      	mov	r6, r0
   19820:	bba8      	cbnz	r0, 1988e <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   19822:	9b01      	ldr	r3, [sp, #4]
   19824:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   19826:	68a3      	ldr	r3, [r4, #8]
   19828:	2bfa      	cmp	r3, #250	; 0xfa
   1982a:	d035      	beq.n	19898 <hal_i2c_init+0x88>
   1982c:	d90e      	bls.n	1984c <hal_i2c_init+0x3c>
   1982e:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   19832:	d02f      	beq.n	19894 <hal_i2c_init+0x84>
   19834:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   19838:	d131      	bne.n	1989e <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   1983a:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   1983e:	e009      	b.n	19854 <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   19840:	2300      	movs	r3, #0
   19842:	461a      	mov	r2, r3
   19844:	4619      	mov	r1, r3
   19846:	4618      	mov	r0, r3
   19848:	f000 fc88 	bl	1a15c <__assert_func>
    switch (cfg->i2c_frequency) {
   1984c:	2b64      	cmp	r3, #100	; 0x64
   1984e:	d126      	bne.n	1989e <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   19850:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   19854:	6861      	ldr	r1, [r4, #4]
   19856:	6820      	ldr	r0, [r4, #0]
   19858:	f7ff ff89 	bl	1976e <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   1985c:	6823      	ldr	r3, [r4, #0]
   1985e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19862:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19866:	f240 610c 	movw	r1, #1548	; 0x60c
   1986a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   1986e:	6863      	ldr	r3, [r4, #4]
   19870:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19874:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   19878:	6823      	ldr	r3, [r4, #0]
   1987a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   1987e:	6863      	ldr	r3, [r4, #4]
   19880:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   19884:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   19888:	2305      	movs	r3, #5
   1988a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   1988e:	4630      	mov	r0, r6
   19890:	b003      	add	sp, #12
   19892:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   19894:	4f03      	ldr	r7, [pc, #12]	; (198a4 <hal_i2c_init+0x94>)
        break;
   19896:	e7dd      	b.n	19854 <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   19898:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   1989c:	e7da      	b.n	19854 <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   1989e:	2602      	movs	r6, #2
   198a0:	e7f5      	b.n	1988e <hal_i2c_init+0x7e>
   198a2:	bf00      	nop
   198a4:	06147ae9 	.word	0x06147ae9

000198a8 <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   198a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198ac:	b083      	sub	sp, #12
   198ae:	4688      	mov	r8, r1
   198b0:	4615      	mov	r5, r2
   198b2:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   198b4:	a901      	add	r1, sp, #4
   198b6:	f7ff ff31 	bl	1971c <hal_i2c_resolve>
    if (rc != 0) {
   198ba:	4681      	mov	r9, r0
   198bc:	b118      	cbz	r0, 198c6 <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   198be:	4648      	mov	r0, r9
   198c0:	b003      	add	sp, #12
   198c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   198c6:	9b01      	ldr	r3, [sp, #4]
   198c8:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   198ca:	f898 3000 	ldrb.w	r3, [r8]
   198ce:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   198d2:	2300      	movs	r3, #0
   198d4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   198d8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   198dc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   198e0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   198e4:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   198e8:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   198ec:	2300      	movs	r3, #0
   198ee:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   198f2:	2301      	movs	r3, #1
   198f4:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   198f6:	f000 fe61 	bl	1a5bc <os_cputime_get32>
   198fa:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   198fe:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19902:	f7ff fe62 	bl	195ca <hal_gpio_read>
   19906:	b1b0      	cbz	r0, 19936 <hal_i2c_master_write+0x8e>
   19908:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1990c:	b99b      	cbnz	r3, 19936 <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   1990e:	f000 fe55 	bl	1a5bc <os_cputime_get32>
   19912:	1b80      	subs	r0, r0, r6
   19914:	2800      	cmp	r0, #0
   19916:	dbf2      	blt.n	198fe <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   19918:	2300      	movs	r3, #0
   1991a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1991e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19922:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   19926:	f7ff ff22 	bl	1976e <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1992a:	2305      	movs	r3, #5
   1992c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   19930:	f1bb 0b01 	subs.w	fp, fp, #1
   19934:	d1da      	bne.n	198ec <hal_i2c_master_write+0x44>
    start = os_time_get();
   19936:	f001 fe2f 	bl	1b598 <os_time_get>
   1993a:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   1993c:	464f      	mov	r7, r9
   1993e:	e003      	b.n	19948 <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   19940:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19944:	b9db      	cbnz	r3, 1997e <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   19946:	3701      	adds	r7, #1
   19948:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   1994c:	42bb      	cmp	r3, r7
   1994e:	dd24      	ble.n	1999a <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   19950:	2300      	movs	r3, #0
   19952:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   19956:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1995a:	5ddb      	ldrb	r3, [r3, r7]
   1995c:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   19960:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   19964:	2b00      	cmp	r3, #0
   19966:	d1eb      	bne.n	19940 <hal_i2c_master_write+0x98>
   19968:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1996c:	2b00      	cmp	r3, #0
   1996e:	d1e7      	bne.n	19940 <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   19970:	f001 fe12 	bl	1b598 <os_time_get>
   19974:	1b80      	subs	r0, r0, r6
   19976:	42a8      	cmp	r0, r5
   19978:	d9f2      	bls.n	19960 <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   1997a:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   1997e:	2301      	movs	r3, #1
   19980:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   19982:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19986:	2b00      	cmp	r3, #0
   19988:	d099      	beq.n	198be <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   1998a:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   1998e:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   19992:	f7ff fed5 	bl	19740 <hal_i2c_convert_status>
   19996:	4681      	mov	r9, r0
   19998:	e791      	b.n	198be <hal_i2c_master_write+0x16>
    if (last_op) {
   1999a:	f1ba 0f00 	cmp.w	sl, #0
   1999e:	d08e      	beq.n	198be <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   199a0:	2300      	movs	r3, #0
   199a2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   199a6:	2301      	movs	r3, #1
   199a8:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   199aa:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   199ae:	b953      	cbnz	r3, 199c6 <hal_i2c_master_write+0x11e>
   199b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199b4:	b93b      	cbnz	r3, 199c6 <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   199b6:	f001 fdef 	bl	1b598 <os_time_get>
   199ba:	1b80      	subs	r0, r0, r6
   199bc:	42a8      	cmp	r0, r5
   199be:	d9f4      	bls.n	199aa <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   199c0:	f04f 0903 	mov.w	r9, #3
   199c4:	e7db      	b.n	1997e <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   199c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199ca:	2b00      	cmp	r3, #0
   199cc:	d1d7      	bne.n	1997e <hal_i2c_master_write+0xd6>
   199ce:	e776      	b.n	198be <hal_i2c_master_write+0x16>

000199d0 <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   199d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199d4:	b085      	sub	sp, #20
   199d6:	460f      	mov	r7, r1
   199d8:	4615      	mov	r5, r2
   199da:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   199dc:	a903      	add	r1, sp, #12
   199de:	f7ff fe9d 	bl	1971c <hal_i2c_resolve>
    if (rc != 0) {
   199e2:	4681      	mov	r9, r0
   199e4:	b118      	cbz	r0, 199ee <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   199e6:	4648      	mov	r0, r9
   199e8:	b005      	add	sp, #20
   199ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   199ee:	9b03      	ldr	r3, [sp, #12]
   199f0:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   199f2:	f001 fdd1 	bl	1b598 <os_time_get>
   199f6:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   199f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   199fc:	b11b      	cbz	r3, 19a06 <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   199fe:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   19a02:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   19a06:	2300      	movs	r3, #0
   19a08:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   19a0c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   19a10:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   19a14:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   19a18:	783b      	ldrb	r3, [r7, #0]
   19a1a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   19a1e:	887b      	ldrh	r3, [r7, #2]
   19a20:	2b01      	cmp	r3, #1
   19a22:	d02e      	beq.n	19a82 <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   19a24:	2301      	movs	r3, #1
   19a26:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   19a2a:	46a2      	mov	sl, r4
    int retry = 2;
   19a2c:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   19a30:	2300      	movs	r3, #0
   19a32:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   19a36:	2301      	movs	r3, #1
   19a38:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   19a3c:	f000 fdbe 	bl	1a5bc <os_cputime_get32>
   19a40:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   19a44:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19a48:	f7ff fdbf 	bl	195ca <hal_gpio_read>
   19a4c:	b1b8      	cbz	r0, 19a7e <hal_i2c_master_read+0xae>
   19a4e:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   19a52:	b9a3      	cbnz	r3, 19a7e <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   19a54:	f000 fdb2 	bl	1a5bc <os_cputime_get32>
   19a58:	eba0 0008 	sub.w	r0, r0, r8
   19a5c:	2800      	cmp	r0, #0
   19a5e:	dbf1      	blt.n	19a44 <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   19a60:	2300      	movs	r3, #0
   19a62:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   19a66:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19a6a:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   19a6e:	f7ff fe7e 	bl	1976e <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   19a72:	2305      	movs	r3, #5
   19a74:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   19a78:	f1bb 0b01 	subs.w	fp, fp, #1
   19a7c:	d1d8      	bne.n	19a30 <hal_i2c_master_read+0x60>
    int retry = 2;
   19a7e:	46c8      	mov	r8, r9
   19a80:	e017      	b.n	19ab2 <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   19a82:	9b01      	ldr	r3, [sp, #4]
   19a84:	2b00      	cmp	r3, #0
   19a86:	d0cd      	beq.n	19a24 <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   19a88:	2302      	movs	r3, #2
   19a8a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   19a8e:	e7cc      	b.n	19a2a <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   19a90:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a94:	bb0b      	cbnz	r3, 19ada <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   19a96:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   19a9a:	687b      	ldr	r3, [r7, #4]
   19a9c:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   19aa0:	887b      	ldrh	r3, [r7, #2]
   19aa2:	3b02      	subs	r3, #2
   19aa4:	4543      	cmp	r3, r8
   19aa6:	d02a      	beq.n	19afe <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   19aa8:	2300      	movs	r3, #0
   19aaa:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   19aae:	f108 0801 	add.w	r8, r8, #1
   19ab2:	887b      	ldrh	r3, [r7, #2]
   19ab4:	4543      	cmp	r3, r8
   19ab6:	dd96      	ble.n	199e6 <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   19ab8:	2301      	movs	r3, #1
   19aba:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   19abc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19ac0:	2b00      	cmp	r3, #0
   19ac2:	d1e5      	bne.n	19a90 <hal_i2c_master_read+0xc0>
   19ac4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ac8:	2b00      	cmp	r3, #0
   19aca:	d1e1      	bne.n	19a90 <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   19acc:	f001 fd64 	bl	1b598 <os_time_get>
   19ad0:	1b80      	subs	r0, r0, r6
   19ad2:	42a8      	cmp	r0, r5
   19ad4:	d9f2      	bls.n	19abc <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   19ad6:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   19ada:	2301      	movs	r3, #1
   19adc:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   19ade:	2300      	movs	r3, #0
   19ae0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   19ae4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ae8:	2b00      	cmp	r3, #0
   19aea:	f43f af7c 	beq.w	199e6 <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   19aee:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   19af2:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   19af6:	f7ff fe23 	bl	19740 <hal_i2c_convert_status>
   19afa:	4681      	mov	r9, r0
   19afc:	e773      	b.n	199e6 <hal_i2c_master_read+0x16>
            if (last_op) {
   19afe:	9b01      	ldr	r3, [sp, #4]
   19b00:	2b00      	cmp	r3, #0
   19b02:	d0d1      	beq.n	19aa8 <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   19b04:	2302      	movs	r3, #2
   19b06:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   19b0a:	e7cd      	b.n	19aa8 <hal_i2c_master_read+0xd8>

00019b0c <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   19b0c:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   19b0e:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   19b10:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   19b14:	b32b      	cbz	r3, 19b62 <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   19b16:	2300      	movs	r3, #0
   19b18:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   19b1c:	7843      	ldrb	r3, [r0, #1]
   19b1e:	b303      	cbz	r3, 19b62 <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   19b20:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   19b24:	88c3      	ldrh	r3, [r0, #6]
   19b26:	fa13 f382 	uxtah	r3, r3, r2
   19b2a:	b29b      	uxth	r3, r3
   19b2c:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   19b2e:	8881      	ldrh	r1, [r0, #4]
   19b30:	428b      	cmp	r3, r1
   19b32:	d217      	bcs.n	19b64 <nrf52_irqm_handler+0x58>
   19b34:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   19b36:	6984      	ldr	r4, [r0, #24]
   19b38:	4414      	add	r4, r2
   19b3a:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   19b3c:	1acb      	subs	r3, r1, r3
   19b3e:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   19b40:	2bff      	cmp	r3, #255	; 0xff
   19b42:	bf28      	it	cs
   19b44:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   19b46:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   19b4a:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   19b4e:	69c1      	ldr	r1, [r0, #28]
   19b50:	b129      	cbz	r1, 19b5e <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   19b52:	440a      	add	r2, r1
   19b54:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   19b56:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   19b5a:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   19b5e:	2301      	movs	r3, #1
   19b60:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   19b62:	bd38      	pop	{r3, r4, r5, pc}
   19b64:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   19b66:	6a03      	ldr	r3, [r0, #32]
   19b68:	b10b      	cbz	r3, 19b6e <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   19b6a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   19b6c:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   19b6e:	2300      	movs	r3, #0
   19b70:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   19b72:	2340      	movs	r3, #64	; 0x40
   19b74:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   19b78:	e7f3      	b.n	19b62 <nrf52_irqm_handler+0x56>
	...

00019b7c <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   19b7c:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   19b7e:	4b04      	ldr	r3, [pc, #16]	; (19b90 <nrf52_spi0_irq_handler+0x14>)
   19b80:	781b      	ldrb	r3, [r3, #0]
   19b82:	b103      	cbz	r3, 19b86 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   19b84:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   19b86:	4802      	ldr	r0, [pc, #8]	; (19b90 <nrf52_spi0_irq_handler+0x14>)
   19b88:	f7ff ffc0 	bl	19b0c <nrf52_irqm_handler>
}
   19b8c:	e7fa      	b.n	19b84 <nrf52_spi0_irq_handler+0x8>
   19b8e:	bf00      	nop
   19b90:	2000c5c0 	.word	0x2000c5c0

00019b94 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   19b94:	2301      	movs	r3, #1
   19b96:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   19b98:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   19b9c:	2b00      	cmp	r3, #0
   19b9e:	d0fb      	beq.n	19b98 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   19ba0:	2300      	movs	r3, #0
   19ba2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   19ba6:	4770      	bx	lr

00019ba8 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   19ba8:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   19baa:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   19bac:	780b      	ldrb	r3, [r1, #0]
   19bae:	2b03      	cmp	r3, #3
   19bb0:	d80c      	bhi.n	19bcc <hal_spi_config_slave+0x24>
   19bb2:	e8df f003 	tbb	[pc, r3]
   19bb6:	0e02      	.short	0x0e02
   19bb8:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   19bba:	2300      	movs	r3, #0
    rc = 0;
   19bbc:	4618      	mov	r0, r3
   19bbe:	e00a      	b.n	19bd6 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   19bc0:	2304      	movs	r3, #4
    rc = 0;
   19bc2:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   19bc4:	e007      	b.n	19bd6 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   19bc6:	2306      	movs	r3, #6
    rc = 0;
   19bc8:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   19bca:	e004      	b.n	19bd6 <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   19bcc:	2300      	movs	r3, #0
            rc = EINVAL;
   19bce:	2016      	movs	r0, #22
            break;
   19bd0:	e001      	b.n	19bd6 <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   19bd2:	2302      	movs	r3, #2
    rc = 0;
   19bd4:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   19bd6:	784c      	ldrb	r4, [r1, #1]
   19bd8:	2c01      	cmp	r4, #1
   19bda:	d006      	beq.n	19bea <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   19bdc:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   19be0:	788b      	ldrb	r3, [r1, #2]
   19be2:	b92b      	cbnz	r3, 19bf0 <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   19be4:	f85d 4b04 	ldr.w	r4, [sp], #4
   19be8:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   19bea:	f043 0301 	orr.w	r3, r3, #1
   19bee:	e7f5      	b.n	19bdc <hal_spi_config_slave+0x34>
            rc = EINVAL;
   19bf0:	2016      	movs	r0, #22
    return rc;
   19bf2:	e7f7      	b.n	19be4 <hal_spi_config_slave+0x3c>

00019bf4 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   19bf4:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   19bf6:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   19bf8:	2501      	movs	r5, #1
   19bfa:	409d      	lsls	r5, r3
   19bfc:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   19c00:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   19c04:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19c08:	2503      	movs	r5, #3
   19c0a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   19c0e:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   19c10:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19c14:	2500      	movs	r5, #0
   19c16:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   19c1a:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   19c1c:	780c      	ldrb	r4, [r1, #0]
   19c1e:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   19c22:	784c      	ldrb	r4, [r1, #1]
   19c24:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   19c28:	7889      	ldrb	r1, [r1, #2]
   19c2a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   19c2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19c32:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   19c36:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   19c3a:	4919      	ldr	r1, [pc, #100]	; (19ca0 <hal_spi_init_master+0xac>)
   19c3c:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19c3e:	3310      	adds	r3, #16
   19c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   19c44:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   19c48:	42ab      	cmp	r3, r5
   19c4a:	db22      	blt.n	19c92 <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19c4c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   19c50:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   19c54:	22e0      	movs	r2, #224	; 0xe0
   19c56:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   19c5a:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   19c5e:	2b00      	cmp	r3, #0
   19c60:	db08      	blt.n	19c74 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19c62:	f003 011f 	and.w	r1, r3, #31
   19c66:	095b      	lsrs	r3, r3, #5
   19c68:	2201      	movs	r2, #1
   19c6a:	408a      	lsls	r2, r1
   19c6c:	3360      	adds	r3, #96	; 0x60
   19c6e:	490d      	ldr	r1, [pc, #52]	; (19ca4 <hal_spi_init_master+0xb0>)
   19c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   19c74:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   19c78:	2b00      	cmp	r3, #0
   19c7a:	db07      	blt.n	19c8c <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19c7c:	f003 011f 	and.w	r1, r3, #31
   19c80:	095b      	lsrs	r3, r3, #5
   19c82:	2201      	movs	r2, #1
   19c84:	408a      	lsls	r2, r1
   19c86:	4907      	ldr	r1, [pc, #28]	; (19ca4 <hal_spi_init_master+0xb0>)
   19c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   19c8c:	2000      	movs	r0, #0
   19c8e:	bc30      	pop	{r4, r5}
   19c90:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19c92:	f003 030f 	and.w	r3, r3, #15
   19c96:	4a04      	ldr	r2, [pc, #16]	; (19ca8 <hal_spi_init_master+0xb4>)
   19c98:	441a      	add	r2, r3
   19c9a:	23e0      	movs	r3, #224	; 0xe0
   19c9c:	7613      	strb	r3, [r2, #24]
   19c9e:	e7dc      	b.n	19c5a <hal_spi_init_master+0x66>
   19ca0:	e000ed00 	.word	0xe000ed00
   19ca4:	e000e100 	.word	0xe000e100
   19ca8:	e000ecfc 	.word	0xe000ecfc

00019cac <hal_spi_config_master>:
{
   19cac:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   19cae:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   19cb0:	680c      	ldr	r4, [r1, #0]
   19cb2:	684b      	ldr	r3, [r1, #4]
   19cb4:	6084      	str	r4, [r0, #8]
   19cb6:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   19cb8:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   19cbc:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   19cc0:	7808      	ldrb	r0, [r1, #0]
   19cc2:	2801      	cmp	r0, #1
   19cc4:	d916      	bls.n	19cf4 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   19cc6:	2001      	movs	r0, #1
   19cc8:	4098      	lsls	r0, r3
   19cca:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   19cce:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   19cd2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19cd6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   19cda:	2403      	movs	r4, #3
   19cdc:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   19ce0:	788b      	ldrb	r3, [r1, #2]
   19ce2:	b973      	cbnz	r3, 19d02 <hal_spi_config_master+0x56>
    rc = 0;
   19ce4:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   19ce6:	780b      	ldrb	r3, [r1, #0]
   19ce8:	2b03      	cmp	r3, #3
   19cea:	d812      	bhi.n	19d12 <hal_spi_config_master+0x66>
   19cec:	e8df f003 	tbb	[pc, r3]
   19cf0:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   19cf4:	2001      	movs	r0, #1
   19cf6:	4098      	lsls	r0, r3
   19cf8:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   19cfc:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   19d00:	e7e7      	b.n	19cd2 <hal_spi_config_master+0x26>
            rc = EINVAL;
   19d02:	2016      	movs	r0, #22
   19d04:	e7ef      	b.n	19ce6 <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   19d06:	2300      	movs	r3, #0
   19d08:	e007      	b.n	19d1a <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   19d0a:	2304      	movs	r3, #4
            break;
   19d0c:	e005      	b.n	19d1a <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   19d0e:	2306      	movs	r3, #6
            break;
   19d10:	e003      	b.n	19d1a <hal_spi_config_master+0x6e>
            nrf_config = 0;
   19d12:	2300      	movs	r3, #0
            rc = EINVAL;
   19d14:	2016      	movs	r0, #22
            break;
   19d16:	e000      	b.n	19d1a <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   19d18:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   19d1a:	784c      	ldrb	r4, [r1, #1]
   19d1c:	2c01      	cmp	r4, #1
   19d1e:	d010      	beq.n	19d42 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   19d20:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   19d24:	684b      	ldr	r3, [r1, #4]
   19d26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   19d2a:	d023      	beq.n	19d74 <hal_spi_config_master+0xc8>
   19d2c:	d80c      	bhi.n	19d48 <hal_spi_config_master+0x9c>
   19d2e:	2bfa      	cmp	r3, #250	; 0xfa
   19d30:	d029      	beq.n	19d86 <hal_spi_config_master+0xda>
   19d32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   19d36:	d01a      	beq.n	19d6e <hal_spi_config_master+0xc2>
   19d38:	2b7d      	cmp	r3, #125	; 0x7d
   19d3a:	d011      	beq.n	19d60 <hal_spi_config_master+0xb4>
            frequency = 0;
   19d3c:	2300      	movs	r3, #0
            rc = EINVAL;
   19d3e:	2016      	movs	r0, #22
            break;
   19d40:	e010      	b.n	19d64 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   19d42:	f043 0301 	orr.w	r3, r3, #1
   19d46:	e7eb      	b.n	19d20 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   19d48:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   19d4c:	d015      	beq.n	19d7a <hal_spi_config_master+0xce>
   19d4e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   19d52:	d015      	beq.n	19d80 <hal_spi_config_master+0xd4>
   19d54:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   19d58:	d1f0      	bne.n	19d3c <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   19d5a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   19d5e:	e001      	b.n	19d64 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   19d60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   19d64:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   19d68:	f85d 4b04 	ldr.w	r4, [sp], #4
   19d6c:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   19d6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   19d72:	e7f7      	b.n	19d64 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   19d74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   19d78:	e7f4      	b.n	19d64 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   19d7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   19d7e:	e7f1      	b.n	19d64 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   19d80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   19d84:	e7ee      	b.n	19d64 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   19d86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   19d8a:	e7eb      	b.n	19d64 <hal_spi_config_master+0xb8>

00019d8c <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19d8c:	2802      	cmp	r0, #2
   19d8e:	dc10      	bgt.n	19db2 <hal_spi_config+0x26>
{
   19d90:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19d92:	4b0b      	ldr	r3, [pc, #44]	; (19dc0 <hal_spi_config+0x34>)
   19d94:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   19d98:	b168      	cbz	r0, 19db6 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   19d9a:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   19d9c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   19da0:	b95b      	cbnz	r3, 19dba <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   19da2:	7803      	ldrb	r3, [r0, #0]
   19da4:	b113      	cbz	r3, 19dac <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   19da6:	f7ff feff 	bl	19ba8 <hal_spi_config_slave>
    }

err:
    return (rc);
}
   19daa:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   19dac:	f7ff ff7e 	bl	19cac <hal_spi_config_master>
   19db0:	e7fb      	b.n	19daa <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19db2:	2016      	movs	r0, #22
}
   19db4:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19db6:	2016      	movs	r0, #22
   19db8:	e7f7      	b.n	19daa <hal_spi_config+0x1e>
        return -1;
   19dba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19dbe:	e7f4      	b.n	19daa <hal_spi_config+0x1e>
   19dc0:	00021a78 	.word	0x00021a78

00019dc4 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19dc4:	2802      	cmp	r0, #2
   19dc6:	dc1b      	bgt.n	19e00 <hal_spi_enable+0x3c>
   19dc8:	4b10      	ldr	r3, [pc, #64]	; (19e0c <hal_spi_enable+0x48>)
   19dca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   19dce:	b1cb      	cbz	r3, 19e04 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   19dd0:	781a      	ldrb	r2, [r3, #0]
   19dd2:	b17a      	cbz	r2, 19df4 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   19dd4:	6a1a      	ldr	r2, [r3, #32]
   19dd6:	b1ba      	cbz	r2, 19e08 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   19dd8:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   19dda:	2000      	movs	r0, #0
   19ddc:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   19de0:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   19de4:	f240 4202 	movw	r2, #1026	; 0x402
   19de8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   19dec:	2202      	movs	r2, #2
   19dee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   19df2:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   19df4:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   19df6:	2201      	movs	r2, #1
   19df8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   19dfc:	2000      	movs	r0, #0
   19dfe:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19e00:	2016      	movs	r0, #22
   19e02:	4770      	bx	lr
   19e04:	2016      	movs	r0, #22
   19e06:	4770      	bx	lr
            rc = EINVAL;
   19e08:	2016      	movs	r0, #22

err:
    return rc;
}
   19e0a:	4770      	bx	lr
   19e0c:	00021a78 	.word	0x00021a78

00019e10 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19e10:	2802      	cmp	r0, #2
   19e12:	dc2a      	bgt.n	19e6a <hal_spi_disable+0x5a>
{
   19e14:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19e16:	4b17      	ldr	r3, [pc, #92]	; (19e74 <hal_spi_disable+0x64>)
   19e18:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   19e1c:	b33c      	cbz	r4, 19e6e <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   19e1e:	7823      	ldrb	r3, [r4, #0]
   19e20:	b9ab      	cbnz	r3, 19e4e <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   19e22:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   19e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19e28:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   19e2c:	7863      	ldrb	r3, [r4, #1]
   19e2e:	b943      	cbnz	r3, 19e42 <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   19e30:	2300      	movs	r3, #0
   19e32:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   19e36:	2000      	movs	r0, #0
   19e38:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   19e3a:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   19e3c:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   19e3e:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   19e40:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   19e42:	4628      	mov	r0, r5
   19e44:	f7ff fea6 	bl	19b94 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   19e48:	2300      	movs	r3, #0
   19e4a:	7063      	strb	r3, [r4, #1]
   19e4c:	e7f0      	b.n	19e30 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   19e4e:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   19e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19e54:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   19e58:	2300      	movs	r3, #0
   19e5a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   19e5e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   19e62:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   19e66:	70e3      	strb	r3, [r4, #3]
   19e68:	e7e5      	b.n	19e36 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19e6a:	2016      	movs	r0, #22
}
   19e6c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19e6e:	2016      	movs	r0, #22
    return rc;
   19e70:	e7e6      	b.n	19e40 <hal_spi_disable+0x30>
   19e72:	bf00      	nop
   19e74:	00021a78 	.word	0x00021a78

00019e78 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19e78:	2802      	cmp	r0, #2
   19e7a:	dc1d      	bgt.n	19eb8 <hal_spi_init+0x40>
{
   19e7c:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19e7e:	4b13      	ldr	r3, [pc, #76]	; (19ecc <hal_spi_init+0x54>)
   19e80:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   19e84:	b1d4      	cbz	r4, 19ebc <hal_spi_init+0x44>
    if (cfg == NULL) {
   19e86:	b1d9      	cbz	r1, 19ec0 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   19e88:	2a01      	cmp	r2, #1
   19e8a:	d81b      	bhi.n	19ec4 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   19e8c:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   19e8e:	b9d8      	cbnz	r0, 19ec8 <hal_spi_init+0x50>
   19e90:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   19e92:	2303      	movs	r3, #3
   19e94:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   19e96:	b94a      	cbnz	r2, 19eac <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   19e98:	4b0d      	ldr	r3, [pc, #52]	; (19ed0 <hal_spi_init+0x58>)
   19e9a:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   19e9c:	f7ff ffb8 	bl	19e10 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   19ea0:	4a0c      	ldr	r2, [pc, #48]	; (19ed4 <hal_spi_init+0x5c>)
   19ea2:	4629      	mov	r1, r5
   19ea4:	4620      	mov	r0, r4
   19ea6:	f7ff fea5 	bl	19bf4 <hal_spi_init_master>
   19eaa:	e00c      	b.n	19ec6 <hal_spi_init+0x4e>
            assert(0);
   19eac:	2300      	movs	r3, #0
   19eae:	461a      	mov	r2, r3
   19eb0:	4619      	mov	r1, r3
   19eb2:	4618      	mov	r0, r3
   19eb4:	f000 f952 	bl	1a15c <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19eb8:	2016      	movs	r0, #22
}
   19eba:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19ebc:	2016      	movs	r0, #22
   19ebe:	e002      	b.n	19ec6 <hal_spi_init+0x4e>
    rc = EINVAL;
   19ec0:	2016      	movs	r0, #22
   19ec2:	e000      	b.n	19ec6 <hal_spi_init+0x4e>
   19ec4:	2016      	movs	r0, #22
}
   19ec6:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   19ec8:	2016      	movs	r0, #22
    return (rc);
   19eca:	e7fc      	b.n	19ec6 <hal_spi_init+0x4e>
   19ecc:	00021a78 	.word	0x00021a78
   19ed0:	40003000 	.word	0x40003000
   19ed4:	00019b7d 	.word	0x00019b7d

00019ed8 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19ed8:	2802      	cmp	r0, #2
   19eda:	dc0a      	bgt.n	19ef2 <hal_spi_set_txrx_cb+0x1a>
   19edc:	4b08      	ldr	r3, [pc, #32]	; (19f00 <hal_spi_set_txrx_cb+0x28>)
   19ede:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   19ee2:	b143      	cbz	r3, 19ef6 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   19ee4:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   19ee6:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   19eea:	b930      	cbnz	r0, 19efa <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   19eec:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   19eee:	625a      	str	r2, [r3, #36]	; 0x24
   19ef0:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19ef2:	2016      	movs	r0, #22
   19ef4:	4770      	bx	lr
   19ef6:	2016      	movs	r0, #22
   19ef8:	4770      	bx	lr
        rc = -1;
   19efa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   19efe:	4770      	bx	lr
   19f00:	00021a78 	.word	0x00021a78

00019f04 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   19f04:	2b00      	cmp	r3, #0
   19f06:	d046      	beq.n	19f96 <hal_spi_txrx+0x92>
{
   19f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19f0a:	460d      	mov	r5, r1
   19f0c:	4617      	mov	r7, r2
   19f0e:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   19f10:	2802      	cmp	r0, #2
   19f12:	dc42      	bgt.n	19f9a <hal_spi_txrx+0x96>
   19f14:	4b25      	ldr	r3, [pc, #148]	; (19fac <hal_spi_txrx+0xa8>)
   19f16:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   19f1a:	2b00      	cmp	r3, #0
   19f1c:	d03f      	beq.n	19f9e <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   19f1e:	781a      	ldrb	r2, [r3, #0]
   19f20:	2a00      	cmp	r2, #0
   19f22:	d13e      	bne.n	19fa2 <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   19f24:	2900      	cmp	r1, #0
   19f26:	d03e      	beq.n	19fa6 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   19f28:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   19f2a:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   19f2e:	2b07      	cmp	r3, #7
   19f30:	d004      	beq.n	19f3c <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   19f32:	b95b      	cbnz	r3, 19f4c <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   19f34:	2301      	movs	r3, #1
   19f36:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   19f3a:	e007      	b.n	19f4c <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   19f3c:	f7ff ff68 	bl	19e10 <hal_spi_disable>
   19f40:	e7f8      	b.n	19f34 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   19f42:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   19f46:	2300      	movs	r3, #0
   19f48:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   19f4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19f50:	2b00      	cmp	r3, #0
   19f52:	d1f6      	bne.n	19f42 <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   19f54:	782b      	ldrb	r3, [r5, #0]
   19f56:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   19f5a:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   19f5c:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   19f5e:	2200      	movs	r2, #0
   19f60:	e00d      	b.n	19f7e <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   19f62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19f66:	2b00      	cmp	r3, #0
   19f68:	d0fb      	beq.n	19f62 <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   19f6a:	2300      	movs	r3, #0
   19f6c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   19f70:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   19f74:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   19f76:	b10f      	cbz	r7, 19f7c <hal_spi_txrx+0x78>
                *rxd = rxval;
   19f78:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   19f7c:	3201      	adds	r2, #1
   19f7e:	42b2      	cmp	r2, r6
   19f80:	da07      	bge.n	19f92 <hal_spi_txrx+0x8e>
            if (txcnt) {
   19f82:	2900      	cmp	r1, #0
   19f84:	d0ed      	beq.n	19f62 <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   19f86:	786b      	ldrb	r3, [r5, #1]
   19f88:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   19f8c:	3901      	subs	r1, #1
                ++txd;
   19f8e:	3501      	adds	r5, #1
   19f90:	e7e7      	b.n	19f62 <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   19f92:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   19f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   19f96:	2016      	movs	r0, #22
}
   19f98:	4770      	bx	lr
    return rc;
   19f9a:	2016      	movs	r0, #22
   19f9c:	e7fa      	b.n	19f94 <hal_spi_txrx+0x90>
   19f9e:	2016      	movs	r0, #22
   19fa0:	e7f8      	b.n	19f94 <hal_spi_txrx+0x90>
   19fa2:	2016      	movs	r0, #22
   19fa4:	e7f6      	b.n	19f94 <hal_spi_txrx+0x90>
   19fa6:	2016      	movs	r0, #22
   19fa8:	e7f4      	b.n	19f94 <hal_spi_txrx+0x90>
   19faa:	bf00      	nop
   19fac:	00021a78 	.word	0x00021a78

00019fb0 <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19fb0:	2802      	cmp	r0, #2
   19fb2:	dc57      	bgt.n	1a064 <hal_spi_txrx_noblock+0xb4>
{
   19fb4:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19fb6:	4c35      	ldr	r4, [pc, #212]	; (1a08c <hal_spi_txrx_noblock+0xdc>)
   19fb8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   19fbc:	2800      	cmp	r0, #0
   19fbe:	d053      	beq.n	1a068 <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   19fc0:	6a04      	ldr	r4, [r0, #32]
   19fc2:	2c00      	cmp	r4, #0
   19fc4:	d052      	beq.n	1a06c <hal_spi_txrx_noblock+0xbc>
   19fc6:	2b00      	cmp	r3, #0
   19fc8:	d052      	beq.n	1a070 <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   19fca:	7804      	ldrb	r4, [r0, #0]
   19fcc:	2c00      	cmp	r4, #0
   19fce:	d137      	bne.n	1a040 <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   19fd0:	2900      	cmp	r1, #0
   19fd2:	d050      	beq.n	1a076 <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   19fd4:	7844      	ldrb	r4, [r0, #1]
   19fd6:	2c00      	cmp	r4, #0
   19fd8:	d14f      	bne.n	1a07a <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   19fda:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   19fdc:	2540      	movs	r5, #64	; 0x40
   19fde:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   19fe2:	2501      	movs	r5, #1
   19fe4:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   19fe6:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   19fea:	2d07      	cmp	r5, #7
   19fec:	d005      	beq.n	19ffa <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   19fee:	2500      	movs	r5, #0
   19ff0:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   19ff4:	2507      	movs	r5, #7
   19ff6:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   19ffa:	2500      	movs	r5, #0
   19ffc:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   19ffe:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   1a000:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   1a002:	2bff      	cmp	r3, #255	; 0xff
   1a004:	bfa8      	it	ge
   1a006:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   1a008:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   1a00c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   1a010:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   1a012:	b172      	cbz	r2, 1a032 <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   1a014:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   1a018:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   1a01c:	2000      	movs	r0, #0
   1a01e:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   1a022:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   1a026:	2301      	movs	r3, #1
   1a028:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   1a02a:	2340      	movs	r3, #64	; 0x40
   1a02c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1a030:	e01f      	b.n	1a072 <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   1a032:	3002      	adds	r0, #2
   1a034:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   1a038:	2301      	movs	r3, #1
   1a03a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   1a03e:	e7ed      	b.n	1a01c <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1a040:	b161      	cbz	r1, 1a05c <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   1a042:	2bff      	cmp	r3, #255	; 0xff
   1a044:	dc1c      	bgt.n	1a080 <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   1a046:	78c4      	ldrb	r4, [r0, #3]
   1a048:	b9e4      	cbnz	r4, 1a084 <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   1a04a:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   1a04c:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   1a04e:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   1a050:	2301      	movs	r3, #1
   1a052:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   1a054:	6902      	ldr	r2, [r0, #16]
   1a056:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   1a058:	2000      	movs	r0, #0
   1a05a:	e00a      	b.n	1a072 <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1a05c:	2a00      	cmp	r2, #0
   1a05e:	d1f0      	bne.n	1a042 <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   1a060:	2016      	movs	r0, #22
   1a062:	e006      	b.n	1a072 <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a064:	2016      	movs	r0, #22

err:
    return rc;
}
   1a066:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a068:	2016      	movs	r0, #22
   1a06a:	e002      	b.n	1a072 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   1a06c:	2016      	movs	r0, #22
   1a06e:	e000      	b.n	1a072 <hal_spi_txrx_noblock+0xc2>
   1a070:	2016      	movs	r0, #22
}
   1a072:	bc30      	pop	{r4, r5}
   1a074:	4770      	bx	lr
    rc = EINVAL;
   1a076:	2016      	movs	r0, #22
   1a078:	e7fb      	b.n	1a072 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1a07a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a07e:	e7f8      	b.n	1a072 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   1a080:	2016      	movs	r0, #22
   1a082:	e7f6      	b.n	1a072 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1a084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a088:	e7f3      	b.n	1a072 <hal_spi_txrx_noblock+0xc2>
   1a08a:	bf00      	nop
   1a08c:	00021a78 	.word	0x00021a78

0001a090 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   1a090:	b508      	push	{r3, lr}
    assert(0);
   1a092:	2300      	movs	r3, #0
   1a094:	461a      	mov	r2, r3
   1a096:	4619      	mov	r1, r3
   1a098:	4618      	mov	r0, r3
   1a09a:	f000 f85f 	bl	1a15c <__assert_func>
	...

0001a0a0 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   1a0a0:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   1a0a2:	4b06      	ldr	r3, [pc, #24]	; (1a0bc <nrf52_wdt_irq_handler+0x1c>)
   1a0a4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   1a0a8:	f013 0f01 	tst.w	r3, #1
   1a0ac:	d100      	bne.n	1a0b0 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   1a0ae:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   1a0b0:	4b02      	ldr	r3, [pc, #8]	; (1a0bc <nrf52_wdt_irq_handler+0x1c>)
   1a0b2:	2200      	movs	r2, #0
   1a0b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   1a0b8:	f7ff ffea 	bl	1a090 <nrf52_hal_wdt_default_handler>
   1a0bc:	40010000 	.word	0x40010000

0001a0c0 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   1a0c0:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   1a0c2:	4b17      	ldr	r3, [pc, #92]	; (1a120 <hal_watchdog_init+0x60>)
   1a0c4:	2201      	movs	r2, #1
   1a0c6:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   1a0ca:	4b16      	ldr	r3, [pc, #88]	; (1a124 <hal_watchdog_init+0x64>)
   1a0cc:	4298      	cmp	r0, r3
   1a0ce:	d821      	bhi.n	1a114 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   1a0d0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1a0d4:	0153      	lsls	r3, r2, #5
   1a0d6:	4a14      	ldr	r2, [pc, #80]	; (1a128 <hal_watchdog_init+0x68>)
   1a0d8:	fba2 2303 	umull	r2, r3, r2, r3
   1a0dc:	08db      	lsrs	r3, r3, #3
   1a0de:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1a0e2:	4b0f      	ldr	r3, [pc, #60]	; (1a120 <hal_watchdog_init+0x60>)
   1a0e4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a0e8:	4a10      	ldr	r2, [pc, #64]	; (1a12c <hal_watchdog_init+0x6c>)
   1a0ea:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a0ec:	4910      	ldr	r1, [pc, #64]	; (1a130 <hal_watchdog_init+0x70>)
   1a0ee:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a0f2:	4a10      	ldr	r2, [pc, #64]	; (1a134 <hal_watchdog_init+0x74>)
   1a0f4:	21e0      	movs	r1, #224	; 0xe0
   1a0f6:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a0fa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1a0fe:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a102:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   1a104:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   1a108:	f042 0201 	orr.w	r2, r2, #1
   1a10c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   1a110:	2000      	movs	r0, #0
   1a112:	bd08      	pop	{r3, pc}
        assert(0);
   1a114:	2300      	movs	r3, #0
   1a116:	461a      	mov	r2, r3
   1a118:	4619      	mov	r1, r3
   1a11a:	4618      	mov	r0, r3
   1a11c:	f000 f81e 	bl	1a15c <__assert_func>
   1a120:	40010000 	.word	0x40010000
   1a124:	02aaaaaa 	.word	0x02aaaaaa
   1a128:	10624dd3 	.word	0x10624dd3
   1a12c:	e000ed00 	.word	0xe000ed00
   1a130:	0001a0a1 	.word	0x0001a0a1
   1a134:	e000e100 	.word	0xe000e100

0001a138 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   1a138:	4b02      	ldr	r3, [pc, #8]	; (1a144 <hal_watchdog_enable+0xc>)
   1a13a:	2201      	movs	r2, #1
   1a13c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   1a140:	601a      	str	r2, [r3, #0]
}
   1a142:	4770      	bx	lr
   1a144:	40010000 	.word	0x40010000

0001a148 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   1a148:	4b02      	ldr	r3, [pc, #8]	; (1a154 <hal_watchdog_tickle+0xc>)
   1a14a:	4a03      	ldr	r2, [pc, #12]	; (1a158 <hal_watchdog_tickle+0x10>)
   1a14c:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   1a150:	4770      	bx	lr
   1a152:	bf00      	nop
   1a154:	40010000 	.word	0x40010000
   1a158:	6e524635 	.word	0x6e524635

0001a15c <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   1a15c:	b508      	push	{r3, lr}
   1a15e:	4675      	mov	r5, lr
   1a160:	4604      	mov	r4, r0
   1a162:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   1a164:	f001 fa90 	bl	1b688 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   1a168:	f7ff f905 	bl	19376 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   1a16c:	b18c      	cbz	r4, 1a192 <__assert_func+0x36>
   1a16e:	4633      	mov	r3, r6
   1a170:	4622      	mov	r2, r4
   1a172:	4629      	mov	r1, r5
   1a174:	4809      	ldr	r0, [pc, #36]	; (1a19c <__assert_func+0x40>)
   1a176:	f7ff f929 	bl	193cc <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   1a17a:	f7ee f803 	bl	8184 <hal_debugger_connected>
   1a17e:	b100      	cbz	r0, 1a182 <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   1a180:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   1a182:	4b07      	ldr	r3, [pc, #28]	; (1a1a0 <__assert_func+0x44>)
   1a184:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1a188:	605a      	str	r2, [r3, #4]
    asm("isb");
   1a18a:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   1a18e:	f7ee f801 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   1a192:	4629      	mov	r1, r5
   1a194:	4803      	ldr	r0, [pc, #12]	; (1a1a4 <__assert_func+0x48>)
   1a196:	f7ff f919 	bl	193cc <console_printf>
   1a19a:	e7ee      	b.n	1a17a <__assert_func+0x1e>
   1a19c:	00021a94 	.word	0x00021a94
   1a1a0:	e000ed00 	.word	0xe000ed00
   1a1a4:	00021a84 	.word	0x00021a84

0001a1a8 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   1a1a8:	b500      	push	{lr}
   1a1aa:	b083      	sub	sp, #12
   1a1ac:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   1a1ae:	f7ff f8e2 	bl	19376 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   1a1b2:	4d1b      	ldr	r5, [pc, #108]	; (1a220 <os_default_irq+0x78>)
   1a1b4:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   1a1b6:	6822      	ldr	r2, [r4, #0]
   1a1b8:	f3c1 0108 	ubfx	r1, r1, #0, #9
   1a1bc:	4819      	ldr	r0, [pc, #100]	; (1a224 <os_default_irq+0x7c>)
   1a1be:	f7ff f905 	bl	193cc <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   1a1c2:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   1a1c4:	6883      	ldr	r3, [r0, #8]
   1a1c6:	6842      	ldr	r2, [r0, #4]
   1a1c8:	6801      	ldr	r1, [r0, #0]
   1a1ca:	68c0      	ldr	r0, [r0, #12]
   1a1cc:	9000      	str	r0, [sp, #0]
   1a1ce:	4816      	ldr	r0, [pc, #88]	; (1a228 <os_default_irq+0x80>)
   1a1d0:	f7ff f8fc 	bl	193cc <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   1a1d4:	6923      	ldr	r3, [r4, #16]
   1a1d6:	9300      	str	r3, [sp, #0]
   1a1d8:	68e3      	ldr	r3, [r4, #12]
   1a1da:	68a2      	ldr	r2, [r4, #8]
   1a1dc:	6861      	ldr	r1, [r4, #4]
   1a1de:	4813      	ldr	r0, [pc, #76]	; (1a22c <os_default_irq+0x84>)
   1a1e0:	f7ff f8f4 	bl	193cc <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   1a1e4:	6a23      	ldr	r3, [r4, #32]
   1a1e6:	9300      	str	r3, [sp, #0]
   1a1e8:	69e3      	ldr	r3, [r4, #28]
   1a1ea:	69a2      	ldr	r2, [r4, #24]
   1a1ec:	6961      	ldr	r1, [r4, #20]
   1a1ee:	4810      	ldr	r0, [pc, #64]	; (1a230 <os_default_irq+0x88>)
   1a1f0:	f7ff f8ec 	bl	193cc <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   1a1f4:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   1a1f6:	6983      	ldr	r3, [r0, #24]
   1a1f8:	6942      	ldr	r2, [r0, #20]
   1a1fa:	6901      	ldr	r1, [r0, #16]
   1a1fc:	69c0      	ldr	r0, [r0, #28]
   1a1fe:	9000      	str	r0, [sp, #0]
   1a200:	480c      	ldr	r0, [pc, #48]	; (1a234 <os_default_irq+0x8c>)
   1a202:	f7ff f8e3 	bl	193cc <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   1a206:	6869      	ldr	r1, [r5, #4]
   1a208:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   1a20a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1a20c:	480a      	ldr	r0, [pc, #40]	; (1a238 <os_default_irq+0x90>)
   1a20e:	f7ff f8dd 	bl	193cc <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   1a212:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1a214:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   1a216:	4809      	ldr	r0, [pc, #36]	; (1a23c <os_default_irq+0x94>)
   1a218:	f7ff f8d8 	bl	193cc <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   1a21c:	f7ed ffba 	bl	8194 <hal_system_reset>
   1a220:	e000ed00 	.word	0xe000ed00
   1a224:	00021aac 	.word	0x00021aac
   1a228:	00021ae0 	.word	0x00021ae0
   1a22c:	00021b14 	.word	0x00021b14
   1a230:	00021b48 	.word	0x00021b48
   1a234:	00021b7c 	.word	0x00021b7c
   1a238:	00021bb0 	.word	0x00021bb0
   1a23c:	00021bd8 	.word	0x00021bd8

0001a240 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   1a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   1a242:	f7ff ff81 	bl	1a148 <hal_watchdog_tickle>
    sanity_last = 0;
   1a246:	2500      	movs	r5, #0
   1a248:	e00b      	b.n	1a262 <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   1a24a:	f000 fec7 	bl	1afdc <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   1a24e:	f7ff ff7b 	bl	1a148 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   1a252:	4625      	mov	r5, r4
   1a254:	e011      	b.n	1a27a <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   1a256:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   1a258:	f002 f842 	bl	1c2e0 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   1a25c:	4638      	mov	r0, r7
   1a25e:	f001 fa19 	bl	1b694 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   1a262:	4a14      	ldr	r2, [pc, #80]	; (1a2b4 <os_idle_task+0x74>)
   1a264:	6813      	ldr	r3, [r2, #0]
   1a266:	3301      	adds	r3, #1
   1a268:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   1a26a:	f001 f995 	bl	1b598 <os_time_get>
   1a26e:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   1a270:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   1a274:	1ac3      	subs	r3, r0, r3
   1a276:	2b00      	cmp	r3, #0
   1a278:	dce7      	bgt.n	1a24a <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   1a27a:	f001 fa05 	bl	1b688 <os_arch_save_sr>
   1a27e:	4607      	mov	r7, r0
        now = os_time_get();
   1a280:	f001 f98a 	bl	1b598 <os_time_get>
   1a284:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   1a286:	f000 ffd7 	bl	1b238 <os_sched_wakeup_ticks>
   1a28a:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   1a28c:	4630      	mov	r0, r6
   1a28e:	f000 f975 	bl	1a57c <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   1a292:	42a0      	cmp	r0, r4
   1a294:	bf28      	it	cs
   1a296:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   1a298:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   1a29c:	1b9b      	subs	r3, r3, r6
   1a29e:	4298      	cmp	r0, r3
   1a2a0:	bf28      	it	cs
   1a2a2:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   1a2a4:	280b      	cmp	r0, #11
   1a2a6:	d9d6      	bls.n	1a256 <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   1a2a8:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   1a2ac:	d9d4      	bls.n	1a258 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   1a2ae:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   1a2b2:	e7d1      	b.n	1a258 <os_idle_task+0x18>
   1a2b4:	2000c68c 	.word	0x2000c68c

0001a2b8 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   1a2b8:	b508      	push	{r3, lr}
   1a2ba:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   1a2bc:	2100      	movs	r1, #0
   1a2be:	4608      	mov	r0, r1
   1a2c0:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   1a2c2:	2300      	movs	r3, #0
   1a2c4:	461a      	mov	r2, r3
   1a2c6:	4619      	mov	r1, r3
   1a2c8:	4618      	mov	r0, r3
   1a2ca:	f7ff ff47 	bl	1a15c <__assert_func>
	...

0001a2d0 <os_started>:
}
   1a2d0:	4b01      	ldr	r3, [pc, #4]	; (1a2d8 <os_started+0x8>)
   1a2d2:	6818      	ldr	r0, [r3, #0]
   1a2d4:	4770      	bx	lr
   1a2d6:	bf00      	nop
   1a2d8:	2000c688 	.word	0x2000c688

0001a2dc <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   1a2dc:	b500      	push	{lr}
   1a2de:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   1a2e0:	2340      	movs	r3, #64	; 0x40
   1a2e2:	9303      	str	r3, [sp, #12]
   1a2e4:	4b15      	ldr	r3, [pc, #84]	; (1a33c <os_init_idle_task+0x60>)
   1a2e6:	9302      	str	r3, [sp, #8]
   1a2e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a2ec:	9301      	str	r3, [sp, #4]
   1a2ee:	23ff      	movs	r3, #255	; 0xff
   1a2f0:	9300      	str	r3, [sp, #0]
   1a2f2:	2300      	movs	r3, #0
   1a2f4:	4a12      	ldr	r2, [pc, #72]	; (1a340 <os_init_idle_task+0x64>)
   1a2f6:	4913      	ldr	r1, [pc, #76]	; (1a344 <os_init_idle_task+0x68>)
   1a2f8:	4813      	ldr	r0, [pc, #76]	; (1a348 <os_init_idle_task+0x6c>)
   1a2fa:	f001 f88d 	bl	1b418 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   1a2fe:	b950      	cbnz	r0, 1a316 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   1a300:	f000 fea2 	bl	1b048 <os_sanity_init>
    assert(rc == 0);
   1a304:	b968      	cbnz	r0, 1a322 <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   1a306:	f247 5030 	movw	r0, #30000	; 0x7530
   1a30a:	f7ff fed9 	bl	1a0c0 <hal_watchdog_init>
    assert(rc == 0);
   1a30e:	b970      	cbnz	r0, 1a32e <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   1a310:	b005      	add	sp, #20
   1a312:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   1a316:	2300      	movs	r3, #0
   1a318:	461a      	mov	r2, r3
   1a31a:	4619      	mov	r1, r3
   1a31c:	4618      	mov	r0, r3
   1a31e:	f7ff ff1d 	bl	1a15c <__assert_func>
    assert(rc == 0);
   1a322:	2300      	movs	r3, #0
   1a324:	461a      	mov	r2, r3
   1a326:	4619      	mov	r1, r3
   1a328:	4618      	mov	r0, r3
   1a32a:	f7ff ff17 	bl	1a15c <__assert_func>
    assert(rc == 0);
   1a32e:	2300      	movs	r3, #0
   1a330:	461a      	mov	r2, r3
   1a332:	4619      	mov	r1, r3
   1a334:	4618      	mov	r0, r3
   1a336:	f7ff ff11 	bl	1a15c <__assert_func>
   1a33a:	bf00      	nop
   1a33c:	20005770 	.word	0x20005770
   1a340:	0001a241 	.word	0x0001a241
   1a344:	00021bfc 	.word	0x00021bfc
   1a348:	2000c5e8 	.word	0x2000c5e8

0001a34c <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   1a34c:	b510      	push	{r4, lr}
   1a34e:	b084      	sub	sp, #16
   1a350:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   1a352:	4b24      	ldr	r3, [pc, #144]	; (1a3e4 <os_init+0x98>)
   1a354:	2200      	movs	r2, #0
   1a356:	601a      	str	r2, [r3, #0]
   1a358:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   1a35a:	4b23      	ldr	r3, [pc, #140]	; (1a3e8 <os_init+0x9c>)
   1a35c:	601a      	str	r2, [r3, #0]
   1a35e:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   1a360:	f000 faba 	bl	1a8d8 <os_eventq_dflt_get>
   1a364:	f000 fa0e 	bl	1a784 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   1a368:	f000 fa04 	bl	1a774 <os_dev_reset>

    err = os_arch_os_init();
   1a36c:	f001 f9c6 	bl	1b6fc <os_arch_os_init>
    assert(err == OS_OK);
   1a370:	bb00      	cbnz	r0, 1a3b4 <os_init+0x68>

    if (main_fn) {
   1a372:	b18c      	cbz	r4, 1a398 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   1a374:	f44f 6300 	mov.w	r3, #2048	; 0x800
   1a378:	9303      	str	r3, [sp, #12]
   1a37a:	4b1c      	ldr	r3, [pc, #112]	; (1a3ec <os_init+0xa0>)
   1a37c:	9302      	str	r3, [sp, #8]
   1a37e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a382:	9301      	str	r3, [sp, #4]
   1a384:	237f      	movs	r3, #127	; 0x7f
   1a386:	9300      	str	r3, [sp, #0]
   1a388:	4623      	mov	r3, r4
   1a38a:	4a19      	ldr	r2, [pc, #100]	; (1a3f0 <os_init+0xa4>)
   1a38c:	4919      	ldr	r1, [pc, #100]	; (1a3f4 <os_init+0xa8>)
   1a38e:	481a      	ldr	r0, [pc, #104]	; (1a3f8 <os_init+0xac>)
   1a390:	f001 f842 	bl	1b418 <os_task_init>
   1a394:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   1a396:	b998      	cbnz	r0, 1a3c0 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   1a398:	f001 fe72 	bl	1c080 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   1a39c:	2001      	movs	r0, #1
   1a39e:	f000 f985 	bl	1a6ac <os_dev_initialize_all>
   1a3a2:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1a3a4:	b990      	cbnz	r0, 1a3cc <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   1a3a6:	2002      	movs	r0, #2
   1a3a8:	f000 f980 	bl	1a6ac <os_dev_initialize_all>
   1a3ac:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1a3ae:	b998      	cbnz	r0, 1a3d8 <os_init+0x8c>
}
   1a3b0:	b004      	add	sp, #16
   1a3b2:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   1a3b4:	2300      	movs	r3, #0
   1a3b6:	461a      	mov	r2, r3
   1a3b8:	4619      	mov	r1, r3
   1a3ba:	4618      	mov	r0, r3
   1a3bc:	f7ff fece 	bl	1a15c <__assert_func>
        assert(err == 0);
   1a3c0:	2300      	movs	r3, #0
   1a3c2:	461a      	mov	r2, r3
   1a3c4:	4619      	mov	r1, r3
   1a3c6:	4618      	mov	r0, r3
   1a3c8:	f7ff fec8 	bl	1a15c <__assert_func>
    assert(err == OS_OK);
   1a3cc:	2300      	movs	r3, #0
   1a3ce:	461a      	mov	r2, r3
   1a3d0:	4619      	mov	r1, r3
   1a3d2:	4618      	mov	r0, r3
   1a3d4:	f7ff fec2 	bl	1a15c <__assert_func>
    assert(err == OS_OK);
   1a3d8:	2300      	movs	r3, #0
   1a3da:	461a      	mov	r2, r3
   1a3dc:	4619      	mov	r1, r3
   1a3de:	4618      	mov	r0, r3
   1a3e0:	f7ff febc 	bl	1a15c <__assert_func>
   1a3e4:	2000c690 	.word	0x2000c690
   1a3e8:	2000c6b8 	.word	0x2000c6b8
   1a3ec:	20005870 	.word	0x20005870
   1a3f0:	0001a2b9 	.word	0x0001a2b9
   1a3f4:	00021bf4 	.word	0x00021bf4
   1a3f8:	2000c638 	.word	0x2000c638

0001a3fc <os_start>:

void
os_start(void)
{
   1a3fc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   1a3fe:	f7ff fe9b 	bl	1a138 <hal_watchdog_enable>

    err = os_arch_os_start();
   1a402:	f001 f9db 	bl	1b7bc <os_arch_os_start>
    assert(err == OS_OK);
   1a406:	b900      	cbnz	r0, 1a40a <os_start+0xe>
#else
    assert(0);
#endif
}
   1a408:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   1a40a:	2300      	movs	r3, #0
   1a40c:	461a      	mov	r2, r3
   1a40e:	4619      	mov	r1, r3
   1a410:	4618      	mov	r0, r3
   1a412:	f7ff fea3 	bl	1a15c <__assert_func>
	...

0001a418 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   1a418:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1a41a:	4b0c      	ldr	r3, [pc, #48]	; (1a44c <os_pkg_init+0x34>)
   1a41c:	781b      	ldrb	r3, [r3, #0]
   1a41e:	b14b      	cbz	r3, 1a434 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   1a420:	2003      	movs	r0, #3
   1a422:	f000 f943 	bl	1a6ac <os_dev_initialize_all>
   1a426:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1a428:	b948      	cbnz	r0, 1a43e <os_pkg_init+0x26>

    os_mempool_module_init();
   1a42a:	f000 fc25 	bl	1ac78 <os_mempool_module_init>
    os_msys_init();
   1a42e:	f000 fcad 	bl	1ad8c <os_msys_init>
}
   1a432:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1a434:	461a      	mov	r2, r3
   1a436:	4619      	mov	r1, r3
   1a438:	4618      	mov	r0, r3
   1a43a:	f7ff fe8f 	bl	1a15c <__assert_func>
    assert(err == OS_OK);
   1a43e:	2300      	movs	r3, #0
   1a440:	461a      	mov	r2, r3
   1a442:	4619      	mov	r1, r3
   1a444:	4618      	mov	r0, r3
   1a446:	f7ff fe89 	bl	1a15c <__assert_func>
   1a44a:	bf00      	nop
   1a44c:	2000c5bc 	.word	0x2000c5bc

0001a450 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   1a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a452:	4604      	mov	r4, r0
   1a454:	460d      	mov	r5, r1
   1a456:	4617      	mov	r7, r2
   1a458:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   1a45a:	2220      	movs	r2, #32
   1a45c:	2100      	movs	r1, #0
   1a45e:	f001 fa80 	bl	1b962 <memset>
    c->c_ev.ev_cb = ev_cb;
   1a462:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   1a464:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   1a466:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   1a468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001a46c <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   1a46c:	b538      	push	{r3, r4, r5, lr}
   1a46e:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   1a470:	f001 f90a 	bl	1b688 <os_arch_save_sr>
   1a474:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   1a476:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   1a478:	b13b      	cbz	r3, 1a48a <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1a47a:	69a2      	ldr	r2, [r4, #24]
   1a47c:	b172      	cbz	r2, 1a49c <os_callout_stop+0x30>
   1a47e:	61d3      	str	r3, [r2, #28]
   1a480:	69e3      	ldr	r3, [r4, #28]
   1a482:	69a2      	ldr	r2, [r4, #24]
   1a484:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   1a486:	2300      	movs	r3, #0
   1a488:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   1a48a:	6920      	ldr	r0, [r4, #16]
   1a48c:	b110      	cbz	r0, 1a494 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   1a48e:	4621      	mov	r1, r4
   1a490:	f000 fa02 	bl	1a898 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   1a494:	4628      	mov	r0, r5
   1a496:	f001 f8fd 	bl	1b694 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   1a49a:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1a49c:	4a01      	ldr	r2, [pc, #4]	; (1a4a4 <os_callout_stop+0x38>)
   1a49e:	6053      	str	r3, [r2, #4]
   1a4a0:	e7ee      	b.n	1a480 <os_callout_stop+0x14>
   1a4a2:	bf00      	nop
   1a4a4:	2000c690 	.word	0x2000c690

0001a4a8 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   1a4a8:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   1a4aa:	6903      	ldr	r3, [r0, #16]
   1a4ac:	b1c3      	cbz	r3, 1a4e0 <os_callout_reset+0x38>
   1a4ae:	4605      	mov	r5, r0
   1a4b0:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   1a4b2:	2900      	cmp	r1, #0
   1a4b4:	db2f      	blt.n	1a516 <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   1a4b6:	f001 f8e7 	bl	1b688 <os_arch_save_sr>
   1a4ba:	4606      	mov	r6, r0

    os_callout_stop(c);
   1a4bc:	4628      	mov	r0, r5
   1a4be:	f7ff ffd5 	bl	1a46c <os_callout_stop>

    if (ticks == 0) {
   1a4c2:	b904      	cbnz	r4, 1a4c6 <os_callout_reset+0x1e>
        ticks = 1;
   1a4c4:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   1a4c6:	f001 f867 	bl	1b598 <os_time_get>
   1a4ca:	4420      	add	r0, r4
   1a4cc:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1a4ce:	4b13      	ldr	r3, [pc, #76]	; (1a51c <os_callout_reset+0x74>)
   1a4d0:	681b      	ldr	r3, [r3, #0]
   1a4d2:	b153      	cbz	r3, 1a4ea <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   1a4d4:	695a      	ldr	r2, [r3, #20]
   1a4d6:	1a82      	subs	r2, r0, r2
   1a4d8:	2a00      	cmp	r2, #0
   1a4da:	db06      	blt.n	1a4ea <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1a4dc:	699b      	ldr	r3, [r3, #24]
   1a4de:	e7f8      	b.n	1a4d2 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   1a4e0:	461a      	mov	r2, r3
   1a4e2:	4619      	mov	r1, r3
   1a4e4:	4618      	mov	r0, r3
   1a4e6:	f7ff fe39 	bl	1a15c <__assert_func>
            break;
        }
    }

    if (entry) {
   1a4ea:	b15b      	cbz	r3, 1a504 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   1a4ec:	69da      	ldr	r2, [r3, #28]
   1a4ee:	61ea      	str	r2, [r5, #28]
   1a4f0:	61ab      	str	r3, [r5, #24]
   1a4f2:	69da      	ldr	r2, [r3, #28]
   1a4f4:	6015      	str	r5, [r2, #0]
   1a4f6:	3518      	adds	r5, #24
   1a4f8:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   1a4fa:	4630      	mov	r0, r6
   1a4fc:	f001 f8ca 	bl	1b694 <os_arch_restore_sr>

    ret = OS_OK;
   1a500:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   1a502:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   1a504:	2300      	movs	r3, #0
   1a506:	61ab      	str	r3, [r5, #24]
   1a508:	4b04      	ldr	r3, [pc, #16]	; (1a51c <os_callout_reset+0x74>)
   1a50a:	685a      	ldr	r2, [r3, #4]
   1a50c:	61ea      	str	r2, [r5, #28]
   1a50e:	6015      	str	r5, [r2, #0]
   1a510:	3518      	adds	r5, #24
   1a512:	605d      	str	r5, [r3, #4]
   1a514:	e7f1      	b.n	1a4fa <os_callout_reset+0x52>
        ret = OS_EINVAL;
   1a516:	2002      	movs	r0, #2
    return ret;
   1a518:	e7f3      	b.n	1a502 <os_callout_reset+0x5a>
   1a51a:	bf00      	nop
   1a51c:	2000c690 	.word	0x2000c690

0001a520 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   1a520:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   1a522:	f001 f839 	bl	1b598 <os_time_get>
   1a526:	4605      	mov	r5, r0
   1a528:	e00f      	b.n	1a54a <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1a52a:	69e2      	ldr	r2, [r4, #28]
   1a52c:	4b12      	ldr	r3, [pc, #72]	; (1a578 <os_callout_tick+0x58>)
   1a52e:	605a      	str	r2, [r3, #4]
   1a530:	69e3      	ldr	r3, [r4, #28]
   1a532:	69a2      	ldr	r2, [r4, #24]
   1a534:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   1a536:	2300      	movs	r3, #0
   1a538:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   1a53a:	f001 f8ab 	bl	1b694 <os_arch_restore_sr>

        if (c) {
   1a53e:	b1d4      	cbz	r4, 1a576 <os_callout_tick+0x56>
            if (c->c_evq) {
   1a540:	6920      	ldr	r0, [r4, #16]
   1a542:	b9a0      	cbnz	r0, 1a56e <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   1a544:	6863      	ldr	r3, [r4, #4]
   1a546:	4620      	mov	r0, r4
   1a548:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   1a54a:	f001 f89d 	bl	1b688 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   1a54e:	4b0a      	ldr	r3, [pc, #40]	; (1a578 <os_callout_tick+0x58>)
   1a550:	681c      	ldr	r4, [r3, #0]
        if (c) {
   1a552:	2c00      	cmp	r4, #0
   1a554:	d0f1      	beq.n	1a53a <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   1a556:	6963      	ldr	r3, [r4, #20]
   1a558:	1aeb      	subs	r3, r5, r3
   1a55a:	2b00      	cmp	r3, #0
   1a55c:	db05      	blt.n	1a56a <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1a55e:	69a3      	ldr	r3, [r4, #24]
   1a560:	2b00      	cmp	r3, #0
   1a562:	d0e2      	beq.n	1a52a <os_callout_tick+0xa>
   1a564:	69e2      	ldr	r2, [r4, #28]
   1a566:	61da      	str	r2, [r3, #28]
   1a568:	e7e2      	b.n	1a530 <os_callout_tick+0x10>
                c = NULL;
   1a56a:	2400      	movs	r4, #0
   1a56c:	e7e5      	b.n	1a53a <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   1a56e:	4621      	mov	r1, r4
   1a570:	f000 f915 	bl	1a79e <os_eventq_put>
   1a574:	e7e9      	b.n	1a54a <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   1a576:	bd38      	pop	{r3, r4, r5, pc}
   1a578:	2000c690 	.word	0x2000c690

0001a57c <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   1a57c:	b510      	push	{r4, lr}
   1a57e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   1a580:	f001 f88b 	bl	1b69a <os_arch_in_critical>
   1a584:	b130      	cbz	r0, 1a594 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   1a586:	4b09      	ldr	r3, [pc, #36]	; (1a5ac <os_callout_wakeup_ticks+0x30>)
   1a588:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   1a58a:	b15b      	cbz	r3, 1a5a4 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   1a58c:	6958      	ldr	r0, [r3, #20]
   1a58e:	1b00      	subs	r0, r0, r4
   1a590:	d406      	bmi.n	1a5a0 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   1a592:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1a594:	2300      	movs	r3, #0
   1a596:	461a      	mov	r2, r3
   1a598:	4619      	mov	r1, r3
   1a59a:	4618      	mov	r0, r3
   1a59c:	f7ff fdde 	bl	1a15c <__assert_func>
            rt = 0;     /* callout time is in the past */
   1a5a0:	2000      	movs	r0, #0
   1a5a2:	e7f6      	b.n	1a592 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   1a5a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1a5a8:	e7f3      	b.n	1a592 <os_callout_wakeup_ticks+0x16>
   1a5aa:	bf00      	nop
   1a5ac:	2000c690 	.word	0x2000c690

0001a5b0 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   1a5b0:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   1a5b2:	4601      	mov	r1, r0
   1a5b4:	2000      	movs	r0, #0
   1a5b6:	f002 f84d 	bl	1c654 <hal_timer_config>
    return rc;
}
   1a5ba:	bd08      	pop	{r3, pc}

0001a5bc <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   1a5bc:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   1a5be:	2000      	movs	r0, #0
   1a5c0:	f002 f8c4 	bl	1c74c <hal_timer_read>
    return cpu_time;
}
   1a5c4:	bd08      	pop	{r3, pc}
	...

0001a5c8 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   1a5c8:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   1a5ca:	4b15      	ldr	r3, [pc, #84]	; (1a620 <os_dev_add+0x58>)
   1a5cc:	681d      	ldr	r5, [r3, #0]
   1a5ce:	b115      	cbz	r5, 1a5d6 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1a5d0:	462b      	mov	r3, r5
    prev_dev = NULL;
   1a5d2:	2400      	movs	r4, #0
   1a5d4:	e008      	b.n	1a5e8 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1a5d6:	4603      	mov	r3, r0
   1a5d8:	f843 5f20 	str.w	r5, [r3, #32]!
   1a5dc:	4a10      	ldr	r2, [pc, #64]	; (1a620 <os_dev_add+0x58>)
   1a5de:	6053      	str	r3, [r2, #4]
   1a5e0:	6010      	str	r0, [r2, #0]
        return (0);
   1a5e2:	e010      	b.n	1a606 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   1a5e4:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1a5e6:	6a1b      	ldr	r3, [r3, #32]
   1a5e8:	b143      	cbz	r3, 1a5fc <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   1a5ea:	7e01      	ldrb	r1, [r0, #24]
   1a5ec:	7e1a      	ldrb	r2, [r3, #24]
   1a5ee:	4291      	cmp	r1, r2
   1a5f0:	d304      	bcc.n	1a5fc <os_dev_add+0x34>
   1a5f2:	d1f7      	bne.n	1a5e4 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   1a5f4:	7e41      	ldrb	r1, [r0, #25]
   1a5f6:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   1a5f8:	4291      	cmp	r1, r2
   1a5fa:	d2f3      	bcs.n	1a5e4 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   1a5fc:	b15c      	cbz	r4, 1a616 <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1a5fe:	6a23      	ldr	r3, [r4, #32]
   1a600:	6203      	str	r3, [r0, #32]
   1a602:	b11b      	cbz	r3, 1a60c <os_dev_add+0x44>
   1a604:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   1a606:	2000      	movs	r0, #0
   1a608:	bc30      	pop	{r4, r5}
   1a60a:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1a60c:	f100 0320 	add.w	r3, r0, #32
   1a610:	4a03      	ldr	r2, [pc, #12]	; (1a620 <os_dev_add+0x58>)
   1a612:	6053      	str	r3, [r2, #4]
   1a614:	e7f6      	b.n	1a604 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1a616:	6205      	str	r5, [r0, #32]
   1a618:	4b01      	ldr	r3, [pc, #4]	; (1a620 <os_dev_add+0x58>)
   1a61a:	6018      	str	r0, [r3, #0]
   1a61c:	e7f3      	b.n	1a606 <os_dev_add+0x3e>
   1a61e:	bf00      	nop
   1a620:	20007870 	.word	0x20007870

0001a624 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   1a624:	b510      	push	{r4, lr}
   1a626:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   1a628:	6903      	ldr	r3, [r0, #16]
   1a62a:	6941      	ldr	r1, [r0, #20]
   1a62c:	4798      	blx	r3
    if (rc != 0) {
   1a62e:	4603      	mov	r3, r0
   1a630:	b128      	cbz	r0, 1a63e <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   1a632:	7ee2      	ldrb	r2, [r4, #27]
   1a634:	f012 0f08 	tst.w	r2, #8
   1a638:	d105      	bne.n	1a646 <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   1a63a:	2300      	movs	r3, #0
   1a63c:	e003      	b.n	1a646 <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   1a63e:	7ee2      	ldrb	r2, [r4, #27]
   1a640:	f042 0201 	orr.w	r2, r2, #1
   1a644:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   1a646:	4618      	mov	r0, r3
   1a648:	bd10      	pop	{r4, pc}

0001a64a <os_dev_init>:
    dev->od_name = name;
   1a64a:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   1a64c:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   1a64e:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   1a650:	2300      	movs	r3, #0
   1a652:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   1a654:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   1a656:	9a00      	ldr	r2, [sp, #0]
   1a658:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   1a65a:	9a01      	ldr	r2, [sp, #4]
   1a65c:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   1a65e:	6003      	str	r3, [r0, #0]
   1a660:	6043      	str	r3, [r0, #4]
   1a662:	6083      	str	r3, [r0, #8]
   1a664:	60c3      	str	r3, [r0, #12]
}
   1a666:	4618      	mov	r0, r3
   1a668:	4770      	bx	lr
	...

0001a66c <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   1a66c:	b530      	push	{r4, r5, lr}
   1a66e:	b083      	sub	sp, #12
   1a670:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   1a672:	9c07      	ldr	r4, [sp, #28]
   1a674:	9401      	str	r4, [sp, #4]
   1a676:	9c06      	ldr	r4, [sp, #24]
   1a678:	9400      	str	r4, [sp, #0]
   1a67a:	f7ff ffe6 	bl	1a64a <os_dev_init>
    if (rc != 0) {
   1a67e:	4603      	mov	r3, r0
   1a680:	b110      	cbz	r0, 1a688 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   1a682:	4618      	mov	r0, r3
   1a684:	b003      	add	sp, #12
   1a686:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   1a688:	4628      	mov	r0, r5
   1a68a:	f7ff ff9d 	bl	1a5c8 <os_dev_add>
    if (rc != 0) {
   1a68e:	4603      	mov	r3, r0
   1a690:	2800      	cmp	r0, #0
   1a692:	d1f6      	bne.n	1a682 <os_dev_create+0x16>
    if (g_os_started) {
   1a694:	4a04      	ldr	r2, [pc, #16]	; (1a6a8 <os_dev_create+0x3c>)
   1a696:	6812      	ldr	r2, [r2, #0]
   1a698:	2a00      	cmp	r2, #0
   1a69a:	d0f2      	beq.n	1a682 <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   1a69c:	4628      	mov	r0, r5
   1a69e:	f7ff ffc1 	bl	1a624 <os_dev_initialize>
   1a6a2:	4603      	mov	r3, r0
    return (rc);
   1a6a4:	e7ed      	b.n	1a682 <os_dev_create+0x16>
   1a6a6:	bf00      	nop
   1a6a8:	2000c688 	.word	0x2000c688

0001a6ac <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   1a6ac:	b538      	push	{r3, r4, r5, lr}
   1a6ae:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1a6b0:	4b08      	ldr	r3, [pc, #32]	; (1a6d4 <os_dev_initialize_all+0x28>)
   1a6b2:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   1a6b4:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1a6b6:	e000      	b.n	1a6ba <os_dev_initialize_all+0xe>
   1a6b8:	6a24      	ldr	r4, [r4, #32]
   1a6ba:	b144      	cbz	r4, 1a6ce <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   1a6bc:	7e23      	ldrb	r3, [r4, #24]
   1a6be:	42ab      	cmp	r3, r5
   1a6c0:	d1fa      	bne.n	1a6b8 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   1a6c2:	4620      	mov	r0, r4
   1a6c4:	f7ff ffae 	bl	1a624 <os_dev_initialize>
            if (rc) {
   1a6c8:	4602      	mov	r2, r0
   1a6ca:	2800      	cmp	r0, #0
   1a6cc:	d0f4      	beq.n	1a6b8 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   1a6ce:	4610      	mov	r0, r2
   1a6d0:	bd38      	pop	{r3, r4, r5, pc}
   1a6d2:	bf00      	nop
   1a6d4:	20007870 	.word	0x20007870

0001a6d8 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   1a6d8:	b538      	push	{r3, r4, r5, lr}
   1a6da:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1a6dc:	4b05      	ldr	r3, [pc, #20]	; (1a6f4 <os_dev_lookup+0x1c>)
   1a6de:	681c      	ldr	r4, [r3, #0]
   1a6e0:	b134      	cbz	r4, 1a6f0 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   1a6e2:	4629      	mov	r1, r5
   1a6e4:	69e0      	ldr	r0, [r4, #28]
   1a6e6:	f001 f958 	bl	1b99a <strcmp>
   1a6ea:	b108      	cbz	r0, 1a6f0 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1a6ec:	6a24      	ldr	r4, [r4, #32]
   1a6ee:	e7f7      	b.n	1a6e0 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   1a6f0:	4620      	mov	r0, r4
   1a6f2:	bd38      	pop	{r3, r4, r5, pc}
   1a6f4:	20007870 	.word	0x20007870

0001a6f8 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   1a6f8:	b570      	push	{r4, r5, r6, lr}
   1a6fa:	460d      	mov	r5, r1
   1a6fc:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   1a6fe:	f7ff ffeb 	bl	1a6d8 <os_dev_lookup>
    if (dev == NULL) {
   1a702:	4604      	mov	r4, r0
   1a704:	b1a0      	cbz	r0, 1a730 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   1a706:	7ec3      	ldrb	r3, [r0, #27]
   1a708:	f013 0f01 	tst.w	r3, #1
   1a70c:	d012      	beq.n	1a734 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   1a70e:	6803      	ldr	r3, [r0, #0]
   1a710:	b11b      	cbz	r3, 1a71a <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   1a712:	4632      	mov	r2, r6
   1a714:	4629      	mov	r1, r5
   1a716:	4798      	blx	r3
        if (rc != 0) {
   1a718:	b970      	cbnz	r0, 1a738 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1a71a:	f000 ffb5 	bl	1b688 <os_arch_save_sr>
    ++dev->od_open_ref;
   1a71e:	7ea3      	ldrb	r3, [r4, #26]
   1a720:	3301      	adds	r3, #1
   1a722:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   1a724:	7ee3      	ldrb	r3, [r4, #27]
   1a726:	f043 0302 	orr.w	r3, r3, #2
   1a72a:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   1a72c:	f000 ffb2 	bl	1b694 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   1a730:	4620      	mov	r0, r4
   1a732:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   1a734:	2400      	movs	r4, #0
   1a736:	e7fb      	b.n	1a730 <os_dev_open+0x38>
    return (NULL);
   1a738:	2400      	movs	r4, #0
   1a73a:	e7f9      	b.n	1a730 <os_dev_open+0x38>

0001a73c <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   1a73c:	b1b0      	cbz	r0, 1a76c <os_dev_close+0x30>
{
   1a73e:	b510      	push	{r4, lr}
   1a740:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   1a742:	68c3      	ldr	r3, [r0, #12]
   1a744:	b113      	cbz	r3, 1a74c <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   1a746:	4798      	blx	r3
        if (rc != 0) {
   1a748:	4603      	mov	r3, r0
   1a74a:	b968      	cbnz	r0, 1a768 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1a74c:	f000 ff9c 	bl	1b688 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   1a750:	7ea3      	ldrb	r3, [r4, #26]
   1a752:	3b01      	subs	r3, #1
   1a754:	b2db      	uxtb	r3, r3
   1a756:	76a3      	strb	r3, [r4, #26]
   1a758:	b91b      	cbnz	r3, 1a762 <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   1a75a:	7ee3      	ldrb	r3, [r4, #27]
   1a75c:	f023 0306 	bic.w	r3, r3, #6
   1a760:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   1a762:	f000 ff97 	bl	1b694 <os_arch_restore_sr>

    return (0);
   1a766:	2300      	movs	r3, #0
err:
    return (rc);
}
   1a768:	4618      	mov	r0, r3
   1a76a:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   1a76c:	2302      	movs	r3, #2
}
   1a76e:	4618      	mov	r0, r3
   1a770:	4770      	bx	lr
	...

0001a774 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   1a774:	4b02      	ldr	r3, [pc, #8]	; (1a780 <os_dev_reset+0xc>)
   1a776:	2200      	movs	r2, #0
   1a778:	601a      	str	r2, [r3, #0]
   1a77a:	605b      	str	r3, [r3, #4]
}
   1a77c:	4770      	bx	lr
   1a77e:	bf00      	nop
   1a780:	20007870 	.word	0x20007870

0001a784 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   1a784:	2200      	movs	r2, #0
   1a786:	6002      	str	r2, [r0, #0]
   1a788:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   1a78a:	4603      	mov	r3, r0
   1a78c:	f843 2f08 	str.w	r2, [r3, #8]!
   1a790:	60c3      	str	r3, [r0, #12]
}
   1a792:	4770      	bx	lr

0001a794 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   1a794:	68c0      	ldr	r0, [r0, #12]
}
   1a796:	3000      	adds	r0, #0
   1a798:	bf18      	it	ne
   1a79a:	2001      	movne	r0, #1
   1a79c:	4770      	bx	lr

0001a79e <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   1a79e:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   1a7a0:	b1f0      	cbz	r0, 1a7e0 <os_eventq_put+0x42>
   1a7a2:	460c      	mov	r4, r1
   1a7a4:	4605      	mov	r5, r0
   1a7a6:	f7ff fff5 	bl	1a794 <os_eventq_inited>
   1a7aa:	b1c8      	cbz	r0, 1a7e0 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1a7ac:	f000 ff6c 	bl	1b688 <os_arch_save_sr>
   1a7b0:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   1a7b2:	7823      	ldrb	r3, [r4, #0]
   1a7b4:	b9d3      	cbnz	r3, 1a7ec <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   1a7b6:	2301      	movs	r3, #1
   1a7b8:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   1a7ba:	2300      	movs	r3, #0
   1a7bc:	60e3      	str	r3, [r4, #12]
   1a7be:	68eb      	ldr	r3, [r5, #12]
   1a7c0:	601c      	str	r4, [r3, #0]
   1a7c2:	340c      	adds	r4, #12
   1a7c4:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   1a7c6:	6868      	ldr	r0, [r5, #4]
   1a7c8:	b1b8      	cbz	r0, 1a7fa <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   1a7ca:	7b03      	ldrb	r3, [r0, #12]
   1a7cc:	2b02      	cmp	r3, #2
   1a7ce:	d010      	beq.n	1a7f2 <os_eventq_put+0x54>
    resched = 0;
   1a7d0:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   1a7d2:	2300      	movs	r3, #0
   1a7d4:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   1a7d6:	4630      	mov	r0, r6
   1a7d8:	f000 ff5c 	bl	1b694 <os_arch_restore_sr>

    if (resched) {
   1a7dc:	b97c      	cbnz	r4, 1a7fe <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   1a7de:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   1a7e0:	2300      	movs	r3, #0
   1a7e2:	461a      	mov	r2, r3
   1a7e4:	4619      	mov	r1, r3
   1a7e6:	4618      	mov	r0, r3
   1a7e8:	f7ff fcb8 	bl	1a15c <__assert_func>
        OS_EXIT_CRITICAL(sr);
   1a7ec:	f000 ff52 	bl	1b694 <os_arch_restore_sr>
   1a7f0:	e7f5      	b.n	1a7de <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   1a7f2:	f000 fcc7 	bl	1b184 <os_sched_wakeup>
            resched = 1;
   1a7f6:	2401      	movs	r4, #1
   1a7f8:	e7eb      	b.n	1a7d2 <os_eventq_put+0x34>
    resched = 0;
   1a7fa:	2400      	movs	r4, #0
   1a7fc:	e7eb      	b.n	1a7d6 <os_eventq_put+0x38>
        os_sched(NULL);
   1a7fe:	2000      	movs	r0, #0
   1a800:	f000 fd40 	bl	1b284 <os_sched>
   1a804:	e7eb      	b.n	1a7de <os_eventq_put+0x40>

0001a806 <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   1a806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a808:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   1a80a:	f000 fc67 	bl	1b0dc <os_sched_get_current_task>
   1a80e:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   1a810:	682b      	ldr	r3, [r5, #0]
   1a812:	4283      	cmp	r3, r0
   1a814:	d001      	beq.n	1a81a <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   1a816:	b9db      	cbnz	r3, 1a850 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   1a818:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   1a81a:	f000 ff35 	bl	1b688 <os_arch_save_sr>
   1a81e:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   1a820:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   1a822:	b9de      	cbnz	r6, 1a85c <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   1a824:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   1a826:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a82a:	4620      	mov	r0, r4
   1a82c:	f000 fc62 	bl	1b0f4 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   1a830:	7b63      	ldrb	r3, [r4, #13]
   1a832:	f043 0308 	orr.w	r3, r3, #8
   1a836:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   1a838:	4638      	mov	r0, r7
   1a83a:	f000 ff2b 	bl	1b694 <os_arch_restore_sr>

        os_sched(NULL);
   1a83e:	2000      	movs	r0, #0
   1a840:	f000 fd20 	bl	1b284 <os_sched>

        OS_ENTER_CRITICAL(sr);
   1a844:	f000 ff20 	bl	1b688 <os_arch_save_sr>
   1a848:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   1a84a:	2300      	movs	r3, #0
   1a84c:	606b      	str	r3, [r5, #4]
        goto pull_one;
   1a84e:	e7e7      	b.n	1a820 <os_eventq_get+0x1a>
            assert(0);
   1a850:	2300      	movs	r3, #0
   1a852:	461a      	mov	r2, r3
   1a854:	4619      	mov	r1, r3
   1a856:	4618      	mov	r0, r3
   1a858:	f7ff fc80 	bl	1a15c <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1a85c:	68f3      	ldr	r3, [r6, #12]
   1a85e:	60ab      	str	r3, [r5, #8]
   1a860:	b153      	cbz	r3, 1a878 <os_eventq_get+0x72>
        ev->ev_queued = 0;
   1a862:	2300      	movs	r3, #0
   1a864:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   1a866:	7b63      	ldrb	r3, [r4, #13]
   1a868:	f023 0308 	bic.w	r3, r3, #8
   1a86c:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   1a86e:	4638      	mov	r0, r7
   1a870:	f000 ff10 	bl	1b694 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   1a874:	4630      	mov	r0, r6
   1a876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1a878:	f105 0308 	add.w	r3, r5, #8
   1a87c:	60eb      	str	r3, [r5, #12]
   1a87e:	e7f0      	b.n	1a862 <os_eventq_get+0x5c>

0001a880 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   1a880:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   1a882:	f7ff ffc0 	bl	1a806 <os_eventq_get>
    assert(ev->ev_cb != NULL);
   1a886:	6843      	ldr	r3, [r0, #4]
   1a888:	b10b      	cbz	r3, 1a88e <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   1a88a:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   1a88c:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   1a88e:	461a      	mov	r2, r3
   1a890:	4619      	mov	r1, r3
   1a892:	4618      	mov	r0, r3
   1a894:	f7ff fc62 	bl	1a15c <__assert_func>

0001a898 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   1a898:	b538      	push	{r3, r4, r5, lr}
   1a89a:	4605      	mov	r5, r0
   1a89c:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1a89e:	f000 fef3 	bl	1b688 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   1a8a2:	7823      	ldrb	r3, [r4, #0]
   1a8a4:	b183      	cbz	r3, 1a8c8 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1a8a6:	68aa      	ldr	r2, [r5, #8]
   1a8a8:	42a2      	cmp	r2, r4
   1a8aa:	d107      	bne.n	1a8bc <os_eventq_remove+0x24>
   1a8ac:	68d3      	ldr	r3, [r2, #12]
   1a8ae:	60ab      	str	r3, [r5, #8]
   1a8b0:	b953      	cbnz	r3, 1a8c8 <os_eventq_remove+0x30>
   1a8b2:	f105 0308 	add.w	r3, r5, #8
   1a8b6:	60eb      	str	r3, [r5, #12]
   1a8b8:	e006      	b.n	1a8c8 <os_eventq_remove+0x30>
   1a8ba:	461a      	mov	r2, r3
   1a8bc:	68d3      	ldr	r3, [r2, #12]
   1a8be:	42a3      	cmp	r3, r4
   1a8c0:	d1fb      	bne.n	1a8ba <os_eventq_remove+0x22>
   1a8c2:	68db      	ldr	r3, [r3, #12]
   1a8c4:	60d3      	str	r3, [r2, #12]
   1a8c6:	b123      	cbz	r3, 1a8d2 <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   1a8c8:	2300      	movs	r3, #0
   1a8ca:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   1a8cc:	f000 fee2 	bl	1b694 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   1a8d0:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1a8d2:	320c      	adds	r2, #12
   1a8d4:	60ea      	str	r2, [r5, #12]
   1a8d6:	e7f7      	b.n	1a8c8 <os_eventq_remove+0x30>

0001a8d8 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   1a8d8:	4800      	ldr	r0, [pc, #0]	; (1a8dc <os_eventq_dflt_get+0x4>)
   1a8da:	4770      	bx	lr
   1a8dc:	20007878 	.word	0x20007878

0001a8e0 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   1a8e0:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   1a8e2:	2000      	movs	r0, #0
   1a8e4:	6018      	str	r0, [r3, #0]
   1a8e6:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   1a8e8:	6098      	str	r0, [r3, #8]
   1a8ea:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   1a8ec:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   1a8ee:	611a      	str	r2, [r3, #16]

    return (0);
}
   1a8f0:	4770      	bx	lr

0001a8f2 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   1a8f2:	b538      	push	{r3, r4, r5, lr}
   1a8f4:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1a8f6:	f000 fec7 	bl	1b688 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   1a8fa:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   1a8fc:	b114      	cbz	r4, 1a904 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1a8fe:	6863      	ldr	r3, [r4, #4]
   1a900:	602b      	str	r3, [r5, #0]
   1a902:	b12b      	cbz	r3, 1a910 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   1a904:	f000 fec6 	bl	1b694 <os_arch_restore_sr>

    if (mp) {
   1a908:	b124      	cbz	r4, 1a914 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   1a90a:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   1a90e:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1a910:	606d      	str	r5, [r5, #4]
   1a912:	e7f7      	b.n	1a904 <os_mqueue_get+0x12>
        m = NULL;
   1a914:	2000      	movs	r0, #0
    return (m);
   1a916:	e7fa      	b.n	1a90e <os_mqueue_get+0x1c>

0001a918 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   1a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   1a91a:	7953      	ldrb	r3, [r2, #5]
   1a91c:	2b07      	cmp	r3, #7
   1a91e:	d916      	bls.n	1a94e <os_mqueue_put+0x36>
   1a920:	4614      	mov	r4, r2
   1a922:	460e      	mov	r6, r1
   1a924:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   1a926:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   1a92a:	f000 fead 	bl	1b688 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   1a92e:	2300      	movs	r3, #0
   1a930:	f844 3f14 	str.w	r3, [r4, #20]!
   1a934:	686b      	ldr	r3, [r5, #4]
   1a936:	601f      	str	r7, [r3, #0]
   1a938:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   1a93a:	f000 feab 	bl	1b694 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   1a93e:	b146      	cbz	r6, 1a952 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   1a940:	f105 0108 	add.w	r1, r5, #8
   1a944:	4630      	mov	r0, r6
   1a946:	f7ff ff2a 	bl	1a79e <os_eventq_put>
    }

    return (0);
   1a94a:	2000      	movs	r0, #0
   1a94c:	e000      	b.n	1a950 <os_mqueue_put+0x38>
err:
    return (rc);
   1a94e:	2002      	movs	r0, #2
}
   1a950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   1a952:	2000      	movs	r0, #0
   1a954:	e7fc      	b.n	1a950 <os_mqueue_put+0x38>

0001a956 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   1a956:	3a10      	subs	r2, #16
   1a958:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   1a95a:	6041      	str	r1, [r0, #4]

    return (0);
}
   1a95c:	2000      	movs	r0, #0
   1a95e:	4770      	bx	lr

0001a960 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   1a960:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   1a962:	8803      	ldrh	r3, [r0, #0]
   1a964:	428b      	cmp	r3, r1
   1a966:	d312      	bcc.n	1a98e <os_mbuf_get+0x2e>
   1a968:	460d      	mov	r5, r1
   1a96a:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   1a96c:	6840      	ldr	r0, [r0, #4]
   1a96e:	f000 f947 	bl	1ac00 <os_memblock_get>
    if (!om) {
   1a972:	4603      	mov	r3, r0
   1a974:	b148      	cbz	r0, 1a98a <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   1a976:	2200      	movs	r2, #0
   1a978:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   1a97a:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   1a97c:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   1a97e:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   1a980:	f100 0110 	add.w	r1, r0, #16
   1a984:	4429      	add	r1, r5
   1a986:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   1a988:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   1a98a:	4618      	mov	r0, r3
   1a98c:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1a98e:	2300      	movs	r3, #0
    return om;
   1a990:	e7fb      	b.n	1a98a <os_mbuf_get+0x2a>

0001a992 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   1a992:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   1a994:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   1a998:	8803      	ldrh	r3, [r0, #0]
   1a99a:	42ab      	cmp	r3, r5
   1a99c:	d310      	bcc.n	1a9c0 <os_mbuf_get_pkthdr+0x2e>
   1a99e:	2dff      	cmp	r5, #255	; 0xff
   1a9a0:	d810      	bhi.n	1a9c4 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   1a9a2:	2100      	movs	r1, #0
   1a9a4:	f7ff ffdc 	bl	1a960 <os_mbuf_get>
    if (om) {
   1a9a8:	4603      	mov	r3, r0
   1a9aa:	b138      	cbz	r0, 1a9bc <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   1a9ac:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   1a9ae:	6802      	ldr	r2, [r0, #0]
   1a9b0:	4415      	add	r5, r2
   1a9b2:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   1a9b4:	2200      	movs	r2, #0
   1a9b6:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   1a9b8:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   1a9ba:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   1a9bc:	4618      	mov	r0, r3
   1a9be:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1a9c0:	2300      	movs	r3, #0
   1a9c2:	e7fb      	b.n	1a9bc <os_mbuf_get_pkthdr+0x2a>
   1a9c4:	2300      	movs	r3, #0
    return om;
   1a9c6:	e7f9      	b.n	1a9bc <os_mbuf_get_pkthdr+0x2a>

0001a9c8 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   1a9c8:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   1a9ca:	6883      	ldr	r3, [r0, #8]
   1a9cc:	b123      	cbz	r3, 1a9d8 <os_mbuf_free+0x10>
   1a9ce:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   1a9d0:	6858      	ldr	r0, [r3, #4]
   1a9d2:	f000 f93d 	bl	1ac50 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   1a9d6:	bd08      	pop	{r3, pc}
    rc = 0;
   1a9d8:	2000      	movs	r0, #0
    return (rc);
   1a9da:	e7fc      	b.n	1a9d6 <os_mbuf_free+0xe>

0001a9dc <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   1a9dc:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   1a9de:	b160      	cbz	r0, 1a9fa <os_mbuf_free_chain+0x1e>
{
   1a9e0:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   1a9e2:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   1a9e4:	4618      	mov	r0, r3
   1a9e6:	f7ff ffef 	bl	1a9c8 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   1a9ea:	4623      	mov	r3, r4
        if (rc != 0) {
   1a9ec:	4602      	mov	r2, r0
   1a9ee:	b910      	cbnz	r0, 1a9f6 <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   1a9f0:	2c00      	cmp	r4, #0
   1a9f2:	d1f6      	bne.n	1a9e2 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   1a9f4:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   1a9f6:	4610      	mov	r0, r2
   1a9f8:	bd10      	pop	{r4, pc}
    rc = 0;
   1a9fa:	2200      	movs	r2, #0
}
   1a9fc:	4610      	mov	r0, r2
   1a9fe:	4770      	bx	lr

0001aa00 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   1aa00:	2300      	movs	r3, #0
    while (om != NULL) {
   1aa02:	e003      	b.n	1aa0c <os_mbuf_len+0xc>
        len += om->om_len;
   1aa04:	88c2      	ldrh	r2, [r0, #6]
   1aa06:	4413      	add	r3, r2
   1aa08:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   1aa0a:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   1aa0c:	2800      	cmp	r0, #0
   1aa0e:	d1f9      	bne.n	1aa04 <os_mbuf_len+0x4>
    }

    return len;
}
   1aa10:	4618      	mov	r0, r3
   1aa12:	4770      	bx	lr

0001aa14 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   1aa14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   1aa18:	2800      	cmp	r0, #0
   1aa1a:	d04d      	beq.n	1aab8 <os_mbuf_append+0xa4>
   1aa1c:	460f      	mov	r7, r1
   1aa1e:	4691      	mov	r9, r2
   1aa20:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   1aa22:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   1aa26:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   1aa28:	e000      	b.n	1aa2c <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   1aa2a:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   1aa2c:	68eb      	ldr	r3, [r5, #12]
   1aa2e:	2b00      	cmp	r3, #0
   1aa30:	d1fb      	bne.n	1aa2a <os_mbuf_append+0x16>
    }

    remainder = len;
   1aa32:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   1aa34:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1aa36:	f105 0410 	add.w	r4, r5, #16
   1aa3a:	881b      	ldrh	r3, [r3, #0]
   1aa3c:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   1aa3e:	6828      	ldr	r0, [r5, #0]
   1aa40:	88eb      	ldrh	r3, [r5, #6]
   1aa42:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1aa44:	1a24      	subs	r4, r4, r0
   1aa46:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   1aa48:	b164      	cbz	r4, 1aa64 <os_mbuf_append+0x50>
        if (space > remainder) {
   1aa4a:	454c      	cmp	r4, r9
   1aa4c:	dd00      	ble.n	1aa50 <os_mbuf_append+0x3c>
            space = remainder;
   1aa4e:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   1aa50:	4622      	mov	r2, r4
   1aa52:	4639      	mov	r1, r7
   1aa54:	f000 ff78 	bl	1b948 <memcpy>

        last->om_len += space;
   1aa58:	88eb      	ldrh	r3, [r5, #6]
   1aa5a:	4423      	add	r3, r4
   1aa5c:	80eb      	strh	r3, [r5, #6]
        data += space;
   1aa5e:	4427      	add	r7, r4
        remainder -= space;
   1aa60:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   1aa64:	2e00      	cmp	r6, #0
   1aa66:	dd16      	ble.n	1aa96 <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   1aa68:	2100      	movs	r1, #0
   1aa6a:	4640      	mov	r0, r8
   1aa6c:	f7ff ff78 	bl	1a960 <os_mbuf_get>
        if (!new) {
   1aa70:	4604      	mov	r4, r0
   1aa72:	b180      	cbz	r0, 1aa96 <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   1aa74:	f8b8 2000 	ldrh.w	r2, [r8]
   1aa78:	42b2      	cmp	r2, r6
   1aa7a:	bfa8      	it	ge
   1aa7c:	4632      	movge	r2, r6
   1aa7e:	b292      	uxth	r2, r2
   1aa80:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   1aa82:	4639      	mov	r1, r7
   1aa84:	6800      	ldr	r0, [r0, #0]
   1aa86:	f000 ff5f 	bl	1b948 <memcpy>
        data += new->om_len;
   1aa8a:	88e3      	ldrh	r3, [r4, #6]
   1aa8c:	441f      	add	r7, r3
        remainder -= new->om_len;
   1aa8e:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   1aa90:	60ec      	str	r4, [r5, #12]
        last = new;
   1aa92:	4625      	mov	r5, r4
   1aa94:	e7e6      	b.n	1aa64 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   1aa96:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1aa9a:	2b07      	cmp	r3, #7
   1aa9c:	d907      	bls.n	1aaae <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   1aa9e:	eba9 0906 	sub.w	r9, r9, r6
   1aaa2:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   1aaa6:	fa13 f989 	uxtah	r9, r3, r9
   1aaaa:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   1aaae:	b106      	cbz	r6, 1aab2 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   1aab0:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   1aab2:	4630      	mov	r0, r6
   1aab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   1aab8:	2602      	movs	r6, #2
   1aaba:	e7fa      	b.n	1aab2 <os_mbuf_append+0x9e>

0001aabc <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   1aabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aac0:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   1aac2:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   1aac6:	2700      	movs	r7, #0
    head = NULL;
   1aac8:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1aaca:	e017      	b.n	1aafc <os_mbuf_dup+0x40>
    startoff = 0;
   1aacc:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1aace:	4623      	mov	r3, r4
   1aad0:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1aad4:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1aad6:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   1aad8:	b299      	uxth	r1, r3
   1aada:	4640      	mov	r0, r8
   1aadc:	f7ff ff40 	bl	1a960 <os_mbuf_get>
   1aae0:	4605      	mov	r5, r0
   1aae2:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   1aae4:	b188      	cbz	r0, 1ab0a <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   1aae6:	7923      	ldrb	r3, [r4, #4]
   1aae8:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   1aaea:	88e3      	ldrh	r3, [r4, #6]
   1aaec:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   1aaee:	88e2      	ldrh	r2, [r4, #6]
   1aaf0:	6821      	ldr	r1, [r4, #0]
   1aaf2:	6828      	ldr	r0, [r5, #0]
   1aaf4:	f000 ff28 	bl	1b948 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1aaf8:	68e4      	ldr	r4, [r4, #12]
   1aafa:	462f      	mov	r7, r5
   1aafc:	b14c      	cbz	r4, 1ab12 <os_mbuf_dup+0x56>
        if (head) {
   1aafe:	b15e      	cbz	r6, 1ab18 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   1ab00:	7963      	ldrb	r3, [r4, #5]
   1ab02:	2b07      	cmp	r3, #7
   1ab04:	d9e2      	bls.n	1aacc <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   1ab06:	b299      	uxth	r1, r3
   1ab08:	e7e1      	b.n	1aace <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   1ab0a:	4630      	mov	r0, r6
   1ab0c:	f7ff ff66 	bl	1a9dc <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   1ab10:	462e      	mov	r6, r5
}
   1ab12:	4630      	mov	r0, r6
   1ab14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   1ab18:	7963      	ldrb	r3, [r4, #5]
   1ab1a:	2b07      	cmp	r3, #7
   1ab1c:	d911      	bls.n	1ab42 <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   1ab1e:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1ab20:	4623      	mov	r3, r4
   1ab22:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1ab26:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1ab28:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1ab2a:	b299      	uxth	r1, r3
   1ab2c:	4640      	mov	r0, r8
   1ab2e:	f7ff ff17 	bl	1a960 <os_mbuf_get>
            if (!head) {
   1ab32:	4606      	mov	r6, r0
   1ab34:	2800      	cmp	r0, #0
   1ab36:	d0ec      	beq.n	1ab12 <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   1ab38:	7963      	ldrb	r3, [r4, #5]
   1ab3a:	2b07      	cmp	r3, #7
   1ab3c:	d803      	bhi.n	1ab46 <os_mbuf_dup+0x8a>
            copy = head;
   1ab3e:	4605      	mov	r5, r0
   1ab40:	e7d1      	b.n	1aae6 <os_mbuf_dup+0x2a>
    startoff = 0;
   1ab42:	2100      	movs	r1, #0
   1ab44:	e7ec      	b.n	1ab20 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   1ab46:	88c3      	ldrh	r3, [r0, #6]
   1ab48:	b973      	cbnz	r3, 1ab68 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1ab4a:	f100 0510 	add.w	r5, r0, #16
   1ab4e:	7962      	ldrb	r2, [r4, #5]
   1ab50:	f104 0110 	add.w	r1, r4, #16
   1ab54:	4628      	mov	r0, r5
   1ab56:	f000 fef7 	bl	1b948 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   1ab5a:	7963      	ldrb	r3, [r4, #5]
   1ab5c:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   1ab5e:	7963      	ldrb	r3, [r4, #5]
   1ab60:	441d      	add	r5, r3
   1ab62:	6035      	str	r5, [r6, #0]
            copy = head;
   1ab64:	4635      	mov	r5, r6
   1ab66:	e7be      	b.n	1aae6 <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   1ab68:	2300      	movs	r3, #0
   1ab6a:	461a      	mov	r2, r3
   1ab6c:	4619      	mov	r1, r3
   1ab6e:	4618      	mov	r0, r3
   1ab70:	f7ff faf4 	bl	1a15c <__assert_func>

0001ab74 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   1ab74:	2800      	cmp	r0, #0
   1ab76:	d031      	beq.n	1abdc <os_mempool_init_internal+0x68>
{
   1ab78:	b430      	push	{r4, r5}
   1ab7a:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   1ab7c:	2a00      	cmp	r2, #0
   1ab7e:	d02f      	beq.n	1abe0 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   1ab80:	b1bb      	cbz	r3, 1abb2 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   1ab82:	b113      	cbz	r3, 1ab8a <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   1ab84:	f013 0f03 	tst.w	r3, #3
   1ab88:	d12c      	bne.n	1abe4 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   1ab8a:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   1ab8c:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   1ab8e:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   1ab90:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1ab94:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   1ab96:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   1ab98:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   1ab9a:	9802      	ldr	r0, [sp, #8]
   1ab9c:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   1ab9e:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   1aba0:	b199      	cbz	r1, 1abca <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   1aba2:	f012 0f03 	tst.w	r2, #3
   1aba6:	d002      	beq.n	1abae <os_mempool_init_internal+0x3a>
   1aba8:	f022 0203 	bic.w	r2, r2, #3
   1abac:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   1abae:	2001      	movs	r0, #1
   1abb0:	e007      	b.n	1abc2 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   1abb2:	2900      	cmp	r1, #0
   1abb4:	d0e5      	beq.n	1ab82 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   1abb6:	2003      	movs	r0, #3
   1abb8:	e00e      	b.n	1abd8 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   1abba:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   1abbc:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   1abbe:	3001      	adds	r0, #1
            block_addr += true_block_size;
   1abc0:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   1abc2:	4281      	cmp	r1, r0
   1abc4:	dcf9      	bgt.n	1abba <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   1abc6:	2200      	movs	r2, #0
   1abc8:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   1abca:	2000      	movs	r0, #0
   1abcc:	6120      	str	r0, [r4, #16]
   1abce:	4b06      	ldr	r3, [pc, #24]	; (1abe8 <os_mempool_init_internal+0x74>)
   1abd0:	685a      	ldr	r2, [r3, #4]
   1abd2:	6014      	str	r4, [r2, #0]
   1abd4:	3410      	adds	r4, #16
   1abd6:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   1abd8:	bc30      	pop	{r4, r5}
   1abda:	4770      	bx	lr
        return OS_INVALID_PARM;
   1abdc:	2003      	movs	r0, #3
}
   1abde:	4770      	bx	lr
        return OS_INVALID_PARM;
   1abe0:	2003      	movs	r0, #3
   1abe2:	e7f9      	b.n	1abd8 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   1abe4:	2004      	movs	r0, #4
   1abe6:	e7f7      	b.n	1abd8 <os_mempool_init_internal+0x64>
   1abe8:	2000c698 	.word	0x2000c698

0001abec <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   1abec:	b510      	push	{r4, lr}
   1abee:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   1abf0:	2400      	movs	r4, #0
   1abf2:	9401      	str	r4, [sp, #4]
   1abf4:	9c04      	ldr	r4, [sp, #16]
   1abf6:	9400      	str	r4, [sp, #0]
   1abf8:	f7ff ffbc 	bl	1ab74 <os_mempool_init_internal>
}
   1abfc:	b002      	add	sp, #8
   1abfe:	bd10      	pop	{r4, pc}

0001ac00 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   1ac00:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   1ac02:	b1a0      	cbz	r0, 1ac2e <os_memblock_get+0x2e>
   1ac04:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1ac06:	f000 fd3f 	bl	1b688 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   1ac0a:	88e3      	ldrh	r3, [r4, #6]
   1ac0c:	b153      	cbz	r3, 1ac24 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   1ac0e:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   1ac10:	682a      	ldr	r2, [r5, #0]
   1ac12:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   1ac14:	3b01      	subs	r3, #1
   1ac16:	b29b      	uxth	r3, r3
   1ac18:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   1ac1a:	8922      	ldrh	r2, [r4, #8]
   1ac1c:	4293      	cmp	r3, r2
   1ac1e:	d202      	bcs.n	1ac26 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   1ac20:	8123      	strh	r3, [r4, #8]
   1ac22:	e000      	b.n	1ac26 <os_memblock_get+0x26>
    block = NULL;
   1ac24:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   1ac26:	f000 fd35 	bl	1b694 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   1ac2a:	4628      	mov	r0, r5
   1ac2c:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   1ac2e:	2500      	movs	r5, #0
    return (void *)block;
   1ac30:	e7fb      	b.n	1ac2a <os_memblock_get+0x2a>

0001ac32 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   1ac32:	b538      	push	{r3, r4, r5, lr}
   1ac34:	4604      	mov	r4, r0
   1ac36:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   1ac38:	f000 fd26 	bl	1b688 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   1ac3c:	6963      	ldr	r3, [r4, #20]
   1ac3e:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   1ac40:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   1ac42:	88e3      	ldrh	r3, [r4, #6]
   1ac44:	3301      	adds	r3, #1
   1ac46:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   1ac48:	f000 fd24 	bl	1b694 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   1ac4c:	2000      	movs	r0, #0
   1ac4e:	bd38      	pop	{r3, r4, r5, pc}

0001ac50 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   1ac50:	b168      	cbz	r0, 1ac6e <os_memblock_put+0x1e>
{
   1ac52:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   1ac54:	b169      	cbz	r1, 1ac72 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   1ac56:	7a83      	ldrb	r3, [r0, #10]
   1ac58:	f013 0f01 	tst.w	r3, #1
   1ac5c:	d004      	beq.n	1ac68 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   1ac5e:	69c3      	ldr	r3, [r0, #28]
   1ac60:	b113      	cbz	r3, 1ac68 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   1ac62:	6a02      	ldr	r2, [r0, #32]
   1ac64:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   1ac66:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   1ac68:	f7ff ffe3 	bl	1ac32 <os_memblock_put_from_cb>
   1ac6c:	e7fb      	b.n	1ac66 <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   1ac6e:	2003      	movs	r0, #3
}
   1ac70:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1ac72:	2003      	movs	r0, #3
   1ac74:	e7f7      	b.n	1ac66 <os_memblock_put+0x16>
	...

0001ac78 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   1ac78:	4b02      	ldr	r3, [pc, #8]	; (1ac84 <os_mempool_module_init+0xc>)
   1ac7a:	2200      	movs	r2, #0
   1ac7c:	601a      	str	r2, [r3, #0]
   1ac7e:	605b      	str	r3, [r3, #4]
}
   1ac80:	4770      	bx	lr
   1ac82:	bf00      	nop
   1ac84:	2000c698 	.word	0x2000c698

0001ac88 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1ac88:	4b02      	ldr	r3, [pc, #8]	; (1ac94 <os_msys_find_biggest_pool+0xc>)
   1ac8a:	6818      	ldr	r0, [r3, #0]
   1ac8c:	b108      	cbz	r0, 1ac92 <os_msys_find_biggest_pool+0xa>
   1ac8e:	6858      	ldr	r0, [r3, #4]
   1ac90:	3808      	subs	r0, #8
}
   1ac92:	4770      	bx	lr
   1ac94:	2000010c 	.word	0x2000010c

0001ac98 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1ac98:	4b09      	ldr	r3, [pc, #36]	; (1acc0 <os_msys_find_pool+0x28>)
   1ac9a:	6819      	ldr	r1, [r3, #0]
   1ac9c:	460b      	mov	r3, r1
   1ac9e:	b123      	cbz	r3, 1acaa <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   1aca0:	881a      	ldrh	r2, [r3, #0]
   1aca2:	4282      	cmp	r2, r0
   1aca4:	d201      	bcs.n	1acaa <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1aca6:	689b      	ldr	r3, [r3, #8]
   1aca8:	e7f9      	b.n	1ac9e <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   1acaa:	b10b      	cbz	r3, 1acb0 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   1acac:	4618      	mov	r0, r3
   1acae:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1acb0:	b119      	cbz	r1, 1acba <os_msys_find_pool+0x22>
   1acb2:	4b03      	ldr	r3, [pc, #12]	; (1acc0 <os_msys_find_pool+0x28>)
   1acb4:	685b      	ldr	r3, [r3, #4]
   1acb6:	3b08      	subs	r3, #8
   1acb8:	e7f8      	b.n	1acac <os_msys_find_pool+0x14>
   1acba:	460b      	mov	r3, r1
    return (pool);
   1acbc:	e7f6      	b.n	1acac <os_msys_find_pool+0x14>
   1acbe:	bf00      	nop
   1acc0:	2000010c 	.word	0x2000010c

0001acc4 <os_msys_register>:
{
   1acc4:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1acc6:	4b11      	ldr	r3, [pc, #68]	; (1ad0c <os_msys_register+0x48>)
   1acc8:	681d      	ldr	r5, [r3, #0]
   1acca:	462b      	mov	r3, r5
    prev = NULL;
   1accc:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1acce:	b133      	cbz	r3, 1acde <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   1acd0:	8801      	ldrh	r1, [r0, #0]
   1acd2:	881a      	ldrh	r2, [r3, #0]
   1acd4:	4291      	cmp	r1, r2
   1acd6:	d302      	bcc.n	1acde <os_msys_register+0x1a>
        prev = pool;
   1acd8:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1acda:	689b      	ldr	r3, [r3, #8]
   1acdc:	e7f7      	b.n	1acce <os_msys_register+0xa>
    if (prev) {
   1acde:	b15c      	cbz	r4, 1acf8 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1ace0:	68a3      	ldr	r3, [r4, #8]
   1ace2:	6083      	str	r3, [r0, #8]
   1ace4:	b11b      	cbz	r3, 1acee <os_msys_register+0x2a>
   1ace6:	60a0      	str	r0, [r4, #8]
}
   1ace8:	2000      	movs	r0, #0
   1acea:	bc30      	pop	{r4, r5}
   1acec:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1acee:	f100 0308 	add.w	r3, r0, #8
   1acf2:	4a06      	ldr	r2, [pc, #24]	; (1ad0c <os_msys_register+0x48>)
   1acf4:	6053      	str	r3, [r2, #4]
   1acf6:	e7f6      	b.n	1ace6 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   1acf8:	6085      	str	r5, [r0, #8]
   1acfa:	b115      	cbz	r5, 1ad02 <os_msys_register+0x3e>
   1acfc:	4b03      	ldr	r3, [pc, #12]	; (1ad0c <os_msys_register+0x48>)
   1acfe:	6018      	str	r0, [r3, #0]
   1ad00:	e7f2      	b.n	1ace8 <os_msys_register+0x24>
   1ad02:	f100 0308 	add.w	r3, r0, #8
   1ad06:	4a01      	ldr	r2, [pc, #4]	; (1ad0c <os_msys_register+0x48>)
   1ad08:	6053      	str	r3, [r2, #4]
   1ad0a:	e7f7      	b.n	1acfc <os_msys_register+0x38>
   1ad0c:	2000010c 	.word	0x2000010c

0001ad10 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   1ad10:	b530      	push	{r4, r5, lr}
   1ad12:	b083      	sub	sp, #12
   1ad14:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1ad16:	9d07      	ldr	r5, [sp, #28]
   1ad18:	9501      	str	r5, [sp, #4]
   1ad1a:	9d06      	ldr	r5, [sp, #24]
   1ad1c:	9500      	str	r5, [sp, #0]
   1ad1e:	f001 f96d 	bl	1bffc <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1ad22:	b138      	cbz	r0, 1ad34 <os_msys_init_once+0x24>
   1ad24:	2000      	movs	r0, #0
   1ad26:	9000      	str	r0, [sp, #0]
   1ad28:	4b09      	ldr	r3, [pc, #36]	; (1ad50 <os_msys_init_once+0x40>)
   1ad2a:	681d      	ldr	r5, [r3, #0]
   1ad2c:	4603      	mov	r3, r0
   1ad2e:	4602      	mov	r2, r0
   1ad30:	4601      	mov	r1, r0
   1ad32:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   1ad34:	4620      	mov	r0, r4
   1ad36:	f7ff ffc5 	bl	1acc4 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1ad3a:	b138      	cbz	r0, 1ad4c <os_msys_init_once+0x3c>
   1ad3c:	2000      	movs	r0, #0
   1ad3e:	9000      	str	r0, [sp, #0]
   1ad40:	4b03      	ldr	r3, [pc, #12]	; (1ad50 <os_msys_init_once+0x40>)
   1ad42:	681c      	ldr	r4, [r3, #0]
   1ad44:	4603      	mov	r3, r0
   1ad46:	4602      	mov	r2, r0
   1ad48:	4601      	mov	r1, r0
   1ad4a:	47a0      	blx	r4
}
   1ad4c:	b003      	add	sp, #12
   1ad4e:	bd30      	pop	{r4, r5, pc}
   1ad50:	20000104 	.word	0x20000104

0001ad54 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   1ad54:	4b02      	ldr	r3, [pc, #8]	; (1ad60 <os_msys_reset+0xc>)
   1ad56:	2200      	movs	r2, #0
   1ad58:	601a      	str	r2, [r3, #0]
   1ad5a:	605b      	str	r3, [r3, #4]
}
   1ad5c:	4770      	bx	lr
   1ad5e:	bf00      	nop
   1ad60:	2000010c 	.word	0x2000010c

0001ad64 <os_msys_get_pkthdr>:
{
   1ad64:	b510      	push	{r4, lr}
   1ad66:	460c      	mov	r4, r1
    if (dsize == 0) {
   1ad68:	b930      	cbnz	r0, 1ad78 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   1ad6a:	f7ff ff8d 	bl	1ac88 <os_msys_find_biggest_pool>
    if (!pool) {
   1ad6e:	b158      	cbz	r0, 1ad88 <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   1ad70:	b2e1      	uxtb	r1, r4
   1ad72:	f7ff fe0e 	bl	1a992 <os_mbuf_get_pkthdr>
}
   1ad76:	bd10      	pop	{r4, pc}
   1ad78:	f101 0308 	add.w	r3, r1, #8
   1ad7c:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   1ad7e:	4403      	add	r3, r0
   1ad80:	b298      	uxth	r0, r3
   1ad82:	f7ff ff89 	bl	1ac98 <os_msys_find_pool>
   1ad86:	e7f2      	b.n	1ad6e <os_msys_get_pkthdr+0xa>
    return (NULL);
   1ad88:	2000      	movs	r0, #0
   1ad8a:	e7f4      	b.n	1ad76 <os_msys_get_pkthdr+0x12>

0001ad8c <os_msys_init>:

void
os_msys_init(void)
{
   1ad8c:	b500      	push	{lr}
   1ad8e:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   1ad90:	f7ff ffe0 	bl	1ad54 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   1ad94:	4b06      	ldr	r3, [pc, #24]	; (1adb0 <os_msys_init+0x24>)
   1ad96:	9301      	str	r3, [sp, #4]
   1ad98:	f44f 7392 	mov.w	r3, #292	; 0x124
   1ad9c:	9300      	str	r3, [sp, #0]
   1ad9e:	2340      	movs	r3, #64	; 0x40
   1ada0:	4a04      	ldr	r2, [pc, #16]	; (1adb4 <os_msys_init+0x28>)
   1ada2:	4905      	ldr	r1, [pc, #20]	; (1adb8 <os_msys_init+0x2c>)
   1ada4:	4805      	ldr	r0, [pc, #20]	; (1adbc <os_msys_init+0x30>)
   1ada6:	f7ff ffb3 	bl	1ad10 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   1adaa:	b003      	add	sp, #12
   1adac:	f85d fb04 	ldr.w	pc, [sp], #4
   1adb0:	00021c04 	.word	0x00021c04
   1adb4:	2000c188 	.word	0x2000c188
   1adb8:	2000c194 	.word	0x2000c194
   1adbc:	20007888 	.word	0x20007888

0001adc0 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   1adc0:	4603      	mov	r3, r0
   1adc2:	b128      	cbz	r0, 1add0 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   1adc4:	2000      	movs	r0, #0
   1adc6:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   1adc8:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   1adca:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   1adcc:	6018      	str	r0, [r3, #0]
   1adce:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1add0:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   1add2:	4770      	bx	lr

0001add4 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   1add4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1add6:	4b2c      	ldr	r3, [pc, #176]	; (1ae88 <os_mutex_release+0xb4>)
   1add8:	681b      	ldr	r3, [r3, #0]
   1adda:	2b00      	cmp	r3, #0
   1addc:	d04d      	beq.n	1ae7a <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1adde:	2800      	cmp	r0, #0
   1ade0:	d04d      	beq.n	1ae7e <os_mutex_release+0xaa>
   1ade2:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   1ade4:	f000 f97a 	bl	1b0dc <os_sched_get_current_task>
   1ade8:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1adea:	88e3      	ldrh	r3, [r4, #6]
   1adec:	2b00      	cmp	r3, #0
   1adee:	d048      	beq.n	1ae82 <os_mutex_release+0xae>
   1adf0:	68a2      	ldr	r2, [r4, #8]
   1adf2:	4282      	cmp	r2, r0
   1adf4:	d001      	beq.n	1adfa <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   1adf6:	2005      	movs	r0, #5
   1adf8:	e040      	b.n	1ae7c <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1adfa:	2b01      	cmp	r3, #1
   1adfc:	d003      	beq.n	1ae06 <os_mutex_release+0x32>
        --mu->mu_level;
   1adfe:	3b01      	subs	r3, #1
   1ae00:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1ae02:	2000      	movs	r0, #0
        goto done;
   1ae04:	e03a      	b.n	1ae7c <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   1ae06:	f000 fc3f 	bl	1b688 <os_arch_save_sr>
   1ae0a:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   1ae0c:	88e3      	ldrh	r3, [r4, #6]
   1ae0e:	3b01      	subs	r3, #1
   1ae10:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   1ae12:	7aea      	ldrb	r2, [r5, #11]
   1ae14:	7963      	ldrb	r3, [r4, #5]
   1ae16:	429a      	cmp	r2, r3
   1ae18:	d11e      	bne.n	1ae58 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1ae1a:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   1ae1c:	b146      	cbz	r6, 1ae30 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   1ae1e:	69f3      	ldr	r3, [r6, #28]
   1ae20:	b1fb      	cbz	r3, 1ae62 <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   1ae22:	4630      	mov	r0, r6
   1ae24:	f000 f9ae 	bl	1b184 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1ae28:	2301      	movs	r3, #1
   1ae2a:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   1ae2c:	7af3      	ldrb	r3, [r6, #11]
   1ae2e:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   1ae30:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   1ae32:	b116      	cbz	r6, 1ae3a <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   1ae34:	7bb3      	ldrb	r3, [r6, #14]
   1ae36:	3301      	adds	r3, #1
   1ae38:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1ae3a:	7bab      	ldrb	r3, [r5, #14]
   1ae3c:	3b01      	subs	r3, #1
   1ae3e:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   1ae40:	f000 fa1a 	bl	1b278 <os_sched_next_task>
   1ae44:	4604      	mov	r4, r0
    if (rdy != current) {
   1ae46:	4285      	cmp	r5, r0
   1ae48:	d010      	beq.n	1ae6c <os_mutex_release+0x98>
        resched = 1;
   1ae4a:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   1ae4c:	4638      	mov	r0, r7
   1ae4e:	f000 fc21 	bl	1b694 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1ae52:	b96d      	cbnz	r5, 1ae70 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   1ae54:	2000      	movs	r0, #0
   1ae56:	e011      	b.n	1ae7c <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   1ae58:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   1ae5a:	4628      	mov	r0, r5
   1ae5c:	f000 fa24 	bl	1b2a8 <os_sched_resort>
   1ae60:	e7db      	b.n	1ae1a <os_mutex_release+0x46>
        assert(rdy->t_obj);
   1ae62:	461a      	mov	r2, r3
   1ae64:	4619      	mov	r1, r3
   1ae66:	4618      	mov	r0, r3
   1ae68:	f7ff f978 	bl	1a15c <__assert_func>
    resched = 0;
   1ae6c:	2500      	movs	r5, #0
   1ae6e:	e7ed      	b.n	1ae4c <os_mutex_release+0x78>
        os_sched(rdy);
   1ae70:	4620      	mov	r0, r4
   1ae72:	f000 fa07 	bl	1b284 <os_sched>
    ret = OS_OK;
   1ae76:	2000      	movs	r0, #0
   1ae78:	e000      	b.n	1ae7c <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   1ae7a:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   1ae7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   1ae7e:	2003      	movs	r0, #3
   1ae80:	e7fc      	b.n	1ae7c <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   1ae82:	2005      	movs	r0, #5
   1ae84:	e7fa      	b.n	1ae7c <os_mutex_release+0xa8>
   1ae86:	bf00      	nop
   1ae88:	2000c688 	.word	0x2000c688

0001ae8c <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   1ae8c:	4b36      	ldr	r3, [pc, #216]	; (1af68 <os_mutex_pend+0xdc>)
   1ae8e:	681b      	ldr	r3, [r3, #0]
   1ae90:	2b00      	cmp	r3, #0
   1ae92:	d065      	beq.n	1af60 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1ae94:	2800      	cmp	r0, #0
   1ae96:	d065      	beq.n	1af64 <os_mutex_pend+0xd8>
{
   1ae98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae9c:	460f      	mov	r7, r1
   1ae9e:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   1aea0:	f000 fbf2 	bl	1b688 <os_arch_save_sr>
   1aea4:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   1aea6:	f000 f919 	bl	1b0dc <os_sched_get_current_task>
   1aeaa:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   1aeac:	88e3      	ldrh	r3, [r4, #6]
   1aeae:	b19b      	cbz	r3, 1aed8 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   1aeb0:	68a2      	ldr	r2, [r4, #8]
   1aeb2:	4282      	cmp	r2, r0
   1aeb4:	d01e      	beq.n	1aef4 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1aeb6:	b327      	cbz	r7, 1af02 <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   1aeb8:	7ad1      	ldrb	r1, [r2, #11]
   1aeba:	7ac3      	ldrb	r3, [r0, #11]
   1aebc:	4299      	cmp	r1, r3
   1aebe:	d825      	bhi.n	1af0c <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   1aec0:	6821      	ldr	r1, [r4, #0]
   1aec2:	b369      	cbz	r1, 1af20 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1aec4:	460b      	mov	r3, r1
    last = NULL;
   1aec6:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1aec8:	b32b      	cbz	r3, 1af16 <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   1aeca:	7ae8      	ldrb	r0, [r5, #11]
   1aecc:	7ada      	ldrb	r2, [r3, #11]
   1aece:	4290      	cmp	r0, r2
   1aed0:	d321      	bcc.n	1af16 <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   1aed2:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1aed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1aed6:	e7f7      	b.n	1aec8 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   1aed8:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   1aeda:	7ac3      	ldrb	r3, [r0, #11]
   1aedc:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   1aede:	7b83      	ldrb	r3, [r0, #14]
   1aee0:	3301      	adds	r3, #1
   1aee2:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   1aee4:	2301      	movs	r3, #1
   1aee6:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1aee8:	4640      	mov	r0, r8
   1aeea:	f000 fbd3 	bl	1b694 <os_arch_restore_sr>
        ret = OS_OK;
   1aeee:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   1aef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   1aef4:	3301      	adds	r3, #1
   1aef6:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1aef8:	4640      	mov	r0, r8
   1aefa:	f000 fbcb 	bl	1b694 <os_arch_restore_sr>
        ret = OS_OK;
   1aefe:	2000      	movs	r0, #0
        goto done;
   1af00:	e7f6      	b.n	1aef0 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   1af02:	4640      	mov	r0, r8
   1af04:	f000 fbc6 	bl	1b694 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   1af08:	2006      	movs	r0, #6
        goto done;
   1af0a:	e7f1      	b.n	1aef0 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   1af0c:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   1af0e:	68a0      	ldr	r0, [r4, #8]
   1af10:	f000 f9ca 	bl	1b2a8 <os_sched_resort>
   1af14:	e7d4      	b.n	1aec0 <os_mutex_pend+0x34>
    if (last) {
   1af16:	b11e      	cbz	r6, 1af20 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   1af18:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   1af1a:	64eb      	str	r3, [r5, #76]	; 0x4c
   1af1c:	64f5      	str	r5, [r6, #76]	; 0x4c
   1af1e:	e001      	b.n	1af24 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   1af20:	64e9      	str	r1, [r5, #76]	; 0x4c
   1af22:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   1af24:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   1af26:	7b6b      	ldrb	r3, [r5, #13]
   1af28:	f043 0304 	orr.w	r3, r3, #4
   1af2c:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   1af2e:	4639      	mov	r1, r7
   1af30:	4628      	mov	r0, r5
   1af32:	f000 f8df 	bl	1b0f4 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   1af36:	4640      	mov	r0, r8
   1af38:	f000 fbac 	bl	1b694 <os_arch_restore_sr>
    os_sched(NULL);
   1af3c:	2000      	movs	r0, #0
   1af3e:	f000 f9a1 	bl	1b284 <os_sched>
    OS_ENTER_CRITICAL(sr);
   1af42:	f000 fba1 	bl	1b688 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   1af46:	7b6b      	ldrb	r3, [r5, #13]
   1af48:	f023 0304 	bic.w	r3, r3, #4
   1af4c:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   1af4e:	f000 fba1 	bl	1b694 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   1af52:	68a3      	ldr	r3, [r4, #8]
   1af54:	42ab      	cmp	r3, r5
   1af56:	d001      	beq.n	1af5c <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   1af58:	2006      	movs	r0, #6
   1af5a:	e7c9      	b.n	1aef0 <os_mutex_pend+0x64>
        ret = OS_OK;
   1af5c:	2000      	movs	r0, #0
   1af5e:	e7c7      	b.n	1aef0 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   1af60:	2009      	movs	r0, #9
   1af62:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1af64:	2003      	movs	r0, #3
}
   1af66:	4770      	bx	lr
   1af68:	2000c688 	.word	0x2000c688

0001af6c <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   1af6c:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1af6e:	4b05      	ldr	r3, [pc, #20]	; (1af84 <os_sanity_check_list_lock+0x18>)
   1af70:	6818      	ldr	r0, [r3, #0]
   1af72:	b900      	cbnz	r0, 1af76 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1af74:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   1af76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1af7a:	4803      	ldr	r0, [pc, #12]	; (1af88 <os_sanity_check_list_lock+0x1c>)
   1af7c:	f7ff ff86 	bl	1ae8c <os_mutex_pend>
err:
   1af80:	e7f8      	b.n	1af74 <os_sanity_check_list_lock+0x8>
   1af82:	bf00      	nop
   1af84:	2000c688 	.word	0x2000c688
   1af88:	2000c6a0 	.word	0x2000c6a0

0001af8c <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   1af8c:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1af8e:	4b04      	ldr	r3, [pc, #16]	; (1afa0 <os_sanity_check_list_unlock+0x14>)
   1af90:	6818      	ldr	r0, [r3, #0]
   1af92:	b900      	cbnz	r0, 1af96 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1af94:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   1af96:	4803      	ldr	r0, [pc, #12]	; (1afa4 <os_sanity_check_list_unlock+0x18>)
   1af98:	f7ff ff1c 	bl	1add4 <os_mutex_release>
err:
   1af9c:	e7fa      	b.n	1af94 <os_sanity_check_list_unlock+0x8>
   1af9e:	bf00      	nop
   1afa0:	2000c688 	.word	0x2000c688
   1afa4:	2000c6a0 	.word	0x2000c6a0

0001afa8 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   1afa8:	2300      	movs	r3, #0
   1afaa:	6003      	str	r3, [r0, #0]
   1afac:	6043      	str	r3, [r0, #4]
   1afae:	6083      	str	r3, [r0, #8]
   1afb0:	60c3      	str	r3, [r0, #12]
   1afb2:	6103      	str	r3, [r0, #16]
}
   1afb4:	4618      	mov	r0, r3
   1afb6:	4770      	bx	lr

0001afb8 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   1afb8:	b510      	push	{r4, lr}
   1afba:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   1afbc:	f7ff ffd6 	bl	1af6c <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   1afc0:	4603      	mov	r3, r0
   1afc2:	b108      	cbz	r0, 1afc8 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   1afc4:	4618      	mov	r0, r3
   1afc6:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   1afc8:	4b03      	ldr	r3, [pc, #12]	; (1afd8 <os_sanity_check_register+0x20>)
   1afca:	681a      	ldr	r2, [r3, #0]
   1afcc:	6122      	str	r2, [r4, #16]
   1afce:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   1afd0:	f7ff ffdc 	bl	1af8c <os_sanity_check_list_unlock>
   1afd4:	4603      	mov	r3, r0
err:
   1afd6:	e7f5      	b.n	1afc4 <os_sanity_check_register+0xc>
   1afd8:	2000c1b0 	.word	0x2000c1b0

0001afdc <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   1afdc:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1afde:	f7ff ffc5 	bl	1af6c <os_sanity_check_list_lock>
    if (rc != 0) {
   1afe2:	b910      	cbnz	r0, 1afea <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1afe4:	4b17      	ldr	r3, [pc, #92]	; (1b044 <os_sanity_run+0x68>)
   1afe6:	681c      	ldr	r4, [r3, #0]
   1afe8:	e00e      	b.n	1b008 <os_sanity_run+0x2c>
        assert(0);
   1afea:	2300      	movs	r3, #0
   1afec:	461a      	mov	r2, r3
   1afee:	4619      	mov	r1, r3
   1aff0:	4618      	mov	r0, r3
   1aff2:	f7ff f8b3 	bl	1a15c <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1aff6:	f000 facf 	bl	1b598 <os_time_get>
   1affa:	6823      	ldr	r3, [r4, #0]
   1affc:	6862      	ldr	r2, [r4, #4]
   1affe:	4413      	add	r3, r2
   1b000:	1ac3      	subs	r3, r0, r3
   1b002:	2b00      	cmp	r3, #0
   1b004:	dc0d      	bgt.n	1b022 <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1b006:	6924      	ldr	r4, [r4, #16]
   1b008:	b18c      	cbz	r4, 1b02e <os_sanity_run+0x52>
        if (sc->sc_func) {
   1b00a:	68a3      	ldr	r3, [r4, #8]
   1b00c:	2b00      	cmp	r3, #0
   1b00e:	d0f2      	beq.n	1aff6 <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   1b010:	68e1      	ldr	r1, [r4, #12]
   1b012:	4620      	mov	r0, r4
   1b014:	4798      	blx	r3
            if (rc == OS_OK) {
   1b016:	2800      	cmp	r0, #0
   1b018:	d1ed      	bne.n	1aff6 <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   1b01a:	f000 fabd 	bl	1b598 <os_time_get>
   1b01e:	6020      	str	r0, [r4, #0]
                continue;
   1b020:	e7f1      	b.n	1b006 <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1b022:	2300      	movs	r3, #0
   1b024:	461a      	mov	r2, r3
   1b026:	4619      	mov	r1, r3
   1b028:	4618      	mov	r0, r3
   1b02a:	f7ff f897 	bl	1a15c <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   1b02e:	f7ff ffad 	bl	1af8c <os_sanity_check_list_unlock>
    if (rc != 0) {
   1b032:	b900      	cbnz	r0, 1b036 <os_sanity_run+0x5a>
        assert(0);
    }
}
   1b034:	bd10      	pop	{r4, pc}
        assert(0);
   1b036:	2300      	movs	r3, #0
   1b038:	461a      	mov	r2, r3
   1b03a:	4619      	mov	r1, r3
   1b03c:	4618      	mov	r0, r3
   1b03e:	f7ff f88d 	bl	1a15c <__assert_func>
   1b042:	bf00      	nop
   1b044:	2000c1b0 	.word	0x2000c1b0

0001b048 <os_sanity_init>:

int
os_sanity_init(void)
{
   1b048:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   1b04a:	4802      	ldr	r0, [pc, #8]	; (1b054 <os_sanity_init+0xc>)
   1b04c:	f7ff feb8 	bl	1adc0 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   1b050:	bd08      	pop	{r3, pc}
   1b052:	bf00      	nop
   1b054:	2000c6a0 	.word	0x2000c6a0

0001b058 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   1b058:	7b03      	ldrb	r3, [r0, #12]
   1b05a:	2b01      	cmp	r3, #1
   1b05c:	d001      	beq.n	1b062 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   1b05e:	2002      	movs	r0, #2
}
   1b060:	4770      	bx	lr
{
   1b062:	b510      	push	{r4, lr}
   1b064:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1b066:	f000 fb0f 	bl	1b688 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1b06a:	4b0f      	ldr	r3, [pc, #60]	; (1b0a8 <os_sched_insert+0x50>)
   1b06c:	681b      	ldr	r3, [r3, #0]
   1b06e:	b12b      	cbz	r3, 1b07c <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   1b070:	7ae1      	ldrb	r1, [r4, #11]
   1b072:	7ada      	ldrb	r2, [r3, #11]
   1b074:	4291      	cmp	r1, r2
   1b076:	d301      	bcc.n	1b07c <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1b078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b07a:	e7f8      	b.n	1b06e <os_sched_insert+0x16>
    if (entry) {
   1b07c:	b153      	cbz	r3, 1b094 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   1b07e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b080:	64a2      	str	r2, [r4, #72]	; 0x48
   1b082:	6463      	str	r3, [r4, #68]	; 0x44
   1b084:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b086:	6014      	str	r4, [r2, #0]
   1b088:	3444      	adds	r4, #68	; 0x44
   1b08a:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1b08c:	f000 fb02 	bl	1b694 <os_arch_restore_sr>
    return (0);
   1b090:	2000      	movs	r0, #0
}
   1b092:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   1b094:	2300      	movs	r3, #0
   1b096:	6463      	str	r3, [r4, #68]	; 0x44
   1b098:	4b03      	ldr	r3, [pc, #12]	; (1b0a8 <os_sched_insert+0x50>)
   1b09a:	685a      	ldr	r2, [r3, #4]
   1b09c:	64a2      	str	r2, [r4, #72]	; 0x48
   1b09e:	6014      	str	r4, [r2, #0]
   1b0a0:	3444      	adds	r4, #68	; 0x44
   1b0a2:	605c      	str	r4, [r3, #4]
   1b0a4:	e7f2      	b.n	1b08c <os_sched_insert+0x34>
   1b0a6:	bf00      	nop
   1b0a8:	20000114 	.word	0x20000114

0001b0ac <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   1b0ac:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1b0ae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1b0b0:	3301      	adds	r3, #1
   1b0b2:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   1b0b4:	4b06      	ldr	r3, [pc, #24]	; (1b0d0 <os_sched_ctx_sw_hook+0x24>)
   1b0b6:	681c      	ldr	r4, [r3, #0]
   1b0b8:	4b06      	ldr	r3, [pc, #24]	; (1b0d4 <os_sched_ctx_sw_hook+0x28>)
   1b0ba:	6818      	ldr	r0, [r3, #0]
   1b0bc:	4906      	ldr	r1, [pc, #24]	; (1b0d8 <os_sched_ctx_sw_hook+0x2c>)
   1b0be:	680b      	ldr	r3, [r1, #0]
   1b0c0:	1ac2      	subs	r2, r0, r3
   1b0c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1b0c4:	4413      	add	r3, r2
   1b0c6:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   1b0c8:	6008      	str	r0, [r1, #0]
}
   1b0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b0ce:	4770      	bx	lr
   1b0d0:	2000c6b0 	.word	0x2000c6b0
   1b0d4:	2000c6c0 	.word	0x2000c6c0
   1b0d8:	2000c6ac 	.word	0x2000c6ac

0001b0dc <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   1b0dc:	4b01      	ldr	r3, [pc, #4]	; (1b0e4 <os_sched_get_current_task+0x8>)
   1b0de:	6818      	ldr	r0, [r3, #0]
   1b0e0:	4770      	bx	lr
   1b0e2:	bf00      	nop
   1b0e4:	2000c6b0 	.word	0x2000c6b0

0001b0e8 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   1b0e8:	4b01      	ldr	r3, [pc, #4]	; (1b0f0 <os_sched_set_current_task+0x8>)
   1b0ea:	6018      	str	r0, [r3, #0]
}
   1b0ec:	4770      	bx	lr
   1b0ee:	bf00      	nop
   1b0f0:	2000c6b0 	.word	0x2000c6b0

0001b0f4 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   1b0f4:	b538      	push	{r3, r4, r5, lr}
   1b0f6:	4604      	mov	r4, r0
   1b0f8:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b0fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b0fc:	b1d3      	cbz	r3, 1b134 <os_sched_sleep+0x40>
   1b0fe:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b100:	649a      	str	r2, [r3, #72]	; 0x48
   1b102:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1b104:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1b106:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   1b108:	2302      	movs	r3, #2
   1b10a:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1b10c:	f000 fa44 	bl	1b598 <os_time_get>
   1b110:	4428      	add	r0, r5
   1b112:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   1b114:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1b118:	d010      	beq.n	1b13c <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1b11a:	4b18      	ldr	r3, [pc, #96]	; (1b17c <os_sched_sleep+0x88>)
   1b11c:	681b      	ldr	r3, [r3, #0]
   1b11e:	b1d3      	cbz	r3, 1b156 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1b120:	7b5a      	ldrb	r2, [r3, #13]
   1b122:	f012 0f01 	tst.w	r2, #1
   1b126:	d116      	bne.n	1b156 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   1b128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1b12a:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1b12c:	2a00      	cmp	r2, #0
   1b12e:	dc12      	bgt.n	1b156 <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1b130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b132:	e7f4      	b.n	1b11e <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b134:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b136:	4b12      	ldr	r3, [pc, #72]	; (1b180 <os_sched_sleep+0x8c>)
   1b138:	605a      	str	r2, [r3, #4]
   1b13a:	e7e2      	b.n	1b102 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   1b13c:	7b63      	ldrb	r3, [r4, #13]
   1b13e:	f043 0301 	orr.w	r3, r3, #1
   1b142:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1b144:	2300      	movs	r3, #0
   1b146:	6463      	str	r3, [r4, #68]	; 0x44
   1b148:	4b0c      	ldr	r3, [pc, #48]	; (1b17c <os_sched_sleep+0x88>)
   1b14a:	685a      	ldr	r2, [r3, #4]
   1b14c:	64a2      	str	r2, [r4, #72]	; 0x48
   1b14e:	6014      	str	r4, [r2, #0]
   1b150:	3444      	adds	r4, #68	; 0x44
   1b152:	605c      	str	r4, [r3, #4]
   1b154:	e007      	b.n	1b166 <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   1b156:	b143      	cbz	r3, 1b16a <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   1b158:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b15a:	64a2      	str	r2, [r4, #72]	; 0x48
   1b15c:	6463      	str	r3, [r4, #68]	; 0x44
   1b15e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b160:	6014      	str	r4, [r2, #0]
   1b162:	3444      	adds	r4, #68	; 0x44
   1b164:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   1b166:	2000      	movs	r0, #0
   1b168:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1b16a:	2300      	movs	r3, #0
   1b16c:	6463      	str	r3, [r4, #68]	; 0x44
   1b16e:	4b03      	ldr	r3, [pc, #12]	; (1b17c <os_sched_sleep+0x88>)
   1b170:	685a      	ldr	r2, [r3, #4]
   1b172:	64a2      	str	r2, [r4, #72]	; 0x48
   1b174:	6014      	str	r4, [r2, #0]
   1b176:	3444      	adds	r4, #68	; 0x44
   1b178:	605c      	str	r4, [r3, #4]
   1b17a:	e7f4      	b.n	1b166 <os_sched_sleep+0x72>
   1b17c:	2000011c 	.word	0x2000011c
   1b180:	20000114 	.word	0x20000114

0001b184 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   1b184:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   1b186:	7b03      	ldrb	r3, [r0, #12]
   1b188:	2b02      	cmp	r3, #2
   1b18a:	d108      	bne.n	1b19e <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1b18c:	69c3      	ldr	r3, [r0, #28]
   1b18e:	b1db      	cbz	r3, 1b1c8 <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1b190:	681a      	ldr	r2, [r3, #0]
   1b192:	b152      	cbz	r2, 1b1aa <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1b194:	4282      	cmp	r2, r0
   1b196:	d10f      	bne.n	1b1b8 <os_sched_wakeup+0x34>
   1b198:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1b19a:	601a      	str	r2, [r3, #0]
   1b19c:	e011      	b.n	1b1c2 <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   1b19e:	2300      	movs	r3, #0
   1b1a0:	461a      	mov	r2, r3
   1b1a2:	4619      	mov	r1, r3
   1b1a4:	4618      	mov	r0, r3
   1b1a6:	f7fe ffd9 	bl	1a15c <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1b1aa:	2300      	movs	r3, #0
   1b1ac:	461a      	mov	r2, r3
   1b1ae:	4619      	mov	r1, r3
   1b1b0:	4618      	mov	r0, r3
   1b1b2:	f7fe ffd3 	bl	1a15c <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1b1b6:	461a      	mov	r2, r3
   1b1b8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1b1ba:	4283      	cmp	r3, r0
   1b1bc:	d1fb      	bne.n	1b1b6 <os_sched_wakeup+0x32>
   1b1be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b1c0:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   1b1c2:	2300      	movs	r3, #0
   1b1c4:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   1b1c6:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1b1c8:	2301      	movs	r3, #1
   1b1ca:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   1b1cc:	2300      	movs	r3, #0
   1b1ce:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   1b1d0:	7b43      	ldrb	r3, [r0, #13]
   1b1d2:	f023 0301 	bic.w	r3, r3, #1
   1b1d6:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1b1d8:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b1da:	b143      	cbz	r3, 1b1ee <os_sched_wakeup+0x6a>
   1b1dc:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b1de:	649a      	str	r2, [r3, #72]	; 0x48
   1b1e0:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1b1e2:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1b1e4:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1b1e6:	f7ff ff37 	bl	1b058 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   1b1ea:	2000      	movs	r0, #0
   1b1ec:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1b1ee:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b1f0:	4b01      	ldr	r3, [pc, #4]	; (1b1f8 <os_sched_wakeup+0x74>)
   1b1f2:	605a      	str	r2, [r3, #4]
   1b1f4:	e7f4      	b.n	1b1e0 <os_sched_wakeup+0x5c>
   1b1f6:	bf00      	nop
   1b1f8:	2000011c 	.word	0x2000011c

0001b1fc <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1b1fc:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1b1fe:	f000 f9cb 	bl	1b598 <os_time_get>
   1b202:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1b204:	f000 fa40 	bl	1b688 <os_arch_save_sr>
   1b208:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1b20a:	4b0a      	ldr	r3, [pc, #40]	; (1b234 <os_sched_os_timer_exp+0x38>)
   1b20c:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1b20e:	b160      	cbz	r0, 1b22a <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   1b210:	7b43      	ldrb	r3, [r0, #13]
   1b212:	f013 0f01 	tst.w	r3, #1
   1b216:	d108      	bne.n	1b22a <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   1b218:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   1b21a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1b21c:	1aeb      	subs	r3, r5, r3
   1b21e:	2b00      	cmp	r3, #0
   1b220:	db03      	blt.n	1b22a <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   1b222:	f7ff ffaf 	bl	1b184 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   1b226:	4620      	mov	r0, r4
   1b228:	e7f1      	b.n	1b20e <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   1b22a:	4630      	mov	r0, r6
   1b22c:	f000 fa32 	bl	1b694 <os_arch_restore_sr>
}
   1b230:	bd70      	pop	{r4, r5, r6, pc}
   1b232:	bf00      	nop
   1b234:	2000011c 	.word	0x2000011c

0001b238 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   1b238:	b510      	push	{r4, lr}
   1b23a:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   1b23c:	f000 fa2d 	bl	1b69a <os_arch_in_critical>
   1b240:	b150      	cbz	r0, 1b258 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   1b242:	4b0c      	ldr	r3, [pc, #48]	; (1b274 <os_sched_wakeup_ticks+0x3c>)
   1b244:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   1b246:	b17b      	cbz	r3, 1b268 <os_sched_wakeup_ticks+0x30>
   1b248:	7b5a      	ldrb	r2, [r3, #13]
   1b24a:	f012 0f01 	tst.w	r2, #1
   1b24e:	d10e      	bne.n	1b26e <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   1b250:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1b252:	1b00      	subs	r0, r0, r4
   1b254:	d406      	bmi.n	1b264 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   1b256:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1b258:	2300      	movs	r3, #0
   1b25a:	461a      	mov	r2, r3
   1b25c:	4619      	mov	r1, r3
   1b25e:	4618      	mov	r0, r3
   1b260:	f7fe ff7c 	bl	1a15c <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   1b264:	2000      	movs	r0, #0
   1b266:	e7f6      	b.n	1b256 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   1b268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b26c:	e7f3      	b.n	1b256 <os_sched_wakeup_ticks+0x1e>
   1b26e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1b272:	e7f0      	b.n	1b256 <os_sched_wakeup_ticks+0x1e>
   1b274:	2000011c 	.word	0x2000011c

0001b278 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   1b278:	4b01      	ldr	r3, [pc, #4]	; (1b280 <os_sched_next_task+0x8>)
   1b27a:	6818      	ldr	r0, [r3, #0]
   1b27c:	4770      	bx	lr
   1b27e:	bf00      	nop
   1b280:	20000114 	.word	0x20000114

0001b284 <os_sched>:
{
   1b284:	b538      	push	{r3, r4, r5, lr}
   1b286:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1b288:	f000 f9fe 	bl	1b688 <os_arch_save_sr>
   1b28c:	4605      	mov	r5, r0
    if (!next_t) {
   1b28e:	b134      	cbz	r4, 1b29e <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   1b290:	4620      	mov	r0, r4
   1b292:	f000 f9ef 	bl	1b674 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   1b296:	4628      	mov	r0, r5
   1b298:	f000 f9fc 	bl	1b694 <os_arch_restore_sr>
}
   1b29c:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1b29e:	f7ff ffeb 	bl	1b278 <os_sched_next_task>
   1b2a2:	4604      	mov	r4, r0
   1b2a4:	e7f4      	b.n	1b290 <os_sched+0xc>
	...

0001b2a8 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   1b2a8:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   1b2aa:	7b03      	ldrb	r3, [r0, #12]
   1b2ac:	2b01      	cmp	r3, #1
   1b2ae:	d000      	beq.n	1b2b2 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1b2b0:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b2b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b2b4:	b13b      	cbz	r3, 1b2c6 <os_sched_resort+0x1e>
   1b2b6:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b2b8:	649a      	str	r2, [r3, #72]	; 0x48
   1b2ba:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1b2bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1b2be:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1b2c0:	f7ff feca 	bl	1b058 <os_sched_insert>
}
   1b2c4:	e7f4      	b.n	1b2b0 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b2c6:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b2c8:	4b01      	ldr	r3, [pc, #4]	; (1b2d0 <os_sched_resort+0x28>)
   1b2ca:	605a      	str	r2, [r3, #4]
   1b2cc:	e7f5      	b.n	1b2ba <os_sched_resort+0x12>
   1b2ce:	bf00      	nop
   1b2d0:	20000114 	.word	0x20000114

0001b2d4 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   1b2d4:	4603      	mov	r3, r0
   1b2d6:	b118      	cbz	r0, 1b2e0 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   1b2d8:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   1b2da:	2000      	movs	r0, #0
   1b2dc:	6018      	str	r0, [r3, #0]
   1b2de:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1b2e0:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1b2e2:	4770      	bx	lr

0001b2e4 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   1b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   1b2e6:	4b17      	ldr	r3, [pc, #92]	; (1b344 <os_sem_release+0x60>)
   1b2e8:	681b      	ldr	r3, [r3, #0]
   1b2ea:	b33b      	cbz	r3, 1b33c <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1b2ec:	b340      	cbz	r0, 1b340 <os_sem_release+0x5c>
   1b2ee:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   1b2f0:	f7ff fef4 	bl	1b0dc <os_sched_get_current_task>
   1b2f4:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   1b2f6:	f000 f9c7 	bl	1b688 <os_arch_save_sr>
   1b2fa:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   1b2fc:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1b2fe:	b165      	cbz	r5, 1b31a <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1b300:	7b6b      	ldrb	r3, [r5, #13]
   1b302:	f023 0302 	bic.w	r3, r3, #2
   1b306:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   1b308:	4628      	mov	r0, r5
   1b30a:	f7ff ff3b 	bl	1b184 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   1b30e:	7afa      	ldrb	r2, [r7, #11]
   1b310:	7aeb      	ldrb	r3, [r5, #11]
   1b312:	429a      	cmp	r2, r3
   1b314:	d80b      	bhi.n	1b32e <os_sem_release+0x4a>
    resched = 0;
   1b316:	2400      	movs	r4, #0
   1b318:	e003      	b.n	1b322 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   1b31a:	88e3      	ldrh	r3, [r4, #6]
   1b31c:	3301      	adds	r3, #1
   1b31e:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   1b320:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1b322:	4630      	mov	r0, r6
   1b324:	f000 f9b6 	bl	1b694 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1b328:	b91c      	cbnz	r4, 1b332 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1b32a:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   1b32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   1b32e:	2401      	movs	r4, #1
   1b330:	e7f7      	b.n	1b322 <os_sem_release+0x3e>
        os_sched(rdy);
   1b332:	4628      	mov	r0, r5
   1b334:	f7ff ffa6 	bl	1b284 <os_sched>
    ret = OS_OK;
   1b338:	2000      	movs	r0, #0
   1b33a:	e7f7      	b.n	1b32c <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   1b33c:	2009      	movs	r0, #9
   1b33e:	e7f5      	b.n	1b32c <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   1b340:	2003      	movs	r0, #3
   1b342:	e7f3      	b.n	1b32c <os_sem_release+0x48>
   1b344:	2000c688 	.word	0x2000c688

0001b348 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   1b348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1b34a:	4b2c      	ldr	r3, [pc, #176]	; (1b3fc <os_sem_pend+0xb4>)
   1b34c:	681b      	ldr	r3, [r3, #0]
   1b34e:	2b00      	cmp	r3, #0
   1b350:	d04f      	beq.n	1b3f2 <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1b352:	2800      	cmp	r0, #0
   1b354:	d04f      	beq.n	1b3f6 <os_sem_pend+0xae>
   1b356:	460d      	mov	r5, r1
   1b358:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1b35a:	f7ff febf 	bl	1b0dc <os_sched_get_current_task>
   1b35e:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   1b360:	f000 f992 	bl	1b688 <os_arch_save_sr>
   1b364:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   1b366:	88e3      	ldrh	r3, [r4, #6]
   1b368:	b14b      	cbz	r3, 1b37e <os_sem_pend+0x36>
        sem->sem_tokens--;
   1b36a:	3b01      	subs	r3, #1
   1b36c:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1b36e:	2400      	movs	r4, #0
    sched = 0;
   1b370:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   1b372:	4638      	mov	r0, r7
   1b374:	f000 f98e 	bl	1b694 <os_arch_restore_sr>

    if (sched) {
   1b378:	bb45      	cbnz	r5, 1b3cc <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1b37a:	4620      	mov	r0, r4
   1b37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1b37e:	b315      	cbz	r5, 1b3c6 <os_sem_pend+0x7e>
        current->t_obj = sem;
   1b380:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   1b382:	7b73      	ldrb	r3, [r6, #13]
   1b384:	f043 0302 	orr.w	r3, r3, #2
   1b388:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1b38a:	f8d4 c000 	ldr.w	ip, [r4]
   1b38e:	f1bc 0f00 	cmp.w	ip, #0
   1b392:	d00e      	beq.n	1b3b2 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1b394:	4663      	mov	r3, ip
        last = NULL;
   1b396:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1b398:	b133      	cbz	r3, 1b3a8 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1b39a:	7af1      	ldrb	r1, [r6, #11]
   1b39c:	7ada      	ldrb	r2, [r3, #11]
   1b39e:	4291      	cmp	r1, r2
   1b3a0:	d302      	bcc.n	1b3a8 <os_sem_pend+0x60>
                last = entry;
   1b3a2:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1b3a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b3a6:	e7f7      	b.n	1b398 <os_sem_pend+0x50>
        if (last) {
   1b3a8:	b118      	cbz	r0, 1b3b2 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1b3aa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1b3ac:	64f3      	str	r3, [r6, #76]	; 0x4c
   1b3ae:	64c6      	str	r6, [r0, #76]	; 0x4c
   1b3b0:	e002      	b.n	1b3b8 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1b3b2:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   1b3b6:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   1b3b8:	4629      	mov	r1, r5
   1b3ba:	4630      	mov	r0, r6
   1b3bc:	f7ff fe9a 	bl	1b0f4 <os_sched_sleep>
        ret = OS_OK;
   1b3c0:	2400      	movs	r4, #0
        sched = 1;
   1b3c2:	2501      	movs	r5, #1
   1b3c4:	e7d5      	b.n	1b372 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1b3c6:	2406      	movs	r4, #6
    sched = 0;
   1b3c8:	2500      	movs	r5, #0
   1b3ca:	e7d2      	b.n	1b372 <os_sem_pend+0x2a>
        os_sched(NULL);
   1b3cc:	2000      	movs	r0, #0
   1b3ce:	f7ff ff59 	bl	1b284 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1b3d2:	7b73      	ldrb	r3, [r6, #13]
   1b3d4:	f013 0f02 	tst.w	r3, #2
   1b3d8:	d101      	bne.n	1b3de <os_sem_pend+0x96>
            ret = OS_OK;
   1b3da:	2400      	movs	r4, #0
   1b3dc:	e7cd      	b.n	1b37a <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1b3de:	f000 f953 	bl	1b688 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1b3e2:	7b73      	ldrb	r3, [r6, #13]
   1b3e4:	f023 0302 	bic.w	r3, r3, #2
   1b3e8:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   1b3ea:	f000 f953 	bl	1b694 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1b3ee:	2406      	movs	r4, #6
   1b3f0:	e7c3      	b.n	1b37a <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1b3f2:	2409      	movs	r4, #9
   1b3f4:	e7c1      	b.n	1b37a <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1b3f6:	2403      	movs	r4, #3
   1b3f8:	e7bf      	b.n	1b37a <os_sem_pend+0x32>
   1b3fa:	bf00      	nop
   1b3fc:	2000c688 	.word	0x2000c688

0001b400 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   1b400:	2300      	movs	r3, #0
   1b402:	e003      	b.n	1b40c <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   1b404:	4a03      	ldr	r2, [pc, #12]	; (1b414 <_clear_stack+0x14>)
   1b406:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1b40a:	3301      	adds	r3, #1
   1b40c:	428b      	cmp	r3, r1
   1b40e:	dbf9      	blt.n	1b404 <_clear_stack+0x4>
    }
}
   1b410:	4770      	bx	lr
   1b412:	bf00      	nop
   1b414:	deadbeef 	.word	0xdeadbeef

0001b418 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   1b418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b41c:	4604      	mov	r4, r0
   1b41e:	460f      	mov	r7, r1
   1b420:	4690      	mov	r8, r2
   1b422:	461d      	mov	r5, r3
   1b424:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   1b428:	2250      	movs	r2, #80	; 0x50
   1b42a:	2100      	movs	r1, #0
   1b42c:	f000 fa99 	bl	1b962 <memset>

    t->t_func = func;
   1b430:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   1b434:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   1b436:	f000 f927 	bl	1b688 <os_arch_save_sr>
    rc = g_task_id;
   1b43a:	4b2b      	ldr	r3, [pc, #172]	; (1b4e8 <os_task_init+0xd0>)
   1b43c:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   1b43e:	1c6a      	adds	r2, r5, #1
   1b440:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1b442:	f000 f927 	bl	1b694 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   1b446:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   1b448:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1b44c:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   1b44e:	2301      	movs	r3, #1
   1b450:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   1b452:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   1b454:	2300      	movs	r3, #0
   1b456:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   1b458:	f104 0720 	add.w	r7, r4, #32
   1b45c:	4638      	mov	r0, r7
   1b45e:	f7ff fda3 	bl	1afa8 <os_sanity_check_init>
    if (rc != OS_OK) {
   1b462:	4605      	mov	r5, r0
   1b464:	2800      	cmp	r0, #0
   1b466:	d132      	bne.n	1b4ce <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   1b468:	9b07      	ldr	r3, [sp, #28]
   1b46a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b46e:	d005      	beq.n	1b47c <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   1b470:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   1b472:	4638      	mov	r0, r7
   1b474:	f7ff fda0 	bl	1afb8 <os_sanity_check_register>
        if (rc != OS_OK) {
   1b478:	4605      	mov	r5, r0
   1b47a:	bb40      	cbnz	r0, 1b4ce <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   1b47c:	4631      	mov	r1, r6
   1b47e:	9808      	ldr	r0, [sp, #32]
   1b480:	f7ff ffbe 	bl	1b400 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   1b484:	9b08      	ldr	r3, [sp, #32]
   1b486:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1b48a:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   1b48c:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   1b48e:	4632      	mov	r2, r6
   1b490:	4620      	mov	r0, r4
   1b492:	f000 f907 	bl	1b6a4 <os_arch_task_stack_init>
   1b496:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1b498:	4b14      	ldr	r3, [pc, #80]	; (1b4ec <os_task_init+0xd4>)
   1b49a:	681b      	ldr	r3, [r3, #0]
   1b49c:	b15b      	cbz	r3, 1b4b6 <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   1b49e:	7ae1      	ldrb	r1, [r4, #11]
   1b4a0:	7ada      	ldrb	r2, [r3, #11]
   1b4a2:	4291      	cmp	r1, r2
   1b4a4:	d001      	beq.n	1b4aa <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1b4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b4a8:	e7f8      	b.n	1b49c <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   1b4aa:	2300      	movs	r3, #0
   1b4ac:	461a      	mov	r2, r3
   1b4ae:	4619      	mov	r1, r3
   1b4b0:	4618      	mov	r0, r3
   1b4b2:	f7fe fe53 	bl	1a15c <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1b4b6:	6423      	str	r3, [r4, #64]	; 0x40
   1b4b8:	4b0c      	ldr	r3, [pc, #48]	; (1b4ec <os_task_init+0xd4>)
   1b4ba:	685a      	ldr	r2, [r3, #4]
   1b4bc:	6014      	str	r4, [r2, #0]
   1b4be:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1b4c2:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   1b4c4:	4620      	mov	r0, r4
   1b4c6:	f7ff fdc7 	bl	1b058 <os_sched_insert>
   1b4ca:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   1b4cc:	b110      	cbz	r0, 1b4d4 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   1b4ce:	4628      	mov	r0, r5
   1b4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   1b4d4:	f7fe fefc 	bl	1a2d0 <os_started>
   1b4d8:	b908      	cbnz	r0, 1b4de <os_task_init+0xc6>
    return (0);
   1b4da:	4605      	mov	r5, r0
   1b4dc:	e7f7      	b.n	1b4ce <os_task_init+0xb6>
        os_sched(NULL);
   1b4de:	2000      	movs	r0, #0
   1b4e0:	f7ff fed0 	bl	1b284 <os_sched>
   1b4e4:	e7f3      	b.n	1b4ce <os_task_init+0xb6>
   1b4e6:	bf00      	nop
   1b4e8:	2000c6b4 	.word	0x2000c6b4
   1b4ec:	2000c6b8 	.word	0x2000c6b8

0001b4f0 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   1b4f0:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1b4f4:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1b4f6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1b4fa:	e9d1 4500 	ldrd	r4, r5, [r1]
   1b4fe:	eb14 0b03 	adds.w	fp, r4, r3
   1b502:	f145 0c00 	adc.w	ip, r5, #0
   1b506:	e9c2 bc00 	strd	fp, ip, [r2]
   1b50a:	688b      	ldr	r3, [r1, #8]
   1b50c:	f641 6184 	movw	r1, #7812	; 0x1e84
   1b510:	fb01 3000 	mla	r0, r1, r0, r3
   1b514:	6090      	str	r0, [r2, #8]
   1b516:	4b08      	ldr	r3, [pc, #32]	; (1b538 <os_deltatime+0x48>)
   1b518:	4298      	cmp	r0, r3
   1b51a:	dd0a      	ble.n	1b532 <os_deltatime+0x42>
   1b51c:	f11b 0401 	adds.w	r4, fp, #1
   1b520:	f14c 0500 	adc.w	r5, ip, #0
   1b524:	e9c2 4500 	strd	r4, r5, [r2]
   1b528:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1b52c:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   1b530:	6090      	str	r0, [r2, #8]
}
   1b532:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1b536:	4770      	bx	lr
   1b538:	000f423f 	.word	0x000f423f

0001b53c <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   1b53c:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   1b53e:	1e04      	subs	r4, r0, #0
   1b540:	db0d      	blt.n	1b55e <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   1b542:	f000 f8a1 	bl	1b688 <os_arch_save_sr>
   1b546:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   1b548:	4a11      	ldr	r2, [pc, #68]	; (1b590 <os_time_tick+0x54>)
   1b54a:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   1b54c:	18e0      	adds	r0, r4, r3
   1b54e:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   1b550:	ea90 0f03 	teq	r0, r3
   1b554:	d409      	bmi.n	1b56a <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   1b556:	4628      	mov	r0, r5
   1b558:	f000 f89c 	bl	1b694 <os_arch_restore_sr>
}
   1b55c:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   1b55e:	2300      	movs	r3, #0
   1b560:	461a      	mov	r2, r3
   1b562:	4619      	mov	r1, r3
   1b564:	4618      	mov	r0, r3
   1b566:	f7fe fdf9 	bl	1a15c <__assert_func>
        delta = g_os_time - basetod.ostime;
   1b56a:	4e0a      	ldr	r6, [pc, #40]	; (1b594 <os_time_tick+0x58>)
   1b56c:	4631      	mov	r1, r6
   1b56e:	f851 4b08 	ldr.w	r4, [r1], #8
   1b572:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   1b574:	460a      	mov	r2, r1
   1b576:	4620      	mov	r0, r4
   1b578:	f7ff ffba 	bl	1b4f0 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   1b57c:	f106 0118 	add.w	r1, r6, #24
   1b580:	460a      	mov	r2, r1
   1b582:	4620      	mov	r0, r4
   1b584:	f7ff ffb4 	bl	1b4f0 <os_deltatime>
        basetod.ostime = g_os_time;
   1b588:	4b01      	ldr	r3, [pc, #4]	; (1b590 <os_time_tick+0x54>)
   1b58a:	681b      	ldr	r3, [r3, #0]
   1b58c:	6033      	str	r3, [r6, #0]
   1b58e:	e7e2      	b.n	1b556 <os_time_tick+0x1a>
   1b590:	2000c6c0 	.word	0x2000c6c0
   1b594:	2000c1b8 	.word	0x2000c1b8

0001b598 <os_time_get>:
}
   1b598:	4b01      	ldr	r3, [pc, #4]	; (1b5a0 <os_time_get+0x8>)
   1b59a:	6818      	ldr	r0, [r3, #0]
   1b59c:	4770      	bx	lr
   1b59e:	bf00      	nop
   1b5a0:	2000c6c0 	.word	0x2000c6c0

0001b5a4 <os_time_advance>:

void
os_time_advance(int ticks)
{
   1b5a4:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1b5a6:	1e04      	subs	r4, r0, #0
   1b5a8:	db09      	blt.n	1b5be <os_time_advance+0x1a>

    if (ticks > 0) {
   1b5aa:	2c00      	cmp	r4, #0
   1b5ac:	dd06      	ble.n	1b5bc <os_time_advance+0x18>
        if (!os_started()) {
   1b5ae:	f7fe fe8f 	bl	1a2d0 <os_started>
   1b5b2:	b950      	cbnz	r0, 1b5ca <os_time_advance+0x26>
            g_os_time += ticks;
   1b5b4:	4a0a      	ldr	r2, [pc, #40]	; (1b5e0 <os_time_advance+0x3c>)
   1b5b6:	6813      	ldr	r3, [r2, #0]
   1b5b8:	441c      	add	r4, r3
   1b5ba:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   1b5bc:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   1b5be:	2300      	movs	r3, #0
   1b5c0:	461a      	mov	r2, r3
   1b5c2:	4619      	mov	r1, r3
   1b5c4:	4618      	mov	r0, r3
   1b5c6:	f7fe fdc9 	bl	1a15c <__assert_func>
            os_time_tick(ticks);
   1b5ca:	4620      	mov	r0, r4
   1b5cc:	f7ff ffb6 	bl	1b53c <os_time_tick>
            os_callout_tick();
   1b5d0:	f7fe ffa6 	bl	1a520 <os_callout_tick>
            os_sched_os_timer_exp();
   1b5d4:	f7ff fe12 	bl	1b1fc <os_sched_os_timer_exp>
            os_sched(NULL);
   1b5d8:	2000      	movs	r0, #0
   1b5da:	f7ff fe53 	bl	1b284 <os_sched>
}
   1b5de:	e7ed      	b.n	1b5bc <os_time_advance+0x18>
   1b5e0:	2000c6c0 	.word	0x2000c6c0

0001b5e4 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   1b5e4:	b900      	cbnz	r0, 1b5e8 <os_time_delay+0x4>
   1b5e6:	4770      	bx	lr
{
   1b5e8:	b538      	push	{r3, r4, r5, lr}
   1b5ea:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1b5ec:	f000 f84c 	bl	1b688 <os_arch_save_sr>
   1b5f0:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1b5f2:	f7ff fd73 	bl	1b0dc <os_sched_get_current_task>
   1b5f6:	4621      	mov	r1, r4
   1b5f8:	f7ff fd7c 	bl	1b0f4 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   1b5fc:	4628      	mov	r0, r5
   1b5fe:	f000 f849 	bl	1b694 <os_arch_restore_sr>
        os_sched(NULL);
   1b602:	2000      	movs	r0, #0
   1b604:	f7ff fe3e 	bl	1b284 <os_sched>
    }
}
   1b608:	bd38      	pop	{r3, r4, r5, pc}
	...

0001b60c <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   1b60c:	b570      	push	{r4, r5, r6, lr}
   1b60e:	4605      	mov	r5, r0
   1b610:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   1b612:	f000 f839 	bl	1b688 <os_arch_save_sr>
   1b616:	4606      	mov	r6, r0
    if (tv != NULL) {
   1b618:	b145      	cbz	r5, 1b62c <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1b61a:	f7ff ffbd 	bl	1b598 <os_time_get>
   1b61e:	4908      	ldr	r1, [pc, #32]	; (1b640 <os_gettimeofday+0x34>)
   1b620:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   1b624:	462a      	mov	r2, r5
   1b626:	1ac0      	subs	r0, r0, r3
   1b628:	f7ff ff62 	bl	1b4f0 <os_deltatime>
    }

    if (tz != NULL) {
   1b62c:	b114      	cbz	r4, 1b634 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   1b62e:	4b04      	ldr	r3, [pc, #16]	; (1b640 <os_gettimeofday+0x34>)
   1b630:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1b632:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   1b634:	4630      	mov	r0, r6
   1b636:	f000 f82d 	bl	1b694 <os_arch_restore_sr>

    return (0);
}
   1b63a:	2000      	movs	r0, #0
   1b63c:	bd70      	pop	{r4, r5, r6, pc}
   1b63e:	bf00      	nop
   1b640:	2000c1b8 	.word	0x2000c1b8

0001b644 <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   1b644:	b538      	push	{r3, r4, r5, lr}
   1b646:	4604      	mov	r4, r0
   1b648:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1b64a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b64e:	2300      	movs	r3, #0
   1b650:	01c0      	lsls	r0, r0, #7
   1b652:	0e61      	lsrs	r1, r4, #25
   1b654:	f002 f88a 	bl	1d76c <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   1b658:	2901      	cmp	r1, #1
   1b65a:	bf08      	it	eq
   1b65c:	2800      	cmpeq	r0, #0
   1b65e:	d202      	bcs.n	1b666 <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   1b660:	6028      	str	r0, [r5, #0]
    return 0;
   1b662:	2000      	movs	r0, #0
}
   1b664:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   1b666:	2002      	movs	r0, #2
   1b668:	e7fc      	b.n	1b664 <os_time_ms_to_ticks+0x20>

0001b66a <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   1b66a:	b508      	push	{r3, lr}
    os_time_advance(1);
   1b66c:	2001      	movs	r0, #1
   1b66e:	f7ff ff99 	bl	1b5a4 <os_time_advance>
}
   1b672:	bd08      	pop	{r3, pc}

0001b674 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   1b674:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1b676:	f7ff fd19 	bl	1b0ac <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1b67a:	4b02      	ldr	r3, [pc, #8]	; (1b684 <os_arch_ctx_sw+0x10>)
   1b67c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b680:	605a      	str	r2, [r3, #4]
}
   1b682:	bd08      	pop	{r3, pc}
   1b684:	e000ed00 	.word	0xe000ed00

0001b688 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b688:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b68c:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   1b68e:	f000 0001 	and.w	r0, r0, #1
   1b692:	4770      	bx	lr

0001b694 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   1b694:	b900      	cbnz	r0, 1b698 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1b696:	b662      	cpsie	i
        __enable_irq();
    }
}
   1b698:	4770      	bx	lr

0001b69a <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b69a:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   1b69e:	f000 0001 	and.w	r0, r0, #1
   1b6a2:	4770      	bx	lr

0001b6a4 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   1b6a4:	b570      	push	{r4, r5, r6, lr}
   1b6a6:	4606      	mov	r6, r0
   1b6a8:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1b6aa:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   1b6ae:	2309      	movs	r3, #9
   1b6b0:	e003      	b.n	1b6ba <os_arch_task_stack_init+0x16>
        s[i] = 0;
   1b6b2:	2200      	movs	r2, #0
   1b6b4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   1b6b8:	3301      	adds	r3, #1
   1b6ba:	2b0d      	cmp	r3, #13
   1b6bc:	ddf9      	ble.n	1b6b2 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1b6be:	4620      	mov	r0, r4
   1b6c0:	f000 f8b6 	bl	1b830 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   1b6c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1b6c8:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   1b6cc:	6973      	ldr	r3, [r6, #20]
   1b6ce:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1b6d2:	69b3      	ldr	r3, [r6, #24]
   1b6d4:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   1b6d8:	f06f 0302 	mvn.w	r3, #2
   1b6dc:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   1b6e0:	4620      	mov	r0, r4
   1b6e2:	bd70      	pop	{r4, r5, r6, pc}

0001b6e4 <os_arch_init>:

void
os_arch_init(void)
{
   1b6e4:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1b6e6:	4a04      	ldr	r2, [pc, #16]	; (1b6f8 <os_arch_init+0x14>)
   1b6e8:	6953      	ldr	r3, [r2, #20]
   1b6ea:	f043 0310 	orr.w	r3, r3, #16
   1b6ee:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   1b6f0:	f7fe fdf4 	bl	1a2dc <os_init_idle_task>
}
   1b6f4:	bd08      	pop	{r3, pc}
   1b6f6:	bf00      	nop
   1b6f8:	e000ed00 	.word	0xe000ed00

0001b6fc <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1b6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b6fe:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1b702:	b90c      	cbnz	r4, 1b708 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1b704:	2400      	movs	r4, #0
   1b706:	e009      	b.n	1b71c <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   1b708:	2007      	movs	r0, #7
   1b70a:	e02e      	b.n	1b76a <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1b70c:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1b710:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   1b714:	26ff      	movs	r6, #255	; 0xff
   1b716:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1b71a:	3401      	adds	r4, #1
   1b71c:	2cef      	cmp	r4, #239	; 0xef
   1b71e:	d9f5      	bls.n	1b70c <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1b720:	f06f 040d 	mvn.w	r4, #13
   1b724:	e007      	b.n	1b736 <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1b726:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1b728:	4e12      	ldr	r6, [pc, #72]	; (1b774 <os_arch_os_init+0x78>)
   1b72a:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1b72c:	3510      	adds	r5, #16
   1b72e:	4f12      	ldr	r7, [pc, #72]	; (1b778 <os_arch_os_init+0x7c>)
   1b730:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   1b734:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1b736:	2c25      	cmp	r4, #37	; 0x25
   1b738:	ddf5      	ble.n	1b726 <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1b73a:	4c0e      	ldr	r4, [pc, #56]	; (1b774 <os_arch_os_init+0x78>)
   1b73c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1b73e:	4e0f      	ldr	r6, [pc, #60]	; (1b77c <os_arch_os_init+0x80>)
   1b740:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1b742:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1b744:	4e0e      	ldr	r6, [pc, #56]	; (1b780 <os_arch_os_init+0x84>)
   1b746:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1b748:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1b74a:	4e0e      	ldr	r6, [pc, #56]	; (1b784 <os_arch_os_init+0x88>)
   1b74c:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b74e:	25e0      	movs	r5, #224	; 0xe0
   1b750:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   1b754:	2520      	movs	r5, #32
   1b756:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1b758:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1b75c:	f014 0f01 	tst.w	r4, #1
   1b760:	d004      	beq.n	1b76c <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1b762:	f8df c024 	ldr.w	ip, [pc, #36]	; 1b788 <os_arch_os_init+0x8c>
   1b766:	df00      	svc	0
        err = OS_OK;
   1b768:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1b76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1b76c:	f7ff ffba 	bl	1b6e4 <os_arch_init>
        err = OS_OK;
   1b770:	2000      	movs	r0, #0
   1b772:	e7fa      	b.n	1b76a <os_arch_os_init+0x6e>
   1b774:	e000ed00 	.word	0xe000ed00
   1b778:	0001b8cf 	.word	0x0001b8cf
   1b77c:	0001b837 	.word	0x0001b837
   1b780:	0001b87d 	.word	0x0001b87d
   1b784:	0001b8c3 	.word	0x0001b8c3
   1b788:	0001b6e5 	.word	0x0001b6e5

0001b78c <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1b78c:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1b78e:	f7ff fd73 	bl	1b278 <os_sched_next_task>
   1b792:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   1b794:	f7ff fca8 	bl	1b0e8 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1b798:	6823      	ldr	r3, [r4, #0]
   1b79a:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1b79c:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   1b7a0:	2106      	movs	r1, #6
   1b7a2:	2080      	movs	r0, #128	; 0x80
   1b7a4:	f000 fde8 	bl	1c378 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1b7a8:	4b03      	ldr	r3, [pc, #12]	; (1b7b8 <os_arch_start+0x2c>)
   1b7aa:	2201      	movs	r2, #1
   1b7ac:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1b7ae:	4620      	mov	r0, r4
   1b7b0:	f7ff ff60 	bl	1b674 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   1b7b4:	69a0      	ldr	r0, [r4, #24]
   1b7b6:	bd10      	pop	{r4, pc}
   1b7b8:	2000c688 	.word	0x2000c688

0001b7bc <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1b7bc:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1b7be:	4814      	ldr	r0, [pc, #80]	; (1b810 <os_arch_os_start+0x54>)
   1b7c0:	6800      	ldr	r0, [r0, #0]
   1b7c2:	3804      	subs	r0, #4
   1b7c4:	f000 f82a 	bl	1b81c <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b7c8:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1b7cc:	b9d4      	cbnz	r4, 1b804 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1b7ce:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1b7d2:	f004 0403 	and.w	r4, r4, #3
   1b7d6:	2c03      	cmp	r4, #3
   1b7d8:	d808      	bhi.n	1b7ec <os_arch_os_start+0x30>
   1b7da:	e8df f004 	tbb	[pc, r4]
   1b7de:	1515      	.short	0x1515
   1b7e0:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   1b7e2:	4c0c      	ldr	r4, [pc, #48]	; (1b814 <os_arch_os_start+0x58>)
   1b7e4:	6824      	ldr	r4, [r4, #0]
   1b7e6:	f014 0f01 	tst.w	r4, #1
   1b7ea:	d10f      	bne.n	1b80c <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   1b7ec:	f8df c028 	ldr.w	ip, [pc, #40]	; 1b818 <os_arch_os_start+0x5c>
   1b7f0:	df00      	svc	0
   1b7f2:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   1b7f4:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   1b7f6:	4c07      	ldr	r4, [pc, #28]	; (1b814 <os_arch_os_start+0x58>)
   1b7f8:	6824      	ldr	r4, [r4, #0]
   1b7fa:	f014 0f01 	tst.w	r4, #1
   1b7fe:	d1f5      	bne.n	1b7ec <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   1b800:	2008      	movs	r0, #8
   1b802:	e7f7      	b.n	1b7f4 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   1b804:	2007      	movs	r0, #7
   1b806:	e7f5      	b.n	1b7f4 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   1b808:	2008      	movs	r0, #8
   1b80a:	e7f3      	b.n	1b7f4 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   1b80c:	2008      	movs	r0, #8
   1b80e:	e7f1      	b.n	1b7f4 <os_arch_os_start+0x38>
   1b810:	2000c5e8 	.word	0x2000c5e8
   1b814:	2000c1e8 	.word	0x2000c1e8
   1b818:	0001b78d 	.word	0x0001b78d

0001b81c <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   1b81c:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   1b820:	4832      	ldr	r0, [pc, #200]	; (1b8ec <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1b822:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1b824:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1b826:	f380 8814 	msr	CONTROL, r0
        ISB
   1b82a:	f3bf 8f6f 	isb	sy
        BX      LR
   1b82e:	4770      	bx	lr

0001b830 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   1b830:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   1b834:	4770      	bx	lr

0001b836 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   1b836:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   1b83a:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   1b83c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   1b840:	b951      	cbnz	r1, 1b858 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1b842:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1b846:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   1b848:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1b84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   1b84e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   1b852:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   1b856:	4770      	bx	lr

0001b858 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1b858:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   1b85a:	4a25      	ldr	r2, [pc, #148]	; (1b8f0 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   1b85c:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   1b85e:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   1b860:	d809      	bhi.n	1b876 <SVC_Done>

        LDR     R4,=SVC_Table-4
   1b862:	4c24      	ldr	r4, [pc, #144]	; (1b8f4 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   1b864:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1b868:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   1b86c:	47a0      	blx	r4

        MRS     R12,PSP
   1b86e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   1b872:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0001b876 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1b876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   1b87a:	4770      	bx	lr

0001b87c <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1b87c:	4b1e      	ldr	r3, [pc, #120]	; (1b8f8 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   1b87e:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   1b880:	4b1e      	ldr	r3, [pc, #120]	; (1b8fc <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1b882:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   1b884:	4291      	cmp	r1, r2
        IT      EQ
   1b886:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   1b888:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   1b88a:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   1b88e:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   1b892:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   1b894:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   1b898:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1b89c:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1b8a0:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   1b8a2:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   1b8a6:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   1b8aa:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   1b8ae:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   1b8b0:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   1b8b4:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   1b8b8:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   1b8bc:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1b8c0:	4770      	bx	lr

0001b8c2 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1b8c2:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   1b8c4:	f7ff fed1 	bl	1b66a <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1b8c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   1b8cc:	4770      	bx	lr

0001b8ce <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1b8ce:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1b8d2:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   1b8d4:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   1b8d8:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   1b8dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1b8e0:	4668      	mov	r0, sp
        BL      os_default_irq
   1b8e2:	f7fe fc61 	bl	1a1a8 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   1b8e6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   1b8ea:	4770      	bx	lr
        LDR     R0,=os_flags
   1b8ec:	2000c1e8 	.word	0x2000c1e8
        LDR     R2,=SVC_Count
   1b8f0:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   1b8f4:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1b8f8:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   1b8fc:	2000c6b0 	.word	0x2000c6b0

0001b900 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   1b900:	b470      	push	{r4, r5, r6}
   1b902:	f04f 0500 	mov.w	r5, #0
   1b906:	f022 0603 	bic.w	r6, r2, #3
   1b90a:	e005      	b.n	1b918 <test1>

0001b90c <loop1>:
   1b90c:	5943      	ldr	r3, [r0, r5]
   1b90e:	594c      	ldr	r4, [r1, r5]
   1b910:	42a3      	cmp	r3, r4
   1b912:	d104      	bne.n	1b91e <res1>
   1b914:	f105 0504 	add.w	r5, r5, #4

0001b918 <test1>:
   1b918:	42b5      	cmp	r5, r6
   1b91a:	d1f7      	bne.n	1b90c <loop1>
   1b91c:	e00d      	b.n	1b93a <test2>

0001b91e <res1>:
   1b91e:	ba1b      	rev	r3, r3
   1b920:	ba24      	rev	r4, r4
   1b922:	1b1b      	subs	r3, r3, r4
   1b924:	bf8c      	ite	hi
   1b926:	2301      	movhi	r3, #1
   1b928:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   1b92c:	e009      	b.n	1b942 <done>

0001b92e <loop2>:
   1b92e:	5d43      	ldrb	r3, [r0, r5]
   1b930:	5d4c      	ldrb	r4, [r1, r5]
   1b932:	1b1b      	subs	r3, r3, r4
   1b934:	d105      	bne.n	1b942 <done>
   1b936:	f105 0501 	add.w	r5, r5, #1

0001b93a <test2>:
   1b93a:	4295      	cmp	r5, r2
   1b93c:	d1f7      	bne.n	1b92e <loop2>
   1b93e:	f04f 0300 	mov.w	r3, #0

0001b942 <done>:
   1b942:	4618      	mov	r0, r3
   1b944:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1b946:	4770      	bx	lr

0001b948 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1b948:	e001      	b.n	1b94e <test1>

0001b94a <loop1>:
   1b94a:	588b      	ldr	r3, [r1, r2]
   1b94c:	5083      	str	r3, [r0, r2]

0001b94e <test1>:
   1b94e:	3a04      	subs	r2, #4
   1b950:	d5fb      	bpl.n	1b94a <loop1>
   1b952:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1b956:	e001      	b.n	1b95c <test2>

0001b958 <loop2>:
   1b958:	5c8b      	ldrb	r3, [r1, r2]
   1b95a:	5483      	strb	r3, [r0, r2]

0001b95c <test2>:
   1b95c:	3a01      	subs	r2, #1
   1b95e:	d5fb      	bpl.n	1b958 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   1b960:	4770      	bx	lr

0001b962 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1b962:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1b964:	4605      	mov	r5, r0
   1b966:	b2c9      	uxtb	r1, r1
   1b968:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1b96c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1b970:	18ab      	adds	r3, r5, r2
   1b972:	2403      	movs	r4, #3
   1b974:	4023      	ands	r3, r4
   1b976:	1ad3      	subs	r3, r2, r3
   1b978:	d40b      	bmi.n	1b992 <memset+0x30>
   1b97a:	e001      	b.n	1b980 <memset+0x1e>
   1b97c:	3a01      	subs	r2, #1
   1b97e:	54a9      	strb	r1, [r5, r2]
   1b980:	429a      	cmp	r2, r3
   1b982:	d1fb      	bne.n	1b97c <memset+0x1a>
   1b984:	e000      	b.n	1b988 <memset+0x26>
   1b986:	50a9      	str	r1, [r5, r2]
   1b988:	3a04      	subs	r2, #4
   1b98a:	d5fc      	bpl.n	1b986 <memset+0x24>
   1b98c:	3204      	adds	r2, #4
   1b98e:	e000      	b.n	1b992 <memset+0x30>
   1b990:	54a9      	strb	r1, [r5, r2]
   1b992:	3a01      	subs	r2, #1
   1b994:	d5fc      	bpl.n	1b990 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1b996:	bc30      	pop	{r4, r5}
   1b998:	4770      	bx	lr

0001b99a <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1b99a:	b430      	push	{r4, r5}
   1b99c:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   1b99e:	1c55      	adds	r5, r2, #1
   1b9a0:	7813      	ldrb	r3, [r2, #0]
   1b9a2:	1c4c      	adds	r4, r1, #1
   1b9a4:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   1b9a6:	1a18      	subs	r0, r3, r0
   1b9a8:	d103      	bne.n	1b9b2 <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   1b9aa:	462a      	mov	r2, r5
   1b9ac:	4621      	mov	r1, r4
		if (d || !ch)
   1b9ae:	2b00      	cmp	r3, #0
   1b9b0:	d1f5      	bne.n	1b99e <strcmp+0x4>
			break;
	}

	return d;
}
   1b9b2:	bc30      	pop	{r4, r5}
   1b9b4:	4770      	bx	lr

0001b9b6 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1b9b6:	4603      	mov	r3, r0
	while (*ss)
   1b9b8:	e000      	b.n	1b9bc <strlen+0x6>
		ss++;
   1b9ba:	3301      	adds	r3, #1
	while (*ss)
   1b9bc:	781a      	ldrb	r2, [r3, #0]
   1b9be:	2a00      	cmp	r2, #0
   1b9c0:	d1fb      	bne.n	1b9ba <strlen+0x4>
	return ss - s;
}
   1b9c2:	1a18      	subs	r0, r3, r0
   1b9c4:	4770      	bx	lr

0001b9c6 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1b9c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b9ca:	b082      	sub	sp, #8
   1b9cc:	e9cd 0100 	strd	r0, r1, [sp]
   1b9d0:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1b9d2:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   1b9d6:	2401      	movs	r4, #1
   1b9d8:	2500      	movs	r5, #0
    while (num / d >= p->base)
   1b9da:	e004      	b.n	1b9e6 <ui2a+0x20>
        d *= p->base;
   1b9dc:	fb06 f305 	mul.w	r3, r6, r5
   1b9e0:	fba4 4506 	umull	r4, r5, r4, r6
   1b9e4:	441d      	add	r5, r3
    while (num / d >= p->base)
   1b9e6:	4622      	mov	r2, r4
   1b9e8:	462b      	mov	r3, r5
   1b9ea:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b9ee:	f001 febd 	bl	1d76c <__aeabi_uldivmod>
   1b9f2:	f899 6003 	ldrb.w	r6, [r9, #3]
   1b9f6:	2700      	movs	r7, #0
   1b9f8:	42b9      	cmp	r1, r7
   1b9fa:	bf08      	it	eq
   1b9fc:	42b0      	cmpeq	r0, r6
   1b9fe:	d2ed      	bcs.n	1b9dc <ui2a+0x16>
    int n = 0;
   1ba00:	f04f 0a00 	mov.w	sl, #0
   1ba04:	e007      	b.n	1ba16 <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1ba06:	2330      	movs	r3, #48	; 0x30
   1ba08:	441e      	add	r6, r3
   1ba0a:	f888 6000 	strb.w	r6, [r8]
            ++n;
   1ba0e:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1ba12:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   1ba16:	ea54 0305 	orrs.w	r3, r4, r5
   1ba1a:	d02e      	beq.n	1ba7a <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   1ba1c:	4622      	mov	r2, r4
   1ba1e:	462b      	mov	r3, r5
   1ba20:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ba24:	f001 fea2 	bl	1d76c <__aeabi_uldivmod>
   1ba28:	4606      	mov	r6, r0
   1ba2a:	460f      	mov	r7, r1
        num %= d;
   1ba2c:	4622      	mov	r2, r4
   1ba2e:	462b      	mov	r3, r5
   1ba30:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ba34:	f001 fe9a 	bl	1d76c <__aeabi_uldivmod>
   1ba38:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   1ba3c:	f899 2003 	ldrb.w	r2, [r9, #3]
   1ba40:	2300      	movs	r3, #0
   1ba42:	4620      	mov	r0, r4
   1ba44:	4629      	mov	r1, r5
   1ba46:	f001 fe91 	bl	1d76c <__aeabi_uldivmod>
   1ba4a:	4604      	mov	r4, r0
   1ba4c:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   1ba4e:	f1ba 0f00 	cmp.w	sl, #0
   1ba52:	d105      	bne.n	1ba60 <ui2a+0x9a>
   1ba54:	ea56 0307 	orrs.w	r3, r6, r7
   1ba58:	d102      	bne.n	1ba60 <ui2a+0x9a>
   1ba5a:	ea54 0305 	orrs.w	r3, r4, r5
   1ba5e:	d1da      	bne.n	1ba16 <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1ba60:	2f00      	cmp	r7, #0
   1ba62:	bf08      	it	eq
   1ba64:	2e0a      	cmpeq	r6, #10
   1ba66:	d3ce      	bcc.n	1ba06 <ui2a+0x40>
   1ba68:	f899 3002 	ldrb.w	r3, [r9, #2]
   1ba6c:	f013 0f04 	tst.w	r3, #4
   1ba70:	d001      	beq.n	1ba76 <ui2a+0xb0>
   1ba72:	2337      	movs	r3, #55	; 0x37
   1ba74:	e7c8      	b.n	1ba08 <ui2a+0x42>
   1ba76:	2357      	movs	r3, #87	; 0x57
   1ba78:	e7c6      	b.n	1ba08 <ui2a+0x42>
        }
    }
    *bf = 0;
   1ba7a:	2300      	movs	r3, #0
   1ba7c:	f888 3000 	strb.w	r3, [r8]
}
   1ba80:	b002      	add	sp, #8
   1ba82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ba86 <i2a>:

static void i2a(long long int num, struct param *p)
{
   1ba86:	b508      	push	{r3, lr}
    if (num < 0) {
   1ba88:	2800      	cmp	r0, #0
   1ba8a:	f171 0300 	sbcs.w	r3, r1, #0
   1ba8e:	db02      	blt.n	1ba96 <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1ba90:	f7ff ff99 	bl	1b9c6 <ui2a>
}
   1ba94:	bd08      	pop	{r3, pc}
        num = -num;
   1ba96:	4240      	negs	r0, r0
   1ba98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1ba9c:	7893      	ldrb	r3, [r2, #2]
   1ba9e:	f043 0301 	orr.w	r3, r3, #1
   1baa2:	7093      	strb	r3, [r2, #2]
   1baa4:	e7f4      	b.n	1ba90 <i2a+0xa>

0001baa6 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1baa6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1baaa:	b2db      	uxtb	r3, r3
   1baac:	2b09      	cmp	r3, #9
   1baae:	d90b      	bls.n	1bac8 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1bab0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1bab4:	b2db      	uxtb	r3, r3
   1bab6:	2b05      	cmp	r3, #5
   1bab8:	d908      	bls.n	1bacc <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1baba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1babe:	b2db      	uxtb	r3, r3
   1bac0:	2b05      	cmp	r3, #5
   1bac2:	d805      	bhi.n	1bad0 <a2d+0x2a>
        return ch - 'A' + 10;
   1bac4:	3837      	subs	r0, #55	; 0x37
   1bac6:	4770      	bx	lr
        return ch - '0';
   1bac8:	3830      	subs	r0, #48	; 0x30
   1baca:	4770      	bx	lr
        return ch - 'a' + 10;
   1bacc:	3857      	subs	r0, #87	; 0x57
   1bace:	4770      	bx	lr
    else
        return -1;
   1bad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1bad4:	4770      	bx	lr

0001bad6 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1bad6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bada:	4605      	mov	r5, r0
   1badc:	4688      	mov	r8, r1
   1bade:	4617      	mov	r7, r2
   1bae0:	4699      	mov	r9, r3
    const char *p = *src;
   1bae2:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1bae4:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1bae6:	4628      	mov	r0, r5
   1bae8:	f7ff ffdd 	bl	1baa6 <a2d>
   1baec:	2800      	cmp	r0, #0
   1baee:	db06      	blt.n	1bafe <a2i+0x28>
        if (digit > base)
   1baf0:	42b8      	cmp	r0, r7
   1baf2:	dc04      	bgt.n	1bafe <a2i+0x28>
            break;
        num = num * base + digit;
   1baf4:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   1baf8:	7825      	ldrb	r5, [r4, #0]
   1bafa:	3401      	adds	r4, #1
   1bafc:	e7f3      	b.n	1bae6 <a2i+0x10>
    }
    *src = p;
   1bafe:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   1bb02:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   1bb06:	4628      	mov	r0, r5
   1bb08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001bb0c <putf>:

static int putf(FILE *putp, char c)
{
   1bb0c:	b500      	push	{lr}
   1bb0e:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1bb10:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1bb14:	6803      	ldr	r3, [r0, #0]
   1bb16:	681b      	ldr	r3, [r3, #0]
   1bb18:	b14b      	cbz	r3, 1bb2e <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1bb1a:	2201      	movs	r2, #1
   1bb1c:	f10d 0107 	add.w	r1, sp, #7
   1bb20:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1bb22:	2801      	cmp	r0, #1
   1bb24:	d005      	beq.n	1bb32 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   1bb26:	2000      	movs	r0, #0
    else
        return 1;
}
   1bb28:	b003      	add	sp, #12
   1bb2a:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1bb2e:	2000      	movs	r0, #0
   1bb30:	e7fa      	b.n	1bb28 <putf+0x1c>
        return 1;
   1bb32:	2001      	movs	r0, #1
   1bb34:	e7f8      	b.n	1bb28 <putf+0x1c>
	...

0001bb38 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1bb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb3c:	4606      	mov	r6, r0
   1bb3e:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1bb40:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1bb42:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1bb44:	e001      	b.n	1bb4a <putchw+0x12>
        n--;
   1bb46:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   1bb48:	4613      	mov	r3, r2
   1bb4a:	1c5a      	adds	r2, r3, #1
   1bb4c:	781b      	ldrb	r3, [r3, #0]
   1bb4e:	b10b      	cbz	r3, 1bb54 <putchw+0x1c>
   1bb50:	2c00      	cmp	r4, #0
   1bb52:	dcf8      	bgt.n	1bb46 <putchw+0xe>
    if (p->sign)
   1bb54:	78bb      	ldrb	r3, [r7, #2]
   1bb56:	f013 0f01 	tst.w	r3, #1
   1bb5a:	d000      	beq.n	1bb5e <putchw+0x26>
        n--;
   1bb5c:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1bb5e:	887b      	ldrh	r3, [r7, #2]
   1bb60:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1bb64:	b29b      	uxth	r3, r3
   1bb66:	f241 0202 	movw	r2, #4098	; 0x1002
   1bb6a:	4293      	cmp	r3, r2
   1bb6c:	d01c      	beq.n	1bba8 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   1bb6e:	f640 0202 	movw	r2, #2050	; 0x802
   1bb72:	4293      	cmp	r3, r2
   1bb74:	d01a      	beq.n	1bbac <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1bb76:	683b      	ldr	r3, [r7, #0]
   1bb78:	4d35      	ldr	r5, [pc, #212]	; (1bc50 <putchw+0x118>)
   1bb7a:	401d      	ands	r5, r3
   1bb7c:	b1f5      	cbz	r5, 1bbbc <putchw+0x84>
    unsigned written = 0;
   1bb7e:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1bb80:	78bb      	ldrb	r3, [r7, #2]
   1bb82:	f013 0f01 	tst.w	r3, #1
   1bb86:	d11f      	bne.n	1bbc8 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1bb88:	887b      	ldrh	r3, [r7, #2]
   1bb8a:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1bb8e:	b29b      	uxth	r3, r3
   1bb90:	f241 0202 	movw	r2, #4098	; 0x1002
   1bb94:	4293      	cmp	r3, r2
   1bb96:	d01d      	beq.n	1bbd4 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1bb98:	f640 0202 	movw	r2, #2050	; 0x802
   1bb9c:	4293      	cmp	r3, r2
   1bb9e:	d02a      	beq.n	1bbf6 <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1bba0:	787b      	ldrb	r3, [r7, #1]
   1bba2:	bba3      	cbnz	r3, 1bc0e <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1bba4:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   1bba6:	e03d      	b.n	1bc24 <putchw+0xec>
        n -= 2;
   1bba8:	3c02      	subs	r4, #2
   1bbaa:	e7e4      	b.n	1bb76 <putchw+0x3e>
        n--;
   1bbac:	3c01      	subs	r4, #1
   1bbae:	e7e2      	b.n	1bb76 <putchw+0x3e>
            written += putf(putp, ' ');
   1bbb0:	2120      	movs	r1, #32
   1bbb2:	4630      	mov	r0, r6
   1bbb4:	f7ff ffaa 	bl	1bb0c <putf>
   1bbb8:	4405      	add	r5, r0
        while (n-- > 0)
   1bbba:	4644      	mov	r4, r8
   1bbbc:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1bbc0:	2c00      	cmp	r4, #0
   1bbc2:	dcf5      	bgt.n	1bbb0 <putchw+0x78>
   1bbc4:	4644      	mov	r4, r8
   1bbc6:	e7db      	b.n	1bb80 <putchw+0x48>
        written += putf(putp, '-');
   1bbc8:	212d      	movs	r1, #45	; 0x2d
   1bbca:	4630      	mov	r0, r6
   1bbcc:	f7ff ff9e 	bl	1bb0c <putf>
   1bbd0:	4405      	add	r5, r0
   1bbd2:	e7d9      	b.n	1bb88 <putchw+0x50>
        written += putf(putp, '0');
   1bbd4:	2130      	movs	r1, #48	; 0x30
   1bbd6:	4630      	mov	r0, r6
   1bbd8:	f7ff ff98 	bl	1bb0c <putf>
   1bbdc:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1bbde:	78bb      	ldrb	r3, [r7, #2]
   1bbe0:	f013 0f04 	tst.w	r3, #4
   1bbe4:	d005      	beq.n	1bbf2 <putchw+0xba>
   1bbe6:	2158      	movs	r1, #88	; 0x58
   1bbe8:	4630      	mov	r0, r6
   1bbea:	f7ff ff8f 	bl	1bb0c <putf>
   1bbee:	4405      	add	r5, r0
   1bbf0:	e7d6      	b.n	1bba0 <putchw+0x68>
   1bbf2:	2178      	movs	r1, #120	; 0x78
   1bbf4:	e7f8      	b.n	1bbe8 <putchw+0xb0>
        written += putf(putp, '0');
   1bbf6:	2130      	movs	r1, #48	; 0x30
   1bbf8:	4630      	mov	r0, r6
   1bbfa:	f7ff ff87 	bl	1bb0c <putf>
   1bbfe:	4405      	add	r5, r0
   1bc00:	e7ce      	b.n	1bba0 <putchw+0x68>
            written += putf(putp, '0');
   1bc02:	2130      	movs	r1, #48	; 0x30
   1bc04:	4630      	mov	r0, r6
   1bc06:	f7ff ff81 	bl	1bb0c <putf>
   1bc0a:	4405      	add	r5, r0
        while (n-- > 0)
   1bc0c:	4644      	mov	r4, r8
   1bc0e:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1bc12:	2c00      	cmp	r4, #0
   1bc14:	dcf5      	bgt.n	1bc02 <putchw+0xca>
   1bc16:	4644      	mov	r4, r8
   1bc18:	e7c4      	b.n	1bba4 <putchw+0x6c>
        written += putf(putp, ch);
   1bc1a:	4630      	mov	r0, r6
   1bc1c:	f7ff ff76 	bl	1bb0c <putf>
   1bc20:	4405      	add	r5, r0
    while ((ch = *bf++))
   1bc22:	4643      	mov	r3, r8
   1bc24:	f103 0801 	add.w	r8, r3, #1
   1bc28:	7819      	ldrb	r1, [r3, #0]
   1bc2a:	2900      	cmp	r1, #0
   1bc2c:	d1f5      	bne.n	1bc1a <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1bc2e:	78bb      	ldrb	r3, [r7, #2]
   1bc30:	f013 0f08 	tst.w	r3, #8
   1bc34:	d106      	bne.n	1bc44 <putchw+0x10c>
   1bc36:	e008      	b.n	1bc4a <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   1bc38:	2120      	movs	r1, #32
   1bc3a:	4630      	mov	r0, r6
   1bc3c:	f7ff ff66 	bl	1bb0c <putf>
   1bc40:	4405      	add	r5, r0
        while (n-- > 0)
   1bc42:	463c      	mov	r4, r7
   1bc44:	1e67      	subs	r7, r4, #1
   1bc46:	2c00      	cmp	r4, #0
   1bc48:	dcf6      	bgt.n	1bc38 <putchw+0x100>
    }
    
    return written;
}
   1bc4a:	4628      	mov	r0, r5
   1bc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bc50:	0008ff00 	.word	0x0008ff00

0001bc54 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1bc54:	b160      	cbz	r0, 1bc70 <intarg+0x1c>
   1bc56:	2801      	cmp	r0, #1
   1bc58:	d017      	beq.n	1bc8a <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1bc5a:	bb19      	cbnz	r1, 1bca4 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   1bc5c:	6813      	ldr	r3, [r2, #0]
   1bc5e:	3307      	adds	r3, #7
   1bc60:	f023 0307 	bic.w	r3, r3, #7
   1bc64:	f103 0108 	add.w	r1, r3, #8
   1bc68:	6011      	str	r1, [r2, #0]
   1bc6a:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1bc6e:	4770      	bx	lr
        if (sign) {
   1bc70:	b129      	cbz	r1, 1bc7e <intarg+0x2a>
            val = va_arg(*va, int);
   1bc72:	6813      	ldr	r3, [r2, #0]
   1bc74:	1d19      	adds	r1, r3, #4
   1bc76:	6011      	str	r1, [r2, #0]
   1bc78:	6818      	ldr	r0, [r3, #0]
   1bc7a:	17c1      	asrs	r1, r0, #31
   1bc7c:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1bc7e:	6813      	ldr	r3, [r2, #0]
   1bc80:	1d19      	adds	r1, r3, #4
   1bc82:	6011      	str	r1, [r2, #0]
   1bc84:	6818      	ldr	r0, [r3, #0]
   1bc86:	2100      	movs	r1, #0
   1bc88:	4770      	bx	lr
        if (sign) {
   1bc8a:	b129      	cbz	r1, 1bc98 <intarg+0x44>
            val = va_arg(*va, long);
   1bc8c:	6813      	ldr	r3, [r2, #0]
   1bc8e:	1d19      	adds	r1, r3, #4
   1bc90:	6011      	str	r1, [r2, #0]
   1bc92:	6818      	ldr	r0, [r3, #0]
   1bc94:	17c1      	asrs	r1, r0, #31
   1bc96:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1bc98:	6813      	ldr	r3, [r2, #0]
   1bc9a:	1d19      	adds	r1, r3, #4
   1bc9c:	6011      	str	r1, [r2, #0]
   1bc9e:	6818      	ldr	r0, [r3, #0]
   1bca0:	2100      	movs	r1, #0
   1bca2:	4770      	bx	lr
            val = va_arg(*va, long long);
   1bca4:	6813      	ldr	r3, [r2, #0]
   1bca6:	3307      	adds	r3, #7
   1bca8:	f023 0307 	bic.w	r3, r3, #7
   1bcac:	f103 0108 	add.w	r1, r3, #8
   1bcb0:	6011      	str	r1, [r2, #0]
   1bcb2:	e9d3 0100 	ldrd	r0, r1, [r3]
   1bcb6:	4770      	bx	lr

0001bcb8 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1bcb8:	b570      	push	{r4, r5, r6, lr}
   1bcba:	b08a      	sub	sp, #40	; 0x28
   1bcbc:	4605      	mov	r5, r0
   1bcbe:	9101      	str	r1, [sp, #4]
   1bcc0:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1bcc2:	ab02      	add	r3, sp, #8
   1bcc4:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1bcc6:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   1bcc8:	9b01      	ldr	r3, [sp, #4]
   1bcca:	1c5a      	adds	r2, r3, #1
   1bccc:	9201      	str	r2, [sp, #4]
   1bcce:	7819      	ldrb	r1, [r3, #0]
   1bcd0:	2900      	cmp	r1, #0
   1bcd2:	f000 811c 	beq.w	1bf0e <tfp_format+0x256>
        if (ch != '%') {
   1bcd6:	2925      	cmp	r1, #37	; 0x25
   1bcd8:	d004      	beq.n	1bce4 <tfp_format+0x2c>
            written += putf(putp, ch);
   1bcda:	4628      	mov	r0, r5
   1bcdc:	f7ff ff16 	bl	1bb0c <putf>
   1bce0:	4404      	add	r4, r0
   1bce2:	e7f1      	b.n	1bcc8 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1bce4:	2200      	movs	r2, #0
   1bce6:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1bcea:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   1bcee:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   1bcf2:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   1bcf6:	f362 0382 	bfi	r3, r2, #2, #1
   1bcfa:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   1bcfe:	9b01      	ldr	r3, [sp, #4]
   1bd00:	1c5a      	adds	r2, r3, #1
   1bd02:	9201      	str	r2, [sp, #4]
   1bd04:	7818      	ldrb	r0, [r3, #0]
   1bd06:	b128      	cbz	r0, 1bd14 <tfp_format+0x5c>
                switch (ch) {
   1bd08:	282d      	cmp	r0, #45	; 0x2d
   1bd0a:	d04e      	beq.n	1bdaa <tfp_format+0xf2>
   1bd0c:	2830      	cmp	r0, #48	; 0x30
   1bd0e:	d03c      	beq.n	1bd8a <tfp_format+0xd2>
   1bd10:	2823      	cmp	r0, #35	; 0x23
   1bd12:	d043      	beq.n	1bd9c <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1bd14:	282a      	cmp	r0, #42	; 0x2a
   1bd16:	d052      	beq.n	1bdbe <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1bd18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1bd1c:	b2db      	uxtb	r3, r3
   1bd1e:	2b09      	cmp	r3, #9
   1bd20:	d961      	bls.n	1bde6 <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1bd22:	286c      	cmp	r0, #108	; 0x6c
   1bd24:	d065      	beq.n	1bdf2 <tfp_format+0x13a>
            lng = 0;
   1bd26:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   1bd28:	287a      	cmp	r0, #122	; 0x7a
   1bd2a:	d06f      	beq.n	1be0c <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   1bd2c:	2869      	cmp	r0, #105	; 0x69
   1bd2e:	f000 808e 	beq.w	1be4e <tfp_format+0x196>
   1bd32:	d970      	bls.n	1be16 <tfp_format+0x15e>
   1bd34:	2873      	cmp	r0, #115	; 0x73
   1bd36:	f000 80dd 	beq.w	1bef4 <tfp_format+0x23c>
   1bd3a:	f200 8099 	bhi.w	1be70 <tfp_format+0x1b8>
   1bd3e:	286f      	cmp	r0, #111	; 0x6f
   1bd40:	f000 80c7 	beq.w	1bed2 <tfp_format+0x21a>
   1bd44:	2870      	cmp	r0, #112	; 0x70
   1bd46:	d1bf      	bne.n	1bcc8 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   1bd48:	9b00      	ldr	r3, [sp, #0]
   1bd4a:	1d1a      	adds	r2, r3, #4
   1bd4c:	9200      	str	r2, [sp, #0]
   1bd4e:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   1bd50:	2310      	movs	r3, #16
   1bd52:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1bd56:	aa08      	add	r2, sp, #32
   1bd58:	2100      	movs	r1, #0
   1bd5a:	f7ff fe34 	bl	1b9c6 <ui2a>
                p.width = 2 * sizeof(void*);
   1bd5e:	2308      	movs	r3, #8
   1bd60:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1bd64:	2301      	movs	r3, #1
   1bd66:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   1bd6a:	2130      	movs	r1, #48	; 0x30
   1bd6c:	4628      	mov	r0, r5
   1bd6e:	f7ff fecd 	bl	1bb0c <putf>
   1bd72:	4404      	add	r4, r0
                written += putf(putp, 'x');
   1bd74:	2178      	movs	r1, #120	; 0x78
   1bd76:	4628      	mov	r0, r5
   1bd78:	f7ff fec8 	bl	1bb0c <putf>
   1bd7c:	4404      	add	r4, r0
                written += putchw(putp, &p);
   1bd7e:	a908      	add	r1, sp, #32
   1bd80:	4628      	mov	r0, r5
   1bd82:	f7ff fed9 	bl	1bb38 <putchw>
   1bd86:	4404      	add	r4, r0
                break;
   1bd88:	e79e      	b.n	1bcc8 <tfp_format+0x10>
                    if (!p.left) {
   1bd8a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1bd8e:	f013 0f08 	tst.w	r3, #8
   1bd92:	d1b4      	bne.n	1bcfe <tfp_format+0x46>
                        p.lz = 1;
   1bd94:	2301      	movs	r3, #1
   1bd96:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1bd9a:	e7b0      	b.n	1bcfe <tfp_format+0x46>
                    p.alt = 1;
   1bd9c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1bda0:	f043 0302 	orr.w	r3, r3, #2
   1bda4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1bda8:	e7a9      	b.n	1bcfe <tfp_format+0x46>
                    p.left = 1;
   1bdaa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1bdae:	f043 0308 	orr.w	r3, r3, #8
   1bdb2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1bdb6:	2300      	movs	r3, #0
   1bdb8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1bdbc:	e79f      	b.n	1bcfe <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1bdbe:	466a      	mov	r2, sp
   1bdc0:	2101      	movs	r1, #1
   1bdc2:	2000      	movs	r0, #0
   1bdc4:	f7ff ff46 	bl	1bc54 <intarg>
                if (i > UCHAR_MAX) {
   1bdc8:	28ff      	cmp	r0, #255	; 0xff
   1bdca:	dd07      	ble.n	1bddc <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   1bdcc:	23ff      	movs	r3, #255	; 0xff
   1bdce:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1bdd2:	9b01      	ldr	r3, [sp, #4]
   1bdd4:	1c5a      	adds	r2, r3, #1
   1bdd6:	9201      	str	r2, [sp, #4]
   1bdd8:	7818      	ldrb	r0, [r3, #0]
   1bdda:	e7a2      	b.n	1bd22 <tfp_format+0x6a>
                } else if (i > 0) {
   1bddc:	2800      	cmp	r0, #0
   1bdde:	ddf8      	ble.n	1bdd2 <tfp_format+0x11a>
                    p.width = i;
   1bde0:	f88d 0020 	strb.w	r0, [sp, #32]
   1bde4:	e7f5      	b.n	1bdd2 <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1bde6:	ab08      	add	r3, sp, #32
   1bde8:	220a      	movs	r2, #10
   1bdea:	a901      	add	r1, sp, #4
   1bdec:	f7ff fe73 	bl	1bad6 <a2i>
   1bdf0:	e797      	b.n	1bd22 <tfp_format+0x6a>
                ch = *(fmt++);
   1bdf2:	9b01      	ldr	r3, [sp, #4]
   1bdf4:	1c5a      	adds	r2, r3, #1
   1bdf6:	9201      	str	r2, [sp, #4]
   1bdf8:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   1bdfa:	286c      	cmp	r0, #108	; 0x6c
   1bdfc:	d001      	beq.n	1be02 <tfp_format+0x14a>
                lng = 1;
   1bdfe:	2601      	movs	r6, #1
   1be00:	e792      	b.n	1bd28 <tfp_format+0x70>
                    ch = *(fmt++);
   1be02:	1c9a      	adds	r2, r3, #2
   1be04:	9201      	str	r2, [sp, #4]
   1be06:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   1be08:	2602      	movs	r6, #2
   1be0a:	e78d      	b.n	1bd28 <tfp_format+0x70>
                ch = *(fmt++);
   1be0c:	9b01      	ldr	r3, [sp, #4]
   1be0e:	1c5a      	adds	r2, r3, #1
   1be10:	9201      	str	r2, [sp, #4]
   1be12:	7818      	ldrb	r0, [r3, #0]
   1be14:	e78a      	b.n	1bd2c <tfp_format+0x74>
            switch (ch) {
   1be16:	2858      	cmp	r0, #88	; 0x58
   1be18:	d040      	beq.n	1be9c <tfp_format+0x1e4>
   1be1a:	d80a      	bhi.n	1be32 <tfp_format+0x17a>
   1be1c:	2800      	cmp	r0, #0
   1be1e:	d076      	beq.n	1bf0e <tfp_format+0x256>
   1be20:	2825      	cmp	r0, #37	; 0x25
   1be22:	f47f af51 	bne.w	1bcc8 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1be26:	4601      	mov	r1, r0
   1be28:	4628      	mov	r0, r5
   1be2a:	f7ff fe6f 	bl	1bb0c <putf>
   1be2e:	4404      	add	r4, r0
                break;
   1be30:	e74a      	b.n	1bcc8 <tfp_format+0x10>
            switch (ch) {
   1be32:	2863      	cmp	r0, #99	; 0x63
   1be34:	d108      	bne.n	1be48 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   1be36:	9b00      	ldr	r3, [sp, #0]
   1be38:	1d1a      	adds	r2, r3, #4
   1be3a:	9200      	str	r2, [sp, #0]
   1be3c:	7819      	ldrb	r1, [r3, #0]
   1be3e:	4628      	mov	r0, r5
   1be40:	f7ff fe64 	bl	1bb0c <putf>
   1be44:	4404      	add	r4, r0
                break;
   1be46:	e73f      	b.n	1bcc8 <tfp_format+0x10>
            switch (ch) {
   1be48:	2864      	cmp	r0, #100	; 0x64
   1be4a:	f47f af3d 	bne.w	1bcc8 <tfp_format+0x10>
                p.base = 10;
   1be4e:	230a      	movs	r3, #10
   1be50:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1be54:	466a      	mov	r2, sp
   1be56:	2101      	movs	r1, #1
   1be58:	4630      	mov	r0, r6
   1be5a:	f7ff fefb 	bl	1bc54 <intarg>
   1be5e:	aa08      	add	r2, sp, #32
   1be60:	f7ff fe11 	bl	1ba86 <i2a>
                written += putchw(putp, &p);
   1be64:	a908      	add	r1, sp, #32
   1be66:	4628      	mov	r0, r5
   1be68:	f7ff fe66 	bl	1bb38 <putchw>
   1be6c:	4404      	add	r4, r0
                break;
   1be6e:	e72b      	b.n	1bcc8 <tfp_format+0x10>
            switch (ch) {
   1be70:	2875      	cmp	r0, #117	; 0x75
   1be72:	d110      	bne.n	1be96 <tfp_format+0x1de>
                p.base = 10;
   1be74:	230a      	movs	r3, #10
   1be76:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1be7a:	466a      	mov	r2, sp
   1be7c:	2100      	movs	r1, #0
   1be7e:	4630      	mov	r0, r6
   1be80:	f7ff fee8 	bl	1bc54 <intarg>
   1be84:	aa08      	add	r2, sp, #32
   1be86:	f7ff fd9e 	bl	1b9c6 <ui2a>
                written += putchw(putp, &p);
   1be8a:	a908      	add	r1, sp, #32
   1be8c:	4628      	mov	r0, r5
   1be8e:	f7ff fe53 	bl	1bb38 <putchw>
   1be92:	4404      	add	r4, r0
                break;
   1be94:	e718      	b.n	1bcc8 <tfp_format+0x10>
            switch (ch) {
   1be96:	2878      	cmp	r0, #120	; 0x78
   1be98:	f47f af16 	bne.w	1bcc8 <tfp_format+0x10>
                p.base = 16;
   1be9c:	2310      	movs	r3, #16
   1be9e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1bea2:	2858      	cmp	r0, #88	; 0x58
   1bea4:	bf14      	ite	ne
   1bea6:	2300      	movne	r3, #0
   1bea8:	2301      	moveq	r3, #1
   1beaa:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1beae:	f363 0282 	bfi	r2, r3, #2, #1
   1beb2:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1beb6:	466a      	mov	r2, sp
   1beb8:	2100      	movs	r1, #0
   1beba:	4630      	mov	r0, r6
   1bebc:	f7ff feca 	bl	1bc54 <intarg>
   1bec0:	aa08      	add	r2, sp, #32
   1bec2:	f7ff fd80 	bl	1b9c6 <ui2a>
                written += putchw(putp, &p);
   1bec6:	a908      	add	r1, sp, #32
   1bec8:	4628      	mov	r0, r5
   1beca:	f7ff fe35 	bl	1bb38 <putchw>
   1bece:	4404      	add	r4, r0
                break;
   1bed0:	e6fa      	b.n	1bcc8 <tfp_format+0x10>
                p.base = 8;
   1bed2:	2308      	movs	r3, #8
   1bed4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1bed8:	466a      	mov	r2, sp
   1beda:	2100      	movs	r1, #0
   1bedc:	4630      	mov	r0, r6
   1bede:	f7ff feb9 	bl	1bc54 <intarg>
   1bee2:	aa08      	add	r2, sp, #32
   1bee4:	f7ff fd6f 	bl	1b9c6 <ui2a>
                written += putchw(putp, &p);
   1bee8:	a908      	add	r1, sp, #32
   1beea:	4628      	mov	r0, r5
   1beec:	f7ff fe24 	bl	1bb38 <putchw>
   1bef0:	4404      	add	r4, r0
                break;
   1bef2:	e6e9      	b.n	1bcc8 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1bef4:	9b00      	ldr	r3, [sp, #0]
   1bef6:	1d1a      	adds	r2, r3, #4
   1bef8:	9200      	str	r2, [sp, #0]
   1befa:	681b      	ldr	r3, [r3, #0]
   1befc:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1befe:	a908      	add	r1, sp, #32
   1bf00:	4628      	mov	r0, r5
   1bf02:	f7ff fe19 	bl	1bb38 <putchw>
   1bf06:	4404      	add	r4, r0
                p.bf = bf;
   1bf08:	ab02      	add	r3, sp, #8
   1bf0a:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1bf0c:	e6dc      	b.n	1bcc8 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1bf0e:	4620      	mov	r0, r4
   1bf10:	b00a      	add	sp, #40	; 0x28
   1bf12:	bd70      	pop	{r4, r5, r6, pc}

0001bf14 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1bf14:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1bf16:	f7ff fecf 	bl	1bcb8 <tfp_format>
}
   1bf1a:	bd08      	pop	{r3, pc}

0001bf1c <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   1bf1c:	b40f      	push	{r0, r1, r2, r3}
   1bf1e:	b500      	push	{lr}
   1bf20:	b083      	sub	sp, #12
   1bf22:	aa04      	add	r2, sp, #16
   1bf24:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1bf28:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1bf2a:	4b04      	ldr	r3, [pc, #16]	; (1bf3c <printf+0x20>)
   1bf2c:	6818      	ldr	r0, [r3, #0]
   1bf2e:	f7ff fff1 	bl	1bf14 <vfprintf>
    va_end(va);
    return rv;
}
   1bf32:	b003      	add	sp, #12
   1bf34:	f85d eb04 	ldr.w	lr, [sp], #4
   1bf38:	b004      	add	sp, #16
   1bf3a:	4770      	bx	lr
   1bf3c:	00021c14 	.word	0x00021c14

0001bf40 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   1bf40:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf42:	b085      	sub	sp, #20
   1bf44:	4605      	mov	r5, r0
   1bf46:	460c      	mov	r4, r1
   1bf48:	4616      	mov	r6, r2
   1bf4a:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1bf4c:	460a      	mov	r2, r1
   1bf4e:	4601      	mov	r1, r0
   1bf50:	4668      	mov	r0, sp
   1bf52:	f000 f835 	bl	1bfc0 <fmemopen_w>
    tfp_format(f, fmt, va);
   1bf56:	463a      	mov	r2, r7
   1bf58:	4631      	mov	r1, r6
   1bf5a:	f7ff fead 	bl	1bcb8 <tfp_format>
    if (size > 0) {
   1bf5e:	b12c      	cbz	r4, 1bf6c <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   1bf60:	9b02      	ldr	r3, [sp, #8]
   1bf62:	42a3      	cmp	r3, r4
   1bf64:	d305      	bcc.n	1bf72 <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   1bf66:	3c01      	subs	r4, #1
   1bf68:	2300      	movs	r3, #0
   1bf6a:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   1bf6c:	9802      	ldr	r0, [sp, #8]
   1bf6e:	b005      	add	sp, #20
   1bf70:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   1bf72:	9b01      	ldr	r3, [sp, #4]
   1bf74:	2200      	movs	r2, #0
   1bf76:	701a      	strb	r2, [r3, #0]
   1bf78:	e7f8      	b.n	1bf6c <vsnprintf+0x2c>
	...

0001bf7c <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1bf7c:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   1bf7e:	460a      	mov	r2, r1
   1bf80:	4601      	mov	r1, r0
   1bf82:	4b02      	ldr	r3, [pc, #8]	; (1bf8c <vprintf+0x10>)
   1bf84:	6818      	ldr	r0, [r3, #0]
   1bf86:	f7ff ffc5 	bl	1bf14 <vfprintf>
}
   1bf8a:	bd08      	pop	{r3, pc}
   1bf8c:	00021c14 	.word	0x00021c14

0001bf90 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1bf90:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1bf92:	2500      	movs	r5, #0
    
    while (n--)
   1bf94:	e000      	b.n	1bf98 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1bf96:	4622      	mov	r2, r4
    while (n--)
   1bf98:	1e54      	subs	r4, r2, #1
   1bf9a:	b16a      	cbz	r2, 1bfb8 <memfile_write+0x28>
        f->bytes_written++;
   1bf9c:	6883      	ldr	r3, [r0, #8]
   1bf9e:	3301      	adds	r3, #1
   1bfa0:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   1bfa2:	68c2      	ldr	r2, [r0, #12]
   1bfa4:	4293      	cmp	r3, r2
   1bfa6:	d8f6      	bhi.n	1bf96 <memfile_write+0x6>
            *f->buffer++ = *bp++;
   1bfa8:	6843      	ldr	r3, [r0, #4]
   1bfaa:	1c5a      	adds	r2, r3, #1
   1bfac:	6042      	str	r2, [r0, #4]
   1bfae:	780a      	ldrb	r2, [r1, #0]
   1bfb0:	701a      	strb	r2, [r3, #0]
            i++;
   1bfb2:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   1bfb4:	3101      	adds	r1, #1
   1bfb6:	e7ee      	b.n	1bf96 <memfile_write+0x6>
        }
    }
    
    return i;
}
   1bfb8:	4628      	mov	r0, r5
   1bfba:	bc30      	pop	{r4, r5}
   1bfbc:	4770      	bx	lr
	...

0001bfc0 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1bfc0:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1bfc2:	4c04      	ldr	r4, [pc, #16]	; (1bfd4 <fmemopen_w+0x14>)
   1bfc4:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1bfc6:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1bfc8:	2100      	movs	r1, #0
   1bfca:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1bfcc:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1bfce:	f85d 4b04 	ldr.w	r4, [sp], #4
   1bfd2:	4770      	bx	lr
   1bfd4:	00021c0c 	.word	0x00021c0c

0001bfd8 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1bfd8:	2000      	movs	r0, #0
   1bfda:	4770      	bx	lr

0001bfdc <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1bfdc:	b510      	push	{r4, lr}
   1bfde:	4608      	mov	r0, r1
   1bfe0:	4614      	mov	r4, r2
    console_write(bp, n);
   1bfe2:	4611      	mov	r1, r2
   1bfe4:	f7fd f9b8 	bl	19358 <console_write>
    return n;
}
   1bfe8:	4620      	mov	r0, r4
   1bfea:	bd10      	pop	{r4, pc}

0001bfec <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   1bfec:	b508      	push	{r3, lr}
    sysinit();
   1bfee:	f7fd fa1b 	bl	19428 <sysinit_start>
   1bff2:	f000 f81b 	bl	1c02c <sysinit_app>
   1bff6:	f7fd fa1d 	bl	19434 <sysinit_end>
}
   1bffa:	bd08      	pop	{r3, pc}

0001bffc <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1bffc:	b570      	push	{r4, r5, r6, lr}
   1bffe:	b082      	sub	sp, #8
   1c000:	460c      	mov	r4, r1
   1c002:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1c004:	b29d      	uxth	r5, r3
   1c006:	9b07      	ldr	r3, [sp, #28]
   1c008:	9300      	str	r3, [sp, #0]
   1c00a:	4603      	mov	r3, r0
   1c00c:	9a06      	ldr	r2, [sp, #24]
   1c00e:	4629      	mov	r1, r5
   1c010:	4620      	mov	r0, r4
   1c012:	f7fe fdeb 	bl	1abec <os_mempool_init>
    if (rc != 0) {
   1c016:	b108      	cbz	r0, 1c01c <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1c018:	b002      	add	sp, #8
   1c01a:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1c01c:	462b      	mov	r3, r5
   1c01e:	9a06      	ldr	r2, [sp, #24]
   1c020:	b292      	uxth	r2, r2
   1c022:	4621      	mov	r1, r4
   1c024:	4630      	mov	r0, r6
   1c026:	f7fe fc96 	bl	1a956 <os_mbuf_pool_init>
   1c02a:	e7f5      	b.n	1c018 <mem_init_mbuf_pool+0x1c>

0001c02c <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   1c02c:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1c02e:	f7fe f9f3 	bl	1a418 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1c032:	f001 f985 	bl	1d340 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1c036:	f7fd f9a3 	bl	19380 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   1c03a:	f001 fac7 	bl	1d5cc <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   1c03e:	f001 f9b7 	bl	1d3b0 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   1c042:	f001 f8e1 	bl	1d208 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   1c046:	f001 f8f1 	bl	1d22c <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1c04a:	f001 f8f0 	bl	1d22e <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   1c04e:	f001 f8ef 	bl	1d230 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   1c052:	f001 f8ee 	bl	1d232 <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   1c056:	f001 f8ed 	bl	1d234 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1c05a:	f000 fbd1 	bl	1c800 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   1c05e:	f000 fd1f 	bl	1caa0 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   1c062:	f000 ff3d 	bl	1cee0 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   1c066:	f000 feb3 	bl	1cdd0 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   1c06a:	f000 fe3d 	bl	1cce8 <init_sensor_coap>
}
   1c06e:	bd08      	pop	{r3, pc}

0001c070 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   1c070:	b908      	cbnz	r0, 1c076 <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   1c072:	4802      	ldr	r0, [pc, #8]	; (1c07c <hal_bsp_flash_dev+0xc>)
   1c074:	4770      	bx	lr
    }

    return NULL;
   1c076:	2000      	movs	r0, #0
}
   1c078:	4770      	bx	lr
   1c07a:	bf00      	nop
   1c07c:	00021c18 	.word	0x00021c18

0001c080 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   1c080:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   1c082:	f7ec f89d 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   1c086:	f000 fbb3 	bl	1c7f0 <nrf52_periph_create>
}
   1c08a:	bd08      	pop	{r3, pc}

0001c08c <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1c08c:	2300      	movs	r3, #0
   1c08e:	4a07      	ldr	r2, [pc, #28]	; (1c0ac <nrf52k_flash_wait_ready+0x20>)
   1c090:	4293      	cmp	r3, r2
   1c092:	dc06      	bgt.n	1c0a2 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1c094:	4a06      	ldr	r2, [pc, #24]	; (1c0b0 <nrf52k_flash_wait_ready+0x24>)
   1c096:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1c09a:	2a01      	cmp	r2, #1
   1c09c:	d004      	beq.n	1c0a8 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1c09e:	3301      	adds	r3, #1
   1c0a0:	e7f5      	b.n	1c08e <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1c0a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c0a6:	4770      	bx	lr
            return 0;
   1c0a8:	2000      	movs	r0, #0
}
   1c0aa:	4770      	bx	lr
   1c0ac:	0001869f 	.word	0x0001869f
   1c0b0:	4001e000 	.word	0x4001e000

0001c0b4 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1c0b4:	b538      	push	{r3, r4, r5, lr}
   1c0b6:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1c0b8:	f7ff ffe8 	bl	1c08c <nrf52k_flash_wait_ready>
   1c0bc:	b9f0      	cbnz	r0, 1c0fc <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1c0be:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1c0c2:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1c0c4:	4b0f      	ldr	r3, [pc, #60]	; (1c104 <nrf52k_flash_erase_sector+0x50>)
   1c0c6:	2202      	movs	r2, #2
   1c0c8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1c0cc:	f7ff ffde 	bl	1c08c <nrf52k_flash_wait_ready>
   1c0d0:	b148      	cbz	r0, 1c0e6 <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1c0d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1c0d6:	4a0b      	ldr	r2, [pc, #44]	; (1c104 <nrf52k_flash_erase_sector+0x50>)
   1c0d8:	2100      	movs	r1, #0
   1c0da:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1c0de:	b904      	cbnz	r4, 1c0e2 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1c0e0:	b662      	cpsie	i
    return rc;
}
   1c0e2:	4618      	mov	r0, r3
   1c0e4:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1c0e6:	4b07      	ldr	r3, [pc, #28]	; (1c104 <nrf52k_flash_erase_sector+0x50>)
   1c0e8:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1c0ec:	f7ff ffce 	bl	1c08c <nrf52k_flash_wait_ready>
   1c0f0:	4603      	mov	r3, r0
   1c0f2:	2800      	cmp	r0, #0
   1c0f4:	d0ef      	beq.n	1c0d6 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1c0f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c0fa:	e7ec      	b.n	1c0d6 <nrf52k_flash_erase_sector+0x22>
        return -1;
   1c0fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c100:	e7ef      	b.n	1c0e2 <nrf52k_flash_erase_sector+0x2e>
   1c102:	bf00      	nop
   1c104:	4001e000 	.word	0x4001e000

0001c108 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1c108:	2000      	movs	r0, #0
   1c10a:	4770      	bx	lr

0001c10c <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1c10c:	297f      	cmp	r1, #127	; 0x7f
   1c10e:	dc06      	bgt.n	1c11e <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1c110:	0309      	lsls	r1, r1, #12
   1c112:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1c114:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1c118:	601a      	str	r2, [r3, #0]
}
   1c11a:	2000      	movs	r0, #0
   1c11c:	4770      	bx	lr
{
   1c11e:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1c120:	2300      	movs	r3, #0
   1c122:	461a      	mov	r2, r3
   1c124:	4619      	mov	r1, r3
   1c126:	4618      	mov	r0, r3
   1c128:	f7fe f818 	bl	1a15c <__assert_func>

0001c12c <nrf52k_flash_write>:
{
   1c12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c130:	b082      	sub	sp, #8
   1c132:	460d      	mov	r5, r1
   1c134:	4616      	mov	r6, r2
   1c136:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1c138:	f7ff ffa8 	bl	1c08c <nrf52k_flash_wait_ready>
   1c13c:	2800      	cmp	r0, #0
   1c13e:	d158      	bne.n	1c1f2 <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1c140:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1c144:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1c146:	4b2c      	ldr	r3, [pc, #176]	; (1c1f8 <nrf52k_flash_write+0xcc>)
   1c148:	2201      	movs	r2, #1
   1c14a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1c14e:	f015 0803 	ands.w	r8, r5, #3
   1c152:	d10b      	bne.n	1c16c <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1c154:	2c03      	cmp	r4, #3
   1c156:	d925      	bls.n	1c1a4 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1c158:	f7ff ff98 	bl	1c08c <nrf52k_flash_wait_ready>
   1c15c:	2800      	cmp	r0, #0
   1c15e:	d139      	bne.n	1c1d4 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1c160:	f856 3b04 	ldr.w	r3, [r6], #4
   1c164:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1c168:	3c04      	subs	r4, #4
   1c16a:	e7f3      	b.n	1c154 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1c16c:	f7ff ff8e 	bl	1c08c <nrf52k_flash_wait_ready>
   1c170:	bb68      	cbnz	r0, 1c1ce <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1c172:	f025 0a03 	bic.w	sl, r5, #3
   1c176:	f8da 3000 	ldr.w	r3, [sl]
   1c17a:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1c17c:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1c180:	45a1      	cmp	r9, r4
   1c182:	d900      	bls.n	1c186 <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1c184:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1c186:	464a      	mov	r2, r9
   1c188:	4631      	mov	r1, r6
   1c18a:	ab01      	add	r3, sp, #4
   1c18c:	eb03 0008 	add.w	r0, r3, r8
   1c190:	f7ff fbda 	bl	1b948 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1c194:	9b01      	ldr	r3, [sp, #4]
   1c196:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1c19a:	444d      	add	r5, r9
        num_bytes -= cnt;
   1c19c:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1c1a0:	444e      	add	r6, r9
   1c1a2:	e7d7      	b.n	1c154 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1c1a4:	b164      	cbz	r4, 1c1c0 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1c1a6:	682b      	ldr	r3, [r5, #0]
   1c1a8:	a802      	add	r0, sp, #8
   1c1aa:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1c1ae:	4622      	mov	r2, r4
   1c1b0:	4631      	mov	r1, r6
   1c1b2:	f7ff fbc9 	bl	1b948 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1c1b6:	f7ff ff69 	bl	1c08c <nrf52k_flash_wait_ready>
   1c1ba:	b9b8      	cbnz	r0, 1c1ec <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1c1bc:	9b01      	ldr	r3, [sp, #4]
   1c1be:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1c1c0:	f7ff ff64 	bl	1c08c <nrf52k_flash_wait_ready>
   1c1c4:	4603      	mov	r3, r0
   1c1c6:	b138      	cbz	r0, 1c1d8 <nrf52k_flash_write+0xac>
        rc = -1;
   1c1c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c1cc:	e004      	b.n	1c1d8 <nrf52k_flash_write+0xac>
    int rc = -1;
   1c1ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c1d2:	e001      	b.n	1c1d8 <nrf52k_flash_write+0xac>
   1c1d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1c1d8:	4a07      	ldr	r2, [pc, #28]	; (1c1f8 <nrf52k_flash_write+0xcc>)
   1c1da:	2100      	movs	r1, #0
   1c1dc:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1c1e0:	b907      	cbnz	r7, 1c1e4 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1c1e2:	b662      	cpsie	i
}
   1c1e4:	4618      	mov	r0, r3
   1c1e6:	b002      	add	sp, #8
   1c1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1c1ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c1f0:	e7f2      	b.n	1c1d8 <nrf52k_flash_write+0xac>
        return -1;
   1c1f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c1f6:	e7f5      	b.n	1c1e4 <nrf52k_flash_write+0xb8>
   1c1f8:	4001e000 	.word	0x4001e000

0001c1fc <nrf52k_flash_read>:
{
   1c1fc:	b508      	push	{r3, lr}
   1c1fe:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1c200:	461a      	mov	r2, r3
   1c202:	f7ff fba1 	bl	1b948 <memcpy>
}
   1c206:	2000      	movs	r0, #0
   1c208:	bd08      	pop	{r3, pc}
	...

0001c20c <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1c20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1c20e:	f7ff fa3b 	bl	1b688 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1c212:	4b31      	ldr	r3, [pc, #196]	; (1c2d8 <nrf52_timer_handler+0xcc>)
   1c214:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1c218:	4b30      	ldr	r3, [pc, #192]	; (1c2dc <nrf52_timer_handler+0xd0>)
   1c21a:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1c21c:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1c220:	d225      	bcs.n	1c26e <nrf52_timer_handler+0x62>
   1c222:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1c224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1c228:	d227      	bcs.n	1c27a <nrf52_timer_handler+0x6e>
    result = x - y;
   1c22a:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1c22c:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1c230:	d129      	bne.n	1c286 <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   1c232:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1c236:	4f29      	ldr	r7, [pc, #164]	; (1c2dc <nrf52_timer_handler+0xd0>)
   1c238:	683c      	ldr	r4, [r7, #0]
   1c23a:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1c23e:	4628      	mov	r0, r5
   1c240:	f7ff f9b0 	bl	1b5a4 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1c244:	4b24      	ldr	r3, [pc, #144]	; (1c2d8 <nrf52_timer_handler+0xcc>)
   1c246:	2200      	movs	r2, #0
   1c248:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1c24c:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1c24e:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1c250:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1c254:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1c258:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1c25a:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1c25c:	f7ff fa1d 	bl	1b69a <os_arch_in_critical>
   1c260:	bb28      	cbnz	r0, 1c2ae <nrf52_timer_handler+0xa2>
   1c262:	2300      	movs	r3, #0
   1c264:	461a      	mov	r2, r3
   1c266:	4619      	mov	r1, r3
   1c268:	4618      	mov	r0, r3
   1c26a:	f7fd ff77 	bl	1a15c <__assert_func>
    assert(x <= 0xffffff);
   1c26e:	2300      	movs	r3, #0
   1c270:	461a      	mov	r2, r3
   1c272:	4619      	mov	r1, r3
   1c274:	4618      	mov	r0, r3
   1c276:	f7fd ff71 	bl	1a15c <__assert_func>
    assert(y <= 0xffffff);
   1c27a:	2300      	movs	r3, #0
   1c27c:	461a      	mov	r2, r3
   1c27e:	4619      	mov	r1, r3
   1c280:	4618      	mov	r0, r3
   1c282:	f7fd ff6b 	bl	1a15c <__assert_func>
        return (result | 0xff800000);
   1c286:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1c28a:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1c28e:	e7d2      	b.n	1c236 <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1c290:	2300      	movs	r3, #0
   1c292:	461a      	mov	r2, r3
   1c294:	4619      	mov	r1, r3
   1c296:	4618      	mov	r0, r3
   1c298:	f7fd ff60 	bl	1a15c <__assert_func>
        return (result | 0xff800000);
   1c29c:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1c2a0:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1c2a4:	2a02      	cmp	r2, #2
   1c2a6:	dc13      	bgt.n	1c2d0 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1c2a8:	4a0c      	ldr	r2, [pc, #48]	; (1c2dc <nrf52_timer_handler+0xd0>)
   1c2aa:	6814      	ldr	r4, [r2, #0]
   1c2ac:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1c2ae:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1c2b2:	4a09      	ldr	r2, [pc, #36]	; (1c2d8 <nrf52_timer_handler+0xcc>)
   1c2b4:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1c2b8:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1c2bc:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1c2c0:	d2e6      	bcs.n	1c290 <nrf52_timer_handler+0x84>
    result = x - y;
   1c2c2:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1c2c4:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1c2c8:	d1e8      	bne.n	1c29c <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   1c2ca:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1c2ce:	e7e9      	b.n	1c2a4 <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   1c2d0:	4630      	mov	r0, r6
   1c2d2:	f7ff f9df 	bl	1b694 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1c2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c2d8:	40011000 	.word	0x40011000
   1c2dc:	2000c6c4 	.word	0x2000c6c4

0001c2e0 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1c2e0:	b538      	push	{r3, r4, r5, lr}
   1c2e2:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1c2e4:	f7ff f9d9 	bl	1b69a <os_arch_in_critical>
   1c2e8:	b1a0      	cbz	r0, 1c314 <os_tick_idle+0x34>

    if (ticks > 0) {
   1c2ea:	2d00      	cmp	r5, #0
   1c2ec:	d038      	beq.n	1c360 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1c2ee:	4b20      	ldr	r3, [pc, #128]	; (1c370 <os_tick_idle+0x90>)
   1c2f0:	685b      	ldr	r3, [r3, #4]
   1c2f2:	42ab      	cmp	r3, r5
   1c2f4:	d200      	bcs.n	1c2f8 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1c2f6:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1c2f8:	4b1d      	ldr	r3, [pc, #116]	; (1c370 <os_tick_idle+0x90>)
   1c2fa:	689c      	ldr	r4, [r3, #8]
   1c2fc:	681a      	ldr	r2, [r3, #0]
   1c2fe:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1c302:	f7ff f9ca 	bl	1b69a <os_arch_in_critical>
   1c306:	b9d0      	cbnz	r0, 1c33e <os_tick_idle+0x5e>
   1c308:	2300      	movs	r3, #0
   1c30a:	461a      	mov	r2, r3
   1c30c:	4619      	mov	r1, r3
   1c30e:	4618      	mov	r0, r3
   1c310:	f7fd ff24 	bl	1a15c <__assert_func>
    OS_ASSERT_CRITICAL();
   1c314:	2300      	movs	r3, #0
   1c316:	461a      	mov	r2, r3
   1c318:	4619      	mov	r1, r3
   1c31a:	4618      	mov	r0, r3
   1c31c:	f7fd ff1e 	bl	1a15c <__assert_func>
    assert(y <= 0xffffff);
   1c320:	2300      	movs	r3, #0
   1c322:	461a      	mov	r2, r3
   1c324:	4619      	mov	r1, r3
   1c326:	4618      	mov	r0, r3
   1c328:	f7fd ff18 	bl	1a15c <__assert_func>
        return (result | 0xff800000);
   1c32c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1c330:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1c334:	2b02      	cmp	r3, #2
   1c336:	dc13      	bgt.n	1c360 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1c338:	4b0d      	ldr	r3, [pc, #52]	; (1c370 <os_tick_idle+0x90>)
   1c33a:	681c      	ldr	r4, [r3, #0]
   1c33c:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1c33e:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1c342:	4b0c      	ldr	r3, [pc, #48]	; (1c374 <os_tick_idle+0x94>)
   1c344:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1c348:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1c34c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1c350:	d2e6      	bcs.n	1c320 <os_tick_idle+0x40>
    result = x - y;
   1c352:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1c354:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1c358:	d1e8      	bne.n	1c32c <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1c35a:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1c35e:	e7e9      	b.n	1c334 <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1c360:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1c364:	bf30      	wfi

    if (ticks > 0) {
   1c366:	b905      	cbnz	r5, 1c36a <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1c368:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1c36a:	f7ff ff4f 	bl	1c20c <nrf52_timer_handler>
}
   1c36e:	e7fb      	b.n	1c368 <os_tick_idle+0x88>
   1c370:	2000c6c4 	.word	0x2000c6c4
   1c374:	40011000 	.word	0x40011000

0001c378 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1c378:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1c37a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1c37e:	fbb3 f3f0 	udiv	r3, r3, r0
   1c382:	fb00 f303 	mul.w	r3, r0, r3
   1c386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c38a:	d136      	bne.n	1c3fa <os_tick_init+0x82>
   1c38c:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1c38e:	4d1e      	ldr	r5, [pc, #120]	; (1c408 <os_tick_init+0x90>)
   1c390:	2600      	movs	r6, #0
   1c392:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1c394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1c398:	fbb3 f0f0 	udiv	r0, r3, r0
   1c39c:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1c39e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1c3a2:	fbb3 f0f0 	udiv	r0, r3, r0
   1c3a6:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1c3a8:	f7ff f96e 	bl	1b688 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c3ac:	0164      	lsls	r4, r4, #5
   1c3ae:	b2e4      	uxtb	r4, r4
   1c3b0:	4b16      	ldr	r3, [pc, #88]	; (1c40c <os_tick_init+0x94>)
   1c3b2:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1c3b6:	4a16      	ldr	r2, [pc, #88]	; (1c410 <os_tick_init+0x98>)
   1c3b8:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1c3ba:	4916      	ldr	r1, [pc, #88]	; (1c414 <os_tick_init+0x9c>)
   1c3bc:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c3c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1c3c4:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1c3c6:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1c3ca:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1c3ce:	2201      	movs	r2, #1
   1c3d0:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1c3d2:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1c3d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c3d8:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1c3dc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1c3e0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1c3e4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1c3e8:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1c3ec:	6829      	ldr	r1, [r5, #0]
   1c3ee:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1c3f2:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1c3f4:	f7ff f94e 	bl	1b694 <os_arch_restore_sr>
}
   1c3f8:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1c3fa:	2300      	movs	r3, #0
   1c3fc:	461a      	mov	r2, r3
   1c3fe:	4619      	mov	r1, r3
   1c400:	4618      	mov	r0, r3
   1c402:	f7fd feab 	bl	1a15c <__assert_func>
   1c406:	bf00      	nop
   1c408:	2000c6c4 	.word	0x2000c6c4
   1c40c:	e000e100 	.word	0xe000e100
   1c410:	e000ed00 	.word	0xe000ed00
   1c414:	0001c20d 	.word	0x0001c20d

0001c418 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1c418:	2301      	movs	r3, #1
   1c41a:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1c41c:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1c420:	4770      	bx	lr
	...

0001c424 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1c424:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1c426:	7883      	ldrb	r3, [r0, #2]
   1c428:	b393      	cbz	r3, 1c490 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1c42a:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1c42c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1c430:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1c434:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1c436:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1c43a:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1c43e:	b11d      	cbz	r5, 1c448 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1c440:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1c444:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1c448:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1c44a:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1c44c:	2b02      	cmp	r3, #2
   1c44e:	dc0e      	bgt.n	1c46e <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1c450:	7842      	ldrb	r2, [r0, #1]
   1c452:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1c454:	2b00      	cmp	r3, #0
   1c456:	db15      	blt.n	1c484 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c458:	f002 021f 	and.w	r2, r2, #31
   1c45c:	095b      	lsrs	r3, r3, #5
   1c45e:	2101      	movs	r1, #1
   1c460:	fa01 f202 	lsl.w	r2, r1, r2
   1c464:	3340      	adds	r3, #64	; 0x40
   1c466:	491b      	ldr	r1, [pc, #108]	; (1c4d4 <nrf_timer_set_ocmp+0xb0>)
   1c468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1c46c:	e00a      	b.n	1c484 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1c46e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1c472:	d208      	bcs.n	1c486 <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1c474:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1c478:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1c47c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1c480:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1c484:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1c486:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1c48a:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1c48e:	e7f5      	b.n	1c47c <nrf_timer_set_ocmp+0x58>
   1c490:	460d      	mov	r5, r1
   1c492:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1c494:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1c496:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1c49a:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1c49e:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1c4a2:	2200      	movs	r2, #0
   1c4a4:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1c4a8:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1c4ac:	f7ff ffb4 	bl	1c418 <nrf_read_timer_cntr>
   1c4b0:	1b40      	subs	r0, r0, r5
   1c4b2:	2800      	cmp	r0, #0
   1c4b4:	dbe6      	blt.n	1c484 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1c4b6:	7862      	ldrb	r2, [r4, #1]
   1c4b8:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1c4ba:	2b00      	cmp	r3, #0
   1c4bc:	dbe2      	blt.n	1c484 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c4be:	f002 021f 	and.w	r2, r2, #31
   1c4c2:	095b      	lsrs	r3, r3, #5
   1c4c4:	2101      	movs	r1, #1
   1c4c6:	fa01 f202 	lsl.w	r2, r1, r2
   1c4ca:	3340      	adds	r3, #64	; 0x40
   1c4cc:	4901      	ldr	r1, [pc, #4]	; (1c4d4 <nrf_timer_set_ocmp+0xb0>)
   1c4ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1c4d2:	e7d7      	b.n	1c484 <nrf_timer_set_ocmp+0x60>
   1c4d4:	e000e100 	.word	0xe000e100

0001c4d8 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1c4d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1c4dc:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1c4e0:	4770      	bx	lr

0001c4e2 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1c4e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1c4e6:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1c4ea:	4770      	bx	lr

0001c4ec <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1c4ec:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1c4ee:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1c4f0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1c4f4:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1c4f6:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1c4f8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1c4fc:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1c500:	b1ad      	cbz	r5, 1c52e <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1c502:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1c506:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1c508:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1c50c:	2500      	movs	r5, #0
   1c50e:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1c512:	7840      	ldrb	r0, [r0, #1]
   1c514:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1c516:	42aa      	cmp	r2, r5
   1c518:	db09      	blt.n	1c52e <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c51a:	f000 001f 	and.w	r0, r0, #31
   1c51e:	0952      	lsrs	r2, r2, #5
   1c520:	2501      	movs	r5, #1
   1c522:	fa05 f000 	lsl.w	r0, r5, r0
   1c526:	3240      	adds	r2, #64	; 0x40
   1c528:	4d04      	ldr	r5, [pc, #16]	; (1c53c <hal_timer_read_bsptimer+0x50>)
   1c52a:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1c52e:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1c532:	b904      	cbnz	r4, 1c536 <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1c534:	b662      	cpsie	i

    return tcntr;
}
   1c536:	bc30      	pop	{r4, r5}
   1c538:	4770      	bx	lr
   1c53a:	bf00      	nop
   1c53c:	e000e100 	.word	0xe000e100

0001c540 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1c540:	b570      	push	{r4, r5, r6, lr}
   1c542:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1c544:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1c548:	b672      	cpsid	i
   1c54a:	e013      	b.n	1c574 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1c54c:	6928      	ldr	r0, [r5, #16]
   1c54e:	f7ff ff63 	bl	1c418 <nrf_read_timer_cntr>
            delta = 0;
   1c552:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1c554:	68e3      	ldr	r3, [r4, #12]
   1c556:	1ac0      	subs	r0, r0, r3
   1c558:	4290      	cmp	r0, r2
   1c55a:	db19      	blt.n	1c590 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1c55c:	6923      	ldr	r3, [r4, #16]
   1c55e:	b1a3      	cbz	r3, 1c58a <hal_timer_chk_queue+0x4a>
   1c560:	6962      	ldr	r2, [r4, #20]
   1c562:	615a      	str	r2, [r3, #20]
   1c564:	6963      	ldr	r3, [r4, #20]
   1c566:	6922      	ldr	r2, [r4, #16]
   1c568:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1c56a:	2300      	movs	r3, #0
   1c56c:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1c56e:	6863      	ldr	r3, [r4, #4]
   1c570:	68a0      	ldr	r0, [r4, #8]
   1c572:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1c574:	696c      	ldr	r4, [r5, #20]
   1c576:	b15c      	cbz	r4, 1c590 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1c578:	78ab      	ldrb	r3, [r5, #2]
   1c57a:	2b00      	cmp	r3, #0
   1c57c:	d0e6      	beq.n	1c54c <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1c57e:	4628      	mov	r0, r5
   1c580:	f7ff ffb4 	bl	1c4ec <hal_timer_read_bsptimer>
            delta = -3;
   1c584:	f06f 0202 	mvn.w	r2, #2
   1c588:	e7e4      	b.n	1c554 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1c58a:	6963      	ldr	r3, [r4, #20]
   1c58c:	61ab      	str	r3, [r5, #24]
   1c58e:	e7e9      	b.n	1c564 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1c590:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1c592:	b133      	cbz	r3, 1c5a2 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1c594:	68d9      	ldr	r1, [r3, #12]
   1c596:	4628      	mov	r0, r5
   1c598:	f7ff ff44 	bl	1c424 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1c59c:	b906      	cbnz	r6, 1c5a0 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1c59e:	b662      	cpsie	i
}
   1c5a0:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1c5a2:	78ab      	ldrb	r3, [r5, #2]
   1c5a4:	b11b      	cbz	r3, 1c5ae <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1c5a6:	6928      	ldr	r0, [r5, #16]
   1c5a8:	f7ff ff9b 	bl	1c4e2 <nrf_rtc_disable_ocmp>
   1c5ac:	e7f6      	b.n	1c59c <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1c5ae:	6928      	ldr	r0, [r5, #16]
   1c5b0:	f7ff ff92 	bl	1c4d8 <nrf_timer_disable_ocmp>
   1c5b4:	e7f2      	b.n	1c59c <hal_timer_chk_queue+0x5c>

0001c5b6 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1c5b6:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1c5b8:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1c5ba:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1c5be:	b113      	cbz	r3, 1c5c6 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1c5c0:	2300      	movs	r3, #0
   1c5c2:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1c5c6:	6883      	ldr	r3, [r0, #8]
   1c5c8:	3301      	adds	r3, #1
   1c5ca:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1c5cc:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1c5d0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1c5d4:	d100      	bne.n	1c5d8 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1c5d6:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1c5d8:	f7ff ffb2 	bl	1c540 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1c5dc:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1c5e0:	e7f9      	b.n	1c5d6 <hal_timer_irq_handler+0x20>
	...

0001c5e4 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1c5e4:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1c5e6:	4802      	ldr	r0, [pc, #8]	; (1c5f0 <nrf52_timer0_irq_handler+0xc>)
   1c5e8:	f7ff ffe5 	bl	1c5b6 <hal_timer_irq_handler>
}
   1c5ec:	bd08      	pop	{r3, pc}
   1c5ee:	bf00      	nop
   1c5f0:	2000c6d0 	.word	0x2000c6d0

0001c5f4 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1c5f4:	2805      	cmp	r0, #5
   1c5f6:	dc1c      	bgt.n	1c632 <hal_timer_init+0x3e>
   1c5f8:	4b12      	ldr	r3, [pc, #72]	; (1c644 <hal_timer_init+0x50>)
   1c5fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1c5fe:	b1d3      	cbz	r3, 1c636 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1c600:	781a      	ldrb	r2, [r3, #0]
   1c602:	b9d2      	cbnz	r2, 1c63a <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1c604:	b9d8      	cbnz	r0, 1c63e <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1c606:	4a10      	ldr	r2, [pc, #64]	; (1c648 <hal_timer_init+0x54>)
   1c608:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1c60a:	2208      	movs	r2, #8
   1c60c:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c60e:	4b0f      	ldr	r3, [pc, #60]	; (1c64c <hal_timer_init+0x58>)
   1c610:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1c618:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1c61c:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c620:	22e0      	movs	r2, #224	; 0xe0
   1c622:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1c626:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1c62a:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1c62c:	4a08      	ldr	r2, [pc, #32]	; (1c650 <hal_timer_init+0x5c>)
   1c62e:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1c630:	4770      	bx	lr

err:
    return rc;
   1c632:	2016      	movs	r0, #22
   1c634:	4770      	bx	lr
   1c636:	2016      	movs	r0, #22
   1c638:	4770      	bx	lr
   1c63a:	2016      	movs	r0, #22
   1c63c:	4770      	bx	lr
   1c63e:	2016      	movs	r0, #22
}
   1c640:	4770      	bx	lr
   1c642:	bf00      	nop
   1c644:	00021c4c 	.word	0x00021c4c
   1c648:	40008000 	.word	0x40008000
   1c64c:	e000e100 	.word	0xe000e100
   1c650:	0001c5e5 	.word	0x0001c5e5

0001c654 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1c654:	2805      	cmp	r0, #5
   1c656:	dc65      	bgt.n	1c724 <hal_timer_config+0xd0>
   1c658:	4b39      	ldr	r3, [pc, #228]	; (1c740 <hal_timer_config+0xec>)
   1c65a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1c65e:	2800      	cmp	r0, #0
   1c660:	d062      	beq.n	1c728 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1c662:	4b38      	ldr	r3, [pc, #224]	; (1c744 <hal_timer_config+0xf0>)
   1c664:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1c668:	7803      	ldrb	r3, [r0, #0]
   1c66a:	2b00      	cmp	r3, #0
   1c66c:	d15e      	bne.n	1c72c <hal_timer_config+0xd8>
   1c66e:	2900      	cmp	r1, #0
   1c670:	d05e      	beq.n	1c730 <hal_timer_config+0xdc>
   1c672:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1c676:	d85d      	bhi.n	1c734 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1c678:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1c67a:	2a00      	cmp	r2, #0
   1c67c:	d05c      	beq.n	1c738 <hal_timer_config+0xe4>
{
   1c67e:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1c680:	2901      	cmp	r1, #1
   1c682:	d013      	beq.n	1c6ac <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1c684:	2301      	movs	r3, #1
   1c686:	2b09      	cmp	r3, #9
   1c688:	d810      	bhi.n	1c6ac <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1c68a:	2201      	movs	r2, #1
   1c68c:	409a      	lsls	r2, r3
   1c68e:	428a      	cmp	r2, r1
   1c690:	d202      	bcs.n	1c698 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1c692:	3301      	adds	r3, #1
   1c694:	b2db      	uxtb	r3, r3
   1c696:	e7f6      	b.n	1c686 <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1c698:	1e5c      	subs	r4, r3, #1
   1c69a:	2501      	movs	r5, #1
   1c69c:	fa05 f404 	lsl.w	r4, r5, r4
   1c6a0:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1c6a2:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1c6a4:	428c      	cmp	r4, r1
   1c6a6:	d201      	bcs.n	1c6ac <hal_timer_config+0x58>
                    prescaler -= 1;
   1c6a8:	3b01      	subs	r3, #1
   1c6aa:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1c6ac:	4a25      	ldr	r2, [pc, #148]	; (1c744 <hal_timer_config+0xf0>)
   1c6ae:	411a      	asrs	r2, r3
   1c6b0:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1c6b2:	2201      	movs	r2, #1
   1c6b4:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1c6b6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1c6ba:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1c6bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1c6c0:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1c6c4:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1c6c8:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1c6cc:	d00c      	beq.n	1c6e8 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1c6ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1c6d2:	2100      	movs	r1, #0
   1c6d4:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1c6d8:	2101      	movs	r1, #1
   1c6da:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1c6dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1c6e0:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1c6e4:	2a00      	cmp	r2, #0
   1c6e6:	d0f9      	beq.n	1c6dc <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1c6e8:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1c6ea:	2101      	movs	r1, #1
   1c6ec:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1c6ee:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1c6f0:	2500      	movs	r5, #0
   1c6f2:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1c6f6:	2503      	movs	r5, #3
   1c6f8:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1c6fc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1c700:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1c702:	7842      	ldrb	r2, [r0, #1]
   1c704:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1c706:	2b00      	cmp	r3, #0
   1c708:	db07      	blt.n	1c71a <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c70a:	f002 021f 	and.w	r2, r2, #31
   1c70e:	095b      	lsrs	r3, r3, #5
   1c710:	fa01 f202 	lsl.w	r2, r1, r2
   1c714:	490c      	ldr	r1, [pc, #48]	; (1c748 <hal_timer_config+0xf4>)
   1c716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1c71a:	b97c      	cbnz	r4, 1c73c <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1c71c:	b662      	cpsie	i

    return 0;
   1c71e:	2000      	movs	r0, #0

err:
    return rc;
}
   1c720:	bc30      	pop	{r4, r5}
   1c722:	4770      	bx	lr
    return rc;
   1c724:	2016      	movs	r0, #22
   1c726:	4770      	bx	lr
   1c728:	2016      	movs	r0, #22
   1c72a:	4770      	bx	lr
   1c72c:	2016      	movs	r0, #22
   1c72e:	4770      	bx	lr
   1c730:	2016      	movs	r0, #22
   1c732:	4770      	bx	lr
   1c734:	2016      	movs	r0, #22
   1c736:	4770      	bx	lr
   1c738:	2016      	movs	r0, #22
}
   1c73a:	4770      	bx	lr
    return 0;
   1c73c:	2000      	movs	r0, #0
   1c73e:	e7ef      	b.n	1c720 <hal_timer_config+0xcc>
   1c740:	00021c4c 	.word	0x00021c4c
   1c744:	00f42400 	.word	0x00f42400
   1c748:	e000e100 	.word	0xe000e100

0001c74c <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1c74c:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1c74e:	2805      	cmp	r0, #5
   1c750:	dc0c      	bgt.n	1c76c <hal_timer_read+0x20>
   1c752:	4b09      	ldr	r3, [pc, #36]	; (1c778 <hal_timer_read+0x2c>)
   1c754:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1c758:	b140      	cbz	r0, 1c76c <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1c75a:	7883      	ldrb	r3, [r0, #2]
   1c75c:	b91b      	cbnz	r3, 1c766 <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1c75e:	6900      	ldr	r0, [r0, #16]
   1c760:	f7ff fe5a 	bl	1c418 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1c764:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1c766:	f7ff fec1 	bl	1c4ec <hal_timer_read_bsptimer>
   1c76a:	e7fb      	b.n	1c764 <hal_timer_read+0x18>
    assert(0);
   1c76c:	2300      	movs	r3, #0
   1c76e:	461a      	mov	r2, r3
   1c770:	4619      	mov	r1, r3
   1c772:	4618      	mov	r0, r3
   1c774:	f7fd fcf2 	bl	1a15c <__assert_func>
   1c778:	00021c4c 	.word	0x00021c4c

0001c77c <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1c77c:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1c77e:	2100      	movs	r1, #0
   1c780:	4608      	mov	r0, r1
   1c782:	f7ff ff37 	bl	1c5f4 <hal_timer_init>
    assert(rc == 0);
   1c786:	b920      	cbnz	r0, 1c792 <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1c788:	4808      	ldr	r0, [pc, #32]	; (1c7ac <nrf52_periph_create_timers+0x30>)
   1c78a:	f7fd ff11 	bl	1a5b0 <os_cputime_init>
    assert(rc == 0);
   1c78e:	b930      	cbnz	r0, 1c79e <nrf52_periph_create_timers+0x22>
#endif
}
   1c790:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1c792:	2300      	movs	r3, #0
   1c794:	461a      	mov	r2, r3
   1c796:	4619      	mov	r1, r3
   1c798:	4618      	mov	r0, r3
   1c79a:	f7fd fcdf 	bl	1a15c <__assert_func>
    assert(rc == 0);
   1c79e:	2300      	movs	r3, #0
   1c7a0:	461a      	mov	r2, r3
   1c7a2:	4619      	mov	r1, r3
   1c7a4:	4618      	mov	r0, r3
   1c7a6:	f7fd fcd9 	bl	1a15c <__assert_func>
   1c7aa:	bf00      	nop
   1c7ac:	000f4240 	.word	0x000f4240

0001c7b0 <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1c7b0:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1c7b2:	4906      	ldr	r1, [pc, #24]	; (1c7cc <nrf52_periph_create_i2c+0x1c>)
   1c7b4:	2001      	movs	r0, #1
   1c7b6:	f7fd f82b 	bl	19810 <hal_i2c_init>
    assert(rc == 0);
   1c7ba:	b900      	cbnz	r0, 1c7be <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1c7bc:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1c7be:	2300      	movs	r3, #0
   1c7c0:	461a      	mov	r2, r3
   1c7c2:	4619      	mov	r1, r3
   1c7c4:	4618      	mov	r0, r3
   1c7c6:	f7fd fcc9 	bl	1a15c <__assert_func>
   1c7ca:	bf00      	nop
   1c7cc:	00021c64 	.word	0x00021c64

0001c7d0 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1c7d0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1c7d2:	2200      	movs	r2, #0
   1c7d4:	4905      	ldr	r1, [pc, #20]	; (1c7ec <nrf52_periph_create_spi+0x1c>)
   1c7d6:	4610      	mov	r0, r2
   1c7d8:	f7fd fb4e 	bl	19e78 <hal_spi_init>
    assert(rc == 0);
   1c7dc:	b900      	cbnz	r0, 1c7e0 <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1c7de:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1c7e0:	2300      	movs	r3, #0
   1c7e2:	461a      	mov	r2, r3
   1c7e4:	4619      	mov	r1, r3
   1c7e6:	4618      	mov	r0, r3
   1c7e8:	f7fd fcb8 	bl	1a15c <__assert_func>
   1c7ec:	00021c70 	.word	0x00021c70

0001c7f0 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1c7f0:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1c7f2:	f7ff ffc3 	bl	1c77c <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1c7f6:	f7ff ffdb 	bl	1c7b0 <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1c7fa:	f7ff ffe9 	bl	1c7d0 <nrf52_periph_create_spi>
}
   1c7fe:	bd08      	pop	{r3, pc}

0001c800 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1c800:	4770      	bx	lr
	...

0001c804 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1c804:	4b08      	ldr	r3, [pc, #32]	; (1c828 <sensor_mgr_remove+0x24>)
   1c806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c808:	4282      	cmp	r2, r0
   1c80a:	d104      	bne.n	1c816 <sensor_mgr_remove+0x12>
   1c80c:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1c810:	631a      	str	r2, [r3, #48]	; 0x30
   1c812:	4770      	bx	lr
   1c814:	461a      	mov	r2, r3
   1c816:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1c81a:	4283      	cmp	r3, r0
   1c81c:	d1fa      	bne.n	1c814 <sensor_mgr_remove+0x10>
   1c81e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1c822:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1c826:	4770      	bx	lr
   1c828:	2000c6f0 	.word	0x2000c6f0

0001c82c <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1c82c:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1c82e:	6a03      	ldr	r3, [r0, #32]
   1c830:	b993      	cbnz	r3, 1c858 <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c832:	4b15      	ldr	r3, [pc, #84]	; (1c888 <sensor_mgr_insert+0x5c>)
   1c834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1c836:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c838:	e002      	b.n	1c840 <sensor_mgr_insert+0x14>
            prev = cursor;
   1c83a:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c83c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1c840:	2b00      	cmp	r3, #0
   1c842:	d1fa      	bne.n	1c83a <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1c844:	b1c9      	cbz	r1, 1c87a <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1c846:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1c84a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1c84e:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1c852:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c856:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c858:	4b0b      	ldr	r3, [pc, #44]	; (1c888 <sensor_mgr_insert+0x5c>)
   1c85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1c85c:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c85e:	2b00      	cmp	r3, #0
   1c860:	d0f0      	beq.n	1c844 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1c862:	6a1a      	ldr	r2, [r3, #32]
   1c864:	2a00      	cmp	r2, #0
   1c866:	d0ed      	beq.n	1c844 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1c868:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1c86a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1c86c:	1b12      	subs	r2, r2, r4
   1c86e:	2a00      	cmp	r2, #0
   1c870:	dbe8      	blt.n	1c844 <sensor_mgr_insert+0x18>
        prev = cursor;
   1c872:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1c878:	e7f1      	b.n	1c85e <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1c87a:	4b03      	ldr	r3, [pc, #12]	; (1c888 <sensor_mgr_insert+0x5c>)
   1c87c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c87e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1c882:	6318      	str	r0, [r3, #48]	; 0x30
   1c884:	e7e5      	b.n	1c852 <sensor_mgr_insert+0x26>
   1c886:	bf00      	nop
   1c888:	2000c6f0 	.word	0x2000c6f0

0001c88c <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1c88c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1c88e:	fab0 f080 	clz	r0, r0
   1c892:	0940      	lsrs	r0, r0, #5
   1c894:	4770      	bx	lr
	...

0001c898 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1c898:	4b01      	ldr	r3, [pc, #4]	; (1c8a0 <sensor_mgr_evq_set+0x8>)
   1c89a:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1c89c:	4770      	bx	lr
   1c89e:	bf00      	nop
   1c8a0:	2000c6f0 	.word	0x2000c6f0

0001c8a4 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1c8a4:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1c8a8:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c8ac:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1c8b0:	ea02 0b04 	and.w	fp, r2, r4
   1c8b4:	ea03 0c05 	and.w	ip, r3, r5
   1c8b8:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1c8bc:	ea0b 0200 	and.w	r2, fp, r0
   1c8c0:	ea0c 0301 	and.w	r3, ip, r1
   1c8c4:	4313      	orrs	r3, r2
}
   1c8c6:	bf14      	ite	ne
   1c8c8:	2001      	movne	r0, #1
   1c8ca:	2000      	moveq	r0, #0
   1c8cc:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1c8d0:	4770      	bx	lr

0001c8d2 <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1c8d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c8d6:	b083      	sub	sp, #12
   1c8d8:	4605      	mov	r5, r0
   1c8da:	4689      	mov	r9, r1
   1c8dc:	4690      	mov	r8, r2
   1c8de:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1c8e2:	790b      	ldrb	r3, [r1, #4]
   1c8e4:	2b01      	cmp	r3, #1
   1c8e6:	d013      	beq.n	1c910 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1c8e8:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1c8ea:	e000      	b.n	1c8ee <sensor_read_data_func+0x1c>
   1c8ec:	6924      	ldr	r4, [r4, #16]
   1c8ee:	b17c      	cbz	r4, 1c910 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1c8f0:	e9d4 0100 	ldrd	r0, r1, [r4]
   1c8f4:	ea00 0206 	and.w	r2, r0, r6
   1c8f8:	ea01 0307 	and.w	r3, r1, r7
   1c8fc:	4313      	orrs	r3, r2
   1c8fe:	d0f5      	beq.n	1c8ec <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1c900:	68a3      	ldr	r3, [r4, #8]
   1c902:	68e1      	ldr	r1, [r4, #12]
   1c904:	e9cd 6700 	strd	r6, r7, [sp]
   1c908:	4642      	mov	r2, r8
   1c90a:	4628      	mov	r0, r5
   1c90c:	4798      	blx	r3
   1c90e:	e7ed      	b.n	1c8ec <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1c910:	f8d9 3000 	ldr.w	r3, [r9]
   1c914:	b14b      	cbz	r3, 1c92a <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1c916:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1c91a:	e9cd 6700 	strd	r6, r7, [sp]
   1c91e:	4642      	mov	r2, r8
   1c920:	4628      	mov	r0, r5
   1c922:	4798      	blx	r3
    }

    return (0);
}
   1c924:	b003      	add	sp, #12
   1c926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1c92a:	2000      	movs	r0, #0
   1c92c:	e7fa      	b.n	1c924 <sensor_read_data_func+0x52>
	...

0001c930 <sensor_base_ts_update_event>:
{
   1c930:	b530      	push	{r4, r5, lr}
   1c932:	b087      	sub	sp, #28
    ticks = os_time_get();
   1c934:	f7fe fe30 	bl	1b598 <os_time_get>
   1c938:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1c93a:	a901      	add	r1, sp, #4
   1c93c:	a802      	add	r0, sp, #8
   1c93e:	f7fe fe65 	bl	1b60c <os_gettimeofday>
    if (rc) {
   1c942:	b138      	cbz	r0, 1c954 <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1c944:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1c948:	4621      	mov	r1, r4
   1c94a:	4809      	ldr	r0, [pc, #36]	; (1c970 <sensor_base_ts_update_event+0x40>)
   1c94c:	f7fd fdac 	bl	1a4a8 <os_callout_reset>
}
   1c950:	b007      	add	sp, #28
   1c952:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1c954:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1c958:	4d06      	ldr	r5, [pc, #24]	; (1c974 <sensor_base_ts_update_event+0x44>)
   1c95a:	ab06      	add	r3, sp, #24
   1c95c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c960:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1c964:	9b01      	ldr	r3, [sp, #4]
   1c966:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1c968:	f7fd fe28 	bl	1a5bc <os_cputime_get32>
   1c96c:	6168      	str	r0, [r5, #20]
   1c96e:	e7eb      	b.n	1c948 <sensor_base_ts_update_event+0x18>
   1c970:	2000c724 	.word	0x2000c724
   1c974:	2000c748 	.word	0x2000c748

0001c978 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1c978:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1c97c:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1c97e:	f7fd fe1d 	bl	1a5bc <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1c982:	4a0e      	ldr	r2, [pc, #56]	; (1c9bc <sensor_up_timestamp+0x44>)
   1c984:	6955      	ldr	r5, [r2, #20]
   1c986:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1c988:	6460      	str	r0, [r4, #68]	; 0x44
   1c98a:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c98c:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1c990:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c992:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1c994:	4b0a      	ldr	r3, [pc, #40]	; (1c9c0 <sensor_up_timestamp+0x48>)
   1c996:	fba3 c305 	umull	ip, r3, r3, r5
   1c99a:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c99c:	eb10 0b03 	adds.w	fp, r0, r3
   1c9a0:	f141 0c00 	adc.w	ip, r1, #0
   1c9a4:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1c9a8:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1c9ac:	4905      	ldr	r1, [pc, #20]	; (1c9c4 <sensor_up_timestamp+0x4c>)
   1c9ae:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1c9b2:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1c9b4:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1c9b6:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1c9ba:	bf00      	nop
   1c9bc:	2000c748 	.word	0x2000c748
   1c9c0:	431bde83 	.word	0x431bde83
   1c9c4:	000f4240 	.word	0x000f4240

0001c9c8 <sensor_mgr_lock>:
{
   1c9c8:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1c9ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c9ce:	4804      	ldr	r0, [pc, #16]	; (1c9e0 <sensor_mgr_lock+0x18>)
   1c9d0:	f7fe fa5c 	bl	1ae8c <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1c9d4:	b108      	cbz	r0, 1c9da <sensor_mgr_lock+0x12>
   1c9d6:	2809      	cmp	r0, #9
   1c9d8:	d000      	beq.n	1c9dc <sensor_mgr_lock+0x14>
}
   1c9da:	bd08      	pop	{r3, pc}
        return (0);
   1c9dc:	2000      	movs	r0, #0
   1c9de:	e7fc      	b.n	1c9da <sensor_mgr_lock+0x12>
   1c9e0:	2000c6f0 	.word	0x2000c6f0

0001c9e4 <sensor_mgr_unlock>:
{
   1c9e4:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1c9e6:	4802      	ldr	r0, [pc, #8]	; (1c9f0 <sensor_mgr_unlock+0xc>)
   1c9e8:	f7fe f9f4 	bl	1add4 <os_mutex_release>
}
   1c9ec:	bd08      	pop	{r3, pc}
   1c9ee:	bf00      	nop
   1c9f0:	2000c6f0 	.word	0x2000c6f0

0001c9f4 <sensor_mgr_evq_get>:
}
   1c9f4:	4b01      	ldr	r3, [pc, #4]	; (1c9fc <sensor_mgr_evq_get+0x8>)
   1c9f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1c9f8:	4770      	bx	lr
   1c9fa:	bf00      	nop
   1c9fc:	2000c6f0 	.word	0x2000c6f0

0001ca00 <sensor_mgr_init>:
{
   1ca00:	b570      	push	{r4, r5, r6, lr}
   1ca02:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1ca04:	f7fd ff68 	bl	1a8d8 <os_eventq_dflt_get>
   1ca08:	f7ff ff46 	bl	1c898 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1ca0c:	4b1c      	ldr	r3, [pc, #112]	; (1ca80 <sensor_mgr_init+0x80>)
   1ca0e:	9300      	str	r3, [sp, #0]
   1ca10:	4b1c      	ldr	r3, [pc, #112]	; (1ca84 <sensor_mgr_init+0x84>)
   1ca12:	2218      	movs	r2, #24
   1ca14:	2105      	movs	r1, #5
   1ca16:	481c      	ldr	r0, [pc, #112]	; (1ca88 <sensor_mgr_init+0x88>)
   1ca18:	f7fe f8e8 	bl	1abec <os_mempool_init>
    assert(rc == OS_OK);
   1ca1c:	bb50      	cbnz	r0, 1ca74 <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1ca1e:	f7ff ffe9 	bl	1c9f4 <sensor_mgr_evq_get>
   1ca22:	4e1a      	ldr	r6, [pc, #104]	; (1ca8c <sensor_mgr_init+0x8c>)
   1ca24:	2300      	movs	r3, #0
   1ca26:	4a1a      	ldr	r2, [pc, #104]	; (1ca90 <sensor_mgr_init+0x90>)
   1ca28:	4601      	mov	r1, r0
   1ca2a:	4630      	mov	r0, r6
   1ca2c:	f7fd fd10 	bl	1a450 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1ca30:	ad04      	add	r5, sp, #16
   1ca32:	a903      	add	r1, sp, #12
   1ca34:	4628      	mov	r0, r5
   1ca36:	f7fe fde9 	bl	1b60c <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1ca3a:	4c16      	ldr	r4, [pc, #88]	; (1ca94 <sensor_mgr_init+0x94>)
   1ca3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1ca40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1ca44:	9b03      	ldr	r3, [sp, #12]
   1ca46:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1ca48:	f7fd fdb8 	bl	1a5bc <os_cputime_get32>
   1ca4c:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1ca4e:	f7ff ffd1 	bl	1c9f4 <sensor_mgr_evq_get>
   1ca52:	4c11      	ldr	r4, [pc, #68]	; (1ca98 <sensor_mgr_init+0x98>)
   1ca54:	2300      	movs	r3, #0
   1ca56:	4a11      	ldr	r2, [pc, #68]	; (1ca9c <sensor_mgr_init+0x9c>)
   1ca58:	4601      	mov	r1, r0
   1ca5a:	4620      	mov	r0, r4
   1ca5c:	f7fd fcf8 	bl	1a450 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1ca60:	2180      	movs	r1, #128	; 0x80
   1ca62:	4620      	mov	r0, r4
   1ca64:	f7fd fd20 	bl	1a4a8 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1ca68:	f1a6 000c 	sub.w	r0, r6, #12
   1ca6c:	f7fe f9a8 	bl	1adc0 <os_mutex_init>
}
   1ca70:	b008      	add	sp, #32
   1ca72:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1ca74:	2300      	movs	r3, #0
   1ca76:	461a      	mov	r2, r3
   1ca78:	4619      	mov	r1, r3
   1ca7a:	4618      	mov	r0, r3
   1ca7c:	f7fd fb6e 	bl	1a15c <__assert_func>
   1ca80:	00021c74 	.word	0x00021c74
   1ca84:	2000c1ec 	.word	0x2000c1ec
   1ca88:	2000c264 	.word	0x2000c264
   1ca8c:	2000c6fc 	.word	0x2000c6fc
   1ca90:	0001cc6d 	.word	0x0001cc6d
   1ca94:	2000c748 	.word	0x2000c748
   1ca98:	2000c724 	.word	0x2000c724
   1ca9c:	0001c931 	.word	0x0001c931

0001caa0 <sensor_pkg_init>:
{
   1caa0:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1caa2:	f7ff ffad 	bl	1ca00 <sensor_mgr_init>
}
   1caa6:	bd08      	pop	{r3, pc}

0001caa8 <sensor_lock>:
{
   1caa8:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1caaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1caae:	3004      	adds	r0, #4
   1cab0:	f7fe f9ec 	bl	1ae8c <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1cab4:	b108      	cbz	r0, 1caba <sensor_lock+0x12>
   1cab6:	2809      	cmp	r0, #9
   1cab8:	d000      	beq.n	1cabc <sensor_lock+0x14>
}
   1caba:	bd08      	pop	{r3, pc}
        return (0);
   1cabc:	2000      	movs	r0, #0
   1cabe:	e7fc      	b.n	1caba <sensor_lock+0x12>

0001cac0 <sensor_unlock>:
{
   1cac0:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1cac2:	3004      	adds	r0, #4
   1cac4:	f7fe f986 	bl	1add4 <os_mutex_release>
}
   1cac8:	bd08      	pop	{r3, pc}

0001caca <sensor_update_nextrun>:
{
   1caca:	b530      	push	{r4, r5, lr}
   1cacc:	b083      	sub	sp, #12
   1cace:	4604      	mov	r4, r0
   1cad0:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1cad2:	a901      	add	r1, sp, #4
   1cad4:	6a00      	ldr	r0, [r0, #32]
   1cad6:	f7fe fdb5 	bl	1b644 <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1cada:	4620      	mov	r0, r4
   1cadc:	f7ff ffe4 	bl	1caa8 <sensor_lock>
    sensor_mgr_remove(sensor);
   1cae0:	4620      	mov	r0, r4
   1cae2:	f7ff fe8f 	bl	1c804 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1cae6:	9b01      	ldr	r3, [sp, #4]
   1cae8:	441d      	add	r5, r3
   1caea:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1caec:	4620      	mov	r0, r4
   1caee:	f7ff fe9d 	bl	1c82c <sensor_mgr_insert>
    sensor_unlock(sensor);
   1caf2:	4620      	mov	r0, r4
   1caf4:	f7ff ffe4 	bl	1cac0 <sensor_unlock>
}
   1caf8:	b003      	add	sp, #12
   1cafa:	bd30      	pop	{r4, r5, pc}

0001cafc <sensor_calc_nextrun_delta>:
{
   1cafc:	b538      	push	{r3, r4, r5, lr}
   1cafe:	4605      	mov	r5, r0
   1cb00:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1cb02:	f7ff ffd1 	bl	1caa8 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1cb06:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1cb08:	1b0c      	subs	r4, r1, r4
   1cb0a:	d404      	bmi.n	1cb16 <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1cb0c:	4628      	mov	r0, r5
   1cb0e:	f7ff ffd7 	bl	1cac0 <sensor_unlock>
}
   1cb12:	4620      	mov	r0, r4
   1cb14:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1cb16:	2400      	movs	r4, #0
   1cb18:	e7f8      	b.n	1cb0c <sensor_calc_nextrun_delta+0x10>
	...

0001cb1c <sensor_find_min_nextrun_sensor>:
{
   1cb1c:	b570      	push	{r4, r5, r6, lr}
   1cb1e:	4606      	mov	r6, r0
   1cb20:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1cb22:	f7ff ff51 	bl	1c9c8 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1cb26:	4b05      	ldr	r3, [pc, #20]	; (1cb3c <sensor_find_min_nextrun_sensor+0x20>)
   1cb28:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1cb2a:	4631      	mov	r1, r6
   1cb2c:	4620      	mov	r0, r4
   1cb2e:	f7ff ffe5 	bl	1cafc <sensor_calc_nextrun_delta>
   1cb32:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1cb34:	f7ff ff56 	bl	1c9e4 <sensor_mgr_unlock>
}
   1cb38:	4620      	mov	r0, r4
   1cb3a:	bd70      	pop	{r4, r5, r6, pc}
   1cb3c:	2000c6f0 	.word	0x2000c6f0

0001cb40 <sensor_mgr_register>:
{
   1cb40:	b538      	push	{r3, r4, r5, lr}
   1cb42:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1cb44:	f7ff ff40 	bl	1c9c8 <sensor_mgr_lock>
    if (rc != 0) {
   1cb48:	4604      	mov	r4, r0
   1cb4a:	b108      	cbz	r0, 1cb50 <sensor_mgr_register+0x10>
}
   1cb4c:	4620      	mov	r0, r4
   1cb4e:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1cb50:	4628      	mov	r0, r5
   1cb52:	f7ff ffa9 	bl	1caa8 <sensor_lock>
    if (rc != 0) {
   1cb56:	4604      	mov	r4, r0
   1cb58:	2800      	cmp	r0, #0
   1cb5a:	d1f7      	bne.n	1cb4c <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1cb5c:	4628      	mov	r0, r5
   1cb5e:	f7ff fe65 	bl	1c82c <sensor_mgr_insert>
    sensor_unlock(sensor);
   1cb62:	4628      	mov	r0, r5
   1cb64:	f7ff ffac 	bl	1cac0 <sensor_unlock>
    sensor_mgr_unlock();
   1cb68:	f7ff ff3c 	bl	1c9e4 <sensor_mgr_unlock>
    return (0);
   1cb6c:	e7ee      	b.n	1cb4c <sensor_mgr_register+0xc>

0001cb6e <sensor_init>:
{
   1cb6e:	b538      	push	{r3, r4, r5, lr}
   1cb70:	4604      	mov	r4, r0
   1cb72:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1cb74:	2288      	movs	r2, #136	; 0x88
   1cb76:	2100      	movs	r1, #0
   1cb78:	f7fe fef3 	bl	1b962 <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1cb7c:	1d20      	adds	r0, r4, #4
   1cb7e:	f7fe f91f 	bl	1adc0 <os_mutex_init>
    if (rc != 0) {
   1cb82:	4603      	mov	r3, r0
   1cb84:	b900      	cbnz	r0, 1cb88 <sensor_init+0x1a>
    sensor->s_dev = dev;
   1cb86:	6025      	str	r5, [r4, #0]
}
   1cb88:	4618      	mov	r0, r3
   1cb8a:	bd38      	pop	{r3, r4, r5, pc}

0001cb8c <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1cb8c:	b530      	push	{r4, r5, lr}
   1cb8e:	b089      	sub	sp, #36	; 0x24
   1cb90:	4604      	mov	r4, r0
   1cb92:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1cb96:	f7ff ff87 	bl	1caa8 <sensor_lock>
    if (rc) {
   1cb9a:	4605      	mov	r5, r0
   1cb9c:	b9f8      	cbnz	r0, 1cbde <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1cb9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1cba0:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1cba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1cba4:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1cba6:	a904      	add	r1, sp, #16
   1cba8:	4620      	mov	r0, r4
   1cbaa:	f7ff fe7b 	bl	1c8a4 <sensor_mgr_match_bytype>
   1cbae:	b1e0      	cbz	r0, 1cbea <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1cbb0:	4620      	mov	r0, r4
   1cbb2:	f7ff fee1 	bl	1c978 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1cbb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cbb8:	6819      	ldr	r1, [r3, #0]
   1cbba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cbbc:	9302      	str	r3, [sp, #8]
   1cbbe:	ab06      	add	r3, sp, #24
   1cbc0:	9301      	str	r3, [sp, #4]
   1cbc2:	4b0b      	ldr	r3, [pc, #44]	; (1cbf0 <sensor_read+0x64>)
   1cbc4:	9300      	str	r3, [sp, #0]
   1cbc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1cbca:	4620      	mov	r0, r4
   1cbcc:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1cbce:	4605      	mov	r5, r0
   1cbd0:	b128      	cbz	r0, 1cbde <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1cbd2:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1cbd4:	b11b      	cbz	r3, 1cbde <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1cbd6:	4602      	mov	r2, r0
   1cbd8:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1cbda:	4620      	mov	r0, r4
   1cbdc:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1cbde:	4620      	mov	r0, r4
   1cbe0:	f7ff ff6e 	bl	1cac0 <sensor_unlock>
    return (rc);
}
   1cbe4:	4628      	mov	r0, r5
   1cbe6:	b009      	add	sp, #36	; 0x24
   1cbe8:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1cbea:	f06f 0503 	mvn.w	r5, #3
   1cbee:	e7f6      	b.n	1cbde <sensor_read+0x52>
   1cbf0:	0001c8d3 	.word	0x0001c8d3

0001cbf4 <sensor_mgr_poll_bytype>:
{
   1cbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cbf6:	b085      	sub	sp, #20
   1cbf8:	4616      	mov	r6, r2
   1cbfa:	461f      	mov	r7, r3
   1cbfc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1cbfe:	b10c      	cbz	r4, 1cc04 <sensor_mgr_poll_bytype+0x10>
   1cc00:	8aa3      	ldrh	r3, [r4, #20]
   1cc02:	b9cb      	cbnz	r3, 1cc38 <sensor_mgr_poll_bytype+0x44>
   1cc04:	4632      	mov	r2, r6
   1cc06:	463b      	mov	r3, r7
   1cc08:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1cc0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cc0e:	9102      	str	r1, [sp, #8]
   1cc10:	2100      	movs	r1, #0
   1cc12:	9101      	str	r1, [sp, #4]
   1cc14:	9100      	str	r1, [sp, #0]
   1cc16:	f7ff ffb9 	bl	1cb8c <sensor_read>
        sensor_lock(sensor);
   1cc1a:	4628      	mov	r0, r5
   1cc1c:	f7ff ff44 	bl	1caa8 <sensor_lock>
        if (stt) {
   1cc20:	b12c      	cbz	r4, 1cc2e <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1cc22:	8aa3      	ldrh	r3, [r4, #20]
   1cc24:	b91b      	cbnz	r3, 1cc2e <sensor_mgr_poll_bytype+0x3a>
   1cc26:	8a63      	ldrh	r3, [r4, #18]
   1cc28:	b10b      	cbz	r3, 1cc2e <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1cc2a:	3b01      	subs	r3, #1
   1cc2c:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1cc2e:	4628      	mov	r0, r5
   1cc30:	f7ff ff46 	bl	1cac0 <sensor_unlock>
}
   1cc34:	b005      	add	sp, #20
   1cc36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1cc38:	3b01      	subs	r3, #1
   1cc3a:	82a3      	strh	r3, [r4, #20]
}
   1cc3c:	e7fa      	b.n	1cc34 <sensor_mgr_poll_bytype+0x40>

0001cc3e <sensor_poll_per_type_trait>:
{
   1cc3e:	b570      	push	{r4, r5, r6, lr}
   1cc40:	b082      	sub	sp, #8
   1cc42:	4605      	mov	r5, r0
   1cc44:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1cc46:	f7ff ff2f 	bl	1caa8 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1cc4a:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1cc4c:	e007      	b.n	1cc5e <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1cc4e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cc52:	9601      	str	r6, [sp, #4]
   1cc54:	9400      	str	r4, [sp, #0]
   1cc56:	4628      	mov	r0, r5
   1cc58:	f7ff ffcc 	bl	1cbf4 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1cc5c:	6a24      	ldr	r4, [r4, #32]
   1cc5e:	2c00      	cmp	r4, #0
   1cc60:	d1f5      	bne.n	1cc4e <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1cc62:	4628      	mov	r0, r5
   1cc64:	f7ff ff2c 	bl	1cac0 <sensor_unlock>
}
   1cc68:	b002      	add	sp, #8
   1cc6a:	bd70      	pop	{r4, r5, r6, pc}

0001cc6c <sensor_mgr_wakeup_event>:
{
   1cc6c:	b570      	push	{r4, r5, r6, lr}
   1cc6e:	b084      	sub	sp, #16
    now = os_time_get();
   1cc70:	f7fe fc92 	bl	1b598 <os_time_get>
   1cc74:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1cc76:	f7ff fea7 	bl	1c9c8 <sensor_mgr_lock>
   1cc7a:	e012      	b.n	1cca2 <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1cc7c:	4620      	mov	r0, r4
   1cc7e:	f7ff ff1f 	bl	1cac0 <sensor_unlock>
            sensor_mgr_unlock();
   1cc82:	f7ff feaf 	bl	1c9e4 <sensor_mgr_unlock>
}
   1cc86:	b004      	add	sp, #16
   1cc88:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1cc8a:	4632      	mov	r2, r6
   1cc8c:	4629      	mov	r1, r5
   1cc8e:	4620      	mov	r0, r4
   1cc90:	f7ff ffd5 	bl	1cc3e <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1cc94:	4629      	mov	r1, r5
   1cc96:	4620      	mov	r0, r4
   1cc98:	f7ff ff17 	bl	1caca <sensor_update_nextrun>
        sensor_unlock(cursor);
   1cc9c:	4620      	mov	r0, r4
   1cc9e:	f7ff ff0f 	bl	1cac0 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1cca2:	a903      	add	r1, sp, #12
   1cca4:	4628      	mov	r0, r5
   1cca6:	f7ff ff39 	bl	1cb1c <sensor_find_min_nextrun_sensor>
   1ccaa:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1ccac:	f7ff fefc 	bl	1caa8 <sensor_lock>
        if (!cursor->s_poll_rate) {
   1ccb0:	6a23      	ldr	r3, [r4, #32]
   1ccb2:	2b00      	cmp	r3, #0
   1ccb4:	d0e2      	beq.n	1cc7c <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1ccb6:	9e03      	ldr	r6, [sp, #12]
   1ccb8:	b96e      	cbnz	r6, 1ccd6 <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1ccba:	4620      	mov	r0, r4
   1ccbc:	f7ff fde6 	bl	1c88c <sensor_type_traits_empty>
   1ccc0:	2800      	cmp	r0, #0
   1ccc2:	d0e2      	beq.n	1cc8a <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1ccc4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1ccc8:	9501      	str	r5, [sp, #4]
   1ccca:	2100      	movs	r1, #0
   1cccc:	9100      	str	r1, [sp, #0]
   1ccce:	4620      	mov	r0, r4
   1ccd0:	f7ff ff90 	bl	1cbf4 <sensor_mgr_poll_bytype>
   1ccd4:	e7de      	b.n	1cc94 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1ccd6:	f7ff fe85 	bl	1c9e4 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1ccda:	9903      	ldr	r1, [sp, #12]
   1ccdc:	4801      	ldr	r0, [pc, #4]	; (1cce4 <sensor_mgr_wakeup_event+0x78>)
   1ccde:	f7fd fbe3 	bl	1a4a8 <os_callout_reset>
   1cce2:	e7d0      	b.n	1cc86 <sensor_mgr_wakeup_event+0x1a>
   1cce4:	2000c6fc 	.word	0x2000c6fc

0001cce8 <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1cce8:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1ccea:	2101      	movs	r1, #1
   1ccec:	4806      	ldr	r0, [pc, #24]	; (1cd08 <init_sensor_coap+0x20>)
   1ccee:	f7fe faf1 	bl	1b2d4 <os_sem_init>
    assert(rc == OS_OK);
   1ccf2:	b918      	cbnz	r0, 1ccfc <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1ccf4:	4b05      	ldr	r3, [pc, #20]	; (1cd0c <init_sensor_coap+0x24>)
   1ccf6:	2201      	movs	r2, #1
   1ccf8:	701a      	strb	r2, [r3, #0]
}
   1ccfa:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1ccfc:	2300      	movs	r3, #0
   1ccfe:	461a      	mov	r2, r3
   1cd00:	4619      	mov	r1, r3
   1cd02:	4618      	mov	r0, r3
   1cd04:	f7fd fa2a 	bl	1a15c <__assert_func>
   1cd08:	2000c280 	.word	0x2000c280
   1cd0c:	2000c288 	.word	0x2000c288

0001cd10 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1cd10:	4b04      	ldr	r3, [pc, #16]	; (1cd24 <is_sensor_node+0x14>)
   1cd12:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cd16:	4313      	orrs	r3, r2
   1cd18:	d101      	bne.n	1cd1e <is_sensor_node+0xe>
    return false;
   1cd1a:	2000      	movs	r0, #0
}
   1cd1c:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1cd1e:	2001      	movs	r0, #1
   1cd20:	4770      	bx	lr
   1cd22:	bf00      	nop
   1cd24:	2000c2a0 	.word	0x2000c2a0

0001cd28 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1cd28:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1cd2a:	4b16      	ldr	r3, [pc, #88]	; (1cd84 <get_hardware_id+0x5c>)
   1cd2c:	681b      	ldr	r3, [r3, #0]
   1cd2e:	b10b      	cbz	r3, 1cd34 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1cd30:	4815      	ldr	r0, [pc, #84]	; (1cd88 <get_hardware_id+0x60>)
   1cd32:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1cd34:	f000 fcee 	bl	1d714 <hal_bsp_hw_id_len>
   1cd38:	4b12      	ldr	r3, [pc, #72]	; (1cd84 <get_hardware_id+0x5c>)
   1cd3a:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1cd3c:	280b      	cmp	r0, #11
   1cd3e:	d914      	bls.n	1cd6a <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1cd40:	210c      	movs	r1, #12
   1cd42:	4811      	ldr	r0, [pc, #68]	; (1cd88 <get_hardware_id+0x60>)
   1cd44:	f000 fce8 	bl	1d718 <hal_bsp_hw_id>
   1cd48:	4b0e      	ldr	r3, [pc, #56]	; (1cd84 <get_hardware_id+0x5c>)
   1cd4a:	6018      	str	r0, [r3, #0]
   1cd4c:	2800      	cmp	r0, #0
   1cd4e:	dd12      	ble.n	1cd76 <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1cd50:	490e      	ldr	r1, [pc, #56]	; (1cd8c <get_hardware_id+0x64>)
   1cd52:	480f      	ldr	r0, [pc, #60]	; (1cd90 <get_hardware_id+0x68>)
   1cd54:	f7fc fb3a 	bl	193cc <console_printf>
   1cd58:	4b0a      	ldr	r3, [pc, #40]	; (1cd84 <get_hardware_id+0x5c>)
   1cd5a:	6819      	ldr	r1, [r3, #0]
   1cd5c:	480a      	ldr	r0, [pc, #40]	; (1cd88 <get_hardware_id+0x60>)
   1cd5e:	f7fc fac5 	bl	192ec <console_dump>
   1cd62:	480c      	ldr	r0, [pc, #48]	; (1cd94 <get_hardware_id+0x6c>)
   1cd64:	f7fc fb32 	bl	193cc <console_printf>
   1cd68:	e7e2      	b.n	1cd30 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1cd6a:	2300      	movs	r3, #0
   1cd6c:	461a      	mov	r2, r3
   1cd6e:	4619      	mov	r1, r3
   1cd70:	4618      	mov	r0, r3
   1cd72:	f7fd f9f3 	bl	1a15c <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1cd76:	2300      	movs	r3, #0
   1cd78:	461a      	mov	r2, r3
   1cd7a:	4619      	mov	r1, r3
   1cd7c:	4618      	mov	r0, r3
   1cd7e:	f7fd f9ed 	bl	1a15c <__assert_func>
   1cd82:	bf00      	nop
   1cd84:	2000c298 	.word	0x2000c298
   1cd88:	2000c28c 	.word	0x2000c28c
   1cd8c:	00021d18 	.word	0x00021d18
   1cd90:	00021cd0 	.word	0x00021cd0
   1cd94:	00021e30 	.word	0x00021e30

0001cd98 <is_collector_node>:
bool is_collector_node(void) {
   1cd98:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1cd9a:	f7ff ffc5 	bl	1cd28 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1cd9e:	220c      	movs	r2, #12
   1cda0:	4903      	ldr	r1, [pc, #12]	; (1cdb0 <is_collector_node+0x18>)
   1cda2:	f7fe fdad 	bl	1b900 <memcmp>
   1cda6:	b108      	cbz	r0, 1cdac <is_collector_node+0x14>
    return false; 
   1cda8:	2000      	movs	r0, #0
}
   1cdaa:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1cdac:	2001      	movs	r0, #1
   1cdae:	e7fc      	b.n	1cdaa <is_collector_node+0x12>
   1cdb0:	00021c88 	.word	0x00021c88

0001cdb4 <is_standalone_node>:
bool is_standalone_node(void) {
   1cdb4:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1cdb6:	f7ff ffef 	bl	1cd98 <is_collector_node>
   1cdba:	b928      	cbnz	r0, 1cdc8 <is_standalone_node+0x14>
   1cdbc:	4604      	mov	r4, r0
   1cdbe:	f7ff ffa7 	bl	1cd10 <is_sensor_node>
   1cdc2:	b910      	cbnz	r0, 1cdca <is_standalone_node+0x16>
   1cdc4:	2401      	movs	r4, #1
   1cdc6:	e000      	b.n	1cdca <is_standalone_node+0x16>
    return false;
   1cdc8:	2400      	movs	r4, #0
}
   1cdca:	4620      	mov	r0, r4
   1cdcc:	bd10      	pop	{r4, pc}
	...

0001cdd0 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1cdd0:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1cdd2:	2400      	movs	r4, #0
   1cdd4:	2c04      	cmp	r4, #4
   1cdd6:	dc15      	bgt.n	1ce04 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1cdd8:	4b23      	ldr	r3, [pc, #140]	; (1ce68 <sensor_network_init+0x98>)
   1cdda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1cdde:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cde2:	4922      	ldr	r1, [pc, #136]	; (1ce6c <sensor_network_init+0x9c>)
   1cde4:	4822      	ldr	r0, [pc, #136]	; (1ce70 <sensor_network_init+0xa0>)
   1cde6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1cdea:	f000 fcaf 	bl	1d74c <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1cdee:	3001      	adds	r0, #1
   1cdf0:	280b      	cmp	r0, #11
   1cdf2:	dc01      	bgt.n	1cdf8 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1cdf4:	3401      	adds	r4, #1
   1cdf6:	e7ed      	b.n	1cdd4 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1cdf8:	2300      	movs	r3, #0
   1cdfa:	461a      	mov	r2, r3
   1cdfc:	4619      	mov	r1, r3
   1cdfe:	4618      	mov	r0, r3
   1ce00:	f7fd f9ac 	bl	1a15c <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1ce04:	f7ff ff90 	bl	1cd28 <get_hardware_id>
   1ce08:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1ce0a:	2400      	movs	r4, #0
   1ce0c:	2c04      	cmp	r4, #4
   1ce0e:	dc19      	bgt.n	1ce44 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1ce10:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ce14:	0093      	lsls	r3, r2, #2
   1ce16:	220c      	movs	r2, #12
   1ce18:	4916      	ldr	r1, [pc, #88]	; (1ce74 <sensor_network_init+0xa4>)
   1ce1a:	4419      	add	r1, r3
   1ce1c:	4628      	mov	r0, r5
   1ce1e:	f7fe fd6f 	bl	1b900 <memcmp>
   1ce22:	b108      	cbz	r0, 1ce28 <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1ce24:	3401      	adds	r4, #1
   1ce26:	e7f1      	b.n	1ce0c <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1ce28:	4b0f      	ldr	r3, [pc, #60]	; (1ce68 <sensor_network_init+0x98>)
   1ce2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1ce2e:	e9d3 0100 	ldrd	r0, r1, [r3]
   1ce32:	4b11      	ldr	r3, [pc, #68]	; (1ce78 <sensor_network_init+0xa8>)
   1ce34:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1ce38:	1c63      	adds	r3, r4, #1
   1ce3a:	4a10      	ldr	r2, [pc, #64]	; (1ce7c <sensor_network_init+0xac>)
   1ce3c:	4910      	ldr	r1, [pc, #64]	; (1ce80 <sensor_network_init+0xb0>)
   1ce3e:	4811      	ldr	r0, [pc, #68]	; (1ce84 <sensor_network_init+0xb4>)
   1ce40:	f7fc fac4 	bl	193cc <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1ce44:	f7ff ffa8 	bl	1cd98 <is_collector_node>
   1ce48:	b940      	cbnz	r0, 1ce5c <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1ce4a:	f7ff ffb3 	bl	1cdb4 <is_standalone_node>
   1ce4e:	b150      	cbz	r0, 1ce66 <sensor_network_init+0x96>
   1ce50:	4a0a      	ldr	r2, [pc, #40]	; (1ce7c <sensor_network_init+0xac>)
   1ce52:	490b      	ldr	r1, [pc, #44]	; (1ce80 <sensor_network_init+0xb0>)
   1ce54:	480c      	ldr	r0, [pc, #48]	; (1ce88 <sensor_network_init+0xb8>)
   1ce56:	f7fc fab9 	bl	193cc <console_printf>
}
   1ce5a:	e004      	b.n	1ce66 <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1ce5c:	4a07      	ldr	r2, [pc, #28]	; (1ce7c <sensor_network_init+0xac>)
   1ce5e:	4908      	ldr	r1, [pc, #32]	; (1ce80 <sensor_network_init+0xb0>)
   1ce60:	480a      	ldr	r0, [pc, #40]	; (1ce8c <sensor_network_init+0xbc>)
   1ce62:	f7fc fab3 	bl	193cc <console_printf>
}
   1ce66:	bd38      	pop	{r3, r4, r5, pc}
   1ce68:	00021d30 	.word	0x00021d30
   1ce6c:	00021cd8 	.word	0x00021cd8
   1ce70:	20000130 	.word	0x20000130
   1ce74:	00021c94 	.word	0x00021c94
   1ce78:	2000c2a0 	.word	0x2000c2a0
   1ce7c:	00021ce0 	.word	0x00021ce0
   1ce80:	00021d18 	.word	0x00021d18
   1ce84:	00021ce8 	.word	0x00021ce8
   1ce88:	00021d08 	.word	0x00021d08
   1ce8c:	00021cf8 	.word	0x00021cf8

0001ce90 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1ce90:	b530      	push	{r4, r5, lr}
   1ce92:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1ce94:	2200      	movs	r2, #0
   1ce96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ce9a:	4810      	ldr	r0, [pc, #64]	; (1cedc <config_device+0x4c>)
   1ce9c:	f7fd fc2c 	bl	1a6f8 <os_dev_open>
    assert(dev != NULL);
   1cea0:	b178      	cbz	r0, 1cec2 <config_device+0x32>
   1cea2:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1cea4:	4668      	mov	r0, sp
   1cea6:	f000 f86c 	bl	1cf82 <temp_stub_default_cfg>
    assert(rc == 0);
   1ceaa:	b980      	cbnz	r0, 1cece <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1ceac:	4669      	mov	r1, sp
   1ceae:	4620      	mov	r0, r4
   1ceb0:	f000 f900 	bl	1d0b4 <temp_stub_config>
   1ceb4:	4605      	mov	r5, r0
    os_dev_close(dev);
   1ceb6:	4620      	mov	r0, r4
   1ceb8:	f7fd fc40 	bl	1a73c <os_dev_close>
    return rc;
}
   1cebc:	4628      	mov	r0, r5
   1cebe:	b003      	add	sp, #12
   1cec0:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1cec2:	2300      	movs	r3, #0
   1cec4:	461a      	mov	r2, r3
   1cec6:	4619      	mov	r1, r3
   1cec8:	4618      	mov	r0, r3
   1ceca:	f7fd f947 	bl	1a15c <__assert_func>
    assert(rc == 0);
   1cece:	2300      	movs	r3, #0
   1ced0:	461a      	mov	r2, r3
   1ced2:	4619      	mov	r1, r3
   1ced4:	4618      	mov	r0, r3
   1ced6:	f7fd f941 	bl	1a15c <__assert_func>
   1ceda:	bf00      	nop
   1cedc:	00021d58 	.word	0x00021d58

0001cee0 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1cee0:	b510      	push	{r4, lr}
   1cee2:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1cee4:	4c10      	ldr	r4, [pc, #64]	; (1cf28 <temp_stub_create+0x48>)
   1cee6:	4621      	mov	r1, r4
   1cee8:	4810      	ldr	r0, [pc, #64]	; (1cf2c <temp_stub_create+0x4c>)
   1ceea:	f7fc fa6f 	bl	193cc <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1ceee:	4b10      	ldr	r3, [pc, #64]	; (1cf30 <temp_stub_create+0x50>)
   1cef0:	9301      	str	r3, [sp, #4]
   1cef2:	4b10      	ldr	r3, [pc, #64]	; (1cf34 <temp_stub_create+0x54>)
   1cef4:	9300      	str	r3, [sp, #0]
   1cef6:	2300      	movs	r3, #0
   1cef8:	2201      	movs	r2, #1
   1cefa:	4621      	mov	r1, r4
   1cefc:	480e      	ldr	r0, [pc, #56]	; (1cf38 <temp_stub_create+0x58>)
   1cefe:	f7fd fbb5 	bl	1a66c <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1cf02:	b920      	cbnz	r0, 1cf0e <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1cf04:	f7ff ffc4 	bl	1ce90 <config_device>
    assert(rc == 0);
   1cf08:	b938      	cbnz	r0, 1cf1a <temp_stub_create+0x3a>
}
   1cf0a:	b002      	add	sp, #8
   1cf0c:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1cf0e:	2300      	movs	r3, #0
   1cf10:	461a      	mov	r2, r3
   1cf12:	4619      	mov	r1, r3
   1cf14:	4618      	mov	r0, r3
   1cf16:	f7fd f921 	bl	1a15c <__assert_func>
    assert(rc == 0);
   1cf1a:	2300      	movs	r3, #0
   1cf1c:	461a      	mov	r2, r3
   1cf1e:	4619      	mov	r1, r3
   1cf20:	4618      	mov	r0, r3
   1cf22:	f7fd f91b 	bl	1a15c <__assert_func>
   1cf26:	bf00      	nop
   1cf28:	00021d58 	.word	0x00021d58
   1cf2c:	00021d64 	.word	0x00021d64
   1cf30:	2000c2e0 	.word	0x2000c2e0
   1cf34:	0001cf91 	.word	0x0001cf91
   1cf38:	2000c2f8 	.word	0x2000c2f8

0001cf3c <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1cf3c:	2000      	movs	r0, #0
   1cf3e:	4770      	bx	lr

0001cf40 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1cf40:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1cf44:	2100      	movs	r1, #0
   1cf46:	ea50 0301 	orrs.w	r3, r0, r1
   1cf4a:	d004      	beq.n	1cf56 <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1cf4c:	9b00      	ldr	r3, [sp, #0]
   1cf4e:	2201      	movs	r2, #1
   1cf50:	701a      	strb	r2, [r3, #0]
    return (0);
   1cf52:	2000      	movs	r0, #0
   1cf54:	4770      	bx	lr
err:
    return (rc);
   1cf56:	f06f 0001 	mvn.w	r0, #1
}
   1cf5a:	4770      	bx	lr

0001cf5c <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1cf5c:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1cf5e:	b120      	cbz	r0, 1cf6a <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1cf60:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1cf64:	d007      	beq.n	1cf76 <temp_stub_open+0x1a>
}
   1cf66:	2000      	movs	r0, #0
   1cf68:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1cf6a:	2300      	movs	r3, #0
   1cf6c:	461a      	mov	r2, r3
   1cf6e:	4619      	mov	r1, r3
   1cf70:	4618      	mov	r0, r3
   1cf72:	f7fd f8f3 	bl	1a15c <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1cf76:	2300      	movs	r3, #0
   1cf78:	461a      	mov	r2, r3
   1cf7a:	4619      	mov	r1, r3
   1cf7c:	4618      	mov	r0, r3
   1cf7e:	f7fd f8ed 	bl	1a15c <__assert_func>

0001cf82 <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1cf82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cf86:	2300      	movs	r3, #0
   1cf88:	e9c0 2300 	strd	r2, r3, [r0]
}
   1cf8c:	2000      	movs	r0, #0
   1cf8e:	4770      	bx	lr

0001cf90 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1cf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1cf92:	b379      	cbz	r1, 1cff4 <temp_stub_init+0x64>
   1cf94:	460d      	mov	r5, r1
   1cf96:	b380      	cbz	r0, 1cffa <temp_stub_init+0x6a>
   1cf98:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1cf9a:	30b0      	adds	r0, #176	; 0xb0
   1cf9c:	f7ff fff1 	bl	1cf82 <temp_stub_default_cfg>
    if (rc) { goto err; }
   1cfa0:	4603      	mov	r3, r0
   1cfa2:	b108      	cbz	r0, 1cfa8 <temp_stub_init+0x18>
}
   1cfa4:	4618      	mov	r0, r3
   1cfa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1cfa8:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1cfac:	4621      	mov	r1, r4
   1cfae:	4630      	mov	r0, r6
   1cfb0:	f7ff fddd 	bl	1cb6e <sensor_init>
    if (rc != 0) { goto err; }
   1cfb4:	4603      	mov	r3, r0
   1cfb6:	2800      	cmp	r0, #0
   1cfb8:	d1f4      	bne.n	1cfa4 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1cfba:	4b11      	ldr	r3, [pc, #68]	; (1d000 <temp_stub_init+0x70>)
   1cfbc:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1cfbe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1cfc2:	2300      	movs	r3, #0
   1cfc4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1cfc8:	682a      	ldr	r2, [r5, #0]
   1cfca:	686f      	ldr	r7, [r5, #4]
   1cfcc:	68a8      	ldr	r0, [r5, #8]
   1cfce:	68e9      	ldr	r1, [r5, #12]
   1cfd0:	6722      	str	r2, [r4, #112]	; 0x70
   1cfd2:	6767      	str	r7, [r4, #116]	; 0x74
   1cfd4:	67a0      	str	r0, [r4, #120]	; 0x78
   1cfd6:	67e1      	str	r1, [r4, #124]	; 0x7c
   1cfd8:	692a      	ldr	r2, [r5, #16]
   1cfda:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1cfde:	4630      	mov	r0, r6
   1cfe0:	f7ff fdae 	bl	1cb40 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1cfe4:	4603      	mov	r3, r0
   1cfe6:	2800      	cmp	r0, #0
   1cfe8:	d1dc      	bne.n	1cfa4 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1cfea:	4a06      	ldr	r2, [pc, #24]	; (1d004 <temp_stub_init+0x74>)
   1cfec:	6022      	str	r2, [r4, #0]
   1cfee:	4a06      	ldr	r2, [pc, #24]	; (1d008 <temp_stub_init+0x78>)
   1cff0:	60e2      	str	r2, [r4, #12]
    return (0);
   1cff2:	e7d7      	b.n	1cfa4 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1cff4:	f06f 0308 	mvn.w	r3, #8
   1cff8:	e7d4      	b.n	1cfa4 <temp_stub_init+0x14>
   1cffa:	f06f 0308 	mvn.w	r3, #8
   1cffe:	e7d1      	b.n	1cfa4 <temp_stub_init+0x14>
   1d000:	00021d74 	.word	0x00021d74
   1d004:	0001cf5d 	.word	0x0001cf5d
   1d008:	0001cf3d 	.word	0x0001cf3d

0001d00c <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1d00c:	b538      	push	{r3, r4, r5, lr}
   1d00e:	460d      	mov	r5, r1
   1d010:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1d012:	4808      	ldr	r0, [pc, #32]	; (1d034 <temp_stub_get_raw_temperature+0x28>)
   1d014:	f7fc f9da 	bl	193cc <console_printf>
    assert(temp_sum);
   1d018:	b134      	cbz	r4, 1d028 <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1d01a:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1d01e:	fb01 f105 	mul.w	r1, r1, r5
   1d022:	6021      	str	r1, [r4, #0]
}
   1d024:	2000      	movs	r0, #0
   1d026:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1d028:	2300      	movs	r3, #0
   1d02a:	461a      	mov	r2, r3
   1d02c:	4619      	mov	r1, r3
   1d02e:	4618      	mov	r0, r3
   1d030:	f7fd f894 	bl	1a15c <__assert_func>
   1d034:	00021d9c 	.word	0x00021d9c

0001d038 <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1d038:	b530      	push	{r4, r5, lr}
   1d03a:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1d03c:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1d040:	2500      	movs	r5, #0
   1d042:	ea54 0305 	orrs.w	r3, r4, r5
   1d046:	d032      	beq.n	1d0ae <temp_stub_sensor_read+0x76>
   1d048:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1d04a:	6805      	ldr	r5, [r0, #0]
   1d04c:	b165      	cbz	r5, 1d068 <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1d04e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d052:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1d054:	2200      	movs	r2, #0
   1d056:	4611      	mov	r1, r2
   1d058:	4628      	mov	r0, r5
   1d05a:	f7ff ff7f 	bl	1cf5c <temp_stub_open>
        if (rc) { goto err; }
   1d05e:	4603      	mov	r3, r0
   1d060:	b140      	cbz	r0, 1d074 <temp_stub_sensor_read+0x3c>
}
   1d062:	4618      	mov	r0, r3
   1d064:	b007      	add	sp, #28
   1d066:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1d068:	2300      	movs	r3, #0
   1d06a:	461a      	mov	r2, r3
   1d06c:	4619      	mov	r1, r3
   1d06e:	4618      	mov	r0, r3
   1d070:	f7fd f874 	bl	1a15c <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1d074:	2300      	movs	r3, #0
   1d076:	aa03      	add	r2, sp, #12
   1d078:	2101      	movs	r1, #1
   1d07a:	4628      	mov	r0, r5
   1d07c:	f7ff ffc6 	bl	1d00c <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1d080:	4603      	mov	r3, r0
   1d082:	2800      	cmp	r0, #0
   1d084:	d1ed      	bne.n	1d062 <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1d086:	9a03      	ldr	r2, [sp, #12]
   1d088:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1d08a:	2201      	movs	r2, #1
   1d08c:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1d090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d092:	2a00      	cmp	r2, #0
   1d094:	d0e5      	beq.n	1d062 <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1d096:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1d09a:	2300      	movs	r3, #0
   1d09c:	e9cd 2300 	strd	r2, r3, [sp]
   1d0a0:	aa04      	add	r2, sp, #16
   1d0a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1d0a4:	4620      	mov	r0, r4
   1d0a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d0a8:	4798      	blx	r3
   1d0aa:	4603      	mov	r3, r0
   1d0ac:	e7d9      	b.n	1d062 <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1d0ae:	f06f 0301 	mvn.w	r3, #1
   1d0b2:	e7d6      	b.n	1d062 <temp_stub_sensor_read+0x2a>

0001d0b4 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1d0b4:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1d0b6:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1d0ba:	d009      	beq.n	1d0d0 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1d0bc:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1d0c0:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1d0c4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1d0c8:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1d0cc:	2000      	movs	r0, #0
   1d0ce:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1d0d0:	2300      	movs	r3, #0
   1d0d2:	461a      	mov	r2, r3
   1d0d4:	4619      	mov	r1, r3
   1d0d6:	4618      	mov	r0, r3
   1d0d8:	f7fd f840 	bl	1a15c <__assert_func>

0001d0dc <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1d0dc:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1d0de:	e002      	b.n	1d0e6 <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1d0e0:	4618      	mov	r0, r3
   1d0e2:	f000 f85b 	bl	1d19c <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1d0e6:	4808      	ldr	r0, [pc, #32]	; (1d108 <oc_buffer_tx+0x2c>)
   1d0e8:	f7fd fc03 	bl	1a8f2 <os_mqueue_get>
   1d0ec:	4603      	mov	r3, r0
   1d0ee:	b148      	cbz	r0, 1d104 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1d0f0:	2200      	movs	r2, #0
   1d0f2:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1d0f4:	7e1a      	ldrb	r2, [r3, #24]
   1d0f6:	f012 0f08 	tst.w	r2, #8
   1d0fa:	d0f1      	beq.n	1d0e0 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1d0fc:	4618      	mov	r0, r3
   1d0fe:	f000 f85d 	bl	1d1bc <oc_send_multicast_message>
   1d102:	e7f0      	b.n	1d0e6 <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1d104:	bd08      	pop	{r3, pc}
   1d106:	bf00      	nop
   1d108:	2000c3d0 	.word	0x2000c3d0

0001d10c <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1d10c:	b500      	push	{lr}
   1d10e:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1d110:	4808      	ldr	r0, [pc, #32]	; (1d134 <oc_buffer_rx+0x28>)
   1d112:	f7fd fbee 	bl	1a8f2 <os_mqueue_get>
   1d116:	9001      	str	r0, [sp, #4]
   1d118:	b140      	cbz	r0, 1d12c <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1d11a:	a801      	add	r0, sp, #4
   1d11c:	f000 faa2 	bl	1d664 <__wrap_coap_receive>
#endif
        if (m) {
   1d120:	9801      	ldr	r0, [sp, #4]
   1d122:	2800      	cmp	r0, #0
   1d124:	d0f4      	beq.n	1d110 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1d126:	f7fd fc59 	bl	1a9dc <os_mbuf_free_chain>
   1d12a:	e7f1      	b.n	1d110 <oc_buffer_rx+0x4>
        }
    }
}
   1d12c:	b003      	add	sp, #12
   1d12e:	f85d fb04 	ldr.w	pc, [sp], #4
   1d132:	bf00      	nop
   1d134:	2000c3b8 	.word	0x2000c3b8

0001d138 <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1d138:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1d13a:	2200      	movs	r2, #0
   1d13c:	4904      	ldr	r1, [pc, #16]	; (1d150 <oc_buffer_init+0x18>)
   1d13e:	4805      	ldr	r0, [pc, #20]	; (1d154 <oc_buffer_init+0x1c>)
   1d140:	f7fd fbce 	bl	1a8e0 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1d144:	2200      	movs	r2, #0
   1d146:	4904      	ldr	r1, [pc, #16]	; (1d158 <oc_buffer_init+0x20>)
   1d148:	4804      	ldr	r0, [pc, #16]	; (1d15c <oc_buffer_init+0x24>)
   1d14a:	f7fd fbc9 	bl	1a8e0 <os_mqueue_init>
}
   1d14e:	bd08      	pop	{r3, pc}
   1d150:	0001d10d 	.word	0x0001d10d
   1d154:	2000c3b8 	.word	0x2000c3b8
   1d158:	0001d0dd 	.word	0x0001d0dd
   1d15c:	2000c3d0 	.word	0x2000c3d0

0001d160 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1d160:	b500      	push	{lr}
   1d162:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1d164:	4b07      	ldr	r3, [pc, #28]	; (1d184 <oc_ri_mem_init+0x24>)
   1d166:	9300      	str	r3, [sp, #0]
   1d168:	4b07      	ldr	r3, [pc, #28]	; (1d188 <oc_ri_mem_init+0x28>)
   1d16a:	2264      	movs	r2, #100	; 0x64
   1d16c:	2102      	movs	r1, #2
   1d16e:	4807      	ldr	r0, [pc, #28]	; (1d18c <oc_ri_mem_init+0x2c>)
   1d170:	f7fd fd3c 	bl	1abec <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1d174:	f000 f860 	bl	1d238 <oc_rep_init>
#endif
    oc_buffer_init();
   1d178:	f7ff ffde 	bl	1d138 <oc_buffer_init>
}
   1d17c:	b003      	add	sp, #12
   1d17e:	f85d fb04 	ldr.w	pc, [sp], #4
   1d182:	bf00      	nop
   1d184:	00021db4 	.word	0x00021db4
   1d188:	2000c3e8 	.word	0x2000c3e8
   1d18c:	2000c4b0 	.word	0x2000c4b0

0001d190 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1d190:	4b01      	ldr	r3, [pc, #4]	; (1d198 <oc_evq_set+0x8>)
   1d192:	6018      	str	r0, [r3, #0]
}
   1d194:	4770      	bx	lr
   1d196:	bf00      	nop
   1d198:	2000c4cc 	.word	0x2000c4cc

0001d19c <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1d19c:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1d19e:	7e03      	ldrb	r3, [r0, #24]
   1d1a0:	f003 0307 	and.w	r3, r3, #7
   1d1a4:	4a04      	ldr	r2, [pc, #16]	; (1d1b8 <oc_send_buffer+0x1c>)
   1d1a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1d1aa:	b113      	cbz	r3, 1d1b2 <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1d1ac:	68db      	ldr	r3, [r3, #12]
   1d1ae:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1d1b0:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1d1b2:	f7fd fc13 	bl	1a9dc <os_mbuf_free_chain>
}
   1d1b6:	e7fb      	b.n	1d1b0 <oc_send_buffer+0x14>
   1d1b8:	2000c760 	.word	0x2000c760

0001d1bc <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1d1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d1c0:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1d1c2:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1d1c4:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1d1c6:	e002      	b.n	1d1ce <oc_send_multicast_message+0x12>
   1d1c8:	4635      	mov	r5, r6
   1d1ca:	3401      	adds	r4, #1
   1d1cc:	462e      	mov	r6, r5
   1d1ce:	2c07      	cmp	r4, #7
   1d1d0:	dc12      	bgt.n	1d1f8 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1d1d2:	4b0c      	ldr	r3, [pc, #48]	; (1d204 <oc_send_multicast_message+0x48>)
   1d1d4:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1d1d8:	2d00      	cmp	r5, #0
   1d1da:	d0f5      	beq.n	1d1c8 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1d1dc:	2e00      	cmp	r6, #0
   1d1de:	d0f4      	beq.n	1d1ca <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1d1e0:	4638      	mov	r0, r7
   1d1e2:	f7fd fc6b 	bl	1aabc <os_mbuf_dup>
   1d1e6:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1d1e8:	6933      	ldr	r3, [r6, #16]
   1d1ea:	4638      	mov	r0, r7
   1d1ec:	4798      	blx	r3
            if (!n) {
   1d1ee:	f1b8 0f00 	cmp.w	r8, #0
   1d1f2:	d005      	beq.n	1d200 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1d1f4:	4647      	mov	r7, r8
   1d1f6:	e7e8      	b.n	1d1ca <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1d1f8:	b116      	cbz	r6, 1d200 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1d1fa:	6933      	ldr	r3, [r6, #16]
   1d1fc:	4638      	mov	r0, r7
   1d1fe:	4798      	blx	r3
    }
}
   1d200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d204:	2000c760 	.word	0x2000c760

0001d208 <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1d208:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1d20a:	4b07      	ldr	r3, [pc, #28]	; (1d228 <oc_init+0x20>)
   1d20c:	781b      	ldrb	r3, [r3, #0]
   1d20e:	b133      	cbz	r3, 1d21e <oc_init+0x16>
    oc_ri_mem_init();
   1d210:	f7ff ffa6 	bl	1d160 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1d214:	f7fd fb60 	bl	1a8d8 <os_eventq_dflt_get>
   1d218:	f7ff ffba 	bl	1d190 <oc_evq_set>
}
   1d21c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1d21e:	461a      	mov	r2, r3
   1d220:	4619      	mov	r1, r3
   1d222:	4618      	mov	r0, r3
   1d224:	f7fc ff9a 	bl	1a15c <__assert_func>
   1d228:	2000c5bc 	.word	0x2000c5bc

0001d22c <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1d22c:	4770      	bx	lr

0001d22e <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1d22e:	4770      	bx	lr

0001d230 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1d230:	4770      	bx	lr

0001d232 <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1d232:	4770      	bx	lr

0001d234 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1d234:	4770      	bx	lr
	...

0001d238 <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1d238:	b500      	push	{lr}
   1d23a:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1d23c:	4b05      	ldr	r3, [pc, #20]	; (1d254 <oc_rep_init+0x1c>)
   1d23e:	9300      	str	r3, [sp, #0]
   1d240:	4b05      	ldr	r3, [pc, #20]	; (1d258 <oc_rep_init+0x20>)
   1d242:	2218      	movs	r2, #24
   1d244:	2102      	movs	r1, #2
   1d246:	4805      	ldr	r0, [pc, #20]	; (1d25c <oc_rep_init+0x24>)
   1d248:	f7fd fcd0 	bl	1abec <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1d24c:	b003      	add	sp, #12
   1d24e:	f85d fb04 	ldr.w	pc, [sp], #4
   1d252:	bf00      	nop
   1d254:	00021dc0 	.word	0x00021dc0
   1d258:	2000c4ec 	.word	0x2000c4ec
   1d25c:	2000c4d0 	.word	0x2000c4d0

0001d260 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1d260:	b570      	push	{r4, r5, r6, lr}
   1d262:	b086      	sub	sp, #24
   1d264:	4605      	mov	r5, r0
   1d266:	460e      	mov	r6, r1
   1d268:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1d26a:	2300      	movs	r3, #0
   1d26c:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1d26e:	f000 f9ad 	bl	1d5cc <mfg_init>

    mfg_open(&reader);
   1d272:	a801      	add	r0, sp, #4
   1d274:	f000 f9c6 	bl	1d604 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1d278:	6823      	ldr	r3, [r4, #0]
   1d27a:	42ab      	cmp	r3, r5
   1d27c:	da29      	bge.n	1d2d2 <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1d27e:	2102      	movs	r1, #2
   1d280:	a801      	add	r0, sp, #4
   1d282:	f000 f98c 	bl	1d59e <mfg_seek_next_with_type>
   1d286:	4603      	mov	r3, r0
        switch (rc) {
   1d288:	f110 0f0f 	cmn.w	r0, #15
   1d28c:	d003      	beq.n	1d296 <flash_map_read_mfg+0x36>
   1d28e:	b120      	cbz	r0, 1d29a <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1d290:	4618      	mov	r0, r3
   1d292:	b006      	add	sp, #24
   1d294:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1d296:	2300      	movs	r3, #0
   1d298:	e7fa      	b.n	1d290 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1d29a:	a903      	add	r1, sp, #12
   1d29c:	a801      	add	r0, sp, #4
   1d29e:	f000 f98b 	bl	1d5b8 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1d2a2:	4603      	mov	r3, r0
   1d2a4:	2800      	cmp	r0, #0
   1d2a6:	d1f3      	bne.n	1d290 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1d2a8:	6823      	ldr	r3, [r4, #0]
   1d2aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d2ae:	009a      	lsls	r2, r3, #2
   1d2b0:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1d2b2:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1d2b6:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1d2b8:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1d2bc:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1d2be:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1d2c2:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1d2c4:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1d2c8:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1d2ca:	6823      	ldr	r3, [r4, #0]
   1d2cc:	3301      	adds	r3, #1
   1d2ce:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1d2d0:	e7d2      	b.n	1d278 <flash_map_read_mfg+0x18>
            return -1;
   1d2d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d2d6:	e7db      	b.n	1d290 <flash_map_read_mfg+0x30>

0001d2d8 <flash_area_open>:
{
   1d2d8:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1d2da:	4b0d      	ldr	r3, [pc, #52]	; (1d310 <flash_area_open+0x38>)
   1d2dc:	681d      	ldr	r5, [r3, #0]
   1d2de:	b1a5      	cbz	r5, 1d30a <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1d2e0:	2300      	movs	r3, #0
   1d2e2:	4a0c      	ldr	r2, [pc, #48]	; (1d314 <flash_area_open+0x3c>)
   1d2e4:	6812      	ldr	r2, [r2, #0]
   1d2e6:	429a      	cmp	r2, r3
   1d2e8:	dd0b      	ble.n	1d302 <flash_area_open+0x2a>
        area = flash_map + i;
   1d2ea:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1d2ee:	00a2      	lsls	r2, r4, #2
   1d2f0:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1d2f2:	5caa      	ldrb	r2, [r5, r2]
   1d2f4:	4282      	cmp	r2, r0
   1d2f6:	d001      	beq.n	1d2fc <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1d2f8:	3301      	adds	r3, #1
   1d2fa:	e7f2      	b.n	1d2e2 <flash_area_open+0xa>
            *fap = area;
   1d2fc:	600c      	str	r4, [r1, #0]
            return 0;
   1d2fe:	2000      	movs	r0, #0
   1d300:	e001      	b.n	1d306 <flash_area_open+0x2e>
    return SYS_ENOENT;
   1d302:	f06f 0003 	mvn.w	r0, #3
}
   1d306:	bc30      	pop	{r4, r5}
   1d308:	4770      	bx	lr
        return SYS_EACCES;
   1d30a:	f06f 0006 	mvn.w	r0, #6
   1d30e:	e7fa      	b.n	1d306 <flash_area_open+0x2e>
   1d310:	2000c784 	.word	0x2000c784
   1d314:	2000c780 	.word	0x2000c780

0001d318 <flash_area_read>:
{
   1d318:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1d31a:	6884      	ldr	r4, [r0, #8]
   1d31c:	428c      	cmp	r4, r1
   1d31e:	d308      	bcc.n	1d332 <flash_area_read+0x1a>
   1d320:	18cd      	adds	r5, r1, r3
   1d322:	42ac      	cmp	r4, r5
   1d324:	d308      	bcc.n	1d338 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1d326:	6844      	ldr	r4, [r0, #4]
   1d328:	4421      	add	r1, r4
   1d32a:	7840      	ldrb	r0, [r0, #1]
   1d32c:	f000 f9c8 	bl	1d6c0 <hal_flash_read>
}
   1d330:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1d332:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d336:	e7fb      	b.n	1d330 <flash_area_read+0x18>
   1d338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d33c:	e7f8      	b.n	1d330 <flash_area_read+0x18>
	...

0001d340 <flash_map_init>:

void
flash_map_init(void)
{
   1d340:	b510      	push	{r4, lr}
   1d342:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1d344:	4b14      	ldr	r3, [pc, #80]	; (1d398 <flash_map_init+0x58>)
   1d346:	781b      	ldrb	r3, [r3, #0]
   1d348:	b303      	cbz	r3, 1d38c <flash_map_init+0x4c>

    rc = hal_flash_init();
   1d34a:	f000 f9a5 	bl	1d698 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1d34e:	b138      	cbz	r0, 1d360 <flash_map_init+0x20>
   1d350:	2000      	movs	r0, #0
   1d352:	9000      	str	r0, [sp, #0]
   1d354:	4b11      	ldr	r3, [pc, #68]	; (1d39c <flash_map_init+0x5c>)
   1d356:	681c      	ldr	r4, [r3, #0]
   1d358:	4603      	mov	r3, r0
   1d35a:	4602      	mov	r2, r0
   1d35c:	4601      	mov	r1, r0
   1d35e:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1d360:	4b0f      	ldr	r3, [pc, #60]	; (1d3a0 <flash_map_init+0x60>)
   1d362:	4a10      	ldr	r2, [pc, #64]	; (1d3a4 <flash_map_init+0x64>)
   1d364:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1d366:	4b10      	ldr	r3, [pc, #64]	; (1d3a8 <flash_map_init+0x68>)
   1d368:	2206      	movs	r2, #6
   1d36a:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1d36c:	aa03      	add	r2, sp, #12
   1d36e:	490f      	ldr	r1, [pc, #60]	; (1d3ac <flash_map_init+0x6c>)
   1d370:	200a      	movs	r0, #10
   1d372:	f7ff ff75 	bl	1d260 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1d376:	b938      	cbnz	r0, 1d388 <flash_map_init+0x48>
   1d378:	9b03      	ldr	r3, [sp, #12]
   1d37a:	2b00      	cmp	r3, #0
   1d37c:	dd04      	ble.n	1d388 <flash_map_init+0x48>
        flash_map = mfg_areas;
   1d37e:	4a08      	ldr	r2, [pc, #32]	; (1d3a0 <flash_map_init+0x60>)
   1d380:	490a      	ldr	r1, [pc, #40]	; (1d3ac <flash_map_init+0x6c>)
   1d382:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1d384:	4a08      	ldr	r2, [pc, #32]	; (1d3a8 <flash_map_init+0x68>)
   1d386:	6013      	str	r3, [r2, #0]
    }
}
   1d388:	b004      	add	sp, #16
   1d38a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1d38c:	461a      	mov	r2, r3
   1d38e:	4619      	mov	r1, r3
   1d390:	4618      	mov	r0, r3
   1d392:	f7fc fee3 	bl	1a15c <__assert_func>
   1d396:	bf00      	nop
   1d398:	2000c5bc 	.word	0x2000c5bc
   1d39c:	20000104 	.word	0x20000104
   1d3a0:	2000c784 	.word	0x2000c784
   1d3a4:	00021dcc 	.word	0x00021dcc
   1d3a8:	2000c780 	.word	0x2000c780
   1d3ac:	2000c51c 	.word	0x2000c51c

0001d3b0 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1d3b0:	4770      	bx	lr
	...

0001d3b4 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1d3b4:	b530      	push	{r4, r5, lr}
   1d3b6:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1d3b8:	7885      	ldrb	r5, [r0, #2]
   1d3ba:	4b21      	ldr	r3, [pc, #132]	; (1d440 <mfg_seek_next_aux+0x8c>)
   1d3bc:	681b      	ldr	r3, [r3, #0]
   1d3be:	429d      	cmp	r5, r3
   1d3c0:	da32      	bge.n	1d428 <mfg_seek_next_aux+0x74>
   1d3c2:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1d3c4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1d3c8:	0093      	lsls	r3, r2, #2
   1d3ca:	a901      	add	r1, sp, #4
   1d3cc:	4a1d      	ldr	r2, [pc, #116]	; (1d444 <mfg_seek_next_aux+0x90>)
   1d3ce:	5cd0      	ldrb	r0, [r2, r3]
   1d3d0:	f7ff ff82 	bl	1d2d8 <flash_area_open>
    if (rc != 0) {
   1d3d4:	bb58      	cbnz	r0, 1d42e <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1d3d6:	6862      	ldr	r2, [r4, #4]
   1d3d8:	b9c2      	cbnz	r2, 1d40c <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1d3da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1d3de:	00aa      	lsls	r2, r5, #2
   1d3e0:	4b18      	ldr	r3, [pc, #96]	; (1d444 <mfg_seek_next_aux+0x90>)
   1d3e2:	4413      	add	r3, r2
   1d3e4:	685b      	ldr	r3, [r3, #4]
   1d3e6:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1d3e8:	6861      	ldr	r1, [r4, #4]
   1d3ea:	9801      	ldr	r0, [sp, #4]
   1d3ec:	6883      	ldr	r3, [r0, #8]
   1d3ee:	3b08      	subs	r3, #8
   1d3f0:	4299      	cmp	r1, r3
   1d3f2:	d310      	bcc.n	1d416 <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1d3f4:	78a3      	ldrb	r3, [r4, #2]
   1d3f6:	1c59      	adds	r1, r3, #1
   1d3f8:	4a11      	ldr	r2, [pc, #68]	; (1d440 <mfg_seek_next_aux+0x8c>)
   1d3fa:	6812      	ldr	r2, [r2, #0]
   1d3fc:	4291      	cmp	r1, r2
   1d3fe:	da19      	bge.n	1d434 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1d400:	2200      	movs	r2, #0
   1d402:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1d404:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1d406:	f06f 0305 	mvn.w	r3, #5
   1d40a:	e015      	b.n	1d438 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1d40c:	7863      	ldrb	r3, [r4, #1]
   1d40e:	4413      	add	r3, r2
   1d410:	3302      	adds	r3, #2
   1d412:	6063      	str	r3, [r4, #4]
   1d414:	e7e8      	b.n	1d3e8 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1d416:	2302      	movs	r3, #2
   1d418:	4622      	mov	r2, r4
   1d41a:	f7ff ff7d 	bl	1d318 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1d41e:	4603      	mov	r3, r0
   1d420:	b150      	cbz	r0, 1d438 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1d422:	f06f 0304 	mvn.w	r3, #4
   1d426:	e007      	b.n	1d438 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1d428:	f06f 0301 	mvn.w	r3, #1
   1d42c:	e004      	b.n	1d438 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1d42e:	f06f 0304 	mvn.w	r3, #4
   1d432:	e001      	b.n	1d438 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1d434:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1d438:	4618      	mov	r0, r3
   1d43a:	b003      	add	sp, #12
   1d43c:	bd30      	pop	{r4, r5, pc}
   1d43e:	bf00      	nop
   1d440:	2000c5b0 	.word	0x2000c5b0
   1d444:	2000c598 	.word	0x2000c598

0001d448 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1d448:	b530      	push	{r4, r5, lr}
   1d44a:	b085      	sub	sp, #20
   1d44c:	4605      	mov	r5, r0
   1d44e:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1d450:	a903      	add	r1, sp, #12
   1d452:	f7ff ff41 	bl	1d2d8 <flash_area_open>
    if (rc != 0) {
   1d456:	b9e8      	cbnz	r0, 1d494 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1d458:	9803      	ldr	r0, [sp, #12]
   1d45a:	6881      	ldr	r1, [r0, #8]
   1d45c:	2308      	movs	r3, #8
   1d45e:	aa01      	add	r2, sp, #4
   1d460:	3908      	subs	r1, #8
   1d462:	f7ff ff59 	bl	1d318 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1d466:	4601      	mov	r1, r0
   1d468:	b9b8      	cbnz	r0, 1d49a <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1d46a:	9a02      	ldr	r2, [sp, #8]
   1d46c:	4b11      	ldr	r3, [pc, #68]	; (1d4b4 <mfg_read_mmr+0x6c>)
   1d46e:	429a      	cmp	r2, r3
   1d470:	d116      	bne.n	1d4a0 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1d472:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1d476:	2b02      	cmp	r3, #2
   1d478:	d115      	bne.n	1d4a6 <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1d47a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1d47e:	9b03      	ldr	r3, [sp, #12]
   1d480:	689b      	ldr	r3, [r3, #8]
   1d482:	429a      	cmp	r2, r3
   1d484:	d812      	bhi.n	1d4ac <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1d486:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1d488:	7025      	strb	r5, [r4, #0]
   1d48a:	6063      	str	r3, [r4, #4]
   1d48c:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1d48e:	4608      	mov	r0, r1
   1d490:	b005      	add	sp, #20
   1d492:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1d494:	f06f 0104 	mvn.w	r1, #4
   1d498:	e7f9      	b.n	1d48e <mfg_read_mmr+0x46>
        return SYS_EIO;
   1d49a:	f06f 0104 	mvn.w	r1, #4
   1d49e:	e7f6      	b.n	1d48e <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1d4a0:	f06f 0108 	mvn.w	r1, #8
   1d4a4:	e7f3      	b.n	1d48e <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1d4a6:	f06f 010b 	mvn.w	r1, #11
   1d4aa:	e7f0      	b.n	1d48e <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1d4ac:	f06f 0108 	mvn.w	r1, #8
   1d4b0:	e7ed      	b.n	1d48e <mfg_read_mmr+0x46>
   1d4b2:	bf00      	nop
   1d4b4:	3bb2a269 	.word	0x3bb2a269

0001d4b8 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1d4b8:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1d4ba:	2300      	movs	r3, #0
   1d4bc:	4a11      	ldr	r2, [pc, #68]	; (1d504 <mfg_read_next_mmr+0x4c>)
   1d4be:	6812      	ldr	r2, [r2, #0]
   1d4c0:	429a      	cmp	r2, r3
   1d4c2:	dd08      	ble.n	1d4d6 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1d4c4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1d4c8:	008a      	lsls	r2, r1, #2
   1d4ca:	490f      	ldr	r1, [pc, #60]	; (1d508 <mfg_read_next_mmr+0x50>)
   1d4cc:	5c8a      	ldrb	r2, [r1, r2]
   1d4ce:	4282      	cmp	r2, r0
   1d4d0:	d011      	beq.n	1d4f6 <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1d4d2:	3301      	adds	r3, #1
   1d4d4:	e7f2      	b.n	1d4bc <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1d4d6:	2a01      	cmp	r2, #1
   1d4d8:	dc11      	bgt.n	1d4fe <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1d4da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1d4de:	0093      	lsls	r3, r2, #2
   1d4e0:	4909      	ldr	r1, [pc, #36]	; (1d508 <mfg_read_next_mmr+0x50>)
   1d4e2:	4419      	add	r1, r3
   1d4e4:	f7ff ffb0 	bl	1d448 <mfg_read_mmr>
    if (rc != 0) {
   1d4e8:	4603      	mov	r3, r0
   1d4ea:	b930      	cbnz	r0, 1d4fa <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1d4ec:	4905      	ldr	r1, [pc, #20]	; (1d504 <mfg_read_next_mmr+0x4c>)
   1d4ee:	680a      	ldr	r2, [r1, #0]
   1d4f0:	3201      	adds	r2, #1
   1d4f2:	600a      	str	r2, [r1, #0]
    return 0;
   1d4f4:	e001      	b.n	1d4fa <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1d4f6:	f06f 030a 	mvn.w	r3, #10
}
   1d4fa:	4618      	mov	r0, r3
   1d4fc:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1d4fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d502:	e7fa      	b.n	1d4fa <mfg_read_next_mmr+0x42>
   1d504:	2000c5b0 	.word	0x2000c5b0
   1d508:	2000c598 	.word	0x2000c598

0001d50c <mfg_open_flash_area>:
{
   1d50c:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1d50e:	7883      	ldrb	r3, [r0, #2]
   1d510:	4a0b      	ldr	r2, [pc, #44]	; (1d540 <mfg_open_flash_area+0x34>)
   1d512:	6812      	ldr	r2, [r2, #0]
   1d514:	4293      	cmp	r3, r2
   1d516:	da0a      	bge.n	1d52e <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1d518:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d51c:	009a      	lsls	r2, r3, #2
   1d51e:	4b09      	ldr	r3, [pc, #36]	; (1d544 <mfg_open_flash_area+0x38>)
   1d520:	5c98      	ldrb	r0, [r3, r2]
   1d522:	f7ff fed9 	bl	1d2d8 <flash_area_open>
    if (rc != 0) {
   1d526:	4603      	mov	r3, r0
   1d528:	b938      	cbnz	r0, 1d53a <mfg_open_flash_area+0x2e>
}
   1d52a:	4618      	mov	r0, r3
   1d52c:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1d52e:	2300      	movs	r3, #0
   1d530:	461a      	mov	r2, r3
   1d532:	4619      	mov	r1, r3
   1d534:	4618      	mov	r0, r3
   1d536:	f7fc fe11 	bl	1a15c <__assert_func>
        return SYS_EIO;
   1d53a:	f06f 0304 	mvn.w	r3, #4
   1d53e:	e7f4      	b.n	1d52a <mfg_open_flash_area+0x1e>
   1d540:	2000c5b0 	.word	0x2000c5b0
   1d544:	2000c598 	.word	0x2000c598

0001d548 <mfg_read_tlv_body>:
{
   1d548:	b570      	push	{r4, r5, r6, lr}
   1d54a:	b082      	sub	sp, #8
   1d54c:	4606      	mov	r6, r0
   1d54e:	460c      	mov	r4, r1
   1d550:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1d552:	a901      	add	r1, sp, #4
   1d554:	f7ff ffda 	bl	1d50c <mfg_open_flash_area>
    if (rc != 0) {
   1d558:	4603      	mov	r3, r0
   1d55a:	b110      	cbz	r0, 1d562 <mfg_read_tlv_body+0x1a>
}
   1d55c:	4618      	mov	r0, r3
   1d55e:	b002      	add	sp, #8
   1d560:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1d562:	462a      	mov	r2, r5
   1d564:	2100      	movs	r1, #0
   1d566:	4620      	mov	r0, r4
   1d568:	f7fe f9fb 	bl	1b962 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1d56c:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1d56e:	6871      	ldr	r1, [r6, #4]
   1d570:	42ab      	cmp	r3, r5
   1d572:	bfa8      	it	ge
   1d574:	462b      	movge	r3, r5
   1d576:	4622      	mov	r2, r4
   1d578:	3102      	adds	r1, #2
   1d57a:	9801      	ldr	r0, [sp, #4]
   1d57c:	f7ff fecc 	bl	1d318 <flash_area_read>
    if (rc != 0) {
   1d580:	4603      	mov	r3, r0
   1d582:	2800      	cmp	r0, #0
   1d584:	d0ea      	beq.n	1d55c <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1d586:	f06f 0304 	mvn.w	r3, #4
   1d58a:	e7e7      	b.n	1d55c <mfg_read_tlv_body+0x14>

0001d58c <mfg_seek_next>:
{
   1d58c:	b510      	push	{r4, lr}
   1d58e:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1d590:	4620      	mov	r0, r4
   1d592:	f7ff ff0f 	bl	1d3b4 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1d596:	f110 0f06 	cmn.w	r0, #6
   1d59a:	d0f9      	beq.n	1d590 <mfg_seek_next+0x4>
}
   1d59c:	bd10      	pop	{r4, pc}

0001d59e <mfg_seek_next_with_type>:
{
   1d59e:	b538      	push	{r3, r4, r5, lr}
   1d5a0:	4604      	mov	r4, r0
   1d5a2:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1d5a4:	4620      	mov	r0, r4
   1d5a6:	f7ff fff1 	bl	1d58c <mfg_seek_next>
        if (rc != 0) {
   1d5aa:	4602      	mov	r2, r0
   1d5ac:	b910      	cbnz	r0, 1d5b4 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1d5ae:	7823      	ldrb	r3, [r4, #0]
   1d5b0:	42ab      	cmp	r3, r5
   1d5b2:	d1f7      	bne.n	1d5a4 <mfg_seek_next_with_type+0x6>
}
   1d5b4:	4610      	mov	r0, r2
   1d5b6:	bd38      	pop	{r3, r4, r5, pc}

0001d5b8 <mfg_read_tlv_flash_area>:
{
   1d5b8:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1d5ba:	220a      	movs	r2, #10
   1d5bc:	f7ff ffc4 	bl	1d548 <mfg_read_tlv_body>
}
   1d5c0:	bd08      	pop	{r3, pc}

0001d5c2 <mfg_read_tlv_mmr_ref>:
{
   1d5c2:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1d5c4:	2201      	movs	r2, #1
   1d5c6:	f7ff ffbf 	bl	1d548 <mfg_read_tlv_body>
}
   1d5ca:	bd08      	pop	{r3, pc}

0001d5cc <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1d5cc:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1d5ce:	4b0b      	ldr	r3, [pc, #44]	; (1d5fc <mfg_init+0x30>)
   1d5d0:	781b      	ldrb	r3, [r3, #0]
   1d5d2:	b94b      	cbnz	r3, 1d5e8 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1d5d4:	4b09      	ldr	r3, [pc, #36]	; (1d5fc <mfg_init+0x30>)
   1d5d6:	2201      	movs	r2, #1
   1d5d8:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1d5da:	4b09      	ldr	r3, [pc, #36]	; (1d600 <mfg_init+0x34>)
   1d5dc:	781b      	ldrb	r3, [r3, #0]
   1d5de:	b123      	cbz	r3, 1d5ea <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1d5e0:	2000      	movs	r0, #0
   1d5e2:	f7ff ff69 	bl	1d4b8 <mfg_read_next_mmr>
    if (rc != 0) {
   1d5e6:	b128      	cbz	r0, 1d5f4 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1d5e8:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1d5ea:	461a      	mov	r2, r3
   1d5ec:	4619      	mov	r1, r3
   1d5ee:	4618      	mov	r0, r3
   1d5f0:	f7fc fdb4 	bl	1a15c <__assert_func>
    rc = mfg_read_mmr_refs();
   1d5f4:	f000 f80e 	bl	1d614 <mfg_read_mmr_refs>
err:
   1d5f8:	e7f6      	b.n	1d5e8 <mfg_init+0x1c>
   1d5fa:	bf00      	nop
   1d5fc:	2000c594 	.word	0x2000c594
   1d600:	2000c5bc 	.word	0x2000c5bc

0001d604 <mfg_open>:
{
   1d604:	b510      	push	{r4, lr}
   1d606:	4604      	mov	r4, r0
    mfg_init();
   1d608:	f7ff ffe0 	bl	1d5cc <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1d60c:	2300      	movs	r3, #0
   1d60e:	6023      	str	r3, [r4, #0]
   1d610:	6063      	str	r3, [r4, #4]
}
   1d612:	bd10      	pop	{r4, pc}

0001d614 <mfg_read_mmr_refs>:
{
   1d614:	b500      	push	{lr}
   1d616:	b085      	sub	sp, #20
    mfg_open(&reader);
   1d618:	a801      	add	r0, sp, #4
   1d61a:	f7ff fff3 	bl	1d604 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1d61e:	2104      	movs	r1, #4
   1d620:	eb0d 0001 	add.w	r0, sp, r1
   1d624:	f7ff ffbb 	bl	1d59e <mfg_seek_next_with_type>
   1d628:	4603      	mov	r3, r0
        switch (rc) {
   1d62a:	f110 0f0f 	cmn.w	r0, #15
   1d62e:	d004      	beq.n	1d63a <mfg_read_mmr_refs+0x26>
   1d630:	b128      	cbz	r0, 1d63e <mfg_read_mmr_refs+0x2a>
}
   1d632:	4618      	mov	r0, r3
   1d634:	b005      	add	sp, #20
   1d636:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1d63a:	2300      	movs	r3, #0
   1d63c:	e7f9      	b.n	1d632 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1d63e:	a903      	add	r1, sp, #12
   1d640:	a801      	add	r0, sp, #4
   1d642:	f7ff ffbe 	bl	1d5c2 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1d646:	4603      	mov	r3, r0
   1d648:	2800      	cmp	r0, #0
   1d64a:	d1f2      	bne.n	1d632 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1d64c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1d650:	f7ff ff32 	bl	1d4b8 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1d654:	4603      	mov	r3, r0
   1d656:	2800      	cmp	r0, #0
   1d658:	d0e1      	beq.n	1d61e <mfg_read_mmr_refs+0xa>
   1d65a:	f110 0f0b 	cmn.w	r0, #11
   1d65e:	d0de      	beq.n	1d61e <mfg_read_mmr_refs+0xa>
   1d660:	e7e7      	b.n	1d632 <mfg_read_mmr_refs+0x1e>
	...

0001d664 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1d664:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1d666:	4803      	ldr	r0, [pc, #12]	; (1d674 <__wrap_coap_receive+0x10>)
   1d668:	f7fb feb0 	bl	193cc <console_printf>
    return -1;
}
   1d66c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d670:	bd08      	pop	{r3, pc}
   1d672:	bf00      	nop
   1d674:	00021e14 	.word	0x00021e14

0001d678 <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1d678:	4770      	bx	lr

0001d67a <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1d67a:	6843      	ldr	r3, [r0, #4]
   1d67c:	428b      	cmp	r3, r1
   1d67e:	d808      	bhi.n	1d692 <hal_flash_check_addr+0x18>
   1d680:	6882      	ldr	r2, [r0, #8]
   1d682:	4413      	add	r3, r2
   1d684:	428b      	cmp	r3, r1
   1d686:	d301      	bcc.n	1d68c <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1d688:	2000      	movs	r0, #0
}
   1d68a:	4770      	bx	lr
        return SYS_EINVAL;
   1d68c:	f06f 0001 	mvn.w	r0, #1
   1d690:	4770      	bx	lr
   1d692:	f06f 0001 	mvn.w	r0, #1
   1d696:	4770      	bx	lr

0001d698 <hal_flash_init>:
{
   1d698:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1d69a:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1d69c:	462c      	mov	r4, r5
   1d69e:	e001      	b.n	1d6a4 <hal_flash_init+0xc>
   1d6a0:	3401      	adds	r4, #1
   1d6a2:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1d6a4:	4620      	mov	r0, r4
   1d6a6:	f7fe fce3 	bl	1c070 <hal_bsp_flash_dev>
        if (!hf) {
   1d6aa:	b138      	cbz	r0, 1d6bc <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1d6ac:	6802      	ldr	r2, [r0, #0]
   1d6ae:	6952      	ldr	r2, [r2, #20]
   1d6b0:	4790      	blx	r2
   1d6b2:	2800      	cmp	r0, #0
   1d6b4:	d0f4      	beq.n	1d6a0 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1d6b6:	f06f 0504 	mvn.w	r5, #4
   1d6ba:	e7f1      	b.n	1d6a0 <hal_flash_init+0x8>
}
   1d6bc:	4628      	mov	r0, r5
   1d6be:	bd38      	pop	{r3, r4, r5, pc}

0001d6c0 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1d6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d6c4:	460d      	mov	r5, r1
   1d6c6:	4690      	mov	r8, r2
   1d6c8:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1d6ca:	f7fe fcd1 	bl	1c070 <hal_bsp_flash_dev>
    if (!hf) {
   1d6ce:	b1c0      	cbz	r0, 1d702 <hal_flash_read+0x42>
   1d6d0:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1d6d2:	4629      	mov	r1, r5
   1d6d4:	f7ff ffd1 	bl	1d67a <hal_flash_check_addr>
   1d6d8:	b9b0      	cbnz	r0, 1d708 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1d6da:	19a9      	adds	r1, r5, r6
   1d6dc:	4620      	mov	r0, r4
   1d6de:	f7ff ffcc 	bl	1d67a <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1d6e2:	b9a0      	cbnz	r0, 1d70e <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1d6e4:	6823      	ldr	r3, [r4, #0]
   1d6e6:	681f      	ldr	r7, [r3, #0]
   1d6e8:	4633      	mov	r3, r6
   1d6ea:	4642      	mov	r2, r8
   1d6ec:	4629      	mov	r1, r5
   1d6ee:	4620      	mov	r0, r4
   1d6f0:	47b8      	blx	r7
    if (rc != 0) {
   1d6f2:	4603      	mov	r3, r0
   1d6f4:	b910      	cbnz	r0, 1d6fc <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1d6f6:	4618      	mov	r0, r3
   1d6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1d6fc:	f06f 0304 	mvn.w	r3, #4
   1d700:	e7f9      	b.n	1d6f6 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1d702:	f06f 0301 	mvn.w	r3, #1
   1d706:	e7f6      	b.n	1d6f6 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1d708:	f06f 0301 	mvn.w	r3, #1
   1d70c:	e7f3      	b.n	1d6f6 <hal_flash_read+0x36>
   1d70e:	f06f 0301 	mvn.w	r3, #1
   1d712:	e7f0      	b.n	1d6f6 <hal_flash_read+0x36>

0001d714 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1d714:	2010      	movs	r0, #16
   1d716:	4770      	bx	lr

0001d718 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1d718:	b570      	push	{r4, r5, r6, lr}
   1d71a:	4606      	mov	r6, r0
   1d71c:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1d71e:	460d      	mov	r5, r1
   1d720:	2908      	cmp	r1, #8
   1d722:	bf28      	it	cs
   1d724:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1d726:	462a      	mov	r2, r5
   1d728:	4906      	ldr	r1, [pc, #24]	; (1d744 <hal_bsp_hw_id+0x2c>)
   1d72a:	f7fe f90d 	bl	1b948 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1d72e:	1b64      	subs	r4, r4, r5
   1d730:	2c08      	cmp	r4, #8
   1d732:	bf28      	it	cs
   1d734:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1d736:	4622      	mov	r2, r4
   1d738:	4903      	ldr	r1, [pc, #12]	; (1d748 <hal_bsp_hw_id+0x30>)
   1d73a:	1970      	adds	r0, r6, r5
   1d73c:	f7fe f904 	bl	1b948 <memcpy>

    return len + cnt;
}
   1d740:	1928      	adds	r0, r5, r4
   1d742:	bd70      	pop	{r4, r5, r6, pc}
   1d744:	10000060 	.word	0x10000060
   1d748:	100000a4 	.word	0x100000a4

0001d74c <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1d74c:	b40e      	push	{r1, r2, r3}
   1d74e:	b500      	push	{lr}
   1d750:	b082      	sub	sp, #8
   1d752:	ab03      	add	r3, sp, #12
   1d754:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1d758:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1d75a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d75e:	f7fe fbef 	bl	1bf40 <vsnprintf>
	va_end(ap);

	return rv;
}
   1d762:	b002      	add	sp, #8
   1d764:	f85d eb04 	ldr.w	lr, [sp], #4
   1d768:	b003      	add	sp, #12
   1d76a:	4770      	bx	lr

0001d76c <__aeabi_uldivmod>:
   1d76c:	b953      	cbnz	r3, 1d784 <__aeabi_uldivmod+0x18>
   1d76e:	b94a      	cbnz	r2, 1d784 <__aeabi_uldivmod+0x18>
   1d770:	2900      	cmp	r1, #0
   1d772:	bf08      	it	eq
   1d774:	2800      	cmpeq	r0, #0
   1d776:	bf1c      	itt	ne
   1d778:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1d77c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1d780:	f000 b972 	b.w	1da68 <__aeabi_idiv0>
   1d784:	f1ad 0c08 	sub.w	ip, sp, #8
   1d788:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1d78c:	f000 f806 	bl	1d79c <__udivmoddi4>
   1d790:	f8dd e004 	ldr.w	lr, [sp, #4]
   1d794:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1d798:	b004      	add	sp, #16
   1d79a:	4770      	bx	lr

0001d79c <__udivmoddi4>:
   1d79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d7a0:	9e08      	ldr	r6, [sp, #32]
   1d7a2:	4604      	mov	r4, r0
   1d7a4:	4688      	mov	r8, r1
   1d7a6:	2b00      	cmp	r3, #0
   1d7a8:	d14b      	bne.n	1d842 <__udivmoddi4+0xa6>
   1d7aa:	428a      	cmp	r2, r1
   1d7ac:	4615      	mov	r5, r2
   1d7ae:	d967      	bls.n	1d880 <__udivmoddi4+0xe4>
   1d7b0:	fab2 f282 	clz	r2, r2
   1d7b4:	b14a      	cbz	r2, 1d7ca <__udivmoddi4+0x2e>
   1d7b6:	f1c2 0720 	rsb	r7, r2, #32
   1d7ba:	fa01 f302 	lsl.w	r3, r1, r2
   1d7be:	fa20 f707 	lsr.w	r7, r0, r7
   1d7c2:	4095      	lsls	r5, r2
   1d7c4:	ea47 0803 	orr.w	r8, r7, r3
   1d7c8:	4094      	lsls	r4, r2
   1d7ca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d7ce:	0c23      	lsrs	r3, r4, #16
   1d7d0:	fbb8 f7fe 	udiv	r7, r8, lr
   1d7d4:	fa1f fc85 	uxth.w	ip, r5
   1d7d8:	fb0e 8817 	mls	r8, lr, r7, r8
   1d7dc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1d7e0:	fb07 f10c 	mul.w	r1, r7, ip
   1d7e4:	4299      	cmp	r1, r3
   1d7e6:	d909      	bls.n	1d7fc <__udivmoddi4+0x60>
   1d7e8:	18eb      	adds	r3, r5, r3
   1d7ea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1d7ee:	f080 811b 	bcs.w	1da28 <__udivmoddi4+0x28c>
   1d7f2:	4299      	cmp	r1, r3
   1d7f4:	f240 8118 	bls.w	1da28 <__udivmoddi4+0x28c>
   1d7f8:	3f02      	subs	r7, #2
   1d7fa:	442b      	add	r3, r5
   1d7fc:	1a5b      	subs	r3, r3, r1
   1d7fe:	b2a4      	uxth	r4, r4
   1d800:	fbb3 f0fe 	udiv	r0, r3, lr
   1d804:	fb0e 3310 	mls	r3, lr, r0, r3
   1d808:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1d80c:	fb00 fc0c 	mul.w	ip, r0, ip
   1d810:	45a4      	cmp	ip, r4
   1d812:	d909      	bls.n	1d828 <__udivmoddi4+0x8c>
   1d814:	192c      	adds	r4, r5, r4
   1d816:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1d81a:	f080 8107 	bcs.w	1da2c <__udivmoddi4+0x290>
   1d81e:	45a4      	cmp	ip, r4
   1d820:	f240 8104 	bls.w	1da2c <__udivmoddi4+0x290>
   1d824:	3802      	subs	r0, #2
   1d826:	442c      	add	r4, r5
   1d828:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1d82c:	eba4 040c 	sub.w	r4, r4, ip
   1d830:	2700      	movs	r7, #0
   1d832:	b11e      	cbz	r6, 1d83c <__udivmoddi4+0xa0>
   1d834:	40d4      	lsrs	r4, r2
   1d836:	2300      	movs	r3, #0
   1d838:	e9c6 4300 	strd	r4, r3, [r6]
   1d83c:	4639      	mov	r1, r7
   1d83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d842:	428b      	cmp	r3, r1
   1d844:	d909      	bls.n	1d85a <__udivmoddi4+0xbe>
   1d846:	2e00      	cmp	r6, #0
   1d848:	f000 80eb 	beq.w	1da22 <__udivmoddi4+0x286>
   1d84c:	2700      	movs	r7, #0
   1d84e:	e9c6 0100 	strd	r0, r1, [r6]
   1d852:	4638      	mov	r0, r7
   1d854:	4639      	mov	r1, r7
   1d856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d85a:	fab3 f783 	clz	r7, r3
   1d85e:	2f00      	cmp	r7, #0
   1d860:	d147      	bne.n	1d8f2 <__udivmoddi4+0x156>
   1d862:	428b      	cmp	r3, r1
   1d864:	d302      	bcc.n	1d86c <__udivmoddi4+0xd0>
   1d866:	4282      	cmp	r2, r0
   1d868:	f200 80fa 	bhi.w	1da60 <__udivmoddi4+0x2c4>
   1d86c:	1a84      	subs	r4, r0, r2
   1d86e:	eb61 0303 	sbc.w	r3, r1, r3
   1d872:	2001      	movs	r0, #1
   1d874:	4698      	mov	r8, r3
   1d876:	2e00      	cmp	r6, #0
   1d878:	d0e0      	beq.n	1d83c <__udivmoddi4+0xa0>
   1d87a:	e9c6 4800 	strd	r4, r8, [r6]
   1d87e:	e7dd      	b.n	1d83c <__udivmoddi4+0xa0>
   1d880:	b902      	cbnz	r2, 1d884 <__udivmoddi4+0xe8>
   1d882:	deff      	udf	#255	; 0xff
   1d884:	fab2 f282 	clz	r2, r2
   1d888:	2a00      	cmp	r2, #0
   1d88a:	f040 808f 	bne.w	1d9ac <__udivmoddi4+0x210>
   1d88e:	1b49      	subs	r1, r1, r5
   1d890:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d894:	fa1f f885 	uxth.w	r8, r5
   1d898:	2701      	movs	r7, #1
   1d89a:	fbb1 fcfe 	udiv	ip, r1, lr
   1d89e:	0c23      	lsrs	r3, r4, #16
   1d8a0:	fb0e 111c 	mls	r1, lr, ip, r1
   1d8a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d8a8:	fb08 f10c 	mul.w	r1, r8, ip
   1d8ac:	4299      	cmp	r1, r3
   1d8ae:	d907      	bls.n	1d8c0 <__udivmoddi4+0x124>
   1d8b0:	18eb      	adds	r3, r5, r3
   1d8b2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1d8b6:	d202      	bcs.n	1d8be <__udivmoddi4+0x122>
   1d8b8:	4299      	cmp	r1, r3
   1d8ba:	f200 80cd 	bhi.w	1da58 <__udivmoddi4+0x2bc>
   1d8be:	4684      	mov	ip, r0
   1d8c0:	1a59      	subs	r1, r3, r1
   1d8c2:	b2a3      	uxth	r3, r4
   1d8c4:	fbb1 f0fe 	udiv	r0, r1, lr
   1d8c8:	fb0e 1410 	mls	r4, lr, r0, r1
   1d8cc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1d8d0:	fb08 f800 	mul.w	r8, r8, r0
   1d8d4:	45a0      	cmp	r8, r4
   1d8d6:	d907      	bls.n	1d8e8 <__udivmoddi4+0x14c>
   1d8d8:	192c      	adds	r4, r5, r4
   1d8da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1d8de:	d202      	bcs.n	1d8e6 <__udivmoddi4+0x14a>
   1d8e0:	45a0      	cmp	r8, r4
   1d8e2:	f200 80b6 	bhi.w	1da52 <__udivmoddi4+0x2b6>
   1d8e6:	4618      	mov	r0, r3
   1d8e8:	eba4 0408 	sub.w	r4, r4, r8
   1d8ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1d8f0:	e79f      	b.n	1d832 <__udivmoddi4+0x96>
   1d8f2:	f1c7 0c20 	rsb	ip, r7, #32
   1d8f6:	40bb      	lsls	r3, r7
   1d8f8:	fa22 fe0c 	lsr.w	lr, r2, ip
   1d8fc:	ea4e 0e03 	orr.w	lr, lr, r3
   1d900:	fa01 f407 	lsl.w	r4, r1, r7
   1d904:	fa20 f50c 	lsr.w	r5, r0, ip
   1d908:	fa21 f30c 	lsr.w	r3, r1, ip
   1d90c:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1d910:	4325      	orrs	r5, r4
   1d912:	fbb3 f9f8 	udiv	r9, r3, r8
   1d916:	0c2c      	lsrs	r4, r5, #16
   1d918:	fb08 3319 	mls	r3, r8, r9, r3
   1d91c:	fa1f fa8e 	uxth.w	sl, lr
   1d920:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1d924:	fb09 f40a 	mul.w	r4, r9, sl
   1d928:	429c      	cmp	r4, r3
   1d92a:	fa02 f207 	lsl.w	r2, r2, r7
   1d92e:	fa00 f107 	lsl.w	r1, r0, r7
   1d932:	d90b      	bls.n	1d94c <__udivmoddi4+0x1b0>
   1d934:	eb1e 0303 	adds.w	r3, lr, r3
   1d938:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1d93c:	f080 8087 	bcs.w	1da4e <__udivmoddi4+0x2b2>
   1d940:	429c      	cmp	r4, r3
   1d942:	f240 8084 	bls.w	1da4e <__udivmoddi4+0x2b2>
   1d946:	f1a9 0902 	sub.w	r9, r9, #2
   1d94a:	4473      	add	r3, lr
   1d94c:	1b1b      	subs	r3, r3, r4
   1d94e:	b2ad      	uxth	r5, r5
   1d950:	fbb3 f0f8 	udiv	r0, r3, r8
   1d954:	fb08 3310 	mls	r3, r8, r0, r3
   1d958:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1d95c:	fb00 fa0a 	mul.w	sl, r0, sl
   1d960:	45a2      	cmp	sl, r4
   1d962:	d908      	bls.n	1d976 <__udivmoddi4+0x1da>
   1d964:	eb1e 0404 	adds.w	r4, lr, r4
   1d968:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1d96c:	d26b      	bcs.n	1da46 <__udivmoddi4+0x2aa>
   1d96e:	45a2      	cmp	sl, r4
   1d970:	d969      	bls.n	1da46 <__udivmoddi4+0x2aa>
   1d972:	3802      	subs	r0, #2
   1d974:	4474      	add	r4, lr
   1d976:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1d97a:	fba0 8902 	umull	r8, r9, r0, r2
   1d97e:	eba4 040a 	sub.w	r4, r4, sl
   1d982:	454c      	cmp	r4, r9
   1d984:	46c2      	mov	sl, r8
   1d986:	464b      	mov	r3, r9
   1d988:	d354      	bcc.n	1da34 <__udivmoddi4+0x298>
   1d98a:	d051      	beq.n	1da30 <__udivmoddi4+0x294>
   1d98c:	2e00      	cmp	r6, #0
   1d98e:	d069      	beq.n	1da64 <__udivmoddi4+0x2c8>
   1d990:	ebb1 050a 	subs.w	r5, r1, sl
   1d994:	eb64 0403 	sbc.w	r4, r4, r3
   1d998:	fa04 fc0c 	lsl.w	ip, r4, ip
   1d99c:	40fd      	lsrs	r5, r7
   1d99e:	40fc      	lsrs	r4, r7
   1d9a0:	ea4c 0505 	orr.w	r5, ip, r5
   1d9a4:	e9c6 5400 	strd	r5, r4, [r6]
   1d9a8:	2700      	movs	r7, #0
   1d9aa:	e747      	b.n	1d83c <__udivmoddi4+0xa0>
   1d9ac:	f1c2 0320 	rsb	r3, r2, #32
   1d9b0:	fa20 f703 	lsr.w	r7, r0, r3
   1d9b4:	4095      	lsls	r5, r2
   1d9b6:	fa01 f002 	lsl.w	r0, r1, r2
   1d9ba:	fa21 f303 	lsr.w	r3, r1, r3
   1d9be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d9c2:	4338      	orrs	r0, r7
   1d9c4:	0c01      	lsrs	r1, r0, #16
   1d9c6:	fbb3 f7fe 	udiv	r7, r3, lr
   1d9ca:	fa1f f885 	uxth.w	r8, r5
   1d9ce:	fb0e 3317 	mls	r3, lr, r7, r3
   1d9d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1d9d6:	fb07 f308 	mul.w	r3, r7, r8
   1d9da:	428b      	cmp	r3, r1
   1d9dc:	fa04 f402 	lsl.w	r4, r4, r2
   1d9e0:	d907      	bls.n	1d9f2 <__udivmoddi4+0x256>
   1d9e2:	1869      	adds	r1, r5, r1
   1d9e4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1d9e8:	d22f      	bcs.n	1da4a <__udivmoddi4+0x2ae>
   1d9ea:	428b      	cmp	r3, r1
   1d9ec:	d92d      	bls.n	1da4a <__udivmoddi4+0x2ae>
   1d9ee:	3f02      	subs	r7, #2
   1d9f0:	4429      	add	r1, r5
   1d9f2:	1acb      	subs	r3, r1, r3
   1d9f4:	b281      	uxth	r1, r0
   1d9f6:	fbb3 f0fe 	udiv	r0, r3, lr
   1d9fa:	fb0e 3310 	mls	r3, lr, r0, r3
   1d9fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1da02:	fb00 f308 	mul.w	r3, r0, r8
   1da06:	428b      	cmp	r3, r1
   1da08:	d907      	bls.n	1da1a <__udivmoddi4+0x27e>
   1da0a:	1869      	adds	r1, r5, r1
   1da0c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1da10:	d217      	bcs.n	1da42 <__udivmoddi4+0x2a6>
   1da12:	428b      	cmp	r3, r1
   1da14:	d915      	bls.n	1da42 <__udivmoddi4+0x2a6>
   1da16:	3802      	subs	r0, #2
   1da18:	4429      	add	r1, r5
   1da1a:	1ac9      	subs	r1, r1, r3
   1da1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1da20:	e73b      	b.n	1d89a <__udivmoddi4+0xfe>
   1da22:	4637      	mov	r7, r6
   1da24:	4630      	mov	r0, r6
   1da26:	e709      	b.n	1d83c <__udivmoddi4+0xa0>
   1da28:	4607      	mov	r7, r0
   1da2a:	e6e7      	b.n	1d7fc <__udivmoddi4+0x60>
   1da2c:	4618      	mov	r0, r3
   1da2e:	e6fb      	b.n	1d828 <__udivmoddi4+0x8c>
   1da30:	4541      	cmp	r1, r8
   1da32:	d2ab      	bcs.n	1d98c <__udivmoddi4+0x1f0>
   1da34:	ebb8 0a02 	subs.w	sl, r8, r2
   1da38:	eb69 020e 	sbc.w	r2, r9, lr
   1da3c:	3801      	subs	r0, #1
   1da3e:	4613      	mov	r3, r2
   1da40:	e7a4      	b.n	1d98c <__udivmoddi4+0x1f0>
   1da42:	4660      	mov	r0, ip
   1da44:	e7e9      	b.n	1da1a <__udivmoddi4+0x27e>
   1da46:	4618      	mov	r0, r3
   1da48:	e795      	b.n	1d976 <__udivmoddi4+0x1da>
   1da4a:	4667      	mov	r7, ip
   1da4c:	e7d1      	b.n	1d9f2 <__udivmoddi4+0x256>
   1da4e:	4681      	mov	r9, r0
   1da50:	e77c      	b.n	1d94c <__udivmoddi4+0x1b0>
   1da52:	3802      	subs	r0, #2
   1da54:	442c      	add	r4, r5
   1da56:	e747      	b.n	1d8e8 <__udivmoddi4+0x14c>
   1da58:	f1ac 0c02 	sub.w	ip, ip, #2
   1da5c:	442b      	add	r3, r5
   1da5e:	e72f      	b.n	1d8c0 <__udivmoddi4+0x124>
   1da60:	4638      	mov	r0, r7
   1da62:	e708      	b.n	1d876 <__udivmoddi4+0xda>
   1da64:	4637      	mov	r7, r6
   1da66:	e6e9      	b.n	1d83c <__udivmoddi4+0xa0>

0001da68 <__aeabi_idiv0>:
   1da68:	4770      	bx	lr
   1da6a:	bf00      	nop

0001da6c <__aeabi_memclr>:
   1da6c:	2200      	movs	r2, #0
   1da6e:	f000 b803 	b.w	1da78 <__aeabi_memset>
   1da72:	bf00      	nop

0001da74 <__aeabi_memcpy>:
   1da74:	f7fd bf68 	b.w	1b948 <memcpy>

0001da78 <__aeabi_memset>:
   1da78:	b470      	push	{r4, r5, r6}
   1da7a:	0784      	lsls	r4, r0, #30
   1da7c:	d046      	beq.n	1db0c <__aeabi_memset+0x94>
   1da7e:	1e4c      	subs	r4, r1, #1
   1da80:	2900      	cmp	r1, #0
   1da82:	d041      	beq.n	1db08 <__aeabi_memset+0x90>
   1da84:	b2d5      	uxtb	r5, r2
   1da86:	4603      	mov	r3, r0
   1da88:	e002      	b.n	1da90 <__aeabi_memset+0x18>
   1da8a:	1e61      	subs	r1, r4, #1
   1da8c:	b3e4      	cbz	r4, 1db08 <__aeabi_memset+0x90>
   1da8e:	460c      	mov	r4, r1
   1da90:	f803 5b01 	strb.w	r5, [r3], #1
   1da94:	0799      	lsls	r1, r3, #30
   1da96:	d1f8      	bne.n	1da8a <__aeabi_memset+0x12>
   1da98:	2c03      	cmp	r4, #3
   1da9a:	d92e      	bls.n	1dafa <__aeabi_memset+0x82>
   1da9c:	b2d5      	uxtb	r5, r2
   1da9e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1daa2:	2c0f      	cmp	r4, #15
   1daa4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1daa8:	d919      	bls.n	1dade <__aeabi_memset+0x66>
   1daaa:	4626      	mov	r6, r4
   1daac:	f103 0110 	add.w	r1, r3, #16
   1dab0:	3e10      	subs	r6, #16
   1dab2:	2e0f      	cmp	r6, #15
   1dab4:	f841 5c10 	str.w	r5, [r1, #-16]
   1dab8:	f841 5c0c 	str.w	r5, [r1, #-12]
   1dabc:	f841 5c08 	str.w	r5, [r1, #-8]
   1dac0:	f841 5c04 	str.w	r5, [r1, #-4]
   1dac4:	f101 0110 	add.w	r1, r1, #16
   1dac8:	d8f2      	bhi.n	1dab0 <__aeabi_memset+0x38>
   1daca:	f1a4 0110 	sub.w	r1, r4, #16
   1dace:	f021 010f 	bic.w	r1, r1, #15
   1dad2:	f004 040f 	and.w	r4, r4, #15
   1dad6:	3110      	adds	r1, #16
   1dad8:	2c03      	cmp	r4, #3
   1dada:	440b      	add	r3, r1
   1dadc:	d90d      	bls.n	1dafa <__aeabi_memset+0x82>
   1dade:	461e      	mov	r6, r3
   1dae0:	4621      	mov	r1, r4
   1dae2:	3904      	subs	r1, #4
   1dae4:	2903      	cmp	r1, #3
   1dae6:	f846 5b04 	str.w	r5, [r6], #4
   1daea:	d8fa      	bhi.n	1dae2 <__aeabi_memset+0x6a>
   1daec:	1f21      	subs	r1, r4, #4
   1daee:	f021 0103 	bic.w	r1, r1, #3
   1daf2:	3104      	adds	r1, #4
   1daf4:	440b      	add	r3, r1
   1daf6:	f004 0403 	and.w	r4, r4, #3
   1dafa:	b12c      	cbz	r4, 1db08 <__aeabi_memset+0x90>
   1dafc:	b2d2      	uxtb	r2, r2
   1dafe:	441c      	add	r4, r3
   1db00:	f803 2b01 	strb.w	r2, [r3], #1
   1db04:	42a3      	cmp	r3, r4
   1db06:	d1fb      	bne.n	1db00 <__aeabi_memset+0x88>
   1db08:	bc70      	pop	{r4, r5, r6}
   1db0a:	4770      	bx	lr
   1db0c:	460c      	mov	r4, r1
   1db0e:	4603      	mov	r3, r0
   1db10:	e7c2      	b.n	1da98 <__aeabi_memset+0x20>
   1db12:	5344      	.short	0x5344
   1db14:	61662050 	.word	0x61662050
   1db18:	43546c69 	.word	0x43546c69
   1db1c:	61662048 	.word	0x61662048
   1db20:	45476c69 	.word	0x45476c69
   1db24:	61662054 	.word	0x61662054
   1db28:	55526c69 	.word	0x55526c69
   1db2c:	6166204e 	.word	0x6166204e
   1db30:	6c69      	.short	0x6c69
   1db32:	7572      	.short	0x7572
   1db34:	612f7473 	.word	0x612f7473
   1db38:	732f7070 	.word	0x732f7070
   1db3c:	6c2f6372 	.word	0x6c2f6372
   1db40:	722e6269 	.word	0x722e6269
   1db44:	00000073 	.word	0x00000073
   1db48:	0001db32 	.word	0x0001db32
   1db4c:	00000013 	.word	0x00000013
   1db50:	0000005b 	.word	0x0000005b
   1db54:	00000005 	.word	0x00000005
   1db58:	0001db32 	.word	0x0001db32
   1db5c:	00000013 	.word	0x00000013
   1db60:	00000064 	.word	0x00000064
   1db64:	00000005 	.word	0x00000005
   1db68:	50494843 	.word	0x50494843
   1db6c:	61662038 	.word	0x61662038
   1db70:	00006c69 	.word	0x00006c69
   1db74:	0001db32 	.word	0x0001db32
   1db78:	00000013 	.word	0x00000013
   1db7c:	00000076 	.word	0x00000076
   1db80:	00000005 	.word	0x00000005
   1db84:	0001db32 	.word	0x0001db32
   1db88:	00000013 	.word	0x00000013
   1db8c:	0000007c 	.word	0x0000007c
   1db90:	0000000d 	.word	0x0000000d
   1db94:	0001db32 	.word	0x0001db32
   1db98:	00000013 	.word	0x00000013
   1db9c:	0000007b 	.word	0x0000007b
   1dba0:	00000009 	.word	0x00000009
   1dba4:	696e6170 	.word	0x696e6170
   1dba8:	2063      	.short	0x2063
   1dbaa:	6f6e      	.short	0x6f6e
   1dbac:	636f6c20 	.word	0x636f6c20
   1dbb0:	0a          	.byte	0x0a
   1dbb1:	61          	.byte	0x61
   1dbb2:	2074      	.short	0x2074
   1dbb4:	6e696c20 	.word	0x6e696c20
   1dbb8:	2065      	.short	0x2065
   1dbba:	000a      	.short	0x000a
   1dbbc:	0001db32 	.word	0x0001db32
   1dbc0:	00000013 	.word	0x00000013
   1dbc4:	00000094 	.word	0x00000094
   1dbc8:	00000014 	.word	0x00000014
   1dbcc:	00008837 	.word	0x00008837
   1dbd0:	00000004 	.word	0x00000004
   1dbd4:	00000004 	.word	0x00000004
   1dbd8:	00008c57 	.word	0x00008c57
   1dbdc:	6573552f 	.word	0x6573552f
   1dbe0:	4c2f7372 	.word	0x4c2f7372
   1dbe4:	79707075 	.word	0x79707075
   1dbe8:	61632e2f 	.word	0x61632e2f
   1dbec:	2f6f6772 	.word	0x2f6f6772
   1dbf0:	69676572 	.word	0x69676572
   1dbf4:	79727473 	.word	0x79727473
   1dbf8:	6372732f 	.word	0x6372732f
   1dbfc:	7469672f 	.word	0x7469672f
   1dc00:	2e627568 	.word	0x2e627568
   1dc04:	2d6d6f63 	.word	0x2d6d6f63
   1dc08:	63636531 	.word	0x63636531
   1dc0c:	39393236 	.word	0x39393236
   1dc10:	65396264 	.word	0x65396264
   1dc14:	33323863 	.word	0x33323863
   1dc18:	6165682f 	.word	0x6165682f
   1dc1c:	73656c70 	.word	0x73656c70
   1dc20:	2e302d73 	.word	0x2e302d73
   1dc24:	2f312e35 	.word	0x2f312e35
   1dc28:	2f637273 	.word	0x2f637273
   1dc2c:	2e636576 	.word	0x2e636576
   1dc30:	00007372 	.word	0x00007372
   1dc34:	0001dbdc 	.word	0x0001dbdc
   1dc38:	00000056 	.word	0x00000056
   1dc3c:	000001e8 	.word	0x000001e8
   1dc40:	0000000d 	.word	0x0000000d
	...

0001dc50 <str.0>:
   1dc50:	65747461 2074706d 61206f74 77206464     attempt to add w
   1dc60:	20687469 7265766f 776f6c66 00000000     ith overflow....
   1dc70:	0001dc6c 0001dc70 65737361 6f697472     l...p...assertio
   1dc80:	6166206e 64656c69 2860203a 7466656c     n failed: `(left
   1dc90:	203d3d20 68676972 0a602974 656c2020      == right)`.  le
   1dca0:	203a7466 0a2c6060 67697220 203a7468     ft: ``,. right: 
   1dcb0:	203a6060 0001dc78 0000002d 0001dca5     ``: x...-.......
   1dcc0:	0000000c 0001dcb1 00000003 0001dcb4     ................
   1dcd0:	6e206f6e 006c6c75 0001dcd0 00000007     no null.........
   1dce0:	0001dcd8 0001dce4 74737572 6e796d2f     ........rust/myn
   1dcf0:	2f747765 2f637273 2e62696c 00007372     ewt/src/lib.rs..
   1dd00:	0001dce8 00000016 000000db 00000011     ................
   1dd10:	00008f13 00000004 00000004 00008c57     ............W...
   1dd20:	65737361 6f697472 6166206e 64656c69     assertion failed
   1dd30:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   1dd40:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   1dd50:	67697220 203a7468 203a6060 0001dd20      right: ``:  ...
   1dd60:	0000002d 0001dd4d 0000000c 0001dd59     -...M.......Y...
   1dd70:	00000003 0001dd5c 74736564 74616e69     ....\...destinat
   1dd80:	206e6f69 20646e61 72756f73 73206563     ion and source s
   1dd90:	6563696c 61682073 64206576 65666669     lices have diffe
   1dda0:	746e6572 6e656c20 73687467 0001dd78     rent lengthsx...
   1ddb0:	00000034 0001ddac 0001ddb8 7375722f     4.........../rus
   1ddc0:	352f6374 66613765 39363634 65303866     tc/5e7af4669f80e
   1ddd0:	38366635 31343132 30353066 61333931     5f682141f050193a
   1dde0:	39373662 62646661 2f316234 2f637273     b679afdb4b1/src/
   1ddf0:	6362696c 2f65726f 7263616d 6d2f736f     libcore/macros/m
   1de00:	722e646f 00000073 0001ddbc 00000049     od.rs.......I...
   1de10:	00000012 0000000d 656d6f53 656e6f4e     ........SomeNone
   1de20:	00008f0b 00000004 00000004 000094e9     ................
   1de30:	00000060 0001de30 20697073 73756c66     `...0...spi flus
   1de40:	61662068 552f6c69 73726573 70754c2f     h fail/Users/Lup
   1de50:	502f7970 54656e69 2f656d69 656e6970     py/PineTime/pine
   1de60:	656d6974 7375722d 796d2d74 7477656e     time-rust-mynewt
   1de70:	7375722f 74732f74 35333737 64636c2d     /rust/st7735-lcd
   1de80:	7461622d 722d6863 72732f73 696c2f63     -batch-rs/src/li
   1de90:	73722e62 0001de46 0000004e 000000fe     b.rsF...N.......
   1dea0:	00000009 20697073 61746164 69616620     ....spi data fai
   1deb0:	0000006c 0001de46 0000004e 000000b0     l...F...N.......
   1dec0:	00000009 0001de46 0000004e 000000f3     ....F...N.......
   1ded0:	00000009 0001de46 0000004e 00000098     ....F...N.......
   1dee0:	0000000d 20697073 20646d63 6c696166     ....spi cmd fail
   1def0:	0001de46 0000004e 00000097 00000009     F...N...........
   1df00:	0001de46 0000004e 0000009d 00000011     F...N...........
   1df10:	0001de46 0000004e 0000009c 0000000d     F...N...........
   1df20:	0001de46 0000004e 000000c5 0000002d     F...N.......-...
   1df30:	0001de46 0000004e 000000c9 0000002d     F...N.......-...
   1df40:	0001de46 0000004e 000000d8 00000019     F...N...........

0001df50 <str.0>:
   1df50:	65747461 2074706d 61206f74 77206464     attempt to add w
   1df60:	20687469 7265766f 776f6c66 0001de46     ith overflowF...
   1df70:	0000004e 000000d9 00000019 0001de46     N...........F...
   1df80:	0000004e 000000db 00000019 0001de46     N...........F...
   1df90:	0000004e 000000dc 00000019 20697073     N...........spi 
   1dfa0:	74696e69 69616620 0000006c 0001de46     init fail...F...
   1dfb0:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1dfc0:	0001dfbc 012d2c01 00002d2c 0001dfc4     .....,-.,-......
   1dfd0:	00000007 0001dfd0 008402a2 0001dfd8     ................
   1dfe0:	000000c5 0001dfe0 0000000a 0001dfe8     ................
   1dff0:	00002a8a 0001dff0 0000ee8a 0001dff8     .*..............
   1e000:	0000000e 0001e000 00000000 0001e008     ................
   1e010:	00000008 0001e010 00000005 0001e018     ................
   1e020:	0001de46 0000004e 00000088 00000009     F...N...........
   1e030:	74737552 756f7420 73206863 6f736e65     Rust touch senso
   1e040:	00000a72 00000000 0001e044 65737361     r.......D...asse
   1e050:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1e060:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1e070:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1e080:	203a7468 203a6060 0001e04c 0000002d     ht: ``: L...-...
   1e090:	0001e079 0000000c 0001e085 00000003     y...............
   1e0a0:	0001e088 20515249 74696e69 69616620     ....IRQ init fai
   1e0b0:	0000006c 0001e0a4 0000000d 0001e0b4     l...............
   1e0c0:	0001e0c0 74737572 7070612f 6372732f     ....rust/app/src
   1e0d0:	756f742f 735f6863 6f736e65 73722e72     /touch_sensor.rs
   1e0e0:	0001e0c4 0000001c 0000003f 00000005     ........?.......
   1e0f0:	20633269 72646461 0001e0c4 0000001c     i2c addr........
   1e100:	0000004b 00000011 63756f74 74616468     K.......touchdat
   1e110:	61662061 00006c69 0001e0c4 0000001c     a fail..........
   1e120:	00000056 00000009 0001e0c4 0000001c     V...............
   1e130:	0000005a 00000031 64616572 756f7420     Z...1...read tou
   1e140:	61646863 66206174 006c6961 0001e0c4     chdata fail.....
   1e150:	0000001c 00000089 00000005 0001e0c4     ................
   1e160:	0000001c 00000095 00000037 00000000     ........7.......

0001e170 <str.0>:
   1e170:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1e180:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1e190:	00000077 0001e0c4 0000001c 00000095     w...............
   1e1a0:	00000024 00000000 00000000 00000000     $...............

0001e1b0 <str.1>:
   1e1b0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1e1c0:	20687469 7265766f 776f6c66 0001e0c4     ith overflow....
   1e1d0:	0000001c 00000095 00000020 0001e0c4     ........ .......
   1e1e0:	0000001c 00000099 00000009 0001e0c4     ................
   1e1f0:	0000001c 0000009a 00000037 0001e0c4     ........7.......
   1e200:	0000001c 0000009a 00000023 0001e0c4     ........#.......
   1e210:	0000001c 0000009a 0000001f 0001e0c4     ................
   1e220:	0000001c 0000009b 00000037 0001e0c4     ........7.......
   1e230:	0000001c 0000009b 00000023 0001e0c4     ........#.......
   1e240:	0000001c 0000009b 0000001f 0001e0c4     ................
   1e250:	0000001c 0000009c 00000009 0001e0c4     ................
   1e260:	0000001c 0000009e 00000037 0001e0c4     ........7.......
   1e270:	0000001c 0000009e 00000023 0001e0c4     ........#.......
   1e280:	0000001c 0000009e 0000001f 0001e0c4     ................
   1e290:	0000001c 0000009f 00000037 0001e0c4     ........7.......
   1e2a0:	0000001c 0000009f 00000023 0001e0c4     ........#.......
   1e2b0:	0000001c 0000009f 0000001f 0001e0c4     ................
   1e2c0:	0000001c 000000a0 00000009 0001e0c4     ................
   1e2d0:	0000001c 000000a4 00000030 0001e0c4     ........0.......
   1e2e0:	0000001c 000000a4 0000001a 0001e0c4     ................
   1e2f0:	0000001c 000000a4 00000016 0001e0c4     ................
   1e300:	0000001c 000000a3 00000009 0001e0c4     ................
   1e310:	0000001c 000000a6 00000030 0001e0c4     ........0.......
   1e320:	0000001c 000000a6 0000001a 0001e0c4     ................
   1e330:	0000001c 000000a6 00000016 0001e0c4     ................
   1e340:	0000001c 000000a5 00000009 0001e0c4     ................
   1e350:	0000001c 000000aa 0000002d 0001e0c4     ........-.......
   1e360:	0000001c 000000aa 0000001a 0001e0c4     ................
   1e370:	0000001c 000000aa 00000016 0001e0c4     ................
   1e380:	0000001c 000000a9 00000009 0001e0c4     ................
   1e390:	0000001c 000000ac 0000002d 0001e0c4     ........-.......
   1e3a0:	0000001c 000000ac 0000001a 0001e0c4     ................
   1e3b0:	0000001c 000000ac 00000016 0001e0c4     ................
   1e3c0:	0000001c 000000ab 00000009 0001e0c4     ................
   1e3d0:	0000001c 000000af 0000000d 0001e0c4     ................
   1e3e0:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   1e3f0:	00667562 0001e0c4 0000001c 000000f1     buf.............
   1e400:	00000005 0001e0c4 0000001c 000000f2     ................
   1e410:	0000000d 0001e0c4 0000001c 000000f2     ................
   1e420:	00000005 20633269 6c696166 73552f0a     ....i2c fail./Us
   1e430:	2f737265 7070754c 632e2f79 6f677261     ers/Luppy/.cargo
   1e440:	6765722f 72747369 72732f79 69672f63     /registry/src/gi
   1e450:	62756874 6d6f632e 6365312d 39323663     thub.com-1ecc629
   1e460:	39626439 32386365 65682f33 656c7061     9db9ec823/heaple
   1e470:	302d7373 312e352e 6372732f 6365762f     ss-0.5.1/src/vec
   1e480:	0073722e 0001e42d 00000056 00000066     .rs.-...V...f...
   1e490:	00000009 00000000 00000000 00000000     ................

0001e4a0 <str.0>:
   1e4a0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1e4b0:	20687469 7265766f 776f6c66 0001e42d     ith overflow-...
   1e4c0:	00000056 0000003e 0000000c 74737552     V...>.......Rust
   1e4d0:	49484320 630a3850 38706968 00000000      CHIP8.chip8....
   1e4e0:	00000000 0001e4d7 00000006 0001e4e0     ................
   1e4f0:	50494843 74732038 65747261 25120a64     CHIP8 started..%
   1e500:	43415053 4e492045 45444156 30205352     SPACE INVADERS 0
   1e510:	2031392e 44207942 64697661 4e495720     .91 By David WIN
   1e520:	60524554 62006100 d0dda308 f2087118     TER`.a.b.....q..
   1e530:	1220311e 6108702d 12403000 6c05692d     .1 .-p.a.0@.-i.l
   1e540:	23006e15 f00a6091 3007f015 234b1200     .n.#.`.....0..K#
   1e550:	12017e91 68006645 6a00691c 6c0a6b04     .~..Ef.h.i.j.k.l
   1e560:	6e3c6d04 23e0000f fd512375 e0046015     .m<n...#u#Q..`..
   1e570:	237d129e 78003875 607523ff 129ee006     ..}#u8.x.#u`....
   1e580:	3875238b 23017839 12003675 e005609f     .#u89x.#u6...`..
   1e590:	66e9129e 841b6501 d4d9a380 d4d9a351     ...f.e......Q...
   1e5a0:	35ff7551 66ad12ff d4e91200 12013f51     Qu.5...f....Q?..
   1e5b0:	6651d4e9 73408300 62b58303 622283f8     ..Qf..@s...b.."b
   1e5c0:	12003308 827d23c9 12084306 121033d3     .3...#}..C...3..
   1e5d0:	827d23d5 12183306 827d23dd 12204306     .#}..3...#}..C .
   1e5e0:	122833e7 3e7d23e9 79071300 69184906     .3(..#}>...y.I.i
   1e5f0:	6b046a00 7d046c0a 000f6ef4 235123e0     .j.k.l.}.n...#Q#
   1e600:	1215fd75 3707f76f fd6f1200 8b512315     u...o..7..o..#Q.
   1e610:	13123ba4 6a027c1b 13023bfc 6a027c23     .;...|.j.;..#|.j
   1e620:	3c512304 006f1218 60dda4e0 62086114     .#Q<..o....`.a.b
   1e630:	701fd00f 301ef208 6033132c f015f0ff     ...p...0,.3`....
   1e640:	13003007 000af041 fe06a7e0 a3251265     .0..A.......e.%.
   1e650:	611ef9c1 81692308 81692306 81692306     ...a.#i..#i..#i.
   1e660:	7b692306 80ee00d0 301280e0 7bc6db00     .#i{.......0...{
   1e670:	a3ee000c d81c60d9 23ee0004 23238e51     .....`.....#Q.##
   1e680:	f0056051 f015f018 13003007 6aee0089     Q`.......0.....j
   1e690:	6be08d00 12a1e904 fd0ca657 3065f01e     ...k....W.....e0
   1e6a0:	6aaf13ff 6d046b00 13016e01 f00aa597     ...j.k.m.n......
   1e6b0:	7bc6db1e 7a017d08 13073a01 3cee0097     ...{.}.z.:.....<
   1e6c0:	99ffff7e ffff7e99 7ee72424 7e3c3cff     ~....~..$$.~.<<~
   1e6d0:	3c4281db 10dbff7e 00fe7c38 3f007f00     ..B<~...8|.....?
   1e6e0:	00007f00 01010100 03030303 203f0000     ..............? 
   1e6f0:	20202020 3f202020 00ff0808 fc00fe00            ?........
   1e700:	0000fe00 42427e00 62626262 00ff0000     .....~BBbbbb....
   1e710:	00000000 ff000000 00ff0000 7d41007d     ............}.A}
   1e720:	007d7d05 c6c2c200 38286c44 00ff0000     .}}.....Dl(8....
   1e730:	00000000 ff000000 00ff0000 f71410f7     ................
   1e740:	000404f7 fe447c00 c2c2c2c2 00ff0000     .....|D.........
   1e750:	00000000 ff000000 00ff0000 e82820ef     ............. (.
   1e760:	002f2fe8 c585f900 f9c5c5c5 00ff0000     .//.............
   1e770:	00000000 ff000000 00ff0000 302000be     .............. 0
   1e780:	00bebe20 e704f700 f4848585 00ff0000      ...............
   1e790:	00000000 ff000000 00ff0000 3f007f00     ...............?
   1e7a0:	00007f00 ef28ef00 6f60e000 00ff0000     ......(...`o....
   1e7b0:	00000000 ff000000 00ff0000 fc00fe00     ................
   1e7c0:	0000fe00 c000c000 c0c0c0c0 04fc0000     ................
   1e7d0:	04040404 fc040404 f9ff1010 9a8bb981     ................
   1e7e0:	fa00fa9a 9b9a9a8a 25e6f899 3434f425     ...........%%.44
   1e7f0:	14170034 26363734 5050dfc7 dfd8d85c     4...476&..PP\...
   1e800:	1f11df00 d9191b12 86fe447c 84fc8686     ........|D......
   1e810:	fe8282fe c0c080fe 82fcfec0 fcc2c2c2     ................
   1e820:	c0f880fe 80fefec0 c0c0c0f0 86be80fe     ................
   1e830:	8686fe86 868686fe 10101010 18181010     ................
   1e840:	78484818 c0b0909c 80809cb0 fec0c0c0     .HHx............
   1e850:	869292ee 82fe8686 86868686 8686827c     ............|...
   1e860:	82fe7c86 c0c0c0fe cac2827c 86fe7ac4     .|......|....z..
   1e870:	849c90fe 02fec0fe 10fefe02 30303030     ............0000
   1e880:	c2c28282 8282fec2 1038ee82 92968686     ..........8.....
   1e890:	4482ee92 82443838 30fe8282 02fe3030     ...D88D....000..
   1e8a0:	fe80f01e 00000000 00000606 c0606000     .............``.
   1e8b0:	00000000 18180000 18001818 180cc67c     ............|...
   1e8c0:	00001800 0000fefe 868682fe 0808fe86     ................
   1e8d0:	18181808 c0fe02fe 02fefec0 fe06061e     ................
   1e8e0:	fec4c484 80fe0404 fe0606fe fec0c0c0     ................
   1e8f0:	02fefe82 06060602 86fe447c 82fefe86     ........|D......
   1e900:	060606fe 4444fe44 a8a844fe a8a8a8a8     ....D.DD.D......
   1e910:	005a6ca8 30a8180c 12007e4e a86c6618     .lZ....0N~...fl.
   1e920:	2454665a 48480066 06a81218 0012a890     ZfT$f.HH........
   1e930:	a812307e 724e3084 a8a86618 a8a8a8a8     ~0...0Nr.f......
   1e940:	a8785490 726c7848 6c1812a8 90546672     .Tx.Hxlr...lrfT.
   1e950:	182a72a8 7e4e30a8 66181200 5472a86c     .r*..0N~...fl.rT
   1e960:	18665aa8 724e187e 182a72a8 30a86630     .Zf.~.Nr.r*.0f.0
   1e970:	6c007e4e 9c4e5430 a8a8a8a8 48a8a8a8     N~.l0TN........H
   1e980:	a8187e54 66785490 302a6ca8 3084a85a     T~...Txf.l*0Z..0
   1e990:	d8a82a72 124e00a8 a8a2e4a8 a8124e00     r*....N......N..
   1e9a0:	54542a6c 3084a872 dea82a72 2a72a89c     l*TTr..0r*....r*
   1e9b0:	540ca818 72785a48 66a86618 66545a18     ...THZxr.f.f.ZTf
   1e9c0:	72a86c72 a872002a a8182a72 007e4e30     rl.r*.r.r*..0N~.
   1e9d0:	6c661812 186600a8 0c4e30a8 6c001866     ..fl..f..0N.f..l
   1e9e0:	a8244e30 30182a72 541ea866 9c180c66     0N$.r*.0f..Tf...
   1e9f0:	545424a8 7842a812 aea83c0c a8a8a8a8     .$TT..Bx.<......
   1ea00:	ffa8a8a8 00000000 00000000 00000000     ................
   1ea10:	43000000 38504948 6e6f6420 48430a65     ...CHIP8 done.CH
   1ea20:	20385049 756f6873 6e20646c 6520746f     IP8 should not e
   1ea30:	7572646e 612f7473 732f7070 632f6372     ndrust/app/src/c
   1ea40:	38706968 0073722e 0001ea32 00000015     hip8.rs.2.......
   1ea50:	0000004c 00000005                       L.......

0001ea58 <_ZN3app5chip88PIXEL_ON17hd77974d73295a467E>:
   1ea58:	ffffffff ffffffff ffffffff ffffffff     ................
   1ea68:	ffffffff ffffffff ffffffff               ..............

0001ea76 <_ZN3app5chip89PIXEL_OFF17h40a5f2316b800b23E>:
	...
   1ea92:	20780000 7265766f 776f6c66 ea320000     ..x overflow..2.
   1eaa2:	00150001 008b0000 00090000 20790000     ..............y 
   1eab2:	7265766f 776f6c66 ea320000 00150001     overflow..2.....
   1eac2:	008c0000 00090000 ea320000 00150001     ..........2.....
   1ead2:	008d0000 00150000 00000000               ..............

0001eae0 <str.0>:
   1eae0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1eaf0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1eb00:	00000077 0001ea32 00000015 0000008d     w...2...........
   1eb10:	00000011 00000000 00000000 00000000     ................

0001eb20 <str.1>:
   1eb20:	65747461 2074706d 61206f74 77206464     attempt to add w
   1eb30:	20687469 7265766f 776f6c66 0001ea32     ith overflow2...
   1eb40:	00000015 0000008e 00000012 0001ea32     ............2...
   1eb50:	00000015 00000090 0000001d 0001ea32     ............2...
   1eb60:	00000015 00000091 0000001d 0001ea32     ............2...
   1eb70:	00000015 00000092 00000009 0001ea32     ............2...
   1eb80:	00000015 00000093 00000009 65747865     ............exte
   1eb90:	6620646e 656c6961 00000064 0001ea32     nd failed...2...
   1eba0:	00000015 00000097 00000009 0001ea32     ............2...
   1ebb0:	00000015 00000099 0000000d 00000000     ................

0001ebc0 <str.2>:
   1ebc0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1ebd0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1ebe0:	00000077 0001ea32 00000015 0000009a     w...2...........
   1ebf0:	0000000d 20746573 65786970 6620736c     ....set pixels f
   1ec00:	656c6961 00000064 0001ea32 00000015     ailed...2.......
   1ec10:	00000098 00000009 0001ea32 00000015     ........2.......
   1ec20:	000000ab 00000009 0001ea32 00000015     ........2.......
   1ec30:	000000ac 00000009 0001ea32 00000015     ........2.......
   1ec40:	000000ad 00000015 0001ea32 00000015     ........2.......
   1ec50:	000000ad 00000011 0001ea32 00000015     ........2.......
   1ec60:	000000ae 00000012 73746573 20657a69     ........setsize 
   1ec70:	000a202c 0001ea32 00000015 000000d4     , ..2...........
   1ec80:	00000012 50494843 6f742038 20686375     ....CHIP8 touch 
   1ec90:	20746f6e 646e6168 0a64656c 6c6c6163     not handled.call
   1eca0:	60206465 6974704f 3a3a6e6f 72776e75     ed `Option::unwr
   1ecb0:	29287061 6e6f2060 60206120 656e6f4e     ap()` on a `None
   1ecc0:	61762060 7365756c 66206970 6873756c     ` valuespi flush
   1ecd0:	69616620 73552f6c 2f737265 7070754c      fail/Users/Lupp
   1ece0:	69502f79 6954656e 702f656d 74656e69     y/PineTime/pinet
   1ecf0:	2d656d69 74737572 6e796d2d 2f747765     ime-rust-mynewt/
   1ed00:	74737572 3774732f 2d353337 2d64636c     rust/st7735-lcd-
   1ed10:	63746162 73722d68 6372732f 62696c2f     batch-rs/src/lib
   1ed20:	0073722e 0001ecd5 0000004e 000000fe     .rs.....N.......
   1ed30:	00000009 0001ecd5 0000004e 000000f3     ........N.......
   1ed40:	00000009 6573552f 4c2f7372 79707075     ..../Users/Luppy
   1ed50:	61632e2f 2f6f6772 69676572 79727473     /.cargo/registry
   1ed60:	6372732f 7469672f 2e627568 2d6d6f63     /src/github.com-
   1ed70:	63636531 39393236 65396264 33323863     1ecc6299db9ec823
   1ed80:	62696c2f 70696863 2e302d38 2f322e31     /libchip8-0.1.2/
   1ed90:	2f637273 2e62696c 00007372 0001ed44     src/lib.rs..D...
   1eda0:	00000056 0000009d 00000014 0001ed44     V...........D...
   1edb0:	00000056 000000d4 00000011 0001ed44     V...........D...
   1edc0:	00000056 000000d5 0000001a 00000000     V...............

0001edd0 <str.0>:
   1edd0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1ede0:	20687469 7265766f 776f6c66 0001ed44     ith overflowD...
   1edf0:	00000056 000000d5 00000011 00000005     V...............
   1ee00:	0001edfc 4c205d5b 78562044 495b202c     ....[] LD Vx, [I
   1ee10:	0000005d 0001ee04 00000001 0001ee05     ]...............
   1ee20:	0000000c 0001ee14 00000000 00000020     ............ ...
   1ee30:	00000008 00000002 00000000 00000000     ................
   1ee40:	00000004 00000003 0001ee28 6362696c     ........(...libc
   1ee50:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1ee60:	6e6e6e20 00000040 00000020 0001ee4c      nnn@... ...L...
   1ee70:	00000008 0001ee4c 00000008 0001ed44     ....L.......D...
   1ee80:	00000056 000001a1 0001ee6c 0001ed44     V.......l...D...
   1ee90:	00000056 000001a3 0000001d 0001ed44     V...........D...
   1eea0:	00000056 000001a4 0000002a 0001ed44     V.......*...D...
   1eeb0:	00000056 000001a4 00000021 0001ed44     V.......!...D...
   1eec0:	00000056 000001a4 00000015 444c205d     V...........] LD
   1eed0:	5d495b20 7856202c 0001ee04 00000001      [I], Vx........
   1eee0:	0001eecc 0000000c 0001eed8 0001ee4c     ............L...
   1eef0:	00000008 0001ee4c 00000008 0001ed44     ....L.......D...
   1ef00:	00000056 0000019a 0001eeec 0001ed44     V...........D...
   1ef10:	00000056 0000019c 0000001d 0001ed44     V...........D...
   1ef20:	00000056 0000019d 00000035 0001ed44     V.......5...D...
   1ef30:	00000056 0000019d 0000001e 0001ed44     V...........D...
   1ef40:	00000056 0000019d 00000015 444c205d     V...........] LD
   1ef50:	202c4220 00007856 0001ee04 00000001      B, Vx..........
   1ef60:	0001ef4c 0000000a 0001ef58 0001ee4c     L.......X...L...
   1ef70:	00000008 0001ee4c 00000008 0001ed44     ....L.......D...
   1ef80:	00000056 00000193 0001ef6c 0001ed44     V.......l...D...
   1ef90:	00000056 00000194 0000001b 0001ed44     V...........D...
   1efa0:	00000056 00000195 00000011 0001ed44     V...........D...
   1efb0:	00000056 00000196 0000001a 0001ed44     V...........D...
   1efc0:	00000056 00000196 00000011 0001ed44     V...........D...
   1efd0:	00000056 00000197 0000001a 0001ed44     V...........D...
   1efe0:	00000056 00000197 00000011 444c205d     V...........] LD
   1eff0:	202c4620 00007856 0001ee04 00000001      F, Vx..........
   1f000:	0001efec 0000000a 0001eff8 0001ee4c     ............L...
   1f010:	00000008 0001ee4c 00000008 0001ed44     ....L.......D...
   1f020:	00000056 0000018f 0001f00c 0001ed44     V...........D...
   1f030:	00000056 00000190 0000001b 0001ed44     V...........D...
   1f040:	00000056 00000190 0000001a 00000000     V...............

0001f050 <str.1>:
   1f050:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1f060:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1f070:	41205d77 49204444 7856202c 0001ee04     w] ADD I, Vx....
   1f080:	00000001 0001f071 0000000b 0001f07c     ....q.......|...
   1f090:	0001ee4c 00000008 0001ee4c 00000008     L.......L.......
   1f0a0:	0001ed44 00000056 0000018b 0001f090     D...V...........
   1f0b0:	0001ed44 00000056 0000018c 0000002e     D...V...........
   1f0c0:	444c205d 2c545320 00785620 0001ee04     ] LD ST, Vx.....
   1f0d0:	00000001 0001f0c0 0000000b 0001f0cc     ................
   1f0e0:	0001ee4c 00000008 0001ee4c 00000008     L.......L.......
   1f0f0:	0001ed44 00000056 00000187 0001f0e0     D...V...........
   1f100:	0001ed44 00000056 00000188 0000001b     D...V...........
   1f110:	444c205d 2c544420 00785620 0001ee04     ] LD DT, Vx.....
   1f120:	00000001 0001f110 0000000b 0001f11c     ................
   1f130:	0001ee4c 00000008 0001ee4c 00000008     L.......L.......
   1f140:	0001ed44 00000056 00000183 0001f130     D...V.......0...
   1f150:	0001ed44 00000056 00000184 0000001b     D...V...........
   1f160:	444c205d 2c785620 00004b20 0001ee04     ] LD Vx, K......
   1f170:	00000001 0001f160 0000000a 0001f16c     ....`.......l...
   1f180:	0001ee4c 00000008 0001ee4c 00000008     L.......L.......
   1f190:	0001ed44 00000056 0000017f 0001f180     D...V...........
   1f1a0:	0001ed44 00000056 00000180 00000011     D...V...........
   1f1b0:	444c205d 2c785620 00544420 0001ee04     ] LD Vx, DT.....
   1f1c0:	00000001 0001f1b0 0000000b 0001f1bc     ................
   1f1d0:	0001ee4c 00000008 0001ee4c 00000008     L.......L.......
   1f1e0:	0001ed44 00000056 0000017b 0001f1d0     D...V...{.......
   1f1f0:	0001ed44 00000056 0000017c 00000011     D...V...|.......
   1f200:	4b53205d 5620504e 00000078 0001ee04     ] SKNP Vx.......
   1f210:	00000001 0001f200 00000009 0001f20c     ................
   1f220:	0001ee4c 00000008 0001ee4c 00000008     L.......L.......
   1f230:	0001ed44 00000056 00000175 0001f220     D...V...u... ...
   1f240:	0001ed44 00000056 00000176 00000021     D...V...v...!...
   1f250:	0001ee04 00000001 0001ee54 00000008     ........T.......
   1f260:	0001f250 0001ee4c 00000008 0001ee4c     P...L.......L...
   1f270:	00000008 0001ed44 00000056 0000016f     ....D...V...o...
   1f280:	0001f264 0001ed44 00000056 00000170     d...D...V...p...
   1f290:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1f2a0:	006e202c 0001ee04 00000001 0001f294     , n.............
   1f2b0:	0000000f 0001f2a4 0001ee4c 00000008     ........L.......
   1f2c0:	0001ee4c 00000008 0001ed44 00000056     L.......D...V...
   1f2d0:	00000156 0001f2b8 0001ed44 00000056     V.......D...V...
   1f2e0:	00000157 0000001d 0001ed44 00000056     W.......D...V...
   1f2f0:	00000158 0000001d 0001ed44 00000056     X.......D...V...
   1f300:	0000015e 00000026 0001ed44 00000056     ^...&...D...V...
   1f310:	0000015e 0000001d 0001ed44 00000056     ^.......D...V...
   1f320:	00000160 00000021 00000000 00000000     `...!...........

0001f330 <str.2>:
   1f330:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1f340:	6574616c 65687420 6d657220 646e6961     late the remaind
   1f350:	77207265 20687469 69642061 6f736976     er with a diviso
   1f360:	666f2072 72657a20 0000006f 0001ed44     r of zero...D...
   1f370:	00000056 00000163 00000025 0001ed44     V...c...%...D...
   1f380:	00000056 00000165 0000002d 00000000     V...e...-.......

0001f390 <str.3>:
   1f390:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1f3a0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1f3b0:	00000077 0001ed44 00000056 00000165     w...D...V...e...
   1f3c0:	00000028 00000000 00000000 00000000     (...............

0001f3d0 <str.4>:
   1f3d0:	65747461 2074706d 73206f74 74666968     attempt to shift
   1f3e0:	66656c20 69772074 6f206874 66726576      left with overf
   1f3f0:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1f400:	0001ee04 00000001 0001f3f3 0000000c     ................
   1f410:	0001f400 0001ee4c 00000008 0001ee4c     ....L.......L...
   1f420:	00000008 0001ed44 00000056 00000152     ....D...V...R...
   1f430:	0001f414 0001ed44 00000056 00000153     ....D...V...S...
   1f440:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1f450:	0001ee04 00000001 0001f444 0000000c     ........D.......
   1f460:	0001f450 0001ee4c 00000008 0001ee4c     P...L.......L...
   1f470:	00000008 0001ed44 00000056 0000014e     ....D...V...N...
   1f480:	0001f464 444c205d 202c4920 006e6e6e     d...] LD I, nnn.
   1f490:	0001ee04 00000001 0001f484 0000000b     ................
   1f4a0:	0001f490 0001ee4c 00000008 0001ee4c     ....L.......L...
   1f4b0:	00000008 0001ed44 00000056 0000014a     ....D...V...J...
   1f4c0:	0001f4a4 4e53205d 78562045 7956202c     ....] SNE Vx, Vy
   1f4d0:	0001ee04 00000001 0001f4c4 0000000c     ................
   1f4e0:	0001f4d0 0001ee4c 00000008 0001ee4c     ....L.......L...
   1f4f0:	00000008 0001ed44 00000056 00000144     ....D...V...D...
   1f500:	0001f4e4 0001ed44 00000056 00000145     ....D...V...E...
   1f510:	00000014 0001ed44 00000056 00000145     ....D...V...E...
   1f520:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1f530:	0001ee04 00000001 0001f524 0000000c     ........$.......
   1f540:	0001f530 0001ee4c 00000008 0001ee4c     0...L.......L...
   1f550:	00000008 0001ed44 00000056 0000013f     ....D...V...?...
   1f560:	0001f544 0001ed44 00000056 00000140     D...D...V...@...
   1f570:	00000020 0001ed44 00000056 00000141      ...D...V...A...
   1f580:	0000001d 0001ed44 00000056 00000141     ....D...V...A...
   1f590:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   1f5a0:	00000079 0001ee04 00000001 0001f594     y...............
   1f5b0:	0000000d 0001f5a4 0001ee4c 00000008     ........L.......
   1f5c0:	0001ee4c 00000008 0001ed44 00000056     L.......D...V...
   1f5d0:	00000139 0001f5b8 0001ed44 00000056     9.......D...V...
   1f5e0:	0000013a 0000001e 0001ed44 00000056     :.......D...V...
   1f5f0:	0000013a 00000038 0001ed44 00000056     :...8...D...V...
   1f600:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   1f610:	7956202c 0001ee04 00000001 0001f608     , Vy............
   1f620:	0000000c 0001f614 0001ee4c 00000008     ........L.......
   1f630:	0001ee4c 00000008 0001ed44 00000056     L.......D...V...
   1f640:	00000134 0001f628 0001ed44 00000056     4...(...D...V...
   1f650:	00000135 0000001f 0001ed44 00000056     5.......D...V...
   1f660:	00000136 0000001d 0001ed44 00000056     6.......D...V...
   1f670:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   1f680:	7956202c 0001ee04 00000001 0001f678     , Vy........x...
   1f690:	0000000c 0001f684 0001ee4c 00000008     ........L.......
   1f6a0:	0001ee4c 00000008 0001ed44 00000056     L.......D...V...
   1f6b0:	0000012e 0001f698 0001ed44 00000056     ........D...V...
   1f6c0:	0000012f 0000001e 0001ed44 00000056     /.......D...V...
   1f6d0:	0000012f 00000038 0001ed44 00000056     /...8...D...V...
   1f6e0:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   1f6f0:	7956202c 0001ee04 00000001 0001f6e8     , Vy............
   1f700:	0000000c 0001f6f4 0001ee4c 00000008     ........L.......
   1f710:	0001ee4c 00000008 0001ed44 00000056     L.......D...V...
   1f720:	00000128 0001f708 0001ed44 00000056     (.......D...V...
   1f730:	00000129 0000001e 0001ed44 00000056     ).......D...V...
   1f740:	00000129 00000038 0001ed44 00000056     )...8...D...V...
   1f750:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   1f760:	7956202c 0001ee04 00000001 0001f758     , Vy........X...
   1f770:	0000000c 0001f764 0001ee4c 00000008     ....d...L.......
   1f780:	0001ee4c 00000008 0001ed44 00000056     L.......D...V...
   1f790:	00000124 0001f778 0001ed44 00000056     $...x...D...V...
   1f7a0:	00000125 0000001e 0001ed44 00000056     %.......D...V...
   1f7b0:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   1f7c0:	7956202c 0001ee04 00000001 0001f7b8     , Vy............
   1f7d0:	0000000c 0001f7c4 0001ee4c 00000008     ........L.......
   1f7e0:	0001ee4c 00000008 0001ed44 00000056     L.......D...V...
   1f7f0:	00000120 0001f7d8 0001ed44 00000056      .......D...V...
   1f800:	00000121 0000001e 0001ed44 00000056     !.......D...V...
   1f810:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   1f820:	00795620 0001ee04 00000001 0001f818      Vy.............
   1f830:	0000000b 0001f824 0001ee4c 00000008     ....$...L.......
   1f840:	0001ee4c 00000008 0001ed44 00000056     L.......D...V...
   1f850:	0000011c 0001f838 0001ed44 00000056     ....8...D...V...
   1f860:	0000011d 0000001e 0001ed44 00000056     ........D...V...
   1f870:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   1f880:	00795620 0001ee04 00000001 0001f878      Vy.........x...
   1f890:	0000000b 0001f884 0001ee4c 00000008     ........L.......
   1f8a0:	0001ee4c 00000008 0001ed44 00000056     L.......D...V...
   1f8b0:	00000118 0001f898 0001ed44 00000056     ........D...V...
   1f8c0:	00000119 0000001d 0001ed44 00000056     ........D...V...
   1f8d0:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   1f8e0:	6b6b202c 0001ee04 00000001 0001f8d8     , kk............
   1f8f0:	0000000c 0001f8e4 0001ee4c 00000008     ........L.......
   1f900:	0001ee4c 00000008 0001ed44 00000056     L.......D...V...
   1f910:	00000114 0001f8f8 0001ed44 00000056     ........D...V...
   1f920:	00000115 0000001d 0001ed44 00000056     ........D...V...
   1f930:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   1f940:	006b6b20 0001ee04 00000001 0001f938      kk.........8...
   1f950:	0000000b 0001f944 0001ee4c 00000008     ....D...L.......
   1f960:	0001ee4c 00000008 0001ed44 00000056     L.......D...V...
   1f970:	00000110 0001f958 0001ed44 00000056     ....X...D...V...
   1f980:	00000111 00000011 6e49205d 696c6176     ........] Invali
   1f990:	706f2064 0000203a 0001ee04 00000001     d op: ..........
   1f9a0:	0001f988 0000000e 0001f998 00000000     ................
   1f9b0:	00000020 00000008 00000002 00000000      ...............
   1f9c0:	00000000 00000004 00000003 00000001     ................
   1f9d0:	00000020 00000008 00000002 00000000      ...............
   1f9e0:	00000000 00000004 00000003 0001f9ac     ................
   1f9f0:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   1fa00:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   1fa10:	0001f9f0 0000001e 00000005 00000032     ............2...
   1fa20:	4553205d 2c785620 00795620 0001ee04     ] SE Vx, Vy.....
   1fa30:	00000001 0001fa20 0000000b 0001fa2c     .... .......,...
   1fa40:	0001ee4c 00000008 0001ee4c 00000008     L.......L.......
   1fa50:	0001ed44 00000056 0000010a 0001fa40     D...V.......@...
   1fa60:	0001ed44 00000056 0000010b 00000014     D...V...........
   1fa70:	0001ed44 00000056 0000010b 00000021     D...V.......!...
   1fa80:	4e53205d 78562045 6b6b202c 0001ee04     ] SNE Vx, kk....
   1fa90:	00000001 0001fa80 0000000c 0001fa8c     ................
   1faa0:	0001ee4c 00000008 0001ee4c 00000008     L.......L.......
   1fab0:	0001ed44 00000056 00000104 0001faa0     D...V...........
   1fac0:	0001ed44 00000056 00000105 00000014     D...V...........
   1fad0:	4553205d 20785620 00006b6b 0001ee04     ] SE Vx kk......
   1fae0:	00000001 0001fad0 0000000a 0001fadc     ................
   1faf0:	0001ee4c 00000008 0001ee4c 00000008     L.......L.......
   1fb00:	0001ed44 00000056 000000fe 0001faf0     D...V...........
   1fb10:	0001ed44 00000056 000000ff 00000014     D...V...........
   1fb20:	4143205d 6e204c4c 00006e6e 0001ee04     ] CALL nnn......
   1fb30:	00000001 0001fb20 0000000a 0001fb2c     .... .......,...
   1fb40:	0001ee4c 00000008 0001ee4c 00000008     L.......L.......
   1fb50:	0001ed44 00000056 000000f9 0001fb40     D...V.......@...
   1fb60:	0001ee04 00000001 0001ee5c 00000008     ........\.......
   1fb70:	0001fb60 0001ee4c 00000008 0001ee4c     `...L.......L...
   1fb80:	00000008 0001ed44 00000056 000000f5     ....D...V.......
   1fb90:	0001fb74 5953205d 6e6e2053 0000006e     t...] SYS nnn...
   1fba0:	0001ee04 00000001 0001fb94 00000009     ................
   1fbb0:	0001fba0 0001ee4c 00000008 0001ee4c     ....L.......L...
   1fbc0:	00000008 0001ed44 00000056 000000f1     ....D...V.......
   1fbd0:	0001fbb4 20746f6e 6c706d69 6e656d65     ....not implemen
   1fbe0:	00646574 0001f9f0 0000001e 00000002     ted.............
   1fbf0:	00000002 4552205d 00000054 0001ee04     ....] RET.......
   1fc00:	00000001 0001fbf4 00000005 0001fbfc     ................
   1fc10:	0001ee4c 00000008 0001ee4c 00000008     L.......L.......
   1fc20:	0001ed44 00000056 000000ec 0001fc10     D...V...........
   1fc30:	4c43205d 00000053 0001ee04 00000001     ] CLS...........
   1fc40:	0001fc30 00000005 0001fc38 0001ee4c     0.......8...L...
   1fc50:	00000008 0001ee4c 00000008 0001ed44     ....L.......D...
   1fc60:	00000056 000000e5 0001fc4c 0001ed44     V.......L...D...
   1fc70:	00000056 00000093 0000001b 0001ed44     V...........D...
   1fc80:	00000056 00000097 00000009 0001ed44     V...........D...
   1fc90:	00000056 000000bb 0000000d 0001ed44     V...........D...
   1fca0:	00000056 000000be 0000000d 6573552f     V.........../Use
   1fcb0:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   1fcc0:	69676572 79727473 6372732f 7469672f     registry/src/git
   1fcd0:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   1fce0:	65396264 33323863 626d652f 65646465     db9ec823/embedde
   1fcf0:	72672d64 69687061 302d7363 322e352e     d-graphics-0.5.2
   1fd00:	6372732f 6f6f632f 722e6472 726e5573     /src/coord.rsUnr
   1fd10:	68636165 656c6261 646e6920 00207865     eachable index .
   1fd20:	0001fd0d 00000012 0001fd20 0001fcac     ........ .......
   1fd30:	00000061 00000070 00000016              a...p.......

0001fd3c <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   1fd3c:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   1fd4c:	f010f010 10f09090 f080f010 80f0f010     ................
   1fd5c:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   1fd6c:	90f0f010 e09090f0 e090e090 808080f0     ................
   1fd7c:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   1fd8c:	72656874 73692065 206f6e20 68637573     there is no such
   1fd9c:	69687420 6120676e 6e612073 71636120      thing as an acq
   1fdac:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   1fdbc:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   1fdcc:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   1fddc:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   1fdec:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   1fdfc:	2f736f72 2e646f6d 00007372 0001fdbd     ros/mod.rs......
   1fe0c:	00000049 0000000a 00000009 72656874     I...........ther
   1fe1c:	73692065 206f6e20 68637573 69687420     e is no such thi
   1fe2c:	6120676e 20612073 656c6572 20657361     ng as a release 
   1fe3c:	64616f6c 00011dd5 00000000 00000001     load............
   1fe4c:	00012195 000121a1 000121ab 0001fe40     .!...!...!..@...
   1fe5c:	00011dd5 00000000 00000001 00012195     .............!..
   1fe6c:	000121a1 000121ab                       .!...!..

0001fe74 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   1fe74:	00697073 0001e044 65737361 6f697472     spi.D...assertio
   1fe84:	6166206e 64656c69 2860203a 7466656c     n failed: `(left
   1fe94:	203d3d20 68676972 0a602974 656c2020      == right)`.  le
   1fea4:	203a7466 0a2c6060 67697220 203a7468     ft: ``,. right: 
   1feb4:	203a6060 0001fe7c 0000002d 0001fea9     ``: |...-.......
   1fec4:	0000000c 0001feb5 00000003 0001feb8     ................
   1fed4:	20697073 666e6f63 66206769 006c6961     spi config fail.
   1fee4:	0001fed4 0000000f 0001fee4 0001fef0     ................
   1fef4:	74737572 6e796d2f 2f747765 2f637273     rust/mynewt/src/
   1ff04:	2e697073 00007372 0001fef4 00000016     spi.rs..........
   1ff14:	00000050 0000004a 20697073 66206263     P...J...spi cb f
   1ff24:	006c6961 0001ff1c 0000000b 0001ff28     ail.........(...
   1ff34:	0001fef4 00000016 00000057 00000005     ........W.......
   1ff44:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   1ff54:	0001ff44 0000000f 0001ff54 0001fef4     D.......T.......
   1ff64:	00000016 0000005a 00000037 6f697067     ....Z...7...gpio
   1ff74:	69616620 0000006c 0001ff70 00000009      fail...p.......
   1ff84:	0001ff7c 0001fef4 00000016 0000005b     |...........[...
   1ff94:	00000040 0001fef4 00000016 0000005c     @...........\...
   1ffa4:	00000040 6575716d 66206575 006c6961     @...mqueue fail.
   1ffb4:	0001ffa8 0000000b 0001ffb4 0001fef4     ................
   1ffc4:	00000016 00000065 00000005 206d6573     ....e.......sem 
   1ffd4:	6c696166 20697073 6c696166 0001ffd0     failspi fail....
   1ffe4:	00000008 0001ffe0 0001fef4 00000016     ................
   1fff4:	00000069 00000005 0001fef4 00000016     i...............
   20004:	0000006d 00000005 00000000 0001fe74     m...........t...
   20014:	00000004 0002000c 6e657665 66207174     ........eventq f
   20024:	006c6961 0001fef4 00000016 00000081     ail.............
   20034:	00000009 65737361 6f697472 6166206e     ....assertion fa
   20044:	64656c69 6e75203a 65666173 50207b20     iled: unsafe { P
   20054:	49444e45 435f474e 6c2e444d 29286e65     ENDING_CMD.len()
   20064:	3e207d20 00003020 0001fef4 00000016      } > 0..........
   20074:	00000097 00000005 0001fef4 00000016     ................
   20084:	000000a6 00000012 0001fef4 00000016     ................
   20094:	000000bf 00000035 00000000              ....5.......

000200a0 <str.0>:
   200a0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   200b0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   200c0:	00000077 0001fef4 00000016 000000c2     w...............
   200d0:	0000000f 00000000 00000000 00000000     ................

000200e0 <str.1>:
   200e0:	65747461 2074706d 61206f74 77206464     attempt to add w
   200f0:	20687469 7265766f 776f6c66 20746e69     ith overflowint 
   20100:	20697073 6c696166 0001fef4 00000016     spi fail........
   20110:	000000ff 00000011 0001fef4 00000016     ................
   20120:	0000010f 00000015 00000000 00000000     ................

00020130 <str.2>:
   20130:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20140:	20746361 68746977 65766f20 6f6c6672     act with overflo
   20150:	00000077 0001fef4 00000016 0000010d     w...............
   20160:	00000011 0001fef4 00000016 00000115     ................
   20170:	00000011 0001fef4 00000016 00000122     ............"...
   20180:	00000009 20646162 20697073 006e656c     ....bad spi len.
   20190:	0001fef4 00000016 00000129 00000005     ........).......
   201a0:	0001ffd8 00000008 000201a0 0001fef4     ................
   201b0:	00000016 0000013f 00000009 0001fef4     ....?...........
   201c0:	00000016 00000148 00000009 0001fef4     ....H...........
   201d0:	00000016 0000014c 00000030 0001fef4     ....L...0.......
   201e0:	00000016 00000158 00000005 0001fef4     ....X...........
   201f0:	00000016 0000015d 00000017 0001e044     ....].......D...
   20200:	65737361 6f697472 6166206e 64656c69     assertion failed
   20210:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   20220:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   20230:	67697220 203a7468 203a6060 00020200      right: ``: ....
   20240:	0000002d 0002022d 0000000c 00020239     -...-.......9...
   20250:	00000003 0002023c 20697073 666e6f63     ....<...spi conf
   20260:	66206769 006c6961 00020258 0000000f     ig fail.X.......
   20270:	00020268 00020274 74737572 6e796d2f     h...t...rust/myn
   20280:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   20290:	00020278 00000016 00000016 00000009     x...............
   202a0:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   202b0:	000202a0 0000000f 000202b0 00020278     ............x...
   202c0:	00000016 00000019 00000009 20697073     ............spi 
   202d0:	74696e69 69616620 0000006c 000202cc     init fail.......
   202e0:	0000000d 000202dc 00020278 00000016     ........x.......
   202f0:	0000001c 00000009 6f697067 69616620     ........gpio fai
   20300:	0000006c 000202f8 00000009 00020304     l...............
   20310:	00020278 00000016 00000045 00000009     x.......E.......
   20320:	00020278 00000016 0000006c 0000001b     x.......l.......

00020330 <str.0>:
   20330:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   20340:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   20350:	6c616377 2064656c 74704f60 3a6e6f69     wcalled `Option:
   20360:	776e753a 28706172 6f206029 2061206e     :unwrap()` on a 
   20370:	6e6f4e60 76206065 65756c61 6573552f     `None` value/Use
   20380:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   20390:	69676572 79727473 6372732f 7469672f     registry/src/git
   203a0:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   203b0:	65396264 33323863 6165682f 73656c70     db9ec823/heaples
   203c0:	2e302d73 2f312e35 2f637273 2e636576     s-0.5.1/src/vec.
   203d0:	00007372 0002037c 00000056 000001e8     rs..|...V.......
   203e0:	0000000d 00000000 00000000 00000000     ................

000203f0 <str.0>:
   203f0:	65747461 2074706d 61206f74 77206464     attempt to add w
   20400:	20687469 7265766f 776f6c66 552f2928     ith overflow()/U
   20410:	73726573 70754c2f 2e2f7970 67726163     sers/Luppy/.carg
   20420:	65722f6f 74736967 732f7972 672f6372     o/registry/src/g
   20430:	75687469 6f632e62 65312d6d 32366363     ithub.com-1ecc62
   20440:	62643939 38636539 682f3332 6c706165     99db9ec823/heapl
   20450:	2d737365 2e352e30 72732f31 65762f63     ess-0.5.1/src/ve
   20460:	73722e63 00000000 00000000 00000000     c.rs............

00020470 <str.0>:
   20470:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20480:	20746361 68746977 65766f20 6f6c6672     act with overflo
   20490:	00000077 0002040e 00000056 00000066     w.......V...f...
   204a0:	00000009 00000000 00000000 00000000     ................

000204b0 <str.1>:
   204b0:	65747461 2074706d 61206f74 77206464     attempt to add w
   204c0:	20687469 7265766f 776f6c66 0002040e     ith overflow....
   204d0:	00000056 0000003e 0000000c 0002040e     V...>...........
   204e0:	00000056 0000002d 00000009 0002040e     V...-...........
   204f0:	00000056 0000007e 00000011 0000aa63     V...~.......c...
   20500:	00000000 00000001 0001494b 0000a9a7     ........KI......
   20510:	00000002 00000002 00016e0f 6c6c6163     .........n..call
   20520:	60206465 75736552 3a3a746c 72776e75     ed `Result::unwr
   20530:	29287061 6e6f2060 206e6120 72724560     ap()` on an `Err
   20540:	61762060 6465756c 20776172 636f6c62     ` valuedraw bloc
   20550:	6620736b 726c6961 2f747375 74656970     ks failrust/piet
   20560:	626d652d 65646465 69702f64 652d7465     -embedded/piet-e
   20570:	6465626d 2d646564 70617267 73636968     mbedded-graphics
   20580:	6372732f 7369642f 79616c70 0073722e     /src/display.rs.
   20590:	00020557 00000038 00000080 00000005     W...8...........
   205a0:	6576656e 73757272 69702f74 652d7465     neverrust/piet-e
   205b0:	6465626d 2f646564 74656970 626d652d     mbedded/piet-emb
   205c0:	65646465 72672d64 69687061 732f7363     edded-graphics/s
   205d0:	622f6372 68637461 0073722e 000205a5     rc/batch.rs.....
   205e0:	00000036 000000be 00000019 000205a5     6...............
   205f0:	00000036 000000c3 0000001d 00000000     6...............

00020600 <str.0>:
   20600:	65747461 2074706d 61206f74 77206464     attempt to add w
   20610:	20687469 7265766f 776f6c66 000205a5     ith overflow....
   20620:	00000036 000000d5 00000015 000205a5     6...............
   20630:	00000036 00000104 00000019 000205a5     6...............
   20640:	00000036 00000109 0000001d 000205a5     6...............
   20650:	00000036 0000011d 00000015 6573552f     6.........../Use
   20660:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   20670:	69676572 79727473 6372732f 7469672f     registry/src/git
   20680:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   20690:	65396264 33323863 626d652f 65646465     db9ec823/embedde
   206a0:	72672d64 69687061 302d7363 322e352e     d-graphics-0.5.2
   206b0:	6372732f 6972702f 6974696d 2f736576     /src/primitives/
   206c0:	74636572 6c676e61 73722e65 0002065c     rectangle.rs\...
   206d0:	00000070 000000c0 00000032 00000000     p.......2.......

000206e0 <str.0>:
   206e0:	65747461 2074706d 61206f74 77206464     attempt to add w
   206f0:	20687469 7265766f 776f6c66 0002065c     ith overflow\...
   20700:	00000070 000000c2 00000031 00000000     p.......1.......

00020710 <str.1>:
   20710:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20720:	20746361 68746977 65766f20 6f6c6672     act with overflo
   20730:	00000077 0002065c 00000070 000000c4     w...\...p.......
   20740:	00000031 0002065c 00000070 000000c6     1...\...p.......
   20750:	00000031 65707845 64657463 72747320     1...Expected str
   20760:	00656b6f 0002065c 00000070 000000cc     oke.\...p.......
   20770:	00000019 0002065c 00000070 000000d5     ....\...p.......
   20780:	0000000d 0002065c 00000070 000000da     ....\...p.......
   20790:	00000011 6573552f 4c2f7372 79707075     ..../Users/Luppy
   207a0:	61632e2f 2f6f6772 69676572 79727473     /.cargo/registry
   207b0:	6372732f 7469672f 2e627568 2d6d6f63     /src/github.com-
   207c0:	63636531 39393236 65396264 33323863     1ecc6299db9ec823
   207d0:	6165682f 73656c70 2e302d73 2f312e35     /heapless-0.5.1/
   207e0:	2f637273 2e636576 00007372 00020794     src/vec.rs......
   207f0:	00000056 00000066 00000009 00000000     V...f...........

00020800 <str.0>:
   20800:	65747461 2074706d 61206f74 77206464     attempt to add w
   20810:	20687469 7265766f 776f6c66 00020794     ith overflow....
   20820:	00000056 0000003e 0000000c 00020794     V...>...........
   20830:	00000056 0000007e 00000011 00000000     V...~...........

00020840 <str.1>:
   20840:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20850:	20746361 68746977 65766f20 6f6c6672     act with overflo
   20860:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   20870:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   20880:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   20890:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   208a0:	20736920 00000000 00000020 00000008      is .... .......
   208b0:	00000002 00000000 00000000 00000002     ................
   208c0:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   208d0:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   208e0:	73722e65 00000000 00000020 00000004     e.rs.... .......
   208f0:	00000002 00000000 00000002 00000000     ................
   20900:	00000003 00000000 00000020 00000008     ........ .......
   20910:	00000002 00000000 00000001 00000001     ................
   20920:	00000003 002e2e60 00020925 00000002     ....`...%.......
   20930:	65726c61 20796461 72726f62 6465776f     already borrowed
   20940:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   20950:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   20960:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

00020970 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   20970:	00010201 00000000 00000000 00000000     ................
   20980:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   20990:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   209a0:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   209b0:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   209c0:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   209d0:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   209e0:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   209f0:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   20a00:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   20a10:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   20a20:	656e6f4e 61762060 0065756c 00020864     None` value.d...
   20a30:	00000000 0000203a 00020864 00000000     ....: ..d.......
   20a40:	00020a34 00000002 000170c3 00000000     4........p......
   20a50:	00000001 00017113 74756220 65687420     .....q.. but the
   20a60:	646e6920 69207865 00002073 00020884      index is ......
   20a70:	00000020 00020a58 00000012 000170c3      ...X........p..
   20a80:	0000000c 00000004 0001735b 000176b1     ........[s...v..
   20a90:	00017761 202c0a2c 2c280a28 30783029     aw..,., (.(,)0x0
   20aa0:	30313030 30333032 30353034 30373036     0010203040506070
   20ab0:	31393038 31313130 31333132 31353134     8091011121314151
   20ac0:	31373136 32393138 32313230 32333232     6171819202122232
   20ad0:	32353234 32373236 33393238 33313330     4252627282930313
   20ae0:	33333332 33353334 33373336 34393338     2333435363738394
   20af0:	34313430 34333432 34353434 34373436     0414243444546474
   20b00:	35393438 35313530 35333532 35353534     8495051525354555
   20b10:	35373536 36393538 36313630 36333632     6575859606162636
   20b20:	36353634 36373636 37393638 37313730     4656667686970717
   20b30:	37333732 37353734 37373736 38393738     2737475767778798
   20b40:	38313830 38333832 38353834 38373836     0818283848586878
   20b50:	39393838 39313930 39333932 39353934     8899091929394959
   20b60:	39373936 00393938 000170c3 00000004     6979899..p......
   20b70:	00000004 00017785 0001778b 00017791     .....w...w...w..
   20b80:	2f637273 6362696c 2f65726f 2f746d66     src/libcore/fmt/
   20b90:	2e646f6d 00007372 00020b80 00000016     mod.rs..........
   20ba0:	0000043b 00000011 00020b80 00000016     ;...............
   20bb0:	00000445 00000024 2f637273 6362696c     E...$...src/libc
   20bc0:	2f65726f 63696c73 6f6d2f65 73722e64     ore/slice/mod.rs
   20bd0:	65646e69 6f202078 6f207475 61722066     index  out of ra
   20be0:	2065676e 20726f66 63696c73 666f2065     nge for slice of
   20bf0:	6e656c20 20687467 00020bd0 00000006      length ........
   20c00:	00020bd6 00000022 00020bb8 00000018     ...."...........
   20c10:	00000a72 00000005 63696c73 6e692065     r.......slice in
   20c20:	20786564 72617473 61207374 62202074     dex starts at  b
   20c30:	65207475 2073646e 00207461 00020c18     ut ends at .....
   20c40:	00000016 00020c2e 0000000d 00020bb8     ................
   20c50:	00000018 00000a78 00000005 696e6966     ....x.......fini
   20c60:	64656873 73796168 6b636174 79622820     shedhaystack (by
   20c70:	20736574 6167654e 65766974 69736f50     tes NegativePosi
   20c80:	65766974 65746e69 6c617267 61706e55     tiveintegralUnpa
   20c90:	64656b63 69666e49 6574696e 756e694d     ckedInfiniteMinu
   20ca0:	77615273 7265764f 776f6c66 6b636162     sRawOverflowback
   20cb0:	72657469 6f746e49 72657449 61636f6c     iterIntoIterloca
   20cc0:	6e6f6974 61636f4c 6e6f6974 72616573     tionLocationsear
   20cd0:	72656863 69736f70 6e6f6974 74697263     cherpositioncrit
   20ce0:	736f705f 656e694c 796e4173 57776152     _posLinesAnyRawW
   20cf0:	72656b61 6f6c6c41 72724563 38746e69     akerAllocErrint8
   20d00:	745f3478 2f637273 6362696c 2f65726f     x4_tsrc/libcore/
   20d10:	2f727473 2e646f6d 2e5b7372 625d2e2e     str/mod.rs[...]b
   20d20:	20657479 65646e69 69202078 756f2073     yte index  is ou
   20d30:	666f2074 756f6220 2073646e 6020666f     t of bounds of `
   20d40:	00020d1f 0000000b 00020d2a 00000016     ........*.......
   20d50:	00020924 00000001 00020d04 00000016     $...............
   20d60:	00000853 00000009 69676562 3d3c206e     S.......begin <=
   20d70:	646e6520 00002820 00020d68 0000000e      end (..h.......
   20d80:	00020994 00000004 00020940 00000010     ........@.......
   20d90:	00020924 00000001 00020d04 00000016     $...............
   20da0:	00000857 00000005 00020d04 00000016     W...............
   20db0:	00000868 0000000e 20736920 20746f6e     h....... is not 
   20dc0:	68632061 62207261 646e756f 3b797261     a char boundary;
   20dd0:	20746920 69207369 6469736e 20292065      it is inside ) 
   20de0:	6020666f 00020d1f 0000000b 00020db8     of `............
   20df0:	00000026 00020c6c 00000008 00020dde     &...l...........
   20e00:	00000006 00020924 00000001 00020d04     ....$...........
   20e10:	00000016 0000086a 00000005 000208c4     ....j...........
   20e20:	00000020 0000001a 00000028 05030100      .......(.......
   20e30:	03060605 08080607 1c0a1109 140c190b     ................
   20e40:	0d0e120d 0310040f 09131212 05170116     ................
   20e50:	03190218 021c071a 161f011d 042b0320     ............ .+.
   20e60:	0b2d022c 0330012e 01320231 02a902a7     ,.-...0.1.2.....
   20e70:	08ab04aa 05fb02fa 03fe04fd 78ad09ff     ...............x
   20e80:	a28d8b79 8b585730 1d1c908c 4b0f0edd     y...0WX........K
   20e90:	2efcfb4c 5d5c3f2f 84e2b55f 92918e8d     L.../?\]_.......
   20ea0:	bbbab1a9 cac9c6c5 ffe5e4de 12110400     ................
   20eb0:	37343129 493d3b3a 8e845d4a b4b1a992     )147:;=IJ]......
   20ec0:	cac6bbba e5e4cfce 0e0d0400 31291211     ..............)1
   20ed0:	453b3a34 5e4a4946 91846564 cec99d9b     4:;EFIJ^de......
   20ee0:	29110dcf 64574945 a9918d65 c5bbbab4     ...)EIWde.......
   20ef0:	e5e4dfc9 110d04f0 65644945 b2848180     ........EIde....
   20f00:	d5bfbebc 83f1f0d7 a6a48b85 c7c5bfbe     ................
   20f10:	dbdacfce cdbd9848 49cfcec6 59574f4e     ....H......INOWY
   20f20:	8e895f5e b7b6b18f c7c6c1bf 171611d7     ^_..............
   20f30:	f7f65c5b 0d80fffe dfde716d 6e1f0f0e     [\......mq.....n
   20f40:	5f1d1c6f afae7e7d 16fabcbb 461f1e17     o.._}~.........F
   20f50:	584f4e47 7e5e5c5a d4c5b57f f1f0dcd5     GNOXZ\^~........
   20f60:	8f7372f5 97967574 2e265f2f b7afa72f     .rs.tu../_&./...
   20f70:	d7cfc7bf 97409adf 1f8f3098 ffcec1c0     ......@..0......
   20f80:	5b5a4f4e 100f0807 efee2f27 3d376f6e     NOZ[....'/..no7=
   20f90:	9045423f 53fffe91 c9c87567 d9d8d1d0     ?BE....Sgu......
   20fa0:	00fffee7 82225f20 448204df 06041b08     .... _"....D....
   20fb0:	0eac8111 1e35ab80 03e08015 04010819     ......5.........
   20fc0:	0434042f 07010307 0a110706 07120f50     /.4.........P...
   20fd0:	04020855 03090a1c 03070308 03030302     U...............
   20fe0:	0305040c 0e01060b 033a0515 05060711     ..........:.....
   20ff0:	07570710 0d150702 03430450 0401032d     ..W.....P.C.-...
   21000:	0c0f0611 251d043a 046d205f c880256a     ....:..%_ m.j%..
   21010:	03b08205 fd82061a 15075903 1409170b     .........Y......
   21020:	6a0c140c 1a060a06 2b075906 2c0a4605     ...j.....Y.+.F.,
   21030:	01040c04 2c0b3103 0b061a04 06ac8003     .....1.,........
   21040:	411f060a 032d044c 033c0874 073c030f     ...AL.-.t.<...<.
   21050:	052b0838 1811ff82 2d112f08 21102003     8.+....../.-. .!
   21060:	048c800f 0b199782 05948815 073b052f     ............/.;.
   21070:	09180e02 7430b080 1ad6800c ff80050c     ......0t........
   21080:	05b68005 c69b0c24 1030d20a 37038d84     ....$.....0....7
   21090:	145c8109 8008b880 043530c7 0838060a     ..\......05...8.
   210a0:	060c0846 031e0b74 0959045a 1c188380     F...t...Z.Y.....
   210b0:	4809160a 068a8008 170ca4ab 04a13104     ...H.........1..
   210c0:	0726da81 8005050c 6d8111a5 2a287810     ..&........m.x(*
   210d0:	80044c06 be80048d 0f031b03 0106000d     .L..............
   210e0:	04010301 09080802 0b050a02 11011002     ................
   210f0:	13051204 15021411 19021702 1d051c04     ................
   21100:	6a012408 bc026b03 d402d102 d609d50c     .$.j.k..........
   21110:	da02d702 e105e001 ee02e802 f904f020     ............ ...
   21120:	0c02fa06 4e3e3b27 9e9e8f4f 0907069f     ....';>NO.......
   21130:	563e3d36 04d1d0f3 37361814 35bd5756     6=>V......67VW.5
   21140:	12e0cfce 9e8e8987 110e0d04 34312912     .............)14
   21150:	4946453a 644f4e4a b65c5a65 a81c1bb7     :EFIJNOdeZ\.....
   21160:	09d9d8a9 a8919037 3e3b0a07 928f6966     ....7.....;>fi..
   21170:	efee5f6f 9b9a625a 9d552827 a4a3a1a0     o_..Zb..'(U.....
   21180:	baada8a7 0b06c4bc 3a1d150c a651453f     ...........:?EQ.
   21190:	a0cdcca7 221a1907 c53f3e25 232004c6     ......."%>?... #
   211a0:	33282625 4a483a38 5553504c 5c5a5856     %&(38:HJLPSUVXZ\
   211b0:	6563605e 78736b66 a48a7f7d c0b0afaa     ^`cefksx}.......
   211c0:	a3720cd0 6ecccba4 7b225e6f 2d040305     ..r....no^"{...-
   211d0:	01046503 82802e2f 0f31031d 0924041c     .e../.....1...$.
   211e0:	052b051e 2a0e0444 2406aa80 28042404     ..+.D..*...$.$.(
   211f0:	010b3408 37819080 080a1609 03399880     .4.....7......9.
   21200:	30090863 03210516 4001051b 054b0438     c..0..!....@8.K.
   21210:	070a042f 20400709 090c0427 053a0336     /.....@ '...6.:.
   21220:	0c04071a 37495007 07330d33 810a082e     .....PI73.3.....
   21230:	81801f26 802a0828 4e091786 430f1e04     &...(.*....N...C
   21240:	0a07190e 27094706 3f0b7509 3b062a41     .....G.'.u.?A*.;
   21250:	51060a05 10050106 8b800503 08482060     ...Q........` H.
   21260:	5ea6800a 0a0b4522 39130d06 2c360a07     ...^"E.....9..6,
   21270:	c0801004 0c53643c 45a08001 5308481b     ....<dS....E.H.S
   21280:	0781391d 031d0a46 03374947 060a080e     .9..F...GI7.....
   21290:	810a0739 c7801936 9b830d32 800b7566     9...6...2...fu..
   212a0:	84bc8ac4 82d18f2f 82b9a147 042a0739     ..../...G...9.*.
   212b0:	0a266002 05280a46 5bb08213 39044b65     .`&.F.(....[eK.9
   212c0:	04401107 08f8971c 0da5f382 03311f81     ..@...........1.
   212d0:	81080411 6b04898c 09030d05 60931007     .......k.......`
   212e0:	730af680 46176e08 0c149a80 80190957     ...s.n.F....W...
   212f0:	03478187 150f4285 802b5085 1a032dd5     ..G..B...P+..-..
   21300:	70810204 8501053a 29d78000 040a044c     ...p:......)L...
   21310:	44118302 c2803d4c 0401063c 341b0555     ...DL=..<...U..4
   21320:	2c0e8102 560c6404 5d030d0a 1d393d03     ...,.d.V...].=9.
   21330:	09042c0d 060e0207 d6839a80 0b030d0a     .,..............
   21340:	590c7405 0c140c07 0a083804 1e082806     .t.Y.....8...(..
   21350:	31037752 0ca68003 05030414 85060d03     Rw.1............
   21360:	6372736a 62696c2f 65726f63 696e752f     jsrc/libcore/uni
   21370:	65646f63 646f6d2f 0073722e 00021361     code/mod.rs.a...
   21380:	0000001a 00000038 0000000f 00021361     ....8.......a...
   21390:	0000001a 00000039 00000010              ....9.......

0002139c <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   2139c:	1b150f04 17120319 0e000011 00000016     ................
	...
   213c4:	00130600 00000000 00000000 00000000     ................
   213d4:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   213f4:	01050000 00000000 00000000 00000000     ................
   21404:	00000000 10000000 00000000 0009000b     ................
   21414:	                                         ...

00021417 <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   21433:	00120f00 00000000 00000000 00000000     ................
   21443:	0000001f 00000000 00000000 00000000     ................
   21453:	1d664649 00000000 00000000 00000000     IFf.............
   21463:	00003e8a 00000000 00000000 4b000000     .>.............K
   21473:	00000053 00000000 00000000 42236700     S............g#B
	...
   2148f:	0000003d 00230000 00000000 00000000     =.....#.........
   2149f:	2d000075 00000000 00000000 00000000     u..-............
   214af:	003c4e82 00000000 00000000 63000000     .N<............c
   214bf:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   214cf:	00000300 00000000 00000000 0000002f     ............/...
   214df:	00000000 00001000 13000000 00000800     ................
	...
   214f7:	43000000 89007200 00000000 00000000     ...C.r..........
   21507:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   21517:	00210000 00000000 00000000 00000000     ..!.............
   21527:	4100000a 00000000 00000000 00000000     ...A............
   21537:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   21547:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   21557:	00000031 00000053 3a000000 00000000     1...S......:....
   21567:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   21577:	0017003b 00000000 00000000 00000000     ;...............
   21587:	57000055 83000000 00000000 00000000     U..W............
   21597:	00000059 26000000 00161b6e 00000000     Y......&n.......
   215a7:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   215b7:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   215c7:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   215d7:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   215e7:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   215f7:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

00021608 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   21610:	00000001 00000000 0000000d 00000000     ................
   21620:	0000001c 00000000 00000040 00000000     ........@.......
   21630:	000000b6 00000000 000000bf 00000000     ................
   21640:	000003f8 00000000 000007f0 00000000     ................
   21650:	000007ff 00000000 00001000 00000000     ................
   21660:	00001e00 00000000 00003800 00000000     .........8......
   21670:	00003f00 00000000 00007f80 00000000     .?..............
   21680:	00008000 00000000 0001ffc0 00000000     ................
   21690:	0003ff80 00000000 00078000 00000000     ................
   216a0:	007f0000 00000000 00802001 00000000     ......... ......
   216b0:	00a30000 00000000 037ffc00 00000000     ................
   216c0:	06000000 00000000 07ff0000 00000000     ................
   216d0:	09800000 00000000 0e000000 00000000     ................
   216e0:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   216f0:	200ffe40 00000000 30000001 00000000     @.. .......0....
   21700:	40000000 00000000 4000005c 00000000     ...@....\..@....
   21710:	60000000 00000000 805c8400 00000000     ...`......\.....
   21720:	c0000000 00000000 e0000000 00000000     ................
   21730:	00000000 00000001 0cf00000 00000001     ................
   21740:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   21750:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   21760:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   21770:	00000000 00000060 00000844 00000060     ....`...D...`...
   21780:	00000000 000000f0 00000060 00000200     ........`.......
   21790:	f9ffff7f 000007db 80000000 000007f8     ................
   217a0:	e0000000 00000fbc 00000000 00002120     ............ !..
   217b0:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   217c0:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   217d0:	00000000 00003fc0 00000000 0000f000     .....?..........
   217e0:	00000000 0000fc00 f8000010 0000fffe     ................
   217f0:	0000ffff 0000ffff ffffffff 0000ffff     ................
   21800:	fffff800 00010000 00000000 0001ffc0     ................
   21810:	ffff0000 0001ffff 00000000 00030000     ................
   21820:	00000000 00038000 00000000 0003a340     ............@...
   21830:	00000000 00080000 000c0000 000c0000     ................
   21840:	00000004 000ff800 00000000 00180000     ................
   21850:	001c0000 001c0000 c3000000 001e0001     ................
   21860:	00000000 001f0000 00800001 001f1fc0     ................
   21870:	00000007 001fef80 ffffffff 00201fff     .............. .
   21880:	00023986 00230000 00000002 00403000     .9....#......0@.
   21890:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   218a0:	00000000 007f0000 00000000 00bf2800     .............(..
   218b0:	00000000 00cff000 03000000 02a00000     ................
   218c0:	fff70000 031021fd 00000003 06780000     .....!........x.
   218d0:	00000000 06ff8000 00000000 07c00000     ................
   218e0:	00000000 07f20000 00000000 0e040187     ................
   218f0:	00000006 10000000 00001008 10000000     ................
   21900:	00000007 14000000 0000000f 17f00000     ................
   21910:	00000000 1ff20000 feffe0df 1fffffff     ................
   21920:	00000000 20000000 00000000 200ff800     ....... ....... 
   21930:	00000007 33c80000 00000000 3fb00000     .......3.......?
   21940:	00000000 3ff78000 00000004 40000000     .......?.......@
   21950:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   21960:	00000002 50000000 00000003 58000000     .......P.......X
   21970:	00000000 66fde000 000007fe 79f80000     .......f.......y
   21980:	00000003 7fc00000 00000000 7ffe0000     ................
   21990:	00000000 7fff0000 00000000 80000000     ................
   219a0:	0000007f 80000000 00000030 8003ffff     ........0.......
   219b0:	0000f06e 87000000 00000002 90000000     n...............
   219c0:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   219d0:	00000000 a7f80000 00000000 b03c8000     ..............<.
   219e0:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   219f0:	fffe0000 bfffffff 00000011 c0000000     ................
   21a00:	00000000 c19d0000 00000002 d0000000     ................
   21a10:	00000000 f807c3a0 ffffffff f87fffff     ................
   21a20:	ffffffff fbffffff 000021be fc00000c     .........!......
   21a30:	00000000 ff000000 00000002 ff000000     ................
   21a40:	00020000 ffff0000 fff80000 fffffffb     ................
   21a50:	00000000 ffffffff ffffffff ffffffff     ................
   21a60:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

00021a70 <nrf52_hal_i2cs>:
   21a70:	00000000 20000108                       ....... 

00021a78 <nrf52_hal_spis>:
   21a78:	2000c5c0 00000000 00000000 65737341     ... ........Asse
   21a88:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   21a98:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   21aa8:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   21ab8:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   21ac8:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   21ad8:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   21ae8:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   21af8:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   21b08:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   21b18:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   21b28:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   21b38:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   21b48:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   21b58:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   21b68:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   21b78:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   21b88:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   21b98:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   21ba8:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   21bb8:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   21bc8:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   21bd8:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   21be8:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   21bf8:	00000000 656c6469 00000000 7379736d     ....idle....msys
   21c08:	0000315f                                _1..

00021c0c <MemFile_methods>:
   21c0c:	0001bf91 00000000                       ........

00021c14 <stdout>:
   21c14:	20000124                                $.. 

00021c18 <nrf52k_flash_dev>:
   21c18:	00021c30 00000000 00080000 00000080     0...............
   21c28:	00000001 000000ff                       ........

00021c30 <nrf52k_flash_funcs>:
   21c30:	0001c1fd 0001c12d 0001c0b5 0001c10d     ....-...........
   21c40:	00000000 0001c109 00000000              ............

00021c4c <nrf52_hal_timers>:
   21c4c:	2000c6d0 00000000 00000000 00000000     ... ............
	...

00021c64 <hal_i2c1_cfg>:
   21c64:	00000007 00000006 00000064              ........d...

00021c70 <os_bsp_spi0m_cfg>:
   21c70:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   21c80:	7476655f 00000073                       _evts...

00021c88 <COLLECTOR_NODE_HW_ID>:
   21c88:	066aff57 50547878 67242949              W.j.xxTPI)$g

00021c94 <SENSOR_NODE_HW_IDS>:
   21c94:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   21ca4:	08070605 020b0a09 04030201 08070605     ................
   21cb4:	030b0a09 04030201 08070605 040b0a09     ................
   21cc4:	04030201 08070605 050b0a09 77687325     ............%shw
   21cd4:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   21ce4:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   21cf4:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   21d04:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   21d14:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   21d24:	0a732520 00000000 00000000               %s.........

00021d30 <sensor_node_addresses>:
   21d30:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   21d40:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   21d50:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   21d60:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   21d70:	00000a73                                s...

00021d74 <g_temp_stub_sensor_driver>:
   21d74:	0001d039 0001cf41 00000000 00000000     9...A...........
	...
   21d9c:	20425453 64616572 6d657420 65732070     STB read temp se
   21dac:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   21dbc:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

00021dcc <sysflash_map_dflt>:
	...
   21dd4:	00004000 00000001 00008000 00073c00     .@...........<..
   21de4:	00000002 0007bc00 00000400 00000003     ................
   21df4:	0007c000 00001000 00000010 00004000     .............@..
   21e04:	00004000 00000011 0007d000 00003000     .@...........0..
   21e14:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   21e24:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 106028	    108	  51000	 157136	  265d0	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
